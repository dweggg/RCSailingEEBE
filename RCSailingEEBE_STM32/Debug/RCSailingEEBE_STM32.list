
RCSailingEEBE_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079c8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  08007b68  08007b68  00008b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d5c  08007d5c  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  08007d5c  08007d5c  00008d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d64  08007d64  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d64  08007d64  00008d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d68  08007d68  00008d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007d6c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e4c  20000060  08007dcc  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004eac  08007dcc  00009eac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e6f8  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004539  00000000  00000000  00027788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a00  00000000  00000000  0002bcc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000142d  00000000  00000000  0002d6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ace1  00000000  00000000  0002eaf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e7c7  00000000  00000000  000497d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6c64  00000000  00000000  00067f9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010ec01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006eb8  00000000  00000000  0010ec44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00115afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007b50 	.word	0x08007b50

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08007b50 	.word	0x08007b50

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <adc_read>:
 *      Author: dweggg
 */

#include "ANALOG.h"

void adc_read(void){
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0

}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr

080004de <control>:
 *      Author: dweggg
 */

#include "CONTROL.h"

void control(void){
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0

}
 80004e2:	bf00      	nop
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr

080004ec <imu_read>:
 *      Author: dweggg
 */

#include "IMU.h"

void imu_read(void){
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0

}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr

080004fa <telemetry>:
 *      Author: dweggg
 */

#include "TELEMETRY.h"

void telemetry(void){
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0

}
 80004fe:	bf00      	nop
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr

08000508 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800050e:	463b      	mov	r3, r7
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800051a:	4b36      	ldr	r3, [pc, #216]	@ (80005f4 <MX_ADC1_Init+0xec>)
 800051c:	4a36      	ldr	r2, [pc, #216]	@ (80005f8 <MX_ADC1_Init+0xf0>)
 800051e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000520:	4b34      	ldr	r3, [pc, #208]	@ (80005f4 <MX_ADC1_Init+0xec>)
 8000522:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000526:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000528:	4b32      	ldr	r3, [pc, #200]	@ (80005f4 <MX_ADC1_Init+0xec>)
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800052e:	4b31      	ldr	r3, [pc, #196]	@ (80005f4 <MX_ADC1_Init+0xec>)
 8000530:	2201      	movs	r2, #1
 8000532:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000534:	4b2f      	ldr	r3, [pc, #188]	@ (80005f4 <MX_ADC1_Init+0xec>)
 8000536:	2200      	movs	r2, #0
 8000538:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800053a:	4b2e      	ldr	r3, [pc, #184]	@ (80005f4 <MX_ADC1_Init+0xec>)
 800053c:	2200      	movs	r2, #0
 800053e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000542:	4b2c      	ldr	r3, [pc, #176]	@ (80005f4 <MX_ADC1_Init+0xec>)
 8000544:	2200      	movs	r2, #0
 8000546:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000548:	4b2a      	ldr	r3, [pc, #168]	@ (80005f4 <MX_ADC1_Init+0xec>)
 800054a:	4a2c      	ldr	r2, [pc, #176]	@ (80005fc <MX_ADC1_Init+0xf4>)
 800054c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800054e:	4b29      	ldr	r3, [pc, #164]	@ (80005f4 <MX_ADC1_Init+0xec>)
 8000550:	2200      	movs	r2, #0
 8000552:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000554:	4b27      	ldr	r3, [pc, #156]	@ (80005f4 <MX_ADC1_Init+0xec>)
 8000556:	2204      	movs	r2, #4
 8000558:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800055a:	4b26      	ldr	r3, [pc, #152]	@ (80005f4 <MX_ADC1_Init+0xec>)
 800055c:	2201      	movs	r2, #1
 800055e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000562:	4b24      	ldr	r3, [pc, #144]	@ (80005f4 <MX_ADC1_Init+0xec>)
 8000564:	2200      	movs	r2, #0
 8000566:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000568:	4822      	ldr	r0, [pc, #136]	@ (80005f4 <MX_ADC1_Init+0xec>)
 800056a:	f000 ff3f 	bl	80013ec <HAL_ADC_Init>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000574:	f000 fb44 	bl	8000c00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000578:	2301      	movs	r3, #1
 800057a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800057c:	2301      	movs	r3, #1
 800057e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000580:	2300      	movs	r3, #0
 8000582:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000584:	463b      	mov	r3, r7
 8000586:	4619      	mov	r1, r3
 8000588:	481a      	ldr	r0, [pc, #104]	@ (80005f4 <MX_ADC1_Init+0xec>)
 800058a:	f000 ff73 	bl	8001474 <HAL_ADC_ConfigChannel>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000594:	f000 fb34 	bl	8000c00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000598:	2302      	movs	r3, #2
 800059a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800059c:	2302      	movs	r3, #2
 800059e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005a0:	463b      	mov	r3, r7
 80005a2:	4619      	mov	r1, r3
 80005a4:	4813      	ldr	r0, [pc, #76]	@ (80005f4 <MX_ADC1_Init+0xec>)
 80005a6:	f000 ff65 	bl	8001474 <HAL_ADC_ConfigChannel>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80005b0:	f000 fb26 	bl	8000c00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80005b4:	2303      	movs	r3, #3
 80005b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80005b8:	2303      	movs	r3, #3
 80005ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005bc:	463b      	mov	r3, r7
 80005be:	4619      	mov	r1, r3
 80005c0:	480c      	ldr	r0, [pc, #48]	@ (80005f4 <MX_ADC1_Init+0xec>)
 80005c2:	f000 ff57 	bl	8001474 <HAL_ADC_ConfigChannel>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80005cc:	f000 fb18 	bl	8000c00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80005d0:	2304      	movs	r3, #4
 80005d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80005d4:	2304      	movs	r3, #4
 80005d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005d8:	463b      	mov	r3, r7
 80005da:	4619      	mov	r1, r3
 80005dc:	4805      	ldr	r0, [pc, #20]	@ (80005f4 <MX_ADC1_Init+0xec>)
 80005de:	f000 ff49 	bl	8001474 <HAL_ADC_ConfigChannel>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80005e8:	f000 fb0a 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005ec:	bf00      	nop
 80005ee:	3710      	adds	r7, #16
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	2000007c 	.word	0x2000007c
 80005f8:	40012000 	.word	0x40012000
 80005fc:	0f000001 	.word	0x0f000001

08000600 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b08a      	sub	sp, #40	@ 0x28
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000608:	f107 0314 	add.w	r3, r7, #20
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a2f      	ldr	r2, [pc, #188]	@ (80006dc <HAL_ADC_MspInit+0xdc>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d157      	bne.n	80006d2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	613b      	str	r3, [r7, #16]
 8000626:	4b2e      	ldr	r3, [pc, #184]	@ (80006e0 <HAL_ADC_MspInit+0xe0>)
 8000628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800062a:	4a2d      	ldr	r2, [pc, #180]	@ (80006e0 <HAL_ADC_MspInit+0xe0>)
 800062c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000630:	6453      	str	r3, [r2, #68]	@ 0x44
 8000632:	4b2b      	ldr	r3, [pc, #172]	@ (80006e0 <HAL_ADC_MspInit+0xe0>)
 8000634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800063a:	613b      	str	r3, [r7, #16]
 800063c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	4b27      	ldr	r3, [pc, #156]	@ (80006e0 <HAL_ADC_MspInit+0xe0>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000646:	4a26      	ldr	r2, [pc, #152]	@ (80006e0 <HAL_ADC_MspInit+0xe0>)
 8000648:	f043 0301 	orr.w	r3, r3, #1
 800064c:	6313      	str	r3, [r2, #48]	@ 0x30
 800064e:	4b24      	ldr	r3, [pc, #144]	@ (80006e0 <HAL_ADC_MspInit+0xe0>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ANALOG1_Pin|ANALOG2_Pin|ANALOG3_Pin|ANALOG4_Pin;
 800065a:	231e      	movs	r3, #30
 800065c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800065e:	2303      	movs	r3, #3
 8000660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	4619      	mov	r1, r3
 800066c:	481d      	ldr	r0, [pc, #116]	@ (80006e4 <HAL_ADC_MspInit+0xe4>)
 800066e:	f001 fceb 	bl	8002048 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000672:	4b1d      	ldr	r3, [pc, #116]	@ (80006e8 <HAL_ADC_MspInit+0xe8>)
 8000674:	4a1d      	ldr	r2, [pc, #116]	@ (80006ec <HAL_ADC_MspInit+0xec>)
 8000676:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000678:	4b1b      	ldr	r3, [pc, #108]	@ (80006e8 <HAL_ADC_MspInit+0xe8>)
 800067a:	2200      	movs	r2, #0
 800067c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800067e:	4b1a      	ldr	r3, [pc, #104]	@ (80006e8 <HAL_ADC_MspInit+0xe8>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000684:	4b18      	ldr	r3, [pc, #96]	@ (80006e8 <HAL_ADC_MspInit+0xe8>)
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800068a:	4b17      	ldr	r3, [pc, #92]	@ (80006e8 <HAL_ADC_MspInit+0xe8>)
 800068c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000690:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000692:	4b15      	ldr	r3, [pc, #84]	@ (80006e8 <HAL_ADC_MspInit+0xe8>)
 8000694:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000698:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800069a:	4b13      	ldr	r3, [pc, #76]	@ (80006e8 <HAL_ADC_MspInit+0xe8>)
 800069c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80006a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <HAL_ADC_MspInit+0xe8>)
 80006a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006a8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006aa:	4b0f      	ldr	r3, [pc, #60]	@ (80006e8 <HAL_ADC_MspInit+0xe8>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006b0:	4b0d      	ldr	r3, [pc, #52]	@ (80006e8 <HAL_ADC_MspInit+0xe8>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006b6:	480c      	ldr	r0, [pc, #48]	@ (80006e8 <HAL_ADC_MspInit+0xe8>)
 80006b8:	f001 f9dc 	bl	8001a74 <HAL_DMA_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80006c2:	f000 fa9d 	bl	8000c00 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4a07      	ldr	r2, [pc, #28]	@ (80006e8 <HAL_ADC_MspInit+0xe8>)
 80006ca:	639a      	str	r2, [r3, #56]	@ 0x38
 80006cc:	4a06      	ldr	r2, [pc, #24]	@ (80006e8 <HAL_ADC_MspInit+0xe8>)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006d2:	bf00      	nop
 80006d4:	3728      	adds	r7, #40	@ 0x28
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40012000 	.word	0x40012000
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40020000 	.word	0x40020000
 80006e8:	200000c4 	.word	0x200000c4
 80006ec:	40026410 	.word	0x40026410

080006f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	4b0c      	ldr	r3, [pc, #48]	@ (800072c <MX_DMA_Init+0x3c>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	4a0b      	ldr	r2, [pc, #44]	@ (800072c <MX_DMA_Init+0x3c>)
 8000700:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000704:	6313      	str	r3, [r2, #48]	@ 0x30
 8000706:	4b09      	ldr	r3, [pc, #36]	@ (800072c <MX_DMA_Init+0x3c>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000712:	2200      	movs	r2, #0
 8000714:	2105      	movs	r1, #5
 8000716:	2038      	movs	r0, #56	@ 0x38
 8000718:	f001 f982 	bl	8001a20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800071c:	2038      	movs	r0, #56	@ 0x38
 800071e:	f001 f99b 	bl	8001a58 <HAL_NVIC_EnableIRQ>

}
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40023800 	.word	0x40023800

08000730 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim11);
 8000734:	4802      	ldr	r0, [pc, #8]	@ (8000740 <configureTimerForRunTimeStats+0x10>)
 8000736:	f002 fc29 	bl	8002f8c <HAL_TIM_Base_Start_IT>
}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	2000028c 	.word	0x2000028c

08000744 <getRunTimeCounterValue>:

extern volatile unsigned long ulHighFrequencyTimerTicks;
__weak unsigned long getRunTimeCounterValue(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 8000748:	4b03      	ldr	r3, [pc, #12]	@ (8000758 <getRunTimeCounterValue+0x14>)
 800074a:	681b      	ldr	r3, [r3, #0]
}
 800074c:	4618      	mov	r0, r3
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	200001f8 	.word	0x200001f8

0800075c <PreSleepProcessing>:
/* USER CODE END 1 */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr

08000784 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

	// Start all 4 input captures
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000788:	2100      	movs	r1, #0
 800078a:	482c      	ldr	r0, [pc, #176]	@ (800083c <MX_FREERTOS_Init+0xb8>)
 800078c:	f002 fd08 	bl	80031a0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8000790:	2104      	movs	r1, #4
 8000792:	482a      	ldr	r0, [pc, #168]	@ (800083c <MX_FREERTOS_Init+0xb8>)
 8000794:	f002 fd04 	bl	80031a0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8000798:	2108      	movs	r1, #8
 800079a:	4828      	ldr	r0, [pc, #160]	@ (800083c <MX_FREERTOS_Init+0xb8>)
 800079c:	f002 fd00 	bl	80031a0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 80007a0:	210c      	movs	r1, #12
 80007a2:	4826      	ldr	r0, [pc, #152]	@ (800083c <MX_FREERTOS_Init+0xb8>)
 80007a4:	f002 fcfc 	bl	80031a0 <HAL_TIM_IC_Start_IT>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of radioQueue */
  radioQueueHandle = osMessageQueueNew (4, sizeof(uint32_t), &radioQueue_attributes);
 80007a8:	4a25      	ldr	r2, [pc, #148]	@ (8000840 <MX_FREERTOS_Init+0xbc>)
 80007aa:	2104      	movs	r1, #4
 80007ac:	2004      	movs	r0, #4
 80007ae:	f004 f9c6 	bl	8004b3e <osMessageQueueNew>
 80007b2:	4603      	mov	r3, r0
 80007b4:	4a23      	ldr	r2, [pc, #140]	@ (8000844 <MX_FREERTOS_Init+0xc0>)
 80007b6:	6013      	str	r3, [r2, #0]

  /* creation of adcQueue */
  adcQueueHandle = osMessageQueueNew (4, sizeof(float), &adcQueue_attributes);
 80007b8:	4a23      	ldr	r2, [pc, #140]	@ (8000848 <MX_FREERTOS_Init+0xc4>)
 80007ba:	2104      	movs	r1, #4
 80007bc:	2004      	movs	r0, #4
 80007be:	f004 f9be 	bl	8004b3e <osMessageQueueNew>
 80007c2:	4603      	mov	r3, r0
 80007c4:	4a21      	ldr	r2, [pc, #132]	@ (800084c <MX_FREERTOS_Init+0xc8>)
 80007c6:	6013      	str	r3, [r2, #0]

  /* creation of imuQueue */
  imuQueueHandle = osMessageQueueNew (12, sizeof(float), &imuQueue_attributes);
 80007c8:	4a21      	ldr	r2, [pc, #132]	@ (8000850 <MX_FREERTOS_Init+0xcc>)
 80007ca:	2104      	movs	r1, #4
 80007cc:	200c      	movs	r0, #12
 80007ce:	f004 f9b6 	bl	8004b3e <osMessageQueueNew>
 80007d2:	4603      	mov	r3, r0
 80007d4:	4a1f      	ldr	r2, [pc, #124]	@ (8000854 <MX_FREERTOS_Init+0xd0>)
 80007d6:	6013      	str	r3, [r2, #0]

  /* creation of telemetryQueue */
  telemetryQueueHandle = osMessageQueueNew (32, sizeof(float), &telemetryQueue_attributes);
 80007d8:	4a1f      	ldr	r2, [pc, #124]	@ (8000858 <MX_FREERTOS_Init+0xd4>)
 80007da:	2104      	movs	r1, #4
 80007dc:	2020      	movs	r0, #32
 80007de:	f004 f9ae 	bl	8004b3e <osMessageQueueNew>
 80007e2:	4603      	mov	r3, r0
 80007e4:	4a1d      	ldr	r2, [pc, #116]	@ (800085c <MX_FREERTOS_Init+0xd8>)
 80007e6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80007e8:	4a1d      	ldr	r2, [pc, #116]	@ (8000860 <MX_FREERTOS_Init+0xdc>)
 80007ea:	2100      	movs	r1, #0
 80007ec:	481d      	ldr	r0, [pc, #116]	@ (8000864 <MX_FREERTOS_Init+0xe0>)
 80007ee:	f004 f8f9 	bl	80049e4 <osThreadNew>
 80007f2:	4603      	mov	r3, r0
 80007f4:	4a1c      	ldr	r2, [pc, #112]	@ (8000868 <MX_FREERTOS_Init+0xe4>)
 80007f6:	6013      	str	r3, [r2, #0]

  /* creation of control_task */
  control_taskHandle = osThreadNew(_control_task, NULL, &control_task_attributes);
 80007f8:	4a1c      	ldr	r2, [pc, #112]	@ (800086c <MX_FREERTOS_Init+0xe8>)
 80007fa:	2100      	movs	r1, #0
 80007fc:	481c      	ldr	r0, [pc, #112]	@ (8000870 <MX_FREERTOS_Init+0xec>)
 80007fe:	f004 f8f1 	bl	80049e4 <osThreadNew>
 8000802:	4603      	mov	r3, r0
 8000804:	4a1b      	ldr	r2, [pc, #108]	@ (8000874 <MX_FREERTOS_Init+0xf0>)
 8000806:	6013      	str	r3, [r2, #0]

  /* creation of imu_read_task */
  imu_read_taskHandle = osThreadNew(_imu_read_task, NULL, &imu_read_task_attributes);
 8000808:	4a1b      	ldr	r2, [pc, #108]	@ (8000878 <MX_FREERTOS_Init+0xf4>)
 800080a:	2100      	movs	r1, #0
 800080c:	481b      	ldr	r0, [pc, #108]	@ (800087c <MX_FREERTOS_Init+0xf8>)
 800080e:	f004 f8e9 	bl	80049e4 <osThreadNew>
 8000812:	4603      	mov	r3, r0
 8000814:	4a1a      	ldr	r2, [pc, #104]	@ (8000880 <MX_FREERTOS_Init+0xfc>)
 8000816:	6013      	str	r3, [r2, #0]

  /* creation of adc_read_task */
  adc_read_taskHandle = osThreadNew(_adc_read_task, NULL, &adc_read_task_attributes);
 8000818:	4a1a      	ldr	r2, [pc, #104]	@ (8000884 <MX_FREERTOS_Init+0x100>)
 800081a:	2100      	movs	r1, #0
 800081c:	481a      	ldr	r0, [pc, #104]	@ (8000888 <MX_FREERTOS_Init+0x104>)
 800081e:	f004 f8e1 	bl	80049e4 <osThreadNew>
 8000822:	4603      	mov	r3, r0
 8000824:	4a19      	ldr	r2, [pc, #100]	@ (800088c <MX_FREERTOS_Init+0x108>)
 8000826:	6013      	str	r3, [r2, #0]

  /* creation of telemetry_task */
  telemetry_taskHandle = osThreadNew(_telemetry_task, NULL, &telemetry_task_attributes);
 8000828:	4a19      	ldr	r2, [pc, #100]	@ (8000890 <MX_FREERTOS_Init+0x10c>)
 800082a:	2100      	movs	r1, #0
 800082c:	4819      	ldr	r0, [pc, #100]	@ (8000894 <MX_FREERTOS_Init+0x110>)
 800082e:	f004 f8d9 	bl	80049e4 <osThreadNew>
 8000832:	4603      	mov	r3, r0
 8000834:	4a18      	ldr	r2, [pc, #96]	@ (8000898 <MX_FREERTOS_Init+0x114>)
 8000836:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	200001fc 	.word	0x200001fc
 8000840:	08007cdc 	.word	0x08007cdc
 8000844:	2000014c 	.word	0x2000014c
 8000848:	08007cf4 	.word	0x08007cf4
 800084c:	20000150 	.word	0x20000150
 8000850:	08007d0c 	.word	0x08007d0c
 8000854:	20000154 	.word	0x20000154
 8000858:	08007d24 	.word	0x08007d24
 800085c:	20000158 	.word	0x20000158
 8000860:	08007c28 	.word	0x08007c28
 8000864:	0800089d 	.word	0x0800089d
 8000868:	20000138 	.word	0x20000138
 800086c:	08007c4c 	.word	0x08007c4c
 8000870:	080008bd 	.word	0x080008bd
 8000874:	2000013c 	.word	0x2000013c
 8000878:	08007c70 	.word	0x08007c70
 800087c:	080008e1 	.word	0x080008e1
 8000880:	20000140 	.word	0x20000140
 8000884:	08007c94 	.word	0x08007c94
 8000888:	08000905 	.word	0x08000905
 800088c:	20000144 	.word	0x20000144
 8000890:	08007cb8 	.word	0x08007cb8
 8000894:	08000929 	.word	0x08000929
 8000898:	20000148 	.word	0x20000148

0800089c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	idle_dummy++; // Keep incrementing the dummy variable
 80008a4:	4b04      	ldr	r3, [pc, #16]	@ (80008b8 <StartDefaultTask+0x1c>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	3301      	adds	r3, #1
 80008aa:	4a03      	ldr	r2, [pc, #12]	@ (80008b8 <StartDefaultTask+0x1c>)
 80008ac:	6013      	str	r3, [r2, #0]
    osDelay(1); // A small delay to avoid task starvation
 80008ae:	2001      	movs	r0, #1
 80008b0:	f004 f92a 	bl	8004b08 <osDelay>
	idle_dummy++; // Keep incrementing the dummy variable
 80008b4:	bf00      	nop
 80008b6:	e7f5      	b.n	80008a4 <StartDefaultTask+0x8>
 80008b8:	20000124 	.word	0x20000124

080008bc <_control_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header__control_task */
void _control_task(void *argument)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN _control_task */
  for(;;)
  {
	control_dummy++;
 80008c4:	4b05      	ldr	r3, [pc, #20]	@ (80008dc <_control_task+0x20>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	3301      	adds	r3, #1
 80008ca:	4a04      	ldr	r2, [pc, #16]	@ (80008dc <_control_task+0x20>)
 80008cc:	6013      	str	r3, [r2, #0]
    control(); // Execute control function
 80008ce:	f7ff fe06 	bl	80004de <control>
    osDelay(CONTROL_DELAY);
 80008d2:	200a      	movs	r0, #10
 80008d4:	f004 f918 	bl	8004b08 <osDelay>
	control_dummy++;
 80008d8:	bf00      	nop
 80008da:	e7f3      	b.n	80008c4 <_control_task+0x8>
 80008dc:	20000128 	.word	0x20000128

080008e0 <_imu_read_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header__imu_read_task */
void _imu_read_task(void *argument)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN _imu_read_task */
  for(;;)
  {
	imu_dummy++;
 80008e8:	4b05      	ldr	r3, [pc, #20]	@ (8000900 <_imu_read_task+0x20>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	3301      	adds	r3, #1
 80008ee:	4a04      	ldr	r2, [pc, #16]	@ (8000900 <_imu_read_task+0x20>)
 80008f0:	6013      	str	r3, [r2, #0]
    imu_read(); // Execute imu read function
 80008f2:	f7ff fdfb 	bl	80004ec <imu_read>
    osDelay(IMU_DELAY);
 80008f6:	2019      	movs	r0, #25
 80008f8:	f004 f906 	bl	8004b08 <osDelay>
	imu_dummy++;
 80008fc:	bf00      	nop
 80008fe:	e7f3      	b.n	80008e8 <_imu_read_task+0x8>
 8000900:	20000130 	.word	0x20000130

08000904 <_adc_read_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header__adc_read_task */
void _adc_read_task(void *argument)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN _adc_read_task */
  for(;;)
  {
	adc_dummy++;
 800090c:	4b05      	ldr	r3, [pc, #20]	@ (8000924 <_adc_read_task+0x20>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	3301      	adds	r3, #1
 8000912:	4a04      	ldr	r2, [pc, #16]	@ (8000924 <_adc_read_task+0x20>)
 8000914:	6013      	str	r3, [r2, #0]
    adc_read(); // Execute ADC read function
 8000916:	f7ff fddb 	bl	80004d0 <adc_read>
    osDelay(ADC_DELAY);
 800091a:	2019      	movs	r0, #25
 800091c:	f004 f8f4 	bl	8004b08 <osDelay>
	adc_dummy++;
 8000920:	bf00      	nop
 8000922:	e7f3      	b.n	800090c <_adc_read_task+0x8>
 8000924:	20000134 	.word	0x20000134

08000928 <_telemetry_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header__telemetry_task */
void _telemetry_task(void *argument)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN _telemetry_task */
  for(;;)
  {
	telemetry_dummy++;
 8000930:	4b06      	ldr	r3, [pc, #24]	@ (800094c <_telemetry_task+0x24>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	3301      	adds	r3, #1
 8000936:	4a05      	ldr	r2, [pc, #20]	@ (800094c <_telemetry_task+0x24>)
 8000938:	6013      	str	r3, [r2, #0]
    telemetry(); // Execute telemetry function
 800093a:	f7ff fdde 	bl	80004fa <telemetry>
    osDelay(TELEMETRY_DELAY);
 800093e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000942:	f004 f8e1 	bl	8004b08 <osDelay>
	telemetry_dummy++;
 8000946:	bf00      	nop
 8000948:	e7f2      	b.n	8000930 <_telemetry_task+0x8>
 800094a:	bf00      	nop
 800094c:	2000012c 	.word	0x2000012c

08000950 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	4b10      	ldr	r3, [pc, #64]	@ (800099c <MX_GPIO_Init+0x4c>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	4a0f      	ldr	r2, [pc, #60]	@ (800099c <MX_GPIO_Init+0x4c>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6313      	str	r3, [r2, #48]	@ 0x30
 8000966:	4b0d      	ldr	r3, [pc, #52]	@ (800099c <MX_GPIO_Init+0x4c>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	603b      	str	r3, [r7, #0]
 8000976:	4b09      	ldr	r3, [pc, #36]	@ (800099c <MX_GPIO_Init+0x4c>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	4a08      	ldr	r2, [pc, #32]	@ (800099c <MX_GPIO_Init+0x4c>)
 800097c:	f043 0302 	orr.w	r3, r3, #2
 8000980:	6313      	str	r3, [r2, #48]	@ 0x30
 8000982:	4b06      	ldr	r3, [pc, #24]	@ (800099c <MX_GPIO_Init+0x4c>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	f003 0302 	and.w	r3, r3, #2
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	683b      	ldr	r3, [r7, #0]

}
 800098e:	bf00      	nop
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800

080009a0 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80009a4:	4b12      	ldr	r3, [pc, #72]	@ (80009f0 <MX_I2C3_Init+0x50>)
 80009a6:	4a13      	ldr	r2, [pc, #76]	@ (80009f4 <MX_I2C3_Init+0x54>)
 80009a8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80009aa:	4b11      	ldr	r3, [pc, #68]	@ (80009f0 <MX_I2C3_Init+0x50>)
 80009ac:	4a12      	ldr	r2, [pc, #72]	@ (80009f8 <MX_I2C3_Init+0x58>)
 80009ae:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	@ (80009f0 <MX_I2C3_Init+0x50>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	@ (80009f0 <MX_I2C3_Init+0x50>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	@ (80009f0 <MX_I2C3_Init+0x50>)
 80009be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009c2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c4:	4b0a      	ldr	r3, [pc, #40]	@ (80009f0 <MX_I2C3_Init+0x50>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80009ca:	4b09      	ldr	r3, [pc, #36]	@ (80009f0 <MX_I2C3_Init+0x50>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009d0:	4b07      	ldr	r3, [pc, #28]	@ (80009f0 <MX_I2C3_Init+0x50>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009d6:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <MX_I2C3_Init+0x50>)
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80009dc:	4804      	ldr	r0, [pc, #16]	@ (80009f0 <MX_I2C3_Init+0x50>)
 80009de:	f001 fcb7 	bl	8002350 <HAL_I2C_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80009e8:	f000 f90a 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	2000015c 	.word	0x2000015c
 80009f4:	40005c00 	.word	0x40005c00
 80009f8:	000186a0 	.word	0x000186a0

080009fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	@ 0x28
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a28      	ldr	r2, [pc, #160]	@ (8000abc <HAL_I2C_MspInit+0xc0>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d14a      	bne.n	8000ab4 <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	4b27      	ldr	r3, [pc, #156]	@ (8000ac0 <HAL_I2C_MspInit+0xc4>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	4a26      	ldr	r2, [pc, #152]	@ (8000ac0 <HAL_I2C_MspInit+0xc4>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2e:	4b24      	ldr	r3, [pc, #144]	@ (8000ac0 <HAL_I2C_MspInit+0xc4>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	4b20      	ldr	r3, [pc, #128]	@ (8000ac0 <HAL_I2C_MspInit+0xc4>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	4a1f      	ldr	r2, [pc, #124]	@ (8000ac0 <HAL_I2C_MspInit+0xc4>)
 8000a44:	f043 0302 	orr.w	r3, r3, #2
 8000a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac0 <HAL_I2C_MspInit+0xc4>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	f003 0302 	and.w	r3, r3, #2
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = IMU_CLK_Pin;
 8000a56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a5c:	2312      	movs	r3, #18
 8000a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a64:	2303      	movs	r3, #3
 8000a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000a68:	2304      	movs	r3, #4
 8000a6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(IMU_CLK_GPIO_Port, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	4814      	ldr	r0, [pc, #80]	@ (8000ac4 <HAL_I2C_MspInit+0xc8>)
 8000a74:	f001 fae8 	bl	8002048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IMU_SDA_Pin;
 8000a78:	2310      	movs	r3, #16
 8000a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a7c:	2312      	movs	r3, #18
 8000a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a84:	2303      	movs	r3, #3
 8000a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8000a88:	2309      	movs	r3, #9
 8000a8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(IMU_SDA_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	480d      	ldr	r0, [pc, #52]	@ (8000ac8 <HAL_I2C_MspInit+0xcc>)
 8000a94:	f001 fad8 	bl	8002048 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	4b08      	ldr	r3, [pc, #32]	@ (8000ac0 <HAL_I2C_MspInit+0xc4>)
 8000a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa0:	4a07      	ldr	r2, [pc, #28]	@ (8000ac0 <HAL_I2C_MspInit+0xc4>)
 8000aa2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000aa6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aa8:	4b05      	ldr	r3, [pc, #20]	@ (8000ac0 <HAL_I2C_MspInit+0xc4>)
 8000aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000ab4:	bf00      	nop
 8000ab6:	3728      	adds	r7, #40	@ 0x28
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40005c00 	.word	0x40005c00
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40020000 	.word	0x40020000
 8000ac8:	40020400 	.word	0x40020400

08000acc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ad0:	f000 fc4a 	bl	8001368 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ad4:	f000 f818 	bl	8000b08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad8:	f7ff ff3a 	bl	8000950 <MX_GPIO_Init>
  MX_DMA_Init();
 8000adc:	f7ff fe08 	bl	80006f0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000ae0:	f7ff fd12 	bl	8000508 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000ae4:	f000 f98c 	bl	8000e00 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ae8:	f000 fa1c 	bl	8000f24 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000aec:	f000 fba0 	bl	8001230 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 8000af0:	f7ff ff56 	bl	80009a0 <MX_I2C3_Init>
  MX_TIM11_Init();
 8000af4:	f000 fa90 	bl	8001018 <MX_TIM11_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000af8:	f003 ff2a 	bl	8004950 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000afc:	f7ff fe42 	bl	8000784 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000b00:	f003 ff4a 	bl	8004998 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <main+0x38>

08000b08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b094      	sub	sp, #80	@ 0x50
 8000b0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b0e:	f107 0320 	add.w	r3, r7, #32
 8000b12:	2230      	movs	r2, #48	@ 0x30
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f006 ff32 	bl	8007980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b1c:	f107 030c 	add.w	r3, r7, #12
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	4b28      	ldr	r3, [pc, #160]	@ (8000bd4 <SystemClock_Config+0xcc>)
 8000b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b34:	4a27      	ldr	r2, [pc, #156]	@ (8000bd4 <SystemClock_Config+0xcc>)
 8000b36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b3c:	4b25      	ldr	r3, [pc, #148]	@ (8000bd4 <SystemClock_Config+0xcc>)
 8000b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b48:	2300      	movs	r3, #0
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	4b22      	ldr	r3, [pc, #136]	@ (8000bd8 <SystemClock_Config+0xd0>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b54:	4a20      	ldr	r2, [pc, #128]	@ (8000bd8 <SystemClock_Config+0xd0>)
 8000b56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b5a:	6013      	str	r3, [r2, #0]
 8000b5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000bd8 <SystemClock_Config+0xd0>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b70:	2310      	movs	r3, #16
 8000b72:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b74:	2302      	movs	r3, #2
 8000b76:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b7c:	2308      	movs	r3, #8
 8000b7e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000b80:	2354      	movs	r3, #84	@ 0x54
 8000b82:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b84:	2302      	movs	r3, #2
 8000b86:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b88:	2304      	movs	r3, #4
 8000b8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b8c:	f107 0320 	add.w	r3, r7, #32
 8000b90:	4618      	mov	r0, r3
 8000b92:	f001 fd21 	bl	80025d8 <HAL_RCC_OscConfig>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b9c:	f000 f830 	bl	8000c00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba0:	230f      	movs	r3, #15
 8000ba2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bb6:	f107 030c 	add.w	r3, r7, #12
 8000bba:	2102      	movs	r1, #2
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f001 ff83 	bl	8002ac8 <HAL_RCC_ClockConfig>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000bc8:	f000 f81a 	bl	8000c00 <Error_Handler>
  }
}
 8000bcc:	bf00      	nop
 8000bce:	3750      	adds	r7, #80	@ 0x50
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40007000 	.word	0x40007000

08000bdc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a04      	ldr	r2, [pc, #16]	@ (8000bfc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d101      	bne.n	8000bf2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bee:	f000 fbdd 	bl	80013ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40014400 	.word	0x40014400

08000c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c04:	b672      	cpsid	i
}
 8000c06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <Error_Handler+0x8>

08000c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	4b12      	ldr	r3, [pc, #72]	@ (8000c60 <HAL_MspInit+0x54>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c1a:	4a11      	ldr	r2, [pc, #68]	@ (8000c60 <HAL_MspInit+0x54>)
 8000c1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c22:	4b0f      	ldr	r3, [pc, #60]	@ (8000c60 <HAL_MspInit+0x54>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	603b      	str	r3, [r7, #0]
 8000c32:	4b0b      	ldr	r3, [pc, #44]	@ (8000c60 <HAL_MspInit+0x54>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c36:	4a0a      	ldr	r2, [pc, #40]	@ (8000c60 <HAL_MspInit+0x54>)
 8000c38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c3e:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <HAL_MspInit+0x54>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c46:	603b      	str	r3, [r7, #0]
 8000c48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	210f      	movs	r1, #15
 8000c4e:	f06f 0001 	mvn.w	r0, #1
 8000c52:	f000 fee5 	bl	8001a20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40023800 	.word	0x40023800

08000c64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08c      	sub	sp, #48	@ 0x30
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000c70:	2300      	movs	r3, #0
 8000c72:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000c74:	2300      	movs	r3, #0
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	4b2e      	ldr	r3, [pc, #184]	@ (8000d34 <HAL_InitTick+0xd0>)
 8000c7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c7c:	4a2d      	ldr	r2, [pc, #180]	@ (8000d34 <HAL_InitTick+0xd0>)
 8000c7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c82:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c84:	4b2b      	ldr	r3, [pc, #172]	@ (8000d34 <HAL_InitTick+0xd0>)
 8000c86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c90:	f107 020c 	add.w	r2, r7, #12
 8000c94:	f107 0310 	add.w	r3, r7, #16
 8000c98:	4611      	mov	r1, r2
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f002 f8f4 	bl	8002e88 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ca0:	f002 f8de 	bl	8002e60 <HAL_RCC_GetPCLK2Freq>
 8000ca4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ca8:	4a23      	ldr	r2, [pc, #140]	@ (8000d38 <HAL_InitTick+0xd4>)
 8000caa:	fba2 2303 	umull	r2, r3, r2, r3
 8000cae:	0c9b      	lsrs	r3, r3, #18
 8000cb0:	3b01      	subs	r3, #1
 8000cb2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000cb4:	4b21      	ldr	r3, [pc, #132]	@ (8000d3c <HAL_InitTick+0xd8>)
 8000cb6:	4a22      	ldr	r2, [pc, #136]	@ (8000d40 <HAL_InitTick+0xdc>)
 8000cb8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000cba:	4b20      	ldr	r3, [pc, #128]	@ (8000d3c <HAL_InitTick+0xd8>)
 8000cbc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cc0:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000cc2:	4a1e      	ldr	r2, [pc, #120]	@ (8000d3c <HAL_InitTick+0xd8>)
 8000cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cc6:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000cc8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d3c <HAL_InitTick+0xd8>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cce:	4b1b      	ldr	r3, [pc, #108]	@ (8000d3c <HAL_InitTick+0xd8>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd4:	4b19      	ldr	r3, [pc, #100]	@ (8000d3c <HAL_InitTick+0xd8>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8000cda:	4818      	ldr	r0, [pc, #96]	@ (8000d3c <HAL_InitTick+0xd8>)
 8000cdc:	f002 f906 	bl	8002eec <HAL_TIM_Base_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000ce6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d11b      	bne.n	8000d26 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8000cee:	4813      	ldr	r0, [pc, #76]	@ (8000d3c <HAL_InitTick+0xd8>)
 8000cf0:	f002 f94c 	bl	8002f8c <HAL_TIM_Base_Start_IT>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000cfa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d111      	bne.n	8000d26 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d02:	2019      	movs	r0, #25
 8000d04:	f000 fea8 	bl	8001a58 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2b0f      	cmp	r3, #15
 8000d0c:	d808      	bhi.n	8000d20 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	6879      	ldr	r1, [r7, #4]
 8000d12:	2019      	movs	r0, #25
 8000d14:	f000 fe84 	bl	8001a20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d18:	4a0a      	ldr	r2, [pc, #40]	@ (8000d44 <HAL_InitTick+0xe0>)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6013      	str	r3, [r2, #0]
 8000d1e:	e002      	b.n	8000d26 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000d26:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3730      	adds	r7, #48	@ 0x30
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40023800 	.word	0x40023800
 8000d38:	431bde83 	.word	0x431bde83
 8000d3c:	200001b0 	.word	0x200001b0
 8000d40:	40014400 	.word	0x40014400
 8000d44:	20000004 	.word	0x20000004

08000d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <NMI_Handler+0x4>

08000d50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <HardFault_Handler+0x4>

08000d58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <MemManage_Handler+0x4>

08000d60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <BusFault_Handler+0x4>

08000d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <UsageFault_Handler+0x4>

08000d70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
	...

08000d80 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000d84:	4802      	ldr	r0, [pc, #8]	@ (8000d90 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d86:	f002 fb25 	bl	80033d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	200001b0 	.word	0x200001b0

08000d94 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000d98:	4804      	ldr	r0, [pc, #16]	@ (8000dac <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8000d9a:	f002 fb1b 	bl	80033d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */
  ulHighFrequencyTimerTicks++;
 8000d9e:	4b04      	ldr	r3, [pc, #16]	@ (8000db0 <TIM1_TRG_COM_TIM11_IRQHandler+0x1c>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	3301      	adds	r3, #1
 8000da4:	4a02      	ldr	r2, [pc, #8]	@ (8000db0 <TIM1_TRG_COM_TIM11_IRQHandler+0x1c>)
 8000da6:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	2000028c 	.word	0x2000028c
 8000db0:	200001f8 	.word	0x200001f8

08000db4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000db8:	4802      	ldr	r0, [pc, #8]	@ (8000dc4 <TIM3_IRQHandler+0x10>)
 8000dba:	f002 fb0b 	bl	80033d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200001fc 	.word	0x200001fc

08000dc8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000dcc:	4802      	ldr	r0, [pc, #8]	@ (8000dd8 <DMA2_Stream0_IRQHandler+0x10>)
 8000dce:	f000 feff 	bl	8001bd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	200000c4 	.word	0x200000c4

08000ddc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de0:	4b06      	ldr	r3, [pc, #24]	@ (8000dfc <SystemInit+0x20>)
 8000de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000de6:	4a05      	ldr	r2, [pc, #20]	@ (8000dfc <SystemInit+0x20>)
 8000de8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	@ 0x28
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e06:	f107 0318 	add.w	r3, r7, #24
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e14:	f107 0310 	add.w	r3, r7, #16
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e1e:	463b      	mov	r3, r7
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e2a:	4b3c      	ldr	r3, [pc, #240]	@ (8000f1c <MX_TIM3_Init+0x11c>)
 8000e2c:	4a3c      	ldr	r2, [pc, #240]	@ (8000f20 <MX_TIM3_Init+0x120>)
 8000e2e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 8000e30:	4b3a      	ldr	r3, [pc, #232]	@ (8000f1c <MX_TIM3_Init+0x11c>)
 8000e32:	2254      	movs	r2, #84	@ 0x54
 8000e34:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e36:	4b39      	ldr	r3, [pc, #228]	@ (8000f1c <MX_TIM3_Init+0x11c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e3c:	4b37      	ldr	r3, [pc, #220]	@ (8000f1c <MX_TIM3_Init+0x11c>)
 8000e3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e42:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e44:	4b35      	ldr	r3, [pc, #212]	@ (8000f1c <MX_TIM3_Init+0x11c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e4a:	4b34      	ldr	r3, [pc, #208]	@ (8000f1c <MX_TIM3_Init+0x11c>)
 8000e4c:	2280      	movs	r2, #128	@ 0x80
 8000e4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e50:	4832      	ldr	r0, [pc, #200]	@ (8000f1c <MX_TIM3_Init+0x11c>)
 8000e52:	f002 f84b 	bl	8002eec <HAL_TIM_Base_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8000e5c:	f7ff fed0 	bl	8000c00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e64:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e66:	f107 0318 	add.w	r3, r7, #24
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	482b      	ldr	r0, [pc, #172]	@ (8000f1c <MX_TIM3_Init+0x11c>)
 8000e6e:	f002 fcff 	bl	8003870 <HAL_TIM_ConfigClockSource>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000e78:	f7ff fec2 	bl	8000c00 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000e7c:	4827      	ldr	r0, [pc, #156]	@ (8000f1c <MX_TIM3_Init+0x11c>)
 8000e7e:	f002 f936 	bl	80030ee <HAL_TIM_IC_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000e88:	f7ff feba 	bl	8000c00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e94:	f107 0310 	add.w	r3, r7, #16
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4820      	ldr	r0, [pc, #128]	@ (8000f1c <MX_TIM3_Init+0x11c>)
 8000e9c:	f003 f9ce 	bl	800423c <HAL_TIMEx_MasterConfigSynchronization>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8000ea6:	f7ff feab 	bl	8000c00 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000eaa:	230a      	movs	r3, #10
 8000eac:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000eba:	463b      	mov	r3, r7
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4816      	ldr	r0, [pc, #88]	@ (8000f1c <MX_TIM3_Init+0x11c>)
 8000ec2:	f002 fb77 	bl	80035b4 <HAL_TIM_IC_ConfigChannel>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8000ecc:	f7ff fe98 	bl	8000c00 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000ed0:	463b      	mov	r3, r7
 8000ed2:	2204      	movs	r2, #4
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4811      	ldr	r0, [pc, #68]	@ (8000f1c <MX_TIM3_Init+0x11c>)
 8000ed8:	f002 fb6c 	bl	80035b4 <HAL_TIM_IC_ConfigChannel>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8000ee2:	f7ff fe8d 	bl	8000c00 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	2208      	movs	r2, #8
 8000eea:	4619      	mov	r1, r3
 8000eec:	480b      	ldr	r0, [pc, #44]	@ (8000f1c <MX_TIM3_Init+0x11c>)
 8000eee:	f002 fb61 	bl	80035b4 <HAL_TIM_IC_ConfigChannel>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_TIM3_Init+0xfc>
  {
    Error_Handler();
 8000ef8:	f7ff fe82 	bl	8000c00 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000efc:	463b      	mov	r3, r7
 8000efe:	220c      	movs	r2, #12
 8000f00:	4619      	mov	r1, r3
 8000f02:	4806      	ldr	r0, [pc, #24]	@ (8000f1c <MX_TIM3_Init+0x11c>)
 8000f04:	f002 fb56 	bl	80035b4 <HAL_TIM_IC_ConfigChannel>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_TIM3_Init+0x112>
  {
    Error_Handler();
 8000f0e:	f7ff fe77 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	3728      	adds	r7, #40	@ 0x28
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	200001fc 	.word	0x200001fc
 8000f20:	40000400 	.word	0x40000400

08000f24 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08a      	sub	sp, #40	@ 0x28
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f2a:	f107 0320 	add.w	r3, r7, #32
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f34:	1d3b      	adds	r3, r7, #4
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]
 8000f40:	611a      	str	r2, [r3, #16]
 8000f42:	615a      	str	r2, [r3, #20]
 8000f44:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f46:	4b32      	ldr	r3, [pc, #200]	@ (8001010 <MX_TIM4_Init+0xec>)
 8000f48:	4a32      	ldr	r2, [pc, #200]	@ (8001014 <MX_TIM4_Init+0xf0>)
 8000f4a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84;
 8000f4c:	4b30      	ldr	r3, [pc, #192]	@ (8001010 <MX_TIM4_Init+0xec>)
 8000f4e:	2254      	movs	r2, #84	@ 0x54
 8000f50:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f52:	4b2f      	ldr	r3, [pc, #188]	@ (8001010 <MX_TIM4_Init+0xec>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8000f58:	4b2d      	ldr	r3, [pc, #180]	@ (8001010 <MX_TIM4_Init+0xec>)
 8000f5a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000f5e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f60:	4b2b      	ldr	r3, [pc, #172]	@ (8001010 <MX_TIM4_Init+0xec>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f66:	4b2a      	ldr	r3, [pc, #168]	@ (8001010 <MX_TIM4_Init+0xec>)
 8000f68:	2280      	movs	r2, #128	@ 0x80
 8000f6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000f6c:	4828      	ldr	r0, [pc, #160]	@ (8001010 <MX_TIM4_Init+0xec>)
 8000f6e:	f002 f86f 	bl	8003050 <HAL_TIM_PWM_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000f78:	f7ff fe42 	bl	8000c00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f80:	2300      	movs	r3, #0
 8000f82:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f84:	f107 0320 	add.w	r3, r7, #32
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4821      	ldr	r0, [pc, #132]	@ (8001010 <MX_TIM4_Init+0xec>)
 8000f8c:	f003 f956 	bl	800423c <HAL_TIMEx_MasterConfigSynchronization>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000f96:	f7ff fe33 	bl	8000c00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f9a:	2360      	movs	r3, #96	@ 0x60
 8000f9c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	2200      	movs	r2, #0
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4817      	ldr	r0, [pc, #92]	@ (8001010 <MX_TIM4_Init+0xec>)
 8000fb2:	f002 fb9b 	bl	80036ec <HAL_TIM_PWM_ConfigChannel>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000fbc:	f7ff fe20 	bl	8000c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	2204      	movs	r2, #4
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4812      	ldr	r0, [pc, #72]	@ (8001010 <MX_TIM4_Init+0xec>)
 8000fc8:	f002 fb90 	bl	80036ec <HAL_TIM_PWM_ConfigChannel>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000fd2:	f7ff fe15 	bl	8000c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	2208      	movs	r2, #8
 8000fda:	4619      	mov	r1, r3
 8000fdc:	480c      	ldr	r0, [pc, #48]	@ (8001010 <MX_TIM4_Init+0xec>)
 8000fde:	f002 fb85 	bl	80036ec <HAL_TIM_PWM_ConfigChannel>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8000fe8:	f7ff fe0a 	bl	8000c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	220c      	movs	r2, #12
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4807      	ldr	r0, [pc, #28]	@ (8001010 <MX_TIM4_Init+0xec>)
 8000ff4:	f002 fb7a 	bl	80036ec <HAL_TIM_PWM_ConfigChannel>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8000ffe:	f7ff fdff 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001002:	4803      	ldr	r0, [pc, #12]	@ (8001010 <MX_TIM4_Init+0xec>)
 8001004:	f000 f8da 	bl	80011bc <HAL_TIM_MspPostInit>

}
 8001008:	bf00      	nop
 800100a:	3728      	adds	r7, #40	@ 0x28
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000244 	.word	0x20000244
 8001014:	40000800 	.word	0x40000800

08001018 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800101c:	4b0d      	ldr	r3, [pc, #52]	@ (8001054 <MX_TIM11_Init+0x3c>)
 800101e:	4a0e      	ldr	r2, [pc, #56]	@ (8001058 <MX_TIM11_Init+0x40>)
 8001020:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 84;
 8001022:	4b0c      	ldr	r3, [pc, #48]	@ (8001054 <MX_TIM11_Init+0x3c>)
 8001024:	2254      	movs	r2, #84	@ 0x54
 8001026:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001028:	4b0a      	ldr	r3, [pc, #40]	@ (8001054 <MX_TIM11_Init+0x3c>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 99;
 800102e:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <MX_TIM11_Init+0x3c>)
 8001030:	2263      	movs	r2, #99	@ 0x63
 8001032:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001034:	4b07      	ldr	r3, [pc, #28]	@ (8001054 <MX_TIM11_Init+0x3c>)
 8001036:	2200      	movs	r2, #0
 8001038:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800103a:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <MX_TIM11_Init+0x3c>)
 800103c:	2280      	movs	r2, #128	@ 0x80
 800103e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001040:	4804      	ldr	r0, [pc, #16]	@ (8001054 <MX_TIM11_Init+0x3c>)
 8001042:	f001 ff53 	bl	8002eec <HAL_TIM_Base_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM11_Init+0x38>
  {
    Error_Handler();
 800104c:	f7ff fdd8 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	2000028c 	.word	0x2000028c
 8001058:	40014800 	.word	0x40014800

0800105c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08c      	sub	sp, #48	@ 0x30
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 031c 	add.w	r3, r7, #28
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a3a      	ldr	r2, [pc, #232]	@ (8001164 <HAL_TIM_Base_MspInit+0x108>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d152      	bne.n	8001124 <HAL_TIM_Base_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	61bb      	str	r3, [r7, #24]
 8001082:	4b39      	ldr	r3, [pc, #228]	@ (8001168 <HAL_TIM_Base_MspInit+0x10c>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001086:	4a38      	ldr	r2, [pc, #224]	@ (8001168 <HAL_TIM_Base_MspInit+0x10c>)
 8001088:	f043 0302 	orr.w	r3, r3, #2
 800108c:	6413      	str	r3, [r2, #64]	@ 0x40
 800108e:	4b36      	ldr	r3, [pc, #216]	@ (8001168 <HAL_TIM_Base_MspInit+0x10c>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	61bb      	str	r3, [r7, #24]
 8001098:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
 800109e:	4b32      	ldr	r3, [pc, #200]	@ (8001168 <HAL_TIM_Base_MspInit+0x10c>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a2:	4a31      	ldr	r2, [pc, #196]	@ (8001168 <HAL_TIM_Base_MspInit+0x10c>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001168 <HAL_TIM_Base_MspInit+0x10c>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	617b      	str	r3, [r7, #20]
 80010b4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	613b      	str	r3, [r7, #16]
 80010ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001168 <HAL_TIM_Base_MspInit+0x10c>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	4a2a      	ldr	r2, [pc, #168]	@ (8001168 <HAL_TIM_Base_MspInit+0x10c>)
 80010c0:	f043 0302 	orr.w	r3, r3, #2
 80010c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c6:	4b28      	ldr	r3, [pc, #160]	@ (8001168 <HAL_TIM_Base_MspInit+0x10c>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	613b      	str	r3, [r7, #16]
 80010d0:	693b      	ldr	r3, [r7, #16]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin;
 80010d2:	23c0      	movs	r3, #192	@ 0xc0
 80010d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010de:	2300      	movs	r3, #0
 80010e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010e2:	2302      	movs	r3, #2
 80010e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e6:	f107 031c 	add.w	r3, r7, #28
 80010ea:	4619      	mov	r1, r3
 80010ec:	481f      	ldr	r0, [pc, #124]	@ (800116c <HAL_TIM_Base_MspInit+0x110>)
 80010ee:	f000 ffab 	bl	8002048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IN3_Pin|IN4_Pin;
 80010f2:	2303      	movs	r3, #3
 80010f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001102:	2302      	movs	r3, #2
 8001104:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001106:	f107 031c 	add.w	r3, r7, #28
 800110a:	4619      	mov	r1, r3
 800110c:	4818      	ldr	r0, [pc, #96]	@ (8001170 <HAL_TIM_Base_MspInit+0x114>)
 800110e:	f000 ff9b 	bl	8002048 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001112:	2200      	movs	r2, #0
 8001114:	2105      	movs	r1, #5
 8001116:	201d      	movs	r0, #29
 8001118:	f000 fc82 	bl	8001a20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800111c:	201d      	movs	r0, #29
 800111e:	f000 fc9b 	bl	8001a58 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8001122:	e01a      	b.n	800115a <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM11)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a12      	ldr	r2, [pc, #72]	@ (8001174 <HAL_TIM_Base_MspInit+0x118>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d115      	bne.n	800115a <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	4b0d      	ldr	r3, [pc, #52]	@ (8001168 <HAL_TIM_Base_MspInit+0x10c>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001136:	4a0c      	ldr	r2, [pc, #48]	@ (8001168 <HAL_TIM_Base_MspInit+0x10c>)
 8001138:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800113c:	6453      	str	r3, [r2, #68]	@ 0x44
 800113e:	4b0a      	ldr	r3, [pc, #40]	@ (8001168 <HAL_TIM_Base_MspInit+0x10c>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001142:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	2105      	movs	r1, #5
 800114e:	201a      	movs	r0, #26
 8001150:	f000 fc66 	bl	8001a20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001154:	201a      	movs	r0, #26
 8001156:	f000 fc7f 	bl	8001a58 <HAL_NVIC_EnableIRQ>
}
 800115a:	bf00      	nop
 800115c:	3730      	adds	r7, #48	@ 0x30
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40000400 	.word	0x40000400
 8001168:	40023800 	.word	0x40023800
 800116c:	40020000 	.word	0x40020000
 8001170:	40020400 	.word	0x40020400
 8001174:	40014800 	.word	0x40014800

08001178 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a0b      	ldr	r2, [pc, #44]	@ (80011b4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d10d      	bne.n	80011a6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b0a      	ldr	r3, [pc, #40]	@ (80011b8 <HAL_TIM_PWM_MspInit+0x40>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001192:	4a09      	ldr	r2, [pc, #36]	@ (80011b8 <HAL_TIM_PWM_MspInit+0x40>)
 8001194:	f043 0304 	orr.w	r3, r3, #4
 8001198:	6413      	str	r3, [r2, #64]	@ 0x40
 800119a:	4b07      	ldr	r3, [pc, #28]	@ (80011b8 <HAL_TIM_PWM_MspInit+0x40>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119e:	f003 0304 	and.w	r3, r3, #4
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80011a6:	bf00      	nop
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	40000800 	.word	0x40000800
 80011b8:	40023800 	.word	0x40023800

080011bc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 030c 	add.w	r3, r7, #12
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a12      	ldr	r2, [pc, #72]	@ (8001224 <HAL_TIM_MspPostInit+0x68>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d11e      	bne.n	800121c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	4b11      	ldr	r3, [pc, #68]	@ (8001228 <HAL_TIM_MspPostInit+0x6c>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e6:	4a10      	ldr	r2, [pc, #64]	@ (8001228 <HAL_TIM_MspPostInit+0x6c>)
 80011e8:	f043 0302 	orr.w	r3, r3, #2
 80011ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001228 <HAL_TIM_MspPostInit+0x6c>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = OUT1_Pin|OUT2_Pin|OUT3_Pin|OUT4_Pin;
 80011fa:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80011fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001200:	2302      	movs	r3, #2
 8001202:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001208:	2303      	movs	r3, #3
 800120a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800120c:	2302      	movs	r3, #2
 800120e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001210:	f107 030c 	add.w	r3, r7, #12
 8001214:	4619      	mov	r1, r3
 8001216:	4805      	ldr	r0, [pc, #20]	@ (800122c <HAL_TIM_MspPostInit+0x70>)
 8001218:	f000 ff16 	bl	8002048 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800121c:	bf00      	nop
 800121e:	3720      	adds	r7, #32
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40000800 	.word	0x40000800
 8001228:	40023800 	.word	0x40023800
 800122c:	40020400 	.word	0x40020400

08001230 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001234:	4b11      	ldr	r3, [pc, #68]	@ (800127c <MX_USART1_UART_Init+0x4c>)
 8001236:	4a12      	ldr	r2, [pc, #72]	@ (8001280 <MX_USART1_UART_Init+0x50>)
 8001238:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800123a:	4b10      	ldr	r3, [pc, #64]	@ (800127c <MX_USART1_UART_Init+0x4c>)
 800123c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001240:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001242:	4b0e      	ldr	r3, [pc, #56]	@ (800127c <MX_USART1_UART_Init+0x4c>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001248:	4b0c      	ldr	r3, [pc, #48]	@ (800127c <MX_USART1_UART_Init+0x4c>)
 800124a:	2200      	movs	r2, #0
 800124c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800124e:	4b0b      	ldr	r3, [pc, #44]	@ (800127c <MX_USART1_UART_Init+0x4c>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001254:	4b09      	ldr	r3, [pc, #36]	@ (800127c <MX_USART1_UART_Init+0x4c>)
 8001256:	220c      	movs	r2, #12
 8001258:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800125a:	4b08      	ldr	r3, [pc, #32]	@ (800127c <MX_USART1_UART_Init+0x4c>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001260:	4b06      	ldr	r3, [pc, #24]	@ (800127c <MX_USART1_UART_Init+0x4c>)
 8001262:	2200      	movs	r2, #0
 8001264:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001266:	4805      	ldr	r0, [pc, #20]	@ (800127c <MX_USART1_UART_Init+0x4c>)
 8001268:	f003 f86a 	bl	8004340 <HAL_UART_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001272:	f7ff fcc5 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200002d4 	.word	0x200002d4
 8001280:	40011000 	.word	0x40011000

08001284 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08a      	sub	sp, #40	@ 0x28
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a19      	ldr	r2, [pc, #100]	@ (8001308 <HAL_UART_MspInit+0x84>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d12c      	bne.n	8001300 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	4b18      	ldr	r3, [pc, #96]	@ (800130c <HAL_UART_MspInit+0x88>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ae:	4a17      	ldr	r2, [pc, #92]	@ (800130c <HAL_UART_MspInit+0x88>)
 80012b0:	f043 0310 	orr.w	r3, r3, #16
 80012b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012b6:	4b15      	ldr	r3, [pc, #84]	@ (800130c <HAL_UART_MspInit+0x88>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ba:	f003 0310 	and.w	r3, r3, #16
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	4b11      	ldr	r3, [pc, #68]	@ (800130c <HAL_UART_MspInit+0x88>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	4a10      	ldr	r2, [pc, #64]	@ (800130c <HAL_UART_MspInit+0x88>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d2:	4b0e      	ldr	r3, [pc, #56]	@ (800130c <HAL_UART_MspInit+0x88>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TEL_TX_Pin|TEL_RX_Pin;
 80012de:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80012e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	2302      	movs	r3, #2
 80012e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ec:	2303      	movs	r3, #3
 80012ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012f0:	2307      	movs	r3, #7
 80012f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4619      	mov	r1, r3
 80012fa:	4805      	ldr	r0, [pc, #20]	@ (8001310 <HAL_UART_MspInit+0x8c>)
 80012fc:	f000 fea4 	bl	8002048 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001300:	bf00      	nop
 8001302:	3728      	adds	r7, #40	@ 0x28
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40011000 	.word	0x40011000
 800130c:	40023800 	.word	0x40023800
 8001310:	40020000 	.word	0x40020000

08001314 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001314:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800134c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001318:	f7ff fd60 	bl	8000ddc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800131c:	480c      	ldr	r0, [pc, #48]	@ (8001350 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800131e:	490d      	ldr	r1, [pc, #52]	@ (8001354 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001320:	4a0d      	ldr	r2, [pc, #52]	@ (8001358 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001322:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001324:	e002      	b.n	800132c <LoopCopyDataInit>

08001326 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001326:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001328:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800132a:	3304      	adds	r3, #4

0800132c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800132c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800132e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001330:	d3f9      	bcc.n	8001326 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001332:	4a0a      	ldr	r2, [pc, #40]	@ (800135c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001334:	4c0a      	ldr	r4, [pc, #40]	@ (8001360 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001336:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001338:	e001      	b.n	800133e <LoopFillZerobss>

0800133a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800133a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800133c:	3204      	adds	r2, #4

0800133e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800133e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001340:	d3fb      	bcc.n	800133a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001342:	f006 fb7b 	bl	8007a3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001346:	f7ff fbc1 	bl	8000acc <main>
  bx  lr    
 800134a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800134c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001354:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001358:	08007d6c 	.word	0x08007d6c
  ldr r2, =_sbss
 800135c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001360:	20004eac 	.word	0x20004eac

08001364 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001364:	e7fe      	b.n	8001364 <ADC_IRQHandler>
	...

08001368 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800136c:	4b0e      	ldr	r3, [pc, #56]	@ (80013a8 <HAL_Init+0x40>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a0d      	ldr	r2, [pc, #52]	@ (80013a8 <HAL_Init+0x40>)
 8001372:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001376:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001378:	4b0b      	ldr	r3, [pc, #44]	@ (80013a8 <HAL_Init+0x40>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a0a      	ldr	r2, [pc, #40]	@ (80013a8 <HAL_Init+0x40>)
 800137e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001382:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001384:	4b08      	ldr	r3, [pc, #32]	@ (80013a8 <HAL_Init+0x40>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a07      	ldr	r2, [pc, #28]	@ (80013a8 <HAL_Init+0x40>)
 800138a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800138e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001390:	2003      	movs	r0, #3
 8001392:	f000 fb3a 	bl	8001a0a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001396:	200f      	movs	r0, #15
 8001398:	f7ff fc64 	bl	8000c64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800139c:	f7ff fc36 	bl	8000c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40023c00 	.word	0x40023c00

080013ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013b0:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <HAL_IncTick+0x20>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <HAL_IncTick+0x24>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4413      	add	r3, r2
 80013bc:	4a04      	ldr	r2, [pc, #16]	@ (80013d0 <HAL_IncTick+0x24>)
 80013be:	6013      	str	r3, [r2, #0]
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20000008 	.word	0x20000008
 80013d0:	2000031c 	.word	0x2000031c

080013d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return uwTick;
 80013d8:	4b03      	ldr	r3, [pc, #12]	@ (80013e8 <HAL_GetTick+0x14>)
 80013da:	681b      	ldr	r3, [r3, #0]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	2000031c 	.word	0x2000031c

080013ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013f4:	2300      	movs	r3, #0
 80013f6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e033      	b.n	800146a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001406:	2b00      	cmp	r3, #0
 8001408:	d109      	bne.n	800141e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff f8f8 	bl	8000600 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001422:	f003 0310 	and.w	r3, r3, #16
 8001426:	2b00      	cmp	r3, #0
 8001428:	d118      	bne.n	800145c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001432:	f023 0302 	bic.w	r3, r3, #2
 8001436:	f043 0202 	orr.w	r2, r3, #2
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f000 f93a 	bl	80016b8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144e:	f023 0303 	bic.w	r3, r3, #3
 8001452:	f043 0201 	orr.w	r2, r3, #1
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	641a      	str	r2, [r3, #64]	@ 0x40
 800145a:	e001      	b.n	8001460 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001468:	7bfb      	ldrb	r3, [r7, #15]
}
 800146a:	4618      	mov	r0, r3
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800147e:	2300      	movs	r3, #0
 8001480:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001488:	2b01      	cmp	r3, #1
 800148a:	d101      	bne.n	8001490 <HAL_ADC_ConfigChannel+0x1c>
 800148c:	2302      	movs	r3, #2
 800148e:	e105      	b.n	800169c <HAL_ADC_ConfigChannel+0x228>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2201      	movs	r2, #1
 8001494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b09      	cmp	r3, #9
 800149e:	d925      	bls.n	80014ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	68d9      	ldr	r1, [r3, #12]
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	461a      	mov	r2, r3
 80014ae:	4613      	mov	r3, r2
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	4413      	add	r3, r2
 80014b4:	3b1e      	subs	r3, #30
 80014b6:	2207      	movs	r2, #7
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	43da      	mvns	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	400a      	ands	r2, r1
 80014c4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	68d9      	ldr	r1, [r3, #12]
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	4618      	mov	r0, r3
 80014d8:	4603      	mov	r3, r0
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	4403      	add	r3, r0
 80014de:	3b1e      	subs	r3, #30
 80014e0:	409a      	lsls	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	430a      	orrs	r2, r1
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	e022      	b.n	8001532 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6919      	ldr	r1, [r3, #16]
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	461a      	mov	r2, r3
 80014fa:	4613      	mov	r3, r2
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	4413      	add	r3, r2
 8001500:	2207      	movs	r2, #7
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43da      	mvns	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	400a      	ands	r2, r1
 800150e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6919      	ldr	r1, [r3, #16]
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	689a      	ldr	r2, [r3, #8]
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	b29b      	uxth	r3, r3
 8001520:	4618      	mov	r0, r3
 8001522:	4603      	mov	r3, r0
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	4403      	add	r3, r0
 8001528:	409a      	lsls	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	430a      	orrs	r2, r1
 8001530:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	2b06      	cmp	r3, #6
 8001538:	d824      	bhi.n	8001584 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685a      	ldr	r2, [r3, #4]
 8001544:	4613      	mov	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	3b05      	subs	r3, #5
 800154c:	221f      	movs	r2, #31
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43da      	mvns	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	400a      	ands	r2, r1
 800155a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	b29b      	uxth	r3, r3
 8001568:	4618      	mov	r0, r3
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685a      	ldr	r2, [r3, #4]
 800156e:	4613      	mov	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	3b05      	subs	r3, #5
 8001576:	fa00 f203 	lsl.w	r2, r0, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	430a      	orrs	r2, r1
 8001580:	635a      	str	r2, [r3, #52]	@ 0x34
 8001582:	e04c      	b.n	800161e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	2b0c      	cmp	r3, #12
 800158a:	d824      	bhi.n	80015d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	4613      	mov	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4413      	add	r3, r2
 800159c:	3b23      	subs	r3, #35	@ 0x23
 800159e:	221f      	movs	r2, #31
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	43da      	mvns	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	400a      	ands	r2, r1
 80015ac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	4618      	mov	r0, r3
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685a      	ldr	r2, [r3, #4]
 80015c0:	4613      	mov	r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4413      	add	r3, r2
 80015c6:	3b23      	subs	r3, #35	@ 0x23
 80015c8:	fa00 f203 	lsl.w	r2, r0, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	430a      	orrs	r2, r1
 80015d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80015d4:	e023      	b.n	800161e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685a      	ldr	r2, [r3, #4]
 80015e0:	4613      	mov	r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4413      	add	r3, r2
 80015e6:	3b41      	subs	r3, #65	@ 0x41
 80015e8:	221f      	movs	r2, #31
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43da      	mvns	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	400a      	ands	r2, r1
 80015f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	b29b      	uxth	r3, r3
 8001604:	4618      	mov	r0, r3
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685a      	ldr	r2, [r3, #4]
 800160a:	4613      	mov	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4413      	add	r3, r2
 8001610:	3b41      	subs	r3, #65	@ 0x41
 8001612:	fa00 f203 	lsl.w	r2, r0, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	430a      	orrs	r2, r1
 800161c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800161e:	4b22      	ldr	r3, [pc, #136]	@ (80016a8 <HAL_ADC_ConfigChannel+0x234>)
 8001620:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a21      	ldr	r2, [pc, #132]	@ (80016ac <HAL_ADC_ConfigChannel+0x238>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d109      	bne.n	8001640 <HAL_ADC_ConfigChannel+0x1cc>
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b12      	cmp	r3, #18
 8001632:	d105      	bne.n	8001640 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a19      	ldr	r2, [pc, #100]	@ (80016ac <HAL_ADC_ConfigChannel+0x238>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d123      	bne.n	8001692 <HAL_ADC_ConfigChannel+0x21e>
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2b10      	cmp	r3, #16
 8001650:	d003      	beq.n	800165a <HAL_ADC_ConfigChannel+0x1e6>
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2b11      	cmp	r3, #17
 8001658:	d11b      	bne.n	8001692 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2b10      	cmp	r3, #16
 800166c:	d111      	bne.n	8001692 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800166e:	4b10      	ldr	r3, [pc, #64]	@ (80016b0 <HAL_ADC_ConfigChannel+0x23c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a10      	ldr	r2, [pc, #64]	@ (80016b4 <HAL_ADC_ConfigChannel+0x240>)
 8001674:	fba2 2303 	umull	r2, r3, r2, r3
 8001678:	0c9a      	lsrs	r2, r3, #18
 800167a:	4613      	mov	r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001684:	e002      	b.n	800168c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	3b01      	subs	r3, #1
 800168a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f9      	bne.n	8001686 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	40012300 	.word	0x40012300
 80016ac:	40012000 	.word	0x40012000
 80016b0:	20000000 	.word	0x20000000
 80016b4:	431bde83 	.word	0x431bde83

080016b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016c0:	4b79      	ldr	r3, [pc, #484]	@ (80018a8 <ADC_Init+0x1f0>)
 80016c2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	431a      	orrs	r2, r3
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6859      	ldr	r1, [r3, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	691b      	ldr	r3, [r3, #16]
 80016f8:	021a      	lsls	r2, r3, #8
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	430a      	orrs	r2, r1
 8001700:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	685a      	ldr	r2, [r3, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001710:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	6859      	ldr	r1, [r3, #4]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	430a      	orrs	r2, r1
 8001722:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	689a      	ldr	r2, [r3, #8]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001732:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6899      	ldr	r1, [r3, #8]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	68da      	ldr	r2, [r3, #12]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	430a      	orrs	r2, r1
 8001744:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800174a:	4a58      	ldr	r2, [pc, #352]	@ (80018ac <ADC_Init+0x1f4>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d022      	beq.n	8001796 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	689a      	ldr	r2, [r3, #8]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800175e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6899      	ldr	r1, [r3, #8]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	430a      	orrs	r2, r1
 8001770:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001780:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	6899      	ldr	r1, [r3, #8]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	430a      	orrs	r2, r1
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	e00f      	b.n	80017b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80017a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80017b4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f022 0202 	bic.w	r2, r2, #2
 80017c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6899      	ldr	r1, [r3, #8]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	7e1b      	ldrb	r3, [r3, #24]
 80017d0:	005a      	lsls	r2, r3, #1
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	430a      	orrs	r2, r1
 80017d8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d01b      	beq.n	800181c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	685a      	ldr	r2, [r3, #4]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80017f2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	685a      	ldr	r2, [r3, #4]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001802:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6859      	ldr	r1, [r3, #4]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800180e:	3b01      	subs	r3, #1
 8001810:	035a      	lsls	r2, r3, #13
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	430a      	orrs	r2, r1
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	e007      	b.n	800182c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800182a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800183a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	3b01      	subs	r3, #1
 8001848:	051a      	lsls	r2, r3, #20
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	430a      	orrs	r2, r1
 8001850:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001860:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6899      	ldr	r1, [r3, #8]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800186e:	025a      	lsls	r2, r3, #9
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	430a      	orrs	r2, r1
 8001876:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	689a      	ldr	r2, [r3, #8]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001886:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6899      	ldr	r1, [r3, #8]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	029a      	lsls	r2, r3, #10
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	430a      	orrs	r2, r1
 800189a:	609a      	str	r2, [r3, #8]
}
 800189c:	bf00      	nop
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	40012300 	.word	0x40012300
 80018ac:	0f000001 	.word	0x0f000001

080018b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c0:	4b0c      	ldr	r3, [pc, #48]	@ (80018f4 <__NVIC_SetPriorityGrouping+0x44>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018cc:	4013      	ands	r3, r2
 80018ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018e2:	4a04      	ldr	r2, [pc, #16]	@ (80018f4 <__NVIC_SetPriorityGrouping+0x44>)
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	60d3      	str	r3, [r2, #12]
}
 80018e8:	bf00      	nop
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018fc:	4b04      	ldr	r3, [pc, #16]	@ (8001910 <__NVIC_GetPriorityGrouping+0x18>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	0a1b      	lsrs	r3, r3, #8
 8001902:	f003 0307 	and.w	r3, r3, #7
}
 8001906:	4618      	mov	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800191e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001922:	2b00      	cmp	r3, #0
 8001924:	db0b      	blt.n	800193e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	f003 021f 	and.w	r2, r3, #31
 800192c:	4907      	ldr	r1, [pc, #28]	@ (800194c <__NVIC_EnableIRQ+0x38>)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	095b      	lsrs	r3, r3, #5
 8001934:	2001      	movs	r0, #1
 8001936:	fa00 f202 	lsl.w	r2, r0, r2
 800193a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	e000e100 	.word	0xe000e100

08001950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	6039      	str	r1, [r7, #0]
 800195a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800195c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001960:	2b00      	cmp	r3, #0
 8001962:	db0a      	blt.n	800197a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	b2da      	uxtb	r2, r3
 8001968:	490c      	ldr	r1, [pc, #48]	@ (800199c <__NVIC_SetPriority+0x4c>)
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	0112      	lsls	r2, r2, #4
 8001970:	b2d2      	uxtb	r2, r2
 8001972:	440b      	add	r3, r1
 8001974:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001978:	e00a      	b.n	8001990 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	b2da      	uxtb	r2, r3
 800197e:	4908      	ldr	r1, [pc, #32]	@ (80019a0 <__NVIC_SetPriority+0x50>)
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	f003 030f 	and.w	r3, r3, #15
 8001986:	3b04      	subs	r3, #4
 8001988:	0112      	lsls	r2, r2, #4
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	440b      	add	r3, r1
 800198e:	761a      	strb	r2, [r3, #24]
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000e100 	.word	0xe000e100
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b089      	sub	sp, #36	@ 0x24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f1c3 0307 	rsb	r3, r3, #7
 80019be:	2b04      	cmp	r3, #4
 80019c0:	bf28      	it	cs
 80019c2:	2304      	movcs	r3, #4
 80019c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	3304      	adds	r3, #4
 80019ca:	2b06      	cmp	r3, #6
 80019cc:	d902      	bls.n	80019d4 <NVIC_EncodePriority+0x30>
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3b03      	subs	r3, #3
 80019d2:	e000      	b.n	80019d6 <NVIC_EncodePriority+0x32>
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43da      	mvns	r2, r3
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	401a      	ands	r2, r3
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	fa01 f303 	lsl.w	r3, r1, r3
 80019f6:	43d9      	mvns	r1, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019fc:	4313      	orrs	r3, r2
         );
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3724      	adds	r7, #36	@ 0x24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff ff4c 	bl	80018b0 <__NVIC_SetPriorityGrouping>
}
 8001a18:	bf00      	nop
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
 8001a2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a32:	f7ff ff61 	bl	80018f8 <__NVIC_GetPriorityGrouping>
 8001a36:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	68b9      	ldr	r1, [r7, #8]
 8001a3c:	6978      	ldr	r0, [r7, #20]
 8001a3e:	f7ff ffb1 	bl	80019a4 <NVIC_EncodePriority>
 8001a42:	4602      	mov	r2, r0
 8001a44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a48:	4611      	mov	r1, r2
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff ff80 	bl	8001950 <__NVIC_SetPriority>
}
 8001a50:	bf00      	nop
 8001a52:	3718      	adds	r7, #24
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff ff54 	bl	8001914 <__NVIC_EnableIRQ>
}
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a80:	f7ff fca8 	bl	80013d4 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d101      	bne.n	8001a90 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e099      	b.n	8001bc4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2202      	movs	r2, #2
 8001a94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f022 0201 	bic.w	r2, r2, #1
 8001aae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ab0:	e00f      	b.n	8001ad2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ab2:	f7ff fc8f 	bl	80013d4 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b05      	cmp	r3, #5
 8001abe:	d908      	bls.n	8001ad2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2220      	movs	r2, #32
 8001ac4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2203      	movs	r2, #3
 8001aca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e078      	b.n	8001bc4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1e8      	bne.n	8001ab2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	4b38      	ldr	r3, [pc, #224]	@ (8001bcc <HAL_DMA_Init+0x158>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001afe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a1b      	ldr	r3, [r3, #32]
 8001b1c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b28:	2b04      	cmp	r3, #4
 8001b2a:	d107      	bne.n	8001b3c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b34:	4313      	orrs	r3, r2
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	f023 0307 	bic.w	r3, r3, #7
 8001b52:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b62:	2b04      	cmp	r3, #4
 8001b64:	d117      	bne.n	8001b96 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d00e      	beq.n	8001b96 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 f9e9 	bl	8001f50 <DMA_CheckFifoParam>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d008      	beq.n	8001b96 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2240      	movs	r2, #64	@ 0x40
 8001b88:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001b92:	2301      	movs	r3, #1
 8001b94:	e016      	b.n	8001bc4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	697a      	ldr	r2, [r7, #20]
 8001b9c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 f9a0 	bl	8001ee4 <DMA_CalcBaseAndBitshift>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bac:	223f      	movs	r2, #63	@ 0x3f
 8001bae:	409a      	lsls	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	f010803f 	.word	0xf010803f

08001bd0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001bdc:	4b8e      	ldr	r3, [pc, #568]	@ (8001e18 <HAL_DMA_IRQHandler+0x248>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a8e      	ldr	r2, [pc, #568]	@ (8001e1c <HAL_DMA_IRQHandler+0x24c>)
 8001be2:	fba2 2303 	umull	r2, r3, r2, r3
 8001be6:	0a9b      	lsrs	r3, r3, #10
 8001be8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bfa:	2208      	movs	r2, #8
 8001bfc:	409a      	lsls	r2, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	4013      	ands	r3, r2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d01a      	beq.n	8001c3c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d013      	beq.n	8001c3c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 0204 	bic.w	r2, r2, #4
 8001c22:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c28:	2208      	movs	r2, #8
 8001c2a:	409a      	lsls	r2, r3
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c34:	f043 0201 	orr.w	r2, r3, #1
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c40:	2201      	movs	r2, #1
 8001c42:	409a      	lsls	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4013      	ands	r3, r2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d012      	beq.n	8001c72 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d00b      	beq.n	8001c72 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c5e:	2201      	movs	r2, #1
 8001c60:	409a      	lsls	r2, r3
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c6a:	f043 0202 	orr.w	r2, r3, #2
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c76:	2204      	movs	r2, #4
 8001c78:	409a      	lsls	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d012      	beq.n	8001ca8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d00b      	beq.n	8001ca8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c94:	2204      	movs	r2, #4
 8001c96:	409a      	lsls	r2, r3
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ca0:	f043 0204 	orr.w	r2, r3, #4
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cac:	2210      	movs	r2, #16
 8001cae:	409a      	lsls	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d043      	beq.n	8001d40 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0308 	and.w	r3, r3, #8
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d03c      	beq.n	8001d40 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cca:	2210      	movs	r2, #16
 8001ccc:	409a      	lsls	r2, r3
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d018      	beq.n	8001d12 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d108      	bne.n	8001d00 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d024      	beq.n	8001d40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	4798      	blx	r3
 8001cfe:	e01f      	b.n	8001d40 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d01b      	beq.n	8001d40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	4798      	blx	r3
 8001d10:	e016      	b.n	8001d40 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d107      	bne.n	8001d30 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 0208 	bic.w	r2, r2, #8
 8001d2e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d003      	beq.n	8001d40 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d44:	2220      	movs	r2, #32
 8001d46:	409a      	lsls	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f000 808f 	beq.w	8001e70 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0310 	and.w	r3, r3, #16
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 8087 	beq.w	8001e70 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d66:	2220      	movs	r2, #32
 8001d68:	409a      	lsls	r2, r3
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b05      	cmp	r3, #5
 8001d78:	d136      	bne.n	8001de8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 0216 	bic.w	r2, r2, #22
 8001d88:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	695a      	ldr	r2, [r3, #20]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d98:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d103      	bne.n	8001daa <HAL_DMA_IRQHandler+0x1da>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d007      	beq.n	8001dba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f022 0208 	bic.w	r2, r2, #8
 8001db8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dbe:	223f      	movs	r2, #63	@ 0x3f
 8001dc0:	409a      	lsls	r2, r3
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d07e      	beq.n	8001edc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	4798      	blx	r3
        }
        return;
 8001de6:	e079      	b.n	8001edc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d01d      	beq.n	8001e32 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d10d      	bne.n	8001e20 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d031      	beq.n	8001e70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	4798      	blx	r3
 8001e14:	e02c      	b.n	8001e70 <HAL_DMA_IRQHandler+0x2a0>
 8001e16:	bf00      	nop
 8001e18:	20000000 	.word	0x20000000
 8001e1c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d023      	beq.n	8001e70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	4798      	blx	r3
 8001e30:	e01e      	b.n	8001e70 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d10f      	bne.n	8001e60 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 0210 	bic.w	r2, r2, #16
 8001e4e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d032      	beq.n	8001ede <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d022      	beq.n	8001eca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2205      	movs	r2, #5
 8001e88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 0201 	bic.w	r2, r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	60bb      	str	r3, [r7, #8]
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d307      	bcc.n	8001eb8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f2      	bne.n	8001e9c <HAL_DMA_IRQHandler+0x2cc>
 8001eb6:	e000      	b.n	8001eba <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001eb8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d005      	beq.n	8001ede <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	4798      	blx	r3
 8001eda:	e000      	b.n	8001ede <HAL_DMA_IRQHandler+0x30e>
        return;
 8001edc:	bf00      	nop
    }
  }
}
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	3b10      	subs	r3, #16
 8001ef4:	4a14      	ldr	r2, [pc, #80]	@ (8001f48 <DMA_CalcBaseAndBitshift+0x64>)
 8001ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8001efa:	091b      	lsrs	r3, r3, #4
 8001efc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001efe:	4a13      	ldr	r2, [pc, #76]	@ (8001f4c <DMA_CalcBaseAndBitshift+0x68>)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	4413      	add	r3, r2
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	461a      	mov	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2b03      	cmp	r3, #3
 8001f10:	d909      	bls.n	8001f26 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001f1a:	f023 0303 	bic.w	r3, r3, #3
 8001f1e:	1d1a      	adds	r2, r3, #4
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f24:	e007      	b.n	8001f36 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001f2e:	f023 0303 	bic.w	r3, r3, #3
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3714      	adds	r7, #20
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	aaaaaaab 	.word	0xaaaaaaab
 8001f4c:	08007d54 	.word	0x08007d54

08001f50 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f60:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d11f      	bne.n	8001faa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	2b03      	cmp	r3, #3
 8001f6e:	d856      	bhi.n	800201e <DMA_CheckFifoParam+0xce>
 8001f70:	a201      	add	r2, pc, #4	@ (adr r2, 8001f78 <DMA_CheckFifoParam+0x28>)
 8001f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f76:	bf00      	nop
 8001f78:	08001f89 	.word	0x08001f89
 8001f7c:	08001f9b 	.word	0x08001f9b
 8001f80:	08001f89 	.word	0x08001f89
 8001f84:	0800201f 	.word	0x0800201f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d046      	beq.n	8002022 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f98:	e043      	b.n	8002022 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f9e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001fa2:	d140      	bne.n	8002026 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fa8:	e03d      	b.n	8002026 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fb2:	d121      	bne.n	8001ff8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	2b03      	cmp	r3, #3
 8001fb8:	d837      	bhi.n	800202a <DMA_CheckFifoParam+0xda>
 8001fba:	a201      	add	r2, pc, #4	@ (adr r2, 8001fc0 <DMA_CheckFifoParam+0x70>)
 8001fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc0:	08001fd1 	.word	0x08001fd1
 8001fc4:	08001fd7 	.word	0x08001fd7
 8001fc8:	08001fd1 	.word	0x08001fd1
 8001fcc:	08001fe9 	.word	0x08001fe9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8001fd4:	e030      	b.n	8002038 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fda:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d025      	beq.n	800202e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fe6:	e022      	b.n	800202e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fec:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001ff0:	d11f      	bne.n	8002032 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ff6:	e01c      	b.n	8002032 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d903      	bls.n	8002006 <DMA_CheckFifoParam+0xb6>
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	2b03      	cmp	r3, #3
 8002002:	d003      	beq.n	800200c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002004:	e018      	b.n	8002038 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	73fb      	strb	r3, [r7, #15]
      break;
 800200a:	e015      	b.n	8002038 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002010:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00e      	beq.n	8002036 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	73fb      	strb	r3, [r7, #15]
      break;
 800201c:	e00b      	b.n	8002036 <DMA_CheckFifoParam+0xe6>
      break;
 800201e:	bf00      	nop
 8002020:	e00a      	b.n	8002038 <DMA_CheckFifoParam+0xe8>
      break;
 8002022:	bf00      	nop
 8002024:	e008      	b.n	8002038 <DMA_CheckFifoParam+0xe8>
      break;
 8002026:	bf00      	nop
 8002028:	e006      	b.n	8002038 <DMA_CheckFifoParam+0xe8>
      break;
 800202a:	bf00      	nop
 800202c:	e004      	b.n	8002038 <DMA_CheckFifoParam+0xe8>
      break;
 800202e:	bf00      	nop
 8002030:	e002      	b.n	8002038 <DMA_CheckFifoParam+0xe8>
      break;   
 8002032:	bf00      	nop
 8002034:	e000      	b.n	8002038 <DMA_CheckFifoParam+0xe8>
      break;
 8002036:	bf00      	nop
    }
  } 
  
  return status; 
 8002038:	7bfb      	ldrb	r3, [r7, #15]
}
 800203a:	4618      	mov	r0, r3
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop

08002048 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002048:	b480      	push	{r7}
 800204a:	b089      	sub	sp, #36	@ 0x24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002052:	2300      	movs	r3, #0
 8002054:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002056:	2300      	movs	r3, #0
 8002058:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800205a:	2300      	movs	r3, #0
 800205c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800205e:	2300      	movs	r3, #0
 8002060:	61fb      	str	r3, [r7, #28]
 8002062:	e159      	b.n	8002318 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002064:	2201      	movs	r2, #1
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	4013      	ands	r3, r2
 8002076:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	429a      	cmp	r2, r3
 800207e:	f040 8148 	bne.w	8002312 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f003 0303 	and.w	r3, r3, #3
 800208a:	2b01      	cmp	r3, #1
 800208c:	d005      	beq.n	800209a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002096:	2b02      	cmp	r3, #2
 8002098:	d130      	bne.n	80020fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	2203      	movs	r2, #3
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43db      	mvns	r3, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4013      	ands	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	68da      	ldr	r2, [r3, #12]
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020d0:	2201      	movs	r2, #1
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	43db      	mvns	r3, r3
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4013      	ands	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	091b      	lsrs	r3, r3, #4
 80020e6:	f003 0201 	and.w	r2, r3, #1
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f003 0303 	and.w	r3, r3, #3
 8002104:	2b03      	cmp	r3, #3
 8002106:	d017      	beq.n	8002138 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	2203      	movs	r2, #3
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4013      	ands	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d123      	bne.n	800218c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	08da      	lsrs	r2, r3, #3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3208      	adds	r2, #8
 800214c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002150:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	220f      	movs	r2, #15
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	691a      	ldr	r2, [r3, #16]
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4313      	orrs	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	08da      	lsrs	r2, r3, #3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	3208      	adds	r2, #8
 8002186:	69b9      	ldr	r1, [r7, #24]
 8002188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	2203      	movs	r2, #3
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	43db      	mvns	r3, r3
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	4013      	ands	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 0203 	and.w	r2, r3, #3
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 80a2 	beq.w	8002312 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	4b57      	ldr	r3, [pc, #348]	@ (8002330 <HAL_GPIO_Init+0x2e8>)
 80021d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d6:	4a56      	ldr	r2, [pc, #344]	@ (8002330 <HAL_GPIO_Init+0x2e8>)
 80021d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80021de:	4b54      	ldr	r3, [pc, #336]	@ (8002330 <HAL_GPIO_Init+0x2e8>)
 80021e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021ea:	4a52      	ldr	r2, [pc, #328]	@ (8002334 <HAL_GPIO_Init+0x2ec>)
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	089b      	lsrs	r3, r3, #2
 80021f0:	3302      	adds	r3, #2
 80021f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f003 0303 	and.w	r3, r3, #3
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	220f      	movs	r2, #15
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43db      	mvns	r3, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4013      	ands	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a49      	ldr	r2, [pc, #292]	@ (8002338 <HAL_GPIO_Init+0x2f0>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d019      	beq.n	800224a <HAL_GPIO_Init+0x202>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a48      	ldr	r2, [pc, #288]	@ (800233c <HAL_GPIO_Init+0x2f4>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d013      	beq.n	8002246 <HAL_GPIO_Init+0x1fe>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a47      	ldr	r2, [pc, #284]	@ (8002340 <HAL_GPIO_Init+0x2f8>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d00d      	beq.n	8002242 <HAL_GPIO_Init+0x1fa>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a46      	ldr	r2, [pc, #280]	@ (8002344 <HAL_GPIO_Init+0x2fc>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d007      	beq.n	800223e <HAL_GPIO_Init+0x1f6>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a45      	ldr	r2, [pc, #276]	@ (8002348 <HAL_GPIO_Init+0x300>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d101      	bne.n	800223a <HAL_GPIO_Init+0x1f2>
 8002236:	2304      	movs	r3, #4
 8002238:	e008      	b.n	800224c <HAL_GPIO_Init+0x204>
 800223a:	2307      	movs	r3, #7
 800223c:	e006      	b.n	800224c <HAL_GPIO_Init+0x204>
 800223e:	2303      	movs	r3, #3
 8002240:	e004      	b.n	800224c <HAL_GPIO_Init+0x204>
 8002242:	2302      	movs	r3, #2
 8002244:	e002      	b.n	800224c <HAL_GPIO_Init+0x204>
 8002246:	2301      	movs	r3, #1
 8002248:	e000      	b.n	800224c <HAL_GPIO_Init+0x204>
 800224a:	2300      	movs	r3, #0
 800224c:	69fa      	ldr	r2, [r7, #28]
 800224e:	f002 0203 	and.w	r2, r2, #3
 8002252:	0092      	lsls	r2, r2, #2
 8002254:	4093      	lsls	r3, r2
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4313      	orrs	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800225c:	4935      	ldr	r1, [pc, #212]	@ (8002334 <HAL_GPIO_Init+0x2ec>)
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	089b      	lsrs	r3, r3, #2
 8002262:	3302      	adds	r3, #2
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800226a:	4b38      	ldr	r3, [pc, #224]	@ (800234c <HAL_GPIO_Init+0x304>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	43db      	mvns	r3, r3
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4013      	ands	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	4313      	orrs	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800228e:	4a2f      	ldr	r2, [pc, #188]	@ (800234c <HAL_GPIO_Init+0x304>)
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002294:	4b2d      	ldr	r3, [pc, #180]	@ (800234c <HAL_GPIO_Init+0x304>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	43db      	mvns	r3, r3
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4013      	ands	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d003      	beq.n	80022b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022b8:	4a24      	ldr	r2, [pc, #144]	@ (800234c <HAL_GPIO_Init+0x304>)
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022be:	4b23      	ldr	r3, [pc, #140]	@ (800234c <HAL_GPIO_Init+0x304>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	43db      	mvns	r3, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4013      	ands	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	4313      	orrs	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022e2:	4a1a      	ldr	r2, [pc, #104]	@ (800234c <HAL_GPIO_Init+0x304>)
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022e8:	4b18      	ldr	r3, [pc, #96]	@ (800234c <HAL_GPIO_Init+0x304>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	43db      	mvns	r3, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d003      	beq.n	800230c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	4313      	orrs	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800230c:	4a0f      	ldr	r2, [pc, #60]	@ (800234c <HAL_GPIO_Init+0x304>)
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	3301      	adds	r3, #1
 8002316:	61fb      	str	r3, [r7, #28]
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	2b0f      	cmp	r3, #15
 800231c:	f67f aea2 	bls.w	8002064 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002320:	bf00      	nop
 8002322:	bf00      	nop
 8002324:	3724      	adds	r7, #36	@ 0x24
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	40023800 	.word	0x40023800
 8002334:	40013800 	.word	0x40013800
 8002338:	40020000 	.word	0x40020000
 800233c:	40020400 	.word	0x40020400
 8002340:	40020800 	.word	0x40020800
 8002344:	40020c00 	.word	0x40020c00
 8002348:	40021000 	.word	0x40021000
 800234c:	40013c00 	.word	0x40013c00

08002350 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e12b      	b.n	80025ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d106      	bne.n	800237c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7fe fb40 	bl	80009fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2224      	movs	r2, #36	@ 0x24
 8002380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 0201 	bic.w	r2, r2, #1
 8002392:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023b4:	f000 fd40 	bl	8002e38 <HAL_RCC_GetPCLK1Freq>
 80023b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	4a81      	ldr	r2, [pc, #516]	@ (80025c4 <HAL_I2C_Init+0x274>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d807      	bhi.n	80023d4 <HAL_I2C_Init+0x84>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	4a80      	ldr	r2, [pc, #512]	@ (80025c8 <HAL_I2C_Init+0x278>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	bf94      	ite	ls
 80023cc:	2301      	movls	r3, #1
 80023ce:	2300      	movhi	r3, #0
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	e006      	b.n	80023e2 <HAL_I2C_Init+0x92>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4a7d      	ldr	r2, [pc, #500]	@ (80025cc <HAL_I2C_Init+0x27c>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	bf94      	ite	ls
 80023dc:	2301      	movls	r3, #1
 80023de:	2300      	movhi	r3, #0
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e0e7      	b.n	80025ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	4a78      	ldr	r2, [pc, #480]	@ (80025d0 <HAL_I2C_Init+0x280>)
 80023ee:	fba2 2303 	umull	r2, r3, r2, r3
 80023f2:	0c9b      	lsrs	r3, r3, #18
 80023f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68ba      	ldr	r2, [r7, #8]
 8002406:	430a      	orrs	r2, r1
 8002408:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	4a6a      	ldr	r2, [pc, #424]	@ (80025c4 <HAL_I2C_Init+0x274>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d802      	bhi.n	8002424 <HAL_I2C_Init+0xd4>
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	3301      	adds	r3, #1
 8002422:	e009      	b.n	8002438 <HAL_I2C_Init+0xe8>
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800242a:	fb02 f303 	mul.w	r3, r2, r3
 800242e:	4a69      	ldr	r2, [pc, #420]	@ (80025d4 <HAL_I2C_Init+0x284>)
 8002430:	fba2 2303 	umull	r2, r3, r2, r3
 8002434:	099b      	lsrs	r3, r3, #6
 8002436:	3301      	adds	r3, #1
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	6812      	ldr	r2, [r2, #0]
 800243c:	430b      	orrs	r3, r1
 800243e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800244a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	495c      	ldr	r1, [pc, #368]	@ (80025c4 <HAL_I2C_Init+0x274>)
 8002454:	428b      	cmp	r3, r1
 8002456:	d819      	bhi.n	800248c <HAL_I2C_Init+0x13c>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	1e59      	subs	r1, r3, #1
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	fbb1 f3f3 	udiv	r3, r1, r3
 8002466:	1c59      	adds	r1, r3, #1
 8002468:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800246c:	400b      	ands	r3, r1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00a      	beq.n	8002488 <HAL_I2C_Init+0x138>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	1e59      	subs	r1, r3, #1
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002480:	3301      	adds	r3, #1
 8002482:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002486:	e051      	b.n	800252c <HAL_I2C_Init+0x1dc>
 8002488:	2304      	movs	r3, #4
 800248a:	e04f      	b.n	800252c <HAL_I2C_Init+0x1dc>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d111      	bne.n	80024b8 <HAL_I2C_Init+0x168>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	1e58      	subs	r0, r3, #1
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6859      	ldr	r1, [r3, #4]
 800249c:	460b      	mov	r3, r1
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	440b      	add	r3, r1
 80024a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024a6:	3301      	adds	r3, #1
 80024a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	bf0c      	ite	eq
 80024b0:	2301      	moveq	r3, #1
 80024b2:	2300      	movne	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	e012      	b.n	80024de <HAL_I2C_Init+0x18e>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	1e58      	subs	r0, r3, #1
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6859      	ldr	r1, [r3, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	0099      	lsls	r1, r3, #2
 80024c8:	440b      	add	r3, r1
 80024ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ce:	3301      	adds	r3, #1
 80024d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	bf0c      	ite	eq
 80024d8:	2301      	moveq	r3, #1
 80024da:	2300      	movne	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <HAL_I2C_Init+0x196>
 80024e2:	2301      	movs	r3, #1
 80024e4:	e022      	b.n	800252c <HAL_I2C_Init+0x1dc>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10e      	bne.n	800250c <HAL_I2C_Init+0x1bc>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	1e58      	subs	r0, r3, #1
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6859      	ldr	r1, [r3, #4]
 80024f6:	460b      	mov	r3, r1
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	440b      	add	r3, r1
 80024fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002500:	3301      	adds	r3, #1
 8002502:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002506:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800250a:	e00f      	b.n	800252c <HAL_I2C_Init+0x1dc>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	1e58      	subs	r0, r3, #1
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6859      	ldr	r1, [r3, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	440b      	add	r3, r1
 800251a:	0099      	lsls	r1, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002522:	3301      	adds	r3, #1
 8002524:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002528:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	6809      	ldr	r1, [r1, #0]
 8002530:	4313      	orrs	r3, r2
 8002532:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69da      	ldr	r2, [r3, #28]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	431a      	orrs	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	430a      	orrs	r2, r1
 800254e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800255a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	6911      	ldr	r1, [r2, #16]
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	68d2      	ldr	r2, [r2, #12]
 8002566:	4311      	orrs	r1, r2
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6812      	ldr	r2, [r2, #0]
 800256c:	430b      	orrs	r3, r1
 800256e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	695a      	ldr	r2, [r3, #20]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	431a      	orrs	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f042 0201 	orr.w	r2, r2, #1
 800259a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2220      	movs	r2, #32
 80025a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	000186a0 	.word	0x000186a0
 80025c8:	001e847f 	.word	0x001e847f
 80025cc:	003d08ff 	.word	0x003d08ff
 80025d0:	431bde83 	.word	0x431bde83
 80025d4:	10624dd3 	.word	0x10624dd3

080025d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e267      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d075      	beq.n	80026e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80025f6:	4b88      	ldr	r3, [pc, #544]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
 80025fe:	2b04      	cmp	r3, #4
 8002600:	d00c      	beq.n	800261c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002602:	4b85      	ldr	r3, [pc, #532]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800260a:	2b08      	cmp	r3, #8
 800260c:	d112      	bne.n	8002634 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800260e:	4b82      	ldr	r3, [pc, #520]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002616:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800261a:	d10b      	bne.n	8002634 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800261c:	4b7e      	ldr	r3, [pc, #504]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d05b      	beq.n	80026e0 <HAL_RCC_OscConfig+0x108>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d157      	bne.n	80026e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e242      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800263c:	d106      	bne.n	800264c <HAL_RCC_OscConfig+0x74>
 800263e:	4b76      	ldr	r3, [pc, #472]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a75      	ldr	r2, [pc, #468]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 8002644:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002648:	6013      	str	r3, [r2, #0]
 800264a:	e01d      	b.n	8002688 <HAL_RCC_OscConfig+0xb0>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002654:	d10c      	bne.n	8002670 <HAL_RCC_OscConfig+0x98>
 8002656:	4b70      	ldr	r3, [pc, #448]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a6f      	ldr	r2, [pc, #444]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 800265c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	4b6d      	ldr	r3, [pc, #436]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a6c      	ldr	r2, [pc, #432]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 8002668:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800266c:	6013      	str	r3, [r2, #0]
 800266e:	e00b      	b.n	8002688 <HAL_RCC_OscConfig+0xb0>
 8002670:	4b69      	ldr	r3, [pc, #420]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a68      	ldr	r2, [pc, #416]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 8002676:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800267a:	6013      	str	r3, [r2, #0]
 800267c:	4b66      	ldr	r3, [pc, #408]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a65      	ldr	r2, [pc, #404]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 8002682:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002686:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d013      	beq.n	80026b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002690:	f7fe fea0 	bl	80013d4 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002698:	f7fe fe9c 	bl	80013d4 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b64      	cmp	r3, #100	@ 0x64
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e207      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026aa:	4b5b      	ldr	r3, [pc, #364]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f0      	beq.n	8002698 <HAL_RCC_OscConfig+0xc0>
 80026b6:	e014      	b.n	80026e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b8:	f7fe fe8c 	bl	80013d4 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026c0:	f7fe fe88 	bl	80013d4 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b64      	cmp	r3, #100	@ 0x64
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e1f3      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026d2:	4b51      	ldr	r3, [pc, #324]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f0      	bne.n	80026c0 <HAL_RCC_OscConfig+0xe8>
 80026de:	e000      	b.n	80026e2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d063      	beq.n	80027b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80026ee:	4b4a      	ldr	r3, [pc, #296]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 030c 	and.w	r3, r3, #12
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00b      	beq.n	8002712 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026fa:	4b47      	ldr	r3, [pc, #284]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002702:	2b08      	cmp	r3, #8
 8002704:	d11c      	bne.n	8002740 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002706:	4b44      	ldr	r3, [pc, #272]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d116      	bne.n	8002740 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002712:	4b41      	ldr	r3, [pc, #260]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d005      	beq.n	800272a <HAL_RCC_OscConfig+0x152>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d001      	beq.n	800272a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e1c7      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800272a:	4b3b      	ldr	r3, [pc, #236]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	4937      	ldr	r1, [pc, #220]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 800273a:	4313      	orrs	r3, r2
 800273c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800273e:	e03a      	b.n	80027b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d020      	beq.n	800278a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002748:	4b34      	ldr	r3, [pc, #208]	@ (800281c <HAL_RCC_OscConfig+0x244>)
 800274a:	2201      	movs	r2, #1
 800274c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274e:	f7fe fe41 	bl	80013d4 <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002756:	f7fe fe3d 	bl	80013d4 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e1a8      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002768:	4b2b      	ldr	r3, [pc, #172]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0f0      	beq.n	8002756 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002774:	4b28      	ldr	r3, [pc, #160]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	4925      	ldr	r1, [pc, #148]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 8002784:	4313      	orrs	r3, r2
 8002786:	600b      	str	r3, [r1, #0]
 8002788:	e015      	b.n	80027b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800278a:	4b24      	ldr	r3, [pc, #144]	@ (800281c <HAL_RCC_OscConfig+0x244>)
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002790:	f7fe fe20 	bl	80013d4 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002798:	f7fe fe1c 	bl	80013d4 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e187      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1f0      	bne.n	8002798 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d036      	beq.n	8002830 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d016      	beq.n	80027f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ca:	4b15      	ldr	r3, [pc, #84]	@ (8002820 <HAL_RCC_OscConfig+0x248>)
 80027cc:	2201      	movs	r2, #1
 80027ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d0:	f7fe fe00 	bl	80013d4 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027d8:	f7fe fdfc 	bl	80013d4 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e167      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002818 <HAL_RCC_OscConfig+0x240>)
 80027ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d0f0      	beq.n	80027d8 <HAL_RCC_OscConfig+0x200>
 80027f6:	e01b      	b.n	8002830 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027f8:	4b09      	ldr	r3, [pc, #36]	@ (8002820 <HAL_RCC_OscConfig+0x248>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027fe:	f7fe fde9 	bl	80013d4 <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002804:	e00e      	b.n	8002824 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002806:	f7fe fde5 	bl	80013d4 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d907      	bls.n	8002824 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e150      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
 8002818:	40023800 	.word	0x40023800
 800281c:	42470000 	.word	0x42470000
 8002820:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002824:	4b88      	ldr	r3, [pc, #544]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002826:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1ea      	bne.n	8002806 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0304 	and.w	r3, r3, #4
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 8097 	beq.w	800296c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800283e:	2300      	movs	r3, #0
 8002840:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002842:	4b81      	ldr	r3, [pc, #516]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10f      	bne.n	800286e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	4b7d      	ldr	r3, [pc, #500]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002856:	4a7c      	ldr	r2, [pc, #496]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002858:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800285c:	6413      	str	r3, [r2, #64]	@ 0x40
 800285e:	4b7a      	ldr	r3, [pc, #488]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002866:	60bb      	str	r3, [r7, #8]
 8002868:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800286a:	2301      	movs	r3, #1
 800286c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286e:	4b77      	ldr	r3, [pc, #476]	@ (8002a4c <HAL_RCC_OscConfig+0x474>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002876:	2b00      	cmp	r3, #0
 8002878:	d118      	bne.n	80028ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800287a:	4b74      	ldr	r3, [pc, #464]	@ (8002a4c <HAL_RCC_OscConfig+0x474>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a73      	ldr	r2, [pc, #460]	@ (8002a4c <HAL_RCC_OscConfig+0x474>)
 8002880:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002884:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002886:	f7fe fda5 	bl	80013d4 <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800288e:	f7fe fda1 	bl	80013d4 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e10c      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a0:	4b6a      	ldr	r3, [pc, #424]	@ (8002a4c <HAL_RCC_OscConfig+0x474>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0f0      	beq.n	800288e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d106      	bne.n	80028c2 <HAL_RCC_OscConfig+0x2ea>
 80028b4:	4b64      	ldr	r3, [pc, #400]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 80028b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b8:	4a63      	ldr	r2, [pc, #396]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 80028ba:	f043 0301 	orr.w	r3, r3, #1
 80028be:	6713      	str	r3, [r2, #112]	@ 0x70
 80028c0:	e01c      	b.n	80028fc <HAL_RCC_OscConfig+0x324>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	2b05      	cmp	r3, #5
 80028c8:	d10c      	bne.n	80028e4 <HAL_RCC_OscConfig+0x30c>
 80028ca:	4b5f      	ldr	r3, [pc, #380]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 80028cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ce:	4a5e      	ldr	r2, [pc, #376]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 80028d0:	f043 0304 	orr.w	r3, r3, #4
 80028d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80028d6:	4b5c      	ldr	r3, [pc, #368]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 80028d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028da:	4a5b      	ldr	r2, [pc, #364]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80028e2:	e00b      	b.n	80028fc <HAL_RCC_OscConfig+0x324>
 80028e4:	4b58      	ldr	r3, [pc, #352]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 80028e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e8:	4a57      	ldr	r2, [pc, #348]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 80028ea:	f023 0301 	bic.w	r3, r3, #1
 80028ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80028f0:	4b55      	ldr	r3, [pc, #340]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 80028f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f4:	4a54      	ldr	r2, [pc, #336]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 80028f6:	f023 0304 	bic.w	r3, r3, #4
 80028fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d015      	beq.n	8002930 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002904:	f7fe fd66 	bl	80013d4 <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800290a:	e00a      	b.n	8002922 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800290c:	f7fe fd62 	bl	80013d4 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	f241 3288 	movw	r2, #5000	@ 0x1388
 800291a:	4293      	cmp	r3, r2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e0cb      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002922:	4b49      	ldr	r3, [pc, #292]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0ee      	beq.n	800290c <HAL_RCC_OscConfig+0x334>
 800292e:	e014      	b.n	800295a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002930:	f7fe fd50 	bl	80013d4 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002936:	e00a      	b.n	800294e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002938:	f7fe fd4c 	bl	80013d4 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002946:	4293      	cmp	r3, r2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e0b5      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800294e:	4b3e      	ldr	r3, [pc, #248]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1ee      	bne.n	8002938 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800295a:	7dfb      	ldrb	r3, [r7, #23]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d105      	bne.n	800296c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002960:	4b39      	ldr	r3, [pc, #228]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002964:	4a38      	ldr	r2, [pc, #224]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002966:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800296a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 80a1 	beq.w	8002ab8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002976:	4b34      	ldr	r3, [pc, #208]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 030c 	and.w	r3, r3, #12
 800297e:	2b08      	cmp	r3, #8
 8002980:	d05c      	beq.n	8002a3c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	2b02      	cmp	r3, #2
 8002988:	d141      	bne.n	8002a0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800298a:	4b31      	ldr	r3, [pc, #196]	@ (8002a50 <HAL_RCC_OscConfig+0x478>)
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002990:	f7fe fd20 	bl	80013d4 <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002998:	f7fe fd1c 	bl	80013d4 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e087      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029aa:	4b27      	ldr	r3, [pc, #156]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1f0      	bne.n	8002998 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	69da      	ldr	r2, [r3, #28]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c4:	019b      	lsls	r3, r3, #6
 80029c6:	431a      	orrs	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029cc:	085b      	lsrs	r3, r3, #1
 80029ce:	3b01      	subs	r3, #1
 80029d0:	041b      	lsls	r3, r3, #16
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d8:	061b      	lsls	r3, r3, #24
 80029da:	491b      	ldr	r1, [pc, #108]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a50 <HAL_RCC_OscConfig+0x478>)
 80029e2:	2201      	movs	r2, #1
 80029e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e6:	f7fe fcf5 	bl	80013d4 <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ec:	e008      	b.n	8002a00 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ee:	f7fe fcf1 	bl	80013d4 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e05c      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a00:	4b11      	ldr	r3, [pc, #68]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0f0      	beq.n	80029ee <HAL_RCC_OscConfig+0x416>
 8002a0c:	e054      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a0e:	4b10      	ldr	r3, [pc, #64]	@ (8002a50 <HAL_RCC_OscConfig+0x478>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a14:	f7fe fcde 	bl	80013d4 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a1c:	f7fe fcda 	bl	80013d4 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e045      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a2e:	4b06      	ldr	r3, [pc, #24]	@ (8002a48 <HAL_RCC_OscConfig+0x470>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0x444>
 8002a3a:	e03d      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d107      	bne.n	8002a54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e038      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	40007000 	.word	0x40007000
 8002a50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a54:	4b1b      	ldr	r3, [pc, #108]	@ (8002ac4 <HAL_RCC_OscConfig+0x4ec>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d028      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d121      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d11a      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a84:	4013      	ands	r3, r2
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d111      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a9a:	085b      	lsrs	r3, r3, #1
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d107      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d001      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e000      	b.n	8002aba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3718      	adds	r7, #24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40023800 	.word	0x40023800

08002ac8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e0cc      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002adc:	4b68      	ldr	r3, [pc, #416]	@ (8002c80 <HAL_RCC_ClockConfig+0x1b8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d90c      	bls.n	8002b04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aea:	4b65      	ldr	r3, [pc, #404]	@ (8002c80 <HAL_RCC_ClockConfig+0x1b8>)
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af2:	4b63      	ldr	r3, [pc, #396]	@ (8002c80 <HAL_RCC_ClockConfig+0x1b8>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d001      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e0b8      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d020      	beq.n	8002b52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d005      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b1c:	4b59      	ldr	r3, [pc, #356]	@ (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	4a58      	ldr	r2, [pc, #352]	@ (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b26:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0308 	and.w	r3, r3, #8
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d005      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b34:	4b53      	ldr	r3, [pc, #332]	@ (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	4a52      	ldr	r2, [pc, #328]	@ (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b40:	4b50      	ldr	r3, [pc, #320]	@ (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	494d      	ldr	r1, [pc, #308]	@ (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d044      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d107      	bne.n	8002b76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b66:	4b47      	ldr	r3, [pc, #284]	@ (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d119      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e07f      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d003      	beq.n	8002b86 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b82:	2b03      	cmp	r3, #3
 8002b84:	d107      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b86:	4b3f      	ldr	r3, [pc, #252]	@ (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d109      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e06f      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b96:	4b3b      	ldr	r3, [pc, #236]	@ (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e067      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ba6:	4b37      	ldr	r3, [pc, #220]	@ (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f023 0203 	bic.w	r2, r3, #3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	4934      	ldr	r1, [pc, #208]	@ (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bb8:	f7fe fc0c 	bl	80013d4 <HAL_GetTick>
 8002bbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bbe:	e00a      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc0:	f7fe fc08 	bl	80013d4 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e04f      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd6:	4b2b      	ldr	r3, [pc, #172]	@ (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 020c 	and.w	r2, r3, #12
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d1eb      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002be8:	4b25      	ldr	r3, [pc, #148]	@ (8002c80 <HAL_RCC_ClockConfig+0x1b8>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d20c      	bcs.n	8002c10 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf6:	4b22      	ldr	r3, [pc, #136]	@ (8002c80 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfe:	4b20      	ldr	r3, [pc, #128]	@ (8002c80 <HAL_RCC_ClockConfig+0x1b8>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d001      	beq.n	8002c10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e032      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d008      	beq.n	8002c2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c1c:	4b19      	ldr	r3, [pc, #100]	@ (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	4916      	ldr	r1, [pc, #88]	@ (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d009      	beq.n	8002c4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c3a:	4b12      	ldr	r3, [pc, #72]	@ (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	490e      	ldr	r1, [pc, #56]	@ (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c4e:	f000 f821 	bl	8002c94 <HAL_RCC_GetSysClockFreq>
 8002c52:	4602      	mov	r2, r0
 8002c54:	4b0b      	ldr	r3, [pc, #44]	@ (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	091b      	lsrs	r3, r3, #4
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	490a      	ldr	r1, [pc, #40]	@ (8002c88 <HAL_RCC_ClockConfig+0x1c0>)
 8002c60:	5ccb      	ldrb	r3, [r1, r3]
 8002c62:	fa22 f303 	lsr.w	r3, r2, r3
 8002c66:	4a09      	ldr	r2, [pc, #36]	@ (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002c6a:	4b09      	ldr	r3, [pc, #36]	@ (8002c90 <HAL_RCC_ClockConfig+0x1c8>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fd fff8 	bl	8000c64 <HAL_InitTick>

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40023c00 	.word	0x40023c00
 8002c84:	40023800 	.word	0x40023800
 8002c88:	08007d3c 	.word	0x08007d3c
 8002c8c:	20000000 	.word	0x20000000
 8002c90:	20000004 	.word	0x20000004

08002c94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c98:	b090      	sub	sp, #64	@ 0x40
 8002c9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cac:	4b59      	ldr	r3, [pc, #356]	@ (8002e14 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 030c 	and.w	r3, r3, #12
 8002cb4:	2b08      	cmp	r3, #8
 8002cb6:	d00d      	beq.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x40>
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	f200 80a1 	bhi.w	8002e00 <HAL_RCC_GetSysClockFreq+0x16c>
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d002      	beq.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x34>
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d003      	beq.n	8002cce <HAL_RCC_GetSysClockFreq+0x3a>
 8002cc6:	e09b      	b.n	8002e00 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cc8:	4b53      	ldr	r3, [pc, #332]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0x184>)
 8002cca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ccc:	e09b      	b.n	8002e06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cce:	4b53      	ldr	r3, [pc, #332]	@ (8002e1c <HAL_RCC_GetSysClockFreq+0x188>)
 8002cd0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002cd2:	e098      	b.n	8002e06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cd4:	4b4f      	ldr	r3, [pc, #316]	@ (8002e14 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cdc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cde:	4b4d      	ldr	r3, [pc, #308]	@ (8002e14 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d028      	beq.n	8002d3c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cea:	4b4a      	ldr	r3, [pc, #296]	@ (8002e14 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	099b      	lsrs	r3, r3, #6
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	623b      	str	r3, [r7, #32]
 8002cf4:	627a      	str	r2, [r7, #36]	@ 0x24
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	4b47      	ldr	r3, [pc, #284]	@ (8002e1c <HAL_RCC_GetSysClockFreq+0x188>)
 8002d00:	fb03 f201 	mul.w	r2, r3, r1
 8002d04:	2300      	movs	r3, #0
 8002d06:	fb00 f303 	mul.w	r3, r0, r3
 8002d0a:	4413      	add	r3, r2
 8002d0c:	4a43      	ldr	r2, [pc, #268]	@ (8002e1c <HAL_RCC_GetSysClockFreq+0x188>)
 8002d0e:	fba0 1202 	umull	r1, r2, r0, r2
 8002d12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d14:	460a      	mov	r2, r1
 8002d16:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002d18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d1a:	4413      	add	r3, r2
 8002d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d20:	2200      	movs	r2, #0
 8002d22:	61bb      	str	r3, [r7, #24]
 8002d24:	61fa      	str	r2, [r7, #28]
 8002d26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002d2e:	f7fd fa57 	bl	80001e0 <__aeabi_uldivmod>
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	4613      	mov	r3, r2
 8002d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d3a:	e053      	b.n	8002de4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d3c:	4b35      	ldr	r3, [pc, #212]	@ (8002e14 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	099b      	lsrs	r3, r3, #6
 8002d42:	2200      	movs	r2, #0
 8002d44:	613b      	str	r3, [r7, #16]
 8002d46:	617a      	str	r2, [r7, #20]
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d4e:	f04f 0b00 	mov.w	fp, #0
 8002d52:	4652      	mov	r2, sl
 8002d54:	465b      	mov	r3, fp
 8002d56:	f04f 0000 	mov.w	r0, #0
 8002d5a:	f04f 0100 	mov.w	r1, #0
 8002d5e:	0159      	lsls	r1, r3, #5
 8002d60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d64:	0150      	lsls	r0, r2, #5
 8002d66:	4602      	mov	r2, r0
 8002d68:	460b      	mov	r3, r1
 8002d6a:	ebb2 080a 	subs.w	r8, r2, sl
 8002d6e:	eb63 090b 	sbc.w	r9, r3, fp
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	f04f 0300 	mov.w	r3, #0
 8002d7a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d7e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d82:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d86:	ebb2 0408 	subs.w	r4, r2, r8
 8002d8a:	eb63 0509 	sbc.w	r5, r3, r9
 8002d8e:	f04f 0200 	mov.w	r2, #0
 8002d92:	f04f 0300 	mov.w	r3, #0
 8002d96:	00eb      	lsls	r3, r5, #3
 8002d98:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d9c:	00e2      	lsls	r2, r4, #3
 8002d9e:	4614      	mov	r4, r2
 8002da0:	461d      	mov	r5, r3
 8002da2:	eb14 030a 	adds.w	r3, r4, sl
 8002da6:	603b      	str	r3, [r7, #0]
 8002da8:	eb45 030b 	adc.w	r3, r5, fp
 8002dac:	607b      	str	r3, [r7, #4]
 8002dae:	f04f 0200 	mov.w	r2, #0
 8002db2:	f04f 0300 	mov.w	r3, #0
 8002db6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dba:	4629      	mov	r1, r5
 8002dbc:	028b      	lsls	r3, r1, #10
 8002dbe:	4621      	mov	r1, r4
 8002dc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dc4:	4621      	mov	r1, r4
 8002dc6:	028a      	lsls	r2, r1, #10
 8002dc8:	4610      	mov	r0, r2
 8002dca:	4619      	mov	r1, r3
 8002dcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dce:	2200      	movs	r2, #0
 8002dd0:	60bb      	str	r3, [r7, #8]
 8002dd2:	60fa      	str	r2, [r7, #12]
 8002dd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002dd8:	f7fd fa02 	bl	80001e0 <__aeabi_uldivmod>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	4613      	mov	r3, r2
 8002de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002de4:	4b0b      	ldr	r3, [pc, #44]	@ (8002e14 <HAL_RCC_GetSysClockFreq+0x180>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	0c1b      	lsrs	r3, r3, #16
 8002dea:	f003 0303 	and.w	r3, r3, #3
 8002dee:	3301      	adds	r3, #1
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002df4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002dfe:	e002      	b.n	8002e06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e00:	4b05      	ldr	r3, [pc, #20]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e02:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3740      	adds	r7, #64	@ 0x40
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e12:	bf00      	nop
 8002e14:	40023800 	.word	0x40023800
 8002e18:	00f42400 	.word	0x00f42400
 8002e1c:	017d7840 	.word	0x017d7840

08002e20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e24:	4b03      	ldr	r3, [pc, #12]	@ (8002e34 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e26:	681b      	ldr	r3, [r3, #0]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	20000000 	.word	0x20000000

08002e38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e3c:	f7ff fff0 	bl	8002e20 <HAL_RCC_GetHCLKFreq>
 8002e40:	4602      	mov	r2, r0
 8002e42:	4b05      	ldr	r3, [pc, #20]	@ (8002e58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	0a9b      	lsrs	r3, r3, #10
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	4903      	ldr	r1, [pc, #12]	@ (8002e5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e4e:	5ccb      	ldrb	r3, [r1, r3]
 8002e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	08007d4c 	.word	0x08007d4c

08002e60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e64:	f7ff ffdc 	bl	8002e20 <HAL_RCC_GetHCLKFreq>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	4b05      	ldr	r3, [pc, #20]	@ (8002e80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	0b5b      	lsrs	r3, r3, #13
 8002e70:	f003 0307 	and.w	r3, r3, #7
 8002e74:	4903      	ldr	r1, [pc, #12]	@ (8002e84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e76:	5ccb      	ldrb	r3, [r1, r3]
 8002e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40023800 	.word	0x40023800
 8002e84:	08007d4c 	.word	0x08007d4c

08002e88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	220f      	movs	r2, #15
 8002e96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e98:	4b12      	ldr	r3, [pc, #72]	@ (8002ee4 <HAL_RCC_GetClockConfig+0x5c>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f003 0203 	and.w	r2, r3, #3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8002ee4 <HAL_RCC_GetClockConfig+0x5c>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ee4 <HAL_RCC_GetClockConfig+0x5c>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002ebc:	4b09      	ldr	r3, [pc, #36]	@ (8002ee4 <HAL_RCC_GetClockConfig+0x5c>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	08db      	lsrs	r3, r3, #3
 8002ec2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002eca:	4b07      	ldr	r3, [pc, #28]	@ (8002ee8 <HAL_RCC_GetClockConfig+0x60>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0207 	and.w	r2, r3, #7
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	601a      	str	r2, [r3, #0]
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	40023c00 	.word	0x40023c00

08002eec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e041      	b.n	8002f82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d106      	bne.n	8002f18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7fe f8a2 	bl	800105c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3304      	adds	r3, #4
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4610      	mov	r0, r2
 8002f2c:	f000 fd90 	bl	8003a50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
	...

08002f8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d001      	beq.n	8002fa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e044      	b.n	800302e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68da      	ldr	r2, [r3, #12]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f042 0201 	orr.w	r2, r2, #1
 8002fba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a1e      	ldr	r2, [pc, #120]	@ (800303c <HAL_TIM_Base_Start_IT+0xb0>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d018      	beq.n	8002ff8 <HAL_TIM_Base_Start_IT+0x6c>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fce:	d013      	beq.n	8002ff8 <HAL_TIM_Base_Start_IT+0x6c>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a1a      	ldr	r2, [pc, #104]	@ (8003040 <HAL_TIM_Base_Start_IT+0xb4>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d00e      	beq.n	8002ff8 <HAL_TIM_Base_Start_IT+0x6c>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a19      	ldr	r2, [pc, #100]	@ (8003044 <HAL_TIM_Base_Start_IT+0xb8>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d009      	beq.n	8002ff8 <HAL_TIM_Base_Start_IT+0x6c>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a17      	ldr	r2, [pc, #92]	@ (8003048 <HAL_TIM_Base_Start_IT+0xbc>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d004      	beq.n	8002ff8 <HAL_TIM_Base_Start_IT+0x6c>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a16      	ldr	r2, [pc, #88]	@ (800304c <HAL_TIM_Base_Start_IT+0xc0>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d111      	bne.n	800301c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2b06      	cmp	r3, #6
 8003008:	d010      	beq.n	800302c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f042 0201 	orr.w	r2, r2, #1
 8003018:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800301a:	e007      	b.n	800302c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f042 0201 	orr.w	r2, r2, #1
 800302a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	40010000 	.word	0x40010000
 8003040:	40000400 	.word	0x40000400
 8003044:	40000800 	.word	0x40000800
 8003048:	40000c00 	.word	0x40000c00
 800304c:	40014000 	.word	0x40014000

08003050 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e041      	b.n	80030e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d106      	bne.n	800307c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7fe f87e 	bl	8001178 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2202      	movs	r2, #2
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3304      	adds	r3, #4
 800308c:	4619      	mov	r1, r3
 800308e:	4610      	mov	r0, r2
 8003090:	f000 fcde 	bl	8003a50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b082      	sub	sp, #8
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e041      	b.n	8003184 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b00      	cmp	r3, #0
 800310a:	d106      	bne.n	800311a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f839 	bl	800318c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2202      	movs	r2, #2
 800311e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	3304      	adds	r3, #4
 800312a:	4619      	mov	r1, r3
 800312c:	4610      	mov	r0, r2
 800312e:	f000 fc8f 	bl	8003a50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3708      	adds	r7, #8
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031aa:	2300      	movs	r3, #0
 80031ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d104      	bne.n	80031be <HAL_TIM_IC_Start_IT+0x1e>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	e013      	b.n	80031e6 <HAL_TIM_IC_Start_IT+0x46>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2b04      	cmp	r3, #4
 80031c2:	d104      	bne.n	80031ce <HAL_TIM_IC_Start_IT+0x2e>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	e00b      	b.n	80031e6 <HAL_TIM_IC_Start_IT+0x46>
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	2b08      	cmp	r3, #8
 80031d2:	d104      	bne.n	80031de <HAL_TIM_IC_Start_IT+0x3e>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	e003      	b.n	80031e6 <HAL_TIM_IC_Start_IT+0x46>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d104      	bne.n	80031f8 <HAL_TIM_IC_Start_IT+0x58>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	e013      	b.n	8003220 <HAL_TIM_IC_Start_IT+0x80>
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	d104      	bne.n	8003208 <HAL_TIM_IC_Start_IT+0x68>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003204:	b2db      	uxtb	r3, r3
 8003206:	e00b      	b.n	8003220 <HAL_TIM_IC_Start_IT+0x80>
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	2b08      	cmp	r3, #8
 800320c:	d104      	bne.n	8003218 <HAL_TIM_IC_Start_IT+0x78>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003214:	b2db      	uxtb	r3, r3
 8003216:	e003      	b.n	8003220 <HAL_TIM_IC_Start_IT+0x80>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800321e:	b2db      	uxtb	r3, r3
 8003220:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003222:	7bbb      	ldrb	r3, [r7, #14]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d102      	bne.n	800322e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003228:	7b7b      	ldrb	r3, [r7, #13]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d001      	beq.n	8003232 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e0c2      	b.n	80033b8 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d104      	bne.n	8003242 <HAL_TIM_IC_Start_IT+0xa2>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003240:	e013      	b.n	800326a <HAL_TIM_IC_Start_IT+0xca>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	2b04      	cmp	r3, #4
 8003246:	d104      	bne.n	8003252 <HAL_TIM_IC_Start_IT+0xb2>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2202      	movs	r2, #2
 800324c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003250:	e00b      	b.n	800326a <HAL_TIM_IC_Start_IT+0xca>
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	2b08      	cmp	r3, #8
 8003256:	d104      	bne.n	8003262 <HAL_TIM_IC_Start_IT+0xc2>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2202      	movs	r2, #2
 800325c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003260:	e003      	b.n	800326a <HAL_TIM_IC_Start_IT+0xca>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2202      	movs	r2, #2
 8003266:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d104      	bne.n	800327a <HAL_TIM_IC_Start_IT+0xda>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2202      	movs	r2, #2
 8003274:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003278:	e013      	b.n	80032a2 <HAL_TIM_IC_Start_IT+0x102>
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	2b04      	cmp	r3, #4
 800327e:	d104      	bne.n	800328a <HAL_TIM_IC_Start_IT+0xea>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2202      	movs	r2, #2
 8003284:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003288:	e00b      	b.n	80032a2 <HAL_TIM_IC_Start_IT+0x102>
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	2b08      	cmp	r3, #8
 800328e:	d104      	bne.n	800329a <HAL_TIM_IC_Start_IT+0xfa>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2202      	movs	r2, #2
 8003294:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003298:	e003      	b.n	80032a2 <HAL_TIM_IC_Start_IT+0x102>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2202      	movs	r2, #2
 800329e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2b0c      	cmp	r3, #12
 80032a6:	d841      	bhi.n	800332c <HAL_TIM_IC_Start_IT+0x18c>
 80032a8:	a201      	add	r2, pc, #4	@ (adr r2, 80032b0 <HAL_TIM_IC_Start_IT+0x110>)
 80032aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ae:	bf00      	nop
 80032b0:	080032e5 	.word	0x080032e5
 80032b4:	0800332d 	.word	0x0800332d
 80032b8:	0800332d 	.word	0x0800332d
 80032bc:	0800332d 	.word	0x0800332d
 80032c0:	080032f7 	.word	0x080032f7
 80032c4:	0800332d 	.word	0x0800332d
 80032c8:	0800332d 	.word	0x0800332d
 80032cc:	0800332d 	.word	0x0800332d
 80032d0:	08003309 	.word	0x08003309
 80032d4:	0800332d 	.word	0x0800332d
 80032d8:	0800332d 	.word	0x0800332d
 80032dc:	0800332d 	.word	0x0800332d
 80032e0:	0800331b 	.word	0x0800331b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0202 	orr.w	r2, r2, #2
 80032f2:	60da      	str	r2, [r3, #12]
      break;
 80032f4:	e01d      	b.n	8003332 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68da      	ldr	r2, [r3, #12]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f042 0204 	orr.w	r2, r2, #4
 8003304:	60da      	str	r2, [r3, #12]
      break;
 8003306:	e014      	b.n	8003332 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68da      	ldr	r2, [r3, #12]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0208 	orr.w	r2, r2, #8
 8003316:	60da      	str	r2, [r3, #12]
      break;
 8003318:	e00b      	b.n	8003332 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68da      	ldr	r2, [r3, #12]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f042 0210 	orr.w	r2, r2, #16
 8003328:	60da      	str	r2, [r3, #12]
      break;
 800332a:	e002      	b.n	8003332 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	73fb      	strb	r3, [r7, #15]
      break;
 8003330:	bf00      	nop
  }

  if (status == HAL_OK)
 8003332:	7bfb      	ldrb	r3, [r7, #15]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d13e      	bne.n	80033b6 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2201      	movs	r2, #1
 800333e:	6839      	ldr	r1, [r7, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f000 ff55 	bl	80041f0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a1d      	ldr	r2, [pc, #116]	@ (80033c0 <HAL_TIM_IC_Start_IT+0x220>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d018      	beq.n	8003382 <HAL_TIM_IC_Start_IT+0x1e2>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003358:	d013      	beq.n	8003382 <HAL_TIM_IC_Start_IT+0x1e2>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a19      	ldr	r2, [pc, #100]	@ (80033c4 <HAL_TIM_IC_Start_IT+0x224>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d00e      	beq.n	8003382 <HAL_TIM_IC_Start_IT+0x1e2>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a17      	ldr	r2, [pc, #92]	@ (80033c8 <HAL_TIM_IC_Start_IT+0x228>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d009      	beq.n	8003382 <HAL_TIM_IC_Start_IT+0x1e2>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a16      	ldr	r2, [pc, #88]	@ (80033cc <HAL_TIM_IC_Start_IT+0x22c>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d004      	beq.n	8003382 <HAL_TIM_IC_Start_IT+0x1e2>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a14      	ldr	r2, [pc, #80]	@ (80033d0 <HAL_TIM_IC_Start_IT+0x230>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d111      	bne.n	80033a6 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	2b06      	cmp	r3, #6
 8003392:	d010      	beq.n	80033b6 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f042 0201 	orr.w	r2, r2, #1
 80033a2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033a4:	e007      	b.n	80033b6 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f042 0201 	orr.w	r2, r2, #1
 80033b4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80033b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40010000 	.word	0x40010000
 80033c4:	40000400 	.word	0x40000400
 80033c8:	40000800 	.word	0x40000800
 80033cc:	40000c00 	.word	0x40000c00
 80033d0:	40014000 	.word	0x40014000

080033d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d020      	beq.n	8003438 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d01b      	beq.n	8003438 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f06f 0202 	mvn.w	r2, #2
 8003408:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	f003 0303 	and.w	r3, r3, #3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 faf7 	bl	8003a12 <HAL_TIM_IC_CaptureCallback>
 8003424:	e005      	b.n	8003432 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 fae9 	bl	80039fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 fafa 	bl	8003a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	f003 0304 	and.w	r3, r3, #4
 800343e:	2b00      	cmp	r3, #0
 8003440:	d020      	beq.n	8003484 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b00      	cmp	r3, #0
 800344a:	d01b      	beq.n	8003484 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f06f 0204 	mvn.w	r2, #4
 8003454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2202      	movs	r2, #2
 800345a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 fad1 	bl	8003a12 <HAL_TIM_IC_CaptureCallback>
 8003470:	e005      	b.n	800347e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 fac3 	bl	80039fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 fad4 	bl	8003a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	f003 0308 	and.w	r3, r3, #8
 800348a:	2b00      	cmp	r3, #0
 800348c:	d020      	beq.n	80034d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f003 0308 	and.w	r3, r3, #8
 8003494:	2b00      	cmp	r3, #0
 8003496:	d01b      	beq.n	80034d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f06f 0208 	mvn.w	r2, #8
 80034a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2204      	movs	r2, #4
 80034a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	f003 0303 	and.w	r3, r3, #3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 faab 	bl	8003a12 <HAL_TIM_IC_CaptureCallback>
 80034bc:	e005      	b.n	80034ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 fa9d 	bl	80039fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 faae 	bl	8003a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	f003 0310 	and.w	r3, r3, #16
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d020      	beq.n	800351c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f003 0310 	and.w	r3, r3, #16
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d01b      	beq.n	800351c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f06f 0210 	mvn.w	r2, #16
 80034ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2208      	movs	r2, #8
 80034f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 fa85 	bl	8003a12 <HAL_TIM_IC_CaptureCallback>
 8003508:	e005      	b.n	8003516 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 fa77 	bl	80039fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 fa88 	bl	8003a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00c      	beq.n	8003540 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b00      	cmp	r3, #0
 800352e:	d007      	beq.n	8003540 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f06f 0201 	mvn.w	r2, #1
 8003538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7fd fb4e 	bl	8000bdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00c      	beq.n	8003564 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003550:	2b00      	cmp	r3, #0
 8003552:	d007      	beq.n	8003564 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800355c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 fee4 	bl	800432c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00c      	beq.n	8003588 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003574:	2b00      	cmp	r3, #0
 8003576:	d007      	beq.n	8003588 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 fa59 	bl	8003a3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	f003 0320 	and.w	r3, r3, #32
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00c      	beq.n	80035ac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f003 0320 	and.w	r3, r3, #32
 8003598:	2b00      	cmp	r3, #0
 800359a:	d007      	beq.n	80035ac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f06f 0220 	mvn.w	r2, #32
 80035a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 feb6 	bl	8004318 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035ac:	bf00      	nop
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035c0:	2300      	movs	r3, #0
 80035c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d101      	bne.n	80035d2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80035ce:	2302      	movs	r3, #2
 80035d0:	e088      	b.n	80036e4 <HAL_TIM_IC_ConfigChannel+0x130>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d11b      	bne.n	8003618 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80035f0:	f000 fc46 	bl	8003e80 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	699a      	ldr	r2, [r3, #24]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 020c 	bic.w	r2, r2, #12
 8003602:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6999      	ldr	r1, [r3, #24]
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	619a      	str	r2, [r3, #24]
 8003616:	e060      	b.n	80036da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b04      	cmp	r3, #4
 800361c:	d11c      	bne.n	8003658 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800362e:	f000 fcbe 	bl	8003fae <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	699a      	ldr	r2, [r3, #24]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003640:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6999      	ldr	r1, [r3, #24]
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	021a      	lsls	r2, r3, #8
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	430a      	orrs	r2, r1
 8003654:	619a      	str	r2, [r3, #24]
 8003656:	e040      	b.n	80036da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b08      	cmp	r3, #8
 800365c:	d11b      	bne.n	8003696 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800366e:	f000 fd0b 	bl	8004088 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	69da      	ldr	r2, [r3, #28]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 020c 	bic.w	r2, r2, #12
 8003680:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	69d9      	ldr	r1, [r3, #28]
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	430a      	orrs	r2, r1
 8003692:	61da      	str	r2, [r3, #28]
 8003694:	e021      	b.n	80036da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b0c      	cmp	r3, #12
 800369a:	d11c      	bne.n	80036d6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80036ac:	f000 fd28 	bl	8004100 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	69da      	ldr	r2, [r3, #28]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80036be:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	69d9      	ldr	r1, [r3, #28]
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	021a      	lsls	r2, r3, #8
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	430a      	orrs	r2, r1
 80036d2:	61da      	str	r2, [r3, #28]
 80036d4:	e001      	b.n	80036da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80036e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3718      	adds	r7, #24
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036f8:	2300      	movs	r3, #0
 80036fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003702:	2b01      	cmp	r3, #1
 8003704:	d101      	bne.n	800370a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003706:	2302      	movs	r3, #2
 8003708:	e0ae      	b.n	8003868 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b0c      	cmp	r3, #12
 8003716:	f200 809f 	bhi.w	8003858 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800371a:	a201      	add	r2, pc, #4	@ (adr r2, 8003720 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800371c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003720:	08003755 	.word	0x08003755
 8003724:	08003859 	.word	0x08003859
 8003728:	08003859 	.word	0x08003859
 800372c:	08003859 	.word	0x08003859
 8003730:	08003795 	.word	0x08003795
 8003734:	08003859 	.word	0x08003859
 8003738:	08003859 	.word	0x08003859
 800373c:	08003859 	.word	0x08003859
 8003740:	080037d7 	.word	0x080037d7
 8003744:	08003859 	.word	0x08003859
 8003748:	08003859 	.word	0x08003859
 800374c:	08003859 	.word	0x08003859
 8003750:	08003817 	.word	0x08003817
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68b9      	ldr	r1, [r7, #8]
 800375a:	4618      	mov	r0, r3
 800375c:	f000 fa04 	bl	8003b68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	699a      	ldr	r2, [r3, #24]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 0208 	orr.w	r2, r2, #8
 800376e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	699a      	ldr	r2, [r3, #24]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 0204 	bic.w	r2, r2, #4
 800377e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6999      	ldr	r1, [r3, #24]
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	691a      	ldr	r2, [r3, #16]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	430a      	orrs	r2, r1
 8003790:	619a      	str	r2, [r3, #24]
      break;
 8003792:	e064      	b.n	800385e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68b9      	ldr	r1, [r7, #8]
 800379a:	4618      	mov	r0, r3
 800379c:	f000 fa4a 	bl	8003c34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	699a      	ldr	r2, [r3, #24]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	699a      	ldr	r2, [r3, #24]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6999      	ldr	r1, [r3, #24]
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	021a      	lsls	r2, r3, #8
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	430a      	orrs	r2, r1
 80037d2:	619a      	str	r2, [r3, #24]
      break;
 80037d4:	e043      	b.n	800385e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68b9      	ldr	r1, [r7, #8]
 80037dc:	4618      	mov	r0, r3
 80037de:	f000 fa95 	bl	8003d0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	69da      	ldr	r2, [r3, #28]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f042 0208 	orr.w	r2, r2, #8
 80037f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	69da      	ldr	r2, [r3, #28]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 0204 	bic.w	r2, r2, #4
 8003800:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	69d9      	ldr	r1, [r3, #28]
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	691a      	ldr	r2, [r3, #16]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	61da      	str	r2, [r3, #28]
      break;
 8003814:	e023      	b.n	800385e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68b9      	ldr	r1, [r7, #8]
 800381c:	4618      	mov	r0, r3
 800381e:	f000 fadf 	bl	8003de0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	69da      	ldr	r2, [r3, #28]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003830:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	69da      	ldr	r2, [r3, #28]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003840:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	69d9      	ldr	r1, [r3, #28]
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	021a      	lsls	r2, r3, #8
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	430a      	orrs	r2, r1
 8003854:	61da      	str	r2, [r3, #28]
      break;
 8003856:	e002      	b.n	800385e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	75fb      	strb	r3, [r7, #23]
      break;
 800385c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003866:	7dfb      	ldrb	r3, [r7, #23]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3718      	adds	r7, #24
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800387a:	2300      	movs	r3, #0
 800387c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003884:	2b01      	cmp	r3, #1
 8003886:	d101      	bne.n	800388c <HAL_TIM_ConfigClockSource+0x1c>
 8003888:	2302      	movs	r3, #2
 800388a:	e0b4      	b.n	80039f6 <HAL_TIM_ConfigClockSource+0x186>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2202      	movs	r2, #2
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80038aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80038b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038c4:	d03e      	beq.n	8003944 <HAL_TIM_ConfigClockSource+0xd4>
 80038c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038ca:	f200 8087 	bhi.w	80039dc <HAL_TIM_ConfigClockSource+0x16c>
 80038ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038d2:	f000 8086 	beq.w	80039e2 <HAL_TIM_ConfigClockSource+0x172>
 80038d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038da:	d87f      	bhi.n	80039dc <HAL_TIM_ConfigClockSource+0x16c>
 80038dc:	2b70      	cmp	r3, #112	@ 0x70
 80038de:	d01a      	beq.n	8003916 <HAL_TIM_ConfigClockSource+0xa6>
 80038e0:	2b70      	cmp	r3, #112	@ 0x70
 80038e2:	d87b      	bhi.n	80039dc <HAL_TIM_ConfigClockSource+0x16c>
 80038e4:	2b60      	cmp	r3, #96	@ 0x60
 80038e6:	d050      	beq.n	800398a <HAL_TIM_ConfigClockSource+0x11a>
 80038e8:	2b60      	cmp	r3, #96	@ 0x60
 80038ea:	d877      	bhi.n	80039dc <HAL_TIM_ConfigClockSource+0x16c>
 80038ec:	2b50      	cmp	r3, #80	@ 0x50
 80038ee:	d03c      	beq.n	800396a <HAL_TIM_ConfigClockSource+0xfa>
 80038f0:	2b50      	cmp	r3, #80	@ 0x50
 80038f2:	d873      	bhi.n	80039dc <HAL_TIM_ConfigClockSource+0x16c>
 80038f4:	2b40      	cmp	r3, #64	@ 0x40
 80038f6:	d058      	beq.n	80039aa <HAL_TIM_ConfigClockSource+0x13a>
 80038f8:	2b40      	cmp	r3, #64	@ 0x40
 80038fa:	d86f      	bhi.n	80039dc <HAL_TIM_ConfigClockSource+0x16c>
 80038fc:	2b30      	cmp	r3, #48	@ 0x30
 80038fe:	d064      	beq.n	80039ca <HAL_TIM_ConfigClockSource+0x15a>
 8003900:	2b30      	cmp	r3, #48	@ 0x30
 8003902:	d86b      	bhi.n	80039dc <HAL_TIM_ConfigClockSource+0x16c>
 8003904:	2b20      	cmp	r3, #32
 8003906:	d060      	beq.n	80039ca <HAL_TIM_ConfigClockSource+0x15a>
 8003908:	2b20      	cmp	r3, #32
 800390a:	d867      	bhi.n	80039dc <HAL_TIM_ConfigClockSource+0x16c>
 800390c:	2b00      	cmp	r3, #0
 800390e:	d05c      	beq.n	80039ca <HAL_TIM_ConfigClockSource+0x15a>
 8003910:	2b10      	cmp	r3, #16
 8003912:	d05a      	beq.n	80039ca <HAL_TIM_ConfigClockSource+0x15a>
 8003914:	e062      	b.n	80039dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003926:	f000 fc43 	bl	80041b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003938:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	609a      	str	r2, [r3, #8]
      break;
 8003942:	e04f      	b.n	80039e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003954:	f000 fc2c 	bl	80041b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689a      	ldr	r2, [r3, #8]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003966:	609a      	str	r2, [r3, #8]
      break;
 8003968:	e03c      	b.n	80039e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003976:	461a      	mov	r2, r3
 8003978:	f000 faea 	bl	8003f50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2150      	movs	r1, #80	@ 0x50
 8003982:	4618      	mov	r0, r3
 8003984:	f000 fbf9 	bl	800417a <TIM_ITRx_SetConfig>
      break;
 8003988:	e02c      	b.n	80039e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003996:	461a      	mov	r2, r3
 8003998:	f000 fb46 	bl	8004028 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2160      	movs	r1, #96	@ 0x60
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 fbe9 	bl	800417a <TIM_ITRx_SetConfig>
      break;
 80039a8:	e01c      	b.n	80039e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039b6:	461a      	mov	r2, r3
 80039b8:	f000 faca 	bl	8003f50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2140      	movs	r1, #64	@ 0x40
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 fbd9 	bl	800417a <TIM_ITRx_SetConfig>
      break;
 80039c8:	e00c      	b.n	80039e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4619      	mov	r1, r3
 80039d4:	4610      	mov	r0, r2
 80039d6:	f000 fbd0 	bl	800417a <TIM_ITRx_SetConfig>
      break;
 80039da:	e003      	b.n	80039e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	73fb      	strb	r3, [r7, #15]
      break;
 80039e0:	e000      	b.n	80039e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80039e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b083      	sub	sp, #12
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a06:	bf00      	nop
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b083      	sub	sp, #12
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a1a:	bf00      	nop
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr

08003a26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a26:	b480      	push	{r7}
 8003a28:	b083      	sub	sp, #12
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a2e:	bf00      	nop
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b083      	sub	sp, #12
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
	...

08003a50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a3a      	ldr	r2, [pc, #232]	@ (8003b4c <TIM_Base_SetConfig+0xfc>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d00f      	beq.n	8003a88 <TIM_Base_SetConfig+0x38>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a6e:	d00b      	beq.n	8003a88 <TIM_Base_SetConfig+0x38>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a37      	ldr	r2, [pc, #220]	@ (8003b50 <TIM_Base_SetConfig+0x100>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d007      	beq.n	8003a88 <TIM_Base_SetConfig+0x38>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a36      	ldr	r2, [pc, #216]	@ (8003b54 <TIM_Base_SetConfig+0x104>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d003      	beq.n	8003a88 <TIM_Base_SetConfig+0x38>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a35      	ldr	r2, [pc, #212]	@ (8003b58 <TIM_Base_SetConfig+0x108>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d108      	bne.n	8003a9a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a2b      	ldr	r2, [pc, #172]	@ (8003b4c <TIM_Base_SetConfig+0xfc>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d01b      	beq.n	8003ada <TIM_Base_SetConfig+0x8a>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aa8:	d017      	beq.n	8003ada <TIM_Base_SetConfig+0x8a>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a28      	ldr	r2, [pc, #160]	@ (8003b50 <TIM_Base_SetConfig+0x100>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d013      	beq.n	8003ada <TIM_Base_SetConfig+0x8a>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a27      	ldr	r2, [pc, #156]	@ (8003b54 <TIM_Base_SetConfig+0x104>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d00f      	beq.n	8003ada <TIM_Base_SetConfig+0x8a>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a26      	ldr	r2, [pc, #152]	@ (8003b58 <TIM_Base_SetConfig+0x108>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d00b      	beq.n	8003ada <TIM_Base_SetConfig+0x8a>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a25      	ldr	r2, [pc, #148]	@ (8003b5c <TIM_Base_SetConfig+0x10c>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d007      	beq.n	8003ada <TIM_Base_SetConfig+0x8a>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a24      	ldr	r2, [pc, #144]	@ (8003b60 <TIM_Base_SetConfig+0x110>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d003      	beq.n	8003ada <TIM_Base_SetConfig+0x8a>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a23      	ldr	r2, [pc, #140]	@ (8003b64 <TIM_Base_SetConfig+0x114>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d108      	bne.n	8003aec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ae0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a0e      	ldr	r2, [pc, #56]	@ (8003b4c <TIM_Base_SetConfig+0xfc>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d103      	bne.n	8003b20 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d105      	bne.n	8003b3e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	f023 0201 	bic.w	r2, r3, #1
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	611a      	str	r2, [r3, #16]
  }
}
 8003b3e:	bf00      	nop
 8003b40:	3714      	adds	r7, #20
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	40010000 	.word	0x40010000
 8003b50:	40000400 	.word	0x40000400
 8003b54:	40000800 	.word	0x40000800
 8003b58:	40000c00 	.word	0x40000c00
 8003b5c:	40014000 	.word	0x40014000
 8003b60:	40014400 	.word	0x40014400
 8003b64:	40014800 	.word	0x40014800

08003b68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b087      	sub	sp, #28
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	f023 0201 	bic.w	r2, r3, #1
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f023 0303 	bic.w	r3, r3, #3
 8003b9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f023 0302 	bic.w	r3, r3, #2
 8003bb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a1c      	ldr	r2, [pc, #112]	@ (8003c30 <TIM_OC1_SetConfig+0xc8>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d10c      	bne.n	8003bde <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	f023 0308 	bic.w	r3, r3, #8
 8003bca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f023 0304 	bic.w	r3, r3, #4
 8003bdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a13      	ldr	r2, [pc, #76]	@ (8003c30 <TIM_OC1_SetConfig+0xc8>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d111      	bne.n	8003c0a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003bf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	685a      	ldr	r2, [r3, #4]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	621a      	str	r2, [r3, #32]
}
 8003c24:	bf00      	nop
 8003c26:	371c      	adds	r7, #28
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr
 8003c30:	40010000 	.word	0x40010000

08003c34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	f023 0210 	bic.w	r2, r3, #16
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	021b      	lsls	r3, r3, #8
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	f023 0320 	bic.w	r3, r3, #32
 8003c7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	011b      	lsls	r3, r3, #4
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a1e      	ldr	r2, [pc, #120]	@ (8003d08 <TIM_OC2_SetConfig+0xd4>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d10d      	bne.n	8003cb0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	011b      	lsls	r3, r3, #4
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a15      	ldr	r2, [pc, #84]	@ (8003d08 <TIM_OC2_SetConfig+0xd4>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d113      	bne.n	8003ce0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003cbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003cc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	621a      	str	r2, [r3, #32]
}
 8003cfa:	bf00      	nop
 8003cfc:	371c      	adds	r7, #28
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	40010000 	.word	0x40010000

08003d0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b087      	sub	sp, #28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f023 0303 	bic.w	r3, r3, #3
 8003d42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	021b      	lsls	r3, r3, #8
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a1d      	ldr	r2, [pc, #116]	@ (8003ddc <TIM_OC3_SetConfig+0xd0>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d10d      	bne.n	8003d86 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	021b      	lsls	r3, r3, #8
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a14      	ldr	r2, [pc, #80]	@ (8003ddc <TIM_OC3_SetConfig+0xd0>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d113      	bne.n	8003db6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	011b      	lsls	r3, r3, #4
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	011b      	lsls	r3, r3, #4
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	621a      	str	r2, [r3, #32]
}
 8003dd0:	bf00      	nop
 8003dd2:	371c      	adds	r7, #28
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	40010000 	.word	0x40010000

08003de0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b087      	sub	sp, #28
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	021b      	lsls	r3, r3, #8
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	031b      	lsls	r3, r3, #12
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a10      	ldr	r2, [pc, #64]	@ (8003e7c <TIM_OC4_SetConfig+0x9c>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d109      	bne.n	8003e54 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	019b      	lsls	r3, r3, #6
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685a      	ldr	r2, [r3, #4]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	621a      	str	r2, [r3, #32]
}
 8003e6e:	bf00      	nop
 8003e70:	371c      	adds	r7, #28
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	40010000 	.word	0x40010000

08003e80 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b087      	sub	sp, #28
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
 8003e8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	f023 0201 	bic.w	r2, r3, #1
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	4a24      	ldr	r2, [pc, #144]	@ (8003f3c <TIM_TI1_SetConfig+0xbc>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d013      	beq.n	8003ed6 <TIM_TI1_SetConfig+0x56>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eb4:	d00f      	beq.n	8003ed6 <TIM_TI1_SetConfig+0x56>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	4a21      	ldr	r2, [pc, #132]	@ (8003f40 <TIM_TI1_SetConfig+0xc0>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d00b      	beq.n	8003ed6 <TIM_TI1_SetConfig+0x56>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	4a20      	ldr	r2, [pc, #128]	@ (8003f44 <TIM_TI1_SetConfig+0xc4>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d007      	beq.n	8003ed6 <TIM_TI1_SetConfig+0x56>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	4a1f      	ldr	r2, [pc, #124]	@ (8003f48 <TIM_TI1_SetConfig+0xc8>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d003      	beq.n	8003ed6 <TIM_TI1_SetConfig+0x56>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4a1e      	ldr	r2, [pc, #120]	@ (8003f4c <TIM_TI1_SetConfig+0xcc>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d101      	bne.n	8003eda <TIM_TI1_SetConfig+0x5a>
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e000      	b.n	8003edc <TIM_TI1_SetConfig+0x5c>
 8003eda:	2300      	movs	r3, #0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d008      	beq.n	8003ef2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	f023 0303 	bic.w	r3, r3, #3
 8003ee6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	617b      	str	r3, [r7, #20]
 8003ef0:	e003      	b.n	8003efa <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	f043 0301 	orr.w	r3, r3, #1
 8003ef8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	011b      	lsls	r3, r3, #4
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	f023 030a 	bic.w	r3, r3, #10
 8003f14:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	f003 030a 	and.w	r3, r3, #10
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	621a      	str	r2, [r3, #32]
}
 8003f2e:	bf00      	nop
 8003f30:	371c      	adds	r7, #28
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	40010000 	.word	0x40010000
 8003f40:	40000400 	.word	0x40000400
 8003f44:	40000800 	.word	0x40000800
 8003f48:	40000c00 	.word	0x40000c00
 8003f4c:	40014000 	.word	0x40014000

08003f50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b087      	sub	sp, #28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	f023 0201 	bic.w	r2, r3, #1
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	011b      	lsls	r3, r3, #4
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	f023 030a 	bic.w	r3, r3, #10
 8003f8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	621a      	str	r2, [r3, #32]
}
 8003fa2:	bf00      	nop
 8003fa4:	371c      	adds	r7, #28
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b087      	sub	sp, #28
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	60f8      	str	r0, [r7, #12]
 8003fb6:	60b9      	str	r1, [r7, #8]
 8003fb8:	607a      	str	r2, [r7, #4]
 8003fba:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	f023 0210 	bic.w	r2, r3, #16
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	021b      	lsls	r3, r3, #8
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003fec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	031b      	lsls	r3, r3, #12
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004000:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	011b      	lsls	r3, r3, #4
 8004006:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	4313      	orrs	r3, r2
 800400e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	621a      	str	r2, [r3, #32]
}
 800401c:	bf00      	nop
 800401e:	371c      	adds	r7, #28
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004028:	b480      	push	{r7}
 800402a:	b087      	sub	sp, #28
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	f023 0210 	bic.w	r2, r3, #16
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004052:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	031b      	lsls	r3, r3, #12
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	4313      	orrs	r3, r2
 800405c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004064:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	011b      	lsls	r3, r3, #4
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	4313      	orrs	r3, r2
 800406e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	621a      	str	r2, [r3, #32]
}
 800407c:	bf00      	nop
 800407e:	371c      	adds	r7, #28
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004088:	b480      	push	{r7}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
 8004094:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6a1b      	ldr	r3, [r3, #32]
 80040a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	69db      	ldr	r3, [r3, #28]
 80040ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	f023 0303 	bic.w	r3, r3, #3
 80040b4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040c4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	011b      	lsls	r3, r3, #4
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80040d8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	021b      	lsls	r3, r3, #8
 80040de:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	621a      	str	r2, [r3, #32]
}
 80040f4:	bf00      	nop
 80040f6:	371c      	adds	r7, #28
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004100:	b480      	push	{r7}
 8004102:	b087      	sub	sp, #28
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
 800410c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	69db      	ldr	r3, [r3, #28]
 8004124:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800412c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	021b      	lsls	r3, r3, #8
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	4313      	orrs	r3, r2
 8004136:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800413e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	031b      	lsls	r3, r3, #12
 8004144:	b29b      	uxth	r3, r3
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	4313      	orrs	r3, r2
 800414a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004152:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	031b      	lsls	r3, r3, #12
 8004158:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	4313      	orrs	r3, r2
 8004160:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	621a      	str	r2, [r3, #32]
}
 800416e:	bf00      	nop
 8004170:	371c      	adds	r7, #28
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800417a:	b480      	push	{r7}
 800417c:	b085      	sub	sp, #20
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
 8004182:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004190:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4313      	orrs	r3, r2
 8004198:	f043 0307 	orr.w	r3, r3, #7
 800419c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	609a      	str	r2, [r3, #8]
}
 80041a4:	bf00      	nop
 80041a6:	3714      	adds	r7, #20
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b087      	sub	sp, #28
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
 80041bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80041ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	021a      	lsls	r2, r3, #8
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	431a      	orrs	r2, r3
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	4313      	orrs	r3, r2
 80041dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	609a      	str	r2, [r3, #8]
}
 80041e4:	bf00      	nop
 80041e6:	371c      	adds	r7, #28
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b087      	sub	sp, #28
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	f003 031f 	and.w	r3, r3, #31
 8004202:	2201      	movs	r2, #1
 8004204:	fa02 f303 	lsl.w	r3, r2, r3
 8004208:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6a1a      	ldr	r2, [r3, #32]
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	43db      	mvns	r3, r3
 8004212:	401a      	ands	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6a1a      	ldr	r2, [r3, #32]
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	f003 031f 	and.w	r3, r3, #31
 8004222:	6879      	ldr	r1, [r7, #4]
 8004224:	fa01 f303 	lsl.w	r3, r1, r3
 8004228:	431a      	orrs	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	621a      	str	r2, [r3, #32]
}
 800422e:	bf00      	nop
 8004230:	371c      	adds	r7, #28
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
	...

0800423c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800424c:	2b01      	cmp	r3, #1
 800424e:	d101      	bne.n	8004254 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004250:	2302      	movs	r3, #2
 8004252:	e050      	b.n	80042f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2202      	movs	r2, #2
 8004260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800427a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	4313      	orrs	r3, r2
 8004284:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a1c      	ldr	r2, [pc, #112]	@ (8004304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d018      	beq.n	80042ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042a0:	d013      	beq.n	80042ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a18      	ldr	r2, [pc, #96]	@ (8004308 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d00e      	beq.n	80042ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a16      	ldr	r2, [pc, #88]	@ (800430c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d009      	beq.n	80042ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a15      	ldr	r2, [pc, #84]	@ (8004310 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d004      	beq.n	80042ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a13      	ldr	r2, [pc, #76]	@ (8004314 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d10c      	bne.n	80042e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	4313      	orrs	r3, r2
 80042da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3714      	adds	r7, #20
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	40010000 	.word	0x40010000
 8004308:	40000400 	.word	0x40000400
 800430c:	40000800 	.word	0x40000800
 8004310:	40000c00 	.word	0x40000c00
 8004314:	40014000 	.word	0x40014000

08004318 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e042      	b.n	80043d8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d106      	bne.n	800436c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f7fc ff8c 	bl	8001284 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2224      	movs	r2, #36	@ 0x24
 8004370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68da      	ldr	r2, [r3, #12]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004382:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 f82b 	bl	80043e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	691a      	ldr	r2, [r3, #16]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004398:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	695a      	ldr	r2, [r3, #20]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80043a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68da      	ldr	r2, [r3, #12]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2220      	movs	r2, #32
 80043c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2220      	movs	r2, #32
 80043cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3708      	adds	r7, #8
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043e4:	b0c0      	sub	sp, #256	@ 0x100
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80043f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043fc:	68d9      	ldr	r1, [r3, #12]
 80043fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	ea40 0301 	orr.w	r3, r0, r1
 8004408:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800440a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	431a      	orrs	r2, r3
 8004418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	431a      	orrs	r2, r3
 8004420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	4313      	orrs	r3, r2
 8004428:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800442c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004438:	f021 010c 	bic.w	r1, r1, #12
 800443c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004446:	430b      	orrs	r3, r1
 8004448:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800444a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800445a:	6999      	ldr	r1, [r3, #24]
 800445c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	ea40 0301 	orr.w	r3, r0, r1
 8004466:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	4b8f      	ldr	r3, [pc, #572]	@ (80046ac <UART_SetConfig+0x2cc>)
 8004470:	429a      	cmp	r2, r3
 8004472:	d005      	beq.n	8004480 <UART_SetConfig+0xa0>
 8004474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	4b8d      	ldr	r3, [pc, #564]	@ (80046b0 <UART_SetConfig+0x2d0>)
 800447c:	429a      	cmp	r2, r3
 800447e:	d104      	bne.n	800448a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004480:	f7fe fcee 	bl	8002e60 <HAL_RCC_GetPCLK2Freq>
 8004484:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004488:	e003      	b.n	8004492 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800448a:	f7fe fcd5 	bl	8002e38 <HAL_RCC_GetPCLK1Freq>
 800448e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800449c:	f040 810c 	bne.w	80046b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044a4:	2200      	movs	r2, #0
 80044a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80044aa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80044ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80044b2:	4622      	mov	r2, r4
 80044b4:	462b      	mov	r3, r5
 80044b6:	1891      	adds	r1, r2, r2
 80044b8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80044ba:	415b      	adcs	r3, r3
 80044bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80044c2:	4621      	mov	r1, r4
 80044c4:	eb12 0801 	adds.w	r8, r2, r1
 80044c8:	4629      	mov	r1, r5
 80044ca:	eb43 0901 	adc.w	r9, r3, r1
 80044ce:	f04f 0200 	mov.w	r2, #0
 80044d2:	f04f 0300 	mov.w	r3, #0
 80044d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044e2:	4690      	mov	r8, r2
 80044e4:	4699      	mov	r9, r3
 80044e6:	4623      	mov	r3, r4
 80044e8:	eb18 0303 	adds.w	r3, r8, r3
 80044ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80044f0:	462b      	mov	r3, r5
 80044f2:	eb49 0303 	adc.w	r3, r9, r3
 80044f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80044fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004506:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800450a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800450e:	460b      	mov	r3, r1
 8004510:	18db      	adds	r3, r3, r3
 8004512:	653b      	str	r3, [r7, #80]	@ 0x50
 8004514:	4613      	mov	r3, r2
 8004516:	eb42 0303 	adc.w	r3, r2, r3
 800451a:	657b      	str	r3, [r7, #84]	@ 0x54
 800451c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004520:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004524:	f7fb fe5c 	bl	80001e0 <__aeabi_uldivmod>
 8004528:	4602      	mov	r2, r0
 800452a:	460b      	mov	r3, r1
 800452c:	4b61      	ldr	r3, [pc, #388]	@ (80046b4 <UART_SetConfig+0x2d4>)
 800452e:	fba3 2302 	umull	r2, r3, r3, r2
 8004532:	095b      	lsrs	r3, r3, #5
 8004534:	011c      	lsls	r4, r3, #4
 8004536:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800453a:	2200      	movs	r2, #0
 800453c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004540:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004544:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004548:	4642      	mov	r2, r8
 800454a:	464b      	mov	r3, r9
 800454c:	1891      	adds	r1, r2, r2
 800454e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004550:	415b      	adcs	r3, r3
 8004552:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004554:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004558:	4641      	mov	r1, r8
 800455a:	eb12 0a01 	adds.w	sl, r2, r1
 800455e:	4649      	mov	r1, r9
 8004560:	eb43 0b01 	adc.w	fp, r3, r1
 8004564:	f04f 0200 	mov.w	r2, #0
 8004568:	f04f 0300 	mov.w	r3, #0
 800456c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004570:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004574:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004578:	4692      	mov	sl, r2
 800457a:	469b      	mov	fp, r3
 800457c:	4643      	mov	r3, r8
 800457e:	eb1a 0303 	adds.w	r3, sl, r3
 8004582:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004586:	464b      	mov	r3, r9
 8004588:	eb4b 0303 	adc.w	r3, fp, r3
 800458c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800459c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80045a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80045a4:	460b      	mov	r3, r1
 80045a6:	18db      	adds	r3, r3, r3
 80045a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80045aa:	4613      	mov	r3, r2
 80045ac:	eb42 0303 	adc.w	r3, r2, r3
 80045b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80045b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80045b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80045ba:	f7fb fe11 	bl	80001e0 <__aeabi_uldivmod>
 80045be:	4602      	mov	r2, r0
 80045c0:	460b      	mov	r3, r1
 80045c2:	4611      	mov	r1, r2
 80045c4:	4b3b      	ldr	r3, [pc, #236]	@ (80046b4 <UART_SetConfig+0x2d4>)
 80045c6:	fba3 2301 	umull	r2, r3, r3, r1
 80045ca:	095b      	lsrs	r3, r3, #5
 80045cc:	2264      	movs	r2, #100	@ 0x64
 80045ce:	fb02 f303 	mul.w	r3, r2, r3
 80045d2:	1acb      	subs	r3, r1, r3
 80045d4:	00db      	lsls	r3, r3, #3
 80045d6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80045da:	4b36      	ldr	r3, [pc, #216]	@ (80046b4 <UART_SetConfig+0x2d4>)
 80045dc:	fba3 2302 	umull	r2, r3, r3, r2
 80045e0:	095b      	lsrs	r3, r3, #5
 80045e2:	005b      	lsls	r3, r3, #1
 80045e4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80045e8:	441c      	add	r4, r3
 80045ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045ee:	2200      	movs	r2, #0
 80045f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80045f4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80045f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80045fc:	4642      	mov	r2, r8
 80045fe:	464b      	mov	r3, r9
 8004600:	1891      	adds	r1, r2, r2
 8004602:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004604:	415b      	adcs	r3, r3
 8004606:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004608:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800460c:	4641      	mov	r1, r8
 800460e:	1851      	adds	r1, r2, r1
 8004610:	6339      	str	r1, [r7, #48]	@ 0x30
 8004612:	4649      	mov	r1, r9
 8004614:	414b      	adcs	r3, r1
 8004616:	637b      	str	r3, [r7, #52]	@ 0x34
 8004618:	f04f 0200 	mov.w	r2, #0
 800461c:	f04f 0300 	mov.w	r3, #0
 8004620:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004624:	4659      	mov	r1, fp
 8004626:	00cb      	lsls	r3, r1, #3
 8004628:	4651      	mov	r1, sl
 800462a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800462e:	4651      	mov	r1, sl
 8004630:	00ca      	lsls	r2, r1, #3
 8004632:	4610      	mov	r0, r2
 8004634:	4619      	mov	r1, r3
 8004636:	4603      	mov	r3, r0
 8004638:	4642      	mov	r2, r8
 800463a:	189b      	adds	r3, r3, r2
 800463c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004640:	464b      	mov	r3, r9
 8004642:	460a      	mov	r2, r1
 8004644:	eb42 0303 	adc.w	r3, r2, r3
 8004648:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800464c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004658:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800465c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004660:	460b      	mov	r3, r1
 8004662:	18db      	adds	r3, r3, r3
 8004664:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004666:	4613      	mov	r3, r2
 8004668:	eb42 0303 	adc.w	r3, r2, r3
 800466c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800466e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004672:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004676:	f7fb fdb3 	bl	80001e0 <__aeabi_uldivmod>
 800467a:	4602      	mov	r2, r0
 800467c:	460b      	mov	r3, r1
 800467e:	4b0d      	ldr	r3, [pc, #52]	@ (80046b4 <UART_SetConfig+0x2d4>)
 8004680:	fba3 1302 	umull	r1, r3, r3, r2
 8004684:	095b      	lsrs	r3, r3, #5
 8004686:	2164      	movs	r1, #100	@ 0x64
 8004688:	fb01 f303 	mul.w	r3, r1, r3
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	3332      	adds	r3, #50	@ 0x32
 8004692:	4a08      	ldr	r2, [pc, #32]	@ (80046b4 <UART_SetConfig+0x2d4>)
 8004694:	fba2 2303 	umull	r2, r3, r2, r3
 8004698:	095b      	lsrs	r3, r3, #5
 800469a:	f003 0207 	and.w	r2, r3, #7
 800469e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4422      	add	r2, r4
 80046a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046a8:	e106      	b.n	80048b8 <UART_SetConfig+0x4d8>
 80046aa:	bf00      	nop
 80046ac:	40011000 	.word	0x40011000
 80046b0:	40011400 	.word	0x40011400
 80046b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046bc:	2200      	movs	r2, #0
 80046be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80046c2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80046c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80046ca:	4642      	mov	r2, r8
 80046cc:	464b      	mov	r3, r9
 80046ce:	1891      	adds	r1, r2, r2
 80046d0:	6239      	str	r1, [r7, #32]
 80046d2:	415b      	adcs	r3, r3
 80046d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80046d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046da:	4641      	mov	r1, r8
 80046dc:	1854      	adds	r4, r2, r1
 80046de:	4649      	mov	r1, r9
 80046e0:	eb43 0501 	adc.w	r5, r3, r1
 80046e4:	f04f 0200 	mov.w	r2, #0
 80046e8:	f04f 0300 	mov.w	r3, #0
 80046ec:	00eb      	lsls	r3, r5, #3
 80046ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046f2:	00e2      	lsls	r2, r4, #3
 80046f4:	4614      	mov	r4, r2
 80046f6:	461d      	mov	r5, r3
 80046f8:	4643      	mov	r3, r8
 80046fa:	18e3      	adds	r3, r4, r3
 80046fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004700:	464b      	mov	r3, r9
 8004702:	eb45 0303 	adc.w	r3, r5, r3
 8004706:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800470a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004716:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800471a:	f04f 0200 	mov.w	r2, #0
 800471e:	f04f 0300 	mov.w	r3, #0
 8004722:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004726:	4629      	mov	r1, r5
 8004728:	008b      	lsls	r3, r1, #2
 800472a:	4621      	mov	r1, r4
 800472c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004730:	4621      	mov	r1, r4
 8004732:	008a      	lsls	r2, r1, #2
 8004734:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004738:	f7fb fd52 	bl	80001e0 <__aeabi_uldivmod>
 800473c:	4602      	mov	r2, r0
 800473e:	460b      	mov	r3, r1
 8004740:	4b60      	ldr	r3, [pc, #384]	@ (80048c4 <UART_SetConfig+0x4e4>)
 8004742:	fba3 2302 	umull	r2, r3, r3, r2
 8004746:	095b      	lsrs	r3, r3, #5
 8004748:	011c      	lsls	r4, r3, #4
 800474a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800474e:	2200      	movs	r2, #0
 8004750:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004754:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004758:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800475c:	4642      	mov	r2, r8
 800475e:	464b      	mov	r3, r9
 8004760:	1891      	adds	r1, r2, r2
 8004762:	61b9      	str	r1, [r7, #24]
 8004764:	415b      	adcs	r3, r3
 8004766:	61fb      	str	r3, [r7, #28]
 8004768:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800476c:	4641      	mov	r1, r8
 800476e:	1851      	adds	r1, r2, r1
 8004770:	6139      	str	r1, [r7, #16]
 8004772:	4649      	mov	r1, r9
 8004774:	414b      	adcs	r3, r1
 8004776:	617b      	str	r3, [r7, #20]
 8004778:	f04f 0200 	mov.w	r2, #0
 800477c:	f04f 0300 	mov.w	r3, #0
 8004780:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004784:	4659      	mov	r1, fp
 8004786:	00cb      	lsls	r3, r1, #3
 8004788:	4651      	mov	r1, sl
 800478a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800478e:	4651      	mov	r1, sl
 8004790:	00ca      	lsls	r2, r1, #3
 8004792:	4610      	mov	r0, r2
 8004794:	4619      	mov	r1, r3
 8004796:	4603      	mov	r3, r0
 8004798:	4642      	mov	r2, r8
 800479a:	189b      	adds	r3, r3, r2
 800479c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80047a0:	464b      	mov	r3, r9
 80047a2:	460a      	mov	r2, r1
 80047a4:	eb42 0303 	adc.w	r3, r2, r3
 80047a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80047ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80047b6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80047b8:	f04f 0200 	mov.w	r2, #0
 80047bc:	f04f 0300 	mov.w	r3, #0
 80047c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80047c4:	4649      	mov	r1, r9
 80047c6:	008b      	lsls	r3, r1, #2
 80047c8:	4641      	mov	r1, r8
 80047ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047ce:	4641      	mov	r1, r8
 80047d0:	008a      	lsls	r2, r1, #2
 80047d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80047d6:	f7fb fd03 	bl	80001e0 <__aeabi_uldivmod>
 80047da:	4602      	mov	r2, r0
 80047dc:	460b      	mov	r3, r1
 80047de:	4611      	mov	r1, r2
 80047e0:	4b38      	ldr	r3, [pc, #224]	@ (80048c4 <UART_SetConfig+0x4e4>)
 80047e2:	fba3 2301 	umull	r2, r3, r3, r1
 80047e6:	095b      	lsrs	r3, r3, #5
 80047e8:	2264      	movs	r2, #100	@ 0x64
 80047ea:	fb02 f303 	mul.w	r3, r2, r3
 80047ee:	1acb      	subs	r3, r1, r3
 80047f0:	011b      	lsls	r3, r3, #4
 80047f2:	3332      	adds	r3, #50	@ 0x32
 80047f4:	4a33      	ldr	r2, [pc, #204]	@ (80048c4 <UART_SetConfig+0x4e4>)
 80047f6:	fba2 2303 	umull	r2, r3, r2, r3
 80047fa:	095b      	lsrs	r3, r3, #5
 80047fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004800:	441c      	add	r4, r3
 8004802:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004806:	2200      	movs	r2, #0
 8004808:	673b      	str	r3, [r7, #112]	@ 0x70
 800480a:	677a      	str	r2, [r7, #116]	@ 0x74
 800480c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004810:	4642      	mov	r2, r8
 8004812:	464b      	mov	r3, r9
 8004814:	1891      	adds	r1, r2, r2
 8004816:	60b9      	str	r1, [r7, #8]
 8004818:	415b      	adcs	r3, r3
 800481a:	60fb      	str	r3, [r7, #12]
 800481c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004820:	4641      	mov	r1, r8
 8004822:	1851      	adds	r1, r2, r1
 8004824:	6039      	str	r1, [r7, #0]
 8004826:	4649      	mov	r1, r9
 8004828:	414b      	adcs	r3, r1
 800482a:	607b      	str	r3, [r7, #4]
 800482c:	f04f 0200 	mov.w	r2, #0
 8004830:	f04f 0300 	mov.w	r3, #0
 8004834:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004838:	4659      	mov	r1, fp
 800483a:	00cb      	lsls	r3, r1, #3
 800483c:	4651      	mov	r1, sl
 800483e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004842:	4651      	mov	r1, sl
 8004844:	00ca      	lsls	r2, r1, #3
 8004846:	4610      	mov	r0, r2
 8004848:	4619      	mov	r1, r3
 800484a:	4603      	mov	r3, r0
 800484c:	4642      	mov	r2, r8
 800484e:	189b      	adds	r3, r3, r2
 8004850:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004852:	464b      	mov	r3, r9
 8004854:	460a      	mov	r2, r1
 8004856:	eb42 0303 	adc.w	r3, r2, r3
 800485a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800485c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	663b      	str	r3, [r7, #96]	@ 0x60
 8004866:	667a      	str	r2, [r7, #100]	@ 0x64
 8004868:	f04f 0200 	mov.w	r2, #0
 800486c:	f04f 0300 	mov.w	r3, #0
 8004870:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004874:	4649      	mov	r1, r9
 8004876:	008b      	lsls	r3, r1, #2
 8004878:	4641      	mov	r1, r8
 800487a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800487e:	4641      	mov	r1, r8
 8004880:	008a      	lsls	r2, r1, #2
 8004882:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004886:	f7fb fcab 	bl	80001e0 <__aeabi_uldivmod>
 800488a:	4602      	mov	r2, r0
 800488c:	460b      	mov	r3, r1
 800488e:	4b0d      	ldr	r3, [pc, #52]	@ (80048c4 <UART_SetConfig+0x4e4>)
 8004890:	fba3 1302 	umull	r1, r3, r3, r2
 8004894:	095b      	lsrs	r3, r3, #5
 8004896:	2164      	movs	r1, #100	@ 0x64
 8004898:	fb01 f303 	mul.w	r3, r1, r3
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	011b      	lsls	r3, r3, #4
 80048a0:	3332      	adds	r3, #50	@ 0x32
 80048a2:	4a08      	ldr	r2, [pc, #32]	@ (80048c4 <UART_SetConfig+0x4e4>)
 80048a4:	fba2 2303 	umull	r2, r3, r2, r3
 80048a8:	095b      	lsrs	r3, r3, #5
 80048aa:	f003 020f 	and.w	r2, r3, #15
 80048ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4422      	add	r2, r4
 80048b6:	609a      	str	r2, [r3, #8]
}
 80048b8:	bf00      	nop
 80048ba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80048be:	46bd      	mov	sp, r7
 80048c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048c4:	51eb851f 	.word	0x51eb851f

080048c8 <__NVIC_SetPriority>:
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	4603      	mov	r3, r0
 80048d0:	6039      	str	r1, [r7, #0]
 80048d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	db0a      	blt.n	80048f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	b2da      	uxtb	r2, r3
 80048e0:	490c      	ldr	r1, [pc, #48]	@ (8004914 <__NVIC_SetPriority+0x4c>)
 80048e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048e6:	0112      	lsls	r2, r2, #4
 80048e8:	b2d2      	uxtb	r2, r2
 80048ea:	440b      	add	r3, r1
 80048ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80048f0:	e00a      	b.n	8004908 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	b2da      	uxtb	r2, r3
 80048f6:	4908      	ldr	r1, [pc, #32]	@ (8004918 <__NVIC_SetPriority+0x50>)
 80048f8:	79fb      	ldrb	r3, [r7, #7]
 80048fa:	f003 030f 	and.w	r3, r3, #15
 80048fe:	3b04      	subs	r3, #4
 8004900:	0112      	lsls	r2, r2, #4
 8004902:	b2d2      	uxtb	r2, r2
 8004904:	440b      	add	r3, r1
 8004906:	761a      	strb	r2, [r3, #24]
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr
 8004914:	e000e100 	.word	0xe000e100
 8004918:	e000ed00 	.word	0xe000ed00

0800491c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800491c:	b580      	push	{r7, lr}
 800491e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004920:	4b05      	ldr	r3, [pc, #20]	@ (8004938 <SysTick_Handler+0x1c>)
 8004922:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004924:	f001 fece 	bl	80066c4 <xTaskGetSchedulerState>
 8004928:	4603      	mov	r3, r0
 800492a:	2b01      	cmp	r3, #1
 800492c:	d001      	beq.n	8004932 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800492e:	f002 fcc3 	bl	80072b8 <xPortSysTickHandler>
  }
}
 8004932:	bf00      	nop
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	e000e010 	.word	0xe000e010

0800493c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800493c:	b580      	push	{r7, lr}
 800493e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004940:	2100      	movs	r1, #0
 8004942:	f06f 0004 	mvn.w	r0, #4
 8004946:	f7ff ffbf 	bl	80048c8 <__NVIC_SetPriority>
#endif
}
 800494a:	bf00      	nop
 800494c:	bd80      	pop	{r7, pc}
	...

08004950 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004956:	f3ef 8305 	mrs	r3, IPSR
 800495a:	603b      	str	r3, [r7, #0]
  return(result);
 800495c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004962:	f06f 0305 	mvn.w	r3, #5
 8004966:	607b      	str	r3, [r7, #4]
 8004968:	e00c      	b.n	8004984 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800496a:	4b0a      	ldr	r3, [pc, #40]	@ (8004994 <osKernelInitialize+0x44>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d105      	bne.n	800497e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004972:	4b08      	ldr	r3, [pc, #32]	@ (8004994 <osKernelInitialize+0x44>)
 8004974:	2201      	movs	r2, #1
 8004976:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004978:	2300      	movs	r3, #0
 800497a:	607b      	str	r3, [r7, #4]
 800497c:	e002      	b.n	8004984 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800497e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004982:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004984:	687b      	ldr	r3, [r7, #4]
}
 8004986:	4618      	mov	r0, r3
 8004988:	370c      	adds	r7, #12
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	20000320 	.word	0x20000320

08004998 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800499e:	f3ef 8305 	mrs	r3, IPSR
 80049a2:	603b      	str	r3, [r7, #0]
  return(result);
 80049a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80049aa:	f06f 0305 	mvn.w	r3, #5
 80049ae:	607b      	str	r3, [r7, #4]
 80049b0:	e010      	b.n	80049d4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80049b2:	4b0b      	ldr	r3, [pc, #44]	@ (80049e0 <osKernelStart+0x48>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d109      	bne.n	80049ce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80049ba:	f7ff ffbf 	bl	800493c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80049be:	4b08      	ldr	r3, [pc, #32]	@ (80049e0 <osKernelStart+0x48>)
 80049c0:	2202      	movs	r2, #2
 80049c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80049c4:	f001 f946 	bl	8005c54 <vTaskStartScheduler>
      stat = osOK;
 80049c8:	2300      	movs	r3, #0
 80049ca:	607b      	str	r3, [r7, #4]
 80049cc:	e002      	b.n	80049d4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80049ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80049d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80049d4:	687b      	ldr	r3, [r7, #4]
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	20000320 	.word	0x20000320

080049e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b08e      	sub	sp, #56	@ 0x38
 80049e8:	af04      	add	r7, sp, #16
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80049f0:	2300      	movs	r3, #0
 80049f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049f4:	f3ef 8305 	mrs	r3, IPSR
 80049f8:	617b      	str	r3, [r7, #20]
  return(result);
 80049fa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d17e      	bne.n	8004afe <osThreadNew+0x11a>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d07b      	beq.n	8004afe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004a06:	2380      	movs	r3, #128	@ 0x80
 8004a08:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004a0a:	2318      	movs	r3, #24
 8004a0c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004a12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004a16:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d045      	beq.n	8004aaa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d002      	beq.n	8004a2c <osThreadNew+0x48>
        name = attr->name;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d002      	beq.n	8004a3a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d008      	beq.n	8004a52 <osThreadNew+0x6e>
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	2b38      	cmp	r3, #56	@ 0x38
 8004a44:	d805      	bhi.n	8004a52 <osThreadNew+0x6e>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d001      	beq.n	8004a56 <osThreadNew+0x72>
        return (NULL);
 8004a52:	2300      	movs	r3, #0
 8004a54:	e054      	b.n	8004b00 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d003      	beq.n	8004a66 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	089b      	lsrs	r3, r3, #2
 8004a64:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00e      	beq.n	8004a8c <osThreadNew+0xa8>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	2baf      	cmp	r3, #175	@ 0xaf
 8004a74:	d90a      	bls.n	8004a8c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d006      	beq.n	8004a8c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d002      	beq.n	8004a8c <osThreadNew+0xa8>
        mem = 1;
 8004a86:	2301      	movs	r3, #1
 8004a88:	61bb      	str	r3, [r7, #24]
 8004a8a:	e010      	b.n	8004aae <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d10c      	bne.n	8004aae <osThreadNew+0xca>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d108      	bne.n	8004aae <osThreadNew+0xca>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d104      	bne.n	8004aae <osThreadNew+0xca>
          mem = 0;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	61bb      	str	r3, [r7, #24]
 8004aa8:	e001      	b.n	8004aae <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d110      	bne.n	8004ad6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004abc:	9202      	str	r2, [sp, #8]
 8004abe:	9301      	str	r3, [sp, #4]
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	6a3a      	ldr	r2, [r7, #32]
 8004ac8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f000 fec8 	bl	8005860 <xTaskCreateStatic>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	613b      	str	r3, [r7, #16]
 8004ad4:	e013      	b.n	8004afe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d110      	bne.n	8004afe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004adc:	6a3b      	ldr	r3, [r7, #32]
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	f107 0310 	add.w	r3, r7, #16
 8004ae4:	9301      	str	r3, [sp, #4]
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	9300      	str	r3, [sp, #0]
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f000 ff16 	bl	8005920 <xTaskCreate>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d001      	beq.n	8004afe <osThreadNew+0x11a>
            hTask = NULL;
 8004afa:	2300      	movs	r3, #0
 8004afc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004afe:	693b      	ldr	r3, [r7, #16]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3728      	adds	r7, #40	@ 0x28
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b10:	f3ef 8305 	mrs	r3, IPSR
 8004b14:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b16:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d003      	beq.n	8004b24 <osDelay+0x1c>
    stat = osErrorISR;
 8004b1c:	f06f 0305 	mvn.w	r3, #5
 8004b20:	60fb      	str	r3, [r7, #12]
 8004b22:	e007      	b.n	8004b34 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004b24:	2300      	movs	r3, #0
 8004b26:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d002      	beq.n	8004b34 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f001 f85a 	bl	8005be8 <vTaskDelay>
    }
  }

  return (stat);
 8004b34:	68fb      	ldr	r3, [r7, #12]
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b08a      	sub	sp, #40	@ 0x28
 8004b42:	af02      	add	r7, sp, #8
 8004b44:	60f8      	str	r0, [r7, #12]
 8004b46:	60b9      	str	r1, [r7, #8]
 8004b48:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b4e:	f3ef 8305 	mrs	r3, IPSR
 8004b52:	613b      	str	r3, [r7, #16]
  return(result);
 8004b54:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d15f      	bne.n	8004c1a <osMessageQueueNew+0xdc>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d05c      	beq.n	8004c1a <osMessageQueueNew+0xdc>
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d059      	beq.n	8004c1a <osMessageQueueNew+0xdc>
    mem = -1;
 8004b66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004b6a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d029      	beq.n	8004bc6 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d012      	beq.n	8004ba0 <osMessageQueueNew+0x62>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	2b4f      	cmp	r3, #79	@ 0x4f
 8004b80:	d90e      	bls.n	8004ba0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00a      	beq.n	8004ba0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	695a      	ldr	r2, [r3, #20]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	68b9      	ldr	r1, [r7, #8]
 8004b92:	fb01 f303 	mul.w	r3, r1, r3
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d302      	bcc.n	8004ba0 <osMessageQueueNew+0x62>
        mem = 1;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	61bb      	str	r3, [r7, #24]
 8004b9e:	e014      	b.n	8004bca <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d110      	bne.n	8004bca <osMessageQueueNew+0x8c>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10c      	bne.n	8004bca <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d108      	bne.n	8004bca <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d104      	bne.n	8004bca <osMessageQueueNew+0x8c>
          mem = 0;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	61bb      	str	r3, [r7, #24]
 8004bc4:	e001      	b.n	8004bca <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d10b      	bne.n	8004be8 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	691a      	ldr	r2, [r3, #16]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	2100      	movs	r1, #0
 8004bda:	9100      	str	r1, [sp, #0]
 8004bdc:	68b9      	ldr	r1, [r7, #8]
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f000 f972 	bl	8004ec8 <xQueueGenericCreateStatic>
 8004be4:	61f8      	str	r0, [r7, #28]
 8004be6:	e008      	b.n	8004bfa <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d105      	bne.n	8004bfa <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004bee:	2200      	movs	r2, #0
 8004bf0:	68b9      	ldr	r1, [r7, #8]
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f000 f9e5 	bl	8004fc2 <xQueueGenericCreate>
 8004bf8:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00c      	beq.n	8004c1a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d003      	beq.n	8004c0e <osMessageQueueNew+0xd0>
        name = attr->name;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	617b      	str	r3, [r7, #20]
 8004c0c:	e001      	b.n	8004c12 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004c12:	6979      	ldr	r1, [r7, #20]
 8004c14:	69f8      	ldr	r0, [r7, #28]
 8004c16:	f000 fdc5 	bl	80057a4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004c1a:	69fb      	ldr	r3, [r7, #28]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3720      	adds	r7, #32
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	4a07      	ldr	r2, [pc, #28]	@ (8004c50 <vApplicationGetIdleTaskMemory+0x2c>)
 8004c34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	4a06      	ldr	r2, [pc, #24]	@ (8004c54 <vApplicationGetIdleTaskMemory+0x30>)
 8004c3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2280      	movs	r2, #128	@ 0x80
 8004c40:	601a      	str	r2, [r3, #0]
}
 8004c42:	bf00      	nop
 8004c44:	3714      	adds	r7, #20
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	20000324 	.word	0x20000324
 8004c54:	200003d4 	.word	0x200003d4

08004c58 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	4a07      	ldr	r2, [pc, #28]	@ (8004c84 <vApplicationGetTimerTaskMemory+0x2c>)
 8004c68:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	4a06      	ldr	r2, [pc, #24]	@ (8004c88 <vApplicationGetTimerTaskMemory+0x30>)
 8004c6e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c76:	601a      	str	r2, [r3, #0]
}
 8004c78:	bf00      	nop
 8004c7a:	3714      	adds	r7, #20
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr
 8004c84:	200005d4 	.word	0x200005d4
 8004c88:	20000684 	.word	0x20000684

08004c8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f103 0208 	add.w	r2, r3, #8
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004ca4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f103 0208 	add.w	r2, r3, #8
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f103 0208 	add.w	r2, r3, #8
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004cda:	bf00      	nop
 8004cdc:	370c      	adds	r7, #12
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr

08004ce6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	b085      	sub	sp, #20
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
 8004cee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	689a      	ldr	r2, [r3, #8]
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	683a      	ldr	r2, [r7, #0]
 8004d0a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	683a      	ldr	r2, [r7, #0]
 8004d10:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	1c5a      	adds	r2, r3, #1
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	601a      	str	r2, [r3, #0]
}
 8004d22:	bf00      	nop
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b085      	sub	sp, #20
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
 8004d36:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d44:	d103      	bne.n	8004d4e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	60fb      	str	r3, [r7, #12]
 8004d4c:	e00c      	b.n	8004d68 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	3308      	adds	r3, #8
 8004d52:	60fb      	str	r3, [r7, #12]
 8004d54:	e002      	b.n	8004d5c <vListInsert+0x2e>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68ba      	ldr	r2, [r7, #8]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d2f6      	bcs.n	8004d56 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	683a      	ldr	r2, [r7, #0]
 8004d76:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	683a      	ldr	r2, [r7, #0]
 8004d82:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	1c5a      	adds	r2, r3, #1
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	601a      	str	r2, [r3, #0]
}
 8004d94:	bf00      	nop
 8004d96:	3714      	adds	r7, #20
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	6892      	ldr	r2, [r2, #8]
 8004db6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	6852      	ldr	r2, [r2, #4]
 8004dc0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d103      	bne.n	8004dd4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	1e5a      	subs	r2, r3, #1
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3714      	adds	r7, #20
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10b      	bne.n	8004e20 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e0c:	f383 8811 	msr	BASEPRI, r3
 8004e10:	f3bf 8f6f 	isb	sy
 8004e14:	f3bf 8f4f 	dsb	sy
 8004e18:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004e1a:	bf00      	nop
 8004e1c:	bf00      	nop
 8004e1e:	e7fd      	b.n	8004e1c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004e20:	f002 f9ba 	bl	8007198 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e2c:	68f9      	ldr	r1, [r7, #12]
 8004e2e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004e30:	fb01 f303 	mul.w	r3, r1, r3
 8004e34:	441a      	add	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e50:	3b01      	subs	r3, #1
 8004e52:	68f9      	ldr	r1, [r7, #12]
 8004e54:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004e56:	fb01 f303 	mul.w	r3, r1, r3
 8004e5a:	441a      	add	r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	22ff      	movs	r2, #255	@ 0xff
 8004e64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	22ff      	movs	r2, #255	@ 0xff
 8004e6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d114      	bne.n	8004ea0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d01a      	beq.n	8004eb4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	3310      	adds	r3, #16
 8004e82:	4618      	mov	r0, r3
 8004e84:	f001 fa00 	bl	8006288 <xTaskRemoveFromEventList>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d012      	beq.n	8004eb4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec4 <xQueueGenericReset+0xd0>)
 8004e90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e94:	601a      	str	r2, [r3, #0]
 8004e96:	f3bf 8f4f 	dsb	sy
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	e009      	b.n	8004eb4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	3310      	adds	r3, #16
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f7ff fef1 	bl	8004c8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	3324      	adds	r3, #36	@ 0x24
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7ff feec 	bl	8004c8c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004eb4:	f002 f9a2 	bl	80071fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004eb8:	2301      	movs	r3, #1
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	e000ed04 	.word	0xe000ed04

08004ec8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b08e      	sub	sp, #56	@ 0x38
 8004ecc:	af02      	add	r7, sp, #8
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
 8004ed4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10b      	bne.n	8004ef4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee0:	f383 8811 	msr	BASEPRI, r3
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004eee:	bf00      	nop
 8004ef0:	bf00      	nop
 8004ef2:	e7fd      	b.n	8004ef0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10b      	bne.n	8004f12 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004efe:	f383 8811 	msr	BASEPRI, r3
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	f3bf 8f4f 	dsb	sy
 8004f0a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004f0c:	bf00      	nop
 8004f0e:	bf00      	nop
 8004f10:	e7fd      	b.n	8004f0e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d002      	beq.n	8004f1e <xQueueGenericCreateStatic+0x56>
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <xQueueGenericCreateStatic+0x5a>
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e000      	b.n	8004f24 <xQueueGenericCreateStatic+0x5c>
 8004f22:	2300      	movs	r3, #0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10b      	bne.n	8004f40 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f2c:	f383 8811 	msr	BASEPRI, r3
 8004f30:	f3bf 8f6f 	isb	sy
 8004f34:	f3bf 8f4f 	dsb	sy
 8004f38:	623b      	str	r3, [r7, #32]
}
 8004f3a:	bf00      	nop
 8004f3c:	bf00      	nop
 8004f3e:	e7fd      	b.n	8004f3c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d102      	bne.n	8004f4c <xQueueGenericCreateStatic+0x84>
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d101      	bne.n	8004f50 <xQueueGenericCreateStatic+0x88>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e000      	b.n	8004f52 <xQueueGenericCreateStatic+0x8a>
 8004f50:	2300      	movs	r3, #0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10b      	bne.n	8004f6e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f5a:	f383 8811 	msr	BASEPRI, r3
 8004f5e:	f3bf 8f6f 	isb	sy
 8004f62:	f3bf 8f4f 	dsb	sy
 8004f66:	61fb      	str	r3, [r7, #28]
}
 8004f68:	bf00      	nop
 8004f6a:	bf00      	nop
 8004f6c:	e7fd      	b.n	8004f6a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004f6e:	2350      	movs	r3, #80	@ 0x50
 8004f70:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	2b50      	cmp	r3, #80	@ 0x50
 8004f76:	d00b      	beq.n	8004f90 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f7c:	f383 8811 	msr	BASEPRI, r3
 8004f80:	f3bf 8f6f 	isb	sy
 8004f84:	f3bf 8f4f 	dsb	sy
 8004f88:	61bb      	str	r3, [r7, #24]
}
 8004f8a:	bf00      	nop
 8004f8c:	bf00      	nop
 8004f8e:	e7fd      	b.n	8004f8c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004f90:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00d      	beq.n	8004fb8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004fa4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	4613      	mov	r3, r2
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	68b9      	ldr	r1, [r7, #8]
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f000 f840 	bl	8005038 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3730      	adds	r7, #48	@ 0x30
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b08a      	sub	sp, #40	@ 0x28
 8004fc6:	af02      	add	r7, sp, #8
 8004fc8:	60f8      	str	r0, [r7, #12]
 8004fca:	60b9      	str	r1, [r7, #8]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10b      	bne.n	8004fee <xQueueGenericCreate+0x2c>
	__asm volatile
 8004fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fda:	f383 8811 	msr	BASEPRI, r3
 8004fde:	f3bf 8f6f 	isb	sy
 8004fe2:	f3bf 8f4f 	dsb	sy
 8004fe6:	613b      	str	r3, [r7, #16]
}
 8004fe8:	bf00      	nop
 8004fea:	bf00      	nop
 8004fec:	e7fd      	b.n	8004fea <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	68ba      	ldr	r2, [r7, #8]
 8004ff2:	fb02 f303 	mul.w	r3, r2, r3
 8004ff6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	3350      	adds	r3, #80	@ 0x50
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f002 fad1 	bl	80075a4 <pvPortMalloc>
 8005002:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d011      	beq.n	800502e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	3350      	adds	r3, #80	@ 0x50
 8005012:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800501c:	79fa      	ldrb	r2, [r7, #7]
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	9300      	str	r3, [sp, #0]
 8005022:	4613      	mov	r3, r2
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	68b9      	ldr	r1, [r7, #8]
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f000 f805 	bl	8005038 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800502e:	69bb      	ldr	r3, [r7, #24]
	}
 8005030:	4618      	mov	r0, r3
 8005032:	3720      	adds	r7, #32
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
 8005044:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d103      	bne.n	8005054 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	601a      	str	r2, [r3, #0]
 8005052:	e002      	b.n	800505a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005066:	2101      	movs	r1, #1
 8005068:	69b8      	ldr	r0, [r7, #24]
 800506a:	f7ff fec3 	bl	8004df4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	78fa      	ldrb	r2, [r7, #3]
 8005072:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005076:	bf00      	nop
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
	...

08005080 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b08e      	sub	sp, #56	@ 0x38
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
 800508c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800508e:	2300      	movs	r3, #0
 8005090:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005098:	2b00      	cmp	r3, #0
 800509a:	d10b      	bne.n	80050b4 <xQueueGenericSend+0x34>
	__asm volatile
 800509c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a0:	f383 8811 	msr	BASEPRI, r3
 80050a4:	f3bf 8f6f 	isb	sy
 80050a8:	f3bf 8f4f 	dsb	sy
 80050ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80050ae:	bf00      	nop
 80050b0:	bf00      	nop
 80050b2:	e7fd      	b.n	80050b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d103      	bne.n	80050c2 <xQueueGenericSend+0x42>
 80050ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <xQueueGenericSend+0x46>
 80050c2:	2301      	movs	r3, #1
 80050c4:	e000      	b.n	80050c8 <xQueueGenericSend+0x48>
 80050c6:	2300      	movs	r3, #0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10b      	bne.n	80050e4 <xQueueGenericSend+0x64>
	__asm volatile
 80050cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d0:	f383 8811 	msr	BASEPRI, r3
 80050d4:	f3bf 8f6f 	isb	sy
 80050d8:	f3bf 8f4f 	dsb	sy
 80050dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80050de:	bf00      	nop
 80050e0:	bf00      	nop
 80050e2:	e7fd      	b.n	80050e0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d103      	bne.n	80050f2 <xQueueGenericSend+0x72>
 80050ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d101      	bne.n	80050f6 <xQueueGenericSend+0x76>
 80050f2:	2301      	movs	r3, #1
 80050f4:	e000      	b.n	80050f8 <xQueueGenericSend+0x78>
 80050f6:	2300      	movs	r3, #0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10b      	bne.n	8005114 <xQueueGenericSend+0x94>
	__asm volatile
 80050fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005100:	f383 8811 	msr	BASEPRI, r3
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	623b      	str	r3, [r7, #32]
}
 800510e:	bf00      	nop
 8005110:	bf00      	nop
 8005112:	e7fd      	b.n	8005110 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005114:	f001 fad6 	bl	80066c4 <xTaskGetSchedulerState>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d102      	bne.n	8005124 <xQueueGenericSend+0xa4>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <xQueueGenericSend+0xa8>
 8005124:	2301      	movs	r3, #1
 8005126:	e000      	b.n	800512a <xQueueGenericSend+0xaa>
 8005128:	2300      	movs	r3, #0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10b      	bne.n	8005146 <xQueueGenericSend+0xc6>
	__asm volatile
 800512e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005132:	f383 8811 	msr	BASEPRI, r3
 8005136:	f3bf 8f6f 	isb	sy
 800513a:	f3bf 8f4f 	dsb	sy
 800513e:	61fb      	str	r3, [r7, #28]
}
 8005140:	bf00      	nop
 8005142:	bf00      	nop
 8005144:	e7fd      	b.n	8005142 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005146:	f002 f827 	bl	8007198 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800514a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800514c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800514e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005150:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005152:	429a      	cmp	r2, r3
 8005154:	d302      	bcc.n	800515c <xQueueGenericSend+0xdc>
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2b02      	cmp	r3, #2
 800515a:	d129      	bne.n	80051b0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800515c:	683a      	ldr	r2, [r7, #0]
 800515e:	68b9      	ldr	r1, [r7, #8]
 8005160:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005162:	f000 fa0f 	bl	8005584 <prvCopyDataToQueue>
 8005166:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800516a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800516c:	2b00      	cmp	r3, #0
 800516e:	d010      	beq.n	8005192 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005172:	3324      	adds	r3, #36	@ 0x24
 8005174:	4618      	mov	r0, r3
 8005176:	f001 f887 	bl	8006288 <xTaskRemoveFromEventList>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d013      	beq.n	80051a8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005180:	4b3f      	ldr	r3, [pc, #252]	@ (8005280 <xQueueGenericSend+0x200>)
 8005182:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005186:	601a      	str	r2, [r3, #0]
 8005188:	f3bf 8f4f 	dsb	sy
 800518c:	f3bf 8f6f 	isb	sy
 8005190:	e00a      	b.n	80051a8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005194:	2b00      	cmp	r3, #0
 8005196:	d007      	beq.n	80051a8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005198:	4b39      	ldr	r3, [pc, #228]	@ (8005280 <xQueueGenericSend+0x200>)
 800519a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800519e:	601a      	str	r2, [r3, #0]
 80051a0:	f3bf 8f4f 	dsb	sy
 80051a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80051a8:	f002 f828 	bl	80071fc <vPortExitCritical>
				return pdPASS;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e063      	b.n	8005278 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d103      	bne.n	80051be <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80051b6:	f002 f821 	bl	80071fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80051ba:	2300      	movs	r3, #0
 80051bc:	e05c      	b.n	8005278 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80051be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d106      	bne.n	80051d2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80051c4:	f107 0314 	add.w	r3, r7, #20
 80051c8:	4618      	mov	r0, r3
 80051ca:	f001 f8c3 	bl	8006354 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80051ce:	2301      	movs	r3, #1
 80051d0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80051d2:	f002 f813 	bl	80071fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80051d6:	f000 fdaf 	bl	8005d38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051da:	f001 ffdd 	bl	8007198 <vPortEnterCritical>
 80051de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80051e4:	b25b      	sxtb	r3, r3
 80051e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80051ea:	d103      	bne.n	80051f4 <xQueueGenericSend+0x174>
 80051ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80051fa:	b25b      	sxtb	r3, r3
 80051fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005200:	d103      	bne.n	800520a <xQueueGenericSend+0x18a>
 8005202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005204:	2200      	movs	r2, #0
 8005206:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800520a:	f001 fff7 	bl	80071fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800520e:	1d3a      	adds	r2, r7, #4
 8005210:	f107 0314 	add.w	r3, r7, #20
 8005214:	4611      	mov	r1, r2
 8005216:	4618      	mov	r0, r3
 8005218:	f001 f8b2 	bl	8006380 <xTaskCheckForTimeOut>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d124      	bne.n	800526c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005222:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005224:	f000 faa6 	bl	8005774 <prvIsQueueFull>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d018      	beq.n	8005260 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800522e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005230:	3310      	adds	r3, #16
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	4611      	mov	r1, r2
 8005236:	4618      	mov	r0, r3
 8005238:	f000 ffd4 	bl	80061e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800523c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800523e:	f000 fa31 	bl	80056a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005242:	f000 fdbf 	bl	8005dc4 <xTaskResumeAll>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	f47f af7c 	bne.w	8005146 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800524e:	4b0c      	ldr	r3, [pc, #48]	@ (8005280 <xQueueGenericSend+0x200>)
 8005250:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005254:	601a      	str	r2, [r3, #0]
 8005256:	f3bf 8f4f 	dsb	sy
 800525a:	f3bf 8f6f 	isb	sy
 800525e:	e772      	b.n	8005146 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005260:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005262:	f000 fa1f 	bl	80056a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005266:	f000 fdad 	bl	8005dc4 <xTaskResumeAll>
 800526a:	e76c      	b.n	8005146 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800526c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800526e:	f000 fa19 	bl	80056a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005272:	f000 fda7 	bl	8005dc4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005276:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005278:	4618      	mov	r0, r3
 800527a:	3738      	adds	r7, #56	@ 0x38
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	e000ed04 	.word	0xe000ed04

08005284 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b090      	sub	sp, #64	@ 0x40
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
 8005290:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005298:	2b00      	cmp	r3, #0
 800529a:	d10b      	bne.n	80052b4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800529c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a0:	f383 8811 	msr	BASEPRI, r3
 80052a4:	f3bf 8f6f 	isb	sy
 80052a8:	f3bf 8f4f 	dsb	sy
 80052ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80052ae:	bf00      	nop
 80052b0:	bf00      	nop
 80052b2:	e7fd      	b.n	80052b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d103      	bne.n	80052c2 <xQueueGenericSendFromISR+0x3e>
 80052ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <xQueueGenericSendFromISR+0x42>
 80052c2:	2301      	movs	r3, #1
 80052c4:	e000      	b.n	80052c8 <xQueueGenericSendFromISR+0x44>
 80052c6:	2300      	movs	r3, #0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d10b      	bne.n	80052e4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80052cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052d0:	f383 8811 	msr	BASEPRI, r3
 80052d4:	f3bf 8f6f 	isb	sy
 80052d8:	f3bf 8f4f 	dsb	sy
 80052dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80052de:	bf00      	nop
 80052e0:	bf00      	nop
 80052e2:	e7fd      	b.n	80052e0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d103      	bne.n	80052f2 <xQueueGenericSendFromISR+0x6e>
 80052ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d101      	bne.n	80052f6 <xQueueGenericSendFromISR+0x72>
 80052f2:	2301      	movs	r3, #1
 80052f4:	e000      	b.n	80052f8 <xQueueGenericSendFromISR+0x74>
 80052f6:	2300      	movs	r3, #0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10b      	bne.n	8005314 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80052fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005300:	f383 8811 	msr	BASEPRI, r3
 8005304:	f3bf 8f6f 	isb	sy
 8005308:	f3bf 8f4f 	dsb	sy
 800530c:	623b      	str	r3, [r7, #32]
}
 800530e:	bf00      	nop
 8005310:	bf00      	nop
 8005312:	e7fd      	b.n	8005310 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005314:	f002 f904 	bl	8007520 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005318:	f3ef 8211 	mrs	r2, BASEPRI
 800531c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005320:	f383 8811 	msr	BASEPRI, r3
 8005324:	f3bf 8f6f 	isb	sy
 8005328:	f3bf 8f4f 	dsb	sy
 800532c:	61fa      	str	r2, [r7, #28]
 800532e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005330:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005332:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005336:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800533a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800533c:	429a      	cmp	r2, r3
 800533e:	d302      	bcc.n	8005346 <xQueueGenericSendFromISR+0xc2>
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	2b02      	cmp	r3, #2
 8005344:	d12f      	bne.n	80053a6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005348:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800534c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005354:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005356:	683a      	ldr	r2, [r7, #0]
 8005358:	68b9      	ldr	r1, [r7, #8]
 800535a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800535c:	f000 f912 	bl	8005584 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005360:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005364:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005368:	d112      	bne.n	8005390 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800536a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800536c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800536e:	2b00      	cmp	r3, #0
 8005370:	d016      	beq.n	80053a0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005374:	3324      	adds	r3, #36	@ 0x24
 8005376:	4618      	mov	r0, r3
 8005378:	f000 ff86 	bl	8006288 <xTaskRemoveFromEventList>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00e      	beq.n	80053a0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00b      	beq.n	80053a0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	601a      	str	r2, [r3, #0]
 800538e:	e007      	b.n	80053a0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005390:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005394:	3301      	adds	r3, #1
 8005396:	b2db      	uxtb	r3, r3
 8005398:	b25a      	sxtb	r2, r3
 800539a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800539c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80053a0:	2301      	movs	r3, #1
 80053a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80053a4:	e001      	b.n	80053aa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80053a6:	2300      	movs	r3, #0
 80053a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053ac:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80053b4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80053b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3740      	adds	r7, #64	@ 0x40
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b08c      	sub	sp, #48	@ 0x30
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80053cc:	2300      	movs	r3, #0
 80053ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80053d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d10b      	bne.n	80053f2 <xQueueReceive+0x32>
	__asm volatile
 80053da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053de:	f383 8811 	msr	BASEPRI, r3
 80053e2:	f3bf 8f6f 	isb	sy
 80053e6:	f3bf 8f4f 	dsb	sy
 80053ea:	623b      	str	r3, [r7, #32]
}
 80053ec:	bf00      	nop
 80053ee:	bf00      	nop
 80053f0:	e7fd      	b.n	80053ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d103      	bne.n	8005400 <xQueueReceive+0x40>
 80053f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d101      	bne.n	8005404 <xQueueReceive+0x44>
 8005400:	2301      	movs	r3, #1
 8005402:	e000      	b.n	8005406 <xQueueReceive+0x46>
 8005404:	2300      	movs	r3, #0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10b      	bne.n	8005422 <xQueueReceive+0x62>
	__asm volatile
 800540a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800540e:	f383 8811 	msr	BASEPRI, r3
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	f3bf 8f4f 	dsb	sy
 800541a:	61fb      	str	r3, [r7, #28]
}
 800541c:	bf00      	nop
 800541e:	bf00      	nop
 8005420:	e7fd      	b.n	800541e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005422:	f001 f94f 	bl	80066c4 <xTaskGetSchedulerState>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d102      	bne.n	8005432 <xQueueReceive+0x72>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <xQueueReceive+0x76>
 8005432:	2301      	movs	r3, #1
 8005434:	e000      	b.n	8005438 <xQueueReceive+0x78>
 8005436:	2300      	movs	r3, #0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10b      	bne.n	8005454 <xQueueReceive+0x94>
	__asm volatile
 800543c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005440:	f383 8811 	msr	BASEPRI, r3
 8005444:	f3bf 8f6f 	isb	sy
 8005448:	f3bf 8f4f 	dsb	sy
 800544c:	61bb      	str	r3, [r7, #24]
}
 800544e:	bf00      	nop
 8005450:	bf00      	nop
 8005452:	e7fd      	b.n	8005450 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005454:	f001 fea0 	bl	8007198 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800545a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800545c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800545e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005460:	2b00      	cmp	r3, #0
 8005462:	d01f      	beq.n	80054a4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005464:	68b9      	ldr	r1, [r7, #8]
 8005466:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005468:	f000 f8f6 	bl	8005658 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800546c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546e:	1e5a      	subs	r2, r3, #1
 8005470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005472:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00f      	beq.n	800549c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800547c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800547e:	3310      	adds	r3, #16
 8005480:	4618      	mov	r0, r3
 8005482:	f000 ff01 	bl	8006288 <xTaskRemoveFromEventList>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d007      	beq.n	800549c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800548c:	4b3c      	ldr	r3, [pc, #240]	@ (8005580 <xQueueReceive+0x1c0>)
 800548e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005492:	601a      	str	r2, [r3, #0]
 8005494:	f3bf 8f4f 	dsb	sy
 8005498:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800549c:	f001 feae 	bl	80071fc <vPortExitCritical>
				return pdPASS;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e069      	b.n	8005578 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d103      	bne.n	80054b2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80054aa:	f001 fea7 	bl	80071fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80054ae:	2300      	movs	r3, #0
 80054b0:	e062      	b.n	8005578 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d106      	bne.n	80054c6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054b8:	f107 0310 	add.w	r3, r7, #16
 80054bc:	4618      	mov	r0, r3
 80054be:	f000 ff49 	bl	8006354 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054c2:	2301      	movs	r3, #1
 80054c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054c6:	f001 fe99 	bl	80071fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054ca:	f000 fc35 	bl	8005d38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054ce:	f001 fe63 	bl	8007198 <vPortEnterCritical>
 80054d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80054d8:	b25b      	sxtb	r3, r3
 80054da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80054de:	d103      	bne.n	80054e8 <xQueueReceive+0x128>
 80054e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80054ee:	b25b      	sxtb	r3, r3
 80054f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80054f4:	d103      	bne.n	80054fe <xQueueReceive+0x13e>
 80054f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054fe:	f001 fe7d 	bl	80071fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005502:	1d3a      	adds	r2, r7, #4
 8005504:	f107 0310 	add.w	r3, r7, #16
 8005508:	4611      	mov	r1, r2
 800550a:	4618      	mov	r0, r3
 800550c:	f000 ff38 	bl	8006380 <xTaskCheckForTimeOut>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d123      	bne.n	800555e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005516:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005518:	f000 f916 	bl	8005748 <prvIsQueueEmpty>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d017      	beq.n	8005552 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005524:	3324      	adds	r3, #36	@ 0x24
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	4611      	mov	r1, r2
 800552a:	4618      	mov	r0, r3
 800552c:	f000 fe5a 	bl	80061e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005530:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005532:	f000 f8b7 	bl	80056a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005536:	f000 fc45 	bl	8005dc4 <xTaskResumeAll>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d189      	bne.n	8005454 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005540:	4b0f      	ldr	r3, [pc, #60]	@ (8005580 <xQueueReceive+0x1c0>)
 8005542:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005546:	601a      	str	r2, [r3, #0]
 8005548:	f3bf 8f4f 	dsb	sy
 800554c:	f3bf 8f6f 	isb	sy
 8005550:	e780      	b.n	8005454 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005552:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005554:	f000 f8a6 	bl	80056a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005558:	f000 fc34 	bl	8005dc4 <xTaskResumeAll>
 800555c:	e77a      	b.n	8005454 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800555e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005560:	f000 f8a0 	bl	80056a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005564:	f000 fc2e 	bl	8005dc4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005568:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800556a:	f000 f8ed 	bl	8005748 <prvIsQueueEmpty>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	f43f af6f 	beq.w	8005454 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005576:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005578:	4618      	mov	r0, r3
 800557a:	3730      	adds	r7, #48	@ 0x30
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	e000ed04 	.word	0xe000ed04

08005584 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b086      	sub	sp, #24
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005590:	2300      	movs	r3, #0
 8005592:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005598:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10d      	bne.n	80055be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d14d      	bne.n	8005646 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f001 f8a6 	bl	8006700 <xTaskPriorityDisinherit>
 80055b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	609a      	str	r2, [r3, #8]
 80055bc:	e043      	b.n	8005646 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d119      	bne.n	80055f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6858      	ldr	r0, [r3, #4]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055cc:	461a      	mov	r2, r3
 80055ce:	68b9      	ldr	r1, [r7, #8]
 80055d0:	f002 fa5a 	bl	8007a88 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055dc:	441a      	add	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d32b      	bcc.n	8005646 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	605a      	str	r2, [r3, #4]
 80055f6:	e026      	b.n	8005646 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	68d8      	ldr	r0, [r3, #12]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005600:	461a      	mov	r2, r3
 8005602:	68b9      	ldr	r1, [r7, #8]
 8005604:	f002 fa40 	bl	8007a88 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	68da      	ldr	r2, [r3, #12]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005610:	425b      	negs	r3, r3
 8005612:	441a      	add	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	68da      	ldr	r2, [r3, #12]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	429a      	cmp	r2, r3
 8005622:	d207      	bcs.n	8005634 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	689a      	ldr	r2, [r3, #8]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800562c:	425b      	negs	r3, r3
 800562e:	441a      	add	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2b02      	cmp	r3, #2
 8005638:	d105      	bne.n	8005646 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d002      	beq.n	8005646 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	3b01      	subs	r3, #1
 8005644:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	1c5a      	adds	r2, r3, #1
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800564e:	697b      	ldr	r3, [r7, #20]
}
 8005650:	4618      	mov	r0, r3
 8005652:	3718      	adds	r7, #24
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005666:	2b00      	cmp	r3, #0
 8005668:	d018      	beq.n	800569c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	68da      	ldr	r2, [r3, #12]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005672:	441a      	add	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68da      	ldr	r2, [r3, #12]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	429a      	cmp	r2, r3
 8005682:	d303      	bcc.n	800568c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	68d9      	ldr	r1, [r3, #12]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005694:	461a      	mov	r2, r3
 8005696:	6838      	ldr	r0, [r7, #0]
 8005698:	f002 f9f6 	bl	8007a88 <memcpy>
	}
}
 800569c:	bf00      	nop
 800569e:	3708      	adds	r7, #8
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80056ac:	f001 fd74 	bl	8007198 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80056b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056b8:	e011      	b.n	80056de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d012      	beq.n	80056e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	3324      	adds	r3, #36	@ 0x24
 80056c6:	4618      	mov	r0, r3
 80056c8:	f000 fdde 	bl	8006288 <xTaskRemoveFromEventList>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d001      	beq.n	80056d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80056d2:	f000 feb9 	bl	8006448 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80056d6:	7bfb      	ldrb	r3, [r7, #15]
 80056d8:	3b01      	subs	r3, #1
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	dce9      	bgt.n	80056ba <prvUnlockQueue+0x16>
 80056e6:	e000      	b.n	80056ea <prvUnlockQueue+0x46>
					break;
 80056e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	22ff      	movs	r2, #255	@ 0xff
 80056ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80056f2:	f001 fd83 	bl	80071fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80056f6:	f001 fd4f 	bl	8007198 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005700:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005702:	e011      	b.n	8005728 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d012      	beq.n	8005732 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	3310      	adds	r3, #16
 8005710:	4618      	mov	r0, r3
 8005712:	f000 fdb9 	bl	8006288 <xTaskRemoveFromEventList>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d001      	beq.n	8005720 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800571c:	f000 fe94 	bl	8006448 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005720:	7bbb      	ldrb	r3, [r7, #14]
 8005722:	3b01      	subs	r3, #1
 8005724:	b2db      	uxtb	r3, r3
 8005726:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005728:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800572c:	2b00      	cmp	r3, #0
 800572e:	dce9      	bgt.n	8005704 <prvUnlockQueue+0x60>
 8005730:	e000      	b.n	8005734 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005732:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	22ff      	movs	r2, #255	@ 0xff
 8005738:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800573c:	f001 fd5e 	bl	80071fc <vPortExitCritical>
}
 8005740:	bf00      	nop
 8005742:	3710      	adds	r7, #16
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005750:	f001 fd22 	bl	8007198 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005758:	2b00      	cmp	r3, #0
 800575a:	d102      	bne.n	8005762 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800575c:	2301      	movs	r3, #1
 800575e:	60fb      	str	r3, [r7, #12]
 8005760:	e001      	b.n	8005766 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005762:	2300      	movs	r3, #0
 8005764:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005766:	f001 fd49 	bl	80071fc <vPortExitCritical>

	return xReturn;
 800576a:	68fb      	ldr	r3, [r7, #12]
}
 800576c:	4618      	mov	r0, r3
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800577c:	f001 fd0c 	bl	8007198 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005788:	429a      	cmp	r2, r3
 800578a:	d102      	bne.n	8005792 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800578c:	2301      	movs	r3, #1
 800578e:	60fb      	str	r3, [r7, #12]
 8005790:	e001      	b.n	8005796 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005792:	2300      	movs	r3, #0
 8005794:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005796:	f001 fd31 	bl	80071fc <vPortExitCritical>

	return xReturn;
 800579a:	68fb      	ldr	r3, [r7, #12]
}
 800579c:	4618      	mov	r0, r3
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80057ae:	2300      	movs	r3, #0
 80057b0:	60fb      	str	r3, [r7, #12]
 80057b2:	e014      	b.n	80057de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80057b4:	4a0f      	ldr	r2, [pc, #60]	@ (80057f4 <vQueueAddToRegistry+0x50>)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10b      	bne.n	80057d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80057c0:	490c      	ldr	r1, [pc, #48]	@ (80057f4 <vQueueAddToRegistry+0x50>)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	683a      	ldr	r2, [r7, #0]
 80057c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80057ca:	4a0a      	ldr	r2, [pc, #40]	@ (80057f4 <vQueueAddToRegistry+0x50>)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	00db      	lsls	r3, r3, #3
 80057d0:	4413      	add	r3, r2
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80057d6:	e006      	b.n	80057e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	3301      	adds	r3, #1
 80057dc:	60fb      	str	r3, [r7, #12]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2b0f      	cmp	r3, #15
 80057e2:	d9e7      	bls.n	80057b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80057e4:	bf00      	nop
 80057e6:	bf00      	nop
 80057e8:	3714      	adds	r7, #20
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	20000a84 	.word	0x20000a84

080057f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005808:	f001 fcc6 	bl	8007198 <vPortEnterCritical>
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005812:	b25b      	sxtb	r3, r3
 8005814:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005818:	d103      	bne.n	8005822 <vQueueWaitForMessageRestricted+0x2a>
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005828:	b25b      	sxtb	r3, r3
 800582a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800582e:	d103      	bne.n	8005838 <vQueueWaitForMessageRestricted+0x40>
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005838:	f001 fce0 	bl	80071fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005840:	2b00      	cmp	r3, #0
 8005842:	d106      	bne.n	8005852 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	3324      	adds	r3, #36	@ 0x24
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	68b9      	ldr	r1, [r7, #8]
 800584c:	4618      	mov	r0, r3
 800584e:	f000 fcef 	bl	8006230 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005852:	6978      	ldr	r0, [r7, #20]
 8005854:	f7ff ff26 	bl	80056a4 <prvUnlockQueue>
	}
 8005858:	bf00      	nop
 800585a:	3718      	adds	r7, #24
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005860:	b580      	push	{r7, lr}
 8005862:	b08e      	sub	sp, #56	@ 0x38
 8005864:	af04      	add	r7, sp, #16
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
 800586c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800586e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005870:	2b00      	cmp	r3, #0
 8005872:	d10b      	bne.n	800588c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005878:	f383 8811 	msr	BASEPRI, r3
 800587c:	f3bf 8f6f 	isb	sy
 8005880:	f3bf 8f4f 	dsb	sy
 8005884:	623b      	str	r3, [r7, #32]
}
 8005886:	bf00      	nop
 8005888:	bf00      	nop
 800588a:	e7fd      	b.n	8005888 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800588c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10b      	bne.n	80058aa <xTaskCreateStatic+0x4a>
	__asm volatile
 8005892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005896:	f383 8811 	msr	BASEPRI, r3
 800589a:	f3bf 8f6f 	isb	sy
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	61fb      	str	r3, [r7, #28]
}
 80058a4:	bf00      	nop
 80058a6:	bf00      	nop
 80058a8:	e7fd      	b.n	80058a6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80058aa:	23b0      	movs	r3, #176	@ 0xb0
 80058ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	2bb0      	cmp	r3, #176	@ 0xb0
 80058b2:	d00b      	beq.n	80058cc <xTaskCreateStatic+0x6c>
	__asm volatile
 80058b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b8:	f383 8811 	msr	BASEPRI, r3
 80058bc:	f3bf 8f6f 	isb	sy
 80058c0:	f3bf 8f4f 	dsb	sy
 80058c4:	61bb      	str	r3, [r7, #24]
}
 80058c6:	bf00      	nop
 80058c8:	bf00      	nop
 80058ca:	e7fd      	b.n	80058c8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80058cc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80058ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d01e      	beq.n	8005912 <xTaskCreateStatic+0xb2>
 80058d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d01b      	beq.n	8005912 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058dc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80058de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80058e2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80058e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e6:	2202      	movs	r2, #2
 80058e8:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80058ec:	2300      	movs	r3, #0
 80058ee:	9303      	str	r3, [sp, #12]
 80058f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f2:	9302      	str	r3, [sp, #8]
 80058f4:	f107 0314 	add.w	r3, r7, #20
 80058f8:	9301      	str	r3, [sp, #4]
 80058fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058fc:	9300      	str	r3, [sp, #0]
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	68b9      	ldr	r1, [r7, #8]
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f000 f851 	bl	80059ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800590a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800590c:	f000 f8fc 	bl	8005b08 <prvAddNewTaskToReadyList>
 8005910:	e001      	b.n	8005916 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005912:	2300      	movs	r3, #0
 8005914:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005916:	697b      	ldr	r3, [r7, #20]
	}
 8005918:	4618      	mov	r0, r3
 800591a:	3728      	adds	r7, #40	@ 0x28
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005920:	b580      	push	{r7, lr}
 8005922:	b08c      	sub	sp, #48	@ 0x30
 8005924:	af04      	add	r7, sp, #16
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	603b      	str	r3, [r7, #0]
 800592c:	4613      	mov	r3, r2
 800592e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005930:	88fb      	ldrh	r3, [r7, #6]
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4618      	mov	r0, r3
 8005936:	f001 fe35 	bl	80075a4 <pvPortMalloc>
 800593a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00e      	beq.n	8005960 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005942:	20b0      	movs	r0, #176	@ 0xb0
 8005944:	f001 fe2e 	bl	80075a4 <pvPortMalloc>
 8005948:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d003      	beq.n	8005958 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	631a      	str	r2, [r3, #48]	@ 0x30
 8005956:	e005      	b.n	8005964 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005958:	6978      	ldr	r0, [r7, #20]
 800595a:	f001 fef1 	bl	8007740 <vPortFree>
 800595e:	e001      	b.n	8005964 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005960:	2300      	movs	r3, #0
 8005962:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d017      	beq.n	800599a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005972:	88fa      	ldrh	r2, [r7, #6]
 8005974:	2300      	movs	r3, #0
 8005976:	9303      	str	r3, [sp, #12]
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	9302      	str	r3, [sp, #8]
 800597c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800597e:	9301      	str	r3, [sp, #4]
 8005980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	68b9      	ldr	r1, [r7, #8]
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f000 f80f 	bl	80059ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800598e:	69f8      	ldr	r0, [r7, #28]
 8005990:	f000 f8ba 	bl	8005b08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005994:	2301      	movs	r3, #1
 8005996:	61bb      	str	r3, [r7, #24]
 8005998:	e002      	b.n	80059a0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800599a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800599e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80059a0:	69bb      	ldr	r3, [r7, #24]
	}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3720      	adds	r7, #32
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
	...

080059ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b088      	sub	sp, #32
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
 80059b8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80059ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059bc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	461a      	mov	r2, r3
 80059c4:	21a5      	movs	r1, #165	@ 0xa5
 80059c6:	f001 ffdb 	bl	8007980 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80059ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80059d4:	3b01      	subs	r3, #1
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	4413      	add	r3, r2
 80059da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	f023 0307 	bic.w	r3, r3, #7
 80059e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	f003 0307 	and.w	r3, r3, #7
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00b      	beq.n	8005a06 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80059ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059f2:	f383 8811 	msr	BASEPRI, r3
 80059f6:	f3bf 8f6f 	isb	sy
 80059fa:	f3bf 8f4f 	dsb	sy
 80059fe:	617b      	str	r3, [r7, #20]
}
 8005a00:	bf00      	nop
 8005a02:	bf00      	nop
 8005a04:	e7fd      	b.n	8005a02 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8005a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a08:	69ba      	ldr	r2, [r7, #24]
 8005a0a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d01f      	beq.n	8005a52 <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a12:	2300      	movs	r3, #0
 8005a14:	61fb      	str	r3, [r7, #28]
 8005a16:	e012      	b.n	8005a3e <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	7819      	ldrb	r1, [r3, #0]
 8005a20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	4413      	add	r3, r2
 8005a26:	3334      	adds	r3, #52	@ 0x34
 8005a28:	460a      	mov	r2, r1
 8005a2a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	4413      	add	r3, r2
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d006      	beq.n	8005a46 <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	61fb      	str	r3, [r7, #28]
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	2b0f      	cmp	r3, #15
 8005a42:	d9e9      	bls.n	8005a18 <prvInitialiseNewTask+0x6c>
 8005a44:	e000      	b.n	8005a48 <prvInitialiseNewTask+0x9c>
			{
				break;
 8005a46:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005a50:	e003      	b.n	8005a5a <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a5c:	2b37      	cmp	r3, #55	@ 0x37
 8005a5e:	d901      	bls.n	8005a64 <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a60:	2337      	movs	r3, #55	@ 0x37
 8005a62:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a68:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a6e:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8005a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a72:	2200      	movs	r2, #0
 8005a74:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a78:	3304      	adds	r3, #4
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7ff f926 	bl	8004ccc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a82:	3318      	adds	r3, #24
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7ff f921 	bl	8004ccc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a8e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a92:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a98:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a9e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8005aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab8:	335c      	adds	r3, #92	@ 0x5c
 8005aba:	224c      	movs	r2, #76	@ 0x4c
 8005abc:	2100      	movs	r1, #0
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f001 ff5e 	bl	8007980 <memset>
 8005ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac6:	4a0d      	ldr	r2, [pc, #52]	@ (8005afc <prvInitialiseNewTask+0x150>)
 8005ac8:	661a      	str	r2, [r3, #96]	@ 0x60
 8005aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005acc:	4a0c      	ldr	r2, [pc, #48]	@ (8005b00 <prvInitialiseNewTask+0x154>)
 8005ace:	665a      	str	r2, [r3, #100]	@ 0x64
 8005ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad2:	4a0c      	ldr	r2, [pc, #48]	@ (8005b04 <prvInitialiseNewTask+0x158>)
 8005ad4:	669a      	str	r2, [r3, #104]	@ 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005ad6:	683a      	ldr	r2, [r7, #0]
 8005ad8:	68f9      	ldr	r1, [r7, #12]
 8005ada:	69b8      	ldr	r0, [r7, #24]
 8005adc:	f001 fa2e 	bl	8006f3c <pxPortInitialiseStack>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d002      	beq.n	8005af2 <prvInitialiseNewTask+0x146>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005af0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005af2:	bf00      	nop
 8005af4:	3720      	adds	r7, #32
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	20004d6c 	.word	0x20004d6c
 8005b00:	20004dd4 	.word	0x20004dd4
 8005b04:	20004e3c 	.word	0x20004e3c

08005b08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005b10:	f001 fb42 	bl	8007198 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005b14:	4b2d      	ldr	r3, [pc, #180]	@ (8005bcc <prvAddNewTaskToReadyList+0xc4>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	4a2c      	ldr	r2, [pc, #176]	@ (8005bcc <prvAddNewTaskToReadyList+0xc4>)
 8005b1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005b1e:	4b2c      	ldr	r3, [pc, #176]	@ (8005bd0 <prvAddNewTaskToReadyList+0xc8>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d109      	bne.n	8005b3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005b26:	4a2a      	ldr	r2, [pc, #168]	@ (8005bd0 <prvAddNewTaskToReadyList+0xc8>)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005b2c:	4b27      	ldr	r3, [pc, #156]	@ (8005bcc <prvAddNewTaskToReadyList+0xc4>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d110      	bne.n	8005b56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005b34:	f000 fd02 	bl	800653c <prvInitialiseTaskLists>
 8005b38:	e00d      	b.n	8005b56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005b3a:	4b26      	ldr	r3, [pc, #152]	@ (8005bd4 <prvAddNewTaskToReadyList+0xcc>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d109      	bne.n	8005b56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b42:	4b23      	ldr	r3, [pc, #140]	@ (8005bd0 <prvAddNewTaskToReadyList+0xc8>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d802      	bhi.n	8005b56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005b50:	4a1f      	ldr	r2, [pc, #124]	@ (8005bd0 <prvAddNewTaskToReadyList+0xc8>)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005b56:	4b20      	ldr	r3, [pc, #128]	@ (8005bd8 <prvAddNewTaskToReadyList+0xd0>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	4a1e      	ldr	r2, [pc, #120]	@ (8005bd8 <prvAddNewTaskToReadyList+0xd0>)
 8005b5e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005b60:	4b1d      	ldr	r3, [pc, #116]	@ (8005bd8 <prvAddNewTaskToReadyList+0xd0>)
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8005bdc <prvAddNewTaskToReadyList+0xd4>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d903      	bls.n	8005b7c <prvAddNewTaskToReadyList+0x74>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b78:	4a18      	ldr	r2, [pc, #96]	@ (8005bdc <prvAddNewTaskToReadyList+0xd4>)
 8005b7a:	6013      	str	r3, [r2, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b80:	4613      	mov	r3, r2
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	4413      	add	r3, r2
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4a15      	ldr	r2, [pc, #84]	@ (8005be0 <prvAddNewTaskToReadyList+0xd8>)
 8005b8a:	441a      	add	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	3304      	adds	r3, #4
 8005b90:	4619      	mov	r1, r3
 8005b92:	4610      	mov	r0, r2
 8005b94:	f7ff f8a7 	bl	8004ce6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b98:	f001 fb30 	bl	80071fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8005bd4 <prvAddNewTaskToReadyList+0xcc>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d00e      	beq.n	8005bc2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8005bd0 <prvAddNewTaskToReadyList+0xc8>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d207      	bcs.n	8005bc2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8005be4 <prvAddNewTaskToReadyList+0xdc>)
 8005bb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bb8:	601a      	str	r2, [r3, #0]
 8005bba:	f3bf 8f4f 	dsb	sy
 8005bbe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bc2:	bf00      	nop
 8005bc4:	3708      	adds	r7, #8
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	20000fd8 	.word	0x20000fd8
 8005bd0:	20000b04 	.word	0x20000b04
 8005bd4:	20000fe4 	.word	0x20000fe4
 8005bd8:	20000ff4 	.word	0x20000ff4
 8005bdc:	20000fe0 	.word	0x20000fe0
 8005be0:	20000b08 	.word	0x20000b08
 8005be4:	e000ed04 	.word	0xe000ed04

08005be8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d018      	beq.n	8005c2c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005bfa:	4b14      	ldr	r3, [pc, #80]	@ (8005c4c <vTaskDelay+0x64>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00b      	beq.n	8005c1a <vTaskDelay+0x32>
	__asm volatile
 8005c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c06:	f383 8811 	msr	BASEPRI, r3
 8005c0a:	f3bf 8f6f 	isb	sy
 8005c0e:	f3bf 8f4f 	dsb	sy
 8005c12:	60bb      	str	r3, [r7, #8]
}
 8005c14:	bf00      	nop
 8005c16:	bf00      	nop
 8005c18:	e7fd      	b.n	8005c16 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005c1a:	f000 f88d 	bl	8005d38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005c1e:	2100      	movs	r1, #0
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 fddd 	bl	80067e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005c26:	f000 f8cd 	bl	8005dc4 <xTaskResumeAll>
 8005c2a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d107      	bne.n	8005c42 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005c32:	4b07      	ldr	r3, [pc, #28]	@ (8005c50 <vTaskDelay+0x68>)
 8005c34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c38:	601a      	str	r2, [r3, #0]
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c42:	bf00      	nop
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	20001000 	.word	0x20001000
 8005c50:	e000ed04 	.word	0xe000ed04

08005c54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b08a      	sub	sp, #40	@ 0x28
 8005c58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005c62:	463a      	mov	r2, r7
 8005c64:	1d39      	adds	r1, r7, #4
 8005c66:	f107 0308 	add.w	r3, r7, #8
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7fe ffda 	bl	8004c24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005c70:	6839      	ldr	r1, [r7, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	9202      	str	r2, [sp, #8]
 8005c78:	9301      	str	r3, [sp, #4]
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	9300      	str	r3, [sp, #0]
 8005c7e:	2300      	movs	r3, #0
 8005c80:	460a      	mov	r2, r1
 8005c82:	4925      	ldr	r1, [pc, #148]	@ (8005d18 <vTaskStartScheduler+0xc4>)
 8005c84:	4825      	ldr	r0, [pc, #148]	@ (8005d1c <vTaskStartScheduler+0xc8>)
 8005c86:	f7ff fdeb 	bl	8005860 <xTaskCreateStatic>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	4a24      	ldr	r2, [pc, #144]	@ (8005d20 <vTaskStartScheduler+0xcc>)
 8005c8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c90:	4b23      	ldr	r3, [pc, #140]	@ (8005d20 <vTaskStartScheduler+0xcc>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d002      	beq.n	8005c9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	617b      	str	r3, [r7, #20]
 8005c9c:	e001      	b.n	8005ca2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d102      	bne.n	8005cae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005ca8:	f000 fdee 	bl	8006888 <xTimerCreateTimerTask>
 8005cac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d11d      	bne.n	8005cf0 <vTaskStartScheduler+0x9c>
	__asm volatile
 8005cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb8:	f383 8811 	msr	BASEPRI, r3
 8005cbc:	f3bf 8f6f 	isb	sy
 8005cc0:	f3bf 8f4f 	dsb	sy
 8005cc4:	613b      	str	r3, [r7, #16]
}
 8005cc6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005cc8:	4b16      	ldr	r3, [pc, #88]	@ (8005d24 <vTaskStartScheduler+0xd0>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	335c      	adds	r3, #92	@ 0x5c
 8005cce:	4a16      	ldr	r2, [pc, #88]	@ (8005d28 <vTaskStartScheduler+0xd4>)
 8005cd0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005cd2:	4b16      	ldr	r3, [pc, #88]	@ (8005d2c <vTaskStartScheduler+0xd8>)
 8005cd4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005cd8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005cda:	4b15      	ldr	r3, [pc, #84]	@ (8005d30 <vTaskStartScheduler+0xdc>)
 8005cdc:	2201      	movs	r2, #1
 8005cde:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005ce0:	4b14      	ldr	r3, [pc, #80]	@ (8005d34 <vTaskStartScheduler+0xe0>)
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8005ce6:	f7fa fd23 	bl	8000730 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005cea:	f001 f9b1 	bl	8007050 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005cee:	e00f      	b.n	8005d10 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005cf6:	d10b      	bne.n	8005d10 <vTaskStartScheduler+0xbc>
	__asm volatile
 8005cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cfc:	f383 8811 	msr	BASEPRI, r3
 8005d00:	f3bf 8f6f 	isb	sy
 8005d04:	f3bf 8f4f 	dsb	sy
 8005d08:	60fb      	str	r3, [r7, #12]
}
 8005d0a:	bf00      	nop
 8005d0c:	bf00      	nop
 8005d0e:	e7fd      	b.n	8005d0c <vTaskStartScheduler+0xb8>
}
 8005d10:	bf00      	nop
 8005d12:	3718      	adds	r7, #24
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	08007be8 	.word	0x08007be8
 8005d1c:	08006461 	.word	0x08006461
 8005d20:	20000ffc 	.word	0x20000ffc
 8005d24:	20000b04 	.word	0x20000b04
 8005d28:	20000010 	.word	0x20000010
 8005d2c:	20000ff8 	.word	0x20000ff8
 8005d30:	20000fe4 	.word	0x20000fe4
 8005d34:	20000fdc 	.word	0x20000fdc

08005d38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005d38:	b480      	push	{r7}
 8005d3a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005d3c:	4b04      	ldr	r3, [pc, #16]	@ (8005d50 <vTaskSuspendAll+0x18>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	3301      	adds	r3, #1
 8005d42:	4a03      	ldr	r2, [pc, #12]	@ (8005d50 <vTaskSuspendAll+0x18>)
 8005d44:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005d46:	bf00      	nop
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr
 8005d50:	20001000 	.word	0x20001000

08005d54 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8005d5e:	4b14      	ldr	r3, [pc, #80]	@ (8005db0 <prvGetExpectedIdleTime+0x5c>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d001      	beq.n	8005d6a <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 8005d66:	2301      	movs	r3, #1
 8005d68:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8005d6a:	4b12      	ldr	r3, [pc, #72]	@ (8005db4 <prvGetExpectedIdleTime+0x60>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d002      	beq.n	8005d7a <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 8005d74:	2300      	movs	r3, #0
 8005d76:	607b      	str	r3, [r7, #4]
 8005d78:	e012      	b.n	8005da0 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8005d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8005db8 <prvGetExpectedIdleTime+0x64>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d902      	bls.n	8005d88 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 8005d82:	2300      	movs	r3, #0
 8005d84:	607b      	str	r3, [r7, #4]
 8005d86:	e00b      	b.n	8005da0 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d002      	beq.n	8005d94 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	607b      	str	r3, [r7, #4]
 8005d92:	e005      	b.n	8005da0 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8005d94:	4b09      	ldr	r3, [pc, #36]	@ (8005dbc <prvGetExpectedIdleTime+0x68>)
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	4b09      	ldr	r3, [pc, #36]	@ (8005dc0 <prvGetExpectedIdleTime+0x6c>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 8005da0:	687b      	ldr	r3, [r7, #4]
	}
 8005da2:	4618      	mov	r0, r3
 8005da4:	370c      	adds	r7, #12
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	20000fe0 	.word	0x20000fe0
 8005db4:	20000b04 	.word	0x20000b04
 8005db8:	20000b08 	.word	0x20000b08
 8005dbc:	20000ff8 	.word	0x20000ff8
 8005dc0:	20000fdc 	.word	0x20000fdc

08005dc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005dd2:	4b42      	ldr	r3, [pc, #264]	@ (8005edc <xTaskResumeAll+0x118>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d10b      	bne.n	8005df2 <xTaskResumeAll+0x2e>
	__asm volatile
 8005dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dde:	f383 8811 	msr	BASEPRI, r3
 8005de2:	f3bf 8f6f 	isb	sy
 8005de6:	f3bf 8f4f 	dsb	sy
 8005dea:	603b      	str	r3, [r7, #0]
}
 8005dec:	bf00      	nop
 8005dee:	bf00      	nop
 8005df0:	e7fd      	b.n	8005dee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005df2:	f001 f9d1 	bl	8007198 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005df6:	4b39      	ldr	r3, [pc, #228]	@ (8005edc <xTaskResumeAll+0x118>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	4a37      	ldr	r2, [pc, #220]	@ (8005edc <xTaskResumeAll+0x118>)
 8005dfe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e00:	4b36      	ldr	r3, [pc, #216]	@ (8005edc <xTaskResumeAll+0x118>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d162      	bne.n	8005ece <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005e08:	4b35      	ldr	r3, [pc, #212]	@ (8005ee0 <xTaskResumeAll+0x11c>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d05e      	beq.n	8005ece <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e10:	e02f      	b.n	8005e72 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e12:	4b34      	ldr	r3, [pc, #208]	@ (8005ee4 <xTaskResumeAll+0x120>)
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	3318      	adds	r3, #24
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7fe ffbe 	bl	8004da0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	3304      	adds	r3, #4
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f7fe ffb9 	bl	8004da0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e32:	4b2d      	ldr	r3, [pc, #180]	@ (8005ee8 <xTaskResumeAll+0x124>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d903      	bls.n	8005e42 <xTaskResumeAll+0x7e>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e3e:	4a2a      	ldr	r2, [pc, #168]	@ (8005ee8 <xTaskResumeAll+0x124>)
 8005e40:	6013      	str	r3, [r2, #0]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e46:	4613      	mov	r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4413      	add	r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	4a27      	ldr	r2, [pc, #156]	@ (8005eec <xTaskResumeAll+0x128>)
 8005e50:	441a      	add	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	3304      	adds	r3, #4
 8005e56:	4619      	mov	r1, r3
 8005e58:	4610      	mov	r0, r2
 8005e5a:	f7fe ff44 	bl	8004ce6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e62:	4b23      	ldr	r3, [pc, #140]	@ (8005ef0 <xTaskResumeAll+0x12c>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d302      	bcc.n	8005e72 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005e6c:	4b21      	ldr	r3, [pc, #132]	@ (8005ef4 <xTaskResumeAll+0x130>)
 8005e6e:	2201      	movs	r2, #1
 8005e70:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e72:	4b1c      	ldr	r3, [pc, #112]	@ (8005ee4 <xTaskResumeAll+0x120>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1cb      	bne.n	8005e12 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d001      	beq.n	8005e84 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005e80:	f000 fc00 	bl	8006684 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005e84:	4b1c      	ldr	r3, [pc, #112]	@ (8005ef8 <xTaskResumeAll+0x134>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d010      	beq.n	8005eb2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005e90:	f000 f86e 	bl	8005f70 <xTaskIncrementTick>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d002      	beq.n	8005ea0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005e9a:	4b16      	ldr	r3, [pc, #88]	@ (8005ef4 <xTaskResumeAll+0x130>)
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1f1      	bne.n	8005e90 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005eac:	4b12      	ldr	r3, [pc, #72]	@ (8005ef8 <xTaskResumeAll+0x134>)
 8005eae:	2200      	movs	r2, #0
 8005eb0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005eb2:	4b10      	ldr	r3, [pc, #64]	@ (8005ef4 <xTaskResumeAll+0x130>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d009      	beq.n	8005ece <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8005efc <xTaskResumeAll+0x138>)
 8005ec0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ec4:	601a      	str	r2, [r3, #0]
 8005ec6:	f3bf 8f4f 	dsb	sy
 8005eca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ece:	f001 f995 	bl	80071fc <vPortExitCritical>

	return xAlreadyYielded;
 8005ed2:	68bb      	ldr	r3, [r7, #8]
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3710      	adds	r7, #16
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	20001000 	.word	0x20001000
 8005ee0:	20000fd8 	.word	0x20000fd8
 8005ee4:	20000f98 	.word	0x20000f98
 8005ee8:	20000fe0 	.word	0x20000fe0
 8005eec:	20000b08 	.word	0x20000b08
 8005ef0:	20000b04 	.word	0x20000b04
 8005ef4:	20000fec 	.word	0x20000fec
 8005ef8:	20000fe8 	.word	0x20000fe8
 8005efc:	e000ed04 	.word	0xe000ed04

08005f00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005f06:	4b05      	ldr	r3, [pc, #20]	@ (8005f1c <xTaskGetTickCount+0x1c>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005f0c:	687b      	ldr	r3, [r7, #4]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	370c      	adds	r7, #12
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	20000fdc 	.word	0x20000fdc

08005f20 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 8005f20:	b480      	push	{r7}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 8005f28:	4b0f      	ldr	r3, [pc, #60]	@ (8005f68 <vTaskStepTick+0x48>)
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	441a      	add	r2, r3
 8005f30:	4b0e      	ldr	r3, [pc, #56]	@ (8005f6c <vTaskStepTick+0x4c>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d90b      	bls.n	8005f50 <vTaskStepTick+0x30>
	__asm volatile
 8005f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f3c:	f383 8811 	msr	BASEPRI, r3
 8005f40:	f3bf 8f6f 	isb	sy
 8005f44:	f3bf 8f4f 	dsb	sy
 8005f48:	60fb      	str	r3, [r7, #12]
}
 8005f4a:	bf00      	nop
 8005f4c:	bf00      	nop
 8005f4e:	e7fd      	b.n	8005f4c <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 8005f50:	4b05      	ldr	r3, [pc, #20]	@ (8005f68 <vTaskStepTick+0x48>)
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4413      	add	r3, r2
 8005f58:	4a03      	ldr	r2, [pc, #12]	@ (8005f68 <vTaskStepTick+0x48>)
 8005f5a:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 8005f5c:	bf00      	nop
 8005f5e:	3714      	adds	r7, #20
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr
 8005f68:	20000fdc 	.word	0x20000fdc
 8005f6c:	20000ff8 	.word	0x20000ff8

08005f70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f76:	2300      	movs	r3, #0
 8005f78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f7a:	4b4f      	ldr	r3, [pc, #316]	@ (80060b8 <xTaskIncrementTick+0x148>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	f040 8090 	bne.w	80060a4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005f84:	4b4d      	ldr	r3, [pc, #308]	@ (80060bc <xTaskIncrementTick+0x14c>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	3301      	adds	r3, #1
 8005f8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005f8c:	4a4b      	ldr	r2, [pc, #300]	@ (80060bc <xTaskIncrementTick+0x14c>)
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d121      	bne.n	8005fdc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005f98:	4b49      	ldr	r3, [pc, #292]	@ (80060c0 <xTaskIncrementTick+0x150>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00b      	beq.n	8005fba <xTaskIncrementTick+0x4a>
	__asm volatile
 8005fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa6:	f383 8811 	msr	BASEPRI, r3
 8005faa:	f3bf 8f6f 	isb	sy
 8005fae:	f3bf 8f4f 	dsb	sy
 8005fb2:	603b      	str	r3, [r7, #0]
}
 8005fb4:	bf00      	nop
 8005fb6:	bf00      	nop
 8005fb8:	e7fd      	b.n	8005fb6 <xTaskIncrementTick+0x46>
 8005fba:	4b41      	ldr	r3, [pc, #260]	@ (80060c0 <xTaskIncrementTick+0x150>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	60fb      	str	r3, [r7, #12]
 8005fc0:	4b40      	ldr	r3, [pc, #256]	@ (80060c4 <xTaskIncrementTick+0x154>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a3e      	ldr	r2, [pc, #248]	@ (80060c0 <xTaskIncrementTick+0x150>)
 8005fc6:	6013      	str	r3, [r2, #0]
 8005fc8:	4a3e      	ldr	r2, [pc, #248]	@ (80060c4 <xTaskIncrementTick+0x154>)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6013      	str	r3, [r2, #0]
 8005fce:	4b3e      	ldr	r3, [pc, #248]	@ (80060c8 <xTaskIncrementTick+0x158>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	4a3c      	ldr	r2, [pc, #240]	@ (80060c8 <xTaskIncrementTick+0x158>)
 8005fd6:	6013      	str	r3, [r2, #0]
 8005fd8:	f000 fb54 	bl	8006684 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005fdc:	4b3b      	ldr	r3, [pc, #236]	@ (80060cc <xTaskIncrementTick+0x15c>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	693a      	ldr	r2, [r7, #16]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d349      	bcc.n	800607a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fe6:	4b36      	ldr	r3, [pc, #216]	@ (80060c0 <xTaskIncrementTick+0x150>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d104      	bne.n	8005ffa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ff0:	4b36      	ldr	r3, [pc, #216]	@ (80060cc <xTaskIncrementTick+0x15c>)
 8005ff2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005ff6:	601a      	str	r2, [r3, #0]
					break;
 8005ff8:	e03f      	b.n	800607a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ffa:	4b31      	ldr	r3, [pc, #196]	@ (80060c0 <xTaskIncrementTick+0x150>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	429a      	cmp	r2, r3
 8006010:	d203      	bcs.n	800601a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006012:	4a2e      	ldr	r2, [pc, #184]	@ (80060cc <xTaskIncrementTick+0x15c>)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006018:	e02f      	b.n	800607a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	3304      	adds	r3, #4
 800601e:	4618      	mov	r0, r3
 8006020:	f7fe febe 	bl	8004da0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006028:	2b00      	cmp	r3, #0
 800602a:	d004      	beq.n	8006036 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	3318      	adds	r3, #24
 8006030:	4618      	mov	r0, r3
 8006032:	f7fe feb5 	bl	8004da0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800603a:	4b25      	ldr	r3, [pc, #148]	@ (80060d0 <xTaskIncrementTick+0x160>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	429a      	cmp	r2, r3
 8006040:	d903      	bls.n	800604a <xTaskIncrementTick+0xda>
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006046:	4a22      	ldr	r2, [pc, #136]	@ (80060d0 <xTaskIncrementTick+0x160>)
 8006048:	6013      	str	r3, [r2, #0]
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800604e:	4613      	mov	r3, r2
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4413      	add	r3, r2
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	4a1f      	ldr	r2, [pc, #124]	@ (80060d4 <xTaskIncrementTick+0x164>)
 8006058:	441a      	add	r2, r3
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	3304      	adds	r3, #4
 800605e:	4619      	mov	r1, r3
 8006060:	4610      	mov	r0, r2
 8006062:	f7fe fe40 	bl	8004ce6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800606a:	4b1b      	ldr	r3, [pc, #108]	@ (80060d8 <xTaskIncrementTick+0x168>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006070:	429a      	cmp	r2, r3
 8006072:	d3b8      	bcc.n	8005fe6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006074:	2301      	movs	r3, #1
 8006076:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006078:	e7b5      	b.n	8005fe6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800607a:	4b17      	ldr	r3, [pc, #92]	@ (80060d8 <xTaskIncrementTick+0x168>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006080:	4914      	ldr	r1, [pc, #80]	@ (80060d4 <xTaskIncrementTick+0x164>)
 8006082:	4613      	mov	r3, r2
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	4413      	add	r3, r2
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	440b      	add	r3, r1
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d901      	bls.n	8006096 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006092:	2301      	movs	r3, #1
 8006094:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006096:	4b11      	ldr	r3, [pc, #68]	@ (80060dc <xTaskIncrementTick+0x16c>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d007      	beq.n	80060ae <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800609e:	2301      	movs	r3, #1
 80060a0:	617b      	str	r3, [r7, #20]
 80060a2:	e004      	b.n	80060ae <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80060a4:	4b0e      	ldr	r3, [pc, #56]	@ (80060e0 <xTaskIncrementTick+0x170>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	3301      	adds	r3, #1
 80060aa:	4a0d      	ldr	r2, [pc, #52]	@ (80060e0 <xTaskIncrementTick+0x170>)
 80060ac:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80060ae:	697b      	ldr	r3, [r7, #20]
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3718      	adds	r7, #24
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	20001000 	.word	0x20001000
 80060bc:	20000fdc 	.word	0x20000fdc
 80060c0:	20000f90 	.word	0x20000f90
 80060c4:	20000f94 	.word	0x20000f94
 80060c8:	20000ff0 	.word	0x20000ff0
 80060cc:	20000ff8 	.word	0x20000ff8
 80060d0:	20000fe0 	.word	0x20000fe0
 80060d4:	20000b08 	.word	0x20000b08
 80060d8:	20000b04 	.word	0x20000b04
 80060dc:	20000fec 	.word	0x20000fec
 80060e0:	20000fe8 	.word	0x20000fe8

080060e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80060ea:	4b36      	ldr	r3, [pc, #216]	@ (80061c4 <vTaskSwitchContext+0xe0>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d003      	beq.n	80060fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80060f2:	4b35      	ldr	r3, [pc, #212]	@ (80061c8 <vTaskSwitchContext+0xe4>)
 80060f4:	2201      	movs	r2, #1
 80060f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80060f8:	e060      	b.n	80061bc <vTaskSwitchContext+0xd8>
		xYieldPending = pdFALSE;
 80060fa:	4b33      	ldr	r3, [pc, #204]	@ (80061c8 <vTaskSwitchContext+0xe4>)
 80060fc:	2200      	movs	r2, #0
 80060fe:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8006100:	f7fa fb20 	bl	8000744 <getRunTimeCounterValue>
 8006104:	4603      	mov	r3, r0
 8006106:	4a31      	ldr	r2, [pc, #196]	@ (80061cc <vTaskSwitchContext+0xe8>)
 8006108:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800610a:	4b30      	ldr	r3, [pc, #192]	@ (80061cc <vTaskSwitchContext+0xe8>)
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	4b30      	ldr	r3, [pc, #192]	@ (80061d0 <vTaskSwitchContext+0xec>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	429a      	cmp	r2, r3
 8006114:	d909      	bls.n	800612a <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8006116:	4b2f      	ldr	r3, [pc, #188]	@ (80061d4 <vTaskSwitchContext+0xf0>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800611c:	4a2b      	ldr	r2, [pc, #172]	@ (80061cc <vTaskSwitchContext+0xe8>)
 800611e:	6810      	ldr	r0, [r2, #0]
 8006120:	4a2b      	ldr	r2, [pc, #172]	@ (80061d0 <vTaskSwitchContext+0xec>)
 8006122:	6812      	ldr	r2, [r2, #0]
 8006124:	1a82      	subs	r2, r0, r2
 8006126:	440a      	add	r2, r1
 8006128:	659a      	str	r2, [r3, #88]	@ 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800612a:	4b28      	ldr	r3, [pc, #160]	@ (80061cc <vTaskSwitchContext+0xe8>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a28      	ldr	r2, [pc, #160]	@ (80061d0 <vTaskSwitchContext+0xec>)
 8006130:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006132:	4b29      	ldr	r3, [pc, #164]	@ (80061d8 <vTaskSwitchContext+0xf4>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	60fb      	str	r3, [r7, #12]
 8006138:	e011      	b.n	800615e <vTaskSwitchContext+0x7a>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d10b      	bne.n	8006158 <vTaskSwitchContext+0x74>
	__asm volatile
 8006140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006144:	f383 8811 	msr	BASEPRI, r3
 8006148:	f3bf 8f6f 	isb	sy
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	607b      	str	r3, [r7, #4]
}
 8006152:	bf00      	nop
 8006154:	bf00      	nop
 8006156:	e7fd      	b.n	8006154 <vTaskSwitchContext+0x70>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	3b01      	subs	r3, #1
 800615c:	60fb      	str	r3, [r7, #12]
 800615e:	491f      	ldr	r1, [pc, #124]	@ (80061dc <vTaskSwitchContext+0xf8>)
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	4613      	mov	r3, r2
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	4413      	add	r3, r2
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	440b      	add	r3, r1
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d0e3      	beq.n	800613a <vTaskSwitchContext+0x56>
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	4613      	mov	r3, r2
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	4413      	add	r3, r2
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4a17      	ldr	r2, [pc, #92]	@ (80061dc <vTaskSwitchContext+0xf8>)
 800617e:	4413      	add	r3, r2
 8006180:	60bb      	str	r3, [r7, #8]
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	685a      	ldr	r2, [r3, #4]
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	605a      	str	r2, [r3, #4]
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	685a      	ldr	r2, [r3, #4]
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	3308      	adds	r3, #8
 8006194:	429a      	cmp	r2, r3
 8006196:	d104      	bne.n	80061a2 <vTaskSwitchContext+0xbe>
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	685a      	ldr	r2, [r3, #4]
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	605a      	str	r2, [r3, #4]
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	4a0a      	ldr	r2, [pc, #40]	@ (80061d4 <vTaskSwitchContext+0xf0>)
 80061aa:	6013      	str	r3, [r2, #0]
 80061ac:	4a0a      	ldr	r2, [pc, #40]	@ (80061d8 <vTaskSwitchContext+0xf4>)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80061b2:	4b08      	ldr	r3, [pc, #32]	@ (80061d4 <vTaskSwitchContext+0xf0>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	335c      	adds	r3, #92	@ 0x5c
 80061b8:	4a09      	ldr	r2, [pc, #36]	@ (80061e0 <vTaskSwitchContext+0xfc>)
 80061ba:	6013      	str	r3, [r2, #0]
}
 80061bc:	bf00      	nop
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	20001000 	.word	0x20001000
 80061c8:	20000fec 	.word	0x20000fec
 80061cc:	20001008 	.word	0x20001008
 80061d0:	20001004 	.word	0x20001004
 80061d4:	20000b04 	.word	0x20000b04
 80061d8:	20000fe0 	.word	0x20000fe0
 80061dc:	20000b08 	.word	0x20000b08
 80061e0:	20000010 	.word	0x20000010

080061e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10b      	bne.n	800620c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80061f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f8:	f383 8811 	msr	BASEPRI, r3
 80061fc:	f3bf 8f6f 	isb	sy
 8006200:	f3bf 8f4f 	dsb	sy
 8006204:	60fb      	str	r3, [r7, #12]
}
 8006206:	bf00      	nop
 8006208:	bf00      	nop
 800620a:	e7fd      	b.n	8006208 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800620c:	4b07      	ldr	r3, [pc, #28]	@ (800622c <vTaskPlaceOnEventList+0x48>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	3318      	adds	r3, #24
 8006212:	4619      	mov	r1, r3
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f7fe fd8a 	bl	8004d2e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800621a:	2101      	movs	r1, #1
 800621c:	6838      	ldr	r0, [r7, #0]
 800621e:	f000 fadf 	bl	80067e0 <prvAddCurrentTaskToDelayedList>
}
 8006222:	bf00      	nop
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	20000b04 	.word	0x20000b04

08006230 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006230:	b580      	push	{r7, lr}
 8006232:	b086      	sub	sp, #24
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d10b      	bne.n	800625a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006246:	f383 8811 	msr	BASEPRI, r3
 800624a:	f3bf 8f6f 	isb	sy
 800624e:	f3bf 8f4f 	dsb	sy
 8006252:	617b      	str	r3, [r7, #20]
}
 8006254:	bf00      	nop
 8006256:	bf00      	nop
 8006258:	e7fd      	b.n	8006256 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800625a:	4b0a      	ldr	r3, [pc, #40]	@ (8006284 <vTaskPlaceOnEventListRestricted+0x54>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	3318      	adds	r3, #24
 8006260:	4619      	mov	r1, r3
 8006262:	68f8      	ldr	r0, [r7, #12]
 8006264:	f7fe fd3f 	bl	8004ce6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d002      	beq.n	8006274 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800626e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006272:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006274:	6879      	ldr	r1, [r7, #4]
 8006276:	68b8      	ldr	r0, [r7, #8]
 8006278:	f000 fab2 	bl	80067e0 <prvAddCurrentTaskToDelayedList>
	}
 800627c:	bf00      	nop
 800627e:	3718      	adds	r7, #24
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	20000b04 	.word	0x20000b04

08006288 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d10b      	bne.n	80062b6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800629e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062a2:	f383 8811 	msr	BASEPRI, r3
 80062a6:	f3bf 8f6f 	isb	sy
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	60fb      	str	r3, [r7, #12]
}
 80062b0:	bf00      	nop
 80062b2:	bf00      	nop
 80062b4:	e7fd      	b.n	80062b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	3318      	adds	r3, #24
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7fe fd70 	bl	8004da0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062c0:	4b1e      	ldr	r3, [pc, #120]	@ (800633c <xTaskRemoveFromEventList+0xb4>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d11f      	bne.n	8006308 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	3304      	adds	r3, #4
 80062cc:	4618      	mov	r0, r3
 80062ce:	f7fe fd67 	bl	8004da0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062d6:	4b1a      	ldr	r3, [pc, #104]	@ (8006340 <xTaskRemoveFromEventList+0xb8>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d903      	bls.n	80062e6 <xTaskRemoveFromEventList+0x5e>
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062e2:	4a17      	ldr	r2, [pc, #92]	@ (8006340 <xTaskRemoveFromEventList+0xb8>)
 80062e4:	6013      	str	r3, [r2, #0]
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062ea:	4613      	mov	r3, r2
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	4413      	add	r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	4a14      	ldr	r2, [pc, #80]	@ (8006344 <xTaskRemoveFromEventList+0xbc>)
 80062f4:	441a      	add	r2, r3
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	3304      	adds	r3, #4
 80062fa:	4619      	mov	r1, r3
 80062fc:	4610      	mov	r0, r2
 80062fe:	f7fe fcf2 	bl	8004ce6 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 8006302:	f000 f9bf 	bl	8006684 <prvResetNextTaskUnblockTime>
 8006306:	e005      	b.n	8006314 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	3318      	adds	r3, #24
 800630c:	4619      	mov	r1, r3
 800630e:	480e      	ldr	r0, [pc, #56]	@ (8006348 <xTaskRemoveFromEventList+0xc0>)
 8006310:	f7fe fce9 	bl	8004ce6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006318:	4b0c      	ldr	r3, [pc, #48]	@ (800634c <xTaskRemoveFromEventList+0xc4>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800631e:	429a      	cmp	r2, r3
 8006320:	d905      	bls.n	800632e <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006322:	2301      	movs	r3, #1
 8006324:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006326:	4b0a      	ldr	r3, [pc, #40]	@ (8006350 <xTaskRemoveFromEventList+0xc8>)
 8006328:	2201      	movs	r2, #1
 800632a:	601a      	str	r2, [r3, #0]
 800632c:	e001      	b.n	8006332 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800632e:	2300      	movs	r3, #0
 8006330:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006332:	697b      	ldr	r3, [r7, #20]
}
 8006334:	4618      	mov	r0, r3
 8006336:	3718      	adds	r7, #24
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}
 800633c:	20001000 	.word	0x20001000
 8006340:	20000fe0 	.word	0x20000fe0
 8006344:	20000b08 	.word	0x20000b08
 8006348:	20000f98 	.word	0x20000f98
 800634c:	20000b04 	.word	0x20000b04
 8006350:	20000fec 	.word	0x20000fec

08006354 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800635c:	4b06      	ldr	r3, [pc, #24]	@ (8006378 <vTaskInternalSetTimeOutState+0x24>)
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006364:	4b05      	ldr	r3, [pc, #20]	@ (800637c <vTaskInternalSetTimeOutState+0x28>)
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	605a      	str	r2, [r3, #4]
}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr
 8006378:	20000ff0 	.word	0x20000ff0
 800637c:	20000fdc 	.word	0x20000fdc

08006380 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b088      	sub	sp, #32
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d10b      	bne.n	80063a8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006394:	f383 8811 	msr	BASEPRI, r3
 8006398:	f3bf 8f6f 	isb	sy
 800639c:	f3bf 8f4f 	dsb	sy
 80063a0:	613b      	str	r3, [r7, #16]
}
 80063a2:	bf00      	nop
 80063a4:	bf00      	nop
 80063a6:	e7fd      	b.n	80063a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10b      	bne.n	80063c6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80063ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b2:	f383 8811 	msr	BASEPRI, r3
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	60fb      	str	r3, [r7, #12]
}
 80063c0:	bf00      	nop
 80063c2:	bf00      	nop
 80063c4:	e7fd      	b.n	80063c2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80063c6:	f000 fee7 	bl	8007198 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80063ca:	4b1d      	ldr	r3, [pc, #116]	@ (8006440 <xTaskCheckForTimeOut+0xc0>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	69ba      	ldr	r2, [r7, #24]
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80063e2:	d102      	bne.n	80063ea <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80063e4:	2300      	movs	r3, #0
 80063e6:	61fb      	str	r3, [r7, #28]
 80063e8:	e023      	b.n	8006432 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	4b15      	ldr	r3, [pc, #84]	@ (8006444 <xTaskCheckForTimeOut+0xc4>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d007      	beq.n	8006406 <xTaskCheckForTimeOut+0x86>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	69ba      	ldr	r2, [r7, #24]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d302      	bcc.n	8006406 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006400:	2301      	movs	r3, #1
 8006402:	61fb      	str	r3, [r7, #28]
 8006404:	e015      	b.n	8006432 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	429a      	cmp	r2, r3
 800640e:	d20b      	bcs.n	8006428 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	1ad2      	subs	r2, r2, r3
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f7ff ff99 	bl	8006354 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006422:	2300      	movs	r3, #0
 8006424:	61fb      	str	r3, [r7, #28]
 8006426:	e004      	b.n	8006432 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	2200      	movs	r2, #0
 800642c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800642e:	2301      	movs	r3, #1
 8006430:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006432:	f000 fee3 	bl	80071fc <vPortExitCritical>

	return xReturn;
 8006436:	69fb      	ldr	r3, [r7, #28]
}
 8006438:	4618      	mov	r0, r3
 800643a:	3720      	adds	r7, #32
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	20000fdc 	.word	0x20000fdc
 8006444:	20000ff0 	.word	0x20000ff0

08006448 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006448:	b480      	push	{r7}
 800644a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800644c:	4b03      	ldr	r3, [pc, #12]	@ (800645c <vTaskMissedYield+0x14>)
 800644e:	2201      	movs	r2, #1
 8006450:	601a      	str	r2, [r3, #0]
}
 8006452:	bf00      	nop
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr
 800645c:	20000fec 	.word	0x20000fec

08006460 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006468:	f000 f8a8 	bl	80065bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800646c:	4b18      	ldr	r3, [pc, #96]	@ (80064d0 <prvIdleTask+0x70>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2b01      	cmp	r3, #1
 8006472:	d907      	bls.n	8006484 <prvIdleTask+0x24>
			{
				taskYIELD();
 8006474:	4b17      	ldr	r3, [pc, #92]	@ (80064d4 <prvIdleTask+0x74>)
 8006476:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800647a:	601a      	str	r2, [r3, #0]
 800647c:	f3bf 8f4f 	dsb	sy
 8006480:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8006484:	f7ff fc66 	bl	8005d54 <prvGetExpectedIdleTime>
 8006488:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d9eb      	bls.n	8006468 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8006490:	f7ff fc52 	bl	8005d38 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8006494:	4b10      	ldr	r3, [pc, #64]	@ (80064d8 <prvIdleTask+0x78>)
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	4b10      	ldr	r3, [pc, #64]	@ (80064dc <prvIdleTask+0x7c>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	429a      	cmp	r2, r3
 800649e:	d20b      	bcs.n	80064b8 <prvIdleTask+0x58>
	__asm volatile
 80064a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064a4:	f383 8811 	msr	BASEPRI, r3
 80064a8:	f3bf 8f6f 	isb	sy
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	60bb      	str	r3, [r7, #8]
}
 80064b2:	bf00      	nop
 80064b4:	bf00      	nop
 80064b6:	e7fd      	b.n	80064b4 <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 80064b8:	f7ff fc4c 	bl	8005d54 <prvGetExpectedIdleTime>
 80064bc:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d902      	bls.n	80064ca <prvIdleTask+0x6a>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f000 ff19 	bl	80072fc <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 80064ca:	f7ff fc7b 	bl	8005dc4 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 80064ce:	e7cb      	b.n	8006468 <prvIdleTask+0x8>
 80064d0:	20000b08 	.word	0x20000b08
 80064d4:	e000ed04 	.word	0xe000ed04
 80064d8:	20000ff8 	.word	0x20000ff8
 80064dc:	20000fdc 	.word	0x20000fdc

080064e0 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 80064e6:	2301      	movs	r3, #1
 80064e8:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 80064ea:	2301      	movs	r3, #1
 80064ec:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 80064ee:	4b0f      	ldr	r3, [pc, #60]	@ (800652c <eTaskConfirmSleepModeStatus+0x4c>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d002      	beq.n	80064fc <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 80064f6:	2300      	movs	r3, #0
 80064f8:	71fb      	strb	r3, [r7, #7]
 80064fa:	e010      	b.n	800651e <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 80064fc:	4b0c      	ldr	r3, [pc, #48]	@ (8006530 <eTaskConfirmSleepModeStatus+0x50>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d002      	beq.n	800650a <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8006504:	2300      	movs	r3, #0
 8006506:	71fb      	strb	r3, [r7, #7]
 8006508:	e009      	b.n	800651e <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800650a:	4b0a      	ldr	r3, [pc, #40]	@ (8006534 <eTaskConfirmSleepModeStatus+0x54>)
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	4b0a      	ldr	r3, [pc, #40]	@ (8006538 <eTaskConfirmSleepModeStatus+0x58>)
 8006510:	6819      	ldr	r1, [r3, #0]
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	1acb      	subs	r3, r1, r3
 8006516:	429a      	cmp	r2, r3
 8006518:	d101      	bne.n	800651e <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 800651a:	2302      	movs	r3, #2
 800651c:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 800651e:	79fb      	ldrb	r3, [r7, #7]
	}
 8006520:	4618      	mov	r0, r3
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr
 800652c:	20000f98 	.word	0x20000f98
 8006530:	20000fec 	.word	0x20000fec
 8006534:	20000fc4 	.word	0x20000fc4
 8006538:	20000fd8 	.word	0x20000fd8

0800653c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006542:	2300      	movs	r3, #0
 8006544:	607b      	str	r3, [r7, #4]
 8006546:	e00c      	b.n	8006562 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	4613      	mov	r3, r2
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	4413      	add	r3, r2
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	4a12      	ldr	r2, [pc, #72]	@ (800659c <prvInitialiseTaskLists+0x60>)
 8006554:	4413      	add	r3, r2
 8006556:	4618      	mov	r0, r3
 8006558:	f7fe fb98 	bl	8004c8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	3301      	adds	r3, #1
 8006560:	607b      	str	r3, [r7, #4]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2b37      	cmp	r3, #55	@ 0x37
 8006566:	d9ef      	bls.n	8006548 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006568:	480d      	ldr	r0, [pc, #52]	@ (80065a0 <prvInitialiseTaskLists+0x64>)
 800656a:	f7fe fb8f 	bl	8004c8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800656e:	480d      	ldr	r0, [pc, #52]	@ (80065a4 <prvInitialiseTaskLists+0x68>)
 8006570:	f7fe fb8c 	bl	8004c8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006574:	480c      	ldr	r0, [pc, #48]	@ (80065a8 <prvInitialiseTaskLists+0x6c>)
 8006576:	f7fe fb89 	bl	8004c8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800657a:	480c      	ldr	r0, [pc, #48]	@ (80065ac <prvInitialiseTaskLists+0x70>)
 800657c:	f7fe fb86 	bl	8004c8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006580:	480b      	ldr	r0, [pc, #44]	@ (80065b0 <prvInitialiseTaskLists+0x74>)
 8006582:	f7fe fb83 	bl	8004c8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006586:	4b0b      	ldr	r3, [pc, #44]	@ (80065b4 <prvInitialiseTaskLists+0x78>)
 8006588:	4a05      	ldr	r2, [pc, #20]	@ (80065a0 <prvInitialiseTaskLists+0x64>)
 800658a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800658c:	4b0a      	ldr	r3, [pc, #40]	@ (80065b8 <prvInitialiseTaskLists+0x7c>)
 800658e:	4a05      	ldr	r2, [pc, #20]	@ (80065a4 <prvInitialiseTaskLists+0x68>)
 8006590:	601a      	str	r2, [r3, #0]
}
 8006592:	bf00      	nop
 8006594:	3708      	adds	r7, #8
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	20000b08 	.word	0x20000b08
 80065a0:	20000f68 	.word	0x20000f68
 80065a4:	20000f7c 	.word	0x20000f7c
 80065a8:	20000f98 	.word	0x20000f98
 80065ac:	20000fac 	.word	0x20000fac
 80065b0:	20000fc4 	.word	0x20000fc4
 80065b4:	20000f90 	.word	0x20000f90
 80065b8:	20000f94 	.word	0x20000f94

080065bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065c2:	e019      	b.n	80065f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80065c4:	f000 fde8 	bl	8007198 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065c8:	4b10      	ldr	r3, [pc, #64]	@ (800660c <prvCheckTasksWaitingTermination+0x50>)
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	3304      	adds	r3, #4
 80065d4:	4618      	mov	r0, r3
 80065d6:	f7fe fbe3 	bl	8004da0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80065da:	4b0d      	ldr	r3, [pc, #52]	@ (8006610 <prvCheckTasksWaitingTermination+0x54>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	3b01      	subs	r3, #1
 80065e0:	4a0b      	ldr	r2, [pc, #44]	@ (8006610 <prvCheckTasksWaitingTermination+0x54>)
 80065e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80065e4:	4b0b      	ldr	r3, [pc, #44]	@ (8006614 <prvCheckTasksWaitingTermination+0x58>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	3b01      	subs	r3, #1
 80065ea:	4a0a      	ldr	r2, [pc, #40]	@ (8006614 <prvCheckTasksWaitingTermination+0x58>)
 80065ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80065ee:	f000 fe05 	bl	80071fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 f810 	bl	8006618 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065f8:	4b06      	ldr	r3, [pc, #24]	@ (8006614 <prvCheckTasksWaitingTermination+0x58>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1e1      	bne.n	80065c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006600:	bf00      	nop
 8006602:	bf00      	nop
 8006604:	3708      	adds	r7, #8
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	20000fac 	.word	0x20000fac
 8006610:	20000fd8 	.word	0x20000fd8
 8006614:	20000fc0 	.word	0x20000fc0

08006618 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	335c      	adds	r3, #92	@ 0x5c
 8006624:	4618      	mov	r0, r3
 8006626:	f001 f9b3 	bl	8007990 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8006630:	2b00      	cmp	r3, #0
 8006632:	d108      	bne.n	8006646 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006638:	4618      	mov	r0, r3
 800663a:	f001 f881 	bl	8007740 <vPortFree>
				vPortFree( pxTCB );
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f001 f87e 	bl	8007740 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006644:	e019      	b.n	800667a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800664c:	2b01      	cmp	r3, #1
 800664e:	d103      	bne.n	8006658 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f001 f875 	bl	8007740 <vPortFree>
	}
 8006656:	e010      	b.n	800667a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800665e:	2b02      	cmp	r3, #2
 8006660:	d00b      	beq.n	800667a <prvDeleteTCB+0x62>
	__asm volatile
 8006662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006666:	f383 8811 	msr	BASEPRI, r3
 800666a:	f3bf 8f6f 	isb	sy
 800666e:	f3bf 8f4f 	dsb	sy
 8006672:	60fb      	str	r3, [r7, #12]
}
 8006674:	bf00      	nop
 8006676:	bf00      	nop
 8006678:	e7fd      	b.n	8006676 <prvDeleteTCB+0x5e>
	}
 800667a:	bf00      	nop
 800667c:	3710      	adds	r7, #16
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
	...

08006684 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800668a:	4b0c      	ldr	r3, [pc, #48]	@ (80066bc <prvResetNextTaskUnblockTime+0x38>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d104      	bne.n	800669e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006694:	4b0a      	ldr	r3, [pc, #40]	@ (80066c0 <prvResetNextTaskUnblockTime+0x3c>)
 8006696:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800669a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800669c:	e008      	b.n	80066b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800669e:	4b07      	ldr	r3, [pc, #28]	@ (80066bc <prvResetNextTaskUnblockTime+0x38>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	4a04      	ldr	r2, [pc, #16]	@ (80066c0 <prvResetNextTaskUnblockTime+0x3c>)
 80066ae:	6013      	str	r3, [r2, #0]
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr
 80066bc:	20000f90 	.word	0x20000f90
 80066c0:	20000ff8 	.word	0x20000ff8

080066c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80066ca:	4b0b      	ldr	r3, [pc, #44]	@ (80066f8 <xTaskGetSchedulerState+0x34>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d102      	bne.n	80066d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80066d2:	2301      	movs	r3, #1
 80066d4:	607b      	str	r3, [r7, #4]
 80066d6:	e008      	b.n	80066ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066d8:	4b08      	ldr	r3, [pc, #32]	@ (80066fc <xTaskGetSchedulerState+0x38>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d102      	bne.n	80066e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80066e0:	2302      	movs	r3, #2
 80066e2:	607b      	str	r3, [r7, #4]
 80066e4:	e001      	b.n	80066ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80066e6:	2300      	movs	r3, #0
 80066e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80066ea:	687b      	ldr	r3, [r7, #4]
	}
 80066ec:	4618      	mov	r0, r3
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr
 80066f8:	20000fe4 	.word	0x20000fe4
 80066fc:	20001000 	.word	0x20001000

08006700 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006700:	b580      	push	{r7, lr}
 8006702:	b086      	sub	sp, #24
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800670c:	2300      	movs	r3, #0
 800670e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d058      	beq.n	80067c8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006716:	4b2f      	ldr	r3, [pc, #188]	@ (80067d4 <xTaskPriorityDisinherit+0xd4>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	693a      	ldr	r2, [r7, #16]
 800671c:	429a      	cmp	r2, r3
 800671e:	d00b      	beq.n	8006738 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006724:	f383 8811 	msr	BASEPRI, r3
 8006728:	f3bf 8f6f 	isb	sy
 800672c:	f3bf 8f4f 	dsb	sy
 8006730:	60fb      	str	r3, [r7, #12]
}
 8006732:	bf00      	nop
 8006734:	bf00      	nop
 8006736:	e7fd      	b.n	8006734 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800673c:	2b00      	cmp	r3, #0
 800673e:	d10b      	bne.n	8006758 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006744:	f383 8811 	msr	BASEPRI, r3
 8006748:	f3bf 8f6f 	isb	sy
 800674c:	f3bf 8f4f 	dsb	sy
 8006750:	60bb      	str	r3, [r7, #8]
}
 8006752:	bf00      	nop
 8006754:	bf00      	nop
 8006756:	e7fd      	b.n	8006754 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800675c:	1e5a      	subs	r2, r3, #1
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	655a      	str	r2, [r3, #84]	@ 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800676a:	429a      	cmp	r2, r3
 800676c:	d02c      	beq.n	80067c8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006772:	2b00      	cmp	r3, #0
 8006774:	d128      	bne.n	80067c8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	3304      	adds	r3, #4
 800677a:	4618      	mov	r0, r3
 800677c:	f7fe fb10 	bl	8004da0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800678c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006798:	4b0f      	ldr	r3, [pc, #60]	@ (80067d8 <xTaskPriorityDisinherit+0xd8>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	429a      	cmp	r2, r3
 800679e:	d903      	bls.n	80067a8 <xTaskPriorityDisinherit+0xa8>
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067a4:	4a0c      	ldr	r2, [pc, #48]	@ (80067d8 <xTaskPriorityDisinherit+0xd8>)
 80067a6:	6013      	str	r3, [r2, #0]
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067ac:	4613      	mov	r3, r2
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	4413      	add	r3, r2
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	4a09      	ldr	r2, [pc, #36]	@ (80067dc <xTaskPriorityDisinherit+0xdc>)
 80067b6:	441a      	add	r2, r3
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	3304      	adds	r3, #4
 80067bc:	4619      	mov	r1, r3
 80067be:	4610      	mov	r0, r2
 80067c0:	f7fe fa91 	bl	8004ce6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80067c4:	2301      	movs	r3, #1
 80067c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80067c8:	697b      	ldr	r3, [r7, #20]
	}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3718      	adds	r7, #24
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	20000b04 	.word	0x20000b04
 80067d8:	20000fe0 	.word	0x20000fe0
 80067dc:	20000b08 	.word	0x20000b08

080067e0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80067ea:	4b21      	ldr	r3, [pc, #132]	@ (8006870 <prvAddCurrentTaskToDelayedList+0x90>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067f0:	4b20      	ldr	r3, [pc, #128]	@ (8006874 <prvAddCurrentTaskToDelayedList+0x94>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	3304      	adds	r3, #4
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7fe fad2 	bl	8004da0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006802:	d10a      	bne.n	800681a <prvAddCurrentTaskToDelayedList+0x3a>
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d007      	beq.n	800681a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800680a:	4b1a      	ldr	r3, [pc, #104]	@ (8006874 <prvAddCurrentTaskToDelayedList+0x94>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	3304      	adds	r3, #4
 8006810:	4619      	mov	r1, r3
 8006812:	4819      	ldr	r0, [pc, #100]	@ (8006878 <prvAddCurrentTaskToDelayedList+0x98>)
 8006814:	f7fe fa67 	bl	8004ce6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006818:	e026      	b.n	8006868 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4413      	add	r3, r2
 8006820:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006822:	4b14      	ldr	r3, [pc, #80]	@ (8006874 <prvAddCurrentTaskToDelayedList+0x94>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800682a:	68ba      	ldr	r2, [r7, #8]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	429a      	cmp	r2, r3
 8006830:	d209      	bcs.n	8006846 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006832:	4b12      	ldr	r3, [pc, #72]	@ (800687c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	4b0f      	ldr	r3, [pc, #60]	@ (8006874 <prvAddCurrentTaskToDelayedList+0x94>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	3304      	adds	r3, #4
 800683c:	4619      	mov	r1, r3
 800683e:	4610      	mov	r0, r2
 8006840:	f7fe fa75 	bl	8004d2e <vListInsert>
}
 8006844:	e010      	b.n	8006868 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006846:	4b0e      	ldr	r3, [pc, #56]	@ (8006880 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	4b0a      	ldr	r3, [pc, #40]	@ (8006874 <prvAddCurrentTaskToDelayedList+0x94>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	3304      	adds	r3, #4
 8006850:	4619      	mov	r1, r3
 8006852:	4610      	mov	r0, r2
 8006854:	f7fe fa6b 	bl	8004d2e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006858:	4b0a      	ldr	r3, [pc, #40]	@ (8006884 <prvAddCurrentTaskToDelayedList+0xa4>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	429a      	cmp	r2, r3
 8006860:	d202      	bcs.n	8006868 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006862:	4a08      	ldr	r2, [pc, #32]	@ (8006884 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	6013      	str	r3, [r2, #0]
}
 8006868:	bf00      	nop
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	20000fdc 	.word	0x20000fdc
 8006874:	20000b04 	.word	0x20000b04
 8006878:	20000fc4 	.word	0x20000fc4
 800687c:	20000f94 	.word	0x20000f94
 8006880:	20000f90 	.word	0x20000f90
 8006884:	20000ff8 	.word	0x20000ff8

08006888 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b08a      	sub	sp, #40	@ 0x28
 800688c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800688e:	2300      	movs	r3, #0
 8006890:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006892:	f000 fb13 	bl	8006ebc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006896:	4b1d      	ldr	r3, [pc, #116]	@ (800690c <xTimerCreateTimerTask+0x84>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d021      	beq.n	80068e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800689e:	2300      	movs	r3, #0
 80068a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80068a2:	2300      	movs	r3, #0
 80068a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80068a6:	1d3a      	adds	r2, r7, #4
 80068a8:	f107 0108 	add.w	r1, r7, #8
 80068ac:	f107 030c 	add.w	r3, r7, #12
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7fe f9d1 	bl	8004c58 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80068b6:	6879      	ldr	r1, [r7, #4]
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	9202      	str	r2, [sp, #8]
 80068be:	9301      	str	r3, [sp, #4]
 80068c0:	2302      	movs	r3, #2
 80068c2:	9300      	str	r3, [sp, #0]
 80068c4:	2300      	movs	r3, #0
 80068c6:	460a      	mov	r2, r1
 80068c8:	4911      	ldr	r1, [pc, #68]	@ (8006910 <xTimerCreateTimerTask+0x88>)
 80068ca:	4812      	ldr	r0, [pc, #72]	@ (8006914 <xTimerCreateTimerTask+0x8c>)
 80068cc:	f7fe ffc8 	bl	8005860 <xTaskCreateStatic>
 80068d0:	4603      	mov	r3, r0
 80068d2:	4a11      	ldr	r2, [pc, #68]	@ (8006918 <xTimerCreateTimerTask+0x90>)
 80068d4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80068d6:	4b10      	ldr	r3, [pc, #64]	@ (8006918 <xTimerCreateTimerTask+0x90>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d001      	beq.n	80068e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80068de:	2301      	movs	r3, #1
 80068e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10b      	bne.n	8006900 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80068e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ec:	f383 8811 	msr	BASEPRI, r3
 80068f0:	f3bf 8f6f 	isb	sy
 80068f4:	f3bf 8f4f 	dsb	sy
 80068f8:	613b      	str	r3, [r7, #16]
}
 80068fa:	bf00      	nop
 80068fc:	bf00      	nop
 80068fe:	e7fd      	b.n	80068fc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006900:	697b      	ldr	r3, [r7, #20]
}
 8006902:	4618      	mov	r0, r3
 8006904:	3718      	adds	r7, #24
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	2000103c 	.word	0x2000103c
 8006910:	08007c18 	.word	0x08007c18
 8006914:	08006a55 	.word	0x08006a55
 8006918:	20001040 	.word	0x20001040

0800691c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b08a      	sub	sp, #40	@ 0x28
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	607a      	str	r2, [r7, #4]
 8006928:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800692a:	2300      	movs	r3, #0
 800692c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d10b      	bne.n	800694c <xTimerGenericCommand+0x30>
	__asm volatile
 8006934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006938:	f383 8811 	msr	BASEPRI, r3
 800693c:	f3bf 8f6f 	isb	sy
 8006940:	f3bf 8f4f 	dsb	sy
 8006944:	623b      	str	r3, [r7, #32]
}
 8006946:	bf00      	nop
 8006948:	bf00      	nop
 800694a:	e7fd      	b.n	8006948 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800694c:	4b19      	ldr	r3, [pc, #100]	@ (80069b4 <xTimerGenericCommand+0x98>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d02a      	beq.n	80069aa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	2b05      	cmp	r3, #5
 8006964:	dc18      	bgt.n	8006998 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006966:	f7ff fead 	bl	80066c4 <xTaskGetSchedulerState>
 800696a:	4603      	mov	r3, r0
 800696c:	2b02      	cmp	r3, #2
 800696e:	d109      	bne.n	8006984 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006970:	4b10      	ldr	r3, [pc, #64]	@ (80069b4 <xTimerGenericCommand+0x98>)
 8006972:	6818      	ldr	r0, [r3, #0]
 8006974:	f107 0110 	add.w	r1, r7, #16
 8006978:	2300      	movs	r3, #0
 800697a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800697c:	f7fe fb80 	bl	8005080 <xQueueGenericSend>
 8006980:	6278      	str	r0, [r7, #36]	@ 0x24
 8006982:	e012      	b.n	80069aa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006984:	4b0b      	ldr	r3, [pc, #44]	@ (80069b4 <xTimerGenericCommand+0x98>)
 8006986:	6818      	ldr	r0, [r3, #0]
 8006988:	f107 0110 	add.w	r1, r7, #16
 800698c:	2300      	movs	r3, #0
 800698e:	2200      	movs	r2, #0
 8006990:	f7fe fb76 	bl	8005080 <xQueueGenericSend>
 8006994:	6278      	str	r0, [r7, #36]	@ 0x24
 8006996:	e008      	b.n	80069aa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006998:	4b06      	ldr	r3, [pc, #24]	@ (80069b4 <xTimerGenericCommand+0x98>)
 800699a:	6818      	ldr	r0, [r3, #0]
 800699c:	f107 0110 	add.w	r1, r7, #16
 80069a0:	2300      	movs	r3, #0
 80069a2:	683a      	ldr	r2, [r7, #0]
 80069a4:	f7fe fc6e 	bl	8005284 <xQueueGenericSendFromISR>
 80069a8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80069aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3728      	adds	r7, #40	@ 0x28
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	2000103c 	.word	0x2000103c

080069b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b088      	sub	sp, #32
 80069bc:	af02      	add	r7, sp, #8
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069c2:	4b23      	ldr	r3, [pc, #140]	@ (8006a50 <prvProcessExpiredTimer+0x98>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	3304      	adds	r3, #4
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7fe f9e5 	bl	8004da0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80069dc:	f003 0304 	and.w	r3, r3, #4
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d023      	beq.n	8006a2c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	699a      	ldr	r2, [r3, #24]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	18d1      	adds	r1, r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	6978      	ldr	r0, [r7, #20]
 80069f2:	f000 f8d5 	bl	8006ba0 <prvInsertTimerInActiveList>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d020      	beq.n	8006a3e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80069fc:	2300      	movs	r3, #0
 80069fe:	9300      	str	r3, [sp, #0]
 8006a00:	2300      	movs	r3, #0
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	2100      	movs	r1, #0
 8006a06:	6978      	ldr	r0, [r7, #20]
 8006a08:	f7ff ff88 	bl	800691c <xTimerGenericCommand>
 8006a0c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d114      	bne.n	8006a3e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a18:	f383 8811 	msr	BASEPRI, r3
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	60fb      	str	r3, [r7, #12]
}
 8006a26:	bf00      	nop
 8006a28:	bf00      	nop
 8006a2a:	e7fd      	b.n	8006a28 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a32:	f023 0301 	bic.w	r3, r3, #1
 8006a36:	b2da      	uxtb	r2, r3
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	6a1b      	ldr	r3, [r3, #32]
 8006a42:	6978      	ldr	r0, [r7, #20]
 8006a44:	4798      	blx	r3
}
 8006a46:	bf00      	nop
 8006a48:	3718      	adds	r7, #24
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	20001034 	.word	0x20001034

08006a54 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a5c:	f107 0308 	add.w	r3, r7, #8
 8006a60:	4618      	mov	r0, r3
 8006a62:	f000 f859 	bl	8006b18 <prvGetNextExpireTime>
 8006a66:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f000 f805 	bl	8006a7c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006a72:	f000 f8d7 	bl	8006c24 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a76:	bf00      	nop
 8006a78:	e7f0      	b.n	8006a5c <prvTimerTask+0x8>
	...

08006a7c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006a86:	f7ff f957 	bl	8005d38 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a8a:	f107 0308 	add.w	r3, r7, #8
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f000 f866 	bl	8006b60 <prvSampleTimeNow>
 8006a94:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d130      	bne.n	8006afe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d10a      	bne.n	8006ab8 <prvProcessTimerOrBlockTask+0x3c>
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d806      	bhi.n	8006ab8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006aaa:	f7ff f98b 	bl	8005dc4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006aae:	68f9      	ldr	r1, [r7, #12]
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f7ff ff81 	bl	80069b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006ab6:	e024      	b.n	8006b02 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d008      	beq.n	8006ad0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006abe:	4b13      	ldr	r3, [pc, #76]	@ (8006b0c <prvProcessTimerOrBlockTask+0x90>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d101      	bne.n	8006acc <prvProcessTimerOrBlockTask+0x50>
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e000      	b.n	8006ace <prvProcessTimerOrBlockTask+0x52>
 8006acc:	2300      	movs	r3, #0
 8006ace:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8006b10 <prvProcessTimerOrBlockTask+0x94>)
 8006ad2:	6818      	ldr	r0, [r3, #0]
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	683a      	ldr	r2, [r7, #0]
 8006adc:	4619      	mov	r1, r3
 8006ade:	f7fe fe8b 	bl	80057f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006ae2:	f7ff f96f 	bl	8005dc4 <xTaskResumeAll>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d10a      	bne.n	8006b02 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006aec:	4b09      	ldr	r3, [pc, #36]	@ (8006b14 <prvProcessTimerOrBlockTask+0x98>)
 8006aee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006af2:	601a      	str	r2, [r3, #0]
 8006af4:	f3bf 8f4f 	dsb	sy
 8006af8:	f3bf 8f6f 	isb	sy
}
 8006afc:	e001      	b.n	8006b02 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006afe:	f7ff f961 	bl	8005dc4 <xTaskResumeAll>
}
 8006b02:	bf00      	nop
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	20001038 	.word	0x20001038
 8006b10:	2000103c 	.word	0x2000103c
 8006b14:	e000ed04 	.word	0xe000ed04

08006b18 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006b20:	4b0e      	ldr	r3, [pc, #56]	@ (8006b5c <prvGetNextExpireTime+0x44>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d101      	bne.n	8006b2e <prvGetNextExpireTime+0x16>
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	e000      	b.n	8006b30 <prvGetNextExpireTime+0x18>
 8006b2e:	2200      	movs	r2, #0
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d105      	bne.n	8006b48 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b3c:	4b07      	ldr	r3, [pc, #28]	@ (8006b5c <prvGetNextExpireTime+0x44>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	60fb      	str	r3, [r7, #12]
 8006b46:	e001      	b.n	8006b4c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3714      	adds	r7, #20
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	20001034 	.word	0x20001034

08006b60 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006b68:	f7ff f9ca 	bl	8005f00 <xTaskGetTickCount>
 8006b6c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8006b9c <prvSampleTimeNow+0x3c>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d205      	bcs.n	8006b84 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006b78:	f000 f93a 	bl	8006df0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	601a      	str	r2, [r3, #0]
 8006b82:	e002      	b.n	8006b8a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006b8a:	4a04      	ldr	r2, [pc, #16]	@ (8006b9c <prvSampleTimeNow+0x3c>)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006b90:	68fb      	ldr	r3, [r7, #12]
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	20001044 	.word	0x20001044

08006ba0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	607a      	str	r2, [r7, #4]
 8006bac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006bbe:	68ba      	ldr	r2, [r7, #8]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d812      	bhi.n	8006bec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	1ad2      	subs	r2, r2, r3
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	699b      	ldr	r3, [r3, #24]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d302      	bcc.n	8006bda <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	617b      	str	r3, [r7, #20]
 8006bd8:	e01b      	b.n	8006c12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006bda:	4b10      	ldr	r3, [pc, #64]	@ (8006c1c <prvInsertTimerInActiveList+0x7c>)
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	3304      	adds	r3, #4
 8006be2:	4619      	mov	r1, r3
 8006be4:	4610      	mov	r0, r2
 8006be6:	f7fe f8a2 	bl	8004d2e <vListInsert>
 8006bea:	e012      	b.n	8006c12 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d206      	bcs.n	8006c02 <prvInsertTimerInActiveList+0x62>
 8006bf4:	68ba      	ldr	r2, [r7, #8]
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d302      	bcc.n	8006c02 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	617b      	str	r3, [r7, #20]
 8006c00:	e007      	b.n	8006c12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c02:	4b07      	ldr	r3, [pc, #28]	@ (8006c20 <prvInsertTimerInActiveList+0x80>)
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	3304      	adds	r3, #4
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	4610      	mov	r0, r2
 8006c0e:	f7fe f88e 	bl	8004d2e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006c12:	697b      	ldr	r3, [r7, #20]
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3718      	adds	r7, #24
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	20001038 	.word	0x20001038
 8006c20:	20001034 	.word	0x20001034

08006c24 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b08e      	sub	sp, #56	@ 0x38
 8006c28:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c2a:	e0ce      	b.n	8006dca <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	da19      	bge.n	8006c66 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006c32:	1d3b      	adds	r3, r7, #4
 8006c34:	3304      	adds	r3, #4
 8006c36:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d10b      	bne.n	8006c56 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c42:	f383 8811 	msr	BASEPRI, r3
 8006c46:	f3bf 8f6f 	isb	sy
 8006c4a:	f3bf 8f4f 	dsb	sy
 8006c4e:	61fb      	str	r3, [r7, #28]
}
 8006c50:	bf00      	nop
 8006c52:	bf00      	nop
 8006c54:	e7fd      	b.n	8006c52 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c5c:	6850      	ldr	r0, [r2, #4]
 8006c5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c60:	6892      	ldr	r2, [r2, #8]
 8006c62:	4611      	mov	r1, r2
 8006c64:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f2c0 80ae 	blt.w	8006dca <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c74:	695b      	ldr	r3, [r3, #20]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d004      	beq.n	8006c84 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c7c:	3304      	adds	r3, #4
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7fe f88e 	bl	8004da0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c84:	463b      	mov	r3, r7
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7ff ff6a 	bl	8006b60 <prvSampleTimeNow>
 8006c8c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2b09      	cmp	r3, #9
 8006c92:	f200 8097 	bhi.w	8006dc4 <prvProcessReceivedCommands+0x1a0>
 8006c96:	a201      	add	r2, pc, #4	@ (adr r2, 8006c9c <prvProcessReceivedCommands+0x78>)
 8006c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c9c:	08006cc5 	.word	0x08006cc5
 8006ca0:	08006cc5 	.word	0x08006cc5
 8006ca4:	08006cc5 	.word	0x08006cc5
 8006ca8:	08006d3b 	.word	0x08006d3b
 8006cac:	08006d4f 	.word	0x08006d4f
 8006cb0:	08006d9b 	.word	0x08006d9b
 8006cb4:	08006cc5 	.word	0x08006cc5
 8006cb8:	08006cc5 	.word	0x08006cc5
 8006cbc:	08006d3b 	.word	0x08006d3b
 8006cc0:	08006d4f 	.word	0x08006d4f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cc6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006cca:	f043 0301 	orr.w	r3, r3, #1
 8006cce:	b2da      	uxtb	r2, r3
 8006cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006cd6:	68ba      	ldr	r2, [r7, #8]
 8006cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cda:	699b      	ldr	r3, [r3, #24]
 8006cdc:	18d1      	adds	r1, r2, r3
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ce2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ce4:	f7ff ff5c 	bl	8006ba0 <prvInsertTimerInActiveList>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d06c      	beq.n	8006dc8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cf0:	6a1b      	ldr	r3, [r3, #32]
 8006cf2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006cf4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cf8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006cfc:	f003 0304 	and.w	r3, r3, #4
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d061      	beq.n	8006dc8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006d04:	68ba      	ldr	r2, [r7, #8]
 8006d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d08:	699b      	ldr	r3, [r3, #24]
 8006d0a:	441a      	add	r2, r3
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	9300      	str	r3, [sp, #0]
 8006d10:	2300      	movs	r3, #0
 8006d12:	2100      	movs	r1, #0
 8006d14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d16:	f7ff fe01 	bl	800691c <xTimerGenericCommand>
 8006d1a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006d1c:	6a3b      	ldr	r3, [r7, #32]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d152      	bne.n	8006dc8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d26:	f383 8811 	msr	BASEPRI, r3
 8006d2a:	f3bf 8f6f 	isb	sy
 8006d2e:	f3bf 8f4f 	dsb	sy
 8006d32:	61bb      	str	r3, [r7, #24]
}
 8006d34:	bf00      	nop
 8006d36:	bf00      	nop
 8006d38:	e7fd      	b.n	8006d36 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d40:	f023 0301 	bic.w	r3, r3, #1
 8006d44:	b2da      	uxtb	r2, r3
 8006d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d48:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006d4c:	e03d      	b.n	8006dca <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d54:	f043 0301 	orr.w	r3, r3, #1
 8006d58:	b2da      	uxtb	r2, r3
 8006d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d5c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006d60:	68ba      	ldr	r2, [r7, #8]
 8006d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d64:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d68:	699b      	ldr	r3, [r3, #24]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d10b      	bne.n	8006d86 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d72:	f383 8811 	msr	BASEPRI, r3
 8006d76:	f3bf 8f6f 	isb	sy
 8006d7a:	f3bf 8f4f 	dsb	sy
 8006d7e:	617b      	str	r3, [r7, #20]
}
 8006d80:	bf00      	nop
 8006d82:	bf00      	nop
 8006d84:	e7fd      	b.n	8006d82 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d88:	699a      	ldr	r2, [r3, #24]
 8006d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d8c:	18d1      	adds	r1, r2, r3
 8006d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d94:	f7ff ff04 	bl	8006ba0 <prvInsertTimerInActiveList>
					break;
 8006d98:	e017      	b.n	8006dca <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006da0:	f003 0302 	and.w	r3, r3, #2
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d103      	bne.n	8006db0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006da8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006daa:	f000 fcc9 	bl	8007740 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006dae:	e00c      	b.n	8006dca <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006db2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006db6:	f023 0301 	bic.w	r3, r3, #1
 8006dba:	b2da      	uxtb	r2, r3
 8006dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dbe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006dc2:	e002      	b.n	8006dca <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006dc4:	bf00      	nop
 8006dc6:	e000      	b.n	8006dca <prvProcessReceivedCommands+0x1a6>
					break;
 8006dc8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006dca:	4b08      	ldr	r3, [pc, #32]	@ (8006dec <prvProcessReceivedCommands+0x1c8>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	1d39      	adds	r1, r7, #4
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f7fe faf4 	bl	80053c0 <xQueueReceive>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	f47f af26 	bne.w	8006c2c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006de0:	bf00      	nop
 8006de2:	bf00      	nop
 8006de4:	3730      	adds	r7, #48	@ 0x30
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	2000103c 	.word	0x2000103c

08006df0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b088      	sub	sp, #32
 8006df4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006df6:	e049      	b.n	8006e8c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006df8:	4b2e      	ldr	r3, [pc, #184]	@ (8006eb4 <prvSwitchTimerLists+0xc4>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e02:	4b2c      	ldr	r3, [pc, #176]	@ (8006eb4 <prvSwitchTimerLists+0xc4>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	3304      	adds	r3, #4
 8006e10:	4618      	mov	r0, r3
 8006e12:	f7fd ffc5 	bl	8004da0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	6a1b      	ldr	r3, [r3, #32]
 8006e1a:	68f8      	ldr	r0, [r7, #12]
 8006e1c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e24:	f003 0304 	and.w	r3, r3, #4
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d02f      	beq.n	8006e8c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	699b      	ldr	r3, [r3, #24]
 8006e30:	693a      	ldr	r2, [r7, #16]
 8006e32:	4413      	add	r3, r2
 8006e34:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006e36:	68ba      	ldr	r2, [r7, #8]
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d90e      	bls.n	8006e5c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	68ba      	ldr	r2, [r7, #8]
 8006e42:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8006eb4 <prvSwitchTimerLists+0xc4>)
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	3304      	adds	r3, #4
 8006e52:	4619      	mov	r1, r3
 8006e54:	4610      	mov	r0, r2
 8006e56:	f7fd ff6a 	bl	8004d2e <vListInsert>
 8006e5a:	e017      	b.n	8006e8c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	9300      	str	r3, [sp, #0]
 8006e60:	2300      	movs	r3, #0
 8006e62:	693a      	ldr	r2, [r7, #16]
 8006e64:	2100      	movs	r1, #0
 8006e66:	68f8      	ldr	r0, [r7, #12]
 8006e68:	f7ff fd58 	bl	800691c <xTimerGenericCommand>
 8006e6c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d10b      	bne.n	8006e8c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e78:	f383 8811 	msr	BASEPRI, r3
 8006e7c:	f3bf 8f6f 	isb	sy
 8006e80:	f3bf 8f4f 	dsb	sy
 8006e84:	603b      	str	r3, [r7, #0]
}
 8006e86:	bf00      	nop
 8006e88:	bf00      	nop
 8006e8a:	e7fd      	b.n	8006e88 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e8c:	4b09      	ldr	r3, [pc, #36]	@ (8006eb4 <prvSwitchTimerLists+0xc4>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1b0      	bne.n	8006df8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006e96:	4b07      	ldr	r3, [pc, #28]	@ (8006eb4 <prvSwitchTimerLists+0xc4>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006e9c:	4b06      	ldr	r3, [pc, #24]	@ (8006eb8 <prvSwitchTimerLists+0xc8>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a04      	ldr	r2, [pc, #16]	@ (8006eb4 <prvSwitchTimerLists+0xc4>)
 8006ea2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006ea4:	4a04      	ldr	r2, [pc, #16]	@ (8006eb8 <prvSwitchTimerLists+0xc8>)
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	6013      	str	r3, [r2, #0]
}
 8006eaa:	bf00      	nop
 8006eac:	3718      	adds	r7, #24
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	20001034 	.word	0x20001034
 8006eb8:	20001038 	.word	0x20001038

08006ebc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006ec2:	f000 f969 	bl	8007198 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006ec6:	4b15      	ldr	r3, [pc, #84]	@ (8006f1c <prvCheckForValidListAndQueue+0x60>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d120      	bne.n	8006f10 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006ece:	4814      	ldr	r0, [pc, #80]	@ (8006f20 <prvCheckForValidListAndQueue+0x64>)
 8006ed0:	f7fd fedc 	bl	8004c8c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006ed4:	4813      	ldr	r0, [pc, #76]	@ (8006f24 <prvCheckForValidListAndQueue+0x68>)
 8006ed6:	f7fd fed9 	bl	8004c8c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006eda:	4b13      	ldr	r3, [pc, #76]	@ (8006f28 <prvCheckForValidListAndQueue+0x6c>)
 8006edc:	4a10      	ldr	r2, [pc, #64]	@ (8006f20 <prvCheckForValidListAndQueue+0x64>)
 8006ede:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006ee0:	4b12      	ldr	r3, [pc, #72]	@ (8006f2c <prvCheckForValidListAndQueue+0x70>)
 8006ee2:	4a10      	ldr	r2, [pc, #64]	@ (8006f24 <prvCheckForValidListAndQueue+0x68>)
 8006ee4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	4b11      	ldr	r3, [pc, #68]	@ (8006f30 <prvCheckForValidListAndQueue+0x74>)
 8006eec:	4a11      	ldr	r2, [pc, #68]	@ (8006f34 <prvCheckForValidListAndQueue+0x78>)
 8006eee:	2110      	movs	r1, #16
 8006ef0:	200a      	movs	r0, #10
 8006ef2:	f7fd ffe9 	bl	8004ec8 <xQueueGenericCreateStatic>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	4a08      	ldr	r2, [pc, #32]	@ (8006f1c <prvCheckForValidListAndQueue+0x60>)
 8006efa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006efc:	4b07      	ldr	r3, [pc, #28]	@ (8006f1c <prvCheckForValidListAndQueue+0x60>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d005      	beq.n	8006f10 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006f04:	4b05      	ldr	r3, [pc, #20]	@ (8006f1c <prvCheckForValidListAndQueue+0x60>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	490b      	ldr	r1, [pc, #44]	@ (8006f38 <prvCheckForValidListAndQueue+0x7c>)
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f7fe fc4a 	bl	80057a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f10:	f000 f974 	bl	80071fc <vPortExitCritical>
}
 8006f14:	bf00      	nop
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	2000103c 	.word	0x2000103c
 8006f20:	2000100c 	.word	0x2000100c
 8006f24:	20001020 	.word	0x20001020
 8006f28:	20001034 	.word	0x20001034
 8006f2c:	20001038 	.word	0x20001038
 8006f30:	200010e8 	.word	0x200010e8
 8006f34:	20001048 	.word	0x20001048
 8006f38:	08007c20 	.word	0x08007c20

08006f3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	3b04      	subs	r3, #4
 8006f4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006f54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	3b04      	subs	r3, #4
 8006f5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	f023 0201 	bic.w	r2, r3, #1
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	3b04      	subs	r3, #4
 8006f6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006f6c:	4a0c      	ldr	r2, [pc, #48]	@ (8006fa0 <pxPortInitialiseStack+0x64>)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	3b14      	subs	r3, #20
 8006f76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	3b04      	subs	r3, #4
 8006f82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f06f 0202 	mvn.w	r2, #2
 8006f8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	3b20      	subs	r3, #32
 8006f90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f92:	68fb      	ldr	r3, [r7, #12]
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3714      	adds	r7, #20
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr
 8006fa0:	08006fa5 	.word	0x08006fa5

08006fa4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b085      	sub	sp, #20
 8006fa8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006faa:	2300      	movs	r3, #0
 8006fac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006fae:	4b13      	ldr	r3, [pc, #76]	@ (8006ffc <prvTaskExitError+0x58>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006fb6:	d00b      	beq.n	8006fd0 <prvTaskExitError+0x2c>
	__asm volatile
 8006fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fbc:	f383 8811 	msr	BASEPRI, r3
 8006fc0:	f3bf 8f6f 	isb	sy
 8006fc4:	f3bf 8f4f 	dsb	sy
 8006fc8:	60fb      	str	r3, [r7, #12]
}
 8006fca:	bf00      	nop
 8006fcc:	bf00      	nop
 8006fce:	e7fd      	b.n	8006fcc <prvTaskExitError+0x28>
	__asm volatile
 8006fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd4:	f383 8811 	msr	BASEPRI, r3
 8006fd8:	f3bf 8f6f 	isb	sy
 8006fdc:	f3bf 8f4f 	dsb	sy
 8006fe0:	60bb      	str	r3, [r7, #8]
}
 8006fe2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006fe4:	bf00      	nop
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d0fc      	beq.n	8006fe6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006fec:	bf00      	nop
 8006fee:	bf00      	nop
 8006ff0:	3714      	adds	r7, #20
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop
 8006ffc:	2000000c 	.word	0x2000000c

08007000 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007000:	4b07      	ldr	r3, [pc, #28]	@ (8007020 <pxCurrentTCBConst2>)
 8007002:	6819      	ldr	r1, [r3, #0]
 8007004:	6808      	ldr	r0, [r1, #0]
 8007006:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800700a:	f380 8809 	msr	PSP, r0
 800700e:	f3bf 8f6f 	isb	sy
 8007012:	f04f 0000 	mov.w	r0, #0
 8007016:	f380 8811 	msr	BASEPRI, r0
 800701a:	4770      	bx	lr
 800701c:	f3af 8000 	nop.w

08007020 <pxCurrentTCBConst2>:
 8007020:	20000b04 	.word	0x20000b04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007024:	bf00      	nop
 8007026:	bf00      	nop

08007028 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007028:	4808      	ldr	r0, [pc, #32]	@ (800704c <prvPortStartFirstTask+0x24>)
 800702a:	6800      	ldr	r0, [r0, #0]
 800702c:	6800      	ldr	r0, [r0, #0]
 800702e:	f380 8808 	msr	MSP, r0
 8007032:	f04f 0000 	mov.w	r0, #0
 8007036:	f380 8814 	msr	CONTROL, r0
 800703a:	b662      	cpsie	i
 800703c:	b661      	cpsie	f
 800703e:	f3bf 8f4f 	dsb	sy
 8007042:	f3bf 8f6f 	isb	sy
 8007046:	df00      	svc	0
 8007048:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800704a:	bf00      	nop
 800704c:	e000ed08 	.word	0xe000ed08

08007050 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b086      	sub	sp, #24
 8007054:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007056:	4b47      	ldr	r3, [pc, #284]	@ (8007174 <xPortStartScheduler+0x124>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a47      	ldr	r2, [pc, #284]	@ (8007178 <xPortStartScheduler+0x128>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d10b      	bne.n	8007078 <xPortStartScheduler+0x28>
	__asm volatile
 8007060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007064:	f383 8811 	msr	BASEPRI, r3
 8007068:	f3bf 8f6f 	isb	sy
 800706c:	f3bf 8f4f 	dsb	sy
 8007070:	613b      	str	r3, [r7, #16]
}
 8007072:	bf00      	nop
 8007074:	bf00      	nop
 8007076:	e7fd      	b.n	8007074 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007078:	4b3e      	ldr	r3, [pc, #248]	@ (8007174 <xPortStartScheduler+0x124>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a3f      	ldr	r2, [pc, #252]	@ (800717c <xPortStartScheduler+0x12c>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d10b      	bne.n	800709a <xPortStartScheduler+0x4a>
	__asm volatile
 8007082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007086:	f383 8811 	msr	BASEPRI, r3
 800708a:	f3bf 8f6f 	isb	sy
 800708e:	f3bf 8f4f 	dsb	sy
 8007092:	60fb      	str	r3, [r7, #12]
}
 8007094:	bf00      	nop
 8007096:	bf00      	nop
 8007098:	e7fd      	b.n	8007096 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800709a:	4b39      	ldr	r3, [pc, #228]	@ (8007180 <xPortStartScheduler+0x130>)
 800709c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	22ff      	movs	r2, #255	@ 0xff
 80070aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80070b4:	78fb      	ldrb	r3, [r7, #3]
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80070bc:	b2da      	uxtb	r2, r3
 80070be:	4b31      	ldr	r3, [pc, #196]	@ (8007184 <xPortStartScheduler+0x134>)
 80070c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80070c2:	4b31      	ldr	r3, [pc, #196]	@ (8007188 <xPortStartScheduler+0x138>)
 80070c4:	2207      	movs	r2, #7
 80070c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070c8:	e009      	b.n	80070de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80070ca:	4b2f      	ldr	r3, [pc, #188]	@ (8007188 <xPortStartScheduler+0x138>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	3b01      	subs	r3, #1
 80070d0:	4a2d      	ldr	r2, [pc, #180]	@ (8007188 <xPortStartScheduler+0x138>)
 80070d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80070d4:	78fb      	ldrb	r3, [r7, #3]
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	005b      	lsls	r3, r3, #1
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070de:	78fb      	ldrb	r3, [r7, #3]
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070e6:	2b80      	cmp	r3, #128	@ 0x80
 80070e8:	d0ef      	beq.n	80070ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80070ea:	4b27      	ldr	r3, [pc, #156]	@ (8007188 <xPortStartScheduler+0x138>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f1c3 0307 	rsb	r3, r3, #7
 80070f2:	2b04      	cmp	r3, #4
 80070f4:	d00b      	beq.n	800710e <xPortStartScheduler+0xbe>
	__asm volatile
 80070f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070fa:	f383 8811 	msr	BASEPRI, r3
 80070fe:	f3bf 8f6f 	isb	sy
 8007102:	f3bf 8f4f 	dsb	sy
 8007106:	60bb      	str	r3, [r7, #8]
}
 8007108:	bf00      	nop
 800710a:	bf00      	nop
 800710c:	e7fd      	b.n	800710a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800710e:	4b1e      	ldr	r3, [pc, #120]	@ (8007188 <xPortStartScheduler+0x138>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	021b      	lsls	r3, r3, #8
 8007114:	4a1c      	ldr	r2, [pc, #112]	@ (8007188 <xPortStartScheduler+0x138>)
 8007116:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007118:	4b1b      	ldr	r3, [pc, #108]	@ (8007188 <xPortStartScheduler+0x138>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007120:	4a19      	ldr	r2, [pc, #100]	@ (8007188 <xPortStartScheduler+0x138>)
 8007122:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	b2da      	uxtb	r2, r3
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800712c:	4b17      	ldr	r3, [pc, #92]	@ (800718c <xPortStartScheduler+0x13c>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a16      	ldr	r2, [pc, #88]	@ (800718c <xPortStartScheduler+0x13c>)
 8007132:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007136:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007138:	4b14      	ldr	r3, [pc, #80]	@ (800718c <xPortStartScheduler+0x13c>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a13      	ldr	r2, [pc, #76]	@ (800718c <xPortStartScheduler+0x13c>)
 800713e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007142:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007144:	f000 f9a6 	bl	8007494 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007148:	4b11      	ldr	r3, [pc, #68]	@ (8007190 <xPortStartScheduler+0x140>)
 800714a:	2200      	movs	r2, #0
 800714c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800714e:	f000 f9dd 	bl	800750c <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007152:	4b10      	ldr	r3, [pc, #64]	@ (8007194 <xPortStartScheduler+0x144>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a0f      	ldr	r2, [pc, #60]	@ (8007194 <xPortStartScheduler+0x144>)
 8007158:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800715c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800715e:	f7ff ff63 	bl	8007028 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007162:	f7fe ffbf 	bl	80060e4 <vTaskSwitchContext>
	prvTaskExitError();
 8007166:	f7ff ff1d 	bl	8006fa4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3718      	adds	r7, #24
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	e000ed00 	.word	0xe000ed00
 8007178:	410fc271 	.word	0x410fc271
 800717c:	410fc270 	.word	0x410fc270
 8007180:	e000e400 	.word	0xe000e400
 8007184:	20001144 	.word	0x20001144
 8007188:	20001148 	.word	0x20001148
 800718c:	e000ed20 	.word	0xe000ed20
 8007190:	2000000c 	.word	0x2000000c
 8007194:	e000ef34 	.word	0xe000ef34

08007198 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
	__asm volatile
 800719e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a2:	f383 8811 	msr	BASEPRI, r3
 80071a6:	f3bf 8f6f 	isb	sy
 80071aa:	f3bf 8f4f 	dsb	sy
 80071ae:	607b      	str	r3, [r7, #4]
}
 80071b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80071b2:	4b10      	ldr	r3, [pc, #64]	@ (80071f4 <vPortEnterCritical+0x5c>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	3301      	adds	r3, #1
 80071b8:	4a0e      	ldr	r2, [pc, #56]	@ (80071f4 <vPortEnterCritical+0x5c>)
 80071ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80071bc:	4b0d      	ldr	r3, [pc, #52]	@ (80071f4 <vPortEnterCritical+0x5c>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d110      	bne.n	80071e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80071c4:	4b0c      	ldr	r3, [pc, #48]	@ (80071f8 <vPortEnterCritical+0x60>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00b      	beq.n	80071e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80071ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071d2:	f383 8811 	msr	BASEPRI, r3
 80071d6:	f3bf 8f6f 	isb	sy
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	603b      	str	r3, [r7, #0]
}
 80071e0:	bf00      	nop
 80071e2:	bf00      	nop
 80071e4:	e7fd      	b.n	80071e2 <vPortEnterCritical+0x4a>
	}
}
 80071e6:	bf00      	nop
 80071e8:	370c      	adds	r7, #12
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	2000000c 	.word	0x2000000c
 80071f8:	e000ed04 	.word	0xe000ed04

080071fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007202:	4b12      	ldr	r3, [pc, #72]	@ (800724c <vPortExitCritical+0x50>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d10b      	bne.n	8007222 <vPortExitCritical+0x26>
	__asm volatile
 800720a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800720e:	f383 8811 	msr	BASEPRI, r3
 8007212:	f3bf 8f6f 	isb	sy
 8007216:	f3bf 8f4f 	dsb	sy
 800721a:	607b      	str	r3, [r7, #4]
}
 800721c:	bf00      	nop
 800721e:	bf00      	nop
 8007220:	e7fd      	b.n	800721e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007222:	4b0a      	ldr	r3, [pc, #40]	@ (800724c <vPortExitCritical+0x50>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	3b01      	subs	r3, #1
 8007228:	4a08      	ldr	r2, [pc, #32]	@ (800724c <vPortExitCritical+0x50>)
 800722a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800722c:	4b07      	ldr	r3, [pc, #28]	@ (800724c <vPortExitCritical+0x50>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d105      	bne.n	8007240 <vPortExitCritical+0x44>
 8007234:	2300      	movs	r3, #0
 8007236:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	f383 8811 	msr	BASEPRI, r3
}
 800723e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007240:	bf00      	nop
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr
 800724c:	2000000c 	.word	0x2000000c

08007250 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007250:	f3ef 8009 	mrs	r0, PSP
 8007254:	f3bf 8f6f 	isb	sy
 8007258:	4b15      	ldr	r3, [pc, #84]	@ (80072b0 <pxCurrentTCBConst>)
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	f01e 0f10 	tst.w	lr, #16
 8007260:	bf08      	it	eq
 8007262:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007266:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800726a:	6010      	str	r0, [r2, #0]
 800726c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007270:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007274:	f380 8811 	msr	BASEPRI, r0
 8007278:	f3bf 8f4f 	dsb	sy
 800727c:	f3bf 8f6f 	isb	sy
 8007280:	f7fe ff30 	bl	80060e4 <vTaskSwitchContext>
 8007284:	f04f 0000 	mov.w	r0, #0
 8007288:	f380 8811 	msr	BASEPRI, r0
 800728c:	bc09      	pop	{r0, r3}
 800728e:	6819      	ldr	r1, [r3, #0]
 8007290:	6808      	ldr	r0, [r1, #0]
 8007292:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007296:	f01e 0f10 	tst.w	lr, #16
 800729a:	bf08      	it	eq
 800729c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80072a0:	f380 8809 	msr	PSP, r0
 80072a4:	f3bf 8f6f 	isb	sy
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	f3af 8000 	nop.w

080072b0 <pxCurrentTCBConst>:
 80072b0:	20000b04 	.word	0x20000b04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80072b4:	bf00      	nop
 80072b6:	bf00      	nop

080072b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
	__asm volatile
 80072be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c2:	f383 8811 	msr	BASEPRI, r3
 80072c6:	f3bf 8f6f 	isb	sy
 80072ca:	f3bf 8f4f 	dsb	sy
 80072ce:	607b      	str	r3, [r7, #4]
}
 80072d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80072d2:	f7fe fe4d 	bl	8005f70 <xTaskIncrementTick>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d003      	beq.n	80072e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80072dc:	4b06      	ldr	r3, [pc, #24]	@ (80072f8 <xPortSysTickHandler+0x40>)
 80072de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072e2:	601a      	str	r2, [r3, #0]
 80072e4:	2300      	movs	r3, #0
 80072e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	f383 8811 	msr	BASEPRI, r3
}
 80072ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80072f0:	bf00      	nop
 80072f2:	3708      	adds	r7, #8
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	e000ed04 	.word	0xe000ed04

080072fc <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b088      	sub	sp, #32
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 8007304:	4b5d      	ldr	r3, [pc, #372]	@ (800747c <vPortSuppressTicksAndSleep+0x180>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	429a      	cmp	r2, r3
 800730c:	d902      	bls.n	8007314 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800730e:	4b5b      	ldr	r3, [pc, #364]	@ (800747c <vPortSuppressTicksAndSleep+0x180>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 8007314:	4b5a      	ldr	r3, [pc, #360]	@ (8007480 <vPortSuppressTicksAndSleep+0x184>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a59      	ldr	r2, [pc, #356]	@ (8007480 <vPortSuppressTicksAndSleep+0x184>)
 800731a:	f023 0301 	bic.w	r3, r3, #1
 800731e:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 8007320:	4b58      	ldr	r3, [pc, #352]	@ (8007484 <vPortSuppressTicksAndSleep+0x188>)
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	3b01      	subs	r3, #1
 8007328:	4957      	ldr	r1, [pc, #348]	@ (8007488 <vPortSuppressTicksAndSleep+0x18c>)
 800732a:	6809      	ldr	r1, [r1, #0]
 800732c:	fb01 f303 	mul.w	r3, r1, r3
 8007330:	4413      	add	r3, r2
 8007332:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 8007334:	4b55      	ldr	r3, [pc, #340]	@ (800748c <vPortSuppressTicksAndSleep+0x190>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	69fa      	ldr	r2, [r7, #28]
 800733a:	429a      	cmp	r2, r3
 800733c:	d904      	bls.n	8007348 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800733e:	4b53      	ldr	r3, [pc, #332]	@ (800748c <vPortSuppressTicksAndSleep+0x190>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	69fa      	ldr	r2, [r7, #28]
 8007344:	1ad3      	subs	r3, r2, r3
 8007346:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 8007348:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800734a:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800734e:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 8007352:	f7ff f8c5 	bl	80064e0 <eTaskConfirmSleepModeStatus>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d110      	bne.n	800737e <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800735c:	4b49      	ldr	r3, [pc, #292]	@ (8007484 <vPortSuppressTicksAndSleep+0x188>)
 800735e:	4a4c      	ldr	r2, [pc, #304]	@ (8007490 <vPortSuppressTicksAndSleep+0x194>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8007364:	4b46      	ldr	r3, [pc, #280]	@ (8007480 <vPortSuppressTicksAndSleep+0x184>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a45      	ldr	r2, [pc, #276]	@ (8007480 <vPortSuppressTicksAndSleep+0x184>)
 800736a:	f043 0301 	orr.w	r3, r3, #1
 800736e:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8007370:	4b45      	ldr	r3, [pc, #276]	@ (8007488 <vPortSuppressTicksAndSleep+0x18c>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a46      	ldr	r2, [pc, #280]	@ (8007490 <vPortSuppressTicksAndSleep+0x194>)
 8007376:	3b01      	subs	r3, #1
 8007378:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800737a:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800737c:	e079      	b.n	8007472 <vPortSuppressTicksAndSleep+0x176>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800737e:	4a44      	ldr	r2, [pc, #272]	@ (8007490 <vPortSuppressTicksAndSleep+0x194>)
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007384:	4b3f      	ldr	r3, [pc, #252]	@ (8007484 <vPortSuppressTicksAndSleep+0x188>)
 8007386:	2200      	movs	r2, #0
 8007388:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800738a:	4b3d      	ldr	r3, [pc, #244]	@ (8007480 <vPortSuppressTicksAndSleep+0x184>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a3c      	ldr	r2, [pc, #240]	@ (8007480 <vPortSuppressTicksAndSleep+0x184>)
 8007390:	f043 0301 	orr.w	r3, r3, #1
 8007394:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	613b      	str	r3, [r7, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 800739a:	2300      	movs	r3, #0
 800739c:	613b      	str	r3, [r7, #16]
 800739e:	6938      	ldr	r0, [r7, #16]
 80073a0:	f7f9 f9dc 	bl	800075c <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d004      	beq.n	80073b4 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 80073aa:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 80073ae:	bf30      	wfi
				__asm volatile( "isb" );
 80073b0:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f7f9 f9db 	bl	8000770 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 80073ba:	b662      	cpsie	i
			__asm volatile( "dsb" );
 80073bc:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 80073c0:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 80073c4:	b672      	cpsid	i
			__asm volatile( "dsb" );
 80073c6:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 80073ca:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 80073ce:	4b2c      	ldr	r3, [pc, #176]	@ (8007480 <vPortSuppressTicksAndSleep+0x184>)
 80073d0:	2206      	movs	r2, #6
 80073d2:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 80073d4:	4b2a      	ldr	r3, [pc, #168]	@ (8007480 <vPortSuppressTicksAndSleep+0x184>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d01d      	beq.n	800741c <vPortSuppressTicksAndSleep+0x120>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 80073e0:	4b29      	ldr	r3, [pc, #164]	@ (8007488 <vPortSuppressTicksAndSleep+0x18c>)
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	4b27      	ldr	r3, [pc, #156]	@ (8007484 <vPortSuppressTicksAndSleep+0x188>)
 80073e6:	6819      	ldr	r1, [r3, #0]
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	1acb      	subs	r3, r1, r3
 80073ec:	4413      	add	r3, r2
 80073ee:	3b01      	subs	r3, #1
 80073f0:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 80073f2:	4b26      	ldr	r3, [pc, #152]	@ (800748c <vPortSuppressTicksAndSleep+0x190>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d304      	bcc.n	8007406 <vPortSuppressTicksAndSleep+0x10a>
 80073fc:	4b22      	ldr	r3, [pc, #136]	@ (8007488 <vPortSuppressTicksAndSleep+0x18c>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	697a      	ldr	r2, [r7, #20]
 8007402:	429a      	cmp	r2, r3
 8007404:	d903      	bls.n	800740e <vPortSuppressTicksAndSleep+0x112>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 8007406:	4b20      	ldr	r3, [pc, #128]	@ (8007488 <vPortSuppressTicksAndSleep+0x18c>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	3b01      	subs	r3, #1
 800740c:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800740e:	4a20      	ldr	r2, [pc, #128]	@ (8007490 <vPortSuppressTicksAndSleep+0x194>)
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	3b01      	subs	r3, #1
 8007418:	61bb      	str	r3, [r7, #24]
 800741a:	e018      	b.n	800744e <vPortSuppressTicksAndSleep+0x152>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800741c:	4b1a      	ldr	r3, [pc, #104]	@ (8007488 <vPortSuppressTicksAndSleep+0x18c>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	fb03 f202 	mul.w	r2, r3, r2
 8007426:	4b17      	ldr	r3, [pc, #92]	@ (8007484 <vPortSuppressTicksAndSleep+0x188>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	1ad3      	subs	r3, r2, r3
 800742c:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800742e:	4b16      	ldr	r3, [pc, #88]	@ (8007488 <vPortSuppressTicksAndSleep+0x18c>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	fbb2 f3f3 	udiv	r3, r2, r3
 8007438:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	3301      	adds	r3, #1
 800743e:	4a12      	ldr	r2, [pc, #72]	@ (8007488 <vPortSuppressTicksAndSleep+0x18c>)
 8007440:	6812      	ldr	r2, [r2, #0]
 8007442:	fb03 f202 	mul.w	r2, r3, r2
 8007446:	4912      	ldr	r1, [pc, #72]	@ (8007490 <vPortSuppressTicksAndSleep+0x194>)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	1ad3      	subs	r3, r2, r3
 800744c:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800744e:	4b0d      	ldr	r3, [pc, #52]	@ (8007484 <vPortSuppressTicksAndSleep+0x188>)
 8007450:	2200      	movs	r2, #0
 8007452:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8007454:	4b0a      	ldr	r3, [pc, #40]	@ (8007480 <vPortSuppressTicksAndSleep+0x184>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a09      	ldr	r2, [pc, #36]	@ (8007480 <vPortSuppressTicksAndSleep+0x184>)
 800745a:	f043 0301 	orr.w	r3, r3, #1
 800745e:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 8007460:	69b8      	ldr	r0, [r7, #24]
 8007462:	f7fe fd5d 	bl	8005f20 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8007466:	4b08      	ldr	r3, [pc, #32]	@ (8007488 <vPortSuppressTicksAndSleep+0x18c>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a09      	ldr	r2, [pc, #36]	@ (8007490 <vPortSuppressTicksAndSleep+0x194>)
 800746c:	3b01      	subs	r3, #1
 800746e:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 8007470:	b662      	cpsie	i
	}
 8007472:	bf00      	nop
 8007474:	3720      	adds	r7, #32
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	2000113c 	.word	0x2000113c
 8007480:	e000e010 	.word	0xe000e010
 8007484:	e000e018 	.word	0xe000e018
 8007488:	20001138 	.word	0x20001138
 800748c:	20001140 	.word	0x20001140
 8007490:	e000e014 	.word	0xe000e014

08007494 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007494:	b480      	push	{r7}
 8007496:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 8007498:	4b14      	ldr	r3, [pc, #80]	@ (80074ec <vPortSetupTimerInterrupt+0x58>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a14      	ldr	r2, [pc, #80]	@ (80074f0 <vPortSetupTimerInterrupt+0x5c>)
 800749e:	fba2 2303 	umull	r2, r3, r2, r3
 80074a2:	099b      	lsrs	r3, r3, #6
 80074a4:	4a13      	ldr	r2, [pc, #76]	@ (80074f4 <vPortSetupTimerInterrupt+0x60>)
 80074a6:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 80074a8:	4b12      	ldr	r3, [pc, #72]	@ (80074f4 <vPortSetupTimerInterrupt+0x60>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 80074b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80074b4:	4a10      	ldr	r2, [pc, #64]	@ (80074f8 <vPortSetupTimerInterrupt+0x64>)
 80074b6:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 80074b8:	4b10      	ldr	r3, [pc, #64]	@ (80074fc <vPortSetupTimerInterrupt+0x68>)
 80074ba:	222d      	movs	r2, #45	@ 0x2d
 80074bc:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80074be:	4b10      	ldr	r3, [pc, #64]	@ (8007500 <vPortSetupTimerInterrupt+0x6c>)
 80074c0:	2200      	movs	r2, #0
 80074c2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80074c4:	4b0f      	ldr	r3, [pc, #60]	@ (8007504 <vPortSetupTimerInterrupt+0x70>)
 80074c6:	2200      	movs	r2, #0
 80074c8:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80074ca:	4b08      	ldr	r3, [pc, #32]	@ (80074ec <vPortSetupTimerInterrupt+0x58>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a08      	ldr	r2, [pc, #32]	@ (80074f0 <vPortSetupTimerInterrupt+0x5c>)
 80074d0:	fba2 2303 	umull	r2, r3, r2, r3
 80074d4:	099b      	lsrs	r3, r3, #6
 80074d6:	4a0c      	ldr	r2, [pc, #48]	@ (8007508 <vPortSetupTimerInterrupt+0x74>)
 80074d8:	3b01      	subs	r3, #1
 80074da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80074dc:	4b08      	ldr	r3, [pc, #32]	@ (8007500 <vPortSetupTimerInterrupt+0x6c>)
 80074de:	2207      	movs	r2, #7
 80074e0:	601a      	str	r2, [r3, #0]
}
 80074e2:	bf00      	nop
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr
 80074ec:	20000000 	.word	0x20000000
 80074f0:	10624dd3 	.word	0x10624dd3
 80074f4:	20001138 	.word	0x20001138
 80074f8:	2000113c 	.word	0x2000113c
 80074fc:	20001140 	.word	0x20001140
 8007500:	e000e010 	.word	0xe000e010
 8007504:	e000e018 	.word	0xe000e018
 8007508:	e000e014 	.word	0xe000e014

0800750c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800750c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800751c <vPortEnableVFP+0x10>
 8007510:	6801      	ldr	r1, [r0, #0]
 8007512:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007516:	6001      	str	r1, [r0, #0]
 8007518:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800751a:	bf00      	nop
 800751c:	e000ed88 	.word	0xe000ed88

08007520 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007520:	b480      	push	{r7}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007526:	f3ef 8305 	mrs	r3, IPSR
 800752a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2b0f      	cmp	r3, #15
 8007530:	d915      	bls.n	800755e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007532:	4a18      	ldr	r2, [pc, #96]	@ (8007594 <vPortValidateInterruptPriority+0x74>)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	4413      	add	r3, r2
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800753c:	4b16      	ldr	r3, [pc, #88]	@ (8007598 <vPortValidateInterruptPriority+0x78>)
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	7afa      	ldrb	r2, [r7, #11]
 8007542:	429a      	cmp	r2, r3
 8007544:	d20b      	bcs.n	800755e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800754a:	f383 8811 	msr	BASEPRI, r3
 800754e:	f3bf 8f6f 	isb	sy
 8007552:	f3bf 8f4f 	dsb	sy
 8007556:	607b      	str	r3, [r7, #4]
}
 8007558:	bf00      	nop
 800755a:	bf00      	nop
 800755c:	e7fd      	b.n	800755a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800755e:	4b0f      	ldr	r3, [pc, #60]	@ (800759c <vPortValidateInterruptPriority+0x7c>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007566:	4b0e      	ldr	r3, [pc, #56]	@ (80075a0 <vPortValidateInterruptPriority+0x80>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	429a      	cmp	r2, r3
 800756c:	d90b      	bls.n	8007586 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800756e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007572:	f383 8811 	msr	BASEPRI, r3
 8007576:	f3bf 8f6f 	isb	sy
 800757a:	f3bf 8f4f 	dsb	sy
 800757e:	603b      	str	r3, [r7, #0]
}
 8007580:	bf00      	nop
 8007582:	bf00      	nop
 8007584:	e7fd      	b.n	8007582 <vPortValidateInterruptPriority+0x62>
	}
 8007586:	bf00      	nop
 8007588:	3714      	adds	r7, #20
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	e000e3f0 	.word	0xe000e3f0
 8007598:	20001144 	.word	0x20001144
 800759c:	e000ed0c 	.word	0xe000ed0c
 80075a0:	20001148 	.word	0x20001148

080075a4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b08a      	sub	sp, #40	@ 0x28
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80075ac:	2300      	movs	r3, #0
 80075ae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80075b0:	f7fe fbc2 	bl	8005d38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80075b4:	4b5c      	ldr	r3, [pc, #368]	@ (8007728 <pvPortMalloc+0x184>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d101      	bne.n	80075c0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80075bc:	f000 f924 	bl	8007808 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80075c0:	4b5a      	ldr	r3, [pc, #360]	@ (800772c <pvPortMalloc+0x188>)
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	4013      	ands	r3, r2
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	f040 8095 	bne.w	80076f8 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d01e      	beq.n	8007612 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80075d4:	2208      	movs	r2, #8
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4413      	add	r3, r2
 80075da:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f003 0307 	and.w	r3, r3, #7
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d015      	beq.n	8007612 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f023 0307 	bic.w	r3, r3, #7
 80075ec:	3308      	adds	r3, #8
 80075ee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f003 0307 	and.w	r3, r3, #7
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00b      	beq.n	8007612 <pvPortMalloc+0x6e>
	__asm volatile
 80075fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075fe:	f383 8811 	msr	BASEPRI, r3
 8007602:	f3bf 8f6f 	isb	sy
 8007606:	f3bf 8f4f 	dsb	sy
 800760a:	617b      	str	r3, [r7, #20]
}
 800760c:	bf00      	nop
 800760e:	bf00      	nop
 8007610:	e7fd      	b.n	800760e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d06f      	beq.n	80076f8 <pvPortMalloc+0x154>
 8007618:	4b45      	ldr	r3, [pc, #276]	@ (8007730 <pvPortMalloc+0x18c>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	429a      	cmp	r2, r3
 8007620:	d86a      	bhi.n	80076f8 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007622:	4b44      	ldr	r3, [pc, #272]	@ (8007734 <pvPortMalloc+0x190>)
 8007624:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007626:	4b43      	ldr	r3, [pc, #268]	@ (8007734 <pvPortMalloc+0x190>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800762c:	e004      	b.n	8007638 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800762e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007630:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	429a      	cmp	r2, r3
 8007640:	d903      	bls.n	800764a <pvPortMalloc+0xa6>
 8007642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1f1      	bne.n	800762e <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800764a:	4b37      	ldr	r3, [pc, #220]	@ (8007728 <pvPortMalloc+0x184>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007650:	429a      	cmp	r2, r3
 8007652:	d051      	beq.n	80076f8 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007654:	6a3b      	ldr	r3, [r7, #32]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2208      	movs	r2, #8
 800765a:	4413      	add	r3, r2
 800765c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800765e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	6a3b      	ldr	r3, [r7, #32]
 8007664:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007668:	685a      	ldr	r2, [r3, #4]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	1ad2      	subs	r2, r2, r3
 800766e:	2308      	movs	r3, #8
 8007670:	005b      	lsls	r3, r3, #1
 8007672:	429a      	cmp	r2, r3
 8007674:	d920      	bls.n	80076b8 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007676:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4413      	add	r3, r2
 800767c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	f003 0307 	and.w	r3, r3, #7
 8007684:	2b00      	cmp	r3, #0
 8007686:	d00b      	beq.n	80076a0 <pvPortMalloc+0xfc>
	__asm volatile
 8007688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800768c:	f383 8811 	msr	BASEPRI, r3
 8007690:	f3bf 8f6f 	isb	sy
 8007694:	f3bf 8f4f 	dsb	sy
 8007698:	613b      	str	r3, [r7, #16]
}
 800769a:	bf00      	nop
 800769c:	bf00      	nop
 800769e:	e7fd      	b.n	800769c <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80076a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a2:	685a      	ldr	r2, [r3, #4]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	1ad2      	subs	r2, r2, r3
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80076ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80076b2:	69b8      	ldr	r0, [r7, #24]
 80076b4:	f000 f90a 	bl	80078cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80076b8:	4b1d      	ldr	r3, [pc, #116]	@ (8007730 <pvPortMalloc+0x18c>)
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	4a1b      	ldr	r2, [pc, #108]	@ (8007730 <pvPortMalloc+0x18c>)
 80076c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80076c6:	4b1a      	ldr	r3, [pc, #104]	@ (8007730 <pvPortMalloc+0x18c>)
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	4b1b      	ldr	r3, [pc, #108]	@ (8007738 <pvPortMalloc+0x194>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d203      	bcs.n	80076da <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80076d2:	4b17      	ldr	r3, [pc, #92]	@ (8007730 <pvPortMalloc+0x18c>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a18      	ldr	r2, [pc, #96]	@ (8007738 <pvPortMalloc+0x194>)
 80076d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80076da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076dc:	685a      	ldr	r2, [r3, #4]
 80076de:	4b13      	ldr	r3, [pc, #76]	@ (800772c <pvPortMalloc+0x188>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	431a      	orrs	r2, r3
 80076e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80076e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ea:	2200      	movs	r2, #0
 80076ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80076ee:	4b13      	ldr	r3, [pc, #76]	@ (800773c <pvPortMalloc+0x198>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	3301      	adds	r3, #1
 80076f4:	4a11      	ldr	r2, [pc, #68]	@ (800773c <pvPortMalloc+0x198>)
 80076f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80076f8:	f7fe fb64 	bl	8005dc4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	f003 0307 	and.w	r3, r3, #7
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00b      	beq.n	800771e <pvPortMalloc+0x17a>
	__asm volatile
 8007706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800770a:	f383 8811 	msr	BASEPRI, r3
 800770e:	f3bf 8f6f 	isb	sy
 8007712:	f3bf 8f4f 	dsb	sy
 8007716:	60fb      	str	r3, [r7, #12]
}
 8007718:	bf00      	nop
 800771a:	bf00      	nop
 800771c:	e7fd      	b.n	800771a <pvPortMalloc+0x176>
	return pvReturn;
 800771e:	69fb      	ldr	r3, [r7, #28]
}
 8007720:	4618      	mov	r0, r3
 8007722:	3728      	adds	r7, #40	@ 0x28
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	20004d54 	.word	0x20004d54
 800772c:	20004d68 	.word	0x20004d68
 8007730:	20004d58 	.word	0x20004d58
 8007734:	20004d4c 	.word	0x20004d4c
 8007738:	20004d5c 	.word	0x20004d5c
 800773c:	20004d60 	.word	0x20004d60

08007740 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b086      	sub	sp, #24
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d04f      	beq.n	80077f2 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007752:	2308      	movs	r3, #8
 8007754:	425b      	negs	r3, r3
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	4413      	add	r3, r2
 800775a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	685a      	ldr	r2, [r3, #4]
 8007764:	4b25      	ldr	r3, [pc, #148]	@ (80077fc <vPortFree+0xbc>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4013      	ands	r3, r2
 800776a:	2b00      	cmp	r3, #0
 800776c:	d10b      	bne.n	8007786 <vPortFree+0x46>
	__asm volatile
 800776e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007772:	f383 8811 	msr	BASEPRI, r3
 8007776:	f3bf 8f6f 	isb	sy
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	60fb      	str	r3, [r7, #12]
}
 8007780:	bf00      	nop
 8007782:	bf00      	nop
 8007784:	e7fd      	b.n	8007782 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00b      	beq.n	80077a6 <vPortFree+0x66>
	__asm volatile
 800778e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007792:	f383 8811 	msr	BASEPRI, r3
 8007796:	f3bf 8f6f 	isb	sy
 800779a:	f3bf 8f4f 	dsb	sy
 800779e:	60bb      	str	r3, [r7, #8]
}
 80077a0:	bf00      	nop
 80077a2:	bf00      	nop
 80077a4:	e7fd      	b.n	80077a2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	685a      	ldr	r2, [r3, #4]
 80077aa:	4b14      	ldr	r3, [pc, #80]	@ (80077fc <vPortFree+0xbc>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4013      	ands	r3, r2
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d01e      	beq.n	80077f2 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d11a      	bne.n	80077f2 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	685a      	ldr	r2, [r3, #4]
 80077c0:	4b0e      	ldr	r3, [pc, #56]	@ (80077fc <vPortFree+0xbc>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	43db      	mvns	r3, r3
 80077c6:	401a      	ands	r2, r3
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80077cc:	f7fe fab4 	bl	8005d38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	685a      	ldr	r2, [r3, #4]
 80077d4:	4b0a      	ldr	r3, [pc, #40]	@ (8007800 <vPortFree+0xc0>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4413      	add	r3, r2
 80077da:	4a09      	ldr	r2, [pc, #36]	@ (8007800 <vPortFree+0xc0>)
 80077dc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80077de:	6938      	ldr	r0, [r7, #16]
 80077e0:	f000 f874 	bl	80078cc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80077e4:	4b07      	ldr	r3, [pc, #28]	@ (8007804 <vPortFree+0xc4>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	3301      	adds	r3, #1
 80077ea:	4a06      	ldr	r2, [pc, #24]	@ (8007804 <vPortFree+0xc4>)
 80077ec:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80077ee:	f7fe fae9 	bl	8005dc4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80077f2:	bf00      	nop
 80077f4:	3718      	adds	r7, #24
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	20004d68 	.word	0x20004d68
 8007800:	20004d58 	.word	0x20004d58
 8007804:	20004d64 	.word	0x20004d64

08007808 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800780e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007812:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007814:	4b27      	ldr	r3, [pc, #156]	@ (80078b4 <prvHeapInit+0xac>)
 8007816:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f003 0307 	and.w	r3, r3, #7
 800781e:	2b00      	cmp	r3, #0
 8007820:	d00c      	beq.n	800783c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	3307      	adds	r3, #7
 8007826:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f023 0307 	bic.w	r3, r3, #7
 800782e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007830:	68ba      	ldr	r2, [r7, #8]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	1ad3      	subs	r3, r2, r3
 8007836:	4a1f      	ldr	r2, [pc, #124]	@ (80078b4 <prvHeapInit+0xac>)
 8007838:	4413      	add	r3, r2
 800783a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007840:	4a1d      	ldr	r2, [pc, #116]	@ (80078b8 <prvHeapInit+0xb0>)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007846:	4b1c      	ldr	r3, [pc, #112]	@ (80078b8 <prvHeapInit+0xb0>)
 8007848:	2200      	movs	r2, #0
 800784a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	68ba      	ldr	r2, [r7, #8]
 8007850:	4413      	add	r3, r2
 8007852:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007854:	2208      	movs	r2, #8
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	1a9b      	subs	r3, r3, r2
 800785a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f023 0307 	bic.w	r3, r3, #7
 8007862:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	4a15      	ldr	r2, [pc, #84]	@ (80078bc <prvHeapInit+0xb4>)
 8007868:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800786a:	4b14      	ldr	r3, [pc, #80]	@ (80078bc <prvHeapInit+0xb4>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	2200      	movs	r2, #0
 8007870:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007872:	4b12      	ldr	r3, [pc, #72]	@ (80078bc <prvHeapInit+0xb4>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	2200      	movs	r2, #0
 8007878:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	1ad2      	subs	r2, r2, r3
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007888:	4b0c      	ldr	r3, [pc, #48]	@ (80078bc <prvHeapInit+0xb4>)
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	4a0a      	ldr	r2, [pc, #40]	@ (80078c0 <prvHeapInit+0xb8>)
 8007896:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	4a09      	ldr	r2, [pc, #36]	@ (80078c4 <prvHeapInit+0xbc>)
 800789e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80078a0:	4b09      	ldr	r3, [pc, #36]	@ (80078c8 <prvHeapInit+0xc0>)
 80078a2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80078a6:	601a      	str	r2, [r3, #0]
}
 80078a8:	bf00      	nop
 80078aa:	3714      	adds	r7, #20
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr
 80078b4:	2000114c 	.word	0x2000114c
 80078b8:	20004d4c 	.word	0x20004d4c
 80078bc:	20004d54 	.word	0x20004d54
 80078c0:	20004d5c 	.word	0x20004d5c
 80078c4:	20004d58 	.word	0x20004d58
 80078c8:	20004d68 	.word	0x20004d68

080078cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80078d4:	4b28      	ldr	r3, [pc, #160]	@ (8007978 <prvInsertBlockIntoFreeList+0xac>)
 80078d6:	60fb      	str	r3, [r7, #12]
 80078d8:	e002      	b.n	80078e0 <prvInsertBlockIntoFreeList+0x14>
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	60fb      	str	r3, [r7, #12]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d8f7      	bhi.n	80078da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	68ba      	ldr	r2, [r7, #8]
 80078f4:	4413      	add	r3, r2
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d108      	bne.n	800790e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	685a      	ldr	r2, [r3, #4]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	441a      	add	r2, r3
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	68ba      	ldr	r2, [r7, #8]
 8007918:	441a      	add	r2, r3
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	429a      	cmp	r2, r3
 8007920:	d118      	bne.n	8007954 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	4b15      	ldr	r3, [pc, #84]	@ (800797c <prvInsertBlockIntoFreeList+0xb0>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	429a      	cmp	r2, r3
 800792c:	d00d      	beq.n	800794a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	685a      	ldr	r2, [r3, #4]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	441a      	add	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	601a      	str	r2, [r3, #0]
 8007948:	e008      	b.n	800795c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800794a:	4b0c      	ldr	r3, [pc, #48]	@ (800797c <prvInsertBlockIntoFreeList+0xb0>)
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	601a      	str	r2, [r3, #0]
 8007952:	e003      	b.n	800795c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	429a      	cmp	r2, r3
 8007962:	d002      	beq.n	800796a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800796a:	bf00      	nop
 800796c:	3714      	adds	r7, #20
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	20004d4c 	.word	0x20004d4c
 800797c:	20004d54 	.word	0x20004d54

08007980 <memset>:
 8007980:	4402      	add	r2, r0
 8007982:	4603      	mov	r3, r0
 8007984:	4293      	cmp	r3, r2
 8007986:	d100      	bne.n	800798a <memset+0xa>
 8007988:	4770      	bx	lr
 800798a:	f803 1b01 	strb.w	r1, [r3], #1
 800798e:	e7f9      	b.n	8007984 <memset+0x4>

08007990 <_reclaim_reent>:
 8007990:	4b29      	ldr	r3, [pc, #164]	@ (8007a38 <_reclaim_reent+0xa8>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4283      	cmp	r3, r0
 8007996:	b570      	push	{r4, r5, r6, lr}
 8007998:	4604      	mov	r4, r0
 800799a:	d04b      	beq.n	8007a34 <_reclaim_reent+0xa4>
 800799c:	69c3      	ldr	r3, [r0, #28]
 800799e:	b1ab      	cbz	r3, 80079cc <_reclaim_reent+0x3c>
 80079a0:	68db      	ldr	r3, [r3, #12]
 80079a2:	b16b      	cbz	r3, 80079c0 <_reclaim_reent+0x30>
 80079a4:	2500      	movs	r5, #0
 80079a6:	69e3      	ldr	r3, [r4, #28]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	5959      	ldr	r1, [r3, r5]
 80079ac:	2900      	cmp	r1, #0
 80079ae:	d13b      	bne.n	8007a28 <_reclaim_reent+0x98>
 80079b0:	3504      	adds	r5, #4
 80079b2:	2d80      	cmp	r5, #128	@ 0x80
 80079b4:	d1f7      	bne.n	80079a6 <_reclaim_reent+0x16>
 80079b6:	69e3      	ldr	r3, [r4, #28]
 80079b8:	4620      	mov	r0, r4
 80079ba:	68d9      	ldr	r1, [r3, #12]
 80079bc:	f000 f872 	bl	8007aa4 <_free_r>
 80079c0:	69e3      	ldr	r3, [r4, #28]
 80079c2:	6819      	ldr	r1, [r3, #0]
 80079c4:	b111      	cbz	r1, 80079cc <_reclaim_reent+0x3c>
 80079c6:	4620      	mov	r0, r4
 80079c8:	f000 f86c 	bl	8007aa4 <_free_r>
 80079cc:	6961      	ldr	r1, [r4, #20]
 80079ce:	b111      	cbz	r1, 80079d6 <_reclaim_reent+0x46>
 80079d0:	4620      	mov	r0, r4
 80079d2:	f000 f867 	bl	8007aa4 <_free_r>
 80079d6:	69e1      	ldr	r1, [r4, #28]
 80079d8:	b111      	cbz	r1, 80079e0 <_reclaim_reent+0x50>
 80079da:	4620      	mov	r0, r4
 80079dc:	f000 f862 	bl	8007aa4 <_free_r>
 80079e0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80079e2:	b111      	cbz	r1, 80079ea <_reclaim_reent+0x5a>
 80079e4:	4620      	mov	r0, r4
 80079e6:	f000 f85d 	bl	8007aa4 <_free_r>
 80079ea:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80079ec:	b111      	cbz	r1, 80079f4 <_reclaim_reent+0x64>
 80079ee:	4620      	mov	r0, r4
 80079f0:	f000 f858 	bl	8007aa4 <_free_r>
 80079f4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80079f6:	b111      	cbz	r1, 80079fe <_reclaim_reent+0x6e>
 80079f8:	4620      	mov	r0, r4
 80079fa:	f000 f853 	bl	8007aa4 <_free_r>
 80079fe:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007a00:	b111      	cbz	r1, 8007a08 <_reclaim_reent+0x78>
 8007a02:	4620      	mov	r0, r4
 8007a04:	f000 f84e 	bl	8007aa4 <_free_r>
 8007a08:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007a0a:	b111      	cbz	r1, 8007a12 <_reclaim_reent+0x82>
 8007a0c:	4620      	mov	r0, r4
 8007a0e:	f000 f849 	bl	8007aa4 <_free_r>
 8007a12:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007a14:	b111      	cbz	r1, 8007a1c <_reclaim_reent+0x8c>
 8007a16:	4620      	mov	r0, r4
 8007a18:	f000 f844 	bl	8007aa4 <_free_r>
 8007a1c:	6a23      	ldr	r3, [r4, #32]
 8007a1e:	b14b      	cbz	r3, 8007a34 <_reclaim_reent+0xa4>
 8007a20:	4620      	mov	r0, r4
 8007a22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007a26:	4718      	bx	r3
 8007a28:	680e      	ldr	r6, [r1, #0]
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	f000 f83a 	bl	8007aa4 <_free_r>
 8007a30:	4631      	mov	r1, r6
 8007a32:	e7bb      	b.n	80079ac <_reclaim_reent+0x1c>
 8007a34:	bd70      	pop	{r4, r5, r6, pc}
 8007a36:	bf00      	nop
 8007a38:	20000010 	.word	0x20000010

08007a3c <__libc_init_array>:
 8007a3c:	b570      	push	{r4, r5, r6, lr}
 8007a3e:	4d0d      	ldr	r5, [pc, #52]	@ (8007a74 <__libc_init_array+0x38>)
 8007a40:	4c0d      	ldr	r4, [pc, #52]	@ (8007a78 <__libc_init_array+0x3c>)
 8007a42:	1b64      	subs	r4, r4, r5
 8007a44:	10a4      	asrs	r4, r4, #2
 8007a46:	2600      	movs	r6, #0
 8007a48:	42a6      	cmp	r6, r4
 8007a4a:	d109      	bne.n	8007a60 <__libc_init_array+0x24>
 8007a4c:	4d0b      	ldr	r5, [pc, #44]	@ (8007a7c <__libc_init_array+0x40>)
 8007a4e:	4c0c      	ldr	r4, [pc, #48]	@ (8007a80 <__libc_init_array+0x44>)
 8007a50:	f000 f87e 	bl	8007b50 <_init>
 8007a54:	1b64      	subs	r4, r4, r5
 8007a56:	10a4      	asrs	r4, r4, #2
 8007a58:	2600      	movs	r6, #0
 8007a5a:	42a6      	cmp	r6, r4
 8007a5c:	d105      	bne.n	8007a6a <__libc_init_array+0x2e>
 8007a5e:	bd70      	pop	{r4, r5, r6, pc}
 8007a60:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a64:	4798      	blx	r3
 8007a66:	3601      	adds	r6, #1
 8007a68:	e7ee      	b.n	8007a48 <__libc_init_array+0xc>
 8007a6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a6e:	4798      	blx	r3
 8007a70:	3601      	adds	r6, #1
 8007a72:	e7f2      	b.n	8007a5a <__libc_init_array+0x1e>
 8007a74:	08007d64 	.word	0x08007d64
 8007a78:	08007d64 	.word	0x08007d64
 8007a7c:	08007d64 	.word	0x08007d64
 8007a80:	08007d68 	.word	0x08007d68

08007a84 <__retarget_lock_acquire_recursive>:
 8007a84:	4770      	bx	lr

08007a86 <__retarget_lock_release_recursive>:
 8007a86:	4770      	bx	lr

08007a88 <memcpy>:
 8007a88:	440a      	add	r2, r1
 8007a8a:	4291      	cmp	r1, r2
 8007a8c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007a90:	d100      	bne.n	8007a94 <memcpy+0xc>
 8007a92:	4770      	bx	lr
 8007a94:	b510      	push	{r4, lr}
 8007a96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a9e:	4291      	cmp	r1, r2
 8007aa0:	d1f9      	bne.n	8007a96 <memcpy+0xe>
 8007aa2:	bd10      	pop	{r4, pc}

08007aa4 <_free_r>:
 8007aa4:	b538      	push	{r3, r4, r5, lr}
 8007aa6:	4605      	mov	r5, r0
 8007aa8:	2900      	cmp	r1, #0
 8007aaa:	d041      	beq.n	8007b30 <_free_r+0x8c>
 8007aac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ab0:	1f0c      	subs	r4, r1, #4
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	bfb8      	it	lt
 8007ab6:	18e4      	addlt	r4, r4, r3
 8007ab8:	f000 f83e 	bl	8007b38 <__malloc_lock>
 8007abc:	4a1d      	ldr	r2, [pc, #116]	@ (8007b34 <_free_r+0x90>)
 8007abe:	6813      	ldr	r3, [r2, #0]
 8007ac0:	b933      	cbnz	r3, 8007ad0 <_free_r+0x2c>
 8007ac2:	6063      	str	r3, [r4, #4]
 8007ac4:	6014      	str	r4, [r2, #0]
 8007ac6:	4628      	mov	r0, r5
 8007ac8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007acc:	f000 b83a 	b.w	8007b44 <__malloc_unlock>
 8007ad0:	42a3      	cmp	r3, r4
 8007ad2:	d908      	bls.n	8007ae6 <_free_r+0x42>
 8007ad4:	6820      	ldr	r0, [r4, #0]
 8007ad6:	1821      	adds	r1, r4, r0
 8007ad8:	428b      	cmp	r3, r1
 8007ada:	bf01      	itttt	eq
 8007adc:	6819      	ldreq	r1, [r3, #0]
 8007ade:	685b      	ldreq	r3, [r3, #4]
 8007ae0:	1809      	addeq	r1, r1, r0
 8007ae2:	6021      	streq	r1, [r4, #0]
 8007ae4:	e7ed      	b.n	8007ac2 <_free_r+0x1e>
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	b10b      	cbz	r3, 8007af0 <_free_r+0x4c>
 8007aec:	42a3      	cmp	r3, r4
 8007aee:	d9fa      	bls.n	8007ae6 <_free_r+0x42>
 8007af0:	6811      	ldr	r1, [r2, #0]
 8007af2:	1850      	adds	r0, r2, r1
 8007af4:	42a0      	cmp	r0, r4
 8007af6:	d10b      	bne.n	8007b10 <_free_r+0x6c>
 8007af8:	6820      	ldr	r0, [r4, #0]
 8007afa:	4401      	add	r1, r0
 8007afc:	1850      	adds	r0, r2, r1
 8007afe:	4283      	cmp	r3, r0
 8007b00:	6011      	str	r1, [r2, #0]
 8007b02:	d1e0      	bne.n	8007ac6 <_free_r+0x22>
 8007b04:	6818      	ldr	r0, [r3, #0]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	6053      	str	r3, [r2, #4]
 8007b0a:	4408      	add	r0, r1
 8007b0c:	6010      	str	r0, [r2, #0]
 8007b0e:	e7da      	b.n	8007ac6 <_free_r+0x22>
 8007b10:	d902      	bls.n	8007b18 <_free_r+0x74>
 8007b12:	230c      	movs	r3, #12
 8007b14:	602b      	str	r3, [r5, #0]
 8007b16:	e7d6      	b.n	8007ac6 <_free_r+0x22>
 8007b18:	6820      	ldr	r0, [r4, #0]
 8007b1a:	1821      	adds	r1, r4, r0
 8007b1c:	428b      	cmp	r3, r1
 8007b1e:	bf04      	itt	eq
 8007b20:	6819      	ldreq	r1, [r3, #0]
 8007b22:	685b      	ldreq	r3, [r3, #4]
 8007b24:	6063      	str	r3, [r4, #4]
 8007b26:	bf04      	itt	eq
 8007b28:	1809      	addeq	r1, r1, r0
 8007b2a:	6021      	streq	r1, [r4, #0]
 8007b2c:	6054      	str	r4, [r2, #4]
 8007b2e:	e7ca      	b.n	8007ac6 <_free_r+0x22>
 8007b30:	bd38      	pop	{r3, r4, r5, pc}
 8007b32:	bf00      	nop
 8007b34:	20004ea8 	.word	0x20004ea8

08007b38 <__malloc_lock>:
 8007b38:	4801      	ldr	r0, [pc, #4]	@ (8007b40 <__malloc_lock+0x8>)
 8007b3a:	f7ff bfa3 	b.w	8007a84 <__retarget_lock_acquire_recursive>
 8007b3e:	bf00      	nop
 8007b40:	20004ea4 	.word	0x20004ea4

08007b44 <__malloc_unlock>:
 8007b44:	4801      	ldr	r0, [pc, #4]	@ (8007b4c <__malloc_unlock+0x8>)
 8007b46:	f7ff bf9e 	b.w	8007a86 <__retarget_lock_release_recursive>
 8007b4a:	bf00      	nop
 8007b4c:	20004ea4 	.word	0x20004ea4

08007b50 <_init>:
 8007b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b52:	bf00      	nop
 8007b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b56:	bc08      	pop	{r3}
 8007b58:	469e      	mov	lr, r3
 8007b5a:	4770      	bx	lr

08007b5c <_fini>:
 8007b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b5e:	bf00      	nop
 8007b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b62:	bc08      	pop	{r3}
 8007b64:	469e      	mov	lr, r3
 8007b66:	4770      	bx	lr
