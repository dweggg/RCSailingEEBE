
RCSailingEEBE_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008368  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  08008508  08008508  00009508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086fc  080086fc  0000a070  2**0
                  CONTENTS
  4 .ARM          00000008  080086fc  080086fc  000096fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008704  08008704  0000a070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008704  08008704  00009704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008708  08008708  00009708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800870c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e94  20000070  0800877c  0000a070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004f04  0800877c  0000af04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f1b9  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047ea  00000000  00000000  00029259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a08  00000000  00000000  0002da48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001435  00000000  00000000  0002f450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b72a  00000000  00000000  00030885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fd79  00000000  00000000  0004bfaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6d60  00000000  00000000  0006bd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00112a88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006edc  00000000  00000000  00112acc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001199a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080084f0 	.word	0x080084f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080084f0 	.word	0x080084f0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <adc_read>:
float extra1Offset = 0.0f;

float extra2Gain = 1.0f;
float extra2Offset = 0.0f;

void adc_read(void) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
    // Start ADC conversion using DMA
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_raw_readings, 4);
 80004d6:	2204      	movs	r2, #4
 80004d8:	492d      	ldr	r1, [pc, #180]	@ (8000590 <adc_read+0xc0>)
 80004da:	482e      	ldr	r0, [pc, #184]	@ (8000594 <adc_read+0xc4>)
 80004dc:	f001 f908 	bl	80016f0 <HAL_ADC_Start_DMA>

    // Create a struct to hold the processed ADC data
    AdcData_t adcData;
    adcData.windDirection = ((float)adc_raw_readings[0] * windDirectionGain) - windDirectionOffset;
 80004e0:	4b2b      	ldr	r3, [pc, #172]	@ (8000590 <adc_read+0xc0>)
 80004e2:	881b      	ldrh	r3, [r3, #0]
 80004e4:	b29b      	uxth	r3, r3
 80004e6:	ee07 3a90 	vmov	s15, r3
 80004ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80004ee:	4b2a      	ldr	r3, [pc, #168]	@ (8000598 <adc_read+0xc8>)
 80004f0:	edd3 7a00 	vldr	s15, [r3]
 80004f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80004f8:	4b28      	ldr	r3, [pc, #160]	@ (800059c <adc_read+0xcc>)
 80004fa:	edd3 7a00 	vldr	s15, [r3]
 80004fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000502:	edc7 7a00 	vstr	s15, [r7]
    adcData.batteryVoltage = ((float)adc_raw_readings[1] * batteryVoltageGain) - batteryVoltageOffset;
 8000506:	4b22      	ldr	r3, [pc, #136]	@ (8000590 <adc_read+0xc0>)
 8000508:	885b      	ldrh	r3, [r3, #2]
 800050a:	b29b      	uxth	r3, r3
 800050c:	ee07 3a90 	vmov	s15, r3
 8000510:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000514:	4b22      	ldr	r3, [pc, #136]	@ (80005a0 <adc_read+0xd0>)
 8000516:	edd3 7a00 	vldr	s15, [r3]
 800051a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800051e:	4b21      	ldr	r3, [pc, #132]	@ (80005a4 <adc_read+0xd4>)
 8000520:	edd3 7a00 	vldr	s15, [r3]
 8000524:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000528:	edc7 7a01 	vstr	s15, [r7, #4]
    adcData.extra1 = ((float)adc_raw_readings[2] * extra1Gain) - extra1Offset;
 800052c:	4b18      	ldr	r3, [pc, #96]	@ (8000590 <adc_read+0xc0>)
 800052e:	889b      	ldrh	r3, [r3, #4]
 8000530:	b29b      	uxth	r3, r3
 8000532:	ee07 3a90 	vmov	s15, r3
 8000536:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800053a:	4b1b      	ldr	r3, [pc, #108]	@ (80005a8 <adc_read+0xd8>)
 800053c:	edd3 7a00 	vldr	s15, [r3]
 8000540:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000544:	4b19      	ldr	r3, [pc, #100]	@ (80005ac <adc_read+0xdc>)
 8000546:	edd3 7a00 	vldr	s15, [r3]
 800054a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800054e:	edc7 7a02 	vstr	s15, [r7, #8]
    adcData.extra2 = ((float)adc_raw_readings[3] * extra2Gain) - extra2Offset;
 8000552:	4b0f      	ldr	r3, [pc, #60]	@ (8000590 <adc_read+0xc0>)
 8000554:	88db      	ldrh	r3, [r3, #6]
 8000556:	b29b      	uxth	r3, r3
 8000558:	ee07 3a90 	vmov	s15, r3
 800055c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000560:	4b13      	ldr	r3, [pc, #76]	@ (80005b0 <adc_read+0xe0>)
 8000562:	edd3 7a00 	vldr	s15, [r3]
 8000566:	ee27 7a27 	vmul.f32	s14, s14, s15
 800056a:	4b12      	ldr	r3, [pc, #72]	@ (80005b4 <adc_read+0xe4>)
 800056c:	edd3 7a00 	vldr	s15, [r3]
 8000570:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000574:	edc7 7a03 	vstr	s15, [r7, #12]

    // Send the struct to the ADC queue, overwriting previous value if full
    osMessageQueuePut(adcQueueHandle, &adcData, 0, 0);
 8000578:	4b0f      	ldr	r3, [pc, #60]	@ (80005b8 <adc_read+0xe8>)
 800057a:	6818      	ldr	r0, [r3, #0]
 800057c:	4639      	mov	r1, r7
 800057e:	2300      	movs	r3, #0
 8000580:	2200      	movs	r2, #0
 8000582:	f004 fedd 	bl	8005340 <osMessageQueuePut>
}
 8000586:	bf00      	nop
 8000588:	3710      	adds	r7, #16
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	2000008c 	.word	0x2000008c
 8000594:	200000b4 	.word	0x200000b4
 8000598:	20000000 	.word	0x20000000
 800059c:	20000094 	.word	0x20000094
 80005a0:	20000004 	.word	0x20000004
 80005a4:	20000098 	.word	0x20000098
 80005a8:	20000008 	.word	0x20000008
 80005ac:	2000009c 	.word	0x2000009c
 80005b0:	2000000c 	.word	0x2000000c
 80005b4:	200000a0 	.word	0x200000a0
 80005b8:	20000188 	.word	0x20000188

080005bc <control>:
extern osMessageQueueId_t adcQueueHandle;

// Buffer to store latest ADC data
volatile AdcData_t adcDataReceived;

void control(void) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
    while (1) {
        // Wait indefinitely for new ADC data
        osMessageQueueGet(adcQueueHandle, (void*)&adcDataReceived, NULL, osWaitForever);
 80005c0:	4b04      	ldr	r3, [pc, #16]	@ (80005d4 <control+0x18>)
 80005c2:	6818      	ldr	r0, [r3, #0]
 80005c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005c8:	2200      	movs	r2, #0
 80005ca:	4903      	ldr	r1, [pc, #12]	@ (80005d8 <control+0x1c>)
 80005cc:	f004 ff18 	bl	8005400 <osMessageQueueGet>
 80005d0:	e7f6      	b.n	80005c0 <control+0x4>
 80005d2:	bf00      	nop
 80005d4:	20000188 	.word	0x20000188
 80005d8:	200000a4 	.word	0x200000a4

080005dc <imu_read>:
 *      Author: dweggg
 */

#include "IMU.h"

void imu_read(void){
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0

}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <telemetry>:
 *      Author: dweggg
 */

#include "TELEMETRY.h"

void telemetry(void){
 80005ea:	b480      	push	{r7}
 80005ec:	af00      	add	r7, sp, #0

}
 80005ee:	bf00      	nop
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr

080005f8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005fe:	463b      	mov	r3, r7
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800060a:	4b36      	ldr	r3, [pc, #216]	@ (80006e4 <MX_ADC1_Init+0xec>)
 800060c:	4a36      	ldr	r2, [pc, #216]	@ (80006e8 <MX_ADC1_Init+0xf0>)
 800060e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000610:	4b34      	ldr	r3, [pc, #208]	@ (80006e4 <MX_ADC1_Init+0xec>)
 8000612:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000616:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000618:	4b32      	ldr	r3, [pc, #200]	@ (80006e4 <MX_ADC1_Init+0xec>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800061e:	4b31      	ldr	r3, [pc, #196]	@ (80006e4 <MX_ADC1_Init+0xec>)
 8000620:	2201      	movs	r2, #1
 8000622:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000624:	4b2f      	ldr	r3, [pc, #188]	@ (80006e4 <MX_ADC1_Init+0xec>)
 8000626:	2200      	movs	r2, #0
 8000628:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800062a:	4b2e      	ldr	r3, [pc, #184]	@ (80006e4 <MX_ADC1_Init+0xec>)
 800062c:	2200      	movs	r2, #0
 800062e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000632:	4b2c      	ldr	r3, [pc, #176]	@ (80006e4 <MX_ADC1_Init+0xec>)
 8000634:	2200      	movs	r2, #0
 8000636:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000638:	4b2a      	ldr	r3, [pc, #168]	@ (80006e4 <MX_ADC1_Init+0xec>)
 800063a:	4a2c      	ldr	r2, [pc, #176]	@ (80006ec <MX_ADC1_Init+0xf4>)
 800063c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800063e:	4b29      	ldr	r3, [pc, #164]	@ (80006e4 <MX_ADC1_Init+0xec>)
 8000640:	2200      	movs	r2, #0
 8000642:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000644:	4b27      	ldr	r3, [pc, #156]	@ (80006e4 <MX_ADC1_Init+0xec>)
 8000646:	2204      	movs	r2, #4
 8000648:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800064a:	4b26      	ldr	r3, [pc, #152]	@ (80006e4 <MX_ADC1_Init+0xec>)
 800064c:	2201      	movs	r2, #1
 800064e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000652:	4b24      	ldr	r3, [pc, #144]	@ (80006e4 <MX_ADC1_Init+0xec>)
 8000654:	2200      	movs	r2, #0
 8000656:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000658:	4822      	ldr	r0, [pc, #136]	@ (80006e4 <MX_ADC1_Init+0xec>)
 800065a:	f001 f805 	bl	8001668 <HAL_ADC_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000664:	f000 fb64 	bl	8000d30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000668:	2301      	movs	r3, #1
 800066a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800066c:	2301      	movs	r3, #1
 800066e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000670:	2300      	movs	r3, #0
 8000672:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000674:	463b      	mov	r3, r7
 8000676:	4619      	mov	r1, r3
 8000678:	481a      	ldr	r0, [pc, #104]	@ (80006e4 <MX_ADC1_Init+0xec>)
 800067a:	f001 f947 	bl	800190c <HAL_ADC_ConfigChannel>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000684:	f000 fb54 	bl	8000d30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000688:	2302      	movs	r3, #2
 800068a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800068c:	2302      	movs	r3, #2
 800068e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000690:	463b      	mov	r3, r7
 8000692:	4619      	mov	r1, r3
 8000694:	4813      	ldr	r0, [pc, #76]	@ (80006e4 <MX_ADC1_Init+0xec>)
 8000696:	f001 f939 	bl	800190c <HAL_ADC_ConfigChannel>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80006a0:	f000 fb46 	bl	8000d30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006a4:	2303      	movs	r3, #3
 80006a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80006a8:	2303      	movs	r3, #3
 80006aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ac:	463b      	mov	r3, r7
 80006ae:	4619      	mov	r1, r3
 80006b0:	480c      	ldr	r0, [pc, #48]	@ (80006e4 <MX_ADC1_Init+0xec>)
 80006b2:	f001 f92b 	bl	800190c <HAL_ADC_ConfigChannel>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80006bc:	f000 fb38 	bl	8000d30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c0:	2304      	movs	r3, #4
 80006c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80006c4:	2304      	movs	r3, #4
 80006c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c8:	463b      	mov	r3, r7
 80006ca:	4619      	mov	r1, r3
 80006cc:	4805      	ldr	r0, [pc, #20]	@ (80006e4 <MX_ADC1_Init+0xec>)
 80006ce:	f001 f91d 	bl	800190c <HAL_ADC_ConfigChannel>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80006d8:	f000 fb2a 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006dc:	bf00      	nop
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	200000b4 	.word	0x200000b4
 80006e8:	40012000 	.word	0x40012000
 80006ec:	0f000001 	.word	0x0f000001

080006f0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08a      	sub	sp, #40	@ 0x28
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a2f      	ldr	r2, [pc, #188]	@ (80007cc <HAL_ADC_MspInit+0xdc>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d157      	bne.n	80007c2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	613b      	str	r3, [r7, #16]
 8000716:	4b2e      	ldr	r3, [pc, #184]	@ (80007d0 <HAL_ADC_MspInit+0xe0>)
 8000718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800071a:	4a2d      	ldr	r2, [pc, #180]	@ (80007d0 <HAL_ADC_MspInit+0xe0>)
 800071c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000720:	6453      	str	r3, [r2, #68]	@ 0x44
 8000722:	4b2b      	ldr	r3, [pc, #172]	@ (80007d0 <HAL_ADC_MspInit+0xe0>)
 8000724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800072a:	613b      	str	r3, [r7, #16]
 800072c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	60fb      	str	r3, [r7, #12]
 8000732:	4b27      	ldr	r3, [pc, #156]	@ (80007d0 <HAL_ADC_MspInit+0xe0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	4a26      	ldr	r2, [pc, #152]	@ (80007d0 <HAL_ADC_MspInit+0xe0>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6313      	str	r3, [r2, #48]	@ 0x30
 800073e:	4b24      	ldr	r3, [pc, #144]	@ (80007d0 <HAL_ADC_MspInit+0xe0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ANALOG1_Pin|ANALOG2_Pin|ANALOG3_Pin|ANALOG4_Pin;
 800074a:	231e      	movs	r3, #30
 800074c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800074e:	2303      	movs	r3, #3
 8000750:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	4619      	mov	r1, r3
 800075c:	481d      	ldr	r0, [pc, #116]	@ (80007d4 <HAL_ADC_MspInit+0xe4>)
 800075e:	f001 ffc7 	bl	80026f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000762:	4b1d      	ldr	r3, [pc, #116]	@ (80007d8 <HAL_ADC_MspInit+0xe8>)
 8000764:	4a1d      	ldr	r2, [pc, #116]	@ (80007dc <HAL_ADC_MspInit+0xec>)
 8000766:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000768:	4b1b      	ldr	r3, [pc, #108]	@ (80007d8 <HAL_ADC_MspInit+0xe8>)
 800076a:	2200      	movs	r2, #0
 800076c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800076e:	4b1a      	ldr	r3, [pc, #104]	@ (80007d8 <HAL_ADC_MspInit+0xe8>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000774:	4b18      	ldr	r3, [pc, #96]	@ (80007d8 <HAL_ADC_MspInit+0xe8>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800077a:	4b17      	ldr	r3, [pc, #92]	@ (80007d8 <HAL_ADC_MspInit+0xe8>)
 800077c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000780:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000782:	4b15      	ldr	r3, [pc, #84]	@ (80007d8 <HAL_ADC_MspInit+0xe8>)
 8000784:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000788:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800078a:	4b13      	ldr	r3, [pc, #76]	@ (80007d8 <HAL_ADC_MspInit+0xe8>)
 800078c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000790:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000792:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <HAL_ADC_MspInit+0xe8>)
 8000794:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000798:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800079a:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <HAL_ADC_MspInit+0xe8>)
 800079c:	2200      	movs	r2, #0
 800079e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80007a0:	4b0d      	ldr	r3, [pc, #52]	@ (80007d8 <HAL_ADC_MspInit+0xe8>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007a6:	480c      	ldr	r0, [pc, #48]	@ (80007d8 <HAL_ADC_MspInit+0xe8>)
 80007a8:	f001 fc32 	bl	8002010 <HAL_DMA_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80007b2:	f000 fabd 	bl	8000d30 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4a07      	ldr	r2, [pc, #28]	@ (80007d8 <HAL_ADC_MspInit+0xe8>)
 80007ba:	639a      	str	r2, [r3, #56]	@ 0x38
 80007bc:	4a06      	ldr	r2, [pc, #24]	@ (80007d8 <HAL_ADC_MspInit+0xe8>)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80007c2:	bf00      	nop
 80007c4:	3728      	adds	r7, #40	@ 0x28
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40012000 	.word	0x40012000
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40020000 	.word	0x40020000
 80007d8:	200000fc 	.word	0x200000fc
 80007dc:	40026410 	.word	0x40026410

080007e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	4b0c      	ldr	r3, [pc, #48]	@ (800081c <MX_DMA_Init+0x3c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	4a0b      	ldr	r2, [pc, #44]	@ (800081c <MX_DMA_Init+0x3c>)
 80007f0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80007f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f6:	4b09      	ldr	r3, [pc, #36]	@ (800081c <MX_DMA_Init+0x3c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000802:	2200      	movs	r2, #0
 8000804:	2105      	movs	r1, #5
 8000806:	2038      	movs	r0, #56	@ 0x38
 8000808:	f001 fbd8 	bl	8001fbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800080c:	2038      	movs	r0, #56	@ 0x38
 800080e:	f001 fbf1 	bl	8001ff4 <HAL_NVIC_EnableIRQ>

}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40023800 	.word	0x40023800

08000820 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim11);
 8000824:	4802      	ldr	r0, [pc, #8]	@ (8000830 <configureTimerForRunTimeStats+0x10>)
 8000826:	f002 ff05 	bl	8003634 <HAL_TIM_Base_Start_IT>
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	200002e4 	.word	0x200002e4

08000834 <getRunTimeCounterValue>:

extern volatile unsigned long ulHighFrequencyTimerTicks;
__weak unsigned long getRunTimeCounterValue(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 8000838:	4b03      	ldr	r3, [pc, #12]	@ (8000848 <getRunTimeCounterValue+0x14>)
 800083a:	681b      	ldr	r3, [r3, #0]
}
 800083c:	4618      	mov	r0, r3
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	20000230 	.word	0x20000230

0800084c <PreSleepProcessing>:
/* USER CODE END 1 */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8000868:	bf00      	nop
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr

08000874 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

	// Start all 4 input captures
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000878:	2100      	movs	r1, #0
 800087a:	4838      	ldr	r0, [pc, #224]	@ (800095c <MX_FREERTOS_Init+0xe8>)
 800087c:	f002 ffe4 	bl	8003848 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8000880:	2104      	movs	r1, #4
 8000882:	4836      	ldr	r0, [pc, #216]	@ (800095c <MX_FREERTOS_Init+0xe8>)
 8000884:	f002 ffe0 	bl	8003848 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8000888:	2108      	movs	r1, #8
 800088a:	4834      	ldr	r0, [pc, #208]	@ (800095c <MX_FREERTOS_Init+0xe8>)
 800088c:	f002 ffdc 	bl	8003848 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 8000890:	210c      	movs	r1, #12
 8000892:	4832      	ldr	r0, [pc, #200]	@ (800095c <MX_FREERTOS_Init+0xe8>)
 8000894:	f002 ffd8 	bl	8003848 <HAL_TIM_IC_Start_IT>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of radioQueue */
  radioQueueHandle = osMessageQueueNew (1, sizeof(RadioData_t), &radioQueue_attributes);
 8000898:	4a31      	ldr	r2, [pc, #196]	@ (8000960 <MX_FREERTOS_Init+0xec>)
 800089a:	2110      	movs	r1, #16
 800089c:	2001      	movs	r0, #1
 800089e:	f004 fcdc 	bl	800525a <osMessageQueueNew>
 80008a2:	4603      	mov	r3, r0
 80008a4:	4a2f      	ldr	r2, [pc, #188]	@ (8000964 <MX_FREERTOS_Init+0xf0>)
 80008a6:	6013      	str	r3, [r2, #0]

  /* creation of adcQueue */
  adcQueueHandle = osMessageQueueNew (1, sizeof(AdcData_t), &adcQueue_attributes);
 80008a8:	4a2f      	ldr	r2, [pc, #188]	@ (8000968 <MX_FREERTOS_Init+0xf4>)
 80008aa:	2110      	movs	r1, #16
 80008ac:	2001      	movs	r0, #1
 80008ae:	f004 fcd4 	bl	800525a <osMessageQueueNew>
 80008b2:	4603      	mov	r3, r0
 80008b4:	4a2d      	ldr	r2, [pc, #180]	@ (800096c <MX_FREERTOS_Init+0xf8>)
 80008b6:	6013      	str	r3, [r2, #0]

  /* creation of imuQueue */
  imuQueueHandle = osMessageQueueNew (1, sizeof(ImuData_t), &imuQueue_attributes);
 80008b8:	4a2d      	ldr	r2, [pc, #180]	@ (8000970 <MX_FREERTOS_Init+0xfc>)
 80008ba:	2130      	movs	r1, #48	@ 0x30
 80008bc:	2001      	movs	r0, #1
 80008be:	f004 fccc 	bl	800525a <osMessageQueueNew>
 80008c2:	4603      	mov	r3, r0
 80008c4:	4a2b      	ldr	r2, [pc, #172]	@ (8000974 <MX_FREERTOS_Init+0x100>)
 80008c6:	6013      	str	r3, [r2, #0]

  /* creation of telemetryQueue */
  telemetryQueueHandle = osMessageQueueNew (1, sizeof(TelemetryData_t), &telemetryQueue_attributes);
 80008c8:	4a2b      	ldr	r2, [pc, #172]	@ (8000978 <MX_FREERTOS_Init+0x104>)
 80008ca:	2150      	movs	r1, #80	@ 0x50
 80008cc:	2001      	movs	r0, #1
 80008ce:	f004 fcc4 	bl	800525a <osMessageQueueNew>
 80008d2:	4603      	mov	r3, r0
 80008d4:	4a29      	ldr	r2, [pc, #164]	@ (800097c <MX_FREERTOS_Init+0x108>)
 80008d6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  // Allowing the kernel-aware debugger to get to know our queues
  vQueueAddToRegistry( radioQueueHandle, "radioQueue" );
 80008d8:	4b22      	ldr	r3, [pc, #136]	@ (8000964 <MX_FREERTOS_Init+0xf0>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4928      	ldr	r1, [pc, #160]	@ (8000980 <MX_FREERTOS_Init+0x10c>)
 80008de:	4618      	mov	r0, r3
 80008e0:	f005 fc2e 	bl	8006140 <vQueueAddToRegistry>
  vQueueAddToRegistry( adcQueueHandle, "adcQueue" );
 80008e4:	4b21      	ldr	r3, [pc, #132]	@ (800096c <MX_FREERTOS_Init+0xf8>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4926      	ldr	r1, [pc, #152]	@ (8000984 <MX_FREERTOS_Init+0x110>)
 80008ea:	4618      	mov	r0, r3
 80008ec:	f005 fc28 	bl	8006140 <vQueueAddToRegistry>
  vQueueAddToRegistry( imuQueueHandle, "imuQueue" );
 80008f0:	4b20      	ldr	r3, [pc, #128]	@ (8000974 <MX_FREERTOS_Init+0x100>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4924      	ldr	r1, [pc, #144]	@ (8000988 <MX_FREERTOS_Init+0x114>)
 80008f6:	4618      	mov	r0, r3
 80008f8:	f005 fc22 	bl	8006140 <vQueueAddToRegistry>
  vQueueAddToRegistry( telemetryQueueHandle, "telemetryQueue" );
 80008fc:	4b1f      	ldr	r3, [pc, #124]	@ (800097c <MX_FREERTOS_Init+0x108>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4922      	ldr	r1, [pc, #136]	@ (800098c <MX_FREERTOS_Init+0x118>)
 8000902:	4618      	mov	r0, r3
 8000904:	f005 fc1c 	bl	8006140 <vQueueAddToRegistry>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000908:	4a21      	ldr	r2, [pc, #132]	@ (8000990 <MX_FREERTOS_Init+0x11c>)
 800090a:	2100      	movs	r1, #0
 800090c:	4821      	ldr	r0, [pc, #132]	@ (8000994 <MX_FREERTOS_Init+0x120>)
 800090e:	f004 fbf7 	bl	8005100 <osThreadNew>
 8000912:	4603      	mov	r3, r0
 8000914:	4a20      	ldr	r2, [pc, #128]	@ (8000998 <MX_FREERTOS_Init+0x124>)
 8000916:	6013      	str	r3, [r2, #0]

  /* creation of control_task */
  control_taskHandle = osThreadNew(_control_task, NULL, &control_task_attributes);
 8000918:	4a20      	ldr	r2, [pc, #128]	@ (800099c <MX_FREERTOS_Init+0x128>)
 800091a:	2100      	movs	r1, #0
 800091c:	4820      	ldr	r0, [pc, #128]	@ (80009a0 <MX_FREERTOS_Init+0x12c>)
 800091e:	f004 fbef 	bl	8005100 <osThreadNew>
 8000922:	4603      	mov	r3, r0
 8000924:	4a1f      	ldr	r2, [pc, #124]	@ (80009a4 <MX_FREERTOS_Init+0x130>)
 8000926:	6013      	str	r3, [r2, #0]

  /* creation of imu_read_task */
  imu_read_taskHandle = osThreadNew(_imu_read_task, NULL, &imu_read_task_attributes);
 8000928:	4a1f      	ldr	r2, [pc, #124]	@ (80009a8 <MX_FREERTOS_Init+0x134>)
 800092a:	2100      	movs	r1, #0
 800092c:	481f      	ldr	r0, [pc, #124]	@ (80009ac <MX_FREERTOS_Init+0x138>)
 800092e:	f004 fbe7 	bl	8005100 <osThreadNew>
 8000932:	4603      	mov	r3, r0
 8000934:	4a1e      	ldr	r2, [pc, #120]	@ (80009b0 <MX_FREERTOS_Init+0x13c>)
 8000936:	6013      	str	r3, [r2, #0]

  /* creation of adc_read_task */
  adc_read_taskHandle = osThreadNew(_adc_read_task, NULL, &adc_read_task_attributes);
 8000938:	4a1e      	ldr	r2, [pc, #120]	@ (80009b4 <MX_FREERTOS_Init+0x140>)
 800093a:	2100      	movs	r1, #0
 800093c:	481e      	ldr	r0, [pc, #120]	@ (80009b8 <MX_FREERTOS_Init+0x144>)
 800093e:	f004 fbdf 	bl	8005100 <osThreadNew>
 8000942:	4603      	mov	r3, r0
 8000944:	4a1d      	ldr	r2, [pc, #116]	@ (80009bc <MX_FREERTOS_Init+0x148>)
 8000946:	6013      	str	r3, [r2, #0]

  /* creation of telemetry_task */
  telemetry_taskHandle = osThreadNew(_telemetry_task, NULL, &telemetry_task_attributes);
 8000948:	4a1d      	ldr	r2, [pc, #116]	@ (80009c0 <MX_FREERTOS_Init+0x14c>)
 800094a:	2100      	movs	r1, #0
 800094c:	481d      	ldr	r0, [pc, #116]	@ (80009c4 <MX_FREERTOS_Init+0x150>)
 800094e:	f004 fbd7 	bl	8005100 <osThreadNew>
 8000952:	4603      	mov	r3, r0
 8000954:	4a1c      	ldr	r2, [pc, #112]	@ (80009c8 <MX_FREERTOS_Init+0x154>)
 8000956:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000254 	.word	0x20000254
 8000960:	0800867c 	.word	0x0800867c
 8000964:	20000184 	.word	0x20000184
 8000968:	08008694 	.word	0x08008694
 800096c:	20000188 	.word	0x20000188
 8000970:	080086ac 	.word	0x080086ac
 8000974:	2000018c 	.word	0x2000018c
 8000978:	080086c4 	.word	0x080086c4
 800097c:	20000190 	.word	0x20000190
 8000980:	08008554 	.word	0x08008554
 8000984:	08008560 	.word	0x08008560
 8000988:	0800856c 	.word	0x0800856c
 800098c:	08008578 	.word	0x08008578
 8000990:	080085c8 	.word	0x080085c8
 8000994:	080009cd 	.word	0x080009cd
 8000998:	20000170 	.word	0x20000170
 800099c:	080085ec 	.word	0x080085ec
 80009a0:	080009ed 	.word	0x080009ed
 80009a4:	20000174 	.word	0x20000174
 80009a8:	08008610 	.word	0x08008610
 80009ac:	08000a11 	.word	0x08000a11
 80009b0:	20000178 	.word	0x20000178
 80009b4:	08008634 	.word	0x08008634
 80009b8:	08000a35 	.word	0x08000a35
 80009bc:	2000017c 	.word	0x2000017c
 80009c0:	08008658 	.word	0x08008658
 80009c4:	08000a59 	.word	0x08000a59
 80009c8:	20000180 	.word	0x20000180

080009cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	idle_dummy++; // Keep incrementing the dummy variable
 80009d4:	4b04      	ldr	r3, [pc, #16]	@ (80009e8 <StartDefaultTask+0x1c>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	3301      	adds	r3, #1
 80009da:	4a03      	ldr	r2, [pc, #12]	@ (80009e8 <StartDefaultTask+0x1c>)
 80009dc:	6013      	str	r3, [r2, #0]
    osDelay(1); // A small delay to avoid task starvation
 80009de:	2001      	movs	r0, #1
 80009e0:	f004 fc20 	bl	8005224 <osDelay>
	idle_dummy++; // Keep incrementing the dummy variable
 80009e4:	bf00      	nop
 80009e6:	e7f5      	b.n	80009d4 <StartDefaultTask+0x8>
 80009e8:	2000015c 	.word	0x2000015c

080009ec <_control_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header__control_task */
void _control_task(void *argument)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN _control_task */
  for(;;)
  {
	control_dummy++;
 80009f4:	4b05      	ldr	r3, [pc, #20]	@ (8000a0c <_control_task+0x20>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	3301      	adds	r3, #1
 80009fa:	4a04      	ldr	r2, [pc, #16]	@ (8000a0c <_control_task+0x20>)
 80009fc:	6013      	str	r3, [r2, #0]
    control(); // Execute control function
 80009fe:	f7ff fddd 	bl	80005bc <control>
    osDelay(CONTROL_DELAY);
 8000a02:	200a      	movs	r0, #10
 8000a04:	f004 fc0e 	bl	8005224 <osDelay>
	control_dummy++;
 8000a08:	bf00      	nop
 8000a0a:	e7f3      	b.n	80009f4 <_control_task+0x8>
 8000a0c:	20000160 	.word	0x20000160

08000a10 <_imu_read_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header__imu_read_task */
void _imu_read_task(void *argument)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN _imu_read_task */
  for(;;)
  {
	imu_dummy++;
 8000a18:	4b05      	ldr	r3, [pc, #20]	@ (8000a30 <_imu_read_task+0x20>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	4a04      	ldr	r2, [pc, #16]	@ (8000a30 <_imu_read_task+0x20>)
 8000a20:	6013      	str	r3, [r2, #0]
    imu_read(); // Execute imu read function
 8000a22:	f7ff fddb 	bl	80005dc <imu_read>
    osDelay(IMU_DELAY);
 8000a26:	2019      	movs	r0, #25
 8000a28:	f004 fbfc 	bl	8005224 <osDelay>
	imu_dummy++;
 8000a2c:	bf00      	nop
 8000a2e:	e7f3      	b.n	8000a18 <_imu_read_task+0x8>
 8000a30:	20000168 	.word	0x20000168

08000a34 <_adc_read_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header__adc_read_task */
void _adc_read_task(void *argument)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN _adc_read_task */
  for(;;)
  {
	adc_dummy++;
 8000a3c:	4b05      	ldr	r3, [pc, #20]	@ (8000a54 <_adc_read_task+0x20>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	3301      	adds	r3, #1
 8000a42:	4a04      	ldr	r2, [pc, #16]	@ (8000a54 <_adc_read_task+0x20>)
 8000a44:	6013      	str	r3, [r2, #0]
    adc_read(); // Execute ADC read function
 8000a46:	f7ff fd43 	bl	80004d0 <adc_read>
    osDelay(ADC_DELAY);
 8000a4a:	2019      	movs	r0, #25
 8000a4c:	f004 fbea 	bl	8005224 <osDelay>
	adc_dummy++;
 8000a50:	bf00      	nop
 8000a52:	e7f3      	b.n	8000a3c <_adc_read_task+0x8>
 8000a54:	2000016c 	.word	0x2000016c

08000a58 <_telemetry_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header__telemetry_task */
void _telemetry_task(void *argument)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN _telemetry_task */
  for(;;)
  {
	telemetry_dummy++;
 8000a60:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <_telemetry_task+0x24>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	3301      	adds	r3, #1
 8000a66:	4a05      	ldr	r2, [pc, #20]	@ (8000a7c <_telemetry_task+0x24>)
 8000a68:	6013      	str	r3, [r2, #0]
    telemetry(); // Execute telemetry function
 8000a6a:	f7ff fdbe 	bl	80005ea <telemetry>
    osDelay(TELEMETRY_DELAY);
 8000a6e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a72:	f004 fbd7 	bl	8005224 <osDelay>
	telemetry_dummy++;
 8000a76:	bf00      	nop
 8000a78:	e7f2      	b.n	8000a60 <_telemetry_task+0x8>
 8000a7a:	bf00      	nop
 8000a7c:	20000164 	.word	0x20000164

08000a80 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	4b10      	ldr	r3, [pc, #64]	@ (8000acc <MX_GPIO_Init+0x4c>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	4a0f      	ldr	r2, [pc, #60]	@ (8000acc <MX_GPIO_Init+0x4c>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a96:	4b0d      	ldr	r3, [pc, #52]	@ (8000acc <MX_GPIO_Init+0x4c>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	603b      	str	r3, [r7, #0]
 8000aa6:	4b09      	ldr	r3, [pc, #36]	@ (8000acc <MX_GPIO_Init+0x4c>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	4a08      	ldr	r2, [pc, #32]	@ (8000acc <MX_GPIO_Init+0x4c>)
 8000aac:	f043 0302 	orr.w	r3, r3, #2
 8000ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab2:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <MX_GPIO_Init+0x4c>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	f003 0302 	and.w	r3, r3, #2
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]

}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	40023800 	.word	0x40023800

08000ad0 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000ad4:	4b12      	ldr	r3, [pc, #72]	@ (8000b20 <MX_I2C3_Init+0x50>)
 8000ad6:	4a13      	ldr	r2, [pc, #76]	@ (8000b24 <MX_I2C3_Init+0x54>)
 8000ad8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000ada:	4b11      	ldr	r3, [pc, #68]	@ (8000b20 <MX_I2C3_Init+0x50>)
 8000adc:	4a12      	ldr	r2, [pc, #72]	@ (8000b28 <MX_I2C3_Init+0x58>)
 8000ade:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b20 <MX_I2C3_Init+0x50>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b20 <MX_I2C3_Init+0x50>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	@ (8000b20 <MX_I2C3_Init+0x50>)
 8000aee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000af2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000af4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b20 <MX_I2C3_Init+0x50>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000afa:	4b09      	ldr	r3, [pc, #36]	@ (8000b20 <MX_I2C3_Init+0x50>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b00:	4b07      	ldr	r3, [pc, #28]	@ (8000b20 <MX_I2C3_Init+0x50>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b06:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <MX_I2C3_Init+0x50>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b0c:	4804      	ldr	r0, [pc, #16]	@ (8000b20 <MX_I2C3_Init+0x50>)
 8000b0e:	f001 ff73 	bl	80029f8 <HAL_I2C_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000b18:	f000 f90a 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000194 	.word	0x20000194
 8000b24:	40005c00 	.word	0x40005c00
 8000b28:	000186a0 	.word	0x000186a0

08000b2c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08a      	sub	sp, #40	@ 0x28
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a28      	ldr	r2, [pc, #160]	@ (8000bec <HAL_I2C_MspInit+0xc0>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d14a      	bne.n	8000be4 <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	4b27      	ldr	r3, [pc, #156]	@ (8000bf0 <HAL_I2C_MspInit+0xc4>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	4a26      	ldr	r2, [pc, #152]	@ (8000bf0 <HAL_I2C_MspInit+0xc4>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5e:	4b24      	ldr	r3, [pc, #144]	@ (8000bf0 <HAL_I2C_MspInit+0xc4>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	4b20      	ldr	r3, [pc, #128]	@ (8000bf0 <HAL_I2C_MspInit+0xc4>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	4a1f      	ldr	r2, [pc, #124]	@ (8000bf0 <HAL_I2C_MspInit+0xc4>)
 8000b74:	f043 0302 	orr.w	r3, r3, #2
 8000b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf0 <HAL_I2C_MspInit+0xc4>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = IMU_CLK_Pin;
 8000b86:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b8c:	2312      	movs	r3, #18
 8000b8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b90:	2301      	movs	r3, #1
 8000b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b94:	2303      	movs	r3, #3
 8000b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b98:	2304      	movs	r3, #4
 8000b9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(IMU_CLK_GPIO_Port, &GPIO_InitStruct);
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4814      	ldr	r0, [pc, #80]	@ (8000bf4 <HAL_I2C_MspInit+0xc8>)
 8000ba4:	f001 fda4 	bl	80026f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IMU_SDA_Pin;
 8000ba8:	2310      	movs	r3, #16
 8000baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bac:	2312      	movs	r3, #18
 8000bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8000bb8:	2309      	movs	r3, #9
 8000bba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(IMU_SDA_GPIO_Port, &GPIO_InitStruct);
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	480d      	ldr	r0, [pc, #52]	@ (8000bf8 <HAL_I2C_MspInit+0xcc>)
 8000bc4:	f001 fd94 	bl	80026f0 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	4b08      	ldr	r3, [pc, #32]	@ (8000bf0 <HAL_I2C_MspInit+0xc4>)
 8000bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd0:	4a07      	ldr	r2, [pc, #28]	@ (8000bf0 <HAL_I2C_MspInit+0xc4>)
 8000bd2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000bd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bd8:	4b05      	ldr	r3, [pc, #20]	@ (8000bf0 <HAL_I2C_MspInit+0xc4>)
 8000bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bdc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000be4:	bf00      	nop
 8000be6:	3728      	adds	r7, #40	@ 0x28
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40005c00 	.word	0x40005c00
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40020000 	.word	0x40020000
 8000bf8:	40020400 	.word	0x40020400

08000bfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c00:	f000 fcf0 	bl	80015e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c04:	f000 f818 	bl	8000c38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c08:	f7ff ff3a 	bl	8000a80 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c0c:	f7ff fde8 	bl	80007e0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000c10:	f7ff fcf2 	bl	80005f8 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000c14:	f000 fa32 	bl	800107c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000c18:	f000 fac2 	bl	80011a0 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000c1c:	f000 fc46 	bl	80014ac <MX_USART1_UART_Init>
  MX_I2C3_Init();
 8000c20:	f7ff ff56 	bl	8000ad0 <MX_I2C3_Init>
  MX_TIM11_Init();
 8000c24:	f000 fb36 	bl	8001294 <MX_TIM11_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c28:	f004 fa20 	bl	800506c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000c2c:	f7ff fe22 	bl	8000874 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000c30:	f004 fa40 	bl	80050b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <main+0x38>

08000c38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b094      	sub	sp, #80	@ 0x50
 8000c3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c3e:	f107 0320 	add.w	r3, r7, #32
 8000c42:	2230      	movs	r2, #48	@ 0x30
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f007 fb6a 	bl	8008320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c4c:	f107 030c 	add.w	r3, r7, #12
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	4b28      	ldr	r3, [pc, #160]	@ (8000d04 <SystemClock_Config+0xcc>)
 8000c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c64:	4a27      	ldr	r2, [pc, #156]	@ (8000d04 <SystemClock_Config+0xcc>)
 8000c66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c6c:	4b25      	ldr	r3, [pc, #148]	@ (8000d04 <SystemClock_Config+0xcc>)
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c74:	60bb      	str	r3, [r7, #8]
 8000c76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c78:	2300      	movs	r3, #0
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	4b22      	ldr	r3, [pc, #136]	@ (8000d08 <SystemClock_Config+0xd0>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c84:	4a20      	ldr	r2, [pc, #128]	@ (8000d08 <SystemClock_Config+0xd0>)
 8000c86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c8a:	6013      	str	r3, [r2, #0]
 8000c8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000d08 <SystemClock_Config+0xd0>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ca0:	2310      	movs	r3, #16
 8000ca2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000cac:	2308      	movs	r3, #8
 8000cae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000cb0:	2354      	movs	r3, #84	@ 0x54
 8000cb2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cb8:	2304      	movs	r3, #4
 8000cba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cbc:	f107 0320 	add.w	r3, r7, #32
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f001 ffdd 	bl	8002c80 <HAL_RCC_OscConfig>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ccc:	f000 f830 	bl	8000d30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd0:	230f      	movs	r3, #15
 8000cd2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cdc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ce0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ce6:	f107 030c 	add.w	r3, r7, #12
 8000cea:	2102      	movs	r1, #2
 8000cec:	4618      	mov	r0, r3
 8000cee:	f002 fa3f 	bl	8003170 <HAL_RCC_ClockConfig>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000cf8:	f000 f81a 	bl	8000d30 <Error_Handler>
  }
}
 8000cfc:	bf00      	nop
 8000cfe:	3750      	adds	r7, #80	@ 0x50
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40007000 	.word	0x40007000

08000d0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a04      	ldr	r2, [pc, #16]	@ (8000d2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d101      	bne.n	8000d22 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d1e:	f000 fc83 	bl	8001628 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40014400 	.word	0x40014400

08000d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d34:	b672      	cpsid	i
}
 8000d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <Error_Handler+0x8>

08000d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	4b12      	ldr	r3, [pc, #72]	@ (8000d90 <HAL_MspInit+0x54>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d4a:	4a11      	ldr	r2, [pc, #68]	@ (8000d90 <HAL_MspInit+0x54>)
 8000d4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d50:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d52:	4b0f      	ldr	r3, [pc, #60]	@ (8000d90 <HAL_MspInit+0x54>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	603b      	str	r3, [r7, #0]
 8000d62:	4b0b      	ldr	r3, [pc, #44]	@ (8000d90 <HAL_MspInit+0x54>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d66:	4a0a      	ldr	r2, [pc, #40]	@ (8000d90 <HAL_MspInit+0x54>)
 8000d68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d6e:	4b08      	ldr	r3, [pc, #32]	@ (8000d90 <HAL_MspInit+0x54>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	210f      	movs	r1, #15
 8000d7e:	f06f 0001 	mvn.w	r0, #1
 8000d82:	f001 f91b 	bl	8001fbc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40023800 	.word	0x40023800

08000d94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08c      	sub	sp, #48	@ 0x30
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000da0:	2300      	movs	r3, #0
 8000da2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000da4:	2300      	movs	r3, #0
 8000da6:	60bb      	str	r3, [r7, #8]
 8000da8:	4b2e      	ldr	r3, [pc, #184]	@ (8000e64 <HAL_InitTick+0xd0>)
 8000daa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dac:	4a2d      	ldr	r2, [pc, #180]	@ (8000e64 <HAL_InitTick+0xd0>)
 8000dae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000db2:	6453      	str	r3, [r2, #68]	@ 0x44
 8000db4:	4b2b      	ldr	r3, [pc, #172]	@ (8000e64 <HAL_InitTick+0xd0>)
 8000db6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000db8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dbc:	60bb      	str	r3, [r7, #8]
 8000dbe:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dc0:	f107 020c 	add.w	r2, r7, #12
 8000dc4:	f107 0310 	add.w	r3, r7, #16
 8000dc8:	4611      	mov	r1, r2
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f002 fbb0 	bl	8003530 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000dd0:	f002 fb9a 	bl	8003508 <HAL_RCC_GetPCLK2Freq>
 8000dd4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dd8:	4a23      	ldr	r2, [pc, #140]	@ (8000e68 <HAL_InitTick+0xd4>)
 8000dda:	fba2 2303 	umull	r2, r3, r2, r3
 8000dde:	0c9b      	lsrs	r3, r3, #18
 8000de0:	3b01      	subs	r3, #1
 8000de2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000de4:	4b21      	ldr	r3, [pc, #132]	@ (8000e6c <HAL_InitTick+0xd8>)
 8000de6:	4a22      	ldr	r2, [pc, #136]	@ (8000e70 <HAL_InitTick+0xdc>)
 8000de8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000dea:	4b20      	ldr	r3, [pc, #128]	@ (8000e6c <HAL_InitTick+0xd8>)
 8000dec:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000df0:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000df2:	4a1e      	ldr	r2, [pc, #120]	@ (8000e6c <HAL_InitTick+0xd8>)
 8000df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000df6:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000df8:	4b1c      	ldr	r3, [pc, #112]	@ (8000e6c <HAL_InitTick+0xd8>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dfe:	4b1b      	ldr	r3, [pc, #108]	@ (8000e6c <HAL_InitTick+0xd8>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e04:	4b19      	ldr	r3, [pc, #100]	@ (8000e6c <HAL_InitTick+0xd8>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8000e0a:	4818      	ldr	r0, [pc, #96]	@ (8000e6c <HAL_InitTick+0xd8>)
 8000e0c:	f002 fbc2 	bl	8003594 <HAL_TIM_Base_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000e16:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d11b      	bne.n	8000e56 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8000e1e:	4813      	ldr	r0, [pc, #76]	@ (8000e6c <HAL_InitTick+0xd8>)
 8000e20:	f002 fc08 	bl	8003634 <HAL_TIM_Base_Start_IT>
 8000e24:	4603      	mov	r3, r0
 8000e26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000e2a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d111      	bne.n	8000e56 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e32:	2019      	movs	r0, #25
 8000e34:	f001 f8de 	bl	8001ff4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2b0f      	cmp	r3, #15
 8000e3c:	d808      	bhi.n	8000e50 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	6879      	ldr	r1, [r7, #4]
 8000e42:	2019      	movs	r0, #25
 8000e44:	f001 f8ba 	bl	8001fbc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e48:	4a0a      	ldr	r2, [pc, #40]	@ (8000e74 <HAL_InitTick+0xe0>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6013      	str	r3, [r2, #0]
 8000e4e:	e002      	b.n	8000e56 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000e56:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3730      	adds	r7, #48	@ 0x30
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40023800 	.word	0x40023800
 8000e68:	431bde83 	.word	0x431bde83
 8000e6c:	200001e8 	.word	0x200001e8
 8000e70:	40014400 	.word	0x40014400
 8000e74:	20000014 	.word	0x20000014

08000e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <NMI_Handler+0x4>

08000e80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <HardFault_Handler+0x4>

08000e88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <MemManage_Handler+0x4>

08000e90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <BusFault_Handler+0x4>

08000e98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <UsageFault_Handler+0x4>

08000ea0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
	...

08000eb0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000eb4:	4802      	ldr	r0, [pc, #8]	@ (8000ec0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000eb6:	f002 fde1 	bl	8003a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	200001e8 	.word	0x200001e8

08000ec4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000ec8:	4804      	ldr	r0, [pc, #16]	@ (8000edc <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8000eca:	f002 fdd7 	bl	8003a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */
  ulHighFrequencyTimerTicks++;
 8000ece:	4b04      	ldr	r3, [pc, #16]	@ (8000ee0 <TIM1_TRG_COM_TIM11_IRQHandler+0x1c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	4a02      	ldr	r2, [pc, #8]	@ (8000ee0 <TIM1_TRG_COM_TIM11_IRQHandler+0x1c>)
 8000ed6:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	200002e4 	.word	0x200002e4
 8000ee0:	20000230 	.word	0x20000230

08000ee4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ee8:	4802      	ldr	r0, [pc, #8]	@ (8000ef4 <TIM3_IRQHandler+0x10>)
 8000eea:	f002 fdc7 	bl	8003a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000254 	.word	0x20000254

08000ef8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000efc:	4802      	ldr	r0, [pc, #8]	@ (8000f08 <DMA2_Stream0_IRQHandler+0x10>)
 8000efe:	f001 f98d 	bl	800221c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	200000fc 	.word	0x200000fc

08000f0c <HAL_TIM_IC_CaptureCallback>:
/* USER CODE BEGIN 1 */
volatile uint32_t ic_rising[4] = {0};  // Stores rising edge timestamps
volatile uint32_t widths[4] = {0};  // Stores pulse width

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
	// TODO: Handle overflow
    uint32_t captured_value = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	60fb      	str	r3, [r7, #12]

    if (htim->Instance == TIM3) // Ensure it’s TIM3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a47      	ldr	r2, [pc, #284]	@ (800103c <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	f040 8087 	bne.w	8001032 <HAL_TIM_IC_CaptureCallback+0x126>
    {
        if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	7f1b      	ldrb	r3, [r3, #28]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d11d      	bne.n	8000f68 <HAL_TIM_IC_CaptureCallback+0x5c>
        {
            captured_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f003 f8ba 	bl	80040a8 <HAL_TIM_ReadCapturedValue>
 8000f34:	60f8      	str	r0, [r7, #12]
            if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim)) // Falling edge detected
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f003 0310 	and.w	r3, r3, #16
 8000f40:	2b10      	cmp	r3, #16
 8000f42:	d10d      	bne.n	8000f60 <HAL_TIM_IC_CaptureCallback+0x54>
            {
            	widths[0] = captured_value - ic_rising[0];
 8000f44:	4b3e      	ldr	r3, [pc, #248]	@ (8001040 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	68fa      	ldr	r2, [r7, #12]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	4a3d      	ldr	r2, [pc, #244]	@ (8001044 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000f4e:	6013      	str	r3, [r2, #0]
                osMessageQueuePut(radioQueueHandle, (const void *)&widths[0], 0, 0);
 8000f50:	4b3d      	ldr	r3, [pc, #244]	@ (8001048 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000f52:	6818      	ldr	r0, [r3, #0]
 8000f54:	2300      	movs	r3, #0
 8000f56:	2200      	movs	r2, #0
 8000f58:	493a      	ldr	r1, [pc, #232]	@ (8001044 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000f5a:	f004 f9f1 	bl	8005340 <osMessageQueuePut>
            {
                ic_rising[3] = captured_value;
            }
        }
    }
}
 8000f5e:	e068      	b.n	8001032 <HAL_TIM_IC_CaptureCallback+0x126>
                ic_rising[0] = captured_value;
 8000f60:	4a37      	ldr	r2, [pc, #220]	@ (8001040 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	6013      	str	r3, [r2, #0]
}
 8000f66:	e064      	b.n	8001032 <HAL_TIM_IC_CaptureCallback+0x126>
        else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	7f1b      	ldrb	r3, [r3, #28]
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d11d      	bne.n	8000fac <HAL_TIM_IC_CaptureCallback+0xa0>
            captured_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000f70:	2104      	movs	r1, #4
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f003 f898 	bl	80040a8 <HAL_TIM_ReadCapturedValue>
 8000f78:	60f8      	str	r0, [r7, #12]
            if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim)) // Falling edge
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 0310 	and.w	r3, r3, #16
 8000f84:	2b10      	cmp	r3, #16
 8000f86:	d10d      	bne.n	8000fa4 <HAL_TIM_IC_CaptureCallback+0x98>
            	widths[1] = captured_value - ic_rising[1];
 8000f88:	4b2d      	ldr	r3, [pc, #180]	@ (8001040 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	68fa      	ldr	r2, [r7, #12]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	4a2c      	ldr	r2, [pc, #176]	@ (8001044 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000f92:	6053      	str	r3, [r2, #4]
                osMessageQueuePut(radioQueueHandle, (const void *)&widths[1], 0, 0);
 8000f94:	4b2c      	ldr	r3, [pc, #176]	@ (8001048 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000f96:	6818      	ldr	r0, [r3, #0]
 8000f98:	2300      	movs	r3, #0
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	492b      	ldr	r1, [pc, #172]	@ (800104c <HAL_TIM_IC_CaptureCallback+0x140>)
 8000f9e:	f004 f9cf 	bl	8005340 <osMessageQueuePut>
}
 8000fa2:	e046      	b.n	8001032 <HAL_TIM_IC_CaptureCallback+0x126>
                ic_rising[1] = captured_value;
 8000fa4:	4a26      	ldr	r2, [pc, #152]	@ (8001040 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	6053      	str	r3, [r2, #4]
}
 8000faa:	e042      	b.n	8001032 <HAL_TIM_IC_CaptureCallback+0x126>
        else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	7f1b      	ldrb	r3, [r3, #28]
 8000fb0:	2b04      	cmp	r3, #4
 8000fb2:	d11d      	bne.n	8000ff0 <HAL_TIM_IC_CaptureCallback+0xe4>
            captured_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8000fb4:	2108      	movs	r1, #8
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f003 f876 	bl	80040a8 <HAL_TIM_ReadCapturedValue>
 8000fbc:	60f8      	str	r0, [r7, #12]
            if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 0310 	and.w	r3, r3, #16
 8000fc8:	2b10      	cmp	r3, #16
 8000fca:	d10d      	bne.n	8000fe8 <HAL_TIM_IC_CaptureCallback+0xdc>
            	widths[2] = captured_value - ic_rising[2];
 8000fcc:	4b1c      	ldr	r3, [pc, #112]	@ (8001040 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	68fa      	ldr	r2, [r7, #12]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	4a1b      	ldr	r2, [pc, #108]	@ (8001044 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000fd6:	6093      	str	r3, [r2, #8]
                osMessageQueuePut(radioQueueHandle, (const void *)&widths[2], 0, 0);
 8000fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001048 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000fda:	6818      	ldr	r0, [r3, #0]
 8000fdc:	2300      	movs	r3, #0
 8000fde:	2200      	movs	r2, #0
 8000fe0:	491b      	ldr	r1, [pc, #108]	@ (8001050 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000fe2:	f004 f9ad 	bl	8005340 <osMessageQueuePut>
}
 8000fe6:	e024      	b.n	8001032 <HAL_TIM_IC_CaptureCallback+0x126>
                ic_rising[2] = captured_value;
 8000fe8:	4a15      	ldr	r2, [pc, #84]	@ (8001040 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	6093      	str	r3, [r2, #8]
}
 8000fee:	e020      	b.n	8001032 <HAL_TIM_IC_CaptureCallback+0x126>
        else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	7f1b      	ldrb	r3, [r3, #28]
 8000ff4:	2b08      	cmp	r3, #8
 8000ff6:	d11c      	bne.n	8001032 <HAL_TIM_IC_CaptureCallback+0x126>
            captured_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8000ff8:	210c      	movs	r1, #12
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f003 f854 	bl	80040a8 <HAL_TIM_ReadCapturedValue>
 8001000:	60f8      	str	r0, [r7, #12]
            if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 0310 	and.w	r3, r3, #16
 800100c:	2b10      	cmp	r3, #16
 800100e:	d10d      	bne.n	800102c <HAL_TIM_IC_CaptureCallback+0x120>
            	widths[3] = captured_value - ic_rising[3];
 8001010:	4b0b      	ldr	r3, [pc, #44]	@ (8001040 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	68fa      	ldr	r2, [r7, #12]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	4a0a      	ldr	r2, [pc, #40]	@ (8001044 <HAL_TIM_IC_CaptureCallback+0x138>)
 800101a:	60d3      	str	r3, [r2, #12]
                osMessageQueuePut(radioQueueHandle, (const void *)&widths[3], 0, 0);
 800101c:	4b0a      	ldr	r3, [pc, #40]	@ (8001048 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800101e:	6818      	ldr	r0, [r3, #0]
 8001020:	2300      	movs	r3, #0
 8001022:	2200      	movs	r2, #0
 8001024:	490b      	ldr	r1, [pc, #44]	@ (8001054 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001026:	f004 f98b 	bl	8005340 <osMessageQueuePut>
}
 800102a:	e002      	b.n	8001032 <HAL_TIM_IC_CaptureCallback+0x126>
                ic_rising[3] = captured_value;
 800102c:	4a04      	ldr	r2, [pc, #16]	@ (8001040 <HAL_TIM_IC_CaptureCallback+0x134>)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	60d3      	str	r3, [r2, #12]
}
 8001032:	bf00      	nop
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40000400 	.word	0x40000400
 8001040:	20000234 	.word	0x20000234
 8001044:	20000244 	.word	0x20000244
 8001048:	20000184 	.word	0x20000184
 800104c:	20000248 	.word	0x20000248
 8001050:	2000024c 	.word	0x2000024c
 8001054:	20000250 	.word	0x20000250

08001058 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800105c:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <SystemInit+0x20>)
 800105e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001062:	4a05      	ldr	r2, [pc, #20]	@ (8001078 <SystemInit+0x20>)
 8001064:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001068:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	@ 0x28
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001082:	f107 0318 	add.w	r3, r7, #24
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001090:	f107 0310 	add.w	r3, r7, #16
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800109a:	463b      	mov	r3, r7
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010a6:	4b3c      	ldr	r3, [pc, #240]	@ (8001198 <MX_TIM3_Init+0x11c>)
 80010a8:	4a3c      	ldr	r2, [pc, #240]	@ (800119c <MX_TIM3_Init+0x120>)
 80010aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 80010ac:	4b3a      	ldr	r3, [pc, #232]	@ (8001198 <MX_TIM3_Init+0x11c>)
 80010ae:	2254      	movs	r2, #84	@ 0x54
 80010b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b2:	4b39      	ldr	r3, [pc, #228]	@ (8001198 <MX_TIM3_Init+0x11c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80010b8:	4b37      	ldr	r3, [pc, #220]	@ (8001198 <MX_TIM3_Init+0x11c>)
 80010ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c0:	4b35      	ldr	r3, [pc, #212]	@ (8001198 <MX_TIM3_Init+0x11c>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010c6:	4b34      	ldr	r3, [pc, #208]	@ (8001198 <MX_TIM3_Init+0x11c>)
 80010c8:	2280      	movs	r2, #128	@ 0x80
 80010ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010cc:	4832      	ldr	r0, [pc, #200]	@ (8001198 <MX_TIM3_Init+0x11c>)
 80010ce:	f002 fa61 	bl	8003594 <HAL_TIM_Base_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80010d8:	f7ff fe2a 	bl	8000d30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010e0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010e2:	f107 0318 	add.w	r3, r7, #24
 80010e6:	4619      	mov	r1, r3
 80010e8:	482b      	ldr	r0, [pc, #172]	@ (8001198 <MX_TIM3_Init+0x11c>)
 80010ea:	f002 ff15 	bl	8003f18 <HAL_TIM_ConfigClockSource>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80010f4:	f7ff fe1c 	bl	8000d30 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80010f8:	4827      	ldr	r0, [pc, #156]	@ (8001198 <MX_TIM3_Init+0x11c>)
 80010fa:	f002 fb4c 	bl	8003796 <HAL_TIM_IC_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001104:	f7ff fe14 	bl	8000d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001108:	2300      	movs	r3, #0
 800110a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	4619      	mov	r1, r3
 8001116:	4820      	ldr	r0, [pc, #128]	@ (8001198 <MX_TIM3_Init+0x11c>)
 8001118:	f003 fc1e 	bl	8004958 <HAL_TIMEx_MasterConfigSynchronization>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001122:	f7ff fe05 	bl	8000d30 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001126:	230a      	movs	r3, #10
 8001128:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800112a:	2301      	movs	r3, #1
 800112c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800112e:	2300      	movs	r3, #0
 8001130:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001136:	463b      	mov	r3, r7
 8001138:	2200      	movs	r2, #0
 800113a:	4619      	mov	r1, r3
 800113c:	4816      	ldr	r0, [pc, #88]	@ (8001198 <MX_TIM3_Init+0x11c>)
 800113e:	f002 fd8d 	bl	8003c5c <HAL_TIM_IC_ConfigChannel>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001148:	f7ff fdf2 	bl	8000d30 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800114c:	463b      	mov	r3, r7
 800114e:	2204      	movs	r2, #4
 8001150:	4619      	mov	r1, r3
 8001152:	4811      	ldr	r0, [pc, #68]	@ (8001198 <MX_TIM3_Init+0x11c>)
 8001154:	f002 fd82 	bl	8003c5c <HAL_TIM_IC_ConfigChannel>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 800115e:	f7ff fde7 	bl	8000d30 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001162:	463b      	mov	r3, r7
 8001164:	2208      	movs	r2, #8
 8001166:	4619      	mov	r1, r3
 8001168:	480b      	ldr	r0, [pc, #44]	@ (8001198 <MX_TIM3_Init+0x11c>)
 800116a:	f002 fd77 	bl	8003c5c <HAL_TIM_IC_ConfigChannel>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM3_Init+0xfc>
  {
    Error_Handler();
 8001174:	f7ff fddc 	bl	8000d30 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001178:	463b      	mov	r3, r7
 800117a:	220c      	movs	r2, #12
 800117c:	4619      	mov	r1, r3
 800117e:	4806      	ldr	r0, [pc, #24]	@ (8001198 <MX_TIM3_Init+0x11c>)
 8001180:	f002 fd6c 	bl	8003c5c <HAL_TIM_IC_ConfigChannel>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM3_Init+0x112>
  {
    Error_Handler();
 800118a:	f7ff fdd1 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800118e:	bf00      	nop
 8001190:	3728      	adds	r7, #40	@ 0x28
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000254 	.word	0x20000254
 800119c:	40000400 	.word	0x40000400

080011a0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	@ 0x28
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a6:	f107 0320 	add.w	r3, r7, #32
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
 80011bc:	611a      	str	r2, [r3, #16]
 80011be:	615a      	str	r2, [r3, #20]
 80011c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011c2:	4b32      	ldr	r3, [pc, #200]	@ (800128c <MX_TIM4_Init+0xec>)
 80011c4:	4a32      	ldr	r2, [pc, #200]	@ (8001290 <MX_TIM4_Init+0xf0>)
 80011c6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84;
 80011c8:	4b30      	ldr	r3, [pc, #192]	@ (800128c <MX_TIM4_Init+0xec>)
 80011ca:	2254      	movs	r2, #84	@ 0x54
 80011cc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ce:	4b2f      	ldr	r3, [pc, #188]	@ (800128c <MX_TIM4_Init+0xec>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 80011d4:	4b2d      	ldr	r3, [pc, #180]	@ (800128c <MX_TIM4_Init+0xec>)
 80011d6:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80011da:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011dc:	4b2b      	ldr	r3, [pc, #172]	@ (800128c <MX_TIM4_Init+0xec>)
 80011de:	2200      	movs	r2, #0
 80011e0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011e2:	4b2a      	ldr	r3, [pc, #168]	@ (800128c <MX_TIM4_Init+0xec>)
 80011e4:	2280      	movs	r2, #128	@ 0x80
 80011e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80011e8:	4828      	ldr	r0, [pc, #160]	@ (800128c <MX_TIM4_Init+0xec>)
 80011ea:	f002 fa85 	bl	80036f8 <HAL_TIM_PWM_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80011f4:	f7ff fd9c 	bl	8000d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f8:	2300      	movs	r3, #0
 80011fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011fc:	2300      	movs	r3, #0
 80011fe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001200:	f107 0320 	add.w	r3, r7, #32
 8001204:	4619      	mov	r1, r3
 8001206:	4821      	ldr	r0, [pc, #132]	@ (800128c <MX_TIM4_Init+0xec>)
 8001208:	f003 fba6 	bl	8004958 <HAL_TIMEx_MasterConfigSynchronization>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001212:	f7ff fd8d 	bl	8000d30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001216:	2360      	movs	r3, #96	@ 0x60
 8001218:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	2200      	movs	r2, #0
 800122a:	4619      	mov	r1, r3
 800122c:	4817      	ldr	r0, [pc, #92]	@ (800128c <MX_TIM4_Init+0xec>)
 800122e:	f002 fdb1 	bl	8003d94 <HAL_TIM_PWM_ConfigChannel>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001238:	f7ff fd7a 	bl	8000d30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	2204      	movs	r2, #4
 8001240:	4619      	mov	r1, r3
 8001242:	4812      	ldr	r0, [pc, #72]	@ (800128c <MX_TIM4_Init+0xec>)
 8001244:	f002 fda6 	bl	8003d94 <HAL_TIM_PWM_ConfigChannel>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800124e:	f7ff fd6f 	bl	8000d30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	2208      	movs	r2, #8
 8001256:	4619      	mov	r1, r3
 8001258:	480c      	ldr	r0, [pc, #48]	@ (800128c <MX_TIM4_Init+0xec>)
 800125a:	f002 fd9b 	bl	8003d94 <HAL_TIM_PWM_ConfigChannel>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8001264:	f7ff fd64 	bl	8000d30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	220c      	movs	r2, #12
 800126c:	4619      	mov	r1, r3
 800126e:	4807      	ldr	r0, [pc, #28]	@ (800128c <MX_TIM4_Init+0xec>)
 8001270:	f002 fd90 	bl	8003d94 <HAL_TIM_PWM_ConfigChannel>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 800127a:	f7ff fd59 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800127e:	4803      	ldr	r0, [pc, #12]	@ (800128c <MX_TIM4_Init+0xec>)
 8001280:	f000 f8da 	bl	8001438 <HAL_TIM_MspPostInit>

}
 8001284:	bf00      	nop
 8001286:	3728      	adds	r7, #40	@ 0x28
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	2000029c 	.word	0x2000029c
 8001290:	40000800 	.word	0x40000800

08001294 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001298:	4b0d      	ldr	r3, [pc, #52]	@ (80012d0 <MX_TIM11_Init+0x3c>)
 800129a:	4a0e      	ldr	r2, [pc, #56]	@ (80012d4 <MX_TIM11_Init+0x40>)
 800129c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 84;
 800129e:	4b0c      	ldr	r3, [pc, #48]	@ (80012d0 <MX_TIM11_Init+0x3c>)
 80012a0:	2254      	movs	r2, #84	@ 0x54
 80012a2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a4:	4b0a      	ldr	r3, [pc, #40]	@ (80012d0 <MX_TIM11_Init+0x3c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 99;
 80012aa:	4b09      	ldr	r3, [pc, #36]	@ (80012d0 <MX_TIM11_Init+0x3c>)
 80012ac:	2263      	movs	r2, #99	@ 0x63
 80012ae:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b0:	4b07      	ldr	r3, [pc, #28]	@ (80012d0 <MX_TIM11_Init+0x3c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012b6:	4b06      	ldr	r3, [pc, #24]	@ (80012d0 <MX_TIM11_Init+0x3c>)
 80012b8:	2280      	movs	r2, #128	@ 0x80
 80012ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80012bc:	4804      	ldr	r0, [pc, #16]	@ (80012d0 <MX_TIM11_Init+0x3c>)
 80012be:	f002 f969 	bl	8003594 <HAL_TIM_Base_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_TIM11_Init+0x38>
  {
    Error_Handler();
 80012c8:	f7ff fd32 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	200002e4 	.word	0x200002e4
 80012d4:	40014800 	.word	0x40014800

080012d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08c      	sub	sp, #48	@ 0x30
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 031c 	add.w	r3, r7, #28
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a3a      	ldr	r2, [pc, #232]	@ (80013e0 <HAL_TIM_Base_MspInit+0x108>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d152      	bne.n	80013a0 <HAL_TIM_Base_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	61bb      	str	r3, [r7, #24]
 80012fe:	4b39      	ldr	r3, [pc, #228]	@ (80013e4 <HAL_TIM_Base_MspInit+0x10c>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001302:	4a38      	ldr	r2, [pc, #224]	@ (80013e4 <HAL_TIM_Base_MspInit+0x10c>)
 8001304:	f043 0302 	orr.w	r3, r3, #2
 8001308:	6413      	str	r3, [r2, #64]	@ 0x40
 800130a:	4b36      	ldr	r3, [pc, #216]	@ (80013e4 <HAL_TIM_Base_MspInit+0x10c>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	61bb      	str	r3, [r7, #24]
 8001314:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
 800131a:	4b32      	ldr	r3, [pc, #200]	@ (80013e4 <HAL_TIM_Base_MspInit+0x10c>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131e:	4a31      	ldr	r2, [pc, #196]	@ (80013e4 <HAL_TIM_Base_MspInit+0x10c>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6313      	str	r3, [r2, #48]	@ 0x30
 8001326:	4b2f      	ldr	r3, [pc, #188]	@ (80013e4 <HAL_TIM_Base_MspInit+0x10c>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	4b2b      	ldr	r3, [pc, #172]	@ (80013e4 <HAL_TIM_Base_MspInit+0x10c>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	4a2a      	ldr	r2, [pc, #168]	@ (80013e4 <HAL_TIM_Base_MspInit+0x10c>)
 800133c:	f043 0302 	orr.w	r3, r3, #2
 8001340:	6313      	str	r3, [r2, #48]	@ 0x30
 8001342:	4b28      	ldr	r3, [pc, #160]	@ (80013e4 <HAL_TIM_Base_MspInit+0x10c>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin;
 800134e:	23c0      	movs	r3, #192	@ 0xc0
 8001350:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800135e:	2302      	movs	r3, #2
 8001360:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 031c 	add.w	r3, r7, #28
 8001366:	4619      	mov	r1, r3
 8001368:	481f      	ldr	r0, [pc, #124]	@ (80013e8 <HAL_TIM_Base_MspInit+0x110>)
 800136a:	f001 f9c1 	bl	80026f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IN3_Pin|IN4_Pin;
 800136e:	2303      	movs	r3, #3
 8001370:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001372:	2302      	movs	r3, #2
 8001374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2300      	movs	r3, #0
 800137c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800137e:	2302      	movs	r3, #2
 8001380:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001382:	f107 031c 	add.w	r3, r7, #28
 8001386:	4619      	mov	r1, r3
 8001388:	4818      	ldr	r0, [pc, #96]	@ (80013ec <HAL_TIM_Base_MspInit+0x114>)
 800138a:	f001 f9b1 	bl	80026f0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800138e:	2200      	movs	r2, #0
 8001390:	2105      	movs	r1, #5
 8001392:	201d      	movs	r0, #29
 8001394:	f000 fe12 	bl	8001fbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001398:	201d      	movs	r0, #29
 800139a:	f000 fe2b 	bl	8001ff4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800139e:	e01a      	b.n	80013d6 <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM11)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a12      	ldr	r2, [pc, #72]	@ (80013f0 <HAL_TIM_Base_MspInit+0x118>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d115      	bne.n	80013d6 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	4b0d      	ldr	r3, [pc, #52]	@ (80013e4 <HAL_TIM_Base_MspInit+0x10c>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b2:	4a0c      	ldr	r2, [pc, #48]	@ (80013e4 <HAL_TIM_Base_MspInit+0x10c>)
 80013b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ba:	4b0a      	ldr	r3, [pc, #40]	@ (80013e4 <HAL_TIM_Base_MspInit+0x10c>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2105      	movs	r1, #5
 80013ca:	201a      	movs	r0, #26
 80013cc:	f000 fdf6 	bl	8001fbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80013d0:	201a      	movs	r0, #26
 80013d2:	f000 fe0f 	bl	8001ff4 <HAL_NVIC_EnableIRQ>
}
 80013d6:	bf00      	nop
 80013d8:	3730      	adds	r7, #48	@ 0x30
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40000400 	.word	0x40000400
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40020000 	.word	0x40020000
 80013ec:	40020400 	.word	0x40020400
 80013f0:	40014800 	.word	0x40014800

080013f4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a0b      	ldr	r2, [pc, #44]	@ (8001430 <HAL_TIM_PWM_MspInit+0x3c>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d10d      	bne.n	8001422 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	4b0a      	ldr	r3, [pc, #40]	@ (8001434 <HAL_TIM_PWM_MspInit+0x40>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140e:	4a09      	ldr	r2, [pc, #36]	@ (8001434 <HAL_TIM_PWM_MspInit+0x40>)
 8001410:	f043 0304 	orr.w	r3, r3, #4
 8001414:	6413      	str	r3, [r2, #64]	@ 0x40
 8001416:	4b07      	ldr	r3, [pc, #28]	@ (8001434 <HAL_TIM_PWM_MspInit+0x40>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141a:	f003 0304 	and.w	r3, r3, #4
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001422:	bf00      	nop
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	40000800 	.word	0x40000800
 8001434:	40023800 	.word	0x40023800

08001438 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b088      	sub	sp, #32
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 030c 	add.w	r3, r7, #12
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a12      	ldr	r2, [pc, #72]	@ (80014a0 <HAL_TIM_MspPostInit+0x68>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d11e      	bne.n	8001498 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	4b11      	ldr	r3, [pc, #68]	@ (80014a4 <HAL_TIM_MspPostInit+0x6c>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	4a10      	ldr	r2, [pc, #64]	@ (80014a4 <HAL_TIM_MspPostInit+0x6c>)
 8001464:	f043 0302 	orr.w	r3, r3, #2
 8001468:	6313      	str	r3, [r2, #48]	@ 0x30
 800146a:	4b0e      	ldr	r3, [pc, #56]	@ (80014a4 <HAL_TIM_MspPostInit+0x6c>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = OUT1_Pin|OUT2_Pin|OUT3_Pin|OUT4_Pin;
 8001476:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800147a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147c:	2302      	movs	r3, #2
 800147e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001484:	2303      	movs	r3, #3
 8001486:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001488:	2302      	movs	r3, #2
 800148a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148c:	f107 030c 	add.w	r3, r7, #12
 8001490:	4619      	mov	r1, r3
 8001492:	4805      	ldr	r0, [pc, #20]	@ (80014a8 <HAL_TIM_MspPostInit+0x70>)
 8001494:	f001 f92c 	bl	80026f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001498:	bf00      	nop
 800149a:	3720      	adds	r7, #32
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40000800 	.word	0x40000800
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40020400 	.word	0x40020400

080014ac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014b0:	4b11      	ldr	r3, [pc, #68]	@ (80014f8 <MX_USART1_UART_Init+0x4c>)
 80014b2:	4a12      	ldr	r2, [pc, #72]	@ (80014fc <MX_USART1_UART_Init+0x50>)
 80014b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014b6:	4b10      	ldr	r3, [pc, #64]	@ (80014f8 <MX_USART1_UART_Init+0x4c>)
 80014b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014be:	4b0e      	ldr	r3, [pc, #56]	@ (80014f8 <MX_USART1_UART_Init+0x4c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014c4:	4b0c      	ldr	r3, [pc, #48]	@ (80014f8 <MX_USART1_UART_Init+0x4c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014ca:	4b0b      	ldr	r3, [pc, #44]	@ (80014f8 <MX_USART1_UART_Init+0x4c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014d0:	4b09      	ldr	r3, [pc, #36]	@ (80014f8 <MX_USART1_UART_Init+0x4c>)
 80014d2:	220c      	movs	r2, #12
 80014d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014d6:	4b08      	ldr	r3, [pc, #32]	@ (80014f8 <MX_USART1_UART_Init+0x4c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014dc:	4b06      	ldr	r3, [pc, #24]	@ (80014f8 <MX_USART1_UART_Init+0x4c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014e2:	4805      	ldr	r0, [pc, #20]	@ (80014f8 <MX_USART1_UART_Init+0x4c>)
 80014e4:	f003 faba 	bl	8004a5c <HAL_UART_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014ee:	f7ff fc1f 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	2000032c 	.word	0x2000032c
 80014fc:	40011000 	.word	0x40011000

08001500 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08a      	sub	sp, #40	@ 0x28
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a19      	ldr	r2, [pc, #100]	@ (8001584 <HAL_UART_MspInit+0x84>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d12c      	bne.n	800157c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
 8001526:	4b18      	ldr	r3, [pc, #96]	@ (8001588 <HAL_UART_MspInit+0x88>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152a:	4a17      	ldr	r2, [pc, #92]	@ (8001588 <HAL_UART_MspInit+0x88>)
 800152c:	f043 0310 	orr.w	r3, r3, #16
 8001530:	6453      	str	r3, [r2, #68]	@ 0x44
 8001532:	4b15      	ldr	r3, [pc, #84]	@ (8001588 <HAL_UART_MspInit+0x88>)
 8001534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001536:	f003 0310 	and.w	r3, r3, #16
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	4b11      	ldr	r3, [pc, #68]	@ (8001588 <HAL_UART_MspInit+0x88>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	4a10      	ldr	r2, [pc, #64]	@ (8001588 <HAL_UART_MspInit+0x88>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	6313      	str	r3, [r2, #48]	@ 0x30
 800154e:	4b0e      	ldr	r3, [pc, #56]	@ (8001588 <HAL_UART_MspInit+0x88>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TEL_TX_Pin|TEL_RX_Pin;
 800155a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800155e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001560:	2302      	movs	r3, #2
 8001562:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001568:	2303      	movs	r3, #3
 800156a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800156c:	2307      	movs	r3, #7
 800156e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	4619      	mov	r1, r3
 8001576:	4805      	ldr	r0, [pc, #20]	@ (800158c <HAL_UART_MspInit+0x8c>)
 8001578:	f001 f8ba 	bl	80026f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800157c:	bf00      	nop
 800157e:	3728      	adds	r7, #40	@ 0x28
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40011000 	.word	0x40011000
 8001588:	40023800 	.word	0x40023800
 800158c:	40020000 	.word	0x40020000

08001590 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001590:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015c8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001594:	f7ff fd60 	bl	8001058 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001598:	480c      	ldr	r0, [pc, #48]	@ (80015cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800159a:	490d      	ldr	r1, [pc, #52]	@ (80015d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800159c:	4a0d      	ldr	r2, [pc, #52]	@ (80015d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800159e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a0:	e002      	b.n	80015a8 <LoopCopyDataInit>

080015a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015a6:	3304      	adds	r3, #4

080015a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015ac:	d3f9      	bcc.n	80015a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ae:	4a0a      	ldr	r2, [pc, #40]	@ (80015d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015b0:	4c0a      	ldr	r4, [pc, #40]	@ (80015dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80015b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b4:	e001      	b.n	80015ba <LoopFillZerobss>

080015b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b8:	3204      	adds	r2, #4

080015ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015bc:	d3fb      	bcc.n	80015b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015be:	f006 ff0d 	bl	80083dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015c2:	f7ff fb1b 	bl	8000bfc <main>
  bx  lr    
 80015c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015c8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80015cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80015d4:	0800870c 	.word	0x0800870c
  ldr r2, =_sbss
 80015d8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80015dc:	20004f04 	.word	0x20004f04

080015e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015e0:	e7fe      	b.n	80015e0 <ADC_IRQHandler>
	...

080015e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001624 <HAL_Init+0x40>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001624 <HAL_Init+0x40>)
 80015ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001624 <HAL_Init+0x40>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001624 <HAL_Init+0x40>)
 80015fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001600:	4b08      	ldr	r3, [pc, #32]	@ (8001624 <HAL_Init+0x40>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a07      	ldr	r2, [pc, #28]	@ (8001624 <HAL_Init+0x40>)
 8001606:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800160a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800160c:	2003      	movs	r0, #3
 800160e:	f000 fcca 	bl	8001fa6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001612:	200f      	movs	r0, #15
 8001614:	f7ff fbbe 	bl	8000d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001618:	f7ff fb90 	bl	8000d3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40023c00 	.word	0x40023c00

08001628 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800162c:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <HAL_IncTick+0x20>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	461a      	mov	r2, r3
 8001632:	4b06      	ldr	r3, [pc, #24]	@ (800164c <HAL_IncTick+0x24>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4413      	add	r3, r2
 8001638:	4a04      	ldr	r2, [pc, #16]	@ (800164c <HAL_IncTick+0x24>)
 800163a:	6013      	str	r3, [r2, #0]
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	20000018 	.word	0x20000018
 800164c:	20000374 	.word	0x20000374

08001650 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return uwTick;
 8001654:	4b03      	ldr	r3, [pc, #12]	@ (8001664 <HAL_GetTick+0x14>)
 8001656:	681b      	ldr	r3, [r3, #0]
}
 8001658:	4618      	mov	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	20000374 	.word	0x20000374

08001668 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001670:	2300      	movs	r3, #0
 8001672:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e033      	b.n	80016e6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001682:	2b00      	cmp	r3, #0
 8001684:	d109      	bne.n	800169a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff f832 	bl	80006f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169e:	f003 0310 	and.w	r3, r3, #16
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d118      	bne.n	80016d8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016aa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80016ae:	f023 0302 	bic.w	r3, r3, #2
 80016b2:	f043 0202 	orr.w	r2, r3, #2
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 fa48 	bl	8001b50 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ca:	f023 0303 	bic.w	r3, r3, #3
 80016ce:	f043 0201 	orr.w	r2, r3, #1
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	641a      	str	r2, [r3, #64]	@ 0x40
 80016d6:	e001      	b.n	80016dc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001706:	2b01      	cmp	r3, #1
 8001708:	d101      	bne.n	800170e <HAL_ADC_Start_DMA+0x1e>
 800170a:	2302      	movs	r3, #2
 800170c:	e0ce      	b.n	80018ac <HAL_ADC_Start_DMA+0x1bc>
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	2b01      	cmp	r3, #1
 8001722:	d018      	beq.n	8001756 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	689a      	ldr	r2, [r3, #8]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f042 0201 	orr.w	r2, r2, #1
 8001732:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001734:	4b5f      	ldr	r3, [pc, #380]	@ (80018b4 <HAL_ADC_Start_DMA+0x1c4>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a5f      	ldr	r2, [pc, #380]	@ (80018b8 <HAL_ADC_Start_DMA+0x1c8>)
 800173a:	fba2 2303 	umull	r2, r3, r2, r3
 800173e:	0c9a      	lsrs	r2, r3, #18
 8001740:	4613      	mov	r3, r2
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	4413      	add	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001748:	e002      	b.n	8001750 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	3b01      	subs	r3, #1
 800174e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f9      	bne.n	800174a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001760:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001764:	d107      	bne.n	8001776 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001774:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	2b01      	cmp	r3, #1
 8001782:	f040 8086 	bne.w	8001892 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800178e:	f023 0301 	bic.w	r3, r3, #1
 8001792:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d007      	beq.n	80017b8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ac:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80017b0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017c4:	d106      	bne.n	80017d4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ca:	f023 0206 	bic.w	r2, r3, #6
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	645a      	str	r2, [r3, #68]	@ 0x44
 80017d2:	e002      	b.n	80017da <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2200      	movs	r2, #0
 80017d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017e2:	4b36      	ldr	r3, [pc, #216]	@ (80018bc <HAL_ADC_Start_DMA+0x1cc>)
 80017e4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017ea:	4a35      	ldr	r2, [pc, #212]	@ (80018c0 <HAL_ADC_Start_DMA+0x1d0>)
 80017ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017f2:	4a34      	ldr	r2, [pc, #208]	@ (80018c4 <HAL_ADC_Start_DMA+0x1d4>)
 80017f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017fa:	4a33      	ldr	r2, [pc, #204]	@ (80018c8 <HAL_ADC_Start_DMA+0x1d8>)
 80017fc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001806:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001816:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001826:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	334c      	adds	r3, #76	@ 0x4c
 8001832:	4619      	mov	r1, r3
 8001834:	68ba      	ldr	r2, [r7, #8]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f000 fc98 	bl	800216c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 031f 	and.w	r3, r3, #31
 8001844:	2b00      	cmp	r3, #0
 8001846:	d10f      	bne.n	8001868 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d129      	bne.n	80018aa <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001864:	609a      	str	r2, [r3, #8]
 8001866:	e020      	b.n	80018aa <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a17      	ldr	r2, [pc, #92]	@ (80018cc <HAL_ADC_Start_DMA+0x1dc>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d11b      	bne.n	80018aa <HAL_ADC_Start_DMA+0x1ba>
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d114      	bne.n	80018aa <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	e00b      	b.n	80018aa <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001896:	f043 0210 	orr.w	r2, r3, #16
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a2:	f043 0201 	orr.w	r2, r3, #1
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000010 	.word	0x20000010
 80018b8:	431bde83 	.word	0x431bde83
 80018bc:	40012300 	.word	0x40012300
 80018c0:	08001d49 	.word	0x08001d49
 80018c4:	08001e03 	.word	0x08001e03
 80018c8:	08001e1f 	.word	0x08001e1f
 80018cc:	40012000 	.word	0x40012000

080018d0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001916:	2300      	movs	r3, #0
 8001918:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001920:	2b01      	cmp	r3, #1
 8001922:	d101      	bne.n	8001928 <HAL_ADC_ConfigChannel+0x1c>
 8001924:	2302      	movs	r3, #2
 8001926:	e105      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x228>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b09      	cmp	r3, #9
 8001936:	d925      	bls.n	8001984 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68d9      	ldr	r1, [r3, #12]
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	b29b      	uxth	r3, r3
 8001944:	461a      	mov	r2, r3
 8001946:	4613      	mov	r3, r2
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	4413      	add	r3, r2
 800194c:	3b1e      	subs	r3, #30
 800194e:	2207      	movs	r2, #7
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43da      	mvns	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	400a      	ands	r2, r1
 800195c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68d9      	ldr	r1, [r3, #12]
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	b29b      	uxth	r3, r3
 800196e:	4618      	mov	r0, r3
 8001970:	4603      	mov	r3, r0
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	4403      	add	r3, r0
 8001976:	3b1e      	subs	r3, #30
 8001978:	409a      	lsls	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	430a      	orrs	r2, r1
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	e022      	b.n	80019ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6919      	ldr	r1, [r3, #16]
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	b29b      	uxth	r3, r3
 8001990:	461a      	mov	r2, r3
 8001992:	4613      	mov	r3, r2
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	4413      	add	r3, r2
 8001998:	2207      	movs	r2, #7
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43da      	mvns	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	400a      	ands	r2, r1
 80019a6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6919      	ldr	r1, [r3, #16]
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	689a      	ldr	r2, [r3, #8]
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	4618      	mov	r0, r3
 80019ba:	4603      	mov	r3, r0
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	4403      	add	r3, r0
 80019c0:	409a      	lsls	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	430a      	orrs	r2, r1
 80019c8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b06      	cmp	r3, #6
 80019d0:	d824      	bhi.n	8001a1c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685a      	ldr	r2, [r3, #4]
 80019dc:	4613      	mov	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4413      	add	r3, r2
 80019e2:	3b05      	subs	r3, #5
 80019e4:	221f      	movs	r2, #31
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43da      	mvns	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	400a      	ands	r2, r1
 80019f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	4618      	mov	r0, r3
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	4613      	mov	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	3b05      	subs	r3, #5
 8001a0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	430a      	orrs	r2, r1
 8001a18:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a1a:	e04c      	b.n	8001ab6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	2b0c      	cmp	r3, #12
 8001a22:	d824      	bhi.n	8001a6e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	3b23      	subs	r3, #35	@ 0x23
 8001a36:	221f      	movs	r2, #31
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43da      	mvns	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	400a      	ands	r2, r1
 8001a44:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	4618      	mov	r0, r3
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685a      	ldr	r2, [r3, #4]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	3b23      	subs	r3, #35	@ 0x23
 8001a60:	fa00 f203 	lsl.w	r2, r0, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a6c:	e023      	b.n	8001ab6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4413      	add	r3, r2
 8001a7e:	3b41      	subs	r3, #65	@ 0x41
 8001a80:	221f      	movs	r2, #31
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43da      	mvns	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	400a      	ands	r2, r1
 8001a8e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685a      	ldr	r2, [r3, #4]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	3b41      	subs	r3, #65	@ 0x41
 8001aaa:	fa00 f203 	lsl.w	r2, r0, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ab6:	4b22      	ldr	r3, [pc, #136]	@ (8001b40 <HAL_ADC_ConfigChannel+0x234>)
 8001ab8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a21      	ldr	r2, [pc, #132]	@ (8001b44 <HAL_ADC_ConfigChannel+0x238>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d109      	bne.n	8001ad8 <HAL_ADC_ConfigChannel+0x1cc>
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b12      	cmp	r3, #18
 8001aca:	d105      	bne.n	8001ad8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a19      	ldr	r2, [pc, #100]	@ (8001b44 <HAL_ADC_ConfigChannel+0x238>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d123      	bne.n	8001b2a <HAL_ADC_ConfigChannel+0x21e>
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2b10      	cmp	r3, #16
 8001ae8:	d003      	beq.n	8001af2 <HAL_ADC_ConfigChannel+0x1e6>
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2b11      	cmp	r3, #17
 8001af0:	d11b      	bne.n	8001b2a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2b10      	cmp	r3, #16
 8001b04:	d111      	bne.n	8001b2a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b06:	4b10      	ldr	r3, [pc, #64]	@ (8001b48 <HAL_ADC_ConfigChannel+0x23c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a10      	ldr	r2, [pc, #64]	@ (8001b4c <HAL_ADC_ConfigChannel+0x240>)
 8001b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b10:	0c9a      	lsrs	r2, r3, #18
 8001b12:	4613      	mov	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001b1c:	e002      	b.n	8001b24 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	3b01      	subs	r3, #1
 8001b22:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f9      	bne.n	8001b1e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	40012300 	.word	0x40012300
 8001b44:	40012000 	.word	0x40012000
 8001b48:	20000010 	.word	0x20000010
 8001b4c:	431bde83 	.word	0x431bde83

08001b50 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b58:	4b79      	ldr	r3, [pc, #484]	@ (8001d40 <ADC_Init+0x1f0>)
 8001b5a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	431a      	orrs	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6859      	ldr	r1, [r3, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	021a      	lsls	r2, r3, #8
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	430a      	orrs	r2, r1
 8001b98:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001ba8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6859      	ldr	r1, [r3, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	689a      	ldr	r2, [r3, #8]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6899      	ldr	r1, [r3, #8]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68da      	ldr	r2, [r3, #12]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001be2:	4a58      	ldr	r2, [pc, #352]	@ (8001d44 <ADC_Init+0x1f4>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d022      	beq.n	8001c2e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001bf6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6899      	ldr	r1, [r3, #8]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	430a      	orrs	r2, r1
 8001c08:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001c18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6899      	ldr	r1, [r3, #8]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	e00f      	b.n	8001c4e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001c4c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 0202 	bic.w	r2, r2, #2
 8001c5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6899      	ldr	r1, [r3, #8]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	7e1b      	ldrb	r3, [r3, #24]
 8001c68:	005a      	lsls	r2, r3, #1
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d01b      	beq.n	8001cb4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	685a      	ldr	r2, [r3, #4]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c8a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001c9a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6859      	ldr	r1, [r3, #4]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	035a      	lsls	r2, r3, #13
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	e007      	b.n	8001cc4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cc2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001cd2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	051a      	lsls	r2, r3, #20
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001cf8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6899      	ldr	r1, [r3, #8]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d06:	025a      	lsls	r2, r3, #9
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	689a      	ldr	r2, [r3, #8]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6899      	ldr	r1, [r3, #8]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	029a      	lsls	r2, r3, #10
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	430a      	orrs	r2, r1
 8001d32:	609a      	str	r2, [r3, #8]
}
 8001d34:	bf00      	nop
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	40012300 	.word	0x40012300
 8001d44:	0f000001 	.word	0x0f000001

08001d48 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d54:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d13c      	bne.n	8001ddc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d66:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d12b      	bne.n	8001dd4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d127      	bne.n	8001dd4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d8a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d006      	beq.n	8001da0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d119      	bne.n	8001dd4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	685a      	ldr	r2, [r3, #4]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 0220 	bic.w	r2, r2, #32
 8001dae:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d105      	bne.n	8001dd4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dcc:	f043 0201 	orr.w	r2, r3, #1
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	f7ff fd7b 	bl	80018d0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001dda:	e00e      	b.n	8001dfa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de0:	f003 0310 	and.w	r3, r3, #16
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f7ff fd85 	bl	80018f8 <HAL_ADC_ErrorCallback>
}
 8001dee:	e004      	b.n	8001dfa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	4798      	blx	r3
}
 8001dfa:	bf00      	nop
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b084      	sub	sp, #16
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e0e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e10:	68f8      	ldr	r0, [r7, #12]
 8001e12:	f7ff fd67 	bl	80018e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e16:	bf00      	nop
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b084      	sub	sp, #16
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e2a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2240      	movs	r2, #64	@ 0x40
 8001e30:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e36:	f043 0204 	orr.w	r2, r3, #4
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f7ff fd5a 	bl	80018f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e44:	bf00      	nop
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e90 <__NVIC_SetPriorityGrouping+0x44>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e62:	68ba      	ldr	r2, [r7, #8]
 8001e64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e68:	4013      	ands	r3, r2
 8001e6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e7e:	4a04      	ldr	r2, [pc, #16]	@ (8001e90 <__NVIC_SetPriorityGrouping+0x44>)
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	60d3      	str	r3, [r2, #12]
}
 8001e84:	bf00      	nop
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e98:	4b04      	ldr	r3, [pc, #16]	@ (8001eac <__NVIC_GetPriorityGrouping+0x18>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	0a1b      	lsrs	r3, r3, #8
 8001e9e:	f003 0307 	and.w	r3, r3, #7
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	db0b      	blt.n	8001eda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	f003 021f 	and.w	r2, r3, #31
 8001ec8:	4907      	ldr	r1, [pc, #28]	@ (8001ee8 <__NVIC_EnableIRQ+0x38>)
 8001eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ece:	095b      	lsrs	r3, r3, #5
 8001ed0:	2001      	movs	r0, #1
 8001ed2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	e000e100 	.word	0xe000e100

08001eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	6039      	str	r1, [r7, #0]
 8001ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	db0a      	blt.n	8001f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	490c      	ldr	r1, [pc, #48]	@ (8001f38 <__NVIC_SetPriority+0x4c>)
 8001f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0a:	0112      	lsls	r2, r2, #4
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	440b      	add	r3, r1
 8001f10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f14:	e00a      	b.n	8001f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	4908      	ldr	r1, [pc, #32]	@ (8001f3c <__NVIC_SetPriority+0x50>)
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	3b04      	subs	r3, #4
 8001f24:	0112      	lsls	r2, r2, #4
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	440b      	add	r3, r1
 8001f2a:	761a      	strb	r2, [r3, #24]
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	e000e100 	.word	0xe000e100
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b089      	sub	sp, #36	@ 0x24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	f1c3 0307 	rsb	r3, r3, #7
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	bf28      	it	cs
 8001f5e:	2304      	movcs	r3, #4
 8001f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	3304      	adds	r3, #4
 8001f66:	2b06      	cmp	r3, #6
 8001f68:	d902      	bls.n	8001f70 <NVIC_EncodePriority+0x30>
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3b03      	subs	r3, #3
 8001f6e:	e000      	b.n	8001f72 <NVIC_EncodePriority+0x32>
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43da      	mvns	r2, r3
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	401a      	ands	r2, r3
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f88:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f92:	43d9      	mvns	r1, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f98:	4313      	orrs	r3, r2
         );
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3724      	adds	r7, #36	@ 0x24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7ff ff4c 	bl	8001e4c <__NVIC_SetPriorityGrouping>
}
 8001fb4:	bf00      	nop
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
 8001fc8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fce:	f7ff ff61 	bl	8001e94 <__NVIC_GetPriorityGrouping>
 8001fd2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	68b9      	ldr	r1, [r7, #8]
 8001fd8:	6978      	ldr	r0, [r7, #20]
 8001fda:	f7ff ffb1 	bl	8001f40 <NVIC_EncodePriority>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fe4:	4611      	mov	r1, r2
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff ff80 	bl	8001eec <__NVIC_SetPriority>
}
 8001fec:	bf00      	nop
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff ff54 	bl	8001eb0 <__NVIC_EnableIRQ>
}
 8002008:	bf00      	nop
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800201c:	f7ff fb18 	bl	8001650 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e099      	b.n	8002160 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2202      	movs	r2, #2
 8002030:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f022 0201 	bic.w	r2, r2, #1
 800204a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800204c:	e00f      	b.n	800206e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800204e:	f7ff faff 	bl	8001650 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b05      	cmp	r3, #5
 800205a:	d908      	bls.n	800206e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2220      	movs	r2, #32
 8002060:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2203      	movs	r2, #3
 8002066:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e078      	b.n	8002160 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1e8      	bne.n	800204e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	4b38      	ldr	r3, [pc, #224]	@ (8002168 <HAL_DMA_Init+0x158>)
 8002088:	4013      	ands	r3, r2
 800208a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800209a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	4313      	orrs	r3, r2
 80020be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c4:	2b04      	cmp	r3, #4
 80020c6:	d107      	bne.n	80020d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d0:	4313      	orrs	r3, r2
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	697a      	ldr	r2, [r7, #20]
 80020de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	f023 0307 	bic.w	r3, r3, #7
 80020ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020fe:	2b04      	cmp	r3, #4
 8002100:	d117      	bne.n	8002132 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	4313      	orrs	r3, r2
 800210a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00e      	beq.n	8002132 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 fa6f 	bl	80025f8 <DMA_CheckFifoParam>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d008      	beq.n	8002132 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2240      	movs	r2, #64	@ 0x40
 8002124:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800212e:	2301      	movs	r3, #1
 8002130:	e016      	b.n	8002160 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 fa26 	bl	800258c <DMA_CalcBaseAndBitshift>
 8002140:	4603      	mov	r3, r0
 8002142:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002148:	223f      	movs	r2, #63	@ 0x3f
 800214a:	409a      	lsls	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3718      	adds	r7, #24
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	f010803f 	.word	0xf010803f

0800216c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
 8002178:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800217a:	2300      	movs	r3, #0
 800217c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002182:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800218a:	2b01      	cmp	r3, #1
 800218c:	d101      	bne.n	8002192 <HAL_DMA_Start_IT+0x26>
 800218e:	2302      	movs	r3, #2
 8002190:	e040      	b.n	8002214 <HAL_DMA_Start_IT+0xa8>
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d12f      	bne.n	8002206 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2202      	movs	r2, #2
 80021aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	68b9      	ldr	r1, [r7, #8]
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f000 f9b8 	bl	8002530 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021c4:	223f      	movs	r2, #63	@ 0x3f
 80021c6:	409a      	lsls	r2, r3
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f042 0216 	orr.w	r2, r2, #22
 80021da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d007      	beq.n	80021f4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 0208 	orr.w	r2, r2, #8
 80021f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f042 0201 	orr.w	r2, r2, #1
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	e005      	b.n	8002212 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800220e:	2302      	movs	r3, #2
 8002210:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002212:	7dfb      	ldrb	r3, [r7, #23]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3718      	adds	r7, #24
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002224:	2300      	movs	r3, #0
 8002226:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002228:	4b8e      	ldr	r3, [pc, #568]	@ (8002464 <HAL_DMA_IRQHandler+0x248>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a8e      	ldr	r2, [pc, #568]	@ (8002468 <HAL_DMA_IRQHandler+0x24c>)
 800222e:	fba2 2303 	umull	r2, r3, r2, r3
 8002232:	0a9b      	lsrs	r3, r3, #10
 8002234:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800223a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002246:	2208      	movs	r2, #8
 8002248:	409a      	lsls	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	4013      	ands	r3, r2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d01a      	beq.n	8002288 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	d013      	beq.n	8002288 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0204 	bic.w	r2, r2, #4
 800226e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002274:	2208      	movs	r2, #8
 8002276:	409a      	lsls	r2, r3
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002280:	f043 0201 	orr.w	r2, r3, #1
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800228c:	2201      	movs	r2, #1
 800228e:	409a      	lsls	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4013      	ands	r3, r2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d012      	beq.n	80022be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00b      	beq.n	80022be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022aa:	2201      	movs	r2, #1
 80022ac:	409a      	lsls	r2, r3
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b6:	f043 0202 	orr.w	r2, r3, #2
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022c2:	2204      	movs	r2, #4
 80022c4:	409a      	lsls	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	4013      	ands	r3, r2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d012      	beq.n	80022f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00b      	beq.n	80022f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022e0:	2204      	movs	r2, #4
 80022e2:	409a      	lsls	r2, r3
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ec:	f043 0204 	orr.w	r2, r3, #4
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022f8:	2210      	movs	r2, #16
 80022fa:	409a      	lsls	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	4013      	ands	r3, r2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d043      	beq.n	800238c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0308 	and.w	r3, r3, #8
 800230e:	2b00      	cmp	r3, #0
 8002310:	d03c      	beq.n	800238c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002316:	2210      	movs	r2, #16
 8002318:	409a      	lsls	r2, r3
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d018      	beq.n	800235e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d108      	bne.n	800234c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233e:	2b00      	cmp	r3, #0
 8002340:	d024      	beq.n	800238c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	4798      	blx	r3
 800234a:	e01f      	b.n	800238c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002350:	2b00      	cmp	r3, #0
 8002352:	d01b      	beq.n	800238c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	4798      	blx	r3
 800235c:	e016      	b.n	800238c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002368:	2b00      	cmp	r3, #0
 800236a:	d107      	bne.n	800237c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0208 	bic.w	r2, r2, #8
 800237a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002380:	2b00      	cmp	r3, #0
 8002382:	d003      	beq.n	800238c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002390:	2220      	movs	r2, #32
 8002392:	409a      	lsls	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	4013      	ands	r3, r2
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 808f 	beq.w	80024bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0310 	and.w	r3, r3, #16
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f000 8087 	beq.w	80024bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023b2:	2220      	movs	r2, #32
 80023b4:	409a      	lsls	r2, r3
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b05      	cmp	r3, #5
 80023c4:	d136      	bne.n	8002434 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0216 	bic.w	r2, r2, #22
 80023d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	695a      	ldr	r2, [r3, #20]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d103      	bne.n	80023f6 <HAL_DMA_IRQHandler+0x1da>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d007      	beq.n	8002406 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f022 0208 	bic.w	r2, r2, #8
 8002404:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800240a:	223f      	movs	r2, #63	@ 0x3f
 800240c:	409a      	lsls	r2, r3
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002426:	2b00      	cmp	r3, #0
 8002428:	d07e      	beq.n	8002528 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	4798      	blx	r3
        }
        return;
 8002432:	e079      	b.n	8002528 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d01d      	beq.n	800247e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10d      	bne.n	800246c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002454:	2b00      	cmp	r3, #0
 8002456:	d031      	beq.n	80024bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	4798      	blx	r3
 8002460:	e02c      	b.n	80024bc <HAL_DMA_IRQHandler+0x2a0>
 8002462:	bf00      	nop
 8002464:	20000010 	.word	0x20000010
 8002468:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002470:	2b00      	cmp	r3, #0
 8002472:	d023      	beq.n	80024bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	4798      	blx	r3
 800247c:	e01e      	b.n	80024bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10f      	bne.n	80024ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0210 	bic.w	r2, r2, #16
 800249a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d032      	beq.n	800252a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d022      	beq.n	8002516 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2205      	movs	r2, #5
 80024d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 0201 	bic.w	r2, r2, #1
 80024e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	3301      	adds	r3, #1
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d307      	bcc.n	8002504 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f2      	bne.n	80024e8 <HAL_DMA_IRQHandler+0x2cc>
 8002502:	e000      	b.n	8002506 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002504:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800251a:	2b00      	cmp	r3, #0
 800251c:	d005      	beq.n	800252a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	4798      	blx	r3
 8002526:	e000      	b.n	800252a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002528:	bf00      	nop
    }
  }
}
 800252a:	3718      	adds	r7, #24
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
 800253c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800254c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	2b40      	cmp	r3, #64	@ 0x40
 800255c:	d108      	bne.n	8002570 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800256e:	e007      	b.n	8002580 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68ba      	ldr	r2, [r7, #8]
 8002576:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	60da      	str	r2, [r3, #12]
}
 8002580:	bf00      	nop
 8002582:	3714      	adds	r7, #20
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	b2db      	uxtb	r3, r3
 800259a:	3b10      	subs	r3, #16
 800259c:	4a14      	ldr	r2, [pc, #80]	@ (80025f0 <DMA_CalcBaseAndBitshift+0x64>)
 800259e:	fba2 2303 	umull	r2, r3, r2, r3
 80025a2:	091b      	lsrs	r3, r3, #4
 80025a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80025a6:	4a13      	ldr	r2, [pc, #76]	@ (80025f4 <DMA_CalcBaseAndBitshift+0x68>)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	4413      	add	r3, r2
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	461a      	mov	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2b03      	cmp	r3, #3
 80025b8:	d909      	bls.n	80025ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80025c2:	f023 0303 	bic.w	r3, r3, #3
 80025c6:	1d1a      	adds	r2, r3, #4
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	659a      	str	r2, [r3, #88]	@ 0x58
 80025cc:	e007      	b.n	80025de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80025d6:	f023 0303 	bic.w	r3, r3, #3
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	aaaaaaab 	.word	0xaaaaaaab
 80025f4:	080086f4 	.word	0x080086f4

080025f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002600:	2300      	movs	r3, #0
 8002602:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002608:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d11f      	bne.n	8002652 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	2b03      	cmp	r3, #3
 8002616:	d856      	bhi.n	80026c6 <DMA_CheckFifoParam+0xce>
 8002618:	a201      	add	r2, pc, #4	@ (adr r2, 8002620 <DMA_CheckFifoParam+0x28>)
 800261a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800261e:	bf00      	nop
 8002620:	08002631 	.word	0x08002631
 8002624:	08002643 	.word	0x08002643
 8002628:	08002631 	.word	0x08002631
 800262c:	080026c7 	.word	0x080026c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002634:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d046      	beq.n	80026ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002640:	e043      	b.n	80026ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002646:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800264a:	d140      	bne.n	80026ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002650:	e03d      	b.n	80026ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800265a:	d121      	bne.n	80026a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	2b03      	cmp	r3, #3
 8002660:	d837      	bhi.n	80026d2 <DMA_CheckFifoParam+0xda>
 8002662:	a201      	add	r2, pc, #4	@ (adr r2, 8002668 <DMA_CheckFifoParam+0x70>)
 8002664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002668:	08002679 	.word	0x08002679
 800266c:	0800267f 	.word	0x0800267f
 8002670:	08002679 	.word	0x08002679
 8002674:	08002691 	.word	0x08002691
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	73fb      	strb	r3, [r7, #15]
      break;
 800267c:	e030      	b.n	80026e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002682:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d025      	beq.n	80026d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800268e:	e022      	b.n	80026d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002694:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002698:	d11f      	bne.n	80026da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800269e:	e01c      	b.n	80026da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d903      	bls.n	80026ae <DMA_CheckFifoParam+0xb6>
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2b03      	cmp	r3, #3
 80026aa:	d003      	beq.n	80026b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80026ac:	e018      	b.n	80026e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	73fb      	strb	r3, [r7, #15]
      break;
 80026b2:	e015      	b.n	80026e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00e      	beq.n	80026de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	73fb      	strb	r3, [r7, #15]
      break;
 80026c4:	e00b      	b.n	80026de <DMA_CheckFifoParam+0xe6>
      break;
 80026c6:	bf00      	nop
 80026c8:	e00a      	b.n	80026e0 <DMA_CheckFifoParam+0xe8>
      break;
 80026ca:	bf00      	nop
 80026cc:	e008      	b.n	80026e0 <DMA_CheckFifoParam+0xe8>
      break;
 80026ce:	bf00      	nop
 80026d0:	e006      	b.n	80026e0 <DMA_CheckFifoParam+0xe8>
      break;
 80026d2:	bf00      	nop
 80026d4:	e004      	b.n	80026e0 <DMA_CheckFifoParam+0xe8>
      break;
 80026d6:	bf00      	nop
 80026d8:	e002      	b.n	80026e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80026da:	bf00      	nop
 80026dc:	e000      	b.n	80026e0 <DMA_CheckFifoParam+0xe8>
      break;
 80026de:	bf00      	nop
    }
  } 
  
  return status; 
 80026e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop

080026f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b089      	sub	sp, #36	@ 0x24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026fa:	2300      	movs	r3, #0
 80026fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026fe:	2300      	movs	r3, #0
 8002700:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002702:	2300      	movs	r3, #0
 8002704:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002706:	2300      	movs	r3, #0
 8002708:	61fb      	str	r3, [r7, #28]
 800270a:	e159      	b.n	80029c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800270c:	2201      	movs	r2, #1
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	4013      	ands	r3, r2
 800271e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	429a      	cmp	r2, r3
 8002726:	f040 8148 	bne.w	80029ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f003 0303 	and.w	r3, r3, #3
 8002732:	2b01      	cmp	r3, #1
 8002734:	d005      	beq.n	8002742 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800273e:	2b02      	cmp	r3, #2
 8002740:	d130      	bne.n	80027a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	2203      	movs	r2, #3
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	43db      	mvns	r3, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4013      	ands	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	68da      	ldr	r2, [r3, #12]
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4313      	orrs	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002778:	2201      	movs	r2, #1
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	43db      	mvns	r3, r3
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4013      	ands	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	091b      	lsrs	r3, r3, #4
 800278e:	f003 0201 	and.w	r2, r3, #1
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4313      	orrs	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 0303 	and.w	r3, r3, #3
 80027ac:	2b03      	cmp	r3, #3
 80027ae:	d017      	beq.n	80027e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	2203      	movs	r2, #3
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	43db      	mvns	r3, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4013      	ands	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f003 0303 	and.w	r3, r3, #3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d123      	bne.n	8002834 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	08da      	lsrs	r2, r3, #3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3208      	adds	r2, #8
 80027f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	220f      	movs	r2, #15
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4013      	ands	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	691a      	ldr	r2, [r3, #16]
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4313      	orrs	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	08da      	lsrs	r2, r3, #3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	3208      	adds	r2, #8
 800282e:	69b9      	ldr	r1, [r7, #24]
 8002830:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	2203      	movs	r2, #3
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	43db      	mvns	r3, r3
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	4013      	ands	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f003 0203 	and.w	r2, r3, #3
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4313      	orrs	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002870:	2b00      	cmp	r3, #0
 8002872:	f000 80a2 	beq.w	80029ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	4b57      	ldr	r3, [pc, #348]	@ (80029d8 <HAL_GPIO_Init+0x2e8>)
 800287c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800287e:	4a56      	ldr	r2, [pc, #344]	@ (80029d8 <HAL_GPIO_Init+0x2e8>)
 8002880:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002884:	6453      	str	r3, [r2, #68]	@ 0x44
 8002886:	4b54      	ldr	r3, [pc, #336]	@ (80029d8 <HAL_GPIO_Init+0x2e8>)
 8002888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002892:	4a52      	ldr	r2, [pc, #328]	@ (80029dc <HAL_GPIO_Init+0x2ec>)
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	089b      	lsrs	r3, r3, #2
 8002898:	3302      	adds	r3, #2
 800289a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800289e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f003 0303 	and.w	r3, r3, #3
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	220f      	movs	r2, #15
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43db      	mvns	r3, r3
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	4013      	ands	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a49      	ldr	r2, [pc, #292]	@ (80029e0 <HAL_GPIO_Init+0x2f0>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d019      	beq.n	80028f2 <HAL_GPIO_Init+0x202>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a48      	ldr	r2, [pc, #288]	@ (80029e4 <HAL_GPIO_Init+0x2f4>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d013      	beq.n	80028ee <HAL_GPIO_Init+0x1fe>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a47      	ldr	r2, [pc, #284]	@ (80029e8 <HAL_GPIO_Init+0x2f8>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d00d      	beq.n	80028ea <HAL_GPIO_Init+0x1fa>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a46      	ldr	r2, [pc, #280]	@ (80029ec <HAL_GPIO_Init+0x2fc>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d007      	beq.n	80028e6 <HAL_GPIO_Init+0x1f6>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a45      	ldr	r2, [pc, #276]	@ (80029f0 <HAL_GPIO_Init+0x300>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d101      	bne.n	80028e2 <HAL_GPIO_Init+0x1f2>
 80028de:	2304      	movs	r3, #4
 80028e0:	e008      	b.n	80028f4 <HAL_GPIO_Init+0x204>
 80028e2:	2307      	movs	r3, #7
 80028e4:	e006      	b.n	80028f4 <HAL_GPIO_Init+0x204>
 80028e6:	2303      	movs	r3, #3
 80028e8:	e004      	b.n	80028f4 <HAL_GPIO_Init+0x204>
 80028ea:	2302      	movs	r3, #2
 80028ec:	e002      	b.n	80028f4 <HAL_GPIO_Init+0x204>
 80028ee:	2301      	movs	r3, #1
 80028f0:	e000      	b.n	80028f4 <HAL_GPIO_Init+0x204>
 80028f2:	2300      	movs	r3, #0
 80028f4:	69fa      	ldr	r2, [r7, #28]
 80028f6:	f002 0203 	and.w	r2, r2, #3
 80028fa:	0092      	lsls	r2, r2, #2
 80028fc:	4093      	lsls	r3, r2
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4313      	orrs	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002904:	4935      	ldr	r1, [pc, #212]	@ (80029dc <HAL_GPIO_Init+0x2ec>)
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	089b      	lsrs	r3, r3, #2
 800290a:	3302      	adds	r3, #2
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002912:	4b38      	ldr	r3, [pc, #224]	@ (80029f4 <HAL_GPIO_Init+0x304>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	43db      	mvns	r3, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4013      	ands	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	4313      	orrs	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002936:	4a2f      	ldr	r2, [pc, #188]	@ (80029f4 <HAL_GPIO_Init+0x304>)
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800293c:	4b2d      	ldr	r3, [pc, #180]	@ (80029f4 <HAL_GPIO_Init+0x304>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	43db      	mvns	r3, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4013      	ands	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d003      	beq.n	8002960 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	4313      	orrs	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002960:	4a24      	ldr	r2, [pc, #144]	@ (80029f4 <HAL_GPIO_Init+0x304>)
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002966:	4b23      	ldr	r3, [pc, #140]	@ (80029f4 <HAL_GPIO_Init+0x304>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	43db      	mvns	r3, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4013      	ands	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	4313      	orrs	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800298a:	4a1a      	ldr	r2, [pc, #104]	@ (80029f4 <HAL_GPIO_Init+0x304>)
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002990:	4b18      	ldr	r3, [pc, #96]	@ (80029f4 <HAL_GPIO_Init+0x304>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	43db      	mvns	r3, r3
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4013      	ands	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029b4:	4a0f      	ldr	r2, [pc, #60]	@ (80029f4 <HAL_GPIO_Init+0x304>)
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	3301      	adds	r3, #1
 80029be:	61fb      	str	r3, [r7, #28]
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	2b0f      	cmp	r3, #15
 80029c4:	f67f aea2 	bls.w	800270c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029c8:	bf00      	nop
 80029ca:	bf00      	nop
 80029cc:	3724      	adds	r7, #36	@ 0x24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	40023800 	.word	0x40023800
 80029dc:	40013800 	.word	0x40013800
 80029e0:	40020000 	.word	0x40020000
 80029e4:	40020400 	.word	0x40020400
 80029e8:	40020800 	.word	0x40020800
 80029ec:	40020c00 	.word	0x40020c00
 80029f0:	40021000 	.word	0x40021000
 80029f4:	40013c00 	.word	0x40013c00

080029f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e12b      	b.n	8002c62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d106      	bne.n	8002a24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7fe f884 	bl	8000b2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2224      	movs	r2, #36	@ 0x24
 8002a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 0201 	bic.w	r2, r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a5c:	f000 fd40 	bl	80034e0 <HAL_RCC_GetPCLK1Freq>
 8002a60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	4a81      	ldr	r2, [pc, #516]	@ (8002c6c <HAL_I2C_Init+0x274>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d807      	bhi.n	8002a7c <HAL_I2C_Init+0x84>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	4a80      	ldr	r2, [pc, #512]	@ (8002c70 <HAL_I2C_Init+0x278>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	bf94      	ite	ls
 8002a74:	2301      	movls	r3, #1
 8002a76:	2300      	movhi	r3, #0
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	e006      	b.n	8002a8a <HAL_I2C_Init+0x92>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4a7d      	ldr	r2, [pc, #500]	@ (8002c74 <HAL_I2C_Init+0x27c>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	bf94      	ite	ls
 8002a84:	2301      	movls	r3, #1
 8002a86:	2300      	movhi	r3, #0
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e0e7      	b.n	8002c62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	4a78      	ldr	r2, [pc, #480]	@ (8002c78 <HAL_I2C_Init+0x280>)
 8002a96:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9a:	0c9b      	lsrs	r3, r3, #18
 8002a9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68ba      	ldr	r2, [r7, #8]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	4a6a      	ldr	r2, [pc, #424]	@ (8002c6c <HAL_I2C_Init+0x274>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d802      	bhi.n	8002acc <HAL_I2C_Init+0xd4>
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	e009      	b.n	8002ae0 <HAL_I2C_Init+0xe8>
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002ad2:	fb02 f303 	mul.w	r3, r2, r3
 8002ad6:	4a69      	ldr	r2, [pc, #420]	@ (8002c7c <HAL_I2C_Init+0x284>)
 8002ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8002adc:	099b      	lsrs	r3, r3, #6
 8002ade:	3301      	adds	r3, #1
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	6812      	ldr	r2, [r2, #0]
 8002ae4:	430b      	orrs	r3, r1
 8002ae6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002af2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	495c      	ldr	r1, [pc, #368]	@ (8002c6c <HAL_I2C_Init+0x274>)
 8002afc:	428b      	cmp	r3, r1
 8002afe:	d819      	bhi.n	8002b34 <HAL_I2C_Init+0x13c>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	1e59      	subs	r1, r3, #1
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b0e:	1c59      	adds	r1, r3, #1
 8002b10:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002b14:	400b      	ands	r3, r1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00a      	beq.n	8002b30 <HAL_I2C_Init+0x138>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	1e59      	subs	r1, r3, #1
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b28:	3301      	adds	r3, #1
 8002b2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b2e:	e051      	b.n	8002bd4 <HAL_I2C_Init+0x1dc>
 8002b30:	2304      	movs	r3, #4
 8002b32:	e04f      	b.n	8002bd4 <HAL_I2C_Init+0x1dc>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d111      	bne.n	8002b60 <HAL_I2C_Init+0x168>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	1e58      	subs	r0, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6859      	ldr	r1, [r3, #4]
 8002b44:	460b      	mov	r3, r1
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	440b      	add	r3, r1
 8002b4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b4e:	3301      	adds	r3, #1
 8002b50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	bf0c      	ite	eq
 8002b58:	2301      	moveq	r3, #1
 8002b5a:	2300      	movne	r3, #0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	e012      	b.n	8002b86 <HAL_I2C_Init+0x18e>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	1e58      	subs	r0, r3, #1
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6859      	ldr	r1, [r3, #4]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	0099      	lsls	r1, r3, #2
 8002b70:	440b      	add	r3, r1
 8002b72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b76:	3301      	adds	r3, #1
 8002b78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	bf0c      	ite	eq
 8002b80:	2301      	moveq	r3, #1
 8002b82:	2300      	movne	r3, #0
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <HAL_I2C_Init+0x196>
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e022      	b.n	8002bd4 <HAL_I2C_Init+0x1dc>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10e      	bne.n	8002bb4 <HAL_I2C_Init+0x1bc>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	1e58      	subs	r0, r3, #1
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6859      	ldr	r1, [r3, #4]
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	440b      	add	r3, r1
 8002ba4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ba8:	3301      	adds	r3, #1
 8002baa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bb2:	e00f      	b.n	8002bd4 <HAL_I2C_Init+0x1dc>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	1e58      	subs	r0, r3, #1
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6859      	ldr	r1, [r3, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	0099      	lsls	r1, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bca:	3301      	adds	r3, #1
 8002bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bd0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	6809      	ldr	r1, [r1, #0]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69da      	ldr	r2, [r3, #28]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002c02:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	6911      	ldr	r1, [r2, #16]
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	68d2      	ldr	r2, [r2, #12]
 8002c0e:	4311      	orrs	r1, r2
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6812      	ldr	r2, [r2, #0]
 8002c14:	430b      	orrs	r3, r1
 8002c16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	695a      	ldr	r2, [r3, #20]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 0201 	orr.w	r2, r2, #1
 8002c42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	000186a0 	.word	0x000186a0
 8002c70:	001e847f 	.word	0x001e847f
 8002c74:	003d08ff 	.word	0x003d08ff
 8002c78:	431bde83 	.word	0x431bde83
 8002c7c:	10624dd3 	.word	0x10624dd3

08002c80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e267      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d075      	beq.n	8002d8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002c9e:	4b88      	ldr	r3, [pc, #544]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 030c 	and.w	r3, r3, #12
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d00c      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002caa:	4b85      	ldr	r3, [pc, #532]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	d112      	bne.n	8002cdc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cb6:	4b82      	ldr	r3, [pc, #520]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cbe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cc2:	d10b      	bne.n	8002cdc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc4:	4b7e      	ldr	r3, [pc, #504]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d05b      	beq.n	8002d88 <HAL_RCC_OscConfig+0x108>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d157      	bne.n	8002d88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e242      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ce4:	d106      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x74>
 8002ce6:	4b76      	ldr	r3, [pc, #472]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a75      	ldr	r2, [pc, #468]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002cec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cf0:	6013      	str	r3, [r2, #0]
 8002cf2:	e01d      	b.n	8002d30 <HAL_RCC_OscConfig+0xb0>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cfc:	d10c      	bne.n	8002d18 <HAL_RCC_OscConfig+0x98>
 8002cfe:	4b70      	ldr	r3, [pc, #448]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a6f      	ldr	r2, [pc, #444]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d08:	6013      	str	r3, [r2, #0]
 8002d0a:	4b6d      	ldr	r3, [pc, #436]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a6c      	ldr	r2, [pc, #432]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	e00b      	b.n	8002d30 <HAL_RCC_OscConfig+0xb0>
 8002d18:	4b69      	ldr	r3, [pc, #420]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a68      	ldr	r2, [pc, #416]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d22:	6013      	str	r3, [r2, #0]
 8002d24:	4b66      	ldr	r3, [pc, #408]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a65      	ldr	r2, [pc, #404]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d013      	beq.n	8002d60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d38:	f7fe fc8a 	bl	8001650 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d40:	f7fe fc86 	bl	8001650 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b64      	cmp	r3, #100	@ 0x64
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e207      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d52:	4b5b      	ldr	r3, [pc, #364]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0f0      	beq.n	8002d40 <HAL_RCC_OscConfig+0xc0>
 8002d5e:	e014      	b.n	8002d8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d60:	f7fe fc76 	bl	8001650 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d68:	f7fe fc72 	bl	8001650 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b64      	cmp	r3, #100	@ 0x64
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e1f3      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d7a:	4b51      	ldr	r3, [pc, #324]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1f0      	bne.n	8002d68 <HAL_RCC_OscConfig+0xe8>
 8002d86:	e000      	b.n	8002d8a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d063      	beq.n	8002e5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002d96:	4b4a      	ldr	r3, [pc, #296]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 030c 	and.w	r3, r3, #12
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00b      	beq.n	8002dba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002da2:	4b47      	ldr	r3, [pc, #284]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002daa:	2b08      	cmp	r3, #8
 8002dac:	d11c      	bne.n	8002de8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dae:	4b44      	ldr	r3, [pc, #272]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d116      	bne.n	8002de8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dba:	4b41      	ldr	r3, [pc, #260]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d005      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x152>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d001      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e1c7      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	4937      	ldr	r1, [pc, #220]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002de6:	e03a      	b.n	8002e5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d020      	beq.n	8002e32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002df0:	4b34      	ldr	r3, [pc, #208]	@ (8002ec4 <HAL_RCC_OscConfig+0x244>)
 8002df2:	2201      	movs	r2, #1
 8002df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df6:	f7fe fc2b 	bl	8001650 <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dfc:	e008      	b.n	8002e10 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dfe:	f7fe fc27 	bl	8001650 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e1a8      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e10:	4b2b      	ldr	r3, [pc, #172]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0f0      	beq.n	8002dfe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e1c:	4b28      	ldr	r3, [pc, #160]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	4925      	ldr	r1, [pc, #148]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	600b      	str	r3, [r1, #0]
 8002e30:	e015      	b.n	8002e5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e32:	4b24      	ldr	r3, [pc, #144]	@ (8002ec4 <HAL_RCC_OscConfig+0x244>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e38:	f7fe fc0a 	bl	8001650 <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e40:	f7fe fc06 	bl	8001650 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e187      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e52:	4b1b      	ldr	r3, [pc, #108]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f0      	bne.n	8002e40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0308 	and.w	r3, r3, #8
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d036      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d016      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e72:	4b15      	ldr	r3, [pc, #84]	@ (8002ec8 <HAL_RCC_OscConfig+0x248>)
 8002e74:	2201      	movs	r2, #1
 8002e76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e78:	f7fe fbea 	bl	8001650 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e80:	f7fe fbe6 	bl	8001650 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e167      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e92:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002e94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0f0      	beq.n	8002e80 <HAL_RCC_OscConfig+0x200>
 8002e9e:	e01b      	b.n	8002ed8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ea0:	4b09      	ldr	r3, [pc, #36]	@ (8002ec8 <HAL_RCC_OscConfig+0x248>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea6:	f7fe fbd3 	bl	8001650 <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eac:	e00e      	b.n	8002ecc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eae:	f7fe fbcf 	bl	8001650 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d907      	bls.n	8002ecc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e150      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	42470000 	.word	0x42470000
 8002ec8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ecc:	4b88      	ldr	r3, [pc, #544]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002ece:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1ea      	bne.n	8002eae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 8097 	beq.w	8003014 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eea:	4b81      	ldr	r3, [pc, #516]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10f      	bne.n	8002f16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60bb      	str	r3, [r7, #8]
 8002efa:	4b7d      	ldr	r3, [pc, #500]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efe:	4a7c      	ldr	r2, [pc, #496]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f04:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f06:	4b7a      	ldr	r3, [pc, #488]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f12:	2301      	movs	r3, #1
 8002f14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f16:	4b77      	ldr	r3, [pc, #476]	@ (80030f4 <HAL_RCC_OscConfig+0x474>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d118      	bne.n	8002f54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f22:	4b74      	ldr	r3, [pc, #464]	@ (80030f4 <HAL_RCC_OscConfig+0x474>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a73      	ldr	r2, [pc, #460]	@ (80030f4 <HAL_RCC_OscConfig+0x474>)
 8002f28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f2e:	f7fe fb8f 	bl	8001650 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f34:	e008      	b.n	8002f48 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f36:	f7fe fb8b 	bl	8001650 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e10c      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f48:	4b6a      	ldr	r3, [pc, #424]	@ (80030f4 <HAL_RCC_OscConfig+0x474>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0f0      	beq.n	8002f36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d106      	bne.n	8002f6a <HAL_RCC_OscConfig+0x2ea>
 8002f5c:	4b64      	ldr	r3, [pc, #400]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f60:	4a63      	ldr	r2, [pc, #396]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f62:	f043 0301 	orr.w	r3, r3, #1
 8002f66:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f68:	e01c      	b.n	8002fa4 <HAL_RCC_OscConfig+0x324>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	2b05      	cmp	r3, #5
 8002f70:	d10c      	bne.n	8002f8c <HAL_RCC_OscConfig+0x30c>
 8002f72:	4b5f      	ldr	r3, [pc, #380]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f76:	4a5e      	ldr	r2, [pc, #376]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f78:	f043 0304 	orr.w	r3, r3, #4
 8002f7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f7e:	4b5c      	ldr	r3, [pc, #368]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f82:	4a5b      	ldr	r2, [pc, #364]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f84:	f043 0301 	orr.w	r3, r3, #1
 8002f88:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f8a:	e00b      	b.n	8002fa4 <HAL_RCC_OscConfig+0x324>
 8002f8c:	4b58      	ldr	r3, [pc, #352]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f90:	4a57      	ldr	r2, [pc, #348]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f92:	f023 0301 	bic.w	r3, r3, #1
 8002f96:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f98:	4b55      	ldr	r3, [pc, #340]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f9c:	4a54      	ldr	r2, [pc, #336]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f9e:	f023 0304 	bic.w	r3, r3, #4
 8002fa2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d015      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fac:	f7fe fb50 	bl	8001650 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb2:	e00a      	b.n	8002fca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fb4:	f7fe fb4c 	bl	8001650 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e0cb      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fca:	4b49      	ldr	r3, [pc, #292]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d0ee      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x334>
 8002fd6:	e014      	b.n	8003002 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fd8:	f7fe fb3a 	bl	8001650 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fde:	e00a      	b.n	8002ff6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fe0:	f7fe fb36 	bl	8001650 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e0b5      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ff6:	4b3e      	ldr	r3, [pc, #248]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1ee      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003002:	7dfb      	ldrb	r3, [r7, #23]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d105      	bne.n	8003014 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003008:	4b39      	ldr	r3, [pc, #228]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 800300a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300c:	4a38      	ldr	r2, [pc, #224]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 800300e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003012:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 80a1 	beq.w	8003160 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800301e:	4b34      	ldr	r3, [pc, #208]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 030c 	and.w	r3, r3, #12
 8003026:	2b08      	cmp	r3, #8
 8003028:	d05c      	beq.n	80030e4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	2b02      	cmp	r3, #2
 8003030:	d141      	bne.n	80030b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003032:	4b31      	ldr	r3, [pc, #196]	@ (80030f8 <HAL_RCC_OscConfig+0x478>)
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003038:	f7fe fb0a 	bl	8001650 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003040:	f7fe fb06 	bl	8001650 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e087      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003052:	4b27      	ldr	r3, [pc, #156]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1f0      	bne.n	8003040 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69da      	ldr	r2, [r3, #28]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306c:	019b      	lsls	r3, r3, #6
 800306e:	431a      	orrs	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003074:	085b      	lsrs	r3, r3, #1
 8003076:	3b01      	subs	r3, #1
 8003078:	041b      	lsls	r3, r3, #16
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003080:	061b      	lsls	r3, r3, #24
 8003082:	491b      	ldr	r1, [pc, #108]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 8003084:	4313      	orrs	r3, r2
 8003086:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003088:	4b1b      	ldr	r3, [pc, #108]	@ (80030f8 <HAL_RCC_OscConfig+0x478>)
 800308a:	2201      	movs	r2, #1
 800308c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800308e:	f7fe fadf 	bl	8001650 <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003094:	e008      	b.n	80030a8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003096:	f7fe fadb 	bl	8001650 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e05c      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030a8:	4b11      	ldr	r3, [pc, #68]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0f0      	beq.n	8003096 <HAL_RCC_OscConfig+0x416>
 80030b4:	e054      	b.n	8003160 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b6:	4b10      	ldr	r3, [pc, #64]	@ (80030f8 <HAL_RCC_OscConfig+0x478>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030bc:	f7fe fac8 	bl	8001650 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c4:	f7fe fac4 	bl	8001650 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e045      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030d6:	4b06      	ldr	r3, [pc, #24]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1f0      	bne.n	80030c4 <HAL_RCC_OscConfig+0x444>
 80030e2:	e03d      	b.n	8003160 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d107      	bne.n	80030fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e038      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
 80030f0:	40023800 	.word	0x40023800
 80030f4:	40007000 	.word	0x40007000
 80030f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030fc:	4b1b      	ldr	r3, [pc, #108]	@ (800316c <HAL_RCC_OscConfig+0x4ec>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d028      	beq.n	800315c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003114:	429a      	cmp	r2, r3
 8003116:	d121      	bne.n	800315c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003122:	429a      	cmp	r2, r3
 8003124:	d11a      	bne.n	800315c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800312c:	4013      	ands	r3, r2
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003132:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003134:	4293      	cmp	r3, r2
 8003136:	d111      	bne.n	800315c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003142:	085b      	lsrs	r3, r3, #1
 8003144:	3b01      	subs	r3, #1
 8003146:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003148:	429a      	cmp	r2, r3
 800314a:	d107      	bne.n	800315c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003156:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003158:	429a      	cmp	r2, r3
 800315a:	d001      	beq.n	8003160 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e000      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3718      	adds	r7, #24
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40023800 	.word	0x40023800

08003170 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e0cc      	b.n	800331e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003184:	4b68      	ldr	r3, [pc, #416]	@ (8003328 <HAL_RCC_ClockConfig+0x1b8>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	429a      	cmp	r2, r3
 8003190:	d90c      	bls.n	80031ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003192:	4b65      	ldr	r3, [pc, #404]	@ (8003328 <HAL_RCC_ClockConfig+0x1b8>)
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	b2d2      	uxtb	r2, r2
 8003198:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800319a:	4b63      	ldr	r3, [pc, #396]	@ (8003328 <HAL_RCC_ClockConfig+0x1b8>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0307 	and.w	r3, r3, #7
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d001      	beq.n	80031ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e0b8      	b.n	800331e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d020      	beq.n	80031fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0304 	and.w	r3, r3, #4
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d005      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031c4:	4b59      	ldr	r3, [pc, #356]	@ (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	4a58      	ldr	r2, [pc, #352]	@ (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80031ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80031ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0308 	and.w	r3, r3, #8
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d005      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031dc:	4b53      	ldr	r3, [pc, #332]	@ (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	4a52      	ldr	r2, [pc, #328]	@ (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80031e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80031e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031e8:	4b50      	ldr	r3, [pc, #320]	@ (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	494d      	ldr	r1, [pc, #308]	@ (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	d044      	beq.n	8003290 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d107      	bne.n	800321e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800320e:	4b47      	ldr	r3, [pc, #284]	@ (800332c <HAL_RCC_ClockConfig+0x1bc>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d119      	bne.n	800324e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e07f      	b.n	800331e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b02      	cmp	r3, #2
 8003224:	d003      	beq.n	800322e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800322a:	2b03      	cmp	r3, #3
 800322c:	d107      	bne.n	800323e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800322e:	4b3f      	ldr	r3, [pc, #252]	@ (800332c <HAL_RCC_ClockConfig+0x1bc>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d109      	bne.n	800324e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e06f      	b.n	800331e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800323e:	4b3b      	ldr	r3, [pc, #236]	@ (800332c <HAL_RCC_ClockConfig+0x1bc>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e067      	b.n	800331e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800324e:	4b37      	ldr	r3, [pc, #220]	@ (800332c <HAL_RCC_ClockConfig+0x1bc>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f023 0203 	bic.w	r2, r3, #3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	4934      	ldr	r1, [pc, #208]	@ (800332c <HAL_RCC_ClockConfig+0x1bc>)
 800325c:	4313      	orrs	r3, r2
 800325e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003260:	f7fe f9f6 	bl	8001650 <HAL_GetTick>
 8003264:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003266:	e00a      	b.n	800327e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003268:	f7fe f9f2 	bl	8001650 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003276:	4293      	cmp	r3, r2
 8003278:	d901      	bls.n	800327e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e04f      	b.n	800331e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800327e:	4b2b      	ldr	r3, [pc, #172]	@ (800332c <HAL_RCC_ClockConfig+0x1bc>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 020c 	and.w	r2, r3, #12
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	429a      	cmp	r2, r3
 800328e:	d1eb      	bne.n	8003268 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003290:	4b25      	ldr	r3, [pc, #148]	@ (8003328 <HAL_RCC_ClockConfig+0x1b8>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0307 	and.w	r3, r3, #7
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	429a      	cmp	r2, r3
 800329c:	d20c      	bcs.n	80032b8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329e:	4b22      	ldr	r3, [pc, #136]	@ (8003328 <HAL_RCC_ClockConfig+0x1b8>)
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032a6:	4b20      	ldr	r3, [pc, #128]	@ (8003328 <HAL_RCC_ClockConfig+0x1b8>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0307 	and.w	r3, r3, #7
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d001      	beq.n	80032b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e032      	b.n	800331e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0304 	and.w	r3, r3, #4
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d008      	beq.n	80032d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032c4:	4b19      	ldr	r3, [pc, #100]	@ (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	4916      	ldr	r1, [pc, #88]	@ (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0308 	and.w	r3, r3, #8
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d009      	beq.n	80032f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032e2:	4b12      	ldr	r3, [pc, #72]	@ (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	490e      	ldr	r1, [pc, #56]	@ (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032f6:	f000 f821 	bl	800333c <HAL_RCC_GetSysClockFreq>
 80032fa:	4602      	mov	r2, r0
 80032fc:	4b0b      	ldr	r3, [pc, #44]	@ (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	091b      	lsrs	r3, r3, #4
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	490a      	ldr	r1, [pc, #40]	@ (8003330 <HAL_RCC_ClockConfig+0x1c0>)
 8003308:	5ccb      	ldrb	r3, [r1, r3]
 800330a:	fa22 f303 	lsr.w	r3, r2, r3
 800330e:	4a09      	ldr	r2, [pc, #36]	@ (8003334 <HAL_RCC_ClockConfig+0x1c4>)
 8003310:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003312:	4b09      	ldr	r3, [pc, #36]	@ (8003338 <HAL_RCC_ClockConfig+0x1c8>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f7fd fd3c 	bl	8000d94 <HAL_InitTick>

  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40023c00 	.word	0x40023c00
 800332c:	40023800 	.word	0x40023800
 8003330:	080086dc 	.word	0x080086dc
 8003334:	20000010 	.word	0x20000010
 8003338:	20000014 	.word	0x20000014

0800333c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800333c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003340:	b090      	sub	sp, #64	@ 0x40
 8003342:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003344:	2300      	movs	r3, #0
 8003346:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003348:	2300      	movs	r3, #0
 800334a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003350:	2300      	movs	r3, #0
 8003352:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003354:	4b59      	ldr	r3, [pc, #356]	@ (80034bc <HAL_RCC_GetSysClockFreq+0x180>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f003 030c 	and.w	r3, r3, #12
 800335c:	2b08      	cmp	r3, #8
 800335e:	d00d      	beq.n	800337c <HAL_RCC_GetSysClockFreq+0x40>
 8003360:	2b08      	cmp	r3, #8
 8003362:	f200 80a1 	bhi.w	80034a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003366:	2b00      	cmp	r3, #0
 8003368:	d002      	beq.n	8003370 <HAL_RCC_GetSysClockFreq+0x34>
 800336a:	2b04      	cmp	r3, #4
 800336c:	d003      	beq.n	8003376 <HAL_RCC_GetSysClockFreq+0x3a>
 800336e:	e09b      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003370:	4b53      	ldr	r3, [pc, #332]	@ (80034c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003372:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003374:	e09b      	b.n	80034ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003376:	4b53      	ldr	r3, [pc, #332]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003378:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800337a:	e098      	b.n	80034ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800337c:	4b4f      	ldr	r3, [pc, #316]	@ (80034bc <HAL_RCC_GetSysClockFreq+0x180>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003384:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003386:	4b4d      	ldr	r3, [pc, #308]	@ (80034bc <HAL_RCC_GetSysClockFreq+0x180>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d028      	beq.n	80033e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003392:	4b4a      	ldr	r3, [pc, #296]	@ (80034bc <HAL_RCC_GetSysClockFreq+0x180>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	099b      	lsrs	r3, r3, #6
 8003398:	2200      	movs	r2, #0
 800339a:	623b      	str	r3, [r7, #32]
 800339c:	627a      	str	r2, [r7, #36]	@ 0x24
 800339e:	6a3b      	ldr	r3, [r7, #32]
 80033a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80033a4:	2100      	movs	r1, #0
 80033a6:	4b47      	ldr	r3, [pc, #284]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80033a8:	fb03 f201 	mul.w	r2, r3, r1
 80033ac:	2300      	movs	r3, #0
 80033ae:	fb00 f303 	mul.w	r3, r0, r3
 80033b2:	4413      	add	r3, r2
 80033b4:	4a43      	ldr	r2, [pc, #268]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80033b6:	fba0 1202 	umull	r1, r2, r0, r2
 80033ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033bc:	460a      	mov	r2, r1
 80033be:	62ba      	str	r2, [r7, #40]	@ 0x28
 80033c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033c2:	4413      	add	r3, r2
 80033c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033c8:	2200      	movs	r2, #0
 80033ca:	61bb      	str	r3, [r7, #24]
 80033cc:	61fa      	str	r2, [r7, #28]
 80033ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80033d6:	f7fc ff03 	bl	80001e0 <__aeabi_uldivmod>
 80033da:	4602      	mov	r2, r0
 80033dc:	460b      	mov	r3, r1
 80033de:	4613      	mov	r3, r2
 80033e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033e2:	e053      	b.n	800348c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033e4:	4b35      	ldr	r3, [pc, #212]	@ (80034bc <HAL_RCC_GetSysClockFreq+0x180>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	099b      	lsrs	r3, r3, #6
 80033ea:	2200      	movs	r2, #0
 80033ec:	613b      	str	r3, [r7, #16]
 80033ee:	617a      	str	r2, [r7, #20]
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80033f6:	f04f 0b00 	mov.w	fp, #0
 80033fa:	4652      	mov	r2, sl
 80033fc:	465b      	mov	r3, fp
 80033fe:	f04f 0000 	mov.w	r0, #0
 8003402:	f04f 0100 	mov.w	r1, #0
 8003406:	0159      	lsls	r1, r3, #5
 8003408:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800340c:	0150      	lsls	r0, r2, #5
 800340e:	4602      	mov	r2, r0
 8003410:	460b      	mov	r3, r1
 8003412:	ebb2 080a 	subs.w	r8, r2, sl
 8003416:	eb63 090b 	sbc.w	r9, r3, fp
 800341a:	f04f 0200 	mov.w	r2, #0
 800341e:	f04f 0300 	mov.w	r3, #0
 8003422:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003426:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800342a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800342e:	ebb2 0408 	subs.w	r4, r2, r8
 8003432:	eb63 0509 	sbc.w	r5, r3, r9
 8003436:	f04f 0200 	mov.w	r2, #0
 800343a:	f04f 0300 	mov.w	r3, #0
 800343e:	00eb      	lsls	r3, r5, #3
 8003440:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003444:	00e2      	lsls	r2, r4, #3
 8003446:	4614      	mov	r4, r2
 8003448:	461d      	mov	r5, r3
 800344a:	eb14 030a 	adds.w	r3, r4, sl
 800344e:	603b      	str	r3, [r7, #0]
 8003450:	eb45 030b 	adc.w	r3, r5, fp
 8003454:	607b      	str	r3, [r7, #4]
 8003456:	f04f 0200 	mov.w	r2, #0
 800345a:	f04f 0300 	mov.w	r3, #0
 800345e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003462:	4629      	mov	r1, r5
 8003464:	028b      	lsls	r3, r1, #10
 8003466:	4621      	mov	r1, r4
 8003468:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800346c:	4621      	mov	r1, r4
 800346e:	028a      	lsls	r2, r1, #10
 8003470:	4610      	mov	r0, r2
 8003472:	4619      	mov	r1, r3
 8003474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003476:	2200      	movs	r2, #0
 8003478:	60bb      	str	r3, [r7, #8]
 800347a:	60fa      	str	r2, [r7, #12]
 800347c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003480:	f7fc feae 	bl	80001e0 <__aeabi_uldivmod>
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	4613      	mov	r3, r2
 800348a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800348c:	4b0b      	ldr	r3, [pc, #44]	@ (80034bc <HAL_RCC_GetSysClockFreq+0x180>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	0c1b      	lsrs	r3, r3, #16
 8003492:	f003 0303 	and.w	r3, r3, #3
 8003496:	3301      	adds	r3, #1
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800349c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800349e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034a6:	e002      	b.n	80034ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034a8:	4b05      	ldr	r3, [pc, #20]	@ (80034c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80034aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3740      	adds	r7, #64	@ 0x40
 80034b4:	46bd      	mov	sp, r7
 80034b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034ba:	bf00      	nop
 80034bc:	40023800 	.word	0x40023800
 80034c0:	00f42400 	.word	0x00f42400
 80034c4:	017d7840 	.word	0x017d7840

080034c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034cc:	4b03      	ldr	r3, [pc, #12]	@ (80034dc <HAL_RCC_GetHCLKFreq+0x14>)
 80034ce:	681b      	ldr	r3, [r3, #0]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	20000010 	.word	0x20000010

080034e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034e4:	f7ff fff0 	bl	80034c8 <HAL_RCC_GetHCLKFreq>
 80034e8:	4602      	mov	r2, r0
 80034ea:	4b05      	ldr	r3, [pc, #20]	@ (8003500 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	0a9b      	lsrs	r3, r3, #10
 80034f0:	f003 0307 	and.w	r3, r3, #7
 80034f4:	4903      	ldr	r1, [pc, #12]	@ (8003504 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034f6:	5ccb      	ldrb	r3, [r1, r3]
 80034f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40023800 	.word	0x40023800
 8003504:	080086ec 	.word	0x080086ec

08003508 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800350c:	f7ff ffdc 	bl	80034c8 <HAL_RCC_GetHCLKFreq>
 8003510:	4602      	mov	r2, r0
 8003512:	4b05      	ldr	r3, [pc, #20]	@ (8003528 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	0b5b      	lsrs	r3, r3, #13
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	4903      	ldr	r1, [pc, #12]	@ (800352c <HAL_RCC_GetPCLK2Freq+0x24>)
 800351e:	5ccb      	ldrb	r3, [r1, r3]
 8003520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003524:	4618      	mov	r0, r3
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40023800 	.word	0x40023800
 800352c:	080086ec 	.word	0x080086ec

08003530 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	220f      	movs	r2, #15
 800353e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003540:	4b12      	ldr	r3, [pc, #72]	@ (800358c <HAL_RCC_GetClockConfig+0x5c>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f003 0203 	and.w	r2, r3, #3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800354c:	4b0f      	ldr	r3, [pc, #60]	@ (800358c <HAL_RCC_GetClockConfig+0x5c>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003558:	4b0c      	ldr	r3, [pc, #48]	@ (800358c <HAL_RCC_GetClockConfig+0x5c>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003564:	4b09      	ldr	r3, [pc, #36]	@ (800358c <HAL_RCC_GetClockConfig+0x5c>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	08db      	lsrs	r3, r3, #3
 800356a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003572:	4b07      	ldr	r3, [pc, #28]	@ (8003590 <HAL_RCC_GetClockConfig+0x60>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0207 	and.w	r2, r3, #7
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	601a      	str	r2, [r3, #0]
}
 800357e:	bf00      	nop
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	40023800 	.word	0x40023800
 8003590:	40023c00 	.word	0x40023c00

08003594 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e041      	b.n	800362a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d106      	bne.n	80035c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7fd fe8c 	bl	80012d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2202      	movs	r2, #2
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	3304      	adds	r3, #4
 80035d0:	4619      	mov	r1, r3
 80035d2:	4610      	mov	r0, r2
 80035d4:	f000 fdca 	bl	800416c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
	...

08003634 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b01      	cmp	r3, #1
 8003646:	d001      	beq.n	800364c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e044      	b.n	80036d6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2202      	movs	r2, #2
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68da      	ldr	r2, [r3, #12]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f042 0201 	orr.w	r2, r2, #1
 8003662:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a1e      	ldr	r2, [pc, #120]	@ (80036e4 <HAL_TIM_Base_Start_IT+0xb0>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d018      	beq.n	80036a0 <HAL_TIM_Base_Start_IT+0x6c>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003676:	d013      	beq.n	80036a0 <HAL_TIM_Base_Start_IT+0x6c>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a1a      	ldr	r2, [pc, #104]	@ (80036e8 <HAL_TIM_Base_Start_IT+0xb4>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d00e      	beq.n	80036a0 <HAL_TIM_Base_Start_IT+0x6c>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a19      	ldr	r2, [pc, #100]	@ (80036ec <HAL_TIM_Base_Start_IT+0xb8>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d009      	beq.n	80036a0 <HAL_TIM_Base_Start_IT+0x6c>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a17      	ldr	r2, [pc, #92]	@ (80036f0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d004      	beq.n	80036a0 <HAL_TIM_Base_Start_IT+0x6c>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a16      	ldr	r2, [pc, #88]	@ (80036f4 <HAL_TIM_Base_Start_IT+0xc0>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d111      	bne.n	80036c4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 0307 	and.w	r3, r3, #7
 80036aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2b06      	cmp	r3, #6
 80036b0:	d010      	beq.n	80036d4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f042 0201 	orr.w	r2, r2, #1
 80036c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036c2:	e007      	b.n	80036d4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f042 0201 	orr.w	r2, r2, #1
 80036d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	40010000 	.word	0x40010000
 80036e8:	40000400 	.word	0x40000400
 80036ec:	40000800 	.word	0x40000800
 80036f0:	40000c00 	.word	0x40000c00
 80036f4:	40014000 	.word	0x40014000

080036f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e041      	b.n	800378e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d106      	bne.n	8003724 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7fd fe68 	bl	80013f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2202      	movs	r2, #2
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	3304      	adds	r3, #4
 8003734:	4619      	mov	r1, r3
 8003736:	4610      	mov	r0, r2
 8003738:	f000 fd18 	bl	800416c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b082      	sub	sp, #8
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e041      	b.n	800382c <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d106      	bne.n	80037c2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 f839 	bl	8003834 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2202      	movs	r2, #2
 80037c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3304      	adds	r3, #4
 80037d2:	4619      	mov	r1, r3
 80037d4:	4610      	mov	r0, r2
 80037d6:	f000 fcc9 	bl	800416c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3708      	adds	r7, #8
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003852:	2300      	movs	r3, #0
 8003854:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d104      	bne.n	8003866 <HAL_TIM_IC_Start_IT+0x1e>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003862:	b2db      	uxtb	r3, r3
 8003864:	e013      	b.n	800388e <HAL_TIM_IC_Start_IT+0x46>
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	2b04      	cmp	r3, #4
 800386a:	d104      	bne.n	8003876 <HAL_TIM_IC_Start_IT+0x2e>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003872:	b2db      	uxtb	r3, r3
 8003874:	e00b      	b.n	800388e <HAL_TIM_IC_Start_IT+0x46>
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	2b08      	cmp	r3, #8
 800387a:	d104      	bne.n	8003886 <HAL_TIM_IC_Start_IT+0x3e>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003882:	b2db      	uxtb	r3, r3
 8003884:	e003      	b.n	800388e <HAL_TIM_IC_Start_IT+0x46>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800388c:	b2db      	uxtb	r3, r3
 800388e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d104      	bne.n	80038a0 <HAL_TIM_IC_Start_IT+0x58>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800389c:	b2db      	uxtb	r3, r3
 800389e:	e013      	b.n	80038c8 <HAL_TIM_IC_Start_IT+0x80>
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	d104      	bne.n	80038b0 <HAL_TIM_IC_Start_IT+0x68>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	e00b      	b.n	80038c8 <HAL_TIM_IC_Start_IT+0x80>
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	2b08      	cmp	r3, #8
 80038b4:	d104      	bne.n	80038c0 <HAL_TIM_IC_Start_IT+0x78>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	e003      	b.n	80038c8 <HAL_TIM_IC_Start_IT+0x80>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80038ca:	7bbb      	ldrb	r3, [r7, #14]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d102      	bne.n	80038d6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80038d0:	7b7b      	ldrb	r3, [r7, #13]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d001      	beq.n	80038da <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e0c2      	b.n	8003a60 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d104      	bne.n	80038ea <HAL_TIM_IC_Start_IT+0xa2>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2202      	movs	r2, #2
 80038e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038e8:	e013      	b.n	8003912 <HAL_TIM_IC_Start_IT+0xca>
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	2b04      	cmp	r3, #4
 80038ee:	d104      	bne.n	80038fa <HAL_TIM_IC_Start_IT+0xb2>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2202      	movs	r2, #2
 80038f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038f8:	e00b      	b.n	8003912 <HAL_TIM_IC_Start_IT+0xca>
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	2b08      	cmp	r3, #8
 80038fe:	d104      	bne.n	800390a <HAL_TIM_IC_Start_IT+0xc2>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2202      	movs	r2, #2
 8003904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003908:	e003      	b.n	8003912 <HAL_TIM_IC_Start_IT+0xca>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2202      	movs	r2, #2
 800390e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d104      	bne.n	8003922 <HAL_TIM_IC_Start_IT+0xda>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2202      	movs	r2, #2
 800391c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003920:	e013      	b.n	800394a <HAL_TIM_IC_Start_IT+0x102>
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	2b04      	cmp	r3, #4
 8003926:	d104      	bne.n	8003932 <HAL_TIM_IC_Start_IT+0xea>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2202      	movs	r2, #2
 800392c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003930:	e00b      	b.n	800394a <HAL_TIM_IC_Start_IT+0x102>
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	2b08      	cmp	r3, #8
 8003936:	d104      	bne.n	8003942 <HAL_TIM_IC_Start_IT+0xfa>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2202      	movs	r2, #2
 800393c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003940:	e003      	b.n	800394a <HAL_TIM_IC_Start_IT+0x102>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2202      	movs	r2, #2
 8003946:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	2b0c      	cmp	r3, #12
 800394e:	d841      	bhi.n	80039d4 <HAL_TIM_IC_Start_IT+0x18c>
 8003950:	a201      	add	r2, pc, #4	@ (adr r2, 8003958 <HAL_TIM_IC_Start_IT+0x110>)
 8003952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003956:	bf00      	nop
 8003958:	0800398d 	.word	0x0800398d
 800395c:	080039d5 	.word	0x080039d5
 8003960:	080039d5 	.word	0x080039d5
 8003964:	080039d5 	.word	0x080039d5
 8003968:	0800399f 	.word	0x0800399f
 800396c:	080039d5 	.word	0x080039d5
 8003970:	080039d5 	.word	0x080039d5
 8003974:	080039d5 	.word	0x080039d5
 8003978:	080039b1 	.word	0x080039b1
 800397c:	080039d5 	.word	0x080039d5
 8003980:	080039d5 	.word	0x080039d5
 8003984:	080039d5 	.word	0x080039d5
 8003988:	080039c3 	.word	0x080039c3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68da      	ldr	r2, [r3, #12]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f042 0202 	orr.w	r2, r2, #2
 800399a:	60da      	str	r2, [r3, #12]
      break;
 800399c:	e01d      	b.n	80039da <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68da      	ldr	r2, [r3, #12]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f042 0204 	orr.w	r2, r2, #4
 80039ac:	60da      	str	r2, [r3, #12]
      break;
 80039ae:	e014      	b.n	80039da <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68da      	ldr	r2, [r3, #12]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f042 0208 	orr.w	r2, r2, #8
 80039be:	60da      	str	r2, [r3, #12]
      break;
 80039c0:	e00b      	b.n	80039da <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68da      	ldr	r2, [r3, #12]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f042 0210 	orr.w	r2, r2, #16
 80039d0:	60da      	str	r2, [r3, #12]
      break;
 80039d2:	e002      	b.n	80039da <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	73fb      	strb	r3, [r7, #15]
      break;
 80039d8:	bf00      	nop
  }

  if (status == HAL_OK)
 80039da:	7bfb      	ldrb	r3, [r7, #15]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d13e      	bne.n	8003a5e <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2201      	movs	r2, #1
 80039e6:	6839      	ldr	r1, [r7, #0]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f000 ff8f 	bl	800490c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a1d      	ldr	r2, [pc, #116]	@ (8003a68 <HAL_TIM_IC_Start_IT+0x220>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d018      	beq.n	8003a2a <HAL_TIM_IC_Start_IT+0x1e2>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a00:	d013      	beq.n	8003a2a <HAL_TIM_IC_Start_IT+0x1e2>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a19      	ldr	r2, [pc, #100]	@ (8003a6c <HAL_TIM_IC_Start_IT+0x224>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d00e      	beq.n	8003a2a <HAL_TIM_IC_Start_IT+0x1e2>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a17      	ldr	r2, [pc, #92]	@ (8003a70 <HAL_TIM_IC_Start_IT+0x228>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d009      	beq.n	8003a2a <HAL_TIM_IC_Start_IT+0x1e2>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a16      	ldr	r2, [pc, #88]	@ (8003a74 <HAL_TIM_IC_Start_IT+0x22c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d004      	beq.n	8003a2a <HAL_TIM_IC_Start_IT+0x1e2>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a14      	ldr	r2, [pc, #80]	@ (8003a78 <HAL_TIM_IC_Start_IT+0x230>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d111      	bne.n	8003a4e <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	2b06      	cmp	r3, #6
 8003a3a:	d010      	beq.n	8003a5e <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f042 0201 	orr.w	r2, r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a4c:	e007      	b.n	8003a5e <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f042 0201 	orr.w	r2, r2, #1
 8003a5c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40010000 	.word	0x40010000
 8003a6c:	40000400 	.word	0x40000400
 8003a70:	40000800 	.word	0x40000800
 8003a74:	40000c00 	.word	0x40000c00
 8003a78:	40014000 	.word	0x40014000

08003a7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d020      	beq.n	8003ae0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d01b      	beq.n	8003ae0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f06f 0202 	mvn.w	r2, #2
 8003ab0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f7fd fa20 	bl	8000f0c <HAL_TIM_IC_CaptureCallback>
 8003acc:	e005      	b.n	8003ada <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 fb2e 	bl	8004130 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 fb35 	bl	8004144 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	f003 0304 	and.w	r3, r3, #4
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d020      	beq.n	8003b2c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d01b      	beq.n	8003b2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f06f 0204 	mvn.w	r2, #4
 8003afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2202      	movs	r2, #2
 8003b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7fd f9fa 	bl	8000f0c <HAL_TIM_IC_CaptureCallback>
 8003b18:	e005      	b.n	8003b26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 fb08 	bl	8004130 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 fb0f 	bl	8004144 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	f003 0308 	and.w	r3, r3, #8
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d020      	beq.n	8003b78 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f003 0308 	and.w	r3, r3, #8
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d01b      	beq.n	8003b78 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f06f 0208 	mvn.w	r2, #8
 8003b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2204      	movs	r2, #4
 8003b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	69db      	ldr	r3, [r3, #28]
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7fd f9d4 	bl	8000f0c <HAL_TIM_IC_CaptureCallback>
 8003b64:	e005      	b.n	8003b72 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 fae2 	bl	8004130 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 fae9 	bl	8004144 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	f003 0310 	and.w	r3, r3, #16
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d020      	beq.n	8003bc4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f003 0310 	and.w	r3, r3, #16
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d01b      	beq.n	8003bc4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f06f 0210 	mvn.w	r2, #16
 8003b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2208      	movs	r2, #8
 8003b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f7fd f9ae 	bl	8000f0c <HAL_TIM_IC_CaptureCallback>
 8003bb0:	e005      	b.n	8003bbe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 fabc 	bl	8004130 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 fac3 	bl	8004144 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00c      	beq.n	8003be8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d007      	beq.n	8003be8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f06f 0201 	mvn.w	r2, #1
 8003be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7fd f892 	bl	8000d0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00c      	beq.n	8003c0c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d007      	beq.n	8003c0c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 ff1e 	bl	8004a48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00c      	beq.n	8003c30 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d007      	beq.n	8003c30 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 fa94 	bl	8004158 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	f003 0320 	and.w	r3, r3, #32
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00c      	beq.n	8003c54 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f003 0320 	and.w	r3, r3, #32
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d007      	beq.n	8003c54 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f06f 0220 	mvn.w	r2, #32
 8003c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 fef0 	bl	8004a34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c54:	bf00      	nop
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d101      	bne.n	8003c7a <HAL_TIM_IC_ConfigChannel+0x1e>
 8003c76:	2302      	movs	r3, #2
 8003c78:	e088      	b.n	8003d8c <HAL_TIM_IC_ConfigChannel+0x130>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d11b      	bne.n	8003cc0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003c98:	f000 fc80 	bl	800459c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	699a      	ldr	r2, [r3, #24]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 020c 	bic.w	r2, r2, #12
 8003caa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	6999      	ldr	r1, [r3, #24]
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	689a      	ldr	r2, [r3, #8]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	619a      	str	r2, [r3, #24]
 8003cbe:	e060      	b.n	8003d82 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b04      	cmp	r3, #4
 8003cc4:	d11c      	bne.n	8003d00 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003cd6:	f000 fcf8 	bl	80046ca <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	699a      	ldr	r2, [r3, #24]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003ce8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6999      	ldr	r1, [r3, #24]
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	021a      	lsls	r2, r3, #8
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	619a      	str	r2, [r3, #24]
 8003cfe:	e040      	b.n	8003d82 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b08      	cmp	r3, #8
 8003d04:	d11b      	bne.n	8003d3e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003d16:	f000 fd45 	bl	80047a4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	69da      	ldr	r2, [r3, #28]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 020c 	bic.w	r2, r2, #12
 8003d28:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	69d9      	ldr	r1, [r3, #28]
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	689a      	ldr	r2, [r3, #8]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	61da      	str	r2, [r3, #28]
 8003d3c:	e021      	b.n	8003d82 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b0c      	cmp	r3, #12
 8003d42:	d11c      	bne.n	8003d7e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003d54:	f000 fd62 	bl	800481c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	69da      	ldr	r2, [r3, #28]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003d66:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	69d9      	ldr	r1, [r3, #28]
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	021a      	lsls	r2, r3, #8
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	61da      	str	r2, [r3, #28]
 8003d7c:	e001      	b.n	8003d82 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3718      	adds	r7, #24
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003da0:	2300      	movs	r3, #0
 8003da2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d101      	bne.n	8003db2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003dae:	2302      	movs	r3, #2
 8003db0:	e0ae      	b.n	8003f10 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2b0c      	cmp	r3, #12
 8003dbe:	f200 809f 	bhi.w	8003f00 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8003dc8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc8:	08003dfd 	.word	0x08003dfd
 8003dcc:	08003f01 	.word	0x08003f01
 8003dd0:	08003f01 	.word	0x08003f01
 8003dd4:	08003f01 	.word	0x08003f01
 8003dd8:	08003e3d 	.word	0x08003e3d
 8003ddc:	08003f01 	.word	0x08003f01
 8003de0:	08003f01 	.word	0x08003f01
 8003de4:	08003f01 	.word	0x08003f01
 8003de8:	08003e7f 	.word	0x08003e7f
 8003dec:	08003f01 	.word	0x08003f01
 8003df0:	08003f01 	.word	0x08003f01
 8003df4:	08003f01 	.word	0x08003f01
 8003df8:	08003ebf 	.word	0x08003ebf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68b9      	ldr	r1, [r7, #8]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 fa3e 	bl	8004284 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	699a      	ldr	r2, [r3, #24]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f042 0208 	orr.w	r2, r2, #8
 8003e16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	699a      	ldr	r2, [r3, #24]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f022 0204 	bic.w	r2, r2, #4
 8003e26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6999      	ldr	r1, [r3, #24]
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	691a      	ldr	r2, [r3, #16]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	619a      	str	r2, [r3, #24]
      break;
 8003e3a:	e064      	b.n	8003f06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68b9      	ldr	r1, [r7, #8]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 fa84 	bl	8004350 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	699a      	ldr	r2, [r3, #24]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	699a      	ldr	r2, [r3, #24]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	6999      	ldr	r1, [r3, #24]
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	021a      	lsls	r2, r3, #8
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	619a      	str	r2, [r3, #24]
      break;
 8003e7c:	e043      	b.n	8003f06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68b9      	ldr	r1, [r7, #8]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f000 facf 	bl	8004428 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	69da      	ldr	r2, [r3, #28]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f042 0208 	orr.w	r2, r2, #8
 8003e98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	69da      	ldr	r2, [r3, #28]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 0204 	bic.w	r2, r2, #4
 8003ea8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	69d9      	ldr	r1, [r3, #28]
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	691a      	ldr	r2, [r3, #16]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	61da      	str	r2, [r3, #28]
      break;
 8003ebc:	e023      	b.n	8003f06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68b9      	ldr	r1, [r7, #8]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 fb19 	bl	80044fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	69da      	ldr	r2, [r3, #28]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ed8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	69da      	ldr	r2, [r3, #28]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ee8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	69d9      	ldr	r1, [r3, #28]
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	021a      	lsls	r2, r3, #8
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	61da      	str	r2, [r3, #28]
      break;
 8003efe:	e002      	b.n	8003f06 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	75fb      	strb	r3, [r7, #23]
      break;
 8003f04:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3718      	adds	r7, #24
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f22:	2300      	movs	r3, #0
 8003f24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d101      	bne.n	8003f34 <HAL_TIM_ConfigClockSource+0x1c>
 8003f30:	2302      	movs	r3, #2
 8003f32:	e0b4      	b.n	800409e <HAL_TIM_ConfigClockSource+0x186>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003f52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68ba      	ldr	r2, [r7, #8]
 8003f62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f6c:	d03e      	beq.n	8003fec <HAL_TIM_ConfigClockSource+0xd4>
 8003f6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f72:	f200 8087 	bhi.w	8004084 <HAL_TIM_ConfigClockSource+0x16c>
 8003f76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f7a:	f000 8086 	beq.w	800408a <HAL_TIM_ConfigClockSource+0x172>
 8003f7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f82:	d87f      	bhi.n	8004084 <HAL_TIM_ConfigClockSource+0x16c>
 8003f84:	2b70      	cmp	r3, #112	@ 0x70
 8003f86:	d01a      	beq.n	8003fbe <HAL_TIM_ConfigClockSource+0xa6>
 8003f88:	2b70      	cmp	r3, #112	@ 0x70
 8003f8a:	d87b      	bhi.n	8004084 <HAL_TIM_ConfigClockSource+0x16c>
 8003f8c:	2b60      	cmp	r3, #96	@ 0x60
 8003f8e:	d050      	beq.n	8004032 <HAL_TIM_ConfigClockSource+0x11a>
 8003f90:	2b60      	cmp	r3, #96	@ 0x60
 8003f92:	d877      	bhi.n	8004084 <HAL_TIM_ConfigClockSource+0x16c>
 8003f94:	2b50      	cmp	r3, #80	@ 0x50
 8003f96:	d03c      	beq.n	8004012 <HAL_TIM_ConfigClockSource+0xfa>
 8003f98:	2b50      	cmp	r3, #80	@ 0x50
 8003f9a:	d873      	bhi.n	8004084 <HAL_TIM_ConfigClockSource+0x16c>
 8003f9c:	2b40      	cmp	r3, #64	@ 0x40
 8003f9e:	d058      	beq.n	8004052 <HAL_TIM_ConfigClockSource+0x13a>
 8003fa0:	2b40      	cmp	r3, #64	@ 0x40
 8003fa2:	d86f      	bhi.n	8004084 <HAL_TIM_ConfigClockSource+0x16c>
 8003fa4:	2b30      	cmp	r3, #48	@ 0x30
 8003fa6:	d064      	beq.n	8004072 <HAL_TIM_ConfigClockSource+0x15a>
 8003fa8:	2b30      	cmp	r3, #48	@ 0x30
 8003faa:	d86b      	bhi.n	8004084 <HAL_TIM_ConfigClockSource+0x16c>
 8003fac:	2b20      	cmp	r3, #32
 8003fae:	d060      	beq.n	8004072 <HAL_TIM_ConfigClockSource+0x15a>
 8003fb0:	2b20      	cmp	r3, #32
 8003fb2:	d867      	bhi.n	8004084 <HAL_TIM_ConfigClockSource+0x16c>
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d05c      	beq.n	8004072 <HAL_TIM_ConfigClockSource+0x15a>
 8003fb8:	2b10      	cmp	r3, #16
 8003fba:	d05a      	beq.n	8004072 <HAL_TIM_ConfigClockSource+0x15a>
 8003fbc:	e062      	b.n	8004084 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fce:	f000 fc7d 	bl	80048cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003fe0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	609a      	str	r2, [r3, #8]
      break;
 8003fea:	e04f      	b.n	800408c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ffc:	f000 fc66 	bl	80048cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689a      	ldr	r2, [r3, #8]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800400e:	609a      	str	r2, [r3, #8]
      break;
 8004010:	e03c      	b.n	800408c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800401e:	461a      	mov	r2, r3
 8004020:	f000 fb24 	bl	800466c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2150      	movs	r1, #80	@ 0x50
 800402a:	4618      	mov	r0, r3
 800402c:	f000 fc33 	bl	8004896 <TIM_ITRx_SetConfig>
      break;
 8004030:	e02c      	b.n	800408c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800403e:	461a      	mov	r2, r3
 8004040:	f000 fb80 	bl	8004744 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2160      	movs	r1, #96	@ 0x60
 800404a:	4618      	mov	r0, r3
 800404c:	f000 fc23 	bl	8004896 <TIM_ITRx_SetConfig>
      break;
 8004050:	e01c      	b.n	800408c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800405e:	461a      	mov	r2, r3
 8004060:	f000 fb04 	bl	800466c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2140      	movs	r1, #64	@ 0x40
 800406a:	4618      	mov	r0, r3
 800406c:	f000 fc13 	bl	8004896 <TIM_ITRx_SetConfig>
      break;
 8004070:	e00c      	b.n	800408c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4619      	mov	r1, r3
 800407c:	4610      	mov	r0, r2
 800407e:	f000 fc0a 	bl	8004896 <TIM_ITRx_SetConfig>
      break;
 8004082:	e003      	b.n	800408c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	73fb      	strb	r3, [r7, #15]
      break;
 8004088:	e000      	b.n	800408c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800408a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800409c:	7bfb      	ldrb	r3, [r7, #15]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
	...

080040a8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80040b2:	2300      	movs	r3, #0
 80040b4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	2b0c      	cmp	r3, #12
 80040ba:	d831      	bhi.n	8004120 <HAL_TIM_ReadCapturedValue+0x78>
 80040bc:	a201      	add	r2, pc, #4	@ (adr r2, 80040c4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80040be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c2:	bf00      	nop
 80040c4:	080040f9 	.word	0x080040f9
 80040c8:	08004121 	.word	0x08004121
 80040cc:	08004121 	.word	0x08004121
 80040d0:	08004121 	.word	0x08004121
 80040d4:	08004103 	.word	0x08004103
 80040d8:	08004121 	.word	0x08004121
 80040dc:	08004121 	.word	0x08004121
 80040e0:	08004121 	.word	0x08004121
 80040e4:	0800410d 	.word	0x0800410d
 80040e8:	08004121 	.word	0x08004121
 80040ec:	08004121 	.word	0x08004121
 80040f0:	08004121 	.word	0x08004121
 80040f4:	08004117 	.word	0x08004117
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040fe:	60fb      	str	r3, [r7, #12]

      break;
 8004100:	e00f      	b.n	8004122 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004108:	60fb      	str	r3, [r7, #12]

      break;
 800410a:	e00a      	b.n	8004122 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004112:	60fb      	str	r3, [r7, #12]

      break;
 8004114:	e005      	b.n	8004122 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411c:	60fb      	str	r3, [r7, #12]

      break;
 800411e:	e000      	b.n	8004122 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004120:	bf00      	nop
  }

  return tmpreg;
 8004122:	68fb      	ldr	r3, [r7, #12]
}
 8004124:	4618      	mov	r0, r3
 8004126:	3714      	adds	r7, #20
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a3a      	ldr	r2, [pc, #232]	@ (8004268 <TIM_Base_SetConfig+0xfc>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d00f      	beq.n	80041a4 <TIM_Base_SetConfig+0x38>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800418a:	d00b      	beq.n	80041a4 <TIM_Base_SetConfig+0x38>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a37      	ldr	r2, [pc, #220]	@ (800426c <TIM_Base_SetConfig+0x100>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d007      	beq.n	80041a4 <TIM_Base_SetConfig+0x38>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a36      	ldr	r2, [pc, #216]	@ (8004270 <TIM_Base_SetConfig+0x104>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d003      	beq.n	80041a4 <TIM_Base_SetConfig+0x38>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a35      	ldr	r2, [pc, #212]	@ (8004274 <TIM_Base_SetConfig+0x108>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d108      	bne.n	80041b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a2b      	ldr	r2, [pc, #172]	@ (8004268 <TIM_Base_SetConfig+0xfc>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d01b      	beq.n	80041f6 <TIM_Base_SetConfig+0x8a>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041c4:	d017      	beq.n	80041f6 <TIM_Base_SetConfig+0x8a>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a28      	ldr	r2, [pc, #160]	@ (800426c <TIM_Base_SetConfig+0x100>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d013      	beq.n	80041f6 <TIM_Base_SetConfig+0x8a>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a27      	ldr	r2, [pc, #156]	@ (8004270 <TIM_Base_SetConfig+0x104>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d00f      	beq.n	80041f6 <TIM_Base_SetConfig+0x8a>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a26      	ldr	r2, [pc, #152]	@ (8004274 <TIM_Base_SetConfig+0x108>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d00b      	beq.n	80041f6 <TIM_Base_SetConfig+0x8a>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a25      	ldr	r2, [pc, #148]	@ (8004278 <TIM_Base_SetConfig+0x10c>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d007      	beq.n	80041f6 <TIM_Base_SetConfig+0x8a>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a24      	ldr	r2, [pc, #144]	@ (800427c <TIM_Base_SetConfig+0x110>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d003      	beq.n	80041f6 <TIM_Base_SetConfig+0x8a>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a23      	ldr	r2, [pc, #140]	@ (8004280 <TIM_Base_SetConfig+0x114>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d108      	bne.n	8004208 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	4313      	orrs	r3, r2
 8004206:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	4313      	orrs	r3, r2
 8004214:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	689a      	ldr	r2, [r3, #8]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a0e      	ldr	r2, [pc, #56]	@ (8004268 <TIM_Base_SetConfig+0xfc>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d103      	bne.n	800423c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	691a      	ldr	r2, [r3, #16]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b01      	cmp	r3, #1
 800424c:	d105      	bne.n	800425a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	f023 0201 	bic.w	r2, r3, #1
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	611a      	str	r2, [r3, #16]
  }
}
 800425a:	bf00      	nop
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	40010000 	.word	0x40010000
 800426c:	40000400 	.word	0x40000400
 8004270:	40000800 	.word	0x40000800
 8004274:	40000c00 	.word	0x40000c00
 8004278:	40014000 	.word	0x40014000
 800427c:	40014400 	.word	0x40014400
 8004280:	40014800 	.word	0x40014800

08004284 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004284:	b480      	push	{r7}
 8004286:	b087      	sub	sp, #28
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	f023 0201 	bic.w	r2, r3, #1
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f023 0303 	bic.w	r3, r3, #3
 80042ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f023 0302 	bic.w	r3, r3, #2
 80042cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a1c      	ldr	r2, [pc, #112]	@ (800434c <TIM_OC1_SetConfig+0xc8>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d10c      	bne.n	80042fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f023 0308 	bic.w	r3, r3, #8
 80042e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f023 0304 	bic.w	r3, r3, #4
 80042f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a13      	ldr	r2, [pc, #76]	@ (800434c <TIM_OC1_SetConfig+0xc8>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d111      	bne.n	8004326 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004308:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004310:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	4313      	orrs	r3, r2
 800431a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	4313      	orrs	r3, r2
 8004324:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	621a      	str	r2, [r3, #32]
}
 8004340:	bf00      	nop
 8004342:	371c      	adds	r7, #28
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	40010000 	.word	0x40010000

08004350 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004350:	b480      	push	{r7}
 8004352:	b087      	sub	sp, #28
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a1b      	ldr	r3, [r3, #32]
 8004364:	f023 0210 	bic.w	r2, r3, #16
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800437e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004386:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	021b      	lsls	r3, r3, #8
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	4313      	orrs	r3, r2
 8004392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	f023 0320 	bic.w	r3, r3, #32
 800439a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a1e      	ldr	r2, [pc, #120]	@ (8004424 <TIM_OC2_SetConfig+0xd4>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d10d      	bne.n	80043cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	011b      	lsls	r3, r3, #4
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a15      	ldr	r2, [pc, #84]	@ (8004424 <TIM_OC2_SetConfig+0xd4>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d113      	bne.n	80043fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80043da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80043e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	621a      	str	r2, [r3, #32]
}
 8004416:	bf00      	nop
 8004418:	371c      	adds	r7, #28
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	40010000 	.word	0x40010000

08004428 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004428:	b480      	push	{r7}
 800442a:	b087      	sub	sp, #28
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f023 0303 	bic.w	r3, r3, #3
 800445e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	4313      	orrs	r3, r2
 8004468:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004470:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	021b      	lsls	r3, r3, #8
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	4313      	orrs	r3, r2
 800447c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a1d      	ldr	r2, [pc, #116]	@ (80044f8 <TIM_OC3_SetConfig+0xd0>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d10d      	bne.n	80044a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800448c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	021b      	lsls	r3, r3, #8
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	4313      	orrs	r3, r2
 8004498:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80044a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a14      	ldr	r2, [pc, #80]	@ (80044f8 <TIM_OC3_SetConfig+0xd0>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d113      	bne.n	80044d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80044b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80044b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	011b      	lsls	r3, r3, #4
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	621a      	str	r2, [r3, #32]
}
 80044ec:	bf00      	nop
 80044ee:	371c      	adds	r7, #28
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	40010000 	.word	0x40010000

080044fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b087      	sub	sp, #28
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800452a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004532:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	021b      	lsls	r3, r3, #8
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	4313      	orrs	r3, r2
 800453e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004546:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	031b      	lsls	r3, r3, #12
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	4313      	orrs	r3, r2
 8004552:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a10      	ldr	r2, [pc, #64]	@ (8004598 <TIM_OC4_SetConfig+0x9c>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d109      	bne.n	8004570 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004562:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	019b      	lsls	r3, r3, #6
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	4313      	orrs	r3, r2
 800456e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	621a      	str	r2, [r3, #32]
}
 800458a:	bf00      	nop
 800458c:	371c      	adds	r7, #28
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	40010000 	.word	0x40010000

0800459c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800459c:	b480      	push	{r7}
 800459e:	b087      	sub	sp, #28
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
 80045a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	f023 0201 	bic.w	r2, r3, #1
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	4a24      	ldr	r2, [pc, #144]	@ (8004658 <TIM_TI1_SetConfig+0xbc>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d013      	beq.n	80045f2 <TIM_TI1_SetConfig+0x56>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045d0:	d00f      	beq.n	80045f2 <TIM_TI1_SetConfig+0x56>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	4a21      	ldr	r2, [pc, #132]	@ (800465c <TIM_TI1_SetConfig+0xc0>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d00b      	beq.n	80045f2 <TIM_TI1_SetConfig+0x56>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	4a20      	ldr	r2, [pc, #128]	@ (8004660 <TIM_TI1_SetConfig+0xc4>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d007      	beq.n	80045f2 <TIM_TI1_SetConfig+0x56>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	4a1f      	ldr	r2, [pc, #124]	@ (8004664 <TIM_TI1_SetConfig+0xc8>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d003      	beq.n	80045f2 <TIM_TI1_SetConfig+0x56>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	4a1e      	ldr	r2, [pc, #120]	@ (8004668 <TIM_TI1_SetConfig+0xcc>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d101      	bne.n	80045f6 <TIM_TI1_SetConfig+0x5a>
 80045f2:	2301      	movs	r3, #1
 80045f4:	e000      	b.n	80045f8 <TIM_TI1_SetConfig+0x5c>
 80045f6:	2300      	movs	r3, #0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d008      	beq.n	800460e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	f023 0303 	bic.w	r3, r3, #3
 8004602:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4313      	orrs	r3, r2
 800460a:	617b      	str	r3, [r7, #20]
 800460c:	e003      	b.n	8004616 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f043 0301 	orr.w	r3, r3, #1
 8004614:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800461c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	011b      	lsls	r3, r3, #4
 8004622:	b2db      	uxtb	r3, r3
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	4313      	orrs	r3, r2
 8004628:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	f023 030a 	bic.w	r3, r3, #10
 8004630:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	f003 030a 	and.w	r3, r3, #10
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	4313      	orrs	r3, r2
 800463c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	621a      	str	r2, [r3, #32]
}
 800464a:	bf00      	nop
 800464c:	371c      	adds	r7, #28
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	40010000 	.word	0x40010000
 800465c:	40000400 	.word	0x40000400
 8004660:	40000800 	.word	0x40000800
 8004664:	40000c00 	.word	0x40000c00
 8004668:	40014000 	.word	0x40014000

0800466c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800466c:	b480      	push	{r7}
 800466e:	b087      	sub	sp, #28
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	f023 0201 	bic.w	r2, r3, #1
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004696:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	011b      	lsls	r3, r3, #4
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	4313      	orrs	r3, r2
 80046a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f023 030a 	bic.w	r3, r3, #10
 80046a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	621a      	str	r2, [r3, #32]
}
 80046be:	bf00      	nop
 80046c0:	371c      	adds	r7, #28
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr

080046ca <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80046ca:	b480      	push	{r7}
 80046cc:	b087      	sub	sp, #28
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	60f8      	str	r0, [r7, #12]
 80046d2:	60b9      	str	r1, [r7, #8]
 80046d4:	607a      	str	r2, [r7, #4]
 80046d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	f023 0210 	bic.w	r2, r3, #16
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	021b      	lsls	r3, r3, #8
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	4313      	orrs	r3, r2
 8004700:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004708:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	031b      	lsls	r3, r3, #12
 800470e:	b29b      	uxth	r3, r3
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	4313      	orrs	r3, r2
 8004714:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800471c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	011b      	lsls	r3, r3, #4
 8004722:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	4313      	orrs	r3, r2
 800472a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	621a      	str	r2, [r3, #32]
}
 8004738:	bf00      	nop
 800473a:	371c      	adds	r7, #28
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004744:	b480      	push	{r7}
 8004746:	b087      	sub	sp, #28
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	f023 0210 	bic.w	r2, r3, #16
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800476e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	031b      	lsls	r3, r3, #12
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	4313      	orrs	r3, r2
 8004778:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004780:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	011b      	lsls	r3, r3, #4
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	4313      	orrs	r3, r2
 800478a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	621a      	str	r2, [r3, #32]
}
 8004798:	bf00      	nop
 800479a:	371c      	adds	r7, #28
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b087      	sub	sp, #28
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
 80047b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	69db      	ldr	r3, [r3, #28]
 80047c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	f023 0303 	bic.w	r3, r3, #3
 80047d0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047e0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	011b      	lsls	r3, r3, #4
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80047f4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	021b      	lsls	r3, r3, #8
 80047fa:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	4313      	orrs	r3, r2
 8004802:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	621a      	str	r2, [r3, #32]
}
 8004810:	bf00      	nop
 8004812:	371c      	adds	r7, #28
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800481c:	b480      	push	{r7}
 800481e:	b087      	sub	sp, #28
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
 8004828:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004848:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	021b      	lsls	r3, r3, #8
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	4313      	orrs	r3, r2
 8004852:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800485a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	031b      	lsls	r3, r3, #12
 8004860:	b29b      	uxth	r3, r3
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	4313      	orrs	r3, r2
 8004866:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800486e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	031b      	lsls	r3, r3, #12
 8004874:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	4313      	orrs	r3, r2
 800487c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	621a      	str	r2, [r3, #32]
}
 800488a:	bf00      	nop
 800488c:	371c      	adds	r7, #28
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004896:	b480      	push	{r7}
 8004898:	b085      	sub	sp, #20
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
 800489e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	f043 0307 	orr.w	r3, r3, #7
 80048b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	609a      	str	r2, [r3, #8]
}
 80048c0:	bf00      	nop
 80048c2:	3714      	adds	r7, #20
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b087      	sub	sp, #28
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
 80048d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	021a      	lsls	r2, r3, #8
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	431a      	orrs	r2, r3
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	697a      	ldr	r2, [r7, #20]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	609a      	str	r2, [r3, #8]
}
 8004900:	bf00      	nop
 8004902:	371c      	adds	r7, #28
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800490c:	b480      	push	{r7}
 800490e:	b087      	sub	sp, #28
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	f003 031f 	and.w	r3, r3, #31
 800491e:	2201      	movs	r2, #1
 8004920:	fa02 f303 	lsl.w	r3, r2, r3
 8004924:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6a1a      	ldr	r2, [r3, #32]
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	43db      	mvns	r3, r3
 800492e:	401a      	ands	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6a1a      	ldr	r2, [r3, #32]
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	f003 031f 	and.w	r3, r3, #31
 800493e:	6879      	ldr	r1, [r7, #4]
 8004940:	fa01 f303 	lsl.w	r3, r1, r3
 8004944:	431a      	orrs	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	621a      	str	r2, [r3, #32]
}
 800494a:	bf00      	nop
 800494c:	371c      	adds	r7, #28
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
	...

08004958 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004968:	2b01      	cmp	r3, #1
 800496a:	d101      	bne.n	8004970 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800496c:	2302      	movs	r3, #2
 800496e:	e050      	b.n	8004a12 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2202      	movs	r2, #2
 800497c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004996:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	4313      	orrs	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a1c      	ldr	r2, [pc, #112]	@ (8004a20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d018      	beq.n	80049e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049bc:	d013      	beq.n	80049e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a18      	ldr	r2, [pc, #96]	@ (8004a24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d00e      	beq.n	80049e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a16      	ldr	r2, [pc, #88]	@ (8004a28 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d009      	beq.n	80049e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a15      	ldr	r2, [pc, #84]	@ (8004a2c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d004      	beq.n	80049e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a13      	ldr	r2, [pc, #76]	@ (8004a30 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d10c      	bne.n	8004a00 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3714      	adds	r7, #20
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	40010000 	.word	0x40010000
 8004a24:	40000400 	.word	0x40000400
 8004a28:	40000800 	.word	0x40000800
 8004a2c:	40000c00 	.word	0x40000c00
 8004a30:	40014000 	.word	0x40014000

08004a34 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e042      	b.n	8004af4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d106      	bne.n	8004a88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7fc fd3c 	bl	8001500 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2224      	movs	r2, #36	@ 0x24
 8004a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68da      	ldr	r2, [r3, #12]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 f82b 	bl	8004afc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	691a      	ldr	r2, [r3, #16]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ab4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	695a      	ldr	r2, [r3, #20]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ac4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68da      	ldr	r2, [r3, #12]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ad4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3708      	adds	r7, #8
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004afc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b00:	b0c0      	sub	sp, #256	@ 0x100
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b18:	68d9      	ldr	r1, [r3, #12]
 8004b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	ea40 0301 	orr.w	r3, r0, r1
 8004b24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	431a      	orrs	r2, r3
 8004b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	431a      	orrs	r2, r3
 8004b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004b54:	f021 010c 	bic.w	r1, r1, #12
 8004b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004b62:	430b      	orrs	r3, r1
 8004b64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	695b      	ldr	r3, [r3, #20]
 8004b6e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b76:	6999      	ldr	r1, [r3, #24]
 8004b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	ea40 0301 	orr.w	r3, r0, r1
 8004b82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	4b8f      	ldr	r3, [pc, #572]	@ (8004dc8 <UART_SetConfig+0x2cc>)
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d005      	beq.n	8004b9c <UART_SetConfig+0xa0>
 8004b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	4b8d      	ldr	r3, [pc, #564]	@ (8004dcc <UART_SetConfig+0x2d0>)
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d104      	bne.n	8004ba6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b9c:	f7fe fcb4 	bl	8003508 <HAL_RCC_GetPCLK2Freq>
 8004ba0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004ba4:	e003      	b.n	8004bae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ba6:	f7fe fc9b 	bl	80034e0 <HAL_RCC_GetPCLK1Freq>
 8004baa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb2:	69db      	ldr	r3, [r3, #28]
 8004bb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bb8:	f040 810c 	bne.w	8004dd4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004bbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004bc6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004bca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004bce:	4622      	mov	r2, r4
 8004bd0:	462b      	mov	r3, r5
 8004bd2:	1891      	adds	r1, r2, r2
 8004bd4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004bd6:	415b      	adcs	r3, r3
 8004bd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004bda:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004bde:	4621      	mov	r1, r4
 8004be0:	eb12 0801 	adds.w	r8, r2, r1
 8004be4:	4629      	mov	r1, r5
 8004be6:	eb43 0901 	adc.w	r9, r3, r1
 8004bea:	f04f 0200 	mov.w	r2, #0
 8004bee:	f04f 0300 	mov.w	r3, #0
 8004bf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bfe:	4690      	mov	r8, r2
 8004c00:	4699      	mov	r9, r3
 8004c02:	4623      	mov	r3, r4
 8004c04:	eb18 0303 	adds.w	r3, r8, r3
 8004c08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c0c:	462b      	mov	r3, r5
 8004c0e:	eb49 0303 	adc.w	r3, r9, r3
 8004c12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004c22:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004c26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	18db      	adds	r3, r3, r3
 8004c2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c30:	4613      	mov	r3, r2
 8004c32:	eb42 0303 	adc.w	r3, r2, r3
 8004c36:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004c3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004c40:	f7fb face 	bl	80001e0 <__aeabi_uldivmod>
 8004c44:	4602      	mov	r2, r0
 8004c46:	460b      	mov	r3, r1
 8004c48:	4b61      	ldr	r3, [pc, #388]	@ (8004dd0 <UART_SetConfig+0x2d4>)
 8004c4a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c4e:	095b      	lsrs	r3, r3, #5
 8004c50:	011c      	lsls	r4, r3, #4
 8004c52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c56:	2200      	movs	r2, #0
 8004c58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c5c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004c60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004c64:	4642      	mov	r2, r8
 8004c66:	464b      	mov	r3, r9
 8004c68:	1891      	adds	r1, r2, r2
 8004c6a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004c6c:	415b      	adcs	r3, r3
 8004c6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004c74:	4641      	mov	r1, r8
 8004c76:	eb12 0a01 	adds.w	sl, r2, r1
 8004c7a:	4649      	mov	r1, r9
 8004c7c:	eb43 0b01 	adc.w	fp, r3, r1
 8004c80:	f04f 0200 	mov.w	r2, #0
 8004c84:	f04f 0300 	mov.w	r3, #0
 8004c88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c94:	4692      	mov	sl, r2
 8004c96:	469b      	mov	fp, r3
 8004c98:	4643      	mov	r3, r8
 8004c9a:	eb1a 0303 	adds.w	r3, sl, r3
 8004c9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ca2:	464b      	mov	r3, r9
 8004ca4:	eb4b 0303 	adc.w	r3, fp, r3
 8004ca8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004cb8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004cbc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	18db      	adds	r3, r3, r3
 8004cc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	eb42 0303 	adc.w	r3, r2, r3
 8004ccc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004cd2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004cd6:	f7fb fa83 	bl	80001e0 <__aeabi_uldivmod>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	460b      	mov	r3, r1
 8004cde:	4611      	mov	r1, r2
 8004ce0:	4b3b      	ldr	r3, [pc, #236]	@ (8004dd0 <UART_SetConfig+0x2d4>)
 8004ce2:	fba3 2301 	umull	r2, r3, r3, r1
 8004ce6:	095b      	lsrs	r3, r3, #5
 8004ce8:	2264      	movs	r2, #100	@ 0x64
 8004cea:	fb02 f303 	mul.w	r3, r2, r3
 8004cee:	1acb      	subs	r3, r1, r3
 8004cf0:	00db      	lsls	r3, r3, #3
 8004cf2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004cf6:	4b36      	ldr	r3, [pc, #216]	@ (8004dd0 <UART_SetConfig+0x2d4>)
 8004cf8:	fba3 2302 	umull	r2, r3, r3, r2
 8004cfc:	095b      	lsrs	r3, r3, #5
 8004cfe:	005b      	lsls	r3, r3, #1
 8004d00:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004d04:	441c      	add	r4, r3
 8004d06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d10:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004d14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004d18:	4642      	mov	r2, r8
 8004d1a:	464b      	mov	r3, r9
 8004d1c:	1891      	adds	r1, r2, r2
 8004d1e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004d20:	415b      	adcs	r3, r3
 8004d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004d28:	4641      	mov	r1, r8
 8004d2a:	1851      	adds	r1, r2, r1
 8004d2c:	6339      	str	r1, [r7, #48]	@ 0x30
 8004d2e:	4649      	mov	r1, r9
 8004d30:	414b      	adcs	r3, r1
 8004d32:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d34:	f04f 0200 	mov.w	r2, #0
 8004d38:	f04f 0300 	mov.w	r3, #0
 8004d3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004d40:	4659      	mov	r1, fp
 8004d42:	00cb      	lsls	r3, r1, #3
 8004d44:	4651      	mov	r1, sl
 8004d46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d4a:	4651      	mov	r1, sl
 8004d4c:	00ca      	lsls	r2, r1, #3
 8004d4e:	4610      	mov	r0, r2
 8004d50:	4619      	mov	r1, r3
 8004d52:	4603      	mov	r3, r0
 8004d54:	4642      	mov	r2, r8
 8004d56:	189b      	adds	r3, r3, r2
 8004d58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d5c:	464b      	mov	r3, r9
 8004d5e:	460a      	mov	r2, r1
 8004d60:	eb42 0303 	adc.w	r3, r2, r3
 8004d64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004d74:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004d78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	18db      	adds	r3, r3, r3
 8004d80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d82:	4613      	mov	r3, r2
 8004d84:	eb42 0303 	adc.w	r3, r2, r3
 8004d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004d92:	f7fb fa25 	bl	80001e0 <__aeabi_uldivmod>
 8004d96:	4602      	mov	r2, r0
 8004d98:	460b      	mov	r3, r1
 8004d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8004dd0 <UART_SetConfig+0x2d4>)
 8004d9c:	fba3 1302 	umull	r1, r3, r3, r2
 8004da0:	095b      	lsrs	r3, r3, #5
 8004da2:	2164      	movs	r1, #100	@ 0x64
 8004da4:	fb01 f303 	mul.w	r3, r1, r3
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	3332      	adds	r3, #50	@ 0x32
 8004dae:	4a08      	ldr	r2, [pc, #32]	@ (8004dd0 <UART_SetConfig+0x2d4>)
 8004db0:	fba2 2303 	umull	r2, r3, r2, r3
 8004db4:	095b      	lsrs	r3, r3, #5
 8004db6:	f003 0207 	and.w	r2, r3, #7
 8004dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4422      	add	r2, r4
 8004dc2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004dc4:	e106      	b.n	8004fd4 <UART_SetConfig+0x4d8>
 8004dc6:	bf00      	nop
 8004dc8:	40011000 	.word	0x40011000
 8004dcc:	40011400 	.word	0x40011400
 8004dd0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004dd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004dde:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004de2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004de6:	4642      	mov	r2, r8
 8004de8:	464b      	mov	r3, r9
 8004dea:	1891      	adds	r1, r2, r2
 8004dec:	6239      	str	r1, [r7, #32]
 8004dee:	415b      	adcs	r3, r3
 8004df0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004df2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004df6:	4641      	mov	r1, r8
 8004df8:	1854      	adds	r4, r2, r1
 8004dfa:	4649      	mov	r1, r9
 8004dfc:	eb43 0501 	adc.w	r5, r3, r1
 8004e00:	f04f 0200 	mov.w	r2, #0
 8004e04:	f04f 0300 	mov.w	r3, #0
 8004e08:	00eb      	lsls	r3, r5, #3
 8004e0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e0e:	00e2      	lsls	r2, r4, #3
 8004e10:	4614      	mov	r4, r2
 8004e12:	461d      	mov	r5, r3
 8004e14:	4643      	mov	r3, r8
 8004e16:	18e3      	adds	r3, r4, r3
 8004e18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e1c:	464b      	mov	r3, r9
 8004e1e:	eb45 0303 	adc.w	r3, r5, r3
 8004e22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e32:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004e36:	f04f 0200 	mov.w	r2, #0
 8004e3a:	f04f 0300 	mov.w	r3, #0
 8004e3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004e42:	4629      	mov	r1, r5
 8004e44:	008b      	lsls	r3, r1, #2
 8004e46:	4621      	mov	r1, r4
 8004e48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e4c:	4621      	mov	r1, r4
 8004e4e:	008a      	lsls	r2, r1, #2
 8004e50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004e54:	f7fb f9c4 	bl	80001e0 <__aeabi_uldivmod>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	4b60      	ldr	r3, [pc, #384]	@ (8004fe0 <UART_SetConfig+0x4e4>)
 8004e5e:	fba3 2302 	umull	r2, r3, r3, r2
 8004e62:	095b      	lsrs	r3, r3, #5
 8004e64:	011c      	lsls	r4, r3, #4
 8004e66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004e70:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004e74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004e78:	4642      	mov	r2, r8
 8004e7a:	464b      	mov	r3, r9
 8004e7c:	1891      	adds	r1, r2, r2
 8004e7e:	61b9      	str	r1, [r7, #24]
 8004e80:	415b      	adcs	r3, r3
 8004e82:	61fb      	str	r3, [r7, #28]
 8004e84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e88:	4641      	mov	r1, r8
 8004e8a:	1851      	adds	r1, r2, r1
 8004e8c:	6139      	str	r1, [r7, #16]
 8004e8e:	4649      	mov	r1, r9
 8004e90:	414b      	adcs	r3, r1
 8004e92:	617b      	str	r3, [r7, #20]
 8004e94:	f04f 0200 	mov.w	r2, #0
 8004e98:	f04f 0300 	mov.w	r3, #0
 8004e9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ea0:	4659      	mov	r1, fp
 8004ea2:	00cb      	lsls	r3, r1, #3
 8004ea4:	4651      	mov	r1, sl
 8004ea6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004eaa:	4651      	mov	r1, sl
 8004eac:	00ca      	lsls	r2, r1, #3
 8004eae:	4610      	mov	r0, r2
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	4642      	mov	r2, r8
 8004eb6:	189b      	adds	r3, r3, r2
 8004eb8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ebc:	464b      	mov	r3, r9
 8004ebe:	460a      	mov	r2, r1
 8004ec0:	eb42 0303 	adc.w	r3, r2, r3
 8004ec4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ed2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004ed4:	f04f 0200 	mov.w	r2, #0
 8004ed8:	f04f 0300 	mov.w	r3, #0
 8004edc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004ee0:	4649      	mov	r1, r9
 8004ee2:	008b      	lsls	r3, r1, #2
 8004ee4:	4641      	mov	r1, r8
 8004ee6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004eea:	4641      	mov	r1, r8
 8004eec:	008a      	lsls	r2, r1, #2
 8004eee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004ef2:	f7fb f975 	bl	80001e0 <__aeabi_uldivmod>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	460b      	mov	r3, r1
 8004efa:	4611      	mov	r1, r2
 8004efc:	4b38      	ldr	r3, [pc, #224]	@ (8004fe0 <UART_SetConfig+0x4e4>)
 8004efe:	fba3 2301 	umull	r2, r3, r3, r1
 8004f02:	095b      	lsrs	r3, r3, #5
 8004f04:	2264      	movs	r2, #100	@ 0x64
 8004f06:	fb02 f303 	mul.w	r3, r2, r3
 8004f0a:	1acb      	subs	r3, r1, r3
 8004f0c:	011b      	lsls	r3, r3, #4
 8004f0e:	3332      	adds	r3, #50	@ 0x32
 8004f10:	4a33      	ldr	r2, [pc, #204]	@ (8004fe0 <UART_SetConfig+0x4e4>)
 8004f12:	fba2 2303 	umull	r2, r3, r2, r3
 8004f16:	095b      	lsrs	r3, r3, #5
 8004f18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f1c:	441c      	add	r4, r3
 8004f1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f22:	2200      	movs	r2, #0
 8004f24:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f26:	677a      	str	r2, [r7, #116]	@ 0x74
 8004f28:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004f2c:	4642      	mov	r2, r8
 8004f2e:	464b      	mov	r3, r9
 8004f30:	1891      	adds	r1, r2, r2
 8004f32:	60b9      	str	r1, [r7, #8]
 8004f34:	415b      	adcs	r3, r3
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f3c:	4641      	mov	r1, r8
 8004f3e:	1851      	adds	r1, r2, r1
 8004f40:	6039      	str	r1, [r7, #0]
 8004f42:	4649      	mov	r1, r9
 8004f44:	414b      	adcs	r3, r1
 8004f46:	607b      	str	r3, [r7, #4]
 8004f48:	f04f 0200 	mov.w	r2, #0
 8004f4c:	f04f 0300 	mov.w	r3, #0
 8004f50:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f54:	4659      	mov	r1, fp
 8004f56:	00cb      	lsls	r3, r1, #3
 8004f58:	4651      	mov	r1, sl
 8004f5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f5e:	4651      	mov	r1, sl
 8004f60:	00ca      	lsls	r2, r1, #3
 8004f62:	4610      	mov	r0, r2
 8004f64:	4619      	mov	r1, r3
 8004f66:	4603      	mov	r3, r0
 8004f68:	4642      	mov	r2, r8
 8004f6a:	189b      	adds	r3, r3, r2
 8004f6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f6e:	464b      	mov	r3, r9
 8004f70:	460a      	mov	r2, r1
 8004f72:	eb42 0303 	adc.w	r3, r2, r3
 8004f76:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f82:	667a      	str	r2, [r7, #100]	@ 0x64
 8004f84:	f04f 0200 	mov.w	r2, #0
 8004f88:	f04f 0300 	mov.w	r3, #0
 8004f8c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004f90:	4649      	mov	r1, r9
 8004f92:	008b      	lsls	r3, r1, #2
 8004f94:	4641      	mov	r1, r8
 8004f96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f9a:	4641      	mov	r1, r8
 8004f9c:	008a      	lsls	r2, r1, #2
 8004f9e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004fa2:	f7fb f91d 	bl	80001e0 <__aeabi_uldivmod>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	460b      	mov	r3, r1
 8004faa:	4b0d      	ldr	r3, [pc, #52]	@ (8004fe0 <UART_SetConfig+0x4e4>)
 8004fac:	fba3 1302 	umull	r1, r3, r3, r2
 8004fb0:	095b      	lsrs	r3, r3, #5
 8004fb2:	2164      	movs	r1, #100	@ 0x64
 8004fb4:	fb01 f303 	mul.w	r3, r1, r3
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	011b      	lsls	r3, r3, #4
 8004fbc:	3332      	adds	r3, #50	@ 0x32
 8004fbe:	4a08      	ldr	r2, [pc, #32]	@ (8004fe0 <UART_SetConfig+0x4e4>)
 8004fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc4:	095b      	lsrs	r3, r3, #5
 8004fc6:	f003 020f 	and.w	r2, r3, #15
 8004fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4422      	add	r2, r4
 8004fd2:	609a      	str	r2, [r3, #8]
}
 8004fd4:	bf00      	nop
 8004fd6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fe0:	51eb851f 	.word	0x51eb851f

08004fe4 <__NVIC_SetPriority>:
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	4603      	mov	r3, r0
 8004fec:	6039      	str	r1, [r7, #0]
 8004fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	db0a      	blt.n	800500e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	b2da      	uxtb	r2, r3
 8004ffc:	490c      	ldr	r1, [pc, #48]	@ (8005030 <__NVIC_SetPriority+0x4c>)
 8004ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005002:	0112      	lsls	r2, r2, #4
 8005004:	b2d2      	uxtb	r2, r2
 8005006:	440b      	add	r3, r1
 8005008:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800500c:	e00a      	b.n	8005024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	b2da      	uxtb	r2, r3
 8005012:	4908      	ldr	r1, [pc, #32]	@ (8005034 <__NVIC_SetPriority+0x50>)
 8005014:	79fb      	ldrb	r3, [r7, #7]
 8005016:	f003 030f 	and.w	r3, r3, #15
 800501a:	3b04      	subs	r3, #4
 800501c:	0112      	lsls	r2, r2, #4
 800501e:	b2d2      	uxtb	r2, r2
 8005020:	440b      	add	r3, r1
 8005022:	761a      	strb	r2, [r3, #24]
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr
 8005030:	e000e100 	.word	0xe000e100
 8005034:	e000ed00 	.word	0xe000ed00

08005038 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005038:	b580      	push	{r7, lr}
 800503a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800503c:	4b05      	ldr	r3, [pc, #20]	@ (8005054 <SysTick_Handler+0x1c>)
 800503e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005040:	f002 f80e 	bl	8007060 <xTaskGetSchedulerState>
 8005044:	4603      	mov	r3, r0
 8005046:	2b01      	cmp	r3, #1
 8005048:	d001      	beq.n	800504e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800504a:	f002 fe05 	bl	8007c58 <xPortSysTickHandler>
  }
}
 800504e:	bf00      	nop
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	e000e010 	.word	0xe000e010

08005058 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005058:	b580      	push	{r7, lr}
 800505a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800505c:	2100      	movs	r1, #0
 800505e:	f06f 0004 	mvn.w	r0, #4
 8005062:	f7ff ffbf 	bl	8004fe4 <__NVIC_SetPriority>
#endif
}
 8005066:	bf00      	nop
 8005068:	bd80      	pop	{r7, pc}
	...

0800506c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005072:	f3ef 8305 	mrs	r3, IPSR
 8005076:	603b      	str	r3, [r7, #0]
  return(result);
 8005078:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800507a:	2b00      	cmp	r3, #0
 800507c:	d003      	beq.n	8005086 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800507e:	f06f 0305 	mvn.w	r3, #5
 8005082:	607b      	str	r3, [r7, #4]
 8005084:	e00c      	b.n	80050a0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005086:	4b0a      	ldr	r3, [pc, #40]	@ (80050b0 <osKernelInitialize+0x44>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d105      	bne.n	800509a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800508e:	4b08      	ldr	r3, [pc, #32]	@ (80050b0 <osKernelInitialize+0x44>)
 8005090:	2201      	movs	r2, #1
 8005092:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005094:	2300      	movs	r3, #0
 8005096:	607b      	str	r3, [r7, #4]
 8005098:	e002      	b.n	80050a0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800509a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800509e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80050a0:	687b      	ldr	r3, [r7, #4]
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	370c      	adds	r7, #12
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	20000378 	.word	0x20000378

080050b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050ba:	f3ef 8305 	mrs	r3, IPSR
 80050be:	603b      	str	r3, [r7, #0]
  return(result);
 80050c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d003      	beq.n	80050ce <osKernelStart+0x1a>
    stat = osErrorISR;
 80050c6:	f06f 0305 	mvn.w	r3, #5
 80050ca:	607b      	str	r3, [r7, #4]
 80050cc:	e010      	b.n	80050f0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80050ce:	4b0b      	ldr	r3, [pc, #44]	@ (80050fc <osKernelStart+0x48>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d109      	bne.n	80050ea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80050d6:	f7ff ffbf 	bl	8005058 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80050da:	4b08      	ldr	r3, [pc, #32]	@ (80050fc <osKernelStart+0x48>)
 80050dc:	2202      	movs	r2, #2
 80050de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80050e0:	f001 fa86 	bl	80065f0 <vTaskStartScheduler>
      stat = osOK;
 80050e4:	2300      	movs	r3, #0
 80050e6:	607b      	str	r3, [r7, #4]
 80050e8:	e002      	b.n	80050f0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80050ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80050ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80050f0:	687b      	ldr	r3, [r7, #4]
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	20000378 	.word	0x20000378

08005100 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005100:	b580      	push	{r7, lr}
 8005102:	b08e      	sub	sp, #56	@ 0x38
 8005104:	af04      	add	r7, sp, #16
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800510c:	2300      	movs	r3, #0
 800510e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005110:	f3ef 8305 	mrs	r3, IPSR
 8005114:	617b      	str	r3, [r7, #20]
  return(result);
 8005116:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005118:	2b00      	cmp	r3, #0
 800511a:	d17e      	bne.n	800521a <osThreadNew+0x11a>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d07b      	beq.n	800521a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005122:	2380      	movs	r3, #128	@ 0x80
 8005124:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005126:	2318      	movs	r3, #24
 8005128:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800512a:	2300      	movs	r3, #0
 800512c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800512e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005132:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d045      	beq.n	80051c6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d002      	beq.n	8005148 <osThreadNew+0x48>
        name = attr->name;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d002      	beq.n	8005156 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d008      	beq.n	800516e <osThreadNew+0x6e>
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	2b38      	cmp	r3, #56	@ 0x38
 8005160:	d805      	bhi.n	800516e <osThreadNew+0x6e>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b00      	cmp	r3, #0
 800516c:	d001      	beq.n	8005172 <osThreadNew+0x72>
        return (NULL);
 800516e:	2300      	movs	r3, #0
 8005170:	e054      	b.n	800521c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d003      	beq.n	8005182 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	089b      	lsrs	r3, r3, #2
 8005180:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00e      	beq.n	80051a8 <osThreadNew+0xa8>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	2baf      	cmp	r3, #175	@ 0xaf
 8005190:	d90a      	bls.n	80051a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005196:	2b00      	cmp	r3, #0
 8005198:	d006      	beq.n	80051a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d002      	beq.n	80051a8 <osThreadNew+0xa8>
        mem = 1;
 80051a2:	2301      	movs	r3, #1
 80051a4:	61bb      	str	r3, [r7, #24]
 80051a6:	e010      	b.n	80051ca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10c      	bne.n	80051ca <osThreadNew+0xca>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d108      	bne.n	80051ca <osThreadNew+0xca>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d104      	bne.n	80051ca <osThreadNew+0xca>
          mem = 0;
 80051c0:	2300      	movs	r3, #0
 80051c2:	61bb      	str	r3, [r7, #24]
 80051c4:	e001      	b.n	80051ca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80051c6:	2300      	movs	r3, #0
 80051c8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d110      	bne.n	80051f2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80051d8:	9202      	str	r2, [sp, #8]
 80051da:	9301      	str	r3, [sp, #4]
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	9300      	str	r3, [sp, #0]
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	6a3a      	ldr	r2, [r7, #32]
 80051e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f001 f808 	bl	80061fc <xTaskCreateStatic>
 80051ec:	4603      	mov	r3, r0
 80051ee:	613b      	str	r3, [r7, #16]
 80051f0:	e013      	b.n	800521a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d110      	bne.n	800521a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80051f8:	6a3b      	ldr	r3, [r7, #32]
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	f107 0310 	add.w	r3, r7, #16
 8005200:	9301      	str	r3, [sp, #4]
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f001 f856 	bl	80062bc <xTaskCreate>
 8005210:	4603      	mov	r3, r0
 8005212:	2b01      	cmp	r3, #1
 8005214:	d001      	beq.n	800521a <osThreadNew+0x11a>
            hTask = NULL;
 8005216:	2300      	movs	r3, #0
 8005218:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800521a:	693b      	ldr	r3, [r7, #16]
}
 800521c:	4618      	mov	r0, r3
 800521e:	3728      	adds	r7, #40	@ 0x28
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800522c:	f3ef 8305 	mrs	r3, IPSR
 8005230:	60bb      	str	r3, [r7, #8]
  return(result);
 8005232:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005234:	2b00      	cmp	r3, #0
 8005236:	d003      	beq.n	8005240 <osDelay+0x1c>
    stat = osErrorISR;
 8005238:	f06f 0305 	mvn.w	r3, #5
 800523c:	60fb      	str	r3, [r7, #12]
 800523e:	e007      	b.n	8005250 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005240:	2300      	movs	r3, #0
 8005242:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d002      	beq.n	8005250 <osDelay+0x2c>
      vTaskDelay(ticks);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f001 f99a 	bl	8006584 <vTaskDelay>
    }
  }

  return (stat);
 8005250:	68fb      	ldr	r3, [r7, #12]
}
 8005252:	4618      	mov	r0, r3
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800525a:	b580      	push	{r7, lr}
 800525c:	b08a      	sub	sp, #40	@ 0x28
 800525e:	af02      	add	r7, sp, #8
 8005260:	60f8      	str	r0, [r7, #12]
 8005262:	60b9      	str	r1, [r7, #8]
 8005264:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005266:	2300      	movs	r3, #0
 8005268:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800526a:	f3ef 8305 	mrs	r3, IPSR
 800526e:	613b      	str	r3, [r7, #16]
  return(result);
 8005270:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005272:	2b00      	cmp	r3, #0
 8005274:	d15f      	bne.n	8005336 <osMessageQueueNew+0xdc>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d05c      	beq.n	8005336 <osMessageQueueNew+0xdc>
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d059      	beq.n	8005336 <osMessageQueueNew+0xdc>
    mem = -1;
 8005282:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005286:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d029      	beq.n	80052e2 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d012      	beq.n	80052bc <osMessageQueueNew+0x62>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	2b4f      	cmp	r3, #79	@ 0x4f
 800529c:	d90e      	bls.n	80052bc <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00a      	beq.n	80052bc <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	695a      	ldr	r2, [r3, #20]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	68b9      	ldr	r1, [r7, #8]
 80052ae:	fb01 f303 	mul.w	r3, r1, r3
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d302      	bcc.n	80052bc <osMessageQueueNew+0x62>
        mem = 1;
 80052b6:	2301      	movs	r3, #1
 80052b8:	61bb      	str	r3, [r7, #24]
 80052ba:	e014      	b.n	80052e6 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d110      	bne.n	80052e6 <osMessageQueueNew+0x8c>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d10c      	bne.n	80052e6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d108      	bne.n	80052e6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d104      	bne.n	80052e6 <osMessageQueueNew+0x8c>
          mem = 0;
 80052dc:	2300      	movs	r3, #0
 80052de:	61bb      	str	r3, [r7, #24]
 80052e0:	e001      	b.n	80052e6 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80052e2:	2300      	movs	r3, #0
 80052e4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d10b      	bne.n	8005304 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	691a      	ldr	r2, [r3, #16]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	2100      	movs	r1, #0
 80052f6:	9100      	str	r1, [sp, #0]
 80052f8:	68b9      	ldr	r1, [r7, #8]
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f000 fa30 	bl	8005760 <xQueueGenericCreateStatic>
 8005300:	61f8      	str	r0, [r7, #28]
 8005302:	e008      	b.n	8005316 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d105      	bne.n	8005316 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800530a:	2200      	movs	r2, #0
 800530c:	68b9      	ldr	r1, [r7, #8]
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f000 faa3 	bl	800585a <xQueueGenericCreate>
 8005314:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00c      	beq.n	8005336 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d003      	beq.n	800532a <osMessageQueueNew+0xd0>
        name = attr->name;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	617b      	str	r3, [r7, #20]
 8005328:	e001      	b.n	800532e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800532a:	2300      	movs	r3, #0
 800532c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800532e:	6979      	ldr	r1, [r7, #20]
 8005330:	69f8      	ldr	r0, [r7, #28]
 8005332:	f000 ff05 	bl	8006140 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005336:	69fb      	ldr	r3, [r7, #28]
}
 8005338:	4618      	mov	r0, r3
 800533a:	3720      	adds	r7, #32
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005340:	b580      	push	{r7, lr}
 8005342:	b088      	sub	sp, #32
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	603b      	str	r3, [r7, #0]
 800534c:	4613      	mov	r3, r2
 800534e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005354:	2300      	movs	r3, #0
 8005356:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005358:	f3ef 8305 	mrs	r3, IPSR
 800535c:	617b      	str	r3, [r7, #20]
  return(result);
 800535e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005360:	2b00      	cmp	r3, #0
 8005362:	d028      	beq.n	80053b6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d005      	beq.n	8005376 <osMessageQueuePut+0x36>
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d002      	beq.n	8005376 <osMessageQueuePut+0x36>
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005376:	f06f 0303 	mvn.w	r3, #3
 800537a:	61fb      	str	r3, [r7, #28]
 800537c:	e038      	b.n	80053f0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800537e:	2300      	movs	r3, #0
 8005380:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005382:	f107 0210 	add.w	r2, r7, #16
 8005386:	2300      	movs	r3, #0
 8005388:	68b9      	ldr	r1, [r7, #8]
 800538a:	69b8      	ldr	r0, [r7, #24]
 800538c:	f000 fbc6 	bl	8005b1c <xQueueGenericSendFromISR>
 8005390:	4603      	mov	r3, r0
 8005392:	2b01      	cmp	r3, #1
 8005394:	d003      	beq.n	800539e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005396:	f06f 0302 	mvn.w	r3, #2
 800539a:	61fb      	str	r3, [r7, #28]
 800539c:	e028      	b.n	80053f0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d025      	beq.n	80053f0 <osMessageQueuePut+0xb0>
 80053a4:	4b15      	ldr	r3, [pc, #84]	@ (80053fc <osMessageQueuePut+0xbc>)
 80053a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053aa:	601a      	str	r2, [r3, #0]
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	f3bf 8f6f 	isb	sy
 80053b4:	e01c      	b.n	80053f0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d002      	beq.n	80053c2 <osMessageQueuePut+0x82>
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d103      	bne.n	80053ca <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80053c2:	f06f 0303 	mvn.w	r3, #3
 80053c6:	61fb      	str	r3, [r7, #28]
 80053c8:	e012      	b.n	80053f0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80053ca:	2300      	movs	r3, #0
 80053cc:	683a      	ldr	r2, [r7, #0]
 80053ce:	68b9      	ldr	r1, [r7, #8]
 80053d0:	69b8      	ldr	r0, [r7, #24]
 80053d2:	f000 faa1 	bl	8005918 <xQueueGenericSend>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d009      	beq.n	80053f0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80053e2:	f06f 0301 	mvn.w	r3, #1
 80053e6:	61fb      	str	r3, [r7, #28]
 80053e8:	e002      	b.n	80053f0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80053ea:	f06f 0302 	mvn.w	r3, #2
 80053ee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80053f0:	69fb      	ldr	r3, [r7, #28]
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3720      	adds	r7, #32
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	e000ed04 	.word	0xe000ed04

08005400 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005400:	b580      	push	{r7, lr}
 8005402:	b088      	sub	sp, #32
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
 800540c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005412:	2300      	movs	r3, #0
 8005414:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005416:	f3ef 8305 	mrs	r3, IPSR
 800541a:	617b      	str	r3, [r7, #20]
  return(result);
 800541c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800541e:	2b00      	cmp	r3, #0
 8005420:	d028      	beq.n	8005474 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d005      	beq.n	8005434 <osMessageQueueGet+0x34>
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <osMessageQueueGet+0x34>
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d003      	beq.n	800543c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005434:	f06f 0303 	mvn.w	r3, #3
 8005438:	61fb      	str	r3, [r7, #28]
 800543a:	e037      	b.n	80054ac <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800543c:	2300      	movs	r3, #0
 800543e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005440:	f107 0310 	add.w	r3, r7, #16
 8005444:	461a      	mov	r2, r3
 8005446:	68b9      	ldr	r1, [r7, #8]
 8005448:	69b8      	ldr	r0, [r7, #24]
 800544a:	f000 fce7 	bl	8005e1c <xQueueReceiveFromISR>
 800544e:	4603      	mov	r3, r0
 8005450:	2b01      	cmp	r3, #1
 8005452:	d003      	beq.n	800545c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005454:	f06f 0302 	mvn.w	r3, #2
 8005458:	61fb      	str	r3, [r7, #28]
 800545a:	e027      	b.n	80054ac <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d024      	beq.n	80054ac <osMessageQueueGet+0xac>
 8005462:	4b15      	ldr	r3, [pc, #84]	@ (80054b8 <osMessageQueueGet+0xb8>)
 8005464:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005468:	601a      	str	r2, [r3, #0]
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	f3bf 8f6f 	isb	sy
 8005472:	e01b      	b.n	80054ac <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d002      	beq.n	8005480 <osMessageQueueGet+0x80>
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d103      	bne.n	8005488 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005480:	f06f 0303 	mvn.w	r3, #3
 8005484:	61fb      	str	r3, [r7, #28]
 8005486:	e011      	b.n	80054ac <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005488:	683a      	ldr	r2, [r7, #0]
 800548a:	68b9      	ldr	r1, [r7, #8]
 800548c:	69b8      	ldr	r0, [r7, #24]
 800548e:	f000 fbe3 	bl	8005c58 <xQueueReceive>
 8005492:	4603      	mov	r3, r0
 8005494:	2b01      	cmp	r3, #1
 8005496:	d009      	beq.n	80054ac <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d003      	beq.n	80054a6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800549e:	f06f 0301 	mvn.w	r3, #1
 80054a2:	61fb      	str	r3, [r7, #28]
 80054a4:	e002      	b.n	80054ac <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80054a6:	f06f 0302 	mvn.w	r3, #2
 80054aa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80054ac:	69fb      	ldr	r3, [r7, #28]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3720      	adds	r7, #32
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	e000ed04 	.word	0xe000ed04

080054bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	4a07      	ldr	r2, [pc, #28]	@ (80054e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80054cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	4a06      	ldr	r2, [pc, #24]	@ (80054ec <vApplicationGetIdleTaskMemory+0x30>)
 80054d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2280      	movs	r2, #128	@ 0x80
 80054d8:	601a      	str	r2, [r3, #0]
}
 80054da:	bf00      	nop
 80054dc:	3714      	adds	r7, #20
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	2000037c 	.word	0x2000037c
 80054ec:	2000042c 	.word	0x2000042c

080054f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	4a07      	ldr	r2, [pc, #28]	@ (800551c <vApplicationGetTimerTaskMemory+0x2c>)
 8005500:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	4a06      	ldr	r2, [pc, #24]	@ (8005520 <vApplicationGetTimerTaskMemory+0x30>)
 8005506:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800550e:	601a      	str	r2, [r3, #0]
}
 8005510:	bf00      	nop
 8005512:	3714      	adds	r7, #20
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr
 800551c:	2000062c 	.word	0x2000062c
 8005520:	200006dc 	.word	0x200006dc

08005524 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f103 0208 	add.w	r2, r3, #8
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800553c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f103 0208 	add.w	r2, r3, #8
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f103 0208 	add.w	r2, r3, #8
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005572:	bf00      	nop
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800557e:	b480      	push	{r7}
 8005580:	b085      	sub	sp, #20
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
 8005586:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	689a      	ldr	r2, [r3, #8]
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	1c5a      	adds	r2, r3, #1
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	601a      	str	r2, [r3, #0]
}
 80055ba:	bf00      	nop
 80055bc:	3714      	adds	r7, #20
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr

080055c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055c6:	b480      	push	{r7}
 80055c8:	b085      	sub	sp, #20
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
 80055ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055dc:	d103      	bne.n	80055e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	60fb      	str	r3, [r7, #12]
 80055e4:	e00c      	b.n	8005600 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	3308      	adds	r3, #8
 80055ea:	60fb      	str	r3, [r7, #12]
 80055ec:	e002      	b.n	80055f4 <vListInsert+0x2e>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	60fb      	str	r3, [r7, #12]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d2f6      	bcs.n	80055ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	685a      	ldr	r2, [r3, #4]
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	683a      	ldr	r2, [r7, #0]
 800560e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	683a      	ldr	r2, [r7, #0]
 800561a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	1c5a      	adds	r2, r3, #1
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	601a      	str	r2, [r3, #0]
}
 800562c:	bf00      	nop
 800562e:	3714      	adds	r7, #20
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	6892      	ldr	r2, [r2, #8]
 800564e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	6852      	ldr	r2, [r2, #4]
 8005658:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	429a      	cmp	r2, r3
 8005662:	d103      	bne.n	800566c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689a      	ldr	r2, [r3, #8]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	1e5a      	subs	r2, r3, #1
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
}
 8005680:	4618      	mov	r0, r3
 8005682:	3714      	adds	r7, #20
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10b      	bne.n	80056b8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80056a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a4:	f383 8811 	msr	BASEPRI, r3
 80056a8:	f3bf 8f6f 	isb	sy
 80056ac:	f3bf 8f4f 	dsb	sy
 80056b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80056b2:	bf00      	nop
 80056b4:	bf00      	nop
 80056b6:	e7fd      	b.n	80056b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80056b8:	f002 fa3e 	bl	8007b38 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056c4:	68f9      	ldr	r1, [r7, #12]
 80056c6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80056c8:	fb01 f303 	mul.w	r3, r1, r3
 80056cc:	441a      	add	r2, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056e8:	3b01      	subs	r3, #1
 80056ea:	68f9      	ldr	r1, [r7, #12]
 80056ec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80056ee:	fb01 f303 	mul.w	r3, r1, r3
 80056f2:	441a      	add	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	22ff      	movs	r2, #255	@ 0xff
 80056fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	22ff      	movs	r2, #255	@ 0xff
 8005704:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d114      	bne.n	8005738 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d01a      	beq.n	800574c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	3310      	adds	r3, #16
 800571a:	4618      	mov	r0, r3
 800571c:	f001 fa82 	bl	8006c24 <xTaskRemoveFromEventList>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d012      	beq.n	800574c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005726:	4b0d      	ldr	r3, [pc, #52]	@ (800575c <xQueueGenericReset+0xd0>)
 8005728:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800572c:	601a      	str	r2, [r3, #0]
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	f3bf 8f6f 	isb	sy
 8005736:	e009      	b.n	800574c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	3310      	adds	r3, #16
 800573c:	4618      	mov	r0, r3
 800573e:	f7ff fef1 	bl	8005524 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	3324      	adds	r3, #36	@ 0x24
 8005746:	4618      	mov	r0, r3
 8005748:	f7ff feec 	bl	8005524 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800574c:	f002 fa26 	bl	8007b9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005750:	2301      	movs	r3, #1
}
 8005752:	4618      	mov	r0, r3
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	e000ed04 	.word	0xe000ed04

08005760 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005760:	b580      	push	{r7, lr}
 8005762:	b08e      	sub	sp, #56	@ 0x38
 8005764:	af02      	add	r7, sp, #8
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
 800576c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d10b      	bne.n	800578c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005778:	f383 8811 	msr	BASEPRI, r3
 800577c:	f3bf 8f6f 	isb	sy
 8005780:	f3bf 8f4f 	dsb	sy
 8005784:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005786:	bf00      	nop
 8005788:	bf00      	nop
 800578a:	e7fd      	b.n	8005788 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10b      	bne.n	80057aa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005796:	f383 8811 	msr	BASEPRI, r3
 800579a:	f3bf 8f6f 	isb	sy
 800579e:	f3bf 8f4f 	dsb	sy
 80057a2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80057a4:	bf00      	nop
 80057a6:	bf00      	nop
 80057a8:	e7fd      	b.n	80057a6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d002      	beq.n	80057b6 <xQueueGenericCreateStatic+0x56>
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d001      	beq.n	80057ba <xQueueGenericCreateStatic+0x5a>
 80057b6:	2301      	movs	r3, #1
 80057b8:	e000      	b.n	80057bc <xQueueGenericCreateStatic+0x5c>
 80057ba:	2300      	movs	r3, #0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10b      	bne.n	80057d8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80057c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057c4:	f383 8811 	msr	BASEPRI, r3
 80057c8:	f3bf 8f6f 	isb	sy
 80057cc:	f3bf 8f4f 	dsb	sy
 80057d0:	623b      	str	r3, [r7, #32]
}
 80057d2:	bf00      	nop
 80057d4:	bf00      	nop
 80057d6:	e7fd      	b.n	80057d4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d102      	bne.n	80057e4 <xQueueGenericCreateStatic+0x84>
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d101      	bne.n	80057e8 <xQueueGenericCreateStatic+0x88>
 80057e4:	2301      	movs	r3, #1
 80057e6:	e000      	b.n	80057ea <xQueueGenericCreateStatic+0x8a>
 80057e8:	2300      	movs	r3, #0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d10b      	bne.n	8005806 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80057ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f2:	f383 8811 	msr	BASEPRI, r3
 80057f6:	f3bf 8f6f 	isb	sy
 80057fa:	f3bf 8f4f 	dsb	sy
 80057fe:	61fb      	str	r3, [r7, #28]
}
 8005800:	bf00      	nop
 8005802:	bf00      	nop
 8005804:	e7fd      	b.n	8005802 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005806:	2350      	movs	r3, #80	@ 0x50
 8005808:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	2b50      	cmp	r3, #80	@ 0x50
 800580e:	d00b      	beq.n	8005828 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005814:	f383 8811 	msr	BASEPRI, r3
 8005818:	f3bf 8f6f 	isb	sy
 800581c:	f3bf 8f4f 	dsb	sy
 8005820:	61bb      	str	r3, [r7, #24]
}
 8005822:	bf00      	nop
 8005824:	bf00      	nop
 8005826:	e7fd      	b.n	8005824 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005828:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800582e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00d      	beq.n	8005850 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800583c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005842:	9300      	str	r3, [sp, #0]
 8005844:	4613      	mov	r3, r2
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	68b9      	ldr	r1, [r7, #8]
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f000 f840 	bl	80058d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005852:	4618      	mov	r0, r3
 8005854:	3730      	adds	r7, #48	@ 0x30
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800585a:	b580      	push	{r7, lr}
 800585c:	b08a      	sub	sp, #40	@ 0x28
 800585e:	af02      	add	r7, sp, #8
 8005860:	60f8      	str	r0, [r7, #12]
 8005862:	60b9      	str	r1, [r7, #8]
 8005864:	4613      	mov	r3, r2
 8005866:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d10b      	bne.n	8005886 <xQueueGenericCreate+0x2c>
	__asm volatile
 800586e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005872:	f383 8811 	msr	BASEPRI, r3
 8005876:	f3bf 8f6f 	isb	sy
 800587a:	f3bf 8f4f 	dsb	sy
 800587e:	613b      	str	r3, [r7, #16]
}
 8005880:	bf00      	nop
 8005882:	bf00      	nop
 8005884:	e7fd      	b.n	8005882 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	68ba      	ldr	r2, [r7, #8]
 800588a:	fb02 f303 	mul.w	r3, r2, r3
 800588e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	3350      	adds	r3, #80	@ 0x50
 8005894:	4618      	mov	r0, r3
 8005896:	f002 fb55 	bl	8007f44 <pvPortMalloc>
 800589a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d011      	beq.n	80058c6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	3350      	adds	r3, #80	@ 0x50
 80058aa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80058b4:	79fa      	ldrb	r2, [r7, #7]
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	9300      	str	r3, [sp, #0]
 80058ba:	4613      	mov	r3, r2
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	68b9      	ldr	r1, [r7, #8]
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f000 f805 	bl	80058d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80058c6:	69bb      	ldr	r3, [r7, #24]
	}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3720      	adds	r7, #32
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
 80058dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d103      	bne.n	80058ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	69ba      	ldr	r2, [r7, #24]
 80058e8:	601a      	str	r2, [r3, #0]
 80058ea:	e002      	b.n	80058f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80058fe:	2101      	movs	r1, #1
 8005900:	69b8      	ldr	r0, [r7, #24]
 8005902:	f7ff fec3 	bl	800568c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	78fa      	ldrb	r2, [r7, #3]
 800590a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800590e:	bf00      	nop
 8005910:	3710      	adds	r7, #16
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
	...

08005918 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b08e      	sub	sp, #56	@ 0x38
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
 8005924:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005926:	2300      	movs	r3, #0
 8005928:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800592e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005930:	2b00      	cmp	r3, #0
 8005932:	d10b      	bne.n	800594c <xQueueGenericSend+0x34>
	__asm volatile
 8005934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005938:	f383 8811 	msr	BASEPRI, r3
 800593c:	f3bf 8f6f 	isb	sy
 8005940:	f3bf 8f4f 	dsb	sy
 8005944:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005946:	bf00      	nop
 8005948:	bf00      	nop
 800594a:	e7fd      	b.n	8005948 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d103      	bne.n	800595a <xQueueGenericSend+0x42>
 8005952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <xQueueGenericSend+0x46>
 800595a:	2301      	movs	r3, #1
 800595c:	e000      	b.n	8005960 <xQueueGenericSend+0x48>
 800595e:	2300      	movs	r3, #0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d10b      	bne.n	800597c <xQueueGenericSend+0x64>
	__asm volatile
 8005964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005968:	f383 8811 	msr	BASEPRI, r3
 800596c:	f3bf 8f6f 	isb	sy
 8005970:	f3bf 8f4f 	dsb	sy
 8005974:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005976:	bf00      	nop
 8005978:	bf00      	nop
 800597a:	e7fd      	b.n	8005978 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	2b02      	cmp	r3, #2
 8005980:	d103      	bne.n	800598a <xQueueGenericSend+0x72>
 8005982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005986:	2b01      	cmp	r3, #1
 8005988:	d101      	bne.n	800598e <xQueueGenericSend+0x76>
 800598a:	2301      	movs	r3, #1
 800598c:	e000      	b.n	8005990 <xQueueGenericSend+0x78>
 800598e:	2300      	movs	r3, #0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10b      	bne.n	80059ac <xQueueGenericSend+0x94>
	__asm volatile
 8005994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005998:	f383 8811 	msr	BASEPRI, r3
 800599c:	f3bf 8f6f 	isb	sy
 80059a0:	f3bf 8f4f 	dsb	sy
 80059a4:	623b      	str	r3, [r7, #32]
}
 80059a6:	bf00      	nop
 80059a8:	bf00      	nop
 80059aa:	e7fd      	b.n	80059a8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059ac:	f001 fb58 	bl	8007060 <xTaskGetSchedulerState>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d102      	bne.n	80059bc <xQueueGenericSend+0xa4>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d101      	bne.n	80059c0 <xQueueGenericSend+0xa8>
 80059bc:	2301      	movs	r3, #1
 80059be:	e000      	b.n	80059c2 <xQueueGenericSend+0xaa>
 80059c0:	2300      	movs	r3, #0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10b      	bne.n	80059de <xQueueGenericSend+0xc6>
	__asm volatile
 80059c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ca:	f383 8811 	msr	BASEPRI, r3
 80059ce:	f3bf 8f6f 	isb	sy
 80059d2:	f3bf 8f4f 	dsb	sy
 80059d6:	61fb      	str	r3, [r7, #28]
}
 80059d8:	bf00      	nop
 80059da:	bf00      	nop
 80059dc:	e7fd      	b.n	80059da <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059de:	f002 f8ab 	bl	8007b38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d302      	bcc.n	80059f4 <xQueueGenericSend+0xdc>
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d129      	bne.n	8005a48 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	68b9      	ldr	r1, [r7, #8]
 80059f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80059fa:	f000 fa91 	bl	8005f20 <prvCopyDataToQueue>
 80059fe:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d010      	beq.n	8005a2a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a0a:	3324      	adds	r3, #36	@ 0x24
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f001 f909 	bl	8006c24 <xTaskRemoveFromEventList>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d013      	beq.n	8005a40 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005a18:	4b3f      	ldr	r3, [pc, #252]	@ (8005b18 <xQueueGenericSend+0x200>)
 8005a1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a1e:	601a      	str	r2, [r3, #0]
 8005a20:	f3bf 8f4f 	dsb	sy
 8005a24:	f3bf 8f6f 	isb	sy
 8005a28:	e00a      	b.n	8005a40 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d007      	beq.n	8005a40 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005a30:	4b39      	ldr	r3, [pc, #228]	@ (8005b18 <xQueueGenericSend+0x200>)
 8005a32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005a40:	f002 f8ac 	bl	8007b9c <vPortExitCritical>
				return pdPASS;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e063      	b.n	8005b10 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d103      	bne.n	8005a56 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a4e:	f002 f8a5 	bl	8007b9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005a52:	2300      	movs	r3, #0
 8005a54:	e05c      	b.n	8005b10 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d106      	bne.n	8005a6a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a5c:	f107 0314 	add.w	r3, r7, #20
 8005a60:	4618      	mov	r0, r3
 8005a62:	f001 f945 	bl	8006cf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a66:	2301      	movs	r3, #1
 8005a68:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a6a:	f002 f897 	bl	8007b9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a6e:	f000 fe31 	bl	80066d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a72:	f002 f861 	bl	8007b38 <vPortEnterCritical>
 8005a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a78:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a7c:	b25b      	sxtb	r3, r3
 8005a7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a82:	d103      	bne.n	8005a8c <xQueueGenericSend+0x174>
 8005a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a8e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a92:	b25b      	sxtb	r3, r3
 8005a94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a98:	d103      	bne.n	8005aa2 <xQueueGenericSend+0x18a>
 8005a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005aa2:	f002 f87b 	bl	8007b9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005aa6:	1d3a      	adds	r2, r7, #4
 8005aa8:	f107 0314 	add.w	r3, r7, #20
 8005aac:	4611      	mov	r1, r2
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f001 f934 	bl	8006d1c <xTaskCheckForTimeOut>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d124      	bne.n	8005b04 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005aba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005abc:	f000 fb28 	bl	8006110 <prvIsQueueFull>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d018      	beq.n	8005af8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac8:	3310      	adds	r3, #16
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	4611      	mov	r1, r2
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f001 f856 	bl	8006b80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005ad4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ad6:	f000 fab3 	bl	8006040 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005ada:	f000 fe41 	bl	8006760 <xTaskResumeAll>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f47f af7c 	bne.w	80059de <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005ae6:	4b0c      	ldr	r3, [pc, #48]	@ (8005b18 <xQueueGenericSend+0x200>)
 8005ae8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005aec:	601a      	str	r2, [r3, #0]
 8005aee:	f3bf 8f4f 	dsb	sy
 8005af2:	f3bf 8f6f 	isb	sy
 8005af6:	e772      	b.n	80059de <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005af8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005afa:	f000 faa1 	bl	8006040 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005afe:	f000 fe2f 	bl	8006760 <xTaskResumeAll>
 8005b02:	e76c      	b.n	80059de <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005b04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b06:	f000 fa9b 	bl	8006040 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b0a:	f000 fe29 	bl	8006760 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005b0e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3738      	adds	r7, #56	@ 0x38
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	e000ed04 	.word	0xe000ed04

08005b1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b090      	sub	sp, #64	@ 0x40
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
 8005b28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10b      	bne.n	8005b4c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b38:	f383 8811 	msr	BASEPRI, r3
 8005b3c:	f3bf 8f6f 	isb	sy
 8005b40:	f3bf 8f4f 	dsb	sy
 8005b44:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005b46:	bf00      	nop
 8005b48:	bf00      	nop
 8005b4a:	e7fd      	b.n	8005b48 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d103      	bne.n	8005b5a <xQueueGenericSendFromISR+0x3e>
 8005b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d101      	bne.n	8005b5e <xQueueGenericSendFromISR+0x42>
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e000      	b.n	8005b60 <xQueueGenericSendFromISR+0x44>
 8005b5e:	2300      	movs	r3, #0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d10b      	bne.n	8005b7c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b68:	f383 8811 	msr	BASEPRI, r3
 8005b6c:	f3bf 8f6f 	isb	sy
 8005b70:	f3bf 8f4f 	dsb	sy
 8005b74:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005b76:	bf00      	nop
 8005b78:	bf00      	nop
 8005b7a:	e7fd      	b.n	8005b78 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d103      	bne.n	8005b8a <xQueueGenericSendFromISR+0x6e>
 8005b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d101      	bne.n	8005b8e <xQueueGenericSendFromISR+0x72>
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e000      	b.n	8005b90 <xQueueGenericSendFromISR+0x74>
 8005b8e:	2300      	movs	r3, #0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d10b      	bne.n	8005bac <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b98:	f383 8811 	msr	BASEPRI, r3
 8005b9c:	f3bf 8f6f 	isb	sy
 8005ba0:	f3bf 8f4f 	dsb	sy
 8005ba4:	623b      	str	r3, [r7, #32]
}
 8005ba6:	bf00      	nop
 8005ba8:	bf00      	nop
 8005baa:	e7fd      	b.n	8005ba8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005bac:	f002 f988 	bl	8007ec0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005bb0:	f3ef 8211 	mrs	r2, BASEPRI
 8005bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bb8:	f383 8811 	msr	BASEPRI, r3
 8005bbc:	f3bf 8f6f 	isb	sy
 8005bc0:	f3bf 8f4f 	dsb	sy
 8005bc4:	61fa      	str	r2, [r7, #28]
 8005bc6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005bc8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005bca:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d302      	bcc.n	8005bde <xQueueGenericSendFromISR+0xc2>
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d12f      	bne.n	8005c3e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005be0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005be4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005bee:	683a      	ldr	r2, [r7, #0]
 8005bf0:	68b9      	ldr	r1, [r7, #8]
 8005bf2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005bf4:	f000 f994 	bl	8005f20 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005bf8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005bfc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c00:	d112      	bne.n	8005c28 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d016      	beq.n	8005c38 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c0c:	3324      	adds	r3, #36	@ 0x24
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f001 f808 	bl	8006c24 <xTaskRemoveFromEventList>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00e      	beq.n	8005c38 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00b      	beq.n	8005c38 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	601a      	str	r2, [r3, #0]
 8005c26:	e007      	b.n	8005c38 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	b25a      	sxtb	r2, r3
 8005c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005c3c:	e001      	b.n	8005c42 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c44:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005c4c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3740      	adds	r7, #64	@ 0x40
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b08c      	sub	sp, #48	@ 0x30
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c64:	2300      	movs	r3, #0
 8005c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10b      	bne.n	8005c8a <xQueueReceive+0x32>
	__asm volatile
 8005c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c76:	f383 8811 	msr	BASEPRI, r3
 8005c7a:	f3bf 8f6f 	isb	sy
 8005c7e:	f3bf 8f4f 	dsb	sy
 8005c82:	623b      	str	r3, [r7, #32]
}
 8005c84:	bf00      	nop
 8005c86:	bf00      	nop
 8005c88:	e7fd      	b.n	8005c86 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d103      	bne.n	8005c98 <xQueueReceive+0x40>
 8005c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <xQueueReceive+0x44>
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e000      	b.n	8005c9e <xQueueReceive+0x46>
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10b      	bne.n	8005cba <xQueueReceive+0x62>
	__asm volatile
 8005ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca6:	f383 8811 	msr	BASEPRI, r3
 8005caa:	f3bf 8f6f 	isb	sy
 8005cae:	f3bf 8f4f 	dsb	sy
 8005cb2:	61fb      	str	r3, [r7, #28]
}
 8005cb4:	bf00      	nop
 8005cb6:	bf00      	nop
 8005cb8:	e7fd      	b.n	8005cb6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cba:	f001 f9d1 	bl	8007060 <xTaskGetSchedulerState>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d102      	bne.n	8005cca <xQueueReceive+0x72>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d101      	bne.n	8005cce <xQueueReceive+0x76>
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e000      	b.n	8005cd0 <xQueueReceive+0x78>
 8005cce:	2300      	movs	r3, #0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10b      	bne.n	8005cec <xQueueReceive+0x94>
	__asm volatile
 8005cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cd8:	f383 8811 	msr	BASEPRI, r3
 8005cdc:	f3bf 8f6f 	isb	sy
 8005ce0:	f3bf 8f4f 	dsb	sy
 8005ce4:	61bb      	str	r3, [r7, #24]
}
 8005ce6:	bf00      	nop
 8005ce8:	bf00      	nop
 8005cea:	e7fd      	b.n	8005ce8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005cec:	f001 ff24 	bl	8007b38 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cf4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d01f      	beq.n	8005d3c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005cfc:	68b9      	ldr	r1, [r7, #8]
 8005cfe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d00:	f000 f978 	bl	8005ff4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d06:	1e5a      	subs	r2, r3, #1
 8005d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d0a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00f      	beq.n	8005d34 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d16:	3310      	adds	r3, #16
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f000 ff83 	bl	8006c24 <xTaskRemoveFromEventList>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d007      	beq.n	8005d34 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d24:	4b3c      	ldr	r3, [pc, #240]	@ (8005e18 <xQueueReceive+0x1c0>)
 8005d26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d2a:	601a      	str	r2, [r3, #0]
 8005d2c:	f3bf 8f4f 	dsb	sy
 8005d30:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d34:	f001 ff32 	bl	8007b9c <vPortExitCritical>
				return pdPASS;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e069      	b.n	8005e10 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d103      	bne.n	8005d4a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d42:	f001 ff2b 	bl	8007b9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d46:	2300      	movs	r3, #0
 8005d48:	e062      	b.n	8005e10 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d106      	bne.n	8005d5e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d50:	f107 0310 	add.w	r3, r7, #16
 8005d54:	4618      	mov	r0, r3
 8005d56:	f000 ffcb 	bl	8006cf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d5e:	f001 ff1d 	bl	8007b9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d62:	f000 fcb7 	bl	80066d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d66:	f001 fee7 	bl	8007b38 <vPortEnterCritical>
 8005d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d70:	b25b      	sxtb	r3, r3
 8005d72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d76:	d103      	bne.n	8005d80 <xQueueReceive+0x128>
 8005d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d82:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d86:	b25b      	sxtb	r3, r3
 8005d88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d8c:	d103      	bne.n	8005d96 <xQueueReceive+0x13e>
 8005d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d96:	f001 ff01 	bl	8007b9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d9a:	1d3a      	adds	r2, r7, #4
 8005d9c:	f107 0310 	add.w	r3, r7, #16
 8005da0:	4611      	mov	r1, r2
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 ffba 	bl	8006d1c <xTaskCheckForTimeOut>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d123      	bne.n	8005df6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005dae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005db0:	f000 f998 	bl	80060e4 <prvIsQueueEmpty>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d017      	beq.n	8005dea <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dbc:	3324      	adds	r3, #36	@ 0x24
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	4611      	mov	r1, r2
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f000 fedc 	bl	8006b80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005dc8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005dca:	f000 f939 	bl	8006040 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005dce:	f000 fcc7 	bl	8006760 <xTaskResumeAll>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d189      	bne.n	8005cec <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005dd8:	4b0f      	ldr	r3, [pc, #60]	@ (8005e18 <xQueueReceive+0x1c0>)
 8005dda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dde:	601a      	str	r2, [r3, #0]
 8005de0:	f3bf 8f4f 	dsb	sy
 8005de4:	f3bf 8f6f 	isb	sy
 8005de8:	e780      	b.n	8005cec <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005dea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005dec:	f000 f928 	bl	8006040 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005df0:	f000 fcb6 	bl	8006760 <xTaskResumeAll>
 8005df4:	e77a      	b.n	8005cec <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005df6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005df8:	f000 f922 	bl	8006040 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005dfc:	f000 fcb0 	bl	8006760 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e02:	f000 f96f 	bl	80060e4 <prvIsQueueEmpty>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	f43f af6f 	beq.w	8005cec <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005e0e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3730      	adds	r7, #48	@ 0x30
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	e000ed04 	.word	0xe000ed04

08005e1c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b08e      	sub	sp, #56	@ 0x38
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d10b      	bne.n	8005e4a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8005e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e36:	f383 8811 	msr	BASEPRI, r3
 8005e3a:	f3bf 8f6f 	isb	sy
 8005e3e:	f3bf 8f4f 	dsb	sy
 8005e42:	623b      	str	r3, [r7, #32]
}
 8005e44:	bf00      	nop
 8005e46:	bf00      	nop
 8005e48:	e7fd      	b.n	8005e46 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d103      	bne.n	8005e58 <xQueueReceiveFromISR+0x3c>
 8005e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d101      	bne.n	8005e5c <xQueueReceiveFromISR+0x40>
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e000      	b.n	8005e5e <xQueueReceiveFromISR+0x42>
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d10b      	bne.n	8005e7a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8005e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e66:	f383 8811 	msr	BASEPRI, r3
 8005e6a:	f3bf 8f6f 	isb	sy
 8005e6e:	f3bf 8f4f 	dsb	sy
 8005e72:	61fb      	str	r3, [r7, #28]
}
 8005e74:	bf00      	nop
 8005e76:	bf00      	nop
 8005e78:	e7fd      	b.n	8005e76 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e7a:	f002 f821 	bl	8007ec0 <vPortValidateInterruptPriority>
	__asm volatile
 8005e7e:	f3ef 8211 	mrs	r2, BASEPRI
 8005e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e86:	f383 8811 	msr	BASEPRI, r3
 8005e8a:	f3bf 8f6f 	isb	sy
 8005e8e:	f3bf 8f4f 	dsb	sy
 8005e92:	61ba      	str	r2, [r7, #24]
 8005e94:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005e96:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e9e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d02f      	beq.n	8005f06 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005eac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005eb0:	68b9      	ldr	r1, [r7, #8]
 8005eb2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005eb4:	f000 f89e 	bl	8005ff4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eba:	1e5a      	subs	r2, r3, #1
 8005ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ebe:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005ec0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ec8:	d112      	bne.n	8005ef0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d016      	beq.n	8005f00 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed4:	3310      	adds	r3, #16
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f000 fea4 	bl	8006c24 <xTaskRemoveFromEventList>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00e      	beq.n	8005f00 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00b      	beq.n	8005f00 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	601a      	str	r2, [r3, #0]
 8005eee:	e007      	b.n	8005f00 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005ef0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	b25a      	sxtb	r2, r3
 8005efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005efc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005f00:	2301      	movs	r3, #1
 8005f02:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f04:	e001      	b.n	8005f0a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8005f06:	2300      	movs	r3, #0
 8005f08:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f0c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	f383 8811 	msr	BASEPRI, r3
}
 8005f14:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3738      	adds	r7, #56	@ 0x38
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b086      	sub	sp, #24
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f34:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10d      	bne.n	8005f5a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d14d      	bne.n	8005fe2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f001 f8a6 	bl	800709c <xTaskPriorityDisinherit>
 8005f50:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	609a      	str	r2, [r3, #8]
 8005f58:	e043      	b.n	8005fe2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d119      	bne.n	8005f94 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6858      	ldr	r0, [r3, #4]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f68:	461a      	mov	r2, r3
 8005f6a:	68b9      	ldr	r1, [r7, #8]
 8005f6c:	f002 fa5c 	bl	8008428 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	685a      	ldr	r2, [r3, #4]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f78:	441a      	add	r2, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	685a      	ldr	r2, [r3, #4]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d32b      	bcc.n	8005fe2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	605a      	str	r2, [r3, #4]
 8005f92:	e026      	b.n	8005fe2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	68d8      	ldr	r0, [r3, #12]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	68b9      	ldr	r1, [r7, #8]
 8005fa0:	f002 fa42 	bl	8008428 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	68da      	ldr	r2, [r3, #12]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fac:	425b      	negs	r3, r3
 8005fae:	441a      	add	r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	68da      	ldr	r2, [r3, #12]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d207      	bcs.n	8005fd0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	689a      	ldr	r2, [r3, #8]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fc8:	425b      	negs	r3, r3
 8005fca:	441a      	add	r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d105      	bne.n	8005fe2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d002      	beq.n	8005fe2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	1c5a      	adds	r2, r3, #1
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005fea:	697b      	ldr	r3, [r7, #20]
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3718      	adds	r7, #24
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006002:	2b00      	cmp	r3, #0
 8006004:	d018      	beq.n	8006038 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	68da      	ldr	r2, [r3, #12]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800600e:	441a      	add	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	68da      	ldr	r2, [r3, #12]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	429a      	cmp	r2, r3
 800601e:	d303      	bcc.n	8006028 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	68d9      	ldr	r1, [r3, #12]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006030:	461a      	mov	r2, r3
 8006032:	6838      	ldr	r0, [r7, #0]
 8006034:	f002 f9f8 	bl	8008428 <memcpy>
	}
}
 8006038:	bf00      	nop
 800603a:	3708      	adds	r7, #8
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006048:	f001 fd76 	bl	8007b38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006052:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006054:	e011      	b.n	800607a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800605a:	2b00      	cmp	r3, #0
 800605c:	d012      	beq.n	8006084 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	3324      	adds	r3, #36	@ 0x24
 8006062:	4618      	mov	r0, r3
 8006064:	f000 fdde 	bl	8006c24 <xTaskRemoveFromEventList>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d001      	beq.n	8006072 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800606e:	f000 feb9 	bl	8006de4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006072:	7bfb      	ldrb	r3, [r7, #15]
 8006074:	3b01      	subs	r3, #1
 8006076:	b2db      	uxtb	r3, r3
 8006078:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800607a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800607e:	2b00      	cmp	r3, #0
 8006080:	dce9      	bgt.n	8006056 <prvUnlockQueue+0x16>
 8006082:	e000      	b.n	8006086 <prvUnlockQueue+0x46>
					break;
 8006084:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	22ff      	movs	r2, #255	@ 0xff
 800608a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800608e:	f001 fd85 	bl	8007b9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006092:	f001 fd51 	bl	8007b38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800609c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800609e:	e011      	b.n	80060c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d012      	beq.n	80060ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	3310      	adds	r3, #16
 80060ac:	4618      	mov	r0, r3
 80060ae:	f000 fdb9 	bl	8006c24 <xTaskRemoveFromEventList>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d001      	beq.n	80060bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80060b8:	f000 fe94 	bl	8006de4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80060bc:	7bbb      	ldrb	r3, [r7, #14]
 80060be:	3b01      	subs	r3, #1
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80060c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	dce9      	bgt.n	80060a0 <prvUnlockQueue+0x60>
 80060cc:	e000      	b.n	80060d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80060ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	22ff      	movs	r2, #255	@ 0xff
 80060d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80060d8:	f001 fd60 	bl	8007b9c <vPortExitCritical>
}
 80060dc:	bf00      	nop
 80060de:	3710      	adds	r7, #16
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80060ec:	f001 fd24 	bl	8007b38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d102      	bne.n	80060fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80060f8:	2301      	movs	r3, #1
 80060fa:	60fb      	str	r3, [r7, #12]
 80060fc:	e001      	b.n	8006102 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80060fe:	2300      	movs	r3, #0
 8006100:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006102:	f001 fd4b 	bl	8007b9c <vPortExitCritical>

	return xReturn;
 8006106:	68fb      	ldr	r3, [r7, #12]
}
 8006108:	4618      	mov	r0, r3
 800610a:	3710      	adds	r7, #16
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006118:	f001 fd0e 	bl	8007b38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006124:	429a      	cmp	r2, r3
 8006126:	d102      	bne.n	800612e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006128:	2301      	movs	r3, #1
 800612a:	60fb      	str	r3, [r7, #12]
 800612c:	e001      	b.n	8006132 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800612e:	2300      	movs	r3, #0
 8006130:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006132:	f001 fd33 	bl	8007b9c <vPortExitCritical>

	return xReturn;
 8006136:	68fb      	ldr	r3, [r7, #12]
}
 8006138:	4618      	mov	r0, r3
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006140:	b480      	push	{r7}
 8006142:	b085      	sub	sp, #20
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800614a:	2300      	movs	r3, #0
 800614c:	60fb      	str	r3, [r7, #12]
 800614e:	e014      	b.n	800617a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006150:	4a0f      	ldr	r2, [pc, #60]	@ (8006190 <vQueueAddToRegistry+0x50>)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10b      	bne.n	8006174 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800615c:	490c      	ldr	r1, [pc, #48]	@ (8006190 <vQueueAddToRegistry+0x50>)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	683a      	ldr	r2, [r7, #0]
 8006162:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006166:	4a0a      	ldr	r2, [pc, #40]	@ (8006190 <vQueueAddToRegistry+0x50>)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	00db      	lsls	r3, r3, #3
 800616c:	4413      	add	r3, r2
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006172:	e006      	b.n	8006182 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	3301      	adds	r3, #1
 8006178:	60fb      	str	r3, [r7, #12]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2b0f      	cmp	r3, #15
 800617e:	d9e7      	bls.n	8006150 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006180:	bf00      	nop
 8006182:	bf00      	nop
 8006184:	3714      	adds	r7, #20
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	20000adc 	.word	0x20000adc

08006194 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006194:	b580      	push	{r7, lr}
 8006196:	b086      	sub	sp, #24
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80061a4:	f001 fcc8 	bl	8007b38 <vPortEnterCritical>
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80061ae:	b25b      	sxtb	r3, r3
 80061b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80061b4:	d103      	bne.n	80061be <vQueueWaitForMessageRestricted+0x2a>
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80061c4:	b25b      	sxtb	r3, r3
 80061c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80061ca:	d103      	bne.n	80061d4 <vQueueWaitForMessageRestricted+0x40>
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80061d4:	f001 fce2 	bl	8007b9c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d106      	bne.n	80061ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	3324      	adds	r3, #36	@ 0x24
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	68b9      	ldr	r1, [r7, #8]
 80061e8:	4618      	mov	r0, r3
 80061ea:	f000 fcef 	bl	8006bcc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80061ee:	6978      	ldr	r0, [r7, #20]
 80061f0:	f7ff ff26 	bl	8006040 <prvUnlockQueue>
	}
 80061f4:	bf00      	nop
 80061f6:	3718      	adds	r7, #24
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b08e      	sub	sp, #56	@ 0x38
 8006200:	af04      	add	r7, sp, #16
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
 8006208:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800620a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10b      	bne.n	8006228 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006214:	f383 8811 	msr	BASEPRI, r3
 8006218:	f3bf 8f6f 	isb	sy
 800621c:	f3bf 8f4f 	dsb	sy
 8006220:	623b      	str	r3, [r7, #32]
}
 8006222:	bf00      	nop
 8006224:	bf00      	nop
 8006226:	e7fd      	b.n	8006224 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800622a:	2b00      	cmp	r3, #0
 800622c:	d10b      	bne.n	8006246 <xTaskCreateStatic+0x4a>
	__asm volatile
 800622e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006232:	f383 8811 	msr	BASEPRI, r3
 8006236:	f3bf 8f6f 	isb	sy
 800623a:	f3bf 8f4f 	dsb	sy
 800623e:	61fb      	str	r3, [r7, #28]
}
 8006240:	bf00      	nop
 8006242:	bf00      	nop
 8006244:	e7fd      	b.n	8006242 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006246:	23b0      	movs	r3, #176	@ 0xb0
 8006248:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	2bb0      	cmp	r3, #176	@ 0xb0
 800624e:	d00b      	beq.n	8006268 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006254:	f383 8811 	msr	BASEPRI, r3
 8006258:	f3bf 8f6f 	isb	sy
 800625c:	f3bf 8f4f 	dsb	sy
 8006260:	61bb      	str	r3, [r7, #24]
}
 8006262:	bf00      	nop
 8006264:	bf00      	nop
 8006266:	e7fd      	b.n	8006264 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006268:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800626a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800626c:	2b00      	cmp	r3, #0
 800626e:	d01e      	beq.n	80062ae <xTaskCreateStatic+0xb2>
 8006270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006272:	2b00      	cmp	r3, #0
 8006274:	d01b      	beq.n	80062ae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006278:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800627a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800627e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006282:	2202      	movs	r2, #2
 8006284:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006288:	2300      	movs	r3, #0
 800628a:	9303      	str	r3, [sp, #12]
 800628c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628e:	9302      	str	r3, [sp, #8]
 8006290:	f107 0314 	add.w	r3, r7, #20
 8006294:	9301      	str	r3, [sp, #4]
 8006296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006298:	9300      	str	r3, [sp, #0]
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	68b9      	ldr	r1, [r7, #8]
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f000 f851 	bl	8006348 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80062a8:	f000 f8fc 	bl	80064a4 <prvAddNewTaskToReadyList>
 80062ac:	e001      	b.n	80062b2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80062ae:	2300      	movs	r3, #0
 80062b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80062b2:	697b      	ldr	r3, [r7, #20]
	}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3728      	adds	r7, #40	@ 0x28
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b08c      	sub	sp, #48	@ 0x30
 80062c0:	af04      	add	r7, sp, #16
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	603b      	str	r3, [r7, #0]
 80062c8:	4613      	mov	r3, r2
 80062ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80062cc:	88fb      	ldrh	r3, [r7, #6]
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4618      	mov	r0, r3
 80062d2:	f001 fe37 	bl	8007f44 <pvPortMalloc>
 80062d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00e      	beq.n	80062fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80062de:	20b0      	movs	r0, #176	@ 0xb0
 80062e0:	f001 fe30 	bl	8007f44 <pvPortMalloc>
 80062e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d003      	beq.n	80062f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80062f2:	e005      	b.n	8006300 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80062f4:	6978      	ldr	r0, [r7, #20]
 80062f6:	f001 fef3 	bl	80080e0 <vPortFree>
 80062fa:	e001      	b.n	8006300 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80062fc:	2300      	movs	r3, #0
 80062fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d017      	beq.n	8006336 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800630e:	88fa      	ldrh	r2, [r7, #6]
 8006310:	2300      	movs	r3, #0
 8006312:	9303      	str	r3, [sp, #12]
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	9302      	str	r3, [sp, #8]
 8006318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800631a:	9301      	str	r3, [sp, #4]
 800631c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800631e:	9300      	str	r3, [sp, #0]
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	68b9      	ldr	r1, [r7, #8]
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	f000 f80f 	bl	8006348 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800632a:	69f8      	ldr	r0, [r7, #28]
 800632c:	f000 f8ba 	bl	80064a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006330:	2301      	movs	r3, #1
 8006332:	61bb      	str	r3, [r7, #24]
 8006334:	e002      	b.n	800633c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006336:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800633a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800633c:	69bb      	ldr	r3, [r7, #24]
	}
 800633e:	4618      	mov	r0, r3
 8006340:	3720      	adds	r7, #32
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
	...

08006348 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b088      	sub	sp, #32
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	607a      	str	r2, [r7, #4]
 8006354:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006358:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	461a      	mov	r2, r3
 8006360:	21a5      	movs	r1, #165	@ 0xa5
 8006362:	f001 ffdd 	bl	8008320 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006368:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006370:	3b01      	subs	r3, #1
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	4413      	add	r3, r2
 8006376:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	f023 0307 	bic.w	r3, r3, #7
 800637e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	f003 0307 	and.w	r3, r3, #7
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00b      	beq.n	80063a2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800638a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800638e:	f383 8811 	msr	BASEPRI, r3
 8006392:	f3bf 8f6f 	isb	sy
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	617b      	str	r3, [r7, #20]
}
 800639c:	bf00      	nop
 800639e:	bf00      	nop
 80063a0:	e7fd      	b.n	800639e <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 80063a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a4:	69ba      	ldr	r2, [r7, #24]
 80063a6:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d01f      	beq.n	80063ee <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063ae:	2300      	movs	r3, #0
 80063b0:	61fb      	str	r3, [r7, #28]
 80063b2:	e012      	b.n	80063da <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	4413      	add	r3, r2
 80063ba:	7819      	ldrb	r1, [r3, #0]
 80063bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	4413      	add	r3, r2
 80063c2:	3334      	adds	r3, #52	@ 0x34
 80063c4:	460a      	mov	r2, r1
 80063c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80063c8:	68ba      	ldr	r2, [r7, #8]
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	4413      	add	r3, r2
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d006      	beq.n	80063e2 <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	3301      	adds	r3, #1
 80063d8:	61fb      	str	r3, [r7, #28]
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	2b0f      	cmp	r3, #15
 80063de:	d9e9      	bls.n	80063b4 <prvInitialiseNewTask+0x6c>
 80063e0:	e000      	b.n	80063e4 <prvInitialiseNewTask+0x9c>
			{
				break;
 80063e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80063e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80063ec:	e003      	b.n	80063f6 <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80063ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80063f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063f8:	2b37      	cmp	r3, #55	@ 0x37
 80063fa:	d901      	bls.n	8006400 <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80063fc:	2337      	movs	r3, #55	@ 0x37
 80063fe:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006402:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006404:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006408:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800640a:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800640c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800640e:	2200      	movs	r2, #0
 8006410:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006414:	3304      	adds	r3, #4
 8006416:	4618      	mov	r0, r3
 8006418:	f7ff f8a4 	bl	8005564 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800641c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800641e:	3318      	adds	r3, #24
 8006420:	4618      	mov	r0, r3
 8006422:	f7ff f89f 	bl	8005564 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006428:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800642a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800642c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800642e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006434:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006438:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800643a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800643c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800643e:	2200      	movs	r2, #0
 8006440:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006444:	2200      	movs	r2, #0
 8006446:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800644a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644c:	2200      	movs	r2, #0
 800644e:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006454:	335c      	adds	r3, #92	@ 0x5c
 8006456:	224c      	movs	r2, #76	@ 0x4c
 8006458:	2100      	movs	r1, #0
 800645a:	4618      	mov	r0, r3
 800645c:	f001 ff60 	bl	8008320 <memset>
 8006460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006462:	4a0d      	ldr	r2, [pc, #52]	@ (8006498 <prvInitialiseNewTask+0x150>)
 8006464:	661a      	str	r2, [r3, #96]	@ 0x60
 8006466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006468:	4a0c      	ldr	r2, [pc, #48]	@ (800649c <prvInitialiseNewTask+0x154>)
 800646a:	665a      	str	r2, [r3, #100]	@ 0x64
 800646c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800646e:	4a0c      	ldr	r2, [pc, #48]	@ (80064a0 <prvInitialiseNewTask+0x158>)
 8006470:	669a      	str	r2, [r3, #104]	@ 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006472:	683a      	ldr	r2, [r7, #0]
 8006474:	68f9      	ldr	r1, [r7, #12]
 8006476:	69b8      	ldr	r0, [r7, #24]
 8006478:	f001 fa2e 	bl	80078d8 <pxPortInitialiseStack>
 800647c:	4602      	mov	r2, r0
 800647e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006480:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006484:	2b00      	cmp	r3, #0
 8006486:	d002      	beq.n	800648e <prvInitialiseNewTask+0x146>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800648a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800648c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800648e:	bf00      	nop
 8006490:	3720      	adds	r7, #32
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	20004dc4 	.word	0x20004dc4
 800649c:	20004e2c 	.word	0x20004e2c
 80064a0:	20004e94 	.word	0x20004e94

080064a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80064ac:	f001 fb44 	bl	8007b38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80064b0:	4b2d      	ldr	r3, [pc, #180]	@ (8006568 <prvAddNewTaskToReadyList+0xc4>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	3301      	adds	r3, #1
 80064b6:	4a2c      	ldr	r2, [pc, #176]	@ (8006568 <prvAddNewTaskToReadyList+0xc4>)
 80064b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80064ba:	4b2c      	ldr	r3, [pc, #176]	@ (800656c <prvAddNewTaskToReadyList+0xc8>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d109      	bne.n	80064d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80064c2:	4a2a      	ldr	r2, [pc, #168]	@ (800656c <prvAddNewTaskToReadyList+0xc8>)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80064c8:	4b27      	ldr	r3, [pc, #156]	@ (8006568 <prvAddNewTaskToReadyList+0xc4>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d110      	bne.n	80064f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80064d0:	f000 fd02 	bl	8006ed8 <prvInitialiseTaskLists>
 80064d4:	e00d      	b.n	80064f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80064d6:	4b26      	ldr	r3, [pc, #152]	@ (8006570 <prvAddNewTaskToReadyList+0xcc>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d109      	bne.n	80064f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80064de:	4b23      	ldr	r3, [pc, #140]	@ (800656c <prvAddNewTaskToReadyList+0xc8>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d802      	bhi.n	80064f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80064ec:	4a1f      	ldr	r2, [pc, #124]	@ (800656c <prvAddNewTaskToReadyList+0xc8>)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80064f2:	4b20      	ldr	r3, [pc, #128]	@ (8006574 <prvAddNewTaskToReadyList+0xd0>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	3301      	adds	r3, #1
 80064f8:	4a1e      	ldr	r2, [pc, #120]	@ (8006574 <prvAddNewTaskToReadyList+0xd0>)
 80064fa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80064fc:	4b1d      	ldr	r3, [pc, #116]	@ (8006574 <prvAddNewTaskToReadyList+0xd0>)
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006508:	4b1b      	ldr	r3, [pc, #108]	@ (8006578 <prvAddNewTaskToReadyList+0xd4>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	429a      	cmp	r2, r3
 800650e:	d903      	bls.n	8006518 <prvAddNewTaskToReadyList+0x74>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006514:	4a18      	ldr	r2, [pc, #96]	@ (8006578 <prvAddNewTaskToReadyList+0xd4>)
 8006516:	6013      	str	r3, [r2, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800651c:	4613      	mov	r3, r2
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	4413      	add	r3, r2
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	4a15      	ldr	r2, [pc, #84]	@ (800657c <prvAddNewTaskToReadyList+0xd8>)
 8006526:	441a      	add	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	3304      	adds	r3, #4
 800652c:	4619      	mov	r1, r3
 800652e:	4610      	mov	r0, r2
 8006530:	f7ff f825 	bl	800557e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006534:	f001 fb32 	bl	8007b9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006538:	4b0d      	ldr	r3, [pc, #52]	@ (8006570 <prvAddNewTaskToReadyList+0xcc>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00e      	beq.n	800655e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006540:	4b0a      	ldr	r3, [pc, #40]	@ (800656c <prvAddNewTaskToReadyList+0xc8>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800654a:	429a      	cmp	r2, r3
 800654c:	d207      	bcs.n	800655e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800654e:	4b0c      	ldr	r3, [pc, #48]	@ (8006580 <prvAddNewTaskToReadyList+0xdc>)
 8006550:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006554:	601a      	str	r2, [r3, #0]
 8006556:	f3bf 8f4f 	dsb	sy
 800655a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800655e:	bf00      	nop
 8006560:	3708      	adds	r7, #8
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	20001030 	.word	0x20001030
 800656c:	20000b5c 	.word	0x20000b5c
 8006570:	2000103c 	.word	0x2000103c
 8006574:	2000104c 	.word	0x2000104c
 8006578:	20001038 	.word	0x20001038
 800657c:	20000b60 	.word	0x20000b60
 8006580:	e000ed04 	.word	0xe000ed04

08006584 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800658c:	2300      	movs	r3, #0
 800658e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d018      	beq.n	80065c8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006596:	4b14      	ldr	r3, [pc, #80]	@ (80065e8 <vTaskDelay+0x64>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00b      	beq.n	80065b6 <vTaskDelay+0x32>
	__asm volatile
 800659e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a2:	f383 8811 	msr	BASEPRI, r3
 80065a6:	f3bf 8f6f 	isb	sy
 80065aa:	f3bf 8f4f 	dsb	sy
 80065ae:	60bb      	str	r3, [r7, #8]
}
 80065b0:	bf00      	nop
 80065b2:	bf00      	nop
 80065b4:	e7fd      	b.n	80065b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80065b6:	f000 f88d 	bl	80066d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80065ba:	2100      	movs	r1, #0
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 fddd 	bl	800717c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80065c2:	f000 f8cd 	bl	8006760 <xTaskResumeAll>
 80065c6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d107      	bne.n	80065de <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80065ce:	4b07      	ldr	r3, [pc, #28]	@ (80065ec <vTaskDelay+0x68>)
 80065d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065d4:	601a      	str	r2, [r3, #0]
 80065d6:	f3bf 8f4f 	dsb	sy
 80065da:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80065de:	bf00      	nop
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	20001058 	.word	0x20001058
 80065ec:	e000ed04 	.word	0xe000ed04

080065f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b08a      	sub	sp, #40	@ 0x28
 80065f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80065f6:	2300      	movs	r3, #0
 80065f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80065fa:	2300      	movs	r3, #0
 80065fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80065fe:	463a      	mov	r2, r7
 8006600:	1d39      	adds	r1, r7, #4
 8006602:	f107 0308 	add.w	r3, r7, #8
 8006606:	4618      	mov	r0, r3
 8006608:	f7fe ff58 	bl	80054bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800660c:	6839      	ldr	r1, [r7, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	9202      	str	r2, [sp, #8]
 8006614:	9301      	str	r3, [sp, #4]
 8006616:	2300      	movs	r3, #0
 8006618:	9300      	str	r3, [sp, #0]
 800661a:	2300      	movs	r3, #0
 800661c:	460a      	mov	r2, r1
 800661e:	4925      	ldr	r1, [pc, #148]	@ (80066b4 <vTaskStartScheduler+0xc4>)
 8006620:	4825      	ldr	r0, [pc, #148]	@ (80066b8 <vTaskStartScheduler+0xc8>)
 8006622:	f7ff fdeb 	bl	80061fc <xTaskCreateStatic>
 8006626:	4603      	mov	r3, r0
 8006628:	4a24      	ldr	r2, [pc, #144]	@ (80066bc <vTaskStartScheduler+0xcc>)
 800662a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800662c:	4b23      	ldr	r3, [pc, #140]	@ (80066bc <vTaskStartScheduler+0xcc>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d002      	beq.n	800663a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006634:	2301      	movs	r3, #1
 8006636:	617b      	str	r3, [r7, #20]
 8006638:	e001      	b.n	800663e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800663a:	2300      	movs	r3, #0
 800663c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	2b01      	cmp	r3, #1
 8006642:	d102      	bne.n	800664a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006644:	f000 fdee 	bl	8007224 <xTimerCreateTimerTask>
 8006648:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d11d      	bne.n	800668c <vTaskStartScheduler+0x9c>
	__asm volatile
 8006650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006654:	f383 8811 	msr	BASEPRI, r3
 8006658:	f3bf 8f6f 	isb	sy
 800665c:	f3bf 8f4f 	dsb	sy
 8006660:	613b      	str	r3, [r7, #16]
}
 8006662:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006664:	4b16      	ldr	r3, [pc, #88]	@ (80066c0 <vTaskStartScheduler+0xd0>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	335c      	adds	r3, #92	@ 0x5c
 800666a:	4a16      	ldr	r2, [pc, #88]	@ (80066c4 <vTaskStartScheduler+0xd4>)
 800666c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800666e:	4b16      	ldr	r3, [pc, #88]	@ (80066c8 <vTaskStartScheduler+0xd8>)
 8006670:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006674:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006676:	4b15      	ldr	r3, [pc, #84]	@ (80066cc <vTaskStartScheduler+0xdc>)
 8006678:	2201      	movs	r2, #1
 800667a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800667c:	4b14      	ldr	r3, [pc, #80]	@ (80066d0 <vTaskStartScheduler+0xe0>)
 800667e:	2200      	movs	r2, #0
 8006680:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8006682:	f7fa f8cd 	bl	8000820 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006686:	f001 f9b3 	bl	80079f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800668a:	e00f      	b.n	80066ac <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006692:	d10b      	bne.n	80066ac <vTaskStartScheduler+0xbc>
	__asm volatile
 8006694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006698:	f383 8811 	msr	BASEPRI, r3
 800669c:	f3bf 8f6f 	isb	sy
 80066a0:	f3bf 8f4f 	dsb	sy
 80066a4:	60fb      	str	r3, [r7, #12]
}
 80066a6:	bf00      	nop
 80066a8:	bf00      	nop
 80066aa:	e7fd      	b.n	80066a8 <vTaskStartScheduler+0xb8>
}
 80066ac:	bf00      	nop
 80066ae:	3718      	adds	r7, #24
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	08008588 	.word	0x08008588
 80066b8:	08006dfd 	.word	0x08006dfd
 80066bc:	20001054 	.word	0x20001054
 80066c0:	20000b5c 	.word	0x20000b5c
 80066c4:	20000020 	.word	0x20000020
 80066c8:	20001050 	.word	0x20001050
 80066cc:	2000103c 	.word	0x2000103c
 80066d0:	20001034 	.word	0x20001034

080066d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80066d4:	b480      	push	{r7}
 80066d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80066d8:	4b04      	ldr	r3, [pc, #16]	@ (80066ec <vTaskSuspendAll+0x18>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	3301      	adds	r3, #1
 80066de:	4a03      	ldr	r2, [pc, #12]	@ (80066ec <vTaskSuspendAll+0x18>)
 80066e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80066e2:	bf00      	nop
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr
 80066ec:	20001058 	.word	0x20001058

080066f0 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 80066f6:	2300      	movs	r3, #0
 80066f8:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 80066fa:	4b14      	ldr	r3, [pc, #80]	@ (800674c <prvGetExpectedIdleTime+0x5c>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d001      	beq.n	8006706 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 8006702:	2301      	movs	r3, #1
 8006704:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8006706:	4b12      	ldr	r3, [pc, #72]	@ (8006750 <prvGetExpectedIdleTime+0x60>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800670c:	2b00      	cmp	r3, #0
 800670e:	d002      	beq.n	8006716 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 8006710:	2300      	movs	r3, #0
 8006712:	607b      	str	r3, [r7, #4]
 8006714:	e012      	b.n	800673c <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8006716:	4b0f      	ldr	r3, [pc, #60]	@ (8006754 <prvGetExpectedIdleTime+0x64>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2b01      	cmp	r3, #1
 800671c:	d902      	bls.n	8006724 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800671e:	2300      	movs	r3, #0
 8006720:	607b      	str	r3, [r7, #4]
 8006722:	e00b      	b.n	800673c <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d002      	beq.n	8006730 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800672a:	2300      	movs	r3, #0
 800672c:	607b      	str	r3, [r7, #4]
 800672e:	e005      	b.n	800673c <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8006730:	4b09      	ldr	r3, [pc, #36]	@ (8006758 <prvGetExpectedIdleTime+0x68>)
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	4b09      	ldr	r3, [pc, #36]	@ (800675c <prvGetExpectedIdleTime+0x6c>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800673c:	687b      	ldr	r3, [r7, #4]
	}
 800673e:	4618      	mov	r0, r3
 8006740:	370c      	adds	r7, #12
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	20001038 	.word	0x20001038
 8006750:	20000b5c 	.word	0x20000b5c
 8006754:	20000b60 	.word	0x20000b60
 8006758:	20001050 	.word	0x20001050
 800675c:	20001034 	.word	0x20001034

08006760 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006766:	2300      	movs	r3, #0
 8006768:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800676a:	2300      	movs	r3, #0
 800676c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800676e:	4b42      	ldr	r3, [pc, #264]	@ (8006878 <xTaskResumeAll+0x118>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10b      	bne.n	800678e <xTaskResumeAll+0x2e>
	__asm volatile
 8006776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800677a:	f383 8811 	msr	BASEPRI, r3
 800677e:	f3bf 8f6f 	isb	sy
 8006782:	f3bf 8f4f 	dsb	sy
 8006786:	603b      	str	r3, [r7, #0]
}
 8006788:	bf00      	nop
 800678a:	bf00      	nop
 800678c:	e7fd      	b.n	800678a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800678e:	f001 f9d3 	bl	8007b38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006792:	4b39      	ldr	r3, [pc, #228]	@ (8006878 <xTaskResumeAll+0x118>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	3b01      	subs	r3, #1
 8006798:	4a37      	ldr	r2, [pc, #220]	@ (8006878 <xTaskResumeAll+0x118>)
 800679a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800679c:	4b36      	ldr	r3, [pc, #216]	@ (8006878 <xTaskResumeAll+0x118>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d162      	bne.n	800686a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80067a4:	4b35      	ldr	r3, [pc, #212]	@ (800687c <xTaskResumeAll+0x11c>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d05e      	beq.n	800686a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80067ac:	e02f      	b.n	800680e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067ae:	4b34      	ldr	r3, [pc, #208]	@ (8006880 <xTaskResumeAll+0x120>)
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	3318      	adds	r3, #24
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7fe ff3c 	bl	8005638 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	3304      	adds	r3, #4
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7fe ff37 	bl	8005638 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067ce:	4b2d      	ldr	r3, [pc, #180]	@ (8006884 <xTaskResumeAll+0x124>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d903      	bls.n	80067de <xTaskResumeAll+0x7e>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067da:	4a2a      	ldr	r2, [pc, #168]	@ (8006884 <xTaskResumeAll+0x124>)
 80067dc:	6013      	str	r3, [r2, #0]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067e2:	4613      	mov	r3, r2
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	4413      	add	r3, r2
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	4a27      	ldr	r2, [pc, #156]	@ (8006888 <xTaskResumeAll+0x128>)
 80067ec:	441a      	add	r2, r3
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	3304      	adds	r3, #4
 80067f2:	4619      	mov	r1, r3
 80067f4:	4610      	mov	r0, r2
 80067f6:	f7fe fec2 	bl	800557e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067fe:	4b23      	ldr	r3, [pc, #140]	@ (800688c <xTaskResumeAll+0x12c>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006804:	429a      	cmp	r2, r3
 8006806:	d302      	bcc.n	800680e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006808:	4b21      	ldr	r3, [pc, #132]	@ (8006890 <xTaskResumeAll+0x130>)
 800680a:	2201      	movs	r2, #1
 800680c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800680e:	4b1c      	ldr	r3, [pc, #112]	@ (8006880 <xTaskResumeAll+0x120>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1cb      	bne.n	80067ae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d001      	beq.n	8006820 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800681c:	f000 fc00 	bl	8007020 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006820:	4b1c      	ldr	r3, [pc, #112]	@ (8006894 <xTaskResumeAll+0x134>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d010      	beq.n	800684e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800682c:	f000 f86e 	bl	800690c <xTaskIncrementTick>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d002      	beq.n	800683c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006836:	4b16      	ldr	r3, [pc, #88]	@ (8006890 <xTaskResumeAll+0x130>)
 8006838:	2201      	movs	r2, #1
 800683a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	3b01      	subs	r3, #1
 8006840:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d1f1      	bne.n	800682c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006848:	4b12      	ldr	r3, [pc, #72]	@ (8006894 <xTaskResumeAll+0x134>)
 800684a:	2200      	movs	r2, #0
 800684c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800684e:	4b10      	ldr	r3, [pc, #64]	@ (8006890 <xTaskResumeAll+0x130>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d009      	beq.n	800686a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006856:	2301      	movs	r3, #1
 8006858:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800685a:	4b0f      	ldr	r3, [pc, #60]	@ (8006898 <xTaskResumeAll+0x138>)
 800685c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006860:	601a      	str	r2, [r3, #0]
 8006862:	f3bf 8f4f 	dsb	sy
 8006866:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800686a:	f001 f997 	bl	8007b9c <vPortExitCritical>

	return xAlreadyYielded;
 800686e:	68bb      	ldr	r3, [r7, #8]
}
 8006870:	4618      	mov	r0, r3
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}
 8006878:	20001058 	.word	0x20001058
 800687c:	20001030 	.word	0x20001030
 8006880:	20000ff0 	.word	0x20000ff0
 8006884:	20001038 	.word	0x20001038
 8006888:	20000b60 	.word	0x20000b60
 800688c:	20000b5c 	.word	0x20000b5c
 8006890:	20001044 	.word	0x20001044
 8006894:	20001040 	.word	0x20001040
 8006898:	e000ed04 	.word	0xe000ed04

0800689c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80068a2:	4b05      	ldr	r3, [pc, #20]	@ (80068b8 <xTaskGetTickCount+0x1c>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80068a8:	687b      	ldr	r3, [r7, #4]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	370c      	adds	r7, #12
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	20001034 	.word	0x20001034

080068bc <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 80068bc:	b480      	push	{r7}
 80068be:	b085      	sub	sp, #20
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 80068c4:	4b0f      	ldr	r3, [pc, #60]	@ (8006904 <vTaskStepTick+0x48>)
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	441a      	add	r2, r3
 80068cc:	4b0e      	ldr	r3, [pc, #56]	@ (8006908 <vTaskStepTick+0x4c>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d90b      	bls.n	80068ec <vTaskStepTick+0x30>
	__asm volatile
 80068d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d8:	f383 8811 	msr	BASEPRI, r3
 80068dc:	f3bf 8f6f 	isb	sy
 80068e0:	f3bf 8f4f 	dsb	sy
 80068e4:	60fb      	str	r3, [r7, #12]
}
 80068e6:	bf00      	nop
 80068e8:	bf00      	nop
 80068ea:	e7fd      	b.n	80068e8 <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 80068ec:	4b05      	ldr	r3, [pc, #20]	@ (8006904 <vTaskStepTick+0x48>)
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4413      	add	r3, r2
 80068f4:	4a03      	ldr	r2, [pc, #12]	@ (8006904 <vTaskStepTick+0x48>)
 80068f6:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 80068f8:	bf00      	nop
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr
 8006904:	20001034 	.word	0x20001034
 8006908:	20001050 	.word	0x20001050

0800690c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b086      	sub	sp, #24
 8006910:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006912:	2300      	movs	r3, #0
 8006914:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006916:	4b4f      	ldr	r3, [pc, #316]	@ (8006a54 <xTaskIncrementTick+0x148>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	f040 8090 	bne.w	8006a40 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006920:	4b4d      	ldr	r3, [pc, #308]	@ (8006a58 <xTaskIncrementTick+0x14c>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	3301      	adds	r3, #1
 8006926:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006928:	4a4b      	ldr	r2, [pc, #300]	@ (8006a58 <xTaskIncrementTick+0x14c>)
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d121      	bne.n	8006978 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006934:	4b49      	ldr	r3, [pc, #292]	@ (8006a5c <xTaskIncrementTick+0x150>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00b      	beq.n	8006956 <xTaskIncrementTick+0x4a>
	__asm volatile
 800693e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	603b      	str	r3, [r7, #0]
}
 8006950:	bf00      	nop
 8006952:	bf00      	nop
 8006954:	e7fd      	b.n	8006952 <xTaskIncrementTick+0x46>
 8006956:	4b41      	ldr	r3, [pc, #260]	@ (8006a5c <xTaskIncrementTick+0x150>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	60fb      	str	r3, [r7, #12]
 800695c:	4b40      	ldr	r3, [pc, #256]	@ (8006a60 <xTaskIncrementTick+0x154>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a3e      	ldr	r2, [pc, #248]	@ (8006a5c <xTaskIncrementTick+0x150>)
 8006962:	6013      	str	r3, [r2, #0]
 8006964:	4a3e      	ldr	r2, [pc, #248]	@ (8006a60 <xTaskIncrementTick+0x154>)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6013      	str	r3, [r2, #0]
 800696a:	4b3e      	ldr	r3, [pc, #248]	@ (8006a64 <xTaskIncrementTick+0x158>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	3301      	adds	r3, #1
 8006970:	4a3c      	ldr	r2, [pc, #240]	@ (8006a64 <xTaskIncrementTick+0x158>)
 8006972:	6013      	str	r3, [r2, #0]
 8006974:	f000 fb54 	bl	8007020 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006978:	4b3b      	ldr	r3, [pc, #236]	@ (8006a68 <xTaskIncrementTick+0x15c>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	693a      	ldr	r2, [r7, #16]
 800697e:	429a      	cmp	r2, r3
 8006980:	d349      	bcc.n	8006a16 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006982:	4b36      	ldr	r3, [pc, #216]	@ (8006a5c <xTaskIncrementTick+0x150>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d104      	bne.n	8006996 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800698c:	4b36      	ldr	r3, [pc, #216]	@ (8006a68 <xTaskIncrementTick+0x15c>)
 800698e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006992:	601a      	str	r2, [r3, #0]
					break;
 8006994:	e03f      	b.n	8006a16 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006996:	4b31      	ldr	r3, [pc, #196]	@ (8006a5c <xTaskIncrementTick+0x150>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80069a6:	693a      	ldr	r2, [r7, #16]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d203      	bcs.n	80069b6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80069ae:	4a2e      	ldr	r2, [pc, #184]	@ (8006a68 <xTaskIncrementTick+0x15c>)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80069b4:	e02f      	b.n	8006a16 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	3304      	adds	r3, #4
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7fe fe3c 	bl	8005638 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d004      	beq.n	80069d2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	3318      	adds	r3, #24
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7fe fe33 	bl	8005638 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069d6:	4b25      	ldr	r3, [pc, #148]	@ (8006a6c <xTaskIncrementTick+0x160>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d903      	bls.n	80069e6 <xTaskIncrementTick+0xda>
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e2:	4a22      	ldr	r2, [pc, #136]	@ (8006a6c <xTaskIncrementTick+0x160>)
 80069e4:	6013      	str	r3, [r2, #0]
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069ea:	4613      	mov	r3, r2
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4413      	add	r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	4a1f      	ldr	r2, [pc, #124]	@ (8006a70 <xTaskIncrementTick+0x164>)
 80069f4:	441a      	add	r2, r3
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	3304      	adds	r3, #4
 80069fa:	4619      	mov	r1, r3
 80069fc:	4610      	mov	r0, r2
 80069fe:	f7fe fdbe 	bl	800557e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a06:	4b1b      	ldr	r3, [pc, #108]	@ (8006a74 <xTaskIncrementTick+0x168>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d3b8      	bcc.n	8006982 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006a10:	2301      	movs	r3, #1
 8006a12:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a14:	e7b5      	b.n	8006982 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a16:	4b17      	ldr	r3, [pc, #92]	@ (8006a74 <xTaskIncrementTick+0x168>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a1c:	4914      	ldr	r1, [pc, #80]	@ (8006a70 <xTaskIncrementTick+0x164>)
 8006a1e:	4613      	mov	r3, r2
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	4413      	add	r3, r2
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	440b      	add	r3, r1
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d901      	bls.n	8006a32 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006a32:	4b11      	ldr	r3, [pc, #68]	@ (8006a78 <xTaskIncrementTick+0x16c>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d007      	beq.n	8006a4a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	617b      	str	r3, [r7, #20]
 8006a3e:	e004      	b.n	8006a4a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006a40:	4b0e      	ldr	r3, [pc, #56]	@ (8006a7c <xTaskIncrementTick+0x170>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	3301      	adds	r3, #1
 8006a46:	4a0d      	ldr	r2, [pc, #52]	@ (8006a7c <xTaskIncrementTick+0x170>)
 8006a48:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006a4a:	697b      	ldr	r3, [r7, #20]
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3718      	adds	r7, #24
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	20001058 	.word	0x20001058
 8006a58:	20001034 	.word	0x20001034
 8006a5c:	20000fe8 	.word	0x20000fe8
 8006a60:	20000fec 	.word	0x20000fec
 8006a64:	20001048 	.word	0x20001048
 8006a68:	20001050 	.word	0x20001050
 8006a6c:	20001038 	.word	0x20001038
 8006a70:	20000b60 	.word	0x20000b60
 8006a74:	20000b5c 	.word	0x20000b5c
 8006a78:	20001044 	.word	0x20001044
 8006a7c:	20001040 	.word	0x20001040

08006a80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006a86:	4b36      	ldr	r3, [pc, #216]	@ (8006b60 <vTaskSwitchContext+0xe0>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d003      	beq.n	8006a96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006a8e:	4b35      	ldr	r3, [pc, #212]	@ (8006b64 <vTaskSwitchContext+0xe4>)
 8006a90:	2201      	movs	r2, #1
 8006a92:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006a94:	e060      	b.n	8006b58 <vTaskSwitchContext+0xd8>
		xYieldPending = pdFALSE;
 8006a96:	4b33      	ldr	r3, [pc, #204]	@ (8006b64 <vTaskSwitchContext+0xe4>)
 8006a98:	2200      	movs	r2, #0
 8006a9a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8006a9c:	f7f9 feca 	bl	8000834 <getRunTimeCounterValue>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	4a31      	ldr	r2, [pc, #196]	@ (8006b68 <vTaskSwitchContext+0xe8>)
 8006aa4:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8006aa6:	4b30      	ldr	r3, [pc, #192]	@ (8006b68 <vTaskSwitchContext+0xe8>)
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	4b30      	ldr	r3, [pc, #192]	@ (8006b6c <vTaskSwitchContext+0xec>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d909      	bls.n	8006ac6 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8006ab2:	4b2f      	ldr	r3, [pc, #188]	@ (8006b70 <vTaskSwitchContext+0xf0>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8006ab8:	4a2b      	ldr	r2, [pc, #172]	@ (8006b68 <vTaskSwitchContext+0xe8>)
 8006aba:	6810      	ldr	r0, [r2, #0]
 8006abc:	4a2b      	ldr	r2, [pc, #172]	@ (8006b6c <vTaskSwitchContext+0xec>)
 8006abe:	6812      	ldr	r2, [r2, #0]
 8006ac0:	1a82      	subs	r2, r0, r2
 8006ac2:	440a      	add	r2, r1
 8006ac4:	659a      	str	r2, [r3, #88]	@ 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8006ac6:	4b28      	ldr	r3, [pc, #160]	@ (8006b68 <vTaskSwitchContext+0xe8>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a28      	ldr	r2, [pc, #160]	@ (8006b6c <vTaskSwitchContext+0xec>)
 8006acc:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ace:	4b29      	ldr	r3, [pc, #164]	@ (8006b74 <vTaskSwitchContext+0xf4>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	60fb      	str	r3, [r7, #12]
 8006ad4:	e011      	b.n	8006afa <vTaskSwitchContext+0x7a>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d10b      	bne.n	8006af4 <vTaskSwitchContext+0x74>
	__asm volatile
 8006adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ae0:	f383 8811 	msr	BASEPRI, r3
 8006ae4:	f3bf 8f6f 	isb	sy
 8006ae8:	f3bf 8f4f 	dsb	sy
 8006aec:	607b      	str	r3, [r7, #4]
}
 8006aee:	bf00      	nop
 8006af0:	bf00      	nop
 8006af2:	e7fd      	b.n	8006af0 <vTaskSwitchContext+0x70>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	3b01      	subs	r3, #1
 8006af8:	60fb      	str	r3, [r7, #12]
 8006afa:	491f      	ldr	r1, [pc, #124]	@ (8006b78 <vTaskSwitchContext+0xf8>)
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	4613      	mov	r3, r2
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	4413      	add	r3, r2
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	440b      	add	r3, r1
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d0e3      	beq.n	8006ad6 <vTaskSwitchContext+0x56>
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	4613      	mov	r3, r2
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	4413      	add	r3, r2
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	4a17      	ldr	r2, [pc, #92]	@ (8006b78 <vTaskSwitchContext+0xf8>)
 8006b1a:	4413      	add	r3, r2
 8006b1c:	60bb      	str	r3, [r7, #8]
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	685a      	ldr	r2, [r3, #4]
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	605a      	str	r2, [r3, #4]
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	685a      	ldr	r2, [r3, #4]
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	3308      	adds	r3, #8
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d104      	bne.n	8006b3e <vTaskSwitchContext+0xbe>
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	685a      	ldr	r2, [r3, #4]
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	605a      	str	r2, [r3, #4]
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	4a0a      	ldr	r2, [pc, #40]	@ (8006b70 <vTaskSwitchContext+0xf0>)
 8006b46:	6013      	str	r3, [r2, #0]
 8006b48:	4a0a      	ldr	r2, [pc, #40]	@ (8006b74 <vTaskSwitchContext+0xf4>)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006b4e:	4b08      	ldr	r3, [pc, #32]	@ (8006b70 <vTaskSwitchContext+0xf0>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	335c      	adds	r3, #92	@ 0x5c
 8006b54:	4a09      	ldr	r2, [pc, #36]	@ (8006b7c <vTaskSwitchContext+0xfc>)
 8006b56:	6013      	str	r3, [r2, #0]
}
 8006b58:	bf00      	nop
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	20001058 	.word	0x20001058
 8006b64:	20001044 	.word	0x20001044
 8006b68:	20001060 	.word	0x20001060
 8006b6c:	2000105c 	.word	0x2000105c
 8006b70:	20000b5c 	.word	0x20000b5c
 8006b74:	20001038 	.word	0x20001038
 8006b78:	20000b60 	.word	0x20000b60
 8006b7c:	20000020 	.word	0x20000020

08006b80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d10b      	bne.n	8006ba8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b94:	f383 8811 	msr	BASEPRI, r3
 8006b98:	f3bf 8f6f 	isb	sy
 8006b9c:	f3bf 8f4f 	dsb	sy
 8006ba0:	60fb      	str	r3, [r7, #12]
}
 8006ba2:	bf00      	nop
 8006ba4:	bf00      	nop
 8006ba6:	e7fd      	b.n	8006ba4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ba8:	4b07      	ldr	r3, [pc, #28]	@ (8006bc8 <vTaskPlaceOnEventList+0x48>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	3318      	adds	r3, #24
 8006bae:	4619      	mov	r1, r3
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f7fe fd08 	bl	80055c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006bb6:	2101      	movs	r1, #1
 8006bb8:	6838      	ldr	r0, [r7, #0]
 8006bba:	f000 fadf 	bl	800717c <prvAddCurrentTaskToDelayedList>
}
 8006bbe:	bf00      	nop
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	20000b5c 	.word	0x20000b5c

08006bcc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b086      	sub	sp, #24
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d10b      	bne.n	8006bf6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006be2:	f383 8811 	msr	BASEPRI, r3
 8006be6:	f3bf 8f6f 	isb	sy
 8006bea:	f3bf 8f4f 	dsb	sy
 8006bee:	617b      	str	r3, [r7, #20]
}
 8006bf0:	bf00      	nop
 8006bf2:	bf00      	nop
 8006bf4:	e7fd      	b.n	8006bf2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8006c20 <vTaskPlaceOnEventListRestricted+0x54>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	3318      	adds	r3, #24
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f7fe fcbd 	bl	800557e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d002      	beq.n	8006c10 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006c0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006c0e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006c10:	6879      	ldr	r1, [r7, #4]
 8006c12:	68b8      	ldr	r0, [r7, #8]
 8006c14:	f000 fab2 	bl	800717c <prvAddCurrentTaskToDelayedList>
	}
 8006c18:	bf00      	nop
 8006c1a:	3718      	adds	r7, #24
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	20000b5c 	.word	0x20000b5c

08006c24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b086      	sub	sp, #24
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d10b      	bne.n	8006c52 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c3e:	f383 8811 	msr	BASEPRI, r3
 8006c42:	f3bf 8f6f 	isb	sy
 8006c46:	f3bf 8f4f 	dsb	sy
 8006c4a:	60fb      	str	r3, [r7, #12]
}
 8006c4c:	bf00      	nop
 8006c4e:	bf00      	nop
 8006c50:	e7fd      	b.n	8006c4e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	3318      	adds	r3, #24
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7fe fcee 	bl	8005638 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c5c:	4b1e      	ldr	r3, [pc, #120]	@ (8006cd8 <xTaskRemoveFromEventList+0xb4>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d11f      	bne.n	8006ca4 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	3304      	adds	r3, #4
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f7fe fce5 	bl	8005638 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c72:	4b1a      	ldr	r3, [pc, #104]	@ (8006cdc <xTaskRemoveFromEventList+0xb8>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d903      	bls.n	8006c82 <xTaskRemoveFromEventList+0x5e>
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c7e:	4a17      	ldr	r2, [pc, #92]	@ (8006cdc <xTaskRemoveFromEventList+0xb8>)
 8006c80:	6013      	str	r3, [r2, #0]
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c86:	4613      	mov	r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4413      	add	r3, r2
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	4a14      	ldr	r2, [pc, #80]	@ (8006ce0 <xTaskRemoveFromEventList+0xbc>)
 8006c90:	441a      	add	r2, r3
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	3304      	adds	r3, #4
 8006c96:	4619      	mov	r1, r3
 8006c98:	4610      	mov	r0, r2
 8006c9a:	f7fe fc70 	bl	800557e <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 8006c9e:	f000 f9bf 	bl	8007020 <prvResetNextTaskUnblockTime>
 8006ca2:	e005      	b.n	8006cb0 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	3318      	adds	r3, #24
 8006ca8:	4619      	mov	r1, r3
 8006caa:	480e      	ldr	r0, [pc, #56]	@ (8006ce4 <xTaskRemoveFromEventList+0xc0>)
 8006cac:	f7fe fc67 	bl	800557e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8006ce8 <xTaskRemoveFromEventList+0xc4>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d905      	bls.n	8006cca <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8006cec <xTaskRemoveFromEventList+0xc8>)
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	601a      	str	r2, [r3, #0]
 8006cc8:	e001      	b.n	8006cce <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006cce:	697b      	ldr	r3, [r7, #20]
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3718      	adds	r7, #24
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	20001058 	.word	0x20001058
 8006cdc:	20001038 	.word	0x20001038
 8006ce0:	20000b60 	.word	0x20000b60
 8006ce4:	20000ff0 	.word	0x20000ff0
 8006ce8:	20000b5c 	.word	0x20000b5c
 8006cec:	20001044 	.word	0x20001044

08006cf0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006cf8:	4b06      	ldr	r3, [pc, #24]	@ (8006d14 <vTaskInternalSetTimeOutState+0x24>)
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006d00:	4b05      	ldr	r3, [pc, #20]	@ (8006d18 <vTaskInternalSetTimeOutState+0x28>)
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	605a      	str	r2, [r3, #4]
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr
 8006d14:	20001048 	.word	0x20001048
 8006d18:	20001034 	.word	0x20001034

08006d1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b088      	sub	sp, #32
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d10b      	bne.n	8006d44 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d30:	f383 8811 	msr	BASEPRI, r3
 8006d34:	f3bf 8f6f 	isb	sy
 8006d38:	f3bf 8f4f 	dsb	sy
 8006d3c:	613b      	str	r3, [r7, #16]
}
 8006d3e:	bf00      	nop
 8006d40:	bf00      	nop
 8006d42:	e7fd      	b.n	8006d40 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d10b      	bne.n	8006d62 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d4e:	f383 8811 	msr	BASEPRI, r3
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	60fb      	str	r3, [r7, #12]
}
 8006d5c:	bf00      	nop
 8006d5e:	bf00      	nop
 8006d60:	e7fd      	b.n	8006d5e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006d62:	f000 fee9 	bl	8007b38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006d66:	4b1d      	ldr	r3, [pc, #116]	@ (8006ddc <xTaskCheckForTimeOut+0xc0>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	69ba      	ldr	r2, [r7, #24]
 8006d72:	1ad3      	subs	r3, r2, r3
 8006d74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d7e:	d102      	bne.n	8006d86 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006d80:	2300      	movs	r3, #0
 8006d82:	61fb      	str	r3, [r7, #28]
 8006d84:	e023      	b.n	8006dce <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	4b15      	ldr	r3, [pc, #84]	@ (8006de0 <xTaskCheckForTimeOut+0xc4>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d007      	beq.n	8006da2 <xTaskCheckForTimeOut+0x86>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	69ba      	ldr	r2, [r7, #24]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d302      	bcc.n	8006da2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	61fb      	str	r3, [r7, #28]
 8006da0:	e015      	b.n	8006dce <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d20b      	bcs.n	8006dc4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	1ad2      	subs	r2, r2, r3
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f7ff ff99 	bl	8006cf0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	61fb      	str	r3, [r7, #28]
 8006dc2:	e004      	b.n	8006dce <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006dce:	f000 fee5 	bl	8007b9c <vPortExitCritical>

	return xReturn;
 8006dd2:	69fb      	ldr	r3, [r7, #28]
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3720      	adds	r7, #32
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	20001034 	.word	0x20001034
 8006de0:	20001048 	.word	0x20001048

08006de4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006de4:	b480      	push	{r7}
 8006de6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006de8:	4b03      	ldr	r3, [pc, #12]	@ (8006df8 <vTaskMissedYield+0x14>)
 8006dea:	2201      	movs	r2, #1
 8006dec:	601a      	str	r2, [r3, #0]
}
 8006dee:	bf00      	nop
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr
 8006df8:	20001044 	.word	0x20001044

08006dfc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006e04:	f000 f8a8 	bl	8006f58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006e08:	4b18      	ldr	r3, [pc, #96]	@ (8006e6c <prvIdleTask+0x70>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d907      	bls.n	8006e20 <prvIdleTask+0x24>
			{
				taskYIELD();
 8006e10:	4b17      	ldr	r3, [pc, #92]	@ (8006e70 <prvIdleTask+0x74>)
 8006e12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e16:	601a      	str	r2, [r3, #0]
 8006e18:	f3bf 8f4f 	dsb	sy
 8006e1c:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8006e20:	f7ff fc66 	bl	80066f0 <prvGetExpectedIdleTime>
 8006e24:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d9eb      	bls.n	8006e04 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8006e2c:	f7ff fc52 	bl	80066d4 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8006e30:	4b10      	ldr	r3, [pc, #64]	@ (8006e74 <prvIdleTask+0x78>)
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	4b10      	ldr	r3, [pc, #64]	@ (8006e78 <prvIdleTask+0x7c>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d20b      	bcs.n	8006e54 <prvIdleTask+0x58>
	__asm volatile
 8006e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e40:	f383 8811 	msr	BASEPRI, r3
 8006e44:	f3bf 8f6f 	isb	sy
 8006e48:	f3bf 8f4f 	dsb	sy
 8006e4c:	60bb      	str	r3, [r7, #8]
}
 8006e4e:	bf00      	nop
 8006e50:	bf00      	nop
 8006e52:	e7fd      	b.n	8006e50 <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8006e54:	f7ff fc4c 	bl	80066f0 <prvGetExpectedIdleTime>
 8006e58:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d902      	bls.n	8006e66 <prvIdleTask+0x6a>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f000 ff1b 	bl	8007c9c <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 8006e66:	f7ff fc7b 	bl	8006760 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 8006e6a:	e7cb      	b.n	8006e04 <prvIdleTask+0x8>
 8006e6c:	20000b60 	.word	0x20000b60
 8006e70:	e000ed04 	.word	0xe000ed04
 8006e74:	20001050 	.word	0x20001050
 8006e78:	20001034 	.word	0x20001034

08006e7c <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 8006e82:	2301      	movs	r3, #1
 8006e84:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 8006e86:	2301      	movs	r3, #1
 8006e88:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 8006e8a:	4b0f      	ldr	r3, [pc, #60]	@ (8006ec8 <eTaskConfirmSleepModeStatus+0x4c>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d002      	beq.n	8006e98 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8006e92:	2300      	movs	r3, #0
 8006e94:	71fb      	strb	r3, [r7, #7]
 8006e96:	e010      	b.n	8006eba <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 8006e98:	4b0c      	ldr	r3, [pc, #48]	@ (8006ecc <eTaskConfirmSleepModeStatus+0x50>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d002      	beq.n	8006ea6 <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	71fb      	strb	r3, [r7, #7]
 8006ea4:	e009      	b.n	8006eba <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 8006ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8006ed0 <eTaskConfirmSleepModeStatus+0x54>)
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8006ed4 <eTaskConfirmSleepModeStatus+0x58>)
 8006eac:	6819      	ldr	r1, [r3, #0]
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	1acb      	subs	r3, r1, r3
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d101      	bne.n	8006eba <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 8006eb6:	2302      	movs	r3, #2
 8006eb8:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 8006eba:	79fb      	ldrb	r3, [r7, #7]
	}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	370c      	adds	r7, #12
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr
 8006ec8:	20000ff0 	.word	0x20000ff0
 8006ecc:	20001044 	.word	0x20001044
 8006ed0:	2000101c 	.word	0x2000101c
 8006ed4:	20001030 	.word	0x20001030

08006ed8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ede:	2300      	movs	r3, #0
 8006ee0:	607b      	str	r3, [r7, #4]
 8006ee2:	e00c      	b.n	8006efe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	4413      	add	r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	4a12      	ldr	r2, [pc, #72]	@ (8006f38 <prvInitialiseTaskLists+0x60>)
 8006ef0:	4413      	add	r3, r2
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7fe fb16 	bl	8005524 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	3301      	adds	r3, #1
 8006efc:	607b      	str	r3, [r7, #4]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2b37      	cmp	r3, #55	@ 0x37
 8006f02:	d9ef      	bls.n	8006ee4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006f04:	480d      	ldr	r0, [pc, #52]	@ (8006f3c <prvInitialiseTaskLists+0x64>)
 8006f06:	f7fe fb0d 	bl	8005524 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006f0a:	480d      	ldr	r0, [pc, #52]	@ (8006f40 <prvInitialiseTaskLists+0x68>)
 8006f0c:	f7fe fb0a 	bl	8005524 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006f10:	480c      	ldr	r0, [pc, #48]	@ (8006f44 <prvInitialiseTaskLists+0x6c>)
 8006f12:	f7fe fb07 	bl	8005524 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006f16:	480c      	ldr	r0, [pc, #48]	@ (8006f48 <prvInitialiseTaskLists+0x70>)
 8006f18:	f7fe fb04 	bl	8005524 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006f1c:	480b      	ldr	r0, [pc, #44]	@ (8006f4c <prvInitialiseTaskLists+0x74>)
 8006f1e:	f7fe fb01 	bl	8005524 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006f22:	4b0b      	ldr	r3, [pc, #44]	@ (8006f50 <prvInitialiseTaskLists+0x78>)
 8006f24:	4a05      	ldr	r2, [pc, #20]	@ (8006f3c <prvInitialiseTaskLists+0x64>)
 8006f26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006f28:	4b0a      	ldr	r3, [pc, #40]	@ (8006f54 <prvInitialiseTaskLists+0x7c>)
 8006f2a:	4a05      	ldr	r2, [pc, #20]	@ (8006f40 <prvInitialiseTaskLists+0x68>)
 8006f2c:	601a      	str	r2, [r3, #0]
}
 8006f2e:	bf00      	nop
 8006f30:	3708      	adds	r7, #8
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	20000b60 	.word	0x20000b60
 8006f3c:	20000fc0 	.word	0x20000fc0
 8006f40:	20000fd4 	.word	0x20000fd4
 8006f44:	20000ff0 	.word	0x20000ff0
 8006f48:	20001004 	.word	0x20001004
 8006f4c:	2000101c 	.word	0x2000101c
 8006f50:	20000fe8 	.word	0x20000fe8
 8006f54:	20000fec 	.word	0x20000fec

08006f58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f5e:	e019      	b.n	8006f94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006f60:	f000 fdea 	bl	8007b38 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f64:	4b10      	ldr	r3, [pc, #64]	@ (8006fa8 <prvCheckTasksWaitingTermination+0x50>)
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	3304      	adds	r3, #4
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7fe fb61 	bl	8005638 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006f76:	4b0d      	ldr	r3, [pc, #52]	@ (8006fac <prvCheckTasksWaitingTermination+0x54>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	4a0b      	ldr	r2, [pc, #44]	@ (8006fac <prvCheckTasksWaitingTermination+0x54>)
 8006f7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006f80:	4b0b      	ldr	r3, [pc, #44]	@ (8006fb0 <prvCheckTasksWaitingTermination+0x58>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	3b01      	subs	r3, #1
 8006f86:	4a0a      	ldr	r2, [pc, #40]	@ (8006fb0 <prvCheckTasksWaitingTermination+0x58>)
 8006f88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006f8a:	f000 fe07 	bl	8007b9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 f810 	bl	8006fb4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f94:	4b06      	ldr	r3, [pc, #24]	@ (8006fb0 <prvCheckTasksWaitingTermination+0x58>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d1e1      	bne.n	8006f60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006f9c:	bf00      	nop
 8006f9e:	bf00      	nop
 8006fa0:	3708      	adds	r7, #8
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	20001004 	.word	0x20001004
 8006fac:	20001030 	.word	0x20001030
 8006fb0:	20001018 	.word	0x20001018

08006fb4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	335c      	adds	r3, #92	@ 0x5c
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f001 f9b5 	bl	8008330 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d108      	bne.n	8006fe2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f001 f883 	bl	80080e0 <vPortFree>
				vPortFree( pxTCB );
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f001 f880 	bl	80080e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006fe0:	e019      	b.n	8007016 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d103      	bne.n	8006ff4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f001 f877 	bl	80080e0 <vPortFree>
	}
 8006ff2:	e010      	b.n	8007016 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	d00b      	beq.n	8007016 <prvDeleteTCB+0x62>
	__asm volatile
 8006ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007002:	f383 8811 	msr	BASEPRI, r3
 8007006:	f3bf 8f6f 	isb	sy
 800700a:	f3bf 8f4f 	dsb	sy
 800700e:	60fb      	str	r3, [r7, #12]
}
 8007010:	bf00      	nop
 8007012:	bf00      	nop
 8007014:	e7fd      	b.n	8007012 <prvDeleteTCB+0x5e>
	}
 8007016:	bf00      	nop
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
	...

08007020 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007026:	4b0c      	ldr	r3, [pc, #48]	@ (8007058 <prvResetNextTaskUnblockTime+0x38>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d104      	bne.n	800703a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007030:	4b0a      	ldr	r3, [pc, #40]	@ (800705c <prvResetNextTaskUnblockTime+0x3c>)
 8007032:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007036:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007038:	e008      	b.n	800704c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800703a:	4b07      	ldr	r3, [pc, #28]	@ (8007058 <prvResetNextTaskUnblockTime+0x38>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	4a04      	ldr	r2, [pc, #16]	@ (800705c <prvResetNextTaskUnblockTime+0x3c>)
 800704a:	6013      	str	r3, [r2, #0]
}
 800704c:	bf00      	nop
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr
 8007058:	20000fe8 	.word	0x20000fe8
 800705c:	20001050 	.word	0x20001050

08007060 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007066:	4b0b      	ldr	r3, [pc, #44]	@ (8007094 <xTaskGetSchedulerState+0x34>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d102      	bne.n	8007074 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800706e:	2301      	movs	r3, #1
 8007070:	607b      	str	r3, [r7, #4]
 8007072:	e008      	b.n	8007086 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007074:	4b08      	ldr	r3, [pc, #32]	@ (8007098 <xTaskGetSchedulerState+0x38>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d102      	bne.n	8007082 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800707c:	2302      	movs	r3, #2
 800707e:	607b      	str	r3, [r7, #4]
 8007080:	e001      	b.n	8007086 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007082:	2300      	movs	r3, #0
 8007084:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007086:	687b      	ldr	r3, [r7, #4]
	}
 8007088:	4618      	mov	r0, r3
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr
 8007094:	2000103c 	.word	0x2000103c
 8007098:	20001058 	.word	0x20001058

0800709c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800709c:	b580      	push	{r7, lr}
 800709e:	b086      	sub	sp, #24
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80070a8:	2300      	movs	r3, #0
 80070aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d058      	beq.n	8007164 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80070b2:	4b2f      	ldr	r3, [pc, #188]	@ (8007170 <xTaskPriorityDisinherit+0xd4>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d00b      	beq.n	80070d4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80070bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070c0:	f383 8811 	msr	BASEPRI, r3
 80070c4:	f3bf 8f6f 	isb	sy
 80070c8:	f3bf 8f4f 	dsb	sy
 80070cc:	60fb      	str	r3, [r7, #12]
}
 80070ce:	bf00      	nop
 80070d0:	bf00      	nop
 80070d2:	e7fd      	b.n	80070d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d10b      	bne.n	80070f4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80070dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e0:	f383 8811 	msr	BASEPRI, r3
 80070e4:	f3bf 8f6f 	isb	sy
 80070e8:	f3bf 8f4f 	dsb	sy
 80070ec:	60bb      	str	r3, [r7, #8]
}
 80070ee:	bf00      	nop
 80070f0:	bf00      	nop
 80070f2:	e7fd      	b.n	80070f0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070f8:	1e5a      	subs	r2, r3, #1
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	655a      	str	r2, [r3, #84]	@ 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007106:	429a      	cmp	r2, r3
 8007108:	d02c      	beq.n	8007164 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800710e:	2b00      	cmp	r3, #0
 8007110:	d128      	bne.n	8007164 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	3304      	adds	r3, #4
 8007116:	4618      	mov	r0, r3
 8007118:	f7fe fa8e 	bl	8005638 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007128:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007134:	4b0f      	ldr	r3, [pc, #60]	@ (8007174 <xTaskPriorityDisinherit+0xd8>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	429a      	cmp	r2, r3
 800713a:	d903      	bls.n	8007144 <xTaskPriorityDisinherit+0xa8>
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007140:	4a0c      	ldr	r2, [pc, #48]	@ (8007174 <xTaskPriorityDisinherit+0xd8>)
 8007142:	6013      	str	r3, [r2, #0]
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007148:	4613      	mov	r3, r2
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	4413      	add	r3, r2
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	4a09      	ldr	r2, [pc, #36]	@ (8007178 <xTaskPriorityDisinherit+0xdc>)
 8007152:	441a      	add	r2, r3
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	3304      	adds	r3, #4
 8007158:	4619      	mov	r1, r3
 800715a:	4610      	mov	r0, r2
 800715c:	f7fe fa0f 	bl	800557e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007160:	2301      	movs	r3, #1
 8007162:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007164:	697b      	ldr	r3, [r7, #20]
	}
 8007166:	4618      	mov	r0, r3
 8007168:	3718      	adds	r7, #24
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	20000b5c 	.word	0x20000b5c
 8007174:	20001038 	.word	0x20001038
 8007178:	20000b60 	.word	0x20000b60

0800717c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007186:	4b21      	ldr	r3, [pc, #132]	@ (800720c <prvAddCurrentTaskToDelayedList+0x90>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800718c:	4b20      	ldr	r3, [pc, #128]	@ (8007210 <prvAddCurrentTaskToDelayedList+0x94>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	3304      	adds	r3, #4
 8007192:	4618      	mov	r0, r3
 8007194:	f7fe fa50 	bl	8005638 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800719e:	d10a      	bne.n	80071b6 <prvAddCurrentTaskToDelayedList+0x3a>
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d007      	beq.n	80071b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071a6:	4b1a      	ldr	r3, [pc, #104]	@ (8007210 <prvAddCurrentTaskToDelayedList+0x94>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	3304      	adds	r3, #4
 80071ac:	4619      	mov	r1, r3
 80071ae:	4819      	ldr	r0, [pc, #100]	@ (8007214 <prvAddCurrentTaskToDelayedList+0x98>)
 80071b0:	f7fe f9e5 	bl	800557e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80071b4:	e026      	b.n	8007204 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4413      	add	r3, r2
 80071bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80071be:	4b14      	ldr	r3, [pc, #80]	@ (8007210 <prvAddCurrentTaskToDelayedList+0x94>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	68ba      	ldr	r2, [r7, #8]
 80071c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80071c6:	68ba      	ldr	r2, [r7, #8]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d209      	bcs.n	80071e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071ce:	4b12      	ldr	r3, [pc, #72]	@ (8007218 <prvAddCurrentTaskToDelayedList+0x9c>)
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	4b0f      	ldr	r3, [pc, #60]	@ (8007210 <prvAddCurrentTaskToDelayedList+0x94>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	3304      	adds	r3, #4
 80071d8:	4619      	mov	r1, r3
 80071da:	4610      	mov	r0, r2
 80071dc:	f7fe f9f3 	bl	80055c6 <vListInsert>
}
 80071e0:	e010      	b.n	8007204 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071e2:	4b0e      	ldr	r3, [pc, #56]	@ (800721c <prvAddCurrentTaskToDelayedList+0xa0>)
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	4b0a      	ldr	r3, [pc, #40]	@ (8007210 <prvAddCurrentTaskToDelayedList+0x94>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	3304      	adds	r3, #4
 80071ec:	4619      	mov	r1, r3
 80071ee:	4610      	mov	r0, r2
 80071f0:	f7fe f9e9 	bl	80055c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80071f4:	4b0a      	ldr	r3, [pc, #40]	@ (8007220 <prvAddCurrentTaskToDelayedList+0xa4>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	68ba      	ldr	r2, [r7, #8]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d202      	bcs.n	8007204 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80071fe:	4a08      	ldr	r2, [pc, #32]	@ (8007220 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	6013      	str	r3, [r2, #0]
}
 8007204:	bf00      	nop
 8007206:	3710      	adds	r7, #16
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}
 800720c:	20001034 	.word	0x20001034
 8007210:	20000b5c 	.word	0x20000b5c
 8007214:	2000101c 	.word	0x2000101c
 8007218:	20000fec 	.word	0x20000fec
 800721c:	20000fe8 	.word	0x20000fe8
 8007220:	20001050 	.word	0x20001050

08007224 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b08a      	sub	sp, #40	@ 0x28
 8007228:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800722a:	2300      	movs	r3, #0
 800722c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800722e:	f000 fb13 	bl	8007858 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007232:	4b1d      	ldr	r3, [pc, #116]	@ (80072a8 <xTimerCreateTimerTask+0x84>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d021      	beq.n	800727e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800723a:	2300      	movs	r3, #0
 800723c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800723e:	2300      	movs	r3, #0
 8007240:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007242:	1d3a      	adds	r2, r7, #4
 8007244:	f107 0108 	add.w	r1, r7, #8
 8007248:	f107 030c 	add.w	r3, r7, #12
 800724c:	4618      	mov	r0, r3
 800724e:	f7fe f94f 	bl	80054f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007252:	6879      	ldr	r1, [r7, #4]
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	68fa      	ldr	r2, [r7, #12]
 8007258:	9202      	str	r2, [sp, #8]
 800725a:	9301      	str	r3, [sp, #4]
 800725c:	2302      	movs	r3, #2
 800725e:	9300      	str	r3, [sp, #0]
 8007260:	2300      	movs	r3, #0
 8007262:	460a      	mov	r2, r1
 8007264:	4911      	ldr	r1, [pc, #68]	@ (80072ac <xTimerCreateTimerTask+0x88>)
 8007266:	4812      	ldr	r0, [pc, #72]	@ (80072b0 <xTimerCreateTimerTask+0x8c>)
 8007268:	f7fe ffc8 	bl	80061fc <xTaskCreateStatic>
 800726c:	4603      	mov	r3, r0
 800726e:	4a11      	ldr	r2, [pc, #68]	@ (80072b4 <xTimerCreateTimerTask+0x90>)
 8007270:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007272:	4b10      	ldr	r3, [pc, #64]	@ (80072b4 <xTimerCreateTimerTask+0x90>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d001      	beq.n	800727e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800727a:	2301      	movs	r3, #1
 800727c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d10b      	bne.n	800729c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007288:	f383 8811 	msr	BASEPRI, r3
 800728c:	f3bf 8f6f 	isb	sy
 8007290:	f3bf 8f4f 	dsb	sy
 8007294:	613b      	str	r3, [r7, #16]
}
 8007296:	bf00      	nop
 8007298:	bf00      	nop
 800729a:	e7fd      	b.n	8007298 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800729c:	697b      	ldr	r3, [r7, #20]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3718      	adds	r7, #24
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	20001094 	.word	0x20001094
 80072ac:	080085b8 	.word	0x080085b8
 80072b0:	080073f1 	.word	0x080073f1
 80072b4:	20001098 	.word	0x20001098

080072b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b08a      	sub	sp, #40	@ 0x28
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	607a      	str	r2, [r7, #4]
 80072c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80072c6:	2300      	movs	r3, #0
 80072c8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d10b      	bne.n	80072e8 <xTimerGenericCommand+0x30>
	__asm volatile
 80072d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d4:	f383 8811 	msr	BASEPRI, r3
 80072d8:	f3bf 8f6f 	isb	sy
 80072dc:	f3bf 8f4f 	dsb	sy
 80072e0:	623b      	str	r3, [r7, #32]
}
 80072e2:	bf00      	nop
 80072e4:	bf00      	nop
 80072e6:	e7fd      	b.n	80072e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80072e8:	4b19      	ldr	r3, [pc, #100]	@ (8007350 <xTimerGenericCommand+0x98>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d02a      	beq.n	8007346 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	2b05      	cmp	r3, #5
 8007300:	dc18      	bgt.n	8007334 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007302:	f7ff fead 	bl	8007060 <xTaskGetSchedulerState>
 8007306:	4603      	mov	r3, r0
 8007308:	2b02      	cmp	r3, #2
 800730a:	d109      	bne.n	8007320 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800730c:	4b10      	ldr	r3, [pc, #64]	@ (8007350 <xTimerGenericCommand+0x98>)
 800730e:	6818      	ldr	r0, [r3, #0]
 8007310:	f107 0110 	add.w	r1, r7, #16
 8007314:	2300      	movs	r3, #0
 8007316:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007318:	f7fe fafe 	bl	8005918 <xQueueGenericSend>
 800731c:	6278      	str	r0, [r7, #36]	@ 0x24
 800731e:	e012      	b.n	8007346 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007320:	4b0b      	ldr	r3, [pc, #44]	@ (8007350 <xTimerGenericCommand+0x98>)
 8007322:	6818      	ldr	r0, [r3, #0]
 8007324:	f107 0110 	add.w	r1, r7, #16
 8007328:	2300      	movs	r3, #0
 800732a:	2200      	movs	r2, #0
 800732c:	f7fe faf4 	bl	8005918 <xQueueGenericSend>
 8007330:	6278      	str	r0, [r7, #36]	@ 0x24
 8007332:	e008      	b.n	8007346 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007334:	4b06      	ldr	r3, [pc, #24]	@ (8007350 <xTimerGenericCommand+0x98>)
 8007336:	6818      	ldr	r0, [r3, #0]
 8007338:	f107 0110 	add.w	r1, r7, #16
 800733c:	2300      	movs	r3, #0
 800733e:	683a      	ldr	r2, [r7, #0]
 8007340:	f7fe fbec 	bl	8005b1c <xQueueGenericSendFromISR>
 8007344:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007348:	4618      	mov	r0, r3
 800734a:	3728      	adds	r7, #40	@ 0x28
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}
 8007350:	20001094 	.word	0x20001094

08007354 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b088      	sub	sp, #32
 8007358:	af02      	add	r7, sp, #8
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800735e:	4b23      	ldr	r3, [pc, #140]	@ (80073ec <prvProcessExpiredTimer+0x98>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	3304      	adds	r3, #4
 800736c:	4618      	mov	r0, r3
 800736e:	f7fe f963 	bl	8005638 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007378:	f003 0304 	and.w	r3, r3, #4
 800737c:	2b00      	cmp	r3, #0
 800737e:	d023      	beq.n	80073c8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	699a      	ldr	r2, [r3, #24]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	18d1      	adds	r1, r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	683a      	ldr	r2, [r7, #0]
 800738c:	6978      	ldr	r0, [r7, #20]
 800738e:	f000 f8d5 	bl	800753c <prvInsertTimerInActiveList>
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d020      	beq.n	80073da <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007398:	2300      	movs	r3, #0
 800739a:	9300      	str	r3, [sp, #0]
 800739c:	2300      	movs	r3, #0
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	2100      	movs	r1, #0
 80073a2:	6978      	ldr	r0, [r7, #20]
 80073a4:	f7ff ff88 	bl	80072b8 <xTimerGenericCommand>
 80073a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d114      	bne.n	80073da <prvProcessExpiredTimer+0x86>
	__asm volatile
 80073b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073b4:	f383 8811 	msr	BASEPRI, r3
 80073b8:	f3bf 8f6f 	isb	sy
 80073bc:	f3bf 8f4f 	dsb	sy
 80073c0:	60fb      	str	r3, [r7, #12]
}
 80073c2:	bf00      	nop
 80073c4:	bf00      	nop
 80073c6:	e7fd      	b.n	80073c4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80073ce:	f023 0301 	bic.w	r3, r3, #1
 80073d2:	b2da      	uxtb	r2, r3
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	6a1b      	ldr	r3, [r3, #32]
 80073de:	6978      	ldr	r0, [r7, #20]
 80073e0:	4798      	blx	r3
}
 80073e2:	bf00      	nop
 80073e4:	3718      	adds	r7, #24
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	2000108c 	.word	0x2000108c

080073f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80073f8:	f107 0308 	add.w	r3, r7, #8
 80073fc:	4618      	mov	r0, r3
 80073fe:	f000 f859 	bl	80074b4 <prvGetNextExpireTime>
 8007402:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	4619      	mov	r1, r3
 8007408:	68f8      	ldr	r0, [r7, #12]
 800740a:	f000 f805 	bl	8007418 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800740e:	f000 f8d7 	bl	80075c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007412:	bf00      	nop
 8007414:	e7f0      	b.n	80073f8 <prvTimerTask+0x8>
	...

08007418 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007422:	f7ff f957 	bl	80066d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007426:	f107 0308 	add.w	r3, r7, #8
 800742a:	4618      	mov	r0, r3
 800742c:	f000 f866 	bl	80074fc <prvSampleTimeNow>
 8007430:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d130      	bne.n	800749a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d10a      	bne.n	8007454 <prvProcessTimerOrBlockTask+0x3c>
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	429a      	cmp	r2, r3
 8007444:	d806      	bhi.n	8007454 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007446:	f7ff f98b 	bl	8006760 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800744a:	68f9      	ldr	r1, [r7, #12]
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f7ff ff81 	bl	8007354 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007452:	e024      	b.n	800749e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d008      	beq.n	800746c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800745a:	4b13      	ldr	r3, [pc, #76]	@ (80074a8 <prvProcessTimerOrBlockTask+0x90>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d101      	bne.n	8007468 <prvProcessTimerOrBlockTask+0x50>
 8007464:	2301      	movs	r3, #1
 8007466:	e000      	b.n	800746a <prvProcessTimerOrBlockTask+0x52>
 8007468:	2300      	movs	r3, #0
 800746a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800746c:	4b0f      	ldr	r3, [pc, #60]	@ (80074ac <prvProcessTimerOrBlockTask+0x94>)
 800746e:	6818      	ldr	r0, [r3, #0]
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	1ad3      	subs	r3, r2, r3
 8007476:	683a      	ldr	r2, [r7, #0]
 8007478:	4619      	mov	r1, r3
 800747a:	f7fe fe8b 	bl	8006194 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800747e:	f7ff f96f 	bl	8006760 <xTaskResumeAll>
 8007482:	4603      	mov	r3, r0
 8007484:	2b00      	cmp	r3, #0
 8007486:	d10a      	bne.n	800749e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007488:	4b09      	ldr	r3, [pc, #36]	@ (80074b0 <prvProcessTimerOrBlockTask+0x98>)
 800748a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800748e:	601a      	str	r2, [r3, #0]
 8007490:	f3bf 8f4f 	dsb	sy
 8007494:	f3bf 8f6f 	isb	sy
}
 8007498:	e001      	b.n	800749e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800749a:	f7ff f961 	bl	8006760 <xTaskResumeAll>
}
 800749e:	bf00      	nop
 80074a0:	3710      	adds	r7, #16
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	20001090 	.word	0x20001090
 80074ac:	20001094 	.word	0x20001094
 80074b0:	e000ed04 	.word	0xe000ed04

080074b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80074b4:	b480      	push	{r7}
 80074b6:	b085      	sub	sp, #20
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80074bc:	4b0e      	ldr	r3, [pc, #56]	@ (80074f8 <prvGetNextExpireTime+0x44>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d101      	bne.n	80074ca <prvGetNextExpireTime+0x16>
 80074c6:	2201      	movs	r2, #1
 80074c8:	e000      	b.n	80074cc <prvGetNextExpireTime+0x18>
 80074ca:	2200      	movs	r2, #0
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d105      	bne.n	80074e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80074d8:	4b07      	ldr	r3, [pc, #28]	@ (80074f8 <prvGetNextExpireTime+0x44>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	60fb      	str	r3, [r7, #12]
 80074e2:	e001      	b.n	80074e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80074e4:	2300      	movs	r3, #0
 80074e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80074e8:	68fb      	ldr	r3, [r7, #12]
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3714      	adds	r7, #20
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr
 80074f6:	bf00      	nop
 80074f8:	2000108c 	.word	0x2000108c

080074fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007504:	f7ff f9ca 	bl	800689c <xTaskGetTickCount>
 8007508:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800750a:	4b0b      	ldr	r3, [pc, #44]	@ (8007538 <prvSampleTimeNow+0x3c>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	68fa      	ldr	r2, [r7, #12]
 8007510:	429a      	cmp	r2, r3
 8007512:	d205      	bcs.n	8007520 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007514:	f000 f93a 	bl	800778c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2201      	movs	r2, #1
 800751c:	601a      	str	r2, [r3, #0]
 800751e:	e002      	b.n	8007526 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007526:	4a04      	ldr	r2, [pc, #16]	@ (8007538 <prvSampleTimeNow+0x3c>)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800752c:	68fb      	ldr	r3, [r7, #12]
}
 800752e:	4618      	mov	r0, r3
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	2000109c 	.word	0x2000109c

0800753c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b086      	sub	sp, #24
 8007540:	af00      	add	r7, sp, #0
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	607a      	str	r2, [r7, #4]
 8007548:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800754a:	2300      	movs	r3, #0
 800754c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	68ba      	ldr	r2, [r7, #8]
 8007552:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800755a:	68ba      	ldr	r2, [r7, #8]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	429a      	cmp	r2, r3
 8007560:	d812      	bhi.n	8007588 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	1ad2      	subs	r2, r2, r3
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	699b      	ldr	r3, [r3, #24]
 800756c:	429a      	cmp	r2, r3
 800756e:	d302      	bcc.n	8007576 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007570:	2301      	movs	r3, #1
 8007572:	617b      	str	r3, [r7, #20]
 8007574:	e01b      	b.n	80075ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007576:	4b10      	ldr	r3, [pc, #64]	@ (80075b8 <prvInsertTimerInActiveList+0x7c>)
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	3304      	adds	r3, #4
 800757e:	4619      	mov	r1, r3
 8007580:	4610      	mov	r0, r2
 8007582:	f7fe f820 	bl	80055c6 <vListInsert>
 8007586:	e012      	b.n	80075ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	429a      	cmp	r2, r3
 800758e:	d206      	bcs.n	800759e <prvInsertTimerInActiveList+0x62>
 8007590:	68ba      	ldr	r2, [r7, #8]
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	429a      	cmp	r2, r3
 8007596:	d302      	bcc.n	800759e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007598:	2301      	movs	r3, #1
 800759a:	617b      	str	r3, [r7, #20]
 800759c:	e007      	b.n	80075ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800759e:	4b07      	ldr	r3, [pc, #28]	@ (80075bc <prvInsertTimerInActiveList+0x80>)
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	3304      	adds	r3, #4
 80075a6:	4619      	mov	r1, r3
 80075a8:	4610      	mov	r0, r2
 80075aa:	f7fe f80c 	bl	80055c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80075ae:	697b      	ldr	r3, [r7, #20]
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3718      	adds	r7, #24
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	20001090 	.word	0x20001090
 80075bc:	2000108c 	.word	0x2000108c

080075c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b08e      	sub	sp, #56	@ 0x38
 80075c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80075c6:	e0ce      	b.n	8007766 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	da19      	bge.n	8007602 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80075ce:	1d3b      	adds	r3, r7, #4
 80075d0:	3304      	adds	r3, #4
 80075d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80075d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d10b      	bne.n	80075f2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80075da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075de:	f383 8811 	msr	BASEPRI, r3
 80075e2:	f3bf 8f6f 	isb	sy
 80075e6:	f3bf 8f4f 	dsb	sy
 80075ea:	61fb      	str	r3, [r7, #28]
}
 80075ec:	bf00      	nop
 80075ee:	bf00      	nop
 80075f0:	e7fd      	b.n	80075ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80075f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075f8:	6850      	ldr	r0, [r2, #4]
 80075fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075fc:	6892      	ldr	r2, [r2, #8]
 80075fe:	4611      	mov	r1, r2
 8007600:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2b00      	cmp	r3, #0
 8007606:	f2c0 80ae 	blt.w	8007766 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800760e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007610:	695b      	ldr	r3, [r3, #20]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d004      	beq.n	8007620 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007618:	3304      	adds	r3, #4
 800761a:	4618      	mov	r0, r3
 800761c:	f7fe f80c 	bl	8005638 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007620:	463b      	mov	r3, r7
 8007622:	4618      	mov	r0, r3
 8007624:	f7ff ff6a 	bl	80074fc <prvSampleTimeNow>
 8007628:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2b09      	cmp	r3, #9
 800762e:	f200 8097 	bhi.w	8007760 <prvProcessReceivedCommands+0x1a0>
 8007632:	a201      	add	r2, pc, #4	@ (adr r2, 8007638 <prvProcessReceivedCommands+0x78>)
 8007634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007638:	08007661 	.word	0x08007661
 800763c:	08007661 	.word	0x08007661
 8007640:	08007661 	.word	0x08007661
 8007644:	080076d7 	.word	0x080076d7
 8007648:	080076eb 	.word	0x080076eb
 800764c:	08007737 	.word	0x08007737
 8007650:	08007661 	.word	0x08007661
 8007654:	08007661 	.word	0x08007661
 8007658:	080076d7 	.word	0x080076d7
 800765c:	080076eb 	.word	0x080076eb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007662:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007666:	f043 0301 	orr.w	r3, r3, #1
 800766a:	b2da      	uxtb	r2, r3
 800766c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800766e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007672:	68ba      	ldr	r2, [r7, #8]
 8007674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007676:	699b      	ldr	r3, [r3, #24]
 8007678:	18d1      	adds	r1, r2, r3
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800767e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007680:	f7ff ff5c 	bl	800753c <prvInsertTimerInActiveList>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d06c      	beq.n	8007764 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800768a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800768c:	6a1b      	ldr	r3, [r3, #32]
 800768e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007690:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007694:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007698:	f003 0304 	and.w	r3, r3, #4
 800769c:	2b00      	cmp	r3, #0
 800769e:	d061      	beq.n	8007764 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80076a0:	68ba      	ldr	r2, [r7, #8]
 80076a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076a4:	699b      	ldr	r3, [r3, #24]
 80076a6:	441a      	add	r2, r3
 80076a8:	2300      	movs	r3, #0
 80076aa:	9300      	str	r3, [sp, #0]
 80076ac:	2300      	movs	r3, #0
 80076ae:	2100      	movs	r1, #0
 80076b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80076b2:	f7ff fe01 	bl	80072b8 <xTimerGenericCommand>
 80076b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80076b8:	6a3b      	ldr	r3, [r7, #32]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d152      	bne.n	8007764 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80076be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c2:	f383 8811 	msr	BASEPRI, r3
 80076c6:	f3bf 8f6f 	isb	sy
 80076ca:	f3bf 8f4f 	dsb	sy
 80076ce:	61bb      	str	r3, [r7, #24]
}
 80076d0:	bf00      	nop
 80076d2:	bf00      	nop
 80076d4:	e7fd      	b.n	80076d2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80076d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80076dc:	f023 0301 	bic.w	r3, r3, #1
 80076e0:	b2da      	uxtb	r2, r3
 80076e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80076e8:	e03d      	b.n	8007766 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80076ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80076f0:	f043 0301 	orr.w	r3, r3, #1
 80076f4:	b2da      	uxtb	r2, r3
 80076f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80076fc:	68ba      	ldr	r2, [r7, #8]
 80076fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007700:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d10b      	bne.n	8007722 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800770a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800770e:	f383 8811 	msr	BASEPRI, r3
 8007712:	f3bf 8f6f 	isb	sy
 8007716:	f3bf 8f4f 	dsb	sy
 800771a:	617b      	str	r3, [r7, #20]
}
 800771c:	bf00      	nop
 800771e:	bf00      	nop
 8007720:	e7fd      	b.n	800771e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007724:	699a      	ldr	r2, [r3, #24]
 8007726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007728:	18d1      	adds	r1, r2, r3
 800772a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800772c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800772e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007730:	f7ff ff04 	bl	800753c <prvInsertTimerInActiveList>
					break;
 8007734:	e017      	b.n	8007766 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007738:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800773c:	f003 0302 	and.w	r3, r3, #2
 8007740:	2b00      	cmp	r3, #0
 8007742:	d103      	bne.n	800774c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007744:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007746:	f000 fccb 	bl	80080e0 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800774a:	e00c      	b.n	8007766 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800774c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800774e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007752:	f023 0301 	bic.w	r3, r3, #1
 8007756:	b2da      	uxtb	r2, r3
 8007758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800775a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800775e:	e002      	b.n	8007766 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007760:	bf00      	nop
 8007762:	e000      	b.n	8007766 <prvProcessReceivedCommands+0x1a6>
					break;
 8007764:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007766:	4b08      	ldr	r3, [pc, #32]	@ (8007788 <prvProcessReceivedCommands+0x1c8>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	1d39      	adds	r1, r7, #4
 800776c:	2200      	movs	r2, #0
 800776e:	4618      	mov	r0, r3
 8007770:	f7fe fa72 	bl	8005c58 <xQueueReceive>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	f47f af26 	bne.w	80075c8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800777c:	bf00      	nop
 800777e:	bf00      	nop
 8007780:	3730      	adds	r7, #48	@ 0x30
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	20001094 	.word	0x20001094

0800778c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b088      	sub	sp, #32
 8007790:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007792:	e049      	b.n	8007828 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007794:	4b2e      	ldr	r3, [pc, #184]	@ (8007850 <prvSwitchTimerLists+0xc4>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800779e:	4b2c      	ldr	r3, [pc, #176]	@ (8007850 <prvSwitchTimerLists+0xc4>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	3304      	adds	r3, #4
 80077ac:	4618      	mov	r0, r3
 80077ae:	f7fd ff43 	bl	8005638 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6a1b      	ldr	r3, [r3, #32]
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077c0:	f003 0304 	and.w	r3, r3, #4
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d02f      	beq.n	8007828 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	699b      	ldr	r3, [r3, #24]
 80077cc:	693a      	ldr	r2, [r7, #16]
 80077ce:	4413      	add	r3, r2
 80077d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80077d2:	68ba      	ldr	r2, [r7, #8]
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d90e      	bls.n	80077f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	68fa      	ldr	r2, [r7, #12]
 80077e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80077e6:	4b1a      	ldr	r3, [pc, #104]	@ (8007850 <prvSwitchTimerLists+0xc4>)
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	3304      	adds	r3, #4
 80077ee:	4619      	mov	r1, r3
 80077f0:	4610      	mov	r0, r2
 80077f2:	f7fd fee8 	bl	80055c6 <vListInsert>
 80077f6:	e017      	b.n	8007828 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80077f8:	2300      	movs	r3, #0
 80077fa:	9300      	str	r3, [sp, #0]
 80077fc:	2300      	movs	r3, #0
 80077fe:	693a      	ldr	r2, [r7, #16]
 8007800:	2100      	movs	r1, #0
 8007802:	68f8      	ldr	r0, [r7, #12]
 8007804:	f7ff fd58 	bl	80072b8 <xTimerGenericCommand>
 8007808:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d10b      	bne.n	8007828 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007814:	f383 8811 	msr	BASEPRI, r3
 8007818:	f3bf 8f6f 	isb	sy
 800781c:	f3bf 8f4f 	dsb	sy
 8007820:	603b      	str	r3, [r7, #0]
}
 8007822:	bf00      	nop
 8007824:	bf00      	nop
 8007826:	e7fd      	b.n	8007824 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007828:	4b09      	ldr	r3, [pc, #36]	@ (8007850 <prvSwitchTimerLists+0xc4>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d1b0      	bne.n	8007794 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007832:	4b07      	ldr	r3, [pc, #28]	@ (8007850 <prvSwitchTimerLists+0xc4>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007838:	4b06      	ldr	r3, [pc, #24]	@ (8007854 <prvSwitchTimerLists+0xc8>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a04      	ldr	r2, [pc, #16]	@ (8007850 <prvSwitchTimerLists+0xc4>)
 800783e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007840:	4a04      	ldr	r2, [pc, #16]	@ (8007854 <prvSwitchTimerLists+0xc8>)
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	6013      	str	r3, [r2, #0]
}
 8007846:	bf00      	nop
 8007848:	3718      	adds	r7, #24
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	2000108c 	.word	0x2000108c
 8007854:	20001090 	.word	0x20001090

08007858 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800785e:	f000 f96b 	bl	8007b38 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007862:	4b15      	ldr	r3, [pc, #84]	@ (80078b8 <prvCheckForValidListAndQueue+0x60>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d120      	bne.n	80078ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800786a:	4814      	ldr	r0, [pc, #80]	@ (80078bc <prvCheckForValidListAndQueue+0x64>)
 800786c:	f7fd fe5a 	bl	8005524 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007870:	4813      	ldr	r0, [pc, #76]	@ (80078c0 <prvCheckForValidListAndQueue+0x68>)
 8007872:	f7fd fe57 	bl	8005524 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007876:	4b13      	ldr	r3, [pc, #76]	@ (80078c4 <prvCheckForValidListAndQueue+0x6c>)
 8007878:	4a10      	ldr	r2, [pc, #64]	@ (80078bc <prvCheckForValidListAndQueue+0x64>)
 800787a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800787c:	4b12      	ldr	r3, [pc, #72]	@ (80078c8 <prvCheckForValidListAndQueue+0x70>)
 800787e:	4a10      	ldr	r2, [pc, #64]	@ (80078c0 <prvCheckForValidListAndQueue+0x68>)
 8007880:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007882:	2300      	movs	r3, #0
 8007884:	9300      	str	r3, [sp, #0]
 8007886:	4b11      	ldr	r3, [pc, #68]	@ (80078cc <prvCheckForValidListAndQueue+0x74>)
 8007888:	4a11      	ldr	r2, [pc, #68]	@ (80078d0 <prvCheckForValidListAndQueue+0x78>)
 800788a:	2110      	movs	r1, #16
 800788c:	200a      	movs	r0, #10
 800788e:	f7fd ff67 	bl	8005760 <xQueueGenericCreateStatic>
 8007892:	4603      	mov	r3, r0
 8007894:	4a08      	ldr	r2, [pc, #32]	@ (80078b8 <prvCheckForValidListAndQueue+0x60>)
 8007896:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007898:	4b07      	ldr	r3, [pc, #28]	@ (80078b8 <prvCheckForValidListAndQueue+0x60>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d005      	beq.n	80078ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80078a0:	4b05      	ldr	r3, [pc, #20]	@ (80078b8 <prvCheckForValidListAndQueue+0x60>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	490b      	ldr	r1, [pc, #44]	@ (80078d4 <prvCheckForValidListAndQueue+0x7c>)
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7fe fc4a 	bl	8006140 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80078ac:	f000 f976 	bl	8007b9c <vPortExitCritical>
}
 80078b0:	bf00      	nop
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	20001094 	.word	0x20001094
 80078bc:	20001064 	.word	0x20001064
 80078c0:	20001078 	.word	0x20001078
 80078c4:	2000108c 	.word	0x2000108c
 80078c8:	20001090 	.word	0x20001090
 80078cc:	20001140 	.word	0x20001140
 80078d0:	200010a0 	.word	0x200010a0
 80078d4:	080085c0 	.word	0x080085c0

080078d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80078d8:	b480      	push	{r7}
 80078da:	b085      	sub	sp, #20
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	3b04      	subs	r3, #4
 80078e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80078f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	3b04      	subs	r3, #4
 80078f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	f023 0201 	bic.w	r2, r3, #1
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	3b04      	subs	r3, #4
 8007906:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007908:	4a0c      	ldr	r2, [pc, #48]	@ (800793c <pxPortInitialiseStack+0x64>)
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	3b14      	subs	r3, #20
 8007912:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	3b04      	subs	r3, #4
 800791e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f06f 0202 	mvn.w	r2, #2
 8007926:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	3b20      	subs	r3, #32
 800792c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800792e:	68fb      	ldr	r3, [r7, #12]
}
 8007930:	4618      	mov	r0, r3
 8007932:	3714      	adds	r7, #20
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr
 800793c:	08007941 	.word	0x08007941

08007940 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007940:	b480      	push	{r7}
 8007942:	b085      	sub	sp, #20
 8007944:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007946:	2300      	movs	r3, #0
 8007948:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800794a:	4b13      	ldr	r3, [pc, #76]	@ (8007998 <prvTaskExitError+0x58>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007952:	d00b      	beq.n	800796c <prvTaskExitError+0x2c>
	__asm volatile
 8007954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007958:	f383 8811 	msr	BASEPRI, r3
 800795c:	f3bf 8f6f 	isb	sy
 8007960:	f3bf 8f4f 	dsb	sy
 8007964:	60fb      	str	r3, [r7, #12]
}
 8007966:	bf00      	nop
 8007968:	bf00      	nop
 800796a:	e7fd      	b.n	8007968 <prvTaskExitError+0x28>
	__asm volatile
 800796c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007970:	f383 8811 	msr	BASEPRI, r3
 8007974:	f3bf 8f6f 	isb	sy
 8007978:	f3bf 8f4f 	dsb	sy
 800797c:	60bb      	str	r3, [r7, #8]
}
 800797e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007980:	bf00      	nop
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d0fc      	beq.n	8007982 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007988:	bf00      	nop
 800798a:	bf00      	nop
 800798c:	3714      	adds	r7, #20
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop
 8007998:	2000001c 	.word	0x2000001c
 800799c:	00000000 	.word	0x00000000

080079a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80079a0:	4b07      	ldr	r3, [pc, #28]	@ (80079c0 <pxCurrentTCBConst2>)
 80079a2:	6819      	ldr	r1, [r3, #0]
 80079a4:	6808      	ldr	r0, [r1, #0]
 80079a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079aa:	f380 8809 	msr	PSP, r0
 80079ae:	f3bf 8f6f 	isb	sy
 80079b2:	f04f 0000 	mov.w	r0, #0
 80079b6:	f380 8811 	msr	BASEPRI, r0
 80079ba:	4770      	bx	lr
 80079bc:	f3af 8000 	nop.w

080079c0 <pxCurrentTCBConst2>:
 80079c0:	20000b5c 	.word	0x20000b5c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80079c4:	bf00      	nop
 80079c6:	bf00      	nop

080079c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80079c8:	4808      	ldr	r0, [pc, #32]	@ (80079ec <prvPortStartFirstTask+0x24>)
 80079ca:	6800      	ldr	r0, [r0, #0]
 80079cc:	6800      	ldr	r0, [r0, #0]
 80079ce:	f380 8808 	msr	MSP, r0
 80079d2:	f04f 0000 	mov.w	r0, #0
 80079d6:	f380 8814 	msr	CONTROL, r0
 80079da:	b662      	cpsie	i
 80079dc:	b661      	cpsie	f
 80079de:	f3bf 8f4f 	dsb	sy
 80079e2:	f3bf 8f6f 	isb	sy
 80079e6:	df00      	svc	0
 80079e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80079ea:	bf00      	nop
 80079ec:	e000ed08 	.word	0xe000ed08

080079f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b086      	sub	sp, #24
 80079f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80079f6:	4b47      	ldr	r3, [pc, #284]	@ (8007b14 <xPortStartScheduler+0x124>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a47      	ldr	r2, [pc, #284]	@ (8007b18 <xPortStartScheduler+0x128>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d10b      	bne.n	8007a18 <xPortStartScheduler+0x28>
	__asm volatile
 8007a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a04:	f383 8811 	msr	BASEPRI, r3
 8007a08:	f3bf 8f6f 	isb	sy
 8007a0c:	f3bf 8f4f 	dsb	sy
 8007a10:	613b      	str	r3, [r7, #16]
}
 8007a12:	bf00      	nop
 8007a14:	bf00      	nop
 8007a16:	e7fd      	b.n	8007a14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007a18:	4b3e      	ldr	r3, [pc, #248]	@ (8007b14 <xPortStartScheduler+0x124>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a3f      	ldr	r2, [pc, #252]	@ (8007b1c <xPortStartScheduler+0x12c>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d10b      	bne.n	8007a3a <xPortStartScheduler+0x4a>
	__asm volatile
 8007a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a26:	f383 8811 	msr	BASEPRI, r3
 8007a2a:	f3bf 8f6f 	isb	sy
 8007a2e:	f3bf 8f4f 	dsb	sy
 8007a32:	60fb      	str	r3, [r7, #12]
}
 8007a34:	bf00      	nop
 8007a36:	bf00      	nop
 8007a38:	e7fd      	b.n	8007a36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007a3a:	4b39      	ldr	r3, [pc, #228]	@ (8007b20 <xPortStartScheduler+0x130>)
 8007a3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	22ff      	movs	r2, #255	@ 0xff
 8007a4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007a54:	78fb      	ldrb	r3, [r7, #3]
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007a5c:	b2da      	uxtb	r2, r3
 8007a5e:	4b31      	ldr	r3, [pc, #196]	@ (8007b24 <xPortStartScheduler+0x134>)
 8007a60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007a62:	4b31      	ldr	r3, [pc, #196]	@ (8007b28 <xPortStartScheduler+0x138>)
 8007a64:	2207      	movs	r2, #7
 8007a66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a68:	e009      	b.n	8007a7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007a6a:	4b2f      	ldr	r3, [pc, #188]	@ (8007b28 <xPortStartScheduler+0x138>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	3b01      	subs	r3, #1
 8007a70:	4a2d      	ldr	r2, [pc, #180]	@ (8007b28 <xPortStartScheduler+0x138>)
 8007a72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007a74:	78fb      	ldrb	r3, [r7, #3]
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	005b      	lsls	r3, r3, #1
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a7e:	78fb      	ldrb	r3, [r7, #3]
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a86:	2b80      	cmp	r3, #128	@ 0x80
 8007a88:	d0ef      	beq.n	8007a6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007a8a:	4b27      	ldr	r3, [pc, #156]	@ (8007b28 <xPortStartScheduler+0x138>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f1c3 0307 	rsb	r3, r3, #7
 8007a92:	2b04      	cmp	r3, #4
 8007a94:	d00b      	beq.n	8007aae <xPortStartScheduler+0xbe>
	__asm volatile
 8007a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a9a:	f383 8811 	msr	BASEPRI, r3
 8007a9e:	f3bf 8f6f 	isb	sy
 8007aa2:	f3bf 8f4f 	dsb	sy
 8007aa6:	60bb      	str	r3, [r7, #8]
}
 8007aa8:	bf00      	nop
 8007aaa:	bf00      	nop
 8007aac:	e7fd      	b.n	8007aaa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007aae:	4b1e      	ldr	r3, [pc, #120]	@ (8007b28 <xPortStartScheduler+0x138>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	021b      	lsls	r3, r3, #8
 8007ab4:	4a1c      	ldr	r2, [pc, #112]	@ (8007b28 <xPortStartScheduler+0x138>)
 8007ab6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8007b28 <xPortStartScheduler+0x138>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007ac0:	4a19      	ldr	r2, [pc, #100]	@ (8007b28 <xPortStartScheduler+0x138>)
 8007ac2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	b2da      	uxtb	r2, r3
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007acc:	4b17      	ldr	r3, [pc, #92]	@ (8007b2c <xPortStartScheduler+0x13c>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a16      	ldr	r2, [pc, #88]	@ (8007b2c <xPortStartScheduler+0x13c>)
 8007ad2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007ad6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ad8:	4b14      	ldr	r3, [pc, #80]	@ (8007b2c <xPortStartScheduler+0x13c>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a13      	ldr	r2, [pc, #76]	@ (8007b2c <xPortStartScheduler+0x13c>)
 8007ade:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007ae2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007ae4:	f000 f9a6 	bl	8007e34 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007ae8:	4b11      	ldr	r3, [pc, #68]	@ (8007b30 <xPortStartScheduler+0x140>)
 8007aea:	2200      	movs	r2, #0
 8007aec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007aee:	f000 f9dd 	bl	8007eac <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007af2:	4b10      	ldr	r3, [pc, #64]	@ (8007b34 <xPortStartScheduler+0x144>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a0f      	ldr	r2, [pc, #60]	@ (8007b34 <xPortStartScheduler+0x144>)
 8007af8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007afc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007afe:	f7ff ff63 	bl	80079c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007b02:	f7fe ffbd 	bl	8006a80 <vTaskSwitchContext>
	prvTaskExitError();
 8007b06:	f7ff ff1b 	bl	8007940 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3718      	adds	r7, #24
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}
 8007b14:	e000ed00 	.word	0xe000ed00
 8007b18:	410fc271 	.word	0x410fc271
 8007b1c:	410fc270 	.word	0x410fc270
 8007b20:	e000e400 	.word	0xe000e400
 8007b24:	2000119c 	.word	0x2000119c
 8007b28:	200011a0 	.word	0x200011a0
 8007b2c:	e000ed20 	.word	0xe000ed20
 8007b30:	2000001c 	.word	0x2000001c
 8007b34:	e000ef34 	.word	0xe000ef34

08007b38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b42:	f383 8811 	msr	BASEPRI, r3
 8007b46:	f3bf 8f6f 	isb	sy
 8007b4a:	f3bf 8f4f 	dsb	sy
 8007b4e:	607b      	str	r3, [r7, #4]
}
 8007b50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007b52:	4b10      	ldr	r3, [pc, #64]	@ (8007b94 <vPortEnterCritical+0x5c>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	3301      	adds	r3, #1
 8007b58:	4a0e      	ldr	r2, [pc, #56]	@ (8007b94 <vPortEnterCritical+0x5c>)
 8007b5a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007b5c:	4b0d      	ldr	r3, [pc, #52]	@ (8007b94 <vPortEnterCritical+0x5c>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d110      	bne.n	8007b86 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007b64:	4b0c      	ldr	r3, [pc, #48]	@ (8007b98 <vPortEnterCritical+0x60>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00b      	beq.n	8007b86 <vPortEnterCritical+0x4e>
	__asm volatile
 8007b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b72:	f383 8811 	msr	BASEPRI, r3
 8007b76:	f3bf 8f6f 	isb	sy
 8007b7a:	f3bf 8f4f 	dsb	sy
 8007b7e:	603b      	str	r3, [r7, #0]
}
 8007b80:	bf00      	nop
 8007b82:	bf00      	nop
 8007b84:	e7fd      	b.n	8007b82 <vPortEnterCritical+0x4a>
	}
}
 8007b86:	bf00      	nop
 8007b88:	370c      	adds	r7, #12
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr
 8007b92:	bf00      	nop
 8007b94:	2000001c 	.word	0x2000001c
 8007b98:	e000ed04 	.word	0xe000ed04

08007b9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007ba2:	4b12      	ldr	r3, [pc, #72]	@ (8007bec <vPortExitCritical+0x50>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d10b      	bne.n	8007bc2 <vPortExitCritical+0x26>
	__asm volatile
 8007baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bae:	f383 8811 	msr	BASEPRI, r3
 8007bb2:	f3bf 8f6f 	isb	sy
 8007bb6:	f3bf 8f4f 	dsb	sy
 8007bba:	607b      	str	r3, [r7, #4]
}
 8007bbc:	bf00      	nop
 8007bbe:	bf00      	nop
 8007bc0:	e7fd      	b.n	8007bbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8007bec <vPortExitCritical+0x50>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	3b01      	subs	r3, #1
 8007bc8:	4a08      	ldr	r2, [pc, #32]	@ (8007bec <vPortExitCritical+0x50>)
 8007bca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007bcc:	4b07      	ldr	r3, [pc, #28]	@ (8007bec <vPortExitCritical+0x50>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d105      	bne.n	8007be0 <vPortExitCritical+0x44>
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	f383 8811 	msr	BASEPRI, r3
}
 8007bde:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007be0:	bf00      	nop
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr
 8007bec:	2000001c 	.word	0x2000001c

08007bf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007bf0:	f3ef 8009 	mrs	r0, PSP
 8007bf4:	f3bf 8f6f 	isb	sy
 8007bf8:	4b15      	ldr	r3, [pc, #84]	@ (8007c50 <pxCurrentTCBConst>)
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	f01e 0f10 	tst.w	lr, #16
 8007c00:	bf08      	it	eq
 8007c02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007c06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c0a:	6010      	str	r0, [r2, #0]
 8007c0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007c10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007c14:	f380 8811 	msr	BASEPRI, r0
 8007c18:	f3bf 8f4f 	dsb	sy
 8007c1c:	f3bf 8f6f 	isb	sy
 8007c20:	f7fe ff2e 	bl	8006a80 <vTaskSwitchContext>
 8007c24:	f04f 0000 	mov.w	r0, #0
 8007c28:	f380 8811 	msr	BASEPRI, r0
 8007c2c:	bc09      	pop	{r0, r3}
 8007c2e:	6819      	ldr	r1, [r3, #0]
 8007c30:	6808      	ldr	r0, [r1, #0]
 8007c32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c36:	f01e 0f10 	tst.w	lr, #16
 8007c3a:	bf08      	it	eq
 8007c3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007c40:	f380 8809 	msr	PSP, r0
 8007c44:	f3bf 8f6f 	isb	sy
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	f3af 8000 	nop.w

08007c50 <pxCurrentTCBConst>:
 8007c50:	20000b5c 	.word	0x20000b5c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007c54:	bf00      	nop
 8007c56:	bf00      	nop

08007c58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c62:	f383 8811 	msr	BASEPRI, r3
 8007c66:	f3bf 8f6f 	isb	sy
 8007c6a:	f3bf 8f4f 	dsb	sy
 8007c6e:	607b      	str	r3, [r7, #4]
}
 8007c70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007c72:	f7fe fe4b 	bl	800690c <xTaskIncrementTick>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d003      	beq.n	8007c84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007c7c:	4b06      	ldr	r3, [pc, #24]	@ (8007c98 <xPortSysTickHandler+0x40>)
 8007c7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c82:	601a      	str	r2, [r3, #0]
 8007c84:	2300      	movs	r3, #0
 8007c86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	f383 8811 	msr	BASEPRI, r3
}
 8007c8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007c90:	bf00      	nop
 8007c92:	3708      	adds	r7, #8
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	e000ed04 	.word	0xe000ed04

08007c9c <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b088      	sub	sp, #32
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 8007ca4:	4b5d      	ldr	r3, [pc, #372]	@ (8007e1c <vPortSuppressTicksAndSleep+0x180>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d902      	bls.n	8007cb4 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 8007cae:	4b5b      	ldr	r3, [pc, #364]	@ (8007e1c <vPortSuppressTicksAndSleep+0x180>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 8007cb4:	4b5a      	ldr	r3, [pc, #360]	@ (8007e20 <vPortSuppressTicksAndSleep+0x184>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a59      	ldr	r2, [pc, #356]	@ (8007e20 <vPortSuppressTicksAndSleep+0x184>)
 8007cba:	f023 0301 	bic.w	r3, r3, #1
 8007cbe:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 8007cc0:	4b58      	ldr	r3, [pc, #352]	@ (8007e24 <vPortSuppressTicksAndSleep+0x188>)
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	4957      	ldr	r1, [pc, #348]	@ (8007e28 <vPortSuppressTicksAndSleep+0x18c>)
 8007cca:	6809      	ldr	r1, [r1, #0]
 8007ccc:	fb01 f303 	mul.w	r3, r1, r3
 8007cd0:	4413      	add	r3, r2
 8007cd2:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 8007cd4:	4b55      	ldr	r3, [pc, #340]	@ (8007e2c <vPortSuppressTicksAndSleep+0x190>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	69fa      	ldr	r2, [r7, #28]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d904      	bls.n	8007ce8 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 8007cde:	4b53      	ldr	r3, [pc, #332]	@ (8007e2c <vPortSuppressTicksAndSleep+0x190>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	69fa      	ldr	r2, [r7, #28]
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 8007ce8:	b672      	cpsid	i
		__asm volatile( "dsb" );
 8007cea:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 8007cee:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 8007cf2:	f7ff f8c3 	bl	8006e7c <eTaskConfirmSleepModeStatus>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d110      	bne.n	8007d1e <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8007cfc:	4b49      	ldr	r3, [pc, #292]	@ (8007e24 <vPortSuppressTicksAndSleep+0x188>)
 8007cfe:	4a4c      	ldr	r2, [pc, #304]	@ (8007e30 <vPortSuppressTicksAndSleep+0x194>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8007d04:	4b46      	ldr	r3, [pc, #280]	@ (8007e20 <vPortSuppressTicksAndSleep+0x184>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a45      	ldr	r2, [pc, #276]	@ (8007e20 <vPortSuppressTicksAndSleep+0x184>)
 8007d0a:	f043 0301 	orr.w	r3, r3, #1
 8007d0e:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8007d10:	4b45      	ldr	r3, [pc, #276]	@ (8007e28 <vPortSuppressTicksAndSleep+0x18c>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a46      	ldr	r2, [pc, #280]	@ (8007e30 <vPortSuppressTicksAndSleep+0x194>)
 8007d16:	3b01      	subs	r3, #1
 8007d18:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 8007d1a:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 8007d1c:	e079      	b.n	8007e12 <vPortSuppressTicksAndSleep+0x176>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 8007d1e:	4a44      	ldr	r2, [pc, #272]	@ (8007e30 <vPortSuppressTicksAndSleep+0x194>)
 8007d20:	69fb      	ldr	r3, [r7, #28]
 8007d22:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007d24:	4b3f      	ldr	r3, [pc, #252]	@ (8007e24 <vPortSuppressTicksAndSleep+0x188>)
 8007d26:	2200      	movs	r2, #0
 8007d28:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8007d2a:	4b3d      	ldr	r3, [pc, #244]	@ (8007e20 <vPortSuppressTicksAndSleep+0x184>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a3c      	ldr	r2, [pc, #240]	@ (8007e20 <vPortSuppressTicksAndSleep+0x184>)
 8007d30:	f043 0301 	orr.w	r3, r3, #1
 8007d34:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	613b      	str	r3, [r7, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	613b      	str	r3, [r7, #16]
 8007d3e:	6938      	ldr	r0, [r7, #16]
 8007d40:	f7f8 fd84 	bl	800084c <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d004      	beq.n	8007d54 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 8007d4a:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 8007d4e:	bf30      	wfi
				__asm volatile( "isb" );
 8007d50:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f7f8 fd83 	bl	8000860 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 8007d5a:	b662      	cpsie	i
			__asm volatile( "dsb" );
 8007d5c:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8007d60:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 8007d64:	b672      	cpsid	i
			__asm volatile( "dsb" );
 8007d66:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8007d6a:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 8007d6e:	4b2c      	ldr	r3, [pc, #176]	@ (8007e20 <vPortSuppressTicksAndSleep+0x184>)
 8007d70:	2206      	movs	r2, #6
 8007d72:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 8007d74:	4b2a      	ldr	r3, [pc, #168]	@ (8007e20 <vPortSuppressTicksAndSleep+0x184>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d01d      	beq.n	8007dbc <vPortSuppressTicksAndSleep+0x120>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 8007d80:	4b29      	ldr	r3, [pc, #164]	@ (8007e28 <vPortSuppressTicksAndSleep+0x18c>)
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	4b27      	ldr	r3, [pc, #156]	@ (8007e24 <vPortSuppressTicksAndSleep+0x188>)
 8007d86:	6819      	ldr	r1, [r3, #0]
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	1acb      	subs	r3, r1, r3
 8007d8c:	4413      	add	r3, r2
 8007d8e:	3b01      	subs	r3, #1
 8007d90:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 8007d92:	4b26      	ldr	r3, [pc, #152]	@ (8007e2c <vPortSuppressTicksAndSleep+0x190>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	697a      	ldr	r2, [r7, #20]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d304      	bcc.n	8007da6 <vPortSuppressTicksAndSleep+0x10a>
 8007d9c:	4b22      	ldr	r3, [pc, #136]	@ (8007e28 <vPortSuppressTicksAndSleep+0x18c>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	697a      	ldr	r2, [r7, #20]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d903      	bls.n	8007dae <vPortSuppressTicksAndSleep+0x112>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 8007da6:	4b20      	ldr	r3, [pc, #128]	@ (8007e28 <vPortSuppressTicksAndSleep+0x18c>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	3b01      	subs	r3, #1
 8007dac:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 8007dae:	4a20      	ldr	r2, [pc, #128]	@ (8007e30 <vPortSuppressTicksAndSleep+0x194>)
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	3b01      	subs	r3, #1
 8007db8:	61bb      	str	r3, [r7, #24]
 8007dba:	e018      	b.n	8007dee <vPortSuppressTicksAndSleep+0x152>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8007dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8007e28 <vPortSuppressTicksAndSleep+0x18c>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	fb03 f202 	mul.w	r2, r3, r2
 8007dc6:	4b17      	ldr	r3, [pc, #92]	@ (8007e24 <vPortSuppressTicksAndSleep+0x188>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	1ad3      	subs	r3, r2, r3
 8007dcc:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 8007dce:	4b16      	ldr	r3, [pc, #88]	@ (8007e28 <vPortSuppressTicksAndSleep+0x18c>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	68fa      	ldr	r2, [r7, #12]
 8007dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dd8:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	3301      	adds	r3, #1
 8007dde:	4a12      	ldr	r2, [pc, #72]	@ (8007e28 <vPortSuppressTicksAndSleep+0x18c>)
 8007de0:	6812      	ldr	r2, [r2, #0]
 8007de2:	fb03 f202 	mul.w	r2, r3, r2
 8007de6:	4912      	ldr	r1, [pc, #72]	@ (8007e30 <vPortSuppressTicksAndSleep+0x194>)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	1ad3      	subs	r3, r2, r3
 8007dec:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007dee:	4b0d      	ldr	r3, [pc, #52]	@ (8007e24 <vPortSuppressTicksAndSleep+0x188>)
 8007df0:	2200      	movs	r2, #0
 8007df2:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8007df4:	4b0a      	ldr	r3, [pc, #40]	@ (8007e20 <vPortSuppressTicksAndSleep+0x184>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a09      	ldr	r2, [pc, #36]	@ (8007e20 <vPortSuppressTicksAndSleep+0x184>)
 8007dfa:	f043 0301 	orr.w	r3, r3, #1
 8007dfe:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 8007e00:	69b8      	ldr	r0, [r7, #24]
 8007e02:	f7fe fd5b 	bl	80068bc <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8007e06:	4b08      	ldr	r3, [pc, #32]	@ (8007e28 <vPortSuppressTicksAndSleep+0x18c>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a09      	ldr	r2, [pc, #36]	@ (8007e30 <vPortSuppressTicksAndSleep+0x194>)
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 8007e10:	b662      	cpsie	i
	}
 8007e12:	bf00      	nop
 8007e14:	3720      	adds	r7, #32
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	20001194 	.word	0x20001194
 8007e20:	e000e010 	.word	0xe000e010
 8007e24:	e000e018 	.word	0xe000e018
 8007e28:	20001190 	.word	0x20001190
 8007e2c:	20001198 	.word	0x20001198
 8007e30:	e000e014 	.word	0xe000e014

08007e34 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007e34:	b480      	push	{r7}
 8007e36:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 8007e38:	4b14      	ldr	r3, [pc, #80]	@ (8007e8c <vPortSetupTimerInterrupt+0x58>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a14      	ldr	r2, [pc, #80]	@ (8007e90 <vPortSetupTimerInterrupt+0x5c>)
 8007e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e42:	099b      	lsrs	r3, r3, #6
 8007e44:	4a13      	ldr	r2, [pc, #76]	@ (8007e94 <vPortSetupTimerInterrupt+0x60>)
 8007e46:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 8007e48:	4b12      	ldr	r3, [pc, #72]	@ (8007e94 <vPortSetupTimerInterrupt+0x60>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8007e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e54:	4a10      	ldr	r2, [pc, #64]	@ (8007e98 <vPortSetupTimerInterrupt+0x64>)
 8007e56:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 8007e58:	4b10      	ldr	r3, [pc, #64]	@ (8007e9c <vPortSetupTimerInterrupt+0x68>)
 8007e5a:	222d      	movs	r2, #45	@ 0x2d
 8007e5c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e5e:	4b10      	ldr	r3, [pc, #64]	@ (8007ea0 <vPortSetupTimerInterrupt+0x6c>)
 8007e60:	2200      	movs	r2, #0
 8007e62:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007e64:	4b0f      	ldr	r3, [pc, #60]	@ (8007ea4 <vPortSetupTimerInterrupt+0x70>)
 8007e66:	2200      	movs	r2, #0
 8007e68:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e6a:	4b08      	ldr	r3, [pc, #32]	@ (8007e8c <vPortSetupTimerInterrupt+0x58>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a08      	ldr	r2, [pc, #32]	@ (8007e90 <vPortSetupTimerInterrupt+0x5c>)
 8007e70:	fba2 2303 	umull	r2, r3, r2, r3
 8007e74:	099b      	lsrs	r3, r3, #6
 8007e76:	4a0c      	ldr	r2, [pc, #48]	@ (8007ea8 <vPortSetupTimerInterrupt+0x74>)
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007e7c:	4b08      	ldr	r3, [pc, #32]	@ (8007ea0 <vPortSetupTimerInterrupt+0x6c>)
 8007e7e:	2207      	movs	r2, #7
 8007e80:	601a      	str	r2, [r3, #0]
}
 8007e82:	bf00      	nop
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr
 8007e8c:	20000010 	.word	0x20000010
 8007e90:	10624dd3 	.word	0x10624dd3
 8007e94:	20001190 	.word	0x20001190
 8007e98:	20001194 	.word	0x20001194
 8007e9c:	20001198 	.word	0x20001198
 8007ea0:	e000e010 	.word	0xe000e010
 8007ea4:	e000e018 	.word	0xe000e018
 8007ea8:	e000e014 	.word	0xe000e014

08007eac <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007eac:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007ebc <vPortEnableVFP+0x10>
 8007eb0:	6801      	ldr	r1, [r0, #0]
 8007eb2:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007eb6:	6001      	str	r1, [r0, #0]
 8007eb8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007eba:	bf00      	nop
 8007ebc:	e000ed88 	.word	0xe000ed88

08007ec0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b085      	sub	sp, #20
 8007ec4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007ec6:	f3ef 8305 	mrs	r3, IPSR
 8007eca:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2b0f      	cmp	r3, #15
 8007ed0:	d915      	bls.n	8007efe <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007ed2:	4a18      	ldr	r2, [pc, #96]	@ (8007f34 <vPortValidateInterruptPriority+0x74>)
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	4413      	add	r3, r2
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007edc:	4b16      	ldr	r3, [pc, #88]	@ (8007f38 <vPortValidateInterruptPriority+0x78>)
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	7afa      	ldrb	r2, [r7, #11]
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d20b      	bcs.n	8007efe <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eea:	f383 8811 	msr	BASEPRI, r3
 8007eee:	f3bf 8f6f 	isb	sy
 8007ef2:	f3bf 8f4f 	dsb	sy
 8007ef6:	607b      	str	r3, [r7, #4]
}
 8007ef8:	bf00      	nop
 8007efa:	bf00      	nop
 8007efc:	e7fd      	b.n	8007efa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007efe:	4b0f      	ldr	r3, [pc, #60]	@ (8007f3c <vPortValidateInterruptPriority+0x7c>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007f06:	4b0e      	ldr	r3, [pc, #56]	@ (8007f40 <vPortValidateInterruptPriority+0x80>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d90b      	bls.n	8007f26 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f12:	f383 8811 	msr	BASEPRI, r3
 8007f16:	f3bf 8f6f 	isb	sy
 8007f1a:	f3bf 8f4f 	dsb	sy
 8007f1e:	603b      	str	r3, [r7, #0]
}
 8007f20:	bf00      	nop
 8007f22:	bf00      	nop
 8007f24:	e7fd      	b.n	8007f22 <vPortValidateInterruptPriority+0x62>
	}
 8007f26:	bf00      	nop
 8007f28:	3714      	adds	r7, #20
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop
 8007f34:	e000e3f0 	.word	0xe000e3f0
 8007f38:	2000119c 	.word	0x2000119c
 8007f3c:	e000ed0c 	.word	0xe000ed0c
 8007f40:	200011a0 	.word	0x200011a0

08007f44 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b08a      	sub	sp, #40	@ 0x28
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007f50:	f7fe fbc0 	bl	80066d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007f54:	4b5c      	ldr	r3, [pc, #368]	@ (80080c8 <pvPortMalloc+0x184>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d101      	bne.n	8007f60 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007f5c:	f000 f924 	bl	80081a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007f60:	4b5a      	ldr	r3, [pc, #360]	@ (80080cc <pvPortMalloc+0x188>)
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	4013      	ands	r3, r2
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	f040 8095 	bne.w	8008098 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d01e      	beq.n	8007fb2 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007f74:	2208      	movs	r2, #8
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4413      	add	r3, r2
 8007f7a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f003 0307 	and.w	r3, r3, #7
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d015      	beq.n	8007fb2 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f023 0307 	bic.w	r3, r3, #7
 8007f8c:	3308      	adds	r3, #8
 8007f8e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f003 0307 	and.w	r3, r3, #7
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d00b      	beq.n	8007fb2 <pvPortMalloc+0x6e>
	__asm volatile
 8007f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f9e:	f383 8811 	msr	BASEPRI, r3
 8007fa2:	f3bf 8f6f 	isb	sy
 8007fa6:	f3bf 8f4f 	dsb	sy
 8007faa:	617b      	str	r3, [r7, #20]
}
 8007fac:	bf00      	nop
 8007fae:	bf00      	nop
 8007fb0:	e7fd      	b.n	8007fae <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d06f      	beq.n	8008098 <pvPortMalloc+0x154>
 8007fb8:	4b45      	ldr	r3, [pc, #276]	@ (80080d0 <pvPortMalloc+0x18c>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	d86a      	bhi.n	8008098 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007fc2:	4b44      	ldr	r3, [pc, #272]	@ (80080d4 <pvPortMalloc+0x190>)
 8007fc4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007fc6:	4b43      	ldr	r3, [pc, #268]	@ (80080d4 <pvPortMalloc+0x190>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007fcc:	e004      	b.n	8007fd8 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d903      	bls.n	8007fea <pvPortMalloc+0xa6>
 8007fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d1f1      	bne.n	8007fce <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007fea:	4b37      	ldr	r3, [pc, #220]	@ (80080c8 <pvPortMalloc+0x184>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d051      	beq.n	8008098 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ff4:	6a3b      	ldr	r3, [r7, #32]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2208      	movs	r2, #8
 8007ffa:	4413      	add	r3, r2
 8007ffc:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	6a3b      	ldr	r3, [r7, #32]
 8008004:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008008:	685a      	ldr	r2, [r3, #4]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	1ad2      	subs	r2, r2, r3
 800800e:	2308      	movs	r3, #8
 8008010:	005b      	lsls	r3, r3, #1
 8008012:	429a      	cmp	r2, r3
 8008014:	d920      	bls.n	8008058 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008016:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	4413      	add	r3, r2
 800801c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	f003 0307 	and.w	r3, r3, #7
 8008024:	2b00      	cmp	r3, #0
 8008026:	d00b      	beq.n	8008040 <pvPortMalloc+0xfc>
	__asm volatile
 8008028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800802c:	f383 8811 	msr	BASEPRI, r3
 8008030:	f3bf 8f6f 	isb	sy
 8008034:	f3bf 8f4f 	dsb	sy
 8008038:	613b      	str	r3, [r7, #16]
}
 800803a:	bf00      	nop
 800803c:	bf00      	nop
 800803e:	e7fd      	b.n	800803c <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008042:	685a      	ldr	r2, [r3, #4]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	1ad2      	subs	r2, r2, r3
 8008048:	69bb      	ldr	r3, [r7, #24]
 800804a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800804c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008052:	69b8      	ldr	r0, [r7, #24]
 8008054:	f000 f90a 	bl	800826c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008058:	4b1d      	ldr	r3, [pc, #116]	@ (80080d0 <pvPortMalloc+0x18c>)
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	1ad3      	subs	r3, r2, r3
 8008062:	4a1b      	ldr	r2, [pc, #108]	@ (80080d0 <pvPortMalloc+0x18c>)
 8008064:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008066:	4b1a      	ldr	r3, [pc, #104]	@ (80080d0 <pvPortMalloc+0x18c>)
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	4b1b      	ldr	r3, [pc, #108]	@ (80080d8 <pvPortMalloc+0x194>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	429a      	cmp	r2, r3
 8008070:	d203      	bcs.n	800807a <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008072:	4b17      	ldr	r3, [pc, #92]	@ (80080d0 <pvPortMalloc+0x18c>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a18      	ldr	r2, [pc, #96]	@ (80080d8 <pvPortMalloc+0x194>)
 8008078:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800807a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800807c:	685a      	ldr	r2, [r3, #4]
 800807e:	4b13      	ldr	r3, [pc, #76]	@ (80080cc <pvPortMalloc+0x188>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	431a      	orrs	r2, r3
 8008084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008086:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800808a:	2200      	movs	r2, #0
 800808c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800808e:	4b13      	ldr	r3, [pc, #76]	@ (80080dc <pvPortMalloc+0x198>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	3301      	adds	r3, #1
 8008094:	4a11      	ldr	r2, [pc, #68]	@ (80080dc <pvPortMalloc+0x198>)
 8008096:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008098:	f7fe fb62 	bl	8006760 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	f003 0307 	and.w	r3, r3, #7
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00b      	beq.n	80080be <pvPortMalloc+0x17a>
	__asm volatile
 80080a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080aa:	f383 8811 	msr	BASEPRI, r3
 80080ae:	f3bf 8f6f 	isb	sy
 80080b2:	f3bf 8f4f 	dsb	sy
 80080b6:	60fb      	str	r3, [r7, #12]
}
 80080b8:	bf00      	nop
 80080ba:	bf00      	nop
 80080bc:	e7fd      	b.n	80080ba <pvPortMalloc+0x176>
	return pvReturn;
 80080be:	69fb      	ldr	r3, [r7, #28]
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3728      	adds	r7, #40	@ 0x28
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	20004dac 	.word	0x20004dac
 80080cc:	20004dc0 	.word	0x20004dc0
 80080d0:	20004db0 	.word	0x20004db0
 80080d4:	20004da4 	.word	0x20004da4
 80080d8:	20004db4 	.word	0x20004db4
 80080dc:	20004db8 	.word	0x20004db8

080080e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b086      	sub	sp, #24
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d04f      	beq.n	8008192 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80080f2:	2308      	movs	r3, #8
 80080f4:	425b      	negs	r3, r3
 80080f6:	697a      	ldr	r2, [r7, #20]
 80080f8:	4413      	add	r3, r2
 80080fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	685a      	ldr	r2, [r3, #4]
 8008104:	4b25      	ldr	r3, [pc, #148]	@ (800819c <vPortFree+0xbc>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4013      	ands	r3, r2
 800810a:	2b00      	cmp	r3, #0
 800810c:	d10b      	bne.n	8008126 <vPortFree+0x46>
	__asm volatile
 800810e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008112:	f383 8811 	msr	BASEPRI, r3
 8008116:	f3bf 8f6f 	isb	sy
 800811a:	f3bf 8f4f 	dsb	sy
 800811e:	60fb      	str	r3, [r7, #12]
}
 8008120:	bf00      	nop
 8008122:	bf00      	nop
 8008124:	e7fd      	b.n	8008122 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00b      	beq.n	8008146 <vPortFree+0x66>
	__asm volatile
 800812e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008132:	f383 8811 	msr	BASEPRI, r3
 8008136:	f3bf 8f6f 	isb	sy
 800813a:	f3bf 8f4f 	dsb	sy
 800813e:	60bb      	str	r3, [r7, #8]
}
 8008140:	bf00      	nop
 8008142:	bf00      	nop
 8008144:	e7fd      	b.n	8008142 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	685a      	ldr	r2, [r3, #4]
 800814a:	4b14      	ldr	r3, [pc, #80]	@ (800819c <vPortFree+0xbc>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4013      	ands	r3, r2
 8008150:	2b00      	cmp	r3, #0
 8008152:	d01e      	beq.n	8008192 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d11a      	bne.n	8008192 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	685a      	ldr	r2, [r3, #4]
 8008160:	4b0e      	ldr	r3, [pc, #56]	@ (800819c <vPortFree+0xbc>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	43db      	mvns	r3, r3
 8008166:	401a      	ands	r2, r3
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800816c:	f7fe fab2 	bl	80066d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	685a      	ldr	r2, [r3, #4]
 8008174:	4b0a      	ldr	r3, [pc, #40]	@ (80081a0 <vPortFree+0xc0>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4413      	add	r3, r2
 800817a:	4a09      	ldr	r2, [pc, #36]	@ (80081a0 <vPortFree+0xc0>)
 800817c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800817e:	6938      	ldr	r0, [r7, #16]
 8008180:	f000 f874 	bl	800826c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008184:	4b07      	ldr	r3, [pc, #28]	@ (80081a4 <vPortFree+0xc4>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	3301      	adds	r3, #1
 800818a:	4a06      	ldr	r2, [pc, #24]	@ (80081a4 <vPortFree+0xc4>)
 800818c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800818e:	f7fe fae7 	bl	8006760 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008192:	bf00      	nop
 8008194:	3718      	adds	r7, #24
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	20004dc0 	.word	0x20004dc0
 80081a0:	20004db0 	.word	0x20004db0
 80081a4:	20004dbc 	.word	0x20004dbc

080081a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80081a8:	b480      	push	{r7}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80081ae:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80081b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80081b4:	4b27      	ldr	r3, [pc, #156]	@ (8008254 <prvHeapInit+0xac>)
 80081b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f003 0307 	and.w	r3, r3, #7
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00c      	beq.n	80081dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	3307      	adds	r3, #7
 80081c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f023 0307 	bic.w	r3, r3, #7
 80081ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80081d0:	68ba      	ldr	r2, [r7, #8]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	1ad3      	subs	r3, r2, r3
 80081d6:	4a1f      	ldr	r2, [pc, #124]	@ (8008254 <prvHeapInit+0xac>)
 80081d8:	4413      	add	r3, r2
 80081da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80081e0:	4a1d      	ldr	r2, [pc, #116]	@ (8008258 <prvHeapInit+0xb0>)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80081e6:	4b1c      	ldr	r3, [pc, #112]	@ (8008258 <prvHeapInit+0xb0>)
 80081e8:	2200      	movs	r2, #0
 80081ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	68ba      	ldr	r2, [r7, #8]
 80081f0:	4413      	add	r3, r2
 80081f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80081f4:	2208      	movs	r2, #8
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	1a9b      	subs	r3, r3, r2
 80081fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f023 0307 	bic.w	r3, r3, #7
 8008202:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	4a15      	ldr	r2, [pc, #84]	@ (800825c <prvHeapInit+0xb4>)
 8008208:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800820a:	4b14      	ldr	r3, [pc, #80]	@ (800825c <prvHeapInit+0xb4>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2200      	movs	r2, #0
 8008210:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008212:	4b12      	ldr	r3, [pc, #72]	@ (800825c <prvHeapInit+0xb4>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2200      	movs	r2, #0
 8008218:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	68fa      	ldr	r2, [r7, #12]
 8008222:	1ad2      	subs	r2, r2, r3
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008228:	4b0c      	ldr	r3, [pc, #48]	@ (800825c <prvHeapInit+0xb4>)
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	4a0a      	ldr	r2, [pc, #40]	@ (8008260 <prvHeapInit+0xb8>)
 8008236:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	4a09      	ldr	r2, [pc, #36]	@ (8008264 <prvHeapInit+0xbc>)
 800823e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008240:	4b09      	ldr	r3, [pc, #36]	@ (8008268 <prvHeapInit+0xc0>)
 8008242:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008246:	601a      	str	r2, [r3, #0]
}
 8008248:	bf00      	nop
 800824a:	3714      	adds	r7, #20
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr
 8008254:	200011a4 	.word	0x200011a4
 8008258:	20004da4 	.word	0x20004da4
 800825c:	20004dac 	.word	0x20004dac
 8008260:	20004db4 	.word	0x20004db4
 8008264:	20004db0 	.word	0x20004db0
 8008268:	20004dc0 	.word	0x20004dc0

0800826c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800826c:	b480      	push	{r7}
 800826e:	b085      	sub	sp, #20
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008274:	4b28      	ldr	r3, [pc, #160]	@ (8008318 <prvInsertBlockIntoFreeList+0xac>)
 8008276:	60fb      	str	r3, [r7, #12]
 8008278:	e002      	b.n	8008280 <prvInsertBlockIntoFreeList+0x14>
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	60fb      	str	r3, [r7, #12]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	429a      	cmp	r2, r3
 8008288:	d8f7      	bhi.n	800827a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	68ba      	ldr	r2, [r7, #8]
 8008294:	4413      	add	r3, r2
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	429a      	cmp	r2, r3
 800829a:	d108      	bne.n	80082ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	685a      	ldr	r2, [r3, #4]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	441a      	add	r2, r3
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	68ba      	ldr	r2, [r7, #8]
 80082b8:	441a      	add	r2, r3
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d118      	bne.n	80082f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	4b15      	ldr	r3, [pc, #84]	@ (800831c <prvInsertBlockIntoFreeList+0xb0>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d00d      	beq.n	80082ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	685a      	ldr	r2, [r3, #4]
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	441a      	add	r2, r3
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	601a      	str	r2, [r3, #0]
 80082e8:	e008      	b.n	80082fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80082ea:	4b0c      	ldr	r3, [pc, #48]	@ (800831c <prvInsertBlockIntoFreeList+0xb0>)
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	601a      	str	r2, [r3, #0]
 80082f2:	e003      	b.n	80082fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80082fc:	68fa      	ldr	r2, [r7, #12]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	429a      	cmp	r2, r3
 8008302:	d002      	beq.n	800830a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800830a:	bf00      	nop
 800830c:	3714      	adds	r7, #20
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr
 8008316:	bf00      	nop
 8008318:	20004da4 	.word	0x20004da4
 800831c:	20004dac 	.word	0x20004dac

08008320 <memset>:
 8008320:	4402      	add	r2, r0
 8008322:	4603      	mov	r3, r0
 8008324:	4293      	cmp	r3, r2
 8008326:	d100      	bne.n	800832a <memset+0xa>
 8008328:	4770      	bx	lr
 800832a:	f803 1b01 	strb.w	r1, [r3], #1
 800832e:	e7f9      	b.n	8008324 <memset+0x4>

08008330 <_reclaim_reent>:
 8008330:	4b29      	ldr	r3, [pc, #164]	@ (80083d8 <_reclaim_reent+0xa8>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4283      	cmp	r3, r0
 8008336:	b570      	push	{r4, r5, r6, lr}
 8008338:	4604      	mov	r4, r0
 800833a:	d04b      	beq.n	80083d4 <_reclaim_reent+0xa4>
 800833c:	69c3      	ldr	r3, [r0, #28]
 800833e:	b1ab      	cbz	r3, 800836c <_reclaim_reent+0x3c>
 8008340:	68db      	ldr	r3, [r3, #12]
 8008342:	b16b      	cbz	r3, 8008360 <_reclaim_reent+0x30>
 8008344:	2500      	movs	r5, #0
 8008346:	69e3      	ldr	r3, [r4, #28]
 8008348:	68db      	ldr	r3, [r3, #12]
 800834a:	5959      	ldr	r1, [r3, r5]
 800834c:	2900      	cmp	r1, #0
 800834e:	d13b      	bne.n	80083c8 <_reclaim_reent+0x98>
 8008350:	3504      	adds	r5, #4
 8008352:	2d80      	cmp	r5, #128	@ 0x80
 8008354:	d1f7      	bne.n	8008346 <_reclaim_reent+0x16>
 8008356:	69e3      	ldr	r3, [r4, #28]
 8008358:	4620      	mov	r0, r4
 800835a:	68d9      	ldr	r1, [r3, #12]
 800835c:	f000 f872 	bl	8008444 <_free_r>
 8008360:	69e3      	ldr	r3, [r4, #28]
 8008362:	6819      	ldr	r1, [r3, #0]
 8008364:	b111      	cbz	r1, 800836c <_reclaim_reent+0x3c>
 8008366:	4620      	mov	r0, r4
 8008368:	f000 f86c 	bl	8008444 <_free_r>
 800836c:	6961      	ldr	r1, [r4, #20]
 800836e:	b111      	cbz	r1, 8008376 <_reclaim_reent+0x46>
 8008370:	4620      	mov	r0, r4
 8008372:	f000 f867 	bl	8008444 <_free_r>
 8008376:	69e1      	ldr	r1, [r4, #28]
 8008378:	b111      	cbz	r1, 8008380 <_reclaim_reent+0x50>
 800837a:	4620      	mov	r0, r4
 800837c:	f000 f862 	bl	8008444 <_free_r>
 8008380:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008382:	b111      	cbz	r1, 800838a <_reclaim_reent+0x5a>
 8008384:	4620      	mov	r0, r4
 8008386:	f000 f85d 	bl	8008444 <_free_r>
 800838a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800838c:	b111      	cbz	r1, 8008394 <_reclaim_reent+0x64>
 800838e:	4620      	mov	r0, r4
 8008390:	f000 f858 	bl	8008444 <_free_r>
 8008394:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008396:	b111      	cbz	r1, 800839e <_reclaim_reent+0x6e>
 8008398:	4620      	mov	r0, r4
 800839a:	f000 f853 	bl	8008444 <_free_r>
 800839e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80083a0:	b111      	cbz	r1, 80083a8 <_reclaim_reent+0x78>
 80083a2:	4620      	mov	r0, r4
 80083a4:	f000 f84e 	bl	8008444 <_free_r>
 80083a8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80083aa:	b111      	cbz	r1, 80083b2 <_reclaim_reent+0x82>
 80083ac:	4620      	mov	r0, r4
 80083ae:	f000 f849 	bl	8008444 <_free_r>
 80083b2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80083b4:	b111      	cbz	r1, 80083bc <_reclaim_reent+0x8c>
 80083b6:	4620      	mov	r0, r4
 80083b8:	f000 f844 	bl	8008444 <_free_r>
 80083bc:	6a23      	ldr	r3, [r4, #32]
 80083be:	b14b      	cbz	r3, 80083d4 <_reclaim_reent+0xa4>
 80083c0:	4620      	mov	r0, r4
 80083c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80083c6:	4718      	bx	r3
 80083c8:	680e      	ldr	r6, [r1, #0]
 80083ca:	4620      	mov	r0, r4
 80083cc:	f000 f83a 	bl	8008444 <_free_r>
 80083d0:	4631      	mov	r1, r6
 80083d2:	e7bb      	b.n	800834c <_reclaim_reent+0x1c>
 80083d4:	bd70      	pop	{r4, r5, r6, pc}
 80083d6:	bf00      	nop
 80083d8:	20000020 	.word	0x20000020

080083dc <__libc_init_array>:
 80083dc:	b570      	push	{r4, r5, r6, lr}
 80083de:	4d0d      	ldr	r5, [pc, #52]	@ (8008414 <__libc_init_array+0x38>)
 80083e0:	4c0d      	ldr	r4, [pc, #52]	@ (8008418 <__libc_init_array+0x3c>)
 80083e2:	1b64      	subs	r4, r4, r5
 80083e4:	10a4      	asrs	r4, r4, #2
 80083e6:	2600      	movs	r6, #0
 80083e8:	42a6      	cmp	r6, r4
 80083ea:	d109      	bne.n	8008400 <__libc_init_array+0x24>
 80083ec:	4d0b      	ldr	r5, [pc, #44]	@ (800841c <__libc_init_array+0x40>)
 80083ee:	4c0c      	ldr	r4, [pc, #48]	@ (8008420 <__libc_init_array+0x44>)
 80083f0:	f000 f87e 	bl	80084f0 <_init>
 80083f4:	1b64      	subs	r4, r4, r5
 80083f6:	10a4      	asrs	r4, r4, #2
 80083f8:	2600      	movs	r6, #0
 80083fa:	42a6      	cmp	r6, r4
 80083fc:	d105      	bne.n	800840a <__libc_init_array+0x2e>
 80083fe:	bd70      	pop	{r4, r5, r6, pc}
 8008400:	f855 3b04 	ldr.w	r3, [r5], #4
 8008404:	4798      	blx	r3
 8008406:	3601      	adds	r6, #1
 8008408:	e7ee      	b.n	80083e8 <__libc_init_array+0xc>
 800840a:	f855 3b04 	ldr.w	r3, [r5], #4
 800840e:	4798      	blx	r3
 8008410:	3601      	adds	r6, #1
 8008412:	e7f2      	b.n	80083fa <__libc_init_array+0x1e>
 8008414:	08008704 	.word	0x08008704
 8008418:	08008704 	.word	0x08008704
 800841c:	08008704 	.word	0x08008704
 8008420:	08008708 	.word	0x08008708

08008424 <__retarget_lock_acquire_recursive>:
 8008424:	4770      	bx	lr

08008426 <__retarget_lock_release_recursive>:
 8008426:	4770      	bx	lr

08008428 <memcpy>:
 8008428:	440a      	add	r2, r1
 800842a:	4291      	cmp	r1, r2
 800842c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008430:	d100      	bne.n	8008434 <memcpy+0xc>
 8008432:	4770      	bx	lr
 8008434:	b510      	push	{r4, lr}
 8008436:	f811 4b01 	ldrb.w	r4, [r1], #1
 800843a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800843e:	4291      	cmp	r1, r2
 8008440:	d1f9      	bne.n	8008436 <memcpy+0xe>
 8008442:	bd10      	pop	{r4, pc}

08008444 <_free_r>:
 8008444:	b538      	push	{r3, r4, r5, lr}
 8008446:	4605      	mov	r5, r0
 8008448:	2900      	cmp	r1, #0
 800844a:	d041      	beq.n	80084d0 <_free_r+0x8c>
 800844c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008450:	1f0c      	subs	r4, r1, #4
 8008452:	2b00      	cmp	r3, #0
 8008454:	bfb8      	it	lt
 8008456:	18e4      	addlt	r4, r4, r3
 8008458:	f000 f83e 	bl	80084d8 <__malloc_lock>
 800845c:	4a1d      	ldr	r2, [pc, #116]	@ (80084d4 <_free_r+0x90>)
 800845e:	6813      	ldr	r3, [r2, #0]
 8008460:	b933      	cbnz	r3, 8008470 <_free_r+0x2c>
 8008462:	6063      	str	r3, [r4, #4]
 8008464:	6014      	str	r4, [r2, #0]
 8008466:	4628      	mov	r0, r5
 8008468:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800846c:	f000 b83a 	b.w	80084e4 <__malloc_unlock>
 8008470:	42a3      	cmp	r3, r4
 8008472:	d908      	bls.n	8008486 <_free_r+0x42>
 8008474:	6820      	ldr	r0, [r4, #0]
 8008476:	1821      	adds	r1, r4, r0
 8008478:	428b      	cmp	r3, r1
 800847a:	bf01      	itttt	eq
 800847c:	6819      	ldreq	r1, [r3, #0]
 800847e:	685b      	ldreq	r3, [r3, #4]
 8008480:	1809      	addeq	r1, r1, r0
 8008482:	6021      	streq	r1, [r4, #0]
 8008484:	e7ed      	b.n	8008462 <_free_r+0x1e>
 8008486:	461a      	mov	r2, r3
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	b10b      	cbz	r3, 8008490 <_free_r+0x4c>
 800848c:	42a3      	cmp	r3, r4
 800848e:	d9fa      	bls.n	8008486 <_free_r+0x42>
 8008490:	6811      	ldr	r1, [r2, #0]
 8008492:	1850      	adds	r0, r2, r1
 8008494:	42a0      	cmp	r0, r4
 8008496:	d10b      	bne.n	80084b0 <_free_r+0x6c>
 8008498:	6820      	ldr	r0, [r4, #0]
 800849a:	4401      	add	r1, r0
 800849c:	1850      	adds	r0, r2, r1
 800849e:	4283      	cmp	r3, r0
 80084a0:	6011      	str	r1, [r2, #0]
 80084a2:	d1e0      	bne.n	8008466 <_free_r+0x22>
 80084a4:	6818      	ldr	r0, [r3, #0]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	6053      	str	r3, [r2, #4]
 80084aa:	4408      	add	r0, r1
 80084ac:	6010      	str	r0, [r2, #0]
 80084ae:	e7da      	b.n	8008466 <_free_r+0x22>
 80084b0:	d902      	bls.n	80084b8 <_free_r+0x74>
 80084b2:	230c      	movs	r3, #12
 80084b4:	602b      	str	r3, [r5, #0]
 80084b6:	e7d6      	b.n	8008466 <_free_r+0x22>
 80084b8:	6820      	ldr	r0, [r4, #0]
 80084ba:	1821      	adds	r1, r4, r0
 80084bc:	428b      	cmp	r3, r1
 80084be:	bf04      	itt	eq
 80084c0:	6819      	ldreq	r1, [r3, #0]
 80084c2:	685b      	ldreq	r3, [r3, #4]
 80084c4:	6063      	str	r3, [r4, #4]
 80084c6:	bf04      	itt	eq
 80084c8:	1809      	addeq	r1, r1, r0
 80084ca:	6021      	streq	r1, [r4, #0]
 80084cc:	6054      	str	r4, [r2, #4]
 80084ce:	e7ca      	b.n	8008466 <_free_r+0x22>
 80084d0:	bd38      	pop	{r3, r4, r5, pc}
 80084d2:	bf00      	nop
 80084d4:	20004f00 	.word	0x20004f00

080084d8 <__malloc_lock>:
 80084d8:	4801      	ldr	r0, [pc, #4]	@ (80084e0 <__malloc_lock+0x8>)
 80084da:	f7ff bfa3 	b.w	8008424 <__retarget_lock_acquire_recursive>
 80084de:	bf00      	nop
 80084e0:	20004efc 	.word	0x20004efc

080084e4 <__malloc_unlock>:
 80084e4:	4801      	ldr	r0, [pc, #4]	@ (80084ec <__malloc_unlock+0x8>)
 80084e6:	f7ff bf9e 	b.w	8008426 <__retarget_lock_release_recursive>
 80084ea:	bf00      	nop
 80084ec:	20004efc 	.word	0x20004efc

080084f0 <_init>:
 80084f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084f2:	bf00      	nop
 80084f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084f6:	bc08      	pop	{r3}
 80084f8:	469e      	mov	lr, r3
 80084fa:	4770      	bx	lr

080084fc <_fini>:
 80084fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084fe:	bf00      	nop
 8008500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008502:	bc08      	pop	{r3}
 8008504:	469e      	mov	lr, r3
 8008506:	4770      	bx	lr
