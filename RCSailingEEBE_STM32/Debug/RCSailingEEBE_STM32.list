
RCSailingEEBE_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc40  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a0  0800dde0  0800dde0  0000ede0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e680  0800e680  000101f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e680  0800e680  0000f680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e688  0800e688  000101f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e688  0800e688  0000f688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e68c  0800e68c  0000f68c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800e690  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e98  200001f4  0800e884  000101f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000508c  0800e884  0001108c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000213a2  00000000  00000000  00010224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f00  00000000  00000000  000315c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001be8  00000000  00000000  000364c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000159b  00000000  00000000  000380b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d4d2  00000000  00000000  0003964b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022355  00000000  00000000  00056b1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aa12a  00000000  00000000  00078e72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00122f9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000085c0  00000000  00000000  00122fe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0012b5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ddc8 	.word	0x0800ddc8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	0800ddc8 	.word	0x0800ddc8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <adc_read>:
float extra1Offset = 0.0f;

float extra2Gain = 1.0f;
float extra2Offset = 0.0f;

void adc_read(void) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
    // Start ADC conversion using DMA
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_raw_readings, 4);
 8000f4e:	2204      	movs	r2, #4
 8000f50:	492d      	ldr	r1, [pc, #180]	@ (8001008 <adc_read+0xc0>)
 8000f52:	482e      	ldr	r0, [pc, #184]	@ (800100c <adc_read+0xc4>)
 8000f54:	f002 f988 	bl	8003268 <HAL_ADC_Start_DMA>

    // Create a struct to hold the processed ADC data
    AdcData_t adcDataSent;
    adcDataSent.windDirection = ((float)adc_raw_readings[0] * windDirectionGain) - windDirectionOffset;
 8000f58:	4b2b      	ldr	r3, [pc, #172]	@ (8001008 <adc_read+0xc0>)
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	ee07 3a90 	vmov	s15, r3
 8000f62:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f66:	4b2a      	ldr	r3, [pc, #168]	@ (8001010 <adc_read+0xc8>)
 8000f68:	edd3 7a00 	vldr	s15, [r3]
 8000f6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f70:	4b28      	ldr	r3, [pc, #160]	@ (8001014 <adc_read+0xcc>)
 8000f72:	edd3 7a00 	vldr	s15, [r3]
 8000f76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f7a:	edc7 7a00 	vstr	s15, [r7]
    adcDataSent.batteryVoltage = ((float)adc_raw_readings[1] * batteryVoltageGain) - batteryVoltageOffset;
 8000f7e:	4b22      	ldr	r3, [pc, #136]	@ (8001008 <adc_read+0xc0>)
 8000f80:	885b      	ldrh	r3, [r3, #2]
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	ee07 3a90 	vmov	s15, r3
 8000f88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f8c:	4b22      	ldr	r3, [pc, #136]	@ (8001018 <adc_read+0xd0>)
 8000f8e:	edd3 7a00 	vldr	s15, [r3]
 8000f92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f96:	4b21      	ldr	r3, [pc, #132]	@ (800101c <adc_read+0xd4>)
 8000f98:	edd3 7a00 	vldr	s15, [r3]
 8000f9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fa0:	edc7 7a01 	vstr	s15, [r7, #4]
    adcDataSent.extra1 = ((float)adc_raw_readings[2] * extra1Gain) - extra1Offset;
 8000fa4:	4b18      	ldr	r3, [pc, #96]	@ (8001008 <adc_read+0xc0>)
 8000fa6:	889b      	ldrh	r3, [r3, #4]
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	ee07 3a90 	vmov	s15, r3
 8000fae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fb2:	4b1b      	ldr	r3, [pc, #108]	@ (8001020 <adc_read+0xd8>)
 8000fb4:	edd3 7a00 	vldr	s15, [r3]
 8000fb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fbc:	4b19      	ldr	r3, [pc, #100]	@ (8001024 <adc_read+0xdc>)
 8000fbe:	edd3 7a00 	vldr	s15, [r3]
 8000fc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fc6:	edc7 7a02 	vstr	s15, [r7, #8]
    adcDataSent.extra2 = ((float)adc_raw_readings[3] * extra2Gain) - extra2Offset;
 8000fca:	4b0f      	ldr	r3, [pc, #60]	@ (8001008 <adc_read+0xc0>)
 8000fcc:	88db      	ldrh	r3, [r3, #6]
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	ee07 3a90 	vmov	s15, r3
 8000fd4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fd8:	4b13      	ldr	r3, [pc, #76]	@ (8001028 <adc_read+0xe0>)
 8000fda:	edd3 7a00 	vldr	s15, [r3]
 8000fde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fe2:	4b12      	ldr	r3, [pc, #72]	@ (800102c <adc_read+0xe4>)
 8000fe4:	edd3 7a00 	vldr	s15, [r3]
 8000fe8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fec:	edc7 7a03 	vstr	s15, [r7, #12]

    // Send the struct to the ADC queue, overwriting previous value if full
    osMessageQueuePut(adcQueueHandle, &adcDataSent, 0, 0);
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8001030 <adc_read+0xe8>)
 8000ff2:	6818      	ldr	r0, [r3, #0]
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f006 ff75 	bl	8007ee8 <osMessageQueuePut>
}
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000210 	.word	0x20000210
 800100c:	2000022c 	.word	0x2000022c
 8001010:	20000000 	.word	0x20000000
 8001014:	20000218 	.word	0x20000218
 8001018:	20000004 	.word	0x20000004
 800101c:	2000021c 	.word	0x2000021c
 8001020:	20000008 	.word	0x20000008
 8001024:	20000220 	.word	0x20000220
 8001028:	2000000c 	.word	0x2000000c
 800102c:	20000224 	.word	0x20000224
 8001030:	20000300 	.word	0x20000300

08001034 <control>:
 *      Author: dweggg
 */

#include "CONTROL.h"

void control(void) {
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0

}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
	...

08001044 <bno055_writeData>:
#else
  HAL_Delay(time);
#endif
}

void bno055_writeData(uint8_t reg, uint8_t data) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af02      	add	r7, sp, #8
 800104a:	4603      	mov	r3, r0
 800104c:	460a      	mov	r2, r1
 800104e:	71fb      	strb	r3, [r7, #7]
 8001050:	4613      	mov	r3, r2
 8001052:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	733b      	strb	r3, [r7, #12]
 8001058:	79bb      	ldrb	r3, [r7, #6]
 800105a:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 800105c:	4b5a      	ldr	r3, [pc, #360]	@ (80011c8 <bno055_writeData+0x184>)
 800105e:	6818      	ldr	r0, [r3, #0]
 8001060:	f107 020c 	add.w	r2, r7, #12
 8001064:	230a      	movs	r3, #10
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	2302      	movs	r3, #2
 800106a:	2150      	movs	r1, #80	@ 0x50
 800106c:	f003 fbc4 	bl	80047f8 <HAL_I2C_Master_Transmit>
 8001070:	4603      	mov	r3, r0
 8001072:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8001074:	7dfb      	ldrb	r3, [r7, #23]
 8001076:	2b00      	cmp	r3, #0
 8001078:	f000 80a0 	beq.w	80011bc <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 800107c:	7dfb      	ldrb	r3, [r7, #23]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d103      	bne.n	800108a <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8001082:	4852      	ldr	r0, [pc, #328]	@ (80011cc <bno055_writeData+0x188>)
 8001084:	f00a fcfe 	bl	800ba84 <puts>
 8001088:	e012      	b.n	80010b0 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 800108a:	7dfb      	ldrb	r3, [r7, #23]
 800108c:	2b03      	cmp	r3, #3
 800108e:	d103      	bne.n	8001098 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8001090:	484f      	ldr	r0, [pc, #316]	@ (80011d0 <bno055_writeData+0x18c>)
 8001092:	f00a fcf7 	bl	800ba84 <puts>
 8001096:	e00b      	b.n	80010b0 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8001098:	7dfb      	ldrb	r3, [r7, #23]
 800109a:	2b02      	cmp	r3, #2
 800109c:	d103      	bne.n	80010a6 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 800109e:	484d      	ldr	r0, [pc, #308]	@ (80011d4 <bno055_writeData+0x190>)
 80010a0:	f00a fcf0 	bl	800ba84 <puts>
 80010a4:	e004      	b.n	80010b0 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 80010a6:	7dfb      	ldrb	r3, [r7, #23]
 80010a8:	4619      	mov	r1, r3
 80010aa:	484b      	ldr	r0, [pc, #300]	@ (80011d8 <bno055_writeData+0x194>)
 80010ac:	f00a fc82 	bl	800b9b4 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 80010b0:	4b45      	ldr	r3, [pc, #276]	@ (80011c8 <bno055_writeData+0x184>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f003 fedd 	bl	8004e74 <HAL_I2C_GetError>
 80010ba:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d07e      	beq.n	80011c0 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d103      	bne.n	80010d0 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 80010c8:	4844      	ldr	r0, [pc, #272]	@ (80011dc <bno055_writeData+0x198>)
 80010ca:	f00a fcdb 	bl	800ba84 <puts>
 80010ce:	e021      	b.n	8001114 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d103      	bne.n	80010de <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 80010d6:	4842      	ldr	r0, [pc, #264]	@ (80011e0 <bno055_writeData+0x19c>)
 80010d8:	f00a fcd4 	bl	800ba84 <puts>
 80010dc:	e01a      	b.n	8001114 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	2b04      	cmp	r3, #4
 80010e2:	d103      	bne.n	80010ec <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 80010e4:	483f      	ldr	r0, [pc, #252]	@ (80011e4 <bno055_writeData+0x1a0>)
 80010e6:	f00a fccd 	bl	800ba84 <puts>
 80010ea:	e013      	b.n	8001114 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	2b08      	cmp	r3, #8
 80010f0:	d103      	bne.n	80010fa <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 80010f2:	483d      	ldr	r0, [pc, #244]	@ (80011e8 <bno055_writeData+0x1a4>)
 80010f4:	f00a fcc6 	bl	800ba84 <puts>
 80010f8:	e00c      	b.n	8001114 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	2b10      	cmp	r3, #16
 80010fe:	d103      	bne.n	8001108 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8001100:	483a      	ldr	r0, [pc, #232]	@ (80011ec <bno055_writeData+0x1a8>)
 8001102:	f00a fcbf 	bl	800ba84 <puts>
 8001106:	e005      	b.n	8001114 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	2b20      	cmp	r3, #32
 800110c:	d102      	bne.n	8001114 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 800110e:	4838      	ldr	r0, [pc, #224]	@ (80011f0 <bno055_writeData+0x1ac>)
 8001110:	f00a fcb8 	bl	800ba84 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001114:	4b2c      	ldr	r3, [pc, #176]	@ (80011c8 <bno055_writeData+0x184>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4618      	mov	r0, r3
 800111a:	f003 fe9d 	bl	8004e58 <HAL_I2C_GetState>
 800111e:	4603      	mov	r3, r0
 8001120:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d103      	bne.n	8001130 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001128:	4832      	ldr	r0, [pc, #200]	@ (80011f4 <bno055_writeData+0x1b0>)
 800112a:	f00a fcab 	bl	800ba84 <puts>
 800112e:	e048      	b.n	80011c2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	2b20      	cmp	r3, #32
 8001134:	d103      	bne.n	800113e <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001136:	482f      	ldr	r0, [pc, #188]	@ (80011f4 <bno055_writeData+0x1b0>)
 8001138:	f00a fca4 	bl	800ba84 <puts>
 800113c:	e041      	b.n	80011c2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 800113e:	7bfb      	ldrb	r3, [r7, #15]
 8001140:	2b24      	cmp	r3, #36	@ 0x24
 8001142:	d103      	bne.n	800114c <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8001144:	482c      	ldr	r0, [pc, #176]	@ (80011f8 <bno055_writeData+0x1b4>)
 8001146:	f00a fc9d 	bl	800ba84 <puts>
 800114a:	e03a      	b.n	80011c2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 800114c:	7bfb      	ldrb	r3, [r7, #15]
 800114e:	2b21      	cmp	r3, #33	@ 0x21
 8001150:	d103      	bne.n	800115a <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8001152:	482a      	ldr	r0, [pc, #168]	@ (80011fc <bno055_writeData+0x1b8>)
 8001154:	f00a fc96 	bl	800ba84 <puts>
 8001158:	e033      	b.n	80011c2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 800115a:	7bfb      	ldrb	r3, [r7, #15]
 800115c:	2b22      	cmp	r3, #34	@ 0x22
 800115e:	d103      	bne.n	8001168 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8001160:	4827      	ldr	r0, [pc, #156]	@ (8001200 <bno055_writeData+0x1bc>)
 8001162:	f00a fc8f 	bl	800ba84 <puts>
 8001166:	e02c      	b.n	80011c2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	2b28      	cmp	r3, #40	@ 0x28
 800116c:	d103      	bne.n	8001176 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 800116e:	4825      	ldr	r0, [pc, #148]	@ (8001204 <bno055_writeData+0x1c0>)
 8001170:	f00a fc88 	bl	800ba84 <puts>
 8001174:	e025      	b.n	80011c2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	2b29      	cmp	r3, #41	@ 0x29
 800117a:	d103      	bne.n	8001184 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 800117c:	4822      	ldr	r0, [pc, #136]	@ (8001208 <bno055_writeData+0x1c4>)
 800117e:	f00a fc81 	bl	800ba84 <puts>
 8001182:	e01e      	b.n	80011c2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8001184:	7bfb      	ldrb	r3, [r7, #15]
 8001186:	2b2a      	cmp	r3, #42	@ 0x2a
 8001188:	d103      	bne.n	8001192 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 800118a:	4820      	ldr	r0, [pc, #128]	@ (800120c <bno055_writeData+0x1c8>)
 800118c:	f00a fc7a 	bl	800ba84 <puts>
 8001190:	e017      	b.n	80011c2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	2b60      	cmp	r3, #96	@ 0x60
 8001196:	d103      	bne.n	80011a0 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8001198:	481d      	ldr	r0, [pc, #116]	@ (8001210 <bno055_writeData+0x1cc>)
 800119a:	f00a fc73 	bl	800ba84 <puts>
 800119e:	e010      	b.n	80011c2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	2ba0      	cmp	r3, #160	@ 0xa0
 80011a4:	d103      	bne.n	80011ae <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 80011a6:	481b      	ldr	r0, [pc, #108]	@ (8001214 <bno055_writeData+0x1d0>)
 80011a8:	f00a fc6c 	bl	800ba84 <puts>
 80011ac:	e009      	b.n	80011c2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
 80011b0:	2be0      	cmp	r3, #224	@ 0xe0
 80011b2:	d106      	bne.n	80011c2 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 80011b4:	4818      	ldr	r0, [pc, #96]	@ (8001218 <bno055_writeData+0x1d4>)
 80011b6:	f00a fc65 	bl	800ba84 <puts>
 80011ba:	e002      	b.n	80011c2 <bno055_writeData+0x17e>
    return;
 80011bc:	bf00      	nop
 80011be:	e000      	b.n	80011c2 <bno055_writeData+0x17e>
    return;
 80011c0:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000228 	.word	0x20000228
 80011cc:	0800dde0 	.word	0x0800dde0
 80011d0:	0800de04 	.word	0x0800de04
 80011d4:	0800de2c 	.word	0x0800de2c
 80011d8:	0800de50 	.word	0x0800de50
 80011dc:	0800de68 	.word	0x0800de68
 80011e0:	0800de7c 	.word	0x0800de7c
 80011e4:	0800de90 	.word	0x0800de90
 80011e8:	0800dea4 	.word	0x0800dea4
 80011ec:	0800deb8 	.word	0x0800deb8
 80011f0:	0800decc 	.word	0x0800decc
 80011f4:	0800dee4 	.word	0x0800dee4
 80011f8:	0800defc 	.word	0x0800defc
 80011fc:	0800df10 	.word	0x0800df10
 8001200:	0800df28 	.word	0x0800df28
 8001204:	0800df40 	.word	0x0800df40
 8001208:	0800df58 	.word	0x0800df58
 800120c:	0800df78 	.word	0x0800df78
 8001210:	0800df98 	.word	0x0800df98
 8001214:	0800dfb0 	.word	0x0800dfb0
 8001218:	0800dfc8 	.word	0x0800dfc8

0800121c <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af02      	add	r7, sp, #8
 8001222:	4603      	mov	r3, r0
 8001224:	6039      	str	r1, [r7, #0]
 8001226:	71fb      	strb	r3, [r7, #7]
 8001228:	4613      	mov	r3, r2
 800122a:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 800122c:	4b0b      	ldr	r3, [pc, #44]	@ (800125c <bno055_readData+0x40>)
 800122e:	6818      	ldr	r0, [r3, #0]
 8001230:	1dfa      	adds	r2, r7, #7
 8001232:	2364      	movs	r3, #100	@ 0x64
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	2301      	movs	r3, #1
 8001238:	2150      	movs	r1, #80	@ 0x50
 800123a:	f003 fadd 	bl	80047f8 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 800123e:	4b07      	ldr	r3, [pc, #28]	@ (800125c <bno055_readData+0x40>)
 8001240:	6818      	ldr	r0, [r3, #0]
 8001242:	79bb      	ldrb	r3, [r7, #6]
 8001244:	b29b      	uxth	r3, r3
 8001246:	2264      	movs	r2, #100	@ 0x64
 8001248:	9200      	str	r2, [sp, #0]
 800124a:	683a      	ldr	r2, [r7, #0]
 800124c:	2150      	movs	r1, #80	@ 0x50
 800124e:	f003 fbd1 	bl	80049f4 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000228 	.word	0x20000228

08001260 <imu_read>:
#include "IMU.h"
#include "bno055_stm32.h"  // Library from https://github.com/ivyknob/bno055_stm32
#include "cmsis_os.h"      // For osMessageQueuePut
extern osMessageQueueId_t imuQueueHandle;

void imu_read(void){
 8001260:	b580      	push	{r7, lr}
 8001262:	b0ac      	sub	sp, #176	@ 0xb0
 8001264:	af00      	add	r7, sp, #0
    ImuData_t imuData = {0};
 8001266:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800126a:	2230      	movs	r2, #48	@ 0x30
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f00a fd1c 	bl	800bcac <memset>

    // Get fused Euler angles from the BNO055 sensor.
    // In the library’s example, bno055_getVectorEuler() returns a bno055_vector_t with:
    //   x = Heading, y = Roll, and z = Pitch.
    bno055_vector_t euler = bno055_getVectorEuler();
 8001274:	f000 ff67 	bl	8002146 <bno055_getVectorEuler>
 8001278:	eeb0 4a40 	vmov.f32	s8, s0
 800127c:	eef0 4a60 	vmov.f32	s9, s1
 8001280:	eeb0 5a41 	vmov.f32	s10, s2
 8001284:	eef0 5a61 	vmov.f32	s11, s3
 8001288:	eeb0 6a42 	vmov.f32	s12, s4
 800128c:	eef0 6a62 	vmov.f32	s13, s5
 8001290:	eeb0 7a43 	vmov.f32	s14, s6
 8001294:	eef0 7a63 	vmov.f32	s15, s7
 8001298:	ed87 4b18 	vstr	d4, [r7, #96]	@ 0x60
 800129c:	ed87 5b1a 	vstr	d5, [r7, #104]	@ 0x68
 80012a0:	ed87 6b1c 	vstr	d6, [r7, #112]	@ 0x70
 80012a4:	ed87 7b1e 	vstr	d7, [r7, #120]	@ 0x78

    // Map the Euler angles to our IMU data structure:
    imuData.yaw   = euler.x;  // Heading
 80012a8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80012ac:	4610      	mov	r0, r2
 80012ae:	4619      	mov	r1, r3
 80012b0:	f7ff fc82 	bl	8000bb8 <__aeabi_d2f>
 80012b4:	4603      	mov	r3, r0
 80012b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    imuData.roll  = euler.y;
 80012ba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80012be:	4610      	mov	r0, r2
 80012c0:	4619      	mov	r1, r3
 80012c2:	f7ff fc79 	bl	8000bb8 <__aeabi_d2f>
 80012c6:	4603      	mov	r3, r0
 80012c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    imuData.pitch = euler.z;
 80012cc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80012d0:	4610      	mov	r0, r2
 80012d2:	4619      	mov	r1, r3
 80012d4:	f7ff fc70 	bl	8000bb8 <__aeabi_d2f>
 80012d8:	4603      	mov	r3, r0
 80012da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

    bno055_vector_t accel = bno055_getVectorAccelerometer();
 80012de:	f000 fe69 	bl	8001fb4 <bno055_getVectorAccelerometer>
 80012e2:	eeb0 4a40 	vmov.f32	s8, s0
 80012e6:	eef0 4a60 	vmov.f32	s9, s1
 80012ea:	eeb0 5a41 	vmov.f32	s10, s2
 80012ee:	eef0 5a61 	vmov.f32	s11, s3
 80012f2:	eeb0 6a42 	vmov.f32	s12, s4
 80012f6:	eef0 6a62 	vmov.f32	s13, s5
 80012fa:	eeb0 7a43 	vmov.f32	s14, s6
 80012fe:	eef0 7a63 	vmov.f32	s15, s7
 8001302:	ed87 4b10 	vstr	d4, [r7, #64]	@ 0x40
 8001306:	ed87 5b12 	vstr	d5, [r7, #72]	@ 0x48
 800130a:	ed87 6b14 	vstr	d6, [r7, #80]	@ 0x50
 800130e:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58

    imuData.accelX = accel.x;
 8001312:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001316:	4610      	mov	r0, r2
 8001318:	4619      	mov	r1, r3
 800131a:	f7ff fc4d 	bl	8000bb8 <__aeabi_d2f>
 800131e:	4603      	mov	r3, r0
 8001320:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    imuData.accelY = accel.y;
 8001324:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001328:	4610      	mov	r0, r2
 800132a:	4619      	mov	r1, r3
 800132c:	f7ff fc44 	bl	8000bb8 <__aeabi_d2f>
 8001330:	4603      	mov	r3, r0
 8001332:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    imuData.accelZ = accel.z;
 8001336:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800133a:	4610      	mov	r0, r2
 800133c:	4619      	mov	r1, r3
 800133e:	f7ff fc3b 	bl	8000bb8 <__aeabi_d2f>
 8001342:	4603      	mov	r3, r0
 8001344:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    bno055_vector_t gyro = bno055_getVectorGyroscope();
 8001348:	f000 feba 	bl	80020c0 <bno055_getVectorGyroscope>
 800134c:	eeb0 4a40 	vmov.f32	s8, s0
 8001350:	eef0 4a60 	vmov.f32	s9, s1
 8001354:	eeb0 5a41 	vmov.f32	s10, s2
 8001358:	eef0 5a61 	vmov.f32	s11, s3
 800135c:	eeb0 6a42 	vmov.f32	s12, s4
 8001360:	eef0 6a62 	vmov.f32	s13, s5
 8001364:	eeb0 7a43 	vmov.f32	s14, s6
 8001368:	eef0 7a63 	vmov.f32	s15, s7
 800136c:	ed87 4b08 	vstr	d4, [r7, #32]
 8001370:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8001374:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8001378:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
    imuData.gyroX = gyro.x;
 800137c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001380:	4610      	mov	r0, r2
 8001382:	4619      	mov	r1, r3
 8001384:	f7ff fc18 	bl	8000bb8 <__aeabi_d2f>
 8001388:	4603      	mov	r3, r0
 800138a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    imuData.gyroY = gyro.y;
 800138e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001392:	4610      	mov	r0, r2
 8001394:	4619      	mov	r1, r3
 8001396:	f7ff fc0f 	bl	8000bb8 <__aeabi_d2f>
 800139a:	4603      	mov	r3, r0
 800139c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    imuData.gyroZ = gyro.z;
 80013a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80013a4:	4610      	mov	r0, r2
 80013a6:	4619      	mov	r1, r3
 80013a8:	f7ff fc06 	bl	8000bb8 <__aeabi_d2f>
 80013ac:	4603      	mov	r3, r0
 80013ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

    bno055_vector_t mag = bno055_getVectorMagnetometer();
 80013b2:	f000 fe42 	bl	800203a <bno055_getVectorMagnetometer>
 80013b6:	eeb0 4a40 	vmov.f32	s8, s0
 80013ba:	eef0 4a60 	vmov.f32	s9, s1
 80013be:	eeb0 5a41 	vmov.f32	s10, s2
 80013c2:	eef0 5a61 	vmov.f32	s11, s3
 80013c6:	eeb0 6a42 	vmov.f32	s12, s4
 80013ca:	eef0 6a62 	vmov.f32	s13, s5
 80013ce:	eeb0 7a43 	vmov.f32	s14, s6
 80013d2:	eef0 7a63 	vmov.f32	s15, s7
 80013d6:	ed87 4b00 	vstr	d4, [r7]
 80013da:	ed87 5b02 	vstr	d5, [r7, #8]
 80013de:	ed87 6b04 	vstr	d6, [r7, #16]
 80013e2:	ed87 7b06 	vstr	d7, [r7, #24]
    imuData.magX = mag.x;
 80013e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013ea:	4610      	mov	r0, r2
 80013ec:	4619      	mov	r1, r3
 80013ee:	f7ff fbe3 	bl	8000bb8 <__aeabi_d2f>
 80013f2:	4603      	mov	r3, r0
 80013f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    imuData.magY = mag.y;
 80013f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013fc:	4610      	mov	r0, r2
 80013fe:	4619      	mov	r1, r3
 8001400:	f7ff fbda 	bl	8000bb8 <__aeabi_d2f>
 8001404:	4603      	mov	r3, r0
 8001406:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    imuData.magZ = mag.z;
 800140a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800140e:	4610      	mov	r0, r2
 8001410:	4619      	mov	r1, r3
 8001412:	f7ff fbd1 	bl	8000bb8 <__aeabi_d2f>
 8001416:	4603      	mov	r3, r0
 8001418:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

    // Post the sensor data to the message queue.
    osMessageQueuePut(imuQueueHandle, &imuData, 0, 0);
 800141c:	4b05      	ldr	r3, [pc, #20]	@ (8001434 <imu_read+0x1d4>)
 800141e:	6818      	ldr	r0, [r3, #0]
 8001420:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 8001424:	2300      	movs	r3, #0
 8001426:	2200      	movs	r2, #0
 8001428:	f006 fd5e 	bl	8007ee8 <osMessageQueuePut>
}
 800142c:	bf00      	nop
 800142e:	37b0      	adds	r7, #176	@ 0xb0
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000304 	.word	0x20000304

08001438 <telemetry>:
extern osMessageQueueId_t adcQueueHandle;
extern osMessageQueueId_t imuQueueHandle;
extern osMessageQueueId_t radioQueueHandle;
extern osMessageQueueId_t controlQueueHandle;

void telemetry(void) {
 8001438:	b580      	push	{r7, lr}
 800143a:	b0bc      	sub	sp, #240	@ 0xf0
 800143c:	af02      	add	r7, sp, #8
    ImuData_t imuDataReceived;
    RadioData_t radioDataReceived;
    ControlData_t controlDataReceived;

    for (;;) {
        if (osMessageQueueGetCount(imuQueueHandle) > 0) {
 800143e:	4bca      	ldr	r3, [pc, #808]	@ (8001768 <telemetry+0x330>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f006 fe0e 	bl	8008064 <osMessageQueueGetCount>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d078      	beq.n	8001540 <telemetry+0x108>
			// Get ADC Data
        	osMessageQueueGet(adcQueueHandle, (void*)&adcDataReceived, NULL, osWaitForever);
 800144e:	4bc7      	ldr	r3, [pc, #796]	@ (800176c <telemetry+0x334>)
 8001450:	6818      	ldr	r0, [r3, #0]
 8001452:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8001456:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800145a:	2200      	movs	r2, #0
 800145c:	f006 fda4 	bl	8007fa8 <osMessageQueueGet>
            // Send ADC Data
            snprintf(uartBuffer, sizeof(uartBuffer), "DIR: %.2f\r\n", adcDataReceived.windDirection);
 8001460:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff f878 	bl	8000558 <__aeabi_f2d>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8001470:	e9cd 2300 	strd	r2, r3, [sp]
 8001474:	4abe      	ldr	r2, [pc, #760]	@ (8001770 <telemetry+0x338>)
 8001476:	2180      	movs	r1, #128	@ 0x80
 8001478:	f00a fb0c 	bl	800ba94 <sniprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 800147c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001480:	4618      	mov	r0, r3
 8001482:	f7fe fefd 	bl	8000280 <strlen>
 8001486:	4603      	mov	r3, r0
 8001488:	b29a      	uxth	r2, r3
 800148a:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 800148e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001492:	48b8      	ldr	r0, [pc, #736]	@ (8001774 <telemetry+0x33c>)
 8001494:	f005 ffbe 	bl	8007414 <HAL_UART_Transmit>
            snprintf(uartBuffer, sizeof(uartBuffer), "BAT: %.2f\r\n", adcDataReceived.batteryVoltage);
 8001498:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff f85c 	bl	8000558 <__aeabi_f2d>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 80014a8:	e9cd 2300 	strd	r2, r3, [sp]
 80014ac:	4ab2      	ldr	r2, [pc, #712]	@ (8001778 <telemetry+0x340>)
 80014ae:	2180      	movs	r1, #128	@ 0x80
 80014b0:	f00a faf0 	bl	800ba94 <sniprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 80014b4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7fe fee1 	bl	8000280 <strlen>
 80014be:	4603      	mov	r3, r0
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 80014c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014ca:	48aa      	ldr	r0, [pc, #680]	@ (8001774 <telemetry+0x33c>)
 80014cc:	f005 ffa2 	bl	8007414 <HAL_UART_Transmit>
            snprintf(uartBuffer, sizeof(uartBuffer), "EX1: %.2f\r\n", adcDataReceived.extra1);
 80014d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff f840 	bl	8000558 <__aeabi_f2d>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 80014e0:	e9cd 2300 	strd	r2, r3, [sp]
 80014e4:	4aa5      	ldr	r2, [pc, #660]	@ (800177c <telemetry+0x344>)
 80014e6:	2180      	movs	r1, #128	@ 0x80
 80014e8:	f00a fad4 	bl	800ba94 <sniprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 80014ec:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7fe fec5 	bl	8000280 <strlen>
 80014f6:	4603      	mov	r3, r0
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001502:	489c      	ldr	r0, [pc, #624]	@ (8001774 <telemetry+0x33c>)
 8001504:	f005 ff86 	bl	8007414 <HAL_UART_Transmit>
            snprintf(uartBuffer, sizeof(uartBuffer), "EX2: %.2f\r\n", adcDataReceived.extra2);
 8001508:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff f824 	bl	8000558 <__aeabi_f2d>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8001518:	e9cd 2300 	strd	r2, r3, [sp]
 800151c:	4a98      	ldr	r2, [pc, #608]	@ (8001780 <telemetry+0x348>)
 800151e:	2180      	movs	r1, #128	@ 0x80
 8001520:	f00a fab8 	bl	800ba94 <sniprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8001524:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001528:	4618      	mov	r0, r3
 800152a:	f7fe fea9 	bl	8000280 <strlen>
 800152e:	4603      	mov	r3, r0
 8001530:	b29a      	uxth	r2, r3
 8001532:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8001536:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800153a:	488e      	ldr	r0, [pc, #568]	@ (8001774 <telemetry+0x33c>)
 800153c:	f005 ff6a 	bl	8007414 <HAL_UART_Transmit>
        }

        if (osMessageQueueGetCount(imuQueueHandle) > 0) {
 8001540:	4b89      	ldr	r3, [pc, #548]	@ (8001768 <telemetry+0x330>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f006 fd8d 	bl	8008064 <osMessageQueueGetCount>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	f000 817a 	beq.w	8001846 <telemetry+0x40e>
			// Get IMU Data
			osMessageQueueGet(imuQueueHandle, (void*)&imuDataReceived, NULL, osWaitForever);
 8001552:	4b85      	ldr	r3, [pc, #532]	@ (8001768 <telemetry+0x330>)
 8001554:	6818      	ldr	r0, [r3, #0]
 8001556:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800155a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800155e:	2200      	movs	r2, #0
 8001560:	f006 fd22 	bl	8007fa8 <osMessageQueueGet>
			// Send IMU Data
			snprintf(uartBuffer, sizeof(uartBuffer), "ROL: %.2f\r\n", imuDataReceived.roll);
 8001564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001566:	4618      	mov	r0, r3
 8001568:	f7fe fff6 	bl	8000558 <__aeabi_f2d>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8001574:	e9cd 2300 	strd	r2, r3, [sp]
 8001578:	4a82      	ldr	r2, [pc, #520]	@ (8001784 <telemetry+0x34c>)
 800157a:	2180      	movs	r1, #128	@ 0x80
 800157c:	f00a fa8a 	bl	800ba94 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8001580:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001584:	4618      	mov	r0, r3
 8001586:	f7fe fe7b 	bl	8000280 <strlen>
 800158a:	4603      	mov	r3, r0
 800158c:	b29a      	uxth	r2, r3
 800158e:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8001592:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001596:	4877      	ldr	r0, [pc, #476]	@ (8001774 <telemetry+0x33c>)
 8001598:	f005 ff3c 	bl	8007414 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "PIT: %.2f\r\n", imuDataReceived.pitch);
 800159c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800159e:	4618      	mov	r0, r3
 80015a0:	f7fe ffda 	bl	8000558 <__aeabi_f2d>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 80015ac:	e9cd 2300 	strd	r2, r3, [sp]
 80015b0:	4a75      	ldr	r2, [pc, #468]	@ (8001788 <telemetry+0x350>)
 80015b2:	2180      	movs	r1, #128	@ 0x80
 80015b4:	f00a fa6e 	bl	800ba94 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 80015b8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe fe5f 	bl	8000280 <strlen>
 80015c2:	4603      	mov	r3, r0
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 80015ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015ce:	4869      	ldr	r0, [pc, #420]	@ (8001774 <telemetry+0x33c>)
 80015d0:	f005 ff20 	bl	8007414 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "YAW: %.2f\r\n", imuDataReceived.yaw);
 80015d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7fe ffbe 	bl	8000558 <__aeabi_f2d>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 80015e4:	e9cd 2300 	strd	r2, r3, [sp]
 80015e8:	4a68      	ldr	r2, [pc, #416]	@ (800178c <telemetry+0x354>)
 80015ea:	2180      	movs	r1, #128	@ 0x80
 80015ec:	f00a fa52 	bl	800ba94 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 80015f0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7fe fe43 	bl	8000280 <strlen>
 80015fa:	4603      	mov	r3, r0
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8001602:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001606:	485b      	ldr	r0, [pc, #364]	@ (8001774 <telemetry+0x33c>)
 8001608:	f005 ff04 	bl	8007414 <HAL_UART_Transmit>

			snprintf(uartBuffer, sizeof(uartBuffer), "ACX: %.2f\r\n", imuDataReceived.accelX);
 800160c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe ffa2 	bl	8000558 <__aeabi_f2d>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 800161c:	e9cd 2300 	strd	r2, r3, [sp]
 8001620:	4a5b      	ldr	r2, [pc, #364]	@ (8001790 <telemetry+0x358>)
 8001622:	2180      	movs	r1, #128	@ 0x80
 8001624:	f00a fa36 	bl	800ba94 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8001628:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800162c:	4618      	mov	r0, r3
 800162e:	f7fe fe27 	bl	8000280 <strlen>
 8001632:	4603      	mov	r3, r0
 8001634:	b29a      	uxth	r2, r3
 8001636:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 800163a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800163e:	484d      	ldr	r0, [pc, #308]	@ (8001774 <telemetry+0x33c>)
 8001640:	f005 fee8 	bl	8007414 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "ACY: %.2f\r\n", imuDataReceived.accelY);
 8001644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001646:	4618      	mov	r0, r3
 8001648:	f7fe ff86 	bl	8000558 <__aeabi_f2d>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8001654:	e9cd 2300 	strd	r2, r3, [sp]
 8001658:	4a4e      	ldr	r2, [pc, #312]	@ (8001794 <telemetry+0x35c>)
 800165a:	2180      	movs	r1, #128	@ 0x80
 800165c:	f00a fa1a 	bl	800ba94 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8001660:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001664:	4618      	mov	r0, r3
 8001666:	f7fe fe0b 	bl	8000280 <strlen>
 800166a:	4603      	mov	r3, r0
 800166c:	b29a      	uxth	r2, r3
 800166e:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8001672:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001676:	483f      	ldr	r0, [pc, #252]	@ (8001774 <telemetry+0x33c>)
 8001678:	f005 fecc 	bl	8007414 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "ACZ: %.2f\r\n", imuDataReceived.accelZ);
 800167c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe ff6a 	bl	8000558 <__aeabi_f2d>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 800168c:	e9cd 2300 	strd	r2, r3, [sp]
 8001690:	4a41      	ldr	r2, [pc, #260]	@ (8001798 <telemetry+0x360>)
 8001692:	2180      	movs	r1, #128	@ 0x80
 8001694:	f00a f9fe 	bl	800ba94 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8001698:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe fdef 	bl	8000280 <strlen>
 80016a2:	4603      	mov	r3, r0
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016ae:	4831      	ldr	r0, [pc, #196]	@ (8001774 <telemetry+0x33c>)
 80016b0:	f005 feb0 	bl	8007414 <HAL_UART_Transmit>

			snprintf(uartBuffer, sizeof(uartBuffer), "GYX: %.2f\r\n", imuDataReceived.gyroX);
 80016b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7fe ff4e 	bl	8000558 <__aeabi_f2d>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 80016c4:	e9cd 2300 	strd	r2, r3, [sp]
 80016c8:	4a34      	ldr	r2, [pc, #208]	@ (800179c <telemetry+0x364>)
 80016ca:	2180      	movs	r1, #128	@ 0x80
 80016cc:	f00a f9e2 	bl	800ba94 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 80016d0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe fdd3 	bl	8000280 <strlen>
 80016da:	4603      	mov	r3, r0
 80016dc:	b29a      	uxth	r2, r3
 80016de:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 80016e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016e6:	4823      	ldr	r0, [pc, #140]	@ (8001774 <telemetry+0x33c>)
 80016e8:	f005 fe94 	bl	8007414 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "GYY: %.2f\r\n", imuDataReceived.gyroY);
 80016ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7fe ff32 	bl	8000558 <__aeabi_f2d>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 80016fc:	e9cd 2300 	strd	r2, r3, [sp]
 8001700:	4a27      	ldr	r2, [pc, #156]	@ (80017a0 <telemetry+0x368>)
 8001702:	2180      	movs	r1, #128	@ 0x80
 8001704:	f00a f9c6 	bl	800ba94 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8001708:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800170c:	4618      	mov	r0, r3
 800170e:	f7fe fdb7 	bl	8000280 <strlen>
 8001712:	4603      	mov	r3, r0
 8001714:	b29a      	uxth	r2, r3
 8001716:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 800171a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800171e:	4815      	ldr	r0, [pc, #84]	@ (8001774 <telemetry+0x33c>)
 8001720:	f005 fe78 	bl	8007414 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "GYZ: %.2f\r\n", imuDataReceived.gyroZ);
 8001724:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001726:	4618      	mov	r0, r3
 8001728:	f7fe ff16 	bl	8000558 <__aeabi_f2d>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8001734:	e9cd 2300 	strd	r2, r3, [sp]
 8001738:	4a1a      	ldr	r2, [pc, #104]	@ (80017a4 <telemetry+0x36c>)
 800173a:	2180      	movs	r1, #128	@ 0x80
 800173c:	f00a f9aa 	bl	800ba94 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8001740:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe fd9b 	bl	8000280 <strlen>
 800174a:	4603      	mov	r3, r0
 800174c:	b29a      	uxth	r2, r3
 800174e:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8001752:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001756:	4807      	ldr	r0, [pc, #28]	@ (8001774 <telemetry+0x33c>)
 8001758:	f005 fe5c 	bl	8007414 <HAL_UART_Transmit>

			snprintf(uartBuffer, sizeof(uartBuffer), "MGX: %.2f\r\n", imuDataReceived.magX);
 800175c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe fefa 	bl	8000558 <__aeabi_f2d>
 8001764:	4602      	mov	r2, r0
 8001766:	e01f      	b.n	80017a8 <telemetry+0x370>
 8001768:	20000304 	.word	0x20000304
 800176c:	20000300 	.word	0x20000300
 8001770:	0800dfe0 	.word	0x0800dfe0
 8001774:	200004a8 	.word	0x200004a8
 8001778:	0800dfec 	.word	0x0800dfec
 800177c:	0800dff8 	.word	0x0800dff8
 8001780:	0800e004 	.word	0x0800e004
 8001784:	0800e010 	.word	0x0800e010
 8001788:	0800e01c 	.word	0x0800e01c
 800178c:	0800e028 	.word	0x0800e028
 8001790:	0800e034 	.word	0x0800e034
 8001794:	0800e040 	.word	0x0800e040
 8001798:	0800e04c 	.word	0x0800e04c
 800179c:	0800e058 	.word	0x0800e058
 80017a0:	0800e064 	.word	0x0800e064
 80017a4:	0800e070 	.word	0x0800e070
 80017a8:	460b      	mov	r3, r1
 80017aa:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 80017ae:	e9cd 2300 	strd	r2, r3, [sp]
 80017b2:	4acd      	ldr	r2, [pc, #820]	@ (8001ae8 <telemetry+0x6b0>)
 80017b4:	2180      	movs	r1, #128	@ 0x80
 80017b6:	f00a f96d 	bl	800ba94 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 80017ba:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80017be:	4618      	mov	r0, r3
 80017c0:	f7fe fd5e 	bl	8000280 <strlen>
 80017c4:	4603      	mov	r3, r0
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 80017cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017d0:	48c6      	ldr	r0, [pc, #792]	@ (8001aec <telemetry+0x6b4>)
 80017d2:	f005 fe1f 	bl	8007414 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "MGY: %.2f\r\n", imuDataReceived.magY);
 80017d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80017d8:	4618      	mov	r0, r3
 80017da:	f7fe febd 	bl	8000558 <__aeabi_f2d>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 80017e6:	e9cd 2300 	strd	r2, r3, [sp]
 80017ea:	4ac1      	ldr	r2, [pc, #772]	@ (8001af0 <telemetry+0x6b8>)
 80017ec:	2180      	movs	r1, #128	@ 0x80
 80017ee:	f00a f951 	bl	800ba94 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 80017f2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7fe fd42 	bl	8000280 <strlen>
 80017fc:	4603      	mov	r3, r0
 80017fe:	b29a      	uxth	r2, r3
 8001800:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8001804:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001808:	48b8      	ldr	r0, [pc, #736]	@ (8001aec <telemetry+0x6b4>)
 800180a:	f005 fe03 	bl	8007414 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "MGZ: %.2f\r\n", imuDataReceived.magZ);
 800180e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe fea1 	bl	8000558 <__aeabi_f2d>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 800181e:	e9cd 2300 	strd	r2, r3, [sp]
 8001822:	4ab4      	ldr	r2, [pc, #720]	@ (8001af4 <telemetry+0x6bc>)
 8001824:	2180      	movs	r1, #128	@ 0x80
 8001826:	f00a f935 	bl	800ba94 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 800182a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800182e:	4618      	mov	r0, r3
 8001830:	f7fe fd26 	bl	8000280 <strlen>
 8001834:	4603      	mov	r3, r0
 8001836:	b29a      	uxth	r2, r3
 8001838:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 800183c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001840:	48aa      	ldr	r0, [pc, #680]	@ (8001aec <telemetry+0x6b4>)
 8001842:	f005 fde7 	bl	8007414 <HAL_UART_Transmit>
        }

        if (osMessageQueueGetCount(radioQueueHandle) > 0) {
 8001846:	4bac      	ldr	r3, [pc, #688]	@ (8001af8 <telemetry+0x6c0>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f006 fc0a 	bl	8008064 <osMessageQueueGetCount>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	f000 808d 	beq.w	8001972 <telemetry+0x53a>
			// Get Radio Data
			osMessageQueueGet(radioQueueHandle, (void*)&radioDataReceived, NULL, osWaitForever);
 8001858:	4ba7      	ldr	r3, [pc, #668]	@ (8001af8 <telemetry+0x6c0>)
 800185a:	6818      	ldr	r0, [r3, #0]
 800185c:	f107 0118 	add.w	r1, r7, #24
 8001860:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001864:	2200      	movs	r2, #0
 8001866:	f006 fb9f 	bl	8007fa8 <osMessageQueueGet>
			// Send Radio Data
			snprintf(uartBuffer, sizeof(uartBuffer), "RW1: %.2f\r\n", (float)radioDataReceived.width1);
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	ee07 3a90 	vmov	s15, r3
 8001870:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001874:	ee17 0a90 	vmov	r0, s15
 8001878:	f7fe fe6e 	bl	8000558 <__aeabi_f2d>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8001884:	e9cd 2300 	strd	r2, r3, [sp]
 8001888:	4a9c      	ldr	r2, [pc, #624]	@ (8001afc <telemetry+0x6c4>)
 800188a:	2180      	movs	r1, #128	@ 0x80
 800188c:	f00a f902 	bl	800ba94 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8001890:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001894:	4618      	mov	r0, r3
 8001896:	f7fe fcf3 	bl	8000280 <strlen>
 800189a:	4603      	mov	r3, r0
 800189c:	b29a      	uxth	r2, r3
 800189e:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 80018a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018a6:	4891      	ldr	r0, [pc, #580]	@ (8001aec <telemetry+0x6b4>)
 80018a8:	f005 fdb4 	bl	8007414 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "RW2: %.2f\r\n", (float)radioDataReceived.width2);
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	ee07 3a90 	vmov	s15, r3
 80018b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018b6:	ee17 0a90 	vmov	r0, s15
 80018ba:	f7fe fe4d 	bl	8000558 <__aeabi_f2d>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 80018c6:	e9cd 2300 	strd	r2, r3, [sp]
 80018ca:	4a8d      	ldr	r2, [pc, #564]	@ (8001b00 <telemetry+0x6c8>)
 80018cc:	2180      	movs	r1, #128	@ 0x80
 80018ce:	f00a f8e1 	bl	800ba94 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 80018d2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7fe fcd2 	bl	8000280 <strlen>
 80018dc:	4603      	mov	r3, r0
 80018de:	b29a      	uxth	r2, r3
 80018e0:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 80018e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018e8:	4880      	ldr	r0, [pc, #512]	@ (8001aec <telemetry+0x6b4>)
 80018ea:	f005 fd93 	bl	8007414 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "RW3: %.2f\r\n", (float)radioDataReceived.width3);
 80018ee:	6a3b      	ldr	r3, [r7, #32]
 80018f0:	ee07 3a90 	vmov	s15, r3
 80018f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018f8:	ee17 0a90 	vmov	r0, s15
 80018fc:	f7fe fe2c 	bl	8000558 <__aeabi_f2d>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8001908:	e9cd 2300 	strd	r2, r3, [sp]
 800190c:	4a7d      	ldr	r2, [pc, #500]	@ (8001b04 <telemetry+0x6cc>)
 800190e:	2180      	movs	r1, #128	@ 0x80
 8001910:	f00a f8c0 	bl	800ba94 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8001914:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001918:	4618      	mov	r0, r3
 800191a:	f7fe fcb1 	bl	8000280 <strlen>
 800191e:	4603      	mov	r3, r0
 8001920:	b29a      	uxth	r2, r3
 8001922:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8001926:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800192a:	4870      	ldr	r0, [pc, #448]	@ (8001aec <telemetry+0x6b4>)
 800192c:	f005 fd72 	bl	8007414 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "RW4: %.2f\r\n", (float)radioDataReceived.width4);
 8001930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001932:	ee07 3a90 	vmov	s15, r3
 8001936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800193a:	ee17 0a90 	vmov	r0, s15
 800193e:	f7fe fe0b 	bl	8000558 <__aeabi_f2d>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 800194a:	e9cd 2300 	strd	r2, r3, [sp]
 800194e:	4a6e      	ldr	r2, [pc, #440]	@ (8001b08 <telemetry+0x6d0>)
 8001950:	2180      	movs	r1, #128	@ 0x80
 8001952:	f00a f89f 	bl	800ba94 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8001956:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800195a:	4618      	mov	r0, r3
 800195c:	f7fe fc90 	bl	8000280 <strlen>
 8001960:	4603      	mov	r3, r0
 8001962:	b29a      	uxth	r2, r3
 8001964:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8001968:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800196c:	485f      	ldr	r0, [pc, #380]	@ (8001aec <telemetry+0x6b4>)
 800196e:	f005 fd51 	bl	8007414 <HAL_UART_Transmit>

        }

        if (osMessageQueueGetCount(controlQueueHandle)>0){
 8001972:	4b66      	ldr	r3, [pc, #408]	@ (8001b0c <telemetry+0x6d4>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f006 fb74 	bl	8008064 <osMessageQueueGetCount>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	f43f ad5d 	beq.w	800143e <telemetry+0x6>

			// Get Radio Data
			osMessageQueueGet(controlQueueHandle, (void*)&controlDataReceived, NULL, osWaitForever);
 8001984:	4b61      	ldr	r3, [pc, #388]	@ (8001b0c <telemetry+0x6d4>)
 8001986:	6818      	ldr	r0, [r3, #0]
 8001988:	4639      	mov	r1, r7
 800198a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800198e:	2200      	movs	r2, #0
 8001990:	f006 fb0a 	bl	8007fa8 <osMessageQueueGet>
			// Send Radio Data
			snprintf(uartBuffer, sizeof(uartBuffer), "CT1: %.2f\r\n", (float)controlDataReceived.ctrl1);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f7fe fdde 	bl	8000558 <__aeabi_f2d>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 80019a4:	e9cd 2300 	strd	r2, r3, [sp]
 80019a8:	4a59      	ldr	r2, [pc, #356]	@ (8001b10 <telemetry+0x6d8>)
 80019aa:	2180      	movs	r1, #128	@ 0x80
 80019ac:	f00a f872 	bl	800ba94 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 80019b0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7fe fc63 	bl	8000280 <strlen>
 80019ba:	4603      	mov	r3, r0
 80019bc:	b29a      	uxth	r2, r3
 80019be:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 80019c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019c6:	4849      	ldr	r0, [pc, #292]	@ (8001aec <telemetry+0x6b4>)
 80019c8:	f005 fd24 	bl	8007414 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "CT2: %.2f\r\n", (float)controlDataReceived.ctrl2);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7fe fdc2 	bl	8000558 <__aeabi_f2d>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 80019dc:	e9cd 2300 	strd	r2, r3, [sp]
 80019e0:	4a4c      	ldr	r2, [pc, #304]	@ (8001b14 <telemetry+0x6dc>)
 80019e2:	2180      	movs	r1, #128	@ 0x80
 80019e4:	f00a f856 	bl	800ba94 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 80019e8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7fe fc47 	bl	8000280 <strlen>
 80019f2:	4603      	mov	r3, r0
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 80019fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019fe:	483b      	ldr	r0, [pc, #236]	@ (8001aec <telemetry+0x6b4>)
 8001a00:	f005 fd08 	bl	8007414 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "CT3: %.2f\r\n", (float)controlDataReceived.ctrl3);
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7fe fda6 	bl	8000558 <__aeabi_f2d>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8001a14:	e9cd 2300 	strd	r2, r3, [sp]
 8001a18:	4a3f      	ldr	r2, [pc, #252]	@ (8001b18 <telemetry+0x6e0>)
 8001a1a:	2180      	movs	r1, #128	@ 0x80
 8001a1c:	f00a f83a 	bl	800ba94 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8001a20:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7fe fc2b 	bl	8000280 <strlen>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	b29a      	uxth	r2, r3
 8001a2e:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8001a32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a36:	482d      	ldr	r0, [pc, #180]	@ (8001aec <telemetry+0x6b4>)
 8001a38:	f005 fcec 	bl	8007414 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "CT4: %.2f\r\n", (float)controlDataReceived.ctrl4);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fd8a 	bl	8000558 <__aeabi_f2d>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8001a4c:	e9cd 2300 	strd	r2, r3, [sp]
 8001a50:	4a32      	ldr	r2, [pc, #200]	@ (8001b1c <telemetry+0x6e4>)
 8001a52:	2180      	movs	r1, #128	@ 0x80
 8001a54:	f00a f81e 	bl	800ba94 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8001a58:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7fe fc0f 	bl	8000280 <strlen>
 8001a62:	4603      	mov	r3, r0
 8001a64:	b29a      	uxth	r2, r3
 8001a66:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8001a6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a6e:	481f      	ldr	r0, [pc, #124]	@ (8001aec <telemetry+0x6b4>)
 8001a70:	f005 fcd0 	bl	8007414 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "CT5: %.2f\r\n", (float)controlDataReceived.ctrl5);
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7fe fd6e 	bl	8000558 <__aeabi_f2d>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8001a84:	e9cd 2300 	strd	r2, r3, [sp]
 8001a88:	4a25      	ldr	r2, [pc, #148]	@ (8001b20 <telemetry+0x6e8>)
 8001a8a:	2180      	movs	r1, #128	@ 0x80
 8001a8c:	f00a f802 	bl	800ba94 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8001a90:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7fe fbf3 	bl	8000280 <strlen>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8001aa2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001aa6:	4811      	ldr	r0, [pc, #68]	@ (8001aec <telemetry+0x6b4>)
 8001aa8:	f005 fcb4 	bl	8007414 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "CT6: %.2f\r\n", (float)controlDataReceived.ctrl6);
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7fe fd52 	bl	8000558 <__aeabi_f2d>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8001abc:	e9cd 2300 	strd	r2, r3, [sp]
 8001ac0:	4a18      	ldr	r2, [pc, #96]	@ (8001b24 <telemetry+0x6ec>)
 8001ac2:	2180      	movs	r1, #128	@ 0x80
 8001ac4:	f009 ffe6 	bl	800ba94 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8001ac8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7fe fbd7 	bl	8000280 <strlen>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8001ada:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ade:	4803      	ldr	r0, [pc, #12]	@ (8001aec <telemetry+0x6b4>)
 8001ae0:	f005 fc98 	bl	8007414 <HAL_UART_Transmit>
        if (osMessageQueueGetCount(imuQueueHandle) > 0) {
 8001ae4:	e4ab      	b.n	800143e <telemetry+0x6>
 8001ae6:	bf00      	nop
 8001ae8:	0800e07c 	.word	0x0800e07c
 8001aec:	200004a8 	.word	0x200004a8
 8001af0:	0800e088 	.word	0x0800e088
 8001af4:	0800e094 	.word	0x0800e094
 8001af8:	200002fc 	.word	0x200002fc
 8001afc:	0800e0a0 	.word	0x0800e0a0
 8001b00:	0800e0ac 	.word	0x0800e0ac
 8001b04:	0800e0b8 	.word	0x0800e0b8
 8001b08:	0800e0c4 	.word	0x0800e0c4
 8001b0c:	20000308 	.word	0x20000308
 8001b10:	0800e0d0 	.word	0x0800e0d0
 8001b14:	0800e0dc 	.word	0x0800e0dc
 8001b18:	0800e0e8 	.word	0x0800e0e8
 8001b1c:	0800e0f4 	.word	0x0800e0f4
 8001b20:	0800e100 	.word	0x0800e100
 8001b24:	0800e10c 	.word	0x0800e10c

08001b28 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b2e:	463b      	mov	r3, r7
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b3a:	4b36      	ldr	r3, [pc, #216]	@ (8001c14 <MX_ADC1_Init+0xec>)
 8001b3c:	4a36      	ldr	r2, [pc, #216]	@ (8001c18 <MX_ADC1_Init+0xf0>)
 8001b3e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b40:	4b34      	ldr	r3, [pc, #208]	@ (8001c14 <MX_ADC1_Init+0xec>)
 8001b42:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b46:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b48:	4b32      	ldr	r3, [pc, #200]	@ (8001c14 <MX_ADC1_Init+0xec>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001b4e:	4b31      	ldr	r3, [pc, #196]	@ (8001c14 <MX_ADC1_Init+0xec>)
 8001b50:	2201      	movs	r2, #1
 8001b52:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b54:	4b2f      	ldr	r3, [pc, #188]	@ (8001c14 <MX_ADC1_Init+0xec>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b5a:	4b2e      	ldr	r3, [pc, #184]	@ (8001c14 <MX_ADC1_Init+0xec>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b62:	4b2c      	ldr	r3, [pc, #176]	@ (8001c14 <MX_ADC1_Init+0xec>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b68:	4b2a      	ldr	r3, [pc, #168]	@ (8001c14 <MX_ADC1_Init+0xec>)
 8001b6a:	4a2c      	ldr	r2, [pc, #176]	@ (8001c1c <MX_ADC1_Init+0xf4>)
 8001b6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b6e:	4b29      	ldr	r3, [pc, #164]	@ (8001c14 <MX_ADC1_Init+0xec>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001b74:	4b27      	ldr	r3, [pc, #156]	@ (8001c14 <MX_ADC1_Init+0xec>)
 8001b76:	2204      	movs	r2, #4
 8001b78:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001b7a:	4b26      	ldr	r3, [pc, #152]	@ (8001c14 <MX_ADC1_Init+0xec>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001b82:	4b24      	ldr	r3, [pc, #144]	@ (8001c14 <MX_ADC1_Init+0xec>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b88:	4822      	ldr	r0, [pc, #136]	@ (8001c14 <MX_ADC1_Init+0xec>)
 8001b8a:	f001 fb29 	bl	80031e0 <HAL_ADC_Init>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b94:	f000 fdc2 	bl	800271c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ba4:	463b      	mov	r3, r7
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	481a      	ldr	r0, [pc, #104]	@ (8001c14 <MX_ADC1_Init+0xec>)
 8001baa:	f001 fc6b 	bl	8003484 <HAL_ADC_ConfigChannel>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001bb4:	f000 fdb2 	bl	800271c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bc0:	463b      	mov	r3, r7
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4813      	ldr	r0, [pc, #76]	@ (8001c14 <MX_ADC1_Init+0xec>)
 8001bc6:	f001 fc5d 	bl	8003484 <HAL_ADC_ConfigChannel>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001bd0:	f000 fda4 	bl	800271c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bdc:	463b      	mov	r3, r7
 8001bde:	4619      	mov	r1, r3
 8001be0:	480c      	ldr	r0, [pc, #48]	@ (8001c14 <MX_ADC1_Init+0xec>)
 8001be2:	f001 fc4f 	bl	8003484 <HAL_ADC_ConfigChannel>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001bec:	f000 fd96 	bl	800271c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001bf0:	2304      	movs	r3, #4
 8001bf2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001bf4:	2304      	movs	r3, #4
 8001bf6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bf8:	463b      	mov	r3, r7
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4805      	ldr	r0, [pc, #20]	@ (8001c14 <MX_ADC1_Init+0xec>)
 8001bfe:	f001 fc41 	bl	8003484 <HAL_ADC_ConfigChannel>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001c08:	f000 fd88 	bl	800271c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c0c:	bf00      	nop
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	2000022c 	.word	0x2000022c
 8001c18:	40012000 	.word	0x40012000
 8001c1c:	0f000001 	.word	0x0f000001

08001c20 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08a      	sub	sp, #40	@ 0x28
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	f107 0314 	add.w	r3, r7, #20
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a2f      	ldr	r2, [pc, #188]	@ (8001cfc <HAL_ADC_MspInit+0xdc>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d157      	bne.n	8001cf2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]
 8001c46:	4b2e      	ldr	r3, [pc, #184]	@ (8001d00 <HAL_ADC_MspInit+0xe0>)
 8001c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c4a:	4a2d      	ldr	r2, [pc, #180]	@ (8001d00 <HAL_ADC_MspInit+0xe0>)
 8001c4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c52:	4b2b      	ldr	r3, [pc, #172]	@ (8001d00 <HAL_ADC_MspInit+0xe0>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	4b27      	ldr	r3, [pc, #156]	@ (8001d00 <HAL_ADC_MspInit+0xe0>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c66:	4a26      	ldr	r2, [pc, #152]	@ (8001d00 <HAL_ADC_MspInit+0xe0>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c6e:	4b24      	ldr	r3, [pc, #144]	@ (8001d00 <HAL_ADC_MspInit+0xe0>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ANALOG1_Pin|ANALOG2_Pin|ANALOG3_Pin|ANALOG4_Pin;
 8001c7a:	231e      	movs	r3, #30
 8001c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c86:	f107 0314 	add.w	r3, r7, #20
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	481d      	ldr	r0, [pc, #116]	@ (8001d04 <HAL_ADC_MspInit+0xe4>)
 8001c8e:	f002 faeb 	bl	8004268 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001c92:	4b1d      	ldr	r3, [pc, #116]	@ (8001d08 <HAL_ADC_MspInit+0xe8>)
 8001c94:	4a1d      	ldr	r2, [pc, #116]	@ (8001d0c <HAL_ADC_MspInit+0xec>)
 8001c96:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001c98:	4b1b      	ldr	r3, [pc, #108]	@ (8001d08 <HAL_ADC_MspInit+0xe8>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d08 <HAL_ADC_MspInit+0xe8>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ca4:	4b18      	ldr	r3, [pc, #96]	@ (8001d08 <HAL_ADC_MspInit+0xe8>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001caa:	4b17      	ldr	r3, [pc, #92]	@ (8001d08 <HAL_ADC_MspInit+0xe8>)
 8001cac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cb0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cb2:	4b15      	ldr	r3, [pc, #84]	@ (8001d08 <HAL_ADC_MspInit+0xe8>)
 8001cb4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001cb8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cba:	4b13      	ldr	r3, [pc, #76]	@ (8001d08 <HAL_ADC_MspInit+0xe8>)
 8001cbc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cc0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001cc2:	4b11      	ldr	r3, [pc, #68]	@ (8001d08 <HAL_ADC_MspInit+0xe8>)
 8001cc4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cc8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001cca:	4b0f      	ldr	r3, [pc, #60]	@ (8001d08 <HAL_ADC_MspInit+0xe8>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cd0:	4b0d      	ldr	r3, [pc, #52]	@ (8001d08 <HAL_ADC_MspInit+0xe8>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001cd6:	480c      	ldr	r0, [pc, #48]	@ (8001d08 <HAL_ADC_MspInit+0xe8>)
 8001cd8:	f001 ff56 	bl	8003b88 <HAL_DMA_Init>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001ce2:	f000 fd1b 	bl	800271c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a07      	ldr	r2, [pc, #28]	@ (8001d08 <HAL_ADC_MspInit+0xe8>)
 8001cea:	639a      	str	r2, [r3, #56]	@ 0x38
 8001cec:	4a06      	ldr	r2, [pc, #24]	@ (8001d08 <HAL_ADC_MspInit+0xe8>)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001cf2:	bf00      	nop
 8001cf4:	3728      	adds	r7, #40	@ 0x28
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40012000 	.word	0x40012000
 8001d00:	40023800 	.word	0x40023800
 8001d04:	40020000 	.word	0x40020000
 8001d08:	20000274 	.word	0x20000274
 8001d0c:	40026410 	.word	0x40026410

08001d10 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	71fb      	strb	r3, [r7, #7]
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	2007      	movs	r0, #7
 8001d20:	f7ff f990 	bl	8001044 <bno055_writeData>
 8001d24:	bf00      	nop
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8001d2c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d30:	b09e      	sub	sp, #120	@ 0x78
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	4603      	mov	r3, r0
 8001d36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  bno055_setPage(0);
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	f7ff ffe8 	bl	8001d10 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8001d40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d44:	2b20      	cmp	r3, #32
 8001d46:	d108      	bne.n	8001d5a <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8001d48:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001d4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d50:	2208      	movs	r2, #8
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff fa62 	bl	800121c <bno055_readData>
 8001d58:	e007      	b.n	8001d6a <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8001d5a:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001d5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d62:	2206      	movs	r2, #6
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff fa59 	bl	800121c <bno055_readData>

  double scale = 1;
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	4b8b      	ldr	r3, [pc, #556]	@ (8001f9c <bno055_getVector+0x270>)
 8001d70:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8001d74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d78:	2b0e      	cmp	r3, #14
 8001d7a:	d109      	bne.n	8001d90 <bno055_getVector+0x64>
    scale = magScale;
 8001d7c:	4b88      	ldr	r3, [pc, #544]	@ (8001fa0 <bno055_getVector+0x274>)
 8001d7e:	881b      	ldrh	r3, [r3, #0]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe fbc7 	bl	8000514 <__aeabi_ui2d>
 8001d86:	4602      	mov	r2, r0
 8001d88:	460b      	mov	r3, r1
 8001d8a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8001d8e:	e03e      	b.n	8001e0e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8001d90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d94:	2b08      	cmp	r3, #8
 8001d96:	d007      	beq.n	8001da8 <bno055_getVector+0x7c>
 8001d98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d9c:	2b28      	cmp	r3, #40	@ 0x28
 8001d9e:	d003      	beq.n	8001da8 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8001da0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001da4:	2b2e      	cmp	r3, #46	@ 0x2e
 8001da6:	d109      	bne.n	8001dbc <bno055_getVector+0x90>
    scale = accelScale;
 8001da8:	4b7e      	ldr	r3, [pc, #504]	@ (8001fa4 <bno055_getVector+0x278>)
 8001daa:	881b      	ldrh	r3, [r3, #0]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7fe fbb1 	bl	8000514 <__aeabi_ui2d>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8001dba:	e028      	b.n	8001e0e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8001dbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001dc0:	2b14      	cmp	r3, #20
 8001dc2:	d109      	bne.n	8001dd8 <bno055_getVector+0xac>
    scale = angularRateScale;
 8001dc4:	4b78      	ldr	r3, [pc, #480]	@ (8001fa8 <bno055_getVector+0x27c>)
 8001dc6:	881b      	ldrh	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe fba3 	bl	8000514 <__aeabi_ui2d>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8001dd6:	e01a      	b.n	8001e0e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8001dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ddc:	2b1a      	cmp	r3, #26
 8001dde:	d109      	bne.n	8001df4 <bno055_getVector+0xc8>
    scale = eulerScale;
 8001de0:	4b72      	ldr	r3, [pc, #456]	@ (8001fac <bno055_getVector+0x280>)
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7fe fb95 	bl	8000514 <__aeabi_ui2d>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8001df2:	e00c      	b.n	8001e0e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8001df4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001df8:	2b20      	cmp	r3, #32
 8001dfa:	d108      	bne.n	8001e0e <bno055_getVector+0xe2>
    scale = quaScale;
 8001dfc:	4b6c      	ldr	r3, [pc, #432]	@ (8001fb0 <bno055_getVector+0x284>)
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7fe fb87 	bl	8000514 <__aeabi_ui2d>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8001e0e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e12:	2220      	movs	r2, #32
 8001e14:	2100      	movs	r1, #0
 8001e16:	4618      	mov	r0, r3
 8001e18:	f009 ff48 	bl	800bcac <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8001e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e20:	2b20      	cmp	r3, #32
 8001e22:	d150      	bne.n	8001ec6 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001e24:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001e28:	021b      	lsls	r3, r3, #8
 8001e2a:	b21a      	sxth	r2, r3
 8001e2c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001e30:	b21b      	sxth	r3, r3
 8001e32:	4313      	orrs	r3, r2
 8001e34:	b21b      	sxth	r3, r3
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe fb7c 	bl	8000534 <__aeabi_i2d>
 8001e3c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001e40:	f7fe fd0c 	bl	800085c <__aeabi_ddiv>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001e4c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001e50:	021b      	lsls	r3, r3, #8
 8001e52:	b21a      	sxth	r2, r3
 8001e54:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001e58:	b21b      	sxth	r3, r3
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	b21b      	sxth	r3, r3
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe fb68 	bl	8000534 <__aeabi_i2d>
 8001e64:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001e68:	f7fe fcf8 	bl	800085c <__aeabi_ddiv>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001e74:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001e78:	021b      	lsls	r3, r3, #8
 8001e7a:	b21a      	sxth	r2, r3
 8001e7c:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001e80:	b21b      	sxth	r3, r3
 8001e82:	4313      	orrs	r3, r2
 8001e84:	b21b      	sxth	r3, r3
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7fe fb54 	bl	8000534 <__aeabi_i2d>
 8001e8c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001e90:	f7fe fce4 	bl	800085c <__aeabi_ddiv>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8001e9c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001ea0:	021b      	lsls	r3, r3, #8
 8001ea2:	b21a      	sxth	r2, r3
 8001ea4:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001ea8:	b21b      	sxth	r3, r3
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	b21b      	sxth	r3, r3
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7fe fb40 	bl	8000534 <__aeabi_i2d>
 8001eb4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001eb8:	f7fe fcd0 	bl	800085c <__aeabi_ddiv>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8001ec4:	e03b      	b.n	8001f3e <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001ec6:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001eca:	021b      	lsls	r3, r3, #8
 8001ecc:	b21a      	sxth	r2, r3
 8001ece:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001ed2:	b21b      	sxth	r3, r3
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	b21b      	sxth	r3, r3
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7fe fb2b 	bl	8000534 <__aeabi_i2d>
 8001ede:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001ee2:	f7fe fcbb 	bl	800085c <__aeabi_ddiv>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001eee:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001ef2:	021b      	lsls	r3, r3, #8
 8001ef4:	b21a      	sxth	r2, r3
 8001ef6:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001efa:	b21b      	sxth	r3, r3
 8001efc:	4313      	orrs	r3, r2
 8001efe:	b21b      	sxth	r3, r3
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe fb17 	bl	8000534 <__aeabi_i2d>
 8001f06:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001f0a:	f7fe fca7 	bl	800085c <__aeabi_ddiv>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001f16:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001f1a:	021b      	lsls	r3, r3, #8
 8001f1c:	b21a      	sxth	r2, r3
 8001f1e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001f22:	b21b      	sxth	r3, r3
 8001f24:	4313      	orrs	r3, r2
 8001f26:	b21b      	sxth	r3, r3
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe fb03 	bl	8000534 <__aeabi_i2d>
 8001f2e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001f32:	f7fe fc93 	bl	800085c <__aeabi_ddiv>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  }

  return xyz;
 8001f3e:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8001f42:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 8001f46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f4a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001f4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001f52:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001f56:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001f5a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001f5e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001f62:	ec49 8b14 	vmov	d4, r8, r9
 8001f66:	ec45 4b15 	vmov	d5, r4, r5
 8001f6a:	ec41 0b16 	vmov	d6, r0, r1
 8001f6e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001f72:	eeb0 0a44 	vmov.f32	s0, s8
 8001f76:	eef0 0a64 	vmov.f32	s1, s9
 8001f7a:	eeb0 1a45 	vmov.f32	s2, s10
 8001f7e:	eef0 1a65 	vmov.f32	s3, s11
 8001f82:	eeb0 2a46 	vmov.f32	s4, s12
 8001f86:	eef0 2a66 	vmov.f32	s5, s13
 8001f8a:	eeb0 3a47 	vmov.f32	s6, s14
 8001f8e:	eef0 3a67 	vmov.f32	s7, s15
 8001f92:	3778      	adds	r7, #120	@ 0x78
 8001f94:	46bd      	mov	sp, r7
 8001f96:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f9a:	bf00      	nop
 8001f9c:	3ff00000 	.word	0x3ff00000
 8001fa0:	20000016 	.word	0x20000016
 8001fa4:	20000010 	.word	0x20000010
 8001fa8:	20000012 	.word	0x20000012
 8001fac:	20000014 	.word	0x20000014
 8001fb0:	20000018 	.word	0x20000018

08001fb4 <bno055_getVectorAccelerometer>:

bno055_vector_t bno055_getVectorAccelerometer() {
 8001fb4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001fb8:	b090      	sub	sp, #64	@ 0x40
 8001fba:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
 8001fbc:	2008      	movs	r0, #8
 8001fbe:	f7ff feb5 	bl	8001d2c <bno055_getVector>
 8001fc2:	eeb0 4a40 	vmov.f32	s8, s0
 8001fc6:	eef0 4a60 	vmov.f32	s9, s1
 8001fca:	eeb0 5a41 	vmov.f32	s10, s2
 8001fce:	eef0 5a61 	vmov.f32	s11, s3
 8001fd2:	eeb0 6a42 	vmov.f32	s12, s4
 8001fd6:	eef0 6a62 	vmov.f32	s13, s5
 8001fda:	eeb0 7a43 	vmov.f32	s14, s6
 8001fde:	eef0 7a63 	vmov.f32	s15, s7
 8001fe2:	ed87 4b08 	vstr	d4, [r7, #32]
 8001fe6:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8001fea:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8001fee:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8001ff2:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ff6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001ffa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001ffe:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002002:	ec49 8b14 	vmov	d4, r8, r9
 8002006:	ec45 4b15 	vmov	d5, r4, r5
 800200a:	ec41 0b16 	vmov	d6, r0, r1
 800200e:	ec43 2b17 	vmov	d7, r2, r3
}
 8002012:	eeb0 0a44 	vmov.f32	s0, s8
 8002016:	eef0 0a64 	vmov.f32	s1, s9
 800201a:	eeb0 1a45 	vmov.f32	s2, s10
 800201e:	eef0 1a65 	vmov.f32	s3, s11
 8002022:	eeb0 2a46 	vmov.f32	s4, s12
 8002026:	eef0 2a66 	vmov.f32	s5, s13
 800202a:	eeb0 3a47 	vmov.f32	s6, s14
 800202e:	eef0 3a67 	vmov.f32	s7, s15
 8002032:	3740      	adds	r7, #64	@ 0x40
 8002034:	46bd      	mov	sp, r7
 8002036:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800203a <bno055_getVectorMagnetometer>:
bno055_vector_t bno055_getVectorMagnetometer() {
 800203a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800203e:	b090      	sub	sp, #64	@ 0x40
 8002040:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
 8002042:	200e      	movs	r0, #14
 8002044:	f7ff fe72 	bl	8001d2c <bno055_getVector>
 8002048:	eeb0 4a40 	vmov.f32	s8, s0
 800204c:	eef0 4a60 	vmov.f32	s9, s1
 8002050:	eeb0 5a41 	vmov.f32	s10, s2
 8002054:	eef0 5a61 	vmov.f32	s11, s3
 8002058:	eeb0 6a42 	vmov.f32	s12, s4
 800205c:	eef0 6a62 	vmov.f32	s13, s5
 8002060:	eeb0 7a43 	vmov.f32	s14, s6
 8002064:	eef0 7a63 	vmov.f32	s15, s7
 8002068:	ed87 4b08 	vstr	d4, [r7, #32]
 800206c:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8002070:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8002074:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8002078:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800207c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8002080:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002084:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002088:	ec49 8b14 	vmov	d4, r8, r9
 800208c:	ec45 4b15 	vmov	d5, r4, r5
 8002090:	ec41 0b16 	vmov	d6, r0, r1
 8002094:	ec43 2b17 	vmov	d7, r2, r3
}
 8002098:	eeb0 0a44 	vmov.f32	s0, s8
 800209c:	eef0 0a64 	vmov.f32	s1, s9
 80020a0:	eeb0 1a45 	vmov.f32	s2, s10
 80020a4:	eef0 1a65 	vmov.f32	s3, s11
 80020a8:	eeb0 2a46 	vmov.f32	s4, s12
 80020ac:	eef0 2a66 	vmov.f32	s5, s13
 80020b0:	eeb0 3a47 	vmov.f32	s6, s14
 80020b4:	eef0 3a67 	vmov.f32	s7, s15
 80020b8:	3740      	adds	r7, #64	@ 0x40
 80020ba:	46bd      	mov	sp, r7
 80020bc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080020c0 <bno055_getVectorGyroscope>:
bno055_vector_t bno055_getVectorGyroscope() {
 80020c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80020c4:	b090      	sub	sp, #64	@ 0x40
 80020c6:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
 80020c8:	2014      	movs	r0, #20
 80020ca:	f7ff fe2f 	bl	8001d2c <bno055_getVector>
 80020ce:	eeb0 4a40 	vmov.f32	s8, s0
 80020d2:	eef0 4a60 	vmov.f32	s9, s1
 80020d6:	eeb0 5a41 	vmov.f32	s10, s2
 80020da:	eef0 5a61 	vmov.f32	s11, s3
 80020de:	eeb0 6a42 	vmov.f32	s12, s4
 80020e2:	eef0 6a62 	vmov.f32	s13, s5
 80020e6:	eeb0 7a43 	vmov.f32	s14, s6
 80020ea:	eef0 7a63 	vmov.f32	s15, s7
 80020ee:	ed87 4b08 	vstr	d4, [r7, #32]
 80020f2:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 80020f6:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 80020fa:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 80020fe:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002102:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8002106:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800210a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800210e:	ec49 8b14 	vmov	d4, r8, r9
 8002112:	ec45 4b15 	vmov	d5, r4, r5
 8002116:	ec41 0b16 	vmov	d6, r0, r1
 800211a:	ec43 2b17 	vmov	d7, r2, r3
}
 800211e:	eeb0 0a44 	vmov.f32	s0, s8
 8002122:	eef0 0a64 	vmov.f32	s1, s9
 8002126:	eeb0 1a45 	vmov.f32	s2, s10
 800212a:	eef0 1a65 	vmov.f32	s3, s11
 800212e:	eeb0 2a46 	vmov.f32	s4, s12
 8002132:	eef0 2a66 	vmov.f32	s5, s13
 8002136:	eeb0 3a47 	vmov.f32	s6, s14
 800213a:	eef0 3a67 	vmov.f32	s7, s15
 800213e:	3740      	adds	r7, #64	@ 0x40
 8002140:	46bd      	mov	sp, r7
 8002142:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002146 <bno055_getVectorEuler>:
bno055_vector_t bno055_getVectorEuler() {
 8002146:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800214a:	b090      	sub	sp, #64	@ 0x40
 800214c:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 800214e:	201a      	movs	r0, #26
 8002150:	f7ff fdec 	bl	8001d2c <bno055_getVector>
 8002154:	eeb0 4a40 	vmov.f32	s8, s0
 8002158:	eef0 4a60 	vmov.f32	s9, s1
 800215c:	eeb0 5a41 	vmov.f32	s10, s2
 8002160:	eef0 5a61 	vmov.f32	s11, s3
 8002164:	eeb0 6a42 	vmov.f32	s12, s4
 8002168:	eef0 6a62 	vmov.f32	s13, s5
 800216c:	eeb0 7a43 	vmov.f32	s14, s6
 8002170:	eef0 7a63 	vmov.f32	s15, s7
 8002174:	ed87 4b08 	vstr	d4, [r7, #32]
 8002178:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 800217c:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8002180:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8002184:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002188:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 800218c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002190:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002194:	ec49 8b14 	vmov	d4, r8, r9
 8002198:	ec45 4b15 	vmov	d5, r4, r5
 800219c:	ec41 0b16 	vmov	d6, r0, r1
 80021a0:	ec43 2b17 	vmov	d7, r2, r3
}
 80021a4:	eeb0 0a44 	vmov.f32	s0, s8
 80021a8:	eef0 0a64 	vmov.f32	s1, s9
 80021ac:	eeb0 1a45 	vmov.f32	s2, s10
 80021b0:	eef0 1a65 	vmov.f32	s3, s11
 80021b4:	eeb0 2a46 	vmov.f32	s4, s12
 80021b8:	eef0 2a66 	vmov.f32	s5, s13
 80021bc:	eeb0 3a47 	vmov.f32	s6, s14
 80021c0:	eef0 3a67 	vmov.f32	s7, s15
 80021c4:	3740      	adds	r7, #64	@ 0x40
 80021c6:	46bd      	mov	sp, r7
 80021c8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080021cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	607b      	str	r3, [r7, #4]
 80021d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002208 <MX_DMA_Init+0x3c>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021da:	4a0b      	ldr	r2, [pc, #44]	@ (8002208 <MX_DMA_Init+0x3c>)
 80021dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80021e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021e2:	4b09      	ldr	r3, [pc, #36]	@ (8002208 <MX_DMA_Init+0x3c>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021ea:	607b      	str	r3, [r7, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80021ee:	2200      	movs	r2, #0
 80021f0:	2105      	movs	r1, #5
 80021f2:	2038      	movs	r0, #56	@ 0x38
 80021f4:	f001 fc9e 	bl	8003b34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80021f8:	2038      	movs	r0, #56	@ 0x38
 80021fa:	f001 fcb7 	bl	8003b6c <HAL_NVIC_EnableIRQ>

}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40023800 	.word	0x40023800

0800220c <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim11);
 8002210:	4802      	ldr	r0, [pc, #8]	@ (800221c <configureTimerForRunTimeStats+0x10>)
 8002212:	f003 fe9b 	bl	8005f4c <HAL_TIM_Base_Start_IT>
}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20000460 	.word	0x20000460

08002220 <getRunTimeCounterValue>:

extern volatile unsigned long ulHighFrequencyTimerTicks;
__weak unsigned long getRunTimeCounterValue(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 8002224:	4b03      	ldr	r3, [pc, #12]	@ (8002234 <getRunTimeCounterValue+0x14>)
 8002226:	681b      	ldr	r3, [r3, #0]
}
 8002228:	4618      	mov	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	200003a8 	.word	0x200003a8

08002238 <PreSleepProcessing>:
/* USER CODE END 1 */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

	// Start all 4 input captures
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8002264:	2100      	movs	r1, #0
 8002266:	4838      	ldr	r0, [pc, #224]	@ (8002348 <MX_FREERTOS_Init+0xe8>)
 8002268:	f003 ff7a 	bl	8006160 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 800226c:	2104      	movs	r1, #4
 800226e:	4836      	ldr	r0, [pc, #216]	@ (8002348 <MX_FREERTOS_Init+0xe8>)
 8002270:	f003 ff76 	bl	8006160 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8002274:	2108      	movs	r1, #8
 8002276:	4834      	ldr	r0, [pc, #208]	@ (8002348 <MX_FREERTOS_Init+0xe8>)
 8002278:	f003 ff72 	bl	8006160 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 800227c:	210c      	movs	r1, #12
 800227e:	4832      	ldr	r0, [pc, #200]	@ (8002348 <MX_FREERTOS_Init+0xe8>)
 8002280:	f003 ff6e 	bl	8006160 <HAL_TIM_IC_Start_IT>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of radioQueue */
  radioQueueHandle = osMessageQueueNew (1, sizeof(RadioData_t), &radioQueue_attributes);
 8002284:	4a31      	ldr	r2, [pc, #196]	@ (800234c <MX_FREERTOS_Init+0xec>)
 8002286:	2110      	movs	r1, #16
 8002288:	2001      	movs	r0, #1
 800228a:	f005 fdba 	bl	8007e02 <osMessageQueueNew>
 800228e:	4603      	mov	r3, r0
 8002290:	4a2f      	ldr	r2, [pc, #188]	@ (8002350 <MX_FREERTOS_Init+0xf0>)
 8002292:	6013      	str	r3, [r2, #0]

  /* creation of adcQueue */
  adcQueueHandle = osMessageQueueNew (1, sizeof(AdcData_t), &adcQueue_attributes);
 8002294:	4a2f      	ldr	r2, [pc, #188]	@ (8002354 <MX_FREERTOS_Init+0xf4>)
 8002296:	2110      	movs	r1, #16
 8002298:	2001      	movs	r0, #1
 800229a:	f005 fdb2 	bl	8007e02 <osMessageQueueNew>
 800229e:	4603      	mov	r3, r0
 80022a0:	4a2d      	ldr	r2, [pc, #180]	@ (8002358 <MX_FREERTOS_Init+0xf8>)
 80022a2:	6013      	str	r3, [r2, #0]

  /* creation of imuQueue */
  imuQueueHandle = osMessageQueueNew (1, sizeof(ImuData_t), &imuQueue_attributes);
 80022a4:	4a2d      	ldr	r2, [pc, #180]	@ (800235c <MX_FREERTOS_Init+0xfc>)
 80022a6:	2130      	movs	r1, #48	@ 0x30
 80022a8:	2001      	movs	r0, #1
 80022aa:	f005 fdaa 	bl	8007e02 <osMessageQueueNew>
 80022ae:	4603      	mov	r3, r0
 80022b0:	4a2b      	ldr	r2, [pc, #172]	@ (8002360 <MX_FREERTOS_Init+0x100>)
 80022b2:	6013      	str	r3, [r2, #0]

  /* creation of telemetryQueue */
  controlQueueHandle = osMessageQueueNew (1, sizeof(ControlData_t), &controlQueue_attributes);
 80022b4:	4a2b      	ldr	r2, [pc, #172]	@ (8002364 <MX_FREERTOS_Init+0x104>)
 80022b6:	2118      	movs	r1, #24
 80022b8:	2001      	movs	r0, #1
 80022ba:	f005 fda2 	bl	8007e02 <osMessageQueueNew>
 80022be:	4603      	mov	r3, r0
 80022c0:	4a29      	ldr	r2, [pc, #164]	@ (8002368 <MX_FREERTOS_Init+0x108>)
 80022c2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  // Allowing the kernel-aware debugger to get to know our queues
  vQueueAddToRegistry( radioQueueHandle, "radioQueue" );
 80022c4:	4b22      	ldr	r3, [pc, #136]	@ (8002350 <MX_FREERTOS_Init+0xf0>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4928      	ldr	r1, [pc, #160]	@ (800236c <MX_FREERTOS_Init+0x10c>)
 80022ca:	4618      	mov	r0, r3
 80022cc:	f006 fd6a 	bl	8008da4 <vQueueAddToRegistry>
  vQueueAddToRegistry( adcQueueHandle, "adcQueue" );
 80022d0:	4b21      	ldr	r3, [pc, #132]	@ (8002358 <MX_FREERTOS_Init+0xf8>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4926      	ldr	r1, [pc, #152]	@ (8002370 <MX_FREERTOS_Init+0x110>)
 80022d6:	4618      	mov	r0, r3
 80022d8:	f006 fd64 	bl	8008da4 <vQueueAddToRegistry>
  vQueueAddToRegistry( imuQueueHandle, "imuQueue" );
 80022dc:	4b20      	ldr	r3, [pc, #128]	@ (8002360 <MX_FREERTOS_Init+0x100>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4924      	ldr	r1, [pc, #144]	@ (8002374 <MX_FREERTOS_Init+0x114>)
 80022e2:	4618      	mov	r0, r3
 80022e4:	f006 fd5e 	bl	8008da4 <vQueueAddToRegistry>
  vQueueAddToRegistry( controlQueueHandle, "controlQueue" );
 80022e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002368 <MX_FREERTOS_Init+0x108>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4922      	ldr	r1, [pc, #136]	@ (8002378 <MX_FREERTOS_Init+0x118>)
 80022ee:	4618      	mov	r0, r3
 80022f0:	f006 fd58 	bl	8008da4 <vQueueAddToRegistry>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80022f4:	4a21      	ldr	r2, [pc, #132]	@ (800237c <MX_FREERTOS_Init+0x11c>)
 80022f6:	2100      	movs	r1, #0
 80022f8:	4821      	ldr	r0, [pc, #132]	@ (8002380 <MX_FREERTOS_Init+0x120>)
 80022fa:	f005 fcd5 	bl	8007ca8 <osThreadNew>
 80022fe:	4603      	mov	r3, r0
 8002300:	4a20      	ldr	r2, [pc, #128]	@ (8002384 <MX_FREERTOS_Init+0x124>)
 8002302:	6013      	str	r3, [r2, #0]

  /* creation of control_task */
  control_taskHandle = osThreadNew(_control_task, NULL, &control_task_attributes);
 8002304:	4a20      	ldr	r2, [pc, #128]	@ (8002388 <MX_FREERTOS_Init+0x128>)
 8002306:	2100      	movs	r1, #0
 8002308:	4820      	ldr	r0, [pc, #128]	@ (800238c <MX_FREERTOS_Init+0x12c>)
 800230a:	f005 fccd 	bl	8007ca8 <osThreadNew>
 800230e:	4603      	mov	r3, r0
 8002310:	4a1f      	ldr	r2, [pc, #124]	@ (8002390 <MX_FREERTOS_Init+0x130>)
 8002312:	6013      	str	r3, [r2, #0]

  /* creation of imu_read_task */
  imu_read_taskHandle = osThreadNew(_imu_read_task, NULL, &imu_read_task_attributes);
 8002314:	4a1f      	ldr	r2, [pc, #124]	@ (8002394 <MX_FREERTOS_Init+0x134>)
 8002316:	2100      	movs	r1, #0
 8002318:	481f      	ldr	r0, [pc, #124]	@ (8002398 <MX_FREERTOS_Init+0x138>)
 800231a:	f005 fcc5 	bl	8007ca8 <osThreadNew>
 800231e:	4603      	mov	r3, r0
 8002320:	4a1e      	ldr	r2, [pc, #120]	@ (800239c <MX_FREERTOS_Init+0x13c>)
 8002322:	6013      	str	r3, [r2, #0]

  /* creation of adc_read_task */
  adc_read_taskHandle = osThreadNew(_adc_read_task, NULL, &adc_read_task_attributes);
 8002324:	4a1e      	ldr	r2, [pc, #120]	@ (80023a0 <MX_FREERTOS_Init+0x140>)
 8002326:	2100      	movs	r1, #0
 8002328:	481e      	ldr	r0, [pc, #120]	@ (80023a4 <MX_FREERTOS_Init+0x144>)
 800232a:	f005 fcbd 	bl	8007ca8 <osThreadNew>
 800232e:	4603      	mov	r3, r0
 8002330:	4a1d      	ldr	r2, [pc, #116]	@ (80023a8 <MX_FREERTOS_Init+0x148>)
 8002332:	6013      	str	r3, [r2, #0]

  /* creation of telemetry_task */
  telemetry_taskHandle = osThreadNew(_telemetry_task, NULL, &telemetry_task_attributes);
 8002334:	4a1d      	ldr	r2, [pc, #116]	@ (80023ac <MX_FREERTOS_Init+0x14c>)
 8002336:	2100      	movs	r1, #0
 8002338:	481d      	ldr	r0, [pc, #116]	@ (80023b0 <MX_FREERTOS_Init+0x150>)
 800233a:	f005 fcb5 	bl	8007ca8 <osThreadNew>
 800233e:	4603      	mov	r3, r0
 8002340:	4a1c      	ldr	r2, [pc, #112]	@ (80023b4 <MX_FREERTOS_Init+0x154>)
 8002342:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002344:	bf00      	nop
 8002346:	bd80      	pop	{r7, pc}
 8002348:	200003d0 	.word	0x200003d0
 800234c:	0800e28c 	.word	0x0800e28c
 8002350:	200002fc 	.word	0x200002fc
 8002354:	0800e2a4 	.word	0x0800e2a4
 8002358:	20000300 	.word	0x20000300
 800235c:	0800e2bc 	.word	0x0800e2bc
 8002360:	20000304 	.word	0x20000304
 8002364:	0800e2d4 	.word	0x0800e2d4
 8002368:	20000308 	.word	0x20000308
 800236c:	0800e164 	.word	0x0800e164
 8002370:	0800e170 	.word	0x0800e170
 8002374:	0800e17c 	.word	0x0800e17c
 8002378:	0800e188 	.word	0x0800e188
 800237c:	0800e1d8 	.word	0x0800e1d8
 8002380:	080023b9 	.word	0x080023b9
 8002384:	200002e8 	.word	0x200002e8
 8002388:	0800e1fc 	.word	0x0800e1fc
 800238c:	080023d9 	.word	0x080023d9
 8002390:	200002ec 	.word	0x200002ec
 8002394:	0800e220 	.word	0x0800e220
 8002398:	080023fd 	.word	0x080023fd
 800239c:	200002f0 	.word	0x200002f0
 80023a0:	0800e244 	.word	0x0800e244
 80023a4:	08002421 	.word	0x08002421
 80023a8:	200002f4 	.word	0x200002f4
 80023ac:	0800e268 	.word	0x0800e268
 80023b0:	08002445 	.word	0x08002445
 80023b4:	200002f8 	.word	0x200002f8

080023b8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	idle_dummy++; // Keep incrementing the dummy variable
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <StartDefaultTask+0x1c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	3301      	adds	r3, #1
 80023c6:	4a03      	ldr	r2, [pc, #12]	@ (80023d4 <StartDefaultTask+0x1c>)
 80023c8:	6013      	str	r3, [r2, #0]
    osDelay(1); // A small delay to avoid task starvation
 80023ca:	2001      	movs	r0, #1
 80023cc:	f005 fcfe 	bl	8007dcc <osDelay>
	idle_dummy++; // Keep incrementing the dummy variable
 80023d0:	bf00      	nop
 80023d2:	e7f5      	b.n	80023c0 <StartDefaultTask+0x8>
 80023d4:	200002d4 	.word	0x200002d4

080023d8 <_control_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header__control_task */
void _control_task(void *argument)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN _control_task */
  for(;;)
  {
	control_dummy++;
 80023e0:	4b05      	ldr	r3, [pc, #20]	@ (80023f8 <_control_task+0x20>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	3301      	adds	r3, #1
 80023e6:	4a04      	ldr	r2, [pc, #16]	@ (80023f8 <_control_task+0x20>)
 80023e8:	6013      	str	r3, [r2, #0]
    control(); // Execute control function
 80023ea:	f7fe fe23 	bl	8001034 <control>
    osDelay(CONTROL_DELAY);
 80023ee:	200a      	movs	r0, #10
 80023f0:	f005 fcec 	bl	8007dcc <osDelay>
	control_dummy++;
 80023f4:	bf00      	nop
 80023f6:	e7f3      	b.n	80023e0 <_control_task+0x8>
 80023f8:	200002d8 	.word	0x200002d8

080023fc <_imu_read_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header__imu_read_task */
void _imu_read_task(void *argument)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN _imu_read_task */
  for(;;)
  {
	imu_dummy++;
 8002404:	4b05      	ldr	r3, [pc, #20]	@ (800241c <_imu_read_task+0x20>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	3301      	adds	r3, #1
 800240a:	4a04      	ldr	r2, [pc, #16]	@ (800241c <_imu_read_task+0x20>)
 800240c:	6013      	str	r3, [r2, #0]
    imu_read(); // Execute imu read function
 800240e:	f7fe ff27 	bl	8001260 <imu_read>
    osDelay(IMU_DELAY);
 8002412:	2019      	movs	r0, #25
 8002414:	f005 fcda 	bl	8007dcc <osDelay>
	imu_dummy++;
 8002418:	bf00      	nop
 800241a:	e7f3      	b.n	8002404 <_imu_read_task+0x8>
 800241c:	200002e0 	.word	0x200002e0

08002420 <_adc_read_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header__adc_read_task */
void _adc_read_task(void *argument)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN _adc_read_task */
  for(;;)
  {
	adc_dummy++;
 8002428:	4b05      	ldr	r3, [pc, #20]	@ (8002440 <_adc_read_task+0x20>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	3301      	adds	r3, #1
 800242e:	4a04      	ldr	r2, [pc, #16]	@ (8002440 <_adc_read_task+0x20>)
 8002430:	6013      	str	r3, [r2, #0]
    adc_read(); // Execute ADC read function
 8002432:	f7fe fd89 	bl	8000f48 <adc_read>
    osDelay(ADC_DELAY);
 8002436:	2019      	movs	r0, #25
 8002438:	f005 fcc8 	bl	8007dcc <osDelay>
	adc_dummy++;
 800243c:	bf00      	nop
 800243e:	e7f3      	b.n	8002428 <_adc_read_task+0x8>
 8002440:	200002e4 	.word	0x200002e4

08002444 <_telemetry_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header__telemetry_task */
void _telemetry_task(void *argument)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN _telemetry_task */
  for(;;)
  {
	telemetry_dummy++;
 800244c:	4b06      	ldr	r3, [pc, #24]	@ (8002468 <_telemetry_task+0x24>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	3301      	adds	r3, #1
 8002452:	4a05      	ldr	r2, [pc, #20]	@ (8002468 <_telemetry_task+0x24>)
 8002454:	6013      	str	r3, [r2, #0]
    telemetry(); // Execute telemetry function
 8002456:	f7fe ffef 	bl	8001438 <telemetry>
    osDelay(TELEMETRY_DELAY);
 800245a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800245e:	f005 fcb5 	bl	8007dcc <osDelay>
	telemetry_dummy++;
 8002462:	bf00      	nop
 8002464:	e7f2      	b.n	800244c <_telemetry_task+0x8>
 8002466:	bf00      	nop
 8002468:	200002dc 	.word	0x200002dc

0800246c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	607b      	str	r3, [r7, #4]
 8002476:	4b10      	ldr	r3, [pc, #64]	@ (80024b8 <MX_GPIO_Init+0x4c>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247a:	4a0f      	ldr	r2, [pc, #60]	@ (80024b8 <MX_GPIO_Init+0x4c>)
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	6313      	str	r3, [r2, #48]	@ 0x30
 8002482:	4b0d      	ldr	r3, [pc, #52]	@ (80024b8 <MX_GPIO_Init+0x4c>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	607b      	str	r3, [r7, #4]
 800248c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	603b      	str	r3, [r7, #0]
 8002492:	4b09      	ldr	r3, [pc, #36]	@ (80024b8 <MX_GPIO_Init+0x4c>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002496:	4a08      	ldr	r2, [pc, #32]	@ (80024b8 <MX_GPIO_Init+0x4c>)
 8002498:	f043 0302 	orr.w	r3, r3, #2
 800249c:	6313      	str	r3, [r2, #48]	@ 0x30
 800249e:	4b06      	ldr	r3, [pc, #24]	@ (80024b8 <MX_GPIO_Init+0x4c>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	603b      	str	r3, [r7, #0]
 80024a8:	683b      	ldr	r3, [r7, #0]

}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	40023800 	.word	0x40023800

080024bc <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80024c0:	4b12      	ldr	r3, [pc, #72]	@ (800250c <MX_I2C3_Init+0x50>)
 80024c2:	4a13      	ldr	r2, [pc, #76]	@ (8002510 <MX_I2C3_Init+0x54>)
 80024c4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80024c6:	4b11      	ldr	r3, [pc, #68]	@ (800250c <MX_I2C3_Init+0x50>)
 80024c8:	4a12      	ldr	r2, [pc, #72]	@ (8002514 <MX_I2C3_Init+0x58>)
 80024ca:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024cc:	4b0f      	ldr	r3, [pc, #60]	@ (800250c <MX_I2C3_Init+0x50>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80024d2:	4b0e      	ldr	r3, [pc, #56]	@ (800250c <MX_I2C3_Init+0x50>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024d8:	4b0c      	ldr	r3, [pc, #48]	@ (800250c <MX_I2C3_Init+0x50>)
 80024da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80024de:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024e0:	4b0a      	ldr	r3, [pc, #40]	@ (800250c <MX_I2C3_Init+0x50>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80024e6:	4b09      	ldr	r3, [pc, #36]	@ (800250c <MX_I2C3_Init+0x50>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024ec:	4b07      	ldr	r3, [pc, #28]	@ (800250c <MX_I2C3_Init+0x50>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024f2:	4b06      	ldr	r3, [pc, #24]	@ (800250c <MX_I2C3_Init+0x50>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80024f8:	4804      	ldr	r0, [pc, #16]	@ (800250c <MX_I2C3_Init+0x50>)
 80024fa:	f002 f839 	bl	8004570 <HAL_I2C_Init>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002504:	f000 f90a 	bl	800271c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002508:	bf00      	nop
 800250a:	bd80      	pop	{r7, pc}
 800250c:	2000030c 	.word	0x2000030c
 8002510:	40005c00 	.word	0x40005c00
 8002514:	000186a0 	.word	0x000186a0

08002518 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b08a      	sub	sp, #40	@ 0x28
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002520:	f107 0314 	add.w	r3, r7, #20
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	60da      	str	r2, [r3, #12]
 800252e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a28      	ldr	r2, [pc, #160]	@ (80025d8 <HAL_I2C_MspInit+0xc0>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d14a      	bne.n	80025d0 <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	613b      	str	r3, [r7, #16]
 800253e:	4b27      	ldr	r3, [pc, #156]	@ (80025dc <HAL_I2C_MspInit+0xc4>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002542:	4a26      	ldr	r2, [pc, #152]	@ (80025dc <HAL_I2C_MspInit+0xc4>)
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	6313      	str	r3, [r2, #48]	@ 0x30
 800254a:	4b24      	ldr	r3, [pc, #144]	@ (80025dc <HAL_I2C_MspInit+0xc4>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	613b      	str	r3, [r7, #16]
 8002554:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	4b20      	ldr	r3, [pc, #128]	@ (80025dc <HAL_I2C_MspInit+0xc4>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255e:	4a1f      	ldr	r2, [pc, #124]	@ (80025dc <HAL_I2C_MspInit+0xc4>)
 8002560:	f043 0302 	orr.w	r3, r3, #2
 8002564:	6313      	str	r3, [r2, #48]	@ 0x30
 8002566:	4b1d      	ldr	r3, [pc, #116]	@ (80025dc <HAL_I2C_MspInit+0xc4>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = IMU_CLK_Pin;
 8002572:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002578:	2312      	movs	r3, #18
 800257a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800257c:	2301      	movs	r3, #1
 800257e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002580:	2303      	movs	r3, #3
 8002582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002584:	2304      	movs	r3, #4
 8002586:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(IMU_CLK_GPIO_Port, &GPIO_InitStruct);
 8002588:	f107 0314 	add.w	r3, r7, #20
 800258c:	4619      	mov	r1, r3
 800258e:	4814      	ldr	r0, [pc, #80]	@ (80025e0 <HAL_I2C_MspInit+0xc8>)
 8002590:	f001 fe6a 	bl	8004268 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IMU_SDA_Pin;
 8002594:	2310      	movs	r3, #16
 8002596:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002598:	2312      	movs	r3, #18
 800259a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800259c:	2301      	movs	r3, #1
 800259e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a0:	2303      	movs	r3, #3
 80025a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 80025a4:	2309      	movs	r3, #9
 80025a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(IMU_SDA_GPIO_Port, &GPIO_InitStruct);
 80025a8:	f107 0314 	add.w	r3, r7, #20
 80025ac:	4619      	mov	r1, r3
 80025ae:	480d      	ldr	r0, [pc, #52]	@ (80025e4 <HAL_I2C_MspInit+0xcc>)
 80025b0:	f001 fe5a 	bl	8004268 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80025b4:	2300      	movs	r3, #0
 80025b6:	60bb      	str	r3, [r7, #8]
 80025b8:	4b08      	ldr	r3, [pc, #32]	@ (80025dc <HAL_I2C_MspInit+0xc4>)
 80025ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025bc:	4a07      	ldr	r2, [pc, #28]	@ (80025dc <HAL_I2C_MspInit+0xc4>)
 80025be:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80025c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80025c4:	4b05      	ldr	r3, [pc, #20]	@ (80025dc <HAL_I2C_MspInit+0xc4>)
 80025c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025cc:	60bb      	str	r3, [r7, #8]
 80025ce:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80025d0:	bf00      	nop
 80025d2:	3728      	adds	r7, #40	@ 0x28
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40005c00 	.word	0x40005c00
 80025dc:	40023800 	.word	0x40023800
 80025e0:	40020000 	.word	0x40020000
 80025e4:	40020400 	.word	0x40020400

080025e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 80025ec:	f000 fdb6 	bl	800315c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025f0:	f000 f818 	bl	8002624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025f4:	f7ff ff3a 	bl	800246c <MX_GPIO_Init>
  MX_DMA_Init();
 80025f8:	f7ff fde8 	bl	80021cc <MX_DMA_Init>
  MX_ADC1_Init();
 80025fc:	f7ff fa94 	bl	8001b28 <MX_ADC1_Init>
  MX_TIM3_Init();
 8002600:	f000 faf8 	bl	8002bf4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002604:	f000 fb88 	bl	8002d18 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8002608:	f000 fd0c 	bl	8003024 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 800260c:	f7ff ff56 	bl	80024bc <MX_I2C3_Init>
  MX_TIM11_Init();
 8002610:	f000 fbfc 	bl	8002e0c <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002614:	f005 fafe 	bl	8007c14 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002618:	f7ff fe22 	bl	8002260 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800261c:	f005 fb1e 	bl	8007c5c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002620:	bf00      	nop
 8002622:	e7fd      	b.n	8002620 <main+0x38>

08002624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b094      	sub	sp, #80	@ 0x50
 8002628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800262a:	f107 0320 	add.w	r3, r7, #32
 800262e:	2230      	movs	r2, #48	@ 0x30
 8002630:	2100      	movs	r1, #0
 8002632:	4618      	mov	r0, r3
 8002634:	f009 fb3a 	bl	800bcac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002638:	f107 030c 	add.w	r3, r7, #12
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	609a      	str	r2, [r3, #8]
 8002644:	60da      	str	r2, [r3, #12]
 8002646:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002648:	2300      	movs	r3, #0
 800264a:	60bb      	str	r3, [r7, #8]
 800264c:	4b28      	ldr	r3, [pc, #160]	@ (80026f0 <SystemClock_Config+0xcc>)
 800264e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002650:	4a27      	ldr	r2, [pc, #156]	@ (80026f0 <SystemClock_Config+0xcc>)
 8002652:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002656:	6413      	str	r3, [r2, #64]	@ 0x40
 8002658:	4b25      	ldr	r3, [pc, #148]	@ (80026f0 <SystemClock_Config+0xcc>)
 800265a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002660:	60bb      	str	r3, [r7, #8]
 8002662:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002664:	2300      	movs	r3, #0
 8002666:	607b      	str	r3, [r7, #4]
 8002668:	4b22      	ldr	r3, [pc, #136]	@ (80026f4 <SystemClock_Config+0xd0>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002670:	4a20      	ldr	r2, [pc, #128]	@ (80026f4 <SystemClock_Config+0xd0>)
 8002672:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002676:	6013      	str	r3, [r2, #0]
 8002678:	4b1e      	ldr	r3, [pc, #120]	@ (80026f4 <SystemClock_Config+0xd0>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002680:	607b      	str	r3, [r7, #4]
 8002682:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002684:	2302      	movs	r3, #2
 8002686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002688:	2301      	movs	r3, #1
 800268a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800268c:	2310      	movs	r3, #16
 800268e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002690:	2302      	movs	r3, #2
 8002692:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002694:	2300      	movs	r3, #0
 8002696:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002698:	2308      	movs	r3, #8
 800269a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 800269c:	2354      	movs	r3, #84	@ 0x54
 800269e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026a0:	2302      	movs	r3, #2
 80026a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80026a4:	2304      	movs	r3, #4
 80026a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026a8:	f107 0320 	add.w	r3, r7, #32
 80026ac:	4618      	mov	r0, r3
 80026ae:	f002 ff73 	bl	8005598 <HAL_RCC_OscConfig>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80026b8:	f000 f830 	bl	800271c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026bc:	230f      	movs	r3, #15
 80026be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026c0:	2302      	movs	r3, #2
 80026c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026c4:	2300      	movs	r3, #0
 80026c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026ce:	2300      	movs	r3, #0
 80026d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026d2:	f107 030c 	add.w	r3, r7, #12
 80026d6:	2102      	movs	r1, #2
 80026d8:	4618      	mov	r0, r3
 80026da:	f003 f9d5 	bl	8005a88 <HAL_RCC_ClockConfig>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80026e4:	f000 f81a 	bl	800271c <Error_Handler>
  }
}
 80026e8:	bf00      	nop
 80026ea:	3750      	adds	r7, #80	@ 0x50
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40023800 	.word	0x40023800
 80026f4:	40007000 	.word	0x40007000

080026f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a04      	ldr	r2, [pc, #16]	@ (8002718 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d101      	bne.n	800270e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800270a:	f000 fd49 	bl	80031a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40014400 	.word	0x40014400

0800271c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002720:	b672      	cpsid	i
}
 8002722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002724:	bf00      	nop
 8002726:	e7fd      	b.n	8002724 <Error_Handler+0x8>

08002728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	607b      	str	r3, [r7, #4]
 8002732:	4b12      	ldr	r3, [pc, #72]	@ (800277c <HAL_MspInit+0x54>)
 8002734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002736:	4a11      	ldr	r2, [pc, #68]	@ (800277c <HAL_MspInit+0x54>)
 8002738:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800273c:	6453      	str	r3, [r2, #68]	@ 0x44
 800273e:	4b0f      	ldr	r3, [pc, #60]	@ (800277c <HAL_MspInit+0x54>)
 8002740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002742:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002746:	607b      	str	r3, [r7, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	603b      	str	r3, [r7, #0]
 800274e:	4b0b      	ldr	r3, [pc, #44]	@ (800277c <HAL_MspInit+0x54>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002752:	4a0a      	ldr	r2, [pc, #40]	@ (800277c <HAL_MspInit+0x54>)
 8002754:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002758:	6413      	str	r3, [r2, #64]	@ 0x40
 800275a:	4b08      	ldr	r3, [pc, #32]	@ (800277c <HAL_MspInit+0x54>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002762:	603b      	str	r3, [r7, #0]
 8002764:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002766:	2200      	movs	r2, #0
 8002768:	210f      	movs	r1, #15
 800276a:	f06f 0001 	mvn.w	r0, #1
 800276e:	f001 f9e1 	bl	8003b34 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002772:	bf00      	nop
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40023800 	.word	0x40023800

08002780 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b08c      	sub	sp, #48	@ 0x30
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800278c:	2300      	movs	r3, #0
 800278e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8002790:	2300      	movs	r3, #0
 8002792:	60bb      	str	r3, [r7, #8]
 8002794:	4b2e      	ldr	r3, [pc, #184]	@ (8002850 <HAL_InitTick+0xd0>)
 8002796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002798:	4a2d      	ldr	r2, [pc, #180]	@ (8002850 <HAL_InitTick+0xd0>)
 800279a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800279e:	6453      	str	r3, [r2, #68]	@ 0x44
 80027a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002850 <HAL_InitTick+0xd0>)
 80027a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027a8:	60bb      	str	r3, [r7, #8]
 80027aa:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80027ac:	f107 020c 	add.w	r2, r7, #12
 80027b0:	f107 0310 	add.w	r3, r7, #16
 80027b4:	4611      	mov	r1, r2
 80027b6:	4618      	mov	r0, r3
 80027b8:	f003 fb46 	bl	8005e48 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80027bc:	f003 fb30 	bl	8005e20 <HAL_RCC_GetPCLK2Freq>
 80027c0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80027c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027c4:	4a23      	ldr	r2, [pc, #140]	@ (8002854 <HAL_InitTick+0xd4>)
 80027c6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ca:	0c9b      	lsrs	r3, r3, #18
 80027cc:	3b01      	subs	r3, #1
 80027ce:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80027d0:	4b21      	ldr	r3, [pc, #132]	@ (8002858 <HAL_InitTick+0xd8>)
 80027d2:	4a22      	ldr	r2, [pc, #136]	@ (800285c <HAL_InitTick+0xdc>)
 80027d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 80027d6:	4b20      	ldr	r3, [pc, #128]	@ (8002858 <HAL_InitTick+0xd8>)
 80027d8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80027dc:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80027de:	4a1e      	ldr	r2, [pc, #120]	@ (8002858 <HAL_InitTick+0xd8>)
 80027e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e2:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 80027e4:	4b1c      	ldr	r3, [pc, #112]	@ (8002858 <HAL_InitTick+0xd8>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002858 <HAL_InitTick+0xd8>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027f0:	4b19      	ldr	r3, [pc, #100]	@ (8002858 <HAL_InitTick+0xd8>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 80027f6:	4818      	ldr	r0, [pc, #96]	@ (8002858 <HAL_InitTick+0xd8>)
 80027f8:	f003 fb58 	bl	8005eac <HAL_TIM_Base_Init>
 80027fc:	4603      	mov	r3, r0
 80027fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002802:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002806:	2b00      	cmp	r3, #0
 8002808:	d11b      	bne.n	8002842 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 800280a:	4813      	ldr	r0, [pc, #76]	@ (8002858 <HAL_InitTick+0xd8>)
 800280c:	f003 fb9e 	bl	8005f4c <HAL_TIM_Base_Start_IT>
 8002810:	4603      	mov	r3, r0
 8002812:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002816:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800281a:	2b00      	cmp	r3, #0
 800281c:	d111      	bne.n	8002842 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800281e:	2019      	movs	r0, #25
 8002820:	f001 f9a4 	bl	8003b6c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b0f      	cmp	r3, #15
 8002828:	d808      	bhi.n	800283c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800282a:	2200      	movs	r2, #0
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	2019      	movs	r0, #25
 8002830:	f001 f980 	bl	8003b34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002834:	4a0a      	ldr	r2, [pc, #40]	@ (8002860 <HAL_InitTick+0xe0>)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6013      	str	r3, [r2, #0]
 800283a:	e002      	b.n	8002842 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002842:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002846:	4618      	mov	r0, r3
 8002848:	3730      	adds	r7, #48	@ 0x30
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40023800 	.word	0x40023800
 8002854:	431bde83 	.word	0x431bde83
 8002858:	20000360 	.word	0x20000360
 800285c:	40014400 	.word	0x40014400
 8002860:	20000020 	.word	0x20000020

08002864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002868:	bf00      	nop
 800286a:	e7fd      	b.n	8002868 <NMI_Handler+0x4>

0800286c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002870:	bf00      	nop
 8002872:	e7fd      	b.n	8002870 <HardFault_Handler+0x4>

08002874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002878:	bf00      	nop
 800287a:	e7fd      	b.n	8002878 <MemManage_Handler+0x4>

0800287c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002880:	bf00      	nop
 8002882:	e7fd      	b.n	8002880 <BusFault_Handler+0x4>

08002884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002888:	bf00      	nop
 800288a:	e7fd      	b.n	8002888 <UsageFault_Handler+0x4>

0800288c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002890:	bf00      	nop
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
	...

0800289c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80028a0:	4802      	ldr	r0, [pc, #8]	@ (80028ac <TIM1_UP_TIM10_IRQHandler+0x10>)
 80028a2:	f003 fd77 	bl	8006394 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80028a6:	bf00      	nop
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20000360 	.word	0x20000360

080028b0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80028b4:	4804      	ldr	r0, [pc, #16]	@ (80028c8 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80028b6:	f003 fd6d 	bl	8006394 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */
  ulHighFrequencyTimerTicks++;
 80028ba:	4b04      	ldr	r3, [pc, #16]	@ (80028cc <TIM1_TRG_COM_TIM11_IRQHandler+0x1c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	3301      	adds	r3, #1
 80028c0:	4a02      	ldr	r2, [pc, #8]	@ (80028cc <TIM1_TRG_COM_TIM11_IRQHandler+0x1c>)
 80028c2:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80028c4:	bf00      	nop
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	20000460 	.word	0x20000460
 80028cc:	200003a8 	.word	0x200003a8

080028d0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80028d4:	4802      	ldr	r0, [pc, #8]	@ (80028e0 <TIM3_IRQHandler+0x10>)
 80028d6:	f003 fd5d 	bl	8006394 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80028da:	bf00      	nop
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	200003d0 	.word	0x200003d0

080028e4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80028e8:	4802      	ldr	r0, [pc, #8]	@ (80028f4 <DMA2_Stream0_IRQHandler+0x10>)
 80028ea:	f001 fa53 	bl	8003d94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80028ee:	bf00      	nop
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	20000274 	.word	0x20000274

080028f8 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE BEGIN 1 */
volatile uint32_t ic_rising[4] = {0};  // Stores rising edge timestamps
volatile uint32_t widths[4] = {0};  // Stores pulse width

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
	// TODO: Handle overflow
    uint32_t captured_value = 0;
 8002900:	2300      	movs	r3, #0
 8002902:	60fb      	str	r3, [r7, #12]

    if (htim->Instance == TIM3) // Ensure it’s TIM3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a47      	ldr	r2, [pc, #284]	@ (8002a28 <HAL_TIM_IC_CaptureCallback+0x130>)
 800290a:	4293      	cmp	r3, r2
 800290c:	f040 8087 	bne.w	8002a1e <HAL_TIM_IC_CaptureCallback+0x126>
    {
        if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	7f1b      	ldrb	r3, [r3, #28]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d11d      	bne.n	8002954 <HAL_TIM_IC_CaptureCallback+0x5c>
        {
            captured_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002918:	2100      	movs	r1, #0
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f004 f850 	bl	80069c0 <HAL_TIM_ReadCapturedValue>
 8002920:	60f8      	str	r0, [r7, #12]
            if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim)) // Falling edge detected
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0310 	and.w	r3, r3, #16
 800292c:	2b10      	cmp	r3, #16
 800292e:	d10d      	bne.n	800294c <HAL_TIM_IC_CaptureCallback+0x54>
            {
            	widths[0] = captured_value - ic_rising[0];
 8002930:	4b3e      	ldr	r3, [pc, #248]	@ (8002a2c <HAL_TIM_IC_CaptureCallback+0x134>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	4a3d      	ldr	r2, [pc, #244]	@ (8002a30 <HAL_TIM_IC_CaptureCallback+0x138>)
 800293a:	6013      	str	r3, [r2, #0]
                osMessageQueuePut(radioQueueHandle, (const void *)&widths[0], 0, 0);
 800293c:	4b3d      	ldr	r3, [pc, #244]	@ (8002a34 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800293e:	6818      	ldr	r0, [r3, #0]
 8002940:	2300      	movs	r3, #0
 8002942:	2200      	movs	r2, #0
 8002944:	493a      	ldr	r1, [pc, #232]	@ (8002a30 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002946:	f005 facf 	bl	8007ee8 <osMessageQueuePut>
            {
                ic_rising[3] = captured_value;
            }
        }
    }
}
 800294a:	e068      	b.n	8002a1e <HAL_TIM_IC_CaptureCallback+0x126>
                ic_rising[0] = captured_value;
 800294c:	4a37      	ldr	r2, [pc, #220]	@ (8002a2c <HAL_TIM_IC_CaptureCallback+0x134>)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6013      	str	r3, [r2, #0]
}
 8002952:	e064      	b.n	8002a1e <HAL_TIM_IC_CaptureCallback+0x126>
        else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	7f1b      	ldrb	r3, [r3, #28]
 8002958:	2b02      	cmp	r3, #2
 800295a:	d11d      	bne.n	8002998 <HAL_TIM_IC_CaptureCallback+0xa0>
            captured_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800295c:	2104      	movs	r1, #4
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f004 f82e 	bl	80069c0 <HAL_TIM_ReadCapturedValue>
 8002964:	60f8      	str	r0, [r7, #12]
            if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim)) // Falling edge
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0310 	and.w	r3, r3, #16
 8002970:	2b10      	cmp	r3, #16
 8002972:	d10d      	bne.n	8002990 <HAL_TIM_IC_CaptureCallback+0x98>
            	widths[1] = captured_value - ic_rising[1];
 8002974:	4b2d      	ldr	r3, [pc, #180]	@ (8002a2c <HAL_TIM_IC_CaptureCallback+0x134>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	4a2c      	ldr	r2, [pc, #176]	@ (8002a30 <HAL_TIM_IC_CaptureCallback+0x138>)
 800297e:	6053      	str	r3, [r2, #4]
                osMessageQueuePut(radioQueueHandle, (const void *)&widths[1], 0, 0);
 8002980:	4b2c      	ldr	r3, [pc, #176]	@ (8002a34 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8002982:	6818      	ldr	r0, [r3, #0]
 8002984:	2300      	movs	r3, #0
 8002986:	2200      	movs	r2, #0
 8002988:	492b      	ldr	r1, [pc, #172]	@ (8002a38 <HAL_TIM_IC_CaptureCallback+0x140>)
 800298a:	f005 faad 	bl	8007ee8 <osMessageQueuePut>
}
 800298e:	e046      	b.n	8002a1e <HAL_TIM_IC_CaptureCallback+0x126>
                ic_rising[1] = captured_value;
 8002990:	4a26      	ldr	r2, [pc, #152]	@ (8002a2c <HAL_TIM_IC_CaptureCallback+0x134>)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6053      	str	r3, [r2, #4]
}
 8002996:	e042      	b.n	8002a1e <HAL_TIM_IC_CaptureCallback+0x126>
        else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	7f1b      	ldrb	r3, [r3, #28]
 800299c:	2b04      	cmp	r3, #4
 800299e:	d11d      	bne.n	80029dc <HAL_TIM_IC_CaptureCallback+0xe4>
            captured_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 80029a0:	2108      	movs	r1, #8
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f004 f80c 	bl	80069c0 <HAL_TIM_ReadCapturedValue>
 80029a8:	60f8      	str	r0, [r7, #12]
            if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0310 	and.w	r3, r3, #16
 80029b4:	2b10      	cmp	r3, #16
 80029b6:	d10d      	bne.n	80029d4 <HAL_TIM_IC_CaptureCallback+0xdc>
            	widths[2] = captured_value - ic_rising[2];
 80029b8:	4b1c      	ldr	r3, [pc, #112]	@ (8002a2c <HAL_TIM_IC_CaptureCallback+0x134>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	4a1b      	ldr	r2, [pc, #108]	@ (8002a30 <HAL_TIM_IC_CaptureCallback+0x138>)
 80029c2:	6093      	str	r3, [r2, #8]
                osMessageQueuePut(radioQueueHandle, (const void *)&widths[2], 0, 0);
 80029c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a34 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80029c6:	6818      	ldr	r0, [r3, #0]
 80029c8:	2300      	movs	r3, #0
 80029ca:	2200      	movs	r2, #0
 80029cc:	491b      	ldr	r1, [pc, #108]	@ (8002a3c <HAL_TIM_IC_CaptureCallback+0x144>)
 80029ce:	f005 fa8b 	bl	8007ee8 <osMessageQueuePut>
}
 80029d2:	e024      	b.n	8002a1e <HAL_TIM_IC_CaptureCallback+0x126>
                ic_rising[2] = captured_value;
 80029d4:	4a15      	ldr	r2, [pc, #84]	@ (8002a2c <HAL_TIM_IC_CaptureCallback+0x134>)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6093      	str	r3, [r2, #8]
}
 80029da:	e020      	b.n	8002a1e <HAL_TIM_IC_CaptureCallback+0x126>
        else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	7f1b      	ldrb	r3, [r3, #28]
 80029e0:	2b08      	cmp	r3, #8
 80029e2:	d11c      	bne.n	8002a1e <HAL_TIM_IC_CaptureCallback+0x126>
            captured_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 80029e4:	210c      	movs	r1, #12
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f003 ffea 	bl	80069c0 <HAL_TIM_ReadCapturedValue>
 80029ec:	60f8      	str	r0, [r7, #12]
            if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0310 	and.w	r3, r3, #16
 80029f8:	2b10      	cmp	r3, #16
 80029fa:	d10d      	bne.n	8002a18 <HAL_TIM_IC_CaptureCallback+0x120>
            	widths[3] = captured_value - ic_rising[3];
 80029fc:	4b0b      	ldr	r3, [pc, #44]	@ (8002a2c <HAL_TIM_IC_CaptureCallback+0x134>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	4a0a      	ldr	r2, [pc, #40]	@ (8002a30 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002a06:	60d3      	str	r3, [r2, #12]
                osMessageQueuePut(radioQueueHandle, (const void *)&widths[3], 0, 0);
 8002a08:	4b0a      	ldr	r3, [pc, #40]	@ (8002a34 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8002a0a:	6818      	ldr	r0, [r3, #0]
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	2200      	movs	r2, #0
 8002a10:	490b      	ldr	r1, [pc, #44]	@ (8002a40 <HAL_TIM_IC_CaptureCallback+0x148>)
 8002a12:	f005 fa69 	bl	8007ee8 <osMessageQueuePut>
}
 8002a16:	e002      	b.n	8002a1e <HAL_TIM_IC_CaptureCallback+0x126>
                ic_rising[3] = captured_value;
 8002a18:	4a04      	ldr	r2, [pc, #16]	@ (8002a2c <HAL_TIM_IC_CaptureCallback+0x134>)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	60d3      	str	r3, [r2, #12]
}
 8002a1e:	bf00      	nop
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40000400 	.word	0x40000400
 8002a2c:	200003ac 	.word	0x200003ac
 8002a30:	200003bc 	.word	0x200003bc
 8002a34:	200002fc 	.word	0x200002fc
 8002a38:	200003c0 	.word	0x200003c0
 8002a3c:	200003c4 	.word	0x200003c4
 8002a40:	200003c8 	.word	0x200003c8

08002a44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  return 1;
 8002a48:	2301      	movs	r3, #1
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <_kill>:

int _kill(int pid, int sig)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a5e:	f009 f9cd 	bl	800bdfc <__errno>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2216      	movs	r2, #22
 8002a66:	601a      	str	r2, [r3, #0]
  return -1;
 8002a68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <_exit>:

void _exit (int status)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a7c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f7ff ffe7 	bl	8002a54 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a86:	bf00      	nop
 8002a88:	e7fd      	b.n	8002a86 <_exit+0x12>

08002a8a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b086      	sub	sp, #24
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	60f8      	str	r0, [r7, #12]
 8002a92:	60b9      	str	r1, [r7, #8]
 8002a94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a96:	2300      	movs	r3, #0
 8002a98:	617b      	str	r3, [r7, #20]
 8002a9a:	e00a      	b.n	8002ab2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a9c:	f3af 8000 	nop.w
 8002aa0:	4601      	mov	r1, r0
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	1c5a      	adds	r2, r3, #1
 8002aa6:	60ba      	str	r2, [r7, #8]
 8002aa8:	b2ca      	uxtb	r2, r1
 8002aaa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	3301      	adds	r3, #1
 8002ab0:	617b      	str	r3, [r7, #20]
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	dbf0      	blt.n	8002a9c <_read+0x12>
  }

  return len;
 8002aba:	687b      	ldr	r3, [r7, #4]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3718      	adds	r7, #24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	617b      	str	r3, [r7, #20]
 8002ad4:	e009      	b.n	8002aea <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	1c5a      	adds	r2, r3, #1
 8002ada:	60ba      	str	r2, [r7, #8]
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	617b      	str	r3, [r7, #20]
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	dbf1      	blt.n	8002ad6 <_write+0x12>
  }
  return len;
 8002af2:	687b      	ldr	r3, [r7, #4]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3718      	adds	r7, #24
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <_close>:

int _close(int file)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b24:	605a      	str	r2, [r3, #4]
  return 0;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <_isatty>:

int _isatty(int file)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b3c:	2301      	movs	r3, #1
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b085      	sub	sp, #20
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	60f8      	str	r0, [r7, #12]
 8002b52:	60b9      	str	r1, [r7, #8]
 8002b54:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b6c:	4a14      	ldr	r2, [pc, #80]	@ (8002bc0 <_sbrk+0x5c>)
 8002b6e:	4b15      	ldr	r3, [pc, #84]	@ (8002bc4 <_sbrk+0x60>)
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b78:	4b13      	ldr	r3, [pc, #76]	@ (8002bc8 <_sbrk+0x64>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d102      	bne.n	8002b86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b80:	4b11      	ldr	r3, [pc, #68]	@ (8002bc8 <_sbrk+0x64>)
 8002b82:	4a12      	ldr	r2, [pc, #72]	@ (8002bcc <_sbrk+0x68>)
 8002b84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b86:	4b10      	ldr	r3, [pc, #64]	@ (8002bc8 <_sbrk+0x64>)
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d207      	bcs.n	8002ba4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b94:	f009 f932 	bl	800bdfc <__errno>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	220c      	movs	r2, #12
 8002b9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ba2:	e009      	b.n	8002bb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ba4:	4b08      	ldr	r3, [pc, #32]	@ (8002bc8 <_sbrk+0x64>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002baa:	4b07      	ldr	r3, [pc, #28]	@ (8002bc8 <_sbrk+0x64>)
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	4a05      	ldr	r2, [pc, #20]	@ (8002bc8 <_sbrk+0x64>)
 8002bb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3718      	adds	r7, #24
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	20010000 	.word	0x20010000
 8002bc4:	00000400 	.word	0x00000400
 8002bc8:	200003cc 	.word	0x200003cc
 8002bcc:	20005090 	.word	0x20005090

08002bd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bd4:	4b06      	ldr	r3, [pc, #24]	@ (8002bf0 <SystemInit+0x20>)
 8002bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bda:	4a05      	ldr	r2, [pc, #20]	@ (8002bf0 <SystemInit+0x20>)
 8002bdc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002be0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002be4:	bf00      	nop
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	e000ed00 	.word	0xe000ed00

08002bf4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b08a      	sub	sp, #40	@ 0x28
 8002bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bfa:	f107 0318 	add.w	r3, r7, #24
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	605a      	str	r2, [r3, #4]
 8002c04:	609a      	str	r2, [r3, #8]
 8002c06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c08:	f107 0310 	add.w	r3, r7, #16
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002c12:	463b      	mov	r3, r7
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	605a      	str	r2, [r3, #4]
 8002c1a:	609a      	str	r2, [r3, #8]
 8002c1c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c1e:	4b3c      	ldr	r3, [pc, #240]	@ (8002d10 <MX_TIM3_Init+0x11c>)
 8002c20:	4a3c      	ldr	r2, [pc, #240]	@ (8002d14 <MX_TIM3_Init+0x120>)
 8002c22:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 8002c24:	4b3a      	ldr	r3, [pc, #232]	@ (8002d10 <MX_TIM3_Init+0x11c>)
 8002c26:	2254      	movs	r2, #84	@ 0x54
 8002c28:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c2a:	4b39      	ldr	r3, [pc, #228]	@ (8002d10 <MX_TIM3_Init+0x11c>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002c30:	4b37      	ldr	r3, [pc, #220]	@ (8002d10 <MX_TIM3_Init+0x11c>)
 8002c32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c36:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c38:	4b35      	ldr	r3, [pc, #212]	@ (8002d10 <MX_TIM3_Init+0x11c>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c3e:	4b34      	ldr	r3, [pc, #208]	@ (8002d10 <MX_TIM3_Init+0x11c>)
 8002c40:	2280      	movs	r2, #128	@ 0x80
 8002c42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c44:	4832      	ldr	r0, [pc, #200]	@ (8002d10 <MX_TIM3_Init+0x11c>)
 8002c46:	f003 f931 	bl	8005eac <HAL_TIM_Base_Init>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8002c50:	f7ff fd64 	bl	800271c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c58:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c5a:	f107 0318 	add.w	r3, r7, #24
 8002c5e:	4619      	mov	r1, r3
 8002c60:	482b      	ldr	r0, [pc, #172]	@ (8002d10 <MX_TIM3_Init+0x11c>)
 8002c62:	f003 fde5 	bl	8006830 <HAL_TIM_ConfigClockSource>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002c6c:	f7ff fd56 	bl	800271c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002c70:	4827      	ldr	r0, [pc, #156]	@ (8002d10 <MX_TIM3_Init+0x11c>)
 8002c72:	f003 fa1c 	bl	80060ae <HAL_TIM_IC_Init>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002c7c:	f7ff fd4e 	bl	800271c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c80:	2300      	movs	r3, #0
 8002c82:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c84:	2300      	movs	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c88:	f107 0310 	add.w	r3, r7, #16
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4820      	ldr	r0, [pc, #128]	@ (8002d10 <MX_TIM3_Init+0x11c>)
 8002c90:	f004 faee 	bl	8007270 <HAL_TIMEx_MasterConfigSynchronization>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8002c9a:	f7ff fd3f 	bl	800271c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002c9e:	230a      	movs	r3, #10
 8002ca0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002cae:	463b      	mov	r3, r7
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4816      	ldr	r0, [pc, #88]	@ (8002d10 <MX_TIM3_Init+0x11c>)
 8002cb6:	f003 fc5d 	bl	8006574 <HAL_TIM_IC_ConfigChannel>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8002cc0:	f7ff fd2c 	bl	800271c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002cc4:	463b      	mov	r3, r7
 8002cc6:	2204      	movs	r2, #4
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4811      	ldr	r0, [pc, #68]	@ (8002d10 <MX_TIM3_Init+0x11c>)
 8002ccc:	f003 fc52 	bl	8006574 <HAL_TIM_IC_ConfigChannel>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8002cd6:	f7ff fd21 	bl	800271c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002cda:	463b      	mov	r3, r7
 8002cdc:	2208      	movs	r2, #8
 8002cde:	4619      	mov	r1, r3
 8002ce0:	480b      	ldr	r0, [pc, #44]	@ (8002d10 <MX_TIM3_Init+0x11c>)
 8002ce2:	f003 fc47 	bl	8006574 <HAL_TIM_IC_ConfigChannel>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <MX_TIM3_Init+0xfc>
  {
    Error_Handler();
 8002cec:	f7ff fd16 	bl	800271c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002cf0:	463b      	mov	r3, r7
 8002cf2:	220c      	movs	r2, #12
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4806      	ldr	r0, [pc, #24]	@ (8002d10 <MX_TIM3_Init+0x11c>)
 8002cf8:	f003 fc3c 	bl	8006574 <HAL_TIM_IC_ConfigChannel>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <MX_TIM3_Init+0x112>
  {
    Error_Handler();
 8002d02:	f7ff fd0b 	bl	800271c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002d06:	bf00      	nop
 8002d08:	3728      	adds	r7, #40	@ 0x28
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	200003d0 	.word	0x200003d0
 8002d14:	40000400 	.word	0x40000400

08002d18 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b08a      	sub	sp, #40	@ 0x28
 8002d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d1e:	f107 0320 	add.w	r3, r7, #32
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d28:	1d3b      	adds	r3, r7, #4
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	605a      	str	r2, [r3, #4]
 8002d30:	609a      	str	r2, [r3, #8]
 8002d32:	60da      	str	r2, [r3, #12]
 8002d34:	611a      	str	r2, [r3, #16]
 8002d36:	615a      	str	r2, [r3, #20]
 8002d38:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002d3a:	4b32      	ldr	r3, [pc, #200]	@ (8002e04 <MX_TIM4_Init+0xec>)
 8002d3c:	4a32      	ldr	r2, [pc, #200]	@ (8002e08 <MX_TIM4_Init+0xf0>)
 8002d3e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84;
 8002d40:	4b30      	ldr	r3, [pc, #192]	@ (8002e04 <MX_TIM4_Init+0xec>)
 8002d42:	2254      	movs	r2, #84	@ 0x54
 8002d44:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d46:	4b2f      	ldr	r3, [pc, #188]	@ (8002e04 <MX_TIM4_Init+0xec>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8002d4c:	4b2d      	ldr	r3, [pc, #180]	@ (8002e04 <MX_TIM4_Init+0xec>)
 8002d4e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002d52:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d54:	4b2b      	ldr	r3, [pc, #172]	@ (8002e04 <MX_TIM4_Init+0xec>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d5a:	4b2a      	ldr	r3, [pc, #168]	@ (8002e04 <MX_TIM4_Init+0xec>)
 8002d5c:	2280      	movs	r2, #128	@ 0x80
 8002d5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002d60:	4828      	ldr	r0, [pc, #160]	@ (8002e04 <MX_TIM4_Init+0xec>)
 8002d62:	f003 f955 	bl	8006010 <HAL_TIM_PWM_Init>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002d6c:	f7ff fcd6 	bl	800271c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d70:	2300      	movs	r3, #0
 8002d72:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d74:	2300      	movs	r3, #0
 8002d76:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d78:	f107 0320 	add.w	r3, r7, #32
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4821      	ldr	r0, [pc, #132]	@ (8002e04 <MX_TIM4_Init+0xec>)
 8002d80:	f004 fa76 	bl	8007270 <HAL_TIMEx_MasterConfigSynchronization>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002d8a:	f7ff fcc7 	bl	800271c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d8e:	2360      	movs	r3, #96	@ 0x60
 8002d90:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002d92:	2300      	movs	r3, #0
 8002d94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d96:	2300      	movs	r3, #0
 8002d98:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d9e:	1d3b      	adds	r3, r7, #4
 8002da0:	2200      	movs	r2, #0
 8002da2:	4619      	mov	r1, r3
 8002da4:	4817      	ldr	r0, [pc, #92]	@ (8002e04 <MX_TIM4_Init+0xec>)
 8002da6:	f003 fc81 	bl	80066ac <HAL_TIM_PWM_ConfigChannel>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002db0:	f7ff fcb4 	bl	800271c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002db4:	1d3b      	adds	r3, r7, #4
 8002db6:	2204      	movs	r2, #4
 8002db8:	4619      	mov	r1, r3
 8002dba:	4812      	ldr	r0, [pc, #72]	@ (8002e04 <MX_TIM4_Init+0xec>)
 8002dbc:	f003 fc76 	bl	80066ac <HAL_TIM_PWM_ConfigChannel>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002dc6:	f7ff fca9 	bl	800271c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002dca:	1d3b      	adds	r3, r7, #4
 8002dcc:	2208      	movs	r2, #8
 8002dce:	4619      	mov	r1, r3
 8002dd0:	480c      	ldr	r0, [pc, #48]	@ (8002e04 <MX_TIM4_Init+0xec>)
 8002dd2:	f003 fc6b 	bl	80066ac <HAL_TIM_PWM_ConfigChannel>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8002ddc:	f7ff fc9e 	bl	800271c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002de0:	1d3b      	adds	r3, r7, #4
 8002de2:	220c      	movs	r2, #12
 8002de4:	4619      	mov	r1, r3
 8002de6:	4807      	ldr	r0, [pc, #28]	@ (8002e04 <MX_TIM4_Init+0xec>)
 8002de8:	f003 fc60 	bl	80066ac <HAL_TIM_PWM_ConfigChannel>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8002df2:	f7ff fc93 	bl	800271c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002df6:	4803      	ldr	r0, [pc, #12]	@ (8002e04 <MX_TIM4_Init+0xec>)
 8002df8:	f000 f8da 	bl	8002fb0 <HAL_TIM_MspPostInit>

}
 8002dfc:	bf00      	nop
 8002dfe:	3728      	adds	r7, #40	@ 0x28
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	20000418 	.word	0x20000418
 8002e08:	40000800 	.word	0x40000800

08002e0c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002e10:	4b0d      	ldr	r3, [pc, #52]	@ (8002e48 <MX_TIM11_Init+0x3c>)
 8002e12:	4a0e      	ldr	r2, [pc, #56]	@ (8002e4c <MX_TIM11_Init+0x40>)
 8002e14:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 84;
 8002e16:	4b0c      	ldr	r3, [pc, #48]	@ (8002e48 <MX_TIM11_Init+0x3c>)
 8002e18:	2254      	movs	r2, #84	@ 0x54
 8002e1a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8002e48 <MX_TIM11_Init+0x3c>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 99;
 8002e22:	4b09      	ldr	r3, [pc, #36]	@ (8002e48 <MX_TIM11_Init+0x3c>)
 8002e24:	2263      	movs	r2, #99	@ 0x63
 8002e26:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e28:	4b07      	ldr	r3, [pc, #28]	@ (8002e48 <MX_TIM11_Init+0x3c>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e2e:	4b06      	ldr	r3, [pc, #24]	@ (8002e48 <MX_TIM11_Init+0x3c>)
 8002e30:	2280      	movs	r2, #128	@ 0x80
 8002e32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002e34:	4804      	ldr	r0, [pc, #16]	@ (8002e48 <MX_TIM11_Init+0x3c>)
 8002e36:	f003 f839 	bl	8005eac <HAL_TIM_Base_Init>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <MX_TIM11_Init+0x38>
  {
    Error_Handler();
 8002e40:	f7ff fc6c 	bl	800271c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002e44:	bf00      	nop
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	20000460 	.word	0x20000460
 8002e4c:	40014800 	.word	0x40014800

08002e50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b08c      	sub	sp, #48	@ 0x30
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e58:	f107 031c 	add.w	r3, r7, #28
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	605a      	str	r2, [r3, #4]
 8002e62:	609a      	str	r2, [r3, #8]
 8002e64:	60da      	str	r2, [r3, #12]
 8002e66:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a3a      	ldr	r2, [pc, #232]	@ (8002f58 <HAL_TIM_Base_MspInit+0x108>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d152      	bne.n	8002f18 <HAL_TIM_Base_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e72:	2300      	movs	r3, #0
 8002e74:	61bb      	str	r3, [r7, #24]
 8002e76:	4b39      	ldr	r3, [pc, #228]	@ (8002f5c <HAL_TIM_Base_MspInit+0x10c>)
 8002e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7a:	4a38      	ldr	r2, [pc, #224]	@ (8002f5c <HAL_TIM_Base_MspInit+0x10c>)
 8002e7c:	f043 0302 	orr.w	r3, r3, #2
 8002e80:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e82:	4b36      	ldr	r3, [pc, #216]	@ (8002f5c <HAL_TIM_Base_MspInit+0x10c>)
 8002e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	61bb      	str	r3, [r7, #24]
 8002e8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e8e:	2300      	movs	r3, #0
 8002e90:	617b      	str	r3, [r7, #20]
 8002e92:	4b32      	ldr	r3, [pc, #200]	@ (8002f5c <HAL_TIM_Base_MspInit+0x10c>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e96:	4a31      	ldr	r2, [pc, #196]	@ (8002f5c <HAL_TIM_Base_MspInit+0x10c>)
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e9e:	4b2f      	ldr	r3, [pc, #188]	@ (8002f5c <HAL_TIM_Base_MspInit+0x10c>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eaa:	2300      	movs	r3, #0
 8002eac:	613b      	str	r3, [r7, #16]
 8002eae:	4b2b      	ldr	r3, [pc, #172]	@ (8002f5c <HAL_TIM_Base_MspInit+0x10c>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb2:	4a2a      	ldr	r2, [pc, #168]	@ (8002f5c <HAL_TIM_Base_MspInit+0x10c>)
 8002eb4:	f043 0302 	orr.w	r3, r3, #2
 8002eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eba:	4b28      	ldr	r3, [pc, #160]	@ (8002f5c <HAL_TIM_Base_MspInit+0x10c>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	613b      	str	r3, [r7, #16]
 8002ec4:	693b      	ldr	r3, [r7, #16]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin;
 8002ec6:	23c0      	movs	r3, #192	@ 0xc0
 8002ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eca:	2302      	movs	r3, #2
 8002ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eda:	f107 031c 	add.w	r3, r7, #28
 8002ede:	4619      	mov	r1, r3
 8002ee0:	481f      	ldr	r0, [pc, #124]	@ (8002f60 <HAL_TIM_Base_MspInit+0x110>)
 8002ee2:	f001 f9c1 	bl	8004268 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IN3_Pin|IN4_Pin;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eea:	2302      	movs	r3, #2
 8002eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002efa:	f107 031c 	add.w	r3, r7, #28
 8002efe:	4619      	mov	r1, r3
 8002f00:	4818      	ldr	r0, [pc, #96]	@ (8002f64 <HAL_TIM_Base_MspInit+0x114>)
 8002f02:	f001 f9b1 	bl	8004268 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002f06:	2200      	movs	r2, #0
 8002f08:	2105      	movs	r1, #5
 8002f0a:	201d      	movs	r0, #29
 8002f0c:	f000 fe12 	bl	8003b34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f10:	201d      	movs	r0, #29
 8002f12:	f000 fe2b 	bl	8003b6c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8002f16:	e01a      	b.n	8002f4e <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM11)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a12      	ldr	r2, [pc, #72]	@ (8002f68 <HAL_TIM_Base_MspInit+0x118>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d115      	bne.n	8002f4e <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002f22:	2300      	movs	r3, #0
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	4b0d      	ldr	r3, [pc, #52]	@ (8002f5c <HAL_TIM_Base_MspInit+0x10c>)
 8002f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f2a:	4a0c      	ldr	r2, [pc, #48]	@ (8002f5c <HAL_TIM_Base_MspInit+0x10c>)
 8002f2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f30:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f32:	4b0a      	ldr	r3, [pc, #40]	@ (8002f5c <HAL_TIM_Base_MspInit+0x10c>)
 8002f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8002f3e:	2200      	movs	r2, #0
 8002f40:	2105      	movs	r1, #5
 8002f42:	201a      	movs	r0, #26
 8002f44:	f000 fdf6 	bl	8003b34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002f48:	201a      	movs	r0, #26
 8002f4a:	f000 fe0f 	bl	8003b6c <HAL_NVIC_EnableIRQ>
}
 8002f4e:	bf00      	nop
 8002f50:	3730      	adds	r7, #48	@ 0x30
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40000400 	.word	0x40000400
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	40020000 	.word	0x40020000
 8002f64:	40020400 	.word	0x40020400
 8002f68:	40014800 	.word	0x40014800

08002f6c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a0b      	ldr	r2, [pc, #44]	@ (8002fa8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d10d      	bne.n	8002f9a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	4b0a      	ldr	r3, [pc, #40]	@ (8002fac <HAL_TIM_PWM_MspInit+0x40>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f86:	4a09      	ldr	r2, [pc, #36]	@ (8002fac <HAL_TIM_PWM_MspInit+0x40>)
 8002f88:	f043 0304 	orr.w	r3, r3, #4
 8002f8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f8e:	4b07      	ldr	r3, [pc, #28]	@ (8002fac <HAL_TIM_PWM_MspInit+0x40>)
 8002f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f92:	f003 0304 	and.w	r3, r3, #4
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002f9a:	bf00      	nop
 8002f9c:	3714      	adds	r7, #20
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	40000800 	.word	0x40000800
 8002fac:	40023800 	.word	0x40023800

08002fb0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b088      	sub	sp, #32
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb8:	f107 030c 	add.w	r3, r7, #12
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	605a      	str	r2, [r3, #4]
 8002fc2:	609a      	str	r2, [r3, #8]
 8002fc4:	60da      	str	r2, [r3, #12]
 8002fc6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a12      	ldr	r2, [pc, #72]	@ (8003018 <HAL_TIM_MspPostInit+0x68>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d11e      	bne.n	8003010 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	4b11      	ldr	r3, [pc, #68]	@ (800301c <HAL_TIM_MspPostInit+0x6c>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fda:	4a10      	ldr	r2, [pc, #64]	@ (800301c <HAL_TIM_MspPostInit+0x6c>)
 8002fdc:	f043 0302 	orr.w	r3, r3, #2
 8002fe0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800301c <HAL_TIM_MspPostInit+0x6c>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	60bb      	str	r3, [r7, #8]
 8002fec:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = OUT1_Pin|OUT2_Pin|OUT3_Pin|OUT4_Pin;
 8002fee:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002ff2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003000:	2302      	movs	r3, #2
 8003002:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003004:	f107 030c 	add.w	r3, r7, #12
 8003008:	4619      	mov	r1, r3
 800300a:	4805      	ldr	r0, [pc, #20]	@ (8003020 <HAL_TIM_MspPostInit+0x70>)
 800300c:	f001 f92c 	bl	8004268 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003010:	bf00      	nop
 8003012:	3720      	adds	r7, #32
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40000800 	.word	0x40000800
 800301c:	40023800 	.word	0x40023800
 8003020:	40020400 	.word	0x40020400

08003024 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003028:	4b11      	ldr	r3, [pc, #68]	@ (8003070 <MX_USART1_UART_Init+0x4c>)
 800302a:	4a12      	ldr	r2, [pc, #72]	@ (8003074 <MX_USART1_UART_Init+0x50>)
 800302c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800302e:	4b10      	ldr	r3, [pc, #64]	@ (8003070 <MX_USART1_UART_Init+0x4c>)
 8003030:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003034:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003036:	4b0e      	ldr	r3, [pc, #56]	@ (8003070 <MX_USART1_UART_Init+0x4c>)
 8003038:	2200      	movs	r2, #0
 800303a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800303c:	4b0c      	ldr	r3, [pc, #48]	@ (8003070 <MX_USART1_UART_Init+0x4c>)
 800303e:	2200      	movs	r2, #0
 8003040:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003042:	4b0b      	ldr	r3, [pc, #44]	@ (8003070 <MX_USART1_UART_Init+0x4c>)
 8003044:	2200      	movs	r2, #0
 8003046:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003048:	4b09      	ldr	r3, [pc, #36]	@ (8003070 <MX_USART1_UART_Init+0x4c>)
 800304a:	220c      	movs	r2, #12
 800304c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800304e:	4b08      	ldr	r3, [pc, #32]	@ (8003070 <MX_USART1_UART_Init+0x4c>)
 8003050:	2200      	movs	r2, #0
 8003052:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003054:	4b06      	ldr	r3, [pc, #24]	@ (8003070 <MX_USART1_UART_Init+0x4c>)
 8003056:	2200      	movs	r2, #0
 8003058:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800305a:	4805      	ldr	r0, [pc, #20]	@ (8003070 <MX_USART1_UART_Init+0x4c>)
 800305c:	f004 f98a 	bl	8007374 <HAL_UART_Init>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003066:	f7ff fb59 	bl	800271c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800306a:	bf00      	nop
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	200004a8 	.word	0x200004a8
 8003074:	40011000 	.word	0x40011000

08003078 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b08a      	sub	sp, #40	@ 0x28
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003080:	f107 0314 	add.w	r3, r7, #20
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	605a      	str	r2, [r3, #4]
 800308a:	609a      	str	r2, [r3, #8]
 800308c:	60da      	str	r2, [r3, #12]
 800308e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a19      	ldr	r2, [pc, #100]	@ (80030fc <HAL_UART_MspInit+0x84>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d12c      	bne.n	80030f4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800309a:	2300      	movs	r3, #0
 800309c:	613b      	str	r3, [r7, #16]
 800309e:	4b18      	ldr	r3, [pc, #96]	@ (8003100 <HAL_UART_MspInit+0x88>)
 80030a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a2:	4a17      	ldr	r2, [pc, #92]	@ (8003100 <HAL_UART_MspInit+0x88>)
 80030a4:	f043 0310 	orr.w	r3, r3, #16
 80030a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80030aa:	4b15      	ldr	r3, [pc, #84]	@ (8003100 <HAL_UART_MspInit+0x88>)
 80030ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ae:	f003 0310 	and.w	r3, r3, #16
 80030b2:	613b      	str	r3, [r7, #16]
 80030b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030b6:	2300      	movs	r3, #0
 80030b8:	60fb      	str	r3, [r7, #12]
 80030ba:	4b11      	ldr	r3, [pc, #68]	@ (8003100 <HAL_UART_MspInit+0x88>)
 80030bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030be:	4a10      	ldr	r2, [pc, #64]	@ (8003100 <HAL_UART_MspInit+0x88>)
 80030c0:	f043 0301 	orr.w	r3, r3, #1
 80030c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80030c6:	4b0e      	ldr	r3, [pc, #56]	@ (8003100 <HAL_UART_MspInit+0x88>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TEL_TX_Pin|TEL_RX_Pin;
 80030d2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80030d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d8:	2302      	movs	r3, #2
 80030da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030dc:	2300      	movs	r3, #0
 80030de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030e0:	2303      	movs	r3, #3
 80030e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80030e4:	2307      	movs	r3, #7
 80030e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030e8:	f107 0314 	add.w	r3, r7, #20
 80030ec:	4619      	mov	r1, r3
 80030ee:	4805      	ldr	r0, [pc, #20]	@ (8003104 <HAL_UART_MspInit+0x8c>)
 80030f0:	f001 f8ba 	bl	8004268 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80030f4:	bf00      	nop
 80030f6:	3728      	adds	r7, #40	@ 0x28
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40011000 	.word	0x40011000
 8003100:	40023800 	.word	0x40023800
 8003104:	40020000 	.word	0x40020000

08003108 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003108:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003140 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800310c:	f7ff fd60 	bl	8002bd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003110:	480c      	ldr	r0, [pc, #48]	@ (8003144 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003112:	490d      	ldr	r1, [pc, #52]	@ (8003148 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003114:	4a0d      	ldr	r2, [pc, #52]	@ (800314c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003116:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003118:	e002      	b.n	8003120 <LoopCopyDataInit>

0800311a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800311a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800311c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800311e:	3304      	adds	r3, #4

08003120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003124:	d3f9      	bcc.n	800311a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003126:	4a0a      	ldr	r2, [pc, #40]	@ (8003150 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003128:	4c0a      	ldr	r4, [pc, #40]	@ (8003154 <LoopFillZerobss+0x22>)
  movs r3, #0
 800312a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800312c:	e001      	b.n	8003132 <LoopFillZerobss>

0800312e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800312e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003130:	3204      	adds	r2, #4

08003132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003134:	d3fb      	bcc.n	800312e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003136:	f008 fe67 	bl	800be08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800313a:	f7ff fa55 	bl	80025e8 <main>
  bx  lr    
 800313e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003140:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003144:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003148:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 800314c:	0800e690 	.word	0x0800e690
  ldr r2, =_sbss
 8003150:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8003154:	2000508c 	.word	0x2000508c

08003158 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003158:	e7fe      	b.n	8003158 <ADC_IRQHandler>
	...

0800315c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003160:	4b0e      	ldr	r3, [pc, #56]	@ (800319c <HAL_Init+0x40>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a0d      	ldr	r2, [pc, #52]	@ (800319c <HAL_Init+0x40>)
 8003166:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800316a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800316c:	4b0b      	ldr	r3, [pc, #44]	@ (800319c <HAL_Init+0x40>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a0a      	ldr	r2, [pc, #40]	@ (800319c <HAL_Init+0x40>)
 8003172:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003176:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003178:	4b08      	ldr	r3, [pc, #32]	@ (800319c <HAL_Init+0x40>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a07      	ldr	r2, [pc, #28]	@ (800319c <HAL_Init+0x40>)
 800317e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003182:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003184:	2003      	movs	r0, #3
 8003186:	f000 fcca 	bl	8003b1e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800318a:	200f      	movs	r0, #15
 800318c:	f7ff faf8 	bl	8002780 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003190:	f7ff faca 	bl	8002728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	40023c00 	.word	0x40023c00

080031a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031a4:	4b06      	ldr	r3, [pc, #24]	@ (80031c0 <HAL_IncTick+0x20>)
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	461a      	mov	r2, r3
 80031aa:	4b06      	ldr	r3, [pc, #24]	@ (80031c4 <HAL_IncTick+0x24>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4413      	add	r3, r2
 80031b0:	4a04      	ldr	r2, [pc, #16]	@ (80031c4 <HAL_IncTick+0x24>)
 80031b2:	6013      	str	r3, [r2, #0]
}
 80031b4:	bf00      	nop
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	20000024 	.word	0x20000024
 80031c4:	200004f0 	.word	0x200004f0

080031c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  return uwTick;
 80031cc:	4b03      	ldr	r3, [pc, #12]	@ (80031dc <HAL_GetTick+0x14>)
 80031ce:	681b      	ldr	r3, [r3, #0]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	200004f0 	.word	0x200004f0

080031e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031e8:	2300      	movs	r3, #0
 80031ea:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e033      	b.n	800325e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d109      	bne.n	8003212 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7fe fd0e 	bl	8001c20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003216:	f003 0310 	and.w	r3, r3, #16
 800321a:	2b00      	cmp	r3, #0
 800321c:	d118      	bne.n	8003250 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003222:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003226:	f023 0302 	bic.w	r3, r3, #2
 800322a:	f043 0202 	orr.w	r2, r3, #2
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 fa48 	bl	80036c8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003242:	f023 0303 	bic.w	r3, r3, #3
 8003246:	f043 0201 	orr.w	r2, r3, #1
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	641a      	str	r2, [r3, #64]	@ 0x40
 800324e:	e001      	b.n	8003254 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800325c:	7bfb      	ldrb	r3, [r7, #15]
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
	...

08003268 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003274:	2300      	movs	r3, #0
 8003276:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800327e:	2b01      	cmp	r3, #1
 8003280:	d101      	bne.n	8003286 <HAL_ADC_Start_DMA+0x1e>
 8003282:	2302      	movs	r3, #2
 8003284:	e0ce      	b.n	8003424 <HAL_ADC_Start_DMA+0x1bc>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b01      	cmp	r3, #1
 800329a:	d018      	beq.n	80032ce <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689a      	ldr	r2, [r3, #8]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0201 	orr.w	r2, r2, #1
 80032aa:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80032ac:	4b5f      	ldr	r3, [pc, #380]	@ (800342c <HAL_ADC_Start_DMA+0x1c4>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a5f      	ldr	r2, [pc, #380]	@ (8003430 <HAL_ADC_Start_DMA+0x1c8>)
 80032b2:	fba2 2303 	umull	r2, r3, r2, r3
 80032b6:	0c9a      	lsrs	r2, r3, #18
 80032b8:	4613      	mov	r3, r2
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	4413      	add	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80032c0:	e002      	b.n	80032c8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	3b01      	subs	r3, #1
 80032c6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f9      	bne.n	80032c2 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032dc:	d107      	bne.n	80032ee <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80032ec:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	f040 8086 	bne.w	800340a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003302:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003306:	f023 0301 	bic.w	r3, r3, #1
 800330a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800331c:	2b00      	cmp	r3, #0
 800331e:	d007      	beq.n	8003330 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003324:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003328:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003334:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003338:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800333c:	d106      	bne.n	800334c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003342:	f023 0206 	bic.w	r2, r3, #6
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	645a      	str	r2, [r3, #68]	@ 0x44
 800334a:	e002      	b.n	8003352 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800335a:	4b36      	ldr	r3, [pc, #216]	@ (8003434 <HAL_ADC_Start_DMA+0x1cc>)
 800335c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003362:	4a35      	ldr	r2, [pc, #212]	@ (8003438 <HAL_ADC_Start_DMA+0x1d0>)
 8003364:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800336a:	4a34      	ldr	r2, [pc, #208]	@ (800343c <HAL_ADC_Start_DMA+0x1d4>)
 800336c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003372:	4a33      	ldr	r2, [pc, #204]	@ (8003440 <HAL_ADC_Start_DMA+0x1d8>)
 8003374:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800337e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800338e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689a      	ldr	r2, [r3, #8]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800339e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	334c      	adds	r3, #76	@ 0x4c
 80033aa:	4619      	mov	r1, r3
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f000 fc98 	bl	8003ce4 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f003 031f 	and.w	r3, r3, #31
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10f      	bne.n	80033e0 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d129      	bne.n	8003422 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80033dc:	609a      	str	r2, [r3, #8]
 80033de:	e020      	b.n	8003422 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a17      	ldr	r2, [pc, #92]	@ (8003444 <HAL_ADC_Start_DMA+0x1dc>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d11b      	bne.n	8003422 <HAL_ADC_Start_DMA+0x1ba>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d114      	bne.n	8003422 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689a      	ldr	r2, [r3, #8]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003406:	609a      	str	r2, [r3, #8]
 8003408:	e00b      	b.n	8003422 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340e:	f043 0210 	orr.w	r2, r3, #16
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800341a:	f043 0201 	orr.w	r2, r3, #1
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3718      	adds	r7, #24
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	2000001c 	.word	0x2000001c
 8003430:	431bde83 	.word	0x431bde83
 8003434:	40012300 	.word	0x40012300
 8003438:	080038c1 	.word	0x080038c1
 800343c:	0800397b 	.word	0x0800397b
 8003440:	08003997 	.word	0x08003997
 8003444:	40012000 	.word	0x40012000

08003448 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800348e:	2300      	movs	r3, #0
 8003490:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003498:	2b01      	cmp	r3, #1
 800349a:	d101      	bne.n	80034a0 <HAL_ADC_ConfigChannel+0x1c>
 800349c:	2302      	movs	r3, #2
 800349e:	e105      	b.n	80036ac <HAL_ADC_ConfigChannel+0x228>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2b09      	cmp	r3, #9
 80034ae:	d925      	bls.n	80034fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68d9      	ldr	r1, [r3, #12]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	461a      	mov	r2, r3
 80034be:	4613      	mov	r3, r2
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	4413      	add	r3, r2
 80034c4:	3b1e      	subs	r3, #30
 80034c6:	2207      	movs	r2, #7
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	43da      	mvns	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	400a      	ands	r2, r1
 80034d4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68d9      	ldr	r1, [r3, #12]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	4618      	mov	r0, r3
 80034e8:	4603      	mov	r3, r0
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	4403      	add	r3, r0
 80034ee:	3b1e      	subs	r3, #30
 80034f0:	409a      	lsls	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	60da      	str	r2, [r3, #12]
 80034fa:	e022      	b.n	8003542 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6919      	ldr	r1, [r3, #16]
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	b29b      	uxth	r3, r3
 8003508:	461a      	mov	r2, r3
 800350a:	4613      	mov	r3, r2
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	4413      	add	r3, r2
 8003510:	2207      	movs	r2, #7
 8003512:	fa02 f303 	lsl.w	r3, r2, r3
 8003516:	43da      	mvns	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	400a      	ands	r2, r1
 800351e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6919      	ldr	r1, [r3, #16]
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	689a      	ldr	r2, [r3, #8]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	b29b      	uxth	r3, r3
 8003530:	4618      	mov	r0, r3
 8003532:	4603      	mov	r3, r0
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	4403      	add	r3, r0
 8003538:	409a      	lsls	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	2b06      	cmp	r3, #6
 8003548:	d824      	bhi.n	8003594 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	4613      	mov	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	3b05      	subs	r3, #5
 800355c:	221f      	movs	r2, #31
 800355e:	fa02 f303 	lsl.w	r3, r2, r3
 8003562:	43da      	mvns	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	400a      	ands	r2, r1
 800356a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	b29b      	uxth	r3, r3
 8003578:	4618      	mov	r0, r3
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	4613      	mov	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4413      	add	r3, r2
 8003584:	3b05      	subs	r3, #5
 8003586:	fa00 f203 	lsl.w	r2, r0, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	635a      	str	r2, [r3, #52]	@ 0x34
 8003592:	e04c      	b.n	800362e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	2b0c      	cmp	r3, #12
 800359a:	d824      	bhi.n	80035e6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	4613      	mov	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	3b23      	subs	r3, #35	@ 0x23
 80035ae:	221f      	movs	r2, #31
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	43da      	mvns	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	400a      	ands	r2, r1
 80035bc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	4618      	mov	r0, r3
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	4613      	mov	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4413      	add	r3, r2
 80035d6:	3b23      	subs	r3, #35	@ 0x23
 80035d8:	fa00 f203 	lsl.w	r2, r0, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	430a      	orrs	r2, r1
 80035e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80035e4:	e023      	b.n	800362e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	4613      	mov	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	3b41      	subs	r3, #65	@ 0x41
 80035f8:	221f      	movs	r2, #31
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	43da      	mvns	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	400a      	ands	r2, r1
 8003606:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	b29b      	uxth	r3, r3
 8003614:	4618      	mov	r0, r3
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685a      	ldr	r2, [r3, #4]
 800361a:	4613      	mov	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4413      	add	r3, r2
 8003620:	3b41      	subs	r3, #65	@ 0x41
 8003622:	fa00 f203 	lsl.w	r2, r0, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800362e:	4b22      	ldr	r3, [pc, #136]	@ (80036b8 <HAL_ADC_ConfigChannel+0x234>)
 8003630:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a21      	ldr	r2, [pc, #132]	@ (80036bc <HAL_ADC_ConfigChannel+0x238>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d109      	bne.n	8003650 <HAL_ADC_ConfigChannel+0x1cc>
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2b12      	cmp	r3, #18
 8003642:	d105      	bne.n	8003650 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a19      	ldr	r2, [pc, #100]	@ (80036bc <HAL_ADC_ConfigChannel+0x238>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d123      	bne.n	80036a2 <HAL_ADC_ConfigChannel+0x21e>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2b10      	cmp	r3, #16
 8003660:	d003      	beq.n	800366a <HAL_ADC_ConfigChannel+0x1e6>
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2b11      	cmp	r3, #17
 8003668:	d11b      	bne.n	80036a2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2b10      	cmp	r3, #16
 800367c:	d111      	bne.n	80036a2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800367e:	4b10      	ldr	r3, [pc, #64]	@ (80036c0 <HAL_ADC_ConfigChannel+0x23c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a10      	ldr	r2, [pc, #64]	@ (80036c4 <HAL_ADC_ConfigChannel+0x240>)
 8003684:	fba2 2303 	umull	r2, r3, r2, r3
 8003688:	0c9a      	lsrs	r2, r3, #18
 800368a:	4613      	mov	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4413      	add	r3, r2
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003694:	e002      	b.n	800369c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	3b01      	subs	r3, #1
 800369a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1f9      	bne.n	8003696 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr
 80036b8:	40012300 	.word	0x40012300
 80036bc:	40012000 	.word	0x40012000
 80036c0:	2000001c 	.word	0x2000001c
 80036c4:	431bde83 	.word	0x431bde83

080036c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036d0:	4b79      	ldr	r3, [pc, #484]	@ (80038b8 <ADC_Init+0x1f0>)
 80036d2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	431a      	orrs	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6859      	ldr	r1, [r3, #4]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	021a      	lsls	r2, r3, #8
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003720:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6859      	ldr	r1, [r3, #4]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689a      	ldr	r2, [r3, #8]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003742:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6899      	ldr	r1, [r3, #8]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800375a:	4a58      	ldr	r2, [pc, #352]	@ (80038bc <ADC_Init+0x1f4>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d022      	beq.n	80037a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689a      	ldr	r2, [r3, #8]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800376e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6899      	ldr	r1, [r3, #8]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	430a      	orrs	r2, r1
 8003780:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003790:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6899      	ldr	r1, [r3, #8]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	609a      	str	r2, [r3, #8]
 80037a4:	e00f      	b.n	80037c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80037b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80037c4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0202 	bic.w	r2, r2, #2
 80037d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6899      	ldr	r1, [r3, #8]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	7e1b      	ldrb	r3, [r3, #24]
 80037e0:	005a      	lsls	r2, r3, #1
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d01b      	beq.n	800382c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003802:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003812:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6859      	ldr	r1, [r3, #4]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381e:	3b01      	subs	r3, #1
 8003820:	035a      	lsls	r2, r3, #13
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	605a      	str	r2, [r3, #4]
 800382a:	e007      	b.n	800383c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800383a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800384a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	3b01      	subs	r3, #1
 8003858:	051a      	lsls	r2, r3, #20
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689a      	ldr	r2, [r3, #8]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003870:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	6899      	ldr	r1, [r3, #8]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800387e:	025a      	lsls	r2, r3, #9
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	430a      	orrs	r2, r1
 8003886:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689a      	ldr	r2, [r3, #8]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003896:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6899      	ldr	r1, [r3, #8]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	029a      	lsls	r2, r3, #10
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	609a      	str	r2, [r3, #8]
}
 80038ac:	bf00      	nop
 80038ae:	3714      	adds	r7, #20
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	40012300 	.word	0x40012300
 80038bc:	0f000001 	.word	0x0f000001

080038c0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038cc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d13c      	bne.n	8003954 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038de:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d12b      	bne.n	800394c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d127      	bne.n	800394c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003902:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003906:	2b00      	cmp	r3, #0
 8003908:	d006      	beq.n	8003918 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003914:	2b00      	cmp	r3, #0
 8003916:	d119      	bne.n	800394c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0220 	bic.w	r2, r2, #32
 8003926:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003938:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d105      	bne.n	800394c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003944:	f043 0201 	orr.w	r2, r3, #1
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f7ff fd7b 	bl	8003448 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003952:	e00e      	b.n	8003972 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003958:	f003 0310 	and.w	r3, r3, #16
 800395c:	2b00      	cmp	r3, #0
 800395e:	d003      	beq.n	8003968 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f7ff fd85 	bl	8003470 <HAL_ADC_ErrorCallback>
}
 8003966:	e004      	b.n	8003972 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800396c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	4798      	blx	r3
}
 8003972:	bf00      	nop
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b084      	sub	sp, #16
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003986:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f7ff fd67 	bl	800345c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800398e:	bf00      	nop
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b084      	sub	sp, #16
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2240      	movs	r2, #64	@ 0x40
 80039a8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ae:	f043 0204 	orr.w	r2, r3, #4
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f7ff fd5a 	bl	8003470 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039bc:	bf00      	nop
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003a08 <__NVIC_SetPriorityGrouping+0x44>)
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80039e0:	4013      	ands	r3, r2
 80039e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80039f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039f6:	4a04      	ldr	r2, [pc, #16]	@ (8003a08 <__NVIC_SetPriorityGrouping+0x44>)
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	60d3      	str	r3, [r2, #12]
}
 80039fc:	bf00      	nop
 80039fe:	3714      	adds	r7, #20
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr
 8003a08:	e000ed00 	.word	0xe000ed00

08003a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a10:	4b04      	ldr	r3, [pc, #16]	@ (8003a24 <__NVIC_GetPriorityGrouping+0x18>)
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	0a1b      	lsrs	r3, r3, #8
 8003a16:	f003 0307 	and.w	r3, r3, #7
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	e000ed00 	.word	0xe000ed00

08003a28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	4603      	mov	r3, r0
 8003a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	db0b      	blt.n	8003a52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a3a:	79fb      	ldrb	r3, [r7, #7]
 8003a3c:	f003 021f 	and.w	r2, r3, #31
 8003a40:	4907      	ldr	r1, [pc, #28]	@ (8003a60 <__NVIC_EnableIRQ+0x38>)
 8003a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a46:	095b      	lsrs	r3, r3, #5
 8003a48:	2001      	movs	r0, #1
 8003a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a52:	bf00      	nop
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	e000e100 	.word	0xe000e100

08003a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	6039      	str	r1, [r7, #0]
 8003a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	db0a      	blt.n	8003a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	b2da      	uxtb	r2, r3
 8003a7c:	490c      	ldr	r1, [pc, #48]	@ (8003ab0 <__NVIC_SetPriority+0x4c>)
 8003a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a82:	0112      	lsls	r2, r2, #4
 8003a84:	b2d2      	uxtb	r2, r2
 8003a86:	440b      	add	r3, r1
 8003a88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a8c:	e00a      	b.n	8003aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	4908      	ldr	r1, [pc, #32]	@ (8003ab4 <__NVIC_SetPriority+0x50>)
 8003a94:	79fb      	ldrb	r3, [r7, #7]
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	3b04      	subs	r3, #4
 8003a9c:	0112      	lsls	r2, r2, #4
 8003a9e:	b2d2      	uxtb	r2, r2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	761a      	strb	r2, [r3, #24]
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	e000e100 	.word	0xe000e100
 8003ab4:	e000ed00 	.word	0xe000ed00

08003ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b089      	sub	sp, #36	@ 0x24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f003 0307 	and.w	r3, r3, #7
 8003aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	f1c3 0307 	rsb	r3, r3, #7
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	bf28      	it	cs
 8003ad6:	2304      	movcs	r3, #4
 8003ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	3304      	adds	r3, #4
 8003ade:	2b06      	cmp	r3, #6
 8003ae0:	d902      	bls.n	8003ae8 <NVIC_EncodePriority+0x30>
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	3b03      	subs	r3, #3
 8003ae6:	e000      	b.n	8003aea <NVIC_EncodePriority+0x32>
 8003ae8:	2300      	movs	r3, #0
 8003aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	fa02 f303 	lsl.w	r3, r2, r3
 8003af6:	43da      	mvns	r2, r3
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	401a      	ands	r2, r3
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b00:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	fa01 f303 	lsl.w	r3, r1, r3
 8003b0a:	43d9      	mvns	r1, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b10:	4313      	orrs	r3, r2
         );
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3724      	adds	r7, #36	@ 0x24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b082      	sub	sp, #8
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f7ff ff4c 	bl	80039c4 <__NVIC_SetPriorityGrouping>
}
 8003b2c:	bf00      	nop
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
 8003b40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b42:	2300      	movs	r3, #0
 8003b44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b46:	f7ff ff61 	bl	8003a0c <__NVIC_GetPriorityGrouping>
 8003b4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	68b9      	ldr	r1, [r7, #8]
 8003b50:	6978      	ldr	r0, [r7, #20]
 8003b52:	f7ff ffb1 	bl	8003ab8 <NVIC_EncodePriority>
 8003b56:	4602      	mov	r2, r0
 8003b58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b5c:	4611      	mov	r1, r2
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff ff80 	bl	8003a64 <__NVIC_SetPriority>
}
 8003b64:	bf00      	nop
 8003b66:	3718      	adds	r7, #24
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	4603      	mov	r3, r0
 8003b74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7ff ff54 	bl	8003a28 <__NVIC_EnableIRQ>
}
 8003b80:	bf00      	nop
 8003b82:	3708      	adds	r7, #8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b94:	f7ff fb18 	bl	80031c8 <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e099      	b.n	8003cd8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 0201 	bic.w	r2, r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bc4:	e00f      	b.n	8003be6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bc6:	f7ff faff 	bl	80031c8 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b05      	cmp	r3, #5
 8003bd2:	d908      	bls.n	8003be6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2203      	movs	r2, #3
 8003bde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e078      	b.n	8003cd8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1e8      	bne.n	8003bc6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	4b38      	ldr	r3, [pc, #224]	@ (8003ce0 <HAL_DMA_Init+0x158>)
 8003c00:	4013      	ands	r3, r2
 8003c02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3c:	2b04      	cmp	r3, #4
 8003c3e:	d107      	bne.n	8003c50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	f023 0307 	bic.w	r3, r3, #7
 8003c66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	d117      	bne.n	8003caa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00e      	beq.n	8003caa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 fa6f 	bl	8004170 <DMA_CheckFifoParam>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d008      	beq.n	8003caa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2240      	movs	r2, #64	@ 0x40
 8003c9c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e016      	b.n	8003cd8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 fa26 	bl	8004104 <DMA_CalcBaseAndBitshift>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cc0:	223f      	movs	r2, #63	@ 0x3f
 8003cc2:	409a      	lsls	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3718      	adds	r7, #24
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	f010803f 	.word	0xf010803f

08003ce4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
 8003cf0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cfa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d101      	bne.n	8003d0a <HAL_DMA_Start_IT+0x26>
 8003d06:	2302      	movs	r3, #2
 8003d08:	e040      	b.n	8003d8c <HAL_DMA_Start_IT+0xa8>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d12f      	bne.n	8003d7e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2202      	movs	r2, #2
 8003d22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	68b9      	ldr	r1, [r7, #8]
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f000 f9b8 	bl	80040a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d3c:	223f      	movs	r2, #63	@ 0x3f
 8003d3e:	409a      	lsls	r2, r3
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f042 0216 	orr.w	r2, r2, #22
 8003d52:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d007      	beq.n	8003d6c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0208 	orr.w	r2, r2, #8
 8003d6a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f042 0201 	orr.w	r2, r2, #1
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	e005      	b.n	8003d8a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003d86:	2302      	movs	r3, #2
 8003d88:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3718      	adds	r7, #24
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003da0:	4b8e      	ldr	r3, [pc, #568]	@ (8003fdc <HAL_DMA_IRQHandler+0x248>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a8e      	ldr	r2, [pc, #568]	@ (8003fe0 <HAL_DMA_IRQHandler+0x24c>)
 8003da6:	fba2 2303 	umull	r2, r3, r2, r3
 8003daa:	0a9b      	lsrs	r3, r3, #10
 8003dac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dbe:	2208      	movs	r2, #8
 8003dc0:	409a      	lsls	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d01a      	beq.n	8003e00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d013      	beq.n	8003e00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f022 0204 	bic.w	r2, r2, #4
 8003de6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dec:	2208      	movs	r2, #8
 8003dee:	409a      	lsls	r2, r3
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003df8:	f043 0201 	orr.w	r2, r3, #1
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e04:	2201      	movs	r2, #1
 8003e06:	409a      	lsls	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d012      	beq.n	8003e36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00b      	beq.n	8003e36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e22:	2201      	movs	r2, #1
 8003e24:	409a      	lsls	r2, r3
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e2e:	f043 0202 	orr.w	r2, r3, #2
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e3a:	2204      	movs	r2, #4
 8003e3c:	409a      	lsls	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	4013      	ands	r3, r2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d012      	beq.n	8003e6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00b      	beq.n	8003e6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e58:	2204      	movs	r2, #4
 8003e5a:	409a      	lsls	r2, r3
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e64:	f043 0204 	orr.w	r2, r3, #4
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e70:	2210      	movs	r2, #16
 8003e72:	409a      	lsls	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4013      	ands	r3, r2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d043      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0308 	and.w	r3, r3, #8
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d03c      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e8e:	2210      	movs	r2, #16
 8003e90:	409a      	lsls	r2, r3
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d018      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d108      	bne.n	8003ec4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d024      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	4798      	blx	r3
 8003ec2:	e01f      	b.n	8003f04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d01b      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	4798      	blx	r3
 8003ed4:	e016      	b.n	8003f04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d107      	bne.n	8003ef4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0208 	bic.w	r2, r2, #8
 8003ef2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d003      	beq.n	8003f04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f08:	2220      	movs	r2, #32
 8003f0a:	409a      	lsls	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f000 808f 	beq.w	8004034 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0310 	and.w	r3, r3, #16
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f000 8087 	beq.w	8004034 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	409a      	lsls	r2, r3
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	2b05      	cmp	r3, #5
 8003f3c:	d136      	bne.n	8003fac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 0216 	bic.w	r2, r2, #22
 8003f4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	695a      	ldr	r2, [r3, #20]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d103      	bne.n	8003f6e <HAL_DMA_IRQHandler+0x1da>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d007      	beq.n	8003f7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 0208 	bic.w	r2, r2, #8
 8003f7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f82:	223f      	movs	r2, #63	@ 0x3f
 8003f84:	409a      	lsls	r2, r3
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d07e      	beq.n	80040a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	4798      	blx	r3
        }
        return;
 8003faa:	e079      	b.n	80040a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d01d      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d10d      	bne.n	8003fe4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d031      	beq.n	8004034 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	4798      	blx	r3
 8003fd8:	e02c      	b.n	8004034 <HAL_DMA_IRQHandler+0x2a0>
 8003fda:	bf00      	nop
 8003fdc:	2000001c 	.word	0x2000001c
 8003fe0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d023      	beq.n	8004034 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	4798      	blx	r3
 8003ff4:	e01e      	b.n	8004034 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004000:	2b00      	cmp	r3, #0
 8004002:	d10f      	bne.n	8004024 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f022 0210 	bic.w	r2, r2, #16
 8004012:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004028:	2b00      	cmp	r3, #0
 800402a:	d003      	beq.n	8004034 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004038:	2b00      	cmp	r3, #0
 800403a:	d032      	beq.n	80040a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	2b00      	cmp	r3, #0
 8004046:	d022      	beq.n	800408e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2205      	movs	r2, #5
 800404c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 0201 	bic.w	r2, r2, #1
 800405e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	3301      	adds	r3, #1
 8004064:	60bb      	str	r3, [r7, #8]
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	429a      	cmp	r2, r3
 800406a:	d307      	bcc.n	800407c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1f2      	bne.n	8004060 <HAL_DMA_IRQHandler+0x2cc>
 800407a:	e000      	b.n	800407e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800407c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004092:	2b00      	cmp	r3, #0
 8004094:	d005      	beq.n	80040a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	4798      	blx	r3
 800409e:	e000      	b.n	80040a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80040a0:	bf00      	nop
    }
  }
}
 80040a2:	3718      	adds	r7, #24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
 80040b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80040c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	2b40      	cmp	r3, #64	@ 0x40
 80040d4:	d108      	bne.n	80040e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80040e6:	e007      	b.n	80040f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68ba      	ldr	r2, [r7, #8]
 80040ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	60da      	str	r2, [r3, #12]
}
 80040f8:	bf00      	nop
 80040fa:	3714      	adds	r7, #20
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	b2db      	uxtb	r3, r3
 8004112:	3b10      	subs	r3, #16
 8004114:	4a14      	ldr	r2, [pc, #80]	@ (8004168 <DMA_CalcBaseAndBitshift+0x64>)
 8004116:	fba2 2303 	umull	r2, r3, r2, r3
 800411a:	091b      	lsrs	r3, r3, #4
 800411c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800411e:	4a13      	ldr	r2, [pc, #76]	@ (800416c <DMA_CalcBaseAndBitshift+0x68>)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4413      	add	r3, r2
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	461a      	mov	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2b03      	cmp	r3, #3
 8004130:	d909      	bls.n	8004146 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800413a:	f023 0303 	bic.w	r3, r3, #3
 800413e:	1d1a      	adds	r2, r3, #4
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	659a      	str	r2, [r3, #88]	@ 0x58
 8004144:	e007      	b.n	8004156 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800414e:	f023 0303 	bic.w	r3, r3, #3
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800415a:	4618      	mov	r0, r3
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	aaaaaaab 	.word	0xaaaaaaab
 800416c:	0800e304 	.word	0x0800e304

08004170 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004170:	b480      	push	{r7}
 8004172:	b085      	sub	sp, #20
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004178:	2300      	movs	r3, #0
 800417a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004180:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d11f      	bne.n	80041ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	2b03      	cmp	r3, #3
 800418e:	d856      	bhi.n	800423e <DMA_CheckFifoParam+0xce>
 8004190:	a201      	add	r2, pc, #4	@ (adr r2, 8004198 <DMA_CheckFifoParam+0x28>)
 8004192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004196:	bf00      	nop
 8004198:	080041a9 	.word	0x080041a9
 800419c:	080041bb 	.word	0x080041bb
 80041a0:	080041a9 	.word	0x080041a9
 80041a4:	0800423f 	.word	0x0800423f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d046      	beq.n	8004242 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041b8:	e043      	b.n	8004242 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041be:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80041c2:	d140      	bne.n	8004246 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041c8:	e03d      	b.n	8004246 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041d2:	d121      	bne.n	8004218 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	2b03      	cmp	r3, #3
 80041d8:	d837      	bhi.n	800424a <DMA_CheckFifoParam+0xda>
 80041da:	a201      	add	r2, pc, #4	@ (adr r2, 80041e0 <DMA_CheckFifoParam+0x70>)
 80041dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e0:	080041f1 	.word	0x080041f1
 80041e4:	080041f7 	.word	0x080041f7
 80041e8:	080041f1 	.word	0x080041f1
 80041ec:	08004209 	.word	0x08004209
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	73fb      	strb	r3, [r7, #15]
      break;
 80041f4:	e030      	b.n	8004258 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d025      	beq.n	800424e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004206:	e022      	b.n	800424e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800420c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004210:	d11f      	bne.n	8004252 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004216:	e01c      	b.n	8004252 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	2b02      	cmp	r3, #2
 800421c:	d903      	bls.n	8004226 <DMA_CheckFifoParam+0xb6>
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	2b03      	cmp	r3, #3
 8004222:	d003      	beq.n	800422c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004224:	e018      	b.n	8004258 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	73fb      	strb	r3, [r7, #15]
      break;
 800422a:	e015      	b.n	8004258 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004230:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00e      	beq.n	8004256 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	73fb      	strb	r3, [r7, #15]
      break;
 800423c:	e00b      	b.n	8004256 <DMA_CheckFifoParam+0xe6>
      break;
 800423e:	bf00      	nop
 8004240:	e00a      	b.n	8004258 <DMA_CheckFifoParam+0xe8>
      break;
 8004242:	bf00      	nop
 8004244:	e008      	b.n	8004258 <DMA_CheckFifoParam+0xe8>
      break;
 8004246:	bf00      	nop
 8004248:	e006      	b.n	8004258 <DMA_CheckFifoParam+0xe8>
      break;
 800424a:	bf00      	nop
 800424c:	e004      	b.n	8004258 <DMA_CheckFifoParam+0xe8>
      break;
 800424e:	bf00      	nop
 8004250:	e002      	b.n	8004258 <DMA_CheckFifoParam+0xe8>
      break;   
 8004252:	bf00      	nop
 8004254:	e000      	b.n	8004258 <DMA_CheckFifoParam+0xe8>
      break;
 8004256:	bf00      	nop
    }
  } 
  
  return status; 
 8004258:	7bfb      	ldrb	r3, [r7, #15]
}
 800425a:	4618      	mov	r0, r3
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop

08004268 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004268:	b480      	push	{r7}
 800426a:	b089      	sub	sp, #36	@ 0x24
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004272:	2300      	movs	r3, #0
 8004274:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004276:	2300      	movs	r3, #0
 8004278:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800427a:	2300      	movs	r3, #0
 800427c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800427e:	2300      	movs	r3, #0
 8004280:	61fb      	str	r3, [r7, #28]
 8004282:	e159      	b.n	8004538 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004284:	2201      	movs	r2, #1
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	fa02 f303 	lsl.w	r3, r2, r3
 800428c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	4013      	ands	r3, r2
 8004296:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	429a      	cmp	r2, r3
 800429e:	f040 8148 	bne.w	8004532 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f003 0303 	and.w	r3, r3, #3
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d005      	beq.n	80042ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d130      	bne.n	800431c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	2203      	movs	r2, #3
 80042c6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ca:	43db      	mvns	r3, r3
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	4013      	ands	r3, r2
 80042d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	68da      	ldr	r2, [r3, #12]
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042f0:	2201      	movs	r2, #1
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	43db      	mvns	r3, r3
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	4013      	ands	r3, r2
 80042fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	091b      	lsrs	r3, r3, #4
 8004306:	f003 0201 	and.w	r2, r3, #1
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	4313      	orrs	r3, r2
 8004314:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f003 0303 	and.w	r3, r3, #3
 8004324:	2b03      	cmp	r3, #3
 8004326:	d017      	beq.n	8004358 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	2203      	movs	r2, #3
 8004334:	fa02 f303 	lsl.w	r3, r2, r3
 8004338:	43db      	mvns	r3, r3
 800433a:	69ba      	ldr	r2, [r7, #24]
 800433c:	4013      	ands	r3, r2
 800433e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	689a      	ldr	r2, [r3, #8]
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	fa02 f303 	lsl.w	r3, r2, r3
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	4313      	orrs	r3, r2
 8004350:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f003 0303 	and.w	r3, r3, #3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d123      	bne.n	80043ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	08da      	lsrs	r2, r3, #3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	3208      	adds	r2, #8
 800436c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004370:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	f003 0307 	and.w	r3, r3, #7
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	220f      	movs	r2, #15
 800437c:	fa02 f303 	lsl.w	r3, r2, r3
 8004380:	43db      	mvns	r3, r3
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	4013      	ands	r3, r2
 8004386:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	691a      	ldr	r2, [r3, #16]
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	f003 0307 	and.w	r3, r3, #7
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	fa02 f303 	lsl.w	r3, r2, r3
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	4313      	orrs	r3, r2
 800439c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	08da      	lsrs	r2, r3, #3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	3208      	adds	r2, #8
 80043a6:	69b9      	ldr	r1, [r7, #24]
 80043a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	2203      	movs	r2, #3
 80043b8:	fa02 f303 	lsl.w	r3, r2, r3
 80043bc:	43db      	mvns	r3, r3
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	4013      	ands	r3, r2
 80043c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f003 0203 	and.w	r2, r3, #3
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	fa02 f303 	lsl.w	r3, r2, r3
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 80a2 	beq.w	8004532 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043ee:	2300      	movs	r3, #0
 80043f0:	60fb      	str	r3, [r7, #12]
 80043f2:	4b57      	ldr	r3, [pc, #348]	@ (8004550 <HAL_GPIO_Init+0x2e8>)
 80043f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043f6:	4a56      	ldr	r2, [pc, #344]	@ (8004550 <HAL_GPIO_Init+0x2e8>)
 80043f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80043fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80043fe:	4b54      	ldr	r3, [pc, #336]	@ (8004550 <HAL_GPIO_Init+0x2e8>)
 8004400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004402:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004406:	60fb      	str	r3, [r7, #12]
 8004408:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800440a:	4a52      	ldr	r2, [pc, #328]	@ (8004554 <HAL_GPIO_Init+0x2ec>)
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	089b      	lsrs	r3, r3, #2
 8004410:	3302      	adds	r3, #2
 8004412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004416:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	f003 0303 	and.w	r3, r3, #3
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	220f      	movs	r2, #15
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	43db      	mvns	r3, r3
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	4013      	ands	r3, r2
 800442c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a49      	ldr	r2, [pc, #292]	@ (8004558 <HAL_GPIO_Init+0x2f0>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d019      	beq.n	800446a <HAL_GPIO_Init+0x202>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a48      	ldr	r2, [pc, #288]	@ (800455c <HAL_GPIO_Init+0x2f4>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d013      	beq.n	8004466 <HAL_GPIO_Init+0x1fe>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a47      	ldr	r2, [pc, #284]	@ (8004560 <HAL_GPIO_Init+0x2f8>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d00d      	beq.n	8004462 <HAL_GPIO_Init+0x1fa>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a46      	ldr	r2, [pc, #280]	@ (8004564 <HAL_GPIO_Init+0x2fc>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d007      	beq.n	800445e <HAL_GPIO_Init+0x1f6>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a45      	ldr	r2, [pc, #276]	@ (8004568 <HAL_GPIO_Init+0x300>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d101      	bne.n	800445a <HAL_GPIO_Init+0x1f2>
 8004456:	2304      	movs	r3, #4
 8004458:	e008      	b.n	800446c <HAL_GPIO_Init+0x204>
 800445a:	2307      	movs	r3, #7
 800445c:	e006      	b.n	800446c <HAL_GPIO_Init+0x204>
 800445e:	2303      	movs	r3, #3
 8004460:	e004      	b.n	800446c <HAL_GPIO_Init+0x204>
 8004462:	2302      	movs	r3, #2
 8004464:	e002      	b.n	800446c <HAL_GPIO_Init+0x204>
 8004466:	2301      	movs	r3, #1
 8004468:	e000      	b.n	800446c <HAL_GPIO_Init+0x204>
 800446a:	2300      	movs	r3, #0
 800446c:	69fa      	ldr	r2, [r7, #28]
 800446e:	f002 0203 	and.w	r2, r2, #3
 8004472:	0092      	lsls	r2, r2, #2
 8004474:	4093      	lsls	r3, r2
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	4313      	orrs	r3, r2
 800447a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800447c:	4935      	ldr	r1, [pc, #212]	@ (8004554 <HAL_GPIO_Init+0x2ec>)
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	089b      	lsrs	r3, r3, #2
 8004482:	3302      	adds	r3, #2
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800448a:	4b38      	ldr	r3, [pc, #224]	@ (800456c <HAL_GPIO_Init+0x304>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	43db      	mvns	r3, r3
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	4013      	ands	r3, r2
 8004498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d003      	beq.n	80044ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80044a6:	69ba      	ldr	r2, [r7, #24]
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044ae:	4a2f      	ldr	r2, [pc, #188]	@ (800456c <HAL_GPIO_Init+0x304>)
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044b4:	4b2d      	ldr	r3, [pc, #180]	@ (800456c <HAL_GPIO_Init+0x304>)
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	43db      	mvns	r3, r3
 80044be:	69ba      	ldr	r2, [r7, #24]
 80044c0:	4013      	ands	r3, r2
 80044c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d003      	beq.n	80044d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044d8:	4a24      	ldr	r2, [pc, #144]	@ (800456c <HAL_GPIO_Init+0x304>)
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80044de:	4b23      	ldr	r3, [pc, #140]	@ (800456c <HAL_GPIO_Init+0x304>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	43db      	mvns	r3, r3
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	4013      	ands	r3, r2
 80044ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	4313      	orrs	r3, r2
 8004500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004502:	4a1a      	ldr	r2, [pc, #104]	@ (800456c <HAL_GPIO_Init+0x304>)
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004508:	4b18      	ldr	r3, [pc, #96]	@ (800456c <HAL_GPIO_Init+0x304>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	43db      	mvns	r3, r3
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	4013      	ands	r3, r2
 8004516:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d003      	beq.n	800452c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	4313      	orrs	r3, r2
 800452a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800452c:	4a0f      	ldr	r2, [pc, #60]	@ (800456c <HAL_GPIO_Init+0x304>)
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	3301      	adds	r3, #1
 8004536:	61fb      	str	r3, [r7, #28]
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	2b0f      	cmp	r3, #15
 800453c:	f67f aea2 	bls.w	8004284 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004540:	bf00      	nop
 8004542:	bf00      	nop
 8004544:	3724      	adds	r7, #36	@ 0x24
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	40023800 	.word	0x40023800
 8004554:	40013800 	.word	0x40013800
 8004558:	40020000 	.word	0x40020000
 800455c:	40020400 	.word	0x40020400
 8004560:	40020800 	.word	0x40020800
 8004564:	40020c00 	.word	0x40020c00
 8004568:	40021000 	.word	0x40021000
 800456c:	40013c00 	.word	0x40013c00

08004570 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e12b      	b.n	80047da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d106      	bne.n	800459c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7fd ffbe 	bl	8002518 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2224      	movs	r2, #36	@ 0x24
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 0201 	bic.w	r2, r2, #1
 80045b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80045c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80045d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80045d4:	f001 fc10 	bl	8005df8 <HAL_RCC_GetPCLK1Freq>
 80045d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	4a81      	ldr	r2, [pc, #516]	@ (80047e4 <HAL_I2C_Init+0x274>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d807      	bhi.n	80045f4 <HAL_I2C_Init+0x84>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	4a80      	ldr	r2, [pc, #512]	@ (80047e8 <HAL_I2C_Init+0x278>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	bf94      	ite	ls
 80045ec:	2301      	movls	r3, #1
 80045ee:	2300      	movhi	r3, #0
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	e006      	b.n	8004602 <HAL_I2C_Init+0x92>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4a7d      	ldr	r2, [pc, #500]	@ (80047ec <HAL_I2C_Init+0x27c>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	bf94      	ite	ls
 80045fc:	2301      	movls	r3, #1
 80045fe:	2300      	movhi	r3, #0
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e0e7      	b.n	80047da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	4a78      	ldr	r2, [pc, #480]	@ (80047f0 <HAL_I2C_Init+0x280>)
 800460e:	fba2 2303 	umull	r2, r3, r2, r3
 8004612:	0c9b      	lsrs	r3, r3, #18
 8004614:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	430a      	orrs	r2, r1
 8004628:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	4a6a      	ldr	r2, [pc, #424]	@ (80047e4 <HAL_I2C_Init+0x274>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d802      	bhi.n	8004644 <HAL_I2C_Init+0xd4>
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	3301      	adds	r3, #1
 8004642:	e009      	b.n	8004658 <HAL_I2C_Init+0xe8>
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800464a:	fb02 f303 	mul.w	r3, r2, r3
 800464e:	4a69      	ldr	r2, [pc, #420]	@ (80047f4 <HAL_I2C_Init+0x284>)
 8004650:	fba2 2303 	umull	r2, r3, r2, r3
 8004654:	099b      	lsrs	r3, r3, #6
 8004656:	3301      	adds	r3, #1
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	6812      	ldr	r2, [r2, #0]
 800465c:	430b      	orrs	r3, r1
 800465e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	69db      	ldr	r3, [r3, #28]
 8004666:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800466a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	495c      	ldr	r1, [pc, #368]	@ (80047e4 <HAL_I2C_Init+0x274>)
 8004674:	428b      	cmp	r3, r1
 8004676:	d819      	bhi.n	80046ac <HAL_I2C_Init+0x13c>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	1e59      	subs	r1, r3, #1
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	005b      	lsls	r3, r3, #1
 8004682:	fbb1 f3f3 	udiv	r3, r1, r3
 8004686:	1c59      	adds	r1, r3, #1
 8004688:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800468c:	400b      	ands	r3, r1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00a      	beq.n	80046a8 <HAL_I2C_Init+0x138>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	1e59      	subs	r1, r3, #1
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	fbb1 f3f3 	udiv	r3, r1, r3
 80046a0:	3301      	adds	r3, #1
 80046a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046a6:	e051      	b.n	800474c <HAL_I2C_Init+0x1dc>
 80046a8:	2304      	movs	r3, #4
 80046aa:	e04f      	b.n	800474c <HAL_I2C_Init+0x1dc>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d111      	bne.n	80046d8 <HAL_I2C_Init+0x168>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	1e58      	subs	r0, r3, #1
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6859      	ldr	r1, [r3, #4]
 80046bc:	460b      	mov	r3, r1
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	440b      	add	r3, r1
 80046c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80046c6:	3301      	adds	r3, #1
 80046c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	bf0c      	ite	eq
 80046d0:	2301      	moveq	r3, #1
 80046d2:	2300      	movne	r3, #0
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	e012      	b.n	80046fe <HAL_I2C_Init+0x18e>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	1e58      	subs	r0, r3, #1
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6859      	ldr	r1, [r3, #4]
 80046e0:	460b      	mov	r3, r1
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	440b      	add	r3, r1
 80046e6:	0099      	lsls	r1, r3, #2
 80046e8:	440b      	add	r3, r1
 80046ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80046ee:	3301      	adds	r3, #1
 80046f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	bf0c      	ite	eq
 80046f8:	2301      	moveq	r3, #1
 80046fa:	2300      	movne	r3, #0
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <HAL_I2C_Init+0x196>
 8004702:	2301      	movs	r3, #1
 8004704:	e022      	b.n	800474c <HAL_I2C_Init+0x1dc>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10e      	bne.n	800472c <HAL_I2C_Init+0x1bc>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	1e58      	subs	r0, r3, #1
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6859      	ldr	r1, [r3, #4]
 8004716:	460b      	mov	r3, r1
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	440b      	add	r3, r1
 800471c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004720:	3301      	adds	r3, #1
 8004722:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004726:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800472a:	e00f      	b.n	800474c <HAL_I2C_Init+0x1dc>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	1e58      	subs	r0, r3, #1
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6859      	ldr	r1, [r3, #4]
 8004734:	460b      	mov	r3, r1
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	440b      	add	r3, r1
 800473a:	0099      	lsls	r1, r3, #2
 800473c:	440b      	add	r3, r1
 800473e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004742:	3301      	adds	r3, #1
 8004744:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004748:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800474c:	6879      	ldr	r1, [r7, #4]
 800474e:	6809      	ldr	r1, [r1, #0]
 8004750:	4313      	orrs	r3, r2
 8004752:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	69da      	ldr	r2, [r3, #28]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	431a      	orrs	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	430a      	orrs	r2, r1
 800476e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800477a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	6911      	ldr	r1, [r2, #16]
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	68d2      	ldr	r2, [r2, #12]
 8004786:	4311      	orrs	r1, r2
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	6812      	ldr	r2, [r2, #0]
 800478c:	430b      	orrs	r3, r1
 800478e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	695a      	ldr	r2, [r3, #20]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	431a      	orrs	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f042 0201 	orr.w	r2, r2, #1
 80047ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2220      	movs	r2, #32
 80047c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	000186a0 	.word	0x000186a0
 80047e8:	001e847f 	.word	0x001e847f
 80047ec:	003d08ff 	.word	0x003d08ff
 80047f0:	431bde83 	.word	0x431bde83
 80047f4:	10624dd3 	.word	0x10624dd3

080047f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b088      	sub	sp, #32
 80047fc:	af02      	add	r7, sp, #8
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	607a      	str	r2, [r7, #4]
 8004802:	461a      	mov	r2, r3
 8004804:	460b      	mov	r3, r1
 8004806:	817b      	strh	r3, [r7, #10]
 8004808:	4613      	mov	r3, r2
 800480a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800480c:	f7fe fcdc 	bl	80031c8 <HAL_GetTick>
 8004810:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b20      	cmp	r3, #32
 800481c:	f040 80e0 	bne.w	80049e0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	9300      	str	r3, [sp, #0]
 8004824:	2319      	movs	r3, #25
 8004826:	2201      	movs	r2, #1
 8004828:	4970      	ldr	r1, [pc, #448]	@ (80049ec <HAL_I2C_Master_Transmit+0x1f4>)
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f000 fc7e 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004836:	2302      	movs	r3, #2
 8004838:	e0d3      	b.n	80049e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004840:	2b01      	cmp	r3, #1
 8004842:	d101      	bne.n	8004848 <HAL_I2C_Master_Transmit+0x50>
 8004844:	2302      	movs	r3, #2
 8004846:	e0cc      	b.n	80049e2 <HAL_I2C_Master_Transmit+0x1ea>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b01      	cmp	r3, #1
 800485c:	d007      	beq.n	800486e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f042 0201 	orr.w	r2, r2, #1
 800486c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800487c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2221      	movs	r2, #33	@ 0x21
 8004882:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2210      	movs	r2, #16
 800488a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	893a      	ldrh	r2, [r7, #8]
 800489e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	4a50      	ldr	r2, [pc, #320]	@ (80049f0 <HAL_I2C_Master_Transmit+0x1f8>)
 80048ae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80048b0:	8979      	ldrh	r1, [r7, #10]
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	6a3a      	ldr	r2, [r7, #32]
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f000 fae8 	bl	8004e8c <I2C_MasterRequestWrite>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e08d      	b.n	80049e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048c6:	2300      	movs	r3, #0
 80048c8:	613b      	str	r3, [r7, #16]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	695b      	ldr	r3, [r3, #20]
 80048d0:	613b      	str	r3, [r7, #16]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	613b      	str	r3, [r7, #16]
 80048da:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80048dc:	e066      	b.n	80049ac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	6a39      	ldr	r1, [r7, #32]
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f000 fd3c 	bl	8005360 <I2C_WaitOnTXEFlagUntilTimeout>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00d      	beq.n	800490a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f2:	2b04      	cmp	r3, #4
 80048f4:	d107      	bne.n	8004906 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004904:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e06b      	b.n	80049e2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800490e:	781a      	ldrb	r2, [r3, #0]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800491a:	1c5a      	adds	r2, r3, #1
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004924:	b29b      	uxth	r3, r3
 8004926:	3b01      	subs	r3, #1
 8004928:	b29a      	uxth	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004932:	3b01      	subs	r3, #1
 8004934:	b29a      	uxth	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	f003 0304 	and.w	r3, r3, #4
 8004944:	2b04      	cmp	r3, #4
 8004946:	d11b      	bne.n	8004980 <HAL_I2C_Master_Transmit+0x188>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800494c:	2b00      	cmp	r3, #0
 800494e:	d017      	beq.n	8004980 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004954:	781a      	ldrb	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004960:	1c5a      	adds	r2, r3, #1
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800496a:	b29b      	uxth	r3, r3
 800496c:	3b01      	subs	r3, #1
 800496e:	b29a      	uxth	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004978:	3b01      	subs	r3, #1
 800497a:	b29a      	uxth	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	6a39      	ldr	r1, [r7, #32]
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f000 fd33 	bl	80053f0 <I2C_WaitOnBTFFlagUntilTimeout>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00d      	beq.n	80049ac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004994:	2b04      	cmp	r3, #4
 8004996:	d107      	bne.n	80049a8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049a6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e01a      	b.n	80049e2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d194      	bne.n	80048de <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2220      	movs	r2, #32
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80049dc:	2300      	movs	r3, #0
 80049de:	e000      	b.n	80049e2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80049e0:	2302      	movs	r3, #2
  }
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3718      	adds	r7, #24
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	00100002 	.word	0x00100002
 80049f0:	ffff0000 	.word	0xffff0000

080049f4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b08c      	sub	sp, #48	@ 0x30
 80049f8:	af02      	add	r7, sp, #8
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	607a      	str	r2, [r7, #4]
 80049fe:	461a      	mov	r2, r3
 8004a00:	460b      	mov	r3, r1
 8004a02:	817b      	strh	r3, [r7, #10]
 8004a04:	4613      	mov	r3, r2
 8004a06:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a08:	f7fe fbde 	bl	80031c8 <HAL_GetTick>
 8004a0c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b20      	cmp	r3, #32
 8004a18:	f040 8217 	bne.w	8004e4a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1e:	9300      	str	r3, [sp, #0]
 8004a20:	2319      	movs	r3, #25
 8004a22:	2201      	movs	r2, #1
 8004a24:	497c      	ldr	r1, [pc, #496]	@ (8004c18 <HAL_I2C_Master_Receive+0x224>)
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f000 fb80 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d001      	beq.n	8004a36 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004a32:	2302      	movs	r3, #2
 8004a34:	e20a      	b.n	8004e4c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d101      	bne.n	8004a44 <HAL_I2C_Master_Receive+0x50>
 8004a40:	2302      	movs	r3, #2
 8004a42:	e203      	b.n	8004e4c <HAL_I2C_Master_Receive+0x458>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d007      	beq.n	8004a6a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f042 0201 	orr.w	r2, r2, #1
 8004a68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a78:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2222      	movs	r2, #34	@ 0x22
 8004a7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2210      	movs	r2, #16
 8004a86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	893a      	ldrh	r2, [r7, #8]
 8004a9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aa0:	b29a      	uxth	r2, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	4a5c      	ldr	r2, [pc, #368]	@ (8004c1c <HAL_I2C_Master_Receive+0x228>)
 8004aaa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004aac:	8979      	ldrh	r1, [r7, #10]
 8004aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f000 fa6c 	bl	8004f90 <I2C_MasterRequestRead>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e1c4      	b.n	8004e4c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d113      	bne.n	8004af2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aca:	2300      	movs	r3, #0
 8004acc:	623b      	str	r3, [r7, #32]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	623b      	str	r3, [r7, #32]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	623b      	str	r3, [r7, #32]
 8004ade:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004aee:	601a      	str	r2, [r3, #0]
 8004af0:	e198      	b.n	8004e24 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d11b      	bne.n	8004b32 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	61fb      	str	r3, [r7, #28]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	61fb      	str	r3, [r7, #28]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	61fb      	str	r3, [r7, #28]
 8004b1e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b2e:	601a      	str	r2, [r3, #0]
 8004b30:	e178      	b.n	8004e24 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d11b      	bne.n	8004b72 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b48:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	61bb      	str	r3, [r7, #24]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	695b      	ldr	r3, [r3, #20]
 8004b64:	61bb      	str	r3, [r7, #24]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	61bb      	str	r3, [r7, #24]
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	e158      	b.n	8004e24 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b82:	2300      	movs	r3, #0
 8004b84:	617b      	str	r3, [r7, #20]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	617b      	str	r3, [r7, #20]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	617b      	str	r3, [r7, #20]
 8004b96:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004b98:	e144      	b.n	8004e24 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b9e:	2b03      	cmp	r3, #3
 8004ba0:	f200 80f1 	bhi.w	8004d86 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d123      	bne.n	8004bf4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f000 fc65 	bl	8005480 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d001      	beq.n	8004bc0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e145      	b.n	8004e4c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	691a      	ldr	r2, [r3, #16]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bca:	b2d2      	uxtb	r2, r2
 8004bcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd2:	1c5a      	adds	r2, r3, #1
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	3b01      	subs	r3, #1
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004bf2:	e117      	b.n	8004e24 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d14e      	bne.n	8004c9a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c02:	2200      	movs	r2, #0
 8004c04:	4906      	ldr	r1, [pc, #24]	@ (8004c20 <HAL_I2C_Master_Receive+0x22c>)
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 fa90 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d008      	beq.n	8004c24 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e11a      	b.n	8004e4c <HAL_I2C_Master_Receive+0x458>
 8004c16:	bf00      	nop
 8004c18:	00100002 	.word	0x00100002
 8004c1c:	ffff0000 	.word	0xffff0000
 8004c20:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	691a      	ldr	r2, [r3, #16]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3e:	b2d2      	uxtb	r2, r2
 8004c40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c46:	1c5a      	adds	r2, r3, #1
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c50:	3b01      	subs	r3, #1
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	691a      	ldr	r2, [r3, #16]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c70:	b2d2      	uxtb	r2, r2
 8004c72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c78:	1c5a      	adds	r2, r3, #1
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c82:	3b01      	subs	r3, #1
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	3b01      	subs	r3, #1
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004c98:	e0c4      	b.n	8004e24 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9c:	9300      	str	r3, [sp, #0]
 8004c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	496c      	ldr	r1, [pc, #432]	@ (8004e54 <HAL_I2C_Master_Receive+0x460>)
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f000 fa41 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d001      	beq.n	8004cb4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e0cb      	b.n	8004e4c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	691a      	ldr	r2, [r3, #16]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cce:	b2d2      	uxtb	r2, r2
 8004cd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd6:	1c5a      	adds	r2, r3, #1
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf8:	9300      	str	r3, [sp, #0]
 8004cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	4955      	ldr	r1, [pc, #340]	@ (8004e54 <HAL_I2C_Master_Receive+0x460>)
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f000 fa13 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d001      	beq.n	8004d10 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e09d      	b.n	8004e4c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	691a      	ldr	r2, [r3, #16]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d2a:	b2d2      	uxtb	r2, r2
 8004d2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d32:	1c5a      	adds	r2, r3, #1
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	691a      	ldr	r2, [r3, #16]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d5c:	b2d2      	uxtb	r2, r2
 8004d5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d64:	1c5a      	adds	r2, r3, #1
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004d84:	e04e      	b.n	8004e24 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d88:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f000 fb78 	bl	8005480 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e058      	b.n	8004e4c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	691a      	ldr	r2, [r3, #16]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da4:	b2d2      	uxtb	r2, r2
 8004da6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dac:	1c5a      	adds	r2, r3, #1
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004db6:	3b01      	subs	r3, #1
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	f003 0304 	and.w	r3, r3, #4
 8004dd6:	2b04      	cmp	r3, #4
 8004dd8:	d124      	bne.n	8004e24 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dde:	2b03      	cmp	r3, #3
 8004de0:	d107      	bne.n	8004df2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004df0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	691a      	ldr	r2, [r3, #16]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dfc:	b2d2      	uxtb	r2, r2
 8004dfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e04:	1c5a      	adds	r2, r3, #1
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f47f aeb6 	bne.w	8004b9a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2220      	movs	r2, #32
 8004e32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004e46:	2300      	movs	r3, #0
 8004e48:	e000      	b.n	8004e4c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004e4a:	2302      	movs	r3, #2
  }
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3728      	adds	r7, #40	@ 0x28
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	00010004 	.word	0x00010004

08004e58 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e66:	b2db      	uxtb	r3, r3
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b088      	sub	sp, #32
 8004e90:	af02      	add	r7, sp, #8
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	607a      	str	r2, [r7, #4]
 8004e96:	603b      	str	r3, [r7, #0]
 8004e98:	460b      	mov	r3, r1
 8004e9a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	2b08      	cmp	r3, #8
 8004ea6:	d006      	beq.n	8004eb6 <I2C_MasterRequestWrite+0x2a>
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d003      	beq.n	8004eb6 <I2C_MasterRequestWrite+0x2a>
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004eb4:	d108      	bne.n	8004ec8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ec4:	601a      	str	r2, [r3, #0]
 8004ec6:	e00b      	b.n	8004ee0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ecc:	2b12      	cmp	r3, #18
 8004ece:	d107      	bne.n	8004ee0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ede:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f000 f91d 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00d      	beq.n	8004f14 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f06:	d103      	bne.n	8004f10 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f0e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e035      	b.n	8004f80 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f1c:	d108      	bne.n	8004f30 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f1e:	897b      	ldrh	r3, [r7, #10]
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	461a      	mov	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004f2c:	611a      	str	r2, [r3, #16]
 8004f2e:	e01b      	b.n	8004f68 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004f30:	897b      	ldrh	r3, [r7, #10]
 8004f32:	11db      	asrs	r3, r3, #7
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	f003 0306 	and.w	r3, r3, #6
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	f063 030f 	orn	r3, r3, #15
 8004f40:	b2da      	uxtb	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	490e      	ldr	r1, [pc, #56]	@ (8004f88 <I2C_MasterRequestWrite+0xfc>)
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f000 f966 	bl	8005220 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d001      	beq.n	8004f5e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e010      	b.n	8004f80 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004f5e:	897b      	ldrh	r3, [r7, #10]
 8004f60:	b2da      	uxtb	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	4907      	ldr	r1, [pc, #28]	@ (8004f8c <I2C_MasterRequestWrite+0x100>)
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f000 f956 	bl	8005220 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e000      	b.n	8004f80 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3718      	adds	r7, #24
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	00010008 	.word	0x00010008
 8004f8c:	00010002 	.word	0x00010002

08004f90 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b088      	sub	sp, #32
 8004f94:	af02      	add	r7, sp, #8
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	607a      	str	r2, [r7, #4]
 8004f9a:	603b      	str	r3, [r7, #0]
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004fb4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	2b08      	cmp	r3, #8
 8004fba:	d006      	beq.n	8004fca <I2C_MasterRequestRead+0x3a>
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d003      	beq.n	8004fca <I2C_MasterRequestRead+0x3a>
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004fc8:	d108      	bne.n	8004fdc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fd8:	601a      	str	r2, [r3, #0]
 8004fda:	e00b      	b.n	8004ff4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe0:	2b11      	cmp	r3, #17
 8004fe2:	d107      	bne.n	8004ff4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ff2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	9300      	str	r3, [sp, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005000:	68f8      	ldr	r0, [r7, #12]
 8005002:	f000 f893 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00d      	beq.n	8005028 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005016:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800501a:	d103      	bne.n	8005024 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005022:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e079      	b.n	800511c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005030:	d108      	bne.n	8005044 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005032:	897b      	ldrh	r3, [r7, #10]
 8005034:	b2db      	uxtb	r3, r3
 8005036:	f043 0301 	orr.w	r3, r3, #1
 800503a:	b2da      	uxtb	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	611a      	str	r2, [r3, #16]
 8005042:	e05f      	b.n	8005104 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005044:	897b      	ldrh	r3, [r7, #10]
 8005046:	11db      	asrs	r3, r3, #7
 8005048:	b2db      	uxtb	r3, r3
 800504a:	f003 0306 	and.w	r3, r3, #6
 800504e:	b2db      	uxtb	r3, r3
 8005050:	f063 030f 	orn	r3, r3, #15
 8005054:	b2da      	uxtb	r2, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	4930      	ldr	r1, [pc, #192]	@ (8005124 <I2C_MasterRequestRead+0x194>)
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f000 f8dc 	bl	8005220 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e054      	b.n	800511c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005072:	897b      	ldrh	r3, [r7, #10]
 8005074:	b2da      	uxtb	r2, r3
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	4929      	ldr	r1, [pc, #164]	@ (8005128 <I2C_MasterRequestRead+0x198>)
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f000 f8cc 	bl	8005220 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d001      	beq.n	8005092 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e044      	b.n	800511c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005092:	2300      	movs	r3, #0
 8005094:	613b      	str	r3, [r7, #16]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	695b      	ldr	r3, [r3, #20]
 800509c:	613b      	str	r3, [r7, #16]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	699b      	ldr	r3, [r3, #24]
 80050a4:	613b      	str	r3, [r7, #16]
 80050a6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050b6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	9300      	str	r3, [sp, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f000 f831 	bl	800512c <I2C_WaitOnFlagUntilTimeout>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00d      	beq.n	80050ec <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050de:	d103      	bne.n	80050e8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050e6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e017      	b.n	800511c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80050ec:	897b      	ldrh	r3, [r7, #10]
 80050ee:	11db      	asrs	r3, r3, #7
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	f003 0306 	and.w	r3, r3, #6
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	f063 030e 	orn	r3, r3, #14
 80050fc:	b2da      	uxtb	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	4907      	ldr	r1, [pc, #28]	@ (8005128 <I2C_MasterRequestRead+0x198>)
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f000 f888 	bl	8005220 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d001      	beq.n	800511a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e000      	b.n	800511c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3718      	adds	r7, #24
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	00010008 	.word	0x00010008
 8005128:	00010002 	.word	0x00010002

0800512c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	603b      	str	r3, [r7, #0]
 8005138:	4613      	mov	r3, r2
 800513a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800513c:	e048      	b.n	80051d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005144:	d044      	beq.n	80051d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005146:	f7fe f83f 	bl	80031c8 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	429a      	cmp	r2, r3
 8005154:	d302      	bcc.n	800515c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d139      	bne.n	80051d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	0c1b      	lsrs	r3, r3, #16
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b01      	cmp	r3, #1
 8005164:	d10d      	bne.n	8005182 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	695b      	ldr	r3, [r3, #20]
 800516c:	43da      	mvns	r2, r3
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	4013      	ands	r3, r2
 8005172:	b29b      	uxth	r3, r3
 8005174:	2b00      	cmp	r3, #0
 8005176:	bf0c      	ite	eq
 8005178:	2301      	moveq	r3, #1
 800517a:	2300      	movne	r3, #0
 800517c:	b2db      	uxtb	r3, r3
 800517e:	461a      	mov	r2, r3
 8005180:	e00c      	b.n	800519c <I2C_WaitOnFlagUntilTimeout+0x70>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	43da      	mvns	r2, r3
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	4013      	ands	r3, r2
 800518e:	b29b      	uxth	r3, r3
 8005190:	2b00      	cmp	r3, #0
 8005192:	bf0c      	ite	eq
 8005194:	2301      	moveq	r3, #1
 8005196:	2300      	movne	r3, #0
 8005198:	b2db      	uxtb	r3, r3
 800519a:	461a      	mov	r2, r3
 800519c:	79fb      	ldrb	r3, [r7, #7]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d116      	bne.n	80051d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2220      	movs	r2, #32
 80051ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051bc:	f043 0220 	orr.w	r2, r3, #32
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e023      	b.n	8005218 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	0c1b      	lsrs	r3, r3, #16
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d10d      	bne.n	80051f6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	695b      	ldr	r3, [r3, #20]
 80051e0:	43da      	mvns	r2, r3
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	4013      	ands	r3, r2
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	bf0c      	ite	eq
 80051ec:	2301      	moveq	r3, #1
 80051ee:	2300      	movne	r3, #0
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	461a      	mov	r2, r3
 80051f4:	e00c      	b.n	8005210 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	43da      	mvns	r2, r3
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	4013      	ands	r3, r2
 8005202:	b29b      	uxth	r3, r3
 8005204:	2b00      	cmp	r3, #0
 8005206:	bf0c      	ite	eq
 8005208:	2301      	moveq	r3, #1
 800520a:	2300      	movne	r3, #0
 800520c:	b2db      	uxtb	r3, r3
 800520e:	461a      	mov	r2, r3
 8005210:	79fb      	ldrb	r3, [r7, #7]
 8005212:	429a      	cmp	r2, r3
 8005214:	d093      	beq.n	800513e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3710      	adds	r7, #16
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
 800522c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800522e:	e071      	b.n	8005314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800523a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800523e:	d123      	bne.n	8005288 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800524e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005258:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2220      	movs	r2, #32
 8005264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005274:	f043 0204 	orr.w	r2, r3, #4
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e067      	b.n	8005358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800528e:	d041      	beq.n	8005314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005290:	f7fd ff9a 	bl	80031c8 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	429a      	cmp	r2, r3
 800529e:	d302      	bcc.n	80052a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d136      	bne.n	8005314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	0c1b      	lsrs	r3, r3, #16
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d10c      	bne.n	80052ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	43da      	mvns	r2, r3
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	4013      	ands	r3, r2
 80052bc:	b29b      	uxth	r3, r3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	bf14      	ite	ne
 80052c2:	2301      	movne	r3, #1
 80052c4:	2300      	moveq	r3, #0
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	e00b      	b.n	80052e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	43da      	mvns	r2, r3
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	4013      	ands	r3, r2
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	2b00      	cmp	r3, #0
 80052da:	bf14      	ite	ne
 80052dc:	2301      	movne	r3, #1
 80052de:	2300      	moveq	r3, #0
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d016      	beq.n	8005314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2220      	movs	r2, #32
 80052f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005300:	f043 0220 	orr.w	r2, r3, #32
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e021      	b.n	8005358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	0c1b      	lsrs	r3, r3, #16
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b01      	cmp	r3, #1
 800531c:	d10c      	bne.n	8005338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	695b      	ldr	r3, [r3, #20]
 8005324:	43da      	mvns	r2, r3
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	4013      	ands	r3, r2
 800532a:	b29b      	uxth	r3, r3
 800532c:	2b00      	cmp	r3, #0
 800532e:	bf14      	ite	ne
 8005330:	2301      	movne	r3, #1
 8005332:	2300      	moveq	r3, #0
 8005334:	b2db      	uxtb	r3, r3
 8005336:	e00b      	b.n	8005350 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	43da      	mvns	r2, r3
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	4013      	ands	r3, r2
 8005344:	b29b      	uxth	r3, r3
 8005346:	2b00      	cmp	r3, #0
 8005348:	bf14      	ite	ne
 800534a:	2301      	movne	r3, #1
 800534c:	2300      	moveq	r3, #0
 800534e:	b2db      	uxtb	r3, r3
 8005350:	2b00      	cmp	r3, #0
 8005352:	f47f af6d 	bne.w	8005230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800536c:	e034      	b.n	80053d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f000 f8e3 	bl	800553a <I2C_IsAcknowledgeFailed>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d001      	beq.n	800537e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e034      	b.n	80053e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005384:	d028      	beq.n	80053d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005386:	f7fd ff1f 	bl	80031c8 <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	429a      	cmp	r2, r3
 8005394:	d302      	bcc.n	800539c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d11d      	bne.n	80053d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053a6:	2b80      	cmp	r3, #128	@ 0x80
 80053a8:	d016      	beq.n	80053d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2220      	movs	r2, #32
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c4:	f043 0220 	orr.w	r2, r3, #32
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e007      	b.n	80053e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053e2:	2b80      	cmp	r3, #128	@ 0x80
 80053e4:	d1c3      	bne.n	800536e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053fc:	e034      	b.n	8005468 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f000 f89b 	bl	800553a <I2C_IsAcknowledgeFailed>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e034      	b.n	8005478 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005414:	d028      	beq.n	8005468 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005416:	f7fd fed7 	bl	80031c8 <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	429a      	cmp	r2, r3
 8005424:	d302      	bcc.n	800542c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d11d      	bne.n	8005468 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	f003 0304 	and.w	r3, r3, #4
 8005436:	2b04      	cmp	r3, #4
 8005438:	d016      	beq.n	8005468 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2220      	movs	r2, #32
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005454:	f043 0220 	orr.w	r2, r3, #32
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e007      	b.n	8005478 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	f003 0304 	and.w	r3, r3, #4
 8005472:	2b04      	cmp	r3, #4
 8005474:	d1c3      	bne.n	80053fe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3710      	adds	r7, #16
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800548c:	e049      	b.n	8005522 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	695b      	ldr	r3, [r3, #20]
 8005494:	f003 0310 	and.w	r3, r3, #16
 8005498:	2b10      	cmp	r3, #16
 800549a:	d119      	bne.n	80054d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f06f 0210 	mvn.w	r2, #16
 80054a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2220      	movs	r2, #32
 80054b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e030      	b.n	8005532 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054d0:	f7fd fe7a 	bl	80031c8 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	68ba      	ldr	r2, [r7, #8]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d302      	bcc.n	80054e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d11d      	bne.n	8005522 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	695b      	ldr	r3, [r3, #20]
 80054ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054f0:	2b40      	cmp	r3, #64	@ 0x40
 80054f2:	d016      	beq.n	8005522 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2220      	movs	r2, #32
 80054fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800550e:	f043 0220 	orr.w	r2, r3, #32
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e007      	b.n	8005532 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800552c:	2b40      	cmp	r3, #64	@ 0x40
 800552e:	d1ae      	bne.n	800548e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800553a:	b480      	push	{r7}
 800553c:	b083      	sub	sp, #12
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	695b      	ldr	r3, [r3, #20]
 8005548:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800554c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005550:	d11b      	bne.n	800558a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800555a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2220      	movs	r2, #32
 8005566:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005576:	f043 0204 	orr.w	r2, r3, #4
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e000      	b.n	800558c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b086      	sub	sp, #24
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d101      	bne.n	80055aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e267      	b.n	8005a7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d075      	beq.n	80056a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80055b6:	4b88      	ldr	r3, [pc, #544]	@ (80057d8 <HAL_RCC_OscConfig+0x240>)
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f003 030c 	and.w	r3, r3, #12
 80055be:	2b04      	cmp	r3, #4
 80055c0:	d00c      	beq.n	80055dc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055c2:	4b85      	ldr	r3, [pc, #532]	@ (80057d8 <HAL_RCC_OscConfig+0x240>)
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80055ca:	2b08      	cmp	r3, #8
 80055cc:	d112      	bne.n	80055f4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055ce:	4b82      	ldr	r3, [pc, #520]	@ (80057d8 <HAL_RCC_OscConfig+0x240>)
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055da:	d10b      	bne.n	80055f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055dc:	4b7e      	ldr	r3, [pc, #504]	@ (80057d8 <HAL_RCC_OscConfig+0x240>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d05b      	beq.n	80056a0 <HAL_RCC_OscConfig+0x108>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d157      	bne.n	80056a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e242      	b.n	8005a7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055fc:	d106      	bne.n	800560c <HAL_RCC_OscConfig+0x74>
 80055fe:	4b76      	ldr	r3, [pc, #472]	@ (80057d8 <HAL_RCC_OscConfig+0x240>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a75      	ldr	r2, [pc, #468]	@ (80057d8 <HAL_RCC_OscConfig+0x240>)
 8005604:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005608:	6013      	str	r3, [r2, #0]
 800560a:	e01d      	b.n	8005648 <HAL_RCC_OscConfig+0xb0>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005614:	d10c      	bne.n	8005630 <HAL_RCC_OscConfig+0x98>
 8005616:	4b70      	ldr	r3, [pc, #448]	@ (80057d8 <HAL_RCC_OscConfig+0x240>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a6f      	ldr	r2, [pc, #444]	@ (80057d8 <HAL_RCC_OscConfig+0x240>)
 800561c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005620:	6013      	str	r3, [r2, #0]
 8005622:	4b6d      	ldr	r3, [pc, #436]	@ (80057d8 <HAL_RCC_OscConfig+0x240>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a6c      	ldr	r2, [pc, #432]	@ (80057d8 <HAL_RCC_OscConfig+0x240>)
 8005628:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800562c:	6013      	str	r3, [r2, #0]
 800562e:	e00b      	b.n	8005648 <HAL_RCC_OscConfig+0xb0>
 8005630:	4b69      	ldr	r3, [pc, #420]	@ (80057d8 <HAL_RCC_OscConfig+0x240>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a68      	ldr	r2, [pc, #416]	@ (80057d8 <HAL_RCC_OscConfig+0x240>)
 8005636:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800563a:	6013      	str	r3, [r2, #0]
 800563c:	4b66      	ldr	r3, [pc, #408]	@ (80057d8 <HAL_RCC_OscConfig+0x240>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a65      	ldr	r2, [pc, #404]	@ (80057d8 <HAL_RCC_OscConfig+0x240>)
 8005642:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005646:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d013      	beq.n	8005678 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005650:	f7fd fdba 	bl	80031c8 <HAL_GetTick>
 8005654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005656:	e008      	b.n	800566a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005658:	f7fd fdb6 	bl	80031c8 <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	2b64      	cmp	r3, #100	@ 0x64
 8005664:	d901      	bls.n	800566a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e207      	b.n	8005a7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800566a:	4b5b      	ldr	r3, [pc, #364]	@ (80057d8 <HAL_RCC_OscConfig+0x240>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d0f0      	beq.n	8005658 <HAL_RCC_OscConfig+0xc0>
 8005676:	e014      	b.n	80056a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005678:	f7fd fda6 	bl	80031c8 <HAL_GetTick>
 800567c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800567e:	e008      	b.n	8005692 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005680:	f7fd fda2 	bl	80031c8 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	2b64      	cmp	r3, #100	@ 0x64
 800568c:	d901      	bls.n	8005692 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e1f3      	b.n	8005a7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005692:	4b51      	ldr	r3, [pc, #324]	@ (80057d8 <HAL_RCC_OscConfig+0x240>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1f0      	bne.n	8005680 <HAL_RCC_OscConfig+0xe8>
 800569e:	e000      	b.n	80056a2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d063      	beq.n	8005776 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80056ae:	4b4a      	ldr	r3, [pc, #296]	@ (80057d8 <HAL_RCC_OscConfig+0x240>)
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	f003 030c 	and.w	r3, r3, #12
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00b      	beq.n	80056d2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056ba:	4b47      	ldr	r3, [pc, #284]	@ (80057d8 <HAL_RCC_OscConfig+0x240>)
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80056c2:	2b08      	cmp	r3, #8
 80056c4:	d11c      	bne.n	8005700 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056c6:	4b44      	ldr	r3, [pc, #272]	@ (80057d8 <HAL_RCC_OscConfig+0x240>)
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d116      	bne.n	8005700 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056d2:	4b41      	ldr	r3, [pc, #260]	@ (80057d8 <HAL_RCC_OscConfig+0x240>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d005      	beq.n	80056ea <HAL_RCC_OscConfig+0x152>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d001      	beq.n	80056ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e1c7      	b.n	8005a7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056ea:	4b3b      	ldr	r3, [pc, #236]	@ (80057d8 <HAL_RCC_OscConfig+0x240>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	00db      	lsls	r3, r3, #3
 80056f8:	4937      	ldr	r1, [pc, #220]	@ (80057d8 <HAL_RCC_OscConfig+0x240>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056fe:	e03a      	b.n	8005776 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d020      	beq.n	800574a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005708:	4b34      	ldr	r3, [pc, #208]	@ (80057dc <HAL_RCC_OscConfig+0x244>)
 800570a:	2201      	movs	r2, #1
 800570c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800570e:	f7fd fd5b 	bl	80031c8 <HAL_GetTick>
 8005712:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005714:	e008      	b.n	8005728 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005716:	f7fd fd57 	bl	80031c8 <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	2b02      	cmp	r3, #2
 8005722:	d901      	bls.n	8005728 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	e1a8      	b.n	8005a7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005728:	4b2b      	ldr	r3, [pc, #172]	@ (80057d8 <HAL_RCC_OscConfig+0x240>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0302 	and.w	r3, r3, #2
 8005730:	2b00      	cmp	r3, #0
 8005732:	d0f0      	beq.n	8005716 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005734:	4b28      	ldr	r3, [pc, #160]	@ (80057d8 <HAL_RCC_OscConfig+0x240>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	00db      	lsls	r3, r3, #3
 8005742:	4925      	ldr	r1, [pc, #148]	@ (80057d8 <HAL_RCC_OscConfig+0x240>)
 8005744:	4313      	orrs	r3, r2
 8005746:	600b      	str	r3, [r1, #0]
 8005748:	e015      	b.n	8005776 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800574a:	4b24      	ldr	r3, [pc, #144]	@ (80057dc <HAL_RCC_OscConfig+0x244>)
 800574c:	2200      	movs	r2, #0
 800574e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005750:	f7fd fd3a 	bl	80031c8 <HAL_GetTick>
 8005754:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005756:	e008      	b.n	800576a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005758:	f7fd fd36 	bl	80031c8 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	2b02      	cmp	r3, #2
 8005764:	d901      	bls.n	800576a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e187      	b.n	8005a7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800576a:	4b1b      	ldr	r3, [pc, #108]	@ (80057d8 <HAL_RCC_OscConfig+0x240>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0302 	and.w	r3, r3, #2
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1f0      	bne.n	8005758 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0308 	and.w	r3, r3, #8
 800577e:	2b00      	cmp	r3, #0
 8005780:	d036      	beq.n	80057f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d016      	beq.n	80057b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800578a:	4b15      	ldr	r3, [pc, #84]	@ (80057e0 <HAL_RCC_OscConfig+0x248>)
 800578c:	2201      	movs	r2, #1
 800578e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005790:	f7fd fd1a 	bl	80031c8 <HAL_GetTick>
 8005794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005796:	e008      	b.n	80057aa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005798:	f7fd fd16 	bl	80031c8 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d901      	bls.n	80057aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e167      	b.n	8005a7a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057aa:	4b0b      	ldr	r3, [pc, #44]	@ (80057d8 <HAL_RCC_OscConfig+0x240>)
 80057ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057ae:	f003 0302 	and.w	r3, r3, #2
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d0f0      	beq.n	8005798 <HAL_RCC_OscConfig+0x200>
 80057b6:	e01b      	b.n	80057f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057b8:	4b09      	ldr	r3, [pc, #36]	@ (80057e0 <HAL_RCC_OscConfig+0x248>)
 80057ba:	2200      	movs	r2, #0
 80057bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057be:	f7fd fd03 	bl	80031c8 <HAL_GetTick>
 80057c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057c4:	e00e      	b.n	80057e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057c6:	f7fd fcff 	bl	80031c8 <HAL_GetTick>
 80057ca:	4602      	mov	r2, r0
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d907      	bls.n	80057e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e150      	b.n	8005a7a <HAL_RCC_OscConfig+0x4e2>
 80057d8:	40023800 	.word	0x40023800
 80057dc:	42470000 	.word	0x42470000
 80057e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057e4:	4b88      	ldr	r3, [pc, #544]	@ (8005a08 <HAL_RCC_OscConfig+0x470>)
 80057e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057e8:	f003 0302 	and.w	r3, r3, #2
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1ea      	bne.n	80057c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0304 	and.w	r3, r3, #4
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	f000 8097 	beq.w	800592c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057fe:	2300      	movs	r3, #0
 8005800:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005802:	4b81      	ldr	r3, [pc, #516]	@ (8005a08 <HAL_RCC_OscConfig+0x470>)
 8005804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d10f      	bne.n	800582e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800580e:	2300      	movs	r3, #0
 8005810:	60bb      	str	r3, [r7, #8]
 8005812:	4b7d      	ldr	r3, [pc, #500]	@ (8005a08 <HAL_RCC_OscConfig+0x470>)
 8005814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005816:	4a7c      	ldr	r2, [pc, #496]	@ (8005a08 <HAL_RCC_OscConfig+0x470>)
 8005818:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800581c:	6413      	str	r3, [r2, #64]	@ 0x40
 800581e:	4b7a      	ldr	r3, [pc, #488]	@ (8005a08 <HAL_RCC_OscConfig+0x470>)
 8005820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005826:	60bb      	str	r3, [r7, #8]
 8005828:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800582a:	2301      	movs	r3, #1
 800582c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800582e:	4b77      	ldr	r3, [pc, #476]	@ (8005a0c <HAL_RCC_OscConfig+0x474>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005836:	2b00      	cmp	r3, #0
 8005838:	d118      	bne.n	800586c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800583a:	4b74      	ldr	r3, [pc, #464]	@ (8005a0c <HAL_RCC_OscConfig+0x474>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a73      	ldr	r2, [pc, #460]	@ (8005a0c <HAL_RCC_OscConfig+0x474>)
 8005840:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005844:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005846:	f7fd fcbf 	bl	80031c8 <HAL_GetTick>
 800584a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800584c:	e008      	b.n	8005860 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800584e:	f7fd fcbb 	bl	80031c8 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	2b02      	cmp	r3, #2
 800585a:	d901      	bls.n	8005860 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e10c      	b.n	8005a7a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005860:	4b6a      	ldr	r3, [pc, #424]	@ (8005a0c <HAL_RCC_OscConfig+0x474>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005868:	2b00      	cmp	r3, #0
 800586a:	d0f0      	beq.n	800584e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d106      	bne.n	8005882 <HAL_RCC_OscConfig+0x2ea>
 8005874:	4b64      	ldr	r3, [pc, #400]	@ (8005a08 <HAL_RCC_OscConfig+0x470>)
 8005876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005878:	4a63      	ldr	r2, [pc, #396]	@ (8005a08 <HAL_RCC_OscConfig+0x470>)
 800587a:	f043 0301 	orr.w	r3, r3, #1
 800587e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005880:	e01c      	b.n	80058bc <HAL_RCC_OscConfig+0x324>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	2b05      	cmp	r3, #5
 8005888:	d10c      	bne.n	80058a4 <HAL_RCC_OscConfig+0x30c>
 800588a:	4b5f      	ldr	r3, [pc, #380]	@ (8005a08 <HAL_RCC_OscConfig+0x470>)
 800588c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800588e:	4a5e      	ldr	r2, [pc, #376]	@ (8005a08 <HAL_RCC_OscConfig+0x470>)
 8005890:	f043 0304 	orr.w	r3, r3, #4
 8005894:	6713      	str	r3, [r2, #112]	@ 0x70
 8005896:	4b5c      	ldr	r3, [pc, #368]	@ (8005a08 <HAL_RCC_OscConfig+0x470>)
 8005898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800589a:	4a5b      	ldr	r2, [pc, #364]	@ (8005a08 <HAL_RCC_OscConfig+0x470>)
 800589c:	f043 0301 	orr.w	r3, r3, #1
 80058a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80058a2:	e00b      	b.n	80058bc <HAL_RCC_OscConfig+0x324>
 80058a4:	4b58      	ldr	r3, [pc, #352]	@ (8005a08 <HAL_RCC_OscConfig+0x470>)
 80058a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058a8:	4a57      	ldr	r2, [pc, #348]	@ (8005a08 <HAL_RCC_OscConfig+0x470>)
 80058aa:	f023 0301 	bic.w	r3, r3, #1
 80058ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80058b0:	4b55      	ldr	r3, [pc, #340]	@ (8005a08 <HAL_RCC_OscConfig+0x470>)
 80058b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058b4:	4a54      	ldr	r2, [pc, #336]	@ (8005a08 <HAL_RCC_OscConfig+0x470>)
 80058b6:	f023 0304 	bic.w	r3, r3, #4
 80058ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d015      	beq.n	80058f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058c4:	f7fd fc80 	bl	80031c8 <HAL_GetTick>
 80058c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058ca:	e00a      	b.n	80058e2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058cc:	f7fd fc7c 	bl	80031c8 <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058da:	4293      	cmp	r3, r2
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e0cb      	b.n	8005a7a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058e2:	4b49      	ldr	r3, [pc, #292]	@ (8005a08 <HAL_RCC_OscConfig+0x470>)
 80058e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058e6:	f003 0302 	and.w	r3, r3, #2
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d0ee      	beq.n	80058cc <HAL_RCC_OscConfig+0x334>
 80058ee:	e014      	b.n	800591a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058f0:	f7fd fc6a 	bl	80031c8 <HAL_GetTick>
 80058f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058f6:	e00a      	b.n	800590e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058f8:	f7fd fc66 	bl	80031c8 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005906:	4293      	cmp	r3, r2
 8005908:	d901      	bls.n	800590e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e0b5      	b.n	8005a7a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800590e:	4b3e      	ldr	r3, [pc, #248]	@ (8005a08 <HAL_RCC_OscConfig+0x470>)
 8005910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005912:	f003 0302 	and.w	r3, r3, #2
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1ee      	bne.n	80058f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800591a:	7dfb      	ldrb	r3, [r7, #23]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d105      	bne.n	800592c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005920:	4b39      	ldr	r3, [pc, #228]	@ (8005a08 <HAL_RCC_OscConfig+0x470>)
 8005922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005924:	4a38      	ldr	r2, [pc, #224]	@ (8005a08 <HAL_RCC_OscConfig+0x470>)
 8005926:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800592a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	2b00      	cmp	r3, #0
 8005932:	f000 80a1 	beq.w	8005a78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005936:	4b34      	ldr	r3, [pc, #208]	@ (8005a08 <HAL_RCC_OscConfig+0x470>)
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f003 030c 	and.w	r3, r3, #12
 800593e:	2b08      	cmp	r3, #8
 8005940:	d05c      	beq.n	80059fc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	2b02      	cmp	r3, #2
 8005948:	d141      	bne.n	80059ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800594a:	4b31      	ldr	r3, [pc, #196]	@ (8005a10 <HAL_RCC_OscConfig+0x478>)
 800594c:	2200      	movs	r2, #0
 800594e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005950:	f7fd fc3a 	bl	80031c8 <HAL_GetTick>
 8005954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005956:	e008      	b.n	800596a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005958:	f7fd fc36 	bl	80031c8 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	2b02      	cmp	r3, #2
 8005964:	d901      	bls.n	800596a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e087      	b.n	8005a7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800596a:	4b27      	ldr	r3, [pc, #156]	@ (8005a08 <HAL_RCC_OscConfig+0x470>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1f0      	bne.n	8005958 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	69da      	ldr	r2, [r3, #28]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	431a      	orrs	r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005984:	019b      	lsls	r3, r3, #6
 8005986:	431a      	orrs	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800598c:	085b      	lsrs	r3, r3, #1
 800598e:	3b01      	subs	r3, #1
 8005990:	041b      	lsls	r3, r3, #16
 8005992:	431a      	orrs	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005998:	061b      	lsls	r3, r3, #24
 800599a:	491b      	ldr	r1, [pc, #108]	@ (8005a08 <HAL_RCC_OscConfig+0x470>)
 800599c:	4313      	orrs	r3, r2
 800599e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059a0:	4b1b      	ldr	r3, [pc, #108]	@ (8005a10 <HAL_RCC_OscConfig+0x478>)
 80059a2:	2201      	movs	r2, #1
 80059a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059a6:	f7fd fc0f 	bl	80031c8 <HAL_GetTick>
 80059aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059ac:	e008      	b.n	80059c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059ae:	f7fd fc0b 	bl	80031c8 <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d901      	bls.n	80059c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e05c      	b.n	8005a7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059c0:	4b11      	ldr	r3, [pc, #68]	@ (8005a08 <HAL_RCC_OscConfig+0x470>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d0f0      	beq.n	80059ae <HAL_RCC_OscConfig+0x416>
 80059cc:	e054      	b.n	8005a78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ce:	4b10      	ldr	r3, [pc, #64]	@ (8005a10 <HAL_RCC_OscConfig+0x478>)
 80059d0:	2200      	movs	r2, #0
 80059d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059d4:	f7fd fbf8 	bl	80031c8 <HAL_GetTick>
 80059d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059da:	e008      	b.n	80059ee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059dc:	f7fd fbf4 	bl	80031c8 <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d901      	bls.n	80059ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e045      	b.n	8005a7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059ee:	4b06      	ldr	r3, [pc, #24]	@ (8005a08 <HAL_RCC_OscConfig+0x470>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1f0      	bne.n	80059dc <HAL_RCC_OscConfig+0x444>
 80059fa:	e03d      	b.n	8005a78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d107      	bne.n	8005a14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e038      	b.n	8005a7a <HAL_RCC_OscConfig+0x4e2>
 8005a08:	40023800 	.word	0x40023800
 8005a0c:	40007000 	.word	0x40007000
 8005a10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a14:	4b1b      	ldr	r3, [pc, #108]	@ (8005a84 <HAL_RCC_OscConfig+0x4ec>)
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d028      	beq.n	8005a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d121      	bne.n	8005a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d11a      	bne.n	8005a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005a44:	4013      	ands	r3, r2
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005a4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d111      	bne.n	8005a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a5a:	085b      	lsrs	r3, r3, #1
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d107      	bne.n	8005a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d001      	beq.n	8005a78 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e000      	b.n	8005a7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3718      	adds	r7, #24
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	40023800 	.word	0x40023800

08005a88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d101      	bne.n	8005a9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e0cc      	b.n	8005c36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a9c:	4b68      	ldr	r3, [pc, #416]	@ (8005c40 <HAL_RCC_ClockConfig+0x1b8>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0307 	and.w	r3, r3, #7
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d90c      	bls.n	8005ac4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aaa:	4b65      	ldr	r3, [pc, #404]	@ (8005c40 <HAL_RCC_ClockConfig+0x1b8>)
 8005aac:	683a      	ldr	r2, [r7, #0]
 8005aae:	b2d2      	uxtb	r2, r2
 8005ab0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ab2:	4b63      	ldr	r3, [pc, #396]	@ (8005c40 <HAL_RCC_ClockConfig+0x1b8>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0307 	and.w	r3, r3, #7
 8005aba:	683a      	ldr	r2, [r7, #0]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d001      	beq.n	8005ac4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e0b8      	b.n	8005c36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0302 	and.w	r3, r3, #2
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d020      	beq.n	8005b12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0304 	and.w	r3, r3, #4
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d005      	beq.n	8005ae8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005adc:	4b59      	ldr	r3, [pc, #356]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	4a58      	ldr	r2, [pc, #352]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005ae2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005ae6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0308 	and.w	r3, r3, #8
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d005      	beq.n	8005b00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005af4:	4b53      	ldr	r3, [pc, #332]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	4a52      	ldr	r2, [pc, #328]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005afa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005afe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b00:	4b50      	ldr	r3, [pc, #320]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	494d      	ldr	r1, [pc, #308]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d044      	beq.n	8005ba8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d107      	bne.n	8005b36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b26:	4b47      	ldr	r3, [pc, #284]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d119      	bne.n	8005b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e07f      	b.n	8005c36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d003      	beq.n	8005b46 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b42:	2b03      	cmp	r3, #3
 8005b44:	d107      	bne.n	8005b56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b46:	4b3f      	ldr	r3, [pc, #252]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d109      	bne.n	8005b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e06f      	b.n	8005c36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b56:	4b3b      	ldr	r3, [pc, #236]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e067      	b.n	8005c36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b66:	4b37      	ldr	r3, [pc, #220]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f023 0203 	bic.w	r2, r3, #3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	4934      	ldr	r1, [pc, #208]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b78:	f7fd fb26 	bl	80031c8 <HAL_GetTick>
 8005b7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b7e:	e00a      	b.n	8005b96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b80:	f7fd fb22 	bl	80031c8 <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d901      	bls.n	8005b96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e04f      	b.n	8005c36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b96:	4b2b      	ldr	r3, [pc, #172]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f003 020c 	and.w	r2, r3, #12
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d1eb      	bne.n	8005b80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ba8:	4b25      	ldr	r3, [pc, #148]	@ (8005c40 <HAL_RCC_ClockConfig+0x1b8>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0307 	and.w	r3, r3, #7
 8005bb0:	683a      	ldr	r2, [r7, #0]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d20c      	bcs.n	8005bd0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bb6:	4b22      	ldr	r3, [pc, #136]	@ (8005c40 <HAL_RCC_ClockConfig+0x1b8>)
 8005bb8:	683a      	ldr	r2, [r7, #0]
 8005bba:	b2d2      	uxtb	r2, r2
 8005bbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bbe:	4b20      	ldr	r3, [pc, #128]	@ (8005c40 <HAL_RCC_ClockConfig+0x1b8>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0307 	and.w	r3, r3, #7
 8005bc6:	683a      	ldr	r2, [r7, #0]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d001      	beq.n	8005bd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e032      	b.n	8005c36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0304 	and.w	r3, r3, #4
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d008      	beq.n	8005bee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bdc:	4b19      	ldr	r3, [pc, #100]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	4916      	ldr	r1, [pc, #88]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0308 	and.w	r3, r3, #8
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d009      	beq.n	8005c0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005bfa:	4b12      	ldr	r3, [pc, #72]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	00db      	lsls	r3, r3, #3
 8005c08:	490e      	ldr	r1, [pc, #56]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005c0e:	f000 f821 	bl	8005c54 <HAL_RCC_GetSysClockFreq>
 8005c12:	4602      	mov	r2, r0
 8005c14:	4b0b      	ldr	r3, [pc, #44]	@ (8005c44 <HAL_RCC_ClockConfig+0x1bc>)
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	091b      	lsrs	r3, r3, #4
 8005c1a:	f003 030f 	and.w	r3, r3, #15
 8005c1e:	490a      	ldr	r1, [pc, #40]	@ (8005c48 <HAL_RCC_ClockConfig+0x1c0>)
 8005c20:	5ccb      	ldrb	r3, [r1, r3]
 8005c22:	fa22 f303 	lsr.w	r3, r2, r3
 8005c26:	4a09      	ldr	r2, [pc, #36]	@ (8005c4c <HAL_RCC_ClockConfig+0x1c4>)
 8005c28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005c2a:	4b09      	ldr	r3, [pc, #36]	@ (8005c50 <HAL_RCC_ClockConfig+0x1c8>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7fc fda6 	bl	8002780 <HAL_InitTick>

  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	40023c00 	.word	0x40023c00
 8005c44:	40023800 	.word	0x40023800
 8005c48:	0800e2ec 	.word	0x0800e2ec
 8005c4c:	2000001c 	.word	0x2000001c
 8005c50:	20000020 	.word	0x20000020

08005c54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c58:	b090      	sub	sp, #64	@ 0x40
 8005c5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005c60:	2300      	movs	r3, #0
 8005c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005c64:	2300      	movs	r3, #0
 8005c66:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c6c:	4b59      	ldr	r3, [pc, #356]	@ (8005dd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f003 030c 	and.w	r3, r3, #12
 8005c74:	2b08      	cmp	r3, #8
 8005c76:	d00d      	beq.n	8005c94 <HAL_RCC_GetSysClockFreq+0x40>
 8005c78:	2b08      	cmp	r3, #8
 8005c7a:	f200 80a1 	bhi.w	8005dc0 <HAL_RCC_GetSysClockFreq+0x16c>
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d002      	beq.n	8005c88 <HAL_RCC_GetSysClockFreq+0x34>
 8005c82:	2b04      	cmp	r3, #4
 8005c84:	d003      	beq.n	8005c8e <HAL_RCC_GetSysClockFreq+0x3a>
 8005c86:	e09b      	b.n	8005dc0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c88:	4b53      	ldr	r3, [pc, #332]	@ (8005dd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8005c8a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005c8c:	e09b      	b.n	8005dc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c8e:	4b53      	ldr	r3, [pc, #332]	@ (8005ddc <HAL_RCC_GetSysClockFreq+0x188>)
 8005c90:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005c92:	e098      	b.n	8005dc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c94:	4b4f      	ldr	r3, [pc, #316]	@ (8005dd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c9c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c9e:	4b4d      	ldr	r3, [pc, #308]	@ (8005dd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d028      	beq.n	8005cfc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005caa:	4b4a      	ldr	r3, [pc, #296]	@ (8005dd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	099b      	lsrs	r3, r3, #6
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	623b      	str	r3, [r7, #32]
 8005cb4:	627a      	str	r2, [r7, #36]	@ 0x24
 8005cb6:	6a3b      	ldr	r3, [r7, #32]
 8005cb8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	4b47      	ldr	r3, [pc, #284]	@ (8005ddc <HAL_RCC_GetSysClockFreq+0x188>)
 8005cc0:	fb03 f201 	mul.w	r2, r3, r1
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	fb00 f303 	mul.w	r3, r0, r3
 8005cca:	4413      	add	r3, r2
 8005ccc:	4a43      	ldr	r2, [pc, #268]	@ (8005ddc <HAL_RCC_GetSysClockFreq+0x188>)
 8005cce:	fba0 1202 	umull	r1, r2, r0, r2
 8005cd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005cd4:	460a      	mov	r2, r1
 8005cd6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005cd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cda:	4413      	add	r3, r2
 8005cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	61bb      	str	r3, [r7, #24]
 8005ce4:	61fa      	str	r2, [r7, #28]
 8005ce6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005cea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005cee:	f7fa ffb3 	bl	8000c58 <__aeabi_uldivmod>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cfa:	e053      	b.n	8005da4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cfc:	4b35      	ldr	r3, [pc, #212]	@ (8005dd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	099b      	lsrs	r3, r3, #6
 8005d02:	2200      	movs	r2, #0
 8005d04:	613b      	str	r3, [r7, #16]
 8005d06:	617a      	str	r2, [r7, #20]
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005d0e:	f04f 0b00 	mov.w	fp, #0
 8005d12:	4652      	mov	r2, sl
 8005d14:	465b      	mov	r3, fp
 8005d16:	f04f 0000 	mov.w	r0, #0
 8005d1a:	f04f 0100 	mov.w	r1, #0
 8005d1e:	0159      	lsls	r1, r3, #5
 8005d20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d24:	0150      	lsls	r0, r2, #5
 8005d26:	4602      	mov	r2, r0
 8005d28:	460b      	mov	r3, r1
 8005d2a:	ebb2 080a 	subs.w	r8, r2, sl
 8005d2e:	eb63 090b 	sbc.w	r9, r3, fp
 8005d32:	f04f 0200 	mov.w	r2, #0
 8005d36:	f04f 0300 	mov.w	r3, #0
 8005d3a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005d3e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005d42:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005d46:	ebb2 0408 	subs.w	r4, r2, r8
 8005d4a:	eb63 0509 	sbc.w	r5, r3, r9
 8005d4e:	f04f 0200 	mov.w	r2, #0
 8005d52:	f04f 0300 	mov.w	r3, #0
 8005d56:	00eb      	lsls	r3, r5, #3
 8005d58:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d5c:	00e2      	lsls	r2, r4, #3
 8005d5e:	4614      	mov	r4, r2
 8005d60:	461d      	mov	r5, r3
 8005d62:	eb14 030a 	adds.w	r3, r4, sl
 8005d66:	603b      	str	r3, [r7, #0]
 8005d68:	eb45 030b 	adc.w	r3, r5, fp
 8005d6c:	607b      	str	r3, [r7, #4]
 8005d6e:	f04f 0200 	mov.w	r2, #0
 8005d72:	f04f 0300 	mov.w	r3, #0
 8005d76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d7a:	4629      	mov	r1, r5
 8005d7c:	028b      	lsls	r3, r1, #10
 8005d7e:	4621      	mov	r1, r4
 8005d80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d84:	4621      	mov	r1, r4
 8005d86:	028a      	lsls	r2, r1, #10
 8005d88:	4610      	mov	r0, r2
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d8e:	2200      	movs	r2, #0
 8005d90:	60bb      	str	r3, [r7, #8]
 8005d92:	60fa      	str	r2, [r7, #12]
 8005d94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d98:	f7fa ff5e 	bl	8000c58 <__aeabi_uldivmod>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	460b      	mov	r3, r1
 8005da0:	4613      	mov	r3, r2
 8005da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005da4:	4b0b      	ldr	r3, [pc, #44]	@ (8005dd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	0c1b      	lsrs	r3, r3, #16
 8005daa:	f003 0303 	and.w	r3, r3, #3
 8005dae:	3301      	adds	r3, #1
 8005db0:	005b      	lsls	r3, r3, #1
 8005db2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005db4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dbc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005dbe:	e002      	b.n	8005dc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005dc0:	4b05      	ldr	r3, [pc, #20]	@ (8005dd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8005dc2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005dc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3740      	adds	r7, #64	@ 0x40
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005dd2:	bf00      	nop
 8005dd4:	40023800 	.word	0x40023800
 8005dd8:	00f42400 	.word	0x00f42400
 8005ddc:	017d7840 	.word	0x017d7840

08005de0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005de0:	b480      	push	{r7}
 8005de2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005de4:	4b03      	ldr	r3, [pc, #12]	@ (8005df4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005de6:	681b      	ldr	r3, [r3, #0]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	2000001c 	.word	0x2000001c

08005df8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005dfc:	f7ff fff0 	bl	8005de0 <HAL_RCC_GetHCLKFreq>
 8005e00:	4602      	mov	r2, r0
 8005e02:	4b05      	ldr	r3, [pc, #20]	@ (8005e18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	0a9b      	lsrs	r3, r3, #10
 8005e08:	f003 0307 	and.w	r3, r3, #7
 8005e0c:	4903      	ldr	r1, [pc, #12]	@ (8005e1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e0e:	5ccb      	ldrb	r3, [r1, r3]
 8005e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	40023800 	.word	0x40023800
 8005e1c:	0800e2fc 	.word	0x0800e2fc

08005e20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005e24:	f7ff ffdc 	bl	8005de0 <HAL_RCC_GetHCLKFreq>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	4b05      	ldr	r3, [pc, #20]	@ (8005e40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	0b5b      	lsrs	r3, r3, #13
 8005e30:	f003 0307 	and.w	r3, r3, #7
 8005e34:	4903      	ldr	r1, [pc, #12]	@ (8005e44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e36:	5ccb      	ldrb	r3, [r1, r3]
 8005e38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	40023800 	.word	0x40023800
 8005e44:	0800e2fc 	.word	0x0800e2fc

08005e48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	220f      	movs	r2, #15
 8005e56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005e58:	4b12      	ldr	r3, [pc, #72]	@ (8005ea4 <HAL_RCC_GetClockConfig+0x5c>)
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	f003 0203 	and.w	r2, r3, #3
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005e64:	4b0f      	ldr	r3, [pc, #60]	@ (8005ea4 <HAL_RCC_GetClockConfig+0x5c>)
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005e70:	4b0c      	ldr	r3, [pc, #48]	@ (8005ea4 <HAL_RCC_GetClockConfig+0x5c>)
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005e7c:	4b09      	ldr	r3, [pc, #36]	@ (8005ea4 <HAL_RCC_GetClockConfig+0x5c>)
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	08db      	lsrs	r3, r3, #3
 8005e82:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005e8a:	4b07      	ldr	r3, [pc, #28]	@ (8005ea8 <HAL_RCC_GetClockConfig+0x60>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0207 	and.w	r2, r3, #7
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	601a      	str	r2, [r3, #0]
}
 8005e96:	bf00      	nop
 8005e98:	370c      	adds	r7, #12
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	40023800 	.word	0x40023800
 8005ea8:	40023c00 	.word	0x40023c00

08005eac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d101      	bne.n	8005ebe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e041      	b.n	8005f42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d106      	bne.n	8005ed8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f7fc ffbc 	bl	8002e50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2202      	movs	r2, #2
 8005edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	3304      	adds	r3, #4
 8005ee8:	4619      	mov	r1, r3
 8005eea:	4610      	mov	r0, r2
 8005eec:	f000 fdca 	bl	8006a84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3708      	adds	r7, #8
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
	...

08005f4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d001      	beq.n	8005f64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	e044      	b.n	8005fee <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2202      	movs	r2, #2
 8005f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68da      	ldr	r2, [r3, #12]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f042 0201 	orr.w	r2, r2, #1
 8005f7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a1e      	ldr	r2, [pc, #120]	@ (8005ffc <HAL_TIM_Base_Start_IT+0xb0>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d018      	beq.n	8005fb8 <HAL_TIM_Base_Start_IT+0x6c>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f8e:	d013      	beq.n	8005fb8 <HAL_TIM_Base_Start_IT+0x6c>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a1a      	ldr	r2, [pc, #104]	@ (8006000 <HAL_TIM_Base_Start_IT+0xb4>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d00e      	beq.n	8005fb8 <HAL_TIM_Base_Start_IT+0x6c>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a19      	ldr	r2, [pc, #100]	@ (8006004 <HAL_TIM_Base_Start_IT+0xb8>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d009      	beq.n	8005fb8 <HAL_TIM_Base_Start_IT+0x6c>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a17      	ldr	r2, [pc, #92]	@ (8006008 <HAL_TIM_Base_Start_IT+0xbc>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d004      	beq.n	8005fb8 <HAL_TIM_Base_Start_IT+0x6c>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a16      	ldr	r2, [pc, #88]	@ (800600c <HAL_TIM_Base_Start_IT+0xc0>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d111      	bne.n	8005fdc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f003 0307 	and.w	r3, r3, #7
 8005fc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2b06      	cmp	r3, #6
 8005fc8:	d010      	beq.n	8005fec <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f042 0201 	orr.w	r2, r2, #1
 8005fd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fda:	e007      	b.n	8005fec <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f042 0201 	orr.w	r2, r2, #1
 8005fea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3714      	adds	r7, #20
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	40010000 	.word	0x40010000
 8006000:	40000400 	.word	0x40000400
 8006004:	40000800 	.word	0x40000800
 8006008:	40000c00 	.word	0x40000c00
 800600c:	40014000 	.word	0x40014000

08006010 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e041      	b.n	80060a6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b00      	cmp	r3, #0
 800602c:	d106      	bne.n	800603c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f7fc ff98 	bl	8002f6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2202      	movs	r2, #2
 8006040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	3304      	adds	r3, #4
 800604c:	4619      	mov	r1, r3
 800604e:	4610      	mov	r0, r2
 8006050:	f000 fd18 	bl	8006a84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b082      	sub	sp, #8
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d101      	bne.n	80060c0 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e041      	b.n	8006144 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d106      	bne.n	80060da <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 f839 	bl	800614c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2202      	movs	r2, #2
 80060de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	3304      	adds	r3, #4
 80060ea:	4619      	mov	r1, r3
 80060ec:	4610      	mov	r0, r2
 80060ee:	f000 fcc9 	bl	8006a84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2201      	movs	r2, #1
 80060f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2201      	movs	r2, #1
 8006106:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2201      	movs	r2, #1
 8006116:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2201      	movs	r2, #1
 8006126:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2201      	movs	r2, #1
 8006136:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2201      	movs	r2, #1
 800613e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3708      	adds	r7, #8
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800616a:	2300      	movs	r3, #0
 800616c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d104      	bne.n	800617e <HAL_TIM_IC_Start_IT+0x1e>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800617a:	b2db      	uxtb	r3, r3
 800617c:	e013      	b.n	80061a6 <HAL_TIM_IC_Start_IT+0x46>
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	2b04      	cmp	r3, #4
 8006182:	d104      	bne.n	800618e <HAL_TIM_IC_Start_IT+0x2e>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800618a:	b2db      	uxtb	r3, r3
 800618c:	e00b      	b.n	80061a6 <HAL_TIM_IC_Start_IT+0x46>
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	2b08      	cmp	r3, #8
 8006192:	d104      	bne.n	800619e <HAL_TIM_IC_Start_IT+0x3e>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800619a:	b2db      	uxtb	r3, r3
 800619c:	e003      	b.n	80061a6 <HAL_TIM_IC_Start_IT+0x46>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d104      	bne.n	80061b8 <HAL_TIM_IC_Start_IT+0x58>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	e013      	b.n	80061e0 <HAL_TIM_IC_Start_IT+0x80>
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	2b04      	cmp	r3, #4
 80061bc:	d104      	bne.n	80061c8 <HAL_TIM_IC_Start_IT+0x68>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	e00b      	b.n	80061e0 <HAL_TIM_IC_Start_IT+0x80>
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	2b08      	cmp	r3, #8
 80061cc:	d104      	bne.n	80061d8 <HAL_TIM_IC_Start_IT+0x78>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	e003      	b.n	80061e0 <HAL_TIM_IC_Start_IT+0x80>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80061e2:	7bbb      	ldrb	r3, [r7, #14]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d102      	bne.n	80061ee <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80061e8:	7b7b      	ldrb	r3, [r7, #13]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d001      	beq.n	80061f2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e0c2      	b.n	8006378 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d104      	bne.n	8006202 <HAL_TIM_IC_Start_IT+0xa2>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2202      	movs	r2, #2
 80061fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006200:	e013      	b.n	800622a <HAL_TIM_IC_Start_IT+0xca>
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	2b04      	cmp	r3, #4
 8006206:	d104      	bne.n	8006212 <HAL_TIM_IC_Start_IT+0xb2>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2202      	movs	r2, #2
 800620c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006210:	e00b      	b.n	800622a <HAL_TIM_IC_Start_IT+0xca>
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	2b08      	cmp	r3, #8
 8006216:	d104      	bne.n	8006222 <HAL_TIM_IC_Start_IT+0xc2>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2202      	movs	r2, #2
 800621c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006220:	e003      	b.n	800622a <HAL_TIM_IC_Start_IT+0xca>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2202      	movs	r2, #2
 8006226:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d104      	bne.n	800623a <HAL_TIM_IC_Start_IT+0xda>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2202      	movs	r2, #2
 8006234:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006238:	e013      	b.n	8006262 <HAL_TIM_IC_Start_IT+0x102>
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	2b04      	cmp	r3, #4
 800623e:	d104      	bne.n	800624a <HAL_TIM_IC_Start_IT+0xea>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2202      	movs	r2, #2
 8006244:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006248:	e00b      	b.n	8006262 <HAL_TIM_IC_Start_IT+0x102>
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	2b08      	cmp	r3, #8
 800624e:	d104      	bne.n	800625a <HAL_TIM_IC_Start_IT+0xfa>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2202      	movs	r2, #2
 8006254:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006258:	e003      	b.n	8006262 <HAL_TIM_IC_Start_IT+0x102>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2202      	movs	r2, #2
 800625e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2b0c      	cmp	r3, #12
 8006266:	d841      	bhi.n	80062ec <HAL_TIM_IC_Start_IT+0x18c>
 8006268:	a201      	add	r2, pc, #4	@ (adr r2, 8006270 <HAL_TIM_IC_Start_IT+0x110>)
 800626a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800626e:	bf00      	nop
 8006270:	080062a5 	.word	0x080062a5
 8006274:	080062ed 	.word	0x080062ed
 8006278:	080062ed 	.word	0x080062ed
 800627c:	080062ed 	.word	0x080062ed
 8006280:	080062b7 	.word	0x080062b7
 8006284:	080062ed 	.word	0x080062ed
 8006288:	080062ed 	.word	0x080062ed
 800628c:	080062ed 	.word	0x080062ed
 8006290:	080062c9 	.word	0x080062c9
 8006294:	080062ed 	.word	0x080062ed
 8006298:	080062ed 	.word	0x080062ed
 800629c:	080062ed 	.word	0x080062ed
 80062a0:	080062db 	.word	0x080062db
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68da      	ldr	r2, [r3, #12]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f042 0202 	orr.w	r2, r2, #2
 80062b2:	60da      	str	r2, [r3, #12]
      break;
 80062b4:	e01d      	b.n	80062f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68da      	ldr	r2, [r3, #12]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f042 0204 	orr.w	r2, r2, #4
 80062c4:	60da      	str	r2, [r3, #12]
      break;
 80062c6:	e014      	b.n	80062f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68da      	ldr	r2, [r3, #12]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f042 0208 	orr.w	r2, r2, #8
 80062d6:	60da      	str	r2, [r3, #12]
      break;
 80062d8:	e00b      	b.n	80062f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68da      	ldr	r2, [r3, #12]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f042 0210 	orr.w	r2, r2, #16
 80062e8:	60da      	str	r2, [r3, #12]
      break;
 80062ea:	e002      	b.n	80062f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	73fb      	strb	r3, [r7, #15]
      break;
 80062f0:	bf00      	nop
  }

  if (status == HAL_OK)
 80062f2:	7bfb      	ldrb	r3, [r7, #15]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d13e      	bne.n	8006376 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2201      	movs	r2, #1
 80062fe:	6839      	ldr	r1, [r7, #0]
 8006300:	4618      	mov	r0, r3
 8006302:	f000 ff8f 	bl	8007224 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a1d      	ldr	r2, [pc, #116]	@ (8006380 <HAL_TIM_IC_Start_IT+0x220>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d018      	beq.n	8006342 <HAL_TIM_IC_Start_IT+0x1e2>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006318:	d013      	beq.n	8006342 <HAL_TIM_IC_Start_IT+0x1e2>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a19      	ldr	r2, [pc, #100]	@ (8006384 <HAL_TIM_IC_Start_IT+0x224>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d00e      	beq.n	8006342 <HAL_TIM_IC_Start_IT+0x1e2>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a17      	ldr	r2, [pc, #92]	@ (8006388 <HAL_TIM_IC_Start_IT+0x228>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d009      	beq.n	8006342 <HAL_TIM_IC_Start_IT+0x1e2>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a16      	ldr	r2, [pc, #88]	@ (800638c <HAL_TIM_IC_Start_IT+0x22c>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d004      	beq.n	8006342 <HAL_TIM_IC_Start_IT+0x1e2>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a14      	ldr	r2, [pc, #80]	@ (8006390 <HAL_TIM_IC_Start_IT+0x230>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d111      	bne.n	8006366 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f003 0307 	and.w	r3, r3, #7
 800634c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	2b06      	cmp	r3, #6
 8006352:	d010      	beq.n	8006376 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f042 0201 	orr.w	r2, r2, #1
 8006362:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006364:	e007      	b.n	8006376 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f042 0201 	orr.w	r2, r2, #1
 8006374:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006376:	7bfb      	ldrb	r3, [r7, #15]
}
 8006378:	4618      	mov	r0, r3
 800637a:	3710      	adds	r7, #16
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	40010000 	.word	0x40010000
 8006384:	40000400 	.word	0x40000400
 8006388:	40000800 	.word	0x40000800
 800638c:	40000c00 	.word	0x40000c00
 8006390:	40014000 	.word	0x40014000

08006394 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	f003 0302 	and.w	r3, r3, #2
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d020      	beq.n	80063f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f003 0302 	and.w	r3, r3, #2
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d01b      	beq.n	80063f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f06f 0202 	mvn.w	r2, #2
 80063c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	699b      	ldr	r3, [r3, #24]
 80063d6:	f003 0303 	and.w	r3, r3, #3
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d003      	beq.n	80063e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f7fc fa8a 	bl	80028f8 <HAL_TIM_IC_CaptureCallback>
 80063e4:	e005      	b.n	80063f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 fb2e 	bl	8006a48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 fb35 	bl	8006a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	f003 0304 	and.w	r3, r3, #4
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d020      	beq.n	8006444 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f003 0304 	and.w	r3, r3, #4
 8006408:	2b00      	cmp	r3, #0
 800640a:	d01b      	beq.n	8006444 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f06f 0204 	mvn.w	r2, #4
 8006414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2202      	movs	r2, #2
 800641a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006426:	2b00      	cmp	r3, #0
 8006428:	d003      	beq.n	8006432 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f7fc fa64 	bl	80028f8 <HAL_TIM_IC_CaptureCallback>
 8006430:	e005      	b.n	800643e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 fb08 	bl	8006a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 fb0f 	bl	8006a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	f003 0308 	and.w	r3, r3, #8
 800644a:	2b00      	cmp	r3, #0
 800644c:	d020      	beq.n	8006490 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f003 0308 	and.w	r3, r3, #8
 8006454:	2b00      	cmp	r3, #0
 8006456:	d01b      	beq.n	8006490 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f06f 0208 	mvn.w	r2, #8
 8006460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2204      	movs	r2, #4
 8006466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	69db      	ldr	r3, [r3, #28]
 800646e:	f003 0303 	and.w	r3, r3, #3
 8006472:	2b00      	cmp	r3, #0
 8006474:	d003      	beq.n	800647e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f7fc fa3e 	bl	80028f8 <HAL_TIM_IC_CaptureCallback>
 800647c:	e005      	b.n	800648a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 fae2 	bl	8006a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 fae9 	bl	8006a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	f003 0310 	and.w	r3, r3, #16
 8006496:	2b00      	cmp	r3, #0
 8006498:	d020      	beq.n	80064dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f003 0310 	and.w	r3, r3, #16
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d01b      	beq.n	80064dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f06f 0210 	mvn.w	r2, #16
 80064ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2208      	movs	r2, #8
 80064b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	69db      	ldr	r3, [r3, #28]
 80064ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d003      	beq.n	80064ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7fc fa18 	bl	80028f8 <HAL_TIM_IC_CaptureCallback>
 80064c8:	e005      	b.n	80064d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 fabc 	bl	8006a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 fac3 	bl	8006a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00c      	beq.n	8006500 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f003 0301 	and.w	r3, r3, #1
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d007      	beq.n	8006500 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f06f 0201 	mvn.w	r2, #1
 80064f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f7fc f8fc 	bl	80026f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00c      	beq.n	8006524 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006510:	2b00      	cmp	r3, #0
 8006512:	d007      	beq.n	8006524 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800651c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 ff1e 	bl	8007360 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00c      	beq.n	8006548 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006534:	2b00      	cmp	r3, #0
 8006536:	d007      	beq.n	8006548 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 fa94 	bl	8006a70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	f003 0320 	and.w	r3, r3, #32
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00c      	beq.n	800656c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f003 0320 	and.w	r3, r3, #32
 8006558:	2b00      	cmp	r3, #0
 800655a:	d007      	beq.n	800656c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f06f 0220 	mvn.w	r2, #32
 8006564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 fef0 	bl	800734c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800656c:	bf00      	nop
 800656e:	3710      	adds	r7, #16
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b086      	sub	sp, #24
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006580:	2300      	movs	r3, #0
 8006582:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800658a:	2b01      	cmp	r3, #1
 800658c:	d101      	bne.n	8006592 <HAL_TIM_IC_ConfigChannel+0x1e>
 800658e:	2302      	movs	r3, #2
 8006590:	e088      	b.n	80066a4 <HAL_TIM_IC_ConfigChannel+0x130>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2201      	movs	r2, #1
 8006596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d11b      	bne.n	80065d8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80065b0:	f000 fc80 	bl	8006eb4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	699a      	ldr	r2, [r3, #24]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f022 020c 	bic.w	r2, r2, #12
 80065c2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	6999      	ldr	r1, [r3, #24]
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	689a      	ldr	r2, [r3, #8]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	430a      	orrs	r2, r1
 80065d4:	619a      	str	r2, [r3, #24]
 80065d6:	e060      	b.n	800669a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2b04      	cmp	r3, #4
 80065dc:	d11c      	bne.n	8006618 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80065ee:	f000 fcf8 	bl	8006fe2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	699a      	ldr	r2, [r3, #24]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006600:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	6999      	ldr	r1, [r3, #24]
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	021a      	lsls	r2, r3, #8
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	430a      	orrs	r2, r1
 8006614:	619a      	str	r2, [r3, #24]
 8006616:	e040      	b.n	800669a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2b08      	cmp	r3, #8
 800661c:	d11b      	bne.n	8006656 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800662e:	f000 fd45 	bl	80070bc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	69da      	ldr	r2, [r3, #28]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f022 020c 	bic.w	r2, r2, #12
 8006640:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	69d9      	ldr	r1, [r3, #28]
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	689a      	ldr	r2, [r3, #8]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	430a      	orrs	r2, r1
 8006652:	61da      	str	r2, [r3, #28]
 8006654:	e021      	b.n	800669a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2b0c      	cmp	r3, #12
 800665a:	d11c      	bne.n	8006696 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800666c:	f000 fd62 	bl	8007134 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	69da      	ldr	r2, [r3, #28]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800667e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	69d9      	ldr	r1, [r3, #28]
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	021a      	lsls	r2, r3, #8
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	430a      	orrs	r2, r1
 8006692:	61da      	str	r2, [r3, #28]
 8006694:	e001      	b.n	800669a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80066a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3718      	adds	r7, #24
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b086      	sub	sp, #24
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066b8:	2300      	movs	r3, #0
 80066ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d101      	bne.n	80066ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80066c6:	2302      	movs	r3, #2
 80066c8:	e0ae      	b.n	8006828 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2201      	movs	r2, #1
 80066ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2b0c      	cmp	r3, #12
 80066d6:	f200 809f 	bhi.w	8006818 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80066da:	a201      	add	r2, pc, #4	@ (adr r2, 80066e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80066dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e0:	08006715 	.word	0x08006715
 80066e4:	08006819 	.word	0x08006819
 80066e8:	08006819 	.word	0x08006819
 80066ec:	08006819 	.word	0x08006819
 80066f0:	08006755 	.word	0x08006755
 80066f4:	08006819 	.word	0x08006819
 80066f8:	08006819 	.word	0x08006819
 80066fc:	08006819 	.word	0x08006819
 8006700:	08006797 	.word	0x08006797
 8006704:	08006819 	.word	0x08006819
 8006708:	08006819 	.word	0x08006819
 800670c:	08006819 	.word	0x08006819
 8006710:	080067d7 	.word	0x080067d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68b9      	ldr	r1, [r7, #8]
 800671a:	4618      	mov	r0, r3
 800671c:	f000 fa3e 	bl	8006b9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	699a      	ldr	r2, [r3, #24]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f042 0208 	orr.w	r2, r2, #8
 800672e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	699a      	ldr	r2, [r3, #24]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f022 0204 	bic.w	r2, r2, #4
 800673e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	6999      	ldr	r1, [r3, #24]
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	691a      	ldr	r2, [r3, #16]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	430a      	orrs	r2, r1
 8006750:	619a      	str	r2, [r3, #24]
      break;
 8006752:	e064      	b.n	800681e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68b9      	ldr	r1, [r7, #8]
 800675a:	4618      	mov	r0, r3
 800675c:	f000 fa84 	bl	8006c68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	699a      	ldr	r2, [r3, #24]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800676e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	699a      	ldr	r2, [r3, #24]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800677e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	6999      	ldr	r1, [r3, #24]
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	021a      	lsls	r2, r3, #8
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	430a      	orrs	r2, r1
 8006792:	619a      	str	r2, [r3, #24]
      break;
 8006794:	e043      	b.n	800681e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68b9      	ldr	r1, [r7, #8]
 800679c:	4618      	mov	r0, r3
 800679e:	f000 facf 	bl	8006d40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	69da      	ldr	r2, [r3, #28]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f042 0208 	orr.w	r2, r2, #8
 80067b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	69da      	ldr	r2, [r3, #28]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f022 0204 	bic.w	r2, r2, #4
 80067c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	69d9      	ldr	r1, [r3, #28]
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	691a      	ldr	r2, [r3, #16]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	430a      	orrs	r2, r1
 80067d2:	61da      	str	r2, [r3, #28]
      break;
 80067d4:	e023      	b.n	800681e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	68b9      	ldr	r1, [r7, #8]
 80067dc:	4618      	mov	r0, r3
 80067de:	f000 fb19 	bl	8006e14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	69da      	ldr	r2, [r3, #28]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80067f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	69da      	ldr	r2, [r3, #28]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006800:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	69d9      	ldr	r1, [r3, #28]
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	021a      	lsls	r2, r3, #8
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	430a      	orrs	r2, r1
 8006814:	61da      	str	r2, [r3, #28]
      break;
 8006816:	e002      	b.n	800681e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	75fb      	strb	r3, [r7, #23]
      break;
 800681c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006826:	7dfb      	ldrb	r3, [r7, #23]
}
 8006828:	4618      	mov	r0, r3
 800682a:	3718      	adds	r7, #24
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800683a:	2300      	movs	r3, #0
 800683c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006844:	2b01      	cmp	r3, #1
 8006846:	d101      	bne.n	800684c <HAL_TIM_ConfigClockSource+0x1c>
 8006848:	2302      	movs	r3, #2
 800684a:	e0b4      	b.n	80069b6 <HAL_TIM_ConfigClockSource+0x186>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2202      	movs	r2, #2
 8006858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800686a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006872:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68ba      	ldr	r2, [r7, #8]
 800687a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006884:	d03e      	beq.n	8006904 <HAL_TIM_ConfigClockSource+0xd4>
 8006886:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800688a:	f200 8087 	bhi.w	800699c <HAL_TIM_ConfigClockSource+0x16c>
 800688e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006892:	f000 8086 	beq.w	80069a2 <HAL_TIM_ConfigClockSource+0x172>
 8006896:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800689a:	d87f      	bhi.n	800699c <HAL_TIM_ConfigClockSource+0x16c>
 800689c:	2b70      	cmp	r3, #112	@ 0x70
 800689e:	d01a      	beq.n	80068d6 <HAL_TIM_ConfigClockSource+0xa6>
 80068a0:	2b70      	cmp	r3, #112	@ 0x70
 80068a2:	d87b      	bhi.n	800699c <HAL_TIM_ConfigClockSource+0x16c>
 80068a4:	2b60      	cmp	r3, #96	@ 0x60
 80068a6:	d050      	beq.n	800694a <HAL_TIM_ConfigClockSource+0x11a>
 80068a8:	2b60      	cmp	r3, #96	@ 0x60
 80068aa:	d877      	bhi.n	800699c <HAL_TIM_ConfigClockSource+0x16c>
 80068ac:	2b50      	cmp	r3, #80	@ 0x50
 80068ae:	d03c      	beq.n	800692a <HAL_TIM_ConfigClockSource+0xfa>
 80068b0:	2b50      	cmp	r3, #80	@ 0x50
 80068b2:	d873      	bhi.n	800699c <HAL_TIM_ConfigClockSource+0x16c>
 80068b4:	2b40      	cmp	r3, #64	@ 0x40
 80068b6:	d058      	beq.n	800696a <HAL_TIM_ConfigClockSource+0x13a>
 80068b8:	2b40      	cmp	r3, #64	@ 0x40
 80068ba:	d86f      	bhi.n	800699c <HAL_TIM_ConfigClockSource+0x16c>
 80068bc:	2b30      	cmp	r3, #48	@ 0x30
 80068be:	d064      	beq.n	800698a <HAL_TIM_ConfigClockSource+0x15a>
 80068c0:	2b30      	cmp	r3, #48	@ 0x30
 80068c2:	d86b      	bhi.n	800699c <HAL_TIM_ConfigClockSource+0x16c>
 80068c4:	2b20      	cmp	r3, #32
 80068c6:	d060      	beq.n	800698a <HAL_TIM_ConfigClockSource+0x15a>
 80068c8:	2b20      	cmp	r3, #32
 80068ca:	d867      	bhi.n	800699c <HAL_TIM_ConfigClockSource+0x16c>
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d05c      	beq.n	800698a <HAL_TIM_ConfigClockSource+0x15a>
 80068d0:	2b10      	cmp	r3, #16
 80068d2:	d05a      	beq.n	800698a <HAL_TIM_ConfigClockSource+0x15a>
 80068d4:	e062      	b.n	800699c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80068e6:	f000 fc7d 	bl	80071e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80068f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68ba      	ldr	r2, [r7, #8]
 8006900:	609a      	str	r2, [r3, #8]
      break;
 8006902:	e04f      	b.n	80069a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006914:	f000 fc66 	bl	80071e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	689a      	ldr	r2, [r3, #8]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006926:	609a      	str	r2, [r3, #8]
      break;
 8006928:	e03c      	b.n	80069a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006936:	461a      	mov	r2, r3
 8006938:	f000 fb24 	bl	8006f84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2150      	movs	r1, #80	@ 0x50
 8006942:	4618      	mov	r0, r3
 8006944:	f000 fc33 	bl	80071ae <TIM_ITRx_SetConfig>
      break;
 8006948:	e02c      	b.n	80069a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006956:	461a      	mov	r2, r3
 8006958:	f000 fb80 	bl	800705c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2160      	movs	r1, #96	@ 0x60
 8006962:	4618      	mov	r0, r3
 8006964:	f000 fc23 	bl	80071ae <TIM_ITRx_SetConfig>
      break;
 8006968:	e01c      	b.n	80069a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006976:	461a      	mov	r2, r3
 8006978:	f000 fb04 	bl	8006f84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2140      	movs	r1, #64	@ 0x40
 8006982:	4618      	mov	r0, r3
 8006984:	f000 fc13 	bl	80071ae <TIM_ITRx_SetConfig>
      break;
 8006988:	e00c      	b.n	80069a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4619      	mov	r1, r3
 8006994:	4610      	mov	r0, r2
 8006996:	f000 fc0a 	bl	80071ae <TIM_ITRx_SetConfig>
      break;
 800699a:	e003      	b.n	80069a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	73fb      	strb	r3, [r7, #15]
      break;
 80069a0:	e000      	b.n	80069a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80069a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80069b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3710      	adds	r7, #16
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
	...

080069c0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b085      	sub	sp, #20
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80069ca:	2300      	movs	r3, #0
 80069cc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	2b0c      	cmp	r3, #12
 80069d2:	d831      	bhi.n	8006a38 <HAL_TIM_ReadCapturedValue+0x78>
 80069d4:	a201      	add	r2, pc, #4	@ (adr r2, 80069dc <HAL_TIM_ReadCapturedValue+0x1c>)
 80069d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069da:	bf00      	nop
 80069dc:	08006a11 	.word	0x08006a11
 80069e0:	08006a39 	.word	0x08006a39
 80069e4:	08006a39 	.word	0x08006a39
 80069e8:	08006a39 	.word	0x08006a39
 80069ec:	08006a1b 	.word	0x08006a1b
 80069f0:	08006a39 	.word	0x08006a39
 80069f4:	08006a39 	.word	0x08006a39
 80069f8:	08006a39 	.word	0x08006a39
 80069fc:	08006a25 	.word	0x08006a25
 8006a00:	08006a39 	.word	0x08006a39
 8006a04:	08006a39 	.word	0x08006a39
 8006a08:	08006a39 	.word	0x08006a39
 8006a0c:	08006a2f 	.word	0x08006a2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a16:	60fb      	str	r3, [r7, #12]

      break;
 8006a18:	e00f      	b.n	8006a3a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a20:	60fb      	str	r3, [r7, #12]

      break;
 8006a22:	e00a      	b.n	8006a3a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a2a:	60fb      	str	r3, [r7, #12]

      break;
 8006a2c:	e005      	b.n	8006a3a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a34:	60fb      	str	r3, [r7, #12]

      break;
 8006a36:	e000      	b.n	8006a3a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006a38:	bf00      	nop
  }

  return tmpreg;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3714      	adds	r7, #20
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a64:	bf00      	nop
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a78:	bf00      	nop
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a3a      	ldr	r2, [pc, #232]	@ (8006b80 <TIM_Base_SetConfig+0xfc>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d00f      	beq.n	8006abc <TIM_Base_SetConfig+0x38>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006aa2:	d00b      	beq.n	8006abc <TIM_Base_SetConfig+0x38>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a37      	ldr	r2, [pc, #220]	@ (8006b84 <TIM_Base_SetConfig+0x100>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d007      	beq.n	8006abc <TIM_Base_SetConfig+0x38>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a36      	ldr	r2, [pc, #216]	@ (8006b88 <TIM_Base_SetConfig+0x104>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d003      	beq.n	8006abc <TIM_Base_SetConfig+0x38>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a35      	ldr	r2, [pc, #212]	@ (8006b8c <TIM_Base_SetConfig+0x108>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d108      	bne.n	8006ace <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ac2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a2b      	ldr	r2, [pc, #172]	@ (8006b80 <TIM_Base_SetConfig+0xfc>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d01b      	beq.n	8006b0e <TIM_Base_SetConfig+0x8a>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006adc:	d017      	beq.n	8006b0e <TIM_Base_SetConfig+0x8a>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4a28      	ldr	r2, [pc, #160]	@ (8006b84 <TIM_Base_SetConfig+0x100>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d013      	beq.n	8006b0e <TIM_Base_SetConfig+0x8a>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a27      	ldr	r2, [pc, #156]	@ (8006b88 <TIM_Base_SetConfig+0x104>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d00f      	beq.n	8006b0e <TIM_Base_SetConfig+0x8a>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a26      	ldr	r2, [pc, #152]	@ (8006b8c <TIM_Base_SetConfig+0x108>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d00b      	beq.n	8006b0e <TIM_Base_SetConfig+0x8a>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a25      	ldr	r2, [pc, #148]	@ (8006b90 <TIM_Base_SetConfig+0x10c>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d007      	beq.n	8006b0e <TIM_Base_SetConfig+0x8a>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4a24      	ldr	r2, [pc, #144]	@ (8006b94 <TIM_Base_SetConfig+0x110>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d003      	beq.n	8006b0e <TIM_Base_SetConfig+0x8a>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a23      	ldr	r2, [pc, #140]	@ (8006b98 <TIM_Base_SetConfig+0x114>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d108      	bne.n	8006b20 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	689a      	ldr	r2, [r3, #8]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a0e      	ldr	r2, [pc, #56]	@ (8006b80 <TIM_Base_SetConfig+0xfc>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d103      	bne.n	8006b54 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	691a      	ldr	r2, [r3, #16]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	f003 0301 	and.w	r3, r3, #1
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d105      	bne.n	8006b72 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	f023 0201 	bic.w	r2, r3, #1
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	611a      	str	r2, [r3, #16]
  }
}
 8006b72:	bf00      	nop
 8006b74:	3714      	adds	r7, #20
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	40010000 	.word	0x40010000
 8006b84:	40000400 	.word	0x40000400
 8006b88:	40000800 	.word	0x40000800
 8006b8c:	40000c00 	.word	0x40000c00
 8006b90:	40014000 	.word	0x40014000
 8006b94:	40014400 	.word	0x40014400
 8006b98:	40014800 	.word	0x40014800

08006b9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b087      	sub	sp, #28
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a1b      	ldr	r3, [r3, #32]
 8006baa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6a1b      	ldr	r3, [r3, #32]
 8006bb0:	f023 0201 	bic.w	r2, r3, #1
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	699b      	ldr	r3, [r3, #24]
 8006bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f023 0303 	bic.w	r3, r3, #3
 8006bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	f023 0302 	bic.w	r3, r3, #2
 8006be4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	697a      	ldr	r2, [r7, #20]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a1c      	ldr	r2, [pc, #112]	@ (8006c64 <TIM_OC1_SetConfig+0xc8>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d10c      	bne.n	8006c12 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	f023 0308 	bic.w	r3, r3, #8
 8006bfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	697a      	ldr	r2, [r7, #20]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	f023 0304 	bic.w	r3, r3, #4
 8006c10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a13      	ldr	r2, [pc, #76]	@ (8006c64 <TIM_OC1_SetConfig+0xc8>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d111      	bne.n	8006c3e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006c28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	695b      	ldr	r3, [r3, #20]
 8006c2e:	693a      	ldr	r2, [r7, #16]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	699b      	ldr	r3, [r3, #24]
 8006c38:	693a      	ldr	r2, [r7, #16]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	685a      	ldr	r2, [r3, #4]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	697a      	ldr	r2, [r7, #20]
 8006c56:	621a      	str	r2, [r3, #32]
}
 8006c58:	bf00      	nop
 8006c5a:	371c      	adds	r7, #28
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr
 8006c64:	40010000 	.word	0x40010000

08006c68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b087      	sub	sp, #28
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a1b      	ldr	r3, [r3, #32]
 8006c76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6a1b      	ldr	r3, [r3, #32]
 8006c7c:	f023 0210 	bic.w	r2, r3, #16
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	021b      	lsls	r3, r3, #8
 8006ca6:	68fa      	ldr	r2, [r7, #12]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	f023 0320 	bic.w	r3, r3, #32
 8006cb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	011b      	lsls	r3, r3, #4
 8006cba:	697a      	ldr	r2, [r7, #20]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a1e      	ldr	r2, [pc, #120]	@ (8006d3c <TIM_OC2_SetConfig+0xd4>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d10d      	bne.n	8006ce4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	011b      	lsls	r3, r3, #4
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ce2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4a15      	ldr	r2, [pc, #84]	@ (8006d3c <TIM_OC2_SetConfig+0xd4>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d113      	bne.n	8006d14 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006cf2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006cfa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	695b      	ldr	r3, [r3, #20]
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	693a      	ldr	r2, [r7, #16]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	699b      	ldr	r3, [r3, #24]
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	693a      	ldr	r2, [r7, #16]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	693a      	ldr	r2, [r7, #16]
 8006d18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	685a      	ldr	r2, [r3, #4]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	697a      	ldr	r2, [r7, #20]
 8006d2c:	621a      	str	r2, [r3, #32]
}
 8006d2e:	bf00      	nop
 8006d30:	371c      	adds	r7, #28
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	40010000 	.word	0x40010000

08006d40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b087      	sub	sp, #28
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a1b      	ldr	r3, [r3, #32]
 8006d4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6a1b      	ldr	r3, [r3, #32]
 8006d54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	69db      	ldr	r3, [r3, #28]
 8006d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f023 0303 	bic.w	r3, r3, #3
 8006d76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006d88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	021b      	lsls	r3, r3, #8
 8006d90:	697a      	ldr	r2, [r7, #20]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a1d      	ldr	r2, [pc, #116]	@ (8006e10 <TIM_OC3_SetConfig+0xd0>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d10d      	bne.n	8006dba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006da4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	021b      	lsls	r3, r3, #8
 8006dac:	697a      	ldr	r2, [r7, #20]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006db8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a14      	ldr	r2, [pc, #80]	@ (8006e10 <TIM_OC3_SetConfig+0xd0>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d113      	bne.n	8006dea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006dc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006dd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	695b      	ldr	r3, [r3, #20]
 8006dd6:	011b      	lsls	r3, r3, #4
 8006dd8:	693a      	ldr	r2, [r7, #16]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	699b      	ldr	r3, [r3, #24]
 8006de2:	011b      	lsls	r3, r3, #4
 8006de4:	693a      	ldr	r2, [r7, #16]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	693a      	ldr	r2, [r7, #16]
 8006dee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	68fa      	ldr	r2, [r7, #12]
 8006df4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	685a      	ldr	r2, [r3, #4]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	621a      	str	r2, [r3, #32]
}
 8006e04:	bf00      	nop
 8006e06:	371c      	adds	r7, #28
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr
 8006e10:	40010000 	.word	0x40010000

08006e14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b087      	sub	sp, #28
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a1b      	ldr	r3, [r3, #32]
 8006e22:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a1b      	ldr	r3, [r3, #32]
 8006e28:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	69db      	ldr	r3, [r3, #28]
 8006e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	021b      	lsls	r3, r3, #8
 8006e52:	68fa      	ldr	r2, [r7, #12]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	031b      	lsls	r3, r3, #12
 8006e66:	693a      	ldr	r2, [r7, #16]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a10      	ldr	r2, [pc, #64]	@ (8006eb0 <TIM_OC4_SetConfig+0x9c>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d109      	bne.n	8006e88 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	695b      	ldr	r3, [r3, #20]
 8006e80:	019b      	lsls	r3, r3, #6
 8006e82:	697a      	ldr	r2, [r7, #20]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	697a      	ldr	r2, [r7, #20]
 8006e8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	685a      	ldr	r2, [r3, #4]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	693a      	ldr	r2, [r7, #16]
 8006ea0:	621a      	str	r2, [r3, #32]
}
 8006ea2:	bf00      	nop
 8006ea4:	371c      	adds	r7, #28
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop
 8006eb0:	40010000 	.word	0x40010000

08006eb4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b087      	sub	sp, #28
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	607a      	str	r2, [r7, #4]
 8006ec0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6a1b      	ldr	r3, [r3, #32]
 8006ec6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6a1b      	ldr	r3, [r3, #32]
 8006ecc:	f023 0201 	bic.w	r2, r3, #1
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	699b      	ldr	r3, [r3, #24]
 8006ed8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	4a24      	ldr	r2, [pc, #144]	@ (8006f70 <TIM_TI1_SetConfig+0xbc>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d013      	beq.n	8006f0a <TIM_TI1_SetConfig+0x56>
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ee8:	d00f      	beq.n	8006f0a <TIM_TI1_SetConfig+0x56>
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	4a21      	ldr	r2, [pc, #132]	@ (8006f74 <TIM_TI1_SetConfig+0xc0>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d00b      	beq.n	8006f0a <TIM_TI1_SetConfig+0x56>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	4a20      	ldr	r2, [pc, #128]	@ (8006f78 <TIM_TI1_SetConfig+0xc4>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d007      	beq.n	8006f0a <TIM_TI1_SetConfig+0x56>
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	4a1f      	ldr	r2, [pc, #124]	@ (8006f7c <TIM_TI1_SetConfig+0xc8>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d003      	beq.n	8006f0a <TIM_TI1_SetConfig+0x56>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	4a1e      	ldr	r2, [pc, #120]	@ (8006f80 <TIM_TI1_SetConfig+0xcc>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d101      	bne.n	8006f0e <TIM_TI1_SetConfig+0x5a>
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e000      	b.n	8006f10 <TIM_TI1_SetConfig+0x5c>
 8006f0e:	2300      	movs	r3, #0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d008      	beq.n	8006f26 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	f023 0303 	bic.w	r3, r3, #3
 8006f1a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006f1c:	697a      	ldr	r2, [r7, #20]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	617b      	str	r3, [r7, #20]
 8006f24:	e003      	b.n	8006f2e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	f043 0301 	orr.w	r3, r3, #1
 8006f2c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	011b      	lsls	r3, r3, #4
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	697a      	ldr	r2, [r7, #20]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	f023 030a 	bic.w	r3, r3, #10
 8006f48:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	f003 030a 	and.w	r3, r3, #10
 8006f50:	693a      	ldr	r2, [r7, #16]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	697a      	ldr	r2, [r7, #20]
 8006f5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	693a      	ldr	r2, [r7, #16]
 8006f60:	621a      	str	r2, [r3, #32]
}
 8006f62:	bf00      	nop
 8006f64:	371c      	adds	r7, #28
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop
 8006f70:	40010000 	.word	0x40010000
 8006f74:	40000400 	.word	0x40000400
 8006f78:	40000800 	.word	0x40000800
 8006f7c:	40000c00 	.word	0x40000c00
 8006f80:	40014000 	.word	0x40014000

08006f84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b087      	sub	sp, #28
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6a1b      	ldr	r3, [r3, #32]
 8006f94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6a1b      	ldr	r3, [r3, #32]
 8006f9a:	f023 0201 	bic.w	r2, r3, #1
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	699b      	ldr	r3, [r3, #24]
 8006fa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006fae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	011b      	lsls	r3, r3, #4
 8006fb4:	693a      	ldr	r2, [r7, #16]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	f023 030a 	bic.w	r3, r3, #10
 8006fc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006fc2:	697a      	ldr	r2, [r7, #20]
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	693a      	ldr	r2, [r7, #16]
 8006fce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	697a      	ldr	r2, [r7, #20]
 8006fd4:	621a      	str	r2, [r3, #32]
}
 8006fd6:	bf00      	nop
 8006fd8:	371c      	adds	r7, #28
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr

08006fe2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006fe2:	b480      	push	{r7}
 8006fe4:	b087      	sub	sp, #28
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	60f8      	str	r0, [r7, #12]
 8006fea:	60b9      	str	r1, [r7, #8]
 8006fec:	607a      	str	r2, [r7, #4]
 8006fee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6a1b      	ldr	r3, [r3, #32]
 8006ff4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6a1b      	ldr	r3, [r3, #32]
 8006ffa:	f023 0210 	bic.w	r2, r3, #16
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	699b      	ldr	r3, [r3, #24]
 8007006:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800700e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	021b      	lsls	r3, r3, #8
 8007014:	693a      	ldr	r2, [r7, #16]
 8007016:	4313      	orrs	r3, r2
 8007018:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007020:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	031b      	lsls	r3, r3, #12
 8007026:	b29b      	uxth	r3, r3
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	4313      	orrs	r3, r2
 800702c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007034:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	011b      	lsls	r3, r3, #4
 800703a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	4313      	orrs	r3, r2
 8007042:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	697a      	ldr	r2, [r7, #20]
 800704e:	621a      	str	r2, [r3, #32]
}
 8007050:	bf00      	nop
 8007052:	371c      	adds	r7, #28
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800705c:	b480      	push	{r7}
 800705e:	b087      	sub	sp, #28
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6a1b      	ldr	r3, [r3, #32]
 800706c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6a1b      	ldr	r3, [r3, #32]
 8007072:	f023 0210 	bic.w	r2, r3, #16
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	699b      	ldr	r3, [r3, #24]
 800707e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007086:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	031b      	lsls	r3, r3, #12
 800708c:	693a      	ldr	r2, [r7, #16]
 800708e:	4313      	orrs	r3, r2
 8007090:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007098:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	011b      	lsls	r3, r3, #4
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	693a      	ldr	r2, [r7, #16]
 80070a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	697a      	ldr	r2, [r7, #20]
 80070ae:	621a      	str	r2, [r3, #32]
}
 80070b0:	bf00      	nop
 80070b2:	371c      	adds	r7, #28
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80070bc:	b480      	push	{r7}
 80070be:	b087      	sub	sp, #28
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	60b9      	str	r1, [r7, #8]
 80070c6:	607a      	str	r2, [r7, #4]
 80070c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6a1b      	ldr	r3, [r3, #32]
 80070ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6a1b      	ldr	r3, [r3, #32]
 80070d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	69db      	ldr	r3, [r3, #28]
 80070e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	f023 0303 	bic.w	r3, r3, #3
 80070e8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80070ea:	693a      	ldr	r2, [r7, #16]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80070f8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	011b      	lsls	r3, r3, #4
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	693a      	ldr	r2, [r7, #16]
 8007102:	4313      	orrs	r3, r2
 8007104:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800710c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	021b      	lsls	r3, r3, #8
 8007112:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8007116:	697a      	ldr	r2, [r7, #20]
 8007118:	4313      	orrs	r3, r2
 800711a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	693a      	ldr	r2, [r7, #16]
 8007120:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	697a      	ldr	r2, [r7, #20]
 8007126:	621a      	str	r2, [r3, #32]
}
 8007128:	bf00      	nop
 800712a:	371c      	adds	r7, #28
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007134:	b480      	push	{r7}
 8007136:	b087      	sub	sp, #28
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	607a      	str	r2, [r7, #4]
 8007140:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6a1b      	ldr	r3, [r3, #32]
 8007146:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6a1b      	ldr	r3, [r3, #32]
 800714c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	69db      	ldr	r3, [r3, #28]
 8007158:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007160:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	021b      	lsls	r3, r3, #8
 8007166:	693a      	ldr	r2, [r7, #16]
 8007168:	4313      	orrs	r3, r2
 800716a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007172:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	031b      	lsls	r3, r3, #12
 8007178:	b29b      	uxth	r3, r3
 800717a:	693a      	ldr	r2, [r7, #16]
 800717c:	4313      	orrs	r3, r2
 800717e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8007186:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	031b      	lsls	r3, r3, #12
 800718c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8007190:	697a      	ldr	r2, [r7, #20]
 8007192:	4313      	orrs	r3, r2
 8007194:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	693a      	ldr	r2, [r7, #16]
 800719a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	697a      	ldr	r2, [r7, #20]
 80071a0:	621a      	str	r2, [r3, #32]
}
 80071a2:	bf00      	nop
 80071a4:	371c      	adds	r7, #28
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr

080071ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80071ae:	b480      	push	{r7}
 80071b0:	b085      	sub	sp, #20
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
 80071b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80071c6:	683a      	ldr	r2, [r7, #0]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	f043 0307 	orr.w	r3, r3, #7
 80071d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	609a      	str	r2, [r3, #8]
}
 80071d8:	bf00      	nop
 80071da:	3714      	adds	r7, #20
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b087      	sub	sp, #28
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	607a      	str	r2, [r7, #4]
 80071f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80071fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	021a      	lsls	r2, r3, #8
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	431a      	orrs	r2, r3
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	4313      	orrs	r3, r2
 800720c:	697a      	ldr	r2, [r7, #20]
 800720e:	4313      	orrs	r3, r2
 8007210:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	697a      	ldr	r2, [r7, #20]
 8007216:	609a      	str	r2, [r3, #8]
}
 8007218:	bf00      	nop
 800721a:	371c      	adds	r7, #28
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007224:	b480      	push	{r7}
 8007226:	b087      	sub	sp, #28
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	f003 031f 	and.w	r3, r3, #31
 8007236:	2201      	movs	r2, #1
 8007238:	fa02 f303 	lsl.w	r3, r2, r3
 800723c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6a1a      	ldr	r2, [r3, #32]
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	43db      	mvns	r3, r3
 8007246:	401a      	ands	r2, r3
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6a1a      	ldr	r2, [r3, #32]
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	f003 031f 	and.w	r3, r3, #31
 8007256:	6879      	ldr	r1, [r7, #4]
 8007258:	fa01 f303 	lsl.w	r3, r1, r3
 800725c:	431a      	orrs	r2, r3
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	621a      	str	r2, [r3, #32]
}
 8007262:	bf00      	nop
 8007264:	371c      	adds	r7, #28
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr
	...

08007270 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007270:	b480      	push	{r7}
 8007272:	b085      	sub	sp, #20
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007280:	2b01      	cmp	r3, #1
 8007282:	d101      	bne.n	8007288 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007284:	2302      	movs	r3, #2
 8007286:	e050      	b.n	800732a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2202      	movs	r2, #2
 8007294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a1c      	ldr	r2, [pc, #112]	@ (8007338 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d018      	beq.n	80072fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072d4:	d013      	beq.n	80072fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a18      	ldr	r2, [pc, #96]	@ (800733c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d00e      	beq.n	80072fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a16      	ldr	r2, [pc, #88]	@ (8007340 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d009      	beq.n	80072fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a15      	ldr	r2, [pc, #84]	@ (8007344 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d004      	beq.n	80072fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a13      	ldr	r2, [pc, #76]	@ (8007348 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d10c      	bne.n	8007318 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007304:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	68ba      	ldr	r2, [r7, #8]
 800730c:	4313      	orrs	r3, r2
 800730e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	68ba      	ldr	r2, [r7, #8]
 8007316:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3714      	adds	r7, #20
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop
 8007338:	40010000 	.word	0x40010000
 800733c:	40000400 	.word	0x40000400
 8007340:	40000800 	.word	0x40000800
 8007344:	40000c00 	.word	0x40000c00
 8007348:	40014000 	.word	0x40014000

0800734c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007354:	bf00      	nop
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007368:	bf00      	nop
 800736a:	370c      	adds	r7, #12
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr

08007374 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d101      	bne.n	8007386 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e042      	b.n	800740c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800738c:	b2db      	uxtb	r3, r3
 800738e:	2b00      	cmp	r3, #0
 8007390:	d106      	bne.n	80073a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f7fb fe6c 	bl	8003078 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2224      	movs	r2, #36	@ 0x24
 80073a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68da      	ldr	r2, [r3, #12]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80073b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 f973 	bl	80076a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	691a      	ldr	r2, [r3, #16]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80073cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	695a      	ldr	r2, [r3, #20]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80073dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68da      	ldr	r2, [r3, #12]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80073ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2220      	movs	r2, #32
 80073f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2220      	movs	r2, #32
 8007400:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800740a:	2300      	movs	r3, #0
}
 800740c:	4618      	mov	r0, r3
 800740e:	3708      	adds	r7, #8
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b08a      	sub	sp, #40	@ 0x28
 8007418:	af02      	add	r7, sp, #8
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	603b      	str	r3, [r7, #0]
 8007420:	4613      	mov	r3, r2
 8007422:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007424:	2300      	movs	r3, #0
 8007426:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800742e:	b2db      	uxtb	r3, r3
 8007430:	2b20      	cmp	r3, #32
 8007432:	d175      	bne.n	8007520 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d002      	beq.n	8007440 <HAL_UART_Transmit+0x2c>
 800743a:	88fb      	ldrh	r3, [r7, #6]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d101      	bne.n	8007444 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	e06e      	b.n	8007522 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2200      	movs	r2, #0
 8007448:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2221      	movs	r2, #33	@ 0x21
 800744e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007452:	f7fb feb9 	bl	80031c8 <HAL_GetTick>
 8007456:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	88fa      	ldrh	r2, [r7, #6]
 800745c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	88fa      	ldrh	r2, [r7, #6]
 8007462:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800746c:	d108      	bne.n	8007480 <HAL_UART_Transmit+0x6c>
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	691b      	ldr	r3, [r3, #16]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d104      	bne.n	8007480 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007476:	2300      	movs	r3, #0
 8007478:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	61bb      	str	r3, [r7, #24]
 800747e:	e003      	b.n	8007488 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007484:	2300      	movs	r3, #0
 8007486:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007488:	e02e      	b.n	80074e8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	9300      	str	r3, [sp, #0]
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	2200      	movs	r2, #0
 8007492:	2180      	movs	r1, #128	@ 0x80
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f000 f848 	bl	800752a <UART_WaitOnFlagUntilTimeout>
 800749a:	4603      	mov	r3, r0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d005      	beq.n	80074ac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2220      	movs	r2, #32
 80074a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80074a8:	2303      	movs	r3, #3
 80074aa:	e03a      	b.n	8007522 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d10b      	bne.n	80074ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80074b2:	69bb      	ldr	r3, [r7, #24]
 80074b4:	881b      	ldrh	r3, [r3, #0]
 80074b6:	461a      	mov	r2, r3
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	3302      	adds	r3, #2
 80074c6:	61bb      	str	r3, [r7, #24]
 80074c8:	e007      	b.n	80074da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	781a      	ldrb	r2, [r3, #0]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	3301      	adds	r3, #1
 80074d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80074de:	b29b      	uxth	r3, r3
 80074e0:	3b01      	subs	r3, #1
 80074e2:	b29a      	uxth	r2, r3
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d1cb      	bne.n	800748a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	9300      	str	r3, [sp, #0]
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	2200      	movs	r2, #0
 80074fa:	2140      	movs	r1, #64	@ 0x40
 80074fc:	68f8      	ldr	r0, [r7, #12]
 80074fe:	f000 f814 	bl	800752a <UART_WaitOnFlagUntilTimeout>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d005      	beq.n	8007514 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2220      	movs	r2, #32
 800750c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007510:	2303      	movs	r3, #3
 8007512:	e006      	b.n	8007522 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2220      	movs	r2, #32
 8007518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800751c:	2300      	movs	r3, #0
 800751e:	e000      	b.n	8007522 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007520:	2302      	movs	r3, #2
  }
}
 8007522:	4618      	mov	r0, r3
 8007524:	3720      	adds	r7, #32
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}

0800752a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800752a:	b580      	push	{r7, lr}
 800752c:	b086      	sub	sp, #24
 800752e:	af00      	add	r7, sp, #0
 8007530:	60f8      	str	r0, [r7, #12]
 8007532:	60b9      	str	r1, [r7, #8]
 8007534:	603b      	str	r3, [r7, #0]
 8007536:	4613      	mov	r3, r2
 8007538:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800753a:	e03b      	b.n	80075b4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800753c:	6a3b      	ldr	r3, [r7, #32]
 800753e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007542:	d037      	beq.n	80075b4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007544:	f7fb fe40 	bl	80031c8 <HAL_GetTick>
 8007548:	4602      	mov	r2, r0
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	6a3a      	ldr	r2, [r7, #32]
 8007550:	429a      	cmp	r2, r3
 8007552:	d302      	bcc.n	800755a <UART_WaitOnFlagUntilTimeout+0x30>
 8007554:	6a3b      	ldr	r3, [r7, #32]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d101      	bne.n	800755e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800755a:	2303      	movs	r3, #3
 800755c:	e03a      	b.n	80075d4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	f003 0304 	and.w	r3, r3, #4
 8007568:	2b00      	cmp	r3, #0
 800756a:	d023      	beq.n	80075b4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	2b80      	cmp	r3, #128	@ 0x80
 8007570:	d020      	beq.n	80075b4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	2b40      	cmp	r3, #64	@ 0x40
 8007576:	d01d      	beq.n	80075b4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f003 0308 	and.w	r3, r3, #8
 8007582:	2b08      	cmp	r3, #8
 8007584:	d116      	bne.n	80075b4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007586:	2300      	movs	r3, #0
 8007588:	617b      	str	r3, [r7, #20]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	617b      	str	r3, [r7, #20]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	617b      	str	r3, [r7, #20]
 800759a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	f000 f81d 	bl	80075dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2208      	movs	r2, #8
 80075a6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	e00f      	b.n	80075d4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	4013      	ands	r3, r2
 80075be:	68ba      	ldr	r2, [r7, #8]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	bf0c      	ite	eq
 80075c4:	2301      	moveq	r3, #1
 80075c6:	2300      	movne	r3, #0
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	461a      	mov	r2, r3
 80075cc:	79fb      	ldrb	r3, [r7, #7]
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d0b4      	beq.n	800753c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3718      	adds	r7, #24
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075dc:	b480      	push	{r7}
 80075de:	b095      	sub	sp, #84	@ 0x54
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	330c      	adds	r3, #12
 80075ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075ee:	e853 3f00 	ldrex	r3, [r3]
 80075f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80075f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	330c      	adds	r3, #12
 8007602:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007604:	643a      	str	r2, [r7, #64]	@ 0x40
 8007606:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007608:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800760a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800760c:	e841 2300 	strex	r3, r2, [r1]
 8007610:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007614:	2b00      	cmp	r3, #0
 8007616:	d1e5      	bne.n	80075e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	3314      	adds	r3, #20
 800761e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007620:	6a3b      	ldr	r3, [r7, #32]
 8007622:	e853 3f00 	ldrex	r3, [r3]
 8007626:	61fb      	str	r3, [r7, #28]
   return(result);
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	f023 0301 	bic.w	r3, r3, #1
 800762e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	3314      	adds	r3, #20
 8007636:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007638:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800763a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800763e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007640:	e841 2300 	strex	r3, r2, [r1]
 8007644:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007648:	2b00      	cmp	r3, #0
 800764a:	d1e5      	bne.n	8007618 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007650:	2b01      	cmp	r3, #1
 8007652:	d119      	bne.n	8007688 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	330c      	adds	r3, #12
 800765a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	e853 3f00 	ldrex	r3, [r3]
 8007662:	60bb      	str	r3, [r7, #8]
   return(result);
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	f023 0310 	bic.w	r3, r3, #16
 800766a:	647b      	str	r3, [r7, #68]	@ 0x44
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	330c      	adds	r3, #12
 8007672:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007674:	61ba      	str	r2, [r7, #24]
 8007676:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007678:	6979      	ldr	r1, [r7, #20]
 800767a:	69ba      	ldr	r2, [r7, #24]
 800767c:	e841 2300 	strex	r3, r2, [r1]
 8007680:	613b      	str	r3, [r7, #16]
   return(result);
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d1e5      	bne.n	8007654 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2220      	movs	r2, #32
 800768c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007696:	bf00      	nop
 8007698:	3754      	adds	r7, #84	@ 0x54
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
	...

080076a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076a8:	b0c0      	sub	sp, #256	@ 0x100
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80076bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076c0:	68d9      	ldr	r1, [r3, #12]
 80076c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	ea40 0301 	orr.w	r3, r0, r1
 80076cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80076ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076d2:	689a      	ldr	r2, [r3, #8]
 80076d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	431a      	orrs	r2, r3
 80076dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076e0:	695b      	ldr	r3, [r3, #20]
 80076e2:	431a      	orrs	r2, r3
 80076e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076e8:	69db      	ldr	r3, [r3, #28]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80076f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80076fc:	f021 010c 	bic.w	r1, r1, #12
 8007700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800770a:	430b      	orrs	r3, r1
 800770c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800770e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	695b      	ldr	r3, [r3, #20]
 8007716:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800771a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800771e:	6999      	ldr	r1, [r3, #24]
 8007720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	ea40 0301 	orr.w	r3, r0, r1
 800772a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800772c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	4b8f      	ldr	r3, [pc, #572]	@ (8007970 <UART_SetConfig+0x2cc>)
 8007734:	429a      	cmp	r2, r3
 8007736:	d005      	beq.n	8007744 <UART_SetConfig+0xa0>
 8007738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	4b8d      	ldr	r3, [pc, #564]	@ (8007974 <UART_SetConfig+0x2d0>)
 8007740:	429a      	cmp	r2, r3
 8007742:	d104      	bne.n	800774e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007744:	f7fe fb6c 	bl	8005e20 <HAL_RCC_GetPCLK2Freq>
 8007748:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800774c:	e003      	b.n	8007756 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800774e:	f7fe fb53 	bl	8005df8 <HAL_RCC_GetPCLK1Freq>
 8007752:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800775a:	69db      	ldr	r3, [r3, #28]
 800775c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007760:	f040 810c 	bne.w	800797c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007764:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007768:	2200      	movs	r2, #0
 800776a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800776e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007772:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007776:	4622      	mov	r2, r4
 8007778:	462b      	mov	r3, r5
 800777a:	1891      	adds	r1, r2, r2
 800777c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800777e:	415b      	adcs	r3, r3
 8007780:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007782:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007786:	4621      	mov	r1, r4
 8007788:	eb12 0801 	adds.w	r8, r2, r1
 800778c:	4629      	mov	r1, r5
 800778e:	eb43 0901 	adc.w	r9, r3, r1
 8007792:	f04f 0200 	mov.w	r2, #0
 8007796:	f04f 0300 	mov.w	r3, #0
 800779a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800779e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80077a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80077a6:	4690      	mov	r8, r2
 80077a8:	4699      	mov	r9, r3
 80077aa:	4623      	mov	r3, r4
 80077ac:	eb18 0303 	adds.w	r3, r8, r3
 80077b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80077b4:	462b      	mov	r3, r5
 80077b6:	eb49 0303 	adc.w	r3, r9, r3
 80077ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80077be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80077ca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80077ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80077d2:	460b      	mov	r3, r1
 80077d4:	18db      	adds	r3, r3, r3
 80077d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80077d8:	4613      	mov	r3, r2
 80077da:	eb42 0303 	adc.w	r3, r2, r3
 80077de:	657b      	str	r3, [r7, #84]	@ 0x54
 80077e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80077e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80077e8:	f7f9 fa36 	bl	8000c58 <__aeabi_uldivmod>
 80077ec:	4602      	mov	r2, r0
 80077ee:	460b      	mov	r3, r1
 80077f0:	4b61      	ldr	r3, [pc, #388]	@ (8007978 <UART_SetConfig+0x2d4>)
 80077f2:	fba3 2302 	umull	r2, r3, r3, r2
 80077f6:	095b      	lsrs	r3, r3, #5
 80077f8:	011c      	lsls	r4, r3, #4
 80077fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077fe:	2200      	movs	r2, #0
 8007800:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007804:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007808:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800780c:	4642      	mov	r2, r8
 800780e:	464b      	mov	r3, r9
 8007810:	1891      	adds	r1, r2, r2
 8007812:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007814:	415b      	adcs	r3, r3
 8007816:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007818:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800781c:	4641      	mov	r1, r8
 800781e:	eb12 0a01 	adds.w	sl, r2, r1
 8007822:	4649      	mov	r1, r9
 8007824:	eb43 0b01 	adc.w	fp, r3, r1
 8007828:	f04f 0200 	mov.w	r2, #0
 800782c:	f04f 0300 	mov.w	r3, #0
 8007830:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007834:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007838:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800783c:	4692      	mov	sl, r2
 800783e:	469b      	mov	fp, r3
 8007840:	4643      	mov	r3, r8
 8007842:	eb1a 0303 	adds.w	r3, sl, r3
 8007846:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800784a:	464b      	mov	r3, r9
 800784c:	eb4b 0303 	adc.w	r3, fp, r3
 8007850:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007860:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007864:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007868:	460b      	mov	r3, r1
 800786a:	18db      	adds	r3, r3, r3
 800786c:	643b      	str	r3, [r7, #64]	@ 0x40
 800786e:	4613      	mov	r3, r2
 8007870:	eb42 0303 	adc.w	r3, r2, r3
 8007874:	647b      	str	r3, [r7, #68]	@ 0x44
 8007876:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800787a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800787e:	f7f9 f9eb 	bl	8000c58 <__aeabi_uldivmod>
 8007882:	4602      	mov	r2, r0
 8007884:	460b      	mov	r3, r1
 8007886:	4611      	mov	r1, r2
 8007888:	4b3b      	ldr	r3, [pc, #236]	@ (8007978 <UART_SetConfig+0x2d4>)
 800788a:	fba3 2301 	umull	r2, r3, r3, r1
 800788e:	095b      	lsrs	r3, r3, #5
 8007890:	2264      	movs	r2, #100	@ 0x64
 8007892:	fb02 f303 	mul.w	r3, r2, r3
 8007896:	1acb      	subs	r3, r1, r3
 8007898:	00db      	lsls	r3, r3, #3
 800789a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800789e:	4b36      	ldr	r3, [pc, #216]	@ (8007978 <UART_SetConfig+0x2d4>)
 80078a0:	fba3 2302 	umull	r2, r3, r3, r2
 80078a4:	095b      	lsrs	r3, r3, #5
 80078a6:	005b      	lsls	r3, r3, #1
 80078a8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80078ac:	441c      	add	r4, r3
 80078ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078b2:	2200      	movs	r2, #0
 80078b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80078b8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80078bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80078c0:	4642      	mov	r2, r8
 80078c2:	464b      	mov	r3, r9
 80078c4:	1891      	adds	r1, r2, r2
 80078c6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80078c8:	415b      	adcs	r3, r3
 80078ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80078d0:	4641      	mov	r1, r8
 80078d2:	1851      	adds	r1, r2, r1
 80078d4:	6339      	str	r1, [r7, #48]	@ 0x30
 80078d6:	4649      	mov	r1, r9
 80078d8:	414b      	adcs	r3, r1
 80078da:	637b      	str	r3, [r7, #52]	@ 0x34
 80078dc:	f04f 0200 	mov.w	r2, #0
 80078e0:	f04f 0300 	mov.w	r3, #0
 80078e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80078e8:	4659      	mov	r1, fp
 80078ea:	00cb      	lsls	r3, r1, #3
 80078ec:	4651      	mov	r1, sl
 80078ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078f2:	4651      	mov	r1, sl
 80078f4:	00ca      	lsls	r2, r1, #3
 80078f6:	4610      	mov	r0, r2
 80078f8:	4619      	mov	r1, r3
 80078fa:	4603      	mov	r3, r0
 80078fc:	4642      	mov	r2, r8
 80078fe:	189b      	adds	r3, r3, r2
 8007900:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007904:	464b      	mov	r3, r9
 8007906:	460a      	mov	r2, r1
 8007908:	eb42 0303 	adc.w	r3, r2, r3
 800790c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800791c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007920:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007924:	460b      	mov	r3, r1
 8007926:	18db      	adds	r3, r3, r3
 8007928:	62bb      	str	r3, [r7, #40]	@ 0x28
 800792a:	4613      	mov	r3, r2
 800792c:	eb42 0303 	adc.w	r3, r2, r3
 8007930:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007932:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007936:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800793a:	f7f9 f98d 	bl	8000c58 <__aeabi_uldivmod>
 800793e:	4602      	mov	r2, r0
 8007940:	460b      	mov	r3, r1
 8007942:	4b0d      	ldr	r3, [pc, #52]	@ (8007978 <UART_SetConfig+0x2d4>)
 8007944:	fba3 1302 	umull	r1, r3, r3, r2
 8007948:	095b      	lsrs	r3, r3, #5
 800794a:	2164      	movs	r1, #100	@ 0x64
 800794c:	fb01 f303 	mul.w	r3, r1, r3
 8007950:	1ad3      	subs	r3, r2, r3
 8007952:	00db      	lsls	r3, r3, #3
 8007954:	3332      	adds	r3, #50	@ 0x32
 8007956:	4a08      	ldr	r2, [pc, #32]	@ (8007978 <UART_SetConfig+0x2d4>)
 8007958:	fba2 2303 	umull	r2, r3, r2, r3
 800795c:	095b      	lsrs	r3, r3, #5
 800795e:	f003 0207 	and.w	r2, r3, #7
 8007962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4422      	add	r2, r4
 800796a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800796c:	e106      	b.n	8007b7c <UART_SetConfig+0x4d8>
 800796e:	bf00      	nop
 8007970:	40011000 	.word	0x40011000
 8007974:	40011400 	.word	0x40011400
 8007978:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800797c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007980:	2200      	movs	r2, #0
 8007982:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007986:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800798a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800798e:	4642      	mov	r2, r8
 8007990:	464b      	mov	r3, r9
 8007992:	1891      	adds	r1, r2, r2
 8007994:	6239      	str	r1, [r7, #32]
 8007996:	415b      	adcs	r3, r3
 8007998:	627b      	str	r3, [r7, #36]	@ 0x24
 800799a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800799e:	4641      	mov	r1, r8
 80079a0:	1854      	adds	r4, r2, r1
 80079a2:	4649      	mov	r1, r9
 80079a4:	eb43 0501 	adc.w	r5, r3, r1
 80079a8:	f04f 0200 	mov.w	r2, #0
 80079ac:	f04f 0300 	mov.w	r3, #0
 80079b0:	00eb      	lsls	r3, r5, #3
 80079b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80079b6:	00e2      	lsls	r2, r4, #3
 80079b8:	4614      	mov	r4, r2
 80079ba:	461d      	mov	r5, r3
 80079bc:	4643      	mov	r3, r8
 80079be:	18e3      	adds	r3, r4, r3
 80079c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80079c4:	464b      	mov	r3, r9
 80079c6:	eb45 0303 	adc.w	r3, r5, r3
 80079ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80079ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80079da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80079de:	f04f 0200 	mov.w	r2, #0
 80079e2:	f04f 0300 	mov.w	r3, #0
 80079e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80079ea:	4629      	mov	r1, r5
 80079ec:	008b      	lsls	r3, r1, #2
 80079ee:	4621      	mov	r1, r4
 80079f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80079f4:	4621      	mov	r1, r4
 80079f6:	008a      	lsls	r2, r1, #2
 80079f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80079fc:	f7f9 f92c 	bl	8000c58 <__aeabi_uldivmod>
 8007a00:	4602      	mov	r2, r0
 8007a02:	460b      	mov	r3, r1
 8007a04:	4b60      	ldr	r3, [pc, #384]	@ (8007b88 <UART_SetConfig+0x4e4>)
 8007a06:	fba3 2302 	umull	r2, r3, r3, r2
 8007a0a:	095b      	lsrs	r3, r3, #5
 8007a0c:	011c      	lsls	r4, r3, #4
 8007a0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a12:	2200      	movs	r2, #0
 8007a14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007a18:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007a1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007a20:	4642      	mov	r2, r8
 8007a22:	464b      	mov	r3, r9
 8007a24:	1891      	adds	r1, r2, r2
 8007a26:	61b9      	str	r1, [r7, #24]
 8007a28:	415b      	adcs	r3, r3
 8007a2a:	61fb      	str	r3, [r7, #28]
 8007a2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a30:	4641      	mov	r1, r8
 8007a32:	1851      	adds	r1, r2, r1
 8007a34:	6139      	str	r1, [r7, #16]
 8007a36:	4649      	mov	r1, r9
 8007a38:	414b      	adcs	r3, r1
 8007a3a:	617b      	str	r3, [r7, #20]
 8007a3c:	f04f 0200 	mov.w	r2, #0
 8007a40:	f04f 0300 	mov.w	r3, #0
 8007a44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007a48:	4659      	mov	r1, fp
 8007a4a:	00cb      	lsls	r3, r1, #3
 8007a4c:	4651      	mov	r1, sl
 8007a4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a52:	4651      	mov	r1, sl
 8007a54:	00ca      	lsls	r2, r1, #3
 8007a56:	4610      	mov	r0, r2
 8007a58:	4619      	mov	r1, r3
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	4642      	mov	r2, r8
 8007a5e:	189b      	adds	r3, r3, r2
 8007a60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007a64:	464b      	mov	r3, r9
 8007a66:	460a      	mov	r2, r1
 8007a68:	eb42 0303 	adc.w	r3, r2, r3
 8007a6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007a7a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007a7c:	f04f 0200 	mov.w	r2, #0
 8007a80:	f04f 0300 	mov.w	r3, #0
 8007a84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007a88:	4649      	mov	r1, r9
 8007a8a:	008b      	lsls	r3, r1, #2
 8007a8c:	4641      	mov	r1, r8
 8007a8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a92:	4641      	mov	r1, r8
 8007a94:	008a      	lsls	r2, r1, #2
 8007a96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007a9a:	f7f9 f8dd 	bl	8000c58 <__aeabi_uldivmod>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	4611      	mov	r1, r2
 8007aa4:	4b38      	ldr	r3, [pc, #224]	@ (8007b88 <UART_SetConfig+0x4e4>)
 8007aa6:	fba3 2301 	umull	r2, r3, r3, r1
 8007aaa:	095b      	lsrs	r3, r3, #5
 8007aac:	2264      	movs	r2, #100	@ 0x64
 8007aae:	fb02 f303 	mul.w	r3, r2, r3
 8007ab2:	1acb      	subs	r3, r1, r3
 8007ab4:	011b      	lsls	r3, r3, #4
 8007ab6:	3332      	adds	r3, #50	@ 0x32
 8007ab8:	4a33      	ldr	r2, [pc, #204]	@ (8007b88 <UART_SetConfig+0x4e4>)
 8007aba:	fba2 2303 	umull	r2, r3, r2, r3
 8007abe:	095b      	lsrs	r3, r3, #5
 8007ac0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007ac4:	441c      	add	r4, r3
 8007ac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007aca:	2200      	movs	r2, #0
 8007acc:	673b      	str	r3, [r7, #112]	@ 0x70
 8007ace:	677a      	str	r2, [r7, #116]	@ 0x74
 8007ad0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007ad4:	4642      	mov	r2, r8
 8007ad6:	464b      	mov	r3, r9
 8007ad8:	1891      	adds	r1, r2, r2
 8007ada:	60b9      	str	r1, [r7, #8]
 8007adc:	415b      	adcs	r3, r3
 8007ade:	60fb      	str	r3, [r7, #12]
 8007ae0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ae4:	4641      	mov	r1, r8
 8007ae6:	1851      	adds	r1, r2, r1
 8007ae8:	6039      	str	r1, [r7, #0]
 8007aea:	4649      	mov	r1, r9
 8007aec:	414b      	adcs	r3, r1
 8007aee:	607b      	str	r3, [r7, #4]
 8007af0:	f04f 0200 	mov.w	r2, #0
 8007af4:	f04f 0300 	mov.w	r3, #0
 8007af8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007afc:	4659      	mov	r1, fp
 8007afe:	00cb      	lsls	r3, r1, #3
 8007b00:	4651      	mov	r1, sl
 8007b02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b06:	4651      	mov	r1, sl
 8007b08:	00ca      	lsls	r2, r1, #3
 8007b0a:	4610      	mov	r0, r2
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	4603      	mov	r3, r0
 8007b10:	4642      	mov	r2, r8
 8007b12:	189b      	adds	r3, r3, r2
 8007b14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b16:	464b      	mov	r3, r9
 8007b18:	460a      	mov	r2, r1
 8007b1a:	eb42 0303 	adc.w	r3, r2, r3
 8007b1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	663b      	str	r3, [r7, #96]	@ 0x60
 8007b2a:	667a      	str	r2, [r7, #100]	@ 0x64
 8007b2c:	f04f 0200 	mov.w	r2, #0
 8007b30:	f04f 0300 	mov.w	r3, #0
 8007b34:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007b38:	4649      	mov	r1, r9
 8007b3a:	008b      	lsls	r3, r1, #2
 8007b3c:	4641      	mov	r1, r8
 8007b3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b42:	4641      	mov	r1, r8
 8007b44:	008a      	lsls	r2, r1, #2
 8007b46:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007b4a:	f7f9 f885 	bl	8000c58 <__aeabi_uldivmod>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	460b      	mov	r3, r1
 8007b52:	4b0d      	ldr	r3, [pc, #52]	@ (8007b88 <UART_SetConfig+0x4e4>)
 8007b54:	fba3 1302 	umull	r1, r3, r3, r2
 8007b58:	095b      	lsrs	r3, r3, #5
 8007b5a:	2164      	movs	r1, #100	@ 0x64
 8007b5c:	fb01 f303 	mul.w	r3, r1, r3
 8007b60:	1ad3      	subs	r3, r2, r3
 8007b62:	011b      	lsls	r3, r3, #4
 8007b64:	3332      	adds	r3, #50	@ 0x32
 8007b66:	4a08      	ldr	r2, [pc, #32]	@ (8007b88 <UART_SetConfig+0x4e4>)
 8007b68:	fba2 2303 	umull	r2, r3, r2, r3
 8007b6c:	095b      	lsrs	r3, r3, #5
 8007b6e:	f003 020f 	and.w	r2, r3, #15
 8007b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4422      	add	r2, r4
 8007b7a:	609a      	str	r2, [r3, #8]
}
 8007b7c:	bf00      	nop
 8007b7e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007b82:	46bd      	mov	sp, r7
 8007b84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b88:	51eb851f 	.word	0x51eb851f

08007b8c <__NVIC_SetPriority>:
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	4603      	mov	r3, r0
 8007b94:	6039      	str	r1, [r7, #0]
 8007b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	db0a      	blt.n	8007bb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	b2da      	uxtb	r2, r3
 8007ba4:	490c      	ldr	r1, [pc, #48]	@ (8007bd8 <__NVIC_SetPriority+0x4c>)
 8007ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007baa:	0112      	lsls	r2, r2, #4
 8007bac:	b2d2      	uxtb	r2, r2
 8007bae:	440b      	add	r3, r1
 8007bb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007bb4:	e00a      	b.n	8007bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	b2da      	uxtb	r2, r3
 8007bba:	4908      	ldr	r1, [pc, #32]	@ (8007bdc <__NVIC_SetPriority+0x50>)
 8007bbc:	79fb      	ldrb	r3, [r7, #7]
 8007bbe:	f003 030f 	and.w	r3, r3, #15
 8007bc2:	3b04      	subs	r3, #4
 8007bc4:	0112      	lsls	r2, r2, #4
 8007bc6:	b2d2      	uxtb	r2, r2
 8007bc8:	440b      	add	r3, r1
 8007bca:	761a      	strb	r2, [r3, #24]
}
 8007bcc:	bf00      	nop
 8007bce:	370c      	adds	r7, #12
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr
 8007bd8:	e000e100 	.word	0xe000e100
 8007bdc:	e000ed00 	.word	0xe000ed00

08007be0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007be0:	b580      	push	{r7, lr}
 8007be2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007be4:	4b05      	ldr	r3, [pc, #20]	@ (8007bfc <SysTick_Handler+0x1c>)
 8007be6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007be8:	f002 f86c 	bl	8009cc4 <xTaskGetSchedulerState>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d001      	beq.n	8007bf6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007bf2:	f002 fe61 	bl	800a8b8 <xPortSysTickHandler>
  }
}
 8007bf6:	bf00      	nop
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	e000e010 	.word	0xe000e010

08007c00 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007c00:	b580      	push	{r7, lr}
 8007c02:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007c04:	2100      	movs	r1, #0
 8007c06:	f06f 0004 	mvn.w	r0, #4
 8007c0a:	f7ff ffbf 	bl	8007b8c <__NVIC_SetPriority>
#endif
}
 8007c0e:	bf00      	nop
 8007c10:	bd80      	pop	{r7, pc}
	...

08007c14 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c1a:	f3ef 8305 	mrs	r3, IPSR
 8007c1e:	603b      	str	r3, [r7, #0]
  return(result);
 8007c20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d003      	beq.n	8007c2e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007c26:	f06f 0305 	mvn.w	r3, #5
 8007c2a:	607b      	str	r3, [r7, #4]
 8007c2c:	e00c      	b.n	8007c48 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8007c58 <osKernelInitialize+0x44>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d105      	bne.n	8007c42 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007c36:	4b08      	ldr	r3, [pc, #32]	@ (8007c58 <osKernelInitialize+0x44>)
 8007c38:	2201      	movs	r2, #1
 8007c3a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	607b      	str	r3, [r7, #4]
 8007c40:	e002      	b.n	8007c48 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007c42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007c46:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007c48:	687b      	ldr	r3, [r7, #4]
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	370c      	adds	r7, #12
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr
 8007c56:	bf00      	nop
 8007c58:	200004f4 	.word	0x200004f4

08007c5c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c62:	f3ef 8305 	mrs	r3, IPSR
 8007c66:	603b      	str	r3, [r7, #0]
  return(result);
 8007c68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d003      	beq.n	8007c76 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007c6e:	f06f 0305 	mvn.w	r3, #5
 8007c72:	607b      	str	r3, [r7, #4]
 8007c74:	e010      	b.n	8007c98 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007c76:	4b0b      	ldr	r3, [pc, #44]	@ (8007ca4 <osKernelStart+0x48>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d109      	bne.n	8007c92 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007c7e:	f7ff ffbf 	bl	8007c00 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007c82:	4b08      	ldr	r3, [pc, #32]	@ (8007ca4 <osKernelStart+0x48>)
 8007c84:	2202      	movs	r2, #2
 8007c86:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007c88:	f001 fae4 	bl	8009254 <vTaskStartScheduler>
      stat = osOK;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	607b      	str	r3, [r7, #4]
 8007c90:	e002      	b.n	8007c98 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007c92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007c96:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007c98:	687b      	ldr	r3, [r7, #4]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3708      	adds	r7, #8
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	200004f4 	.word	0x200004f4

08007ca8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b08e      	sub	sp, #56	@ 0x38
 8007cac:	af04      	add	r7, sp, #16
 8007cae:	60f8      	str	r0, [r7, #12]
 8007cb0:	60b9      	str	r1, [r7, #8]
 8007cb2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cb8:	f3ef 8305 	mrs	r3, IPSR
 8007cbc:	617b      	str	r3, [r7, #20]
  return(result);
 8007cbe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d17e      	bne.n	8007dc2 <osThreadNew+0x11a>
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d07b      	beq.n	8007dc2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007cca:	2380      	movs	r3, #128	@ 0x80
 8007ccc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007cce:	2318      	movs	r3, #24
 8007cd0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007cd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007cda:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d045      	beq.n	8007d6e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d002      	beq.n	8007cf0 <osThreadNew+0x48>
        name = attr->name;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	699b      	ldr	r3, [r3, #24]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d002      	beq.n	8007cfe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	699b      	ldr	r3, [r3, #24]
 8007cfc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007cfe:	69fb      	ldr	r3, [r7, #28]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d008      	beq.n	8007d16 <osThreadNew+0x6e>
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	2b38      	cmp	r3, #56	@ 0x38
 8007d08:	d805      	bhi.n	8007d16 <osThreadNew+0x6e>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	f003 0301 	and.w	r3, r3, #1
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d001      	beq.n	8007d1a <osThreadNew+0x72>
        return (NULL);
 8007d16:	2300      	movs	r3, #0
 8007d18:	e054      	b.n	8007dc4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	695b      	ldr	r3, [r3, #20]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d003      	beq.n	8007d2a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	695b      	ldr	r3, [r3, #20]
 8007d26:	089b      	lsrs	r3, r3, #2
 8007d28:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d00e      	beq.n	8007d50 <osThreadNew+0xa8>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	2baf      	cmp	r3, #175	@ 0xaf
 8007d38:	d90a      	bls.n	8007d50 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d006      	beq.n	8007d50 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	695b      	ldr	r3, [r3, #20]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d002      	beq.n	8007d50 <osThreadNew+0xa8>
        mem = 1;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	61bb      	str	r3, [r7, #24]
 8007d4e:	e010      	b.n	8007d72 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d10c      	bne.n	8007d72 <osThreadNew+0xca>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d108      	bne.n	8007d72 <osThreadNew+0xca>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	691b      	ldr	r3, [r3, #16]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d104      	bne.n	8007d72 <osThreadNew+0xca>
          mem = 0;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	61bb      	str	r3, [r7, #24]
 8007d6c:	e001      	b.n	8007d72 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007d72:	69bb      	ldr	r3, [r7, #24]
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d110      	bne.n	8007d9a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007d80:	9202      	str	r2, [sp, #8]
 8007d82:	9301      	str	r3, [sp, #4]
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	9300      	str	r3, [sp, #0]
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	6a3a      	ldr	r2, [r7, #32]
 8007d8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007d8e:	68f8      	ldr	r0, [r7, #12]
 8007d90:	f001 f866 	bl	8008e60 <xTaskCreateStatic>
 8007d94:	4603      	mov	r3, r0
 8007d96:	613b      	str	r3, [r7, #16]
 8007d98:	e013      	b.n	8007dc2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d110      	bne.n	8007dc2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007da0:	6a3b      	ldr	r3, [r7, #32]
 8007da2:	b29a      	uxth	r2, r3
 8007da4:	f107 0310 	add.w	r3, r7, #16
 8007da8:	9301      	str	r3, [sp, #4]
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	9300      	str	r3, [sp, #0]
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007db2:	68f8      	ldr	r0, [r7, #12]
 8007db4:	f001 f8b4 	bl	8008f20 <xTaskCreate>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d001      	beq.n	8007dc2 <osThreadNew+0x11a>
            hTask = NULL;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007dc2:	693b      	ldr	r3, [r7, #16]
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3728      	adds	r7, #40	@ 0x28
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007dd4:	f3ef 8305 	mrs	r3, IPSR
 8007dd8:	60bb      	str	r3, [r7, #8]
  return(result);
 8007dda:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d003      	beq.n	8007de8 <osDelay+0x1c>
    stat = osErrorISR;
 8007de0:	f06f 0305 	mvn.w	r3, #5
 8007de4:	60fb      	str	r3, [r7, #12]
 8007de6:	e007      	b.n	8007df8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007de8:	2300      	movs	r3, #0
 8007dea:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d002      	beq.n	8007df8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f001 f9f8 	bl	80091e8 <vTaskDelay>
    }
  }

  return (stat);
 8007df8:	68fb      	ldr	r3, [r7, #12]
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3710      	adds	r7, #16
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007e02:	b580      	push	{r7, lr}
 8007e04:	b08a      	sub	sp, #40	@ 0x28
 8007e06:	af02      	add	r7, sp, #8
 8007e08:	60f8      	str	r0, [r7, #12]
 8007e0a:	60b9      	str	r1, [r7, #8]
 8007e0c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e12:	f3ef 8305 	mrs	r3, IPSR
 8007e16:	613b      	str	r3, [r7, #16]
  return(result);
 8007e18:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d15f      	bne.n	8007ede <osMessageQueueNew+0xdc>
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d05c      	beq.n	8007ede <osMessageQueueNew+0xdc>
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d059      	beq.n	8007ede <osMessageQueueNew+0xdc>
    mem = -1;
 8007e2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007e2e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d029      	beq.n	8007e8a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d012      	beq.n	8007e64 <osMessageQueueNew+0x62>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	68db      	ldr	r3, [r3, #12]
 8007e42:	2b4f      	cmp	r3, #79	@ 0x4f
 8007e44:	d90e      	bls.n	8007e64 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00a      	beq.n	8007e64 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	695a      	ldr	r2, [r3, #20]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	68b9      	ldr	r1, [r7, #8]
 8007e56:	fb01 f303 	mul.w	r3, r1, r3
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d302      	bcc.n	8007e64 <osMessageQueueNew+0x62>
        mem = 1;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	61bb      	str	r3, [r7, #24]
 8007e62:	e014      	b.n	8007e8e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d110      	bne.n	8007e8e <osMessageQueueNew+0x8c>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d10c      	bne.n	8007e8e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d108      	bne.n	8007e8e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	695b      	ldr	r3, [r3, #20]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d104      	bne.n	8007e8e <osMessageQueueNew+0x8c>
          mem = 0;
 8007e84:	2300      	movs	r3, #0
 8007e86:	61bb      	str	r3, [r7, #24]
 8007e88:	e001      	b.n	8007e8e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007e8e:	69bb      	ldr	r3, [r7, #24]
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d10b      	bne.n	8007eac <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	691a      	ldr	r2, [r3, #16]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	2100      	movs	r1, #0
 8007e9e:	9100      	str	r1, [sp, #0]
 8007ea0:	68b9      	ldr	r1, [r7, #8]
 8007ea2:	68f8      	ldr	r0, [r7, #12]
 8007ea4:	f000 fa50 	bl	8008348 <xQueueGenericCreateStatic>
 8007ea8:	61f8      	str	r0, [r7, #28]
 8007eaa:	e008      	b.n	8007ebe <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8007eac:	69bb      	ldr	r3, [r7, #24]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d105      	bne.n	8007ebe <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	68b9      	ldr	r1, [r7, #8]
 8007eb6:	68f8      	ldr	r0, [r7, #12]
 8007eb8:	f000 fac3 	bl	8008442 <xQueueGenericCreate>
 8007ebc:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d00c      	beq.n	8007ede <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d003      	beq.n	8007ed2 <osMessageQueueNew+0xd0>
        name = attr->name;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	617b      	str	r3, [r7, #20]
 8007ed0:	e001      	b.n	8007ed6 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8007ed6:	6979      	ldr	r1, [r7, #20]
 8007ed8:	69f8      	ldr	r0, [r7, #28]
 8007eda:	f000 ff63 	bl	8008da4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007ede:	69fb      	ldr	r3, [r7, #28]
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3720      	adds	r7, #32
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b088      	sub	sp, #32
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	60b9      	str	r1, [r7, #8]
 8007ef2:	603b      	str	r3, [r7, #0]
 8007ef4:	4613      	mov	r3, r2
 8007ef6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007efc:	2300      	movs	r3, #0
 8007efe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f00:	f3ef 8305 	mrs	r3, IPSR
 8007f04:	617b      	str	r3, [r7, #20]
  return(result);
 8007f06:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d028      	beq.n	8007f5e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007f0c:	69bb      	ldr	r3, [r7, #24]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d005      	beq.n	8007f1e <osMessageQueuePut+0x36>
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d002      	beq.n	8007f1e <osMessageQueuePut+0x36>
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d003      	beq.n	8007f26 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8007f1e:	f06f 0303 	mvn.w	r3, #3
 8007f22:	61fb      	str	r3, [r7, #28]
 8007f24:	e038      	b.n	8007f98 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8007f26:	2300      	movs	r3, #0
 8007f28:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007f2a:	f107 0210 	add.w	r2, r7, #16
 8007f2e:	2300      	movs	r3, #0
 8007f30:	68b9      	ldr	r1, [r7, #8]
 8007f32:	69b8      	ldr	r0, [r7, #24]
 8007f34:	f000 fbe6 	bl	8008704 <xQueueGenericSendFromISR>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d003      	beq.n	8007f46 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8007f3e:	f06f 0302 	mvn.w	r3, #2
 8007f42:	61fb      	str	r3, [r7, #28]
 8007f44:	e028      	b.n	8007f98 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d025      	beq.n	8007f98 <osMessageQueuePut+0xb0>
 8007f4c:	4b15      	ldr	r3, [pc, #84]	@ (8007fa4 <osMessageQueuePut+0xbc>)
 8007f4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f52:	601a      	str	r2, [r3, #0]
 8007f54:	f3bf 8f4f 	dsb	sy
 8007f58:	f3bf 8f6f 	isb	sy
 8007f5c:	e01c      	b.n	8007f98 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d002      	beq.n	8007f6a <osMessageQueuePut+0x82>
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d103      	bne.n	8007f72 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8007f6a:	f06f 0303 	mvn.w	r3, #3
 8007f6e:	61fb      	str	r3, [r7, #28]
 8007f70:	e012      	b.n	8007f98 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007f72:	2300      	movs	r3, #0
 8007f74:	683a      	ldr	r2, [r7, #0]
 8007f76:	68b9      	ldr	r1, [r7, #8]
 8007f78:	69b8      	ldr	r0, [r7, #24]
 8007f7a:	f000 fac1 	bl	8008500 <xQueueGenericSend>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d009      	beq.n	8007f98 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d003      	beq.n	8007f92 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8007f8a:	f06f 0301 	mvn.w	r3, #1
 8007f8e:	61fb      	str	r3, [r7, #28]
 8007f90:	e002      	b.n	8007f98 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8007f92:	f06f 0302 	mvn.w	r3, #2
 8007f96:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007f98:	69fb      	ldr	r3, [r7, #28]
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3720      	adds	r7, #32
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	e000ed04 	.word	0xe000ed04

08007fa8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b088      	sub	sp, #32
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	60b9      	str	r1, [r7, #8]
 8007fb2:	607a      	str	r2, [r7, #4]
 8007fb4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fbe:	f3ef 8305 	mrs	r3, IPSR
 8007fc2:	617b      	str	r3, [r7, #20]
  return(result);
 8007fc4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d028      	beq.n	800801c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d005      	beq.n	8007fdc <osMessageQueueGet+0x34>
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d002      	beq.n	8007fdc <osMessageQueueGet+0x34>
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d003      	beq.n	8007fe4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8007fdc:	f06f 0303 	mvn.w	r3, #3
 8007fe0:	61fb      	str	r3, [r7, #28]
 8007fe2:	e037      	b.n	8008054 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007fe8:	f107 0310 	add.w	r3, r7, #16
 8007fec:	461a      	mov	r2, r3
 8007fee:	68b9      	ldr	r1, [r7, #8]
 8007ff0:	69b8      	ldr	r0, [r7, #24]
 8007ff2:	f000 fd07 	bl	8008a04 <xQueueReceiveFromISR>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d003      	beq.n	8008004 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8007ffc:	f06f 0302 	mvn.w	r3, #2
 8008000:	61fb      	str	r3, [r7, #28]
 8008002:	e027      	b.n	8008054 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d024      	beq.n	8008054 <osMessageQueueGet+0xac>
 800800a:	4b15      	ldr	r3, [pc, #84]	@ (8008060 <osMessageQueueGet+0xb8>)
 800800c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008010:	601a      	str	r2, [r3, #0]
 8008012:	f3bf 8f4f 	dsb	sy
 8008016:	f3bf 8f6f 	isb	sy
 800801a:	e01b      	b.n	8008054 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800801c:	69bb      	ldr	r3, [r7, #24]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d002      	beq.n	8008028 <osMessageQueueGet+0x80>
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d103      	bne.n	8008030 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008028:	f06f 0303 	mvn.w	r3, #3
 800802c:	61fb      	str	r3, [r7, #28]
 800802e:	e011      	b.n	8008054 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008030:	683a      	ldr	r2, [r7, #0]
 8008032:	68b9      	ldr	r1, [r7, #8]
 8008034:	69b8      	ldr	r0, [r7, #24]
 8008036:	f000 fc03 	bl	8008840 <xQueueReceive>
 800803a:	4603      	mov	r3, r0
 800803c:	2b01      	cmp	r3, #1
 800803e:	d009      	beq.n	8008054 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d003      	beq.n	800804e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008046:	f06f 0301 	mvn.w	r3, #1
 800804a:	61fb      	str	r3, [r7, #28]
 800804c:	e002      	b.n	8008054 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800804e:	f06f 0302 	mvn.w	r3, #2
 8008052:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008054:	69fb      	ldr	r3, [r7, #28]
}
 8008056:	4618      	mov	r0, r3
 8008058:	3720      	adds	r7, #32
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	e000ed04 	.word	0xe000ed04

08008064 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8008064:	b580      	push	{r7, lr}
 8008066:	b086      	sub	sp, #24
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d102      	bne.n	800807c <osMessageQueueGetCount+0x18>
    count = 0U;
 8008076:	2300      	movs	r3, #0
 8008078:	617b      	str	r3, [r7, #20]
 800807a:	e00e      	b.n	800809a <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800807c:	f3ef 8305 	mrs	r3, IPSR
 8008080:	60fb      	str	r3, [r7, #12]
  return(result);
 8008082:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008084:	2b00      	cmp	r3, #0
 8008086:	d004      	beq.n	8008092 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8008088:	6938      	ldr	r0, [r7, #16]
 800808a:	f000 fd5c 	bl	8008b46 <uxQueueMessagesWaitingFromISR>
 800808e:	6178      	str	r0, [r7, #20]
 8008090:	e003      	b.n	800809a <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8008092:	6938      	ldr	r0, [r7, #16]
 8008094:	f000 fd38 	bl	8008b08 <uxQueueMessagesWaiting>
 8008098:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800809a:	697b      	ldr	r3, [r7, #20]
}
 800809c:	4618      	mov	r0, r3
 800809e:	3718      	adds	r7, #24
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80080a4:	b480      	push	{r7}
 80080a6:	b085      	sub	sp, #20
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	60b9      	str	r1, [r7, #8]
 80080ae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	4a07      	ldr	r2, [pc, #28]	@ (80080d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80080b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	4a06      	ldr	r2, [pc, #24]	@ (80080d4 <vApplicationGetIdleTaskMemory+0x30>)
 80080ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2280      	movs	r2, #128	@ 0x80
 80080c0:	601a      	str	r2, [r3, #0]
}
 80080c2:	bf00      	nop
 80080c4:	3714      	adds	r7, #20
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr
 80080ce:	bf00      	nop
 80080d0:	200004f8 	.word	0x200004f8
 80080d4:	200005a8 	.word	0x200005a8

080080d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80080d8:	b480      	push	{r7}
 80080da:	b085      	sub	sp, #20
 80080dc:	af00      	add	r7, sp, #0
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	60b9      	str	r1, [r7, #8]
 80080e2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	4a07      	ldr	r2, [pc, #28]	@ (8008104 <vApplicationGetTimerTaskMemory+0x2c>)
 80080e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	4a06      	ldr	r2, [pc, #24]	@ (8008108 <vApplicationGetTimerTaskMemory+0x30>)
 80080ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80080f6:	601a      	str	r2, [r3, #0]
}
 80080f8:	bf00      	nop
 80080fa:	3714      	adds	r7, #20
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr
 8008104:	200007a8 	.word	0x200007a8
 8008108:	20000858 	.word	0x20000858

0800810c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f103 0208 	add.w	r2, r3, #8
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008124:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f103 0208 	add.w	r2, r3, #8
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f103 0208 	add.w	r2, r3, #8
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2200      	movs	r2, #0
 800813e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008140:	bf00      	nop
 8008142:	370c      	adds	r7, #12
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800815a:	bf00      	nop
 800815c:	370c      	adds	r7, #12
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr

08008166 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008166:	b480      	push	{r7}
 8008168:	b085      	sub	sp, #20
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
 800816e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	689a      	ldr	r2, [r3, #8]
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	683a      	ldr	r2, [r7, #0]
 800818a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	683a      	ldr	r2, [r7, #0]
 8008190:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	1c5a      	adds	r2, r3, #1
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	601a      	str	r2, [r3, #0]
}
 80081a2:	bf00      	nop
 80081a4:	3714      	adds	r7, #20
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr

080081ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80081ae:	b480      	push	{r7}
 80081b0:	b085      	sub	sp, #20
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
 80081b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80081c4:	d103      	bne.n	80081ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	60fb      	str	r3, [r7, #12]
 80081cc:	e00c      	b.n	80081e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	3308      	adds	r3, #8
 80081d2:	60fb      	str	r3, [r7, #12]
 80081d4:	e002      	b.n	80081dc <vListInsert+0x2e>
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	60fb      	str	r3, [r7, #12]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	68ba      	ldr	r2, [r7, #8]
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d2f6      	bcs.n	80081d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	685a      	ldr	r2, [r3, #4]
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	683a      	ldr	r2, [r7, #0]
 80081f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	68fa      	ldr	r2, [r7, #12]
 80081fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	683a      	ldr	r2, [r7, #0]
 8008202:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	1c5a      	adds	r2, r3, #1
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	601a      	str	r2, [r3, #0]
}
 8008214:	bf00      	nop
 8008216:	3714      	adds	r7, #20
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008220:	b480      	push	{r7}
 8008222:	b085      	sub	sp, #20
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	691b      	ldr	r3, [r3, #16]
 800822c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	6892      	ldr	r2, [r2, #8]
 8008236:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	6852      	ldr	r2, [r2, #4]
 8008240:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	429a      	cmp	r2, r3
 800824a:	d103      	bne.n	8008254 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	689a      	ldr	r2, [r3, #8]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	1e5a      	subs	r2, r3, #1
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
}
 8008268:	4618      	mov	r0, r3
 800826a:	3714      	adds	r7, #20
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d10b      	bne.n	80082a0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800828c:	f383 8811 	msr	BASEPRI, r3
 8008290:	f3bf 8f6f 	isb	sy
 8008294:	f3bf 8f4f 	dsb	sy
 8008298:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800829a:	bf00      	nop
 800829c:	bf00      	nop
 800829e:	e7fd      	b.n	800829c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80082a0:	f002 fa7a 	bl	800a798 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082ac:	68f9      	ldr	r1, [r7, #12]
 80082ae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80082b0:	fb01 f303 	mul.w	r3, r1, r3
 80082b4:	441a      	add	r2, r3
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2200      	movs	r2, #0
 80082be:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082d0:	3b01      	subs	r3, #1
 80082d2:	68f9      	ldr	r1, [r7, #12]
 80082d4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80082d6:	fb01 f303 	mul.w	r3, r1, r3
 80082da:	441a      	add	r2, r3
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	22ff      	movs	r2, #255	@ 0xff
 80082e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	22ff      	movs	r2, #255	@ 0xff
 80082ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d114      	bne.n	8008320 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	691b      	ldr	r3, [r3, #16]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d01a      	beq.n	8008334 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	3310      	adds	r3, #16
 8008302:	4618      	mov	r0, r3
 8008304:	f001 fac0 	bl	8009888 <xTaskRemoveFromEventList>
 8008308:	4603      	mov	r3, r0
 800830a:	2b00      	cmp	r3, #0
 800830c:	d012      	beq.n	8008334 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800830e:	4b0d      	ldr	r3, [pc, #52]	@ (8008344 <xQueueGenericReset+0xd0>)
 8008310:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008314:	601a      	str	r2, [r3, #0]
 8008316:	f3bf 8f4f 	dsb	sy
 800831a:	f3bf 8f6f 	isb	sy
 800831e:	e009      	b.n	8008334 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	3310      	adds	r3, #16
 8008324:	4618      	mov	r0, r3
 8008326:	f7ff fef1 	bl	800810c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	3324      	adds	r3, #36	@ 0x24
 800832e:	4618      	mov	r0, r3
 8008330:	f7ff feec 	bl	800810c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008334:	f002 fa62 	bl	800a7fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008338:	2301      	movs	r3, #1
}
 800833a:	4618      	mov	r0, r3
 800833c:	3710      	adds	r7, #16
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	e000ed04 	.word	0xe000ed04

08008348 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008348:	b580      	push	{r7, lr}
 800834a:	b08e      	sub	sp, #56	@ 0x38
 800834c:	af02      	add	r7, sp, #8
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	607a      	str	r2, [r7, #4]
 8008354:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d10b      	bne.n	8008374 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800835c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008360:	f383 8811 	msr	BASEPRI, r3
 8008364:	f3bf 8f6f 	isb	sy
 8008368:	f3bf 8f4f 	dsb	sy
 800836c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800836e:	bf00      	nop
 8008370:	bf00      	nop
 8008372:	e7fd      	b.n	8008370 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d10b      	bne.n	8008392 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800837a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800837e:	f383 8811 	msr	BASEPRI, r3
 8008382:	f3bf 8f6f 	isb	sy
 8008386:	f3bf 8f4f 	dsb	sy
 800838a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800838c:	bf00      	nop
 800838e:	bf00      	nop
 8008390:	e7fd      	b.n	800838e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d002      	beq.n	800839e <xQueueGenericCreateStatic+0x56>
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d001      	beq.n	80083a2 <xQueueGenericCreateStatic+0x5a>
 800839e:	2301      	movs	r3, #1
 80083a0:	e000      	b.n	80083a4 <xQueueGenericCreateStatic+0x5c>
 80083a2:	2300      	movs	r3, #0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d10b      	bne.n	80083c0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80083a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ac:	f383 8811 	msr	BASEPRI, r3
 80083b0:	f3bf 8f6f 	isb	sy
 80083b4:	f3bf 8f4f 	dsb	sy
 80083b8:	623b      	str	r3, [r7, #32]
}
 80083ba:	bf00      	nop
 80083bc:	bf00      	nop
 80083be:	e7fd      	b.n	80083bc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d102      	bne.n	80083cc <xQueueGenericCreateStatic+0x84>
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d101      	bne.n	80083d0 <xQueueGenericCreateStatic+0x88>
 80083cc:	2301      	movs	r3, #1
 80083ce:	e000      	b.n	80083d2 <xQueueGenericCreateStatic+0x8a>
 80083d0:	2300      	movs	r3, #0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d10b      	bne.n	80083ee <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80083d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083da:	f383 8811 	msr	BASEPRI, r3
 80083de:	f3bf 8f6f 	isb	sy
 80083e2:	f3bf 8f4f 	dsb	sy
 80083e6:	61fb      	str	r3, [r7, #28]
}
 80083e8:	bf00      	nop
 80083ea:	bf00      	nop
 80083ec:	e7fd      	b.n	80083ea <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80083ee:	2350      	movs	r3, #80	@ 0x50
 80083f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	2b50      	cmp	r3, #80	@ 0x50
 80083f6:	d00b      	beq.n	8008410 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80083f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083fc:	f383 8811 	msr	BASEPRI, r3
 8008400:	f3bf 8f6f 	isb	sy
 8008404:	f3bf 8f4f 	dsb	sy
 8008408:	61bb      	str	r3, [r7, #24]
}
 800840a:	bf00      	nop
 800840c:	bf00      	nop
 800840e:	e7fd      	b.n	800840c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008410:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008418:	2b00      	cmp	r3, #0
 800841a:	d00d      	beq.n	8008438 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800841c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800841e:	2201      	movs	r2, #1
 8008420:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008424:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800842a:	9300      	str	r3, [sp, #0]
 800842c:	4613      	mov	r3, r2
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	68b9      	ldr	r1, [r7, #8]
 8008432:	68f8      	ldr	r0, [r7, #12]
 8008434:	f000 f840 	bl	80084b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800843a:	4618      	mov	r0, r3
 800843c:	3730      	adds	r7, #48	@ 0x30
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}

08008442 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008442:	b580      	push	{r7, lr}
 8008444:	b08a      	sub	sp, #40	@ 0x28
 8008446:	af02      	add	r7, sp, #8
 8008448:	60f8      	str	r0, [r7, #12]
 800844a:	60b9      	str	r1, [r7, #8]
 800844c:	4613      	mov	r3, r2
 800844e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d10b      	bne.n	800846e <xQueueGenericCreate+0x2c>
	__asm volatile
 8008456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800845a:	f383 8811 	msr	BASEPRI, r3
 800845e:	f3bf 8f6f 	isb	sy
 8008462:	f3bf 8f4f 	dsb	sy
 8008466:	613b      	str	r3, [r7, #16]
}
 8008468:	bf00      	nop
 800846a:	bf00      	nop
 800846c:	e7fd      	b.n	800846a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	68ba      	ldr	r2, [r7, #8]
 8008472:	fb02 f303 	mul.w	r3, r2, r3
 8008476:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008478:	69fb      	ldr	r3, [r7, #28]
 800847a:	3350      	adds	r3, #80	@ 0x50
 800847c:	4618      	mov	r0, r3
 800847e:	f002 fb91 	bl	800aba4 <pvPortMalloc>
 8008482:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d011      	beq.n	80084ae <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	3350      	adds	r3, #80	@ 0x50
 8008492:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	2200      	movs	r2, #0
 8008498:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800849c:	79fa      	ldrb	r2, [r7, #7]
 800849e:	69bb      	ldr	r3, [r7, #24]
 80084a0:	9300      	str	r3, [sp, #0]
 80084a2:	4613      	mov	r3, r2
 80084a4:	697a      	ldr	r2, [r7, #20]
 80084a6:	68b9      	ldr	r1, [r7, #8]
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f000 f805 	bl	80084b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80084ae:	69bb      	ldr	r3, [r7, #24]
	}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3720      	adds	r7, #32
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]
 80084c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d103      	bne.n	80084d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	69ba      	ldr	r2, [r7, #24]
 80084d0:	601a      	str	r2, [r3, #0]
 80084d2:	e002      	b.n	80084da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	68fa      	ldr	r2, [r7, #12]
 80084de:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80084e0:	69bb      	ldr	r3, [r7, #24]
 80084e2:	68ba      	ldr	r2, [r7, #8]
 80084e4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80084e6:	2101      	movs	r1, #1
 80084e8:	69b8      	ldr	r0, [r7, #24]
 80084ea:	f7ff fec3 	bl	8008274 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	78fa      	ldrb	r2, [r7, #3]
 80084f2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80084f6:	bf00      	nop
 80084f8:	3710      	adds	r7, #16
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
	...

08008500 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b08e      	sub	sp, #56	@ 0x38
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	60b9      	str	r1, [r7, #8]
 800850a:	607a      	str	r2, [r7, #4]
 800850c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800850e:	2300      	movs	r3, #0
 8008510:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008518:	2b00      	cmp	r3, #0
 800851a:	d10b      	bne.n	8008534 <xQueueGenericSend+0x34>
	__asm volatile
 800851c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008520:	f383 8811 	msr	BASEPRI, r3
 8008524:	f3bf 8f6f 	isb	sy
 8008528:	f3bf 8f4f 	dsb	sy
 800852c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800852e:	bf00      	nop
 8008530:	bf00      	nop
 8008532:	e7fd      	b.n	8008530 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d103      	bne.n	8008542 <xQueueGenericSend+0x42>
 800853a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800853c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800853e:	2b00      	cmp	r3, #0
 8008540:	d101      	bne.n	8008546 <xQueueGenericSend+0x46>
 8008542:	2301      	movs	r3, #1
 8008544:	e000      	b.n	8008548 <xQueueGenericSend+0x48>
 8008546:	2300      	movs	r3, #0
 8008548:	2b00      	cmp	r3, #0
 800854a:	d10b      	bne.n	8008564 <xQueueGenericSend+0x64>
	__asm volatile
 800854c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008550:	f383 8811 	msr	BASEPRI, r3
 8008554:	f3bf 8f6f 	isb	sy
 8008558:	f3bf 8f4f 	dsb	sy
 800855c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800855e:	bf00      	nop
 8008560:	bf00      	nop
 8008562:	e7fd      	b.n	8008560 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	2b02      	cmp	r3, #2
 8008568:	d103      	bne.n	8008572 <xQueueGenericSend+0x72>
 800856a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800856c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800856e:	2b01      	cmp	r3, #1
 8008570:	d101      	bne.n	8008576 <xQueueGenericSend+0x76>
 8008572:	2301      	movs	r3, #1
 8008574:	e000      	b.n	8008578 <xQueueGenericSend+0x78>
 8008576:	2300      	movs	r3, #0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d10b      	bne.n	8008594 <xQueueGenericSend+0x94>
	__asm volatile
 800857c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008580:	f383 8811 	msr	BASEPRI, r3
 8008584:	f3bf 8f6f 	isb	sy
 8008588:	f3bf 8f4f 	dsb	sy
 800858c:	623b      	str	r3, [r7, #32]
}
 800858e:	bf00      	nop
 8008590:	bf00      	nop
 8008592:	e7fd      	b.n	8008590 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008594:	f001 fb96 	bl	8009cc4 <xTaskGetSchedulerState>
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	d102      	bne.n	80085a4 <xQueueGenericSend+0xa4>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d101      	bne.n	80085a8 <xQueueGenericSend+0xa8>
 80085a4:	2301      	movs	r3, #1
 80085a6:	e000      	b.n	80085aa <xQueueGenericSend+0xaa>
 80085a8:	2300      	movs	r3, #0
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d10b      	bne.n	80085c6 <xQueueGenericSend+0xc6>
	__asm volatile
 80085ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085b2:	f383 8811 	msr	BASEPRI, r3
 80085b6:	f3bf 8f6f 	isb	sy
 80085ba:	f3bf 8f4f 	dsb	sy
 80085be:	61fb      	str	r3, [r7, #28]
}
 80085c0:	bf00      	nop
 80085c2:	bf00      	nop
 80085c4:	e7fd      	b.n	80085c2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80085c6:	f002 f8e7 	bl	800a798 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80085ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d302      	bcc.n	80085dc <xQueueGenericSend+0xdc>
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	2b02      	cmp	r3, #2
 80085da:	d129      	bne.n	8008630 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80085dc:	683a      	ldr	r2, [r7, #0]
 80085de:	68b9      	ldr	r1, [r7, #8]
 80085e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80085e2:	f000 facf 	bl	8008b84 <prvCopyDataToQueue>
 80085e6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d010      	beq.n	8008612 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f2:	3324      	adds	r3, #36	@ 0x24
 80085f4:	4618      	mov	r0, r3
 80085f6:	f001 f947 	bl	8009888 <xTaskRemoveFromEventList>
 80085fa:	4603      	mov	r3, r0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d013      	beq.n	8008628 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008600:	4b3f      	ldr	r3, [pc, #252]	@ (8008700 <xQueueGenericSend+0x200>)
 8008602:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008606:	601a      	str	r2, [r3, #0]
 8008608:	f3bf 8f4f 	dsb	sy
 800860c:	f3bf 8f6f 	isb	sy
 8008610:	e00a      	b.n	8008628 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008614:	2b00      	cmp	r3, #0
 8008616:	d007      	beq.n	8008628 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008618:	4b39      	ldr	r3, [pc, #228]	@ (8008700 <xQueueGenericSend+0x200>)
 800861a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800861e:	601a      	str	r2, [r3, #0]
 8008620:	f3bf 8f4f 	dsb	sy
 8008624:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008628:	f002 f8e8 	bl	800a7fc <vPortExitCritical>
				return pdPASS;
 800862c:	2301      	movs	r3, #1
 800862e:	e063      	b.n	80086f8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d103      	bne.n	800863e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008636:	f002 f8e1 	bl	800a7fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800863a:	2300      	movs	r3, #0
 800863c:	e05c      	b.n	80086f8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800863e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008640:	2b00      	cmp	r3, #0
 8008642:	d106      	bne.n	8008652 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008644:	f107 0314 	add.w	r3, r7, #20
 8008648:	4618      	mov	r0, r3
 800864a:	f001 f983 	bl	8009954 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800864e:	2301      	movs	r3, #1
 8008650:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008652:	f002 f8d3 	bl	800a7fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008656:	f000 fe6f 	bl	8009338 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800865a:	f002 f89d 	bl	800a798 <vPortEnterCritical>
 800865e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008660:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008664:	b25b      	sxtb	r3, r3
 8008666:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800866a:	d103      	bne.n	8008674 <xQueueGenericSend+0x174>
 800866c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800866e:	2200      	movs	r2, #0
 8008670:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008676:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800867a:	b25b      	sxtb	r3, r3
 800867c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008680:	d103      	bne.n	800868a <xQueueGenericSend+0x18a>
 8008682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008684:	2200      	movs	r2, #0
 8008686:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800868a:	f002 f8b7 	bl	800a7fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800868e:	1d3a      	adds	r2, r7, #4
 8008690:	f107 0314 	add.w	r3, r7, #20
 8008694:	4611      	mov	r1, r2
 8008696:	4618      	mov	r0, r3
 8008698:	f001 f972 	bl	8009980 <xTaskCheckForTimeOut>
 800869c:	4603      	mov	r3, r0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d124      	bne.n	80086ec <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80086a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80086a4:	f000 fb66 	bl	8008d74 <prvIsQueueFull>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d018      	beq.n	80086e0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80086ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b0:	3310      	adds	r3, #16
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	4611      	mov	r1, r2
 80086b6:	4618      	mov	r0, r3
 80086b8:	f001 f894 	bl	80097e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80086bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80086be:	f000 faf1 	bl	8008ca4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80086c2:	f000 fe7f 	bl	80093c4 <xTaskResumeAll>
 80086c6:	4603      	mov	r3, r0
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	f47f af7c 	bne.w	80085c6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80086ce:	4b0c      	ldr	r3, [pc, #48]	@ (8008700 <xQueueGenericSend+0x200>)
 80086d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086d4:	601a      	str	r2, [r3, #0]
 80086d6:	f3bf 8f4f 	dsb	sy
 80086da:	f3bf 8f6f 	isb	sy
 80086de:	e772      	b.n	80085c6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80086e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80086e2:	f000 fadf 	bl	8008ca4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80086e6:	f000 fe6d 	bl	80093c4 <xTaskResumeAll>
 80086ea:	e76c      	b.n	80085c6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80086ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80086ee:	f000 fad9 	bl	8008ca4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80086f2:	f000 fe67 	bl	80093c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80086f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3738      	adds	r7, #56	@ 0x38
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}
 8008700:	e000ed04 	.word	0xe000ed04

08008704 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b090      	sub	sp, #64	@ 0x40
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	607a      	str	r2, [r7, #4]
 8008710:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008718:	2b00      	cmp	r3, #0
 800871a:	d10b      	bne.n	8008734 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800871c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008720:	f383 8811 	msr	BASEPRI, r3
 8008724:	f3bf 8f6f 	isb	sy
 8008728:	f3bf 8f4f 	dsb	sy
 800872c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800872e:	bf00      	nop
 8008730:	bf00      	nop
 8008732:	e7fd      	b.n	8008730 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d103      	bne.n	8008742 <xQueueGenericSendFromISR+0x3e>
 800873a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800873c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800873e:	2b00      	cmp	r3, #0
 8008740:	d101      	bne.n	8008746 <xQueueGenericSendFromISR+0x42>
 8008742:	2301      	movs	r3, #1
 8008744:	e000      	b.n	8008748 <xQueueGenericSendFromISR+0x44>
 8008746:	2300      	movs	r3, #0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d10b      	bne.n	8008764 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800874c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008750:	f383 8811 	msr	BASEPRI, r3
 8008754:	f3bf 8f6f 	isb	sy
 8008758:	f3bf 8f4f 	dsb	sy
 800875c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800875e:	bf00      	nop
 8008760:	bf00      	nop
 8008762:	e7fd      	b.n	8008760 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	2b02      	cmp	r3, #2
 8008768:	d103      	bne.n	8008772 <xQueueGenericSendFromISR+0x6e>
 800876a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800876c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800876e:	2b01      	cmp	r3, #1
 8008770:	d101      	bne.n	8008776 <xQueueGenericSendFromISR+0x72>
 8008772:	2301      	movs	r3, #1
 8008774:	e000      	b.n	8008778 <xQueueGenericSendFromISR+0x74>
 8008776:	2300      	movs	r3, #0
 8008778:	2b00      	cmp	r3, #0
 800877a:	d10b      	bne.n	8008794 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800877c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008780:	f383 8811 	msr	BASEPRI, r3
 8008784:	f3bf 8f6f 	isb	sy
 8008788:	f3bf 8f4f 	dsb	sy
 800878c:	623b      	str	r3, [r7, #32]
}
 800878e:	bf00      	nop
 8008790:	bf00      	nop
 8008792:	e7fd      	b.n	8008790 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008794:	f002 f9c4 	bl	800ab20 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008798:	f3ef 8211 	mrs	r2, BASEPRI
 800879c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a0:	f383 8811 	msr	BASEPRI, r3
 80087a4:	f3bf 8f6f 	isb	sy
 80087a8:	f3bf 8f4f 	dsb	sy
 80087ac:	61fa      	str	r2, [r7, #28]
 80087ae:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80087b0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80087b2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80087b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087bc:	429a      	cmp	r2, r3
 80087be:	d302      	bcc.n	80087c6 <xQueueGenericSendFromISR+0xc2>
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	2b02      	cmp	r3, #2
 80087c4:	d12f      	bne.n	8008826 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80087c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80087cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80087d6:	683a      	ldr	r2, [r7, #0]
 80087d8:	68b9      	ldr	r1, [r7, #8]
 80087da:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80087dc:	f000 f9d2 	bl	8008b84 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80087e0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80087e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80087e8:	d112      	bne.n	8008810 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80087ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d016      	beq.n	8008820 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80087f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087f4:	3324      	adds	r3, #36	@ 0x24
 80087f6:	4618      	mov	r0, r3
 80087f8:	f001 f846 	bl	8009888 <xTaskRemoveFromEventList>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00e      	beq.n	8008820 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d00b      	beq.n	8008820 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	601a      	str	r2, [r3, #0]
 800880e:	e007      	b.n	8008820 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008810:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008814:	3301      	adds	r3, #1
 8008816:	b2db      	uxtb	r3, r3
 8008818:	b25a      	sxtb	r2, r3
 800881a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800881c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008820:	2301      	movs	r3, #1
 8008822:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008824:	e001      	b.n	800882a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008826:	2300      	movs	r3, #0
 8008828:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800882a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800882c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008834:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008836:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008838:	4618      	mov	r0, r3
 800883a:	3740      	adds	r7, #64	@ 0x40
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b08c      	sub	sp, #48	@ 0x30
 8008844:	af00      	add	r7, sp, #0
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	60b9      	str	r1, [r7, #8]
 800884a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800884c:	2300      	movs	r3, #0
 800884e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008856:	2b00      	cmp	r3, #0
 8008858:	d10b      	bne.n	8008872 <xQueueReceive+0x32>
	__asm volatile
 800885a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800885e:	f383 8811 	msr	BASEPRI, r3
 8008862:	f3bf 8f6f 	isb	sy
 8008866:	f3bf 8f4f 	dsb	sy
 800886a:	623b      	str	r3, [r7, #32]
}
 800886c:	bf00      	nop
 800886e:	bf00      	nop
 8008870:	e7fd      	b.n	800886e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d103      	bne.n	8008880 <xQueueReceive+0x40>
 8008878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800887a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800887c:	2b00      	cmp	r3, #0
 800887e:	d101      	bne.n	8008884 <xQueueReceive+0x44>
 8008880:	2301      	movs	r3, #1
 8008882:	e000      	b.n	8008886 <xQueueReceive+0x46>
 8008884:	2300      	movs	r3, #0
 8008886:	2b00      	cmp	r3, #0
 8008888:	d10b      	bne.n	80088a2 <xQueueReceive+0x62>
	__asm volatile
 800888a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800888e:	f383 8811 	msr	BASEPRI, r3
 8008892:	f3bf 8f6f 	isb	sy
 8008896:	f3bf 8f4f 	dsb	sy
 800889a:	61fb      	str	r3, [r7, #28]
}
 800889c:	bf00      	nop
 800889e:	bf00      	nop
 80088a0:	e7fd      	b.n	800889e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80088a2:	f001 fa0f 	bl	8009cc4 <xTaskGetSchedulerState>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d102      	bne.n	80088b2 <xQueueReceive+0x72>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d101      	bne.n	80088b6 <xQueueReceive+0x76>
 80088b2:	2301      	movs	r3, #1
 80088b4:	e000      	b.n	80088b8 <xQueueReceive+0x78>
 80088b6:	2300      	movs	r3, #0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d10b      	bne.n	80088d4 <xQueueReceive+0x94>
	__asm volatile
 80088bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c0:	f383 8811 	msr	BASEPRI, r3
 80088c4:	f3bf 8f6f 	isb	sy
 80088c8:	f3bf 8f4f 	dsb	sy
 80088cc:	61bb      	str	r3, [r7, #24]
}
 80088ce:	bf00      	nop
 80088d0:	bf00      	nop
 80088d2:	e7fd      	b.n	80088d0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80088d4:	f001 ff60 	bl	800a798 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088dc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80088de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d01f      	beq.n	8008924 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80088e4:	68b9      	ldr	r1, [r7, #8]
 80088e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088e8:	f000 f9b6 	bl	8008c58 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80088ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ee:	1e5a      	subs	r2, r3, #1
 80088f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088f2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088f6:	691b      	ldr	r3, [r3, #16]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d00f      	beq.n	800891c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088fe:	3310      	adds	r3, #16
 8008900:	4618      	mov	r0, r3
 8008902:	f000 ffc1 	bl	8009888 <xTaskRemoveFromEventList>
 8008906:	4603      	mov	r3, r0
 8008908:	2b00      	cmp	r3, #0
 800890a:	d007      	beq.n	800891c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800890c:	4b3c      	ldr	r3, [pc, #240]	@ (8008a00 <xQueueReceive+0x1c0>)
 800890e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008912:	601a      	str	r2, [r3, #0]
 8008914:	f3bf 8f4f 	dsb	sy
 8008918:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800891c:	f001 ff6e 	bl	800a7fc <vPortExitCritical>
				return pdPASS;
 8008920:	2301      	movs	r3, #1
 8008922:	e069      	b.n	80089f8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d103      	bne.n	8008932 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800892a:	f001 ff67 	bl	800a7fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800892e:	2300      	movs	r3, #0
 8008930:	e062      	b.n	80089f8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008934:	2b00      	cmp	r3, #0
 8008936:	d106      	bne.n	8008946 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008938:	f107 0310 	add.w	r3, r7, #16
 800893c:	4618      	mov	r0, r3
 800893e:	f001 f809 	bl	8009954 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008942:	2301      	movs	r3, #1
 8008944:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008946:	f001 ff59 	bl	800a7fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800894a:	f000 fcf5 	bl	8009338 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800894e:	f001 ff23 	bl	800a798 <vPortEnterCritical>
 8008952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008954:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008958:	b25b      	sxtb	r3, r3
 800895a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800895e:	d103      	bne.n	8008968 <xQueueReceive+0x128>
 8008960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008962:	2200      	movs	r2, #0
 8008964:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800896a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800896e:	b25b      	sxtb	r3, r3
 8008970:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008974:	d103      	bne.n	800897e <xQueueReceive+0x13e>
 8008976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008978:	2200      	movs	r2, #0
 800897a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800897e:	f001 ff3d 	bl	800a7fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008982:	1d3a      	adds	r2, r7, #4
 8008984:	f107 0310 	add.w	r3, r7, #16
 8008988:	4611      	mov	r1, r2
 800898a:	4618      	mov	r0, r3
 800898c:	f000 fff8 	bl	8009980 <xTaskCheckForTimeOut>
 8008990:	4603      	mov	r3, r0
 8008992:	2b00      	cmp	r3, #0
 8008994:	d123      	bne.n	80089de <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008996:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008998:	f000 f9d6 	bl	8008d48 <prvIsQueueEmpty>
 800899c:	4603      	mov	r3, r0
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d017      	beq.n	80089d2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80089a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089a4:	3324      	adds	r3, #36	@ 0x24
 80089a6:	687a      	ldr	r2, [r7, #4]
 80089a8:	4611      	mov	r1, r2
 80089aa:	4618      	mov	r0, r3
 80089ac:	f000 ff1a 	bl	80097e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80089b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089b2:	f000 f977 	bl	8008ca4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80089b6:	f000 fd05 	bl	80093c4 <xTaskResumeAll>
 80089ba:	4603      	mov	r3, r0
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d189      	bne.n	80088d4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80089c0:	4b0f      	ldr	r3, [pc, #60]	@ (8008a00 <xQueueReceive+0x1c0>)
 80089c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089c6:	601a      	str	r2, [r3, #0]
 80089c8:	f3bf 8f4f 	dsb	sy
 80089cc:	f3bf 8f6f 	isb	sy
 80089d0:	e780      	b.n	80088d4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80089d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089d4:	f000 f966 	bl	8008ca4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80089d8:	f000 fcf4 	bl	80093c4 <xTaskResumeAll>
 80089dc:	e77a      	b.n	80088d4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80089de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089e0:	f000 f960 	bl	8008ca4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80089e4:	f000 fcee 	bl	80093c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80089e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089ea:	f000 f9ad 	bl	8008d48 <prvIsQueueEmpty>
 80089ee:	4603      	mov	r3, r0
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f43f af6f 	beq.w	80088d4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80089f6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3730      	adds	r7, #48	@ 0x30
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	e000ed04 	.word	0xe000ed04

08008a04 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b08e      	sub	sp, #56	@ 0x38
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d10b      	bne.n	8008a32 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8008a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a1e:	f383 8811 	msr	BASEPRI, r3
 8008a22:	f3bf 8f6f 	isb	sy
 8008a26:	f3bf 8f4f 	dsb	sy
 8008a2a:	623b      	str	r3, [r7, #32]
}
 8008a2c:	bf00      	nop
 8008a2e:	bf00      	nop
 8008a30:	e7fd      	b.n	8008a2e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d103      	bne.n	8008a40 <xQueueReceiveFromISR+0x3c>
 8008a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d101      	bne.n	8008a44 <xQueueReceiveFromISR+0x40>
 8008a40:	2301      	movs	r3, #1
 8008a42:	e000      	b.n	8008a46 <xQueueReceiveFromISR+0x42>
 8008a44:	2300      	movs	r3, #0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d10b      	bne.n	8008a62 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8008a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a4e:	f383 8811 	msr	BASEPRI, r3
 8008a52:	f3bf 8f6f 	isb	sy
 8008a56:	f3bf 8f4f 	dsb	sy
 8008a5a:	61fb      	str	r3, [r7, #28]
}
 8008a5c:	bf00      	nop
 8008a5e:	bf00      	nop
 8008a60:	e7fd      	b.n	8008a5e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a62:	f002 f85d 	bl	800ab20 <vPortValidateInterruptPriority>
	__asm volatile
 8008a66:	f3ef 8211 	mrs	r2, BASEPRI
 8008a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a6e:	f383 8811 	msr	BASEPRI, r3
 8008a72:	f3bf 8f6f 	isb	sy
 8008a76:	f3bf 8f4f 	dsb	sy
 8008a7a:	61ba      	str	r2, [r7, #24]
 8008a7c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008a7e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a86:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d02f      	beq.n	8008aee <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008a98:	68b9      	ldr	r1, [r7, #8]
 8008a9a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a9c:	f000 f8dc 	bl	8008c58 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aa2:	1e5a      	subs	r2, r3, #1
 8008aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008aa8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008aac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ab0:	d112      	bne.n	8008ad8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ab4:	691b      	ldr	r3, [r3, #16]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d016      	beq.n	8008ae8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008abc:	3310      	adds	r3, #16
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f000 fee2 	bl	8009888 <xTaskRemoveFromEventList>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d00e      	beq.n	8008ae8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d00b      	beq.n	8008ae8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	601a      	str	r2, [r3, #0]
 8008ad6:	e007      	b.n	8008ae8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008ad8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008adc:	3301      	adds	r3, #1
 8008ade:	b2db      	uxtb	r3, r3
 8008ae0:	b25a      	sxtb	r2, r3
 8008ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	637b      	str	r3, [r7, #52]	@ 0x34
 8008aec:	e001      	b.n	8008af2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8008aee:	2300      	movs	r3, #0
 8008af0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008af4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	f383 8811 	msr	BASEPRI, r3
}
 8008afc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008afe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3738      	adds	r7, #56	@ 0x38
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d10b      	bne.n	8008b2e <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8008b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b1a:	f383 8811 	msr	BASEPRI, r3
 8008b1e:	f3bf 8f6f 	isb	sy
 8008b22:	f3bf 8f4f 	dsb	sy
 8008b26:	60bb      	str	r3, [r7, #8]
}
 8008b28:	bf00      	nop
 8008b2a:	bf00      	nop
 8008b2c:	e7fd      	b.n	8008b2a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8008b2e:	f001 fe33 	bl	800a798 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b36:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8008b38:	f001 fe60 	bl	800a7fc <vPortExitCritical>

	return uxReturn;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8008b46:	b480      	push	{r7}
 8008b48:	b087      	sub	sp, #28
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d10b      	bne.n	8008b70 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 8008b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b5c:	f383 8811 	msr	BASEPRI, r3
 8008b60:	f3bf 8f6f 	isb	sy
 8008b64:	f3bf 8f4f 	dsb	sy
 8008b68:	60fb      	str	r3, [r7, #12]
}
 8008b6a:	bf00      	nop
 8008b6c:	bf00      	nop
 8008b6e:	e7fd      	b.n	8008b6c <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b74:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8008b76:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008b78:	4618      	mov	r0, r3
 8008b7a:	371c      	adds	r7, #28
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b086      	sub	sp, #24
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	60b9      	str	r1, [r7, #8]
 8008b8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008b90:	2300      	movs	r3, #0
 8008b92:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b98:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d10d      	bne.n	8008bbe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d14d      	bne.n	8008c46 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f001 f8a6 	bl	8009d00 <xTaskPriorityDisinherit>
 8008bb4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	609a      	str	r2, [r3, #8]
 8008bbc:	e043      	b.n	8008c46 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d119      	bne.n	8008bf8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	6858      	ldr	r0, [r3, #4]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bcc:	461a      	mov	r2, r3
 8008bce:	68b9      	ldr	r1, [r7, #8]
 8008bd0:	f003 f941 	bl	800be56 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	685a      	ldr	r2, [r3, #4]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bdc:	441a      	add	r2, r3
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	685a      	ldr	r2, [r3, #4]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	689b      	ldr	r3, [r3, #8]
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d32b      	bcc.n	8008c46 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	605a      	str	r2, [r3, #4]
 8008bf6:	e026      	b.n	8008c46 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	68d8      	ldr	r0, [r3, #12]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c00:	461a      	mov	r2, r3
 8008c02:	68b9      	ldr	r1, [r7, #8]
 8008c04:	f003 f927 	bl	800be56 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	68da      	ldr	r2, [r3, #12]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c10:	425b      	negs	r3, r3
 8008c12:	441a      	add	r2, r3
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	68da      	ldr	r2, [r3, #12]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d207      	bcs.n	8008c34 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	689a      	ldr	r2, [r3, #8]
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c2c:	425b      	negs	r3, r3
 8008c2e:	441a      	add	r2, r3
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2b02      	cmp	r3, #2
 8008c38:	d105      	bne.n	8008c46 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d002      	beq.n	8008c46 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	3b01      	subs	r3, #1
 8008c44:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	1c5a      	adds	r2, r3, #1
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008c4e:	697b      	ldr	r3, [r7, #20]
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3718      	adds	r7, #24
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d018      	beq.n	8008c9c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	68da      	ldr	r2, [r3, #12]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c72:	441a      	add	r2, r3
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	68da      	ldr	r2, [r3, #12]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d303      	bcc.n	8008c8c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	68d9      	ldr	r1, [r3, #12]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c94:	461a      	mov	r2, r3
 8008c96:	6838      	ldr	r0, [r7, #0]
 8008c98:	f003 f8dd 	bl	800be56 <memcpy>
	}
}
 8008c9c:	bf00      	nop
 8008c9e:	3708      	adds	r7, #8
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008cac:	f001 fd74 	bl	800a798 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008cb6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008cb8:	e011      	b.n	8008cde <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d012      	beq.n	8008ce8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	3324      	adds	r3, #36	@ 0x24
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f000 fdde 	bl	8009888 <xTaskRemoveFromEventList>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d001      	beq.n	8008cd6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008cd2:	f000 feb9 	bl	8009a48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008cd6:	7bfb      	ldrb	r3, [r7, #15]
 8008cd8:	3b01      	subs	r3, #1
 8008cda:	b2db      	uxtb	r3, r3
 8008cdc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	dce9      	bgt.n	8008cba <prvUnlockQueue+0x16>
 8008ce6:	e000      	b.n	8008cea <prvUnlockQueue+0x46>
					break;
 8008ce8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	22ff      	movs	r2, #255	@ 0xff
 8008cee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008cf2:	f001 fd83 	bl	800a7fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008cf6:	f001 fd4f 	bl	800a798 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008d00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d02:	e011      	b.n	8008d28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	691b      	ldr	r3, [r3, #16]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d012      	beq.n	8008d32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	3310      	adds	r3, #16
 8008d10:	4618      	mov	r0, r3
 8008d12:	f000 fdb9 	bl	8009888 <xTaskRemoveFromEventList>
 8008d16:	4603      	mov	r3, r0
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d001      	beq.n	8008d20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008d1c:	f000 fe94 	bl	8009a48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008d20:	7bbb      	ldrb	r3, [r7, #14]
 8008d22:	3b01      	subs	r3, #1
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	dce9      	bgt.n	8008d04 <prvUnlockQueue+0x60>
 8008d30:	e000      	b.n	8008d34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008d32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	22ff      	movs	r2, #255	@ 0xff
 8008d38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008d3c:	f001 fd5e 	bl	800a7fc <vPortExitCritical>
}
 8008d40:	bf00      	nop
 8008d42:	3710      	adds	r7, #16
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d50:	f001 fd22 	bl	800a798 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d102      	bne.n	8008d62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	60fb      	str	r3, [r7, #12]
 8008d60:	e001      	b.n	8008d66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008d62:	2300      	movs	r3, #0
 8008d64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008d66:	f001 fd49 	bl	800a7fc <vPortExitCritical>

	return xReturn;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3710      	adds	r7, #16
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d7c:	f001 fd0c 	bl	800a798 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d102      	bne.n	8008d92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	60fb      	str	r3, [r7, #12]
 8008d90:	e001      	b.n	8008d96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008d92:	2300      	movs	r3, #0
 8008d94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008d96:	f001 fd31 	bl	800a7fc <vPortExitCritical>

	return xReturn;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3710      	adds	r7, #16
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008da4:	b480      	push	{r7}
 8008da6:	b085      	sub	sp, #20
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008dae:	2300      	movs	r3, #0
 8008db0:	60fb      	str	r3, [r7, #12]
 8008db2:	e014      	b.n	8008dde <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008db4:	4a0f      	ldr	r2, [pc, #60]	@ (8008df4 <vQueueAddToRegistry+0x50>)
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d10b      	bne.n	8008dd8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008dc0:	490c      	ldr	r1, [pc, #48]	@ (8008df4 <vQueueAddToRegistry+0x50>)
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	683a      	ldr	r2, [r7, #0]
 8008dc6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008dca:	4a0a      	ldr	r2, [pc, #40]	@ (8008df4 <vQueueAddToRegistry+0x50>)
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	00db      	lsls	r3, r3, #3
 8008dd0:	4413      	add	r3, r2
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008dd6:	e006      	b.n	8008de6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	3301      	adds	r3, #1
 8008ddc:	60fb      	str	r3, [r7, #12]
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2b0f      	cmp	r3, #15
 8008de2:	d9e7      	bls.n	8008db4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008de4:	bf00      	nop
 8008de6:	bf00      	nop
 8008de8:	3714      	adds	r7, #20
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr
 8008df2:	bf00      	nop
 8008df4:	20000c58 	.word	0x20000c58

08008df8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b086      	sub	sp, #24
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	60f8      	str	r0, [r7, #12]
 8008e00:	60b9      	str	r1, [r7, #8]
 8008e02:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008e08:	f001 fcc6 	bl	800a798 <vPortEnterCritical>
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008e12:	b25b      	sxtb	r3, r3
 8008e14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008e18:	d103      	bne.n	8008e22 <vQueueWaitForMessageRestricted+0x2a>
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008e28:	b25b      	sxtb	r3, r3
 8008e2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008e2e:	d103      	bne.n	8008e38 <vQueueWaitForMessageRestricted+0x40>
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	2200      	movs	r2, #0
 8008e34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e38:	f001 fce0 	bl	800a7fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d106      	bne.n	8008e52 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	3324      	adds	r3, #36	@ 0x24
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	68b9      	ldr	r1, [r7, #8]
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f000 fcef 	bl	8009830 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008e52:	6978      	ldr	r0, [r7, #20]
 8008e54:	f7ff ff26 	bl	8008ca4 <prvUnlockQueue>
	}
 8008e58:	bf00      	nop
 8008e5a:	3718      	adds	r7, #24
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b08e      	sub	sp, #56	@ 0x38
 8008e64:	af04      	add	r7, sp, #16
 8008e66:	60f8      	str	r0, [r7, #12]
 8008e68:	60b9      	str	r1, [r7, #8]
 8008e6a:	607a      	str	r2, [r7, #4]
 8008e6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d10b      	bne.n	8008e8c <xTaskCreateStatic+0x2c>
	__asm volatile
 8008e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e78:	f383 8811 	msr	BASEPRI, r3
 8008e7c:	f3bf 8f6f 	isb	sy
 8008e80:	f3bf 8f4f 	dsb	sy
 8008e84:	623b      	str	r3, [r7, #32]
}
 8008e86:	bf00      	nop
 8008e88:	bf00      	nop
 8008e8a:	e7fd      	b.n	8008e88 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d10b      	bne.n	8008eaa <xTaskCreateStatic+0x4a>
	__asm volatile
 8008e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e96:	f383 8811 	msr	BASEPRI, r3
 8008e9a:	f3bf 8f6f 	isb	sy
 8008e9e:	f3bf 8f4f 	dsb	sy
 8008ea2:	61fb      	str	r3, [r7, #28]
}
 8008ea4:	bf00      	nop
 8008ea6:	bf00      	nop
 8008ea8:	e7fd      	b.n	8008ea6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008eaa:	23b0      	movs	r3, #176	@ 0xb0
 8008eac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	2bb0      	cmp	r3, #176	@ 0xb0
 8008eb2:	d00b      	beq.n	8008ecc <xTaskCreateStatic+0x6c>
	__asm volatile
 8008eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eb8:	f383 8811 	msr	BASEPRI, r3
 8008ebc:	f3bf 8f6f 	isb	sy
 8008ec0:	f3bf 8f4f 	dsb	sy
 8008ec4:	61bb      	str	r3, [r7, #24]
}
 8008ec6:	bf00      	nop
 8008ec8:	bf00      	nop
 8008eca:	e7fd      	b.n	8008ec8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008ecc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d01e      	beq.n	8008f12 <xTaskCreateStatic+0xb2>
 8008ed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d01b      	beq.n	8008f12 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008edc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008ee2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee6:	2202      	movs	r2, #2
 8008ee8:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008eec:	2300      	movs	r3, #0
 8008eee:	9303      	str	r3, [sp, #12]
 8008ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef2:	9302      	str	r3, [sp, #8]
 8008ef4:	f107 0314 	add.w	r3, r7, #20
 8008ef8:	9301      	str	r3, [sp, #4]
 8008efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008efc:	9300      	str	r3, [sp, #0]
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	687a      	ldr	r2, [r7, #4]
 8008f02:	68b9      	ldr	r1, [r7, #8]
 8008f04:	68f8      	ldr	r0, [r7, #12]
 8008f06:	f000 f851 	bl	8008fac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008f0c:	f000 f8fc 	bl	8009108 <prvAddNewTaskToReadyList>
 8008f10:	e001      	b.n	8008f16 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008f12:	2300      	movs	r3, #0
 8008f14:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008f16:	697b      	ldr	r3, [r7, #20]
	}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3728      	adds	r7, #40	@ 0x28
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b08c      	sub	sp, #48	@ 0x30
 8008f24:	af04      	add	r7, sp, #16
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	603b      	str	r3, [r7, #0]
 8008f2c:	4613      	mov	r3, r2
 8008f2e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008f30:	88fb      	ldrh	r3, [r7, #6]
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	4618      	mov	r0, r3
 8008f36:	f001 fe35 	bl	800aba4 <pvPortMalloc>
 8008f3a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d00e      	beq.n	8008f60 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008f42:	20b0      	movs	r0, #176	@ 0xb0
 8008f44:	f001 fe2e 	bl	800aba4 <pvPortMalloc>
 8008f48:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008f4a:	69fb      	ldr	r3, [r7, #28]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d003      	beq.n	8008f58 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008f50:	69fb      	ldr	r3, [r7, #28]
 8008f52:	697a      	ldr	r2, [r7, #20]
 8008f54:	631a      	str	r2, [r3, #48]	@ 0x30
 8008f56:	e005      	b.n	8008f64 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008f58:	6978      	ldr	r0, [r7, #20]
 8008f5a:	f001 fef1 	bl	800ad40 <vPortFree>
 8008f5e:	e001      	b.n	8008f64 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008f60:	2300      	movs	r3, #0
 8008f62:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008f64:	69fb      	ldr	r3, [r7, #28]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d017      	beq.n	8008f9a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008f6a:	69fb      	ldr	r3, [r7, #28]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008f72:	88fa      	ldrh	r2, [r7, #6]
 8008f74:	2300      	movs	r3, #0
 8008f76:	9303      	str	r3, [sp, #12]
 8008f78:	69fb      	ldr	r3, [r7, #28]
 8008f7a:	9302      	str	r3, [sp, #8]
 8008f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f7e:	9301      	str	r3, [sp, #4]
 8008f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f82:	9300      	str	r3, [sp, #0]
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	68b9      	ldr	r1, [r7, #8]
 8008f88:	68f8      	ldr	r0, [r7, #12]
 8008f8a:	f000 f80f 	bl	8008fac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f8e:	69f8      	ldr	r0, [r7, #28]
 8008f90:	f000 f8ba 	bl	8009108 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008f94:	2301      	movs	r3, #1
 8008f96:	61bb      	str	r3, [r7, #24]
 8008f98:	e002      	b.n	8008fa0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008f9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008f9e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008fa0:	69bb      	ldr	r3, [r7, #24]
	}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3720      	adds	r7, #32
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
	...

08008fac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b088      	sub	sp, #32
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	60f8      	str	r0, [r7, #12]
 8008fb4:	60b9      	str	r1, [r7, #8]
 8008fb6:	607a      	str	r2, [r7, #4]
 8008fb8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fbc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	009b      	lsls	r3, r3, #2
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	21a5      	movs	r1, #165	@ 0xa5
 8008fc6:	f002 fe71 	bl	800bcac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fcc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008fd4:	3b01      	subs	r3, #1
 8008fd6:	009b      	lsls	r3, r3, #2
 8008fd8:	4413      	add	r3, r2
 8008fda:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008fdc:	69bb      	ldr	r3, [r7, #24]
 8008fde:	f023 0307 	bic.w	r3, r3, #7
 8008fe2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008fe4:	69bb      	ldr	r3, [r7, #24]
 8008fe6:	f003 0307 	and.w	r3, r3, #7
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d00b      	beq.n	8009006 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ff2:	f383 8811 	msr	BASEPRI, r3
 8008ff6:	f3bf 8f6f 	isb	sy
 8008ffa:	f3bf 8f4f 	dsb	sy
 8008ffe:	617b      	str	r3, [r7, #20]
}
 8009000:	bf00      	nop
 8009002:	bf00      	nop
 8009004:	e7fd      	b.n	8009002 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8009006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009008:	69ba      	ldr	r2, [r7, #24]
 800900a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d01f      	beq.n	8009052 <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009012:	2300      	movs	r3, #0
 8009014:	61fb      	str	r3, [r7, #28]
 8009016:	e012      	b.n	800903e <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009018:	68ba      	ldr	r2, [r7, #8]
 800901a:	69fb      	ldr	r3, [r7, #28]
 800901c:	4413      	add	r3, r2
 800901e:	7819      	ldrb	r1, [r3, #0]
 8009020:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009022:	69fb      	ldr	r3, [r7, #28]
 8009024:	4413      	add	r3, r2
 8009026:	3334      	adds	r3, #52	@ 0x34
 8009028:	460a      	mov	r2, r1
 800902a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800902c:	68ba      	ldr	r2, [r7, #8]
 800902e:	69fb      	ldr	r3, [r7, #28]
 8009030:	4413      	add	r3, r2
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d006      	beq.n	8009046 <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	3301      	adds	r3, #1
 800903c:	61fb      	str	r3, [r7, #28]
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	2b0f      	cmp	r3, #15
 8009042:	d9e9      	bls.n	8009018 <prvInitialiseNewTask+0x6c>
 8009044:	e000      	b.n	8009048 <prvInitialiseNewTask+0x9c>
			{
				break;
 8009046:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800904a:	2200      	movs	r2, #0
 800904c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009050:	e003      	b.n	800905a <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009054:	2200      	movs	r2, #0
 8009056:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800905a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800905c:	2b37      	cmp	r3, #55	@ 0x37
 800905e:	d901      	bls.n	8009064 <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009060:	2337      	movs	r3, #55	@ 0x37
 8009062:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009066:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009068:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800906a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800906c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800906e:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8009070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009072:	2200      	movs	r2, #0
 8009074:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009078:	3304      	adds	r3, #4
 800907a:	4618      	mov	r0, r3
 800907c:	f7ff f866 	bl	800814c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009082:	3318      	adds	r3, #24
 8009084:	4618      	mov	r0, r3
 8009086:	f7ff f861 	bl	800814c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800908a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800908c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800908e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009092:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009098:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800909a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800909c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800909e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80090a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090a2:	2200      	movs	r2, #0
 80090a4:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80090a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090a8:	2200      	movs	r2, #0
 80090aa:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80090ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b0:	2200      	movs	r2, #0
 80090b2:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80090b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b8:	335c      	adds	r3, #92	@ 0x5c
 80090ba:	224c      	movs	r2, #76	@ 0x4c
 80090bc:	2100      	movs	r1, #0
 80090be:	4618      	mov	r0, r3
 80090c0:	f002 fdf4 	bl	800bcac <memset>
 80090c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c6:	4a0d      	ldr	r2, [pc, #52]	@ (80090fc <prvInitialiseNewTask+0x150>)
 80090c8:	661a      	str	r2, [r3, #96]	@ 0x60
 80090ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090cc:	4a0c      	ldr	r2, [pc, #48]	@ (8009100 <prvInitialiseNewTask+0x154>)
 80090ce:	665a      	str	r2, [r3, #100]	@ 0x64
 80090d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d2:	4a0c      	ldr	r2, [pc, #48]	@ (8009104 <prvInitialiseNewTask+0x158>)
 80090d4:	669a      	str	r2, [r3, #104]	@ 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80090d6:	683a      	ldr	r2, [r7, #0]
 80090d8:	68f9      	ldr	r1, [r7, #12]
 80090da:	69b8      	ldr	r0, [r7, #24]
 80090dc:	f001 fa2e 	bl	800a53c <pxPortInitialiseStack>
 80090e0:	4602      	mov	r2, r0
 80090e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80090e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d002      	beq.n	80090f2 <prvInitialiseNewTask+0x146>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80090ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090f2:	bf00      	nop
 80090f4:	3720      	adds	r7, #32
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
 80090fa:	bf00      	nop
 80090fc:	20004f40 	.word	0x20004f40
 8009100:	20004fa8 	.word	0x20004fa8
 8009104:	20005010 	.word	0x20005010

08009108 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b082      	sub	sp, #8
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009110:	f001 fb42 	bl	800a798 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009114:	4b2d      	ldr	r3, [pc, #180]	@ (80091cc <prvAddNewTaskToReadyList+0xc4>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	3301      	adds	r3, #1
 800911a:	4a2c      	ldr	r2, [pc, #176]	@ (80091cc <prvAddNewTaskToReadyList+0xc4>)
 800911c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800911e:	4b2c      	ldr	r3, [pc, #176]	@ (80091d0 <prvAddNewTaskToReadyList+0xc8>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d109      	bne.n	800913a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009126:	4a2a      	ldr	r2, [pc, #168]	@ (80091d0 <prvAddNewTaskToReadyList+0xc8>)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800912c:	4b27      	ldr	r3, [pc, #156]	@ (80091cc <prvAddNewTaskToReadyList+0xc4>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	2b01      	cmp	r3, #1
 8009132:	d110      	bne.n	8009156 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009134:	f000 fd02 	bl	8009b3c <prvInitialiseTaskLists>
 8009138:	e00d      	b.n	8009156 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800913a:	4b26      	ldr	r3, [pc, #152]	@ (80091d4 <prvAddNewTaskToReadyList+0xcc>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d109      	bne.n	8009156 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009142:	4b23      	ldr	r3, [pc, #140]	@ (80091d0 <prvAddNewTaskToReadyList+0xc8>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800914c:	429a      	cmp	r2, r3
 800914e:	d802      	bhi.n	8009156 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009150:	4a1f      	ldr	r2, [pc, #124]	@ (80091d0 <prvAddNewTaskToReadyList+0xc8>)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009156:	4b20      	ldr	r3, [pc, #128]	@ (80091d8 <prvAddNewTaskToReadyList+0xd0>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	3301      	adds	r3, #1
 800915c:	4a1e      	ldr	r2, [pc, #120]	@ (80091d8 <prvAddNewTaskToReadyList+0xd0>)
 800915e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009160:	4b1d      	ldr	r3, [pc, #116]	@ (80091d8 <prvAddNewTaskToReadyList+0xd0>)
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800916c:	4b1b      	ldr	r3, [pc, #108]	@ (80091dc <prvAddNewTaskToReadyList+0xd4>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	429a      	cmp	r2, r3
 8009172:	d903      	bls.n	800917c <prvAddNewTaskToReadyList+0x74>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009178:	4a18      	ldr	r2, [pc, #96]	@ (80091dc <prvAddNewTaskToReadyList+0xd4>)
 800917a:	6013      	str	r3, [r2, #0]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009180:	4613      	mov	r3, r2
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	4413      	add	r3, r2
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	4a15      	ldr	r2, [pc, #84]	@ (80091e0 <prvAddNewTaskToReadyList+0xd8>)
 800918a:	441a      	add	r2, r3
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	3304      	adds	r3, #4
 8009190:	4619      	mov	r1, r3
 8009192:	4610      	mov	r0, r2
 8009194:	f7fe ffe7 	bl	8008166 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009198:	f001 fb30 	bl	800a7fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800919c:	4b0d      	ldr	r3, [pc, #52]	@ (80091d4 <prvAddNewTaskToReadyList+0xcc>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d00e      	beq.n	80091c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80091a4:	4b0a      	ldr	r3, [pc, #40]	@ (80091d0 <prvAddNewTaskToReadyList+0xc8>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d207      	bcs.n	80091c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80091b2:	4b0c      	ldr	r3, [pc, #48]	@ (80091e4 <prvAddNewTaskToReadyList+0xdc>)
 80091b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091b8:	601a      	str	r2, [r3, #0]
 80091ba:	f3bf 8f4f 	dsb	sy
 80091be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091c2:	bf00      	nop
 80091c4:	3708      	adds	r7, #8
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	bf00      	nop
 80091cc:	200011ac 	.word	0x200011ac
 80091d0:	20000cd8 	.word	0x20000cd8
 80091d4:	200011b8 	.word	0x200011b8
 80091d8:	200011c8 	.word	0x200011c8
 80091dc:	200011b4 	.word	0x200011b4
 80091e0:	20000cdc 	.word	0x20000cdc
 80091e4:	e000ed04 	.word	0xe000ed04

080091e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80091f0:	2300      	movs	r3, #0
 80091f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d018      	beq.n	800922c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80091fa:	4b14      	ldr	r3, [pc, #80]	@ (800924c <vTaskDelay+0x64>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d00b      	beq.n	800921a <vTaskDelay+0x32>
	__asm volatile
 8009202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009206:	f383 8811 	msr	BASEPRI, r3
 800920a:	f3bf 8f6f 	isb	sy
 800920e:	f3bf 8f4f 	dsb	sy
 8009212:	60bb      	str	r3, [r7, #8]
}
 8009214:	bf00      	nop
 8009216:	bf00      	nop
 8009218:	e7fd      	b.n	8009216 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800921a:	f000 f88d 	bl	8009338 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800921e:	2100      	movs	r1, #0
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 fddd 	bl	8009de0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009226:	f000 f8cd 	bl	80093c4 <xTaskResumeAll>
 800922a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d107      	bne.n	8009242 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009232:	4b07      	ldr	r3, [pc, #28]	@ (8009250 <vTaskDelay+0x68>)
 8009234:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009238:	601a      	str	r2, [r3, #0]
 800923a:	f3bf 8f4f 	dsb	sy
 800923e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009242:	bf00      	nop
 8009244:	3710      	adds	r7, #16
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop
 800924c:	200011d4 	.word	0x200011d4
 8009250:	e000ed04 	.word	0xe000ed04

08009254 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b08a      	sub	sp, #40	@ 0x28
 8009258:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800925a:	2300      	movs	r3, #0
 800925c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800925e:	2300      	movs	r3, #0
 8009260:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009262:	463a      	mov	r2, r7
 8009264:	1d39      	adds	r1, r7, #4
 8009266:	f107 0308 	add.w	r3, r7, #8
 800926a:	4618      	mov	r0, r3
 800926c:	f7fe ff1a 	bl	80080a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009270:	6839      	ldr	r1, [r7, #0]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	68ba      	ldr	r2, [r7, #8]
 8009276:	9202      	str	r2, [sp, #8]
 8009278:	9301      	str	r3, [sp, #4]
 800927a:	2300      	movs	r3, #0
 800927c:	9300      	str	r3, [sp, #0]
 800927e:	2300      	movs	r3, #0
 8009280:	460a      	mov	r2, r1
 8009282:	4925      	ldr	r1, [pc, #148]	@ (8009318 <vTaskStartScheduler+0xc4>)
 8009284:	4825      	ldr	r0, [pc, #148]	@ (800931c <vTaskStartScheduler+0xc8>)
 8009286:	f7ff fdeb 	bl	8008e60 <xTaskCreateStatic>
 800928a:	4603      	mov	r3, r0
 800928c:	4a24      	ldr	r2, [pc, #144]	@ (8009320 <vTaskStartScheduler+0xcc>)
 800928e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009290:	4b23      	ldr	r3, [pc, #140]	@ (8009320 <vTaskStartScheduler+0xcc>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d002      	beq.n	800929e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009298:	2301      	movs	r3, #1
 800929a:	617b      	str	r3, [r7, #20]
 800929c:	e001      	b.n	80092a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800929e:	2300      	movs	r3, #0
 80092a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	2b01      	cmp	r3, #1
 80092a6:	d102      	bne.n	80092ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80092a8:	f000 fdee 	bl	8009e88 <xTimerCreateTimerTask>
 80092ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d11d      	bne.n	80092f0 <vTaskStartScheduler+0x9c>
	__asm volatile
 80092b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092b8:	f383 8811 	msr	BASEPRI, r3
 80092bc:	f3bf 8f6f 	isb	sy
 80092c0:	f3bf 8f4f 	dsb	sy
 80092c4:	613b      	str	r3, [r7, #16]
}
 80092c6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80092c8:	4b16      	ldr	r3, [pc, #88]	@ (8009324 <vTaskStartScheduler+0xd0>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	335c      	adds	r3, #92	@ 0x5c
 80092ce:	4a16      	ldr	r2, [pc, #88]	@ (8009328 <vTaskStartScheduler+0xd4>)
 80092d0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80092d2:	4b16      	ldr	r3, [pc, #88]	@ (800932c <vTaskStartScheduler+0xd8>)
 80092d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80092d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80092da:	4b15      	ldr	r3, [pc, #84]	@ (8009330 <vTaskStartScheduler+0xdc>)
 80092dc:	2201      	movs	r2, #1
 80092de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80092e0:	4b14      	ldr	r3, [pc, #80]	@ (8009334 <vTaskStartScheduler+0xe0>)
 80092e2:	2200      	movs	r2, #0
 80092e4:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80092e6:	f7f8 ff91 	bl	800220c <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80092ea:	f001 f9b1 	bl	800a650 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80092ee:	e00f      	b.n	8009310 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80092f6:	d10b      	bne.n	8009310 <vTaskStartScheduler+0xbc>
	__asm volatile
 80092f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092fc:	f383 8811 	msr	BASEPRI, r3
 8009300:	f3bf 8f6f 	isb	sy
 8009304:	f3bf 8f4f 	dsb	sy
 8009308:	60fb      	str	r3, [r7, #12]
}
 800930a:	bf00      	nop
 800930c:	bf00      	nop
 800930e:	e7fd      	b.n	800930c <vTaskStartScheduler+0xb8>
}
 8009310:	bf00      	nop
 8009312:	3718      	adds	r7, #24
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}
 8009318:	0800e198 	.word	0x0800e198
 800931c:	08009a61 	.word	0x08009a61
 8009320:	200011d0 	.word	0x200011d0
 8009324:	20000cd8 	.word	0x20000cd8
 8009328:	20000038 	.word	0x20000038
 800932c:	200011cc 	.word	0x200011cc
 8009330:	200011b8 	.word	0x200011b8
 8009334:	200011b0 	.word	0x200011b0

08009338 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009338:	b480      	push	{r7}
 800933a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800933c:	4b04      	ldr	r3, [pc, #16]	@ (8009350 <vTaskSuspendAll+0x18>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	3301      	adds	r3, #1
 8009342:	4a03      	ldr	r2, [pc, #12]	@ (8009350 <vTaskSuspendAll+0x18>)
 8009344:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009346:	bf00      	nop
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr
 8009350:	200011d4 	.word	0x200011d4

08009354 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800935a:	2300      	movs	r3, #0
 800935c:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800935e:	4b14      	ldr	r3, [pc, #80]	@ (80093b0 <prvGetExpectedIdleTime+0x5c>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d001      	beq.n	800936a <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 8009366:	2301      	movs	r3, #1
 8009368:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800936a:	4b12      	ldr	r3, [pc, #72]	@ (80093b4 <prvGetExpectedIdleTime+0x60>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009370:	2b00      	cmp	r3, #0
 8009372:	d002      	beq.n	800937a <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 8009374:	2300      	movs	r3, #0
 8009376:	607b      	str	r3, [r7, #4]
 8009378:	e012      	b.n	80093a0 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800937a:	4b0f      	ldr	r3, [pc, #60]	@ (80093b8 <prvGetExpectedIdleTime+0x64>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	2b01      	cmp	r3, #1
 8009380:	d902      	bls.n	8009388 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 8009382:	2300      	movs	r3, #0
 8009384:	607b      	str	r3, [r7, #4]
 8009386:	e00b      	b.n	80093a0 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d002      	beq.n	8009394 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800938e:	2300      	movs	r3, #0
 8009390:	607b      	str	r3, [r7, #4]
 8009392:	e005      	b.n	80093a0 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8009394:	4b09      	ldr	r3, [pc, #36]	@ (80093bc <prvGetExpectedIdleTime+0x68>)
 8009396:	681a      	ldr	r2, [r3, #0]
 8009398:	4b09      	ldr	r3, [pc, #36]	@ (80093c0 <prvGetExpectedIdleTime+0x6c>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	1ad3      	subs	r3, r2, r3
 800939e:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 80093a0:	687b      	ldr	r3, [r7, #4]
	}
 80093a2:	4618      	mov	r0, r3
 80093a4:	370c      	adds	r7, #12
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr
 80093ae:	bf00      	nop
 80093b0:	200011b4 	.word	0x200011b4
 80093b4:	20000cd8 	.word	0x20000cd8
 80093b8:	20000cdc 	.word	0x20000cdc
 80093bc:	200011cc 	.word	0x200011cc
 80093c0:	200011b0 	.word	0x200011b0

080093c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b084      	sub	sp, #16
 80093c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80093ca:	2300      	movs	r3, #0
 80093cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80093ce:	2300      	movs	r3, #0
 80093d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80093d2:	4b42      	ldr	r3, [pc, #264]	@ (80094dc <xTaskResumeAll+0x118>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d10b      	bne.n	80093f2 <xTaskResumeAll+0x2e>
	__asm volatile
 80093da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093de:	f383 8811 	msr	BASEPRI, r3
 80093e2:	f3bf 8f6f 	isb	sy
 80093e6:	f3bf 8f4f 	dsb	sy
 80093ea:	603b      	str	r3, [r7, #0]
}
 80093ec:	bf00      	nop
 80093ee:	bf00      	nop
 80093f0:	e7fd      	b.n	80093ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80093f2:	f001 f9d1 	bl	800a798 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80093f6:	4b39      	ldr	r3, [pc, #228]	@ (80094dc <xTaskResumeAll+0x118>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	3b01      	subs	r3, #1
 80093fc:	4a37      	ldr	r2, [pc, #220]	@ (80094dc <xTaskResumeAll+0x118>)
 80093fe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009400:	4b36      	ldr	r3, [pc, #216]	@ (80094dc <xTaskResumeAll+0x118>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d162      	bne.n	80094ce <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009408:	4b35      	ldr	r3, [pc, #212]	@ (80094e0 <xTaskResumeAll+0x11c>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d05e      	beq.n	80094ce <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009410:	e02f      	b.n	8009472 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009412:	4b34      	ldr	r3, [pc, #208]	@ (80094e4 <xTaskResumeAll+0x120>)
 8009414:	68db      	ldr	r3, [r3, #12]
 8009416:	68db      	ldr	r3, [r3, #12]
 8009418:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	3318      	adds	r3, #24
 800941e:	4618      	mov	r0, r3
 8009420:	f7fe fefe 	bl	8008220 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	3304      	adds	r3, #4
 8009428:	4618      	mov	r0, r3
 800942a:	f7fe fef9 	bl	8008220 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009432:	4b2d      	ldr	r3, [pc, #180]	@ (80094e8 <xTaskResumeAll+0x124>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	429a      	cmp	r2, r3
 8009438:	d903      	bls.n	8009442 <xTaskResumeAll+0x7e>
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800943e:	4a2a      	ldr	r2, [pc, #168]	@ (80094e8 <xTaskResumeAll+0x124>)
 8009440:	6013      	str	r3, [r2, #0]
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009446:	4613      	mov	r3, r2
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	4413      	add	r3, r2
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	4a27      	ldr	r2, [pc, #156]	@ (80094ec <xTaskResumeAll+0x128>)
 8009450:	441a      	add	r2, r3
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	3304      	adds	r3, #4
 8009456:	4619      	mov	r1, r3
 8009458:	4610      	mov	r0, r2
 800945a:	f7fe fe84 	bl	8008166 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009462:	4b23      	ldr	r3, [pc, #140]	@ (80094f0 <xTaskResumeAll+0x12c>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009468:	429a      	cmp	r2, r3
 800946a:	d302      	bcc.n	8009472 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800946c:	4b21      	ldr	r3, [pc, #132]	@ (80094f4 <xTaskResumeAll+0x130>)
 800946e:	2201      	movs	r2, #1
 8009470:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009472:	4b1c      	ldr	r3, [pc, #112]	@ (80094e4 <xTaskResumeAll+0x120>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d1cb      	bne.n	8009412 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d001      	beq.n	8009484 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009480:	f000 fc00 	bl	8009c84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009484:	4b1c      	ldr	r3, [pc, #112]	@ (80094f8 <xTaskResumeAll+0x134>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d010      	beq.n	80094b2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009490:	f000 f86e 	bl	8009570 <xTaskIncrementTick>
 8009494:	4603      	mov	r3, r0
 8009496:	2b00      	cmp	r3, #0
 8009498:	d002      	beq.n	80094a0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800949a:	4b16      	ldr	r3, [pc, #88]	@ (80094f4 <xTaskResumeAll+0x130>)
 800949c:	2201      	movs	r2, #1
 800949e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	3b01      	subs	r3, #1
 80094a4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d1f1      	bne.n	8009490 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80094ac:	4b12      	ldr	r3, [pc, #72]	@ (80094f8 <xTaskResumeAll+0x134>)
 80094ae:	2200      	movs	r2, #0
 80094b0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80094b2:	4b10      	ldr	r3, [pc, #64]	@ (80094f4 <xTaskResumeAll+0x130>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d009      	beq.n	80094ce <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80094ba:	2301      	movs	r3, #1
 80094bc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80094be:	4b0f      	ldr	r3, [pc, #60]	@ (80094fc <xTaskResumeAll+0x138>)
 80094c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094c4:	601a      	str	r2, [r3, #0]
 80094c6:	f3bf 8f4f 	dsb	sy
 80094ca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80094ce:	f001 f995 	bl	800a7fc <vPortExitCritical>

	return xAlreadyYielded;
 80094d2:	68bb      	ldr	r3, [r7, #8]
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3710      	adds	r7, #16
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}
 80094dc:	200011d4 	.word	0x200011d4
 80094e0:	200011ac 	.word	0x200011ac
 80094e4:	2000116c 	.word	0x2000116c
 80094e8:	200011b4 	.word	0x200011b4
 80094ec:	20000cdc 	.word	0x20000cdc
 80094f0:	20000cd8 	.word	0x20000cd8
 80094f4:	200011c0 	.word	0x200011c0
 80094f8:	200011bc 	.word	0x200011bc
 80094fc:	e000ed04 	.word	0xe000ed04

08009500 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009500:	b480      	push	{r7}
 8009502:	b083      	sub	sp, #12
 8009504:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009506:	4b05      	ldr	r3, [pc, #20]	@ (800951c <xTaskGetTickCount+0x1c>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800950c:	687b      	ldr	r3, [r7, #4]
}
 800950e:	4618      	mov	r0, r3
 8009510:	370c      	adds	r7, #12
 8009512:	46bd      	mov	sp, r7
 8009514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009518:	4770      	bx	lr
 800951a:	bf00      	nop
 800951c:	200011b0 	.word	0x200011b0

08009520 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 8009520:	b480      	push	{r7}
 8009522:	b085      	sub	sp, #20
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 8009528:	4b0f      	ldr	r3, [pc, #60]	@ (8009568 <vTaskStepTick+0x48>)
 800952a:	681a      	ldr	r2, [r3, #0]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	441a      	add	r2, r3
 8009530:	4b0e      	ldr	r3, [pc, #56]	@ (800956c <vTaskStepTick+0x4c>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	429a      	cmp	r2, r3
 8009536:	d90b      	bls.n	8009550 <vTaskStepTick+0x30>
	__asm volatile
 8009538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800953c:	f383 8811 	msr	BASEPRI, r3
 8009540:	f3bf 8f6f 	isb	sy
 8009544:	f3bf 8f4f 	dsb	sy
 8009548:	60fb      	str	r3, [r7, #12]
}
 800954a:	bf00      	nop
 800954c:	bf00      	nop
 800954e:	e7fd      	b.n	800954c <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 8009550:	4b05      	ldr	r3, [pc, #20]	@ (8009568 <vTaskStepTick+0x48>)
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	4413      	add	r3, r2
 8009558:	4a03      	ldr	r2, [pc, #12]	@ (8009568 <vTaskStepTick+0x48>)
 800955a:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 800955c:	bf00      	nop
 800955e:	3714      	adds	r7, #20
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr
 8009568:	200011b0 	.word	0x200011b0
 800956c:	200011cc 	.word	0x200011cc

08009570 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b086      	sub	sp, #24
 8009574:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009576:	2300      	movs	r3, #0
 8009578:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800957a:	4b4f      	ldr	r3, [pc, #316]	@ (80096b8 <xTaskIncrementTick+0x148>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	2b00      	cmp	r3, #0
 8009580:	f040 8090 	bne.w	80096a4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009584:	4b4d      	ldr	r3, [pc, #308]	@ (80096bc <xTaskIncrementTick+0x14c>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	3301      	adds	r3, #1
 800958a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800958c:	4a4b      	ldr	r2, [pc, #300]	@ (80096bc <xTaskIncrementTick+0x14c>)
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d121      	bne.n	80095dc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009598:	4b49      	ldr	r3, [pc, #292]	@ (80096c0 <xTaskIncrementTick+0x150>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d00b      	beq.n	80095ba <xTaskIncrementTick+0x4a>
	__asm volatile
 80095a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095a6:	f383 8811 	msr	BASEPRI, r3
 80095aa:	f3bf 8f6f 	isb	sy
 80095ae:	f3bf 8f4f 	dsb	sy
 80095b2:	603b      	str	r3, [r7, #0]
}
 80095b4:	bf00      	nop
 80095b6:	bf00      	nop
 80095b8:	e7fd      	b.n	80095b6 <xTaskIncrementTick+0x46>
 80095ba:	4b41      	ldr	r3, [pc, #260]	@ (80096c0 <xTaskIncrementTick+0x150>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	60fb      	str	r3, [r7, #12]
 80095c0:	4b40      	ldr	r3, [pc, #256]	@ (80096c4 <xTaskIncrementTick+0x154>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a3e      	ldr	r2, [pc, #248]	@ (80096c0 <xTaskIncrementTick+0x150>)
 80095c6:	6013      	str	r3, [r2, #0]
 80095c8:	4a3e      	ldr	r2, [pc, #248]	@ (80096c4 <xTaskIncrementTick+0x154>)
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	6013      	str	r3, [r2, #0]
 80095ce:	4b3e      	ldr	r3, [pc, #248]	@ (80096c8 <xTaskIncrementTick+0x158>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	3301      	adds	r3, #1
 80095d4:	4a3c      	ldr	r2, [pc, #240]	@ (80096c8 <xTaskIncrementTick+0x158>)
 80095d6:	6013      	str	r3, [r2, #0]
 80095d8:	f000 fb54 	bl	8009c84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80095dc:	4b3b      	ldr	r3, [pc, #236]	@ (80096cc <xTaskIncrementTick+0x15c>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	693a      	ldr	r2, [r7, #16]
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d349      	bcc.n	800967a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095e6:	4b36      	ldr	r3, [pc, #216]	@ (80096c0 <xTaskIncrementTick+0x150>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d104      	bne.n	80095fa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095f0:	4b36      	ldr	r3, [pc, #216]	@ (80096cc <xTaskIncrementTick+0x15c>)
 80095f2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80095f6:	601a      	str	r2, [r3, #0]
					break;
 80095f8:	e03f      	b.n	800967a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095fa:	4b31      	ldr	r3, [pc, #196]	@ (80096c0 <xTaskIncrementTick+0x150>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	68db      	ldr	r3, [r3, #12]
 8009600:	68db      	ldr	r3, [r3, #12]
 8009602:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800960a:	693a      	ldr	r2, [r7, #16]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	429a      	cmp	r2, r3
 8009610:	d203      	bcs.n	800961a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009612:	4a2e      	ldr	r2, [pc, #184]	@ (80096cc <xTaskIncrementTick+0x15c>)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009618:	e02f      	b.n	800967a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	3304      	adds	r3, #4
 800961e:	4618      	mov	r0, r3
 8009620:	f7fe fdfe 	bl	8008220 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009628:	2b00      	cmp	r3, #0
 800962a:	d004      	beq.n	8009636 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	3318      	adds	r3, #24
 8009630:	4618      	mov	r0, r3
 8009632:	f7fe fdf5 	bl	8008220 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800963a:	4b25      	ldr	r3, [pc, #148]	@ (80096d0 <xTaskIncrementTick+0x160>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	429a      	cmp	r2, r3
 8009640:	d903      	bls.n	800964a <xTaskIncrementTick+0xda>
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009646:	4a22      	ldr	r2, [pc, #136]	@ (80096d0 <xTaskIncrementTick+0x160>)
 8009648:	6013      	str	r3, [r2, #0]
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800964e:	4613      	mov	r3, r2
 8009650:	009b      	lsls	r3, r3, #2
 8009652:	4413      	add	r3, r2
 8009654:	009b      	lsls	r3, r3, #2
 8009656:	4a1f      	ldr	r2, [pc, #124]	@ (80096d4 <xTaskIncrementTick+0x164>)
 8009658:	441a      	add	r2, r3
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	3304      	adds	r3, #4
 800965e:	4619      	mov	r1, r3
 8009660:	4610      	mov	r0, r2
 8009662:	f7fe fd80 	bl	8008166 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800966a:	4b1b      	ldr	r3, [pc, #108]	@ (80096d8 <xTaskIncrementTick+0x168>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009670:	429a      	cmp	r2, r3
 8009672:	d3b8      	bcc.n	80095e6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009674:	2301      	movs	r3, #1
 8009676:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009678:	e7b5      	b.n	80095e6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800967a:	4b17      	ldr	r3, [pc, #92]	@ (80096d8 <xTaskIncrementTick+0x168>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009680:	4914      	ldr	r1, [pc, #80]	@ (80096d4 <xTaskIncrementTick+0x164>)
 8009682:	4613      	mov	r3, r2
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	4413      	add	r3, r2
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	440b      	add	r3, r1
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	2b01      	cmp	r3, #1
 8009690:	d901      	bls.n	8009696 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009692:	2301      	movs	r3, #1
 8009694:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009696:	4b11      	ldr	r3, [pc, #68]	@ (80096dc <xTaskIncrementTick+0x16c>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d007      	beq.n	80096ae <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800969e:	2301      	movs	r3, #1
 80096a0:	617b      	str	r3, [r7, #20]
 80096a2:	e004      	b.n	80096ae <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80096a4:	4b0e      	ldr	r3, [pc, #56]	@ (80096e0 <xTaskIncrementTick+0x170>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	3301      	adds	r3, #1
 80096aa:	4a0d      	ldr	r2, [pc, #52]	@ (80096e0 <xTaskIncrementTick+0x170>)
 80096ac:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80096ae:	697b      	ldr	r3, [r7, #20]
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3718      	adds	r7, #24
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	200011d4 	.word	0x200011d4
 80096bc:	200011b0 	.word	0x200011b0
 80096c0:	20001164 	.word	0x20001164
 80096c4:	20001168 	.word	0x20001168
 80096c8:	200011c4 	.word	0x200011c4
 80096cc:	200011cc 	.word	0x200011cc
 80096d0:	200011b4 	.word	0x200011b4
 80096d4:	20000cdc 	.word	0x20000cdc
 80096d8:	20000cd8 	.word	0x20000cd8
 80096dc:	200011c0 	.word	0x200011c0
 80096e0:	200011bc 	.word	0x200011bc

080096e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80096ea:	4b36      	ldr	r3, [pc, #216]	@ (80097c4 <vTaskSwitchContext+0xe0>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d003      	beq.n	80096fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80096f2:	4b35      	ldr	r3, [pc, #212]	@ (80097c8 <vTaskSwitchContext+0xe4>)
 80096f4:	2201      	movs	r2, #1
 80096f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80096f8:	e060      	b.n	80097bc <vTaskSwitchContext+0xd8>
		xYieldPending = pdFALSE;
 80096fa:	4b33      	ldr	r3, [pc, #204]	@ (80097c8 <vTaskSwitchContext+0xe4>)
 80096fc:	2200      	movs	r2, #0
 80096fe:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8009700:	f7f8 fd8e 	bl	8002220 <getRunTimeCounterValue>
 8009704:	4603      	mov	r3, r0
 8009706:	4a31      	ldr	r2, [pc, #196]	@ (80097cc <vTaskSwitchContext+0xe8>)
 8009708:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800970a:	4b30      	ldr	r3, [pc, #192]	@ (80097cc <vTaskSwitchContext+0xe8>)
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	4b30      	ldr	r3, [pc, #192]	@ (80097d0 <vTaskSwitchContext+0xec>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	429a      	cmp	r2, r3
 8009714:	d909      	bls.n	800972a <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8009716:	4b2f      	ldr	r3, [pc, #188]	@ (80097d4 <vTaskSwitchContext+0xf0>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800971c:	4a2b      	ldr	r2, [pc, #172]	@ (80097cc <vTaskSwitchContext+0xe8>)
 800971e:	6810      	ldr	r0, [r2, #0]
 8009720:	4a2b      	ldr	r2, [pc, #172]	@ (80097d0 <vTaskSwitchContext+0xec>)
 8009722:	6812      	ldr	r2, [r2, #0]
 8009724:	1a82      	subs	r2, r0, r2
 8009726:	440a      	add	r2, r1
 8009728:	659a      	str	r2, [r3, #88]	@ 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800972a:	4b28      	ldr	r3, [pc, #160]	@ (80097cc <vTaskSwitchContext+0xe8>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4a28      	ldr	r2, [pc, #160]	@ (80097d0 <vTaskSwitchContext+0xec>)
 8009730:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009732:	4b29      	ldr	r3, [pc, #164]	@ (80097d8 <vTaskSwitchContext+0xf4>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	60fb      	str	r3, [r7, #12]
 8009738:	e011      	b.n	800975e <vTaskSwitchContext+0x7a>
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d10b      	bne.n	8009758 <vTaskSwitchContext+0x74>
	__asm volatile
 8009740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009744:	f383 8811 	msr	BASEPRI, r3
 8009748:	f3bf 8f6f 	isb	sy
 800974c:	f3bf 8f4f 	dsb	sy
 8009750:	607b      	str	r3, [r7, #4]
}
 8009752:	bf00      	nop
 8009754:	bf00      	nop
 8009756:	e7fd      	b.n	8009754 <vTaskSwitchContext+0x70>
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	3b01      	subs	r3, #1
 800975c:	60fb      	str	r3, [r7, #12]
 800975e:	491f      	ldr	r1, [pc, #124]	@ (80097dc <vTaskSwitchContext+0xf8>)
 8009760:	68fa      	ldr	r2, [r7, #12]
 8009762:	4613      	mov	r3, r2
 8009764:	009b      	lsls	r3, r3, #2
 8009766:	4413      	add	r3, r2
 8009768:	009b      	lsls	r3, r3, #2
 800976a:	440b      	add	r3, r1
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d0e3      	beq.n	800973a <vTaskSwitchContext+0x56>
 8009772:	68fa      	ldr	r2, [r7, #12]
 8009774:	4613      	mov	r3, r2
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	4413      	add	r3, r2
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	4a17      	ldr	r2, [pc, #92]	@ (80097dc <vTaskSwitchContext+0xf8>)
 800977e:	4413      	add	r3, r2
 8009780:	60bb      	str	r3, [r7, #8]
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	685a      	ldr	r2, [r3, #4]
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	605a      	str	r2, [r3, #4]
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	685a      	ldr	r2, [r3, #4]
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	3308      	adds	r3, #8
 8009794:	429a      	cmp	r2, r3
 8009796:	d104      	bne.n	80097a2 <vTaskSwitchContext+0xbe>
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	685a      	ldr	r2, [r3, #4]
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	605a      	str	r2, [r3, #4]
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	68db      	ldr	r3, [r3, #12]
 80097a8:	4a0a      	ldr	r2, [pc, #40]	@ (80097d4 <vTaskSwitchContext+0xf0>)
 80097aa:	6013      	str	r3, [r2, #0]
 80097ac:	4a0a      	ldr	r2, [pc, #40]	@ (80097d8 <vTaskSwitchContext+0xf4>)
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80097b2:	4b08      	ldr	r3, [pc, #32]	@ (80097d4 <vTaskSwitchContext+0xf0>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	335c      	adds	r3, #92	@ 0x5c
 80097b8:	4a09      	ldr	r2, [pc, #36]	@ (80097e0 <vTaskSwitchContext+0xfc>)
 80097ba:	6013      	str	r3, [r2, #0]
}
 80097bc:	bf00      	nop
 80097be:	3710      	adds	r7, #16
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	200011d4 	.word	0x200011d4
 80097c8:	200011c0 	.word	0x200011c0
 80097cc:	200011dc 	.word	0x200011dc
 80097d0:	200011d8 	.word	0x200011d8
 80097d4:	20000cd8 	.word	0x20000cd8
 80097d8:	200011b4 	.word	0x200011b4
 80097dc:	20000cdc 	.word	0x20000cdc
 80097e0:	20000038 	.word	0x20000038

080097e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d10b      	bne.n	800980c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80097f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097f8:	f383 8811 	msr	BASEPRI, r3
 80097fc:	f3bf 8f6f 	isb	sy
 8009800:	f3bf 8f4f 	dsb	sy
 8009804:	60fb      	str	r3, [r7, #12]
}
 8009806:	bf00      	nop
 8009808:	bf00      	nop
 800980a:	e7fd      	b.n	8009808 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800980c:	4b07      	ldr	r3, [pc, #28]	@ (800982c <vTaskPlaceOnEventList+0x48>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	3318      	adds	r3, #24
 8009812:	4619      	mov	r1, r3
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f7fe fcca 	bl	80081ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800981a:	2101      	movs	r1, #1
 800981c:	6838      	ldr	r0, [r7, #0]
 800981e:	f000 fadf 	bl	8009de0 <prvAddCurrentTaskToDelayedList>
}
 8009822:	bf00      	nop
 8009824:	3710      	adds	r7, #16
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop
 800982c:	20000cd8 	.word	0x20000cd8

08009830 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009830:	b580      	push	{r7, lr}
 8009832:	b086      	sub	sp, #24
 8009834:	af00      	add	r7, sp, #0
 8009836:	60f8      	str	r0, [r7, #12]
 8009838:	60b9      	str	r1, [r7, #8]
 800983a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d10b      	bne.n	800985a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009846:	f383 8811 	msr	BASEPRI, r3
 800984a:	f3bf 8f6f 	isb	sy
 800984e:	f3bf 8f4f 	dsb	sy
 8009852:	617b      	str	r3, [r7, #20]
}
 8009854:	bf00      	nop
 8009856:	bf00      	nop
 8009858:	e7fd      	b.n	8009856 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800985a:	4b0a      	ldr	r3, [pc, #40]	@ (8009884 <vTaskPlaceOnEventListRestricted+0x54>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	3318      	adds	r3, #24
 8009860:	4619      	mov	r1, r3
 8009862:	68f8      	ldr	r0, [r7, #12]
 8009864:	f7fe fc7f 	bl	8008166 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d002      	beq.n	8009874 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800986e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009872:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009874:	6879      	ldr	r1, [r7, #4]
 8009876:	68b8      	ldr	r0, [r7, #8]
 8009878:	f000 fab2 	bl	8009de0 <prvAddCurrentTaskToDelayedList>
	}
 800987c:	bf00      	nop
 800987e:	3718      	adds	r7, #24
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}
 8009884:	20000cd8 	.word	0x20000cd8

08009888 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b086      	sub	sp, #24
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	68db      	ldr	r3, [r3, #12]
 8009894:	68db      	ldr	r3, [r3, #12]
 8009896:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d10b      	bne.n	80098b6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800989e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098a2:	f383 8811 	msr	BASEPRI, r3
 80098a6:	f3bf 8f6f 	isb	sy
 80098aa:	f3bf 8f4f 	dsb	sy
 80098ae:	60fb      	str	r3, [r7, #12]
}
 80098b0:	bf00      	nop
 80098b2:	bf00      	nop
 80098b4:	e7fd      	b.n	80098b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	3318      	adds	r3, #24
 80098ba:	4618      	mov	r0, r3
 80098bc:	f7fe fcb0 	bl	8008220 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098c0:	4b1e      	ldr	r3, [pc, #120]	@ (800993c <xTaskRemoveFromEventList+0xb4>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d11f      	bne.n	8009908 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	3304      	adds	r3, #4
 80098cc:	4618      	mov	r0, r3
 80098ce:	f7fe fca7 	bl	8008220 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098d6:	4b1a      	ldr	r3, [pc, #104]	@ (8009940 <xTaskRemoveFromEventList+0xb8>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	429a      	cmp	r2, r3
 80098dc:	d903      	bls.n	80098e6 <xTaskRemoveFromEventList+0x5e>
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098e2:	4a17      	ldr	r2, [pc, #92]	@ (8009940 <xTaskRemoveFromEventList+0xb8>)
 80098e4:	6013      	str	r3, [r2, #0]
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098ea:	4613      	mov	r3, r2
 80098ec:	009b      	lsls	r3, r3, #2
 80098ee:	4413      	add	r3, r2
 80098f0:	009b      	lsls	r3, r3, #2
 80098f2:	4a14      	ldr	r2, [pc, #80]	@ (8009944 <xTaskRemoveFromEventList+0xbc>)
 80098f4:	441a      	add	r2, r3
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	3304      	adds	r3, #4
 80098fa:	4619      	mov	r1, r3
 80098fc:	4610      	mov	r0, r2
 80098fe:	f7fe fc32 	bl	8008166 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 8009902:	f000 f9bf 	bl	8009c84 <prvResetNextTaskUnblockTime>
 8009906:	e005      	b.n	8009914 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	3318      	adds	r3, #24
 800990c:	4619      	mov	r1, r3
 800990e:	480e      	ldr	r0, [pc, #56]	@ (8009948 <xTaskRemoveFromEventList+0xc0>)
 8009910:	f7fe fc29 	bl	8008166 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009918:	4b0c      	ldr	r3, [pc, #48]	@ (800994c <xTaskRemoveFromEventList+0xc4>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800991e:	429a      	cmp	r2, r3
 8009920:	d905      	bls.n	800992e <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009922:	2301      	movs	r3, #1
 8009924:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009926:	4b0a      	ldr	r3, [pc, #40]	@ (8009950 <xTaskRemoveFromEventList+0xc8>)
 8009928:	2201      	movs	r2, #1
 800992a:	601a      	str	r2, [r3, #0]
 800992c:	e001      	b.n	8009932 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800992e:	2300      	movs	r3, #0
 8009930:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009932:	697b      	ldr	r3, [r7, #20]
}
 8009934:	4618      	mov	r0, r3
 8009936:	3718      	adds	r7, #24
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}
 800993c:	200011d4 	.word	0x200011d4
 8009940:	200011b4 	.word	0x200011b4
 8009944:	20000cdc 	.word	0x20000cdc
 8009948:	2000116c 	.word	0x2000116c
 800994c:	20000cd8 	.word	0x20000cd8
 8009950:	200011c0 	.word	0x200011c0

08009954 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009954:	b480      	push	{r7}
 8009956:	b083      	sub	sp, #12
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800995c:	4b06      	ldr	r3, [pc, #24]	@ (8009978 <vTaskInternalSetTimeOutState+0x24>)
 800995e:	681a      	ldr	r2, [r3, #0]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009964:	4b05      	ldr	r3, [pc, #20]	@ (800997c <vTaskInternalSetTimeOutState+0x28>)
 8009966:	681a      	ldr	r2, [r3, #0]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	605a      	str	r2, [r3, #4]
}
 800996c:	bf00      	nop
 800996e:	370c      	adds	r7, #12
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr
 8009978:	200011c4 	.word	0x200011c4
 800997c:	200011b0 	.word	0x200011b0

08009980 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b088      	sub	sp, #32
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d10b      	bne.n	80099a8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009994:	f383 8811 	msr	BASEPRI, r3
 8009998:	f3bf 8f6f 	isb	sy
 800999c:	f3bf 8f4f 	dsb	sy
 80099a0:	613b      	str	r3, [r7, #16]
}
 80099a2:	bf00      	nop
 80099a4:	bf00      	nop
 80099a6:	e7fd      	b.n	80099a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d10b      	bne.n	80099c6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80099ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099b2:	f383 8811 	msr	BASEPRI, r3
 80099b6:	f3bf 8f6f 	isb	sy
 80099ba:	f3bf 8f4f 	dsb	sy
 80099be:	60fb      	str	r3, [r7, #12]
}
 80099c0:	bf00      	nop
 80099c2:	bf00      	nop
 80099c4:	e7fd      	b.n	80099c2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80099c6:	f000 fee7 	bl	800a798 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80099ca:	4b1d      	ldr	r3, [pc, #116]	@ (8009a40 <xTaskCheckForTimeOut+0xc0>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	69ba      	ldr	r2, [r7, #24]
 80099d6:	1ad3      	subs	r3, r2, r3
 80099d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80099e2:	d102      	bne.n	80099ea <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80099e4:	2300      	movs	r3, #0
 80099e6:	61fb      	str	r3, [r7, #28]
 80099e8:	e023      	b.n	8009a32 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	4b15      	ldr	r3, [pc, #84]	@ (8009a44 <xTaskCheckForTimeOut+0xc4>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d007      	beq.n	8009a06 <xTaskCheckForTimeOut+0x86>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	69ba      	ldr	r2, [r7, #24]
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d302      	bcc.n	8009a06 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009a00:	2301      	movs	r3, #1
 8009a02:	61fb      	str	r3, [r7, #28]
 8009a04:	e015      	b.n	8009a32 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	697a      	ldr	r2, [r7, #20]
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d20b      	bcs.n	8009a28 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	681a      	ldr	r2, [r3, #0]
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	1ad2      	subs	r2, r2, r3
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f7ff ff99 	bl	8009954 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009a22:	2300      	movs	r3, #0
 8009a24:	61fb      	str	r3, [r7, #28]
 8009a26:	e004      	b.n	8009a32 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009a32:	f000 fee3 	bl	800a7fc <vPortExitCritical>

	return xReturn;
 8009a36:	69fb      	ldr	r3, [r7, #28]
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3720      	adds	r7, #32
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	200011b0 	.word	0x200011b0
 8009a44:	200011c4 	.word	0x200011c4

08009a48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009a48:	b480      	push	{r7}
 8009a4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009a4c:	4b03      	ldr	r3, [pc, #12]	@ (8009a5c <vTaskMissedYield+0x14>)
 8009a4e:	2201      	movs	r2, #1
 8009a50:	601a      	str	r2, [r3, #0]
}
 8009a52:	bf00      	nop
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr
 8009a5c:	200011c0 	.word	0x200011c0

08009a60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b084      	sub	sp, #16
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009a68:	f000 f8a8 	bl	8009bbc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009a6c:	4b18      	ldr	r3, [pc, #96]	@ (8009ad0 <prvIdleTask+0x70>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d907      	bls.n	8009a84 <prvIdleTask+0x24>
			{
				taskYIELD();
 8009a74:	4b17      	ldr	r3, [pc, #92]	@ (8009ad4 <prvIdleTask+0x74>)
 8009a76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a7a:	601a      	str	r2, [r3, #0]
 8009a7c:	f3bf 8f4f 	dsb	sy
 8009a80:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8009a84:	f7ff fc66 	bl	8009354 <prvGetExpectedIdleTime>
 8009a88:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d9eb      	bls.n	8009a68 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8009a90:	f7ff fc52 	bl	8009338 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8009a94:	4b10      	ldr	r3, [pc, #64]	@ (8009ad8 <prvIdleTask+0x78>)
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	4b10      	ldr	r3, [pc, #64]	@ (8009adc <prvIdleTask+0x7c>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d20b      	bcs.n	8009ab8 <prvIdleTask+0x58>
	__asm volatile
 8009aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aa4:	f383 8811 	msr	BASEPRI, r3
 8009aa8:	f3bf 8f6f 	isb	sy
 8009aac:	f3bf 8f4f 	dsb	sy
 8009ab0:	60bb      	str	r3, [r7, #8]
}
 8009ab2:	bf00      	nop
 8009ab4:	bf00      	nop
 8009ab6:	e7fd      	b.n	8009ab4 <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8009ab8:	f7ff fc4c 	bl	8009354 <prvGetExpectedIdleTime>
 8009abc:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d902      	bls.n	8009aca <prvIdleTask+0x6a>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8009ac4:	68f8      	ldr	r0, [r7, #12]
 8009ac6:	f000 ff19 	bl	800a8fc <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 8009aca:	f7ff fc7b 	bl	80093c4 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 8009ace:	e7cb      	b.n	8009a68 <prvIdleTask+0x8>
 8009ad0:	20000cdc 	.word	0x20000cdc
 8009ad4:	e000ed04 	.word	0xe000ed04
 8009ad8:	200011cc 	.word	0x200011cc
 8009adc:	200011b0 	.word	0x200011b0

08009ae0 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b083      	sub	sp, #12
 8009ae4:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 8009aea:	2301      	movs	r3, #1
 8009aec:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 8009aee:	4b0f      	ldr	r3, [pc, #60]	@ (8009b2c <eTaskConfirmSleepModeStatus+0x4c>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d002      	beq.n	8009afc <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8009af6:	2300      	movs	r3, #0
 8009af8:	71fb      	strb	r3, [r7, #7]
 8009afa:	e010      	b.n	8009b1e <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 8009afc:	4b0c      	ldr	r3, [pc, #48]	@ (8009b30 <eTaskConfirmSleepModeStatus+0x50>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d002      	beq.n	8009b0a <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8009b04:	2300      	movs	r3, #0
 8009b06:	71fb      	strb	r3, [r7, #7]
 8009b08:	e009      	b.n	8009b1e <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 8009b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8009b34 <eTaskConfirmSleepModeStatus+0x54>)
 8009b0c:	681a      	ldr	r2, [r3, #0]
 8009b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8009b38 <eTaskConfirmSleepModeStatus+0x58>)
 8009b10:	6819      	ldr	r1, [r3, #0]
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	1acb      	subs	r3, r1, r3
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d101      	bne.n	8009b1e <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 8009b1a:	2302      	movs	r3, #2
 8009b1c:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 8009b1e:	79fb      	ldrb	r3, [r7, #7]
	}
 8009b20:	4618      	mov	r0, r3
 8009b22:	370c      	adds	r7, #12
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr
 8009b2c:	2000116c 	.word	0x2000116c
 8009b30:	200011c0 	.word	0x200011c0
 8009b34:	20001198 	.word	0x20001198
 8009b38:	200011ac 	.word	0x200011ac

08009b3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009b42:	2300      	movs	r3, #0
 8009b44:	607b      	str	r3, [r7, #4]
 8009b46:	e00c      	b.n	8009b62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009b48:	687a      	ldr	r2, [r7, #4]
 8009b4a:	4613      	mov	r3, r2
 8009b4c:	009b      	lsls	r3, r3, #2
 8009b4e:	4413      	add	r3, r2
 8009b50:	009b      	lsls	r3, r3, #2
 8009b52:	4a12      	ldr	r2, [pc, #72]	@ (8009b9c <prvInitialiseTaskLists+0x60>)
 8009b54:	4413      	add	r3, r2
 8009b56:	4618      	mov	r0, r3
 8009b58:	f7fe fad8 	bl	800810c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	3301      	adds	r3, #1
 8009b60:	607b      	str	r3, [r7, #4]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2b37      	cmp	r3, #55	@ 0x37
 8009b66:	d9ef      	bls.n	8009b48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009b68:	480d      	ldr	r0, [pc, #52]	@ (8009ba0 <prvInitialiseTaskLists+0x64>)
 8009b6a:	f7fe facf 	bl	800810c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009b6e:	480d      	ldr	r0, [pc, #52]	@ (8009ba4 <prvInitialiseTaskLists+0x68>)
 8009b70:	f7fe facc 	bl	800810c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009b74:	480c      	ldr	r0, [pc, #48]	@ (8009ba8 <prvInitialiseTaskLists+0x6c>)
 8009b76:	f7fe fac9 	bl	800810c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009b7a:	480c      	ldr	r0, [pc, #48]	@ (8009bac <prvInitialiseTaskLists+0x70>)
 8009b7c:	f7fe fac6 	bl	800810c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009b80:	480b      	ldr	r0, [pc, #44]	@ (8009bb0 <prvInitialiseTaskLists+0x74>)
 8009b82:	f7fe fac3 	bl	800810c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009b86:	4b0b      	ldr	r3, [pc, #44]	@ (8009bb4 <prvInitialiseTaskLists+0x78>)
 8009b88:	4a05      	ldr	r2, [pc, #20]	@ (8009ba0 <prvInitialiseTaskLists+0x64>)
 8009b8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8009bb8 <prvInitialiseTaskLists+0x7c>)
 8009b8e:	4a05      	ldr	r2, [pc, #20]	@ (8009ba4 <prvInitialiseTaskLists+0x68>)
 8009b90:	601a      	str	r2, [r3, #0]
}
 8009b92:	bf00      	nop
 8009b94:	3708      	adds	r7, #8
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	20000cdc 	.word	0x20000cdc
 8009ba0:	2000113c 	.word	0x2000113c
 8009ba4:	20001150 	.word	0x20001150
 8009ba8:	2000116c 	.word	0x2000116c
 8009bac:	20001180 	.word	0x20001180
 8009bb0:	20001198 	.word	0x20001198
 8009bb4:	20001164 	.word	0x20001164
 8009bb8:	20001168 	.word	0x20001168

08009bbc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b082      	sub	sp, #8
 8009bc0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009bc2:	e019      	b.n	8009bf8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009bc4:	f000 fde8 	bl	800a798 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bc8:	4b10      	ldr	r3, [pc, #64]	@ (8009c0c <prvCheckTasksWaitingTermination+0x50>)
 8009bca:	68db      	ldr	r3, [r3, #12]
 8009bcc:	68db      	ldr	r3, [r3, #12]
 8009bce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	3304      	adds	r3, #4
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f7fe fb23 	bl	8008220 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009bda:	4b0d      	ldr	r3, [pc, #52]	@ (8009c10 <prvCheckTasksWaitingTermination+0x54>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	3b01      	subs	r3, #1
 8009be0:	4a0b      	ldr	r2, [pc, #44]	@ (8009c10 <prvCheckTasksWaitingTermination+0x54>)
 8009be2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009be4:	4b0b      	ldr	r3, [pc, #44]	@ (8009c14 <prvCheckTasksWaitingTermination+0x58>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	3b01      	subs	r3, #1
 8009bea:	4a0a      	ldr	r2, [pc, #40]	@ (8009c14 <prvCheckTasksWaitingTermination+0x58>)
 8009bec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009bee:	f000 fe05 	bl	800a7fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 f810 	bl	8009c18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009bf8:	4b06      	ldr	r3, [pc, #24]	@ (8009c14 <prvCheckTasksWaitingTermination+0x58>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d1e1      	bne.n	8009bc4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009c00:	bf00      	nop
 8009c02:	bf00      	nop
 8009c04:	3708      	adds	r7, #8
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	bf00      	nop
 8009c0c:	20001180 	.word	0x20001180
 8009c10:	200011ac 	.word	0x200011ac
 8009c14:	20001194 	.word	0x20001194

08009c18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	335c      	adds	r3, #92	@ 0x5c
 8009c24:	4618      	mov	r0, r3
 8009c26:	f002 f85d 	bl	800bce4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d108      	bne.n	8009c46 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f001 f881 	bl	800ad40 <vPortFree>
				vPortFree( pxTCB );
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f001 f87e 	bl	800ad40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009c44:	e019      	b.n	8009c7a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	d103      	bne.n	8009c58 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f001 f875 	bl	800ad40 <vPortFree>
	}
 8009c56:	e010      	b.n	8009c7a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8009c5e:	2b02      	cmp	r3, #2
 8009c60:	d00b      	beq.n	8009c7a <prvDeleteTCB+0x62>
	__asm volatile
 8009c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c66:	f383 8811 	msr	BASEPRI, r3
 8009c6a:	f3bf 8f6f 	isb	sy
 8009c6e:	f3bf 8f4f 	dsb	sy
 8009c72:	60fb      	str	r3, [r7, #12]
}
 8009c74:	bf00      	nop
 8009c76:	bf00      	nop
 8009c78:	e7fd      	b.n	8009c76 <prvDeleteTCB+0x5e>
	}
 8009c7a:	bf00      	nop
 8009c7c:	3710      	adds	r7, #16
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
	...

08009c84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009c84:	b480      	push	{r7}
 8009c86:	b083      	sub	sp, #12
 8009c88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8009cbc <prvResetNextTaskUnblockTime+0x38>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d104      	bne.n	8009c9e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009c94:	4b0a      	ldr	r3, [pc, #40]	@ (8009cc0 <prvResetNextTaskUnblockTime+0x3c>)
 8009c96:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009c9a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009c9c:	e008      	b.n	8009cb0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c9e:	4b07      	ldr	r3, [pc, #28]	@ (8009cbc <prvResetNextTaskUnblockTime+0x38>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	68db      	ldr	r3, [r3, #12]
 8009ca4:	68db      	ldr	r3, [r3, #12]
 8009ca6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	4a04      	ldr	r2, [pc, #16]	@ (8009cc0 <prvResetNextTaskUnblockTime+0x3c>)
 8009cae:	6013      	str	r3, [r2, #0]
}
 8009cb0:	bf00      	nop
 8009cb2:	370c      	adds	r7, #12
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr
 8009cbc:	20001164 	.word	0x20001164
 8009cc0:	200011cc 	.word	0x200011cc

08009cc4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b083      	sub	sp, #12
 8009cc8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009cca:	4b0b      	ldr	r3, [pc, #44]	@ (8009cf8 <xTaskGetSchedulerState+0x34>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d102      	bne.n	8009cd8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	607b      	str	r3, [r7, #4]
 8009cd6:	e008      	b.n	8009cea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cd8:	4b08      	ldr	r3, [pc, #32]	@ (8009cfc <xTaskGetSchedulerState+0x38>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d102      	bne.n	8009ce6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009ce0:	2302      	movs	r3, #2
 8009ce2:	607b      	str	r3, [r7, #4]
 8009ce4:	e001      	b.n	8009cea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009cea:	687b      	ldr	r3, [r7, #4]
	}
 8009cec:	4618      	mov	r0, r3
 8009cee:	370c      	adds	r7, #12
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr
 8009cf8:	200011b8 	.word	0x200011b8
 8009cfc:	200011d4 	.word	0x200011d4

08009d00 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b086      	sub	sp, #24
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d058      	beq.n	8009dc8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009d16:	4b2f      	ldr	r3, [pc, #188]	@ (8009dd4 <xTaskPriorityDisinherit+0xd4>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	693a      	ldr	r2, [r7, #16]
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d00b      	beq.n	8009d38 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d24:	f383 8811 	msr	BASEPRI, r3
 8009d28:	f3bf 8f6f 	isb	sy
 8009d2c:	f3bf 8f4f 	dsb	sy
 8009d30:	60fb      	str	r3, [r7, #12]
}
 8009d32:	bf00      	nop
 8009d34:	bf00      	nop
 8009d36:	e7fd      	b.n	8009d34 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d10b      	bne.n	8009d58 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d44:	f383 8811 	msr	BASEPRI, r3
 8009d48:	f3bf 8f6f 	isb	sy
 8009d4c:	f3bf 8f4f 	dsb	sy
 8009d50:	60bb      	str	r3, [r7, #8]
}
 8009d52:	bf00      	nop
 8009d54:	bf00      	nop
 8009d56:	e7fd      	b.n	8009d54 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d5c:	1e5a      	subs	r2, r3, #1
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	655a      	str	r2, [r3, #84]	@ 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d02c      	beq.n	8009dc8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d128      	bne.n	8009dc8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	3304      	adds	r3, #4
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f7fe fa50 	bl	8008220 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d8c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d98:	4b0f      	ldr	r3, [pc, #60]	@ (8009dd8 <xTaskPriorityDisinherit+0xd8>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d903      	bls.n	8009da8 <xTaskPriorityDisinherit+0xa8>
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009da4:	4a0c      	ldr	r2, [pc, #48]	@ (8009dd8 <xTaskPriorityDisinherit+0xd8>)
 8009da6:	6013      	str	r3, [r2, #0]
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dac:	4613      	mov	r3, r2
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	4413      	add	r3, r2
 8009db2:	009b      	lsls	r3, r3, #2
 8009db4:	4a09      	ldr	r2, [pc, #36]	@ (8009ddc <xTaskPriorityDisinherit+0xdc>)
 8009db6:	441a      	add	r2, r3
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	3304      	adds	r3, #4
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	4610      	mov	r0, r2
 8009dc0:	f7fe f9d1 	bl	8008166 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009dc8:	697b      	ldr	r3, [r7, #20]
	}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3718      	adds	r7, #24
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
 8009dd2:	bf00      	nop
 8009dd4:	20000cd8 	.word	0x20000cd8
 8009dd8:	200011b4 	.word	0x200011b4
 8009ddc:	20000cdc 	.word	0x20000cdc

08009de0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009dea:	4b21      	ldr	r3, [pc, #132]	@ (8009e70 <prvAddCurrentTaskToDelayedList+0x90>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009df0:	4b20      	ldr	r3, [pc, #128]	@ (8009e74 <prvAddCurrentTaskToDelayedList+0x94>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	3304      	adds	r3, #4
 8009df6:	4618      	mov	r0, r3
 8009df8:	f7fe fa12 	bl	8008220 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009e02:	d10a      	bne.n	8009e1a <prvAddCurrentTaskToDelayedList+0x3a>
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d007      	beq.n	8009e1a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8009e74 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	3304      	adds	r3, #4
 8009e10:	4619      	mov	r1, r3
 8009e12:	4819      	ldr	r0, [pc, #100]	@ (8009e78 <prvAddCurrentTaskToDelayedList+0x98>)
 8009e14:	f7fe f9a7 	bl	8008166 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009e18:	e026      	b.n	8009e68 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009e1a:	68fa      	ldr	r2, [r7, #12]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	4413      	add	r3, r2
 8009e20:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009e22:	4b14      	ldr	r3, [pc, #80]	@ (8009e74 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	68ba      	ldr	r2, [r7, #8]
 8009e28:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009e2a:	68ba      	ldr	r2, [r7, #8]
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d209      	bcs.n	8009e46 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e32:	4b12      	ldr	r3, [pc, #72]	@ (8009e7c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009e34:	681a      	ldr	r2, [r3, #0]
 8009e36:	4b0f      	ldr	r3, [pc, #60]	@ (8009e74 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	3304      	adds	r3, #4
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	4610      	mov	r0, r2
 8009e40:	f7fe f9b5 	bl	80081ae <vListInsert>
}
 8009e44:	e010      	b.n	8009e68 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e46:	4b0e      	ldr	r3, [pc, #56]	@ (8009e80 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009e48:	681a      	ldr	r2, [r3, #0]
 8009e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8009e74 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	3304      	adds	r3, #4
 8009e50:	4619      	mov	r1, r3
 8009e52:	4610      	mov	r0, r2
 8009e54:	f7fe f9ab 	bl	80081ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009e58:	4b0a      	ldr	r3, [pc, #40]	@ (8009e84 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	68ba      	ldr	r2, [r7, #8]
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	d202      	bcs.n	8009e68 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009e62:	4a08      	ldr	r2, [pc, #32]	@ (8009e84 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	6013      	str	r3, [r2, #0]
}
 8009e68:	bf00      	nop
 8009e6a:	3710      	adds	r7, #16
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}
 8009e70:	200011b0 	.word	0x200011b0
 8009e74:	20000cd8 	.word	0x20000cd8
 8009e78:	20001198 	.word	0x20001198
 8009e7c:	20001168 	.word	0x20001168
 8009e80:	20001164 	.word	0x20001164
 8009e84:	200011cc 	.word	0x200011cc

08009e88 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b08a      	sub	sp, #40	@ 0x28
 8009e8c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009e92:	f000 fb13 	bl	800a4bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009e96:	4b1d      	ldr	r3, [pc, #116]	@ (8009f0c <xTimerCreateTimerTask+0x84>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d021      	beq.n	8009ee2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009ea6:	1d3a      	adds	r2, r7, #4
 8009ea8:	f107 0108 	add.w	r1, r7, #8
 8009eac:	f107 030c 	add.w	r3, r7, #12
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f7fe f911 	bl	80080d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009eb6:	6879      	ldr	r1, [r7, #4]
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	68fa      	ldr	r2, [r7, #12]
 8009ebc:	9202      	str	r2, [sp, #8]
 8009ebe:	9301      	str	r3, [sp, #4]
 8009ec0:	2302      	movs	r3, #2
 8009ec2:	9300      	str	r3, [sp, #0]
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	460a      	mov	r2, r1
 8009ec8:	4911      	ldr	r1, [pc, #68]	@ (8009f10 <xTimerCreateTimerTask+0x88>)
 8009eca:	4812      	ldr	r0, [pc, #72]	@ (8009f14 <xTimerCreateTimerTask+0x8c>)
 8009ecc:	f7fe ffc8 	bl	8008e60 <xTaskCreateStatic>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	4a11      	ldr	r2, [pc, #68]	@ (8009f18 <xTimerCreateTimerTask+0x90>)
 8009ed4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009ed6:	4b10      	ldr	r3, [pc, #64]	@ (8009f18 <xTimerCreateTimerTask+0x90>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d001      	beq.n	8009ee2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d10b      	bne.n	8009f00 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eec:	f383 8811 	msr	BASEPRI, r3
 8009ef0:	f3bf 8f6f 	isb	sy
 8009ef4:	f3bf 8f4f 	dsb	sy
 8009ef8:	613b      	str	r3, [r7, #16]
}
 8009efa:	bf00      	nop
 8009efc:	bf00      	nop
 8009efe:	e7fd      	b.n	8009efc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009f00:	697b      	ldr	r3, [r7, #20]
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3718      	adds	r7, #24
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	bf00      	nop
 8009f0c:	20001210 	.word	0x20001210
 8009f10:	0800e1c8 	.word	0x0800e1c8
 8009f14:	0800a055 	.word	0x0800a055
 8009f18:	20001214 	.word	0x20001214

08009f1c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b08a      	sub	sp, #40	@ 0x28
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	60f8      	str	r0, [r7, #12]
 8009f24:	60b9      	str	r1, [r7, #8]
 8009f26:	607a      	str	r2, [r7, #4]
 8009f28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d10b      	bne.n	8009f4c <xTimerGenericCommand+0x30>
	__asm volatile
 8009f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f38:	f383 8811 	msr	BASEPRI, r3
 8009f3c:	f3bf 8f6f 	isb	sy
 8009f40:	f3bf 8f4f 	dsb	sy
 8009f44:	623b      	str	r3, [r7, #32]
}
 8009f46:	bf00      	nop
 8009f48:	bf00      	nop
 8009f4a:	e7fd      	b.n	8009f48 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009f4c:	4b19      	ldr	r3, [pc, #100]	@ (8009fb4 <xTimerGenericCommand+0x98>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d02a      	beq.n	8009faa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	2b05      	cmp	r3, #5
 8009f64:	dc18      	bgt.n	8009f98 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009f66:	f7ff fead 	bl	8009cc4 <xTaskGetSchedulerState>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	2b02      	cmp	r3, #2
 8009f6e:	d109      	bne.n	8009f84 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009f70:	4b10      	ldr	r3, [pc, #64]	@ (8009fb4 <xTimerGenericCommand+0x98>)
 8009f72:	6818      	ldr	r0, [r3, #0]
 8009f74:	f107 0110 	add.w	r1, r7, #16
 8009f78:	2300      	movs	r3, #0
 8009f7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f7c:	f7fe fac0 	bl	8008500 <xQueueGenericSend>
 8009f80:	6278      	str	r0, [r7, #36]	@ 0x24
 8009f82:	e012      	b.n	8009faa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009f84:	4b0b      	ldr	r3, [pc, #44]	@ (8009fb4 <xTimerGenericCommand+0x98>)
 8009f86:	6818      	ldr	r0, [r3, #0]
 8009f88:	f107 0110 	add.w	r1, r7, #16
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	2200      	movs	r2, #0
 8009f90:	f7fe fab6 	bl	8008500 <xQueueGenericSend>
 8009f94:	6278      	str	r0, [r7, #36]	@ 0x24
 8009f96:	e008      	b.n	8009faa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009f98:	4b06      	ldr	r3, [pc, #24]	@ (8009fb4 <xTimerGenericCommand+0x98>)
 8009f9a:	6818      	ldr	r0, [r3, #0]
 8009f9c:	f107 0110 	add.w	r1, r7, #16
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	683a      	ldr	r2, [r7, #0]
 8009fa4:	f7fe fbae 	bl	8008704 <xQueueGenericSendFromISR>
 8009fa8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3728      	adds	r7, #40	@ 0x28
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}
 8009fb4:	20001210 	.word	0x20001210

08009fb8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b088      	sub	sp, #32
 8009fbc:	af02      	add	r7, sp, #8
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fc2:	4b23      	ldr	r3, [pc, #140]	@ (800a050 <prvProcessExpiredTimer+0x98>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	68db      	ldr	r3, [r3, #12]
 8009fc8:	68db      	ldr	r3, [r3, #12]
 8009fca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	3304      	adds	r3, #4
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f7fe f925 	bl	8008220 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009fdc:	f003 0304 	and.w	r3, r3, #4
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d023      	beq.n	800a02c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	699a      	ldr	r2, [r3, #24]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	18d1      	adds	r1, r2, r3
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	683a      	ldr	r2, [r7, #0]
 8009ff0:	6978      	ldr	r0, [r7, #20]
 8009ff2:	f000 f8d5 	bl	800a1a0 <prvInsertTimerInActiveList>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d020      	beq.n	800a03e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	9300      	str	r3, [sp, #0]
 800a000:	2300      	movs	r3, #0
 800a002:	687a      	ldr	r2, [r7, #4]
 800a004:	2100      	movs	r1, #0
 800a006:	6978      	ldr	r0, [r7, #20]
 800a008:	f7ff ff88 	bl	8009f1c <xTimerGenericCommand>
 800a00c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d114      	bne.n	800a03e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a018:	f383 8811 	msr	BASEPRI, r3
 800a01c:	f3bf 8f6f 	isb	sy
 800a020:	f3bf 8f4f 	dsb	sy
 800a024:	60fb      	str	r3, [r7, #12]
}
 800a026:	bf00      	nop
 800a028:	bf00      	nop
 800a02a:	e7fd      	b.n	800a028 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a032:	f023 0301 	bic.w	r3, r3, #1
 800a036:	b2da      	uxtb	r2, r3
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	6a1b      	ldr	r3, [r3, #32]
 800a042:	6978      	ldr	r0, [r7, #20]
 800a044:	4798      	blx	r3
}
 800a046:	bf00      	nop
 800a048:	3718      	adds	r7, #24
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	bf00      	nop
 800a050:	20001208 	.word	0x20001208

0800a054 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b084      	sub	sp, #16
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a05c:	f107 0308 	add.w	r3, r7, #8
 800a060:	4618      	mov	r0, r3
 800a062:	f000 f859 	bl	800a118 <prvGetNextExpireTime>
 800a066:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	4619      	mov	r1, r3
 800a06c:	68f8      	ldr	r0, [r7, #12]
 800a06e:	f000 f805 	bl	800a07c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a072:	f000 f8d7 	bl	800a224 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a076:	bf00      	nop
 800a078:	e7f0      	b.n	800a05c <prvTimerTask+0x8>
	...

0800a07c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b084      	sub	sp, #16
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a086:	f7ff f957 	bl	8009338 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a08a:	f107 0308 	add.w	r3, r7, #8
 800a08e:	4618      	mov	r0, r3
 800a090:	f000 f866 	bl	800a160 <prvSampleTimeNow>
 800a094:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d130      	bne.n	800a0fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d10a      	bne.n	800a0b8 <prvProcessTimerOrBlockTask+0x3c>
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d806      	bhi.n	800a0b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a0aa:	f7ff f98b 	bl	80093c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a0ae:	68f9      	ldr	r1, [r7, #12]
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f7ff ff81 	bl	8009fb8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a0b6:	e024      	b.n	800a102 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d008      	beq.n	800a0d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a0be:	4b13      	ldr	r3, [pc, #76]	@ (800a10c <prvProcessTimerOrBlockTask+0x90>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d101      	bne.n	800a0cc <prvProcessTimerOrBlockTask+0x50>
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	e000      	b.n	800a0ce <prvProcessTimerOrBlockTask+0x52>
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a0d0:	4b0f      	ldr	r3, [pc, #60]	@ (800a110 <prvProcessTimerOrBlockTask+0x94>)
 800a0d2:	6818      	ldr	r0, [r3, #0]
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	1ad3      	subs	r3, r2, r3
 800a0da:	683a      	ldr	r2, [r7, #0]
 800a0dc:	4619      	mov	r1, r3
 800a0de:	f7fe fe8b 	bl	8008df8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a0e2:	f7ff f96f 	bl	80093c4 <xTaskResumeAll>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d10a      	bne.n	800a102 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a0ec:	4b09      	ldr	r3, [pc, #36]	@ (800a114 <prvProcessTimerOrBlockTask+0x98>)
 800a0ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0f2:	601a      	str	r2, [r3, #0]
 800a0f4:	f3bf 8f4f 	dsb	sy
 800a0f8:	f3bf 8f6f 	isb	sy
}
 800a0fc:	e001      	b.n	800a102 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a0fe:	f7ff f961 	bl	80093c4 <xTaskResumeAll>
}
 800a102:	bf00      	nop
 800a104:	3710      	adds	r7, #16
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
 800a10a:	bf00      	nop
 800a10c:	2000120c 	.word	0x2000120c
 800a110:	20001210 	.word	0x20001210
 800a114:	e000ed04 	.word	0xe000ed04

0800a118 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a118:	b480      	push	{r7}
 800a11a:	b085      	sub	sp, #20
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a120:	4b0e      	ldr	r3, [pc, #56]	@ (800a15c <prvGetNextExpireTime+0x44>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d101      	bne.n	800a12e <prvGetNextExpireTime+0x16>
 800a12a:	2201      	movs	r2, #1
 800a12c:	e000      	b.n	800a130 <prvGetNextExpireTime+0x18>
 800a12e:	2200      	movs	r2, #0
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d105      	bne.n	800a148 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a13c:	4b07      	ldr	r3, [pc, #28]	@ (800a15c <prvGetNextExpireTime+0x44>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	68db      	ldr	r3, [r3, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	60fb      	str	r3, [r7, #12]
 800a146:	e001      	b.n	800a14c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a148:	2300      	movs	r3, #0
 800a14a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a14c:	68fb      	ldr	r3, [r7, #12]
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3714      	adds	r7, #20
 800a152:	46bd      	mov	sp, r7
 800a154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a158:	4770      	bx	lr
 800a15a:	bf00      	nop
 800a15c:	20001208 	.word	0x20001208

0800a160 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a168:	f7ff f9ca 	bl	8009500 <xTaskGetTickCount>
 800a16c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a16e:	4b0b      	ldr	r3, [pc, #44]	@ (800a19c <prvSampleTimeNow+0x3c>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	68fa      	ldr	r2, [r7, #12]
 800a174:	429a      	cmp	r2, r3
 800a176:	d205      	bcs.n	800a184 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a178:	f000 f93a 	bl	800a3f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2201      	movs	r2, #1
 800a180:	601a      	str	r2, [r3, #0]
 800a182:	e002      	b.n	800a18a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2200      	movs	r2, #0
 800a188:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a18a:	4a04      	ldr	r2, [pc, #16]	@ (800a19c <prvSampleTimeNow+0x3c>)
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a190:	68fb      	ldr	r3, [r7, #12]
}
 800a192:	4618      	mov	r0, r3
 800a194:	3710      	adds	r7, #16
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	bf00      	nop
 800a19c:	20001218 	.word	0x20001218

0800a1a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b086      	sub	sp, #24
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	60b9      	str	r1, [r7, #8]
 800a1aa:	607a      	str	r2, [r7, #4]
 800a1ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	68ba      	ldr	r2, [r7, #8]
 800a1b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	68fa      	ldr	r2, [r7, #12]
 800a1bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a1be:	68ba      	ldr	r2, [r7, #8]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	429a      	cmp	r2, r3
 800a1c4:	d812      	bhi.n	800a1ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1c6:	687a      	ldr	r2, [r7, #4]
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	1ad2      	subs	r2, r2, r3
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	699b      	ldr	r3, [r3, #24]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d302      	bcc.n	800a1da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	617b      	str	r3, [r7, #20]
 800a1d8:	e01b      	b.n	800a212 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a1da:	4b10      	ldr	r3, [pc, #64]	@ (800a21c <prvInsertTimerInActiveList+0x7c>)
 800a1dc:	681a      	ldr	r2, [r3, #0]
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	3304      	adds	r3, #4
 800a1e2:	4619      	mov	r1, r3
 800a1e4:	4610      	mov	r0, r2
 800a1e6:	f7fd ffe2 	bl	80081ae <vListInsert>
 800a1ea:	e012      	b.n	800a212 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a1ec:	687a      	ldr	r2, [r7, #4]
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d206      	bcs.n	800a202 <prvInsertTimerInActiveList+0x62>
 800a1f4:	68ba      	ldr	r2, [r7, #8]
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d302      	bcc.n	800a202 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	617b      	str	r3, [r7, #20]
 800a200:	e007      	b.n	800a212 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a202:	4b07      	ldr	r3, [pc, #28]	@ (800a220 <prvInsertTimerInActiveList+0x80>)
 800a204:	681a      	ldr	r2, [r3, #0]
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	3304      	adds	r3, #4
 800a20a:	4619      	mov	r1, r3
 800a20c:	4610      	mov	r0, r2
 800a20e:	f7fd ffce 	bl	80081ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a212:	697b      	ldr	r3, [r7, #20]
}
 800a214:	4618      	mov	r0, r3
 800a216:	3718      	adds	r7, #24
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}
 800a21c:	2000120c 	.word	0x2000120c
 800a220:	20001208 	.word	0x20001208

0800a224 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b08e      	sub	sp, #56	@ 0x38
 800a228:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a22a:	e0ce      	b.n	800a3ca <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	da19      	bge.n	800a266 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a232:	1d3b      	adds	r3, r7, #4
 800a234:	3304      	adds	r3, #4
 800a236:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d10b      	bne.n	800a256 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a23e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a242:	f383 8811 	msr	BASEPRI, r3
 800a246:	f3bf 8f6f 	isb	sy
 800a24a:	f3bf 8f4f 	dsb	sy
 800a24e:	61fb      	str	r3, [r7, #28]
}
 800a250:	bf00      	nop
 800a252:	bf00      	nop
 800a254:	e7fd      	b.n	800a252 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a25c:	6850      	ldr	r0, [r2, #4]
 800a25e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a260:	6892      	ldr	r2, [r2, #8]
 800a262:	4611      	mov	r1, r2
 800a264:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	f2c0 80ae 	blt.w	800a3ca <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a274:	695b      	ldr	r3, [r3, #20]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d004      	beq.n	800a284 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a27a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a27c:	3304      	adds	r3, #4
 800a27e:	4618      	mov	r0, r3
 800a280:	f7fd ffce 	bl	8008220 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a284:	463b      	mov	r3, r7
 800a286:	4618      	mov	r0, r3
 800a288:	f7ff ff6a 	bl	800a160 <prvSampleTimeNow>
 800a28c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2b09      	cmp	r3, #9
 800a292:	f200 8097 	bhi.w	800a3c4 <prvProcessReceivedCommands+0x1a0>
 800a296:	a201      	add	r2, pc, #4	@ (adr r2, 800a29c <prvProcessReceivedCommands+0x78>)
 800a298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a29c:	0800a2c5 	.word	0x0800a2c5
 800a2a0:	0800a2c5 	.word	0x0800a2c5
 800a2a4:	0800a2c5 	.word	0x0800a2c5
 800a2a8:	0800a33b 	.word	0x0800a33b
 800a2ac:	0800a34f 	.word	0x0800a34f
 800a2b0:	0800a39b 	.word	0x0800a39b
 800a2b4:	0800a2c5 	.word	0x0800a2c5
 800a2b8:	0800a2c5 	.word	0x0800a2c5
 800a2bc:	0800a33b 	.word	0x0800a33b
 800a2c0:	0800a34f 	.word	0x0800a34f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a2c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a2ca:	f043 0301 	orr.w	r3, r3, #1
 800a2ce:	b2da      	uxtb	r2, r3
 800a2d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a2d6:	68ba      	ldr	r2, [r7, #8]
 800a2d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2da:	699b      	ldr	r3, [r3, #24]
 800a2dc:	18d1      	adds	r1, r2, r3
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a2e4:	f7ff ff5c 	bl	800a1a0 <prvInsertTimerInActiveList>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d06c      	beq.n	800a3c8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a2ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2f0:	6a1b      	ldr	r3, [r3, #32]
 800a2f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a2f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a2f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a2fc:	f003 0304 	and.w	r3, r3, #4
 800a300:	2b00      	cmp	r3, #0
 800a302:	d061      	beq.n	800a3c8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a304:	68ba      	ldr	r2, [r7, #8]
 800a306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a308:	699b      	ldr	r3, [r3, #24]
 800a30a:	441a      	add	r2, r3
 800a30c:	2300      	movs	r3, #0
 800a30e:	9300      	str	r3, [sp, #0]
 800a310:	2300      	movs	r3, #0
 800a312:	2100      	movs	r1, #0
 800a314:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a316:	f7ff fe01 	bl	8009f1c <xTimerGenericCommand>
 800a31a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a31c:	6a3b      	ldr	r3, [r7, #32]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d152      	bne.n	800a3c8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a326:	f383 8811 	msr	BASEPRI, r3
 800a32a:	f3bf 8f6f 	isb	sy
 800a32e:	f3bf 8f4f 	dsb	sy
 800a332:	61bb      	str	r3, [r7, #24]
}
 800a334:	bf00      	nop
 800a336:	bf00      	nop
 800a338:	e7fd      	b.n	800a336 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a33a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a33c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a340:	f023 0301 	bic.w	r3, r3, #1
 800a344:	b2da      	uxtb	r2, r3
 800a346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a348:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a34c:	e03d      	b.n	800a3ca <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a34e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a350:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a354:	f043 0301 	orr.w	r3, r3, #1
 800a358:	b2da      	uxtb	r2, r3
 800a35a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a35c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a360:	68ba      	ldr	r2, [r7, #8]
 800a362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a364:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a368:	699b      	ldr	r3, [r3, #24]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d10b      	bne.n	800a386 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a36e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a372:	f383 8811 	msr	BASEPRI, r3
 800a376:	f3bf 8f6f 	isb	sy
 800a37a:	f3bf 8f4f 	dsb	sy
 800a37e:	617b      	str	r3, [r7, #20]
}
 800a380:	bf00      	nop
 800a382:	bf00      	nop
 800a384:	e7fd      	b.n	800a382 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a388:	699a      	ldr	r2, [r3, #24]
 800a38a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a38c:	18d1      	adds	r1, r2, r3
 800a38e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a390:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a392:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a394:	f7ff ff04 	bl	800a1a0 <prvInsertTimerInActiveList>
					break;
 800a398:	e017      	b.n	800a3ca <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a39a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a39c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a3a0:	f003 0302 	and.w	r3, r3, #2
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d103      	bne.n	800a3b0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a3a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3aa:	f000 fcc9 	bl	800ad40 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a3ae:	e00c      	b.n	800a3ca <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a3b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a3b6:	f023 0301 	bic.w	r3, r3, #1
 800a3ba:	b2da      	uxtb	r2, r3
 800a3bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a3c2:	e002      	b.n	800a3ca <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a3c4:	bf00      	nop
 800a3c6:	e000      	b.n	800a3ca <prvProcessReceivedCommands+0x1a6>
					break;
 800a3c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a3ca:	4b08      	ldr	r3, [pc, #32]	@ (800a3ec <prvProcessReceivedCommands+0x1c8>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	1d39      	adds	r1, r7, #4
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f7fe fa34 	bl	8008840 <xQueueReceive>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	f47f af26 	bne.w	800a22c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a3e0:	bf00      	nop
 800a3e2:	bf00      	nop
 800a3e4:	3730      	adds	r7, #48	@ 0x30
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	20001210 	.word	0x20001210

0800a3f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b088      	sub	sp, #32
 800a3f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a3f6:	e049      	b.n	800a48c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a3f8:	4b2e      	ldr	r3, [pc, #184]	@ (800a4b4 <prvSwitchTimerLists+0xc4>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	68db      	ldr	r3, [r3, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a402:	4b2c      	ldr	r3, [pc, #176]	@ (800a4b4 <prvSwitchTimerLists+0xc4>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	68db      	ldr	r3, [r3, #12]
 800a408:	68db      	ldr	r3, [r3, #12]
 800a40a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	3304      	adds	r3, #4
 800a410:	4618      	mov	r0, r3
 800a412:	f7fd ff05 	bl	8008220 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	6a1b      	ldr	r3, [r3, #32]
 800a41a:	68f8      	ldr	r0, [r7, #12]
 800a41c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a424:	f003 0304 	and.w	r3, r3, #4
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d02f      	beq.n	800a48c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	699b      	ldr	r3, [r3, #24]
 800a430:	693a      	ldr	r2, [r7, #16]
 800a432:	4413      	add	r3, r2
 800a434:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a436:	68ba      	ldr	r2, [r7, #8]
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d90e      	bls.n	800a45c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	68ba      	ldr	r2, [r7, #8]
 800a442:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	68fa      	ldr	r2, [r7, #12]
 800a448:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a44a:	4b1a      	ldr	r3, [pc, #104]	@ (800a4b4 <prvSwitchTimerLists+0xc4>)
 800a44c:	681a      	ldr	r2, [r3, #0]
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	3304      	adds	r3, #4
 800a452:	4619      	mov	r1, r3
 800a454:	4610      	mov	r0, r2
 800a456:	f7fd feaa 	bl	80081ae <vListInsert>
 800a45a:	e017      	b.n	800a48c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a45c:	2300      	movs	r3, #0
 800a45e:	9300      	str	r3, [sp, #0]
 800a460:	2300      	movs	r3, #0
 800a462:	693a      	ldr	r2, [r7, #16]
 800a464:	2100      	movs	r1, #0
 800a466:	68f8      	ldr	r0, [r7, #12]
 800a468:	f7ff fd58 	bl	8009f1c <xTimerGenericCommand>
 800a46c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d10b      	bne.n	800a48c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a478:	f383 8811 	msr	BASEPRI, r3
 800a47c:	f3bf 8f6f 	isb	sy
 800a480:	f3bf 8f4f 	dsb	sy
 800a484:	603b      	str	r3, [r7, #0]
}
 800a486:	bf00      	nop
 800a488:	bf00      	nop
 800a48a:	e7fd      	b.n	800a488 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a48c:	4b09      	ldr	r3, [pc, #36]	@ (800a4b4 <prvSwitchTimerLists+0xc4>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d1b0      	bne.n	800a3f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a496:	4b07      	ldr	r3, [pc, #28]	@ (800a4b4 <prvSwitchTimerLists+0xc4>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a49c:	4b06      	ldr	r3, [pc, #24]	@ (800a4b8 <prvSwitchTimerLists+0xc8>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4a04      	ldr	r2, [pc, #16]	@ (800a4b4 <prvSwitchTimerLists+0xc4>)
 800a4a2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a4a4:	4a04      	ldr	r2, [pc, #16]	@ (800a4b8 <prvSwitchTimerLists+0xc8>)
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	6013      	str	r3, [r2, #0]
}
 800a4aa:	bf00      	nop
 800a4ac:	3718      	adds	r7, #24
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}
 800a4b2:	bf00      	nop
 800a4b4:	20001208 	.word	0x20001208
 800a4b8:	2000120c 	.word	0x2000120c

0800a4bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b082      	sub	sp, #8
 800a4c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a4c2:	f000 f969 	bl	800a798 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a4c6:	4b15      	ldr	r3, [pc, #84]	@ (800a51c <prvCheckForValidListAndQueue+0x60>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d120      	bne.n	800a510 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a4ce:	4814      	ldr	r0, [pc, #80]	@ (800a520 <prvCheckForValidListAndQueue+0x64>)
 800a4d0:	f7fd fe1c 	bl	800810c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a4d4:	4813      	ldr	r0, [pc, #76]	@ (800a524 <prvCheckForValidListAndQueue+0x68>)
 800a4d6:	f7fd fe19 	bl	800810c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a4da:	4b13      	ldr	r3, [pc, #76]	@ (800a528 <prvCheckForValidListAndQueue+0x6c>)
 800a4dc:	4a10      	ldr	r2, [pc, #64]	@ (800a520 <prvCheckForValidListAndQueue+0x64>)
 800a4de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a4e0:	4b12      	ldr	r3, [pc, #72]	@ (800a52c <prvCheckForValidListAndQueue+0x70>)
 800a4e2:	4a10      	ldr	r2, [pc, #64]	@ (800a524 <prvCheckForValidListAndQueue+0x68>)
 800a4e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	9300      	str	r3, [sp, #0]
 800a4ea:	4b11      	ldr	r3, [pc, #68]	@ (800a530 <prvCheckForValidListAndQueue+0x74>)
 800a4ec:	4a11      	ldr	r2, [pc, #68]	@ (800a534 <prvCheckForValidListAndQueue+0x78>)
 800a4ee:	2110      	movs	r1, #16
 800a4f0:	200a      	movs	r0, #10
 800a4f2:	f7fd ff29 	bl	8008348 <xQueueGenericCreateStatic>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	4a08      	ldr	r2, [pc, #32]	@ (800a51c <prvCheckForValidListAndQueue+0x60>)
 800a4fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a4fc:	4b07      	ldr	r3, [pc, #28]	@ (800a51c <prvCheckForValidListAndQueue+0x60>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d005      	beq.n	800a510 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a504:	4b05      	ldr	r3, [pc, #20]	@ (800a51c <prvCheckForValidListAndQueue+0x60>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	490b      	ldr	r1, [pc, #44]	@ (800a538 <prvCheckForValidListAndQueue+0x7c>)
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7fe fc4a 	bl	8008da4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a510:	f000 f974 	bl	800a7fc <vPortExitCritical>
}
 800a514:	bf00      	nop
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}
 800a51a:	bf00      	nop
 800a51c:	20001210 	.word	0x20001210
 800a520:	200011e0 	.word	0x200011e0
 800a524:	200011f4 	.word	0x200011f4
 800a528:	20001208 	.word	0x20001208
 800a52c:	2000120c 	.word	0x2000120c
 800a530:	200012bc 	.word	0x200012bc
 800a534:	2000121c 	.word	0x2000121c
 800a538:	0800e1d0 	.word	0x0800e1d0

0800a53c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a53c:	b480      	push	{r7}
 800a53e:	b085      	sub	sp, #20
 800a540:	af00      	add	r7, sp, #0
 800a542:	60f8      	str	r0, [r7, #12]
 800a544:	60b9      	str	r1, [r7, #8]
 800a546:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	3b04      	subs	r3, #4
 800a54c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a554:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	3b04      	subs	r3, #4
 800a55a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	f023 0201 	bic.w	r2, r3, #1
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	3b04      	subs	r3, #4
 800a56a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a56c:	4a0c      	ldr	r2, [pc, #48]	@ (800a5a0 <pxPortInitialiseStack+0x64>)
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	3b14      	subs	r3, #20
 800a576:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a578:	687a      	ldr	r2, [r7, #4]
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	3b04      	subs	r3, #4
 800a582:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f06f 0202 	mvn.w	r2, #2
 800a58a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	3b20      	subs	r3, #32
 800a590:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a592:	68fb      	ldr	r3, [r7, #12]
}
 800a594:	4618      	mov	r0, r3
 800a596:	3714      	adds	r7, #20
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr
 800a5a0:	0800a5a5 	.word	0x0800a5a5

0800a5a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b085      	sub	sp, #20
 800a5a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a5ae:	4b13      	ldr	r3, [pc, #76]	@ (800a5fc <prvTaskExitError+0x58>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a5b6:	d00b      	beq.n	800a5d0 <prvTaskExitError+0x2c>
	__asm volatile
 800a5b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5bc:	f383 8811 	msr	BASEPRI, r3
 800a5c0:	f3bf 8f6f 	isb	sy
 800a5c4:	f3bf 8f4f 	dsb	sy
 800a5c8:	60fb      	str	r3, [r7, #12]
}
 800a5ca:	bf00      	nop
 800a5cc:	bf00      	nop
 800a5ce:	e7fd      	b.n	800a5cc <prvTaskExitError+0x28>
	__asm volatile
 800a5d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5d4:	f383 8811 	msr	BASEPRI, r3
 800a5d8:	f3bf 8f6f 	isb	sy
 800a5dc:	f3bf 8f4f 	dsb	sy
 800a5e0:	60bb      	str	r3, [r7, #8]
}
 800a5e2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a5e4:	bf00      	nop
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d0fc      	beq.n	800a5e6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a5ec:	bf00      	nop
 800a5ee:	bf00      	nop
 800a5f0:	3714      	adds	r7, #20
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f8:	4770      	bx	lr
 800a5fa:	bf00      	nop
 800a5fc:	20000028 	.word	0x20000028

0800a600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a600:	4b07      	ldr	r3, [pc, #28]	@ (800a620 <pxCurrentTCBConst2>)
 800a602:	6819      	ldr	r1, [r3, #0]
 800a604:	6808      	ldr	r0, [r1, #0]
 800a606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a60a:	f380 8809 	msr	PSP, r0
 800a60e:	f3bf 8f6f 	isb	sy
 800a612:	f04f 0000 	mov.w	r0, #0
 800a616:	f380 8811 	msr	BASEPRI, r0
 800a61a:	4770      	bx	lr
 800a61c:	f3af 8000 	nop.w

0800a620 <pxCurrentTCBConst2>:
 800a620:	20000cd8 	.word	0x20000cd8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a624:	bf00      	nop
 800a626:	bf00      	nop

0800a628 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a628:	4808      	ldr	r0, [pc, #32]	@ (800a64c <prvPortStartFirstTask+0x24>)
 800a62a:	6800      	ldr	r0, [r0, #0]
 800a62c:	6800      	ldr	r0, [r0, #0]
 800a62e:	f380 8808 	msr	MSP, r0
 800a632:	f04f 0000 	mov.w	r0, #0
 800a636:	f380 8814 	msr	CONTROL, r0
 800a63a:	b662      	cpsie	i
 800a63c:	b661      	cpsie	f
 800a63e:	f3bf 8f4f 	dsb	sy
 800a642:	f3bf 8f6f 	isb	sy
 800a646:	df00      	svc	0
 800a648:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a64a:	bf00      	nop
 800a64c:	e000ed08 	.word	0xe000ed08

0800a650 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b086      	sub	sp, #24
 800a654:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a656:	4b47      	ldr	r3, [pc, #284]	@ (800a774 <xPortStartScheduler+0x124>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	4a47      	ldr	r2, [pc, #284]	@ (800a778 <xPortStartScheduler+0x128>)
 800a65c:	4293      	cmp	r3, r2
 800a65e:	d10b      	bne.n	800a678 <xPortStartScheduler+0x28>
	__asm volatile
 800a660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a664:	f383 8811 	msr	BASEPRI, r3
 800a668:	f3bf 8f6f 	isb	sy
 800a66c:	f3bf 8f4f 	dsb	sy
 800a670:	613b      	str	r3, [r7, #16]
}
 800a672:	bf00      	nop
 800a674:	bf00      	nop
 800a676:	e7fd      	b.n	800a674 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a678:	4b3e      	ldr	r3, [pc, #248]	@ (800a774 <xPortStartScheduler+0x124>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	4a3f      	ldr	r2, [pc, #252]	@ (800a77c <xPortStartScheduler+0x12c>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d10b      	bne.n	800a69a <xPortStartScheduler+0x4a>
	__asm volatile
 800a682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a686:	f383 8811 	msr	BASEPRI, r3
 800a68a:	f3bf 8f6f 	isb	sy
 800a68e:	f3bf 8f4f 	dsb	sy
 800a692:	60fb      	str	r3, [r7, #12]
}
 800a694:	bf00      	nop
 800a696:	bf00      	nop
 800a698:	e7fd      	b.n	800a696 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a69a:	4b39      	ldr	r3, [pc, #228]	@ (800a780 <xPortStartScheduler+0x130>)
 800a69c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	781b      	ldrb	r3, [r3, #0]
 800a6a2:	b2db      	uxtb	r3, r3
 800a6a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	22ff      	movs	r2, #255	@ 0xff
 800a6aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	b2db      	uxtb	r3, r3
 800a6b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a6b4:	78fb      	ldrb	r3, [r7, #3]
 800a6b6:	b2db      	uxtb	r3, r3
 800a6b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a6bc:	b2da      	uxtb	r2, r3
 800a6be:	4b31      	ldr	r3, [pc, #196]	@ (800a784 <xPortStartScheduler+0x134>)
 800a6c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a6c2:	4b31      	ldr	r3, [pc, #196]	@ (800a788 <xPortStartScheduler+0x138>)
 800a6c4:	2207      	movs	r2, #7
 800a6c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a6c8:	e009      	b.n	800a6de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a6ca:	4b2f      	ldr	r3, [pc, #188]	@ (800a788 <xPortStartScheduler+0x138>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	3b01      	subs	r3, #1
 800a6d0:	4a2d      	ldr	r2, [pc, #180]	@ (800a788 <xPortStartScheduler+0x138>)
 800a6d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a6d4:	78fb      	ldrb	r3, [r7, #3]
 800a6d6:	b2db      	uxtb	r3, r3
 800a6d8:	005b      	lsls	r3, r3, #1
 800a6da:	b2db      	uxtb	r3, r3
 800a6dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a6de:	78fb      	ldrb	r3, [r7, #3]
 800a6e0:	b2db      	uxtb	r3, r3
 800a6e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6e6:	2b80      	cmp	r3, #128	@ 0x80
 800a6e8:	d0ef      	beq.n	800a6ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a6ea:	4b27      	ldr	r3, [pc, #156]	@ (800a788 <xPortStartScheduler+0x138>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f1c3 0307 	rsb	r3, r3, #7
 800a6f2:	2b04      	cmp	r3, #4
 800a6f4:	d00b      	beq.n	800a70e <xPortStartScheduler+0xbe>
	__asm volatile
 800a6f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6fa:	f383 8811 	msr	BASEPRI, r3
 800a6fe:	f3bf 8f6f 	isb	sy
 800a702:	f3bf 8f4f 	dsb	sy
 800a706:	60bb      	str	r3, [r7, #8]
}
 800a708:	bf00      	nop
 800a70a:	bf00      	nop
 800a70c:	e7fd      	b.n	800a70a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a70e:	4b1e      	ldr	r3, [pc, #120]	@ (800a788 <xPortStartScheduler+0x138>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	021b      	lsls	r3, r3, #8
 800a714:	4a1c      	ldr	r2, [pc, #112]	@ (800a788 <xPortStartScheduler+0x138>)
 800a716:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a718:	4b1b      	ldr	r3, [pc, #108]	@ (800a788 <xPortStartScheduler+0x138>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a720:	4a19      	ldr	r2, [pc, #100]	@ (800a788 <xPortStartScheduler+0x138>)
 800a722:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	b2da      	uxtb	r2, r3
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a72c:	4b17      	ldr	r3, [pc, #92]	@ (800a78c <xPortStartScheduler+0x13c>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4a16      	ldr	r2, [pc, #88]	@ (800a78c <xPortStartScheduler+0x13c>)
 800a732:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a736:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a738:	4b14      	ldr	r3, [pc, #80]	@ (800a78c <xPortStartScheduler+0x13c>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	4a13      	ldr	r2, [pc, #76]	@ (800a78c <xPortStartScheduler+0x13c>)
 800a73e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a742:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a744:	f000 f9a6 	bl	800aa94 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a748:	4b11      	ldr	r3, [pc, #68]	@ (800a790 <xPortStartScheduler+0x140>)
 800a74a:	2200      	movs	r2, #0
 800a74c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a74e:	f000 f9dd 	bl	800ab0c <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a752:	4b10      	ldr	r3, [pc, #64]	@ (800a794 <xPortStartScheduler+0x144>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	4a0f      	ldr	r2, [pc, #60]	@ (800a794 <xPortStartScheduler+0x144>)
 800a758:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a75c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a75e:	f7ff ff63 	bl	800a628 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a762:	f7fe ffbf 	bl	80096e4 <vTaskSwitchContext>
	prvTaskExitError();
 800a766:	f7ff ff1d 	bl	800a5a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a76a:	2300      	movs	r3, #0
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3718      	adds	r7, #24
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}
 800a774:	e000ed00 	.word	0xe000ed00
 800a778:	410fc271 	.word	0x410fc271
 800a77c:	410fc270 	.word	0x410fc270
 800a780:	e000e400 	.word	0xe000e400
 800a784:	20001318 	.word	0x20001318
 800a788:	2000131c 	.word	0x2000131c
 800a78c:	e000ed20 	.word	0xe000ed20
 800a790:	20000028 	.word	0x20000028
 800a794:	e000ef34 	.word	0xe000ef34

0800a798 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a798:	b480      	push	{r7}
 800a79a:	b083      	sub	sp, #12
 800a79c:	af00      	add	r7, sp, #0
	__asm volatile
 800a79e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7a2:	f383 8811 	msr	BASEPRI, r3
 800a7a6:	f3bf 8f6f 	isb	sy
 800a7aa:	f3bf 8f4f 	dsb	sy
 800a7ae:	607b      	str	r3, [r7, #4]
}
 800a7b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a7b2:	4b10      	ldr	r3, [pc, #64]	@ (800a7f4 <vPortEnterCritical+0x5c>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	3301      	adds	r3, #1
 800a7b8:	4a0e      	ldr	r2, [pc, #56]	@ (800a7f4 <vPortEnterCritical+0x5c>)
 800a7ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a7bc:	4b0d      	ldr	r3, [pc, #52]	@ (800a7f4 <vPortEnterCritical+0x5c>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	2b01      	cmp	r3, #1
 800a7c2:	d110      	bne.n	800a7e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a7c4:	4b0c      	ldr	r3, [pc, #48]	@ (800a7f8 <vPortEnterCritical+0x60>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	b2db      	uxtb	r3, r3
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d00b      	beq.n	800a7e6 <vPortEnterCritical+0x4e>
	__asm volatile
 800a7ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7d2:	f383 8811 	msr	BASEPRI, r3
 800a7d6:	f3bf 8f6f 	isb	sy
 800a7da:	f3bf 8f4f 	dsb	sy
 800a7de:	603b      	str	r3, [r7, #0]
}
 800a7e0:	bf00      	nop
 800a7e2:	bf00      	nop
 800a7e4:	e7fd      	b.n	800a7e2 <vPortEnterCritical+0x4a>
	}
}
 800a7e6:	bf00      	nop
 800a7e8:	370c      	adds	r7, #12
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr
 800a7f2:	bf00      	nop
 800a7f4:	20000028 	.word	0x20000028
 800a7f8:	e000ed04 	.word	0xe000ed04

0800a7fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b083      	sub	sp, #12
 800a800:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a802:	4b12      	ldr	r3, [pc, #72]	@ (800a84c <vPortExitCritical+0x50>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d10b      	bne.n	800a822 <vPortExitCritical+0x26>
	__asm volatile
 800a80a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a80e:	f383 8811 	msr	BASEPRI, r3
 800a812:	f3bf 8f6f 	isb	sy
 800a816:	f3bf 8f4f 	dsb	sy
 800a81a:	607b      	str	r3, [r7, #4]
}
 800a81c:	bf00      	nop
 800a81e:	bf00      	nop
 800a820:	e7fd      	b.n	800a81e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a822:	4b0a      	ldr	r3, [pc, #40]	@ (800a84c <vPortExitCritical+0x50>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	3b01      	subs	r3, #1
 800a828:	4a08      	ldr	r2, [pc, #32]	@ (800a84c <vPortExitCritical+0x50>)
 800a82a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a82c:	4b07      	ldr	r3, [pc, #28]	@ (800a84c <vPortExitCritical+0x50>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d105      	bne.n	800a840 <vPortExitCritical+0x44>
 800a834:	2300      	movs	r3, #0
 800a836:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	f383 8811 	msr	BASEPRI, r3
}
 800a83e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a840:	bf00      	nop
 800a842:	370c      	adds	r7, #12
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr
 800a84c:	20000028 	.word	0x20000028

0800a850 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a850:	f3ef 8009 	mrs	r0, PSP
 800a854:	f3bf 8f6f 	isb	sy
 800a858:	4b15      	ldr	r3, [pc, #84]	@ (800a8b0 <pxCurrentTCBConst>)
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	f01e 0f10 	tst.w	lr, #16
 800a860:	bf08      	it	eq
 800a862:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a866:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a86a:	6010      	str	r0, [r2, #0]
 800a86c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a870:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a874:	f380 8811 	msr	BASEPRI, r0
 800a878:	f3bf 8f4f 	dsb	sy
 800a87c:	f3bf 8f6f 	isb	sy
 800a880:	f7fe ff30 	bl	80096e4 <vTaskSwitchContext>
 800a884:	f04f 0000 	mov.w	r0, #0
 800a888:	f380 8811 	msr	BASEPRI, r0
 800a88c:	bc09      	pop	{r0, r3}
 800a88e:	6819      	ldr	r1, [r3, #0]
 800a890:	6808      	ldr	r0, [r1, #0]
 800a892:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a896:	f01e 0f10 	tst.w	lr, #16
 800a89a:	bf08      	it	eq
 800a89c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a8a0:	f380 8809 	msr	PSP, r0
 800a8a4:	f3bf 8f6f 	isb	sy
 800a8a8:	4770      	bx	lr
 800a8aa:	bf00      	nop
 800a8ac:	f3af 8000 	nop.w

0800a8b0 <pxCurrentTCBConst>:
 800a8b0:	20000cd8 	.word	0x20000cd8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a8b4:	bf00      	nop
 800a8b6:	bf00      	nop

0800a8b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
	__asm volatile
 800a8be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8c2:	f383 8811 	msr	BASEPRI, r3
 800a8c6:	f3bf 8f6f 	isb	sy
 800a8ca:	f3bf 8f4f 	dsb	sy
 800a8ce:	607b      	str	r3, [r7, #4]
}
 800a8d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a8d2:	f7fe fe4d 	bl	8009570 <xTaskIncrementTick>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d003      	beq.n	800a8e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a8dc:	4b06      	ldr	r3, [pc, #24]	@ (800a8f8 <xPortSysTickHandler+0x40>)
 800a8de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8e2:	601a      	str	r2, [r3, #0]
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	f383 8811 	msr	BASEPRI, r3
}
 800a8ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a8f0:	bf00      	nop
 800a8f2:	3708      	adds	r7, #8
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}
 800a8f8:	e000ed04 	.word	0xe000ed04

0800a8fc <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b088      	sub	sp, #32
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 800a904:	4b5d      	ldr	r3, [pc, #372]	@ (800aa7c <vPortSuppressTicksAndSleep+0x180>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	687a      	ldr	r2, [r7, #4]
 800a90a:	429a      	cmp	r2, r3
 800a90c:	d902      	bls.n	800a914 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800a90e:	4b5b      	ldr	r3, [pc, #364]	@ (800aa7c <vPortSuppressTicksAndSleep+0x180>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800a914:	4b5a      	ldr	r3, [pc, #360]	@ (800aa80 <vPortSuppressTicksAndSleep+0x184>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	4a59      	ldr	r2, [pc, #356]	@ (800aa80 <vPortSuppressTicksAndSleep+0x184>)
 800a91a:	f023 0301 	bic.w	r3, r3, #1
 800a91e:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800a920:	4b58      	ldr	r3, [pc, #352]	@ (800aa84 <vPortSuppressTicksAndSleep+0x188>)
 800a922:	681a      	ldr	r2, [r3, #0]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	3b01      	subs	r3, #1
 800a928:	4957      	ldr	r1, [pc, #348]	@ (800aa88 <vPortSuppressTicksAndSleep+0x18c>)
 800a92a:	6809      	ldr	r1, [r1, #0]
 800a92c:	fb01 f303 	mul.w	r3, r1, r3
 800a930:	4413      	add	r3, r2
 800a932:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 800a934:	4b55      	ldr	r3, [pc, #340]	@ (800aa8c <vPortSuppressTicksAndSleep+0x190>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	69fa      	ldr	r2, [r7, #28]
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d904      	bls.n	800a948 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800a93e:	4b53      	ldr	r3, [pc, #332]	@ (800aa8c <vPortSuppressTicksAndSleep+0x190>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	69fa      	ldr	r2, [r7, #28]
 800a944:	1ad3      	subs	r3, r2, r3
 800a946:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 800a948:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800a94a:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800a94e:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800a952:	f7ff f8c5 	bl	8009ae0 <eTaskConfirmSleepModeStatus>
 800a956:	4603      	mov	r3, r0
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d110      	bne.n	800a97e <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800a95c:	4b49      	ldr	r3, [pc, #292]	@ (800aa84 <vPortSuppressTicksAndSleep+0x188>)
 800a95e:	4a4c      	ldr	r2, [pc, #304]	@ (800aa90 <vPortSuppressTicksAndSleep+0x194>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800a964:	4b46      	ldr	r3, [pc, #280]	@ (800aa80 <vPortSuppressTicksAndSleep+0x184>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4a45      	ldr	r2, [pc, #276]	@ (800aa80 <vPortSuppressTicksAndSleep+0x184>)
 800a96a:	f043 0301 	orr.w	r3, r3, #1
 800a96e:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800a970:	4b45      	ldr	r3, [pc, #276]	@ (800aa88 <vPortSuppressTicksAndSleep+0x18c>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4a46      	ldr	r2, [pc, #280]	@ (800aa90 <vPortSuppressTicksAndSleep+0x194>)
 800a976:	3b01      	subs	r3, #1
 800a978:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800a97a:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800a97c:	e079      	b.n	800aa72 <vPortSuppressTicksAndSleep+0x176>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800a97e:	4a44      	ldr	r2, [pc, #272]	@ (800aa90 <vPortSuppressTicksAndSleep+0x194>)
 800a980:	69fb      	ldr	r3, [r7, #28]
 800a982:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a984:	4b3f      	ldr	r3, [pc, #252]	@ (800aa84 <vPortSuppressTicksAndSleep+0x188>)
 800a986:	2200      	movs	r2, #0
 800a988:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800a98a:	4b3d      	ldr	r3, [pc, #244]	@ (800aa80 <vPortSuppressTicksAndSleep+0x184>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	4a3c      	ldr	r2, [pc, #240]	@ (800aa80 <vPortSuppressTicksAndSleep+0x184>)
 800a990:	f043 0301 	orr.w	r3, r3, #1
 800a994:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	613b      	str	r3, [r7, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 800a99a:	2300      	movs	r3, #0
 800a99c:	613b      	str	r3, [r7, #16]
 800a99e:	6938      	ldr	r0, [r7, #16]
 800a9a0:	f7f7 fc4a 	bl	8002238 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d004      	beq.n	800a9b4 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 800a9aa:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 800a9ae:	bf30      	wfi
				__asm volatile( "isb" );
 800a9b0:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f7f7 fc49 	bl	800224c <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800a9ba:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800a9bc:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800a9c0:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 800a9c4:	b672      	cpsid	i
			__asm volatile( "dsb" );
 800a9c6:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800a9ca:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800a9ce:	4b2c      	ldr	r3, [pc, #176]	@ (800aa80 <vPortSuppressTicksAndSleep+0x184>)
 800a9d0:	2206      	movs	r2, #6
 800a9d2:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800a9d4:	4b2a      	ldr	r3, [pc, #168]	@ (800aa80 <vPortSuppressTicksAndSleep+0x184>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d01d      	beq.n	800aa1c <vPortSuppressTicksAndSleep+0x120>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800a9e0:	4b29      	ldr	r3, [pc, #164]	@ (800aa88 <vPortSuppressTicksAndSleep+0x18c>)
 800a9e2:	681a      	ldr	r2, [r3, #0]
 800a9e4:	4b27      	ldr	r3, [pc, #156]	@ (800aa84 <vPortSuppressTicksAndSleep+0x188>)
 800a9e6:	6819      	ldr	r1, [r3, #0]
 800a9e8:	69fb      	ldr	r3, [r7, #28]
 800a9ea:	1acb      	subs	r3, r1, r3
 800a9ec:	4413      	add	r3, r2
 800a9ee:	3b01      	subs	r3, #1
 800a9f0:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800a9f2:	4b26      	ldr	r3, [pc, #152]	@ (800aa8c <vPortSuppressTicksAndSleep+0x190>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	697a      	ldr	r2, [r7, #20]
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d304      	bcc.n	800aa06 <vPortSuppressTicksAndSleep+0x10a>
 800a9fc:	4b22      	ldr	r3, [pc, #136]	@ (800aa88 <vPortSuppressTicksAndSleep+0x18c>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	697a      	ldr	r2, [r7, #20]
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d903      	bls.n	800aa0e <vPortSuppressTicksAndSleep+0x112>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 800aa06:	4b20      	ldr	r3, [pc, #128]	@ (800aa88 <vPortSuppressTicksAndSleep+0x18c>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	3b01      	subs	r3, #1
 800aa0c:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800aa0e:	4a20      	ldr	r2, [pc, #128]	@ (800aa90 <vPortSuppressTicksAndSleep+0x194>)
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	3b01      	subs	r3, #1
 800aa18:	61bb      	str	r3, [r7, #24]
 800aa1a:	e018      	b.n	800aa4e <vPortSuppressTicksAndSleep+0x152>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800aa1c:	4b1a      	ldr	r3, [pc, #104]	@ (800aa88 <vPortSuppressTicksAndSleep+0x18c>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	fb03 f202 	mul.w	r2, r3, r2
 800aa26:	4b17      	ldr	r3, [pc, #92]	@ (800aa84 <vPortSuppressTicksAndSleep+0x188>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	1ad3      	subs	r3, r2, r3
 800aa2c:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800aa2e:	4b16      	ldr	r3, [pc, #88]	@ (800aa88 <vPortSuppressTicksAndSleep+0x18c>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	68fa      	ldr	r2, [r7, #12]
 800aa34:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa38:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800aa3a:	69bb      	ldr	r3, [r7, #24]
 800aa3c:	3301      	adds	r3, #1
 800aa3e:	4a12      	ldr	r2, [pc, #72]	@ (800aa88 <vPortSuppressTicksAndSleep+0x18c>)
 800aa40:	6812      	ldr	r2, [r2, #0]
 800aa42:	fb03 f202 	mul.w	r2, r3, r2
 800aa46:	4912      	ldr	r1, [pc, #72]	@ (800aa90 <vPortSuppressTicksAndSleep+0x194>)
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	1ad3      	subs	r3, r2, r3
 800aa4c:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aa4e:	4b0d      	ldr	r3, [pc, #52]	@ (800aa84 <vPortSuppressTicksAndSleep+0x188>)
 800aa50:	2200      	movs	r2, #0
 800aa52:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800aa54:	4b0a      	ldr	r3, [pc, #40]	@ (800aa80 <vPortSuppressTicksAndSleep+0x184>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	4a09      	ldr	r2, [pc, #36]	@ (800aa80 <vPortSuppressTicksAndSleep+0x184>)
 800aa5a:	f043 0301 	orr.w	r3, r3, #1
 800aa5e:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 800aa60:	69b8      	ldr	r0, [r7, #24]
 800aa62:	f7fe fd5d 	bl	8009520 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800aa66:	4b08      	ldr	r3, [pc, #32]	@ (800aa88 <vPortSuppressTicksAndSleep+0x18c>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4a09      	ldr	r2, [pc, #36]	@ (800aa90 <vPortSuppressTicksAndSleep+0x194>)
 800aa6c:	3b01      	subs	r3, #1
 800aa6e:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 800aa70:	b662      	cpsie	i
	}
 800aa72:	bf00      	nop
 800aa74:	3720      	adds	r7, #32
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}
 800aa7a:	bf00      	nop
 800aa7c:	20001310 	.word	0x20001310
 800aa80:	e000e010 	.word	0xe000e010
 800aa84:	e000e018 	.word	0xe000e018
 800aa88:	2000130c 	.word	0x2000130c
 800aa8c:	20001314 	.word	0x20001314
 800aa90:	e000e014 	.word	0xe000e014

0800aa94 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aa94:	b480      	push	{r7}
 800aa96:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800aa98:	4b14      	ldr	r3, [pc, #80]	@ (800aaec <vPortSetupTimerInterrupt+0x58>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	4a14      	ldr	r2, [pc, #80]	@ (800aaf0 <vPortSetupTimerInterrupt+0x5c>)
 800aa9e:	fba2 2303 	umull	r2, r3, r2, r3
 800aaa2:	099b      	lsrs	r3, r3, #6
 800aaa4:	4a13      	ldr	r2, [pc, #76]	@ (800aaf4 <vPortSetupTimerInterrupt+0x60>)
 800aaa6:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800aaa8:	4b12      	ldr	r3, [pc, #72]	@ (800aaf4 <vPortSetupTimerInterrupt+0x60>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800aab0:	fbb2 f3f3 	udiv	r3, r2, r3
 800aab4:	4a10      	ldr	r2, [pc, #64]	@ (800aaf8 <vPortSetupTimerInterrupt+0x64>)
 800aab6:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800aab8:	4b10      	ldr	r3, [pc, #64]	@ (800aafc <vPortSetupTimerInterrupt+0x68>)
 800aaba:	222d      	movs	r2, #45	@ 0x2d
 800aabc:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aabe:	4b10      	ldr	r3, [pc, #64]	@ (800ab00 <vPortSetupTimerInterrupt+0x6c>)
 800aac0:	2200      	movs	r2, #0
 800aac2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aac4:	4b0f      	ldr	r3, [pc, #60]	@ (800ab04 <vPortSetupTimerInterrupt+0x70>)
 800aac6:	2200      	movs	r2, #0
 800aac8:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aaca:	4b08      	ldr	r3, [pc, #32]	@ (800aaec <vPortSetupTimerInterrupt+0x58>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	4a08      	ldr	r2, [pc, #32]	@ (800aaf0 <vPortSetupTimerInterrupt+0x5c>)
 800aad0:	fba2 2303 	umull	r2, r3, r2, r3
 800aad4:	099b      	lsrs	r3, r3, #6
 800aad6:	4a0c      	ldr	r2, [pc, #48]	@ (800ab08 <vPortSetupTimerInterrupt+0x74>)
 800aad8:	3b01      	subs	r3, #1
 800aada:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aadc:	4b08      	ldr	r3, [pc, #32]	@ (800ab00 <vPortSetupTimerInterrupt+0x6c>)
 800aade:	2207      	movs	r2, #7
 800aae0:	601a      	str	r2, [r3, #0]
}
 800aae2:	bf00      	nop
 800aae4:	46bd      	mov	sp, r7
 800aae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaea:	4770      	bx	lr
 800aaec:	2000001c 	.word	0x2000001c
 800aaf0:	10624dd3 	.word	0x10624dd3
 800aaf4:	2000130c 	.word	0x2000130c
 800aaf8:	20001310 	.word	0x20001310
 800aafc:	20001314 	.word	0x20001314
 800ab00:	e000e010 	.word	0xe000e010
 800ab04:	e000e018 	.word	0xe000e018
 800ab08:	e000e014 	.word	0xe000e014

0800ab0c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ab0c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ab1c <vPortEnableVFP+0x10>
 800ab10:	6801      	ldr	r1, [r0, #0]
 800ab12:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ab16:	6001      	str	r1, [r0, #0]
 800ab18:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ab1a:	bf00      	nop
 800ab1c:	e000ed88 	.word	0xe000ed88

0800ab20 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ab20:	b480      	push	{r7}
 800ab22:	b085      	sub	sp, #20
 800ab24:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ab26:	f3ef 8305 	mrs	r3, IPSR
 800ab2a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2b0f      	cmp	r3, #15
 800ab30:	d915      	bls.n	800ab5e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ab32:	4a18      	ldr	r2, [pc, #96]	@ (800ab94 <vPortValidateInterruptPriority+0x74>)
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	4413      	add	r3, r2
 800ab38:	781b      	ldrb	r3, [r3, #0]
 800ab3a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ab3c:	4b16      	ldr	r3, [pc, #88]	@ (800ab98 <vPortValidateInterruptPriority+0x78>)
 800ab3e:	781b      	ldrb	r3, [r3, #0]
 800ab40:	7afa      	ldrb	r2, [r7, #11]
 800ab42:	429a      	cmp	r2, r3
 800ab44:	d20b      	bcs.n	800ab5e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ab46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab4a:	f383 8811 	msr	BASEPRI, r3
 800ab4e:	f3bf 8f6f 	isb	sy
 800ab52:	f3bf 8f4f 	dsb	sy
 800ab56:	607b      	str	r3, [r7, #4]
}
 800ab58:	bf00      	nop
 800ab5a:	bf00      	nop
 800ab5c:	e7fd      	b.n	800ab5a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ab5e:	4b0f      	ldr	r3, [pc, #60]	@ (800ab9c <vPortValidateInterruptPriority+0x7c>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ab66:	4b0e      	ldr	r3, [pc, #56]	@ (800aba0 <vPortValidateInterruptPriority+0x80>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d90b      	bls.n	800ab86 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ab6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab72:	f383 8811 	msr	BASEPRI, r3
 800ab76:	f3bf 8f6f 	isb	sy
 800ab7a:	f3bf 8f4f 	dsb	sy
 800ab7e:	603b      	str	r3, [r7, #0]
}
 800ab80:	bf00      	nop
 800ab82:	bf00      	nop
 800ab84:	e7fd      	b.n	800ab82 <vPortValidateInterruptPriority+0x62>
	}
 800ab86:	bf00      	nop
 800ab88:	3714      	adds	r7, #20
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr
 800ab92:	bf00      	nop
 800ab94:	e000e3f0 	.word	0xe000e3f0
 800ab98:	20001318 	.word	0x20001318
 800ab9c:	e000ed0c 	.word	0xe000ed0c
 800aba0:	2000131c 	.word	0x2000131c

0800aba4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b08a      	sub	sp, #40	@ 0x28
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800abac:	2300      	movs	r3, #0
 800abae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800abb0:	f7fe fbc2 	bl	8009338 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800abb4:	4b5c      	ldr	r3, [pc, #368]	@ (800ad28 <pvPortMalloc+0x184>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d101      	bne.n	800abc0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800abbc:	f000 f924 	bl	800ae08 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800abc0:	4b5a      	ldr	r3, [pc, #360]	@ (800ad2c <pvPortMalloc+0x188>)
 800abc2:	681a      	ldr	r2, [r3, #0]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	4013      	ands	r3, r2
 800abc8:	2b00      	cmp	r3, #0
 800abca:	f040 8095 	bne.w	800acf8 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d01e      	beq.n	800ac12 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800abd4:	2208      	movs	r2, #8
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	4413      	add	r3, r2
 800abda:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f003 0307 	and.w	r3, r3, #7
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d015      	beq.n	800ac12 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f023 0307 	bic.w	r3, r3, #7
 800abec:	3308      	adds	r3, #8
 800abee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f003 0307 	and.w	r3, r3, #7
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d00b      	beq.n	800ac12 <pvPortMalloc+0x6e>
	__asm volatile
 800abfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abfe:	f383 8811 	msr	BASEPRI, r3
 800ac02:	f3bf 8f6f 	isb	sy
 800ac06:	f3bf 8f4f 	dsb	sy
 800ac0a:	617b      	str	r3, [r7, #20]
}
 800ac0c:	bf00      	nop
 800ac0e:	bf00      	nop
 800ac10:	e7fd      	b.n	800ac0e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d06f      	beq.n	800acf8 <pvPortMalloc+0x154>
 800ac18:	4b45      	ldr	r3, [pc, #276]	@ (800ad30 <pvPortMalloc+0x18c>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	687a      	ldr	r2, [r7, #4]
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d86a      	bhi.n	800acf8 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ac22:	4b44      	ldr	r3, [pc, #272]	@ (800ad34 <pvPortMalloc+0x190>)
 800ac24:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ac26:	4b43      	ldr	r3, [pc, #268]	@ (800ad34 <pvPortMalloc+0x190>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac2c:	e004      	b.n	800ac38 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ac2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac30:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ac32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	687a      	ldr	r2, [r7, #4]
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	d903      	bls.n	800ac4a <pvPortMalloc+0xa6>
 800ac42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d1f1      	bne.n	800ac2e <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ac4a:	4b37      	ldr	r3, [pc, #220]	@ (800ad28 <pvPortMalloc+0x184>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d051      	beq.n	800acf8 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ac54:	6a3b      	ldr	r3, [r7, #32]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	2208      	movs	r2, #8
 800ac5a:	4413      	add	r3, r2
 800ac5c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ac5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac60:	681a      	ldr	r2, [r3, #0]
 800ac62:	6a3b      	ldr	r3, [r7, #32]
 800ac64:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ac66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac68:	685a      	ldr	r2, [r3, #4]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	1ad2      	subs	r2, r2, r3
 800ac6e:	2308      	movs	r3, #8
 800ac70:	005b      	lsls	r3, r3, #1
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d920      	bls.n	800acb8 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ac76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	4413      	add	r3, r2
 800ac7c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac7e:	69bb      	ldr	r3, [r7, #24]
 800ac80:	f003 0307 	and.w	r3, r3, #7
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d00b      	beq.n	800aca0 <pvPortMalloc+0xfc>
	__asm volatile
 800ac88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac8c:	f383 8811 	msr	BASEPRI, r3
 800ac90:	f3bf 8f6f 	isb	sy
 800ac94:	f3bf 8f4f 	dsb	sy
 800ac98:	613b      	str	r3, [r7, #16]
}
 800ac9a:	bf00      	nop
 800ac9c:	bf00      	nop
 800ac9e:	e7fd      	b.n	800ac9c <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aca2:	685a      	ldr	r2, [r3, #4]
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	1ad2      	subs	r2, r2, r3
 800aca8:	69bb      	ldr	r3, [r7, #24]
 800acaa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800acac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acae:	687a      	ldr	r2, [r7, #4]
 800acb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800acb2:	69b8      	ldr	r0, [r7, #24]
 800acb4:	f000 f90a 	bl	800aecc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800acb8:	4b1d      	ldr	r3, [pc, #116]	@ (800ad30 <pvPortMalloc+0x18c>)
 800acba:	681a      	ldr	r2, [r3, #0]
 800acbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	1ad3      	subs	r3, r2, r3
 800acc2:	4a1b      	ldr	r2, [pc, #108]	@ (800ad30 <pvPortMalloc+0x18c>)
 800acc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800acc6:	4b1a      	ldr	r3, [pc, #104]	@ (800ad30 <pvPortMalloc+0x18c>)
 800acc8:	681a      	ldr	r2, [r3, #0]
 800acca:	4b1b      	ldr	r3, [pc, #108]	@ (800ad38 <pvPortMalloc+0x194>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	429a      	cmp	r2, r3
 800acd0:	d203      	bcs.n	800acda <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800acd2:	4b17      	ldr	r3, [pc, #92]	@ (800ad30 <pvPortMalloc+0x18c>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	4a18      	ldr	r2, [pc, #96]	@ (800ad38 <pvPortMalloc+0x194>)
 800acd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800acda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acdc:	685a      	ldr	r2, [r3, #4]
 800acde:	4b13      	ldr	r3, [pc, #76]	@ (800ad2c <pvPortMalloc+0x188>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	431a      	orrs	r2, r3
 800ace4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ace6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ace8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acea:	2200      	movs	r2, #0
 800acec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800acee:	4b13      	ldr	r3, [pc, #76]	@ (800ad3c <pvPortMalloc+0x198>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	3301      	adds	r3, #1
 800acf4:	4a11      	ldr	r2, [pc, #68]	@ (800ad3c <pvPortMalloc+0x198>)
 800acf6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800acf8:	f7fe fb64 	bl	80093c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800acfc:	69fb      	ldr	r3, [r7, #28]
 800acfe:	f003 0307 	and.w	r3, r3, #7
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d00b      	beq.n	800ad1e <pvPortMalloc+0x17a>
	__asm volatile
 800ad06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad0a:	f383 8811 	msr	BASEPRI, r3
 800ad0e:	f3bf 8f6f 	isb	sy
 800ad12:	f3bf 8f4f 	dsb	sy
 800ad16:	60fb      	str	r3, [r7, #12]
}
 800ad18:	bf00      	nop
 800ad1a:	bf00      	nop
 800ad1c:	e7fd      	b.n	800ad1a <pvPortMalloc+0x176>
	return pvReturn;
 800ad1e:	69fb      	ldr	r3, [r7, #28]
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3728      	adds	r7, #40	@ 0x28
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}
 800ad28:	20004f28 	.word	0x20004f28
 800ad2c:	20004f3c 	.word	0x20004f3c
 800ad30:	20004f2c 	.word	0x20004f2c
 800ad34:	20004f20 	.word	0x20004f20
 800ad38:	20004f30 	.word	0x20004f30
 800ad3c:	20004f34 	.word	0x20004f34

0800ad40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b086      	sub	sp, #24
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d04f      	beq.n	800adf2 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ad52:	2308      	movs	r3, #8
 800ad54:	425b      	negs	r3, r3
 800ad56:	697a      	ldr	r2, [r7, #20]
 800ad58:	4413      	add	r3, r2
 800ad5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	685a      	ldr	r2, [r3, #4]
 800ad64:	4b25      	ldr	r3, [pc, #148]	@ (800adfc <vPortFree+0xbc>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	4013      	ands	r3, r2
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d10b      	bne.n	800ad86 <vPortFree+0x46>
	__asm volatile
 800ad6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad72:	f383 8811 	msr	BASEPRI, r3
 800ad76:	f3bf 8f6f 	isb	sy
 800ad7a:	f3bf 8f4f 	dsb	sy
 800ad7e:	60fb      	str	r3, [r7, #12]
}
 800ad80:	bf00      	nop
 800ad82:	bf00      	nop
 800ad84:	e7fd      	b.n	800ad82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d00b      	beq.n	800ada6 <vPortFree+0x66>
	__asm volatile
 800ad8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad92:	f383 8811 	msr	BASEPRI, r3
 800ad96:	f3bf 8f6f 	isb	sy
 800ad9a:	f3bf 8f4f 	dsb	sy
 800ad9e:	60bb      	str	r3, [r7, #8]
}
 800ada0:	bf00      	nop
 800ada2:	bf00      	nop
 800ada4:	e7fd      	b.n	800ada2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	685a      	ldr	r2, [r3, #4]
 800adaa:	4b14      	ldr	r3, [pc, #80]	@ (800adfc <vPortFree+0xbc>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	4013      	ands	r3, r2
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d01e      	beq.n	800adf2 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d11a      	bne.n	800adf2 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	685a      	ldr	r2, [r3, #4]
 800adc0:	4b0e      	ldr	r3, [pc, #56]	@ (800adfc <vPortFree+0xbc>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	43db      	mvns	r3, r3
 800adc6:	401a      	ands	r2, r3
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800adcc:	f7fe fab4 	bl	8009338 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800add0:	693b      	ldr	r3, [r7, #16]
 800add2:	685a      	ldr	r2, [r3, #4]
 800add4:	4b0a      	ldr	r3, [pc, #40]	@ (800ae00 <vPortFree+0xc0>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4413      	add	r3, r2
 800adda:	4a09      	ldr	r2, [pc, #36]	@ (800ae00 <vPortFree+0xc0>)
 800addc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800adde:	6938      	ldr	r0, [r7, #16]
 800ade0:	f000 f874 	bl	800aecc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ade4:	4b07      	ldr	r3, [pc, #28]	@ (800ae04 <vPortFree+0xc4>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	3301      	adds	r3, #1
 800adea:	4a06      	ldr	r2, [pc, #24]	@ (800ae04 <vPortFree+0xc4>)
 800adec:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800adee:	f7fe fae9 	bl	80093c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800adf2:	bf00      	nop
 800adf4:	3718      	adds	r7, #24
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}
 800adfa:	bf00      	nop
 800adfc:	20004f3c 	.word	0x20004f3c
 800ae00:	20004f2c 	.word	0x20004f2c
 800ae04:	20004f38 	.word	0x20004f38

0800ae08 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b085      	sub	sp, #20
 800ae0c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ae0e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ae12:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ae14:	4b27      	ldr	r3, [pc, #156]	@ (800aeb4 <prvHeapInit+0xac>)
 800ae16:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f003 0307 	and.w	r3, r3, #7
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d00c      	beq.n	800ae3c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	3307      	adds	r3, #7
 800ae26:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	f023 0307 	bic.w	r3, r3, #7
 800ae2e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ae30:	68ba      	ldr	r2, [r7, #8]
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	1ad3      	subs	r3, r2, r3
 800ae36:	4a1f      	ldr	r2, [pc, #124]	@ (800aeb4 <prvHeapInit+0xac>)
 800ae38:	4413      	add	r3, r2
 800ae3a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ae40:	4a1d      	ldr	r2, [pc, #116]	@ (800aeb8 <prvHeapInit+0xb0>)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ae46:	4b1c      	ldr	r3, [pc, #112]	@ (800aeb8 <prvHeapInit+0xb0>)
 800ae48:	2200      	movs	r2, #0
 800ae4a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	68ba      	ldr	r2, [r7, #8]
 800ae50:	4413      	add	r3, r2
 800ae52:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ae54:	2208      	movs	r2, #8
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	1a9b      	subs	r3, r3, r2
 800ae5a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	f023 0307 	bic.w	r3, r3, #7
 800ae62:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	4a15      	ldr	r2, [pc, #84]	@ (800aebc <prvHeapInit+0xb4>)
 800ae68:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ae6a:	4b14      	ldr	r3, [pc, #80]	@ (800aebc <prvHeapInit+0xb4>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ae72:	4b12      	ldr	r3, [pc, #72]	@ (800aebc <prvHeapInit+0xb4>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	2200      	movs	r2, #0
 800ae78:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	68fa      	ldr	r2, [r7, #12]
 800ae82:	1ad2      	subs	r2, r2, r3
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ae88:	4b0c      	ldr	r3, [pc, #48]	@ (800aebc <prvHeapInit+0xb4>)
 800ae8a:	681a      	ldr	r2, [r3, #0]
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	4a0a      	ldr	r2, [pc, #40]	@ (800aec0 <prvHeapInit+0xb8>)
 800ae96:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	685b      	ldr	r3, [r3, #4]
 800ae9c:	4a09      	ldr	r2, [pc, #36]	@ (800aec4 <prvHeapInit+0xbc>)
 800ae9e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aea0:	4b09      	ldr	r3, [pc, #36]	@ (800aec8 <prvHeapInit+0xc0>)
 800aea2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800aea6:	601a      	str	r2, [r3, #0]
}
 800aea8:	bf00      	nop
 800aeaa:	3714      	adds	r7, #20
 800aeac:	46bd      	mov	sp, r7
 800aeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb2:	4770      	bx	lr
 800aeb4:	20001320 	.word	0x20001320
 800aeb8:	20004f20 	.word	0x20004f20
 800aebc:	20004f28 	.word	0x20004f28
 800aec0:	20004f30 	.word	0x20004f30
 800aec4:	20004f2c 	.word	0x20004f2c
 800aec8:	20004f3c 	.word	0x20004f3c

0800aecc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aecc:	b480      	push	{r7}
 800aece:	b085      	sub	sp, #20
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aed4:	4b28      	ldr	r3, [pc, #160]	@ (800af78 <prvInsertBlockIntoFreeList+0xac>)
 800aed6:	60fb      	str	r3, [r7, #12]
 800aed8:	e002      	b.n	800aee0 <prvInsertBlockIntoFreeList+0x14>
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	60fb      	str	r3, [r7, #12]
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	687a      	ldr	r2, [r7, #4]
 800aee6:	429a      	cmp	r2, r3
 800aee8:	d8f7      	bhi.n	800aeda <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	685b      	ldr	r3, [r3, #4]
 800aef2:	68ba      	ldr	r2, [r7, #8]
 800aef4:	4413      	add	r3, r2
 800aef6:	687a      	ldr	r2, [r7, #4]
 800aef8:	429a      	cmp	r2, r3
 800aefa:	d108      	bne.n	800af0e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	685a      	ldr	r2, [r3, #4]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	685b      	ldr	r3, [r3, #4]
 800af04:	441a      	add	r2, r3
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	685b      	ldr	r3, [r3, #4]
 800af16:	68ba      	ldr	r2, [r7, #8]
 800af18:	441a      	add	r2, r3
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	429a      	cmp	r2, r3
 800af20:	d118      	bne.n	800af54 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681a      	ldr	r2, [r3, #0]
 800af26:	4b15      	ldr	r3, [pc, #84]	@ (800af7c <prvInsertBlockIntoFreeList+0xb0>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d00d      	beq.n	800af4a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	685a      	ldr	r2, [r3, #4]
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	685b      	ldr	r3, [r3, #4]
 800af38:	441a      	add	r2, r3
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	681a      	ldr	r2, [r3, #0]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	601a      	str	r2, [r3, #0]
 800af48:	e008      	b.n	800af5c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800af4a:	4b0c      	ldr	r3, [pc, #48]	@ (800af7c <prvInsertBlockIntoFreeList+0xb0>)
 800af4c:	681a      	ldr	r2, [r3, #0]
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	601a      	str	r2, [r3, #0]
 800af52:	e003      	b.n	800af5c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	681a      	ldr	r2, [r3, #0]
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800af5c:	68fa      	ldr	r2, [r7, #12]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	429a      	cmp	r2, r3
 800af62:	d002      	beq.n	800af6a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	687a      	ldr	r2, [r7, #4]
 800af68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af6a:	bf00      	nop
 800af6c:	3714      	adds	r7, #20
 800af6e:	46bd      	mov	sp, r7
 800af70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af74:	4770      	bx	lr
 800af76:	bf00      	nop
 800af78:	20004f20 	.word	0x20004f20
 800af7c:	20004f28 	.word	0x20004f28

0800af80 <__cvt>:
 800af80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af84:	ec57 6b10 	vmov	r6, r7, d0
 800af88:	2f00      	cmp	r7, #0
 800af8a:	460c      	mov	r4, r1
 800af8c:	4619      	mov	r1, r3
 800af8e:	463b      	mov	r3, r7
 800af90:	bfbb      	ittet	lt
 800af92:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800af96:	461f      	movlt	r7, r3
 800af98:	2300      	movge	r3, #0
 800af9a:	232d      	movlt	r3, #45	@ 0x2d
 800af9c:	700b      	strb	r3, [r1, #0]
 800af9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800afa0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800afa4:	4691      	mov	r9, r2
 800afa6:	f023 0820 	bic.w	r8, r3, #32
 800afaa:	bfbc      	itt	lt
 800afac:	4632      	movlt	r2, r6
 800afae:	4616      	movlt	r6, r2
 800afb0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800afb4:	d005      	beq.n	800afc2 <__cvt+0x42>
 800afb6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800afba:	d100      	bne.n	800afbe <__cvt+0x3e>
 800afbc:	3401      	adds	r4, #1
 800afbe:	2102      	movs	r1, #2
 800afc0:	e000      	b.n	800afc4 <__cvt+0x44>
 800afc2:	2103      	movs	r1, #3
 800afc4:	ab03      	add	r3, sp, #12
 800afc6:	9301      	str	r3, [sp, #4]
 800afc8:	ab02      	add	r3, sp, #8
 800afca:	9300      	str	r3, [sp, #0]
 800afcc:	ec47 6b10 	vmov	d0, r6, r7
 800afd0:	4653      	mov	r3, sl
 800afd2:	4622      	mov	r2, r4
 800afd4:	f000 ffd8 	bl	800bf88 <_dtoa_r>
 800afd8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800afdc:	4605      	mov	r5, r0
 800afde:	d119      	bne.n	800b014 <__cvt+0x94>
 800afe0:	f019 0f01 	tst.w	r9, #1
 800afe4:	d00e      	beq.n	800b004 <__cvt+0x84>
 800afe6:	eb00 0904 	add.w	r9, r0, r4
 800afea:	2200      	movs	r2, #0
 800afec:	2300      	movs	r3, #0
 800afee:	4630      	mov	r0, r6
 800aff0:	4639      	mov	r1, r7
 800aff2:	f7f5 fd71 	bl	8000ad8 <__aeabi_dcmpeq>
 800aff6:	b108      	cbz	r0, 800affc <__cvt+0x7c>
 800aff8:	f8cd 900c 	str.w	r9, [sp, #12]
 800affc:	2230      	movs	r2, #48	@ 0x30
 800affe:	9b03      	ldr	r3, [sp, #12]
 800b000:	454b      	cmp	r3, r9
 800b002:	d31e      	bcc.n	800b042 <__cvt+0xc2>
 800b004:	9b03      	ldr	r3, [sp, #12]
 800b006:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b008:	1b5b      	subs	r3, r3, r5
 800b00a:	4628      	mov	r0, r5
 800b00c:	6013      	str	r3, [r2, #0]
 800b00e:	b004      	add	sp, #16
 800b010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b014:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b018:	eb00 0904 	add.w	r9, r0, r4
 800b01c:	d1e5      	bne.n	800afea <__cvt+0x6a>
 800b01e:	7803      	ldrb	r3, [r0, #0]
 800b020:	2b30      	cmp	r3, #48	@ 0x30
 800b022:	d10a      	bne.n	800b03a <__cvt+0xba>
 800b024:	2200      	movs	r2, #0
 800b026:	2300      	movs	r3, #0
 800b028:	4630      	mov	r0, r6
 800b02a:	4639      	mov	r1, r7
 800b02c:	f7f5 fd54 	bl	8000ad8 <__aeabi_dcmpeq>
 800b030:	b918      	cbnz	r0, 800b03a <__cvt+0xba>
 800b032:	f1c4 0401 	rsb	r4, r4, #1
 800b036:	f8ca 4000 	str.w	r4, [sl]
 800b03a:	f8da 3000 	ldr.w	r3, [sl]
 800b03e:	4499      	add	r9, r3
 800b040:	e7d3      	b.n	800afea <__cvt+0x6a>
 800b042:	1c59      	adds	r1, r3, #1
 800b044:	9103      	str	r1, [sp, #12]
 800b046:	701a      	strb	r2, [r3, #0]
 800b048:	e7d9      	b.n	800affe <__cvt+0x7e>

0800b04a <__exponent>:
 800b04a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b04c:	2900      	cmp	r1, #0
 800b04e:	bfba      	itte	lt
 800b050:	4249      	neglt	r1, r1
 800b052:	232d      	movlt	r3, #45	@ 0x2d
 800b054:	232b      	movge	r3, #43	@ 0x2b
 800b056:	2909      	cmp	r1, #9
 800b058:	7002      	strb	r2, [r0, #0]
 800b05a:	7043      	strb	r3, [r0, #1]
 800b05c:	dd29      	ble.n	800b0b2 <__exponent+0x68>
 800b05e:	f10d 0307 	add.w	r3, sp, #7
 800b062:	461d      	mov	r5, r3
 800b064:	270a      	movs	r7, #10
 800b066:	461a      	mov	r2, r3
 800b068:	fbb1 f6f7 	udiv	r6, r1, r7
 800b06c:	fb07 1416 	mls	r4, r7, r6, r1
 800b070:	3430      	adds	r4, #48	@ 0x30
 800b072:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b076:	460c      	mov	r4, r1
 800b078:	2c63      	cmp	r4, #99	@ 0x63
 800b07a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800b07e:	4631      	mov	r1, r6
 800b080:	dcf1      	bgt.n	800b066 <__exponent+0x1c>
 800b082:	3130      	adds	r1, #48	@ 0x30
 800b084:	1e94      	subs	r4, r2, #2
 800b086:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b08a:	1c41      	adds	r1, r0, #1
 800b08c:	4623      	mov	r3, r4
 800b08e:	42ab      	cmp	r3, r5
 800b090:	d30a      	bcc.n	800b0a8 <__exponent+0x5e>
 800b092:	f10d 0309 	add.w	r3, sp, #9
 800b096:	1a9b      	subs	r3, r3, r2
 800b098:	42ac      	cmp	r4, r5
 800b09a:	bf88      	it	hi
 800b09c:	2300      	movhi	r3, #0
 800b09e:	3302      	adds	r3, #2
 800b0a0:	4403      	add	r3, r0
 800b0a2:	1a18      	subs	r0, r3, r0
 800b0a4:	b003      	add	sp, #12
 800b0a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0a8:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b0ac:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b0b0:	e7ed      	b.n	800b08e <__exponent+0x44>
 800b0b2:	2330      	movs	r3, #48	@ 0x30
 800b0b4:	3130      	adds	r1, #48	@ 0x30
 800b0b6:	7083      	strb	r3, [r0, #2]
 800b0b8:	70c1      	strb	r1, [r0, #3]
 800b0ba:	1d03      	adds	r3, r0, #4
 800b0bc:	e7f1      	b.n	800b0a2 <__exponent+0x58>
	...

0800b0c0 <_printf_float>:
 800b0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0c4:	b08d      	sub	sp, #52	@ 0x34
 800b0c6:	460c      	mov	r4, r1
 800b0c8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b0cc:	4616      	mov	r6, r2
 800b0ce:	461f      	mov	r7, r3
 800b0d0:	4605      	mov	r5, r0
 800b0d2:	f000 fdf3 	bl	800bcbc <_localeconv_r>
 800b0d6:	6803      	ldr	r3, [r0, #0]
 800b0d8:	9304      	str	r3, [sp, #16]
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f7f5 f8d0 	bl	8000280 <strlen>
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b0e4:	f8d8 3000 	ldr.w	r3, [r8]
 800b0e8:	9005      	str	r0, [sp, #20]
 800b0ea:	3307      	adds	r3, #7
 800b0ec:	f023 0307 	bic.w	r3, r3, #7
 800b0f0:	f103 0208 	add.w	r2, r3, #8
 800b0f4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b0f8:	f8d4 b000 	ldr.w	fp, [r4]
 800b0fc:	f8c8 2000 	str.w	r2, [r8]
 800b100:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b104:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b108:	9307      	str	r3, [sp, #28]
 800b10a:	f8cd 8018 	str.w	r8, [sp, #24]
 800b10e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b112:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b116:	4b9c      	ldr	r3, [pc, #624]	@ (800b388 <_printf_float+0x2c8>)
 800b118:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b11c:	f7f5 fd0e 	bl	8000b3c <__aeabi_dcmpun>
 800b120:	bb70      	cbnz	r0, 800b180 <_printf_float+0xc0>
 800b122:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b126:	4b98      	ldr	r3, [pc, #608]	@ (800b388 <_printf_float+0x2c8>)
 800b128:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b12c:	f7f5 fce8 	bl	8000b00 <__aeabi_dcmple>
 800b130:	bb30      	cbnz	r0, 800b180 <_printf_float+0xc0>
 800b132:	2200      	movs	r2, #0
 800b134:	2300      	movs	r3, #0
 800b136:	4640      	mov	r0, r8
 800b138:	4649      	mov	r1, r9
 800b13a:	f7f5 fcd7 	bl	8000aec <__aeabi_dcmplt>
 800b13e:	b110      	cbz	r0, 800b146 <_printf_float+0x86>
 800b140:	232d      	movs	r3, #45	@ 0x2d
 800b142:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b146:	4a91      	ldr	r2, [pc, #580]	@ (800b38c <_printf_float+0x2cc>)
 800b148:	4b91      	ldr	r3, [pc, #580]	@ (800b390 <_printf_float+0x2d0>)
 800b14a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b14e:	bf94      	ite	ls
 800b150:	4690      	movls	r8, r2
 800b152:	4698      	movhi	r8, r3
 800b154:	2303      	movs	r3, #3
 800b156:	6123      	str	r3, [r4, #16]
 800b158:	f02b 0304 	bic.w	r3, fp, #4
 800b15c:	6023      	str	r3, [r4, #0]
 800b15e:	f04f 0900 	mov.w	r9, #0
 800b162:	9700      	str	r7, [sp, #0]
 800b164:	4633      	mov	r3, r6
 800b166:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b168:	4621      	mov	r1, r4
 800b16a:	4628      	mov	r0, r5
 800b16c:	f000 f9d2 	bl	800b514 <_printf_common>
 800b170:	3001      	adds	r0, #1
 800b172:	f040 808d 	bne.w	800b290 <_printf_float+0x1d0>
 800b176:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b17a:	b00d      	add	sp, #52	@ 0x34
 800b17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b180:	4642      	mov	r2, r8
 800b182:	464b      	mov	r3, r9
 800b184:	4640      	mov	r0, r8
 800b186:	4649      	mov	r1, r9
 800b188:	f7f5 fcd8 	bl	8000b3c <__aeabi_dcmpun>
 800b18c:	b140      	cbz	r0, 800b1a0 <_printf_float+0xe0>
 800b18e:	464b      	mov	r3, r9
 800b190:	2b00      	cmp	r3, #0
 800b192:	bfbc      	itt	lt
 800b194:	232d      	movlt	r3, #45	@ 0x2d
 800b196:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b19a:	4a7e      	ldr	r2, [pc, #504]	@ (800b394 <_printf_float+0x2d4>)
 800b19c:	4b7e      	ldr	r3, [pc, #504]	@ (800b398 <_printf_float+0x2d8>)
 800b19e:	e7d4      	b.n	800b14a <_printf_float+0x8a>
 800b1a0:	6863      	ldr	r3, [r4, #4]
 800b1a2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b1a6:	9206      	str	r2, [sp, #24]
 800b1a8:	1c5a      	adds	r2, r3, #1
 800b1aa:	d13b      	bne.n	800b224 <_printf_float+0x164>
 800b1ac:	2306      	movs	r3, #6
 800b1ae:	6063      	str	r3, [r4, #4]
 800b1b0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	6022      	str	r2, [r4, #0]
 800b1b8:	9303      	str	r3, [sp, #12]
 800b1ba:	ab0a      	add	r3, sp, #40	@ 0x28
 800b1bc:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b1c0:	ab09      	add	r3, sp, #36	@ 0x24
 800b1c2:	9300      	str	r3, [sp, #0]
 800b1c4:	6861      	ldr	r1, [r4, #4]
 800b1c6:	ec49 8b10 	vmov	d0, r8, r9
 800b1ca:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b1ce:	4628      	mov	r0, r5
 800b1d0:	f7ff fed6 	bl	800af80 <__cvt>
 800b1d4:	9b06      	ldr	r3, [sp, #24]
 800b1d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b1d8:	2b47      	cmp	r3, #71	@ 0x47
 800b1da:	4680      	mov	r8, r0
 800b1dc:	d129      	bne.n	800b232 <_printf_float+0x172>
 800b1de:	1cc8      	adds	r0, r1, #3
 800b1e0:	db02      	blt.n	800b1e8 <_printf_float+0x128>
 800b1e2:	6863      	ldr	r3, [r4, #4]
 800b1e4:	4299      	cmp	r1, r3
 800b1e6:	dd41      	ble.n	800b26c <_printf_float+0x1ac>
 800b1e8:	f1aa 0a02 	sub.w	sl, sl, #2
 800b1ec:	fa5f fa8a 	uxtb.w	sl, sl
 800b1f0:	3901      	subs	r1, #1
 800b1f2:	4652      	mov	r2, sl
 800b1f4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b1f8:	9109      	str	r1, [sp, #36]	@ 0x24
 800b1fa:	f7ff ff26 	bl	800b04a <__exponent>
 800b1fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b200:	1813      	adds	r3, r2, r0
 800b202:	2a01      	cmp	r2, #1
 800b204:	4681      	mov	r9, r0
 800b206:	6123      	str	r3, [r4, #16]
 800b208:	dc02      	bgt.n	800b210 <_printf_float+0x150>
 800b20a:	6822      	ldr	r2, [r4, #0]
 800b20c:	07d2      	lsls	r2, r2, #31
 800b20e:	d501      	bpl.n	800b214 <_printf_float+0x154>
 800b210:	3301      	adds	r3, #1
 800b212:	6123      	str	r3, [r4, #16]
 800b214:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d0a2      	beq.n	800b162 <_printf_float+0xa2>
 800b21c:	232d      	movs	r3, #45	@ 0x2d
 800b21e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b222:	e79e      	b.n	800b162 <_printf_float+0xa2>
 800b224:	9a06      	ldr	r2, [sp, #24]
 800b226:	2a47      	cmp	r2, #71	@ 0x47
 800b228:	d1c2      	bne.n	800b1b0 <_printf_float+0xf0>
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d1c0      	bne.n	800b1b0 <_printf_float+0xf0>
 800b22e:	2301      	movs	r3, #1
 800b230:	e7bd      	b.n	800b1ae <_printf_float+0xee>
 800b232:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b236:	d9db      	bls.n	800b1f0 <_printf_float+0x130>
 800b238:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b23c:	d118      	bne.n	800b270 <_printf_float+0x1b0>
 800b23e:	2900      	cmp	r1, #0
 800b240:	6863      	ldr	r3, [r4, #4]
 800b242:	dd0b      	ble.n	800b25c <_printf_float+0x19c>
 800b244:	6121      	str	r1, [r4, #16]
 800b246:	b913      	cbnz	r3, 800b24e <_printf_float+0x18e>
 800b248:	6822      	ldr	r2, [r4, #0]
 800b24a:	07d0      	lsls	r0, r2, #31
 800b24c:	d502      	bpl.n	800b254 <_printf_float+0x194>
 800b24e:	3301      	adds	r3, #1
 800b250:	440b      	add	r3, r1
 800b252:	6123      	str	r3, [r4, #16]
 800b254:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b256:	f04f 0900 	mov.w	r9, #0
 800b25a:	e7db      	b.n	800b214 <_printf_float+0x154>
 800b25c:	b913      	cbnz	r3, 800b264 <_printf_float+0x1a4>
 800b25e:	6822      	ldr	r2, [r4, #0]
 800b260:	07d2      	lsls	r2, r2, #31
 800b262:	d501      	bpl.n	800b268 <_printf_float+0x1a8>
 800b264:	3302      	adds	r3, #2
 800b266:	e7f4      	b.n	800b252 <_printf_float+0x192>
 800b268:	2301      	movs	r3, #1
 800b26a:	e7f2      	b.n	800b252 <_printf_float+0x192>
 800b26c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b270:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b272:	4299      	cmp	r1, r3
 800b274:	db05      	blt.n	800b282 <_printf_float+0x1c2>
 800b276:	6823      	ldr	r3, [r4, #0]
 800b278:	6121      	str	r1, [r4, #16]
 800b27a:	07d8      	lsls	r0, r3, #31
 800b27c:	d5ea      	bpl.n	800b254 <_printf_float+0x194>
 800b27e:	1c4b      	adds	r3, r1, #1
 800b280:	e7e7      	b.n	800b252 <_printf_float+0x192>
 800b282:	2900      	cmp	r1, #0
 800b284:	bfd4      	ite	le
 800b286:	f1c1 0202 	rsble	r2, r1, #2
 800b28a:	2201      	movgt	r2, #1
 800b28c:	4413      	add	r3, r2
 800b28e:	e7e0      	b.n	800b252 <_printf_float+0x192>
 800b290:	6823      	ldr	r3, [r4, #0]
 800b292:	055a      	lsls	r2, r3, #21
 800b294:	d407      	bmi.n	800b2a6 <_printf_float+0x1e6>
 800b296:	6923      	ldr	r3, [r4, #16]
 800b298:	4642      	mov	r2, r8
 800b29a:	4631      	mov	r1, r6
 800b29c:	4628      	mov	r0, r5
 800b29e:	47b8      	blx	r7
 800b2a0:	3001      	adds	r0, #1
 800b2a2:	d12b      	bne.n	800b2fc <_printf_float+0x23c>
 800b2a4:	e767      	b.n	800b176 <_printf_float+0xb6>
 800b2a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b2aa:	f240 80dd 	bls.w	800b468 <_printf_float+0x3a8>
 800b2ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	f7f5 fc0f 	bl	8000ad8 <__aeabi_dcmpeq>
 800b2ba:	2800      	cmp	r0, #0
 800b2bc:	d033      	beq.n	800b326 <_printf_float+0x266>
 800b2be:	4a37      	ldr	r2, [pc, #220]	@ (800b39c <_printf_float+0x2dc>)
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	4631      	mov	r1, r6
 800b2c4:	4628      	mov	r0, r5
 800b2c6:	47b8      	blx	r7
 800b2c8:	3001      	adds	r0, #1
 800b2ca:	f43f af54 	beq.w	800b176 <_printf_float+0xb6>
 800b2ce:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b2d2:	4543      	cmp	r3, r8
 800b2d4:	db02      	blt.n	800b2dc <_printf_float+0x21c>
 800b2d6:	6823      	ldr	r3, [r4, #0]
 800b2d8:	07d8      	lsls	r0, r3, #31
 800b2da:	d50f      	bpl.n	800b2fc <_printf_float+0x23c>
 800b2dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b2e0:	4631      	mov	r1, r6
 800b2e2:	4628      	mov	r0, r5
 800b2e4:	47b8      	blx	r7
 800b2e6:	3001      	adds	r0, #1
 800b2e8:	f43f af45 	beq.w	800b176 <_printf_float+0xb6>
 800b2ec:	f04f 0900 	mov.w	r9, #0
 800b2f0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b2f4:	f104 0a1a 	add.w	sl, r4, #26
 800b2f8:	45c8      	cmp	r8, r9
 800b2fa:	dc09      	bgt.n	800b310 <_printf_float+0x250>
 800b2fc:	6823      	ldr	r3, [r4, #0]
 800b2fe:	079b      	lsls	r3, r3, #30
 800b300:	f100 8103 	bmi.w	800b50a <_printf_float+0x44a>
 800b304:	68e0      	ldr	r0, [r4, #12]
 800b306:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b308:	4298      	cmp	r0, r3
 800b30a:	bfb8      	it	lt
 800b30c:	4618      	movlt	r0, r3
 800b30e:	e734      	b.n	800b17a <_printf_float+0xba>
 800b310:	2301      	movs	r3, #1
 800b312:	4652      	mov	r2, sl
 800b314:	4631      	mov	r1, r6
 800b316:	4628      	mov	r0, r5
 800b318:	47b8      	blx	r7
 800b31a:	3001      	adds	r0, #1
 800b31c:	f43f af2b 	beq.w	800b176 <_printf_float+0xb6>
 800b320:	f109 0901 	add.w	r9, r9, #1
 800b324:	e7e8      	b.n	800b2f8 <_printf_float+0x238>
 800b326:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b328:	2b00      	cmp	r3, #0
 800b32a:	dc39      	bgt.n	800b3a0 <_printf_float+0x2e0>
 800b32c:	4a1b      	ldr	r2, [pc, #108]	@ (800b39c <_printf_float+0x2dc>)
 800b32e:	2301      	movs	r3, #1
 800b330:	4631      	mov	r1, r6
 800b332:	4628      	mov	r0, r5
 800b334:	47b8      	blx	r7
 800b336:	3001      	adds	r0, #1
 800b338:	f43f af1d 	beq.w	800b176 <_printf_float+0xb6>
 800b33c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b340:	ea59 0303 	orrs.w	r3, r9, r3
 800b344:	d102      	bne.n	800b34c <_printf_float+0x28c>
 800b346:	6823      	ldr	r3, [r4, #0]
 800b348:	07d9      	lsls	r1, r3, #31
 800b34a:	d5d7      	bpl.n	800b2fc <_printf_float+0x23c>
 800b34c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b350:	4631      	mov	r1, r6
 800b352:	4628      	mov	r0, r5
 800b354:	47b8      	blx	r7
 800b356:	3001      	adds	r0, #1
 800b358:	f43f af0d 	beq.w	800b176 <_printf_float+0xb6>
 800b35c:	f04f 0a00 	mov.w	sl, #0
 800b360:	f104 0b1a 	add.w	fp, r4, #26
 800b364:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b366:	425b      	negs	r3, r3
 800b368:	4553      	cmp	r3, sl
 800b36a:	dc01      	bgt.n	800b370 <_printf_float+0x2b0>
 800b36c:	464b      	mov	r3, r9
 800b36e:	e793      	b.n	800b298 <_printf_float+0x1d8>
 800b370:	2301      	movs	r3, #1
 800b372:	465a      	mov	r2, fp
 800b374:	4631      	mov	r1, r6
 800b376:	4628      	mov	r0, r5
 800b378:	47b8      	blx	r7
 800b37a:	3001      	adds	r0, #1
 800b37c:	f43f aefb 	beq.w	800b176 <_printf_float+0xb6>
 800b380:	f10a 0a01 	add.w	sl, sl, #1
 800b384:	e7ee      	b.n	800b364 <_printf_float+0x2a4>
 800b386:	bf00      	nop
 800b388:	7fefffff 	.word	0x7fefffff
 800b38c:	0800e30c 	.word	0x0800e30c
 800b390:	0800e310 	.word	0x0800e310
 800b394:	0800e314 	.word	0x0800e314
 800b398:	0800e318 	.word	0x0800e318
 800b39c:	0800e31c 	.word	0x0800e31c
 800b3a0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b3a2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b3a6:	4553      	cmp	r3, sl
 800b3a8:	bfa8      	it	ge
 800b3aa:	4653      	movge	r3, sl
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	4699      	mov	r9, r3
 800b3b0:	dc36      	bgt.n	800b420 <_printf_float+0x360>
 800b3b2:	f04f 0b00 	mov.w	fp, #0
 800b3b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b3ba:	f104 021a 	add.w	r2, r4, #26
 800b3be:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b3c0:	9306      	str	r3, [sp, #24]
 800b3c2:	eba3 0309 	sub.w	r3, r3, r9
 800b3c6:	455b      	cmp	r3, fp
 800b3c8:	dc31      	bgt.n	800b42e <_printf_float+0x36e>
 800b3ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3cc:	459a      	cmp	sl, r3
 800b3ce:	dc3a      	bgt.n	800b446 <_printf_float+0x386>
 800b3d0:	6823      	ldr	r3, [r4, #0]
 800b3d2:	07da      	lsls	r2, r3, #31
 800b3d4:	d437      	bmi.n	800b446 <_printf_float+0x386>
 800b3d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3d8:	ebaa 0903 	sub.w	r9, sl, r3
 800b3dc:	9b06      	ldr	r3, [sp, #24]
 800b3de:	ebaa 0303 	sub.w	r3, sl, r3
 800b3e2:	4599      	cmp	r9, r3
 800b3e4:	bfa8      	it	ge
 800b3e6:	4699      	movge	r9, r3
 800b3e8:	f1b9 0f00 	cmp.w	r9, #0
 800b3ec:	dc33      	bgt.n	800b456 <_printf_float+0x396>
 800b3ee:	f04f 0800 	mov.w	r8, #0
 800b3f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b3f6:	f104 0b1a 	add.w	fp, r4, #26
 800b3fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3fc:	ebaa 0303 	sub.w	r3, sl, r3
 800b400:	eba3 0309 	sub.w	r3, r3, r9
 800b404:	4543      	cmp	r3, r8
 800b406:	f77f af79 	ble.w	800b2fc <_printf_float+0x23c>
 800b40a:	2301      	movs	r3, #1
 800b40c:	465a      	mov	r2, fp
 800b40e:	4631      	mov	r1, r6
 800b410:	4628      	mov	r0, r5
 800b412:	47b8      	blx	r7
 800b414:	3001      	adds	r0, #1
 800b416:	f43f aeae 	beq.w	800b176 <_printf_float+0xb6>
 800b41a:	f108 0801 	add.w	r8, r8, #1
 800b41e:	e7ec      	b.n	800b3fa <_printf_float+0x33a>
 800b420:	4642      	mov	r2, r8
 800b422:	4631      	mov	r1, r6
 800b424:	4628      	mov	r0, r5
 800b426:	47b8      	blx	r7
 800b428:	3001      	adds	r0, #1
 800b42a:	d1c2      	bne.n	800b3b2 <_printf_float+0x2f2>
 800b42c:	e6a3      	b.n	800b176 <_printf_float+0xb6>
 800b42e:	2301      	movs	r3, #1
 800b430:	4631      	mov	r1, r6
 800b432:	4628      	mov	r0, r5
 800b434:	9206      	str	r2, [sp, #24]
 800b436:	47b8      	blx	r7
 800b438:	3001      	adds	r0, #1
 800b43a:	f43f ae9c 	beq.w	800b176 <_printf_float+0xb6>
 800b43e:	9a06      	ldr	r2, [sp, #24]
 800b440:	f10b 0b01 	add.w	fp, fp, #1
 800b444:	e7bb      	b.n	800b3be <_printf_float+0x2fe>
 800b446:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b44a:	4631      	mov	r1, r6
 800b44c:	4628      	mov	r0, r5
 800b44e:	47b8      	blx	r7
 800b450:	3001      	adds	r0, #1
 800b452:	d1c0      	bne.n	800b3d6 <_printf_float+0x316>
 800b454:	e68f      	b.n	800b176 <_printf_float+0xb6>
 800b456:	9a06      	ldr	r2, [sp, #24]
 800b458:	464b      	mov	r3, r9
 800b45a:	4442      	add	r2, r8
 800b45c:	4631      	mov	r1, r6
 800b45e:	4628      	mov	r0, r5
 800b460:	47b8      	blx	r7
 800b462:	3001      	adds	r0, #1
 800b464:	d1c3      	bne.n	800b3ee <_printf_float+0x32e>
 800b466:	e686      	b.n	800b176 <_printf_float+0xb6>
 800b468:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b46c:	f1ba 0f01 	cmp.w	sl, #1
 800b470:	dc01      	bgt.n	800b476 <_printf_float+0x3b6>
 800b472:	07db      	lsls	r3, r3, #31
 800b474:	d536      	bpl.n	800b4e4 <_printf_float+0x424>
 800b476:	2301      	movs	r3, #1
 800b478:	4642      	mov	r2, r8
 800b47a:	4631      	mov	r1, r6
 800b47c:	4628      	mov	r0, r5
 800b47e:	47b8      	blx	r7
 800b480:	3001      	adds	r0, #1
 800b482:	f43f ae78 	beq.w	800b176 <_printf_float+0xb6>
 800b486:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b48a:	4631      	mov	r1, r6
 800b48c:	4628      	mov	r0, r5
 800b48e:	47b8      	blx	r7
 800b490:	3001      	adds	r0, #1
 800b492:	f43f ae70 	beq.w	800b176 <_printf_float+0xb6>
 800b496:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b49a:	2200      	movs	r2, #0
 800b49c:	2300      	movs	r3, #0
 800b49e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b4a2:	f7f5 fb19 	bl	8000ad8 <__aeabi_dcmpeq>
 800b4a6:	b9c0      	cbnz	r0, 800b4da <_printf_float+0x41a>
 800b4a8:	4653      	mov	r3, sl
 800b4aa:	f108 0201 	add.w	r2, r8, #1
 800b4ae:	4631      	mov	r1, r6
 800b4b0:	4628      	mov	r0, r5
 800b4b2:	47b8      	blx	r7
 800b4b4:	3001      	adds	r0, #1
 800b4b6:	d10c      	bne.n	800b4d2 <_printf_float+0x412>
 800b4b8:	e65d      	b.n	800b176 <_printf_float+0xb6>
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	465a      	mov	r2, fp
 800b4be:	4631      	mov	r1, r6
 800b4c0:	4628      	mov	r0, r5
 800b4c2:	47b8      	blx	r7
 800b4c4:	3001      	adds	r0, #1
 800b4c6:	f43f ae56 	beq.w	800b176 <_printf_float+0xb6>
 800b4ca:	f108 0801 	add.w	r8, r8, #1
 800b4ce:	45d0      	cmp	r8, sl
 800b4d0:	dbf3      	blt.n	800b4ba <_printf_float+0x3fa>
 800b4d2:	464b      	mov	r3, r9
 800b4d4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b4d8:	e6df      	b.n	800b29a <_printf_float+0x1da>
 800b4da:	f04f 0800 	mov.w	r8, #0
 800b4de:	f104 0b1a 	add.w	fp, r4, #26
 800b4e2:	e7f4      	b.n	800b4ce <_printf_float+0x40e>
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	4642      	mov	r2, r8
 800b4e8:	e7e1      	b.n	800b4ae <_printf_float+0x3ee>
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	464a      	mov	r2, r9
 800b4ee:	4631      	mov	r1, r6
 800b4f0:	4628      	mov	r0, r5
 800b4f2:	47b8      	blx	r7
 800b4f4:	3001      	adds	r0, #1
 800b4f6:	f43f ae3e 	beq.w	800b176 <_printf_float+0xb6>
 800b4fa:	f108 0801 	add.w	r8, r8, #1
 800b4fe:	68e3      	ldr	r3, [r4, #12]
 800b500:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b502:	1a5b      	subs	r3, r3, r1
 800b504:	4543      	cmp	r3, r8
 800b506:	dcf0      	bgt.n	800b4ea <_printf_float+0x42a>
 800b508:	e6fc      	b.n	800b304 <_printf_float+0x244>
 800b50a:	f04f 0800 	mov.w	r8, #0
 800b50e:	f104 0919 	add.w	r9, r4, #25
 800b512:	e7f4      	b.n	800b4fe <_printf_float+0x43e>

0800b514 <_printf_common>:
 800b514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b518:	4616      	mov	r6, r2
 800b51a:	4698      	mov	r8, r3
 800b51c:	688a      	ldr	r2, [r1, #8]
 800b51e:	690b      	ldr	r3, [r1, #16]
 800b520:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b524:	4293      	cmp	r3, r2
 800b526:	bfb8      	it	lt
 800b528:	4613      	movlt	r3, r2
 800b52a:	6033      	str	r3, [r6, #0]
 800b52c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b530:	4607      	mov	r7, r0
 800b532:	460c      	mov	r4, r1
 800b534:	b10a      	cbz	r2, 800b53a <_printf_common+0x26>
 800b536:	3301      	adds	r3, #1
 800b538:	6033      	str	r3, [r6, #0]
 800b53a:	6823      	ldr	r3, [r4, #0]
 800b53c:	0699      	lsls	r1, r3, #26
 800b53e:	bf42      	ittt	mi
 800b540:	6833      	ldrmi	r3, [r6, #0]
 800b542:	3302      	addmi	r3, #2
 800b544:	6033      	strmi	r3, [r6, #0]
 800b546:	6825      	ldr	r5, [r4, #0]
 800b548:	f015 0506 	ands.w	r5, r5, #6
 800b54c:	d106      	bne.n	800b55c <_printf_common+0x48>
 800b54e:	f104 0a19 	add.w	sl, r4, #25
 800b552:	68e3      	ldr	r3, [r4, #12]
 800b554:	6832      	ldr	r2, [r6, #0]
 800b556:	1a9b      	subs	r3, r3, r2
 800b558:	42ab      	cmp	r3, r5
 800b55a:	dc26      	bgt.n	800b5aa <_printf_common+0x96>
 800b55c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b560:	6822      	ldr	r2, [r4, #0]
 800b562:	3b00      	subs	r3, #0
 800b564:	bf18      	it	ne
 800b566:	2301      	movne	r3, #1
 800b568:	0692      	lsls	r2, r2, #26
 800b56a:	d42b      	bmi.n	800b5c4 <_printf_common+0xb0>
 800b56c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b570:	4641      	mov	r1, r8
 800b572:	4638      	mov	r0, r7
 800b574:	47c8      	blx	r9
 800b576:	3001      	adds	r0, #1
 800b578:	d01e      	beq.n	800b5b8 <_printf_common+0xa4>
 800b57a:	6823      	ldr	r3, [r4, #0]
 800b57c:	6922      	ldr	r2, [r4, #16]
 800b57e:	f003 0306 	and.w	r3, r3, #6
 800b582:	2b04      	cmp	r3, #4
 800b584:	bf02      	ittt	eq
 800b586:	68e5      	ldreq	r5, [r4, #12]
 800b588:	6833      	ldreq	r3, [r6, #0]
 800b58a:	1aed      	subeq	r5, r5, r3
 800b58c:	68a3      	ldr	r3, [r4, #8]
 800b58e:	bf0c      	ite	eq
 800b590:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b594:	2500      	movne	r5, #0
 800b596:	4293      	cmp	r3, r2
 800b598:	bfc4      	itt	gt
 800b59a:	1a9b      	subgt	r3, r3, r2
 800b59c:	18ed      	addgt	r5, r5, r3
 800b59e:	2600      	movs	r6, #0
 800b5a0:	341a      	adds	r4, #26
 800b5a2:	42b5      	cmp	r5, r6
 800b5a4:	d11a      	bne.n	800b5dc <_printf_common+0xc8>
 800b5a6:	2000      	movs	r0, #0
 800b5a8:	e008      	b.n	800b5bc <_printf_common+0xa8>
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	4652      	mov	r2, sl
 800b5ae:	4641      	mov	r1, r8
 800b5b0:	4638      	mov	r0, r7
 800b5b2:	47c8      	blx	r9
 800b5b4:	3001      	adds	r0, #1
 800b5b6:	d103      	bne.n	800b5c0 <_printf_common+0xac>
 800b5b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b5bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5c0:	3501      	adds	r5, #1
 800b5c2:	e7c6      	b.n	800b552 <_printf_common+0x3e>
 800b5c4:	18e1      	adds	r1, r4, r3
 800b5c6:	1c5a      	adds	r2, r3, #1
 800b5c8:	2030      	movs	r0, #48	@ 0x30
 800b5ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b5ce:	4422      	add	r2, r4
 800b5d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b5d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b5d8:	3302      	adds	r3, #2
 800b5da:	e7c7      	b.n	800b56c <_printf_common+0x58>
 800b5dc:	2301      	movs	r3, #1
 800b5de:	4622      	mov	r2, r4
 800b5e0:	4641      	mov	r1, r8
 800b5e2:	4638      	mov	r0, r7
 800b5e4:	47c8      	blx	r9
 800b5e6:	3001      	adds	r0, #1
 800b5e8:	d0e6      	beq.n	800b5b8 <_printf_common+0xa4>
 800b5ea:	3601      	adds	r6, #1
 800b5ec:	e7d9      	b.n	800b5a2 <_printf_common+0x8e>
	...

0800b5f0 <_printf_i>:
 800b5f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b5f4:	7e0f      	ldrb	r7, [r1, #24]
 800b5f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b5f8:	2f78      	cmp	r7, #120	@ 0x78
 800b5fa:	4691      	mov	r9, r2
 800b5fc:	4680      	mov	r8, r0
 800b5fe:	460c      	mov	r4, r1
 800b600:	469a      	mov	sl, r3
 800b602:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b606:	d807      	bhi.n	800b618 <_printf_i+0x28>
 800b608:	2f62      	cmp	r7, #98	@ 0x62
 800b60a:	d80a      	bhi.n	800b622 <_printf_i+0x32>
 800b60c:	2f00      	cmp	r7, #0
 800b60e:	f000 80d2 	beq.w	800b7b6 <_printf_i+0x1c6>
 800b612:	2f58      	cmp	r7, #88	@ 0x58
 800b614:	f000 80b9 	beq.w	800b78a <_printf_i+0x19a>
 800b618:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b61c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b620:	e03a      	b.n	800b698 <_printf_i+0xa8>
 800b622:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b626:	2b15      	cmp	r3, #21
 800b628:	d8f6      	bhi.n	800b618 <_printf_i+0x28>
 800b62a:	a101      	add	r1, pc, #4	@ (adr r1, 800b630 <_printf_i+0x40>)
 800b62c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b630:	0800b689 	.word	0x0800b689
 800b634:	0800b69d 	.word	0x0800b69d
 800b638:	0800b619 	.word	0x0800b619
 800b63c:	0800b619 	.word	0x0800b619
 800b640:	0800b619 	.word	0x0800b619
 800b644:	0800b619 	.word	0x0800b619
 800b648:	0800b69d 	.word	0x0800b69d
 800b64c:	0800b619 	.word	0x0800b619
 800b650:	0800b619 	.word	0x0800b619
 800b654:	0800b619 	.word	0x0800b619
 800b658:	0800b619 	.word	0x0800b619
 800b65c:	0800b79d 	.word	0x0800b79d
 800b660:	0800b6c7 	.word	0x0800b6c7
 800b664:	0800b757 	.word	0x0800b757
 800b668:	0800b619 	.word	0x0800b619
 800b66c:	0800b619 	.word	0x0800b619
 800b670:	0800b7bf 	.word	0x0800b7bf
 800b674:	0800b619 	.word	0x0800b619
 800b678:	0800b6c7 	.word	0x0800b6c7
 800b67c:	0800b619 	.word	0x0800b619
 800b680:	0800b619 	.word	0x0800b619
 800b684:	0800b75f 	.word	0x0800b75f
 800b688:	6833      	ldr	r3, [r6, #0]
 800b68a:	1d1a      	adds	r2, r3, #4
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	6032      	str	r2, [r6, #0]
 800b690:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b694:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b698:	2301      	movs	r3, #1
 800b69a:	e09d      	b.n	800b7d8 <_printf_i+0x1e8>
 800b69c:	6833      	ldr	r3, [r6, #0]
 800b69e:	6820      	ldr	r0, [r4, #0]
 800b6a0:	1d19      	adds	r1, r3, #4
 800b6a2:	6031      	str	r1, [r6, #0]
 800b6a4:	0606      	lsls	r6, r0, #24
 800b6a6:	d501      	bpl.n	800b6ac <_printf_i+0xbc>
 800b6a8:	681d      	ldr	r5, [r3, #0]
 800b6aa:	e003      	b.n	800b6b4 <_printf_i+0xc4>
 800b6ac:	0645      	lsls	r5, r0, #25
 800b6ae:	d5fb      	bpl.n	800b6a8 <_printf_i+0xb8>
 800b6b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b6b4:	2d00      	cmp	r5, #0
 800b6b6:	da03      	bge.n	800b6c0 <_printf_i+0xd0>
 800b6b8:	232d      	movs	r3, #45	@ 0x2d
 800b6ba:	426d      	negs	r5, r5
 800b6bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b6c0:	4859      	ldr	r0, [pc, #356]	@ (800b828 <_printf_i+0x238>)
 800b6c2:	230a      	movs	r3, #10
 800b6c4:	e011      	b.n	800b6ea <_printf_i+0xfa>
 800b6c6:	6821      	ldr	r1, [r4, #0]
 800b6c8:	6833      	ldr	r3, [r6, #0]
 800b6ca:	0608      	lsls	r0, r1, #24
 800b6cc:	f853 5b04 	ldr.w	r5, [r3], #4
 800b6d0:	d402      	bmi.n	800b6d8 <_printf_i+0xe8>
 800b6d2:	0649      	lsls	r1, r1, #25
 800b6d4:	bf48      	it	mi
 800b6d6:	b2ad      	uxthmi	r5, r5
 800b6d8:	2f6f      	cmp	r7, #111	@ 0x6f
 800b6da:	4853      	ldr	r0, [pc, #332]	@ (800b828 <_printf_i+0x238>)
 800b6dc:	6033      	str	r3, [r6, #0]
 800b6de:	bf14      	ite	ne
 800b6e0:	230a      	movne	r3, #10
 800b6e2:	2308      	moveq	r3, #8
 800b6e4:	2100      	movs	r1, #0
 800b6e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b6ea:	6866      	ldr	r6, [r4, #4]
 800b6ec:	60a6      	str	r6, [r4, #8]
 800b6ee:	2e00      	cmp	r6, #0
 800b6f0:	bfa2      	ittt	ge
 800b6f2:	6821      	ldrge	r1, [r4, #0]
 800b6f4:	f021 0104 	bicge.w	r1, r1, #4
 800b6f8:	6021      	strge	r1, [r4, #0]
 800b6fa:	b90d      	cbnz	r5, 800b700 <_printf_i+0x110>
 800b6fc:	2e00      	cmp	r6, #0
 800b6fe:	d04b      	beq.n	800b798 <_printf_i+0x1a8>
 800b700:	4616      	mov	r6, r2
 800b702:	fbb5 f1f3 	udiv	r1, r5, r3
 800b706:	fb03 5711 	mls	r7, r3, r1, r5
 800b70a:	5dc7      	ldrb	r7, [r0, r7]
 800b70c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b710:	462f      	mov	r7, r5
 800b712:	42bb      	cmp	r3, r7
 800b714:	460d      	mov	r5, r1
 800b716:	d9f4      	bls.n	800b702 <_printf_i+0x112>
 800b718:	2b08      	cmp	r3, #8
 800b71a:	d10b      	bne.n	800b734 <_printf_i+0x144>
 800b71c:	6823      	ldr	r3, [r4, #0]
 800b71e:	07df      	lsls	r7, r3, #31
 800b720:	d508      	bpl.n	800b734 <_printf_i+0x144>
 800b722:	6923      	ldr	r3, [r4, #16]
 800b724:	6861      	ldr	r1, [r4, #4]
 800b726:	4299      	cmp	r1, r3
 800b728:	bfde      	ittt	le
 800b72a:	2330      	movle	r3, #48	@ 0x30
 800b72c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b730:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b734:	1b92      	subs	r2, r2, r6
 800b736:	6122      	str	r2, [r4, #16]
 800b738:	f8cd a000 	str.w	sl, [sp]
 800b73c:	464b      	mov	r3, r9
 800b73e:	aa03      	add	r2, sp, #12
 800b740:	4621      	mov	r1, r4
 800b742:	4640      	mov	r0, r8
 800b744:	f7ff fee6 	bl	800b514 <_printf_common>
 800b748:	3001      	adds	r0, #1
 800b74a:	d14a      	bne.n	800b7e2 <_printf_i+0x1f2>
 800b74c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b750:	b004      	add	sp, #16
 800b752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b756:	6823      	ldr	r3, [r4, #0]
 800b758:	f043 0320 	orr.w	r3, r3, #32
 800b75c:	6023      	str	r3, [r4, #0]
 800b75e:	4833      	ldr	r0, [pc, #204]	@ (800b82c <_printf_i+0x23c>)
 800b760:	2778      	movs	r7, #120	@ 0x78
 800b762:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b766:	6823      	ldr	r3, [r4, #0]
 800b768:	6831      	ldr	r1, [r6, #0]
 800b76a:	061f      	lsls	r7, r3, #24
 800b76c:	f851 5b04 	ldr.w	r5, [r1], #4
 800b770:	d402      	bmi.n	800b778 <_printf_i+0x188>
 800b772:	065f      	lsls	r7, r3, #25
 800b774:	bf48      	it	mi
 800b776:	b2ad      	uxthmi	r5, r5
 800b778:	6031      	str	r1, [r6, #0]
 800b77a:	07d9      	lsls	r1, r3, #31
 800b77c:	bf44      	itt	mi
 800b77e:	f043 0320 	orrmi.w	r3, r3, #32
 800b782:	6023      	strmi	r3, [r4, #0]
 800b784:	b11d      	cbz	r5, 800b78e <_printf_i+0x19e>
 800b786:	2310      	movs	r3, #16
 800b788:	e7ac      	b.n	800b6e4 <_printf_i+0xf4>
 800b78a:	4827      	ldr	r0, [pc, #156]	@ (800b828 <_printf_i+0x238>)
 800b78c:	e7e9      	b.n	800b762 <_printf_i+0x172>
 800b78e:	6823      	ldr	r3, [r4, #0]
 800b790:	f023 0320 	bic.w	r3, r3, #32
 800b794:	6023      	str	r3, [r4, #0]
 800b796:	e7f6      	b.n	800b786 <_printf_i+0x196>
 800b798:	4616      	mov	r6, r2
 800b79a:	e7bd      	b.n	800b718 <_printf_i+0x128>
 800b79c:	6833      	ldr	r3, [r6, #0]
 800b79e:	6825      	ldr	r5, [r4, #0]
 800b7a0:	6961      	ldr	r1, [r4, #20]
 800b7a2:	1d18      	adds	r0, r3, #4
 800b7a4:	6030      	str	r0, [r6, #0]
 800b7a6:	062e      	lsls	r6, r5, #24
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	d501      	bpl.n	800b7b0 <_printf_i+0x1c0>
 800b7ac:	6019      	str	r1, [r3, #0]
 800b7ae:	e002      	b.n	800b7b6 <_printf_i+0x1c6>
 800b7b0:	0668      	lsls	r0, r5, #25
 800b7b2:	d5fb      	bpl.n	800b7ac <_printf_i+0x1bc>
 800b7b4:	8019      	strh	r1, [r3, #0]
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	6123      	str	r3, [r4, #16]
 800b7ba:	4616      	mov	r6, r2
 800b7bc:	e7bc      	b.n	800b738 <_printf_i+0x148>
 800b7be:	6833      	ldr	r3, [r6, #0]
 800b7c0:	1d1a      	adds	r2, r3, #4
 800b7c2:	6032      	str	r2, [r6, #0]
 800b7c4:	681e      	ldr	r6, [r3, #0]
 800b7c6:	6862      	ldr	r2, [r4, #4]
 800b7c8:	2100      	movs	r1, #0
 800b7ca:	4630      	mov	r0, r6
 800b7cc:	f7f4 fd08 	bl	80001e0 <memchr>
 800b7d0:	b108      	cbz	r0, 800b7d6 <_printf_i+0x1e6>
 800b7d2:	1b80      	subs	r0, r0, r6
 800b7d4:	6060      	str	r0, [r4, #4]
 800b7d6:	6863      	ldr	r3, [r4, #4]
 800b7d8:	6123      	str	r3, [r4, #16]
 800b7da:	2300      	movs	r3, #0
 800b7dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b7e0:	e7aa      	b.n	800b738 <_printf_i+0x148>
 800b7e2:	6923      	ldr	r3, [r4, #16]
 800b7e4:	4632      	mov	r2, r6
 800b7e6:	4649      	mov	r1, r9
 800b7e8:	4640      	mov	r0, r8
 800b7ea:	47d0      	blx	sl
 800b7ec:	3001      	adds	r0, #1
 800b7ee:	d0ad      	beq.n	800b74c <_printf_i+0x15c>
 800b7f0:	6823      	ldr	r3, [r4, #0]
 800b7f2:	079b      	lsls	r3, r3, #30
 800b7f4:	d413      	bmi.n	800b81e <_printf_i+0x22e>
 800b7f6:	68e0      	ldr	r0, [r4, #12]
 800b7f8:	9b03      	ldr	r3, [sp, #12]
 800b7fa:	4298      	cmp	r0, r3
 800b7fc:	bfb8      	it	lt
 800b7fe:	4618      	movlt	r0, r3
 800b800:	e7a6      	b.n	800b750 <_printf_i+0x160>
 800b802:	2301      	movs	r3, #1
 800b804:	4632      	mov	r2, r6
 800b806:	4649      	mov	r1, r9
 800b808:	4640      	mov	r0, r8
 800b80a:	47d0      	blx	sl
 800b80c:	3001      	adds	r0, #1
 800b80e:	d09d      	beq.n	800b74c <_printf_i+0x15c>
 800b810:	3501      	adds	r5, #1
 800b812:	68e3      	ldr	r3, [r4, #12]
 800b814:	9903      	ldr	r1, [sp, #12]
 800b816:	1a5b      	subs	r3, r3, r1
 800b818:	42ab      	cmp	r3, r5
 800b81a:	dcf2      	bgt.n	800b802 <_printf_i+0x212>
 800b81c:	e7eb      	b.n	800b7f6 <_printf_i+0x206>
 800b81e:	2500      	movs	r5, #0
 800b820:	f104 0619 	add.w	r6, r4, #25
 800b824:	e7f5      	b.n	800b812 <_printf_i+0x222>
 800b826:	bf00      	nop
 800b828:	0800e31e 	.word	0x0800e31e
 800b82c:	0800e32f 	.word	0x0800e32f

0800b830 <std>:
 800b830:	2300      	movs	r3, #0
 800b832:	b510      	push	{r4, lr}
 800b834:	4604      	mov	r4, r0
 800b836:	e9c0 3300 	strd	r3, r3, [r0]
 800b83a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b83e:	6083      	str	r3, [r0, #8]
 800b840:	8181      	strh	r1, [r0, #12]
 800b842:	6643      	str	r3, [r0, #100]	@ 0x64
 800b844:	81c2      	strh	r2, [r0, #14]
 800b846:	6183      	str	r3, [r0, #24]
 800b848:	4619      	mov	r1, r3
 800b84a:	2208      	movs	r2, #8
 800b84c:	305c      	adds	r0, #92	@ 0x5c
 800b84e:	f000 fa2d 	bl	800bcac <memset>
 800b852:	4b0d      	ldr	r3, [pc, #52]	@ (800b888 <std+0x58>)
 800b854:	6263      	str	r3, [r4, #36]	@ 0x24
 800b856:	4b0d      	ldr	r3, [pc, #52]	@ (800b88c <std+0x5c>)
 800b858:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b85a:	4b0d      	ldr	r3, [pc, #52]	@ (800b890 <std+0x60>)
 800b85c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b85e:	4b0d      	ldr	r3, [pc, #52]	@ (800b894 <std+0x64>)
 800b860:	6323      	str	r3, [r4, #48]	@ 0x30
 800b862:	4b0d      	ldr	r3, [pc, #52]	@ (800b898 <std+0x68>)
 800b864:	6224      	str	r4, [r4, #32]
 800b866:	429c      	cmp	r4, r3
 800b868:	d006      	beq.n	800b878 <std+0x48>
 800b86a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b86e:	4294      	cmp	r4, r2
 800b870:	d002      	beq.n	800b878 <std+0x48>
 800b872:	33d0      	adds	r3, #208	@ 0xd0
 800b874:	429c      	cmp	r4, r3
 800b876:	d105      	bne.n	800b884 <std+0x54>
 800b878:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b87c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b880:	f000 bae6 	b.w	800be50 <__retarget_lock_init_recursive>
 800b884:	bd10      	pop	{r4, pc}
 800b886:	bf00      	nop
 800b888:	0800bafd 	.word	0x0800bafd
 800b88c:	0800bb1f 	.word	0x0800bb1f
 800b890:	0800bb57 	.word	0x0800bb57
 800b894:	0800bb7b 	.word	0x0800bb7b
 800b898:	20004f40 	.word	0x20004f40

0800b89c <stdio_exit_handler>:
 800b89c:	4a02      	ldr	r2, [pc, #8]	@ (800b8a8 <stdio_exit_handler+0xc>)
 800b89e:	4903      	ldr	r1, [pc, #12]	@ (800b8ac <stdio_exit_handler+0x10>)
 800b8a0:	4803      	ldr	r0, [pc, #12]	@ (800b8b0 <stdio_exit_handler+0x14>)
 800b8a2:	f000 b869 	b.w	800b978 <_fwalk_sglue>
 800b8a6:	bf00      	nop
 800b8a8:	2000002c 	.word	0x2000002c
 800b8ac:	0800da51 	.word	0x0800da51
 800b8b0:	2000003c 	.word	0x2000003c

0800b8b4 <cleanup_stdio>:
 800b8b4:	6841      	ldr	r1, [r0, #4]
 800b8b6:	4b0c      	ldr	r3, [pc, #48]	@ (800b8e8 <cleanup_stdio+0x34>)
 800b8b8:	4299      	cmp	r1, r3
 800b8ba:	b510      	push	{r4, lr}
 800b8bc:	4604      	mov	r4, r0
 800b8be:	d001      	beq.n	800b8c4 <cleanup_stdio+0x10>
 800b8c0:	f002 f8c6 	bl	800da50 <_fflush_r>
 800b8c4:	68a1      	ldr	r1, [r4, #8]
 800b8c6:	4b09      	ldr	r3, [pc, #36]	@ (800b8ec <cleanup_stdio+0x38>)
 800b8c8:	4299      	cmp	r1, r3
 800b8ca:	d002      	beq.n	800b8d2 <cleanup_stdio+0x1e>
 800b8cc:	4620      	mov	r0, r4
 800b8ce:	f002 f8bf 	bl	800da50 <_fflush_r>
 800b8d2:	68e1      	ldr	r1, [r4, #12]
 800b8d4:	4b06      	ldr	r3, [pc, #24]	@ (800b8f0 <cleanup_stdio+0x3c>)
 800b8d6:	4299      	cmp	r1, r3
 800b8d8:	d004      	beq.n	800b8e4 <cleanup_stdio+0x30>
 800b8da:	4620      	mov	r0, r4
 800b8dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8e0:	f002 b8b6 	b.w	800da50 <_fflush_r>
 800b8e4:	bd10      	pop	{r4, pc}
 800b8e6:	bf00      	nop
 800b8e8:	20004f40 	.word	0x20004f40
 800b8ec:	20004fa8 	.word	0x20004fa8
 800b8f0:	20005010 	.word	0x20005010

0800b8f4 <global_stdio_init.part.0>:
 800b8f4:	b510      	push	{r4, lr}
 800b8f6:	4b0b      	ldr	r3, [pc, #44]	@ (800b924 <global_stdio_init.part.0+0x30>)
 800b8f8:	4c0b      	ldr	r4, [pc, #44]	@ (800b928 <global_stdio_init.part.0+0x34>)
 800b8fa:	4a0c      	ldr	r2, [pc, #48]	@ (800b92c <global_stdio_init.part.0+0x38>)
 800b8fc:	601a      	str	r2, [r3, #0]
 800b8fe:	4620      	mov	r0, r4
 800b900:	2200      	movs	r2, #0
 800b902:	2104      	movs	r1, #4
 800b904:	f7ff ff94 	bl	800b830 <std>
 800b908:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b90c:	2201      	movs	r2, #1
 800b90e:	2109      	movs	r1, #9
 800b910:	f7ff ff8e 	bl	800b830 <std>
 800b914:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b918:	2202      	movs	r2, #2
 800b91a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b91e:	2112      	movs	r1, #18
 800b920:	f7ff bf86 	b.w	800b830 <std>
 800b924:	20005078 	.word	0x20005078
 800b928:	20004f40 	.word	0x20004f40
 800b92c:	0800b89d 	.word	0x0800b89d

0800b930 <__sfp_lock_acquire>:
 800b930:	4801      	ldr	r0, [pc, #4]	@ (800b938 <__sfp_lock_acquire+0x8>)
 800b932:	f000 ba8e 	b.w	800be52 <__retarget_lock_acquire_recursive>
 800b936:	bf00      	nop
 800b938:	20005081 	.word	0x20005081

0800b93c <__sfp_lock_release>:
 800b93c:	4801      	ldr	r0, [pc, #4]	@ (800b944 <__sfp_lock_release+0x8>)
 800b93e:	f000 ba89 	b.w	800be54 <__retarget_lock_release_recursive>
 800b942:	bf00      	nop
 800b944:	20005081 	.word	0x20005081

0800b948 <__sinit>:
 800b948:	b510      	push	{r4, lr}
 800b94a:	4604      	mov	r4, r0
 800b94c:	f7ff fff0 	bl	800b930 <__sfp_lock_acquire>
 800b950:	6a23      	ldr	r3, [r4, #32]
 800b952:	b11b      	cbz	r3, 800b95c <__sinit+0x14>
 800b954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b958:	f7ff bff0 	b.w	800b93c <__sfp_lock_release>
 800b95c:	4b04      	ldr	r3, [pc, #16]	@ (800b970 <__sinit+0x28>)
 800b95e:	6223      	str	r3, [r4, #32]
 800b960:	4b04      	ldr	r3, [pc, #16]	@ (800b974 <__sinit+0x2c>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d1f5      	bne.n	800b954 <__sinit+0xc>
 800b968:	f7ff ffc4 	bl	800b8f4 <global_stdio_init.part.0>
 800b96c:	e7f2      	b.n	800b954 <__sinit+0xc>
 800b96e:	bf00      	nop
 800b970:	0800b8b5 	.word	0x0800b8b5
 800b974:	20005078 	.word	0x20005078

0800b978 <_fwalk_sglue>:
 800b978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b97c:	4607      	mov	r7, r0
 800b97e:	4688      	mov	r8, r1
 800b980:	4614      	mov	r4, r2
 800b982:	2600      	movs	r6, #0
 800b984:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b988:	f1b9 0901 	subs.w	r9, r9, #1
 800b98c:	d505      	bpl.n	800b99a <_fwalk_sglue+0x22>
 800b98e:	6824      	ldr	r4, [r4, #0]
 800b990:	2c00      	cmp	r4, #0
 800b992:	d1f7      	bne.n	800b984 <_fwalk_sglue+0xc>
 800b994:	4630      	mov	r0, r6
 800b996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b99a:	89ab      	ldrh	r3, [r5, #12]
 800b99c:	2b01      	cmp	r3, #1
 800b99e:	d907      	bls.n	800b9b0 <_fwalk_sglue+0x38>
 800b9a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b9a4:	3301      	adds	r3, #1
 800b9a6:	d003      	beq.n	800b9b0 <_fwalk_sglue+0x38>
 800b9a8:	4629      	mov	r1, r5
 800b9aa:	4638      	mov	r0, r7
 800b9ac:	47c0      	blx	r8
 800b9ae:	4306      	orrs	r6, r0
 800b9b0:	3568      	adds	r5, #104	@ 0x68
 800b9b2:	e7e9      	b.n	800b988 <_fwalk_sglue+0x10>

0800b9b4 <iprintf>:
 800b9b4:	b40f      	push	{r0, r1, r2, r3}
 800b9b6:	b507      	push	{r0, r1, r2, lr}
 800b9b8:	4906      	ldr	r1, [pc, #24]	@ (800b9d4 <iprintf+0x20>)
 800b9ba:	ab04      	add	r3, sp, #16
 800b9bc:	6808      	ldr	r0, [r1, #0]
 800b9be:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9c2:	6881      	ldr	r1, [r0, #8]
 800b9c4:	9301      	str	r3, [sp, #4]
 800b9c6:	f001 fea7 	bl	800d718 <_vfiprintf_r>
 800b9ca:	b003      	add	sp, #12
 800b9cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9d0:	b004      	add	sp, #16
 800b9d2:	4770      	bx	lr
 800b9d4:	20000038 	.word	0x20000038

0800b9d8 <_puts_r>:
 800b9d8:	6a03      	ldr	r3, [r0, #32]
 800b9da:	b570      	push	{r4, r5, r6, lr}
 800b9dc:	6884      	ldr	r4, [r0, #8]
 800b9de:	4605      	mov	r5, r0
 800b9e0:	460e      	mov	r6, r1
 800b9e2:	b90b      	cbnz	r3, 800b9e8 <_puts_r+0x10>
 800b9e4:	f7ff ffb0 	bl	800b948 <__sinit>
 800b9e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b9ea:	07db      	lsls	r3, r3, #31
 800b9ec:	d405      	bmi.n	800b9fa <_puts_r+0x22>
 800b9ee:	89a3      	ldrh	r3, [r4, #12]
 800b9f0:	0598      	lsls	r0, r3, #22
 800b9f2:	d402      	bmi.n	800b9fa <_puts_r+0x22>
 800b9f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b9f6:	f000 fa2c 	bl	800be52 <__retarget_lock_acquire_recursive>
 800b9fa:	89a3      	ldrh	r3, [r4, #12]
 800b9fc:	0719      	lsls	r1, r3, #28
 800b9fe:	d502      	bpl.n	800ba06 <_puts_r+0x2e>
 800ba00:	6923      	ldr	r3, [r4, #16]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d135      	bne.n	800ba72 <_puts_r+0x9a>
 800ba06:	4621      	mov	r1, r4
 800ba08:	4628      	mov	r0, r5
 800ba0a:	f000 f8f9 	bl	800bc00 <__swsetup_r>
 800ba0e:	b380      	cbz	r0, 800ba72 <_puts_r+0x9a>
 800ba10:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800ba14:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ba16:	07da      	lsls	r2, r3, #31
 800ba18:	d405      	bmi.n	800ba26 <_puts_r+0x4e>
 800ba1a:	89a3      	ldrh	r3, [r4, #12]
 800ba1c:	059b      	lsls	r3, r3, #22
 800ba1e:	d402      	bmi.n	800ba26 <_puts_r+0x4e>
 800ba20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ba22:	f000 fa17 	bl	800be54 <__retarget_lock_release_recursive>
 800ba26:	4628      	mov	r0, r5
 800ba28:	bd70      	pop	{r4, r5, r6, pc}
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	da04      	bge.n	800ba38 <_puts_r+0x60>
 800ba2e:	69a2      	ldr	r2, [r4, #24]
 800ba30:	429a      	cmp	r2, r3
 800ba32:	dc17      	bgt.n	800ba64 <_puts_r+0x8c>
 800ba34:	290a      	cmp	r1, #10
 800ba36:	d015      	beq.n	800ba64 <_puts_r+0x8c>
 800ba38:	6823      	ldr	r3, [r4, #0]
 800ba3a:	1c5a      	adds	r2, r3, #1
 800ba3c:	6022      	str	r2, [r4, #0]
 800ba3e:	7019      	strb	r1, [r3, #0]
 800ba40:	68a3      	ldr	r3, [r4, #8]
 800ba42:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ba46:	3b01      	subs	r3, #1
 800ba48:	60a3      	str	r3, [r4, #8]
 800ba4a:	2900      	cmp	r1, #0
 800ba4c:	d1ed      	bne.n	800ba2a <_puts_r+0x52>
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	da11      	bge.n	800ba76 <_puts_r+0x9e>
 800ba52:	4622      	mov	r2, r4
 800ba54:	210a      	movs	r1, #10
 800ba56:	4628      	mov	r0, r5
 800ba58:	f000 f893 	bl	800bb82 <__swbuf_r>
 800ba5c:	3001      	adds	r0, #1
 800ba5e:	d0d7      	beq.n	800ba10 <_puts_r+0x38>
 800ba60:	250a      	movs	r5, #10
 800ba62:	e7d7      	b.n	800ba14 <_puts_r+0x3c>
 800ba64:	4622      	mov	r2, r4
 800ba66:	4628      	mov	r0, r5
 800ba68:	f000 f88b 	bl	800bb82 <__swbuf_r>
 800ba6c:	3001      	adds	r0, #1
 800ba6e:	d1e7      	bne.n	800ba40 <_puts_r+0x68>
 800ba70:	e7ce      	b.n	800ba10 <_puts_r+0x38>
 800ba72:	3e01      	subs	r6, #1
 800ba74:	e7e4      	b.n	800ba40 <_puts_r+0x68>
 800ba76:	6823      	ldr	r3, [r4, #0]
 800ba78:	1c5a      	adds	r2, r3, #1
 800ba7a:	6022      	str	r2, [r4, #0]
 800ba7c:	220a      	movs	r2, #10
 800ba7e:	701a      	strb	r2, [r3, #0]
 800ba80:	e7ee      	b.n	800ba60 <_puts_r+0x88>
	...

0800ba84 <puts>:
 800ba84:	4b02      	ldr	r3, [pc, #8]	@ (800ba90 <puts+0xc>)
 800ba86:	4601      	mov	r1, r0
 800ba88:	6818      	ldr	r0, [r3, #0]
 800ba8a:	f7ff bfa5 	b.w	800b9d8 <_puts_r>
 800ba8e:	bf00      	nop
 800ba90:	20000038 	.word	0x20000038

0800ba94 <sniprintf>:
 800ba94:	b40c      	push	{r2, r3}
 800ba96:	b530      	push	{r4, r5, lr}
 800ba98:	4b17      	ldr	r3, [pc, #92]	@ (800baf8 <sniprintf+0x64>)
 800ba9a:	1e0c      	subs	r4, r1, #0
 800ba9c:	681d      	ldr	r5, [r3, #0]
 800ba9e:	b09d      	sub	sp, #116	@ 0x74
 800baa0:	da08      	bge.n	800bab4 <sniprintf+0x20>
 800baa2:	238b      	movs	r3, #139	@ 0x8b
 800baa4:	602b      	str	r3, [r5, #0]
 800baa6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800baaa:	b01d      	add	sp, #116	@ 0x74
 800baac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bab0:	b002      	add	sp, #8
 800bab2:	4770      	bx	lr
 800bab4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bab8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800babc:	bf14      	ite	ne
 800babe:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800bac2:	4623      	moveq	r3, r4
 800bac4:	9304      	str	r3, [sp, #16]
 800bac6:	9307      	str	r3, [sp, #28]
 800bac8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bacc:	9002      	str	r0, [sp, #8]
 800bace:	9006      	str	r0, [sp, #24]
 800bad0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bad4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bad6:	ab21      	add	r3, sp, #132	@ 0x84
 800bad8:	a902      	add	r1, sp, #8
 800bada:	4628      	mov	r0, r5
 800badc:	9301      	str	r3, [sp, #4]
 800bade:	f001 fcf5 	bl	800d4cc <_svfiprintf_r>
 800bae2:	1c43      	adds	r3, r0, #1
 800bae4:	bfbc      	itt	lt
 800bae6:	238b      	movlt	r3, #139	@ 0x8b
 800bae8:	602b      	strlt	r3, [r5, #0]
 800baea:	2c00      	cmp	r4, #0
 800baec:	d0dd      	beq.n	800baaa <sniprintf+0x16>
 800baee:	9b02      	ldr	r3, [sp, #8]
 800baf0:	2200      	movs	r2, #0
 800baf2:	701a      	strb	r2, [r3, #0]
 800baf4:	e7d9      	b.n	800baaa <sniprintf+0x16>
 800baf6:	bf00      	nop
 800baf8:	20000038 	.word	0x20000038

0800bafc <__sread>:
 800bafc:	b510      	push	{r4, lr}
 800bafe:	460c      	mov	r4, r1
 800bb00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb04:	f000 f956 	bl	800bdb4 <_read_r>
 800bb08:	2800      	cmp	r0, #0
 800bb0a:	bfab      	itete	ge
 800bb0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bb0e:	89a3      	ldrhlt	r3, [r4, #12]
 800bb10:	181b      	addge	r3, r3, r0
 800bb12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bb16:	bfac      	ite	ge
 800bb18:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bb1a:	81a3      	strhlt	r3, [r4, #12]
 800bb1c:	bd10      	pop	{r4, pc}

0800bb1e <__swrite>:
 800bb1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb22:	461f      	mov	r7, r3
 800bb24:	898b      	ldrh	r3, [r1, #12]
 800bb26:	05db      	lsls	r3, r3, #23
 800bb28:	4605      	mov	r5, r0
 800bb2a:	460c      	mov	r4, r1
 800bb2c:	4616      	mov	r6, r2
 800bb2e:	d505      	bpl.n	800bb3c <__swrite+0x1e>
 800bb30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb34:	2302      	movs	r3, #2
 800bb36:	2200      	movs	r2, #0
 800bb38:	f000 f92a 	bl	800bd90 <_lseek_r>
 800bb3c:	89a3      	ldrh	r3, [r4, #12]
 800bb3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bb46:	81a3      	strh	r3, [r4, #12]
 800bb48:	4632      	mov	r2, r6
 800bb4a:	463b      	mov	r3, r7
 800bb4c:	4628      	mov	r0, r5
 800bb4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb52:	f000 b941 	b.w	800bdd8 <_write_r>

0800bb56 <__sseek>:
 800bb56:	b510      	push	{r4, lr}
 800bb58:	460c      	mov	r4, r1
 800bb5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb5e:	f000 f917 	bl	800bd90 <_lseek_r>
 800bb62:	1c43      	adds	r3, r0, #1
 800bb64:	89a3      	ldrh	r3, [r4, #12]
 800bb66:	bf15      	itete	ne
 800bb68:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bb6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bb6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bb72:	81a3      	strheq	r3, [r4, #12]
 800bb74:	bf18      	it	ne
 800bb76:	81a3      	strhne	r3, [r4, #12]
 800bb78:	bd10      	pop	{r4, pc}

0800bb7a <__sclose>:
 800bb7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb7e:	f000 b8a1 	b.w	800bcc4 <_close_r>

0800bb82 <__swbuf_r>:
 800bb82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb84:	460e      	mov	r6, r1
 800bb86:	4614      	mov	r4, r2
 800bb88:	4605      	mov	r5, r0
 800bb8a:	b118      	cbz	r0, 800bb94 <__swbuf_r+0x12>
 800bb8c:	6a03      	ldr	r3, [r0, #32]
 800bb8e:	b90b      	cbnz	r3, 800bb94 <__swbuf_r+0x12>
 800bb90:	f7ff feda 	bl	800b948 <__sinit>
 800bb94:	69a3      	ldr	r3, [r4, #24]
 800bb96:	60a3      	str	r3, [r4, #8]
 800bb98:	89a3      	ldrh	r3, [r4, #12]
 800bb9a:	071a      	lsls	r2, r3, #28
 800bb9c:	d501      	bpl.n	800bba2 <__swbuf_r+0x20>
 800bb9e:	6923      	ldr	r3, [r4, #16]
 800bba0:	b943      	cbnz	r3, 800bbb4 <__swbuf_r+0x32>
 800bba2:	4621      	mov	r1, r4
 800bba4:	4628      	mov	r0, r5
 800bba6:	f000 f82b 	bl	800bc00 <__swsetup_r>
 800bbaa:	b118      	cbz	r0, 800bbb4 <__swbuf_r+0x32>
 800bbac:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800bbb0:	4638      	mov	r0, r7
 800bbb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbb4:	6823      	ldr	r3, [r4, #0]
 800bbb6:	6922      	ldr	r2, [r4, #16]
 800bbb8:	1a98      	subs	r0, r3, r2
 800bbba:	6963      	ldr	r3, [r4, #20]
 800bbbc:	b2f6      	uxtb	r6, r6
 800bbbe:	4283      	cmp	r3, r0
 800bbc0:	4637      	mov	r7, r6
 800bbc2:	dc05      	bgt.n	800bbd0 <__swbuf_r+0x4e>
 800bbc4:	4621      	mov	r1, r4
 800bbc6:	4628      	mov	r0, r5
 800bbc8:	f001 ff42 	bl	800da50 <_fflush_r>
 800bbcc:	2800      	cmp	r0, #0
 800bbce:	d1ed      	bne.n	800bbac <__swbuf_r+0x2a>
 800bbd0:	68a3      	ldr	r3, [r4, #8]
 800bbd2:	3b01      	subs	r3, #1
 800bbd4:	60a3      	str	r3, [r4, #8]
 800bbd6:	6823      	ldr	r3, [r4, #0]
 800bbd8:	1c5a      	adds	r2, r3, #1
 800bbda:	6022      	str	r2, [r4, #0]
 800bbdc:	701e      	strb	r6, [r3, #0]
 800bbde:	6962      	ldr	r2, [r4, #20]
 800bbe0:	1c43      	adds	r3, r0, #1
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d004      	beq.n	800bbf0 <__swbuf_r+0x6e>
 800bbe6:	89a3      	ldrh	r3, [r4, #12]
 800bbe8:	07db      	lsls	r3, r3, #31
 800bbea:	d5e1      	bpl.n	800bbb0 <__swbuf_r+0x2e>
 800bbec:	2e0a      	cmp	r6, #10
 800bbee:	d1df      	bne.n	800bbb0 <__swbuf_r+0x2e>
 800bbf0:	4621      	mov	r1, r4
 800bbf2:	4628      	mov	r0, r5
 800bbf4:	f001 ff2c 	bl	800da50 <_fflush_r>
 800bbf8:	2800      	cmp	r0, #0
 800bbfa:	d0d9      	beq.n	800bbb0 <__swbuf_r+0x2e>
 800bbfc:	e7d6      	b.n	800bbac <__swbuf_r+0x2a>
	...

0800bc00 <__swsetup_r>:
 800bc00:	b538      	push	{r3, r4, r5, lr}
 800bc02:	4b29      	ldr	r3, [pc, #164]	@ (800bca8 <__swsetup_r+0xa8>)
 800bc04:	4605      	mov	r5, r0
 800bc06:	6818      	ldr	r0, [r3, #0]
 800bc08:	460c      	mov	r4, r1
 800bc0a:	b118      	cbz	r0, 800bc14 <__swsetup_r+0x14>
 800bc0c:	6a03      	ldr	r3, [r0, #32]
 800bc0e:	b90b      	cbnz	r3, 800bc14 <__swsetup_r+0x14>
 800bc10:	f7ff fe9a 	bl	800b948 <__sinit>
 800bc14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc18:	0719      	lsls	r1, r3, #28
 800bc1a:	d422      	bmi.n	800bc62 <__swsetup_r+0x62>
 800bc1c:	06da      	lsls	r2, r3, #27
 800bc1e:	d407      	bmi.n	800bc30 <__swsetup_r+0x30>
 800bc20:	2209      	movs	r2, #9
 800bc22:	602a      	str	r2, [r5, #0]
 800bc24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc28:	81a3      	strh	r3, [r4, #12]
 800bc2a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bc2e:	e033      	b.n	800bc98 <__swsetup_r+0x98>
 800bc30:	0758      	lsls	r0, r3, #29
 800bc32:	d512      	bpl.n	800bc5a <__swsetup_r+0x5a>
 800bc34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bc36:	b141      	cbz	r1, 800bc4a <__swsetup_r+0x4a>
 800bc38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bc3c:	4299      	cmp	r1, r3
 800bc3e:	d002      	beq.n	800bc46 <__swsetup_r+0x46>
 800bc40:	4628      	mov	r0, r5
 800bc42:	f000 ff65 	bl	800cb10 <_free_r>
 800bc46:	2300      	movs	r3, #0
 800bc48:	6363      	str	r3, [r4, #52]	@ 0x34
 800bc4a:	89a3      	ldrh	r3, [r4, #12]
 800bc4c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bc50:	81a3      	strh	r3, [r4, #12]
 800bc52:	2300      	movs	r3, #0
 800bc54:	6063      	str	r3, [r4, #4]
 800bc56:	6923      	ldr	r3, [r4, #16]
 800bc58:	6023      	str	r3, [r4, #0]
 800bc5a:	89a3      	ldrh	r3, [r4, #12]
 800bc5c:	f043 0308 	orr.w	r3, r3, #8
 800bc60:	81a3      	strh	r3, [r4, #12]
 800bc62:	6923      	ldr	r3, [r4, #16]
 800bc64:	b94b      	cbnz	r3, 800bc7a <__swsetup_r+0x7a>
 800bc66:	89a3      	ldrh	r3, [r4, #12]
 800bc68:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bc6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc70:	d003      	beq.n	800bc7a <__swsetup_r+0x7a>
 800bc72:	4621      	mov	r1, r4
 800bc74:	4628      	mov	r0, r5
 800bc76:	f001 ff39 	bl	800daec <__smakebuf_r>
 800bc7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc7e:	f013 0201 	ands.w	r2, r3, #1
 800bc82:	d00a      	beq.n	800bc9a <__swsetup_r+0x9a>
 800bc84:	2200      	movs	r2, #0
 800bc86:	60a2      	str	r2, [r4, #8]
 800bc88:	6962      	ldr	r2, [r4, #20]
 800bc8a:	4252      	negs	r2, r2
 800bc8c:	61a2      	str	r2, [r4, #24]
 800bc8e:	6922      	ldr	r2, [r4, #16]
 800bc90:	b942      	cbnz	r2, 800bca4 <__swsetup_r+0xa4>
 800bc92:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bc96:	d1c5      	bne.n	800bc24 <__swsetup_r+0x24>
 800bc98:	bd38      	pop	{r3, r4, r5, pc}
 800bc9a:	0799      	lsls	r1, r3, #30
 800bc9c:	bf58      	it	pl
 800bc9e:	6962      	ldrpl	r2, [r4, #20]
 800bca0:	60a2      	str	r2, [r4, #8]
 800bca2:	e7f4      	b.n	800bc8e <__swsetup_r+0x8e>
 800bca4:	2000      	movs	r0, #0
 800bca6:	e7f7      	b.n	800bc98 <__swsetup_r+0x98>
 800bca8:	20000038 	.word	0x20000038

0800bcac <memset>:
 800bcac:	4402      	add	r2, r0
 800bcae:	4603      	mov	r3, r0
 800bcb0:	4293      	cmp	r3, r2
 800bcb2:	d100      	bne.n	800bcb6 <memset+0xa>
 800bcb4:	4770      	bx	lr
 800bcb6:	f803 1b01 	strb.w	r1, [r3], #1
 800bcba:	e7f9      	b.n	800bcb0 <memset+0x4>

0800bcbc <_localeconv_r>:
 800bcbc:	4800      	ldr	r0, [pc, #0]	@ (800bcc0 <_localeconv_r+0x4>)
 800bcbe:	4770      	bx	lr
 800bcc0:	20000178 	.word	0x20000178

0800bcc4 <_close_r>:
 800bcc4:	b538      	push	{r3, r4, r5, lr}
 800bcc6:	4d06      	ldr	r5, [pc, #24]	@ (800bce0 <_close_r+0x1c>)
 800bcc8:	2300      	movs	r3, #0
 800bcca:	4604      	mov	r4, r0
 800bccc:	4608      	mov	r0, r1
 800bcce:	602b      	str	r3, [r5, #0]
 800bcd0:	f7f6 ff14 	bl	8002afc <_close>
 800bcd4:	1c43      	adds	r3, r0, #1
 800bcd6:	d102      	bne.n	800bcde <_close_r+0x1a>
 800bcd8:	682b      	ldr	r3, [r5, #0]
 800bcda:	b103      	cbz	r3, 800bcde <_close_r+0x1a>
 800bcdc:	6023      	str	r3, [r4, #0]
 800bcde:	bd38      	pop	{r3, r4, r5, pc}
 800bce0:	2000507c 	.word	0x2000507c

0800bce4 <_reclaim_reent>:
 800bce4:	4b29      	ldr	r3, [pc, #164]	@ (800bd8c <_reclaim_reent+0xa8>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	4283      	cmp	r3, r0
 800bcea:	b570      	push	{r4, r5, r6, lr}
 800bcec:	4604      	mov	r4, r0
 800bcee:	d04b      	beq.n	800bd88 <_reclaim_reent+0xa4>
 800bcf0:	69c3      	ldr	r3, [r0, #28]
 800bcf2:	b1ab      	cbz	r3, 800bd20 <_reclaim_reent+0x3c>
 800bcf4:	68db      	ldr	r3, [r3, #12]
 800bcf6:	b16b      	cbz	r3, 800bd14 <_reclaim_reent+0x30>
 800bcf8:	2500      	movs	r5, #0
 800bcfa:	69e3      	ldr	r3, [r4, #28]
 800bcfc:	68db      	ldr	r3, [r3, #12]
 800bcfe:	5959      	ldr	r1, [r3, r5]
 800bd00:	2900      	cmp	r1, #0
 800bd02:	d13b      	bne.n	800bd7c <_reclaim_reent+0x98>
 800bd04:	3504      	adds	r5, #4
 800bd06:	2d80      	cmp	r5, #128	@ 0x80
 800bd08:	d1f7      	bne.n	800bcfa <_reclaim_reent+0x16>
 800bd0a:	69e3      	ldr	r3, [r4, #28]
 800bd0c:	4620      	mov	r0, r4
 800bd0e:	68d9      	ldr	r1, [r3, #12]
 800bd10:	f000 fefe 	bl	800cb10 <_free_r>
 800bd14:	69e3      	ldr	r3, [r4, #28]
 800bd16:	6819      	ldr	r1, [r3, #0]
 800bd18:	b111      	cbz	r1, 800bd20 <_reclaim_reent+0x3c>
 800bd1a:	4620      	mov	r0, r4
 800bd1c:	f000 fef8 	bl	800cb10 <_free_r>
 800bd20:	6961      	ldr	r1, [r4, #20]
 800bd22:	b111      	cbz	r1, 800bd2a <_reclaim_reent+0x46>
 800bd24:	4620      	mov	r0, r4
 800bd26:	f000 fef3 	bl	800cb10 <_free_r>
 800bd2a:	69e1      	ldr	r1, [r4, #28]
 800bd2c:	b111      	cbz	r1, 800bd34 <_reclaim_reent+0x50>
 800bd2e:	4620      	mov	r0, r4
 800bd30:	f000 feee 	bl	800cb10 <_free_r>
 800bd34:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800bd36:	b111      	cbz	r1, 800bd3e <_reclaim_reent+0x5a>
 800bd38:	4620      	mov	r0, r4
 800bd3a:	f000 fee9 	bl	800cb10 <_free_r>
 800bd3e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd40:	b111      	cbz	r1, 800bd48 <_reclaim_reent+0x64>
 800bd42:	4620      	mov	r0, r4
 800bd44:	f000 fee4 	bl	800cb10 <_free_r>
 800bd48:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800bd4a:	b111      	cbz	r1, 800bd52 <_reclaim_reent+0x6e>
 800bd4c:	4620      	mov	r0, r4
 800bd4e:	f000 fedf 	bl	800cb10 <_free_r>
 800bd52:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800bd54:	b111      	cbz	r1, 800bd5c <_reclaim_reent+0x78>
 800bd56:	4620      	mov	r0, r4
 800bd58:	f000 feda 	bl	800cb10 <_free_r>
 800bd5c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800bd5e:	b111      	cbz	r1, 800bd66 <_reclaim_reent+0x82>
 800bd60:	4620      	mov	r0, r4
 800bd62:	f000 fed5 	bl	800cb10 <_free_r>
 800bd66:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800bd68:	b111      	cbz	r1, 800bd70 <_reclaim_reent+0x8c>
 800bd6a:	4620      	mov	r0, r4
 800bd6c:	f000 fed0 	bl	800cb10 <_free_r>
 800bd70:	6a23      	ldr	r3, [r4, #32]
 800bd72:	b14b      	cbz	r3, 800bd88 <_reclaim_reent+0xa4>
 800bd74:	4620      	mov	r0, r4
 800bd76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bd7a:	4718      	bx	r3
 800bd7c:	680e      	ldr	r6, [r1, #0]
 800bd7e:	4620      	mov	r0, r4
 800bd80:	f000 fec6 	bl	800cb10 <_free_r>
 800bd84:	4631      	mov	r1, r6
 800bd86:	e7bb      	b.n	800bd00 <_reclaim_reent+0x1c>
 800bd88:	bd70      	pop	{r4, r5, r6, pc}
 800bd8a:	bf00      	nop
 800bd8c:	20000038 	.word	0x20000038

0800bd90 <_lseek_r>:
 800bd90:	b538      	push	{r3, r4, r5, lr}
 800bd92:	4d07      	ldr	r5, [pc, #28]	@ (800bdb0 <_lseek_r+0x20>)
 800bd94:	4604      	mov	r4, r0
 800bd96:	4608      	mov	r0, r1
 800bd98:	4611      	mov	r1, r2
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	602a      	str	r2, [r5, #0]
 800bd9e:	461a      	mov	r2, r3
 800bda0:	f7f6 fed3 	bl	8002b4a <_lseek>
 800bda4:	1c43      	adds	r3, r0, #1
 800bda6:	d102      	bne.n	800bdae <_lseek_r+0x1e>
 800bda8:	682b      	ldr	r3, [r5, #0]
 800bdaa:	b103      	cbz	r3, 800bdae <_lseek_r+0x1e>
 800bdac:	6023      	str	r3, [r4, #0]
 800bdae:	bd38      	pop	{r3, r4, r5, pc}
 800bdb0:	2000507c 	.word	0x2000507c

0800bdb4 <_read_r>:
 800bdb4:	b538      	push	{r3, r4, r5, lr}
 800bdb6:	4d07      	ldr	r5, [pc, #28]	@ (800bdd4 <_read_r+0x20>)
 800bdb8:	4604      	mov	r4, r0
 800bdba:	4608      	mov	r0, r1
 800bdbc:	4611      	mov	r1, r2
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	602a      	str	r2, [r5, #0]
 800bdc2:	461a      	mov	r2, r3
 800bdc4:	f7f6 fe61 	bl	8002a8a <_read>
 800bdc8:	1c43      	adds	r3, r0, #1
 800bdca:	d102      	bne.n	800bdd2 <_read_r+0x1e>
 800bdcc:	682b      	ldr	r3, [r5, #0]
 800bdce:	b103      	cbz	r3, 800bdd2 <_read_r+0x1e>
 800bdd0:	6023      	str	r3, [r4, #0]
 800bdd2:	bd38      	pop	{r3, r4, r5, pc}
 800bdd4:	2000507c 	.word	0x2000507c

0800bdd8 <_write_r>:
 800bdd8:	b538      	push	{r3, r4, r5, lr}
 800bdda:	4d07      	ldr	r5, [pc, #28]	@ (800bdf8 <_write_r+0x20>)
 800bddc:	4604      	mov	r4, r0
 800bdde:	4608      	mov	r0, r1
 800bde0:	4611      	mov	r1, r2
 800bde2:	2200      	movs	r2, #0
 800bde4:	602a      	str	r2, [r5, #0]
 800bde6:	461a      	mov	r2, r3
 800bde8:	f7f6 fe6c 	bl	8002ac4 <_write>
 800bdec:	1c43      	adds	r3, r0, #1
 800bdee:	d102      	bne.n	800bdf6 <_write_r+0x1e>
 800bdf0:	682b      	ldr	r3, [r5, #0]
 800bdf2:	b103      	cbz	r3, 800bdf6 <_write_r+0x1e>
 800bdf4:	6023      	str	r3, [r4, #0]
 800bdf6:	bd38      	pop	{r3, r4, r5, pc}
 800bdf8:	2000507c 	.word	0x2000507c

0800bdfc <__errno>:
 800bdfc:	4b01      	ldr	r3, [pc, #4]	@ (800be04 <__errno+0x8>)
 800bdfe:	6818      	ldr	r0, [r3, #0]
 800be00:	4770      	bx	lr
 800be02:	bf00      	nop
 800be04:	20000038 	.word	0x20000038

0800be08 <__libc_init_array>:
 800be08:	b570      	push	{r4, r5, r6, lr}
 800be0a:	4d0d      	ldr	r5, [pc, #52]	@ (800be40 <__libc_init_array+0x38>)
 800be0c:	4c0d      	ldr	r4, [pc, #52]	@ (800be44 <__libc_init_array+0x3c>)
 800be0e:	1b64      	subs	r4, r4, r5
 800be10:	10a4      	asrs	r4, r4, #2
 800be12:	2600      	movs	r6, #0
 800be14:	42a6      	cmp	r6, r4
 800be16:	d109      	bne.n	800be2c <__libc_init_array+0x24>
 800be18:	4d0b      	ldr	r5, [pc, #44]	@ (800be48 <__libc_init_array+0x40>)
 800be1a:	4c0c      	ldr	r4, [pc, #48]	@ (800be4c <__libc_init_array+0x44>)
 800be1c:	f001 ffd4 	bl	800ddc8 <_init>
 800be20:	1b64      	subs	r4, r4, r5
 800be22:	10a4      	asrs	r4, r4, #2
 800be24:	2600      	movs	r6, #0
 800be26:	42a6      	cmp	r6, r4
 800be28:	d105      	bne.n	800be36 <__libc_init_array+0x2e>
 800be2a:	bd70      	pop	{r4, r5, r6, pc}
 800be2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800be30:	4798      	blx	r3
 800be32:	3601      	adds	r6, #1
 800be34:	e7ee      	b.n	800be14 <__libc_init_array+0xc>
 800be36:	f855 3b04 	ldr.w	r3, [r5], #4
 800be3a:	4798      	blx	r3
 800be3c:	3601      	adds	r6, #1
 800be3e:	e7f2      	b.n	800be26 <__libc_init_array+0x1e>
 800be40:	0800e688 	.word	0x0800e688
 800be44:	0800e688 	.word	0x0800e688
 800be48:	0800e688 	.word	0x0800e688
 800be4c:	0800e68c 	.word	0x0800e68c

0800be50 <__retarget_lock_init_recursive>:
 800be50:	4770      	bx	lr

0800be52 <__retarget_lock_acquire_recursive>:
 800be52:	4770      	bx	lr

0800be54 <__retarget_lock_release_recursive>:
 800be54:	4770      	bx	lr

0800be56 <memcpy>:
 800be56:	440a      	add	r2, r1
 800be58:	4291      	cmp	r1, r2
 800be5a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800be5e:	d100      	bne.n	800be62 <memcpy+0xc>
 800be60:	4770      	bx	lr
 800be62:	b510      	push	{r4, lr}
 800be64:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be68:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be6c:	4291      	cmp	r1, r2
 800be6e:	d1f9      	bne.n	800be64 <memcpy+0xe>
 800be70:	bd10      	pop	{r4, pc}

0800be72 <quorem>:
 800be72:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be76:	6903      	ldr	r3, [r0, #16]
 800be78:	690c      	ldr	r4, [r1, #16]
 800be7a:	42a3      	cmp	r3, r4
 800be7c:	4607      	mov	r7, r0
 800be7e:	db7e      	blt.n	800bf7e <quorem+0x10c>
 800be80:	3c01      	subs	r4, #1
 800be82:	f101 0814 	add.w	r8, r1, #20
 800be86:	00a3      	lsls	r3, r4, #2
 800be88:	f100 0514 	add.w	r5, r0, #20
 800be8c:	9300      	str	r3, [sp, #0]
 800be8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800be92:	9301      	str	r3, [sp, #4]
 800be94:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800be98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be9c:	3301      	adds	r3, #1
 800be9e:	429a      	cmp	r2, r3
 800bea0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bea4:	fbb2 f6f3 	udiv	r6, r2, r3
 800bea8:	d32e      	bcc.n	800bf08 <quorem+0x96>
 800beaa:	f04f 0a00 	mov.w	sl, #0
 800beae:	46c4      	mov	ip, r8
 800beb0:	46ae      	mov	lr, r5
 800beb2:	46d3      	mov	fp, sl
 800beb4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800beb8:	b298      	uxth	r0, r3
 800beba:	fb06 a000 	mla	r0, r6, r0, sl
 800bebe:	0c02      	lsrs	r2, r0, #16
 800bec0:	0c1b      	lsrs	r3, r3, #16
 800bec2:	fb06 2303 	mla	r3, r6, r3, r2
 800bec6:	f8de 2000 	ldr.w	r2, [lr]
 800beca:	b280      	uxth	r0, r0
 800becc:	b292      	uxth	r2, r2
 800bece:	1a12      	subs	r2, r2, r0
 800bed0:	445a      	add	r2, fp
 800bed2:	f8de 0000 	ldr.w	r0, [lr]
 800bed6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800beda:	b29b      	uxth	r3, r3
 800bedc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bee0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bee4:	b292      	uxth	r2, r2
 800bee6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800beea:	45e1      	cmp	r9, ip
 800beec:	f84e 2b04 	str.w	r2, [lr], #4
 800bef0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bef4:	d2de      	bcs.n	800beb4 <quorem+0x42>
 800bef6:	9b00      	ldr	r3, [sp, #0]
 800bef8:	58eb      	ldr	r3, [r5, r3]
 800befa:	b92b      	cbnz	r3, 800bf08 <quorem+0x96>
 800befc:	9b01      	ldr	r3, [sp, #4]
 800befe:	3b04      	subs	r3, #4
 800bf00:	429d      	cmp	r5, r3
 800bf02:	461a      	mov	r2, r3
 800bf04:	d32f      	bcc.n	800bf66 <quorem+0xf4>
 800bf06:	613c      	str	r4, [r7, #16]
 800bf08:	4638      	mov	r0, r7
 800bf0a:	f001 f97b 	bl	800d204 <__mcmp>
 800bf0e:	2800      	cmp	r0, #0
 800bf10:	db25      	blt.n	800bf5e <quorem+0xec>
 800bf12:	4629      	mov	r1, r5
 800bf14:	2000      	movs	r0, #0
 800bf16:	f858 2b04 	ldr.w	r2, [r8], #4
 800bf1a:	f8d1 c000 	ldr.w	ip, [r1]
 800bf1e:	fa1f fe82 	uxth.w	lr, r2
 800bf22:	fa1f f38c 	uxth.w	r3, ip
 800bf26:	eba3 030e 	sub.w	r3, r3, lr
 800bf2a:	4403      	add	r3, r0
 800bf2c:	0c12      	lsrs	r2, r2, #16
 800bf2e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bf32:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bf36:	b29b      	uxth	r3, r3
 800bf38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf3c:	45c1      	cmp	r9, r8
 800bf3e:	f841 3b04 	str.w	r3, [r1], #4
 800bf42:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bf46:	d2e6      	bcs.n	800bf16 <quorem+0xa4>
 800bf48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bf4c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bf50:	b922      	cbnz	r2, 800bf5c <quorem+0xea>
 800bf52:	3b04      	subs	r3, #4
 800bf54:	429d      	cmp	r5, r3
 800bf56:	461a      	mov	r2, r3
 800bf58:	d30b      	bcc.n	800bf72 <quorem+0x100>
 800bf5a:	613c      	str	r4, [r7, #16]
 800bf5c:	3601      	adds	r6, #1
 800bf5e:	4630      	mov	r0, r6
 800bf60:	b003      	add	sp, #12
 800bf62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf66:	6812      	ldr	r2, [r2, #0]
 800bf68:	3b04      	subs	r3, #4
 800bf6a:	2a00      	cmp	r2, #0
 800bf6c:	d1cb      	bne.n	800bf06 <quorem+0x94>
 800bf6e:	3c01      	subs	r4, #1
 800bf70:	e7c6      	b.n	800bf00 <quorem+0x8e>
 800bf72:	6812      	ldr	r2, [r2, #0]
 800bf74:	3b04      	subs	r3, #4
 800bf76:	2a00      	cmp	r2, #0
 800bf78:	d1ef      	bne.n	800bf5a <quorem+0xe8>
 800bf7a:	3c01      	subs	r4, #1
 800bf7c:	e7ea      	b.n	800bf54 <quorem+0xe2>
 800bf7e:	2000      	movs	r0, #0
 800bf80:	e7ee      	b.n	800bf60 <quorem+0xee>
 800bf82:	0000      	movs	r0, r0
 800bf84:	0000      	movs	r0, r0
	...

0800bf88 <_dtoa_r>:
 800bf88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf8c:	69c7      	ldr	r7, [r0, #28]
 800bf8e:	b099      	sub	sp, #100	@ 0x64
 800bf90:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bf94:	ec55 4b10 	vmov	r4, r5, d0
 800bf98:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800bf9a:	9109      	str	r1, [sp, #36]	@ 0x24
 800bf9c:	4683      	mov	fp, r0
 800bf9e:	920e      	str	r2, [sp, #56]	@ 0x38
 800bfa0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bfa2:	b97f      	cbnz	r7, 800bfc4 <_dtoa_r+0x3c>
 800bfa4:	2010      	movs	r0, #16
 800bfa6:	f000 fdfd 	bl	800cba4 <malloc>
 800bfaa:	4602      	mov	r2, r0
 800bfac:	f8cb 001c 	str.w	r0, [fp, #28]
 800bfb0:	b920      	cbnz	r0, 800bfbc <_dtoa_r+0x34>
 800bfb2:	4ba7      	ldr	r3, [pc, #668]	@ (800c250 <_dtoa_r+0x2c8>)
 800bfb4:	21ef      	movs	r1, #239	@ 0xef
 800bfb6:	48a7      	ldr	r0, [pc, #668]	@ (800c254 <_dtoa_r+0x2cc>)
 800bfb8:	f001 fe20 	bl	800dbfc <__assert_func>
 800bfbc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bfc0:	6007      	str	r7, [r0, #0]
 800bfc2:	60c7      	str	r7, [r0, #12]
 800bfc4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bfc8:	6819      	ldr	r1, [r3, #0]
 800bfca:	b159      	cbz	r1, 800bfe4 <_dtoa_r+0x5c>
 800bfcc:	685a      	ldr	r2, [r3, #4]
 800bfce:	604a      	str	r2, [r1, #4]
 800bfd0:	2301      	movs	r3, #1
 800bfd2:	4093      	lsls	r3, r2
 800bfd4:	608b      	str	r3, [r1, #8]
 800bfd6:	4658      	mov	r0, fp
 800bfd8:	f000 feda 	bl	800cd90 <_Bfree>
 800bfdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	601a      	str	r2, [r3, #0]
 800bfe4:	1e2b      	subs	r3, r5, #0
 800bfe6:	bfb9      	ittee	lt
 800bfe8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bfec:	9303      	strlt	r3, [sp, #12]
 800bfee:	2300      	movge	r3, #0
 800bff0:	6033      	strge	r3, [r6, #0]
 800bff2:	9f03      	ldr	r7, [sp, #12]
 800bff4:	4b98      	ldr	r3, [pc, #608]	@ (800c258 <_dtoa_r+0x2d0>)
 800bff6:	bfbc      	itt	lt
 800bff8:	2201      	movlt	r2, #1
 800bffa:	6032      	strlt	r2, [r6, #0]
 800bffc:	43bb      	bics	r3, r7
 800bffe:	d112      	bne.n	800c026 <_dtoa_r+0x9e>
 800c000:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c002:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c006:	6013      	str	r3, [r2, #0]
 800c008:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c00c:	4323      	orrs	r3, r4
 800c00e:	f000 854d 	beq.w	800caac <_dtoa_r+0xb24>
 800c012:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c014:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c26c <_dtoa_r+0x2e4>
 800c018:	2b00      	cmp	r3, #0
 800c01a:	f000 854f 	beq.w	800cabc <_dtoa_r+0xb34>
 800c01e:	f10a 0303 	add.w	r3, sl, #3
 800c022:	f000 bd49 	b.w	800cab8 <_dtoa_r+0xb30>
 800c026:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c02a:	2200      	movs	r2, #0
 800c02c:	ec51 0b17 	vmov	r0, r1, d7
 800c030:	2300      	movs	r3, #0
 800c032:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c036:	f7f4 fd4f 	bl	8000ad8 <__aeabi_dcmpeq>
 800c03a:	4680      	mov	r8, r0
 800c03c:	b158      	cbz	r0, 800c056 <_dtoa_r+0xce>
 800c03e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c040:	2301      	movs	r3, #1
 800c042:	6013      	str	r3, [r2, #0]
 800c044:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c046:	b113      	cbz	r3, 800c04e <_dtoa_r+0xc6>
 800c048:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c04a:	4b84      	ldr	r3, [pc, #528]	@ (800c25c <_dtoa_r+0x2d4>)
 800c04c:	6013      	str	r3, [r2, #0]
 800c04e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c270 <_dtoa_r+0x2e8>
 800c052:	f000 bd33 	b.w	800cabc <_dtoa_r+0xb34>
 800c056:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c05a:	aa16      	add	r2, sp, #88	@ 0x58
 800c05c:	a917      	add	r1, sp, #92	@ 0x5c
 800c05e:	4658      	mov	r0, fp
 800c060:	f001 f980 	bl	800d364 <__d2b>
 800c064:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c068:	4681      	mov	r9, r0
 800c06a:	2e00      	cmp	r6, #0
 800c06c:	d077      	beq.n	800c15e <_dtoa_r+0x1d6>
 800c06e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c070:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c074:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c078:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c07c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c080:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c084:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c088:	4619      	mov	r1, r3
 800c08a:	2200      	movs	r2, #0
 800c08c:	4b74      	ldr	r3, [pc, #464]	@ (800c260 <_dtoa_r+0x2d8>)
 800c08e:	f7f4 f903 	bl	8000298 <__aeabi_dsub>
 800c092:	a369      	add	r3, pc, #420	@ (adr r3, 800c238 <_dtoa_r+0x2b0>)
 800c094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c098:	f7f4 fab6 	bl	8000608 <__aeabi_dmul>
 800c09c:	a368      	add	r3, pc, #416	@ (adr r3, 800c240 <_dtoa_r+0x2b8>)
 800c09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a2:	f7f4 f8fb 	bl	800029c <__adddf3>
 800c0a6:	4604      	mov	r4, r0
 800c0a8:	4630      	mov	r0, r6
 800c0aa:	460d      	mov	r5, r1
 800c0ac:	f7f4 fa42 	bl	8000534 <__aeabi_i2d>
 800c0b0:	a365      	add	r3, pc, #404	@ (adr r3, 800c248 <_dtoa_r+0x2c0>)
 800c0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b6:	f7f4 faa7 	bl	8000608 <__aeabi_dmul>
 800c0ba:	4602      	mov	r2, r0
 800c0bc:	460b      	mov	r3, r1
 800c0be:	4620      	mov	r0, r4
 800c0c0:	4629      	mov	r1, r5
 800c0c2:	f7f4 f8eb 	bl	800029c <__adddf3>
 800c0c6:	4604      	mov	r4, r0
 800c0c8:	460d      	mov	r5, r1
 800c0ca:	f7f4 fd4d 	bl	8000b68 <__aeabi_d2iz>
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	4607      	mov	r7, r0
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	4620      	mov	r0, r4
 800c0d6:	4629      	mov	r1, r5
 800c0d8:	f7f4 fd08 	bl	8000aec <__aeabi_dcmplt>
 800c0dc:	b140      	cbz	r0, 800c0f0 <_dtoa_r+0x168>
 800c0de:	4638      	mov	r0, r7
 800c0e0:	f7f4 fa28 	bl	8000534 <__aeabi_i2d>
 800c0e4:	4622      	mov	r2, r4
 800c0e6:	462b      	mov	r3, r5
 800c0e8:	f7f4 fcf6 	bl	8000ad8 <__aeabi_dcmpeq>
 800c0ec:	b900      	cbnz	r0, 800c0f0 <_dtoa_r+0x168>
 800c0ee:	3f01      	subs	r7, #1
 800c0f0:	2f16      	cmp	r7, #22
 800c0f2:	d851      	bhi.n	800c198 <_dtoa_r+0x210>
 800c0f4:	4b5b      	ldr	r3, [pc, #364]	@ (800c264 <_dtoa_r+0x2dc>)
 800c0f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c102:	f7f4 fcf3 	bl	8000aec <__aeabi_dcmplt>
 800c106:	2800      	cmp	r0, #0
 800c108:	d048      	beq.n	800c19c <_dtoa_r+0x214>
 800c10a:	3f01      	subs	r7, #1
 800c10c:	2300      	movs	r3, #0
 800c10e:	9312      	str	r3, [sp, #72]	@ 0x48
 800c110:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c112:	1b9b      	subs	r3, r3, r6
 800c114:	1e5a      	subs	r2, r3, #1
 800c116:	bf44      	itt	mi
 800c118:	f1c3 0801 	rsbmi	r8, r3, #1
 800c11c:	2300      	movmi	r3, #0
 800c11e:	9208      	str	r2, [sp, #32]
 800c120:	bf54      	ite	pl
 800c122:	f04f 0800 	movpl.w	r8, #0
 800c126:	9308      	strmi	r3, [sp, #32]
 800c128:	2f00      	cmp	r7, #0
 800c12a:	db39      	blt.n	800c1a0 <_dtoa_r+0x218>
 800c12c:	9b08      	ldr	r3, [sp, #32]
 800c12e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c130:	443b      	add	r3, r7
 800c132:	9308      	str	r3, [sp, #32]
 800c134:	2300      	movs	r3, #0
 800c136:	930a      	str	r3, [sp, #40]	@ 0x28
 800c138:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c13a:	2b09      	cmp	r3, #9
 800c13c:	d864      	bhi.n	800c208 <_dtoa_r+0x280>
 800c13e:	2b05      	cmp	r3, #5
 800c140:	bfc4      	itt	gt
 800c142:	3b04      	subgt	r3, #4
 800c144:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c146:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c148:	f1a3 0302 	sub.w	r3, r3, #2
 800c14c:	bfcc      	ite	gt
 800c14e:	2400      	movgt	r4, #0
 800c150:	2401      	movle	r4, #1
 800c152:	2b03      	cmp	r3, #3
 800c154:	d863      	bhi.n	800c21e <_dtoa_r+0x296>
 800c156:	e8df f003 	tbb	[pc, r3]
 800c15a:	372a      	.short	0x372a
 800c15c:	5535      	.short	0x5535
 800c15e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c162:	441e      	add	r6, r3
 800c164:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c168:	2b20      	cmp	r3, #32
 800c16a:	bfc1      	itttt	gt
 800c16c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c170:	409f      	lslgt	r7, r3
 800c172:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c176:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c17a:	bfd6      	itet	le
 800c17c:	f1c3 0320 	rsble	r3, r3, #32
 800c180:	ea47 0003 	orrgt.w	r0, r7, r3
 800c184:	fa04 f003 	lslle.w	r0, r4, r3
 800c188:	f7f4 f9c4 	bl	8000514 <__aeabi_ui2d>
 800c18c:	2201      	movs	r2, #1
 800c18e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c192:	3e01      	subs	r6, #1
 800c194:	9214      	str	r2, [sp, #80]	@ 0x50
 800c196:	e777      	b.n	800c088 <_dtoa_r+0x100>
 800c198:	2301      	movs	r3, #1
 800c19a:	e7b8      	b.n	800c10e <_dtoa_r+0x186>
 800c19c:	9012      	str	r0, [sp, #72]	@ 0x48
 800c19e:	e7b7      	b.n	800c110 <_dtoa_r+0x188>
 800c1a0:	427b      	negs	r3, r7
 800c1a2:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	eba8 0807 	sub.w	r8, r8, r7
 800c1aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c1ac:	e7c4      	b.n	800c138 <_dtoa_r+0x1b0>
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c1b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	dc35      	bgt.n	800c224 <_dtoa_r+0x29c>
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	9300      	str	r3, [sp, #0]
 800c1bc:	9307      	str	r3, [sp, #28]
 800c1be:	461a      	mov	r2, r3
 800c1c0:	920e      	str	r2, [sp, #56]	@ 0x38
 800c1c2:	e00b      	b.n	800c1dc <_dtoa_r+0x254>
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	e7f3      	b.n	800c1b0 <_dtoa_r+0x228>
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c1cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1ce:	18fb      	adds	r3, r7, r3
 800c1d0:	9300      	str	r3, [sp, #0]
 800c1d2:	3301      	adds	r3, #1
 800c1d4:	2b01      	cmp	r3, #1
 800c1d6:	9307      	str	r3, [sp, #28]
 800c1d8:	bfb8      	it	lt
 800c1da:	2301      	movlt	r3, #1
 800c1dc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c1e0:	2100      	movs	r1, #0
 800c1e2:	2204      	movs	r2, #4
 800c1e4:	f102 0514 	add.w	r5, r2, #20
 800c1e8:	429d      	cmp	r5, r3
 800c1ea:	d91f      	bls.n	800c22c <_dtoa_r+0x2a4>
 800c1ec:	6041      	str	r1, [r0, #4]
 800c1ee:	4658      	mov	r0, fp
 800c1f0:	f000 fd8e 	bl	800cd10 <_Balloc>
 800c1f4:	4682      	mov	sl, r0
 800c1f6:	2800      	cmp	r0, #0
 800c1f8:	d13c      	bne.n	800c274 <_dtoa_r+0x2ec>
 800c1fa:	4b1b      	ldr	r3, [pc, #108]	@ (800c268 <_dtoa_r+0x2e0>)
 800c1fc:	4602      	mov	r2, r0
 800c1fe:	f240 11af 	movw	r1, #431	@ 0x1af
 800c202:	e6d8      	b.n	800bfb6 <_dtoa_r+0x2e>
 800c204:	2301      	movs	r3, #1
 800c206:	e7e0      	b.n	800c1ca <_dtoa_r+0x242>
 800c208:	2401      	movs	r4, #1
 800c20a:	2300      	movs	r3, #0
 800c20c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c20e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c210:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c214:	9300      	str	r3, [sp, #0]
 800c216:	9307      	str	r3, [sp, #28]
 800c218:	2200      	movs	r2, #0
 800c21a:	2312      	movs	r3, #18
 800c21c:	e7d0      	b.n	800c1c0 <_dtoa_r+0x238>
 800c21e:	2301      	movs	r3, #1
 800c220:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c222:	e7f5      	b.n	800c210 <_dtoa_r+0x288>
 800c224:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c226:	9300      	str	r3, [sp, #0]
 800c228:	9307      	str	r3, [sp, #28]
 800c22a:	e7d7      	b.n	800c1dc <_dtoa_r+0x254>
 800c22c:	3101      	adds	r1, #1
 800c22e:	0052      	lsls	r2, r2, #1
 800c230:	e7d8      	b.n	800c1e4 <_dtoa_r+0x25c>
 800c232:	bf00      	nop
 800c234:	f3af 8000 	nop.w
 800c238:	636f4361 	.word	0x636f4361
 800c23c:	3fd287a7 	.word	0x3fd287a7
 800c240:	8b60c8b3 	.word	0x8b60c8b3
 800c244:	3fc68a28 	.word	0x3fc68a28
 800c248:	509f79fb 	.word	0x509f79fb
 800c24c:	3fd34413 	.word	0x3fd34413
 800c250:	0800e34d 	.word	0x0800e34d
 800c254:	0800e364 	.word	0x0800e364
 800c258:	7ff00000 	.word	0x7ff00000
 800c25c:	0800e31d 	.word	0x0800e31d
 800c260:	3ff80000 	.word	0x3ff80000
 800c264:	0800e460 	.word	0x0800e460
 800c268:	0800e3bc 	.word	0x0800e3bc
 800c26c:	0800e349 	.word	0x0800e349
 800c270:	0800e31c 	.word	0x0800e31c
 800c274:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c278:	6018      	str	r0, [r3, #0]
 800c27a:	9b07      	ldr	r3, [sp, #28]
 800c27c:	2b0e      	cmp	r3, #14
 800c27e:	f200 80a4 	bhi.w	800c3ca <_dtoa_r+0x442>
 800c282:	2c00      	cmp	r4, #0
 800c284:	f000 80a1 	beq.w	800c3ca <_dtoa_r+0x442>
 800c288:	2f00      	cmp	r7, #0
 800c28a:	dd33      	ble.n	800c2f4 <_dtoa_r+0x36c>
 800c28c:	4bad      	ldr	r3, [pc, #692]	@ (800c544 <_dtoa_r+0x5bc>)
 800c28e:	f007 020f 	and.w	r2, r7, #15
 800c292:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c296:	ed93 7b00 	vldr	d7, [r3]
 800c29a:	05f8      	lsls	r0, r7, #23
 800c29c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c2a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c2a4:	d516      	bpl.n	800c2d4 <_dtoa_r+0x34c>
 800c2a6:	4ba8      	ldr	r3, [pc, #672]	@ (800c548 <_dtoa_r+0x5c0>)
 800c2a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c2ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c2b0:	f7f4 fad4 	bl	800085c <__aeabi_ddiv>
 800c2b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2b8:	f004 040f 	and.w	r4, r4, #15
 800c2bc:	2603      	movs	r6, #3
 800c2be:	4da2      	ldr	r5, [pc, #648]	@ (800c548 <_dtoa_r+0x5c0>)
 800c2c0:	b954      	cbnz	r4, 800c2d8 <_dtoa_r+0x350>
 800c2c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c2c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2ca:	f7f4 fac7 	bl	800085c <__aeabi_ddiv>
 800c2ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2d2:	e028      	b.n	800c326 <_dtoa_r+0x39e>
 800c2d4:	2602      	movs	r6, #2
 800c2d6:	e7f2      	b.n	800c2be <_dtoa_r+0x336>
 800c2d8:	07e1      	lsls	r1, r4, #31
 800c2da:	d508      	bpl.n	800c2ee <_dtoa_r+0x366>
 800c2dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c2e4:	f7f4 f990 	bl	8000608 <__aeabi_dmul>
 800c2e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c2ec:	3601      	adds	r6, #1
 800c2ee:	1064      	asrs	r4, r4, #1
 800c2f0:	3508      	adds	r5, #8
 800c2f2:	e7e5      	b.n	800c2c0 <_dtoa_r+0x338>
 800c2f4:	f000 80d2 	beq.w	800c49c <_dtoa_r+0x514>
 800c2f8:	427c      	negs	r4, r7
 800c2fa:	4b92      	ldr	r3, [pc, #584]	@ (800c544 <_dtoa_r+0x5bc>)
 800c2fc:	4d92      	ldr	r5, [pc, #584]	@ (800c548 <_dtoa_r+0x5c0>)
 800c2fe:	f004 020f 	and.w	r2, r4, #15
 800c302:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c30a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c30e:	f7f4 f97b 	bl	8000608 <__aeabi_dmul>
 800c312:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c316:	1124      	asrs	r4, r4, #4
 800c318:	2300      	movs	r3, #0
 800c31a:	2602      	movs	r6, #2
 800c31c:	2c00      	cmp	r4, #0
 800c31e:	f040 80b2 	bne.w	800c486 <_dtoa_r+0x4fe>
 800c322:	2b00      	cmp	r3, #0
 800c324:	d1d3      	bne.n	800c2ce <_dtoa_r+0x346>
 800c326:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c328:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	f000 80b7 	beq.w	800c4a0 <_dtoa_r+0x518>
 800c332:	4b86      	ldr	r3, [pc, #536]	@ (800c54c <_dtoa_r+0x5c4>)
 800c334:	2200      	movs	r2, #0
 800c336:	4620      	mov	r0, r4
 800c338:	4629      	mov	r1, r5
 800c33a:	f7f4 fbd7 	bl	8000aec <__aeabi_dcmplt>
 800c33e:	2800      	cmp	r0, #0
 800c340:	f000 80ae 	beq.w	800c4a0 <_dtoa_r+0x518>
 800c344:	9b07      	ldr	r3, [sp, #28]
 800c346:	2b00      	cmp	r3, #0
 800c348:	f000 80aa 	beq.w	800c4a0 <_dtoa_r+0x518>
 800c34c:	9b00      	ldr	r3, [sp, #0]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	dd37      	ble.n	800c3c2 <_dtoa_r+0x43a>
 800c352:	1e7b      	subs	r3, r7, #1
 800c354:	9304      	str	r3, [sp, #16]
 800c356:	4620      	mov	r0, r4
 800c358:	4b7d      	ldr	r3, [pc, #500]	@ (800c550 <_dtoa_r+0x5c8>)
 800c35a:	2200      	movs	r2, #0
 800c35c:	4629      	mov	r1, r5
 800c35e:	f7f4 f953 	bl	8000608 <__aeabi_dmul>
 800c362:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c366:	9c00      	ldr	r4, [sp, #0]
 800c368:	3601      	adds	r6, #1
 800c36a:	4630      	mov	r0, r6
 800c36c:	f7f4 f8e2 	bl	8000534 <__aeabi_i2d>
 800c370:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c374:	f7f4 f948 	bl	8000608 <__aeabi_dmul>
 800c378:	4b76      	ldr	r3, [pc, #472]	@ (800c554 <_dtoa_r+0x5cc>)
 800c37a:	2200      	movs	r2, #0
 800c37c:	f7f3 ff8e 	bl	800029c <__adddf3>
 800c380:	4605      	mov	r5, r0
 800c382:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c386:	2c00      	cmp	r4, #0
 800c388:	f040 808d 	bne.w	800c4a6 <_dtoa_r+0x51e>
 800c38c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c390:	4b71      	ldr	r3, [pc, #452]	@ (800c558 <_dtoa_r+0x5d0>)
 800c392:	2200      	movs	r2, #0
 800c394:	f7f3 ff80 	bl	8000298 <__aeabi_dsub>
 800c398:	4602      	mov	r2, r0
 800c39a:	460b      	mov	r3, r1
 800c39c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c3a0:	462a      	mov	r2, r5
 800c3a2:	4633      	mov	r3, r6
 800c3a4:	f7f4 fbc0 	bl	8000b28 <__aeabi_dcmpgt>
 800c3a8:	2800      	cmp	r0, #0
 800c3aa:	f040 828b 	bne.w	800c8c4 <_dtoa_r+0x93c>
 800c3ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3b2:	462a      	mov	r2, r5
 800c3b4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c3b8:	f7f4 fb98 	bl	8000aec <__aeabi_dcmplt>
 800c3bc:	2800      	cmp	r0, #0
 800c3be:	f040 8128 	bne.w	800c612 <_dtoa_r+0x68a>
 800c3c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c3c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c3ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	f2c0 815a 	blt.w	800c686 <_dtoa_r+0x6fe>
 800c3d2:	2f0e      	cmp	r7, #14
 800c3d4:	f300 8157 	bgt.w	800c686 <_dtoa_r+0x6fe>
 800c3d8:	4b5a      	ldr	r3, [pc, #360]	@ (800c544 <_dtoa_r+0x5bc>)
 800c3da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c3de:	ed93 7b00 	vldr	d7, [r3]
 800c3e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	ed8d 7b00 	vstr	d7, [sp]
 800c3ea:	da03      	bge.n	800c3f4 <_dtoa_r+0x46c>
 800c3ec:	9b07      	ldr	r3, [sp, #28]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	f340 8101 	ble.w	800c5f6 <_dtoa_r+0x66e>
 800c3f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c3f8:	4656      	mov	r6, sl
 800c3fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c3fe:	4620      	mov	r0, r4
 800c400:	4629      	mov	r1, r5
 800c402:	f7f4 fa2b 	bl	800085c <__aeabi_ddiv>
 800c406:	f7f4 fbaf 	bl	8000b68 <__aeabi_d2iz>
 800c40a:	4680      	mov	r8, r0
 800c40c:	f7f4 f892 	bl	8000534 <__aeabi_i2d>
 800c410:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c414:	f7f4 f8f8 	bl	8000608 <__aeabi_dmul>
 800c418:	4602      	mov	r2, r0
 800c41a:	460b      	mov	r3, r1
 800c41c:	4620      	mov	r0, r4
 800c41e:	4629      	mov	r1, r5
 800c420:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c424:	f7f3 ff38 	bl	8000298 <__aeabi_dsub>
 800c428:	f806 4b01 	strb.w	r4, [r6], #1
 800c42c:	9d07      	ldr	r5, [sp, #28]
 800c42e:	eba6 040a 	sub.w	r4, r6, sl
 800c432:	42a5      	cmp	r5, r4
 800c434:	4602      	mov	r2, r0
 800c436:	460b      	mov	r3, r1
 800c438:	f040 8117 	bne.w	800c66a <_dtoa_r+0x6e2>
 800c43c:	f7f3 ff2e 	bl	800029c <__adddf3>
 800c440:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c444:	4604      	mov	r4, r0
 800c446:	460d      	mov	r5, r1
 800c448:	f7f4 fb6e 	bl	8000b28 <__aeabi_dcmpgt>
 800c44c:	2800      	cmp	r0, #0
 800c44e:	f040 80f9 	bne.w	800c644 <_dtoa_r+0x6bc>
 800c452:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c456:	4620      	mov	r0, r4
 800c458:	4629      	mov	r1, r5
 800c45a:	f7f4 fb3d 	bl	8000ad8 <__aeabi_dcmpeq>
 800c45e:	b118      	cbz	r0, 800c468 <_dtoa_r+0x4e0>
 800c460:	f018 0f01 	tst.w	r8, #1
 800c464:	f040 80ee 	bne.w	800c644 <_dtoa_r+0x6bc>
 800c468:	4649      	mov	r1, r9
 800c46a:	4658      	mov	r0, fp
 800c46c:	f000 fc90 	bl	800cd90 <_Bfree>
 800c470:	2300      	movs	r3, #0
 800c472:	7033      	strb	r3, [r6, #0]
 800c474:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c476:	3701      	adds	r7, #1
 800c478:	601f      	str	r7, [r3, #0]
 800c47a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	f000 831d 	beq.w	800cabc <_dtoa_r+0xb34>
 800c482:	601e      	str	r6, [r3, #0]
 800c484:	e31a      	b.n	800cabc <_dtoa_r+0xb34>
 800c486:	07e2      	lsls	r2, r4, #31
 800c488:	d505      	bpl.n	800c496 <_dtoa_r+0x50e>
 800c48a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c48e:	f7f4 f8bb 	bl	8000608 <__aeabi_dmul>
 800c492:	3601      	adds	r6, #1
 800c494:	2301      	movs	r3, #1
 800c496:	1064      	asrs	r4, r4, #1
 800c498:	3508      	adds	r5, #8
 800c49a:	e73f      	b.n	800c31c <_dtoa_r+0x394>
 800c49c:	2602      	movs	r6, #2
 800c49e:	e742      	b.n	800c326 <_dtoa_r+0x39e>
 800c4a0:	9c07      	ldr	r4, [sp, #28]
 800c4a2:	9704      	str	r7, [sp, #16]
 800c4a4:	e761      	b.n	800c36a <_dtoa_r+0x3e2>
 800c4a6:	4b27      	ldr	r3, [pc, #156]	@ (800c544 <_dtoa_r+0x5bc>)
 800c4a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c4aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c4ae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c4b2:	4454      	add	r4, sl
 800c4b4:	2900      	cmp	r1, #0
 800c4b6:	d053      	beq.n	800c560 <_dtoa_r+0x5d8>
 800c4b8:	4928      	ldr	r1, [pc, #160]	@ (800c55c <_dtoa_r+0x5d4>)
 800c4ba:	2000      	movs	r0, #0
 800c4bc:	f7f4 f9ce 	bl	800085c <__aeabi_ddiv>
 800c4c0:	4633      	mov	r3, r6
 800c4c2:	462a      	mov	r2, r5
 800c4c4:	f7f3 fee8 	bl	8000298 <__aeabi_dsub>
 800c4c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c4cc:	4656      	mov	r6, sl
 800c4ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4d2:	f7f4 fb49 	bl	8000b68 <__aeabi_d2iz>
 800c4d6:	4605      	mov	r5, r0
 800c4d8:	f7f4 f82c 	bl	8000534 <__aeabi_i2d>
 800c4dc:	4602      	mov	r2, r0
 800c4de:	460b      	mov	r3, r1
 800c4e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4e4:	f7f3 fed8 	bl	8000298 <__aeabi_dsub>
 800c4e8:	3530      	adds	r5, #48	@ 0x30
 800c4ea:	4602      	mov	r2, r0
 800c4ec:	460b      	mov	r3, r1
 800c4ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c4f2:	f806 5b01 	strb.w	r5, [r6], #1
 800c4f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c4fa:	f7f4 faf7 	bl	8000aec <__aeabi_dcmplt>
 800c4fe:	2800      	cmp	r0, #0
 800c500:	d171      	bne.n	800c5e6 <_dtoa_r+0x65e>
 800c502:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c506:	4911      	ldr	r1, [pc, #68]	@ (800c54c <_dtoa_r+0x5c4>)
 800c508:	2000      	movs	r0, #0
 800c50a:	f7f3 fec5 	bl	8000298 <__aeabi_dsub>
 800c50e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c512:	f7f4 faeb 	bl	8000aec <__aeabi_dcmplt>
 800c516:	2800      	cmp	r0, #0
 800c518:	f040 8095 	bne.w	800c646 <_dtoa_r+0x6be>
 800c51c:	42a6      	cmp	r6, r4
 800c51e:	f43f af50 	beq.w	800c3c2 <_dtoa_r+0x43a>
 800c522:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c526:	4b0a      	ldr	r3, [pc, #40]	@ (800c550 <_dtoa_r+0x5c8>)
 800c528:	2200      	movs	r2, #0
 800c52a:	f7f4 f86d 	bl	8000608 <__aeabi_dmul>
 800c52e:	4b08      	ldr	r3, [pc, #32]	@ (800c550 <_dtoa_r+0x5c8>)
 800c530:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c534:	2200      	movs	r2, #0
 800c536:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c53a:	f7f4 f865 	bl	8000608 <__aeabi_dmul>
 800c53e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c542:	e7c4      	b.n	800c4ce <_dtoa_r+0x546>
 800c544:	0800e460 	.word	0x0800e460
 800c548:	0800e438 	.word	0x0800e438
 800c54c:	3ff00000 	.word	0x3ff00000
 800c550:	40240000 	.word	0x40240000
 800c554:	401c0000 	.word	0x401c0000
 800c558:	40140000 	.word	0x40140000
 800c55c:	3fe00000 	.word	0x3fe00000
 800c560:	4631      	mov	r1, r6
 800c562:	4628      	mov	r0, r5
 800c564:	f7f4 f850 	bl	8000608 <__aeabi_dmul>
 800c568:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c56c:	9415      	str	r4, [sp, #84]	@ 0x54
 800c56e:	4656      	mov	r6, sl
 800c570:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c574:	f7f4 faf8 	bl	8000b68 <__aeabi_d2iz>
 800c578:	4605      	mov	r5, r0
 800c57a:	f7f3 ffdb 	bl	8000534 <__aeabi_i2d>
 800c57e:	4602      	mov	r2, r0
 800c580:	460b      	mov	r3, r1
 800c582:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c586:	f7f3 fe87 	bl	8000298 <__aeabi_dsub>
 800c58a:	3530      	adds	r5, #48	@ 0x30
 800c58c:	f806 5b01 	strb.w	r5, [r6], #1
 800c590:	4602      	mov	r2, r0
 800c592:	460b      	mov	r3, r1
 800c594:	42a6      	cmp	r6, r4
 800c596:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c59a:	f04f 0200 	mov.w	r2, #0
 800c59e:	d124      	bne.n	800c5ea <_dtoa_r+0x662>
 800c5a0:	4bac      	ldr	r3, [pc, #688]	@ (800c854 <_dtoa_r+0x8cc>)
 800c5a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c5a6:	f7f3 fe79 	bl	800029c <__adddf3>
 800c5aa:	4602      	mov	r2, r0
 800c5ac:	460b      	mov	r3, r1
 800c5ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5b2:	f7f4 fab9 	bl	8000b28 <__aeabi_dcmpgt>
 800c5b6:	2800      	cmp	r0, #0
 800c5b8:	d145      	bne.n	800c646 <_dtoa_r+0x6be>
 800c5ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c5be:	49a5      	ldr	r1, [pc, #660]	@ (800c854 <_dtoa_r+0x8cc>)
 800c5c0:	2000      	movs	r0, #0
 800c5c2:	f7f3 fe69 	bl	8000298 <__aeabi_dsub>
 800c5c6:	4602      	mov	r2, r0
 800c5c8:	460b      	mov	r3, r1
 800c5ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5ce:	f7f4 fa8d 	bl	8000aec <__aeabi_dcmplt>
 800c5d2:	2800      	cmp	r0, #0
 800c5d4:	f43f aef5 	beq.w	800c3c2 <_dtoa_r+0x43a>
 800c5d8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c5da:	1e73      	subs	r3, r6, #1
 800c5dc:	9315      	str	r3, [sp, #84]	@ 0x54
 800c5de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c5e2:	2b30      	cmp	r3, #48	@ 0x30
 800c5e4:	d0f8      	beq.n	800c5d8 <_dtoa_r+0x650>
 800c5e6:	9f04      	ldr	r7, [sp, #16]
 800c5e8:	e73e      	b.n	800c468 <_dtoa_r+0x4e0>
 800c5ea:	4b9b      	ldr	r3, [pc, #620]	@ (800c858 <_dtoa_r+0x8d0>)
 800c5ec:	f7f4 f80c 	bl	8000608 <__aeabi_dmul>
 800c5f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5f4:	e7bc      	b.n	800c570 <_dtoa_r+0x5e8>
 800c5f6:	d10c      	bne.n	800c612 <_dtoa_r+0x68a>
 800c5f8:	4b98      	ldr	r3, [pc, #608]	@ (800c85c <_dtoa_r+0x8d4>)
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c600:	f7f4 f802 	bl	8000608 <__aeabi_dmul>
 800c604:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c608:	f7f4 fa84 	bl	8000b14 <__aeabi_dcmpge>
 800c60c:	2800      	cmp	r0, #0
 800c60e:	f000 8157 	beq.w	800c8c0 <_dtoa_r+0x938>
 800c612:	2400      	movs	r4, #0
 800c614:	4625      	mov	r5, r4
 800c616:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c618:	43db      	mvns	r3, r3
 800c61a:	9304      	str	r3, [sp, #16]
 800c61c:	4656      	mov	r6, sl
 800c61e:	2700      	movs	r7, #0
 800c620:	4621      	mov	r1, r4
 800c622:	4658      	mov	r0, fp
 800c624:	f000 fbb4 	bl	800cd90 <_Bfree>
 800c628:	2d00      	cmp	r5, #0
 800c62a:	d0dc      	beq.n	800c5e6 <_dtoa_r+0x65e>
 800c62c:	b12f      	cbz	r7, 800c63a <_dtoa_r+0x6b2>
 800c62e:	42af      	cmp	r7, r5
 800c630:	d003      	beq.n	800c63a <_dtoa_r+0x6b2>
 800c632:	4639      	mov	r1, r7
 800c634:	4658      	mov	r0, fp
 800c636:	f000 fbab 	bl	800cd90 <_Bfree>
 800c63a:	4629      	mov	r1, r5
 800c63c:	4658      	mov	r0, fp
 800c63e:	f000 fba7 	bl	800cd90 <_Bfree>
 800c642:	e7d0      	b.n	800c5e6 <_dtoa_r+0x65e>
 800c644:	9704      	str	r7, [sp, #16]
 800c646:	4633      	mov	r3, r6
 800c648:	461e      	mov	r6, r3
 800c64a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c64e:	2a39      	cmp	r2, #57	@ 0x39
 800c650:	d107      	bne.n	800c662 <_dtoa_r+0x6da>
 800c652:	459a      	cmp	sl, r3
 800c654:	d1f8      	bne.n	800c648 <_dtoa_r+0x6c0>
 800c656:	9a04      	ldr	r2, [sp, #16]
 800c658:	3201      	adds	r2, #1
 800c65a:	9204      	str	r2, [sp, #16]
 800c65c:	2230      	movs	r2, #48	@ 0x30
 800c65e:	f88a 2000 	strb.w	r2, [sl]
 800c662:	781a      	ldrb	r2, [r3, #0]
 800c664:	3201      	adds	r2, #1
 800c666:	701a      	strb	r2, [r3, #0]
 800c668:	e7bd      	b.n	800c5e6 <_dtoa_r+0x65e>
 800c66a:	4b7b      	ldr	r3, [pc, #492]	@ (800c858 <_dtoa_r+0x8d0>)
 800c66c:	2200      	movs	r2, #0
 800c66e:	f7f3 ffcb 	bl	8000608 <__aeabi_dmul>
 800c672:	2200      	movs	r2, #0
 800c674:	2300      	movs	r3, #0
 800c676:	4604      	mov	r4, r0
 800c678:	460d      	mov	r5, r1
 800c67a:	f7f4 fa2d 	bl	8000ad8 <__aeabi_dcmpeq>
 800c67e:	2800      	cmp	r0, #0
 800c680:	f43f aebb 	beq.w	800c3fa <_dtoa_r+0x472>
 800c684:	e6f0      	b.n	800c468 <_dtoa_r+0x4e0>
 800c686:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c688:	2a00      	cmp	r2, #0
 800c68a:	f000 80db 	beq.w	800c844 <_dtoa_r+0x8bc>
 800c68e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c690:	2a01      	cmp	r2, #1
 800c692:	f300 80bf 	bgt.w	800c814 <_dtoa_r+0x88c>
 800c696:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c698:	2a00      	cmp	r2, #0
 800c69a:	f000 80b7 	beq.w	800c80c <_dtoa_r+0x884>
 800c69e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c6a2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c6a4:	4646      	mov	r6, r8
 800c6a6:	9a08      	ldr	r2, [sp, #32]
 800c6a8:	2101      	movs	r1, #1
 800c6aa:	441a      	add	r2, r3
 800c6ac:	4658      	mov	r0, fp
 800c6ae:	4498      	add	r8, r3
 800c6b0:	9208      	str	r2, [sp, #32]
 800c6b2:	f000 fc21 	bl	800cef8 <__i2b>
 800c6b6:	4605      	mov	r5, r0
 800c6b8:	b15e      	cbz	r6, 800c6d2 <_dtoa_r+0x74a>
 800c6ba:	9b08      	ldr	r3, [sp, #32]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	dd08      	ble.n	800c6d2 <_dtoa_r+0x74a>
 800c6c0:	42b3      	cmp	r3, r6
 800c6c2:	9a08      	ldr	r2, [sp, #32]
 800c6c4:	bfa8      	it	ge
 800c6c6:	4633      	movge	r3, r6
 800c6c8:	eba8 0803 	sub.w	r8, r8, r3
 800c6cc:	1af6      	subs	r6, r6, r3
 800c6ce:	1ad3      	subs	r3, r2, r3
 800c6d0:	9308      	str	r3, [sp, #32]
 800c6d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6d4:	b1f3      	cbz	r3, 800c714 <_dtoa_r+0x78c>
 800c6d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	f000 80b7 	beq.w	800c84c <_dtoa_r+0x8c4>
 800c6de:	b18c      	cbz	r4, 800c704 <_dtoa_r+0x77c>
 800c6e0:	4629      	mov	r1, r5
 800c6e2:	4622      	mov	r2, r4
 800c6e4:	4658      	mov	r0, fp
 800c6e6:	f000 fcc7 	bl	800d078 <__pow5mult>
 800c6ea:	464a      	mov	r2, r9
 800c6ec:	4601      	mov	r1, r0
 800c6ee:	4605      	mov	r5, r0
 800c6f0:	4658      	mov	r0, fp
 800c6f2:	f000 fc17 	bl	800cf24 <__multiply>
 800c6f6:	4649      	mov	r1, r9
 800c6f8:	9004      	str	r0, [sp, #16]
 800c6fa:	4658      	mov	r0, fp
 800c6fc:	f000 fb48 	bl	800cd90 <_Bfree>
 800c700:	9b04      	ldr	r3, [sp, #16]
 800c702:	4699      	mov	r9, r3
 800c704:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c706:	1b1a      	subs	r2, r3, r4
 800c708:	d004      	beq.n	800c714 <_dtoa_r+0x78c>
 800c70a:	4649      	mov	r1, r9
 800c70c:	4658      	mov	r0, fp
 800c70e:	f000 fcb3 	bl	800d078 <__pow5mult>
 800c712:	4681      	mov	r9, r0
 800c714:	2101      	movs	r1, #1
 800c716:	4658      	mov	r0, fp
 800c718:	f000 fbee 	bl	800cef8 <__i2b>
 800c71c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c71e:	4604      	mov	r4, r0
 800c720:	2b00      	cmp	r3, #0
 800c722:	f000 81cf 	beq.w	800cac4 <_dtoa_r+0xb3c>
 800c726:	461a      	mov	r2, r3
 800c728:	4601      	mov	r1, r0
 800c72a:	4658      	mov	r0, fp
 800c72c:	f000 fca4 	bl	800d078 <__pow5mult>
 800c730:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c732:	2b01      	cmp	r3, #1
 800c734:	4604      	mov	r4, r0
 800c736:	f300 8095 	bgt.w	800c864 <_dtoa_r+0x8dc>
 800c73a:	9b02      	ldr	r3, [sp, #8]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	f040 8087 	bne.w	800c850 <_dtoa_r+0x8c8>
 800c742:	9b03      	ldr	r3, [sp, #12]
 800c744:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c748:	2b00      	cmp	r3, #0
 800c74a:	f040 8089 	bne.w	800c860 <_dtoa_r+0x8d8>
 800c74e:	9b03      	ldr	r3, [sp, #12]
 800c750:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c754:	0d1b      	lsrs	r3, r3, #20
 800c756:	051b      	lsls	r3, r3, #20
 800c758:	b12b      	cbz	r3, 800c766 <_dtoa_r+0x7de>
 800c75a:	9b08      	ldr	r3, [sp, #32]
 800c75c:	3301      	adds	r3, #1
 800c75e:	9308      	str	r3, [sp, #32]
 800c760:	f108 0801 	add.w	r8, r8, #1
 800c764:	2301      	movs	r3, #1
 800c766:	930a      	str	r3, [sp, #40]	@ 0x28
 800c768:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	f000 81b0 	beq.w	800cad0 <_dtoa_r+0xb48>
 800c770:	6923      	ldr	r3, [r4, #16]
 800c772:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c776:	6918      	ldr	r0, [r3, #16]
 800c778:	f000 fb72 	bl	800ce60 <__hi0bits>
 800c77c:	f1c0 0020 	rsb	r0, r0, #32
 800c780:	9b08      	ldr	r3, [sp, #32]
 800c782:	4418      	add	r0, r3
 800c784:	f010 001f 	ands.w	r0, r0, #31
 800c788:	d077      	beq.n	800c87a <_dtoa_r+0x8f2>
 800c78a:	f1c0 0320 	rsb	r3, r0, #32
 800c78e:	2b04      	cmp	r3, #4
 800c790:	dd6b      	ble.n	800c86a <_dtoa_r+0x8e2>
 800c792:	9b08      	ldr	r3, [sp, #32]
 800c794:	f1c0 001c 	rsb	r0, r0, #28
 800c798:	4403      	add	r3, r0
 800c79a:	4480      	add	r8, r0
 800c79c:	4406      	add	r6, r0
 800c79e:	9308      	str	r3, [sp, #32]
 800c7a0:	f1b8 0f00 	cmp.w	r8, #0
 800c7a4:	dd05      	ble.n	800c7b2 <_dtoa_r+0x82a>
 800c7a6:	4649      	mov	r1, r9
 800c7a8:	4642      	mov	r2, r8
 800c7aa:	4658      	mov	r0, fp
 800c7ac:	f000 fcbe 	bl	800d12c <__lshift>
 800c7b0:	4681      	mov	r9, r0
 800c7b2:	9b08      	ldr	r3, [sp, #32]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	dd05      	ble.n	800c7c4 <_dtoa_r+0x83c>
 800c7b8:	4621      	mov	r1, r4
 800c7ba:	461a      	mov	r2, r3
 800c7bc:	4658      	mov	r0, fp
 800c7be:	f000 fcb5 	bl	800d12c <__lshift>
 800c7c2:	4604      	mov	r4, r0
 800c7c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d059      	beq.n	800c87e <_dtoa_r+0x8f6>
 800c7ca:	4621      	mov	r1, r4
 800c7cc:	4648      	mov	r0, r9
 800c7ce:	f000 fd19 	bl	800d204 <__mcmp>
 800c7d2:	2800      	cmp	r0, #0
 800c7d4:	da53      	bge.n	800c87e <_dtoa_r+0x8f6>
 800c7d6:	1e7b      	subs	r3, r7, #1
 800c7d8:	9304      	str	r3, [sp, #16]
 800c7da:	4649      	mov	r1, r9
 800c7dc:	2300      	movs	r3, #0
 800c7de:	220a      	movs	r2, #10
 800c7e0:	4658      	mov	r0, fp
 800c7e2:	f000 faf7 	bl	800cdd4 <__multadd>
 800c7e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c7e8:	4681      	mov	r9, r0
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	f000 8172 	beq.w	800cad4 <_dtoa_r+0xb4c>
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	4629      	mov	r1, r5
 800c7f4:	220a      	movs	r2, #10
 800c7f6:	4658      	mov	r0, fp
 800c7f8:	f000 faec 	bl	800cdd4 <__multadd>
 800c7fc:	9b00      	ldr	r3, [sp, #0]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	4605      	mov	r5, r0
 800c802:	dc67      	bgt.n	800c8d4 <_dtoa_r+0x94c>
 800c804:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c806:	2b02      	cmp	r3, #2
 800c808:	dc41      	bgt.n	800c88e <_dtoa_r+0x906>
 800c80a:	e063      	b.n	800c8d4 <_dtoa_r+0x94c>
 800c80c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c80e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c812:	e746      	b.n	800c6a2 <_dtoa_r+0x71a>
 800c814:	9b07      	ldr	r3, [sp, #28]
 800c816:	1e5c      	subs	r4, r3, #1
 800c818:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c81a:	42a3      	cmp	r3, r4
 800c81c:	bfbf      	itttt	lt
 800c81e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c820:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c822:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c824:	1ae3      	sublt	r3, r4, r3
 800c826:	bfb4      	ite	lt
 800c828:	18d2      	addlt	r2, r2, r3
 800c82a:	1b1c      	subge	r4, r3, r4
 800c82c:	9b07      	ldr	r3, [sp, #28]
 800c82e:	bfbc      	itt	lt
 800c830:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c832:	2400      	movlt	r4, #0
 800c834:	2b00      	cmp	r3, #0
 800c836:	bfb5      	itete	lt
 800c838:	eba8 0603 	sublt.w	r6, r8, r3
 800c83c:	9b07      	ldrge	r3, [sp, #28]
 800c83e:	2300      	movlt	r3, #0
 800c840:	4646      	movge	r6, r8
 800c842:	e730      	b.n	800c6a6 <_dtoa_r+0x71e>
 800c844:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c846:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c848:	4646      	mov	r6, r8
 800c84a:	e735      	b.n	800c6b8 <_dtoa_r+0x730>
 800c84c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c84e:	e75c      	b.n	800c70a <_dtoa_r+0x782>
 800c850:	2300      	movs	r3, #0
 800c852:	e788      	b.n	800c766 <_dtoa_r+0x7de>
 800c854:	3fe00000 	.word	0x3fe00000
 800c858:	40240000 	.word	0x40240000
 800c85c:	40140000 	.word	0x40140000
 800c860:	9b02      	ldr	r3, [sp, #8]
 800c862:	e780      	b.n	800c766 <_dtoa_r+0x7de>
 800c864:	2300      	movs	r3, #0
 800c866:	930a      	str	r3, [sp, #40]	@ 0x28
 800c868:	e782      	b.n	800c770 <_dtoa_r+0x7e8>
 800c86a:	d099      	beq.n	800c7a0 <_dtoa_r+0x818>
 800c86c:	9a08      	ldr	r2, [sp, #32]
 800c86e:	331c      	adds	r3, #28
 800c870:	441a      	add	r2, r3
 800c872:	4498      	add	r8, r3
 800c874:	441e      	add	r6, r3
 800c876:	9208      	str	r2, [sp, #32]
 800c878:	e792      	b.n	800c7a0 <_dtoa_r+0x818>
 800c87a:	4603      	mov	r3, r0
 800c87c:	e7f6      	b.n	800c86c <_dtoa_r+0x8e4>
 800c87e:	9b07      	ldr	r3, [sp, #28]
 800c880:	9704      	str	r7, [sp, #16]
 800c882:	2b00      	cmp	r3, #0
 800c884:	dc20      	bgt.n	800c8c8 <_dtoa_r+0x940>
 800c886:	9300      	str	r3, [sp, #0]
 800c888:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c88a:	2b02      	cmp	r3, #2
 800c88c:	dd1e      	ble.n	800c8cc <_dtoa_r+0x944>
 800c88e:	9b00      	ldr	r3, [sp, #0]
 800c890:	2b00      	cmp	r3, #0
 800c892:	f47f aec0 	bne.w	800c616 <_dtoa_r+0x68e>
 800c896:	4621      	mov	r1, r4
 800c898:	2205      	movs	r2, #5
 800c89a:	4658      	mov	r0, fp
 800c89c:	f000 fa9a 	bl	800cdd4 <__multadd>
 800c8a0:	4601      	mov	r1, r0
 800c8a2:	4604      	mov	r4, r0
 800c8a4:	4648      	mov	r0, r9
 800c8a6:	f000 fcad 	bl	800d204 <__mcmp>
 800c8aa:	2800      	cmp	r0, #0
 800c8ac:	f77f aeb3 	ble.w	800c616 <_dtoa_r+0x68e>
 800c8b0:	4656      	mov	r6, sl
 800c8b2:	2331      	movs	r3, #49	@ 0x31
 800c8b4:	f806 3b01 	strb.w	r3, [r6], #1
 800c8b8:	9b04      	ldr	r3, [sp, #16]
 800c8ba:	3301      	adds	r3, #1
 800c8bc:	9304      	str	r3, [sp, #16]
 800c8be:	e6ae      	b.n	800c61e <_dtoa_r+0x696>
 800c8c0:	9c07      	ldr	r4, [sp, #28]
 800c8c2:	9704      	str	r7, [sp, #16]
 800c8c4:	4625      	mov	r5, r4
 800c8c6:	e7f3      	b.n	800c8b0 <_dtoa_r+0x928>
 800c8c8:	9b07      	ldr	r3, [sp, #28]
 800c8ca:	9300      	str	r3, [sp, #0]
 800c8cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	f000 8104 	beq.w	800cadc <_dtoa_r+0xb54>
 800c8d4:	2e00      	cmp	r6, #0
 800c8d6:	dd05      	ble.n	800c8e4 <_dtoa_r+0x95c>
 800c8d8:	4629      	mov	r1, r5
 800c8da:	4632      	mov	r2, r6
 800c8dc:	4658      	mov	r0, fp
 800c8de:	f000 fc25 	bl	800d12c <__lshift>
 800c8e2:	4605      	mov	r5, r0
 800c8e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d05a      	beq.n	800c9a0 <_dtoa_r+0xa18>
 800c8ea:	6869      	ldr	r1, [r5, #4]
 800c8ec:	4658      	mov	r0, fp
 800c8ee:	f000 fa0f 	bl	800cd10 <_Balloc>
 800c8f2:	4606      	mov	r6, r0
 800c8f4:	b928      	cbnz	r0, 800c902 <_dtoa_r+0x97a>
 800c8f6:	4b84      	ldr	r3, [pc, #528]	@ (800cb08 <_dtoa_r+0xb80>)
 800c8f8:	4602      	mov	r2, r0
 800c8fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c8fe:	f7ff bb5a 	b.w	800bfb6 <_dtoa_r+0x2e>
 800c902:	692a      	ldr	r2, [r5, #16]
 800c904:	3202      	adds	r2, #2
 800c906:	0092      	lsls	r2, r2, #2
 800c908:	f105 010c 	add.w	r1, r5, #12
 800c90c:	300c      	adds	r0, #12
 800c90e:	f7ff faa2 	bl	800be56 <memcpy>
 800c912:	2201      	movs	r2, #1
 800c914:	4631      	mov	r1, r6
 800c916:	4658      	mov	r0, fp
 800c918:	f000 fc08 	bl	800d12c <__lshift>
 800c91c:	f10a 0301 	add.w	r3, sl, #1
 800c920:	9307      	str	r3, [sp, #28]
 800c922:	9b00      	ldr	r3, [sp, #0]
 800c924:	4453      	add	r3, sl
 800c926:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c928:	9b02      	ldr	r3, [sp, #8]
 800c92a:	f003 0301 	and.w	r3, r3, #1
 800c92e:	462f      	mov	r7, r5
 800c930:	930a      	str	r3, [sp, #40]	@ 0x28
 800c932:	4605      	mov	r5, r0
 800c934:	9b07      	ldr	r3, [sp, #28]
 800c936:	4621      	mov	r1, r4
 800c938:	3b01      	subs	r3, #1
 800c93a:	4648      	mov	r0, r9
 800c93c:	9300      	str	r3, [sp, #0]
 800c93e:	f7ff fa98 	bl	800be72 <quorem>
 800c942:	4639      	mov	r1, r7
 800c944:	9002      	str	r0, [sp, #8]
 800c946:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c94a:	4648      	mov	r0, r9
 800c94c:	f000 fc5a 	bl	800d204 <__mcmp>
 800c950:	462a      	mov	r2, r5
 800c952:	9008      	str	r0, [sp, #32]
 800c954:	4621      	mov	r1, r4
 800c956:	4658      	mov	r0, fp
 800c958:	f000 fc70 	bl	800d23c <__mdiff>
 800c95c:	68c2      	ldr	r2, [r0, #12]
 800c95e:	4606      	mov	r6, r0
 800c960:	bb02      	cbnz	r2, 800c9a4 <_dtoa_r+0xa1c>
 800c962:	4601      	mov	r1, r0
 800c964:	4648      	mov	r0, r9
 800c966:	f000 fc4d 	bl	800d204 <__mcmp>
 800c96a:	4602      	mov	r2, r0
 800c96c:	4631      	mov	r1, r6
 800c96e:	4658      	mov	r0, fp
 800c970:	920e      	str	r2, [sp, #56]	@ 0x38
 800c972:	f000 fa0d 	bl	800cd90 <_Bfree>
 800c976:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c978:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c97a:	9e07      	ldr	r6, [sp, #28]
 800c97c:	ea43 0102 	orr.w	r1, r3, r2
 800c980:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c982:	4319      	orrs	r1, r3
 800c984:	d110      	bne.n	800c9a8 <_dtoa_r+0xa20>
 800c986:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c98a:	d029      	beq.n	800c9e0 <_dtoa_r+0xa58>
 800c98c:	9b08      	ldr	r3, [sp, #32]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	dd02      	ble.n	800c998 <_dtoa_r+0xa10>
 800c992:	9b02      	ldr	r3, [sp, #8]
 800c994:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c998:	9b00      	ldr	r3, [sp, #0]
 800c99a:	f883 8000 	strb.w	r8, [r3]
 800c99e:	e63f      	b.n	800c620 <_dtoa_r+0x698>
 800c9a0:	4628      	mov	r0, r5
 800c9a2:	e7bb      	b.n	800c91c <_dtoa_r+0x994>
 800c9a4:	2201      	movs	r2, #1
 800c9a6:	e7e1      	b.n	800c96c <_dtoa_r+0x9e4>
 800c9a8:	9b08      	ldr	r3, [sp, #32]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	db04      	blt.n	800c9b8 <_dtoa_r+0xa30>
 800c9ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c9b0:	430b      	orrs	r3, r1
 800c9b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c9b4:	430b      	orrs	r3, r1
 800c9b6:	d120      	bne.n	800c9fa <_dtoa_r+0xa72>
 800c9b8:	2a00      	cmp	r2, #0
 800c9ba:	dded      	ble.n	800c998 <_dtoa_r+0xa10>
 800c9bc:	4649      	mov	r1, r9
 800c9be:	2201      	movs	r2, #1
 800c9c0:	4658      	mov	r0, fp
 800c9c2:	f000 fbb3 	bl	800d12c <__lshift>
 800c9c6:	4621      	mov	r1, r4
 800c9c8:	4681      	mov	r9, r0
 800c9ca:	f000 fc1b 	bl	800d204 <__mcmp>
 800c9ce:	2800      	cmp	r0, #0
 800c9d0:	dc03      	bgt.n	800c9da <_dtoa_r+0xa52>
 800c9d2:	d1e1      	bne.n	800c998 <_dtoa_r+0xa10>
 800c9d4:	f018 0f01 	tst.w	r8, #1
 800c9d8:	d0de      	beq.n	800c998 <_dtoa_r+0xa10>
 800c9da:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c9de:	d1d8      	bne.n	800c992 <_dtoa_r+0xa0a>
 800c9e0:	9a00      	ldr	r2, [sp, #0]
 800c9e2:	2339      	movs	r3, #57	@ 0x39
 800c9e4:	7013      	strb	r3, [r2, #0]
 800c9e6:	4633      	mov	r3, r6
 800c9e8:	461e      	mov	r6, r3
 800c9ea:	3b01      	subs	r3, #1
 800c9ec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c9f0:	2a39      	cmp	r2, #57	@ 0x39
 800c9f2:	d052      	beq.n	800ca9a <_dtoa_r+0xb12>
 800c9f4:	3201      	adds	r2, #1
 800c9f6:	701a      	strb	r2, [r3, #0]
 800c9f8:	e612      	b.n	800c620 <_dtoa_r+0x698>
 800c9fa:	2a00      	cmp	r2, #0
 800c9fc:	dd07      	ble.n	800ca0e <_dtoa_r+0xa86>
 800c9fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ca02:	d0ed      	beq.n	800c9e0 <_dtoa_r+0xa58>
 800ca04:	9a00      	ldr	r2, [sp, #0]
 800ca06:	f108 0301 	add.w	r3, r8, #1
 800ca0a:	7013      	strb	r3, [r2, #0]
 800ca0c:	e608      	b.n	800c620 <_dtoa_r+0x698>
 800ca0e:	9b07      	ldr	r3, [sp, #28]
 800ca10:	9a07      	ldr	r2, [sp, #28]
 800ca12:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ca16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca18:	4293      	cmp	r3, r2
 800ca1a:	d028      	beq.n	800ca6e <_dtoa_r+0xae6>
 800ca1c:	4649      	mov	r1, r9
 800ca1e:	2300      	movs	r3, #0
 800ca20:	220a      	movs	r2, #10
 800ca22:	4658      	mov	r0, fp
 800ca24:	f000 f9d6 	bl	800cdd4 <__multadd>
 800ca28:	42af      	cmp	r7, r5
 800ca2a:	4681      	mov	r9, r0
 800ca2c:	f04f 0300 	mov.w	r3, #0
 800ca30:	f04f 020a 	mov.w	r2, #10
 800ca34:	4639      	mov	r1, r7
 800ca36:	4658      	mov	r0, fp
 800ca38:	d107      	bne.n	800ca4a <_dtoa_r+0xac2>
 800ca3a:	f000 f9cb 	bl	800cdd4 <__multadd>
 800ca3e:	4607      	mov	r7, r0
 800ca40:	4605      	mov	r5, r0
 800ca42:	9b07      	ldr	r3, [sp, #28]
 800ca44:	3301      	adds	r3, #1
 800ca46:	9307      	str	r3, [sp, #28]
 800ca48:	e774      	b.n	800c934 <_dtoa_r+0x9ac>
 800ca4a:	f000 f9c3 	bl	800cdd4 <__multadd>
 800ca4e:	4629      	mov	r1, r5
 800ca50:	4607      	mov	r7, r0
 800ca52:	2300      	movs	r3, #0
 800ca54:	220a      	movs	r2, #10
 800ca56:	4658      	mov	r0, fp
 800ca58:	f000 f9bc 	bl	800cdd4 <__multadd>
 800ca5c:	4605      	mov	r5, r0
 800ca5e:	e7f0      	b.n	800ca42 <_dtoa_r+0xaba>
 800ca60:	9b00      	ldr	r3, [sp, #0]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	bfcc      	ite	gt
 800ca66:	461e      	movgt	r6, r3
 800ca68:	2601      	movle	r6, #1
 800ca6a:	4456      	add	r6, sl
 800ca6c:	2700      	movs	r7, #0
 800ca6e:	4649      	mov	r1, r9
 800ca70:	2201      	movs	r2, #1
 800ca72:	4658      	mov	r0, fp
 800ca74:	f000 fb5a 	bl	800d12c <__lshift>
 800ca78:	4621      	mov	r1, r4
 800ca7a:	4681      	mov	r9, r0
 800ca7c:	f000 fbc2 	bl	800d204 <__mcmp>
 800ca80:	2800      	cmp	r0, #0
 800ca82:	dcb0      	bgt.n	800c9e6 <_dtoa_r+0xa5e>
 800ca84:	d102      	bne.n	800ca8c <_dtoa_r+0xb04>
 800ca86:	f018 0f01 	tst.w	r8, #1
 800ca8a:	d1ac      	bne.n	800c9e6 <_dtoa_r+0xa5e>
 800ca8c:	4633      	mov	r3, r6
 800ca8e:	461e      	mov	r6, r3
 800ca90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ca94:	2a30      	cmp	r2, #48	@ 0x30
 800ca96:	d0fa      	beq.n	800ca8e <_dtoa_r+0xb06>
 800ca98:	e5c2      	b.n	800c620 <_dtoa_r+0x698>
 800ca9a:	459a      	cmp	sl, r3
 800ca9c:	d1a4      	bne.n	800c9e8 <_dtoa_r+0xa60>
 800ca9e:	9b04      	ldr	r3, [sp, #16]
 800caa0:	3301      	adds	r3, #1
 800caa2:	9304      	str	r3, [sp, #16]
 800caa4:	2331      	movs	r3, #49	@ 0x31
 800caa6:	f88a 3000 	strb.w	r3, [sl]
 800caaa:	e5b9      	b.n	800c620 <_dtoa_r+0x698>
 800caac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800caae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800cb0c <_dtoa_r+0xb84>
 800cab2:	b11b      	cbz	r3, 800cabc <_dtoa_r+0xb34>
 800cab4:	f10a 0308 	add.w	r3, sl, #8
 800cab8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800caba:	6013      	str	r3, [r2, #0]
 800cabc:	4650      	mov	r0, sl
 800cabe:	b019      	add	sp, #100	@ 0x64
 800cac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cac4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cac6:	2b01      	cmp	r3, #1
 800cac8:	f77f ae37 	ble.w	800c73a <_dtoa_r+0x7b2>
 800cacc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cace:	930a      	str	r3, [sp, #40]	@ 0x28
 800cad0:	2001      	movs	r0, #1
 800cad2:	e655      	b.n	800c780 <_dtoa_r+0x7f8>
 800cad4:	9b00      	ldr	r3, [sp, #0]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	f77f aed6 	ble.w	800c888 <_dtoa_r+0x900>
 800cadc:	4656      	mov	r6, sl
 800cade:	4621      	mov	r1, r4
 800cae0:	4648      	mov	r0, r9
 800cae2:	f7ff f9c6 	bl	800be72 <quorem>
 800cae6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800caea:	f806 8b01 	strb.w	r8, [r6], #1
 800caee:	9b00      	ldr	r3, [sp, #0]
 800caf0:	eba6 020a 	sub.w	r2, r6, sl
 800caf4:	4293      	cmp	r3, r2
 800caf6:	ddb3      	ble.n	800ca60 <_dtoa_r+0xad8>
 800caf8:	4649      	mov	r1, r9
 800cafa:	2300      	movs	r3, #0
 800cafc:	220a      	movs	r2, #10
 800cafe:	4658      	mov	r0, fp
 800cb00:	f000 f968 	bl	800cdd4 <__multadd>
 800cb04:	4681      	mov	r9, r0
 800cb06:	e7ea      	b.n	800cade <_dtoa_r+0xb56>
 800cb08:	0800e3bc 	.word	0x0800e3bc
 800cb0c:	0800e340 	.word	0x0800e340

0800cb10 <_free_r>:
 800cb10:	b538      	push	{r3, r4, r5, lr}
 800cb12:	4605      	mov	r5, r0
 800cb14:	2900      	cmp	r1, #0
 800cb16:	d041      	beq.n	800cb9c <_free_r+0x8c>
 800cb18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb1c:	1f0c      	subs	r4, r1, #4
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	bfb8      	it	lt
 800cb22:	18e4      	addlt	r4, r4, r3
 800cb24:	f000 f8e8 	bl	800ccf8 <__malloc_lock>
 800cb28:	4a1d      	ldr	r2, [pc, #116]	@ (800cba0 <_free_r+0x90>)
 800cb2a:	6813      	ldr	r3, [r2, #0]
 800cb2c:	b933      	cbnz	r3, 800cb3c <_free_r+0x2c>
 800cb2e:	6063      	str	r3, [r4, #4]
 800cb30:	6014      	str	r4, [r2, #0]
 800cb32:	4628      	mov	r0, r5
 800cb34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb38:	f000 b8e4 	b.w	800cd04 <__malloc_unlock>
 800cb3c:	42a3      	cmp	r3, r4
 800cb3e:	d908      	bls.n	800cb52 <_free_r+0x42>
 800cb40:	6820      	ldr	r0, [r4, #0]
 800cb42:	1821      	adds	r1, r4, r0
 800cb44:	428b      	cmp	r3, r1
 800cb46:	bf01      	itttt	eq
 800cb48:	6819      	ldreq	r1, [r3, #0]
 800cb4a:	685b      	ldreq	r3, [r3, #4]
 800cb4c:	1809      	addeq	r1, r1, r0
 800cb4e:	6021      	streq	r1, [r4, #0]
 800cb50:	e7ed      	b.n	800cb2e <_free_r+0x1e>
 800cb52:	461a      	mov	r2, r3
 800cb54:	685b      	ldr	r3, [r3, #4]
 800cb56:	b10b      	cbz	r3, 800cb5c <_free_r+0x4c>
 800cb58:	42a3      	cmp	r3, r4
 800cb5a:	d9fa      	bls.n	800cb52 <_free_r+0x42>
 800cb5c:	6811      	ldr	r1, [r2, #0]
 800cb5e:	1850      	adds	r0, r2, r1
 800cb60:	42a0      	cmp	r0, r4
 800cb62:	d10b      	bne.n	800cb7c <_free_r+0x6c>
 800cb64:	6820      	ldr	r0, [r4, #0]
 800cb66:	4401      	add	r1, r0
 800cb68:	1850      	adds	r0, r2, r1
 800cb6a:	4283      	cmp	r3, r0
 800cb6c:	6011      	str	r1, [r2, #0]
 800cb6e:	d1e0      	bne.n	800cb32 <_free_r+0x22>
 800cb70:	6818      	ldr	r0, [r3, #0]
 800cb72:	685b      	ldr	r3, [r3, #4]
 800cb74:	6053      	str	r3, [r2, #4]
 800cb76:	4408      	add	r0, r1
 800cb78:	6010      	str	r0, [r2, #0]
 800cb7a:	e7da      	b.n	800cb32 <_free_r+0x22>
 800cb7c:	d902      	bls.n	800cb84 <_free_r+0x74>
 800cb7e:	230c      	movs	r3, #12
 800cb80:	602b      	str	r3, [r5, #0]
 800cb82:	e7d6      	b.n	800cb32 <_free_r+0x22>
 800cb84:	6820      	ldr	r0, [r4, #0]
 800cb86:	1821      	adds	r1, r4, r0
 800cb88:	428b      	cmp	r3, r1
 800cb8a:	bf04      	itt	eq
 800cb8c:	6819      	ldreq	r1, [r3, #0]
 800cb8e:	685b      	ldreq	r3, [r3, #4]
 800cb90:	6063      	str	r3, [r4, #4]
 800cb92:	bf04      	itt	eq
 800cb94:	1809      	addeq	r1, r1, r0
 800cb96:	6021      	streq	r1, [r4, #0]
 800cb98:	6054      	str	r4, [r2, #4]
 800cb9a:	e7ca      	b.n	800cb32 <_free_r+0x22>
 800cb9c:	bd38      	pop	{r3, r4, r5, pc}
 800cb9e:	bf00      	nop
 800cba0:	20005088 	.word	0x20005088

0800cba4 <malloc>:
 800cba4:	4b02      	ldr	r3, [pc, #8]	@ (800cbb0 <malloc+0xc>)
 800cba6:	4601      	mov	r1, r0
 800cba8:	6818      	ldr	r0, [r3, #0]
 800cbaa:	f000 b825 	b.w	800cbf8 <_malloc_r>
 800cbae:	bf00      	nop
 800cbb0:	20000038 	.word	0x20000038

0800cbb4 <sbrk_aligned>:
 800cbb4:	b570      	push	{r4, r5, r6, lr}
 800cbb6:	4e0f      	ldr	r6, [pc, #60]	@ (800cbf4 <sbrk_aligned+0x40>)
 800cbb8:	460c      	mov	r4, r1
 800cbba:	6831      	ldr	r1, [r6, #0]
 800cbbc:	4605      	mov	r5, r0
 800cbbe:	b911      	cbnz	r1, 800cbc6 <sbrk_aligned+0x12>
 800cbc0:	f001 f80c 	bl	800dbdc <_sbrk_r>
 800cbc4:	6030      	str	r0, [r6, #0]
 800cbc6:	4621      	mov	r1, r4
 800cbc8:	4628      	mov	r0, r5
 800cbca:	f001 f807 	bl	800dbdc <_sbrk_r>
 800cbce:	1c43      	adds	r3, r0, #1
 800cbd0:	d103      	bne.n	800cbda <sbrk_aligned+0x26>
 800cbd2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800cbd6:	4620      	mov	r0, r4
 800cbd8:	bd70      	pop	{r4, r5, r6, pc}
 800cbda:	1cc4      	adds	r4, r0, #3
 800cbdc:	f024 0403 	bic.w	r4, r4, #3
 800cbe0:	42a0      	cmp	r0, r4
 800cbe2:	d0f8      	beq.n	800cbd6 <sbrk_aligned+0x22>
 800cbe4:	1a21      	subs	r1, r4, r0
 800cbe6:	4628      	mov	r0, r5
 800cbe8:	f000 fff8 	bl	800dbdc <_sbrk_r>
 800cbec:	3001      	adds	r0, #1
 800cbee:	d1f2      	bne.n	800cbd6 <sbrk_aligned+0x22>
 800cbf0:	e7ef      	b.n	800cbd2 <sbrk_aligned+0x1e>
 800cbf2:	bf00      	nop
 800cbf4:	20005084 	.word	0x20005084

0800cbf8 <_malloc_r>:
 800cbf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbfc:	1ccd      	adds	r5, r1, #3
 800cbfe:	f025 0503 	bic.w	r5, r5, #3
 800cc02:	3508      	adds	r5, #8
 800cc04:	2d0c      	cmp	r5, #12
 800cc06:	bf38      	it	cc
 800cc08:	250c      	movcc	r5, #12
 800cc0a:	2d00      	cmp	r5, #0
 800cc0c:	4606      	mov	r6, r0
 800cc0e:	db01      	blt.n	800cc14 <_malloc_r+0x1c>
 800cc10:	42a9      	cmp	r1, r5
 800cc12:	d904      	bls.n	800cc1e <_malloc_r+0x26>
 800cc14:	230c      	movs	r3, #12
 800cc16:	6033      	str	r3, [r6, #0]
 800cc18:	2000      	movs	r0, #0
 800cc1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ccf4 <_malloc_r+0xfc>
 800cc22:	f000 f869 	bl	800ccf8 <__malloc_lock>
 800cc26:	f8d8 3000 	ldr.w	r3, [r8]
 800cc2a:	461c      	mov	r4, r3
 800cc2c:	bb44      	cbnz	r4, 800cc80 <_malloc_r+0x88>
 800cc2e:	4629      	mov	r1, r5
 800cc30:	4630      	mov	r0, r6
 800cc32:	f7ff ffbf 	bl	800cbb4 <sbrk_aligned>
 800cc36:	1c43      	adds	r3, r0, #1
 800cc38:	4604      	mov	r4, r0
 800cc3a:	d158      	bne.n	800ccee <_malloc_r+0xf6>
 800cc3c:	f8d8 4000 	ldr.w	r4, [r8]
 800cc40:	4627      	mov	r7, r4
 800cc42:	2f00      	cmp	r7, #0
 800cc44:	d143      	bne.n	800ccce <_malloc_r+0xd6>
 800cc46:	2c00      	cmp	r4, #0
 800cc48:	d04b      	beq.n	800cce2 <_malloc_r+0xea>
 800cc4a:	6823      	ldr	r3, [r4, #0]
 800cc4c:	4639      	mov	r1, r7
 800cc4e:	4630      	mov	r0, r6
 800cc50:	eb04 0903 	add.w	r9, r4, r3
 800cc54:	f000 ffc2 	bl	800dbdc <_sbrk_r>
 800cc58:	4581      	cmp	r9, r0
 800cc5a:	d142      	bne.n	800cce2 <_malloc_r+0xea>
 800cc5c:	6821      	ldr	r1, [r4, #0]
 800cc5e:	1a6d      	subs	r5, r5, r1
 800cc60:	4629      	mov	r1, r5
 800cc62:	4630      	mov	r0, r6
 800cc64:	f7ff ffa6 	bl	800cbb4 <sbrk_aligned>
 800cc68:	3001      	adds	r0, #1
 800cc6a:	d03a      	beq.n	800cce2 <_malloc_r+0xea>
 800cc6c:	6823      	ldr	r3, [r4, #0]
 800cc6e:	442b      	add	r3, r5
 800cc70:	6023      	str	r3, [r4, #0]
 800cc72:	f8d8 3000 	ldr.w	r3, [r8]
 800cc76:	685a      	ldr	r2, [r3, #4]
 800cc78:	bb62      	cbnz	r2, 800ccd4 <_malloc_r+0xdc>
 800cc7a:	f8c8 7000 	str.w	r7, [r8]
 800cc7e:	e00f      	b.n	800cca0 <_malloc_r+0xa8>
 800cc80:	6822      	ldr	r2, [r4, #0]
 800cc82:	1b52      	subs	r2, r2, r5
 800cc84:	d420      	bmi.n	800ccc8 <_malloc_r+0xd0>
 800cc86:	2a0b      	cmp	r2, #11
 800cc88:	d917      	bls.n	800ccba <_malloc_r+0xc2>
 800cc8a:	1961      	adds	r1, r4, r5
 800cc8c:	42a3      	cmp	r3, r4
 800cc8e:	6025      	str	r5, [r4, #0]
 800cc90:	bf18      	it	ne
 800cc92:	6059      	strne	r1, [r3, #4]
 800cc94:	6863      	ldr	r3, [r4, #4]
 800cc96:	bf08      	it	eq
 800cc98:	f8c8 1000 	streq.w	r1, [r8]
 800cc9c:	5162      	str	r2, [r4, r5]
 800cc9e:	604b      	str	r3, [r1, #4]
 800cca0:	4630      	mov	r0, r6
 800cca2:	f000 f82f 	bl	800cd04 <__malloc_unlock>
 800cca6:	f104 000b 	add.w	r0, r4, #11
 800ccaa:	1d23      	adds	r3, r4, #4
 800ccac:	f020 0007 	bic.w	r0, r0, #7
 800ccb0:	1ac2      	subs	r2, r0, r3
 800ccb2:	bf1c      	itt	ne
 800ccb4:	1a1b      	subne	r3, r3, r0
 800ccb6:	50a3      	strne	r3, [r4, r2]
 800ccb8:	e7af      	b.n	800cc1a <_malloc_r+0x22>
 800ccba:	6862      	ldr	r2, [r4, #4]
 800ccbc:	42a3      	cmp	r3, r4
 800ccbe:	bf0c      	ite	eq
 800ccc0:	f8c8 2000 	streq.w	r2, [r8]
 800ccc4:	605a      	strne	r2, [r3, #4]
 800ccc6:	e7eb      	b.n	800cca0 <_malloc_r+0xa8>
 800ccc8:	4623      	mov	r3, r4
 800ccca:	6864      	ldr	r4, [r4, #4]
 800cccc:	e7ae      	b.n	800cc2c <_malloc_r+0x34>
 800ccce:	463c      	mov	r4, r7
 800ccd0:	687f      	ldr	r7, [r7, #4]
 800ccd2:	e7b6      	b.n	800cc42 <_malloc_r+0x4a>
 800ccd4:	461a      	mov	r2, r3
 800ccd6:	685b      	ldr	r3, [r3, #4]
 800ccd8:	42a3      	cmp	r3, r4
 800ccda:	d1fb      	bne.n	800ccd4 <_malloc_r+0xdc>
 800ccdc:	2300      	movs	r3, #0
 800ccde:	6053      	str	r3, [r2, #4]
 800cce0:	e7de      	b.n	800cca0 <_malloc_r+0xa8>
 800cce2:	230c      	movs	r3, #12
 800cce4:	6033      	str	r3, [r6, #0]
 800cce6:	4630      	mov	r0, r6
 800cce8:	f000 f80c 	bl	800cd04 <__malloc_unlock>
 800ccec:	e794      	b.n	800cc18 <_malloc_r+0x20>
 800ccee:	6005      	str	r5, [r0, #0]
 800ccf0:	e7d6      	b.n	800cca0 <_malloc_r+0xa8>
 800ccf2:	bf00      	nop
 800ccf4:	20005088 	.word	0x20005088

0800ccf8 <__malloc_lock>:
 800ccf8:	4801      	ldr	r0, [pc, #4]	@ (800cd00 <__malloc_lock+0x8>)
 800ccfa:	f7ff b8aa 	b.w	800be52 <__retarget_lock_acquire_recursive>
 800ccfe:	bf00      	nop
 800cd00:	20005080 	.word	0x20005080

0800cd04 <__malloc_unlock>:
 800cd04:	4801      	ldr	r0, [pc, #4]	@ (800cd0c <__malloc_unlock+0x8>)
 800cd06:	f7ff b8a5 	b.w	800be54 <__retarget_lock_release_recursive>
 800cd0a:	bf00      	nop
 800cd0c:	20005080 	.word	0x20005080

0800cd10 <_Balloc>:
 800cd10:	b570      	push	{r4, r5, r6, lr}
 800cd12:	69c6      	ldr	r6, [r0, #28]
 800cd14:	4604      	mov	r4, r0
 800cd16:	460d      	mov	r5, r1
 800cd18:	b976      	cbnz	r6, 800cd38 <_Balloc+0x28>
 800cd1a:	2010      	movs	r0, #16
 800cd1c:	f7ff ff42 	bl	800cba4 <malloc>
 800cd20:	4602      	mov	r2, r0
 800cd22:	61e0      	str	r0, [r4, #28]
 800cd24:	b920      	cbnz	r0, 800cd30 <_Balloc+0x20>
 800cd26:	4b18      	ldr	r3, [pc, #96]	@ (800cd88 <_Balloc+0x78>)
 800cd28:	4818      	ldr	r0, [pc, #96]	@ (800cd8c <_Balloc+0x7c>)
 800cd2a:	216b      	movs	r1, #107	@ 0x6b
 800cd2c:	f000 ff66 	bl	800dbfc <__assert_func>
 800cd30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cd34:	6006      	str	r6, [r0, #0]
 800cd36:	60c6      	str	r6, [r0, #12]
 800cd38:	69e6      	ldr	r6, [r4, #28]
 800cd3a:	68f3      	ldr	r3, [r6, #12]
 800cd3c:	b183      	cbz	r3, 800cd60 <_Balloc+0x50>
 800cd3e:	69e3      	ldr	r3, [r4, #28]
 800cd40:	68db      	ldr	r3, [r3, #12]
 800cd42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cd46:	b9b8      	cbnz	r0, 800cd78 <_Balloc+0x68>
 800cd48:	2101      	movs	r1, #1
 800cd4a:	fa01 f605 	lsl.w	r6, r1, r5
 800cd4e:	1d72      	adds	r2, r6, #5
 800cd50:	0092      	lsls	r2, r2, #2
 800cd52:	4620      	mov	r0, r4
 800cd54:	f000 ff70 	bl	800dc38 <_calloc_r>
 800cd58:	b160      	cbz	r0, 800cd74 <_Balloc+0x64>
 800cd5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cd5e:	e00e      	b.n	800cd7e <_Balloc+0x6e>
 800cd60:	2221      	movs	r2, #33	@ 0x21
 800cd62:	2104      	movs	r1, #4
 800cd64:	4620      	mov	r0, r4
 800cd66:	f000 ff67 	bl	800dc38 <_calloc_r>
 800cd6a:	69e3      	ldr	r3, [r4, #28]
 800cd6c:	60f0      	str	r0, [r6, #12]
 800cd6e:	68db      	ldr	r3, [r3, #12]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d1e4      	bne.n	800cd3e <_Balloc+0x2e>
 800cd74:	2000      	movs	r0, #0
 800cd76:	bd70      	pop	{r4, r5, r6, pc}
 800cd78:	6802      	ldr	r2, [r0, #0]
 800cd7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cd7e:	2300      	movs	r3, #0
 800cd80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cd84:	e7f7      	b.n	800cd76 <_Balloc+0x66>
 800cd86:	bf00      	nop
 800cd88:	0800e34d 	.word	0x0800e34d
 800cd8c:	0800e3cd 	.word	0x0800e3cd

0800cd90 <_Bfree>:
 800cd90:	b570      	push	{r4, r5, r6, lr}
 800cd92:	69c6      	ldr	r6, [r0, #28]
 800cd94:	4605      	mov	r5, r0
 800cd96:	460c      	mov	r4, r1
 800cd98:	b976      	cbnz	r6, 800cdb8 <_Bfree+0x28>
 800cd9a:	2010      	movs	r0, #16
 800cd9c:	f7ff ff02 	bl	800cba4 <malloc>
 800cda0:	4602      	mov	r2, r0
 800cda2:	61e8      	str	r0, [r5, #28]
 800cda4:	b920      	cbnz	r0, 800cdb0 <_Bfree+0x20>
 800cda6:	4b09      	ldr	r3, [pc, #36]	@ (800cdcc <_Bfree+0x3c>)
 800cda8:	4809      	ldr	r0, [pc, #36]	@ (800cdd0 <_Bfree+0x40>)
 800cdaa:	218f      	movs	r1, #143	@ 0x8f
 800cdac:	f000 ff26 	bl	800dbfc <__assert_func>
 800cdb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cdb4:	6006      	str	r6, [r0, #0]
 800cdb6:	60c6      	str	r6, [r0, #12]
 800cdb8:	b13c      	cbz	r4, 800cdca <_Bfree+0x3a>
 800cdba:	69eb      	ldr	r3, [r5, #28]
 800cdbc:	6862      	ldr	r2, [r4, #4]
 800cdbe:	68db      	ldr	r3, [r3, #12]
 800cdc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cdc4:	6021      	str	r1, [r4, #0]
 800cdc6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cdca:	bd70      	pop	{r4, r5, r6, pc}
 800cdcc:	0800e34d 	.word	0x0800e34d
 800cdd0:	0800e3cd 	.word	0x0800e3cd

0800cdd4 <__multadd>:
 800cdd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdd8:	690d      	ldr	r5, [r1, #16]
 800cdda:	4607      	mov	r7, r0
 800cddc:	460c      	mov	r4, r1
 800cdde:	461e      	mov	r6, r3
 800cde0:	f101 0c14 	add.w	ip, r1, #20
 800cde4:	2000      	movs	r0, #0
 800cde6:	f8dc 3000 	ldr.w	r3, [ip]
 800cdea:	b299      	uxth	r1, r3
 800cdec:	fb02 6101 	mla	r1, r2, r1, r6
 800cdf0:	0c1e      	lsrs	r6, r3, #16
 800cdf2:	0c0b      	lsrs	r3, r1, #16
 800cdf4:	fb02 3306 	mla	r3, r2, r6, r3
 800cdf8:	b289      	uxth	r1, r1
 800cdfa:	3001      	adds	r0, #1
 800cdfc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ce00:	4285      	cmp	r5, r0
 800ce02:	f84c 1b04 	str.w	r1, [ip], #4
 800ce06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ce0a:	dcec      	bgt.n	800cde6 <__multadd+0x12>
 800ce0c:	b30e      	cbz	r6, 800ce52 <__multadd+0x7e>
 800ce0e:	68a3      	ldr	r3, [r4, #8]
 800ce10:	42ab      	cmp	r3, r5
 800ce12:	dc19      	bgt.n	800ce48 <__multadd+0x74>
 800ce14:	6861      	ldr	r1, [r4, #4]
 800ce16:	4638      	mov	r0, r7
 800ce18:	3101      	adds	r1, #1
 800ce1a:	f7ff ff79 	bl	800cd10 <_Balloc>
 800ce1e:	4680      	mov	r8, r0
 800ce20:	b928      	cbnz	r0, 800ce2e <__multadd+0x5a>
 800ce22:	4602      	mov	r2, r0
 800ce24:	4b0c      	ldr	r3, [pc, #48]	@ (800ce58 <__multadd+0x84>)
 800ce26:	480d      	ldr	r0, [pc, #52]	@ (800ce5c <__multadd+0x88>)
 800ce28:	21ba      	movs	r1, #186	@ 0xba
 800ce2a:	f000 fee7 	bl	800dbfc <__assert_func>
 800ce2e:	6922      	ldr	r2, [r4, #16]
 800ce30:	3202      	adds	r2, #2
 800ce32:	f104 010c 	add.w	r1, r4, #12
 800ce36:	0092      	lsls	r2, r2, #2
 800ce38:	300c      	adds	r0, #12
 800ce3a:	f7ff f80c 	bl	800be56 <memcpy>
 800ce3e:	4621      	mov	r1, r4
 800ce40:	4638      	mov	r0, r7
 800ce42:	f7ff ffa5 	bl	800cd90 <_Bfree>
 800ce46:	4644      	mov	r4, r8
 800ce48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ce4c:	3501      	adds	r5, #1
 800ce4e:	615e      	str	r6, [r3, #20]
 800ce50:	6125      	str	r5, [r4, #16]
 800ce52:	4620      	mov	r0, r4
 800ce54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce58:	0800e3bc 	.word	0x0800e3bc
 800ce5c:	0800e3cd 	.word	0x0800e3cd

0800ce60 <__hi0bits>:
 800ce60:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ce64:	4603      	mov	r3, r0
 800ce66:	bf36      	itet	cc
 800ce68:	0403      	lslcc	r3, r0, #16
 800ce6a:	2000      	movcs	r0, #0
 800ce6c:	2010      	movcc	r0, #16
 800ce6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ce72:	bf3c      	itt	cc
 800ce74:	021b      	lslcc	r3, r3, #8
 800ce76:	3008      	addcc	r0, #8
 800ce78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ce7c:	bf3c      	itt	cc
 800ce7e:	011b      	lslcc	r3, r3, #4
 800ce80:	3004      	addcc	r0, #4
 800ce82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ce86:	bf3c      	itt	cc
 800ce88:	009b      	lslcc	r3, r3, #2
 800ce8a:	3002      	addcc	r0, #2
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	db05      	blt.n	800ce9c <__hi0bits+0x3c>
 800ce90:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ce94:	f100 0001 	add.w	r0, r0, #1
 800ce98:	bf08      	it	eq
 800ce9a:	2020      	moveq	r0, #32
 800ce9c:	4770      	bx	lr

0800ce9e <__lo0bits>:
 800ce9e:	6803      	ldr	r3, [r0, #0]
 800cea0:	4602      	mov	r2, r0
 800cea2:	f013 0007 	ands.w	r0, r3, #7
 800cea6:	d00b      	beq.n	800cec0 <__lo0bits+0x22>
 800cea8:	07d9      	lsls	r1, r3, #31
 800ceaa:	d421      	bmi.n	800cef0 <__lo0bits+0x52>
 800ceac:	0798      	lsls	r0, r3, #30
 800ceae:	bf49      	itett	mi
 800ceb0:	085b      	lsrmi	r3, r3, #1
 800ceb2:	089b      	lsrpl	r3, r3, #2
 800ceb4:	2001      	movmi	r0, #1
 800ceb6:	6013      	strmi	r3, [r2, #0]
 800ceb8:	bf5c      	itt	pl
 800ceba:	6013      	strpl	r3, [r2, #0]
 800cebc:	2002      	movpl	r0, #2
 800cebe:	4770      	bx	lr
 800cec0:	b299      	uxth	r1, r3
 800cec2:	b909      	cbnz	r1, 800cec8 <__lo0bits+0x2a>
 800cec4:	0c1b      	lsrs	r3, r3, #16
 800cec6:	2010      	movs	r0, #16
 800cec8:	b2d9      	uxtb	r1, r3
 800ceca:	b909      	cbnz	r1, 800ced0 <__lo0bits+0x32>
 800cecc:	3008      	adds	r0, #8
 800cece:	0a1b      	lsrs	r3, r3, #8
 800ced0:	0719      	lsls	r1, r3, #28
 800ced2:	bf04      	itt	eq
 800ced4:	091b      	lsreq	r3, r3, #4
 800ced6:	3004      	addeq	r0, #4
 800ced8:	0799      	lsls	r1, r3, #30
 800ceda:	bf04      	itt	eq
 800cedc:	089b      	lsreq	r3, r3, #2
 800cede:	3002      	addeq	r0, #2
 800cee0:	07d9      	lsls	r1, r3, #31
 800cee2:	d403      	bmi.n	800ceec <__lo0bits+0x4e>
 800cee4:	085b      	lsrs	r3, r3, #1
 800cee6:	f100 0001 	add.w	r0, r0, #1
 800ceea:	d003      	beq.n	800cef4 <__lo0bits+0x56>
 800ceec:	6013      	str	r3, [r2, #0]
 800ceee:	4770      	bx	lr
 800cef0:	2000      	movs	r0, #0
 800cef2:	4770      	bx	lr
 800cef4:	2020      	movs	r0, #32
 800cef6:	4770      	bx	lr

0800cef8 <__i2b>:
 800cef8:	b510      	push	{r4, lr}
 800cefa:	460c      	mov	r4, r1
 800cefc:	2101      	movs	r1, #1
 800cefe:	f7ff ff07 	bl	800cd10 <_Balloc>
 800cf02:	4602      	mov	r2, r0
 800cf04:	b928      	cbnz	r0, 800cf12 <__i2b+0x1a>
 800cf06:	4b05      	ldr	r3, [pc, #20]	@ (800cf1c <__i2b+0x24>)
 800cf08:	4805      	ldr	r0, [pc, #20]	@ (800cf20 <__i2b+0x28>)
 800cf0a:	f240 1145 	movw	r1, #325	@ 0x145
 800cf0e:	f000 fe75 	bl	800dbfc <__assert_func>
 800cf12:	2301      	movs	r3, #1
 800cf14:	6144      	str	r4, [r0, #20]
 800cf16:	6103      	str	r3, [r0, #16]
 800cf18:	bd10      	pop	{r4, pc}
 800cf1a:	bf00      	nop
 800cf1c:	0800e3bc 	.word	0x0800e3bc
 800cf20:	0800e3cd 	.word	0x0800e3cd

0800cf24 <__multiply>:
 800cf24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf28:	4614      	mov	r4, r2
 800cf2a:	690a      	ldr	r2, [r1, #16]
 800cf2c:	6923      	ldr	r3, [r4, #16]
 800cf2e:	429a      	cmp	r2, r3
 800cf30:	bfa8      	it	ge
 800cf32:	4623      	movge	r3, r4
 800cf34:	460f      	mov	r7, r1
 800cf36:	bfa4      	itt	ge
 800cf38:	460c      	movge	r4, r1
 800cf3a:	461f      	movge	r7, r3
 800cf3c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cf40:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cf44:	68a3      	ldr	r3, [r4, #8]
 800cf46:	6861      	ldr	r1, [r4, #4]
 800cf48:	eb0a 0609 	add.w	r6, sl, r9
 800cf4c:	42b3      	cmp	r3, r6
 800cf4e:	b085      	sub	sp, #20
 800cf50:	bfb8      	it	lt
 800cf52:	3101      	addlt	r1, #1
 800cf54:	f7ff fedc 	bl	800cd10 <_Balloc>
 800cf58:	b930      	cbnz	r0, 800cf68 <__multiply+0x44>
 800cf5a:	4602      	mov	r2, r0
 800cf5c:	4b44      	ldr	r3, [pc, #272]	@ (800d070 <__multiply+0x14c>)
 800cf5e:	4845      	ldr	r0, [pc, #276]	@ (800d074 <__multiply+0x150>)
 800cf60:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cf64:	f000 fe4a 	bl	800dbfc <__assert_func>
 800cf68:	f100 0514 	add.w	r5, r0, #20
 800cf6c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cf70:	462b      	mov	r3, r5
 800cf72:	2200      	movs	r2, #0
 800cf74:	4543      	cmp	r3, r8
 800cf76:	d321      	bcc.n	800cfbc <__multiply+0x98>
 800cf78:	f107 0114 	add.w	r1, r7, #20
 800cf7c:	f104 0214 	add.w	r2, r4, #20
 800cf80:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800cf84:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800cf88:	9302      	str	r3, [sp, #8]
 800cf8a:	1b13      	subs	r3, r2, r4
 800cf8c:	3b15      	subs	r3, #21
 800cf8e:	f023 0303 	bic.w	r3, r3, #3
 800cf92:	3304      	adds	r3, #4
 800cf94:	f104 0715 	add.w	r7, r4, #21
 800cf98:	42ba      	cmp	r2, r7
 800cf9a:	bf38      	it	cc
 800cf9c:	2304      	movcc	r3, #4
 800cf9e:	9301      	str	r3, [sp, #4]
 800cfa0:	9b02      	ldr	r3, [sp, #8]
 800cfa2:	9103      	str	r1, [sp, #12]
 800cfa4:	428b      	cmp	r3, r1
 800cfa6:	d80c      	bhi.n	800cfc2 <__multiply+0x9e>
 800cfa8:	2e00      	cmp	r6, #0
 800cfaa:	dd03      	ble.n	800cfb4 <__multiply+0x90>
 800cfac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d05b      	beq.n	800d06c <__multiply+0x148>
 800cfb4:	6106      	str	r6, [r0, #16]
 800cfb6:	b005      	add	sp, #20
 800cfb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfbc:	f843 2b04 	str.w	r2, [r3], #4
 800cfc0:	e7d8      	b.n	800cf74 <__multiply+0x50>
 800cfc2:	f8b1 a000 	ldrh.w	sl, [r1]
 800cfc6:	f1ba 0f00 	cmp.w	sl, #0
 800cfca:	d024      	beq.n	800d016 <__multiply+0xf2>
 800cfcc:	f104 0e14 	add.w	lr, r4, #20
 800cfd0:	46a9      	mov	r9, r5
 800cfd2:	f04f 0c00 	mov.w	ip, #0
 800cfd6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cfda:	f8d9 3000 	ldr.w	r3, [r9]
 800cfde:	fa1f fb87 	uxth.w	fp, r7
 800cfe2:	b29b      	uxth	r3, r3
 800cfe4:	fb0a 330b 	mla	r3, sl, fp, r3
 800cfe8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800cfec:	f8d9 7000 	ldr.w	r7, [r9]
 800cff0:	4463      	add	r3, ip
 800cff2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cff6:	fb0a c70b 	mla	r7, sl, fp, ip
 800cffa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800cffe:	b29b      	uxth	r3, r3
 800d000:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d004:	4572      	cmp	r2, lr
 800d006:	f849 3b04 	str.w	r3, [r9], #4
 800d00a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d00e:	d8e2      	bhi.n	800cfd6 <__multiply+0xb2>
 800d010:	9b01      	ldr	r3, [sp, #4]
 800d012:	f845 c003 	str.w	ip, [r5, r3]
 800d016:	9b03      	ldr	r3, [sp, #12]
 800d018:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d01c:	3104      	adds	r1, #4
 800d01e:	f1b9 0f00 	cmp.w	r9, #0
 800d022:	d021      	beq.n	800d068 <__multiply+0x144>
 800d024:	682b      	ldr	r3, [r5, #0]
 800d026:	f104 0c14 	add.w	ip, r4, #20
 800d02a:	46ae      	mov	lr, r5
 800d02c:	f04f 0a00 	mov.w	sl, #0
 800d030:	f8bc b000 	ldrh.w	fp, [ip]
 800d034:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d038:	fb09 770b 	mla	r7, r9, fp, r7
 800d03c:	4457      	add	r7, sl
 800d03e:	b29b      	uxth	r3, r3
 800d040:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d044:	f84e 3b04 	str.w	r3, [lr], #4
 800d048:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d04c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d050:	f8be 3000 	ldrh.w	r3, [lr]
 800d054:	fb09 330a 	mla	r3, r9, sl, r3
 800d058:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d05c:	4562      	cmp	r2, ip
 800d05e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d062:	d8e5      	bhi.n	800d030 <__multiply+0x10c>
 800d064:	9f01      	ldr	r7, [sp, #4]
 800d066:	51eb      	str	r3, [r5, r7]
 800d068:	3504      	adds	r5, #4
 800d06a:	e799      	b.n	800cfa0 <__multiply+0x7c>
 800d06c:	3e01      	subs	r6, #1
 800d06e:	e79b      	b.n	800cfa8 <__multiply+0x84>
 800d070:	0800e3bc 	.word	0x0800e3bc
 800d074:	0800e3cd 	.word	0x0800e3cd

0800d078 <__pow5mult>:
 800d078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d07c:	4615      	mov	r5, r2
 800d07e:	f012 0203 	ands.w	r2, r2, #3
 800d082:	4607      	mov	r7, r0
 800d084:	460e      	mov	r6, r1
 800d086:	d007      	beq.n	800d098 <__pow5mult+0x20>
 800d088:	4c25      	ldr	r4, [pc, #148]	@ (800d120 <__pow5mult+0xa8>)
 800d08a:	3a01      	subs	r2, #1
 800d08c:	2300      	movs	r3, #0
 800d08e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d092:	f7ff fe9f 	bl	800cdd4 <__multadd>
 800d096:	4606      	mov	r6, r0
 800d098:	10ad      	asrs	r5, r5, #2
 800d09a:	d03d      	beq.n	800d118 <__pow5mult+0xa0>
 800d09c:	69fc      	ldr	r4, [r7, #28]
 800d09e:	b97c      	cbnz	r4, 800d0c0 <__pow5mult+0x48>
 800d0a0:	2010      	movs	r0, #16
 800d0a2:	f7ff fd7f 	bl	800cba4 <malloc>
 800d0a6:	4602      	mov	r2, r0
 800d0a8:	61f8      	str	r0, [r7, #28]
 800d0aa:	b928      	cbnz	r0, 800d0b8 <__pow5mult+0x40>
 800d0ac:	4b1d      	ldr	r3, [pc, #116]	@ (800d124 <__pow5mult+0xac>)
 800d0ae:	481e      	ldr	r0, [pc, #120]	@ (800d128 <__pow5mult+0xb0>)
 800d0b0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d0b4:	f000 fda2 	bl	800dbfc <__assert_func>
 800d0b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d0bc:	6004      	str	r4, [r0, #0]
 800d0be:	60c4      	str	r4, [r0, #12]
 800d0c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d0c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d0c8:	b94c      	cbnz	r4, 800d0de <__pow5mult+0x66>
 800d0ca:	f240 2171 	movw	r1, #625	@ 0x271
 800d0ce:	4638      	mov	r0, r7
 800d0d0:	f7ff ff12 	bl	800cef8 <__i2b>
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	f8c8 0008 	str.w	r0, [r8, #8]
 800d0da:	4604      	mov	r4, r0
 800d0dc:	6003      	str	r3, [r0, #0]
 800d0de:	f04f 0900 	mov.w	r9, #0
 800d0e2:	07eb      	lsls	r3, r5, #31
 800d0e4:	d50a      	bpl.n	800d0fc <__pow5mult+0x84>
 800d0e6:	4631      	mov	r1, r6
 800d0e8:	4622      	mov	r2, r4
 800d0ea:	4638      	mov	r0, r7
 800d0ec:	f7ff ff1a 	bl	800cf24 <__multiply>
 800d0f0:	4631      	mov	r1, r6
 800d0f2:	4680      	mov	r8, r0
 800d0f4:	4638      	mov	r0, r7
 800d0f6:	f7ff fe4b 	bl	800cd90 <_Bfree>
 800d0fa:	4646      	mov	r6, r8
 800d0fc:	106d      	asrs	r5, r5, #1
 800d0fe:	d00b      	beq.n	800d118 <__pow5mult+0xa0>
 800d100:	6820      	ldr	r0, [r4, #0]
 800d102:	b938      	cbnz	r0, 800d114 <__pow5mult+0x9c>
 800d104:	4622      	mov	r2, r4
 800d106:	4621      	mov	r1, r4
 800d108:	4638      	mov	r0, r7
 800d10a:	f7ff ff0b 	bl	800cf24 <__multiply>
 800d10e:	6020      	str	r0, [r4, #0]
 800d110:	f8c0 9000 	str.w	r9, [r0]
 800d114:	4604      	mov	r4, r0
 800d116:	e7e4      	b.n	800d0e2 <__pow5mult+0x6a>
 800d118:	4630      	mov	r0, r6
 800d11a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d11e:	bf00      	nop
 800d120:	0800e428 	.word	0x0800e428
 800d124:	0800e34d 	.word	0x0800e34d
 800d128:	0800e3cd 	.word	0x0800e3cd

0800d12c <__lshift>:
 800d12c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d130:	460c      	mov	r4, r1
 800d132:	6849      	ldr	r1, [r1, #4]
 800d134:	6923      	ldr	r3, [r4, #16]
 800d136:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d13a:	68a3      	ldr	r3, [r4, #8]
 800d13c:	4607      	mov	r7, r0
 800d13e:	4691      	mov	r9, r2
 800d140:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d144:	f108 0601 	add.w	r6, r8, #1
 800d148:	42b3      	cmp	r3, r6
 800d14a:	db0b      	blt.n	800d164 <__lshift+0x38>
 800d14c:	4638      	mov	r0, r7
 800d14e:	f7ff fddf 	bl	800cd10 <_Balloc>
 800d152:	4605      	mov	r5, r0
 800d154:	b948      	cbnz	r0, 800d16a <__lshift+0x3e>
 800d156:	4602      	mov	r2, r0
 800d158:	4b28      	ldr	r3, [pc, #160]	@ (800d1fc <__lshift+0xd0>)
 800d15a:	4829      	ldr	r0, [pc, #164]	@ (800d200 <__lshift+0xd4>)
 800d15c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d160:	f000 fd4c 	bl	800dbfc <__assert_func>
 800d164:	3101      	adds	r1, #1
 800d166:	005b      	lsls	r3, r3, #1
 800d168:	e7ee      	b.n	800d148 <__lshift+0x1c>
 800d16a:	2300      	movs	r3, #0
 800d16c:	f100 0114 	add.w	r1, r0, #20
 800d170:	f100 0210 	add.w	r2, r0, #16
 800d174:	4618      	mov	r0, r3
 800d176:	4553      	cmp	r3, sl
 800d178:	db33      	blt.n	800d1e2 <__lshift+0xb6>
 800d17a:	6920      	ldr	r0, [r4, #16]
 800d17c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d180:	f104 0314 	add.w	r3, r4, #20
 800d184:	f019 091f 	ands.w	r9, r9, #31
 800d188:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d18c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d190:	d02b      	beq.n	800d1ea <__lshift+0xbe>
 800d192:	f1c9 0e20 	rsb	lr, r9, #32
 800d196:	468a      	mov	sl, r1
 800d198:	2200      	movs	r2, #0
 800d19a:	6818      	ldr	r0, [r3, #0]
 800d19c:	fa00 f009 	lsl.w	r0, r0, r9
 800d1a0:	4310      	orrs	r0, r2
 800d1a2:	f84a 0b04 	str.w	r0, [sl], #4
 800d1a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1aa:	459c      	cmp	ip, r3
 800d1ac:	fa22 f20e 	lsr.w	r2, r2, lr
 800d1b0:	d8f3      	bhi.n	800d19a <__lshift+0x6e>
 800d1b2:	ebac 0304 	sub.w	r3, ip, r4
 800d1b6:	3b15      	subs	r3, #21
 800d1b8:	f023 0303 	bic.w	r3, r3, #3
 800d1bc:	3304      	adds	r3, #4
 800d1be:	f104 0015 	add.w	r0, r4, #21
 800d1c2:	4584      	cmp	ip, r0
 800d1c4:	bf38      	it	cc
 800d1c6:	2304      	movcc	r3, #4
 800d1c8:	50ca      	str	r2, [r1, r3]
 800d1ca:	b10a      	cbz	r2, 800d1d0 <__lshift+0xa4>
 800d1cc:	f108 0602 	add.w	r6, r8, #2
 800d1d0:	3e01      	subs	r6, #1
 800d1d2:	4638      	mov	r0, r7
 800d1d4:	612e      	str	r6, [r5, #16]
 800d1d6:	4621      	mov	r1, r4
 800d1d8:	f7ff fdda 	bl	800cd90 <_Bfree>
 800d1dc:	4628      	mov	r0, r5
 800d1de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1e2:	f842 0f04 	str.w	r0, [r2, #4]!
 800d1e6:	3301      	adds	r3, #1
 800d1e8:	e7c5      	b.n	800d176 <__lshift+0x4a>
 800d1ea:	3904      	subs	r1, #4
 800d1ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1f0:	f841 2f04 	str.w	r2, [r1, #4]!
 800d1f4:	459c      	cmp	ip, r3
 800d1f6:	d8f9      	bhi.n	800d1ec <__lshift+0xc0>
 800d1f8:	e7ea      	b.n	800d1d0 <__lshift+0xa4>
 800d1fa:	bf00      	nop
 800d1fc:	0800e3bc 	.word	0x0800e3bc
 800d200:	0800e3cd 	.word	0x0800e3cd

0800d204 <__mcmp>:
 800d204:	690a      	ldr	r2, [r1, #16]
 800d206:	4603      	mov	r3, r0
 800d208:	6900      	ldr	r0, [r0, #16]
 800d20a:	1a80      	subs	r0, r0, r2
 800d20c:	b530      	push	{r4, r5, lr}
 800d20e:	d10e      	bne.n	800d22e <__mcmp+0x2a>
 800d210:	3314      	adds	r3, #20
 800d212:	3114      	adds	r1, #20
 800d214:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d218:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d21c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d220:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d224:	4295      	cmp	r5, r2
 800d226:	d003      	beq.n	800d230 <__mcmp+0x2c>
 800d228:	d205      	bcs.n	800d236 <__mcmp+0x32>
 800d22a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d22e:	bd30      	pop	{r4, r5, pc}
 800d230:	42a3      	cmp	r3, r4
 800d232:	d3f3      	bcc.n	800d21c <__mcmp+0x18>
 800d234:	e7fb      	b.n	800d22e <__mcmp+0x2a>
 800d236:	2001      	movs	r0, #1
 800d238:	e7f9      	b.n	800d22e <__mcmp+0x2a>
	...

0800d23c <__mdiff>:
 800d23c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d240:	4689      	mov	r9, r1
 800d242:	4606      	mov	r6, r0
 800d244:	4611      	mov	r1, r2
 800d246:	4648      	mov	r0, r9
 800d248:	4614      	mov	r4, r2
 800d24a:	f7ff ffdb 	bl	800d204 <__mcmp>
 800d24e:	1e05      	subs	r5, r0, #0
 800d250:	d112      	bne.n	800d278 <__mdiff+0x3c>
 800d252:	4629      	mov	r1, r5
 800d254:	4630      	mov	r0, r6
 800d256:	f7ff fd5b 	bl	800cd10 <_Balloc>
 800d25a:	4602      	mov	r2, r0
 800d25c:	b928      	cbnz	r0, 800d26a <__mdiff+0x2e>
 800d25e:	4b3f      	ldr	r3, [pc, #252]	@ (800d35c <__mdiff+0x120>)
 800d260:	f240 2137 	movw	r1, #567	@ 0x237
 800d264:	483e      	ldr	r0, [pc, #248]	@ (800d360 <__mdiff+0x124>)
 800d266:	f000 fcc9 	bl	800dbfc <__assert_func>
 800d26a:	2301      	movs	r3, #1
 800d26c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d270:	4610      	mov	r0, r2
 800d272:	b003      	add	sp, #12
 800d274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d278:	bfbc      	itt	lt
 800d27a:	464b      	movlt	r3, r9
 800d27c:	46a1      	movlt	r9, r4
 800d27e:	4630      	mov	r0, r6
 800d280:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d284:	bfba      	itte	lt
 800d286:	461c      	movlt	r4, r3
 800d288:	2501      	movlt	r5, #1
 800d28a:	2500      	movge	r5, #0
 800d28c:	f7ff fd40 	bl	800cd10 <_Balloc>
 800d290:	4602      	mov	r2, r0
 800d292:	b918      	cbnz	r0, 800d29c <__mdiff+0x60>
 800d294:	4b31      	ldr	r3, [pc, #196]	@ (800d35c <__mdiff+0x120>)
 800d296:	f240 2145 	movw	r1, #581	@ 0x245
 800d29a:	e7e3      	b.n	800d264 <__mdiff+0x28>
 800d29c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d2a0:	6926      	ldr	r6, [r4, #16]
 800d2a2:	60c5      	str	r5, [r0, #12]
 800d2a4:	f109 0310 	add.w	r3, r9, #16
 800d2a8:	f109 0514 	add.w	r5, r9, #20
 800d2ac:	f104 0e14 	add.w	lr, r4, #20
 800d2b0:	f100 0b14 	add.w	fp, r0, #20
 800d2b4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d2b8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d2bc:	9301      	str	r3, [sp, #4]
 800d2be:	46d9      	mov	r9, fp
 800d2c0:	f04f 0c00 	mov.w	ip, #0
 800d2c4:	9b01      	ldr	r3, [sp, #4]
 800d2c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d2ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d2ce:	9301      	str	r3, [sp, #4]
 800d2d0:	fa1f f38a 	uxth.w	r3, sl
 800d2d4:	4619      	mov	r1, r3
 800d2d6:	b283      	uxth	r3, r0
 800d2d8:	1acb      	subs	r3, r1, r3
 800d2da:	0c00      	lsrs	r0, r0, #16
 800d2dc:	4463      	add	r3, ip
 800d2de:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d2e2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d2e6:	b29b      	uxth	r3, r3
 800d2e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d2ec:	4576      	cmp	r6, lr
 800d2ee:	f849 3b04 	str.w	r3, [r9], #4
 800d2f2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d2f6:	d8e5      	bhi.n	800d2c4 <__mdiff+0x88>
 800d2f8:	1b33      	subs	r3, r6, r4
 800d2fa:	3b15      	subs	r3, #21
 800d2fc:	f023 0303 	bic.w	r3, r3, #3
 800d300:	3415      	adds	r4, #21
 800d302:	3304      	adds	r3, #4
 800d304:	42a6      	cmp	r6, r4
 800d306:	bf38      	it	cc
 800d308:	2304      	movcc	r3, #4
 800d30a:	441d      	add	r5, r3
 800d30c:	445b      	add	r3, fp
 800d30e:	461e      	mov	r6, r3
 800d310:	462c      	mov	r4, r5
 800d312:	4544      	cmp	r4, r8
 800d314:	d30e      	bcc.n	800d334 <__mdiff+0xf8>
 800d316:	f108 0103 	add.w	r1, r8, #3
 800d31a:	1b49      	subs	r1, r1, r5
 800d31c:	f021 0103 	bic.w	r1, r1, #3
 800d320:	3d03      	subs	r5, #3
 800d322:	45a8      	cmp	r8, r5
 800d324:	bf38      	it	cc
 800d326:	2100      	movcc	r1, #0
 800d328:	440b      	add	r3, r1
 800d32a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d32e:	b191      	cbz	r1, 800d356 <__mdiff+0x11a>
 800d330:	6117      	str	r7, [r2, #16]
 800d332:	e79d      	b.n	800d270 <__mdiff+0x34>
 800d334:	f854 1b04 	ldr.w	r1, [r4], #4
 800d338:	46e6      	mov	lr, ip
 800d33a:	0c08      	lsrs	r0, r1, #16
 800d33c:	fa1c fc81 	uxtah	ip, ip, r1
 800d340:	4471      	add	r1, lr
 800d342:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d346:	b289      	uxth	r1, r1
 800d348:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d34c:	f846 1b04 	str.w	r1, [r6], #4
 800d350:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d354:	e7dd      	b.n	800d312 <__mdiff+0xd6>
 800d356:	3f01      	subs	r7, #1
 800d358:	e7e7      	b.n	800d32a <__mdiff+0xee>
 800d35a:	bf00      	nop
 800d35c:	0800e3bc 	.word	0x0800e3bc
 800d360:	0800e3cd 	.word	0x0800e3cd

0800d364 <__d2b>:
 800d364:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d368:	460f      	mov	r7, r1
 800d36a:	2101      	movs	r1, #1
 800d36c:	ec59 8b10 	vmov	r8, r9, d0
 800d370:	4616      	mov	r6, r2
 800d372:	f7ff fccd 	bl	800cd10 <_Balloc>
 800d376:	4604      	mov	r4, r0
 800d378:	b930      	cbnz	r0, 800d388 <__d2b+0x24>
 800d37a:	4602      	mov	r2, r0
 800d37c:	4b23      	ldr	r3, [pc, #140]	@ (800d40c <__d2b+0xa8>)
 800d37e:	4824      	ldr	r0, [pc, #144]	@ (800d410 <__d2b+0xac>)
 800d380:	f240 310f 	movw	r1, #783	@ 0x30f
 800d384:	f000 fc3a 	bl	800dbfc <__assert_func>
 800d388:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d38c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d390:	b10d      	cbz	r5, 800d396 <__d2b+0x32>
 800d392:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d396:	9301      	str	r3, [sp, #4]
 800d398:	f1b8 0300 	subs.w	r3, r8, #0
 800d39c:	d023      	beq.n	800d3e6 <__d2b+0x82>
 800d39e:	4668      	mov	r0, sp
 800d3a0:	9300      	str	r3, [sp, #0]
 800d3a2:	f7ff fd7c 	bl	800ce9e <__lo0bits>
 800d3a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d3aa:	b1d0      	cbz	r0, 800d3e2 <__d2b+0x7e>
 800d3ac:	f1c0 0320 	rsb	r3, r0, #32
 800d3b0:	fa02 f303 	lsl.w	r3, r2, r3
 800d3b4:	430b      	orrs	r3, r1
 800d3b6:	40c2      	lsrs	r2, r0
 800d3b8:	6163      	str	r3, [r4, #20]
 800d3ba:	9201      	str	r2, [sp, #4]
 800d3bc:	9b01      	ldr	r3, [sp, #4]
 800d3be:	61a3      	str	r3, [r4, #24]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	bf0c      	ite	eq
 800d3c4:	2201      	moveq	r2, #1
 800d3c6:	2202      	movne	r2, #2
 800d3c8:	6122      	str	r2, [r4, #16]
 800d3ca:	b1a5      	cbz	r5, 800d3f6 <__d2b+0x92>
 800d3cc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d3d0:	4405      	add	r5, r0
 800d3d2:	603d      	str	r5, [r7, #0]
 800d3d4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d3d8:	6030      	str	r0, [r6, #0]
 800d3da:	4620      	mov	r0, r4
 800d3dc:	b003      	add	sp, #12
 800d3de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3e2:	6161      	str	r1, [r4, #20]
 800d3e4:	e7ea      	b.n	800d3bc <__d2b+0x58>
 800d3e6:	a801      	add	r0, sp, #4
 800d3e8:	f7ff fd59 	bl	800ce9e <__lo0bits>
 800d3ec:	9b01      	ldr	r3, [sp, #4]
 800d3ee:	6163      	str	r3, [r4, #20]
 800d3f0:	3020      	adds	r0, #32
 800d3f2:	2201      	movs	r2, #1
 800d3f4:	e7e8      	b.n	800d3c8 <__d2b+0x64>
 800d3f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d3fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d3fe:	6038      	str	r0, [r7, #0]
 800d400:	6918      	ldr	r0, [r3, #16]
 800d402:	f7ff fd2d 	bl	800ce60 <__hi0bits>
 800d406:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d40a:	e7e5      	b.n	800d3d8 <__d2b+0x74>
 800d40c:	0800e3bc 	.word	0x0800e3bc
 800d410:	0800e3cd 	.word	0x0800e3cd

0800d414 <__ssputs_r>:
 800d414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d418:	688e      	ldr	r6, [r1, #8]
 800d41a:	461f      	mov	r7, r3
 800d41c:	42be      	cmp	r6, r7
 800d41e:	680b      	ldr	r3, [r1, #0]
 800d420:	4682      	mov	sl, r0
 800d422:	460c      	mov	r4, r1
 800d424:	4690      	mov	r8, r2
 800d426:	d82d      	bhi.n	800d484 <__ssputs_r+0x70>
 800d428:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d42c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d430:	d026      	beq.n	800d480 <__ssputs_r+0x6c>
 800d432:	6965      	ldr	r5, [r4, #20]
 800d434:	6909      	ldr	r1, [r1, #16]
 800d436:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d43a:	eba3 0901 	sub.w	r9, r3, r1
 800d43e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d442:	1c7b      	adds	r3, r7, #1
 800d444:	444b      	add	r3, r9
 800d446:	106d      	asrs	r5, r5, #1
 800d448:	429d      	cmp	r5, r3
 800d44a:	bf38      	it	cc
 800d44c:	461d      	movcc	r5, r3
 800d44e:	0553      	lsls	r3, r2, #21
 800d450:	d527      	bpl.n	800d4a2 <__ssputs_r+0x8e>
 800d452:	4629      	mov	r1, r5
 800d454:	f7ff fbd0 	bl	800cbf8 <_malloc_r>
 800d458:	4606      	mov	r6, r0
 800d45a:	b360      	cbz	r0, 800d4b6 <__ssputs_r+0xa2>
 800d45c:	6921      	ldr	r1, [r4, #16]
 800d45e:	464a      	mov	r2, r9
 800d460:	f7fe fcf9 	bl	800be56 <memcpy>
 800d464:	89a3      	ldrh	r3, [r4, #12]
 800d466:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d46a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d46e:	81a3      	strh	r3, [r4, #12]
 800d470:	6126      	str	r6, [r4, #16]
 800d472:	6165      	str	r5, [r4, #20]
 800d474:	444e      	add	r6, r9
 800d476:	eba5 0509 	sub.w	r5, r5, r9
 800d47a:	6026      	str	r6, [r4, #0]
 800d47c:	60a5      	str	r5, [r4, #8]
 800d47e:	463e      	mov	r6, r7
 800d480:	42be      	cmp	r6, r7
 800d482:	d900      	bls.n	800d486 <__ssputs_r+0x72>
 800d484:	463e      	mov	r6, r7
 800d486:	6820      	ldr	r0, [r4, #0]
 800d488:	4632      	mov	r2, r6
 800d48a:	4641      	mov	r1, r8
 800d48c:	f000 fb6a 	bl	800db64 <memmove>
 800d490:	68a3      	ldr	r3, [r4, #8]
 800d492:	1b9b      	subs	r3, r3, r6
 800d494:	60a3      	str	r3, [r4, #8]
 800d496:	6823      	ldr	r3, [r4, #0]
 800d498:	4433      	add	r3, r6
 800d49a:	6023      	str	r3, [r4, #0]
 800d49c:	2000      	movs	r0, #0
 800d49e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4a2:	462a      	mov	r2, r5
 800d4a4:	f000 fbee 	bl	800dc84 <_realloc_r>
 800d4a8:	4606      	mov	r6, r0
 800d4aa:	2800      	cmp	r0, #0
 800d4ac:	d1e0      	bne.n	800d470 <__ssputs_r+0x5c>
 800d4ae:	6921      	ldr	r1, [r4, #16]
 800d4b0:	4650      	mov	r0, sl
 800d4b2:	f7ff fb2d 	bl	800cb10 <_free_r>
 800d4b6:	230c      	movs	r3, #12
 800d4b8:	f8ca 3000 	str.w	r3, [sl]
 800d4bc:	89a3      	ldrh	r3, [r4, #12]
 800d4be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4c2:	81a3      	strh	r3, [r4, #12]
 800d4c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d4c8:	e7e9      	b.n	800d49e <__ssputs_r+0x8a>
	...

0800d4cc <_svfiprintf_r>:
 800d4cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4d0:	4698      	mov	r8, r3
 800d4d2:	898b      	ldrh	r3, [r1, #12]
 800d4d4:	061b      	lsls	r3, r3, #24
 800d4d6:	b09d      	sub	sp, #116	@ 0x74
 800d4d8:	4607      	mov	r7, r0
 800d4da:	460d      	mov	r5, r1
 800d4dc:	4614      	mov	r4, r2
 800d4de:	d510      	bpl.n	800d502 <_svfiprintf_r+0x36>
 800d4e0:	690b      	ldr	r3, [r1, #16]
 800d4e2:	b973      	cbnz	r3, 800d502 <_svfiprintf_r+0x36>
 800d4e4:	2140      	movs	r1, #64	@ 0x40
 800d4e6:	f7ff fb87 	bl	800cbf8 <_malloc_r>
 800d4ea:	6028      	str	r0, [r5, #0]
 800d4ec:	6128      	str	r0, [r5, #16]
 800d4ee:	b930      	cbnz	r0, 800d4fe <_svfiprintf_r+0x32>
 800d4f0:	230c      	movs	r3, #12
 800d4f2:	603b      	str	r3, [r7, #0]
 800d4f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d4f8:	b01d      	add	sp, #116	@ 0x74
 800d4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4fe:	2340      	movs	r3, #64	@ 0x40
 800d500:	616b      	str	r3, [r5, #20]
 800d502:	2300      	movs	r3, #0
 800d504:	9309      	str	r3, [sp, #36]	@ 0x24
 800d506:	2320      	movs	r3, #32
 800d508:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d50c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d510:	2330      	movs	r3, #48	@ 0x30
 800d512:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d6b0 <_svfiprintf_r+0x1e4>
 800d516:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d51a:	f04f 0901 	mov.w	r9, #1
 800d51e:	4623      	mov	r3, r4
 800d520:	469a      	mov	sl, r3
 800d522:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d526:	b10a      	cbz	r2, 800d52c <_svfiprintf_r+0x60>
 800d528:	2a25      	cmp	r2, #37	@ 0x25
 800d52a:	d1f9      	bne.n	800d520 <_svfiprintf_r+0x54>
 800d52c:	ebba 0b04 	subs.w	fp, sl, r4
 800d530:	d00b      	beq.n	800d54a <_svfiprintf_r+0x7e>
 800d532:	465b      	mov	r3, fp
 800d534:	4622      	mov	r2, r4
 800d536:	4629      	mov	r1, r5
 800d538:	4638      	mov	r0, r7
 800d53a:	f7ff ff6b 	bl	800d414 <__ssputs_r>
 800d53e:	3001      	adds	r0, #1
 800d540:	f000 80a7 	beq.w	800d692 <_svfiprintf_r+0x1c6>
 800d544:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d546:	445a      	add	r2, fp
 800d548:	9209      	str	r2, [sp, #36]	@ 0x24
 800d54a:	f89a 3000 	ldrb.w	r3, [sl]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	f000 809f 	beq.w	800d692 <_svfiprintf_r+0x1c6>
 800d554:	2300      	movs	r3, #0
 800d556:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d55a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d55e:	f10a 0a01 	add.w	sl, sl, #1
 800d562:	9304      	str	r3, [sp, #16]
 800d564:	9307      	str	r3, [sp, #28]
 800d566:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d56a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d56c:	4654      	mov	r4, sl
 800d56e:	2205      	movs	r2, #5
 800d570:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d574:	484e      	ldr	r0, [pc, #312]	@ (800d6b0 <_svfiprintf_r+0x1e4>)
 800d576:	f7f2 fe33 	bl	80001e0 <memchr>
 800d57a:	9a04      	ldr	r2, [sp, #16]
 800d57c:	b9d8      	cbnz	r0, 800d5b6 <_svfiprintf_r+0xea>
 800d57e:	06d0      	lsls	r0, r2, #27
 800d580:	bf44      	itt	mi
 800d582:	2320      	movmi	r3, #32
 800d584:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d588:	0711      	lsls	r1, r2, #28
 800d58a:	bf44      	itt	mi
 800d58c:	232b      	movmi	r3, #43	@ 0x2b
 800d58e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d592:	f89a 3000 	ldrb.w	r3, [sl]
 800d596:	2b2a      	cmp	r3, #42	@ 0x2a
 800d598:	d015      	beq.n	800d5c6 <_svfiprintf_r+0xfa>
 800d59a:	9a07      	ldr	r2, [sp, #28]
 800d59c:	4654      	mov	r4, sl
 800d59e:	2000      	movs	r0, #0
 800d5a0:	f04f 0c0a 	mov.w	ip, #10
 800d5a4:	4621      	mov	r1, r4
 800d5a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d5aa:	3b30      	subs	r3, #48	@ 0x30
 800d5ac:	2b09      	cmp	r3, #9
 800d5ae:	d94b      	bls.n	800d648 <_svfiprintf_r+0x17c>
 800d5b0:	b1b0      	cbz	r0, 800d5e0 <_svfiprintf_r+0x114>
 800d5b2:	9207      	str	r2, [sp, #28]
 800d5b4:	e014      	b.n	800d5e0 <_svfiprintf_r+0x114>
 800d5b6:	eba0 0308 	sub.w	r3, r0, r8
 800d5ba:	fa09 f303 	lsl.w	r3, r9, r3
 800d5be:	4313      	orrs	r3, r2
 800d5c0:	9304      	str	r3, [sp, #16]
 800d5c2:	46a2      	mov	sl, r4
 800d5c4:	e7d2      	b.n	800d56c <_svfiprintf_r+0xa0>
 800d5c6:	9b03      	ldr	r3, [sp, #12]
 800d5c8:	1d19      	adds	r1, r3, #4
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	9103      	str	r1, [sp, #12]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	bfbb      	ittet	lt
 800d5d2:	425b      	neglt	r3, r3
 800d5d4:	f042 0202 	orrlt.w	r2, r2, #2
 800d5d8:	9307      	strge	r3, [sp, #28]
 800d5da:	9307      	strlt	r3, [sp, #28]
 800d5dc:	bfb8      	it	lt
 800d5de:	9204      	strlt	r2, [sp, #16]
 800d5e0:	7823      	ldrb	r3, [r4, #0]
 800d5e2:	2b2e      	cmp	r3, #46	@ 0x2e
 800d5e4:	d10a      	bne.n	800d5fc <_svfiprintf_r+0x130>
 800d5e6:	7863      	ldrb	r3, [r4, #1]
 800d5e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d5ea:	d132      	bne.n	800d652 <_svfiprintf_r+0x186>
 800d5ec:	9b03      	ldr	r3, [sp, #12]
 800d5ee:	1d1a      	adds	r2, r3, #4
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	9203      	str	r2, [sp, #12]
 800d5f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d5f8:	3402      	adds	r4, #2
 800d5fa:	9305      	str	r3, [sp, #20]
 800d5fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d6c0 <_svfiprintf_r+0x1f4>
 800d600:	7821      	ldrb	r1, [r4, #0]
 800d602:	2203      	movs	r2, #3
 800d604:	4650      	mov	r0, sl
 800d606:	f7f2 fdeb 	bl	80001e0 <memchr>
 800d60a:	b138      	cbz	r0, 800d61c <_svfiprintf_r+0x150>
 800d60c:	9b04      	ldr	r3, [sp, #16]
 800d60e:	eba0 000a 	sub.w	r0, r0, sl
 800d612:	2240      	movs	r2, #64	@ 0x40
 800d614:	4082      	lsls	r2, r0
 800d616:	4313      	orrs	r3, r2
 800d618:	3401      	adds	r4, #1
 800d61a:	9304      	str	r3, [sp, #16]
 800d61c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d620:	4824      	ldr	r0, [pc, #144]	@ (800d6b4 <_svfiprintf_r+0x1e8>)
 800d622:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d626:	2206      	movs	r2, #6
 800d628:	f7f2 fdda 	bl	80001e0 <memchr>
 800d62c:	2800      	cmp	r0, #0
 800d62e:	d036      	beq.n	800d69e <_svfiprintf_r+0x1d2>
 800d630:	4b21      	ldr	r3, [pc, #132]	@ (800d6b8 <_svfiprintf_r+0x1ec>)
 800d632:	bb1b      	cbnz	r3, 800d67c <_svfiprintf_r+0x1b0>
 800d634:	9b03      	ldr	r3, [sp, #12]
 800d636:	3307      	adds	r3, #7
 800d638:	f023 0307 	bic.w	r3, r3, #7
 800d63c:	3308      	adds	r3, #8
 800d63e:	9303      	str	r3, [sp, #12]
 800d640:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d642:	4433      	add	r3, r6
 800d644:	9309      	str	r3, [sp, #36]	@ 0x24
 800d646:	e76a      	b.n	800d51e <_svfiprintf_r+0x52>
 800d648:	fb0c 3202 	mla	r2, ip, r2, r3
 800d64c:	460c      	mov	r4, r1
 800d64e:	2001      	movs	r0, #1
 800d650:	e7a8      	b.n	800d5a4 <_svfiprintf_r+0xd8>
 800d652:	2300      	movs	r3, #0
 800d654:	3401      	adds	r4, #1
 800d656:	9305      	str	r3, [sp, #20]
 800d658:	4619      	mov	r1, r3
 800d65a:	f04f 0c0a 	mov.w	ip, #10
 800d65e:	4620      	mov	r0, r4
 800d660:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d664:	3a30      	subs	r2, #48	@ 0x30
 800d666:	2a09      	cmp	r2, #9
 800d668:	d903      	bls.n	800d672 <_svfiprintf_r+0x1a6>
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d0c6      	beq.n	800d5fc <_svfiprintf_r+0x130>
 800d66e:	9105      	str	r1, [sp, #20]
 800d670:	e7c4      	b.n	800d5fc <_svfiprintf_r+0x130>
 800d672:	fb0c 2101 	mla	r1, ip, r1, r2
 800d676:	4604      	mov	r4, r0
 800d678:	2301      	movs	r3, #1
 800d67a:	e7f0      	b.n	800d65e <_svfiprintf_r+0x192>
 800d67c:	ab03      	add	r3, sp, #12
 800d67e:	9300      	str	r3, [sp, #0]
 800d680:	462a      	mov	r2, r5
 800d682:	4b0e      	ldr	r3, [pc, #56]	@ (800d6bc <_svfiprintf_r+0x1f0>)
 800d684:	a904      	add	r1, sp, #16
 800d686:	4638      	mov	r0, r7
 800d688:	f7fd fd1a 	bl	800b0c0 <_printf_float>
 800d68c:	1c42      	adds	r2, r0, #1
 800d68e:	4606      	mov	r6, r0
 800d690:	d1d6      	bne.n	800d640 <_svfiprintf_r+0x174>
 800d692:	89ab      	ldrh	r3, [r5, #12]
 800d694:	065b      	lsls	r3, r3, #25
 800d696:	f53f af2d 	bmi.w	800d4f4 <_svfiprintf_r+0x28>
 800d69a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d69c:	e72c      	b.n	800d4f8 <_svfiprintf_r+0x2c>
 800d69e:	ab03      	add	r3, sp, #12
 800d6a0:	9300      	str	r3, [sp, #0]
 800d6a2:	462a      	mov	r2, r5
 800d6a4:	4b05      	ldr	r3, [pc, #20]	@ (800d6bc <_svfiprintf_r+0x1f0>)
 800d6a6:	a904      	add	r1, sp, #16
 800d6a8:	4638      	mov	r0, r7
 800d6aa:	f7fd ffa1 	bl	800b5f0 <_printf_i>
 800d6ae:	e7ed      	b.n	800d68c <_svfiprintf_r+0x1c0>
 800d6b0:	0800e528 	.word	0x0800e528
 800d6b4:	0800e532 	.word	0x0800e532
 800d6b8:	0800b0c1 	.word	0x0800b0c1
 800d6bc:	0800d415 	.word	0x0800d415
 800d6c0:	0800e52e 	.word	0x0800e52e

0800d6c4 <__sfputc_r>:
 800d6c4:	6893      	ldr	r3, [r2, #8]
 800d6c6:	3b01      	subs	r3, #1
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	b410      	push	{r4}
 800d6cc:	6093      	str	r3, [r2, #8]
 800d6ce:	da08      	bge.n	800d6e2 <__sfputc_r+0x1e>
 800d6d0:	6994      	ldr	r4, [r2, #24]
 800d6d2:	42a3      	cmp	r3, r4
 800d6d4:	db01      	blt.n	800d6da <__sfputc_r+0x16>
 800d6d6:	290a      	cmp	r1, #10
 800d6d8:	d103      	bne.n	800d6e2 <__sfputc_r+0x1e>
 800d6da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6de:	f7fe ba50 	b.w	800bb82 <__swbuf_r>
 800d6e2:	6813      	ldr	r3, [r2, #0]
 800d6e4:	1c58      	adds	r0, r3, #1
 800d6e6:	6010      	str	r0, [r2, #0]
 800d6e8:	7019      	strb	r1, [r3, #0]
 800d6ea:	4608      	mov	r0, r1
 800d6ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6f0:	4770      	bx	lr

0800d6f2 <__sfputs_r>:
 800d6f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6f4:	4606      	mov	r6, r0
 800d6f6:	460f      	mov	r7, r1
 800d6f8:	4614      	mov	r4, r2
 800d6fa:	18d5      	adds	r5, r2, r3
 800d6fc:	42ac      	cmp	r4, r5
 800d6fe:	d101      	bne.n	800d704 <__sfputs_r+0x12>
 800d700:	2000      	movs	r0, #0
 800d702:	e007      	b.n	800d714 <__sfputs_r+0x22>
 800d704:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d708:	463a      	mov	r2, r7
 800d70a:	4630      	mov	r0, r6
 800d70c:	f7ff ffda 	bl	800d6c4 <__sfputc_r>
 800d710:	1c43      	adds	r3, r0, #1
 800d712:	d1f3      	bne.n	800d6fc <__sfputs_r+0xa>
 800d714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d718 <_vfiprintf_r>:
 800d718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d71c:	460d      	mov	r5, r1
 800d71e:	b09d      	sub	sp, #116	@ 0x74
 800d720:	4614      	mov	r4, r2
 800d722:	4698      	mov	r8, r3
 800d724:	4606      	mov	r6, r0
 800d726:	b118      	cbz	r0, 800d730 <_vfiprintf_r+0x18>
 800d728:	6a03      	ldr	r3, [r0, #32]
 800d72a:	b90b      	cbnz	r3, 800d730 <_vfiprintf_r+0x18>
 800d72c:	f7fe f90c 	bl	800b948 <__sinit>
 800d730:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d732:	07d9      	lsls	r1, r3, #31
 800d734:	d405      	bmi.n	800d742 <_vfiprintf_r+0x2a>
 800d736:	89ab      	ldrh	r3, [r5, #12]
 800d738:	059a      	lsls	r2, r3, #22
 800d73a:	d402      	bmi.n	800d742 <_vfiprintf_r+0x2a>
 800d73c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d73e:	f7fe fb88 	bl	800be52 <__retarget_lock_acquire_recursive>
 800d742:	89ab      	ldrh	r3, [r5, #12]
 800d744:	071b      	lsls	r3, r3, #28
 800d746:	d501      	bpl.n	800d74c <_vfiprintf_r+0x34>
 800d748:	692b      	ldr	r3, [r5, #16]
 800d74a:	b99b      	cbnz	r3, 800d774 <_vfiprintf_r+0x5c>
 800d74c:	4629      	mov	r1, r5
 800d74e:	4630      	mov	r0, r6
 800d750:	f7fe fa56 	bl	800bc00 <__swsetup_r>
 800d754:	b170      	cbz	r0, 800d774 <_vfiprintf_r+0x5c>
 800d756:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d758:	07dc      	lsls	r4, r3, #31
 800d75a:	d504      	bpl.n	800d766 <_vfiprintf_r+0x4e>
 800d75c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d760:	b01d      	add	sp, #116	@ 0x74
 800d762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d766:	89ab      	ldrh	r3, [r5, #12]
 800d768:	0598      	lsls	r0, r3, #22
 800d76a:	d4f7      	bmi.n	800d75c <_vfiprintf_r+0x44>
 800d76c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d76e:	f7fe fb71 	bl	800be54 <__retarget_lock_release_recursive>
 800d772:	e7f3      	b.n	800d75c <_vfiprintf_r+0x44>
 800d774:	2300      	movs	r3, #0
 800d776:	9309      	str	r3, [sp, #36]	@ 0x24
 800d778:	2320      	movs	r3, #32
 800d77a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d77e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d782:	2330      	movs	r3, #48	@ 0x30
 800d784:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d934 <_vfiprintf_r+0x21c>
 800d788:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d78c:	f04f 0901 	mov.w	r9, #1
 800d790:	4623      	mov	r3, r4
 800d792:	469a      	mov	sl, r3
 800d794:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d798:	b10a      	cbz	r2, 800d79e <_vfiprintf_r+0x86>
 800d79a:	2a25      	cmp	r2, #37	@ 0x25
 800d79c:	d1f9      	bne.n	800d792 <_vfiprintf_r+0x7a>
 800d79e:	ebba 0b04 	subs.w	fp, sl, r4
 800d7a2:	d00b      	beq.n	800d7bc <_vfiprintf_r+0xa4>
 800d7a4:	465b      	mov	r3, fp
 800d7a6:	4622      	mov	r2, r4
 800d7a8:	4629      	mov	r1, r5
 800d7aa:	4630      	mov	r0, r6
 800d7ac:	f7ff ffa1 	bl	800d6f2 <__sfputs_r>
 800d7b0:	3001      	adds	r0, #1
 800d7b2:	f000 80a7 	beq.w	800d904 <_vfiprintf_r+0x1ec>
 800d7b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d7b8:	445a      	add	r2, fp
 800d7ba:	9209      	str	r2, [sp, #36]	@ 0x24
 800d7bc:	f89a 3000 	ldrb.w	r3, [sl]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	f000 809f 	beq.w	800d904 <_vfiprintf_r+0x1ec>
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d7cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d7d0:	f10a 0a01 	add.w	sl, sl, #1
 800d7d4:	9304      	str	r3, [sp, #16]
 800d7d6:	9307      	str	r3, [sp, #28]
 800d7d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d7dc:	931a      	str	r3, [sp, #104]	@ 0x68
 800d7de:	4654      	mov	r4, sl
 800d7e0:	2205      	movs	r2, #5
 800d7e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7e6:	4853      	ldr	r0, [pc, #332]	@ (800d934 <_vfiprintf_r+0x21c>)
 800d7e8:	f7f2 fcfa 	bl	80001e0 <memchr>
 800d7ec:	9a04      	ldr	r2, [sp, #16]
 800d7ee:	b9d8      	cbnz	r0, 800d828 <_vfiprintf_r+0x110>
 800d7f0:	06d1      	lsls	r1, r2, #27
 800d7f2:	bf44      	itt	mi
 800d7f4:	2320      	movmi	r3, #32
 800d7f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d7fa:	0713      	lsls	r3, r2, #28
 800d7fc:	bf44      	itt	mi
 800d7fe:	232b      	movmi	r3, #43	@ 0x2b
 800d800:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d804:	f89a 3000 	ldrb.w	r3, [sl]
 800d808:	2b2a      	cmp	r3, #42	@ 0x2a
 800d80a:	d015      	beq.n	800d838 <_vfiprintf_r+0x120>
 800d80c:	9a07      	ldr	r2, [sp, #28]
 800d80e:	4654      	mov	r4, sl
 800d810:	2000      	movs	r0, #0
 800d812:	f04f 0c0a 	mov.w	ip, #10
 800d816:	4621      	mov	r1, r4
 800d818:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d81c:	3b30      	subs	r3, #48	@ 0x30
 800d81e:	2b09      	cmp	r3, #9
 800d820:	d94b      	bls.n	800d8ba <_vfiprintf_r+0x1a2>
 800d822:	b1b0      	cbz	r0, 800d852 <_vfiprintf_r+0x13a>
 800d824:	9207      	str	r2, [sp, #28]
 800d826:	e014      	b.n	800d852 <_vfiprintf_r+0x13a>
 800d828:	eba0 0308 	sub.w	r3, r0, r8
 800d82c:	fa09 f303 	lsl.w	r3, r9, r3
 800d830:	4313      	orrs	r3, r2
 800d832:	9304      	str	r3, [sp, #16]
 800d834:	46a2      	mov	sl, r4
 800d836:	e7d2      	b.n	800d7de <_vfiprintf_r+0xc6>
 800d838:	9b03      	ldr	r3, [sp, #12]
 800d83a:	1d19      	adds	r1, r3, #4
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	9103      	str	r1, [sp, #12]
 800d840:	2b00      	cmp	r3, #0
 800d842:	bfbb      	ittet	lt
 800d844:	425b      	neglt	r3, r3
 800d846:	f042 0202 	orrlt.w	r2, r2, #2
 800d84a:	9307      	strge	r3, [sp, #28]
 800d84c:	9307      	strlt	r3, [sp, #28]
 800d84e:	bfb8      	it	lt
 800d850:	9204      	strlt	r2, [sp, #16]
 800d852:	7823      	ldrb	r3, [r4, #0]
 800d854:	2b2e      	cmp	r3, #46	@ 0x2e
 800d856:	d10a      	bne.n	800d86e <_vfiprintf_r+0x156>
 800d858:	7863      	ldrb	r3, [r4, #1]
 800d85a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d85c:	d132      	bne.n	800d8c4 <_vfiprintf_r+0x1ac>
 800d85e:	9b03      	ldr	r3, [sp, #12]
 800d860:	1d1a      	adds	r2, r3, #4
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	9203      	str	r2, [sp, #12]
 800d866:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d86a:	3402      	adds	r4, #2
 800d86c:	9305      	str	r3, [sp, #20]
 800d86e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d944 <_vfiprintf_r+0x22c>
 800d872:	7821      	ldrb	r1, [r4, #0]
 800d874:	2203      	movs	r2, #3
 800d876:	4650      	mov	r0, sl
 800d878:	f7f2 fcb2 	bl	80001e0 <memchr>
 800d87c:	b138      	cbz	r0, 800d88e <_vfiprintf_r+0x176>
 800d87e:	9b04      	ldr	r3, [sp, #16]
 800d880:	eba0 000a 	sub.w	r0, r0, sl
 800d884:	2240      	movs	r2, #64	@ 0x40
 800d886:	4082      	lsls	r2, r0
 800d888:	4313      	orrs	r3, r2
 800d88a:	3401      	adds	r4, #1
 800d88c:	9304      	str	r3, [sp, #16]
 800d88e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d892:	4829      	ldr	r0, [pc, #164]	@ (800d938 <_vfiprintf_r+0x220>)
 800d894:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d898:	2206      	movs	r2, #6
 800d89a:	f7f2 fca1 	bl	80001e0 <memchr>
 800d89e:	2800      	cmp	r0, #0
 800d8a0:	d03f      	beq.n	800d922 <_vfiprintf_r+0x20a>
 800d8a2:	4b26      	ldr	r3, [pc, #152]	@ (800d93c <_vfiprintf_r+0x224>)
 800d8a4:	bb1b      	cbnz	r3, 800d8ee <_vfiprintf_r+0x1d6>
 800d8a6:	9b03      	ldr	r3, [sp, #12]
 800d8a8:	3307      	adds	r3, #7
 800d8aa:	f023 0307 	bic.w	r3, r3, #7
 800d8ae:	3308      	adds	r3, #8
 800d8b0:	9303      	str	r3, [sp, #12]
 800d8b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8b4:	443b      	add	r3, r7
 800d8b6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d8b8:	e76a      	b.n	800d790 <_vfiprintf_r+0x78>
 800d8ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800d8be:	460c      	mov	r4, r1
 800d8c0:	2001      	movs	r0, #1
 800d8c2:	e7a8      	b.n	800d816 <_vfiprintf_r+0xfe>
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	3401      	adds	r4, #1
 800d8c8:	9305      	str	r3, [sp, #20]
 800d8ca:	4619      	mov	r1, r3
 800d8cc:	f04f 0c0a 	mov.w	ip, #10
 800d8d0:	4620      	mov	r0, r4
 800d8d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d8d6:	3a30      	subs	r2, #48	@ 0x30
 800d8d8:	2a09      	cmp	r2, #9
 800d8da:	d903      	bls.n	800d8e4 <_vfiprintf_r+0x1cc>
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d0c6      	beq.n	800d86e <_vfiprintf_r+0x156>
 800d8e0:	9105      	str	r1, [sp, #20]
 800d8e2:	e7c4      	b.n	800d86e <_vfiprintf_r+0x156>
 800d8e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800d8e8:	4604      	mov	r4, r0
 800d8ea:	2301      	movs	r3, #1
 800d8ec:	e7f0      	b.n	800d8d0 <_vfiprintf_r+0x1b8>
 800d8ee:	ab03      	add	r3, sp, #12
 800d8f0:	9300      	str	r3, [sp, #0]
 800d8f2:	462a      	mov	r2, r5
 800d8f4:	4b12      	ldr	r3, [pc, #72]	@ (800d940 <_vfiprintf_r+0x228>)
 800d8f6:	a904      	add	r1, sp, #16
 800d8f8:	4630      	mov	r0, r6
 800d8fa:	f7fd fbe1 	bl	800b0c0 <_printf_float>
 800d8fe:	4607      	mov	r7, r0
 800d900:	1c78      	adds	r0, r7, #1
 800d902:	d1d6      	bne.n	800d8b2 <_vfiprintf_r+0x19a>
 800d904:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d906:	07d9      	lsls	r1, r3, #31
 800d908:	d405      	bmi.n	800d916 <_vfiprintf_r+0x1fe>
 800d90a:	89ab      	ldrh	r3, [r5, #12]
 800d90c:	059a      	lsls	r2, r3, #22
 800d90e:	d402      	bmi.n	800d916 <_vfiprintf_r+0x1fe>
 800d910:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d912:	f7fe fa9f 	bl	800be54 <__retarget_lock_release_recursive>
 800d916:	89ab      	ldrh	r3, [r5, #12]
 800d918:	065b      	lsls	r3, r3, #25
 800d91a:	f53f af1f 	bmi.w	800d75c <_vfiprintf_r+0x44>
 800d91e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d920:	e71e      	b.n	800d760 <_vfiprintf_r+0x48>
 800d922:	ab03      	add	r3, sp, #12
 800d924:	9300      	str	r3, [sp, #0]
 800d926:	462a      	mov	r2, r5
 800d928:	4b05      	ldr	r3, [pc, #20]	@ (800d940 <_vfiprintf_r+0x228>)
 800d92a:	a904      	add	r1, sp, #16
 800d92c:	4630      	mov	r0, r6
 800d92e:	f7fd fe5f 	bl	800b5f0 <_printf_i>
 800d932:	e7e4      	b.n	800d8fe <_vfiprintf_r+0x1e6>
 800d934:	0800e528 	.word	0x0800e528
 800d938:	0800e532 	.word	0x0800e532
 800d93c:	0800b0c1 	.word	0x0800b0c1
 800d940:	0800d6f3 	.word	0x0800d6f3
 800d944:	0800e52e 	.word	0x0800e52e

0800d948 <__sflush_r>:
 800d948:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d94c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d950:	0716      	lsls	r6, r2, #28
 800d952:	4605      	mov	r5, r0
 800d954:	460c      	mov	r4, r1
 800d956:	d454      	bmi.n	800da02 <__sflush_r+0xba>
 800d958:	684b      	ldr	r3, [r1, #4]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	dc02      	bgt.n	800d964 <__sflush_r+0x1c>
 800d95e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d960:	2b00      	cmp	r3, #0
 800d962:	dd48      	ble.n	800d9f6 <__sflush_r+0xae>
 800d964:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d966:	2e00      	cmp	r6, #0
 800d968:	d045      	beq.n	800d9f6 <__sflush_r+0xae>
 800d96a:	2300      	movs	r3, #0
 800d96c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d970:	682f      	ldr	r7, [r5, #0]
 800d972:	6a21      	ldr	r1, [r4, #32]
 800d974:	602b      	str	r3, [r5, #0]
 800d976:	d030      	beq.n	800d9da <__sflush_r+0x92>
 800d978:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d97a:	89a3      	ldrh	r3, [r4, #12]
 800d97c:	0759      	lsls	r1, r3, #29
 800d97e:	d505      	bpl.n	800d98c <__sflush_r+0x44>
 800d980:	6863      	ldr	r3, [r4, #4]
 800d982:	1ad2      	subs	r2, r2, r3
 800d984:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d986:	b10b      	cbz	r3, 800d98c <__sflush_r+0x44>
 800d988:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d98a:	1ad2      	subs	r2, r2, r3
 800d98c:	2300      	movs	r3, #0
 800d98e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d990:	6a21      	ldr	r1, [r4, #32]
 800d992:	4628      	mov	r0, r5
 800d994:	47b0      	blx	r6
 800d996:	1c43      	adds	r3, r0, #1
 800d998:	89a3      	ldrh	r3, [r4, #12]
 800d99a:	d106      	bne.n	800d9aa <__sflush_r+0x62>
 800d99c:	6829      	ldr	r1, [r5, #0]
 800d99e:	291d      	cmp	r1, #29
 800d9a0:	d82b      	bhi.n	800d9fa <__sflush_r+0xb2>
 800d9a2:	4a2a      	ldr	r2, [pc, #168]	@ (800da4c <__sflush_r+0x104>)
 800d9a4:	410a      	asrs	r2, r1
 800d9a6:	07d6      	lsls	r6, r2, #31
 800d9a8:	d427      	bmi.n	800d9fa <__sflush_r+0xb2>
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	6062      	str	r2, [r4, #4]
 800d9ae:	04d9      	lsls	r1, r3, #19
 800d9b0:	6922      	ldr	r2, [r4, #16]
 800d9b2:	6022      	str	r2, [r4, #0]
 800d9b4:	d504      	bpl.n	800d9c0 <__sflush_r+0x78>
 800d9b6:	1c42      	adds	r2, r0, #1
 800d9b8:	d101      	bne.n	800d9be <__sflush_r+0x76>
 800d9ba:	682b      	ldr	r3, [r5, #0]
 800d9bc:	b903      	cbnz	r3, 800d9c0 <__sflush_r+0x78>
 800d9be:	6560      	str	r0, [r4, #84]	@ 0x54
 800d9c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d9c2:	602f      	str	r7, [r5, #0]
 800d9c4:	b1b9      	cbz	r1, 800d9f6 <__sflush_r+0xae>
 800d9c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d9ca:	4299      	cmp	r1, r3
 800d9cc:	d002      	beq.n	800d9d4 <__sflush_r+0x8c>
 800d9ce:	4628      	mov	r0, r5
 800d9d0:	f7ff f89e 	bl	800cb10 <_free_r>
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	6363      	str	r3, [r4, #52]	@ 0x34
 800d9d8:	e00d      	b.n	800d9f6 <__sflush_r+0xae>
 800d9da:	2301      	movs	r3, #1
 800d9dc:	4628      	mov	r0, r5
 800d9de:	47b0      	blx	r6
 800d9e0:	4602      	mov	r2, r0
 800d9e2:	1c50      	adds	r0, r2, #1
 800d9e4:	d1c9      	bne.n	800d97a <__sflush_r+0x32>
 800d9e6:	682b      	ldr	r3, [r5, #0]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d0c6      	beq.n	800d97a <__sflush_r+0x32>
 800d9ec:	2b1d      	cmp	r3, #29
 800d9ee:	d001      	beq.n	800d9f4 <__sflush_r+0xac>
 800d9f0:	2b16      	cmp	r3, #22
 800d9f2:	d11e      	bne.n	800da32 <__sflush_r+0xea>
 800d9f4:	602f      	str	r7, [r5, #0]
 800d9f6:	2000      	movs	r0, #0
 800d9f8:	e022      	b.n	800da40 <__sflush_r+0xf8>
 800d9fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d9fe:	b21b      	sxth	r3, r3
 800da00:	e01b      	b.n	800da3a <__sflush_r+0xf2>
 800da02:	690f      	ldr	r7, [r1, #16]
 800da04:	2f00      	cmp	r7, #0
 800da06:	d0f6      	beq.n	800d9f6 <__sflush_r+0xae>
 800da08:	0793      	lsls	r3, r2, #30
 800da0a:	680e      	ldr	r6, [r1, #0]
 800da0c:	bf08      	it	eq
 800da0e:	694b      	ldreq	r3, [r1, #20]
 800da10:	600f      	str	r7, [r1, #0]
 800da12:	bf18      	it	ne
 800da14:	2300      	movne	r3, #0
 800da16:	eba6 0807 	sub.w	r8, r6, r7
 800da1a:	608b      	str	r3, [r1, #8]
 800da1c:	f1b8 0f00 	cmp.w	r8, #0
 800da20:	dde9      	ble.n	800d9f6 <__sflush_r+0xae>
 800da22:	6a21      	ldr	r1, [r4, #32]
 800da24:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800da26:	4643      	mov	r3, r8
 800da28:	463a      	mov	r2, r7
 800da2a:	4628      	mov	r0, r5
 800da2c:	47b0      	blx	r6
 800da2e:	2800      	cmp	r0, #0
 800da30:	dc08      	bgt.n	800da44 <__sflush_r+0xfc>
 800da32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da3a:	81a3      	strh	r3, [r4, #12]
 800da3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800da40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da44:	4407      	add	r7, r0
 800da46:	eba8 0800 	sub.w	r8, r8, r0
 800da4a:	e7e7      	b.n	800da1c <__sflush_r+0xd4>
 800da4c:	dfbffffe 	.word	0xdfbffffe

0800da50 <_fflush_r>:
 800da50:	b538      	push	{r3, r4, r5, lr}
 800da52:	690b      	ldr	r3, [r1, #16]
 800da54:	4605      	mov	r5, r0
 800da56:	460c      	mov	r4, r1
 800da58:	b913      	cbnz	r3, 800da60 <_fflush_r+0x10>
 800da5a:	2500      	movs	r5, #0
 800da5c:	4628      	mov	r0, r5
 800da5e:	bd38      	pop	{r3, r4, r5, pc}
 800da60:	b118      	cbz	r0, 800da6a <_fflush_r+0x1a>
 800da62:	6a03      	ldr	r3, [r0, #32]
 800da64:	b90b      	cbnz	r3, 800da6a <_fflush_r+0x1a>
 800da66:	f7fd ff6f 	bl	800b948 <__sinit>
 800da6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d0f3      	beq.n	800da5a <_fflush_r+0xa>
 800da72:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800da74:	07d0      	lsls	r0, r2, #31
 800da76:	d404      	bmi.n	800da82 <_fflush_r+0x32>
 800da78:	0599      	lsls	r1, r3, #22
 800da7a:	d402      	bmi.n	800da82 <_fflush_r+0x32>
 800da7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800da7e:	f7fe f9e8 	bl	800be52 <__retarget_lock_acquire_recursive>
 800da82:	4628      	mov	r0, r5
 800da84:	4621      	mov	r1, r4
 800da86:	f7ff ff5f 	bl	800d948 <__sflush_r>
 800da8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800da8c:	07da      	lsls	r2, r3, #31
 800da8e:	4605      	mov	r5, r0
 800da90:	d4e4      	bmi.n	800da5c <_fflush_r+0xc>
 800da92:	89a3      	ldrh	r3, [r4, #12]
 800da94:	059b      	lsls	r3, r3, #22
 800da96:	d4e1      	bmi.n	800da5c <_fflush_r+0xc>
 800da98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800da9a:	f7fe f9db 	bl	800be54 <__retarget_lock_release_recursive>
 800da9e:	e7dd      	b.n	800da5c <_fflush_r+0xc>

0800daa0 <__swhatbuf_r>:
 800daa0:	b570      	push	{r4, r5, r6, lr}
 800daa2:	460c      	mov	r4, r1
 800daa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800daa8:	2900      	cmp	r1, #0
 800daaa:	b096      	sub	sp, #88	@ 0x58
 800daac:	4615      	mov	r5, r2
 800daae:	461e      	mov	r6, r3
 800dab0:	da0d      	bge.n	800dace <__swhatbuf_r+0x2e>
 800dab2:	89a3      	ldrh	r3, [r4, #12]
 800dab4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dab8:	f04f 0100 	mov.w	r1, #0
 800dabc:	bf14      	ite	ne
 800dabe:	2340      	movne	r3, #64	@ 0x40
 800dac0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dac4:	2000      	movs	r0, #0
 800dac6:	6031      	str	r1, [r6, #0]
 800dac8:	602b      	str	r3, [r5, #0]
 800daca:	b016      	add	sp, #88	@ 0x58
 800dacc:	bd70      	pop	{r4, r5, r6, pc}
 800dace:	466a      	mov	r2, sp
 800dad0:	f000 f862 	bl	800db98 <_fstat_r>
 800dad4:	2800      	cmp	r0, #0
 800dad6:	dbec      	blt.n	800dab2 <__swhatbuf_r+0x12>
 800dad8:	9901      	ldr	r1, [sp, #4]
 800dada:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dade:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dae2:	4259      	negs	r1, r3
 800dae4:	4159      	adcs	r1, r3
 800dae6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800daea:	e7eb      	b.n	800dac4 <__swhatbuf_r+0x24>

0800daec <__smakebuf_r>:
 800daec:	898b      	ldrh	r3, [r1, #12]
 800daee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800daf0:	079d      	lsls	r5, r3, #30
 800daf2:	4606      	mov	r6, r0
 800daf4:	460c      	mov	r4, r1
 800daf6:	d507      	bpl.n	800db08 <__smakebuf_r+0x1c>
 800daf8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dafc:	6023      	str	r3, [r4, #0]
 800dafe:	6123      	str	r3, [r4, #16]
 800db00:	2301      	movs	r3, #1
 800db02:	6163      	str	r3, [r4, #20]
 800db04:	b003      	add	sp, #12
 800db06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db08:	ab01      	add	r3, sp, #4
 800db0a:	466a      	mov	r2, sp
 800db0c:	f7ff ffc8 	bl	800daa0 <__swhatbuf_r>
 800db10:	9f00      	ldr	r7, [sp, #0]
 800db12:	4605      	mov	r5, r0
 800db14:	4639      	mov	r1, r7
 800db16:	4630      	mov	r0, r6
 800db18:	f7ff f86e 	bl	800cbf8 <_malloc_r>
 800db1c:	b948      	cbnz	r0, 800db32 <__smakebuf_r+0x46>
 800db1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db22:	059a      	lsls	r2, r3, #22
 800db24:	d4ee      	bmi.n	800db04 <__smakebuf_r+0x18>
 800db26:	f023 0303 	bic.w	r3, r3, #3
 800db2a:	f043 0302 	orr.w	r3, r3, #2
 800db2e:	81a3      	strh	r3, [r4, #12]
 800db30:	e7e2      	b.n	800daf8 <__smakebuf_r+0xc>
 800db32:	89a3      	ldrh	r3, [r4, #12]
 800db34:	6020      	str	r0, [r4, #0]
 800db36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db3a:	81a3      	strh	r3, [r4, #12]
 800db3c:	9b01      	ldr	r3, [sp, #4]
 800db3e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800db42:	b15b      	cbz	r3, 800db5c <__smakebuf_r+0x70>
 800db44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db48:	4630      	mov	r0, r6
 800db4a:	f000 f837 	bl	800dbbc <_isatty_r>
 800db4e:	b128      	cbz	r0, 800db5c <__smakebuf_r+0x70>
 800db50:	89a3      	ldrh	r3, [r4, #12]
 800db52:	f023 0303 	bic.w	r3, r3, #3
 800db56:	f043 0301 	orr.w	r3, r3, #1
 800db5a:	81a3      	strh	r3, [r4, #12]
 800db5c:	89a3      	ldrh	r3, [r4, #12]
 800db5e:	431d      	orrs	r5, r3
 800db60:	81a5      	strh	r5, [r4, #12]
 800db62:	e7cf      	b.n	800db04 <__smakebuf_r+0x18>

0800db64 <memmove>:
 800db64:	4288      	cmp	r0, r1
 800db66:	b510      	push	{r4, lr}
 800db68:	eb01 0402 	add.w	r4, r1, r2
 800db6c:	d902      	bls.n	800db74 <memmove+0x10>
 800db6e:	4284      	cmp	r4, r0
 800db70:	4623      	mov	r3, r4
 800db72:	d807      	bhi.n	800db84 <memmove+0x20>
 800db74:	1e43      	subs	r3, r0, #1
 800db76:	42a1      	cmp	r1, r4
 800db78:	d008      	beq.n	800db8c <memmove+0x28>
 800db7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800db82:	e7f8      	b.n	800db76 <memmove+0x12>
 800db84:	4402      	add	r2, r0
 800db86:	4601      	mov	r1, r0
 800db88:	428a      	cmp	r2, r1
 800db8a:	d100      	bne.n	800db8e <memmove+0x2a>
 800db8c:	bd10      	pop	{r4, pc}
 800db8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800db92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800db96:	e7f7      	b.n	800db88 <memmove+0x24>

0800db98 <_fstat_r>:
 800db98:	b538      	push	{r3, r4, r5, lr}
 800db9a:	4d07      	ldr	r5, [pc, #28]	@ (800dbb8 <_fstat_r+0x20>)
 800db9c:	2300      	movs	r3, #0
 800db9e:	4604      	mov	r4, r0
 800dba0:	4608      	mov	r0, r1
 800dba2:	4611      	mov	r1, r2
 800dba4:	602b      	str	r3, [r5, #0]
 800dba6:	f7f4 ffb5 	bl	8002b14 <_fstat>
 800dbaa:	1c43      	adds	r3, r0, #1
 800dbac:	d102      	bne.n	800dbb4 <_fstat_r+0x1c>
 800dbae:	682b      	ldr	r3, [r5, #0]
 800dbb0:	b103      	cbz	r3, 800dbb4 <_fstat_r+0x1c>
 800dbb2:	6023      	str	r3, [r4, #0]
 800dbb4:	bd38      	pop	{r3, r4, r5, pc}
 800dbb6:	bf00      	nop
 800dbb8:	2000507c 	.word	0x2000507c

0800dbbc <_isatty_r>:
 800dbbc:	b538      	push	{r3, r4, r5, lr}
 800dbbe:	4d06      	ldr	r5, [pc, #24]	@ (800dbd8 <_isatty_r+0x1c>)
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	4604      	mov	r4, r0
 800dbc4:	4608      	mov	r0, r1
 800dbc6:	602b      	str	r3, [r5, #0]
 800dbc8:	f7f4 ffb4 	bl	8002b34 <_isatty>
 800dbcc:	1c43      	adds	r3, r0, #1
 800dbce:	d102      	bne.n	800dbd6 <_isatty_r+0x1a>
 800dbd0:	682b      	ldr	r3, [r5, #0]
 800dbd2:	b103      	cbz	r3, 800dbd6 <_isatty_r+0x1a>
 800dbd4:	6023      	str	r3, [r4, #0]
 800dbd6:	bd38      	pop	{r3, r4, r5, pc}
 800dbd8:	2000507c 	.word	0x2000507c

0800dbdc <_sbrk_r>:
 800dbdc:	b538      	push	{r3, r4, r5, lr}
 800dbde:	4d06      	ldr	r5, [pc, #24]	@ (800dbf8 <_sbrk_r+0x1c>)
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	4604      	mov	r4, r0
 800dbe4:	4608      	mov	r0, r1
 800dbe6:	602b      	str	r3, [r5, #0]
 800dbe8:	f7f4 ffbc 	bl	8002b64 <_sbrk>
 800dbec:	1c43      	adds	r3, r0, #1
 800dbee:	d102      	bne.n	800dbf6 <_sbrk_r+0x1a>
 800dbf0:	682b      	ldr	r3, [r5, #0]
 800dbf2:	b103      	cbz	r3, 800dbf6 <_sbrk_r+0x1a>
 800dbf4:	6023      	str	r3, [r4, #0]
 800dbf6:	bd38      	pop	{r3, r4, r5, pc}
 800dbf8:	2000507c 	.word	0x2000507c

0800dbfc <__assert_func>:
 800dbfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dbfe:	4614      	mov	r4, r2
 800dc00:	461a      	mov	r2, r3
 800dc02:	4b09      	ldr	r3, [pc, #36]	@ (800dc28 <__assert_func+0x2c>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	4605      	mov	r5, r0
 800dc08:	68d8      	ldr	r0, [r3, #12]
 800dc0a:	b954      	cbnz	r4, 800dc22 <__assert_func+0x26>
 800dc0c:	4b07      	ldr	r3, [pc, #28]	@ (800dc2c <__assert_func+0x30>)
 800dc0e:	461c      	mov	r4, r3
 800dc10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dc14:	9100      	str	r1, [sp, #0]
 800dc16:	462b      	mov	r3, r5
 800dc18:	4905      	ldr	r1, [pc, #20]	@ (800dc30 <__assert_func+0x34>)
 800dc1a:	f000 f86f 	bl	800dcfc <fiprintf>
 800dc1e:	f000 f87f 	bl	800dd20 <abort>
 800dc22:	4b04      	ldr	r3, [pc, #16]	@ (800dc34 <__assert_func+0x38>)
 800dc24:	e7f4      	b.n	800dc10 <__assert_func+0x14>
 800dc26:	bf00      	nop
 800dc28:	20000038 	.word	0x20000038
 800dc2c:	0800e57e 	.word	0x0800e57e
 800dc30:	0800e550 	.word	0x0800e550
 800dc34:	0800e543 	.word	0x0800e543

0800dc38 <_calloc_r>:
 800dc38:	b570      	push	{r4, r5, r6, lr}
 800dc3a:	fba1 5402 	umull	r5, r4, r1, r2
 800dc3e:	b93c      	cbnz	r4, 800dc50 <_calloc_r+0x18>
 800dc40:	4629      	mov	r1, r5
 800dc42:	f7fe ffd9 	bl	800cbf8 <_malloc_r>
 800dc46:	4606      	mov	r6, r0
 800dc48:	b928      	cbnz	r0, 800dc56 <_calloc_r+0x1e>
 800dc4a:	2600      	movs	r6, #0
 800dc4c:	4630      	mov	r0, r6
 800dc4e:	bd70      	pop	{r4, r5, r6, pc}
 800dc50:	220c      	movs	r2, #12
 800dc52:	6002      	str	r2, [r0, #0]
 800dc54:	e7f9      	b.n	800dc4a <_calloc_r+0x12>
 800dc56:	462a      	mov	r2, r5
 800dc58:	4621      	mov	r1, r4
 800dc5a:	f7fe f827 	bl	800bcac <memset>
 800dc5e:	e7f5      	b.n	800dc4c <_calloc_r+0x14>

0800dc60 <__ascii_mbtowc>:
 800dc60:	b082      	sub	sp, #8
 800dc62:	b901      	cbnz	r1, 800dc66 <__ascii_mbtowc+0x6>
 800dc64:	a901      	add	r1, sp, #4
 800dc66:	b142      	cbz	r2, 800dc7a <__ascii_mbtowc+0x1a>
 800dc68:	b14b      	cbz	r3, 800dc7e <__ascii_mbtowc+0x1e>
 800dc6a:	7813      	ldrb	r3, [r2, #0]
 800dc6c:	600b      	str	r3, [r1, #0]
 800dc6e:	7812      	ldrb	r2, [r2, #0]
 800dc70:	1e10      	subs	r0, r2, #0
 800dc72:	bf18      	it	ne
 800dc74:	2001      	movne	r0, #1
 800dc76:	b002      	add	sp, #8
 800dc78:	4770      	bx	lr
 800dc7a:	4610      	mov	r0, r2
 800dc7c:	e7fb      	b.n	800dc76 <__ascii_mbtowc+0x16>
 800dc7e:	f06f 0001 	mvn.w	r0, #1
 800dc82:	e7f8      	b.n	800dc76 <__ascii_mbtowc+0x16>

0800dc84 <_realloc_r>:
 800dc84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc88:	4680      	mov	r8, r0
 800dc8a:	4615      	mov	r5, r2
 800dc8c:	460c      	mov	r4, r1
 800dc8e:	b921      	cbnz	r1, 800dc9a <_realloc_r+0x16>
 800dc90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc94:	4611      	mov	r1, r2
 800dc96:	f7fe bfaf 	b.w	800cbf8 <_malloc_r>
 800dc9a:	b92a      	cbnz	r2, 800dca8 <_realloc_r+0x24>
 800dc9c:	f7fe ff38 	bl	800cb10 <_free_r>
 800dca0:	2400      	movs	r4, #0
 800dca2:	4620      	mov	r0, r4
 800dca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dca8:	f000 f841 	bl	800dd2e <_malloc_usable_size_r>
 800dcac:	4285      	cmp	r5, r0
 800dcae:	4606      	mov	r6, r0
 800dcb0:	d802      	bhi.n	800dcb8 <_realloc_r+0x34>
 800dcb2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dcb6:	d8f4      	bhi.n	800dca2 <_realloc_r+0x1e>
 800dcb8:	4629      	mov	r1, r5
 800dcba:	4640      	mov	r0, r8
 800dcbc:	f7fe ff9c 	bl	800cbf8 <_malloc_r>
 800dcc0:	4607      	mov	r7, r0
 800dcc2:	2800      	cmp	r0, #0
 800dcc4:	d0ec      	beq.n	800dca0 <_realloc_r+0x1c>
 800dcc6:	42b5      	cmp	r5, r6
 800dcc8:	462a      	mov	r2, r5
 800dcca:	4621      	mov	r1, r4
 800dccc:	bf28      	it	cs
 800dcce:	4632      	movcs	r2, r6
 800dcd0:	f7fe f8c1 	bl	800be56 <memcpy>
 800dcd4:	4621      	mov	r1, r4
 800dcd6:	4640      	mov	r0, r8
 800dcd8:	f7fe ff1a 	bl	800cb10 <_free_r>
 800dcdc:	463c      	mov	r4, r7
 800dcde:	e7e0      	b.n	800dca2 <_realloc_r+0x1e>

0800dce0 <__ascii_wctomb>:
 800dce0:	4603      	mov	r3, r0
 800dce2:	4608      	mov	r0, r1
 800dce4:	b141      	cbz	r1, 800dcf8 <__ascii_wctomb+0x18>
 800dce6:	2aff      	cmp	r2, #255	@ 0xff
 800dce8:	d904      	bls.n	800dcf4 <__ascii_wctomb+0x14>
 800dcea:	228a      	movs	r2, #138	@ 0x8a
 800dcec:	601a      	str	r2, [r3, #0]
 800dcee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dcf2:	4770      	bx	lr
 800dcf4:	700a      	strb	r2, [r1, #0]
 800dcf6:	2001      	movs	r0, #1
 800dcf8:	4770      	bx	lr
	...

0800dcfc <fiprintf>:
 800dcfc:	b40e      	push	{r1, r2, r3}
 800dcfe:	b503      	push	{r0, r1, lr}
 800dd00:	4601      	mov	r1, r0
 800dd02:	ab03      	add	r3, sp, #12
 800dd04:	4805      	ldr	r0, [pc, #20]	@ (800dd1c <fiprintf+0x20>)
 800dd06:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd0a:	6800      	ldr	r0, [r0, #0]
 800dd0c:	9301      	str	r3, [sp, #4]
 800dd0e:	f7ff fd03 	bl	800d718 <_vfiprintf_r>
 800dd12:	b002      	add	sp, #8
 800dd14:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd18:	b003      	add	sp, #12
 800dd1a:	4770      	bx	lr
 800dd1c:	20000038 	.word	0x20000038

0800dd20 <abort>:
 800dd20:	b508      	push	{r3, lr}
 800dd22:	2006      	movs	r0, #6
 800dd24:	f000 f834 	bl	800dd90 <raise>
 800dd28:	2001      	movs	r0, #1
 800dd2a:	f7f4 fea3 	bl	8002a74 <_exit>

0800dd2e <_malloc_usable_size_r>:
 800dd2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd32:	1f18      	subs	r0, r3, #4
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	bfbc      	itt	lt
 800dd38:	580b      	ldrlt	r3, [r1, r0]
 800dd3a:	18c0      	addlt	r0, r0, r3
 800dd3c:	4770      	bx	lr

0800dd3e <_raise_r>:
 800dd3e:	291f      	cmp	r1, #31
 800dd40:	b538      	push	{r3, r4, r5, lr}
 800dd42:	4605      	mov	r5, r0
 800dd44:	460c      	mov	r4, r1
 800dd46:	d904      	bls.n	800dd52 <_raise_r+0x14>
 800dd48:	2316      	movs	r3, #22
 800dd4a:	6003      	str	r3, [r0, #0]
 800dd4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dd50:	bd38      	pop	{r3, r4, r5, pc}
 800dd52:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dd54:	b112      	cbz	r2, 800dd5c <_raise_r+0x1e>
 800dd56:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dd5a:	b94b      	cbnz	r3, 800dd70 <_raise_r+0x32>
 800dd5c:	4628      	mov	r0, r5
 800dd5e:	f000 f831 	bl	800ddc4 <_getpid_r>
 800dd62:	4622      	mov	r2, r4
 800dd64:	4601      	mov	r1, r0
 800dd66:	4628      	mov	r0, r5
 800dd68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd6c:	f000 b818 	b.w	800dda0 <_kill_r>
 800dd70:	2b01      	cmp	r3, #1
 800dd72:	d00a      	beq.n	800dd8a <_raise_r+0x4c>
 800dd74:	1c59      	adds	r1, r3, #1
 800dd76:	d103      	bne.n	800dd80 <_raise_r+0x42>
 800dd78:	2316      	movs	r3, #22
 800dd7a:	6003      	str	r3, [r0, #0]
 800dd7c:	2001      	movs	r0, #1
 800dd7e:	e7e7      	b.n	800dd50 <_raise_r+0x12>
 800dd80:	2100      	movs	r1, #0
 800dd82:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dd86:	4620      	mov	r0, r4
 800dd88:	4798      	blx	r3
 800dd8a:	2000      	movs	r0, #0
 800dd8c:	e7e0      	b.n	800dd50 <_raise_r+0x12>
	...

0800dd90 <raise>:
 800dd90:	4b02      	ldr	r3, [pc, #8]	@ (800dd9c <raise+0xc>)
 800dd92:	4601      	mov	r1, r0
 800dd94:	6818      	ldr	r0, [r3, #0]
 800dd96:	f7ff bfd2 	b.w	800dd3e <_raise_r>
 800dd9a:	bf00      	nop
 800dd9c:	20000038 	.word	0x20000038

0800dda0 <_kill_r>:
 800dda0:	b538      	push	{r3, r4, r5, lr}
 800dda2:	4d07      	ldr	r5, [pc, #28]	@ (800ddc0 <_kill_r+0x20>)
 800dda4:	2300      	movs	r3, #0
 800dda6:	4604      	mov	r4, r0
 800dda8:	4608      	mov	r0, r1
 800ddaa:	4611      	mov	r1, r2
 800ddac:	602b      	str	r3, [r5, #0]
 800ddae:	f7f4 fe51 	bl	8002a54 <_kill>
 800ddb2:	1c43      	adds	r3, r0, #1
 800ddb4:	d102      	bne.n	800ddbc <_kill_r+0x1c>
 800ddb6:	682b      	ldr	r3, [r5, #0]
 800ddb8:	b103      	cbz	r3, 800ddbc <_kill_r+0x1c>
 800ddba:	6023      	str	r3, [r4, #0]
 800ddbc:	bd38      	pop	{r3, r4, r5, pc}
 800ddbe:	bf00      	nop
 800ddc0:	2000507c 	.word	0x2000507c

0800ddc4 <_getpid_r>:
 800ddc4:	f7f4 be3e 	b.w	8002a44 <_getpid>

0800ddc8 <_init>:
 800ddc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddca:	bf00      	nop
 800ddcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddce:	bc08      	pop	{r3}
 800ddd0:	469e      	mov	lr, r3
 800ddd2:	4770      	bx	lr

0800ddd4 <_fini>:
 800ddd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddd6:	bf00      	nop
 800ddd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddda:	bc08      	pop	{r3}
 800dddc:	469e      	mov	lr, r3
 800ddde:	4770      	bx	lr
