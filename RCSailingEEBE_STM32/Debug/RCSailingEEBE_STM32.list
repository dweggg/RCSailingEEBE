
RCSailingEEBE_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f4ec  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a0  0800f690  0800f690  00010690  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fd30  0800fd30  000112b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800fd30  0800fd30  00010d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fd38  0800fd38  000112b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fd38  0800fd38  00010d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fd3c  0800fd3c  00010d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002b8  20000000  0800fd40  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f34  200002b8  0800fff8  000112b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200051ec  0800fff8  000121ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000112b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023e04  00000000  00000000  000112e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000516c  00000000  00000000  000350ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c60  00000000  00000000  0003a258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001608  00000000  00000000  0003beb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d9bf  00000000  00000000  0003d4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000236e8  00000000  00000000  0005ae7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aa6d4  00000000  00000000  0007e567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00128c3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000879c  00000000  00000000  00128c80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0013141c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002b8 	.word	0x200002b8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f674 	.word	0x0800f674

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002bc 	.word	0x200002bc
 80001dc:	0800f674 	.word	0x0800f674

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <adc_read>:

float extra2Gain = 1.0f;
float extra2Offset = 0.0f;
AdcData_t adcDataSent;

void adc_read(void) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
    // Start ADC conversion using DMA
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_raw_readings, 4);
 8000eac:	2204      	movs	r2, #4
 8000eae:	492e      	ldr	r1, [pc, #184]	@ (8000f68 <adc_read+0xc0>)
 8000eb0:	482e      	ldr	r0, [pc, #184]	@ (8000f6c <adc_read+0xc4>)
 8000eb2:	f003 fc73 	bl	800479c <HAL_ADC_Start_DMA>

    // Create a struct to hold the processed ADC data
    adcDataSent.windDirection = ((float)adc_raw_readings[0] * windDirectionGain) - windDirectionOffset;
 8000eb6:	4b2c      	ldr	r3, [pc, #176]	@ (8000f68 <adc_read+0xc0>)
 8000eb8:	881b      	ldrh	r3, [r3, #0]
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	ee07 3a90 	vmov	s15, r3
 8000ec0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ec4:	4b2a      	ldr	r3, [pc, #168]	@ (8000f70 <adc_read+0xc8>)
 8000ec6:	edd3 7a00 	vldr	s15, [r3]
 8000eca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ece:	4b29      	ldr	r3, [pc, #164]	@ (8000f74 <adc_read+0xcc>)
 8000ed0:	edd3 7a00 	vldr	s15, [r3]
 8000ed4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ed8:	4b27      	ldr	r3, [pc, #156]	@ (8000f78 <adc_read+0xd0>)
 8000eda:	edc3 7a00 	vstr	s15, [r3]
    adcDataSent.batteryVoltage = ((float)adc_raw_readings[1] * batteryVoltageGain) - batteryVoltageOffset;
 8000ede:	4b22      	ldr	r3, [pc, #136]	@ (8000f68 <adc_read+0xc0>)
 8000ee0:	885b      	ldrh	r3, [r3, #2]
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	ee07 3a90 	vmov	s15, r3
 8000ee8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000eec:	4b23      	ldr	r3, [pc, #140]	@ (8000f7c <adc_read+0xd4>)
 8000eee:	edd3 7a00 	vldr	s15, [r3]
 8000ef2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ef6:	4b22      	ldr	r3, [pc, #136]	@ (8000f80 <adc_read+0xd8>)
 8000ef8:	edd3 7a00 	vldr	s15, [r3]
 8000efc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f00:	4b1d      	ldr	r3, [pc, #116]	@ (8000f78 <adc_read+0xd0>)
 8000f02:	edc3 7a01 	vstr	s15, [r3, #4]
    adcDataSent.extra1 = ((float)adc_raw_readings[2] * extra1Gain) - extra1Offset;
 8000f06:	4b18      	ldr	r3, [pc, #96]	@ (8000f68 <adc_read+0xc0>)
 8000f08:	889b      	ldrh	r3, [r3, #4]
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	ee07 3a90 	vmov	s15, r3
 8000f10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f14:	4b1b      	ldr	r3, [pc, #108]	@ (8000f84 <adc_read+0xdc>)
 8000f16:	edd3 7a00 	vldr	s15, [r3]
 8000f1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f88 <adc_read+0xe0>)
 8000f20:	edd3 7a00 	vldr	s15, [r3]
 8000f24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f28:	4b13      	ldr	r3, [pc, #76]	@ (8000f78 <adc_read+0xd0>)
 8000f2a:	edc3 7a02 	vstr	s15, [r3, #8]
    adcDataSent.extra2 = ((float)adc_raw_readings[3] * extra2Gain) - extra2Offset;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f68 <adc_read+0xc0>)
 8000f30:	88db      	ldrh	r3, [r3, #6]
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	ee07 3a90 	vmov	s15, r3
 8000f38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f3c:	4b13      	ldr	r3, [pc, #76]	@ (8000f8c <adc_read+0xe4>)
 8000f3e:	edd3 7a00 	vldr	s15, [r3]
 8000f42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f46:	4b12      	ldr	r3, [pc, #72]	@ (8000f90 <adc_read+0xe8>)
 8000f48:	edd3 7a00 	vldr	s15, [r3]
 8000f4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f50:	4b09      	ldr	r3, [pc, #36]	@ (8000f78 <adc_read+0xd0>)
 8000f52:	edc3 7a03 	vstr	s15, [r3, #12]

    // Send the struct to the ADC queue, overwriting previous value if full
    osMessageQueuePut(adcQueueHandle, &adcDataSent, 0, 0);
 8000f56:	4b0f      	ldr	r3, [pc, #60]	@ (8000f94 <adc_read+0xec>)
 8000f58:	6818      	ldr	r0, [r3, #0]
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	4906      	ldr	r1, [pc, #24]	@ (8000f78 <adc_read+0xd0>)
 8000f60:	f008 fc84 	bl	800986c <osMessageQueuePut>
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	200002d4 	.word	0x200002d4
 8000f6c:	2000039c 	.word	0x2000039c
 8000f70:	20000000 	.word	0x20000000
 8000f74:	200002dc 	.word	0x200002dc
 8000f78:	200002ec 	.word	0x200002ec
 8000f7c:	20000004 	.word	0x20000004
 8000f80:	200002e0 	.word	0x200002e0
 8000f84:	20000008 	.word	0x20000008
 8000f88:	200002e4 	.word	0x200002e4
 8000f8c:	2000000c 	.word	0x2000000c
 8000f90:	200002e8 	.word	0x200002e8
 8000f94:	20000470 	.word	0x20000470

08000f98 <map_float>:

/* External queue handle (make sure this is defined elsewhere) */
extern osMessageQueueId_t radioQueueHandle;

/* Simple float mapping function */
float map_float(float x, float in_min, float in_max, float out_min, float out_max) {
 8000f98:	b480      	push	{r7}
 8000f9a:	b087      	sub	sp, #28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	ed87 0a05 	vstr	s0, [r7, #20]
 8000fa2:	edc7 0a04 	vstr	s1, [r7, #16]
 8000fa6:	ed87 1a03 	vstr	s2, [r7, #12]
 8000faa:	edc7 1a02 	vstr	s3, [r7, #8]
 8000fae:	ed87 2a01 	vstr	s4, [r7, #4]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000fb2:	ed97 7a05 	vldr	s14, [r7, #20]
 8000fb6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fbe:	edd7 6a01 	vldr	s13, [r7, #4]
 8000fc2:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fc6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000fca:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000fce:	ed97 7a03 	vldr	s14, [r7, #12]
 8000fd2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000fde:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fe2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000fe6:	eeb0 0a67 	vmov.f32	s0, s15
 8000fea:	371c      	adds	r7, #28
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <handleMappingMode>:

/* Function to handle mapping mode */
void handleMappingMode(void) {
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
    if (radioDataReceived.ch1 < mappingBoundaries.ch1_min && radioDataReceived.ch1 > MIN_VALID_PULSE_US)
 8000ff8:	4b44      	ldr	r3, [pc, #272]	@ (800110c <handleMappingMode+0x118>)
 8000ffa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ffe:	461a      	mov	r2, r3
 8001000:	4b43      	ldr	r3, [pc, #268]	@ (8001110 <handleMappingMode+0x11c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	429a      	cmp	r2, r3
 8001006:	d20a      	bcs.n	800101e <handleMappingMode+0x2a>
 8001008:	4b40      	ldr	r3, [pc, #256]	@ (800110c <handleMappingMode+0x118>)
 800100a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800100e:	2b64      	cmp	r3, #100	@ 0x64
 8001010:	dd05      	ble.n	800101e <handleMappingMode+0x2a>
        mappingBoundaries.ch1_min = radioDataReceived.ch1;
 8001012:	4b3e      	ldr	r3, [pc, #248]	@ (800110c <handleMappingMode+0x118>)
 8001014:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001018:	461a      	mov	r2, r3
 800101a:	4b3d      	ldr	r3, [pc, #244]	@ (8001110 <handleMappingMode+0x11c>)
 800101c:	601a      	str	r2, [r3, #0]
    if (radioDataReceived.ch1 > mappingBoundaries.ch1_max)
 800101e:	4b3b      	ldr	r3, [pc, #236]	@ (800110c <handleMappingMode+0x118>)
 8001020:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001024:	461a      	mov	r2, r3
 8001026:	4b3a      	ldr	r3, [pc, #232]	@ (8001110 <handleMappingMode+0x11c>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	429a      	cmp	r2, r3
 800102c:	d905      	bls.n	800103a <handleMappingMode+0x46>
        mappingBoundaries.ch1_max = radioDataReceived.ch1;
 800102e:	4b37      	ldr	r3, [pc, #220]	@ (800110c <handleMappingMode+0x118>)
 8001030:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001034:	461a      	mov	r2, r3
 8001036:	4b36      	ldr	r3, [pc, #216]	@ (8001110 <handleMappingMode+0x11c>)
 8001038:	605a      	str	r2, [r3, #4]

    if (radioDataReceived.ch2 < mappingBoundaries.ch2_min && radioDataReceived.ch2 > MIN_VALID_PULSE_US)
 800103a:	4b34      	ldr	r3, [pc, #208]	@ (800110c <handleMappingMode+0x118>)
 800103c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001040:	461a      	mov	r2, r3
 8001042:	4b33      	ldr	r3, [pc, #204]	@ (8001110 <handleMappingMode+0x11c>)
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	429a      	cmp	r2, r3
 8001048:	d20a      	bcs.n	8001060 <handleMappingMode+0x6c>
 800104a:	4b30      	ldr	r3, [pc, #192]	@ (800110c <handleMappingMode+0x118>)
 800104c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001050:	2b64      	cmp	r3, #100	@ 0x64
 8001052:	dd05      	ble.n	8001060 <handleMappingMode+0x6c>
        mappingBoundaries.ch2_min = radioDataReceived.ch2;
 8001054:	4b2d      	ldr	r3, [pc, #180]	@ (800110c <handleMappingMode+0x118>)
 8001056:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800105a:	461a      	mov	r2, r3
 800105c:	4b2c      	ldr	r3, [pc, #176]	@ (8001110 <handleMappingMode+0x11c>)
 800105e:	609a      	str	r2, [r3, #8]
    if (radioDataReceived.ch2 > mappingBoundaries.ch2_max)
 8001060:	4b2a      	ldr	r3, [pc, #168]	@ (800110c <handleMappingMode+0x118>)
 8001062:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001066:	461a      	mov	r2, r3
 8001068:	4b29      	ldr	r3, [pc, #164]	@ (8001110 <handleMappingMode+0x11c>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	429a      	cmp	r2, r3
 800106e:	d905      	bls.n	800107c <handleMappingMode+0x88>
        mappingBoundaries.ch2_max = radioDataReceived.ch2;
 8001070:	4b26      	ldr	r3, [pc, #152]	@ (800110c <handleMappingMode+0x118>)
 8001072:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001076:	461a      	mov	r2, r3
 8001078:	4b25      	ldr	r3, [pc, #148]	@ (8001110 <handleMappingMode+0x11c>)
 800107a:	60da      	str	r2, [r3, #12]

    if (radioDataReceived.ch3 < mappingBoundaries.ch3_min && radioDataReceived.ch3 > MIN_VALID_PULSE_US)
 800107c:	4b23      	ldr	r3, [pc, #140]	@ (800110c <handleMappingMode+0x118>)
 800107e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001082:	461a      	mov	r2, r3
 8001084:	4b22      	ldr	r3, [pc, #136]	@ (8001110 <handleMappingMode+0x11c>)
 8001086:	691b      	ldr	r3, [r3, #16]
 8001088:	429a      	cmp	r2, r3
 800108a:	d20a      	bcs.n	80010a2 <handleMappingMode+0xae>
 800108c:	4b1f      	ldr	r3, [pc, #124]	@ (800110c <handleMappingMode+0x118>)
 800108e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001092:	2b64      	cmp	r3, #100	@ 0x64
 8001094:	dd05      	ble.n	80010a2 <handleMappingMode+0xae>
        mappingBoundaries.ch3_min = radioDataReceived.ch3;
 8001096:	4b1d      	ldr	r3, [pc, #116]	@ (800110c <handleMappingMode+0x118>)
 8001098:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800109c:	461a      	mov	r2, r3
 800109e:	4b1c      	ldr	r3, [pc, #112]	@ (8001110 <handleMappingMode+0x11c>)
 80010a0:	611a      	str	r2, [r3, #16]
    if (radioDataReceived.ch3 > mappingBoundaries.ch3_max)
 80010a2:	4b1a      	ldr	r3, [pc, #104]	@ (800110c <handleMappingMode+0x118>)
 80010a4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010a8:	461a      	mov	r2, r3
 80010aa:	4b19      	ldr	r3, [pc, #100]	@ (8001110 <handleMappingMode+0x11c>)
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d905      	bls.n	80010be <handleMappingMode+0xca>
        mappingBoundaries.ch3_max = radioDataReceived.ch3;
 80010b2:	4b16      	ldr	r3, [pc, #88]	@ (800110c <handleMappingMode+0x118>)
 80010b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b15      	ldr	r3, [pc, #84]	@ (8001110 <handleMappingMode+0x11c>)
 80010bc:	615a      	str	r2, [r3, #20]

    if (radioDataReceived.ch4 < mappingBoundaries.ch4_min && radioDataReceived.ch4 > MIN_VALID_PULSE_US)
 80010be:	4b13      	ldr	r3, [pc, #76]	@ (800110c <handleMappingMode+0x118>)
 80010c0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b12      	ldr	r3, [pc, #72]	@ (8001110 <handleMappingMode+0x11c>)
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d20a      	bcs.n	80010e4 <handleMappingMode+0xf0>
 80010ce:	4b0f      	ldr	r3, [pc, #60]	@ (800110c <handleMappingMode+0x118>)
 80010d0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80010d4:	2b64      	cmp	r3, #100	@ 0x64
 80010d6:	dd05      	ble.n	80010e4 <handleMappingMode+0xf0>
        mappingBoundaries.ch4_min = radioDataReceived.ch4;
 80010d8:	4b0c      	ldr	r3, [pc, #48]	@ (800110c <handleMappingMode+0x118>)
 80010da:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80010de:	461a      	mov	r2, r3
 80010e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001110 <handleMappingMode+0x11c>)
 80010e2:	619a      	str	r2, [r3, #24]
    if (radioDataReceived.ch4 > mappingBoundaries.ch4_max)
 80010e4:	4b09      	ldr	r3, [pc, #36]	@ (800110c <handleMappingMode+0x118>)
 80010e6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80010ea:	461a      	mov	r2, r3
 80010ec:	4b08      	ldr	r3, [pc, #32]	@ (8001110 <handleMappingMode+0x11c>)
 80010ee:	69db      	ldr	r3, [r3, #28]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d905      	bls.n	8001100 <handleMappingMode+0x10c>
        mappingBoundaries.ch4_max = radioDataReceived.ch4;
 80010f4:	4b05      	ldr	r3, [pc, #20]	@ (800110c <handleMappingMode+0x118>)
 80010f6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80010fa:	461a      	mov	r2, r3
 80010fc:	4b04      	ldr	r3, [pc, #16]	@ (8001110 <handleMappingMode+0x11c>)
 80010fe:	61da      	str	r2, [r3, #28]
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	200002fc 	.word	0x200002fc
 8001110:	20000010 	.word	0x20000010

08001114 <handleBypassMode>:

/* Function to handle normal mode (bypassMode) */
void handleBypassMode(void) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b090      	sub	sp, #64	@ 0x40
 8001118:	af00      	add	r7, sp, #0
    uint32_t pulseWidth[4] = {
        radioDataReceived.ch1,
 800111a:	4b69      	ldr	r3, [pc, #420]	@ (80012c0 <handleBypassMode+0x1ac>)
 800111c:	f9b3 3000 	ldrsh.w	r3, [r3]
    uint32_t pulseWidth[4] = {
 8001120:	623b      	str	r3, [r7, #32]
        radioDataReceived.ch2,
 8001122:	4b67      	ldr	r3, [pc, #412]	@ (80012c0 <handleBypassMode+0x1ac>)
 8001124:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    uint32_t pulseWidth[4] = {
 8001128:	627b      	str	r3, [r7, #36]	@ 0x24
        radioDataReceived.ch3,
 800112a:	4b65      	ldr	r3, [pc, #404]	@ (80012c0 <handleBypassMode+0x1ac>)
 800112c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    uint32_t pulseWidth[4] = {
 8001130:	62bb      	str	r3, [r7, #40]	@ 0x28
        radioDataReceived.ch4
 8001132:	4b63      	ldr	r3, [pc, #396]	@ (80012c0 <handleBypassMode+0x1ac>)
 8001134:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    uint32_t pulseWidth[4] = {
 8001138:	62fb      	str	r3, [r7, #44]	@ 0x2c
    };

    uint32_t min_val[4] = {
        mappingBoundaries.ch1_min,
 800113a:	4b62      	ldr	r3, [pc, #392]	@ (80012c4 <handleBypassMode+0x1b0>)
 800113c:	681b      	ldr	r3, [r3, #0]
    uint32_t min_val[4] = {
 800113e:	613b      	str	r3, [r7, #16]
        mappingBoundaries.ch2_min,
 8001140:	4b60      	ldr	r3, [pc, #384]	@ (80012c4 <handleBypassMode+0x1b0>)
 8001142:	689b      	ldr	r3, [r3, #8]
    uint32_t min_val[4] = {
 8001144:	617b      	str	r3, [r7, #20]
        mappingBoundaries.ch3_min,
 8001146:	4b5f      	ldr	r3, [pc, #380]	@ (80012c4 <handleBypassMode+0x1b0>)
 8001148:	691b      	ldr	r3, [r3, #16]
    uint32_t min_val[4] = {
 800114a:	61bb      	str	r3, [r7, #24]
        mappingBoundaries.ch4_min
 800114c:	4b5d      	ldr	r3, [pc, #372]	@ (80012c4 <handleBypassMode+0x1b0>)
 800114e:	699b      	ldr	r3, [r3, #24]
    uint32_t min_val[4] = {
 8001150:	61fb      	str	r3, [r7, #28]
    };

    uint32_t max_val[4] = {
        mappingBoundaries.ch1_max,
 8001152:	4b5c      	ldr	r3, [pc, #368]	@ (80012c4 <handleBypassMode+0x1b0>)
 8001154:	685b      	ldr	r3, [r3, #4]
    uint32_t max_val[4] = {
 8001156:	603b      	str	r3, [r7, #0]
        mappingBoundaries.ch2_max,
 8001158:	4b5a      	ldr	r3, [pc, #360]	@ (80012c4 <handleBypassMode+0x1b0>)
 800115a:	68db      	ldr	r3, [r3, #12]
    uint32_t max_val[4] = {
 800115c:	607b      	str	r3, [r7, #4]
        mappingBoundaries.ch3_max,
 800115e:	4b59      	ldr	r3, [pc, #356]	@ (80012c4 <handleBypassMode+0x1b0>)
 8001160:	695b      	ldr	r3, [r3, #20]
    uint32_t max_val[4] = {
 8001162:	60bb      	str	r3, [r7, #8]
        mappingBoundaries.ch4_max
 8001164:	4b57      	ldr	r3, [pc, #348]	@ (80012c4 <handleBypassMode+0x1b0>)
 8001166:	69db      	ldr	r3, [r3, #28]
    uint32_t max_val[4] = {
 8001168:	60fb      	str	r3, [r7, #12]
    };

    /* Avoid division by zero if boundaries are not properly set */
    for (int i = 0; i < 4; i++) {
 800116a:	2300      	movs	r3, #0
 800116c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800116e:	e09e      	b.n	80012ae <handleBypassMode+0x19a>
        if (max_val[i] <= min_val[i])
 8001170:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	3340      	adds	r3, #64	@ 0x40
 8001176:	443b      	add	r3, r7
 8001178:	f853 2c40 	ldr.w	r2, [r3, #-64]
 800117c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	3340      	adds	r3, #64	@ 0x40
 8001182:	443b      	add	r3, r7
 8001184:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001188:	429a      	cmp	r2, r3
 800118a:	f240 8095 	bls.w	80012b8 <handleBypassMode+0x1a4>
            return;  // Invalid range

        /* Calculate percentage (0.0 to 1.0) for each channel */
        float percent = (float)(pulseWidth[i] - min_val[i]) / (float)(max_val[i] - min_val[i]);
 800118e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	3340      	adds	r3, #64	@ 0x40
 8001194:	443b      	add	r3, r7
 8001196:	f853 2c20 	ldr.w	r2, [r3, #-32]
 800119a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	3340      	adds	r3, #64	@ 0x40
 80011a0:	443b      	add	r3, r7
 80011a2:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	ee07 3a90 	vmov	s15, r3
 80011ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80011b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	3340      	adds	r3, #64	@ 0x40
 80011b6:	443b      	add	r3, r7
 80011b8:	f853 2c40 	ldr.w	r2, [r3, #-64]
 80011bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	3340      	adds	r3, #64	@ 0x40
 80011c2:	443b      	add	r3, r7
 80011c4:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	ee07 3a90 	vmov	s15, r3
 80011ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011d6:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
        if (percent < 0.0F) percent = 0.0F;
 80011da:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80011de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e6:	d502      	bpl.n	80011ee <handleBypassMode+0xda>
 80011e8:	f04f 0300 	mov.w	r3, #0
 80011ec:	63bb      	str	r3, [r7, #56]	@ 0x38
        if (percent > 1.0F) percent = 1.0F;
 80011ee:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80011f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80011f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fe:	dd02      	ble.n	8001206 <handleBypassMode+0xf2>
 8001200:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001204:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Map percentage to servo pulse width in ms.
           Desired servo range: 0.6 ms (0%) to 2.4 ms (100%)
        */
        float servoPulse_ms = map_float(percent, 0.0F, 1.0F, 0.6F, 2.4F);
 8001206:	ed9f 2a30 	vldr	s4, [pc, #192]	@ 80012c8 <handleBypassMode+0x1b4>
 800120a:	eddf 1a30 	vldr	s3, [pc, #192]	@ 80012cc <handleBypassMode+0x1b8>
 800120e:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8001212:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 80012d0 <handleBypassMode+0x1bc>
 8001216:	ed97 0a0e 	vldr	s0, [r7, #56]	@ 0x38
 800121a:	f7ff febd 	bl	8000f98 <map_float>
 800121e:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
        /* Convert servoPulse_ms to a timer compare value.
           (Assuming that your timer (htim4) is configured so that a full period equals 20ms,
            and the ARR is set such that 20ms corresponds to 59999 ticks.
            Adjust the scaling factor as needed.)
        */
        float compare_val = servoPulse_ms * 59999.0F / 20.0F;
 8001222:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001226:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80012d4 <handleBypassMode+0x1c0>
 800122a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800122e:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8001232:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001236:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

        /* Set the compare value for the corresponding timer channel */
        switch (i) {
 800123a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800123c:	2b03      	cmp	r3, #3
 800123e:	d833      	bhi.n	80012a8 <handleBypassMode+0x194>
 8001240:	a201      	add	r2, pc, #4	@ (adr r2, 8001248 <handleBypassMode+0x134>)
 8001242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001246:	bf00      	nop
 8001248:	08001259 	.word	0x08001259
 800124c:	0800126d 	.word	0x0800126d
 8001250:	08001281 	.word	0x08001281
 8001254:	08001295 	.word	0x08001295
            case 0:
                __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, (long)compare_val);
 8001258:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800125c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001260:	4b1d      	ldr	r3, [pc, #116]	@ (80012d8 <handleBypassMode+0x1c4>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	ee17 2a90 	vmov	r2, s15
 8001268:	635a      	str	r2, [r3, #52]	@ 0x34
                break;
 800126a:	e01d      	b.n	80012a8 <handleBypassMode+0x194>
            case 1:
                __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, (long)compare_val);
 800126c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001270:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001274:	4b18      	ldr	r3, [pc, #96]	@ (80012d8 <handleBypassMode+0x1c4>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	ee17 2a90 	vmov	r2, s15
 800127c:	639a      	str	r2, [r3, #56]	@ 0x38
                break;
 800127e:	e013      	b.n	80012a8 <handleBypassMode+0x194>
            case 2:
                __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, (long)compare_val);
 8001280:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001284:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001288:	4b13      	ldr	r3, [pc, #76]	@ (80012d8 <handleBypassMode+0x1c4>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	ee17 2a90 	vmov	r2, s15
 8001290:	63da      	str	r2, [r3, #60]	@ 0x3c
                break;
 8001292:	e009      	b.n	80012a8 <handleBypassMode+0x194>
            case 3:
                __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, (long)compare_val);
 8001294:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001298:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800129c:	4b0e      	ldr	r3, [pc, #56]	@ (80012d8 <handleBypassMode+0x1c4>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	ee17 2a90 	vmov	r2, s15
 80012a4:	641a      	str	r2, [r3, #64]	@ 0x40
                break;
 80012a6:	bf00      	nop
    for (int i = 0; i < 4; i++) {
 80012a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012aa:	3301      	adds	r3, #1
 80012ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80012ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012b0:	2b03      	cmp	r3, #3
 80012b2:	f77f af5d 	ble.w	8001170 <handleBypassMode+0x5c>
 80012b6:	e000      	b.n	80012ba <handleBypassMode+0x1a6>
            return;  // Invalid range
 80012b8:	bf00      	nop
        }
    }
}
 80012ba:	3740      	adds	r7, #64	@ 0x40
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	200002fc 	.word	0x200002fc
 80012c4:	20000010 	.word	0x20000010
 80012c8:	4019999a 	.word	0x4019999a
 80012cc:	3f19999a 	.word	0x3f19999a
 80012d0:	00000000 	.word	0x00000000
 80012d4:	476a5f00 	.word	0x476a5f00
 80012d8:	20000578 	.word	0x20000578

080012dc <control>:

/* Main control function */
void control(void) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
    RadioData_t newRadioData;

    /* Attempt non-blocking receive from the radio queue */
    if (osMessageQueueGet(radioQueueHandle, &newRadioData, NULL, 0) == osOK) {
 80012e2:	4b11      	ldr	r3, [pc, #68]	@ (8001328 <control+0x4c>)
 80012e4:	6818      	ldr	r0, [r3, #0]
 80012e6:	4639      	mov	r1, r7
 80012e8:	2300      	movs	r3, #0
 80012ea:	2200      	movs	r2, #0
 80012ec:	f008 fb1e 	bl	800992c <osMessageQueueGet>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d106      	bne.n	8001304 <control+0x28>
        radioDataReceived = newRadioData;
 80012f6:	4b0d      	ldr	r3, [pc, #52]	@ (800132c <control+0x50>)
 80012f8:	461a      	mov	r2, r3
 80012fa:	463b      	mov	r3, r7
 80012fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001300:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    /* Handle the current mode */
    switch (currentMode) {
 8001304:	4b0a      	ldr	r3, [pc, #40]	@ (8001330 <control+0x54>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d002      	beq.n	8001312 <control+0x36>
 800130c:	2b01      	cmp	r3, #1
 800130e:	d003      	beq.n	8001318 <control+0x3c>
        case BYPASS_MODE:
            handleBypassMode();  // Calculate and output servo values
            break;
        default:
            // Handle any new modes that are added in the future
            break;
 8001310:	e005      	b.n	800131e <control+0x42>
            handleMappingMode();  // Update min/max boundaries
 8001312:	f7ff fe6f 	bl	8000ff4 <handleMappingMode>
            break;
 8001316:	e002      	b.n	800131e <control+0x42>
            handleBypassMode();  // Calculate and output servo values
 8001318:	f7ff fefc 	bl	8001114 <handleBypassMode>
            break;
 800131c:	bf00      	nop
    }
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	2000046c 	.word	0x2000046c
 800132c:	200002fc 	.word	0x200002fc
 8001330:	20000304 	.word	0x20000304

08001334 <imu_read>:
    .i2c = &hi2c3, .addr = BNO_ADDR, .mode = BNO_MODE_NDOF,
};
ImuData_t imuDataSent= {0};


void imu_read(void) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b08c      	sub	sp, #48	@ 0x30
 8001338:	af00      	add	r7, sp, #0

    static int initialized = 0;
    if (!initialized) {
 800133a:	4b2e      	ldr	r3, [pc, #184]	@ (80013f4 <imu_read+0xc0>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d105      	bne.n	800134e <imu_read+0x1a>
        // Initialize the sensor
        bno055_init(&bno);
 8001342:	482d      	ldr	r0, [pc, #180]	@ (80013f8 <imu_read+0xc4>)
 8001344:	f000 fca2 	bl	8001c8c <bno055_init>
        initialized = 1;
 8001348:	4b2a      	ldr	r3, [pc, #168]	@ (80013f4 <imu_read+0xc0>)
 800134a:	2201      	movs	r2, #1
 800134c:	601a      	str	r2, [r3, #0]
    }


    // Fetch accelerometer data (X, Y, Z)
    bno055_vec3_t accelData;
    if (bno055_acc(&bno, &accelData) == BNO_OK) {
 800134e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001352:	4619      	mov	r1, r3
 8001354:	4828      	ldr	r0, [pc, #160]	@ (80013f8 <imu_read+0xc4>)
 8001356:	f000 feb1 	bl	80020bc <bno055_acc>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d108      	bne.n	8001372 <imu_read+0x3e>
    	imuDataSent.accelX = accelData.x;
 8001360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001362:	4a26      	ldr	r2, [pc, #152]	@ (80013fc <imu_read+0xc8>)
 8001364:	60d3      	str	r3, [r2, #12]
    	imuDataSent.accelY = accelData.y;
 8001366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001368:	4a24      	ldr	r2, [pc, #144]	@ (80013fc <imu_read+0xc8>)
 800136a:	6113      	str	r3, [r2, #16]
    	imuDataSent.accelZ = accelData.z;
 800136c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800136e:	4a23      	ldr	r2, [pc, #140]	@ (80013fc <imu_read+0xc8>)
 8001370:	6153      	str	r3, [r2, #20]
    }

    // Fetch gyroscope data (X, Y, Z)
    bno055_vec3_t gyroData;
    if (bno055_gyro(&bno, &gyroData) == BNO_OK) {
 8001372:	f107 0318 	add.w	r3, r7, #24
 8001376:	4619      	mov	r1, r3
 8001378:	481f      	ldr	r0, [pc, #124]	@ (80013f8 <imu_read+0xc4>)
 800137a:	f001 f8eb 	bl	8002554 <bno055_gyro>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d108      	bne.n	8001396 <imu_read+0x62>
    	imuDataSent.gyroX = gyroData.x;
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	4a1d      	ldr	r2, [pc, #116]	@ (80013fc <imu_read+0xc8>)
 8001388:	6193      	str	r3, [r2, #24]
    	imuDataSent.gyroY = gyroData.y;
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	4a1b      	ldr	r2, [pc, #108]	@ (80013fc <imu_read+0xc8>)
 800138e:	61d3      	str	r3, [r2, #28]
    	imuDataSent.gyroZ = gyroData.z;
 8001390:	6a3b      	ldr	r3, [r7, #32]
 8001392:	4a1a      	ldr	r2, [pc, #104]	@ (80013fc <imu_read+0xc8>)
 8001394:	6213      	str	r3, [r2, #32]
    }

    // Fetch magnetometer data (X, Y, Z)
    bno055_vec3_t magData;
    if (bno055_mag(&bno, &magData) == BNO_OK) {
 8001396:	f107 030c 	add.w	r3, r7, #12
 800139a:	4619      	mov	r1, r3
 800139c:	4816      	ldr	r0, [pc, #88]	@ (80013f8 <imu_read+0xc4>)
 800139e:	f001 f9e1 	bl	8002764 <bno055_mag>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d108      	bne.n	80013ba <imu_read+0x86>
    	imuDataSent.magX = magData.x;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	4a14      	ldr	r2, [pc, #80]	@ (80013fc <imu_read+0xc8>)
 80013ac:	6253      	str	r3, [r2, #36]	@ 0x24
    	imuDataSent.magY = magData.y;
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	4a12      	ldr	r2, [pc, #72]	@ (80013fc <imu_read+0xc8>)
 80013b2:	6293      	str	r3, [r2, #40]	@ 0x28
    	imuDataSent.magZ = magData.z;
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	4a11      	ldr	r2, [pc, #68]	@ (80013fc <imu_read+0xc8>)
 80013b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    // Fetch Euler angles (Roll, Pitch, Yaw)
    bno055_euler_t eulerData;
    if (bno055_euler(&bno, &eulerData) == BNO_OK) {
 80013ba:	463b      	mov	r3, r7
 80013bc:	4619      	mov	r1, r3
 80013be:	480e      	ldr	r0, [pc, #56]	@ (80013f8 <imu_read+0xc4>)
 80013c0:	f001 fc1c 	bl	8002bfc <bno055_euler>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d108      	bne.n	80013dc <imu_read+0xa8>
    	imuDataSent.roll = eulerData.roll;
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	4a0b      	ldr	r2, [pc, #44]	@ (80013fc <imu_read+0xc8>)
 80013ce:	6013      	str	r3, [r2, #0]
    	imuDataSent.pitch = eulerData.pitch;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a0a      	ldr	r2, [pc, #40]	@ (80013fc <imu_read+0xc8>)
 80013d4:	6053      	str	r3, [r2, #4]
    	imuDataSent.yaw = eulerData.yaw;
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	4a08      	ldr	r2, [pc, #32]	@ (80013fc <imu_read+0xc8>)
 80013da:	6093      	str	r3, [r2, #8]
    }

    // Post the sensor data to the message queue.
    osMessageQueuePut(imuQueueHandle, &imuDataSent, 0, 0);
 80013dc:	4b08      	ldr	r3, [pc, #32]	@ (8001400 <imu_read+0xcc>)
 80013de:	6818      	ldr	r0, [r3, #0]
 80013e0:	2300      	movs	r3, #0
 80013e2:	2200      	movs	r2, #0
 80013e4:	4905      	ldr	r1, [pc, #20]	@ (80013fc <imu_read+0xc8>)
 80013e6:	f008 fa41 	bl	800986c <osMessageQueuePut>
}
 80013ea:	bf00      	nop
 80013ec:	3730      	adds	r7, #48	@ 0x30
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000338 	.word	0x20000338
 80013f8:	20000030 	.word	0x20000030
 80013fc:	20000308 	.word	0x20000308
 8001400:	20000474 	.word	0x20000474

08001404 <telemetry>:
AdcData_t adcDataReceived;
ImuData_t imuDataReceived;
RadioData_t radioDataReceived;
ControlData_t controlDataReceived;

void telemetry(void) {
 8001404:	b580      	push	{r7, lr}
 8001406:	b0a2      	sub	sp, #136	@ 0x88
 8001408:	af02      	add	r7, sp, #8
    char uartBuffer[128];  // Increased buffer size


    for (;;) {
        if (osMessageQueueGetCount(imuQueueHandle) > 0) {
 800140a:	4bc1      	ldr	r3, [pc, #772]	@ (8001710 <telemetry+0x30c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f008 faea 	bl	80099e8 <osMessageQueueGetCount>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d06f      	beq.n	80014fa <telemetry+0xf6>
			// Get ADC Data
        	osMessageQueueGet(adcQueueHandle, (void*)&adcDataReceived, NULL, osWaitForever);
 800141a:	4bbe      	ldr	r3, [pc, #760]	@ (8001714 <telemetry+0x310>)
 800141c:	6818      	ldr	r0, [r3, #0]
 800141e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001422:	2200      	movs	r2, #0
 8001424:	49bc      	ldr	r1, [pc, #752]	@ (8001718 <telemetry+0x314>)
 8001426:	f008 fa81 	bl	800992c <osMessageQueueGet>
            // Send ADC Data
            snprintf(uartBuffer, sizeof(uartBuffer), "DIR:%.2f\r\n", adcDataReceived.windDirection);
 800142a:	4bbb      	ldr	r3, [pc, #748]	@ (8001718 <telemetry+0x314>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff f892 	bl	8000558 <__aeabi_f2d>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	4638      	mov	r0, r7
 800143a:	e9cd 2300 	strd	r2, r3, [sp]
 800143e:	4ab7      	ldr	r2, [pc, #732]	@ (800171c <telemetry+0x318>)
 8001440:	2180      	movs	r1, #128	@ 0x80
 8001442:	f00b ff7f 	bl	800d344 <sniprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8001446:	463b      	mov	r3, r7
 8001448:	4618      	mov	r0, r3
 800144a:	f7fe ff19 	bl	8000280 <strlen>
 800144e:	4603      	mov	r3, r0
 8001450:	b29a      	uxth	r2, r3
 8001452:	4639      	mov	r1, r7
 8001454:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001458:	48b1      	ldr	r0, [pc, #708]	@ (8001720 <telemetry+0x31c>)
 800145a:	f007 fc9d 	bl	8008d98 <HAL_UART_Transmit>
            snprintf(uartBuffer, sizeof(uartBuffer), "BAT:%.2f\r\n", adcDataReceived.batteryVoltage);
 800145e:	4bae      	ldr	r3, [pc, #696]	@ (8001718 <telemetry+0x314>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff f878 	bl	8000558 <__aeabi_f2d>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	4638      	mov	r0, r7
 800146e:	e9cd 2300 	strd	r2, r3, [sp]
 8001472:	4aac      	ldr	r2, [pc, #688]	@ (8001724 <telemetry+0x320>)
 8001474:	2180      	movs	r1, #128	@ 0x80
 8001476:	f00b ff65 	bl	800d344 <sniprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 800147a:	463b      	mov	r3, r7
 800147c:	4618      	mov	r0, r3
 800147e:	f7fe feff 	bl	8000280 <strlen>
 8001482:	4603      	mov	r3, r0
 8001484:	b29a      	uxth	r2, r3
 8001486:	4639      	mov	r1, r7
 8001488:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800148c:	48a4      	ldr	r0, [pc, #656]	@ (8001720 <telemetry+0x31c>)
 800148e:	f007 fc83 	bl	8008d98 <HAL_UART_Transmit>
            snprintf(uartBuffer, sizeof(uartBuffer), "EX1:%.2f\r\n", adcDataReceived.extra1);
 8001492:	4ba1      	ldr	r3, [pc, #644]	@ (8001718 <telemetry+0x314>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff f85e 	bl	8000558 <__aeabi_f2d>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	4638      	mov	r0, r7
 80014a2:	e9cd 2300 	strd	r2, r3, [sp]
 80014a6:	4aa0      	ldr	r2, [pc, #640]	@ (8001728 <telemetry+0x324>)
 80014a8:	2180      	movs	r1, #128	@ 0x80
 80014aa:	f00b ff4b 	bl	800d344 <sniprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 80014ae:	463b      	mov	r3, r7
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7fe fee5 	bl	8000280 <strlen>
 80014b6:	4603      	mov	r3, r0
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	4639      	mov	r1, r7
 80014bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014c0:	4897      	ldr	r0, [pc, #604]	@ (8001720 <telemetry+0x31c>)
 80014c2:	f007 fc69 	bl	8008d98 <HAL_UART_Transmit>
            snprintf(uartBuffer, sizeof(uartBuffer), "EX2:%.2f\r\n", adcDataReceived.extra2);
 80014c6:	4b94      	ldr	r3, [pc, #592]	@ (8001718 <telemetry+0x314>)
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff f844 	bl	8000558 <__aeabi_f2d>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4638      	mov	r0, r7
 80014d6:	e9cd 2300 	strd	r2, r3, [sp]
 80014da:	4a94      	ldr	r2, [pc, #592]	@ (800172c <telemetry+0x328>)
 80014dc:	2180      	movs	r1, #128	@ 0x80
 80014de:	f00b ff31 	bl	800d344 <sniprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 80014e2:	463b      	mov	r3, r7
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7fe fecb 	bl	8000280 <strlen>
 80014ea:	4603      	mov	r3, r0
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	4639      	mov	r1, r7
 80014f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014f4:	488a      	ldr	r0, [pc, #552]	@ (8001720 <telemetry+0x31c>)
 80014f6:	f007 fc4f 	bl	8008d98 <HAL_UART_Transmit>
        }

        if (osMessageQueueGetCount(imuQueueHandle) > 0) {
 80014fa:	4b85      	ldr	r3, [pc, #532]	@ (8001710 <telemetry+0x30c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f008 fa72 	bl	80099e8 <osMessageQueueGetCount>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	f000 8168 	beq.w	80017dc <telemetry+0x3d8>
			// Get IMU Data
			osMessageQueueGet(imuQueueHandle, (void*)&imuDataReceived, NULL, osWaitForever);
 800150c:	4b80      	ldr	r3, [pc, #512]	@ (8001710 <telemetry+0x30c>)
 800150e:	6818      	ldr	r0, [r3, #0]
 8001510:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001514:	2200      	movs	r2, #0
 8001516:	4986      	ldr	r1, [pc, #536]	@ (8001730 <telemetry+0x32c>)
 8001518:	f008 fa08 	bl	800992c <osMessageQueueGet>
			// Send IMU Data
			snprintf(uartBuffer, sizeof(uartBuffer), "ROL:%.2f\r\n", imuDataReceived.roll);
 800151c:	4b84      	ldr	r3, [pc, #528]	@ (8001730 <telemetry+0x32c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff f819 	bl	8000558 <__aeabi_f2d>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4638      	mov	r0, r7
 800152c:	e9cd 2300 	strd	r2, r3, [sp]
 8001530:	4a80      	ldr	r2, [pc, #512]	@ (8001734 <telemetry+0x330>)
 8001532:	2180      	movs	r1, #128	@ 0x80
 8001534:	f00b ff06 	bl	800d344 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8001538:	463b      	mov	r3, r7
 800153a:	4618      	mov	r0, r3
 800153c:	f7fe fea0 	bl	8000280 <strlen>
 8001540:	4603      	mov	r3, r0
 8001542:	b29a      	uxth	r2, r3
 8001544:	4639      	mov	r1, r7
 8001546:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800154a:	4875      	ldr	r0, [pc, #468]	@ (8001720 <telemetry+0x31c>)
 800154c:	f007 fc24 	bl	8008d98 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "PIT:%.2f\r\n", imuDataReceived.pitch);
 8001550:	4b77      	ldr	r3, [pc, #476]	@ (8001730 <telemetry+0x32c>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	4618      	mov	r0, r3
 8001556:	f7fe ffff 	bl	8000558 <__aeabi_f2d>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	4638      	mov	r0, r7
 8001560:	e9cd 2300 	strd	r2, r3, [sp]
 8001564:	4a74      	ldr	r2, [pc, #464]	@ (8001738 <telemetry+0x334>)
 8001566:	2180      	movs	r1, #128	@ 0x80
 8001568:	f00b feec 	bl	800d344 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 800156c:	463b      	mov	r3, r7
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe fe86 	bl	8000280 <strlen>
 8001574:	4603      	mov	r3, r0
 8001576:	b29a      	uxth	r2, r3
 8001578:	4639      	mov	r1, r7
 800157a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800157e:	4868      	ldr	r0, [pc, #416]	@ (8001720 <telemetry+0x31c>)
 8001580:	f007 fc0a 	bl	8008d98 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "YAW:%.2f\r\n", imuDataReceived.yaw);
 8001584:	4b6a      	ldr	r3, [pc, #424]	@ (8001730 <telemetry+0x32c>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	4618      	mov	r0, r3
 800158a:	f7fe ffe5 	bl	8000558 <__aeabi_f2d>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4638      	mov	r0, r7
 8001594:	e9cd 2300 	strd	r2, r3, [sp]
 8001598:	4a68      	ldr	r2, [pc, #416]	@ (800173c <telemetry+0x338>)
 800159a:	2180      	movs	r1, #128	@ 0x80
 800159c:	f00b fed2 	bl	800d344 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 80015a0:	463b      	mov	r3, r7
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7fe fe6c 	bl	8000280 <strlen>
 80015a8:	4603      	mov	r3, r0
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	4639      	mov	r1, r7
 80015ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015b2:	485b      	ldr	r0, [pc, #364]	@ (8001720 <telemetry+0x31c>)
 80015b4:	f007 fbf0 	bl	8008d98 <HAL_UART_Transmit>

			snprintf(uartBuffer, sizeof(uartBuffer), "ACX:%.2f\r\n", imuDataReceived.accelX);
 80015b8:	4b5d      	ldr	r3, [pc, #372]	@ (8001730 <telemetry+0x32c>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe ffcb 	bl	8000558 <__aeabi_f2d>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4638      	mov	r0, r7
 80015c8:	e9cd 2300 	strd	r2, r3, [sp]
 80015cc:	4a5c      	ldr	r2, [pc, #368]	@ (8001740 <telemetry+0x33c>)
 80015ce:	2180      	movs	r1, #128	@ 0x80
 80015d0:	f00b feb8 	bl	800d344 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 80015d4:	463b      	mov	r3, r7
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7fe fe52 	bl	8000280 <strlen>
 80015dc:	4603      	mov	r3, r0
 80015de:	b29a      	uxth	r2, r3
 80015e0:	4639      	mov	r1, r7
 80015e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015e6:	484e      	ldr	r0, [pc, #312]	@ (8001720 <telemetry+0x31c>)
 80015e8:	f007 fbd6 	bl	8008d98 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "ACY:%.2f\r\n", imuDataReceived.accelY);
 80015ec:	4b50      	ldr	r3, [pc, #320]	@ (8001730 <telemetry+0x32c>)
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7fe ffb1 	bl	8000558 <__aeabi_f2d>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	4638      	mov	r0, r7
 80015fc:	e9cd 2300 	strd	r2, r3, [sp]
 8001600:	4a50      	ldr	r2, [pc, #320]	@ (8001744 <telemetry+0x340>)
 8001602:	2180      	movs	r1, #128	@ 0x80
 8001604:	f00b fe9e 	bl	800d344 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8001608:	463b      	mov	r3, r7
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe fe38 	bl	8000280 <strlen>
 8001610:	4603      	mov	r3, r0
 8001612:	b29a      	uxth	r2, r3
 8001614:	4639      	mov	r1, r7
 8001616:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800161a:	4841      	ldr	r0, [pc, #260]	@ (8001720 <telemetry+0x31c>)
 800161c:	f007 fbbc 	bl	8008d98 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "ACZ:%.2f\r\n", imuDataReceived.accelZ);
 8001620:	4b43      	ldr	r3, [pc, #268]	@ (8001730 <telemetry+0x32c>)
 8001622:	695b      	ldr	r3, [r3, #20]
 8001624:	4618      	mov	r0, r3
 8001626:	f7fe ff97 	bl	8000558 <__aeabi_f2d>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4638      	mov	r0, r7
 8001630:	e9cd 2300 	strd	r2, r3, [sp]
 8001634:	4a44      	ldr	r2, [pc, #272]	@ (8001748 <telemetry+0x344>)
 8001636:	2180      	movs	r1, #128	@ 0x80
 8001638:	f00b fe84 	bl	800d344 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 800163c:	463b      	mov	r3, r7
 800163e:	4618      	mov	r0, r3
 8001640:	f7fe fe1e 	bl	8000280 <strlen>
 8001644:	4603      	mov	r3, r0
 8001646:	b29a      	uxth	r2, r3
 8001648:	4639      	mov	r1, r7
 800164a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800164e:	4834      	ldr	r0, [pc, #208]	@ (8001720 <telemetry+0x31c>)
 8001650:	f007 fba2 	bl	8008d98 <HAL_UART_Transmit>

			snprintf(uartBuffer, sizeof(uartBuffer), "GYX:%.2f\r\n", imuDataReceived.gyroX);
 8001654:	4b36      	ldr	r3, [pc, #216]	@ (8001730 <telemetry+0x32c>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	4618      	mov	r0, r3
 800165a:	f7fe ff7d 	bl	8000558 <__aeabi_f2d>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4638      	mov	r0, r7
 8001664:	e9cd 2300 	strd	r2, r3, [sp]
 8001668:	4a38      	ldr	r2, [pc, #224]	@ (800174c <telemetry+0x348>)
 800166a:	2180      	movs	r1, #128	@ 0x80
 800166c:	f00b fe6a 	bl	800d344 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8001670:	463b      	mov	r3, r7
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe fe04 	bl	8000280 <strlen>
 8001678:	4603      	mov	r3, r0
 800167a:	b29a      	uxth	r2, r3
 800167c:	4639      	mov	r1, r7
 800167e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001682:	4827      	ldr	r0, [pc, #156]	@ (8001720 <telemetry+0x31c>)
 8001684:	f007 fb88 	bl	8008d98 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "GYY:%.2f\r\n", imuDataReceived.gyroY);
 8001688:	4b29      	ldr	r3, [pc, #164]	@ (8001730 <telemetry+0x32c>)
 800168a:	69db      	ldr	r3, [r3, #28]
 800168c:	4618      	mov	r0, r3
 800168e:	f7fe ff63 	bl	8000558 <__aeabi_f2d>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	4638      	mov	r0, r7
 8001698:	e9cd 2300 	strd	r2, r3, [sp]
 800169c:	4a2c      	ldr	r2, [pc, #176]	@ (8001750 <telemetry+0x34c>)
 800169e:	2180      	movs	r1, #128	@ 0x80
 80016a0:	f00b fe50 	bl	800d344 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 80016a4:	463b      	mov	r3, r7
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7fe fdea 	bl	8000280 <strlen>
 80016ac:	4603      	mov	r3, r0
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	4639      	mov	r1, r7
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016b6:	481a      	ldr	r0, [pc, #104]	@ (8001720 <telemetry+0x31c>)
 80016b8:	f007 fb6e 	bl	8008d98 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "GYZ:%.2f\r\n", imuDataReceived.gyroZ);
 80016bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001730 <telemetry+0x32c>)
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7fe ff49 	bl	8000558 <__aeabi_f2d>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	4638      	mov	r0, r7
 80016cc:	e9cd 2300 	strd	r2, r3, [sp]
 80016d0:	4a20      	ldr	r2, [pc, #128]	@ (8001754 <telemetry+0x350>)
 80016d2:	2180      	movs	r1, #128	@ 0x80
 80016d4:	f00b fe36 	bl	800d344 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 80016d8:	463b      	mov	r3, r7
 80016da:	4618      	mov	r0, r3
 80016dc:	f7fe fdd0 	bl	8000280 <strlen>
 80016e0:	4603      	mov	r3, r0
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	4639      	mov	r1, r7
 80016e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016ea:	480d      	ldr	r0, [pc, #52]	@ (8001720 <telemetry+0x31c>)
 80016ec:	f007 fb54 	bl	8008d98 <HAL_UART_Transmit>

			snprintf(uartBuffer, sizeof(uartBuffer), "MGX:%.2f\r\n", imuDataReceived.magX);
 80016f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001730 <telemetry+0x32c>)
 80016f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7fe ff2f 	bl	8000558 <__aeabi_f2d>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	4638      	mov	r0, r7
 8001700:	e9cd 2300 	strd	r2, r3, [sp]
 8001704:	4a14      	ldr	r2, [pc, #80]	@ (8001758 <telemetry+0x354>)
 8001706:	2180      	movs	r1, #128	@ 0x80
 8001708:	f00b fe1c 	bl	800d344 <sniprintf>
 800170c:	e026      	b.n	800175c <telemetry+0x358>
 800170e:	bf00      	nop
 8001710:	20000474 	.word	0x20000474
 8001714:	20000470 	.word	0x20000470
 8001718:	2000033c 	.word	0x2000033c
 800171c:	0800f690 	.word	0x0800f690
 8001720:	20000608 	.word	0x20000608
 8001724:	0800f69c 	.word	0x0800f69c
 8001728:	0800f6a8 	.word	0x0800f6a8
 800172c:	0800f6b4 	.word	0x0800f6b4
 8001730:	2000034c 	.word	0x2000034c
 8001734:	0800f6c0 	.word	0x0800f6c0
 8001738:	0800f6cc 	.word	0x0800f6cc
 800173c:	0800f6d8 	.word	0x0800f6d8
 8001740:	0800f6e4 	.word	0x0800f6e4
 8001744:	0800f6f0 	.word	0x0800f6f0
 8001748:	0800f6fc 	.word	0x0800f6fc
 800174c:	0800f708 	.word	0x0800f708
 8001750:	0800f714 	.word	0x0800f714
 8001754:	0800f720 	.word	0x0800f720
 8001758:	0800f72c 	.word	0x0800f72c
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 800175c:	463b      	mov	r3, r7
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe fd8e 	bl	8000280 <strlen>
 8001764:	4603      	mov	r3, r0
 8001766:	b29a      	uxth	r2, r3
 8001768:	4639      	mov	r1, r7
 800176a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800176e:	48bb      	ldr	r0, [pc, #748]	@ (8001a5c <telemetry+0x658>)
 8001770:	f007 fb12 	bl	8008d98 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "MGY:%.2f\r\n", imuDataReceived.magY);
 8001774:	4bba      	ldr	r3, [pc, #744]	@ (8001a60 <telemetry+0x65c>)
 8001776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe feed 	bl	8000558 <__aeabi_f2d>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4638      	mov	r0, r7
 8001784:	e9cd 2300 	strd	r2, r3, [sp]
 8001788:	4ab6      	ldr	r2, [pc, #728]	@ (8001a64 <telemetry+0x660>)
 800178a:	2180      	movs	r1, #128	@ 0x80
 800178c:	f00b fdda 	bl	800d344 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8001790:	463b      	mov	r3, r7
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe fd74 	bl	8000280 <strlen>
 8001798:	4603      	mov	r3, r0
 800179a:	b29a      	uxth	r2, r3
 800179c:	4639      	mov	r1, r7
 800179e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017a2:	48ae      	ldr	r0, [pc, #696]	@ (8001a5c <telemetry+0x658>)
 80017a4:	f007 faf8 	bl	8008d98 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "MGZ:%.2f\r\n", imuDataReceived.magZ);
 80017a8:	4bad      	ldr	r3, [pc, #692]	@ (8001a60 <telemetry+0x65c>)
 80017aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7fe fed3 	bl	8000558 <__aeabi_f2d>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4638      	mov	r0, r7
 80017b8:	e9cd 2300 	strd	r2, r3, [sp]
 80017bc:	4aaa      	ldr	r2, [pc, #680]	@ (8001a68 <telemetry+0x664>)
 80017be:	2180      	movs	r1, #128	@ 0x80
 80017c0:	f00b fdc0 	bl	800d344 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 80017c4:	463b      	mov	r3, r7
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe fd5a 	bl	8000280 <strlen>
 80017cc:	4603      	mov	r3, r0
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	4639      	mov	r1, r7
 80017d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017d6:	48a1      	ldr	r0, [pc, #644]	@ (8001a5c <telemetry+0x658>)
 80017d8:	f007 fade 	bl	8008d98 <HAL_UART_Transmit>
        }

        if (osMessageQueueGetCount(radioQueueHandle) > 0) {
 80017dc:	4ba3      	ldr	r3, [pc, #652]	@ (8001a6c <telemetry+0x668>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f008 f901 	bl	80099e8 <osMessageQueueGetCount>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f000 8088 	beq.w	80018fe <telemetry+0x4fa>
			// Get Radio Data
			osMessageQueueGet(radioQueueHandle, (void*)&radioDataReceived, NULL, osWaitForever);
 80017ee:	4b9f      	ldr	r3, [pc, #636]	@ (8001a6c <telemetry+0x668>)
 80017f0:	6818      	ldr	r0, [r3, #0]
 80017f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017f6:	2200      	movs	r2, #0
 80017f8:	499d      	ldr	r1, [pc, #628]	@ (8001a70 <telemetry+0x66c>)
 80017fa:	f008 f897 	bl	800992c <osMessageQueueGet>
			// Send Radio Data
			snprintf(uartBuffer, sizeof(uartBuffer), "RW1:%.2f\r\n", (float)radioDataReceived.ch1);
 80017fe:	4b9c      	ldr	r3, [pc, #624]	@ (8001a70 <telemetry+0x66c>)
 8001800:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001804:	ee07 3a90 	vmov	s15, r3
 8001808:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800180c:	ee17 0a90 	vmov	r0, s15
 8001810:	f7fe fea2 	bl	8000558 <__aeabi_f2d>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4638      	mov	r0, r7
 800181a:	e9cd 2300 	strd	r2, r3, [sp]
 800181e:	4a95      	ldr	r2, [pc, #596]	@ (8001a74 <telemetry+0x670>)
 8001820:	2180      	movs	r1, #128	@ 0x80
 8001822:	f00b fd8f 	bl	800d344 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8001826:	463b      	mov	r3, r7
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe fd29 	bl	8000280 <strlen>
 800182e:	4603      	mov	r3, r0
 8001830:	b29a      	uxth	r2, r3
 8001832:	4639      	mov	r1, r7
 8001834:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001838:	4888      	ldr	r0, [pc, #544]	@ (8001a5c <telemetry+0x658>)
 800183a:	f007 faad 	bl	8008d98 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "RW2:%.2f\r\n", (float)radioDataReceived.ch2);
 800183e:	4b8c      	ldr	r3, [pc, #560]	@ (8001a70 <telemetry+0x66c>)
 8001840:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001844:	ee07 3a90 	vmov	s15, r3
 8001848:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800184c:	ee17 0a90 	vmov	r0, s15
 8001850:	f7fe fe82 	bl	8000558 <__aeabi_f2d>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4638      	mov	r0, r7
 800185a:	e9cd 2300 	strd	r2, r3, [sp]
 800185e:	4a86      	ldr	r2, [pc, #536]	@ (8001a78 <telemetry+0x674>)
 8001860:	2180      	movs	r1, #128	@ 0x80
 8001862:	f00b fd6f 	bl	800d344 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8001866:	463b      	mov	r3, r7
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fd09 	bl	8000280 <strlen>
 800186e:	4603      	mov	r3, r0
 8001870:	b29a      	uxth	r2, r3
 8001872:	4639      	mov	r1, r7
 8001874:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001878:	4878      	ldr	r0, [pc, #480]	@ (8001a5c <telemetry+0x658>)
 800187a:	f007 fa8d 	bl	8008d98 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "RW3:%.2f\r\n", (float)radioDataReceived.ch3);
 800187e:	4b7c      	ldr	r3, [pc, #496]	@ (8001a70 <telemetry+0x66c>)
 8001880:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001884:	ee07 3a90 	vmov	s15, r3
 8001888:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800188c:	ee17 0a90 	vmov	r0, s15
 8001890:	f7fe fe62 	bl	8000558 <__aeabi_f2d>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4638      	mov	r0, r7
 800189a:	e9cd 2300 	strd	r2, r3, [sp]
 800189e:	4a77      	ldr	r2, [pc, #476]	@ (8001a7c <telemetry+0x678>)
 80018a0:	2180      	movs	r1, #128	@ 0x80
 80018a2:	f00b fd4f 	bl	800d344 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 80018a6:	463b      	mov	r3, r7
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe fce9 	bl	8000280 <strlen>
 80018ae:	4603      	mov	r3, r0
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	4639      	mov	r1, r7
 80018b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018b8:	4868      	ldr	r0, [pc, #416]	@ (8001a5c <telemetry+0x658>)
 80018ba:	f007 fa6d 	bl	8008d98 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "RW4:%.2f\r\n", (float)radioDataReceived.ch4);
 80018be:	4b6c      	ldr	r3, [pc, #432]	@ (8001a70 <telemetry+0x66c>)
 80018c0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80018c4:	ee07 3a90 	vmov	s15, r3
 80018c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018cc:	ee17 0a90 	vmov	r0, s15
 80018d0:	f7fe fe42 	bl	8000558 <__aeabi_f2d>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4638      	mov	r0, r7
 80018da:	e9cd 2300 	strd	r2, r3, [sp]
 80018de:	4a68      	ldr	r2, [pc, #416]	@ (8001a80 <telemetry+0x67c>)
 80018e0:	2180      	movs	r1, #128	@ 0x80
 80018e2:	f00b fd2f 	bl	800d344 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 80018e6:	463b      	mov	r3, r7
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7fe fcc9 	bl	8000280 <strlen>
 80018ee:	4603      	mov	r3, r0
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	4639      	mov	r1, r7
 80018f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018f8:	4858      	ldr	r0, [pc, #352]	@ (8001a5c <telemetry+0x658>)
 80018fa:	f007 fa4d 	bl	8008d98 <HAL_UART_Transmit>

        }

        if (osMessageQueueGetCount(controlQueueHandle)>0){
 80018fe:	4b61      	ldr	r3, [pc, #388]	@ (8001a84 <telemetry+0x680>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f008 f870 	bl	80099e8 <osMessageQueueGetCount>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	f43f ad7d 	beq.w	800140a <telemetry+0x6>

			// Get Radio Data
			osMessageQueueGet(controlQueueHandle, (void*)&controlDataReceived, NULL, osWaitForever);
 8001910:	4b5c      	ldr	r3, [pc, #368]	@ (8001a84 <telemetry+0x680>)
 8001912:	6818      	ldr	r0, [r3, #0]
 8001914:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001918:	2200      	movs	r2, #0
 800191a:	495b      	ldr	r1, [pc, #364]	@ (8001a88 <telemetry+0x684>)
 800191c:	f008 f806 	bl	800992c <osMessageQueueGet>
			// Send Radio Data
			snprintf(uartBuffer, sizeof(uartBuffer), "CT1:%.2f\r\n", (float)controlDataReceived.ctrl1);
 8001920:	4b59      	ldr	r3, [pc, #356]	@ (8001a88 <telemetry+0x684>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f7fe fe17 	bl	8000558 <__aeabi_f2d>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	4638      	mov	r0, r7
 8001930:	e9cd 2300 	strd	r2, r3, [sp]
 8001934:	4a55      	ldr	r2, [pc, #340]	@ (8001a8c <telemetry+0x688>)
 8001936:	2180      	movs	r1, #128	@ 0x80
 8001938:	f00b fd04 	bl	800d344 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 800193c:	463b      	mov	r3, r7
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fc9e 	bl	8000280 <strlen>
 8001944:	4603      	mov	r3, r0
 8001946:	b29a      	uxth	r2, r3
 8001948:	4639      	mov	r1, r7
 800194a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800194e:	4843      	ldr	r0, [pc, #268]	@ (8001a5c <telemetry+0x658>)
 8001950:	f007 fa22 	bl	8008d98 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "CT2:%.2f\r\n", (float)controlDataReceived.ctrl2);
 8001954:	4b4c      	ldr	r3, [pc, #304]	@ (8001a88 <telemetry+0x684>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	4618      	mov	r0, r3
 800195a:	f7fe fdfd 	bl	8000558 <__aeabi_f2d>
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	4638      	mov	r0, r7
 8001964:	e9cd 2300 	strd	r2, r3, [sp]
 8001968:	4a49      	ldr	r2, [pc, #292]	@ (8001a90 <telemetry+0x68c>)
 800196a:	2180      	movs	r1, #128	@ 0x80
 800196c:	f00b fcea 	bl	800d344 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8001970:	463b      	mov	r3, r7
 8001972:	4618      	mov	r0, r3
 8001974:	f7fe fc84 	bl	8000280 <strlen>
 8001978:	4603      	mov	r3, r0
 800197a:	b29a      	uxth	r2, r3
 800197c:	4639      	mov	r1, r7
 800197e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001982:	4836      	ldr	r0, [pc, #216]	@ (8001a5c <telemetry+0x658>)
 8001984:	f007 fa08 	bl	8008d98 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "CT3:%.2f\r\n", (float)controlDataReceived.ctrl3);
 8001988:	4b3f      	ldr	r3, [pc, #252]	@ (8001a88 <telemetry+0x684>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	4618      	mov	r0, r3
 800198e:	f7fe fde3 	bl	8000558 <__aeabi_f2d>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	4638      	mov	r0, r7
 8001998:	e9cd 2300 	strd	r2, r3, [sp]
 800199c:	4a3d      	ldr	r2, [pc, #244]	@ (8001a94 <telemetry+0x690>)
 800199e:	2180      	movs	r1, #128	@ 0x80
 80019a0:	f00b fcd0 	bl	800d344 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 80019a4:	463b      	mov	r3, r7
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe fc6a 	bl	8000280 <strlen>
 80019ac:	4603      	mov	r3, r0
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	4639      	mov	r1, r7
 80019b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019b6:	4829      	ldr	r0, [pc, #164]	@ (8001a5c <telemetry+0x658>)
 80019b8:	f007 f9ee 	bl	8008d98 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "CT4:%.2f\r\n", (float)controlDataReceived.ctrl4);
 80019bc:	4b32      	ldr	r3, [pc, #200]	@ (8001a88 <telemetry+0x684>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7fe fdc9 	bl	8000558 <__aeabi_f2d>
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	4638      	mov	r0, r7
 80019cc:	e9cd 2300 	strd	r2, r3, [sp]
 80019d0:	4a31      	ldr	r2, [pc, #196]	@ (8001a98 <telemetry+0x694>)
 80019d2:	2180      	movs	r1, #128	@ 0x80
 80019d4:	f00b fcb6 	bl	800d344 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 80019d8:	463b      	mov	r3, r7
 80019da:	4618      	mov	r0, r3
 80019dc:	f7fe fc50 	bl	8000280 <strlen>
 80019e0:	4603      	mov	r3, r0
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	4639      	mov	r1, r7
 80019e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019ea:	481c      	ldr	r0, [pc, #112]	@ (8001a5c <telemetry+0x658>)
 80019ec:	f007 f9d4 	bl	8008d98 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "CT5:%.2f\r\n", (float)controlDataReceived.ctrl5);
 80019f0:	4b25      	ldr	r3, [pc, #148]	@ (8001a88 <telemetry+0x684>)
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7fe fdaf 	bl	8000558 <__aeabi_f2d>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4638      	mov	r0, r7
 8001a00:	e9cd 2300 	strd	r2, r3, [sp]
 8001a04:	4a25      	ldr	r2, [pc, #148]	@ (8001a9c <telemetry+0x698>)
 8001a06:	2180      	movs	r1, #128	@ 0x80
 8001a08:	f00b fc9c 	bl	800d344 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8001a0c:	463b      	mov	r3, r7
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe fc36 	bl	8000280 <strlen>
 8001a14:	4603      	mov	r3, r0
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	4639      	mov	r1, r7
 8001a1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a1e:	480f      	ldr	r0, [pc, #60]	@ (8001a5c <telemetry+0x658>)
 8001a20:	f007 f9ba 	bl	8008d98 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "CT6:%.2f\r\n", (float)controlDataReceived.ctrl6);
 8001a24:	4b18      	ldr	r3, [pc, #96]	@ (8001a88 <telemetry+0x684>)
 8001a26:	695b      	ldr	r3, [r3, #20]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7fe fd95 	bl	8000558 <__aeabi_f2d>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	4638      	mov	r0, r7
 8001a34:	e9cd 2300 	strd	r2, r3, [sp]
 8001a38:	4a19      	ldr	r2, [pc, #100]	@ (8001aa0 <telemetry+0x69c>)
 8001a3a:	2180      	movs	r1, #128	@ 0x80
 8001a3c:	f00b fc82 	bl	800d344 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8001a40:	463b      	mov	r3, r7
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7fe fc1c 	bl	8000280 <strlen>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	4639      	mov	r1, r7
 8001a4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a52:	4802      	ldr	r0, [pc, #8]	@ (8001a5c <telemetry+0x658>)
 8001a54:	f007 f9a0 	bl	8008d98 <HAL_UART_Transmit>
        if (osMessageQueueGetCount(imuQueueHandle) > 0) {
 8001a58:	e4d7      	b.n	800140a <telemetry+0x6>
 8001a5a:	bf00      	nop
 8001a5c:	20000608 	.word	0x20000608
 8001a60:	2000034c 	.word	0x2000034c
 8001a64:	0800f738 	.word	0x0800f738
 8001a68:	0800f744 	.word	0x0800f744
 8001a6c:	2000046c 	.word	0x2000046c
 8001a70:	2000037c 	.word	0x2000037c
 8001a74:	0800f750 	.word	0x0800f750
 8001a78:	0800f75c 	.word	0x0800f75c
 8001a7c:	0800f768 	.word	0x0800f768
 8001a80:	0800f774 	.word	0x0800f774
 8001a84:	20000478 	.word	0x20000478
 8001a88:	20000384 	.word	0x20000384
 8001a8c:	0800f780 	.word	0x0800f780
 8001a90:	0800f78c 	.word	0x0800f78c
 8001a94:	0800f798 	.word	0x0800f798
 8001a98:	0800f7a4 	.word	0x0800f7a4
 8001a9c:	0800f7b0 	.word	0x0800f7b0
 8001aa0:	0800f7bc 	.word	0x0800f7bc

08001aa4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001aaa:	463b      	mov	r3, r7
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001ab6:	4b36      	ldr	r3, [pc, #216]	@ (8001b90 <MX_ADC1_Init+0xec>)
 8001ab8:	4a36      	ldr	r2, [pc, #216]	@ (8001b94 <MX_ADC1_Init+0xf0>)
 8001aba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001abc:	4b34      	ldr	r3, [pc, #208]	@ (8001b90 <MX_ADC1_Init+0xec>)
 8001abe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001ac2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ac4:	4b32      	ldr	r3, [pc, #200]	@ (8001b90 <MX_ADC1_Init+0xec>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001aca:	4b31      	ldr	r3, [pc, #196]	@ (8001b90 <MX_ADC1_Init+0xec>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001ad0:	4b2f      	ldr	r3, [pc, #188]	@ (8001b90 <MX_ADC1_Init+0xec>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ad6:	4b2e      	ldr	r3, [pc, #184]	@ (8001b90 <MX_ADC1_Init+0xec>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ade:	4b2c      	ldr	r3, [pc, #176]	@ (8001b90 <MX_ADC1_Init+0xec>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ae4:	4b2a      	ldr	r3, [pc, #168]	@ (8001b90 <MX_ADC1_Init+0xec>)
 8001ae6:	4a2c      	ldr	r2, [pc, #176]	@ (8001b98 <MX_ADC1_Init+0xf4>)
 8001ae8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001aea:	4b29      	ldr	r3, [pc, #164]	@ (8001b90 <MX_ADC1_Init+0xec>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001af0:	4b27      	ldr	r3, [pc, #156]	@ (8001b90 <MX_ADC1_Init+0xec>)
 8001af2:	2204      	movs	r2, #4
 8001af4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001af6:	4b26      	ldr	r3, [pc, #152]	@ (8001b90 <MX_ADC1_Init+0xec>)
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001afe:	4b24      	ldr	r3, [pc, #144]	@ (8001b90 <MX_ADC1_Init+0xec>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b04:	4822      	ldr	r0, [pc, #136]	@ (8001b90 <MX_ADC1_Init+0xec>)
 8001b06:	f002 fe05 	bl	8004714 <HAL_ADC_Init>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b10:	f001 ff7e 	bl	8003a10 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001b14:	2301      	movs	r3, #1
 8001b16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b20:	463b      	mov	r3, r7
 8001b22:	4619      	mov	r1, r3
 8001b24:	481a      	ldr	r0, [pc, #104]	@ (8001b90 <MX_ADC1_Init+0xec>)
 8001b26:	f002 ff47 	bl	80049b8 <HAL_ADC_ConfigChannel>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001b30:	f001 ff6e 	bl	8003a10 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001b34:	2302      	movs	r3, #2
 8001b36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b3c:	463b      	mov	r3, r7
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4813      	ldr	r0, [pc, #76]	@ (8001b90 <MX_ADC1_Init+0xec>)
 8001b42:	f002 ff39 	bl	80049b8 <HAL_ADC_ConfigChannel>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001b4c:	f001 ff60 	bl	8003a10 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001b50:	2303      	movs	r3, #3
 8001b52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001b54:	2303      	movs	r3, #3
 8001b56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b58:	463b      	mov	r3, r7
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	480c      	ldr	r0, [pc, #48]	@ (8001b90 <MX_ADC1_Init+0xec>)
 8001b5e:	f002 ff2b 	bl	80049b8 <HAL_ADC_ConfigChannel>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001b68:	f001 ff52 	bl	8003a10 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001b6c:	2304      	movs	r3, #4
 8001b6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001b70:	2304      	movs	r3, #4
 8001b72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b74:	463b      	mov	r3, r7
 8001b76:	4619      	mov	r1, r3
 8001b78:	4805      	ldr	r0, [pc, #20]	@ (8001b90 <MX_ADC1_Init+0xec>)
 8001b7a:	f002 ff1d 	bl	80049b8 <HAL_ADC_ConfigChannel>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001b84:	f001 ff44 	bl	8003a10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b88:	bf00      	nop
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	2000039c 	.word	0x2000039c
 8001b94:	40012000 	.word	0x40012000
 8001b98:	0f000001 	.word	0x0f000001

08001b9c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08a      	sub	sp, #40	@ 0x28
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba4:	f107 0314 	add.w	r3, r7, #20
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a2f      	ldr	r2, [pc, #188]	@ (8001c78 <HAL_ADC_MspInit+0xdc>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d157      	bne.n	8001c6e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	613b      	str	r3, [r7, #16]
 8001bc2:	4b2e      	ldr	r3, [pc, #184]	@ (8001c7c <HAL_ADC_MspInit+0xe0>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc6:	4a2d      	ldr	r2, [pc, #180]	@ (8001c7c <HAL_ADC_MspInit+0xe0>)
 8001bc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bce:	4b2b      	ldr	r3, [pc, #172]	@ (8001c7c <HAL_ADC_MspInit+0xe0>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bd6:	613b      	str	r3, [r7, #16]
 8001bd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	4b27      	ldr	r3, [pc, #156]	@ (8001c7c <HAL_ADC_MspInit+0xe0>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be2:	4a26      	ldr	r2, [pc, #152]	@ (8001c7c <HAL_ADC_MspInit+0xe0>)
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bea:	4b24      	ldr	r3, [pc, #144]	@ (8001c7c <HAL_ADC_MspInit+0xe0>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ANALOG1_Pin|ANALOG2_Pin|ANALOG3_Pin|ANALOG4_Pin;
 8001bf6:	231e      	movs	r3, #30
 8001bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c02:	f107 0314 	add.w	r3, r7, #20
 8001c06:	4619      	mov	r1, r3
 8001c08:	481d      	ldr	r0, [pc, #116]	@ (8001c80 <HAL_ADC_MspInit+0xe4>)
 8001c0a:	f003 fdc7 	bl	800579c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001c84 <HAL_ADC_MspInit+0xe8>)
 8001c10:	4a1d      	ldr	r2, [pc, #116]	@ (8001c88 <HAL_ADC_MspInit+0xec>)
 8001c12:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001c14:	4b1b      	ldr	r3, [pc, #108]	@ (8001c84 <HAL_ADC_MspInit+0xe8>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001c84 <HAL_ADC_MspInit+0xe8>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c20:	4b18      	ldr	r3, [pc, #96]	@ (8001c84 <HAL_ADC_MspInit+0xe8>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c26:	4b17      	ldr	r3, [pc, #92]	@ (8001c84 <HAL_ADC_MspInit+0xe8>)
 8001c28:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c2c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c2e:	4b15      	ldr	r3, [pc, #84]	@ (8001c84 <HAL_ADC_MspInit+0xe8>)
 8001c30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001c34:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c36:	4b13      	ldr	r3, [pc, #76]	@ (8001c84 <HAL_ADC_MspInit+0xe8>)
 8001c38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c3c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001c3e:	4b11      	ldr	r3, [pc, #68]	@ (8001c84 <HAL_ADC_MspInit+0xe8>)
 8001c40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c44:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001c46:	4b0f      	ldr	r3, [pc, #60]	@ (8001c84 <HAL_ADC_MspInit+0xe8>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c84 <HAL_ADC_MspInit+0xe8>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c52:	480c      	ldr	r0, [pc, #48]	@ (8001c84 <HAL_ADC_MspInit+0xe8>)
 8001c54:	f003 fa32 	bl	80050bc <HAL_DMA_Init>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001c5e:	f001 fed7 	bl	8003a10 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a07      	ldr	r2, [pc, #28]	@ (8001c84 <HAL_ADC_MspInit+0xe8>)
 8001c66:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c68:	4a06      	ldr	r2, [pc, #24]	@ (8001c84 <HAL_ADC_MspInit+0xe8>)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001c6e:	bf00      	nop
 8001c70:	3728      	adds	r7, #40	@ 0x28
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40012000 	.word	0x40012000
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40020000 	.word	0x40020000
 8001c84:	200003e4 	.word	0x200003e4
 8001c88:	40026410 	.word	0x40026410

08001c8c <bno055_init>:
 *
 *  Return:
 *  > `bool`: `true` if none of the init steps fail, `false` else
 * ---------------------------------------------------------------
 */
error_bno bno055_init(bno055_t* imu) {
 8001c8c:	b590      	push	{r4, r7, lr}
 8001c8e:	b0af      	sub	sp, #188	@ 0xbc
 8001c90:	af2a      	add	r7, sp, #168	@ 0xa8
 8001c92:	6078      	str	r0, [r7, #4]
    u8 id = 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	73bb      	strb	r3, [r7, #14]
    error_bno err;

    imu->addr = (imu->addr << 1);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	799b      	ldrb	r3, [r3, #6]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	719a      	strb	r2, [r3, #6]
    err = bno055_read_regs(*imu, BNO_CHIP_ID, &id, 1);
 8001ca4:	687c      	ldr	r4, [r7, #4]
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001caa:	f107 030e 	add.w	r3, r7, #14
 8001cae:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001cb4:	4668      	mov	r0, sp
 8001cb6:	f104 0310 	add.w	r3, r4, #16
 8001cba:	229c      	movs	r2, #156	@ 0x9c
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	f00b fc8e 	bl	800d5de <memcpy>
 8001cc2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001cc6:	f001 fb4e 	bl	8003366 <bno055_read_regs>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <bno055_init+0x4c>
        return err;
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
 8001cd6:	e0b6      	b.n	8001e46 <bno055_init+0x1ba>
    }
    if (id != BNO_DEF_CHIP_ID) {
 8001cd8:	7bbb      	ldrb	r3, [r7, #14]
 8001cda:	2ba0      	cmp	r3, #160	@ 0xa0
 8001cdc:	d001      	beq.n	8001ce2 <bno055_init+0x56>
        return BNO_ERR_WRONG_CHIP_ID;
 8001cde:	2306      	movs	r3, #6
 8001ce0:	e0b1      	b.n	8001e46 <bno055_init+0x1ba>
    }
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f001 fa74 	bl	80031d2 <bno055_set_opmode>
 8001cea:	4603      	mov	r3, r0
 8001cec:	73fb      	strb	r3, [r7, #15]
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <bno055_init+0x6c>
        return err;
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
 8001cf6:	e0a6      	b.n	8001e46 <bno055_init+0x1ba>
    }
    osDelay(2);
 8001cf8:	2002      	movs	r0, #2
 8001cfa:	f007 fd29 	bl	8009750 <osDelay>
    bno055_reset(imu);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f001 faeb 	bl	80032da <bno055_reset>
    osDelay(5000);
 8001d04:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001d08:	f007 fd22 	bl	8009750 <osDelay>
    if ((err = bno055_set_pwr_mode(imu, BNO_PWR_NORMAL)) != BNO_OK) {
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f001 fa86 	bl	8003220 <bno055_set_pwr_mode>
 8001d14:	4603      	mov	r3, r0
 8001d16:	73fb      	strb	r3, [r7, #15]
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <bno055_init+0x96>
        return err;
 8001d1e:	7bfb      	ldrb	r3, [r7, #15]
 8001d20:	e091      	b.n	8001e46 <bno055_init+0x1ba>
    }
    osDelay(10);
 8001d22:	200a      	movs	r0, #10
 8001d24:	f007 fd14 	bl	8009750 <osDelay>
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001d28:	2100      	movs	r1, #0
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f001 fb7f 	bl	800342e <bno055_set_page>
 8001d30:	4603      	mov	r3, r0
 8001d32:	73fb      	strb	r3, [r7, #15]
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <bno055_init+0xb2>
        return err;
 8001d3a:	7bfb      	ldrb	r3, [r7, #15]
 8001d3c:	e083      	b.n	8001e46 <bno055_init+0x1ba>
    }
    osDelay(BNO_CONFIG_TIME_DELAY + 5);
 8001d3e:	200c      	movs	r0, #12
 8001d40:	f007 fd06 	bl	8009750 <osDelay>
    bno055_on(imu);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f001 faeb 	bl	8003320 <bno055_on>
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	791b      	ldrb	r3, [r3, #4]
 8001d4e:	4619      	mov	r1, r3
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f001 fa3e 	bl	80031d2 <bno055_set_opmode>
 8001d56:	4603      	mov	r3, r0
 8001d58:	73fb      	strb	r3, [r7, #15]
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <bno055_init+0xd8>
        return err;
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
 8001d62:	e070      	b.n	8001e46 <bno055_init+0x1ba>
    }
    osDelay(BNO_ANY_TIME_DELAY + 5);
 8001d64:	2018      	movs	r0, #24
 8001d66:	f007 fcf3 	bl	8009750 <osDelay>

    imu->temperature = &bno055_temperature;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a38      	ldr	r2, [pc, #224]	@ (8001e50 <bno055_init+0x1c4>)
 8001d6e:	625a      	str	r2, [r3, #36]	@ 0x24
    imu->acc_x = &bno055_acc_x;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a38      	ldr	r2, [pc, #224]	@ (8001e54 <bno055_init+0x1c8>)
 8001d74:	629a      	str	r2, [r3, #40]	@ 0x28
    imu->acc_y = &bno055_acc_y;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a37      	ldr	r2, [pc, #220]	@ (8001e58 <bno055_init+0x1cc>)
 8001d7a:	62da      	str	r2, [r3, #44]	@ 0x2c
    imu->acc_z = &bno055_acc_z;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a37      	ldr	r2, [pc, #220]	@ (8001e5c <bno055_init+0x1d0>)
 8001d80:	631a      	str	r2, [r3, #48]	@ 0x30
    imu->acc = &bno055_acc;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a36      	ldr	r2, [pc, #216]	@ (8001e60 <bno055_init+0x1d4>)
 8001d86:	635a      	str	r2, [r3, #52]	@ 0x34
    imu->linear_acc_x = &bno055_linear_acc_x;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a36      	ldr	r2, [pc, #216]	@ (8001e64 <bno055_init+0x1d8>)
 8001d8c:	639a      	str	r2, [r3, #56]	@ 0x38
    imu->linear_acc_y = &bno055_linear_acc_y;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a35      	ldr	r2, [pc, #212]	@ (8001e68 <bno055_init+0x1dc>)
 8001d92:	63da      	str	r2, [r3, #60]	@ 0x3c
    imu->linear_acc_z = &bno055_linear_acc_z;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a35      	ldr	r2, [pc, #212]	@ (8001e6c <bno055_init+0x1e0>)
 8001d98:	641a      	str	r2, [r3, #64]	@ 0x40
    imu->linear_acc = &bno055_linear_acc;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a34      	ldr	r2, [pc, #208]	@ (8001e70 <bno055_init+0x1e4>)
 8001d9e:	645a      	str	r2, [r3, #68]	@ 0x44
    imu->gyro_x = &bno055_gyro_x;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a34      	ldr	r2, [pc, #208]	@ (8001e74 <bno055_init+0x1e8>)
 8001da4:	649a      	str	r2, [r3, #72]	@ 0x48
    imu->gyro_y = &bno055_gyro_y;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a33      	ldr	r2, [pc, #204]	@ (8001e78 <bno055_init+0x1ec>)
 8001daa:	64da      	str	r2, [r3, #76]	@ 0x4c
    imu->gyro_z = &bno055_gyro_z;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a33      	ldr	r2, [pc, #204]	@ (8001e7c <bno055_init+0x1f0>)
 8001db0:	651a      	str	r2, [r3, #80]	@ 0x50
    imu->gyro = &bno055_gyro;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a32      	ldr	r2, [pc, #200]	@ (8001e80 <bno055_init+0x1f4>)
 8001db6:	655a      	str	r2, [r3, #84]	@ 0x54
    imu->mag_x = &bno055_mag_x;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a32      	ldr	r2, [pc, #200]	@ (8001e84 <bno055_init+0x1f8>)
 8001dbc:	659a      	str	r2, [r3, #88]	@ 0x58
    imu->mag_y = &bno055_mag_y;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a31      	ldr	r2, [pc, #196]	@ (8001e88 <bno055_init+0x1fc>)
 8001dc2:	65da      	str	r2, [r3, #92]	@ 0x5c
    imu->mag_z = &bno055_mag_z;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a31      	ldr	r2, [pc, #196]	@ (8001e8c <bno055_init+0x200>)
 8001dc8:	661a      	str	r2, [r3, #96]	@ 0x60
    imu->mag = &bno055_mag;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a30      	ldr	r2, [pc, #192]	@ (8001e90 <bno055_init+0x204>)
 8001dce:	665a      	str	r2, [r3, #100]	@ 0x64
    imu->gravity_x = &bno055_gravity_x;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a30      	ldr	r2, [pc, #192]	@ (8001e94 <bno055_init+0x208>)
 8001dd4:	669a      	str	r2, [r3, #104]	@ 0x68
    imu->gravity_y = &bno055_gravity_y;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a2f      	ldr	r2, [pc, #188]	@ (8001e98 <bno055_init+0x20c>)
 8001dda:	66da      	str	r2, [r3, #108]	@ 0x6c
    imu->gravity_z = &bno055_gravity_z;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a2f      	ldr	r2, [pc, #188]	@ (8001e9c <bno055_init+0x210>)
 8001de0:	671a      	str	r2, [r3, #112]	@ 0x70
    imu->gravity = &bno055_gravity;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a2e      	ldr	r2, [pc, #184]	@ (8001ea0 <bno055_init+0x214>)
 8001de6:	675a      	str	r2, [r3, #116]	@ 0x74
    imu->euler_yaw = &bno055_euler_yaw;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a2e      	ldr	r2, [pc, #184]	@ (8001ea4 <bno055_init+0x218>)
 8001dec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    imu->euler_roll = &bno055_euler_roll;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a2d      	ldr	r2, [pc, #180]	@ (8001ea8 <bno055_init+0x21c>)
 8001df4:	679a      	str	r2, [r3, #120]	@ 0x78
    imu->euler_pitch = &bno055_euler_pitch;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a2c      	ldr	r2, [pc, #176]	@ (8001eac <bno055_init+0x220>)
 8001dfa:	67da      	str	r2, [r3, #124]	@ 0x7c
    imu->euler = &bno055_euler;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a2c      	ldr	r2, [pc, #176]	@ (8001eb0 <bno055_init+0x224>)
 8001e00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    imu->quaternion_w = &bno055_quaternion_w;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a2b      	ldr	r2, [pc, #172]	@ (8001eb4 <bno055_init+0x228>)
 8001e08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    imu->quaternion_x = &bno055_quaternion_x;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a2a      	ldr	r2, [pc, #168]	@ (8001eb8 <bno055_init+0x22c>)
 8001e10:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    imu->quaternion_y = &bno055_quaternion_y;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a29      	ldr	r2, [pc, #164]	@ (8001ebc <bno055_init+0x230>)
 8001e18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    imu->quaternion_z = &bno055_quaternion_z;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a28      	ldr	r2, [pc, #160]	@ (8001ec0 <bno055_init+0x234>)
 8001e20:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    imu->quaternion = &bno055_quaternion;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a27      	ldr	r2, [pc, #156]	@ (8001ec4 <bno055_init+0x238>)
 8001e28:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

    imu->acc_config = &bno055_acc_conf;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a26      	ldr	r2, [pc, #152]	@ (8001ec8 <bno055_init+0x23c>)
 8001e30:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    imu->gyr_config = &bno055_gyr_conf;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a25      	ldr	r2, [pc, #148]	@ (8001ecc <bno055_init+0x240>)
 8001e38:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    imu->mag_config = &bno055_mag_conf;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a24      	ldr	r2, [pc, #144]	@ (8001ed0 <bno055_init+0x244>)
 8001e40:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
    return BNO_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3714      	adds	r7, #20
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd90      	pop	{r4, r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	08001ed5 	.word	0x08001ed5
 8001e54:	08001f3d 	.word	0x08001f3d
 8001e58:	08001fbd 	.word	0x08001fbd
 8001e5c:	0800203d 	.word	0x0800203d
 8001e60:	080020bd 	.word	0x080020bd
 8001e64:	08002189 	.word	0x08002189
 8001e68:	08002209 	.word	0x08002209
 8001e6c:	08002289 	.word	0x08002289
 8001e70:	08002309 	.word	0x08002309
 8001e74:	080023d5 	.word	0x080023d5
 8001e78:	08002455 	.word	0x08002455
 8001e7c:	080024d5 	.word	0x080024d5
 8001e80:	08002555 	.word	0x08002555
 8001e84:	08002621 	.word	0x08002621
 8001e88:	0800268d 	.word	0x0800268d
 8001e8c:	080026f9 	.word	0x080026f9
 8001e90:	08002765 	.word	0x08002765
 8001e94:	08002819 	.word	0x08002819
 8001e98:	0800289d 	.word	0x0800289d
 8001e9c:	08002921 	.word	0x08002921
 8001ea0:	080029a5 	.word	0x080029a5
 8001ea4:	08002a71 	.word	0x08002a71
 8001ea8:	08002af5 	.word	0x08002af5
 8001eac:	08002b79 	.word	0x08002b79
 8001eb0:	08002bfd 	.word	0x08002bfd
 8001eb4:	08002cc9 	.word	0x08002cc9
 8001eb8:	08002d39 	.word	0x08002d39
 8001ebc:	08002da9 	.word	0x08002da9
 8001ec0:	08002e19 	.word	0x08002e19
 8001ec4:	08002e89 	.word	0x08002e89
 8001ec8:	08002f65 	.word	0x08002f65
 8001ecc:	08003035 	.word	0x08003035
 8001ed0:	08003103 	.word	0x08003103

08001ed4 <bno055_temperature>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, `BNO_ERR_X` else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_temperature(bno055_t* imu, s8* buf) {
 8001ed4:	b590      	push	{r4, r7, lr}
 8001ed6:	b0af      	sub	sp, #188	@ 0xbc
 8001ed8:	af2a      	add	r7, sp, #168	@ 0xa8
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data = 0;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_read_regs(*imu, BNO_TEMP, &data, 1)) != BNO_OK) {
 8001ee2:	687c      	ldr	r4, [r7, #4]
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001ee8:	f107 030e 	add.w	r3, r7, #14
 8001eec:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001eee:	2334      	movs	r3, #52	@ 0x34
 8001ef0:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001ef2:	4668      	mov	r0, sp
 8001ef4:	f104 0310 	add.w	r3, r4, #16
 8001ef8:	229c      	movs	r2, #156	@ 0x9c
 8001efa:	4619      	mov	r1, r3
 8001efc:	f00b fb6f 	bl	800d5de <memcpy>
 8001f00:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f04:	f001 fa2f 	bl	8003366 <bno055_read_regs>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	73fb      	strb	r3, [r7, #15]
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <bno055_temperature+0x42>
        return err;
 8001f12:	7bfb      	ldrb	r3, [r7, #15]
 8001f14:	e00d      	b.n	8001f32 <bno055_temperature+0x5e>
    }
    *buf = (imu->_temp_unit) ? data * 2 : data;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	7bdb      	ldrb	r3, [r3, #15]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d004      	beq.n	8001f28 <bno055_temperature+0x54>
 8001f1e:	7bbb      	ldrb	r3, [r7, #14]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	b25b      	sxtb	r3, r3
 8001f26:	e001      	b.n	8001f2c <bno055_temperature+0x58>
 8001f28:	7bbb      	ldrb	r3, [r7, #14]
 8001f2a:	b25b      	sxtb	r3, r3
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	7013      	strb	r3, [r2, #0]
    return BNO_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd90      	pop	{r4, r7, pc}
	...

08001f3c <bno055_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_x(bno055_t* imu, f32* buf) {
 8001f3c:	b590      	push	{r4, r7, lr}
 8001f3e:	b0af      	sub	sp, #188	@ 0xbc
 8001f40:	af2a      	add	r7, sp, #168	@ 0xa8
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001f46:	687c      	ldr	r4, [r7, #4]
 8001f48:	2302      	movs	r3, #2
 8001f4a:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001f4c:	f107 030c 	add.w	r3, r7, #12
 8001f50:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001f52:	2308      	movs	r3, #8
 8001f54:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001f56:	4668      	mov	r0, sp
 8001f58:	f104 0310 	add.w	r3, r4, #16
 8001f5c:	229c      	movs	r2, #156	@ 0x9c
 8001f5e:	4619      	mov	r1, r3
 8001f60:	f00b fb3d 	bl	800d5de <memcpy>
 8001f64:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f68:	f001 f9fd 	bl	8003366 <bno055_read_regs>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	73fb      	strb	r3, [r7, #15]
 8001f70:	7bfb      	ldrb	r3, [r7, #15]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <bno055_acc_x+0x3e>
        return err;
 8001f76:	7bfb      	ldrb	r3, [r7, #15]
 8001f78:	e019      	b.n	8001fae <bno055_acc_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001f7a:	7b7b      	ldrb	r3, [r7, #13]
 8001f7c:	021b      	lsls	r3, r3, #8
 8001f7e:	b21a      	sxth	r2, r3
 8001f80:	7b3b      	ldrb	r3, [r7, #12]
 8001f82:	b21b      	sxth	r3, r3
 8001f84:	4313      	orrs	r3, r2
 8001f86:	b21b      	sxth	r3, r3
 8001f88:	ee07 3a90 	vmov	s15, r3
 8001f8c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d102      	bne.n	8001f9e <bno055_acc_x+0x62>
 8001f98:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001fb8 <bno055_acc_x+0x7c>
 8001f9c:	e001      	b.n	8001fa2 <bno055_acc_x+0x66>
 8001f9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8001fa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001fac:	2300      	movs	r3, #0
};
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd90      	pop	{r4, r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	42c80000 	.word	0x42c80000

08001fbc <bno055_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_y(bno055_t* imu, f32* buf) {
 8001fbc:	b590      	push	{r4, r7, lr}
 8001fbe:	b0af      	sub	sp, #188	@ 0xbc
 8001fc0:	af2a      	add	r7, sp, #168	@ 0xa8
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8001fc6:	687c      	ldr	r4, [r7, #4]
 8001fc8:	2302      	movs	r3, #2
 8001fca:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001fcc:	f107 030c 	add.w	r3, r7, #12
 8001fd0:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001fd2:	230a      	movs	r3, #10
 8001fd4:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001fd6:	4668      	mov	r0, sp
 8001fd8:	f104 0310 	add.w	r3, r4, #16
 8001fdc:	229c      	movs	r2, #156	@ 0x9c
 8001fde:	4619      	mov	r1, r3
 8001fe0:	f00b fafd 	bl	800d5de <memcpy>
 8001fe4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001fe8:	f001 f9bd 	bl	8003366 <bno055_read_regs>
 8001fec:	4603      	mov	r3, r0
 8001fee:	73fb      	strb	r3, [r7, #15]
 8001ff0:	7bfb      	ldrb	r3, [r7, #15]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <bno055_acc_y+0x3e>
        return err;
 8001ff6:	7bfb      	ldrb	r3, [r7, #15]
 8001ff8:	e019      	b.n	800202e <bno055_acc_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001ffa:	7b7b      	ldrb	r3, [r7, #13]
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	b21a      	sxth	r2, r3
 8002000:	7b3b      	ldrb	r3, [r7, #12]
 8002002:	b21b      	sxth	r3, r3
 8002004:	4313      	orrs	r3, r2
 8002006:	b21b      	sxth	r3, r3
 8002008:	ee07 3a90 	vmov	s15, r3
 800200c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8002014:	2b00      	cmp	r3, #0
 8002016:	d102      	bne.n	800201e <bno055_acc_y+0x62>
 8002018:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002038 <bno055_acc_y+0x7c>
 800201c:	e001      	b.n	8002022 <bno055_acc_y+0x66>
 800201e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8002022:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800202c:	2300      	movs	r3, #0
};
 800202e:	4618      	mov	r0, r3
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	bd90      	pop	{r4, r7, pc}
 8002036:	bf00      	nop
 8002038:	42c80000 	.word	0x42c80000

0800203c <bno055_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_z(bno055_t* imu, f32* buf) {
 800203c:	b590      	push	{r4, r7, lr}
 800203e:	b0af      	sub	sp, #188	@ 0xbc
 8002040:	af2a      	add	r7, sp, #168	@ 0xa8
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8002046:	687c      	ldr	r4, [r7, #4]
 8002048:	2302      	movs	r3, #2
 800204a:	9329      	str	r3, [sp, #164]	@ 0xa4
 800204c:	f107 030c 	add.w	r3, r7, #12
 8002050:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002052:	230c      	movs	r3, #12
 8002054:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002056:	4668      	mov	r0, sp
 8002058:	f104 0310 	add.w	r3, r4, #16
 800205c:	229c      	movs	r2, #156	@ 0x9c
 800205e:	4619      	mov	r1, r3
 8002060:	f00b fabd 	bl	800d5de <memcpy>
 8002064:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002068:	f001 f97d 	bl	8003366 <bno055_read_regs>
 800206c:	4603      	mov	r3, r0
 800206e:	73fb      	strb	r3, [r7, #15]
 8002070:	7bfb      	ldrb	r3, [r7, #15]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <bno055_acc_z+0x3e>
        return err;
 8002076:	7bfb      	ldrb	r3, [r7, #15]
 8002078:	e019      	b.n	80020ae <bno055_acc_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 800207a:	7b7b      	ldrb	r3, [r7, #13]
 800207c:	021b      	lsls	r3, r3, #8
 800207e:	b21a      	sxth	r2, r3
 8002080:	7b3b      	ldrb	r3, [r7, #12]
 8002082:	b21b      	sxth	r3, r3
 8002084:	4313      	orrs	r3, r2
 8002086:	b21b      	sxth	r3, r3
 8002088:	ee07 3a90 	vmov	s15, r3
 800208c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8002094:	2b00      	cmp	r3, #0
 8002096:	d102      	bne.n	800209e <bno055_acc_z+0x62>
 8002098:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80020b8 <bno055_acc_z+0x7c>
 800209c:	e001      	b.n	80020a2 <bno055_acc_z+0x66>
 800209e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 80020a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80020ac:	2300      	movs	r3, #0
};
 80020ae:	4618      	mov	r0, r3
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd90      	pop	{r4, r7, pc}
 80020b6:	bf00      	nop
 80020b8:	42c80000 	.word	0x42c80000

080020bc <bno055_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 80020bc:	b590      	push	{r4, r7, lr}
 80020be:	b0b1      	sub	sp, #196	@ 0xc4
 80020c0:	af2a      	add	r7, sp, #168	@ 0xa8
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 6)) != BNO_OK) {
 80020c6:	687c      	ldr	r4, [r7, #4]
 80020c8:	2306      	movs	r3, #6
 80020ca:	9329      	str	r3, [sp, #164]	@ 0xa4
 80020cc:	f107 0308 	add.w	r3, r7, #8
 80020d0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80020d2:	2308      	movs	r3, #8
 80020d4:	9327      	str	r3, [sp, #156]	@ 0x9c
 80020d6:	4668      	mov	r0, sp
 80020d8:	f104 0310 	add.w	r3, r4, #16
 80020dc:	229c      	movs	r2, #156	@ 0x9c
 80020de:	4619      	mov	r1, r3
 80020e0:	f00b fa7d 	bl	800d5de <memcpy>
 80020e4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80020e8:	f001 f93d 	bl	8003366 <bno055_read_regs>
 80020ec:	4603      	mov	r3, r0
 80020ee:	75fb      	strb	r3, [r7, #23]
 80020f0:	7dfb      	ldrb	r3, [r7, #23]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <bno055_acc+0x3e>
        return err;
 80020f6:	7dfb      	ldrb	r3, [r7, #23]
 80020f8:	e03f      	b.n	800217a <bno055_acc+0xbe>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <bno055_acc+0x4a>
 8002102:	4b20      	ldr	r3, [pc, #128]	@ (8002184 <bno055_acc+0xc8>)
 8002104:	e001      	b.n	800210a <bno055_acc+0x4e>
 8002106:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800210a:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 800210c:	7a7b      	ldrb	r3, [r7, #9]
 800210e:	021b      	lsls	r3, r3, #8
 8002110:	b21a      	sxth	r2, r3
 8002112:	7a3b      	ldrb	r3, [r7, #8]
 8002114:	b21b      	sxth	r3, r3
 8002116:	4313      	orrs	r3, r2
 8002118:	b21b      	sxth	r3, r3
 800211a:	ee07 3a90 	vmov	s15, r3
 800211e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002122:	ed97 7a04 	vldr	s14, [r7, #16]
 8002126:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8002130:	7afb      	ldrb	r3, [r7, #11]
 8002132:	021b      	lsls	r3, r3, #8
 8002134:	b21a      	sxth	r2, r3
 8002136:	7abb      	ldrb	r3, [r7, #10]
 8002138:	b21b      	sxth	r3, r3
 800213a:	4313      	orrs	r3, r2
 800213c:	b21b      	sxth	r3, r3
 800213e:	ee07 3a90 	vmov	s15, r3
 8002142:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002146:	ed97 7a04 	vldr	s14, [r7, #16]
 800214a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8002154:	7b7b      	ldrb	r3, [r7, #13]
 8002156:	021b      	lsls	r3, r3, #8
 8002158:	b21a      	sxth	r2, r3
 800215a:	7b3b      	ldrb	r3, [r7, #12]
 800215c:	b21b      	sxth	r3, r3
 800215e:	4313      	orrs	r3, r2
 8002160:	b21b      	sxth	r3, r3
 8002162:	ee07 3a90 	vmov	s15, r3
 8002166:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800216a:	ed97 7a04 	vldr	s14, [r7, #16]
 800216e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8002178:	2300      	movs	r3, #0
};
 800217a:	4618      	mov	r0, r3
 800217c:	371c      	adds	r7, #28
 800217e:	46bd      	mov	sp, r7
 8002180:	bd90      	pop	{r4, r7, pc}
 8002182:	bf00      	nop
 8002184:	42c80000 	.word	0x42c80000

08002188 <bno055_linear_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_x(bno055_t* imu, f32* buf) {
 8002188:	b590      	push	{r4, r7, lr}
 800218a:	b0af      	sub	sp, #188	@ 0xbc
 800218c:	af2a      	add	r7, sp, #168	@ 0xa8
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 2)) != BNO_OK) {
 8002192:	687c      	ldr	r4, [r7, #4]
 8002194:	2302      	movs	r3, #2
 8002196:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002198:	f107 030c 	add.w	r3, r7, #12
 800219c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800219e:	2328      	movs	r3, #40	@ 0x28
 80021a0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80021a2:	4668      	mov	r0, sp
 80021a4:	f104 0310 	add.w	r3, r4, #16
 80021a8:	229c      	movs	r2, #156	@ 0x9c
 80021aa:	4619      	mov	r1, r3
 80021ac:	f00b fa17 	bl	800d5de <memcpy>
 80021b0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80021b4:	f001 f8d7 	bl	8003366 <bno055_read_regs>
 80021b8:	4603      	mov	r3, r0
 80021ba:	73fb      	strb	r3, [r7, #15]
 80021bc:	7bfb      	ldrb	r3, [r7, #15]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <bno055_linear_acc_x+0x3e>
        return err;
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
 80021c4:	e019      	b.n	80021fa <bno055_linear_acc_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80021c6:	7b7b      	ldrb	r3, [r7, #13]
 80021c8:	021b      	lsls	r3, r3, #8
 80021ca:	b21a      	sxth	r2, r3
 80021cc:	7b3b      	ldrb	r3, [r7, #12]
 80021ce:	b21b      	sxth	r3, r3
 80021d0:	4313      	orrs	r3, r2
 80021d2:	b21b      	sxth	r3, r3
 80021d4:	ee07 3a90 	vmov	s15, r3
 80021d8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d102      	bne.n	80021ea <bno055_linear_acc_x+0x62>
 80021e4:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002204 <bno055_linear_acc_x+0x7c>
 80021e8:	e001      	b.n	80021ee <bno055_linear_acc_x+0x66>
 80021ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 80021ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80021f8:	2300      	movs	r3, #0
};
 80021fa:	4618      	mov	r0, r3
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd90      	pop	{r4, r7, pc}
 8002202:	bf00      	nop
 8002204:	42c80000 	.word	0x42c80000

08002208 <bno055_linear_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_y(bno055_t* imu, f32* buf) {
 8002208:	b590      	push	{r4, r7, lr}
 800220a:	b0af      	sub	sp, #188	@ 0xbc
 800220c:	af2a      	add	r7, sp, #168	@ 0xa8
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8002212:	687c      	ldr	r4, [r7, #4]
 8002214:	2302      	movs	r3, #2
 8002216:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002218:	f107 030c 	add.w	r3, r7, #12
 800221c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800221e:	232a      	movs	r3, #42	@ 0x2a
 8002220:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002222:	4668      	mov	r0, sp
 8002224:	f104 0310 	add.w	r3, r4, #16
 8002228:	229c      	movs	r2, #156	@ 0x9c
 800222a:	4619      	mov	r1, r3
 800222c:	f00b f9d7 	bl	800d5de <memcpy>
 8002230:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002234:	f001 f897 	bl	8003366 <bno055_read_regs>
 8002238:	4603      	mov	r3, r0
 800223a:	73fb      	strb	r3, [r7, #15]
 800223c:	7bfb      	ldrb	r3, [r7, #15]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <bno055_linear_acc_y+0x3e>
        return err;
 8002242:	7bfb      	ldrb	r3, [r7, #15]
 8002244:	e019      	b.n	800227a <bno055_linear_acc_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8002246:	7b7b      	ldrb	r3, [r7, #13]
 8002248:	021b      	lsls	r3, r3, #8
 800224a:	b21a      	sxth	r2, r3
 800224c:	7b3b      	ldrb	r3, [r7, #12]
 800224e:	b21b      	sxth	r3, r3
 8002250:	4313      	orrs	r3, r2
 8002252:	b21b      	sxth	r3, r3
 8002254:	ee07 3a90 	vmov	s15, r3
 8002258:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8002260:	2b00      	cmp	r3, #0
 8002262:	d102      	bne.n	800226a <bno055_linear_acc_y+0x62>
 8002264:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002284 <bno055_linear_acc_y+0x7c>
 8002268:	e001      	b.n	800226e <bno055_linear_acc_y+0x66>
 800226a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 800226e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002278:	2300      	movs	r3, #0
};
 800227a:	4618      	mov	r0, r3
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	bd90      	pop	{r4, r7, pc}
 8002282:	bf00      	nop
 8002284:	42c80000 	.word	0x42c80000

08002288 <bno055_linear_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_z(bno055_t* imu, f32* buf) {
 8002288:	b590      	push	{r4, r7, lr}
 800228a:	b0af      	sub	sp, #188	@ 0xbc
 800228c:	af2a      	add	r7, sp, #168	@ 0xa8
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8002292:	687c      	ldr	r4, [r7, #4]
 8002294:	2302      	movs	r3, #2
 8002296:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002298:	f107 030c 	add.w	r3, r7, #12
 800229c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800229e:	232c      	movs	r3, #44	@ 0x2c
 80022a0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80022a2:	4668      	mov	r0, sp
 80022a4:	f104 0310 	add.w	r3, r4, #16
 80022a8:	229c      	movs	r2, #156	@ 0x9c
 80022aa:	4619      	mov	r1, r3
 80022ac:	f00b f997 	bl	800d5de <memcpy>
 80022b0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80022b4:	f001 f857 	bl	8003366 <bno055_read_regs>
 80022b8:	4603      	mov	r3, r0
 80022ba:	73fb      	strb	r3, [r7, #15]
 80022bc:	7bfb      	ldrb	r3, [r7, #15]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <bno055_linear_acc_z+0x3e>
        return err;
 80022c2:	7bfb      	ldrb	r3, [r7, #15]
 80022c4:	e019      	b.n	80022fa <bno055_linear_acc_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80022c6:	7b7b      	ldrb	r3, [r7, #13]
 80022c8:	021b      	lsls	r3, r3, #8
 80022ca:	b21a      	sxth	r2, r3
 80022cc:	7b3b      	ldrb	r3, [r7, #12]
 80022ce:	b21b      	sxth	r3, r3
 80022d0:	4313      	orrs	r3, r2
 80022d2:	b21b      	sxth	r3, r3
 80022d4:	ee07 3a90 	vmov	s15, r3
 80022d8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d102      	bne.n	80022ea <bno055_linear_acc_z+0x62>
 80022e4:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002304 <bno055_linear_acc_z+0x7c>
 80022e8:	e001      	b.n	80022ee <bno055_linear_acc_z+0x66>
 80022ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 80022ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80022f8:	2300      	movs	r3, #0
};
 80022fa:	4618      	mov	r0, r3
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd90      	pop	{r4, r7, pc}
 8002302:	bf00      	nop
 8002304:	42c80000 	.word	0x42c80000

08002308 <bno055_linear_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 8002308:	b590      	push	{r4, r7, lr}
 800230a:	b0b1      	sub	sp, #196	@ 0xc4
 800230c:	af2a      	add	r7, sp, #168	@ 0xa8
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 6)) != BNO_OK) {
 8002312:	687c      	ldr	r4, [r7, #4]
 8002314:	2306      	movs	r3, #6
 8002316:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002318:	f107 0308 	add.w	r3, r7, #8
 800231c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800231e:	2328      	movs	r3, #40	@ 0x28
 8002320:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002322:	4668      	mov	r0, sp
 8002324:	f104 0310 	add.w	r3, r4, #16
 8002328:	229c      	movs	r2, #156	@ 0x9c
 800232a:	4619      	mov	r1, r3
 800232c:	f00b f957 	bl	800d5de <memcpy>
 8002330:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002334:	f001 f817 	bl	8003366 <bno055_read_regs>
 8002338:	4603      	mov	r3, r0
 800233a:	75fb      	strb	r3, [r7, #23]
 800233c:	7dfb      	ldrb	r3, [r7, #23]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <bno055_linear_acc+0x3e>
        return err;
 8002342:	7dfb      	ldrb	r3, [r7, #23]
 8002344:	e03f      	b.n	80023c6 <bno055_linear_acc+0xbe>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <bno055_linear_acc+0x4a>
 800234e:	4b20      	ldr	r3, [pc, #128]	@ (80023d0 <bno055_linear_acc+0xc8>)
 8002350:	e001      	b.n	8002356 <bno055_linear_acc+0x4e>
 8002352:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8002356:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8002358:	7a7b      	ldrb	r3, [r7, #9]
 800235a:	021b      	lsls	r3, r3, #8
 800235c:	b21a      	sxth	r2, r3
 800235e:	7a3b      	ldrb	r3, [r7, #8]
 8002360:	b21b      	sxth	r3, r3
 8002362:	4313      	orrs	r3, r2
 8002364:	b21b      	sxth	r3, r3
 8002366:	ee07 3a90 	vmov	s15, r3
 800236a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800236e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002372:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 800237c:	7afb      	ldrb	r3, [r7, #11]
 800237e:	021b      	lsls	r3, r3, #8
 8002380:	b21a      	sxth	r2, r3
 8002382:	7abb      	ldrb	r3, [r7, #10]
 8002384:	b21b      	sxth	r3, r3
 8002386:	4313      	orrs	r3, r2
 8002388:	b21b      	sxth	r3, r3
 800238a:	ee07 3a90 	vmov	s15, r3
 800238e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002392:	ed97 7a04 	vldr	s14, [r7, #16]
 8002396:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 80023a0:	7b7b      	ldrb	r3, [r7, #13]
 80023a2:	021b      	lsls	r3, r3, #8
 80023a4:	b21a      	sxth	r2, r3
 80023a6:	7b3b      	ldrb	r3, [r7, #12]
 80023a8:	b21b      	sxth	r3, r3
 80023aa:	4313      	orrs	r3, r2
 80023ac:	b21b      	sxth	r3, r3
 80023ae:	ee07 3a90 	vmov	s15, r3
 80023b2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80023b6:	ed97 7a04 	vldr	s14, [r7, #16]
 80023ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 80023c4:	2300      	movs	r3, #0
};
 80023c6:	4618      	mov	r0, r3
 80023c8:	371c      	adds	r7, #28
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd90      	pop	{r4, r7, pc}
 80023ce:	bf00      	nop
 80023d0:	42c80000 	.word	0x42c80000

080023d4 <bno055_gyro_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_x(bno055_t* imu, f32* buf) {
 80023d4:	b590      	push	{r4, r7, lr}
 80023d6:	b0af      	sub	sp, #188	@ 0xbc
 80023d8:	af2a      	add	r7, sp, #168	@ 0xa8
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 2)) != BNO_OK) {
 80023de:	687c      	ldr	r4, [r7, #4]
 80023e0:	2302      	movs	r3, #2
 80023e2:	9329      	str	r3, [sp, #164]	@ 0xa4
 80023e4:	f107 030c 	add.w	r3, r7, #12
 80023e8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80023ea:	2314      	movs	r3, #20
 80023ec:	9327      	str	r3, [sp, #156]	@ 0x9c
 80023ee:	4668      	mov	r0, sp
 80023f0:	f104 0310 	add.w	r3, r4, #16
 80023f4:	229c      	movs	r2, #156	@ 0x9c
 80023f6:	4619      	mov	r1, r3
 80023f8:	f00b f8f1 	bl	800d5de <memcpy>
 80023fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002400:	f000 ffb1 	bl	8003366 <bno055_read_regs>
 8002404:	4603      	mov	r3, r0
 8002406:	73fb      	strb	r3, [r7, #15]
 8002408:	7bfb      	ldrb	r3, [r7, #15]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <bno055_gyro_x+0x3e>
        return err;
 800240e:	7bfb      	ldrb	r3, [r7, #15]
 8002410:	e019      	b.n	8002446 <bno055_gyro_x+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8002412:	7b7b      	ldrb	r3, [r7, #13]
 8002414:	021b      	lsls	r3, r3, #8
 8002416:	b21a      	sxth	r2, r3
 8002418:	7b3b      	ldrb	r3, [r7, #12]
 800241a:	b21b      	sxth	r3, r3
 800241c:	4313      	orrs	r3, r2
 800241e:	b21b      	sxth	r3, r3
 8002420:	ee07 3a90 	vmov	s15, r3
 8002424:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 800242c:	2b00      	cmp	r3, #0
 800242e:	d102      	bne.n	8002436 <bno055_gyro_x+0x62>
 8002430:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8002434:	e001      	b.n	800243a <bno055_gyro_x+0x66>
 8002436:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8002450 <bno055_gyro_x+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 800243a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002444:	2300      	movs	r3, #0
};
 8002446:	4618      	mov	r0, r3
 8002448:	3714      	adds	r7, #20
 800244a:	46bd      	mov	sp, r7
 800244c:	bd90      	pop	{r4, r7, pc}
 800244e:	bf00      	nop
 8002450:	44610000 	.word	0x44610000

08002454 <bno055_gyro_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_y(bno055_t* imu, f32* buf) {
 8002454:	b590      	push	{r4, r7, lr}
 8002456:	b0af      	sub	sp, #188	@ 0xbc
 8002458:	af2a      	add	r7, sp, #168	@ 0xa8
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Y_LSB, data, 2)) != BNO_OK) {
 800245e:	687c      	ldr	r4, [r7, #4]
 8002460:	2302      	movs	r3, #2
 8002462:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002464:	f107 030c 	add.w	r3, r7, #12
 8002468:	9328      	str	r3, [sp, #160]	@ 0xa0
 800246a:	2316      	movs	r3, #22
 800246c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800246e:	4668      	mov	r0, sp
 8002470:	f104 0310 	add.w	r3, r4, #16
 8002474:	229c      	movs	r2, #156	@ 0x9c
 8002476:	4619      	mov	r1, r3
 8002478:	f00b f8b1 	bl	800d5de <memcpy>
 800247c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002480:	f000 ff71 	bl	8003366 <bno055_read_regs>
 8002484:	4603      	mov	r3, r0
 8002486:	73fb      	strb	r3, [r7, #15]
 8002488:	7bfb      	ldrb	r3, [r7, #15]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <bno055_gyro_y+0x3e>
        return err;
 800248e:	7bfb      	ldrb	r3, [r7, #15]
 8002490:	e019      	b.n	80024c6 <bno055_gyro_y+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8002492:	7b7b      	ldrb	r3, [r7, #13]
 8002494:	021b      	lsls	r3, r3, #8
 8002496:	b21a      	sxth	r2, r3
 8002498:	7b3b      	ldrb	r3, [r7, #12]
 800249a:	b21b      	sxth	r3, r3
 800249c:	4313      	orrs	r3, r2
 800249e:	b21b      	sxth	r3, r3
 80024a0:	ee07 3a90 	vmov	s15, r3
 80024a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d102      	bne.n	80024b6 <bno055_gyro_y+0x62>
 80024b0:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 80024b4:	e001      	b.n	80024ba <bno055_gyro_y+0x66>
 80024b6:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80024d0 <bno055_gyro_y+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 80024ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80024c4:	2300      	movs	r3, #0
};
 80024c6:	4618      	mov	r0, r3
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd90      	pop	{r4, r7, pc}
 80024ce:	bf00      	nop
 80024d0:	44610000 	.word	0x44610000

080024d4 <bno055_gyro_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_z(bno055_t* imu, f32* buf) {
 80024d4:	b590      	push	{r4, r7, lr}
 80024d6:	b0af      	sub	sp, #188	@ 0xbc
 80024d8:	af2a      	add	r7, sp, #168	@ 0xa8
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Z_LSB, data, 2)) != BNO_OK) {
 80024de:	687c      	ldr	r4, [r7, #4]
 80024e0:	2302      	movs	r3, #2
 80024e2:	9329      	str	r3, [sp, #164]	@ 0xa4
 80024e4:	f107 030c 	add.w	r3, r7, #12
 80024e8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80024ea:	2318      	movs	r3, #24
 80024ec:	9327      	str	r3, [sp, #156]	@ 0x9c
 80024ee:	4668      	mov	r0, sp
 80024f0:	f104 0310 	add.w	r3, r4, #16
 80024f4:	229c      	movs	r2, #156	@ 0x9c
 80024f6:	4619      	mov	r1, r3
 80024f8:	f00b f871 	bl	800d5de <memcpy>
 80024fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002500:	f000 ff31 	bl	8003366 <bno055_read_regs>
 8002504:	4603      	mov	r3, r0
 8002506:	73fb      	strb	r3, [r7, #15]
 8002508:	7bfb      	ldrb	r3, [r7, #15]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <bno055_gyro_z+0x3e>
        return err;
 800250e:	7bfb      	ldrb	r3, [r7, #15]
 8002510:	e019      	b.n	8002546 <bno055_gyro_z+0x72>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8002512:	7b7b      	ldrb	r3, [r7, #13]
 8002514:	021b      	lsls	r3, r3, #8
 8002516:	b21a      	sxth	r2, r3
 8002518:	7b3b      	ldrb	r3, [r7, #12]
 800251a:	b21b      	sxth	r3, r3
 800251c:	4313      	orrs	r3, r2
 800251e:	b21b      	sxth	r3, r3
 8002520:	ee07 3a90 	vmov	s15, r3
 8002524:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 800252c:	2b00      	cmp	r3, #0
 800252e:	d102      	bne.n	8002536 <bno055_gyro_z+0x62>
 8002530:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8002534:	e001      	b.n	800253a <bno055_gyro_z+0x66>
 8002536:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8002550 <bno055_gyro_z+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 800253a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002544:	2300      	movs	r3, #0
};
 8002546:	4618      	mov	r0, r3
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	bd90      	pop	{r4, r7, pc}
 800254e:	bf00      	nop
 8002550:	44610000 	.word	0x44610000

08002554 <bno055_gyro>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro(bno055_t* imu, bno055_vec3_t* xyz) {
 8002554:	b590      	push	{r4, r7, lr}
 8002556:	b0b1      	sub	sp, #196	@ 0xc4
 8002558:	af2a      	add	r7, sp, #168	@ 0xa8
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 6)) != BNO_OK) {
 800255e:	687c      	ldr	r4, [r7, #4]
 8002560:	2306      	movs	r3, #6
 8002562:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002564:	f107 0308 	add.w	r3, r7, #8
 8002568:	9328      	str	r3, [sp, #160]	@ 0xa0
 800256a:	2314      	movs	r3, #20
 800256c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800256e:	4668      	mov	r0, sp
 8002570:	f104 0310 	add.w	r3, r4, #16
 8002574:	229c      	movs	r2, #156	@ 0x9c
 8002576:	4619      	mov	r1, r3
 8002578:	f00b f831 	bl	800d5de <memcpy>
 800257c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002580:	f000 fef1 	bl	8003366 <bno055_read_regs>
 8002584:	4603      	mov	r3, r0
 8002586:	75fb      	strb	r3, [r7, #23]
 8002588:	7dfb      	ldrb	r3, [r7, #23]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <bno055_gyro+0x3e>
        return err;
 800258e:	7dfb      	ldrb	r3, [r7, #23]
 8002590:	e03f      	b.n	8002612 <bno055_gyro+0xbe>
    }

    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	7c1b      	ldrb	r3, [r3, #16]
                                                     : BNO_GYR_SCALE_RPS;
 8002596:	2b00      	cmp	r3, #0
 8002598:	d102      	bne.n	80025a0 <bno055_gyro+0x4c>
 800259a:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 800259e:	e000      	b.n	80025a2 <bno055_gyro+0x4e>
 80025a0:	4b1e      	ldr	r3, [pc, #120]	@ (800261c <bno055_gyro+0xc8>)
    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 80025a2:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 80025a4:	7a7b      	ldrb	r3, [r7, #9]
 80025a6:	021b      	lsls	r3, r3, #8
 80025a8:	b21a      	sxth	r2, r3
 80025aa:	7a3b      	ldrb	r3, [r7, #8]
 80025ac:	b21b      	sxth	r3, r3
 80025ae:	4313      	orrs	r3, r2
 80025b0:	b21b      	sxth	r3, r3
 80025b2:	ee07 3a90 	vmov	s15, r3
 80025b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80025ba:	ed97 7a04 	vldr	s14, [r7, #16]
 80025be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 80025c8:	7afb      	ldrb	r3, [r7, #11]
 80025ca:	021b      	lsls	r3, r3, #8
 80025cc:	b21a      	sxth	r2, r3
 80025ce:	7abb      	ldrb	r3, [r7, #10]
 80025d0:	b21b      	sxth	r3, r3
 80025d2:	4313      	orrs	r3, r2
 80025d4:	b21b      	sxth	r3, r3
 80025d6:	ee07 3a90 	vmov	s15, r3
 80025da:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80025de:	ed97 7a04 	vldr	s14, [r7, #16]
 80025e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 80025ec:	7b7b      	ldrb	r3, [r7, #13]
 80025ee:	021b      	lsls	r3, r3, #8
 80025f0:	b21a      	sxth	r2, r3
 80025f2:	7b3b      	ldrb	r3, [r7, #12]
 80025f4:	b21b      	sxth	r3, r3
 80025f6:	4313      	orrs	r3, r2
 80025f8:	b21b      	sxth	r3, r3
 80025fa:	ee07 3a90 	vmov	s15, r3
 80025fe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002602:	ed97 7a04 	vldr	s14, [r7, #16]
 8002606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	371c      	adds	r7, #28
 8002616:	46bd      	mov	sp, r7
 8002618:	bd90      	pop	{r4, r7, pc}
 800261a:	bf00      	nop
 800261c:	44610000 	.word	0x44610000

08002620 <bno055_mag_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_x(bno055_t* imu, f32* buf) {
 8002620:	b590      	push	{r4, r7, lr}
 8002622:	b0af      	sub	sp, #188	@ 0xbc
 8002624:	af2a      	add	r7, sp, #168	@ 0xa8
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 2)) != BNO_OK) {
 800262a:	687c      	ldr	r4, [r7, #4]
 800262c:	2302      	movs	r3, #2
 800262e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002630:	f107 030c 	add.w	r3, r7, #12
 8002634:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002636:	230e      	movs	r3, #14
 8002638:	9327      	str	r3, [sp, #156]	@ 0x9c
 800263a:	4668      	mov	r0, sp
 800263c:	f104 0310 	add.w	r3, r4, #16
 8002640:	229c      	movs	r2, #156	@ 0x9c
 8002642:	4619      	mov	r1, r3
 8002644:	f00a ffcb 	bl	800d5de <memcpy>
 8002648:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800264c:	f000 fe8b 	bl	8003366 <bno055_read_regs>
 8002650:	4603      	mov	r3, r0
 8002652:	73fb      	strb	r3, [r7, #15]
 8002654:	7bfb      	ldrb	r3, [r7, #15]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <bno055_mag_x+0x3e>
        return err;
 800265a:	7bfb      	ldrb	r3, [r7, #15]
 800265c:	e012      	b.n	8002684 <bno055_mag_x+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 800265e:	7b7b      	ldrb	r3, [r7, #13]
 8002660:	021b      	lsls	r3, r3, #8
 8002662:	b21a      	sxth	r2, r3
 8002664:	7b3b      	ldrb	r3, [r7, #12]
 8002666:	b21b      	sxth	r3, r3
 8002668:	4313      	orrs	r3, r2
 800266a:	b21b      	sxth	r3, r3
 800266c:	ee07 3a90 	vmov	s15, r3
 8002670:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002674:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8002678:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	bd90      	pop	{r4, r7, pc}

0800268c <bno055_mag_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_y(bno055_t* imu, f32* buf) {
 800268c:	b590      	push	{r4, r7, lr}
 800268e:	b0af      	sub	sp, #188	@ 0xbc
 8002690:	af2a      	add	r7, sp, #168	@ 0xa8
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8002696:	687c      	ldr	r4, [r7, #4]
 8002698:	2302      	movs	r3, #2
 800269a:	9329      	str	r3, [sp, #164]	@ 0xa4
 800269c:	f107 030c 	add.w	r3, r7, #12
 80026a0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80026a2:	2310      	movs	r3, #16
 80026a4:	9327      	str	r3, [sp, #156]	@ 0x9c
 80026a6:	4668      	mov	r0, sp
 80026a8:	f104 0310 	add.w	r3, r4, #16
 80026ac:	229c      	movs	r2, #156	@ 0x9c
 80026ae:	4619      	mov	r1, r3
 80026b0:	f00a ff95 	bl	800d5de <memcpy>
 80026b4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80026b8:	f000 fe55 	bl	8003366 <bno055_read_regs>
 80026bc:	4603      	mov	r3, r0
 80026be:	73fb      	strb	r3, [r7, #15]
 80026c0:	7bfb      	ldrb	r3, [r7, #15]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <bno055_mag_y+0x3e>
        return err;
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
 80026c8:	e012      	b.n	80026f0 <bno055_mag_y+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 80026ca:	7b7b      	ldrb	r3, [r7, #13]
 80026cc:	021b      	lsls	r3, r3, #8
 80026ce:	b21a      	sxth	r2, r3
 80026d0:	7b3b      	ldrb	r3, [r7, #12]
 80026d2:	b21b      	sxth	r3, r3
 80026d4:	4313      	orrs	r3, r2
 80026d6:	b21b      	sxth	r3, r3
 80026d8:	ee07 3a90 	vmov	s15, r3
 80026dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026e0:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80026e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd90      	pop	{r4, r7, pc}

080026f8 <bno055_mag_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_z(bno055_t* imu, f32* buf) {
 80026f8:	b590      	push	{r4, r7, lr}
 80026fa:	b0af      	sub	sp, #188	@ 0xbc
 80026fc:	af2a      	add	r7, sp, #168	@ 0xa8
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8002702:	687c      	ldr	r4, [r7, #4]
 8002704:	2302      	movs	r3, #2
 8002706:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002708:	f107 030c 	add.w	r3, r7, #12
 800270c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800270e:	2312      	movs	r3, #18
 8002710:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002712:	4668      	mov	r0, sp
 8002714:	f104 0310 	add.w	r3, r4, #16
 8002718:	229c      	movs	r2, #156	@ 0x9c
 800271a:	4619      	mov	r1, r3
 800271c:	f00a ff5f 	bl	800d5de <memcpy>
 8002720:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002724:	f000 fe1f 	bl	8003366 <bno055_read_regs>
 8002728:	4603      	mov	r3, r0
 800272a:	73fb      	strb	r3, [r7, #15]
 800272c:	7bfb      	ldrb	r3, [r7, #15]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <bno055_mag_z+0x3e>
        return err;
 8002732:	7bfb      	ldrb	r3, [r7, #15]
 8002734:	e012      	b.n	800275c <bno055_mag_z+0x64>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8002736:	7b7b      	ldrb	r3, [r7, #13]
 8002738:	021b      	lsls	r3, r3, #8
 800273a:	b21a      	sxth	r2, r3
 800273c:	7b3b      	ldrb	r3, [r7, #12]
 800273e:	b21b      	sxth	r3, r3
 8002740:	4313      	orrs	r3, r2
 8002742:	b21b      	sxth	r3, r3
 8002744:	ee07 3a90 	vmov	s15, r3
 8002748:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800274c:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8002750:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	bd90      	pop	{r4, r7, pc}

08002764 <bno055_mag>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag(bno055_t* imu, bno055_vec3_t* xyz) {
 8002764:	b590      	push	{r4, r7, lr}
 8002766:	b0af      	sub	sp, #188	@ 0xbc
 8002768:	af2a      	add	r7, sp, #168	@ 0xa8
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 6)) != BNO_OK) {
 800276e:	687c      	ldr	r4, [r7, #4]
 8002770:	2306      	movs	r3, #6
 8002772:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002774:	f107 0308 	add.w	r3, r7, #8
 8002778:	9328      	str	r3, [sp, #160]	@ 0xa0
 800277a:	230e      	movs	r3, #14
 800277c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800277e:	4668      	mov	r0, sp
 8002780:	f104 0310 	add.w	r3, r4, #16
 8002784:	229c      	movs	r2, #156	@ 0x9c
 8002786:	4619      	mov	r1, r3
 8002788:	f00a ff29 	bl	800d5de <memcpy>
 800278c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002790:	f000 fde9 	bl	8003366 <bno055_read_regs>
 8002794:	4603      	mov	r3, r0
 8002796:	73fb      	strb	r3, [r7, #15]
 8002798:	7bfb      	ldrb	r3, [r7, #15]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <bno055_mag+0x3e>
        return err;
 800279e:	7bfb      	ldrb	r3, [r7, #15]
 80027a0:	e036      	b.n	8002810 <bno055_mag+0xac>
    }

    xyz->x = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 80027a2:	7a7b      	ldrb	r3, [r7, #9]
 80027a4:	021b      	lsls	r3, r3, #8
 80027a6:	b21a      	sxth	r2, r3
 80027a8:	7a3b      	ldrb	r3, [r7, #8]
 80027aa:	b21b      	sxth	r3, r3
 80027ac:	4313      	orrs	r3, r2
 80027ae:	b21b      	sxth	r3, r3
 80027b0:	ee07 3a90 	vmov	s15, r3
 80027b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027b8:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80027bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / BNO_MAG_SCALE;
 80027c6:	7afb      	ldrb	r3, [r7, #11]
 80027c8:	021b      	lsls	r3, r3, #8
 80027ca:	b21a      	sxth	r2, r3
 80027cc:	7abb      	ldrb	r3, [r7, #10]
 80027ce:	b21b      	sxth	r3, r3
 80027d0:	4313      	orrs	r3, r2
 80027d2:	b21b      	sxth	r3, r3
 80027d4:	ee07 3a90 	vmov	s15, r3
 80027d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027dc:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80027e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / BNO_MAG_SCALE;
 80027ea:	7b7b      	ldrb	r3, [r7, #13]
 80027ec:	021b      	lsls	r3, r3, #8
 80027ee:	b21a      	sxth	r2, r3
 80027f0:	7b3b      	ldrb	r3, [r7, #12]
 80027f2:	b21b      	sxth	r3, r3
 80027f4:	4313      	orrs	r3, r2
 80027f6:	b21b      	sxth	r3, r3
 80027f8:	ee07 3a90 	vmov	s15, r3
 80027fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002800:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8002804:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 800280e:	2300      	movs	r3, #0
};
 8002810:	4618      	mov	r0, r3
 8002812:	3714      	adds	r7, #20
 8002814:	46bd      	mov	sp, r7
 8002816:	bd90      	pop	{r4, r7, pc}

08002818 <bno055_gravity_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_x(bno055_t* imu, f32* buf) {
 8002818:	b590      	push	{r4, r7, lr}
 800281a:	b0b1      	sub	sp, #196	@ 0xc4
 800281c:	af2a      	add	r7, sp, #168	@ 0xa8
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 2)) != BNO_OK) {
 8002822:	687c      	ldr	r4, [r7, #4]
 8002824:	2302      	movs	r3, #2
 8002826:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002828:	f107 030c 	add.w	r3, r7, #12
 800282c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800282e:	232e      	movs	r3, #46	@ 0x2e
 8002830:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002832:	4668      	mov	r0, sp
 8002834:	f104 0310 	add.w	r3, r4, #16
 8002838:	229c      	movs	r2, #156	@ 0x9c
 800283a:	4619      	mov	r1, r3
 800283c:	f00a fecf 	bl	800d5de <memcpy>
 8002840:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002844:	f000 fd8f 	bl	8003366 <bno055_read_regs>
 8002848:	4603      	mov	r3, r0
 800284a:	75fb      	strb	r3, [r7, #23]
 800284c:	7dfb      	ldrb	r3, [r7, #23]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <bno055_gravity_x+0x3e>
        return err;
 8002852:	7dfb      	ldrb	r3, [r7, #23]
 8002854:	e01b      	b.n	800288e <bno055_gravity_x+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <bno055_gravity_x+0x4a>
 800285e:	4b0e      	ldr	r3, [pc, #56]	@ (8002898 <bno055_gravity_x+0x80>)
 8002860:	e001      	b.n	8002866 <bno055_gravity_x+0x4e>
 8002862:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8002866:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8002868:	7b7b      	ldrb	r3, [r7, #13]
 800286a:	021b      	lsls	r3, r3, #8
 800286c:	b21a      	sxth	r2, r3
 800286e:	7b3b      	ldrb	r3, [r7, #12]
 8002870:	b21b      	sxth	r3, r3
 8002872:	4313      	orrs	r3, r2
 8002874:	b21b      	sxth	r3, r3
 8002876:	ee07 3a90 	vmov	s15, r3
 800287a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800287e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002882:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	371c      	adds	r7, #28
 8002892:	46bd      	mov	sp, r7
 8002894:	bd90      	pop	{r4, r7, pc}
 8002896:	bf00      	nop
 8002898:	42c80000 	.word	0x42c80000

0800289c <bno055_gravity_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_y(bno055_t* imu, f32* buf) {
 800289c:	b590      	push	{r4, r7, lr}
 800289e:	b0b1      	sub	sp, #196	@ 0xc4
 80028a0:	af2a      	add	r7, sp, #168	@ 0xa8
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80028a6:	687c      	ldr	r4, [r7, #4]
 80028a8:	2302      	movs	r3, #2
 80028aa:	9329      	str	r3, [sp, #164]	@ 0xa4
 80028ac:	f107 030c 	add.w	r3, r7, #12
 80028b0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80028b2:	2330      	movs	r3, #48	@ 0x30
 80028b4:	9327      	str	r3, [sp, #156]	@ 0x9c
 80028b6:	4668      	mov	r0, sp
 80028b8:	f104 0310 	add.w	r3, r4, #16
 80028bc:	229c      	movs	r2, #156	@ 0x9c
 80028be:	4619      	mov	r1, r3
 80028c0:	f00a fe8d 	bl	800d5de <memcpy>
 80028c4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80028c8:	f000 fd4d 	bl	8003366 <bno055_read_regs>
 80028cc:	4603      	mov	r3, r0
 80028ce:	75fb      	strb	r3, [r7, #23]
 80028d0:	7dfb      	ldrb	r3, [r7, #23]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <bno055_gravity_y+0x3e>
        return err;
 80028d6:	7dfb      	ldrb	r3, [r7, #23]
 80028d8:	e01b      	b.n	8002912 <bno055_gravity_y+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <bno055_gravity_y+0x4a>
 80028e2:	4b0e      	ldr	r3, [pc, #56]	@ (800291c <bno055_gravity_y+0x80>)
 80028e4:	e001      	b.n	80028ea <bno055_gravity_y+0x4e>
 80028e6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80028ea:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 80028ec:	7b7b      	ldrb	r3, [r7, #13]
 80028ee:	021b      	lsls	r3, r3, #8
 80028f0:	b21a      	sxth	r2, r3
 80028f2:	7b3b      	ldrb	r3, [r7, #12]
 80028f4:	b21b      	sxth	r3, r3
 80028f6:	4313      	orrs	r3, r2
 80028f8:	b21b      	sxth	r3, r3
 80028fa:	ee07 3a90 	vmov	s15, r3
 80028fe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002902:	ed97 7a04 	vldr	s14, [r7, #16]
 8002906:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	371c      	adds	r7, #28
 8002916:	46bd      	mov	sp, r7
 8002918:	bd90      	pop	{r4, r7, pc}
 800291a:	bf00      	nop
 800291c:	42c80000 	.word	0x42c80000

08002920 <bno055_gravity_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_z(bno055_t* imu, f32* buf) {
 8002920:	b590      	push	{r4, r7, lr}
 8002922:	b0b1      	sub	sp, #196	@ 0xc4
 8002924:	af2a      	add	r7, sp, #168	@ 0xa8
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Z_LSB, data, 2)) != BNO_OK) {
 800292a:	687c      	ldr	r4, [r7, #4]
 800292c:	2302      	movs	r3, #2
 800292e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002930:	f107 030c 	add.w	r3, r7, #12
 8002934:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002936:	2332      	movs	r3, #50	@ 0x32
 8002938:	9327      	str	r3, [sp, #156]	@ 0x9c
 800293a:	4668      	mov	r0, sp
 800293c:	f104 0310 	add.w	r3, r4, #16
 8002940:	229c      	movs	r2, #156	@ 0x9c
 8002942:	4619      	mov	r1, r3
 8002944:	f00a fe4b 	bl	800d5de <memcpy>
 8002948:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800294c:	f000 fd0b 	bl	8003366 <bno055_read_regs>
 8002950:	4603      	mov	r3, r0
 8002952:	75fb      	strb	r3, [r7, #23]
 8002954:	7dfb      	ldrb	r3, [r7, #23]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <bno055_gravity_z+0x3e>
        return err;
 800295a:	7dfb      	ldrb	r3, [r7, #23]
 800295c:	e01b      	b.n	8002996 <bno055_gravity_z+0x76>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <bno055_gravity_z+0x4a>
 8002966:	4b0e      	ldr	r3, [pc, #56]	@ (80029a0 <bno055_gravity_z+0x80>)
 8002968:	e001      	b.n	800296e <bno055_gravity_z+0x4e>
 800296a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800296e:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8002970:	7b7b      	ldrb	r3, [r7, #13]
 8002972:	021b      	lsls	r3, r3, #8
 8002974:	b21a      	sxth	r2, r3
 8002976:	7b3b      	ldrb	r3, [r7, #12]
 8002978:	b21b      	sxth	r3, r3
 800297a:	4313      	orrs	r3, r2
 800297c:	b21b      	sxth	r3, r3
 800297e:	ee07 3a90 	vmov	s15, r3
 8002982:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002986:	ed97 7a04 	vldr	s14, [r7, #16]
 800298a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	371c      	adds	r7, #28
 800299a:	46bd      	mov	sp, r7
 800299c:	bd90      	pop	{r4, r7, pc}
 800299e:	bf00      	nop
 80029a0:	42c80000 	.word	0x42c80000

080029a4 <bno055_gravity>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity(bno055_t* imu, bno055_vec3_t* buf) {
 80029a4:	b590      	push	{r4, r7, lr}
 80029a6:	b0b1      	sub	sp, #196	@ 0xc4
 80029a8:	af2a      	add	r7, sp, #168	@ 0xa8
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 6)) != BNO_OK) {
 80029ae:	687c      	ldr	r4, [r7, #4]
 80029b0:	2306      	movs	r3, #6
 80029b2:	9329      	str	r3, [sp, #164]	@ 0xa4
 80029b4:	f107 0308 	add.w	r3, r7, #8
 80029b8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80029ba:	232e      	movs	r3, #46	@ 0x2e
 80029bc:	9327      	str	r3, [sp, #156]	@ 0x9c
 80029be:	4668      	mov	r0, sp
 80029c0:	f104 0310 	add.w	r3, r4, #16
 80029c4:	229c      	movs	r2, #156	@ 0x9c
 80029c6:	4619      	mov	r1, r3
 80029c8:	f00a fe09 	bl	800d5de <memcpy>
 80029cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80029d0:	f000 fcc9 	bl	8003366 <bno055_read_regs>
 80029d4:	4603      	mov	r3, r0
 80029d6:	75fb      	strb	r3, [r7, #23]
 80029d8:	7dfb      	ldrb	r3, [r7, #23]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <bno055_gravity+0x3e>
        return err;
 80029de:	7dfb      	ldrb	r3, [r7, #23]
 80029e0:	e03f      	b.n	8002a62 <bno055_gravity+0xbe>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <bno055_gravity+0x4a>
 80029ea:	4b20      	ldr	r3, [pc, #128]	@ (8002a6c <bno055_gravity+0xc8>)
 80029ec:	e001      	b.n	80029f2 <bno055_gravity+0x4e>
 80029ee:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80029f2:	613b      	str	r3, [r7, #16]
    buf->x = (s16)((data[1] << 8) | data[0]) / scale;
 80029f4:	7a7b      	ldrb	r3, [r7, #9]
 80029f6:	021b      	lsls	r3, r3, #8
 80029f8:	b21a      	sxth	r2, r3
 80029fa:	7a3b      	ldrb	r3, [r7, #8]
 80029fc:	b21b      	sxth	r3, r3
 80029fe:	4313      	orrs	r3, r2
 8002a00:	b21b      	sxth	r3, r3
 8002a02:	ee07 3a90 	vmov	s15, r3
 8002a06:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002a0a:	ed97 7a04 	vldr	s14, [r7, #16]
 8002a0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	edc3 7a00 	vstr	s15, [r3]
    buf->y = (s16)((data[3] << 8) | data[2]) / scale;
 8002a18:	7afb      	ldrb	r3, [r7, #11]
 8002a1a:	021b      	lsls	r3, r3, #8
 8002a1c:	b21a      	sxth	r2, r3
 8002a1e:	7abb      	ldrb	r3, [r7, #10]
 8002a20:	b21b      	sxth	r3, r3
 8002a22:	4313      	orrs	r3, r2
 8002a24:	b21b      	sxth	r3, r3
 8002a26:	ee07 3a90 	vmov	s15, r3
 8002a2a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002a2e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002a32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	edc3 7a01 	vstr	s15, [r3, #4]
    buf->x = (s16)((data[5] << 8) | data[4]) / scale;
 8002a3c:	7b7b      	ldrb	r3, [r7, #13]
 8002a3e:	021b      	lsls	r3, r3, #8
 8002a40:	b21a      	sxth	r2, r3
 8002a42:	7b3b      	ldrb	r3, [r7, #12]
 8002a44:	b21b      	sxth	r3, r3
 8002a46:	4313      	orrs	r3, r2
 8002a48:	b21b      	sxth	r3, r3
 8002a4a:	ee07 3a90 	vmov	s15, r3
 8002a4e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002a52:	ed97 7a04 	vldr	s14, [r7, #16]
 8002a56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	371c      	adds	r7, #28
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd90      	pop	{r4, r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	42c80000 	.word	0x42c80000

08002a70 <bno055_euler_yaw>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_yaw(bno055_t* imu, f32* buf) {
 8002a70:	b590      	push	{r4, r7, lr}
 8002a72:	b0b1      	sub	sp, #196	@ 0xc4
 8002a74:	af2a      	add	r7, sp, #168	@ 0xa8
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 2)) !=
 8002a7a:	687c      	ldr	r4, [r7, #4]
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002a80:	f107 030c 	add.w	r3, r7, #12
 8002a84:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002a86:	231a      	movs	r3, #26
 8002a88:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002a8a:	4668      	mov	r0, sp
 8002a8c:	f104 0310 	add.w	r3, r4, #16
 8002a90:	229c      	movs	r2, #156	@ 0x9c
 8002a92:	4619      	mov	r1, r3
 8002a94:	f00a fda3 	bl	800d5de <memcpy>
 8002a98:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002a9c:	f000 fc63 	bl	8003366 <bno055_read_regs>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	75fb      	strb	r3, [r7, #23]
 8002aa4:	7dfb      	ldrb	r3, [r7, #23]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <bno055_euler_yaw+0x3e>
        BNO_OK) {
        return err;
 8002aaa:	7dfb      	ldrb	r3, [r7, #23]
 8002aac:	e01b      	b.n	8002ae6 <bno055_euler_yaw+0x76>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d102      	bne.n	8002abc <bno055_euler_yaw+0x4c>
 8002ab6:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8002aba:	e000      	b.n	8002abe <bno055_euler_yaw+0x4e>
 8002abc:	4b0c      	ldr	r3, [pc, #48]	@ (8002af0 <bno055_euler_yaw+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8002abe:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8002ac0:	7b7b      	ldrb	r3, [r7, #13]
 8002ac2:	021b      	lsls	r3, r3, #8
 8002ac4:	b21a      	sxth	r2, r3
 8002ac6:	7b3b      	ldrb	r3, [r7, #12]
 8002ac8:	b21b      	sxth	r3, r3
 8002aca:	4313      	orrs	r3, r2
 8002acc:	b21b      	sxth	r3, r3
 8002ace:	ee07 3a90 	vmov	s15, r3
 8002ad2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002ad6:	ed97 7a04 	vldr	s14, [r7, #16]
 8002ada:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	371c      	adds	r7, #28
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd90      	pop	{r4, r7, pc}
 8002aee:	bf00      	nop
 8002af0:	44610000 	.word	0x44610000

08002af4 <bno055_euler_roll>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_roll(bno055_t* imu, f32* buf) {
 8002af4:	b590      	push	{r4, r7, lr}
 8002af6:	b0b1      	sub	sp, #196	@ 0xc4
 8002af8:	af2a      	add	r7, sp, #168	@ 0xa8
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_ROLL_LSB, data, 2)) != BNO_OK) {
 8002afe:	687c      	ldr	r4, [r7, #4]
 8002b00:	2302      	movs	r3, #2
 8002b02:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002b04:	f107 030c 	add.w	r3, r7, #12
 8002b08:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002b0a:	231c      	movs	r3, #28
 8002b0c:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002b0e:	4668      	mov	r0, sp
 8002b10:	f104 0310 	add.w	r3, r4, #16
 8002b14:	229c      	movs	r2, #156	@ 0x9c
 8002b16:	4619      	mov	r1, r3
 8002b18:	f00a fd61 	bl	800d5de <memcpy>
 8002b1c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002b20:	f000 fc21 	bl	8003366 <bno055_read_regs>
 8002b24:	4603      	mov	r3, r0
 8002b26:	75fb      	strb	r3, [r7, #23]
 8002b28:	7dfb      	ldrb	r3, [r7, #23]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <bno055_euler_roll+0x3e>
        return err;
 8002b2e:	7dfb      	ldrb	r3, [r7, #23]
 8002b30:	e01b      	b.n	8002b6a <bno055_euler_roll+0x76>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d102      	bne.n	8002b40 <bno055_euler_roll+0x4c>
 8002b3a:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8002b3e:	e000      	b.n	8002b42 <bno055_euler_roll+0x4e>
 8002b40:	4b0c      	ldr	r3, [pc, #48]	@ (8002b74 <bno055_euler_roll+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8002b42:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8002b44:	7b7b      	ldrb	r3, [r7, #13]
 8002b46:	021b      	lsls	r3, r3, #8
 8002b48:	b21a      	sxth	r2, r3
 8002b4a:	7b3b      	ldrb	r3, [r7, #12]
 8002b4c:	b21b      	sxth	r3, r3
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	b21b      	sxth	r3, r3
 8002b52:	ee07 3a90 	vmov	s15, r3
 8002b56:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002b5a:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	371c      	adds	r7, #28
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd90      	pop	{r4, r7, pc}
 8002b72:	bf00      	nop
 8002b74:	44610000 	.word	0x44610000

08002b78 <bno055_euler_pitch>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_pitch(bno055_t* imu, f32* buf) {
 8002b78:	b590      	push	{r4, r7, lr}
 8002b7a:	b0b1      	sub	sp, #196	@ 0xc4
 8002b7c:	af2a      	add	r7, sp, #168	@ 0xa8
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_PITCH_LSB, data, 2)) != BNO_OK) {
 8002b82:	687c      	ldr	r4, [r7, #4]
 8002b84:	2302      	movs	r3, #2
 8002b86:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002b88:	f107 030c 	add.w	r3, r7, #12
 8002b8c:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002b8e:	231e      	movs	r3, #30
 8002b90:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002b92:	4668      	mov	r0, sp
 8002b94:	f104 0310 	add.w	r3, r4, #16
 8002b98:	229c      	movs	r2, #156	@ 0x9c
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	f00a fd1f 	bl	800d5de <memcpy>
 8002ba0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002ba4:	f000 fbdf 	bl	8003366 <bno055_read_regs>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	75fb      	strb	r3, [r7, #23]
 8002bac:	7dfb      	ldrb	r3, [r7, #23]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <bno055_euler_pitch+0x3e>
        return err;
 8002bb2:	7dfb      	ldrb	r3, [r7, #23]
 8002bb4:	e01b      	b.n	8002bee <bno055_euler_pitch+0x76>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d102      	bne.n	8002bc4 <bno055_euler_pitch+0x4c>
 8002bbe:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8002bc2:	e000      	b.n	8002bc6 <bno055_euler_pitch+0x4e>
 8002bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf8 <bno055_euler_pitch+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8002bc6:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8002bc8:	7b7b      	ldrb	r3, [r7, #13]
 8002bca:	021b      	lsls	r3, r3, #8
 8002bcc:	b21a      	sxth	r2, r3
 8002bce:	7b3b      	ldrb	r3, [r7, #12]
 8002bd0:	b21b      	sxth	r3, r3
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	b21b      	sxth	r3, r3
 8002bd6:	ee07 3a90 	vmov	s15, r3
 8002bda:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002bde:	ed97 7a04 	vldr	s14, [r7, #16]
 8002be2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	371c      	adds	r7, #28
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd90      	pop	{r4, r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	44610000 	.word	0x44610000

08002bfc <bno055_euler>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler(bno055_t* imu, bno055_euler_t* buf) {
 8002bfc:	b590      	push	{r4, r7, lr}
 8002bfe:	b0b1      	sub	sp, #196	@ 0xc4
 8002c00:	af2a      	add	r7, sp, #168	@ 0xa8
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 6)) !=
 8002c06:	687c      	ldr	r4, [r7, #4]
 8002c08:	2306      	movs	r3, #6
 8002c0a:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002c0c:	f107 0308 	add.w	r3, r7, #8
 8002c10:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002c12:	231a      	movs	r3, #26
 8002c14:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002c16:	4668      	mov	r0, sp
 8002c18:	f104 0310 	add.w	r3, r4, #16
 8002c1c:	229c      	movs	r2, #156	@ 0x9c
 8002c1e:	4619      	mov	r1, r3
 8002c20:	f00a fcdd 	bl	800d5de <memcpy>
 8002c24:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002c28:	f000 fb9d 	bl	8003366 <bno055_read_regs>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	75fb      	strb	r3, [r7, #23]
 8002c30:	7dfb      	ldrb	r3, [r7, #23]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <bno055_euler+0x3e>
        BNO_OK) {
        return err;
 8002c36:	7dfb      	ldrb	r3, [r7, #23]
 8002c38:	e03f      	b.n	8002cba <bno055_euler+0xbe>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d102      	bne.n	8002c48 <bno055_euler+0x4c>
 8002c42:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8002c46:	e000      	b.n	8002c4a <bno055_euler+0x4e>
 8002c48:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc4 <bno055_euler+0xc8>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8002c4a:	613b      	str	r3, [r7, #16]
    buf->yaw = (s16)((data[1] << 8) | data[0]) / scale;
 8002c4c:	7a7b      	ldrb	r3, [r7, #9]
 8002c4e:	021b      	lsls	r3, r3, #8
 8002c50:	b21a      	sxth	r2, r3
 8002c52:	7a3b      	ldrb	r3, [r7, #8]
 8002c54:	b21b      	sxth	r3, r3
 8002c56:	4313      	orrs	r3, r2
 8002c58:	b21b      	sxth	r3, r3
 8002c5a:	ee07 3a90 	vmov	s15, r3
 8002c5e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002c62:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	edc3 7a02 	vstr	s15, [r3, #8]
    buf->roll = (s16)((data[3] << 8) | data[2]) / scale;
 8002c70:	7afb      	ldrb	r3, [r7, #11]
 8002c72:	021b      	lsls	r3, r3, #8
 8002c74:	b21a      	sxth	r2, r3
 8002c76:	7abb      	ldrb	r3, [r7, #10]
 8002c78:	b21b      	sxth	r3, r3
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	b21b      	sxth	r3, r3
 8002c7e:	ee07 3a90 	vmov	s15, r3
 8002c82:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002c86:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	edc3 7a00 	vstr	s15, [r3]
    buf->pitch = (s16)((data[5] << 8) | data[4]) / scale;
 8002c94:	7b7b      	ldrb	r3, [r7, #13]
 8002c96:	021b      	lsls	r3, r3, #8
 8002c98:	b21a      	sxth	r2, r3
 8002c9a:	7b3b      	ldrb	r3, [r7, #12]
 8002c9c:	b21b      	sxth	r3, r3
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	b21b      	sxth	r3, r3
 8002ca2:	ee07 3a90 	vmov	s15, r3
 8002ca6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002caa:	ed97 7a04 	vldr	s14, [r7, #16]
 8002cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	edc3 7a01 	vstr	s15, [r3, #4]
    return BNO_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	371c      	adds	r7, #28
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd90      	pop	{r4, r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	44610000 	.word	0x44610000

08002cc8 <bno055_quaternion_w>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_w(bno055_t* imu, f32* buf) {
 8002cc8:	b590      	push	{r4, r7, lr}
 8002cca:	b0af      	sub	sp, #188	@ 0xbc
 8002ccc:	af2a      	add	r7, sp, #168	@ 0xa8
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 2)) != BNO_OK) {
 8002cd2:	687c      	ldr	r4, [r7, #4]
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002cd8:	f107 030c 	add.w	r3, r7, #12
 8002cdc:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002cde:	2320      	movs	r3, #32
 8002ce0:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002ce2:	4668      	mov	r0, sp
 8002ce4:	f104 0310 	add.w	r3, r4, #16
 8002ce8:	229c      	movs	r2, #156	@ 0x9c
 8002cea:	4619      	mov	r1, r3
 8002cec:	f00a fc77 	bl	800d5de <memcpy>
 8002cf0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002cf4:	f000 fb37 	bl	8003366 <bno055_read_regs>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	73fb      	strb	r3, [r7, #15]
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <bno055_quaternion_w+0x3e>
        return err;
 8002d02:	7bfb      	ldrb	r3, [r7, #15]
 8002d04:	e012      	b.n	8002d2c <bno055_quaternion_w+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8002d06:	7b7b      	ldrb	r3, [r7, #13]
 8002d08:	021b      	lsls	r3, r3, #8
 8002d0a:	b21a      	sxth	r2, r3
 8002d0c:	7b3b      	ldrb	r3, [r7, #12]
 8002d0e:	b21b      	sxth	r3, r3
 8002d10:	4313      	orrs	r3, r2
 8002d12:	b21b      	sxth	r3, r3
 8002d14:	ee07 3a90 	vmov	s15, r3
 8002d18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d1c:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8002d34 <bno055_quaternion_w+0x6c>
 8002d20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3714      	adds	r7, #20
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd90      	pop	{r4, r7, pc}
 8002d34:	46800000 	.word	0x46800000

08002d38 <bno055_quaternion_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_x(bno055_t* imu, f32* buf) {
 8002d38:	b590      	push	{r4, r7, lr}
 8002d3a:	b0af      	sub	sp, #188	@ 0xbc
 8002d3c:	af2a      	add	r7, sp, #168	@ 0xa8
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_X_LSB, data, 2)) != BNO_OK) {
 8002d42:	687c      	ldr	r4, [r7, #4]
 8002d44:	2302      	movs	r3, #2
 8002d46:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002d48:	f107 030c 	add.w	r3, r7, #12
 8002d4c:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002d4e:	2322      	movs	r3, #34	@ 0x22
 8002d50:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002d52:	4668      	mov	r0, sp
 8002d54:	f104 0310 	add.w	r3, r4, #16
 8002d58:	229c      	movs	r2, #156	@ 0x9c
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	f00a fc3f 	bl	800d5de <memcpy>
 8002d60:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002d64:	f000 faff 	bl	8003366 <bno055_read_regs>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	73fb      	strb	r3, [r7, #15]
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <bno055_quaternion_x+0x3e>
        return err;
 8002d72:	7bfb      	ldrb	r3, [r7, #15]
 8002d74:	e012      	b.n	8002d9c <bno055_quaternion_x+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8002d76:	7b7b      	ldrb	r3, [r7, #13]
 8002d78:	021b      	lsls	r3, r3, #8
 8002d7a:	b21a      	sxth	r2, r3
 8002d7c:	7b3b      	ldrb	r3, [r7, #12]
 8002d7e:	b21b      	sxth	r3, r3
 8002d80:	4313      	orrs	r3, r2
 8002d82:	b21b      	sxth	r3, r3
 8002d84:	ee07 3a90 	vmov	s15, r3
 8002d88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d8c:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8002da4 <bno055_quaternion_x+0x6c>
 8002d90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd90      	pop	{r4, r7, pc}
 8002da4:	46800000 	.word	0x46800000

08002da8 <bno055_quaternion_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_y(bno055_t* imu, f32* buf) {
 8002da8:	b590      	push	{r4, r7, lr}
 8002daa:	b0af      	sub	sp, #188	@ 0xbc
 8002dac:	af2a      	add	r7, sp, #168	@ 0xa8
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8002db2:	687c      	ldr	r4, [r7, #4]
 8002db4:	2302      	movs	r3, #2
 8002db6:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002db8:	f107 030c 	add.w	r3, r7, #12
 8002dbc:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002dbe:	2324      	movs	r3, #36	@ 0x24
 8002dc0:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002dc2:	4668      	mov	r0, sp
 8002dc4:	f104 0310 	add.w	r3, r4, #16
 8002dc8:	229c      	movs	r2, #156	@ 0x9c
 8002dca:	4619      	mov	r1, r3
 8002dcc:	f00a fc07 	bl	800d5de <memcpy>
 8002dd0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002dd4:	f000 fac7 	bl	8003366 <bno055_read_regs>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	73fb      	strb	r3, [r7, #15]
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <bno055_quaternion_y+0x3e>
        return err;
 8002de2:	7bfb      	ldrb	r3, [r7, #15]
 8002de4:	e012      	b.n	8002e0c <bno055_quaternion_y+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8002de6:	7b7b      	ldrb	r3, [r7, #13]
 8002de8:	021b      	lsls	r3, r3, #8
 8002dea:	b21a      	sxth	r2, r3
 8002dec:	7b3b      	ldrb	r3, [r7, #12]
 8002dee:	b21b      	sxth	r3, r3
 8002df0:	4313      	orrs	r3, r2
 8002df2:	b21b      	sxth	r3, r3
 8002df4:	ee07 3a90 	vmov	s15, r3
 8002df8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dfc:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8002e14 <bno055_quaternion_y+0x6c>
 8002e00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3714      	adds	r7, #20
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd90      	pop	{r4, r7, pc}
 8002e14:	46800000 	.word	0x46800000

08002e18 <bno055_quaternion_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_z(bno055_t* imu, f32* buf) {
 8002e18:	b590      	push	{r4, r7, lr}
 8002e1a:	b0af      	sub	sp, #188	@ 0xbc
 8002e1c:	af2a      	add	r7, sp, #168	@ 0xa8
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8002e22:	687c      	ldr	r4, [r7, #4]
 8002e24:	2302      	movs	r3, #2
 8002e26:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002e28:	f107 030c 	add.w	r3, r7, #12
 8002e2c:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002e2e:	2326      	movs	r3, #38	@ 0x26
 8002e30:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002e32:	4668      	mov	r0, sp
 8002e34:	f104 0310 	add.w	r3, r4, #16
 8002e38:	229c      	movs	r2, #156	@ 0x9c
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	f00a fbcf 	bl	800d5de <memcpy>
 8002e40:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002e44:	f000 fa8f 	bl	8003366 <bno055_read_regs>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	73fb      	strb	r3, [r7, #15]
 8002e4c:	7bfb      	ldrb	r3, [r7, #15]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <bno055_quaternion_z+0x3e>
        return err;
 8002e52:	7bfb      	ldrb	r3, [r7, #15]
 8002e54:	e012      	b.n	8002e7c <bno055_quaternion_z+0x64>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8002e56:	7b7b      	ldrb	r3, [r7, #13]
 8002e58:	021b      	lsls	r3, r3, #8
 8002e5a:	b21a      	sxth	r2, r3
 8002e5c:	7b3b      	ldrb	r3, [r7, #12]
 8002e5e:	b21b      	sxth	r3, r3
 8002e60:	4313      	orrs	r3, r2
 8002e62:	b21b      	sxth	r3, r3
 8002e64:	ee07 3a90 	vmov	s15, r3
 8002e68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e6c:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8002e84 <bno055_quaternion_z+0x6c>
 8002e70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3714      	adds	r7, #20
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd90      	pop	{r4, r7, pc}
 8002e84:	46800000 	.word	0x46800000

08002e88 <bno055_quaternion>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion(bno055_t* imu, bno055_vec4_t* buf) {
 8002e88:	b590      	push	{r4, r7, lr}
 8002e8a:	b0b1      	sub	sp, #196	@ 0xc4
 8002e8c:	af2a      	add	r7, sp, #168	@ 0xa8
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[8];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 8)) != BNO_OK) {
 8002e92:	687c      	ldr	r4, [r7, #4]
 8002e94:	2308      	movs	r3, #8
 8002e96:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002e98:	f107 030c 	add.w	r3, r7, #12
 8002e9c:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002e9e:	2320      	movs	r3, #32
 8002ea0:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002ea2:	4668      	mov	r0, sp
 8002ea4:	f104 0310 	add.w	r3, r4, #16
 8002ea8:	229c      	movs	r2, #156	@ 0x9c
 8002eaa:	4619      	mov	r1, r3
 8002eac:	f00a fb97 	bl	800d5de <memcpy>
 8002eb0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002eb4:	f000 fa57 	bl	8003366 <bno055_read_regs>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	75fb      	strb	r3, [r7, #23]
 8002ebc:	7dfb      	ldrb	r3, [r7, #23]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <bno055_quaternion+0x3e>
        return err;
 8002ec2:	7dfb      	ldrb	r3, [r7, #23]
 8002ec4:	e048      	b.n	8002f58 <bno055_quaternion+0xd0>
    }
    buf->w = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8002ec6:	7b7b      	ldrb	r3, [r7, #13]
 8002ec8:	021b      	lsls	r3, r3, #8
 8002eca:	b21a      	sxth	r2, r3
 8002ecc:	7b3b      	ldrb	r3, [r7, #12]
 8002ece:	b21b      	sxth	r3, r3
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	b21b      	sxth	r3, r3
 8002ed4:	ee07 3a90 	vmov	s15, r3
 8002ed8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002edc:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8002f60 <bno055_quaternion+0xd8>
 8002ee0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	edc3 7a03 	vstr	s15, [r3, #12]
    buf->x = (s16)((data[3] << 8) | data[2]) / (f32)BNO_QUA_SCALE;
 8002eea:	7bfb      	ldrb	r3, [r7, #15]
 8002eec:	021b      	lsls	r3, r3, #8
 8002eee:	b21a      	sxth	r2, r3
 8002ef0:	7bbb      	ldrb	r3, [r7, #14]
 8002ef2:	b21b      	sxth	r3, r3
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	b21b      	sxth	r3, r3
 8002ef8:	ee07 3a90 	vmov	s15, r3
 8002efc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f00:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8002f60 <bno055_quaternion+0xd8>
 8002f04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	edc3 7a00 	vstr	s15, [r3]
    buf->y = (s16)((data[5] << 8) | data[4]) / (f32)BNO_QUA_SCALE;
 8002f0e:	7c7b      	ldrb	r3, [r7, #17]
 8002f10:	021b      	lsls	r3, r3, #8
 8002f12:	b21a      	sxth	r2, r3
 8002f14:	7c3b      	ldrb	r3, [r7, #16]
 8002f16:	b21b      	sxth	r3, r3
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	b21b      	sxth	r3, r3
 8002f1c:	ee07 3a90 	vmov	s15, r3
 8002f20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f24:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8002f60 <bno055_quaternion+0xd8>
 8002f28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	edc3 7a01 	vstr	s15, [r3, #4]
    buf->z = (s16)((data[7] << 8) | data[6]) / (f32)BNO_QUA_SCALE;
 8002f32:	7cfb      	ldrb	r3, [r7, #19]
 8002f34:	021b      	lsls	r3, r3, #8
 8002f36:	b21a      	sxth	r2, r3
 8002f38:	7cbb      	ldrb	r3, [r7, #18]
 8002f3a:	b21b      	sxth	r3, r3
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	b21b      	sxth	r3, r3
 8002f40:	ee07 3a90 	vmov	s15, r3
 8002f44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f48:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8002f60 <bno055_quaternion+0xd8>
 8002f4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	edc3 7a02 	vstr	s15, [r3, #8]
    return BNO_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	371c      	adds	r7, #28
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd90      	pop	{r4, r7, pc}
 8002f60:	46800000 	.word	0x46800000

08002f64 <bno055_acc_conf>:

error_bno bno055_acc_conf(bno055_t* bno, const bno055_acc_range_t range,
                          const bno055_acc_band_t bandwidth,
                          const bno055_acc_mode_t mode) {
 8002f64:	b590      	push	{r4, r7, lr}
 8002f66:	b0af      	sub	sp, #188	@ 0xbc
 8002f68:	af2a      	add	r7, sp, #168	@ 0xa8
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	4608      	mov	r0, r1
 8002f6e:	4611      	mov	r1, r2
 8002f70:	461a      	mov	r2, r3
 8002f72:	4603      	mov	r3, r0
 8002f74:	70fb      	strb	r3, [r7, #3]
 8002f76:	460b      	mov	r3, r1
 8002f78:	70bb      	strb	r3, [r7, #2]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 8002f7e:	2101      	movs	r1, #1
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 fa54 	bl	800342e <bno055_set_page>
 8002f86:	4603      	mov	r3, r0
 8002f88:	73fb      	strb	r3, [r7, #15]
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <bno055_acc_conf+0x30>
        return err;
 8002f90:	7bfb      	ldrb	r3, [r7, #15]
 8002f92:	e04b      	b.n	800302c <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8002f94:	2100      	movs	r1, #0
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f91b 	bl	80031d2 <bno055_set_opmode>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	73fb      	strb	r3, [r7, #15]
 8002fa0:	7bfb      	ldrb	r3, [r7, #15]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <bno055_acc_conf+0x46>
        return err;
 8002fa6:	7bfb      	ldrb	r3, [r7, #15]
 8002fa8:	e040      	b.n	800302c <bno055_acc_conf+0xc8>
    }
    osDelay(BNO_CONFIG_TIME_DELAY + 5);
 8002faa:	200c      	movs	r0, #12
 8002fac:	f006 fbd0 	bl	8009750 <osDelay>
    u8 config = range | bandwidth | mode;
 8002fb0:	78fa      	ldrb	r2, [r7, #3]
 8002fb2:	78bb      	ldrb	r3, [r7, #2]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	787b      	ldrb	r3, [r7, #1]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_ACC_CONFIG, &config, 1)) != BNO_OK) {
 8002fc0:	687c      	ldr	r4, [r7, #4]
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002fc6:	f107 030e 	add.w	r3, r7, #14
 8002fca:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002fcc:	2308      	movs	r3, #8
 8002fce:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002fd0:	4668      	mov	r0, sp
 8002fd2:	f104 0310 	add.w	r3, r4, #16
 8002fd6:	229c      	movs	r2, #156	@ 0x9c
 8002fd8:	4619      	mov	r1, r3
 8002fda:	f00a fb00 	bl	800d5de <memcpy>
 8002fde:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002fe2:	f000 f9f6 	bl	80033d2 <bno055_write_regs>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	73fb      	strb	r3, [r7, #15]
 8002fea:	7bfb      	ldrb	r3, [r7, #15]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <bno055_acc_conf+0x90>
        return err;
 8002ff0:	7bfb      	ldrb	r3, [r7, #15]
 8002ff2:	e01b      	b.n	800302c <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	791b      	ldrb	r3, [r3, #4]
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f8e9 	bl	80031d2 <bno055_set_opmode>
 8003000:	4603      	mov	r3, r0
 8003002:	73fb      	strb	r3, [r7, #15]
 8003004:	7bfb      	ldrb	r3, [r7, #15]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <bno055_acc_conf+0xaa>
        return err;
 800300a:	7bfb      	ldrb	r3, [r7, #15]
 800300c:	e00e      	b.n	800302c <bno055_acc_conf+0xc8>
    }
    osDelay(BNO_ANY_TIME_DELAY + 5);
 800300e:	2018      	movs	r0, #24
 8003010:	f006 fb9e 	bl	8009750 <osDelay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8003014:	2100      	movs	r1, #0
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 fa09 	bl	800342e <bno055_set_page>
 800301c:	4603      	mov	r3, r0
 800301e:	73fb      	strb	r3, [r7, #15]
 8003020:	7bfb      	ldrb	r3, [r7, #15]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <bno055_acc_conf+0xc6>
        return err;
 8003026:	7bfb      	ldrb	r3, [r7, #15]
 8003028:	e000      	b.n	800302c <bno055_acc_conf+0xc8>
    }
    return BNO_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	bd90      	pop	{r4, r7, pc}

08003034 <bno055_gyr_conf>:

error_bno bno055_gyr_conf(bno055_t* bno, const bno055_gyr_range_t range,
                          const bno055_gyr_band_t bandwidth,
                          const bno055_gyr_mode_t mode) {
 8003034:	b590      	push	{r4, r7, lr}
 8003036:	b0af      	sub	sp, #188	@ 0xbc
 8003038:	af2a      	add	r7, sp, #168	@ 0xa8
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	4608      	mov	r0, r1
 800303e:	4611      	mov	r1, r2
 8003040:	461a      	mov	r2, r3
 8003042:	4603      	mov	r3, r0
 8003044:	70fb      	strb	r3, [r7, #3]
 8003046:	460b      	mov	r3, r1
 8003048:	70bb      	strb	r3, [r7, #2]
 800304a:	4613      	mov	r3, r2
 800304c:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 800304e:	2101      	movs	r1, #1
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f9ec 	bl	800342e <bno055_set_page>
 8003056:	4603      	mov	r3, r0
 8003058:	73fb      	strb	r3, [r7, #15]
 800305a:	7bfb      	ldrb	r3, [r7, #15]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <bno055_gyr_conf+0x30>
        return err;
 8003060:	7bfb      	ldrb	r3, [r7, #15]
 8003062:	e04a      	b.n	80030fa <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8003064:	2100      	movs	r1, #0
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f8b3 	bl	80031d2 <bno055_set_opmode>
 800306c:	4603      	mov	r3, r0
 800306e:	73fb      	strb	r3, [r7, #15]
 8003070:	7bfb      	ldrb	r3, [r7, #15]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <bno055_gyr_conf+0x46>
        return err;
 8003076:	7bfb      	ldrb	r3, [r7, #15]
 8003078:	e03f      	b.n	80030fa <bno055_gyr_conf+0xc6>
    }
    osDelay(BNO_CONFIG_TIME_DELAY + 5);
 800307a:	200c      	movs	r0, #12
 800307c:	f006 fb68 	bl	8009750 <osDelay>
    u8 config[2] = {range | bandwidth, mode};
 8003080:	78fa      	ldrb	r2, [r7, #3]
 8003082:	78bb      	ldrb	r3, [r7, #2]
 8003084:	4313      	orrs	r3, r2
 8003086:	b2db      	uxtb	r3, r3
 8003088:	733b      	strb	r3, [r7, #12]
 800308a:	787b      	ldrb	r3, [r7, #1]
 800308c:	737b      	strb	r3, [r7, #13]
    if ((err = bno055_write_regs(*bno, BNO_GYR_CONFIG_0, config, 2)) !=
 800308e:	687c      	ldr	r4, [r7, #4]
 8003090:	2302      	movs	r3, #2
 8003092:	9329      	str	r3, [sp, #164]	@ 0xa4
 8003094:	f107 030c 	add.w	r3, r7, #12
 8003098:	9328      	str	r3, [sp, #160]	@ 0xa0
 800309a:	230a      	movs	r3, #10
 800309c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800309e:	4668      	mov	r0, sp
 80030a0:	f104 0310 	add.w	r3, r4, #16
 80030a4:	229c      	movs	r2, #156	@ 0x9c
 80030a6:	4619      	mov	r1, r3
 80030a8:	f00a fa99 	bl	800d5de <memcpy>
 80030ac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80030b0:	f000 f98f 	bl	80033d2 <bno055_write_regs>
 80030b4:	4603      	mov	r3, r0
 80030b6:	73fb      	strb	r3, [r7, #15]
 80030b8:	7bfb      	ldrb	r3, [r7, #15]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <bno055_gyr_conf+0x8e>
        BNO_OK) {
        return err;
 80030be:	7bfb      	ldrb	r3, [r7, #15]
 80030c0:	e01b      	b.n	80030fa <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	791b      	ldrb	r3, [r3, #4]
 80030c6:	4619      	mov	r1, r3
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 f882 	bl	80031d2 <bno055_set_opmode>
 80030ce:	4603      	mov	r3, r0
 80030d0:	73fb      	strb	r3, [r7, #15]
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <bno055_gyr_conf+0xa8>
        return err;
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
 80030da:	e00e      	b.n	80030fa <bno055_gyr_conf+0xc6>
    }
    osDelay(BNO_ANY_TIME_DELAY + 5);
 80030dc:	2018      	movs	r0, #24
 80030de:	f006 fb37 	bl	8009750 <osDelay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 80030e2:	2100      	movs	r1, #0
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 f9a2 	bl	800342e <bno055_set_page>
 80030ea:	4603      	mov	r3, r0
 80030ec:	73fb      	strb	r3, [r7, #15]
 80030ee:	7bfb      	ldrb	r3, [r7, #15]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <bno055_gyr_conf+0xc4>
        return err;
 80030f4:	7bfb      	ldrb	r3, [r7, #15]
 80030f6:	e000      	b.n	80030fa <bno055_gyr_conf+0xc6>
    }
    return BNO_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd90      	pop	{r4, r7, pc}

08003102 <bno055_mag_conf>:
error_bno bno055_mag_conf(bno055_t* bno, const bno055_mag_rate_t out_rate,
                          const bno055_mag_pwr_t pwr_mode,
                          const bno055_mag_mode_t mode) {
 8003102:	b590      	push	{r4, r7, lr}
 8003104:	b0af      	sub	sp, #188	@ 0xbc
 8003106:	af2a      	add	r7, sp, #168	@ 0xa8
 8003108:	6078      	str	r0, [r7, #4]
 800310a:	4608      	mov	r0, r1
 800310c:	4611      	mov	r1, r2
 800310e:	461a      	mov	r2, r3
 8003110:	4603      	mov	r3, r0
 8003112:	70fb      	strb	r3, [r7, #3]
 8003114:	460b      	mov	r3, r1
 8003116:	70bb      	strb	r3, [r7, #2]
 8003118:	4613      	mov	r3, r2
 800311a:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 800311c:	2101      	movs	r1, #1
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f985 	bl	800342e <bno055_set_page>
 8003124:	4603      	mov	r3, r0
 8003126:	73fb      	strb	r3, [r7, #15]
 8003128:	7bfb      	ldrb	r3, [r7, #15]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <bno055_mag_conf+0x30>
        return err;
 800312e:	7bfb      	ldrb	r3, [r7, #15]
 8003130:	e04b      	b.n	80031ca <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8003132:	2100      	movs	r1, #0
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 f84c 	bl	80031d2 <bno055_set_opmode>
 800313a:	4603      	mov	r3, r0
 800313c:	73fb      	strb	r3, [r7, #15]
 800313e:	7bfb      	ldrb	r3, [r7, #15]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <bno055_mag_conf+0x46>
        return err;
 8003144:	7bfb      	ldrb	r3, [r7, #15]
 8003146:	e040      	b.n	80031ca <bno055_mag_conf+0xc8>
    }
    osDelay(BNO_CONFIG_TIME_DELAY + 5);
 8003148:	200c      	movs	r0, #12
 800314a:	f006 fb01 	bl	8009750 <osDelay>
    u8 config = out_rate | pwr_mode | mode;
 800314e:	78fa      	ldrb	r2, [r7, #3]
 8003150:	78bb      	ldrb	r3, [r7, #2]
 8003152:	4313      	orrs	r3, r2
 8003154:	b2da      	uxtb	r2, r3
 8003156:	787b      	ldrb	r3, [r7, #1]
 8003158:	4313      	orrs	r3, r2
 800315a:	b2db      	uxtb	r3, r3
 800315c:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_MAG_CONFIG, &config, 1)) != BNO_OK) {
 800315e:	687c      	ldr	r4, [r7, #4]
 8003160:	2301      	movs	r3, #1
 8003162:	9329      	str	r3, [sp, #164]	@ 0xa4
 8003164:	f107 030e 	add.w	r3, r7, #14
 8003168:	9328      	str	r3, [sp, #160]	@ 0xa0
 800316a:	2309      	movs	r3, #9
 800316c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800316e:	4668      	mov	r0, sp
 8003170:	f104 0310 	add.w	r3, r4, #16
 8003174:	229c      	movs	r2, #156	@ 0x9c
 8003176:	4619      	mov	r1, r3
 8003178:	f00a fa31 	bl	800d5de <memcpy>
 800317c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003180:	f000 f927 	bl	80033d2 <bno055_write_regs>
 8003184:	4603      	mov	r3, r0
 8003186:	73fb      	strb	r3, [r7, #15]
 8003188:	7bfb      	ldrb	r3, [r7, #15]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <bno055_mag_conf+0x90>
        return err;
 800318e:	7bfb      	ldrb	r3, [r7, #15]
 8003190:	e01b      	b.n	80031ca <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	791b      	ldrb	r3, [r3, #4]
 8003196:	4619      	mov	r1, r3
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 f81a 	bl	80031d2 <bno055_set_opmode>
 800319e:	4603      	mov	r3, r0
 80031a0:	73fb      	strb	r3, [r7, #15]
 80031a2:	7bfb      	ldrb	r3, [r7, #15]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <bno055_mag_conf+0xaa>
        return err;
 80031a8:	7bfb      	ldrb	r3, [r7, #15]
 80031aa:	e00e      	b.n	80031ca <bno055_mag_conf+0xc8>
    }
    osDelay(BNO_ANY_TIME_DELAY + 5);
 80031ac:	2018      	movs	r0, #24
 80031ae:	f006 facf 	bl	8009750 <osDelay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 80031b2:	2100      	movs	r1, #0
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 f93a 	bl	800342e <bno055_set_page>
 80031ba:	4603      	mov	r3, r0
 80031bc:	73fb      	strb	r3, [r7, #15]
 80031be:	7bfb      	ldrb	r3, [r7, #15]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <bno055_mag_conf+0xc6>
        return err;
 80031c4:	7bfb      	ldrb	r3, [r7, #15]
 80031c6:	e000      	b.n	80031ca <bno055_mag_conf+0xc8>
    }
    return BNO_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3714      	adds	r7, #20
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd90      	pop	{r4, r7, pc}

080031d2 <bno055_set_opmode>:

error_bno bno055_set_opmode(bno055_t* imu, const bno055_opmode_t opmode) {
 80031d2:	b590      	push	{r4, r7, lr}
 80031d4:	b0af      	sub	sp, #188	@ 0xbc
 80031d6:	af2a      	add	r7, sp, #168	@ 0xa8
 80031d8:	6078      	str	r0, [r7, #4]
 80031da:	460b      	mov	r3, r1
 80031dc:	70fb      	strb	r3, [r7, #3]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    if ((err = bno055_write_regs(*imu, BNO_OPR_MODE, (u8*)&opmode, 1)) !=
 80031de:	687c      	ldr	r4, [r7, #4]
 80031e0:	2301      	movs	r3, #1
 80031e2:	9329      	str	r3, [sp, #164]	@ 0xa4
 80031e4:	1cfb      	adds	r3, r7, #3
 80031e6:	9328      	str	r3, [sp, #160]	@ 0xa0
 80031e8:	233d      	movs	r3, #61	@ 0x3d
 80031ea:	9327      	str	r3, [sp, #156]	@ 0x9c
 80031ec:	4668      	mov	r0, sp
 80031ee:	f104 0310 	add.w	r3, r4, #16
 80031f2:	229c      	movs	r2, #156	@ 0x9c
 80031f4:	4619      	mov	r1, r3
 80031f6:	f00a f9f2 	bl	800d5de <memcpy>
 80031fa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80031fe:	f000 f8e8 	bl	80033d2 <bno055_write_regs>
 8003202:	4603      	mov	r3, r0
 8003204:	73fb      	strb	r3, [r7, #15]
 8003206:	7bfb      	ldrb	r3, [r7, #15]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <bno055_set_opmode+0x3e>
        BNO_OK) {
        return err;
 800320c:	7bfb      	ldrb	r3, [r7, #15]
 800320e:	e003      	b.n	8003218 <bno055_set_opmode+0x46>
    }
    osDelay(BNO_ANY_TIME_DELAY + 5);
 8003210:	2018      	movs	r0, #24
 8003212:	f006 fa9d 	bl	8009750 <osDelay>
    return BNO_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	bd90      	pop	{r4, r7, pc}

08003220 <bno055_set_pwr_mode>:
        return err;
    }
    return BNO_OK;
}

error_bno bno055_set_pwr_mode(bno055_t* imu, bno055_pwr_t pwr_mode) {
 8003220:	b590      	push	{r4, r7, lr}
 8003222:	b0af      	sub	sp, #188	@ 0xbc
 8003224:	af2a      	add	r7, sp, #168	@ 0xa8
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	460b      	mov	r3, r1
 800322a:	70fb      	strb	r3, [r7, #3]
    if (imu == NULL) {
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <bno055_set_pwr_mode+0x16>
        return BNO_ERR_NULL_PTR;
 8003232:	2304      	movs	r3, #4
 8003234:	e04d      	b.n	80032d2 <bno055_set_pwr_mode+0xb2>
    }
    error_bno err;
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 8003236:	2100      	movs	r1, #0
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f7ff ffca 	bl	80031d2 <bno055_set_opmode>
 800323e:	4603      	mov	r3, r0
 8003240:	73fb      	strb	r3, [r7, #15]
 8003242:	7bfb      	ldrb	r3, [r7, #15]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <bno055_set_pwr_mode+0x2c>
        return err;
 8003248:	7bfb      	ldrb	r3, [r7, #15]
 800324a:	e042      	b.n	80032d2 <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 800324c:	2100      	movs	r1, #0
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f8ed 	bl	800342e <bno055_set_page>
 8003254:	4603      	mov	r3, r0
 8003256:	73fb      	strb	r3, [r7, #15]
 8003258:	7bfb      	ldrb	r3, [r7, #15]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <bno055_set_pwr_mode+0x42>
        return err;
 800325e:	7bfb      	ldrb	r3, [r7, #15]
 8003260:	e037      	b.n	80032d2 <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_write_regs(*imu, BNO_PWR_MODE, (u8*)&pwr_mode, 1)) !=
 8003262:	687c      	ldr	r4, [r7, #4]
 8003264:	2301      	movs	r3, #1
 8003266:	9329      	str	r3, [sp, #164]	@ 0xa4
 8003268:	1cfb      	adds	r3, r7, #3
 800326a:	9328      	str	r3, [sp, #160]	@ 0xa0
 800326c:	233e      	movs	r3, #62	@ 0x3e
 800326e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8003270:	4668      	mov	r0, sp
 8003272:	f104 0310 	add.w	r3, r4, #16
 8003276:	229c      	movs	r2, #156	@ 0x9c
 8003278:	4619      	mov	r1, r3
 800327a:	f00a f9b0 	bl	800d5de <memcpy>
 800327e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003282:	f000 f8a6 	bl	80033d2 <bno055_write_regs>
 8003286:	4603      	mov	r3, r0
 8003288:	73fb      	strb	r3, [r7, #15]
 800328a:	7bfb      	ldrb	r3, [r7, #15]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <bno055_set_pwr_mode+0x74>
        BNO_OK) {
        return err;
 8003290:	7bfb      	ldrb	r3, [r7, #15]
 8003292:	e01e      	b.n	80032d2 <bno055_set_pwr_mode+0xb2>
    }
    imu->_pwr_mode = pwr_mode;
 8003294:	78fa      	ldrb	r2, [r7, #3]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	731a      	strb	r2, [r3, #12]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 800329a:	2100      	movs	r1, #0
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 f8c6 	bl	800342e <bno055_set_page>
 80032a2:	4603      	mov	r3, r0
 80032a4:	73fb      	strb	r3, [r7, #15]
 80032a6:	7bfb      	ldrb	r3, [r7, #15]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <bno055_set_pwr_mode+0x90>
        return err;
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
 80032ae:	e010      	b.n	80032d2 <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	791b      	ldrb	r3, [r3, #4]
 80032b4:	4619      	mov	r1, r3
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7ff ff8b 	bl	80031d2 <bno055_set_opmode>
 80032bc:	4603      	mov	r3, r0
 80032be:	73fb      	strb	r3, [r7, #15]
 80032c0:	7bfb      	ldrb	r3, [r7, #15]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <bno055_set_pwr_mode+0xaa>
        return err;
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
 80032c8:	e003      	b.n	80032d2 <bno055_set_pwr_mode+0xb2>
    }
    osDelay(2);
 80032ca:	2002      	movs	r0, #2
 80032cc:	f006 fa40 	bl	8009750 <osDelay>
    return BNO_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3714      	adds	r7, #20
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd90      	pop	{r4, r7, pc}

080032da <bno055_reset>:

error_bno bno055_reset(bno055_t* imu) {
 80032da:	b590      	push	{r4, r7, lr}
 80032dc:	b0af      	sub	sp, #188	@ 0xbc
 80032de:	af2a      	add	r7, sp, #168	@ 0xa8
 80032e0:	6078      	str	r0, [r7, #4]
    u8 data = 0x20U;
 80032e2:	2320      	movs	r3, #32
 80032e4:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 80032e6:	687c      	ldr	r4, [r7, #4]
 80032e8:	2301      	movs	r3, #1
 80032ea:	9329      	str	r3, [sp, #164]	@ 0xa4
 80032ec:	f107 030f 	add.w	r3, r7, #15
 80032f0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80032f2:	233f      	movs	r3, #63	@ 0x3f
 80032f4:	9327      	str	r3, [sp, #156]	@ 0x9c
 80032f6:	4668      	mov	r0, sp
 80032f8:	f104 0310 	add.w	r3, r4, #16
 80032fc:	229c      	movs	r2, #156	@ 0x9c
 80032fe:	4619      	mov	r1, r3
 8003300:	f00a f96d 	bl	800d5de <memcpy>
 8003304:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003308:	f000 f863 	bl	80033d2 <bno055_write_regs>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <bno055_reset+0x3c>
        return BNO_ERR_I2C;
 8003312:	2301      	movs	r3, #1
 8003314:	e000      	b.n	8003318 <bno055_reset+0x3e>
    }
    return BNO_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3714      	adds	r7, #20
 800331c:	46bd      	mov	sp, r7
 800331e:	bd90      	pop	{r4, r7, pc}

08003320 <bno055_on>:

error_bno bno055_on(bno055_t* imu) {
 8003320:	b590      	push	{r4, r7, lr}
 8003322:	b0af      	sub	sp, #188	@ 0xbc
 8003324:	af2a      	add	r7, sp, #168	@ 0xa8
 8003326:	6078      	str	r0, [r7, #4]
    u8 data = 0x00U;
 8003328:	2300      	movs	r3, #0
 800332a:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 800332c:	687c      	ldr	r4, [r7, #4]
 800332e:	2301      	movs	r3, #1
 8003330:	9329      	str	r3, [sp, #164]	@ 0xa4
 8003332:	f107 030f 	add.w	r3, r7, #15
 8003336:	9328      	str	r3, [sp, #160]	@ 0xa0
 8003338:	233f      	movs	r3, #63	@ 0x3f
 800333a:	9327      	str	r3, [sp, #156]	@ 0x9c
 800333c:	4668      	mov	r0, sp
 800333e:	f104 0310 	add.w	r3, r4, #16
 8003342:	229c      	movs	r2, #156	@ 0x9c
 8003344:	4619      	mov	r1, r3
 8003346:	f00a f94a 	bl	800d5de <memcpy>
 800334a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800334e:	f000 f840 	bl	80033d2 <bno055_write_regs>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <bno055_on+0x3c>
        return BNO_ERR_I2C;
 8003358:	2301      	movs	r3, #1
 800335a:	e000      	b.n	800335e <bno055_on+0x3e>
    }
    return BNO_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3714      	adds	r7, #20
 8003362:	46bd      	mov	sp, r7
 8003364:	bd90      	pop	{r4, r7, pc}

08003366 <bno055_read_regs>:

error_bno bno055_read_regs(bno055_t imu, u8 addr, uint8_t* buf,
                           uint32_t buf_size) {
 8003366:	b084      	sub	sp, #16
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af02      	add	r7, sp, #8
 800336e:	f107 0c10 	add.w	ip, r7, #16
 8003372:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
    // buf,
    //                        buf_size, HAL_MAX_DELAY);
    err = HAL_I2C_Master_Transmit(imu.i2c, imu.addr, &addr, 1, HAL_MAX_DELAY);
 8003376:	6938      	ldr	r0, [r7, #16]
 8003378:	7dbb      	ldrb	r3, [r7, #22]
 800337a:	4619      	mov	r1, r3
 800337c:	f107 02bc 	add.w	r2, r7, #188	@ 0xbc
 8003380:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	2301      	movs	r3, #1
 8003388:	f002 fcd0 	bl	8005d2c <HAL_I2C_Master_Transmit>
 800338c:	4603      	mov	r3, r0
 800338e:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 8003390:	79fb      	ldrb	r3, [r7, #7]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <bno055_read_regs+0x34>
        return BNO_ERR_I2C;
 8003396:	2301      	movs	r3, #1
 8003398:	e014      	b.n	80033c4 <bno055_read_regs+0x5e>
    }
    err =
        HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 800339a:	6938      	ldr	r0, [r7, #16]
 800339c:	7dbb      	ldrb	r3, [r7, #22]
 800339e:	4619      	mov	r1, r3
 80033a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80033aa:	9200      	str	r2, [sp, #0]
 80033ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80033b0:	f002 fdba 	bl	8005f28 <HAL_I2C_Master_Receive>
 80033b4:	4603      	mov	r3, r0
 80033b6:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 80033b8:	79fb      	ldrb	r3, [r7, #7]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <bno055_read_regs+0x5c>
        return BNO_ERR_I2C;
 80033be:	2301      	movs	r3, #1
 80033c0:	e000      	b.n	80033c4 <bno055_read_regs+0x5e>
    }
    return BNO_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3708      	adds	r7, #8
 80033c8:	46bd      	mov	sp, r7
 80033ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80033ce:	b004      	add	sp, #16
 80033d0:	4770      	bx	lr

080033d2 <bno055_write_regs>:

error_bno bno055_write_regs(bno055_t imu, uint32_t addr, uint8_t* buf,
                            uint32_t buf_size) {
 80033d2:	b084      	sub	sp, #16
 80033d4:	b5b0      	push	{r4, r5, r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af04      	add	r7, sp, #16
 80033da:	f107 0418 	add.w	r4, r7, #24
 80033de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 80033e2:	69b8      	ldr	r0, [r7, #24]
 80033e4:	7fbb      	ldrb	r3, [r7, #30]
 80033e6:	461d      	mov	r5, r3
 80033e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80033f2:	b299      	uxth	r1, r3
 80033f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80033fe:	9402      	str	r4, [sp, #8]
 8003400:	9301      	str	r3, [sp, #4]
 8003402:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003406:	9300      	str	r3, [sp, #0]
 8003408:	460b      	mov	r3, r1
 800340a:	4629      	mov	r1, r5
 800340c:	f002 ffbe 	bl	800638c <HAL_I2C_Mem_Write>
 8003410:	4603      	mov	r3, r0
 8003412:	71fb      	strb	r3, [r7, #7]
                            HAL_MAX_DELAY);
    if (err != HAL_OK) {
 8003414:	79fb      	ldrb	r3, [r7, #7]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <bno055_write_regs+0x4c>
        return BNO_ERR_I2C;
 800341a:	2301      	movs	r3, #1
 800341c:	e000      	b.n	8003420 <bno055_write_regs+0x4e>
    }
    return BNO_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800342a:	b004      	add	sp, #16
 800342c:	4770      	bx	lr

0800342e <bno055_set_page>:

error_bno bno055_set_page(bno055_t* imu, const bno055_page_t page) {
 800342e:	b590      	push	{r4, r7, lr}
 8003430:	b0af      	sub	sp, #188	@ 0xbc
 8003432:	af2a      	add	r7, sp, #168	@ 0xa8
 8003434:	6078      	str	r0, [r7, #4]
 8003436:	460b      	mov	r3, r1
 8003438:	70fb      	strb	r3, [r7, #3]
    if (imu->_page != page) {
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	7b5a      	ldrb	r2, [r3, #13]
 800343e:	78fb      	ldrb	r3, [r7, #3]
 8003440:	429a      	cmp	r2, r3
 8003442:	d001      	beq.n	8003448 <bno055_set_page+0x1a>
        return BNO_OK;
 8003444:	2300      	movs	r3, #0
 8003446:	e024      	b.n	8003492 <bno055_set_page+0x64>
    }
    if (page > 0x01) {
 8003448:	78fb      	ldrb	r3, [r7, #3]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d901      	bls.n	8003452 <bno055_set_page+0x24>
        return BNO_ERR_PAGE_TOO_HIGH;
 800344e:	2302      	movs	r3, #2
 8003450:	e01f      	b.n	8003492 <bno055_set_page+0x64>
    }
    error_bno err;
    err = bno055_write_regs(*imu, BNO_PAGE_ID, (u8*)&page, 1);
 8003452:	687c      	ldr	r4, [r7, #4]
 8003454:	2301      	movs	r3, #1
 8003456:	9329      	str	r3, [sp, #164]	@ 0xa4
 8003458:	1cfb      	adds	r3, r7, #3
 800345a:	9328      	str	r3, [sp, #160]	@ 0xa0
 800345c:	2307      	movs	r3, #7
 800345e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8003460:	4668      	mov	r0, sp
 8003462:	f104 0310 	add.w	r3, r4, #16
 8003466:	229c      	movs	r2, #156	@ 0x9c
 8003468:	4619      	mov	r1, r3
 800346a:	f00a f8b8 	bl	800d5de <memcpy>
 800346e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003472:	f7ff ffae 	bl	80033d2 <bno055_write_regs>
 8003476:	4603      	mov	r3, r0
 8003478:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 800347a:	7bfb      	ldrb	r3, [r7, #15]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <bno055_set_page+0x56>
        return err;
 8003480:	7bfb      	ldrb	r3, [r7, #15]
 8003482:	e006      	b.n	8003492 <bno055_set_page+0x64>
    }
    imu->_page = page;
 8003484:	78fa      	ldrb	r2, [r7, #3]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	735a      	strb	r2, [r3, #13]
    osDelay(2);
 800348a:	2002      	movs	r0, #2
 800348c:	f006 f960 	bl	8009750 <osDelay>
    return BNO_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3714      	adds	r7, #20
 8003496:	46bd      	mov	sp, r7
 8003498:	bd90      	pop	{r4, r7, pc}
	...

0800349c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80034a2:	2300      	movs	r3, #0
 80034a4:	607b      	str	r3, [r7, #4]
 80034a6:	4b0c      	ldr	r3, [pc, #48]	@ (80034d8 <MX_DMA_Init+0x3c>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034aa:	4a0b      	ldr	r2, [pc, #44]	@ (80034d8 <MX_DMA_Init+0x3c>)
 80034ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80034b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80034b2:	4b09      	ldr	r3, [pc, #36]	@ (80034d8 <MX_DMA_Init+0x3c>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034ba:	607b      	str	r3, [r7, #4]
 80034bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80034be:	2200      	movs	r2, #0
 80034c0:	2105      	movs	r1, #5
 80034c2:	2038      	movs	r0, #56	@ 0x38
 80034c4:	f001 fdd0 	bl	8005068 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80034c8:	2038      	movs	r0, #56	@ 0x38
 80034ca:	f001 fde9 	bl	80050a0 <HAL_NVIC_EnableIRQ>

}
 80034ce:	bf00      	nop
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	40023800 	.word	0x40023800

080034dc <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim11);
 80034e0:	4802      	ldr	r0, [pc, #8]	@ (80034ec <configureTimerForRunTimeStats+0x10>)
 80034e2:	f004 f943 	bl	800776c <HAL_TIM_Base_Start_IT>
}
 80034e6:	bf00      	nop
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	200005c0 	.word	0x200005c0

080034f0 <getRunTimeCounterValue>:

extern volatile unsigned long ulHighFrequencyTimerTicks;
__weak unsigned long getRunTimeCounterValue(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 80034f4:	4b03      	ldr	r3, [pc, #12]	@ (8003504 <getRunTimeCounterValue+0x14>)
 80034f6:	681b      	ldr	r3, [r3, #0]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	20000518 	.word	0x20000518

08003508 <PreSleepProcessing>:
/* USER CODE END 1 */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

	// Start all 4 input captures
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8003534:	2100      	movs	r1, #0
 8003536:	4840      	ldr	r0, [pc, #256]	@ (8003638 <MX_FREERTOS_Init+0x108>)
 8003538:	f004 fad4 	bl	8007ae4 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 800353c:	2104      	movs	r1, #4
 800353e:	483e      	ldr	r0, [pc, #248]	@ (8003638 <MX_FREERTOS_Init+0x108>)
 8003540:	f004 fad0 	bl	8007ae4 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8003544:	2108      	movs	r1, #8
 8003546:	483c      	ldr	r0, [pc, #240]	@ (8003638 <MX_FREERTOS_Init+0x108>)
 8003548:	f004 facc 	bl	8007ae4 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 800354c:	210c      	movs	r1, #12
 800354e:	483a      	ldr	r0, [pc, #232]	@ (8003638 <MX_FREERTOS_Init+0x108>)
 8003550:	f004 fac8 	bl	8007ae4 <HAL_TIM_IC_Start_IT>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8003554:	2100      	movs	r1, #0
 8003556:	4839      	ldr	r0, [pc, #228]	@ (800363c <MX_FREERTOS_Init+0x10c>)
 8003558:	f004 f9ba 	bl	80078d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800355c:	2104      	movs	r1, #4
 800355e:	4837      	ldr	r0, [pc, #220]	@ (800363c <MX_FREERTOS_Init+0x10c>)
 8003560:	f004 f9b6 	bl	80078d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8003564:	2108      	movs	r1, #8
 8003566:	4835      	ldr	r0, [pc, #212]	@ (800363c <MX_FREERTOS_Init+0x10c>)
 8003568:	f004 f9b2 	bl	80078d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800356c:	210c      	movs	r1, #12
 800356e:	4833      	ldr	r0, [pc, #204]	@ (800363c <MX_FREERTOS_Init+0x10c>)
 8003570:	f004 f9ae 	bl	80078d0 <HAL_TIM_PWM_Start>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of radioQueue */
  radioQueueHandle = osMessageQueueNew (1, sizeof(RadioData_t), &radioQueue_attributes);
 8003574:	4a32      	ldr	r2, [pc, #200]	@ (8003640 <MX_FREERTOS_Init+0x110>)
 8003576:	2108      	movs	r1, #8
 8003578:	2001      	movs	r0, #1
 800357a:	f006 f904 	bl	8009786 <osMessageQueueNew>
 800357e:	4603      	mov	r3, r0
 8003580:	4a30      	ldr	r2, [pc, #192]	@ (8003644 <MX_FREERTOS_Init+0x114>)
 8003582:	6013      	str	r3, [r2, #0]

  /* creation of adcQueue */
  adcQueueHandle = osMessageQueueNew (1, sizeof(AdcData_t), &adcQueue_attributes);
 8003584:	4a30      	ldr	r2, [pc, #192]	@ (8003648 <MX_FREERTOS_Init+0x118>)
 8003586:	2110      	movs	r1, #16
 8003588:	2001      	movs	r0, #1
 800358a:	f006 f8fc 	bl	8009786 <osMessageQueueNew>
 800358e:	4603      	mov	r3, r0
 8003590:	4a2e      	ldr	r2, [pc, #184]	@ (800364c <MX_FREERTOS_Init+0x11c>)
 8003592:	6013      	str	r3, [r2, #0]

  /* creation of imuQueue */
  imuQueueHandle = osMessageQueueNew (1, sizeof(ImuData_t), &imuQueue_attributes);
 8003594:	4a2e      	ldr	r2, [pc, #184]	@ (8003650 <MX_FREERTOS_Init+0x120>)
 8003596:	2130      	movs	r1, #48	@ 0x30
 8003598:	2001      	movs	r0, #1
 800359a:	f006 f8f4 	bl	8009786 <osMessageQueueNew>
 800359e:	4603      	mov	r3, r0
 80035a0:	4a2c      	ldr	r2, [pc, #176]	@ (8003654 <MX_FREERTOS_Init+0x124>)
 80035a2:	6013      	str	r3, [r2, #0]

  /* creation of telemetryQueue */
  controlQueueHandle = osMessageQueueNew (1, sizeof(ControlData_t), &controlQueue_attributes);
 80035a4:	4a2c      	ldr	r2, [pc, #176]	@ (8003658 <MX_FREERTOS_Init+0x128>)
 80035a6:	2118      	movs	r1, #24
 80035a8:	2001      	movs	r0, #1
 80035aa:	f006 f8ec 	bl	8009786 <osMessageQueueNew>
 80035ae:	4603      	mov	r3, r0
 80035b0:	4a2a      	ldr	r2, [pc, #168]	@ (800365c <MX_FREERTOS_Init+0x12c>)
 80035b2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  // Allowing the kernel-aware debugger to get to know our queues
  vQueueAddToRegistry( radioQueueHandle, "radioQueue" );
 80035b4:	4b23      	ldr	r3, [pc, #140]	@ (8003644 <MX_FREERTOS_Init+0x114>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4929      	ldr	r1, [pc, #164]	@ (8003660 <MX_FREERTOS_Init+0x130>)
 80035ba:	4618      	mov	r0, r3
 80035bc:	f007 f8b4 	bl	800a728 <vQueueAddToRegistry>
  vQueueAddToRegistry( adcQueueHandle, "adcQueue" );
 80035c0:	4b22      	ldr	r3, [pc, #136]	@ (800364c <MX_FREERTOS_Init+0x11c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4927      	ldr	r1, [pc, #156]	@ (8003664 <MX_FREERTOS_Init+0x134>)
 80035c6:	4618      	mov	r0, r3
 80035c8:	f007 f8ae 	bl	800a728 <vQueueAddToRegistry>
  vQueueAddToRegistry( imuQueueHandle, "imuQueue" );
 80035cc:	4b21      	ldr	r3, [pc, #132]	@ (8003654 <MX_FREERTOS_Init+0x124>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4925      	ldr	r1, [pc, #148]	@ (8003668 <MX_FREERTOS_Init+0x138>)
 80035d2:	4618      	mov	r0, r3
 80035d4:	f007 f8a8 	bl	800a728 <vQueueAddToRegistry>
  vQueueAddToRegistry( controlQueueHandle, "controlQueue" );
 80035d8:	4b20      	ldr	r3, [pc, #128]	@ (800365c <MX_FREERTOS_Init+0x12c>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4923      	ldr	r1, [pc, #140]	@ (800366c <MX_FREERTOS_Init+0x13c>)
 80035de:	4618      	mov	r0, r3
 80035e0:	f007 f8a2 	bl	800a728 <vQueueAddToRegistry>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80035e4:	4a22      	ldr	r2, [pc, #136]	@ (8003670 <MX_FREERTOS_Init+0x140>)
 80035e6:	2100      	movs	r1, #0
 80035e8:	4822      	ldr	r0, [pc, #136]	@ (8003674 <MX_FREERTOS_Init+0x144>)
 80035ea:	f006 f81f 	bl	800962c <osThreadNew>
 80035ee:	4603      	mov	r3, r0
 80035f0:	4a21      	ldr	r2, [pc, #132]	@ (8003678 <MX_FREERTOS_Init+0x148>)
 80035f2:	6013      	str	r3, [r2, #0]

  /* creation of control_task */
  control_taskHandle = osThreadNew(_control_task, NULL, &control_task_attributes);
 80035f4:	4a21      	ldr	r2, [pc, #132]	@ (800367c <MX_FREERTOS_Init+0x14c>)
 80035f6:	2100      	movs	r1, #0
 80035f8:	4821      	ldr	r0, [pc, #132]	@ (8003680 <MX_FREERTOS_Init+0x150>)
 80035fa:	f006 f817 	bl	800962c <osThreadNew>
 80035fe:	4603      	mov	r3, r0
 8003600:	4a20      	ldr	r2, [pc, #128]	@ (8003684 <MX_FREERTOS_Init+0x154>)
 8003602:	6013      	str	r3, [r2, #0]

  /* creation of imu_read_task */
  imu_read_taskHandle = osThreadNew(_imu_read_task, NULL, &imu_read_task_attributes);
 8003604:	4a20      	ldr	r2, [pc, #128]	@ (8003688 <MX_FREERTOS_Init+0x158>)
 8003606:	2100      	movs	r1, #0
 8003608:	4820      	ldr	r0, [pc, #128]	@ (800368c <MX_FREERTOS_Init+0x15c>)
 800360a:	f006 f80f 	bl	800962c <osThreadNew>
 800360e:	4603      	mov	r3, r0
 8003610:	4a1f      	ldr	r2, [pc, #124]	@ (8003690 <MX_FREERTOS_Init+0x160>)
 8003612:	6013      	str	r3, [r2, #0]

  /* creation of adc_read_task */
  adc_read_taskHandle = osThreadNew(_adc_read_task, NULL, &adc_read_task_attributes);
 8003614:	4a1f      	ldr	r2, [pc, #124]	@ (8003694 <MX_FREERTOS_Init+0x164>)
 8003616:	2100      	movs	r1, #0
 8003618:	481f      	ldr	r0, [pc, #124]	@ (8003698 <MX_FREERTOS_Init+0x168>)
 800361a:	f006 f807 	bl	800962c <osThreadNew>
 800361e:	4603      	mov	r3, r0
 8003620:	4a1e      	ldr	r2, [pc, #120]	@ (800369c <MX_FREERTOS_Init+0x16c>)
 8003622:	6013      	str	r3, [r2, #0]

  /* creation of telemetry_task */
  telemetry_taskHandle = osThreadNew(_telemetry_task, NULL, &telemetry_task_attributes);
 8003624:	4a1e      	ldr	r2, [pc, #120]	@ (80036a0 <MX_FREERTOS_Init+0x170>)
 8003626:	2100      	movs	r1, #0
 8003628:	481e      	ldr	r0, [pc, #120]	@ (80036a4 <MX_FREERTOS_Init+0x174>)
 800362a:	f005 ffff 	bl	800962c <osThreadNew>
 800362e:	4603      	mov	r3, r0
 8003630:	4a1d      	ldr	r2, [pc, #116]	@ (80036a8 <MX_FREERTOS_Init+0x178>)
 8003632:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8003634:	bf00      	nop
 8003636:	bd80      	pop	{r7, pc}
 8003638:	20000530 	.word	0x20000530
 800363c:	20000578 	.word	0x20000578
 8003640:	0800f940 	.word	0x0800f940
 8003644:	2000046c 	.word	0x2000046c
 8003648:	0800f958 	.word	0x0800f958
 800364c:	20000470 	.word	0x20000470
 8003650:	0800f970 	.word	0x0800f970
 8003654:	20000474 	.word	0x20000474
 8003658:	0800f988 	.word	0x0800f988
 800365c:	20000478 	.word	0x20000478
 8003660:	0800f814 	.word	0x0800f814
 8003664:	0800f820 	.word	0x0800f820
 8003668:	0800f82c 	.word	0x0800f82c
 800366c:	0800f838 	.word	0x0800f838
 8003670:	0800f88c 	.word	0x0800f88c
 8003674:	080036ad 	.word	0x080036ad
 8003678:	20000458 	.word	0x20000458
 800367c:	0800f8b0 	.word	0x0800f8b0
 8003680:	080036cd 	.word	0x080036cd
 8003684:	2000045c 	.word	0x2000045c
 8003688:	0800f8d4 	.word	0x0800f8d4
 800368c:	080036f1 	.word	0x080036f1
 8003690:	20000460 	.word	0x20000460
 8003694:	0800f8f8 	.word	0x0800f8f8
 8003698:	08003715 	.word	0x08003715
 800369c:	20000464 	.word	0x20000464
 80036a0:	0800f91c 	.word	0x0800f91c
 80036a4:	08003739 	.word	0x08003739
 80036a8:	20000468 	.word	0x20000468

080036ac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	idle_dummy++; // Keep incrementing the dummy variable
 80036b4:	4b04      	ldr	r3, [pc, #16]	@ (80036c8 <StartDefaultTask+0x1c>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	3301      	adds	r3, #1
 80036ba:	4a03      	ldr	r2, [pc, #12]	@ (80036c8 <StartDefaultTask+0x1c>)
 80036bc:	6013      	str	r3, [r2, #0]
    osDelay(1); // A small delay to avoid task starvation
 80036be:	2001      	movs	r0, #1
 80036c0:	f006 f846 	bl	8009750 <osDelay>
	idle_dummy++; // Keep incrementing the dummy variable
 80036c4:	bf00      	nop
 80036c6:	e7f5      	b.n	80036b4 <StartDefaultTask+0x8>
 80036c8:	20000444 	.word	0x20000444

080036cc <_control_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header__control_task */
void _control_task(void *argument)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN _control_task */
  for(;;)
  {
	control_dummy++;
 80036d4:	4b05      	ldr	r3, [pc, #20]	@ (80036ec <_control_task+0x20>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	3301      	adds	r3, #1
 80036da:	4a04      	ldr	r2, [pc, #16]	@ (80036ec <_control_task+0x20>)
 80036dc:	6013      	str	r3, [r2, #0]
    control(); // Execute control function
 80036de:	f7fd fdfd 	bl	80012dc <control>
    osDelay(CONTROL_DELAY);
 80036e2:	200a      	movs	r0, #10
 80036e4:	f006 f834 	bl	8009750 <osDelay>
	control_dummy++;
 80036e8:	bf00      	nop
 80036ea:	e7f3      	b.n	80036d4 <_control_task+0x8>
 80036ec:	20000448 	.word	0x20000448

080036f0 <_imu_read_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header__imu_read_task */
void _imu_read_task(void *argument)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN _imu_read_task */
  for(;;)
  {
	imu_dummy++;
 80036f8:	4b05      	ldr	r3, [pc, #20]	@ (8003710 <_imu_read_task+0x20>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	3301      	adds	r3, #1
 80036fe:	4a04      	ldr	r2, [pc, #16]	@ (8003710 <_imu_read_task+0x20>)
 8003700:	6013      	str	r3, [r2, #0]
    imu_read(); // Execute imu read function
 8003702:	f7fd fe17 	bl	8001334 <imu_read>
    osDelay(IMU_DELAY);
 8003706:	200a      	movs	r0, #10
 8003708:	f006 f822 	bl	8009750 <osDelay>
	imu_dummy++;
 800370c:	bf00      	nop
 800370e:	e7f3      	b.n	80036f8 <_imu_read_task+0x8>
 8003710:	20000450 	.word	0x20000450

08003714 <_adc_read_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header__adc_read_task */
void _adc_read_task(void *argument)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN _adc_read_task */
  for(;;)
  {
	adc_dummy++;
 800371c:	4b05      	ldr	r3, [pc, #20]	@ (8003734 <_adc_read_task+0x20>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	3301      	adds	r3, #1
 8003722:	4a04      	ldr	r2, [pc, #16]	@ (8003734 <_adc_read_task+0x20>)
 8003724:	6013      	str	r3, [r2, #0]
    adc_read(); // Execute ADC read function
 8003726:	f7fd fbbf 	bl	8000ea8 <adc_read>
    osDelay(ADC_DELAY);
 800372a:	200a      	movs	r0, #10
 800372c:	f006 f810 	bl	8009750 <osDelay>
	adc_dummy++;
 8003730:	bf00      	nop
 8003732:	e7f3      	b.n	800371c <_adc_read_task+0x8>
 8003734:	20000454 	.word	0x20000454

08003738 <_telemetry_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header__telemetry_task */
void _telemetry_task(void *argument)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN _telemetry_task */
  for(;;)
  {
	telemetry_dummy++;
 8003740:	4b06      	ldr	r3, [pc, #24]	@ (800375c <_telemetry_task+0x24>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	3301      	adds	r3, #1
 8003746:	4a05      	ldr	r2, [pc, #20]	@ (800375c <_telemetry_task+0x24>)
 8003748:	6013      	str	r3, [r2, #0]
    telemetry(); // Execute telemetry function
 800374a:	f7fd fe5b 	bl	8001404 <telemetry>
    osDelay(TELEMETRY_DELAY);
 800374e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003752:	f005 fffd 	bl	8009750 <osDelay>
	telemetry_dummy++;
 8003756:	bf00      	nop
 8003758:	e7f2      	b.n	8003740 <_telemetry_task+0x8>
 800375a:	bf00      	nop
 800375c:	2000044c 	.word	0x2000044c

08003760 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003766:	2300      	movs	r3, #0
 8003768:	607b      	str	r3, [r7, #4]
 800376a:	4b10      	ldr	r3, [pc, #64]	@ (80037ac <MX_GPIO_Init+0x4c>)
 800376c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800376e:	4a0f      	ldr	r2, [pc, #60]	@ (80037ac <MX_GPIO_Init+0x4c>)
 8003770:	f043 0301 	orr.w	r3, r3, #1
 8003774:	6313      	str	r3, [r2, #48]	@ 0x30
 8003776:	4b0d      	ldr	r3, [pc, #52]	@ (80037ac <MX_GPIO_Init+0x4c>)
 8003778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	607b      	str	r3, [r7, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003782:	2300      	movs	r3, #0
 8003784:	603b      	str	r3, [r7, #0]
 8003786:	4b09      	ldr	r3, [pc, #36]	@ (80037ac <MX_GPIO_Init+0x4c>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378a:	4a08      	ldr	r2, [pc, #32]	@ (80037ac <MX_GPIO_Init+0x4c>)
 800378c:	f043 0302 	orr.w	r3, r3, #2
 8003790:	6313      	str	r3, [r2, #48]	@ 0x30
 8003792:	4b06      	ldr	r3, [pc, #24]	@ (80037ac <MX_GPIO_Init+0x4c>)
 8003794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	603b      	str	r3, [r7, #0]
 800379c:	683b      	ldr	r3, [r7, #0]

}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	40023800 	.word	0x40023800

080037b0 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80037b4:	4b12      	ldr	r3, [pc, #72]	@ (8003800 <MX_I2C3_Init+0x50>)
 80037b6:	4a13      	ldr	r2, [pc, #76]	@ (8003804 <MX_I2C3_Init+0x54>)
 80037b8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80037ba:	4b11      	ldr	r3, [pc, #68]	@ (8003800 <MX_I2C3_Init+0x50>)
 80037bc:	4a12      	ldr	r2, [pc, #72]	@ (8003808 <MX_I2C3_Init+0x58>)
 80037be:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80037c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003800 <MX_I2C3_Init+0x50>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80037c6:	4b0e      	ldr	r3, [pc, #56]	@ (8003800 <MX_I2C3_Init+0x50>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80037cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003800 <MX_I2C3_Init+0x50>)
 80037ce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80037d2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80037d4:	4b0a      	ldr	r3, [pc, #40]	@ (8003800 <MX_I2C3_Init+0x50>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80037da:	4b09      	ldr	r3, [pc, #36]	@ (8003800 <MX_I2C3_Init+0x50>)
 80037dc:	2200      	movs	r2, #0
 80037de:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80037e0:	4b07      	ldr	r3, [pc, #28]	@ (8003800 <MX_I2C3_Init+0x50>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80037e6:	4b06      	ldr	r3, [pc, #24]	@ (8003800 <MX_I2C3_Init+0x50>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80037ec:	4804      	ldr	r0, [pc, #16]	@ (8003800 <MX_I2C3_Init+0x50>)
 80037ee:	f002 f959 	bl	8005aa4 <HAL_I2C_Init>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80037f8:	f000 f90a 	bl	8003a10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80037fc:	bf00      	nop
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	2000047c 	.word	0x2000047c
 8003804:	40005c00 	.word	0x40005c00
 8003808:	000186a0 	.word	0x000186a0

0800380c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b08a      	sub	sp, #40	@ 0x28
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003814:	f107 0314 	add.w	r3, r7, #20
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	605a      	str	r2, [r3, #4]
 800381e:	609a      	str	r2, [r3, #8]
 8003820:	60da      	str	r2, [r3, #12]
 8003822:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a28      	ldr	r2, [pc, #160]	@ (80038cc <HAL_I2C_MspInit+0xc0>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d14a      	bne.n	80038c4 <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800382e:	2300      	movs	r3, #0
 8003830:	613b      	str	r3, [r7, #16]
 8003832:	4b27      	ldr	r3, [pc, #156]	@ (80038d0 <HAL_I2C_MspInit+0xc4>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003836:	4a26      	ldr	r2, [pc, #152]	@ (80038d0 <HAL_I2C_MspInit+0xc4>)
 8003838:	f043 0301 	orr.w	r3, r3, #1
 800383c:	6313      	str	r3, [r2, #48]	@ 0x30
 800383e:	4b24      	ldr	r3, [pc, #144]	@ (80038d0 <HAL_I2C_MspInit+0xc4>)
 8003840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	613b      	str	r3, [r7, #16]
 8003848:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800384a:	2300      	movs	r3, #0
 800384c:	60fb      	str	r3, [r7, #12]
 800384e:	4b20      	ldr	r3, [pc, #128]	@ (80038d0 <HAL_I2C_MspInit+0xc4>)
 8003850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003852:	4a1f      	ldr	r2, [pc, #124]	@ (80038d0 <HAL_I2C_MspInit+0xc4>)
 8003854:	f043 0302 	orr.w	r3, r3, #2
 8003858:	6313      	str	r3, [r2, #48]	@ 0x30
 800385a:	4b1d      	ldr	r3, [pc, #116]	@ (80038d0 <HAL_I2C_MspInit+0xc4>)
 800385c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = IMU_CLK_Pin;
 8003866:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800386a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800386c:	2312      	movs	r3, #18
 800386e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003870:	2301      	movs	r3, #1
 8003872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003874:	2303      	movs	r3, #3
 8003876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003878:	2304      	movs	r3, #4
 800387a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(IMU_CLK_GPIO_Port, &GPIO_InitStruct);
 800387c:	f107 0314 	add.w	r3, r7, #20
 8003880:	4619      	mov	r1, r3
 8003882:	4814      	ldr	r0, [pc, #80]	@ (80038d4 <HAL_I2C_MspInit+0xc8>)
 8003884:	f001 ff8a 	bl	800579c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IMU_SDA_Pin;
 8003888:	2310      	movs	r3, #16
 800388a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800388c:	2312      	movs	r3, #18
 800388e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003890:	2301      	movs	r3, #1
 8003892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003894:	2303      	movs	r3, #3
 8003896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8003898:	2309      	movs	r3, #9
 800389a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(IMU_SDA_GPIO_Port, &GPIO_InitStruct);
 800389c:	f107 0314 	add.w	r3, r7, #20
 80038a0:	4619      	mov	r1, r3
 80038a2:	480d      	ldr	r0, [pc, #52]	@ (80038d8 <HAL_I2C_MspInit+0xcc>)
 80038a4:	f001 ff7a 	bl	800579c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80038a8:	2300      	movs	r3, #0
 80038aa:	60bb      	str	r3, [r7, #8]
 80038ac:	4b08      	ldr	r3, [pc, #32]	@ (80038d0 <HAL_I2C_MspInit+0xc4>)
 80038ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b0:	4a07      	ldr	r2, [pc, #28]	@ (80038d0 <HAL_I2C_MspInit+0xc4>)
 80038b2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80038b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80038b8:	4b05      	ldr	r3, [pc, #20]	@ (80038d0 <HAL_I2C_MspInit+0xc4>)
 80038ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038c0:	60bb      	str	r3, [r7, #8]
 80038c2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80038c4:	bf00      	nop
 80038c6:	3728      	adds	r7, #40	@ 0x28
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	40005c00 	.word	0x40005c00
 80038d0:	40023800 	.word	0x40023800
 80038d4:	40020000 	.word	0x40020000
 80038d8:	40020400 	.word	0x40020400

080038dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 80038e0:	f000 fed6 	bl	8004690 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80038e4:	f000 f818 	bl	8003918 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80038e8:	f7ff ff3a 	bl	8003760 <MX_GPIO_Init>
  MX_DMA_Init();
 80038ec:	f7ff fdd6 	bl	800349c <MX_DMA_Init>
  MX_ADC1_Init();
 80038f0:	f7fe f8d8 	bl	8001aa4 <MX_ADC1_Init>
  MX_TIM3_Init();
 80038f4:	f000 fc30 	bl	8004158 <MX_TIM3_Init>
  MX_TIM4_Init();
 80038f8:	f000 fca8 	bl	800424c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80038fc:	f000 fe2c 	bl	8004558 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 8003900:	f7ff ff56 	bl	80037b0 <MX_I2C3_Init>
  MX_TIM11_Init();
 8003904:	f000 fd1c 	bl	8004340 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003908:	f005 fe46 	bl	8009598 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800390c:	f7ff fe10 	bl	8003530 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003910:	f005 fe66 	bl	80095e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003914:	bf00      	nop
 8003916:	e7fd      	b.n	8003914 <main+0x38>

08003918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b094      	sub	sp, #80	@ 0x50
 800391c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800391e:	f107 0320 	add.w	r3, r7, #32
 8003922:	2230      	movs	r2, #48	@ 0x30
 8003924:	2100      	movs	r1, #0
 8003926:	4618      	mov	r0, r3
 8003928:	f009 fd83 	bl	800d432 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800392c:	f107 030c 	add.w	r3, r7, #12
 8003930:	2200      	movs	r2, #0
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	605a      	str	r2, [r3, #4]
 8003936:	609a      	str	r2, [r3, #8]
 8003938:	60da      	str	r2, [r3, #12]
 800393a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800393c:	2300      	movs	r3, #0
 800393e:	60bb      	str	r3, [r7, #8]
 8003940:	4b28      	ldr	r3, [pc, #160]	@ (80039e4 <SystemClock_Config+0xcc>)
 8003942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003944:	4a27      	ldr	r2, [pc, #156]	@ (80039e4 <SystemClock_Config+0xcc>)
 8003946:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800394a:	6413      	str	r3, [r2, #64]	@ 0x40
 800394c:	4b25      	ldr	r3, [pc, #148]	@ (80039e4 <SystemClock_Config+0xcc>)
 800394e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003950:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003954:	60bb      	str	r3, [r7, #8]
 8003956:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003958:	2300      	movs	r3, #0
 800395a:	607b      	str	r3, [r7, #4]
 800395c:	4b22      	ldr	r3, [pc, #136]	@ (80039e8 <SystemClock_Config+0xd0>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003964:	4a20      	ldr	r2, [pc, #128]	@ (80039e8 <SystemClock_Config+0xd0>)
 8003966:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800396a:	6013      	str	r3, [r2, #0]
 800396c:	4b1e      	ldr	r3, [pc, #120]	@ (80039e8 <SystemClock_Config+0xd0>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003974:	607b      	str	r3, [r7, #4]
 8003976:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003978:	2302      	movs	r3, #2
 800397a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800397c:	2301      	movs	r3, #1
 800397e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003980:	2310      	movs	r3, #16
 8003982:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003984:	2302      	movs	r3, #2
 8003986:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003988:	2300      	movs	r3, #0
 800398a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800398c:	2308      	movs	r3, #8
 800398e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8003990:	2354      	movs	r3, #84	@ 0x54
 8003992:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003994:	2302      	movs	r3, #2
 8003996:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003998:	2304      	movs	r3, #4
 800399a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800399c:	f107 0320 	add.w	r3, r7, #32
 80039a0:	4618      	mov	r0, r3
 80039a2:	f003 fa09 	bl	8006db8 <HAL_RCC_OscConfig>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80039ac:	f000 f830 	bl	8003a10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039b0:	230f      	movs	r3, #15
 80039b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80039b4:	2302      	movs	r3, #2
 80039b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039b8:	2300      	movs	r3, #0
 80039ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80039bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80039c2:	2300      	movs	r3, #0
 80039c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80039c6:	f107 030c 	add.w	r3, r7, #12
 80039ca:	2102      	movs	r1, #2
 80039cc:	4618      	mov	r0, r3
 80039ce:	f003 fc6b 	bl	80072a8 <HAL_RCC_ClockConfig>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80039d8:	f000 f81a 	bl	8003a10 <Error_Handler>
  }
}
 80039dc:	bf00      	nop
 80039de:	3750      	adds	r7, #80	@ 0x50
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	40023800 	.word	0x40023800
 80039e8:	40007000 	.word	0x40007000

080039ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a04      	ldr	r2, [pc, #16]	@ (8003a0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d101      	bne.n	8003a02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80039fe:	f000 fe69 	bl	80046d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003a02:	bf00      	nop
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40014400 	.word	0x40014400

08003a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a14:	b672      	cpsid	i
}
 8003a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a18:	bf00      	nop
 8003a1a:	e7fd      	b.n	8003a18 <Error_Handler+0x8>

08003a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a22:	2300      	movs	r3, #0
 8003a24:	607b      	str	r3, [r7, #4]
 8003a26:	4b12      	ldr	r3, [pc, #72]	@ (8003a70 <HAL_MspInit+0x54>)
 8003a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a2a:	4a11      	ldr	r2, [pc, #68]	@ (8003a70 <HAL_MspInit+0x54>)
 8003a2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a30:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a32:	4b0f      	ldr	r3, [pc, #60]	@ (8003a70 <HAL_MspInit+0x54>)
 8003a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a3a:	607b      	str	r3, [r7, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a3e:	2300      	movs	r3, #0
 8003a40:	603b      	str	r3, [r7, #0]
 8003a42:	4b0b      	ldr	r3, [pc, #44]	@ (8003a70 <HAL_MspInit+0x54>)
 8003a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a46:	4a0a      	ldr	r2, [pc, #40]	@ (8003a70 <HAL_MspInit+0x54>)
 8003a48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a4e:	4b08      	ldr	r3, [pc, #32]	@ (8003a70 <HAL_MspInit+0x54>)
 8003a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a56:	603b      	str	r3, [r7, #0]
 8003a58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	210f      	movs	r1, #15
 8003a5e:	f06f 0001 	mvn.w	r0, #1
 8003a62:	f001 fb01 	bl	8005068 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a66:	bf00      	nop
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	40023800 	.word	0x40023800

08003a74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b08c      	sub	sp, #48	@ 0x30
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003a80:	2300      	movs	r3, #0
 8003a82:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8003a84:	2300      	movs	r3, #0
 8003a86:	60bb      	str	r3, [r7, #8]
 8003a88:	4b2e      	ldr	r3, [pc, #184]	@ (8003b44 <HAL_InitTick+0xd0>)
 8003a8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a8c:	4a2d      	ldr	r2, [pc, #180]	@ (8003b44 <HAL_InitTick+0xd0>)
 8003a8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a92:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a94:	4b2b      	ldr	r3, [pc, #172]	@ (8003b44 <HAL_InitTick+0xd0>)
 8003a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a9c:	60bb      	str	r3, [r7, #8]
 8003a9e:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003aa0:	f107 020c 	add.w	r2, r7, #12
 8003aa4:	f107 0310 	add.w	r3, r7, #16
 8003aa8:	4611      	mov	r1, r2
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f003 fddc 	bl	8007668 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003ab0:	f003 fdc6 	bl	8007640 <HAL_RCC_GetPCLK2Freq>
 8003ab4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab8:	4a23      	ldr	r2, [pc, #140]	@ (8003b48 <HAL_InitTick+0xd4>)
 8003aba:	fba2 2303 	umull	r2, r3, r2, r3
 8003abe:	0c9b      	lsrs	r3, r3, #18
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8003ac4:	4b21      	ldr	r3, [pc, #132]	@ (8003b4c <HAL_InitTick+0xd8>)
 8003ac6:	4a22      	ldr	r2, [pc, #136]	@ (8003b50 <HAL_InitTick+0xdc>)
 8003ac8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8003aca:	4b20      	ldr	r3, [pc, #128]	@ (8003b4c <HAL_InitTick+0xd8>)
 8003acc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003ad0:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8003ad2:	4a1e      	ldr	r2, [pc, #120]	@ (8003b4c <HAL_InitTick+0xd8>)
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad6:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8003ad8:	4b1c      	ldr	r3, [pc, #112]	@ (8003b4c <HAL_InitTick+0xd8>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ade:	4b1b      	ldr	r3, [pc, #108]	@ (8003b4c <HAL_InitTick+0xd8>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ae4:	4b19      	ldr	r3, [pc, #100]	@ (8003b4c <HAL_InitTick+0xd8>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8003aea:	4818      	ldr	r0, [pc, #96]	@ (8003b4c <HAL_InitTick+0xd8>)
 8003aec:	f003 fdee 	bl	80076cc <HAL_TIM_Base_Init>
 8003af0:	4603      	mov	r3, r0
 8003af2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8003af6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d11b      	bne.n	8003b36 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8003afe:	4813      	ldr	r0, [pc, #76]	@ (8003b4c <HAL_InitTick+0xd8>)
 8003b00:	f003 fe34 	bl	800776c <HAL_TIM_Base_Start_IT>
 8003b04:	4603      	mov	r3, r0
 8003b06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8003b0a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d111      	bne.n	8003b36 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003b12:	2019      	movs	r0, #25
 8003b14:	f001 fac4 	bl	80050a0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b0f      	cmp	r3, #15
 8003b1c:	d808      	bhi.n	8003b30 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8003b1e:	2200      	movs	r2, #0
 8003b20:	6879      	ldr	r1, [r7, #4]
 8003b22:	2019      	movs	r0, #25
 8003b24:	f001 faa0 	bl	8005068 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b28:	4a0a      	ldr	r2, [pc, #40]	@ (8003b54 <HAL_InitTick+0xe0>)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	e002      	b.n	8003b36 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003b36:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3730      	adds	r7, #48	@ 0x30
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	40023800 	.word	0x40023800
 8003b48:	431bde83 	.word	0x431bde83
 8003b4c:	200004d0 	.word	0x200004d0
 8003b50:	40014400 	.word	0x40014400
 8003b54:	200000e4 	.word	0x200000e4

08003b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003b5c:	bf00      	nop
 8003b5e:	e7fd      	b.n	8003b5c <NMI_Handler+0x4>

08003b60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b64:	bf00      	nop
 8003b66:	e7fd      	b.n	8003b64 <HardFault_Handler+0x4>

08003b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b6c:	bf00      	nop
 8003b6e:	e7fd      	b.n	8003b6c <MemManage_Handler+0x4>

08003b70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b70:	b480      	push	{r7}
 8003b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b74:	bf00      	nop
 8003b76:	e7fd      	b.n	8003b74 <BusFault_Handler+0x4>

08003b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b7c:	bf00      	nop
 8003b7e:	e7fd      	b.n	8003b7c <UsageFault_Handler+0x4>

08003b80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b84:	bf00      	nop
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
	...

08003b90 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8003b94:	4802      	ldr	r0, [pc, #8]	@ (8003ba0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003b96:	f004 f8bf 	bl	8007d18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003b9a:	bf00      	nop
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	200004d0 	.word	0x200004d0

08003ba4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8003ba8:	4804      	ldr	r0, [pc, #16]	@ (8003bbc <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8003baa:	f004 f8b5 	bl	8007d18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */
  ulHighFrequencyTimerTicks++;
 8003bae:	4b04      	ldr	r3, [pc, #16]	@ (8003bc0 <TIM1_TRG_COM_TIM11_IRQHandler+0x1c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	4a02      	ldr	r2, [pc, #8]	@ (8003bc0 <TIM1_TRG_COM_TIM11_IRQHandler+0x1c>)
 8003bb6:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003bb8:	bf00      	nop
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	200005c0 	.word	0x200005c0
 8003bc0:	20000518 	.word	0x20000518

08003bc4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003bc8:	4802      	ldr	r0, [pc, #8]	@ (8003bd4 <TIM3_IRQHandler+0x10>)
 8003bca:	f004 f8a5 	bl	8007d18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003bce:	bf00      	nop
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	20000530 	.word	0x20000530

08003bd8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003bdc:	4802      	ldr	r0, [pc, #8]	@ (8003be8 <DMA2_Stream0_IRQHandler+0x10>)
 8003bde:	f001 fb73 	bl	80052c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003be2:	bf00      	nop
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	200003e4 	.word	0x200003e4

08003bec <SendRadioData>:
volatile int16_t pulseWidth_CH4 = 0;


/* Helper function to send updated data to the queue */
static void SendRadioData(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
    RadioData_t radioData;
    radioData.ch1 = pulseWidth_CH1;
 8003bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8003c28 <SendRadioData+0x3c>)
 8003bf4:	881b      	ldrh	r3, [r3, #0]
 8003bf6:	b21b      	sxth	r3, r3
 8003bf8:	803b      	strh	r3, [r7, #0]
    radioData.ch2 = pulseWidth_CH2;
 8003bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8003c2c <SendRadioData+0x40>)
 8003bfc:	881b      	ldrh	r3, [r3, #0]
 8003bfe:	b21b      	sxth	r3, r3
 8003c00:	807b      	strh	r3, [r7, #2]
    radioData.ch3 = pulseWidth_CH3;
 8003c02:	4b0b      	ldr	r3, [pc, #44]	@ (8003c30 <SendRadioData+0x44>)
 8003c04:	881b      	ldrh	r3, [r3, #0]
 8003c06:	b21b      	sxth	r3, r3
 8003c08:	80bb      	strh	r3, [r7, #4]
    radioData.ch4 = pulseWidth_CH4;
 8003c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8003c34 <SendRadioData+0x48>)
 8003c0c:	881b      	ldrh	r3, [r3, #0]
 8003c0e:	b21b      	sxth	r3, r3
 8003c10:	80fb      	strh	r3, [r7, #6]
    /* Non-blocking put into the queue */
    osMessageQueuePut(radioQueueHandle, &radioData, 0, 0);
 8003c12:	4b09      	ldr	r3, [pc, #36]	@ (8003c38 <SendRadioData+0x4c>)
 8003c14:	6818      	ldr	r0, [r3, #0]
 8003c16:	4639      	mov	r1, r7
 8003c18:	2300      	movs	r3, #0
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f005 fe26 	bl	800986c <osMessageQueuePut>
}
 8003c20:	bf00      	nop
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	2000051e 	.word	0x2000051e
 8003c2c:	20000522 	.word	0x20000522
 8003c30:	20000526 	.word	0x20000526
 8003c34:	2000052a 	.word	0x2000052a
 8003c38:	2000046c 	.word	0x2000046c

08003c3c <HAL_TIM_IC_CaptureCallback>:

/* Input capture callback handling all four channels */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a82      	ldr	r2, [pc, #520]	@ (8003e54 <HAL_TIM_IC_CaptureCallback+0x218>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	f040 819c 	bne.w	8003f88 <HAL_TIM_IC_CaptureCallback+0x34c>
    {
        if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	7f1b      	ldrb	r3, [r3, #28]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d15d      	bne.n	8003d14 <HAL_TIM_IC_CaptureCallback+0xd8>
        {
            if (ic1_rising)
 8003c58:	4b7f      	ldr	r3, [pc, #508]	@ (8003e58 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d01b      	beq.n	8003c9a <HAL_TIM_IC_CaptureCallback+0x5e>
            {
                /* Capture rising edge time for CH1 */
                ic1_rising_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8003c62:	2100      	movs	r1, #0
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f004 fb6d 	bl	8008344 <HAL_TIM_ReadCapturedValue>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	b21a      	sxth	r2, r3
 8003c6e:	4b7b      	ldr	r3, [pc, #492]	@ (8003e5c <HAL_TIM_IC_CaptureCallback+0x220>)
 8003c70:	801a      	strh	r2, [r3, #0]
                ic1_rising = 0;
 8003c72:	4b79      	ldr	r3, [pc, #484]	@ (8003e58 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	701a      	strb	r2, [r3, #0]
                /* Switch polarity to falling edge */
                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6a1a      	ldr	r2, [r3, #32]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 020a 	bic.w	r2, r2, #10
 8003c86:	621a      	str	r2, [r3, #32]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6a1a      	ldr	r2, [r3, #32]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0202 	orr.w	r2, r2, #2
 8003c96:	621a      	str	r2, [r3, #32]
                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
                SendRadioData();
            }
        }
    }
}
 8003c98:	e176      	b.n	8003f88 <HAL_TIM_IC_CaptureCallback+0x34c>
            	int16_t falling_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f004 fb51 	bl	8008344 <HAL_TIM_ReadCapturedValue>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	813b      	strh	r3, [r7, #8]
                if (falling_val >= ic1_rising_val)
 8003ca6:	4b6d      	ldr	r3, [pc, #436]	@ (8003e5c <HAL_TIM_IC_CaptureCallback+0x220>)
 8003ca8:	881b      	ldrh	r3, [r3, #0]
 8003caa:	b21b      	sxth	r3, r3
 8003cac:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	db0a      	blt.n	8003cca <HAL_TIM_IC_CaptureCallback+0x8e>
                    pulseWidth_CH1 = falling_val - ic1_rising_val;
 8003cb4:	893a      	ldrh	r2, [r7, #8]
 8003cb6:	4b69      	ldr	r3, [pc, #420]	@ (8003e5c <HAL_TIM_IC_CaptureCallback+0x220>)
 8003cb8:	881b      	ldrh	r3, [r3, #0]
 8003cba:	b21b      	sxth	r3, r3
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	b21a      	sxth	r2, r3
 8003cc4:	4b66      	ldr	r3, [pc, #408]	@ (8003e60 <HAL_TIM_IC_CaptureCallback+0x224>)
 8003cc6:	801a      	strh	r2, [r3, #0]
 8003cc8:	e010      	b.n	8003cec <HAL_TIM_IC_CaptureCallback+0xb0>
                    pulseWidth_CH1 = (htim->Init.Period - ic1_rising_val) + falling_val + 1;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	4b62      	ldr	r3, [pc, #392]	@ (8003e5c <HAL_TIM_IC_CaptureCallback+0x220>)
 8003cd2:	881b      	ldrh	r3, [r3, #0]
 8003cd4:	b21b      	sxth	r3, r3
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	893b      	ldrh	r3, [r7, #8]
 8003cde:	4413      	add	r3, r2
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	b21a      	sxth	r2, r3
 8003ce8:	4b5d      	ldr	r3, [pc, #372]	@ (8003e60 <HAL_TIM_IC_CaptureCallback+0x224>)
 8003cea:	801a      	strh	r2, [r3, #0]
                ic1_rising = 1;
 8003cec:	4b5a      	ldr	r3, [pc, #360]	@ (8003e58 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8003cee:	2201      	movs	r2, #1
 8003cf0:	701a      	strb	r2, [r3, #0]
                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6a1a      	ldr	r2, [r3, #32]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 020a 	bic.w	r2, r2, #10
 8003d00:	621a      	str	r2, [r3, #32]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	6a12      	ldr	r2, [r2, #32]
 8003d0c:	621a      	str	r2, [r3, #32]
                SendRadioData();
 8003d0e:	f7ff ff6d 	bl	8003bec <SendRadioData>
}
 8003d12:	e139      	b.n	8003f88 <HAL_TIM_IC_CaptureCallback+0x34c>
        else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	7f1b      	ldrb	r3, [r3, #28]
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d15d      	bne.n	8003dd8 <HAL_TIM_IC_CaptureCallback+0x19c>
            if (ic2_rising)
 8003d1c:	4b51      	ldr	r3, [pc, #324]	@ (8003e64 <HAL_TIM_IC_CaptureCallback+0x228>)
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d01b      	beq.n	8003d5e <HAL_TIM_IC_CaptureCallback+0x122>
                ic2_rising_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8003d26:	2104      	movs	r1, #4
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f004 fb0b 	bl	8008344 <HAL_TIM_ReadCapturedValue>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	b21a      	sxth	r2, r3
 8003d32:	4b4d      	ldr	r3, [pc, #308]	@ (8003e68 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8003d34:	801a      	strh	r2, [r3, #0]
                ic2_rising = 0;
 8003d36:	4b4b      	ldr	r3, [pc, #300]	@ (8003e64 <HAL_TIM_IC_CaptureCallback+0x228>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	701a      	strb	r2, [r3, #0]
                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6a1a      	ldr	r2, [r3, #32]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003d4a:	621a      	str	r2, [r3, #32]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6a1a      	ldr	r2, [r3, #32]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f042 0220 	orr.w	r2, r2, #32
 8003d5a:	621a      	str	r2, [r3, #32]
}
 8003d5c:	e114      	b.n	8003f88 <HAL_TIM_IC_CaptureCallback+0x34c>
            	int16_t falling_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8003d5e:	2104      	movs	r1, #4
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f004 faef 	bl	8008344 <HAL_TIM_ReadCapturedValue>
 8003d66:	4603      	mov	r3, r0
 8003d68:	817b      	strh	r3, [r7, #10]
                if (falling_val >= ic2_rising_val)
 8003d6a:	4b3f      	ldr	r3, [pc, #252]	@ (8003e68 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8003d6c:	881b      	ldrh	r3, [r3, #0]
 8003d6e:	b21b      	sxth	r3, r3
 8003d70:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	db0a      	blt.n	8003d8e <HAL_TIM_IC_CaptureCallback+0x152>
                    pulseWidth_CH2 = falling_val - ic2_rising_val;
 8003d78:	897a      	ldrh	r2, [r7, #10]
 8003d7a:	4b3b      	ldr	r3, [pc, #236]	@ (8003e68 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8003d7c:	881b      	ldrh	r3, [r3, #0]
 8003d7e:	b21b      	sxth	r3, r3
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	b21a      	sxth	r2, r3
 8003d88:	4b38      	ldr	r3, [pc, #224]	@ (8003e6c <HAL_TIM_IC_CaptureCallback+0x230>)
 8003d8a:	801a      	strh	r2, [r3, #0]
 8003d8c:	e010      	b.n	8003db0 <HAL_TIM_IC_CaptureCallback+0x174>
                    pulseWidth_CH2 = (htim->Init.Period - ic2_rising_val) + falling_val + 1;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	4b34      	ldr	r3, [pc, #208]	@ (8003e68 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8003d96:	881b      	ldrh	r3, [r3, #0]
 8003d98:	b21b      	sxth	r3, r3
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	897b      	ldrh	r3, [r7, #10]
 8003da2:	4413      	add	r3, r2
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	3301      	adds	r3, #1
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	b21a      	sxth	r2, r3
 8003dac:	4b2f      	ldr	r3, [pc, #188]	@ (8003e6c <HAL_TIM_IC_CaptureCallback+0x230>)
 8003dae:	801a      	strh	r2, [r3, #0]
                ic2_rising = 1;
 8003db0:	4b2c      	ldr	r3, [pc, #176]	@ (8003e64 <HAL_TIM_IC_CaptureCallback+0x228>)
 8003db2:	2201      	movs	r2, #1
 8003db4:	701a      	strb	r2, [r3, #0]
                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	6a1a      	ldr	r2, [r3, #32]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003dc4:	621a      	str	r2, [r3, #32]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	6a12      	ldr	r2, [r2, #32]
 8003dd0:	621a      	str	r2, [r3, #32]
                SendRadioData();
 8003dd2:	f7ff ff0b 	bl	8003bec <SendRadioData>
}
 8003dd6:	e0d7      	b.n	8003f88 <HAL_TIM_IC_CaptureCallback+0x34c>
        else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	7f1b      	ldrb	r3, [r3, #28]
 8003ddc:	2b04      	cmp	r3, #4
 8003dde:	d172      	bne.n	8003ec6 <HAL_TIM_IC_CaptureCallback+0x28a>
            if (ic3_rising)
 8003de0:	4b23      	ldr	r3, [pc, #140]	@ (8003e70 <HAL_TIM_IC_CaptureCallback+0x234>)
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d01b      	beq.n	8003e22 <HAL_TIM_IC_CaptureCallback+0x1e6>
                ic3_rising_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8003dea:	2108      	movs	r1, #8
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f004 faa9 	bl	8008344 <HAL_TIM_ReadCapturedValue>
 8003df2:	4603      	mov	r3, r0
 8003df4:	b21a      	sxth	r2, r3
 8003df6:	4b1f      	ldr	r3, [pc, #124]	@ (8003e74 <HAL_TIM_IC_CaptureCallback+0x238>)
 8003df8:	801a      	strh	r2, [r3, #0]
                ic3_rising = 0;
 8003dfa:	4b1d      	ldr	r3, [pc, #116]	@ (8003e70 <HAL_TIM_IC_CaptureCallback+0x234>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	701a      	strb	r2, [r3, #0]
                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6a1a      	ldr	r2, [r3, #32]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 8003e0e:	621a      	str	r2, [r3, #32]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6a1a      	ldr	r2, [r3, #32]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e1e:	621a      	str	r2, [r3, #32]
}
 8003e20:	e0b2      	b.n	8003f88 <HAL_TIM_IC_CaptureCallback+0x34c>
            	int16_t falling_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8003e22:	2108      	movs	r1, #8
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f004 fa8d 	bl	8008344 <HAL_TIM_ReadCapturedValue>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	81bb      	strh	r3, [r7, #12]
                if (falling_val >= ic3_rising_val)
 8003e2e:	4b11      	ldr	r3, [pc, #68]	@ (8003e74 <HAL_TIM_IC_CaptureCallback+0x238>)
 8003e30:	881b      	ldrh	r3, [r3, #0]
 8003e32:	b21b      	sxth	r3, r3
 8003e34:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	db1f      	blt.n	8003e7c <HAL_TIM_IC_CaptureCallback+0x240>
                    pulseWidth_CH3 = falling_val - ic3_rising_val;
 8003e3c:	89ba      	ldrh	r2, [r7, #12]
 8003e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e74 <HAL_TIM_IC_CaptureCallback+0x238>)
 8003e40:	881b      	ldrh	r3, [r3, #0]
 8003e42:	b21b      	sxth	r3, r3
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	b21a      	sxth	r2, r3
 8003e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8003e78 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8003e4e:	801a      	strh	r2, [r3, #0]
 8003e50:	e025      	b.n	8003e9e <HAL_TIM_IC_CaptureCallback+0x262>
 8003e52:	bf00      	nop
 8003e54:	40000400 	.word	0x40000400
 8003e58:	200000dc 	.word	0x200000dc
 8003e5c:	2000051c 	.word	0x2000051c
 8003e60:	2000051e 	.word	0x2000051e
 8003e64:	200000dd 	.word	0x200000dd
 8003e68:	20000520 	.word	0x20000520
 8003e6c:	20000522 	.word	0x20000522
 8003e70:	200000de 	.word	0x200000de
 8003e74:	20000524 	.word	0x20000524
 8003e78:	20000526 	.word	0x20000526
                    pulseWidth_CH3 = (htim->Init.Period - ic3_rising_val) + falling_val + 1;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	4b43      	ldr	r3, [pc, #268]	@ (8003f90 <HAL_TIM_IC_CaptureCallback+0x354>)
 8003e84:	881b      	ldrh	r3, [r3, #0]
 8003e86:	b21b      	sxth	r3, r3
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	89bb      	ldrh	r3, [r7, #12]
 8003e90:	4413      	add	r3, r2
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	3301      	adds	r3, #1
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	b21a      	sxth	r2, r3
 8003e9a:	4b3e      	ldr	r3, [pc, #248]	@ (8003f94 <HAL_TIM_IC_CaptureCallback+0x358>)
 8003e9c:	801a      	strh	r2, [r3, #0]
                ic3_rising = 1;
 8003e9e:	4b3e      	ldr	r3, [pc, #248]	@ (8003f98 <HAL_TIM_IC_CaptureCallback+0x35c>)
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	701a      	strb	r2, [r3, #0]
                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6a1a      	ldr	r2, [r3, #32]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 8003eb2:	621a      	str	r2, [r3, #32]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6a12      	ldr	r2, [r2, #32]
 8003ebe:	621a      	str	r2, [r3, #32]
                SendRadioData();
 8003ec0:	f7ff fe94 	bl	8003bec <SendRadioData>
}
 8003ec4:	e060      	b.n	8003f88 <HAL_TIM_IC_CaptureCallback+0x34c>
        else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	7f1b      	ldrb	r3, [r3, #28]
 8003eca:	2b08      	cmp	r3, #8
 8003ecc:	d15c      	bne.n	8003f88 <HAL_TIM_IC_CaptureCallback+0x34c>
            if (ic4_rising)
 8003ece:	4b33      	ldr	r3, [pc, #204]	@ (8003f9c <HAL_TIM_IC_CaptureCallback+0x360>)
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d01b      	beq.n	8003f10 <HAL_TIM_IC_CaptureCallback+0x2d4>
                ic4_rising_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8003ed8:	210c      	movs	r1, #12
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f004 fa32 	bl	8008344 <HAL_TIM_ReadCapturedValue>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	b21a      	sxth	r2, r3
 8003ee4:	4b2e      	ldr	r3, [pc, #184]	@ (8003fa0 <HAL_TIM_IC_CaptureCallback+0x364>)
 8003ee6:	801a      	strh	r2, [r3, #0]
                ic4_rising = 0;
 8003ee8:	4b2c      	ldr	r3, [pc, #176]	@ (8003f9c <HAL_TIM_IC_CaptureCallback+0x360>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	701a      	strb	r2, [r3, #0]
                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_FALLING);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6a1a      	ldr	r2, [r3, #32]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 8003efc:	621a      	str	r2, [r3, #32]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6a1a      	ldr	r2, [r3, #32]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f0c:	621a      	str	r2, [r3, #32]
}
 8003f0e:	e03b      	b.n	8003f88 <HAL_TIM_IC_CaptureCallback+0x34c>
            	int16_t falling_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8003f10:	210c      	movs	r1, #12
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f004 fa16 	bl	8008344 <HAL_TIM_ReadCapturedValue>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	81fb      	strh	r3, [r7, #14]
                if (falling_val >= ic4_rising_val)
 8003f1c:	4b20      	ldr	r3, [pc, #128]	@ (8003fa0 <HAL_TIM_IC_CaptureCallback+0x364>)
 8003f1e:	881b      	ldrh	r3, [r3, #0]
 8003f20:	b21b      	sxth	r3, r3
 8003f22:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	db0a      	blt.n	8003f40 <HAL_TIM_IC_CaptureCallback+0x304>
                    pulseWidth_CH4 = falling_val - ic4_rising_val;
 8003f2a:	89fa      	ldrh	r2, [r7, #14]
 8003f2c:	4b1c      	ldr	r3, [pc, #112]	@ (8003fa0 <HAL_TIM_IC_CaptureCallback+0x364>)
 8003f2e:	881b      	ldrh	r3, [r3, #0]
 8003f30:	b21b      	sxth	r3, r3
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	b21a      	sxth	r2, r3
 8003f3a:	4b1a      	ldr	r3, [pc, #104]	@ (8003fa4 <HAL_TIM_IC_CaptureCallback+0x368>)
 8003f3c:	801a      	strh	r2, [r3, #0]
 8003f3e:	e010      	b.n	8003f62 <HAL_TIM_IC_CaptureCallback+0x326>
                    pulseWidth_CH4 = (htim->Init.Period - ic4_rising_val) + falling_val + 1;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	4b16      	ldr	r3, [pc, #88]	@ (8003fa0 <HAL_TIM_IC_CaptureCallback+0x364>)
 8003f48:	881b      	ldrh	r3, [r3, #0]
 8003f4a:	b21b      	sxth	r3, r3
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	89fb      	ldrh	r3, [r7, #14]
 8003f54:	4413      	add	r3, r2
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	3301      	adds	r3, #1
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	b21a      	sxth	r2, r3
 8003f5e:	4b11      	ldr	r3, [pc, #68]	@ (8003fa4 <HAL_TIM_IC_CaptureCallback+0x368>)
 8003f60:	801a      	strh	r2, [r3, #0]
                ic4_rising = 1;
 8003f62:	4b0e      	ldr	r3, [pc, #56]	@ (8003f9c <HAL_TIM_IC_CaptureCallback+0x360>)
 8003f64:	2201      	movs	r2, #1
 8003f66:	701a      	strb	r2, [r3, #0]
                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6a1a      	ldr	r2, [r3, #32]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 8003f76:	621a      	str	r2, [r3, #32]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6a12      	ldr	r2, [r2, #32]
 8003f82:	621a      	str	r2, [r3, #32]
                SendRadioData();
 8003f84:	f7ff fe32 	bl	8003bec <SendRadioData>
}
 8003f88:	bf00      	nop
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	20000524 	.word	0x20000524
 8003f94:	20000526 	.word	0x20000526
 8003f98:	200000de 	.word	0x200000de
 8003f9c:	200000df 	.word	0x200000df
 8003fa0:	20000528 	.word	0x20000528
 8003fa4:	2000052a 	.word	0x2000052a

08003fa8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
  return 1;
 8003fac:	2301      	movs	r3, #1
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <_kill>:

int _kill(int pid, int sig)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003fc2:	f009 fadf 	bl	800d584 <__errno>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2216      	movs	r2, #22
 8003fca:	601a      	str	r2, [r3, #0]
  return -1;
 8003fcc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3708      	adds	r7, #8
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <_exit>:

void _exit (int status)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003fe0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f7ff ffe7 	bl	8003fb8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003fea:	bf00      	nop
 8003fec:	e7fd      	b.n	8003fea <_exit+0x12>

08003fee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b086      	sub	sp, #24
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	60f8      	str	r0, [r7, #12]
 8003ff6:	60b9      	str	r1, [r7, #8]
 8003ff8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	617b      	str	r3, [r7, #20]
 8003ffe:	e00a      	b.n	8004016 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004000:	f3af 8000 	nop.w
 8004004:	4601      	mov	r1, r0
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	1c5a      	adds	r2, r3, #1
 800400a:	60ba      	str	r2, [r7, #8]
 800400c:	b2ca      	uxtb	r2, r1
 800400e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	3301      	adds	r3, #1
 8004014:	617b      	str	r3, [r7, #20]
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	429a      	cmp	r2, r3
 800401c:	dbf0      	blt.n	8004000 <_read+0x12>
  }

  return len;
 800401e:	687b      	ldr	r3, [r7, #4]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3718      	adds	r7, #24
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004034:	2300      	movs	r3, #0
 8004036:	617b      	str	r3, [r7, #20]
 8004038:	e009      	b.n	800404e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	1c5a      	adds	r2, r3, #1
 800403e:	60ba      	str	r2, [r7, #8]
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	4618      	mov	r0, r3
 8004044:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	3301      	adds	r3, #1
 800404c:	617b      	str	r3, [r7, #20]
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	429a      	cmp	r2, r3
 8004054:	dbf1      	blt.n	800403a <_write+0x12>
  }
  return len;
 8004056:	687b      	ldr	r3, [r7, #4]
}
 8004058:	4618      	mov	r0, r3
 800405a:	3718      	adds	r7, #24
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <_close>:

int _close(int file)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004068:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800406c:	4618      	mov	r0, r3
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004088:	605a      	str	r2, [r3, #4]
  return 0;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <_isatty>:

int _isatty(int file)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80040a0:	2301      	movs	r3, #1
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b085      	sub	sp, #20
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	60f8      	str	r0, [r7, #12]
 80040b6:	60b9      	str	r1, [r7, #8]
 80040b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3714      	adds	r7, #20
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80040d0:	4a14      	ldr	r2, [pc, #80]	@ (8004124 <_sbrk+0x5c>)
 80040d2:	4b15      	ldr	r3, [pc, #84]	@ (8004128 <_sbrk+0x60>)
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80040dc:	4b13      	ldr	r3, [pc, #76]	@ (800412c <_sbrk+0x64>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d102      	bne.n	80040ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80040e4:	4b11      	ldr	r3, [pc, #68]	@ (800412c <_sbrk+0x64>)
 80040e6:	4a12      	ldr	r2, [pc, #72]	@ (8004130 <_sbrk+0x68>)
 80040e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040ea:	4b10      	ldr	r3, [pc, #64]	@ (800412c <_sbrk+0x64>)
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4413      	add	r3, r2
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d207      	bcs.n	8004108 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80040f8:	f009 fa44 	bl	800d584 <__errno>
 80040fc:	4603      	mov	r3, r0
 80040fe:	220c      	movs	r2, #12
 8004100:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004102:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004106:	e009      	b.n	800411c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004108:	4b08      	ldr	r3, [pc, #32]	@ (800412c <_sbrk+0x64>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800410e:	4b07      	ldr	r3, [pc, #28]	@ (800412c <_sbrk+0x64>)
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4413      	add	r3, r2
 8004116:	4a05      	ldr	r2, [pc, #20]	@ (800412c <_sbrk+0x64>)
 8004118:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800411a:	68fb      	ldr	r3, [r7, #12]
}
 800411c:	4618      	mov	r0, r3
 800411e:	3718      	adds	r7, #24
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	20010000 	.word	0x20010000
 8004128:	00000400 	.word	0x00000400
 800412c:	2000052c 	.word	0x2000052c
 8004130:	200051f0 	.word	0x200051f0

08004134 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004138:	4b06      	ldr	r3, [pc, #24]	@ (8004154 <SystemInit+0x20>)
 800413a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800413e:	4a05      	ldr	r2, [pc, #20]	@ (8004154 <SystemInit+0x20>)
 8004140:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004144:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004148:	bf00      	nop
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	e000ed00 	.word	0xe000ed00

08004158 <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b08c      	sub	sp, #48	@ 0x30
 800415c:	af00      	add	r7, sp, #0
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800415e:	f107 031c 	add.w	r3, r7, #28
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	605a      	str	r2, [r3, #4]
 8004168:	609a      	str	r2, [r3, #8]
 800416a:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 800416c:	f107 0314 	add.w	r3, r7, #20
 8004170:	2200      	movs	r2, #0
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	605a      	str	r2, [r3, #4]
    TIM_IC_InitTypeDef sConfigIC = {0};
 8004176:	1d3b      	adds	r3, r7, #4
 8004178:	2200      	movs	r2, #0
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	605a      	str	r2, [r3, #4]
 800417e:	609a      	str	r2, [r3, #8]
 8004180:	60da      	str	r2, [r3, #12]

    htim3.Instance = TIM3;
 8004182:	4b30      	ldr	r3, [pc, #192]	@ (8004244 <MX_TIM3_Init+0xec>)
 8004184:	4a30      	ldr	r2, [pc, #192]	@ (8004248 <MX_TIM3_Init+0xf0>)
 8004186:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 84 - 1; // Adjust for 1 MHz timer tick (assuming 84 MHz clock)
 8004188:	4b2e      	ldr	r3, [pc, #184]	@ (8004244 <MX_TIM3_Init+0xec>)
 800418a:	2253      	movs	r2, #83	@ 0x53
 800418c:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800418e:	4b2d      	ldr	r3, [pc, #180]	@ (8004244 <MX_TIM3_Init+0xec>)
 8004190:	2200      	movs	r2, #0
 8004192:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 0xFFFF;
 8004194:	4b2b      	ldr	r3, [pc, #172]	@ (8004244 <MX_TIM3_Init+0xec>)
 8004196:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800419a:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800419c:	4b29      	ldr	r3, [pc, #164]	@ (8004244 <MX_TIM3_Init+0xec>)
 800419e:	2200      	movs	r2, #0
 80041a0:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041a2:	4b28      	ldr	r3, [pc, #160]	@ (8004244 <MX_TIM3_Init+0xec>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	619a      	str	r2, [r3, #24]

    if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80041a8:	4826      	ldr	r0, [pc, #152]	@ (8004244 <MX_TIM3_Init+0xec>)
 80041aa:	f003 fa8f 	bl	80076cc <HAL_TIM_Base_Init>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <MX_TIM3_Init+0x60>
    {
        Error_Handler();
 80041b4:	f7ff fc2c 	bl	8003a10 <Error_Handler>
    }

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80041bc:	61fb      	str	r3, [r7, #28]
    if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80041be:	f107 031c 	add.w	r3, r7, #28
 80041c2:	4619      	mov	r1, r3
 80041c4:	481f      	ldr	r0, [pc, #124]	@ (8004244 <MX_TIM3_Init+0xec>)
 80041c6:	f003 fff5 	bl	80081b4 <HAL_TIM_ConfigClockSource>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d001      	beq.n	80041d4 <MX_TIM3_Init+0x7c>
    {
        Error_Handler();
 80041d0:	f7ff fc1e 	bl	8003a10 <Error_Handler>
    }

    if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80041d4:	481b      	ldr	r0, [pc, #108]	@ (8004244 <MX_TIM3_Init+0xec>)
 80041d6:	f003 fc2b 	bl	8007a30 <HAL_TIM_IC_Init>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <MX_TIM3_Init+0x8c>
    {
        Error_Handler();
 80041e0:	f7ff fc16 	bl	8003a10 <Error_Handler>
    }

    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041e4:	2300      	movs	r3, #0
 80041e6:	617b      	str	r3, [r7, #20]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041e8:	2300      	movs	r3, #0
 80041ea:	61bb      	str	r3, [r7, #24]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80041ec:	f107 0314 	add.w	r3, r7, #20
 80041f0:	4619      	mov	r1, r3
 80041f2:	4814      	ldr	r0, [pc, #80]	@ (8004244 <MX_TIM3_Init+0xec>)
 80041f4:	f004 fcfe 	bl	8008bf4 <HAL_TIMEx_MasterConfigSynchronization>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <MX_TIM3_Init+0xaa>
    {
        Error_Handler();
 80041fe:	f7ff fc07 	bl	8003a10 <Error_Handler>
    }

    sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8004202:	230a      	movs	r3, #10
 8004204:	607b      	str	r3, [r7, #4]
    sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004206:	2301      	movs	r3, #1
 8004208:	60bb      	str	r3, [r7, #8]
    sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800420a:	2300      	movs	r3, #0
 800420c:	60fb      	str	r3, [r7, #12]
    sConfigIC.ICFilter = 0;
 800420e:	2300      	movs	r3, #0
 8004210:	613b      	str	r3, [r7, #16]

    for (int ch = TIM_CHANNEL_1; ch <= TIM_CHANNEL_4; ch += 4)
 8004212:	2300      	movs	r3, #0
 8004214:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004216:	e00d      	b.n	8004234 <MX_TIM3_Init+0xdc>
    {
        if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, ch) != HAL_OK)
 8004218:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800421a:	1d3b      	adds	r3, r7, #4
 800421c:	4619      	mov	r1, r3
 800421e:	4809      	ldr	r0, [pc, #36]	@ (8004244 <MX_TIM3_Init+0xec>)
 8004220:	f003 fe6a 	bl	8007ef8 <HAL_TIM_IC_ConfigChannel>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <MX_TIM3_Init+0xd6>
        {
            Error_Handler();
 800422a:	f7ff fbf1 	bl	8003a10 <Error_Handler>
    for (int ch = TIM_CHANNEL_1; ch <= TIM_CHANNEL_4; ch += 4)
 800422e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004230:	3304      	adds	r3, #4
 8004232:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004236:	2b0c      	cmp	r3, #12
 8004238:	d9ee      	bls.n	8004218 <MX_TIM3_Init+0xc0>
        }
    }


}
 800423a:	bf00      	nop
 800423c:	bf00      	nop
 800423e:	3730      	adds	r7, #48	@ 0x30
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	20000530 	.word	0x20000530
 8004248:	40000400 	.word	0x40000400

0800424c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b08a      	sub	sp, #40	@ 0x28
 8004250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004252:	f107 0320 	add.w	r3, r7, #32
 8004256:	2200      	movs	r2, #0
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800425c:	1d3b      	adds	r3, r7, #4
 800425e:	2200      	movs	r2, #0
 8004260:	601a      	str	r2, [r3, #0]
 8004262:	605a      	str	r2, [r3, #4]
 8004264:	609a      	str	r2, [r3, #8]
 8004266:	60da      	str	r2, [r3, #12]
 8004268:	611a      	str	r2, [r3, #16]
 800426a:	615a      	str	r2, [r3, #20]
 800426c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800426e:	4b32      	ldr	r3, [pc, #200]	@ (8004338 <MX_TIM4_Init+0xec>)
 8004270:	4a32      	ldr	r2, [pc, #200]	@ (800433c <MX_TIM4_Init+0xf0>)
 8004272:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 27;
 8004274:	4b30      	ldr	r3, [pc, #192]	@ (8004338 <MX_TIM4_Init+0xec>)
 8004276:	221b      	movs	r2, #27
 8004278:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800427a:	4b2f      	ldr	r3, [pc, #188]	@ (8004338 <MX_TIM4_Init+0xec>)
 800427c:	2200      	movs	r2, #0
 800427e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 8004280:	4b2d      	ldr	r3, [pc, #180]	@ (8004338 <MX_TIM4_Init+0xec>)
 8004282:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8004286:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004288:	4b2b      	ldr	r3, [pc, #172]	@ (8004338 <MX_TIM4_Init+0xec>)
 800428a:	2200      	movs	r2, #0
 800428c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800428e:	4b2a      	ldr	r3, [pc, #168]	@ (8004338 <MX_TIM4_Init+0xec>)
 8004290:	2280      	movs	r2, #128	@ 0x80
 8004292:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004294:	4828      	ldr	r0, [pc, #160]	@ (8004338 <MX_TIM4_Init+0xec>)
 8004296:	f003 facb 	bl	8007830 <HAL_TIM_PWM_Init>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d001      	beq.n	80042a4 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80042a0:	f7ff fbb6 	bl	8003a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042a4:	2300      	movs	r3, #0
 80042a6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042a8:	2300      	movs	r3, #0
 80042aa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80042ac:	f107 0320 	add.w	r3, r7, #32
 80042b0:	4619      	mov	r1, r3
 80042b2:	4821      	ldr	r0, [pc, #132]	@ (8004338 <MX_TIM4_Init+0xec>)
 80042b4:	f004 fc9e 	bl	8008bf4 <HAL_TIMEx_MasterConfigSynchronization>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80042be:	f7ff fba7 	bl	8003a10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80042c2:	2360      	movs	r3, #96	@ 0x60
 80042c4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80042c6:	2300      	movs	r3, #0
 80042c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80042ca:	2300      	movs	r3, #0
 80042cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80042ce:	2300      	movs	r3, #0
 80042d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80042d2:	1d3b      	adds	r3, r7, #4
 80042d4:	2200      	movs	r2, #0
 80042d6:	4619      	mov	r1, r3
 80042d8:	4817      	ldr	r0, [pc, #92]	@ (8004338 <MX_TIM4_Init+0xec>)
 80042da:	f003 fea9 	bl	8008030 <HAL_TIM_PWM_ConfigChannel>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d001      	beq.n	80042e8 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80042e4:	f7ff fb94 	bl	8003a10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80042e8:	1d3b      	adds	r3, r7, #4
 80042ea:	2204      	movs	r2, #4
 80042ec:	4619      	mov	r1, r3
 80042ee:	4812      	ldr	r0, [pc, #72]	@ (8004338 <MX_TIM4_Init+0xec>)
 80042f0:	f003 fe9e 	bl	8008030 <HAL_TIM_PWM_ConfigChannel>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80042fa:	f7ff fb89 	bl	8003a10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80042fe:	1d3b      	adds	r3, r7, #4
 8004300:	2208      	movs	r2, #8
 8004302:	4619      	mov	r1, r3
 8004304:	480c      	ldr	r0, [pc, #48]	@ (8004338 <MX_TIM4_Init+0xec>)
 8004306:	f003 fe93 	bl	8008030 <HAL_TIM_PWM_ConfigChannel>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d001      	beq.n	8004314 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8004310:	f7ff fb7e 	bl	8003a10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004314:	1d3b      	adds	r3, r7, #4
 8004316:	220c      	movs	r2, #12
 8004318:	4619      	mov	r1, r3
 800431a:	4807      	ldr	r0, [pc, #28]	@ (8004338 <MX_TIM4_Init+0xec>)
 800431c:	f003 fe88 	bl	8008030 <HAL_TIM_PWM_ConfigChannel>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8004326:	f7ff fb73 	bl	8003a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800432a:	4803      	ldr	r0, [pc, #12]	@ (8004338 <MX_TIM4_Init+0xec>)
 800432c:	f000 f8da 	bl	80044e4 <HAL_TIM_MspPostInit>

}
 8004330:	bf00      	nop
 8004332:	3728      	adds	r7, #40	@ 0x28
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	20000578 	.word	0x20000578
 800433c:	40000800 	.word	0x40000800

08004340 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8004344:	4b0d      	ldr	r3, [pc, #52]	@ (800437c <MX_TIM11_Init+0x3c>)
 8004346:	4a0e      	ldr	r2, [pc, #56]	@ (8004380 <MX_TIM11_Init+0x40>)
 8004348:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 84;
 800434a:	4b0c      	ldr	r3, [pc, #48]	@ (800437c <MX_TIM11_Init+0x3c>)
 800434c:	2254      	movs	r2, #84	@ 0x54
 800434e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004350:	4b0a      	ldr	r3, [pc, #40]	@ (800437c <MX_TIM11_Init+0x3c>)
 8004352:	2200      	movs	r2, #0
 8004354:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 99;
 8004356:	4b09      	ldr	r3, [pc, #36]	@ (800437c <MX_TIM11_Init+0x3c>)
 8004358:	2263      	movs	r2, #99	@ 0x63
 800435a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800435c:	4b07      	ldr	r3, [pc, #28]	@ (800437c <MX_TIM11_Init+0x3c>)
 800435e:	2200      	movs	r2, #0
 8004360:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004362:	4b06      	ldr	r3, [pc, #24]	@ (800437c <MX_TIM11_Init+0x3c>)
 8004364:	2280      	movs	r2, #128	@ 0x80
 8004366:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004368:	4804      	ldr	r0, [pc, #16]	@ (800437c <MX_TIM11_Init+0x3c>)
 800436a:	f003 f9af 	bl	80076cc <HAL_TIM_Base_Init>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <MX_TIM11_Init+0x38>
  {
    Error_Handler();
 8004374:	f7ff fb4c 	bl	8003a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8004378:	bf00      	nop
 800437a:	bd80      	pop	{r7, pc}
 800437c:	200005c0 	.word	0x200005c0
 8004380:	40014800 	.word	0x40014800

08004384 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b08c      	sub	sp, #48	@ 0x30
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800438c:	f107 031c 	add.w	r3, r7, #28
 8004390:	2200      	movs	r2, #0
 8004392:	601a      	str	r2, [r3, #0]
 8004394:	605a      	str	r2, [r3, #4]
 8004396:	609a      	str	r2, [r3, #8]
 8004398:	60da      	str	r2, [r3, #12]
 800439a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a3a      	ldr	r2, [pc, #232]	@ (800448c <HAL_TIM_Base_MspInit+0x108>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d152      	bne.n	800444c <HAL_TIM_Base_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80043a6:	2300      	movs	r3, #0
 80043a8:	61bb      	str	r3, [r7, #24]
 80043aa:	4b39      	ldr	r3, [pc, #228]	@ (8004490 <HAL_TIM_Base_MspInit+0x10c>)
 80043ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ae:	4a38      	ldr	r2, [pc, #224]	@ (8004490 <HAL_TIM_Base_MspInit+0x10c>)
 80043b0:	f043 0302 	orr.w	r3, r3, #2
 80043b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80043b6:	4b36      	ldr	r3, [pc, #216]	@ (8004490 <HAL_TIM_Base_MspInit+0x10c>)
 80043b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	61bb      	str	r3, [r7, #24]
 80043c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043c2:	2300      	movs	r3, #0
 80043c4:	617b      	str	r3, [r7, #20]
 80043c6:	4b32      	ldr	r3, [pc, #200]	@ (8004490 <HAL_TIM_Base_MspInit+0x10c>)
 80043c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ca:	4a31      	ldr	r2, [pc, #196]	@ (8004490 <HAL_TIM_Base_MspInit+0x10c>)
 80043cc:	f043 0301 	orr.w	r3, r3, #1
 80043d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80043d2:	4b2f      	ldr	r3, [pc, #188]	@ (8004490 <HAL_TIM_Base_MspInit+0x10c>)
 80043d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	617b      	str	r3, [r7, #20]
 80043dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043de:	2300      	movs	r3, #0
 80043e0:	613b      	str	r3, [r7, #16]
 80043e2:	4b2b      	ldr	r3, [pc, #172]	@ (8004490 <HAL_TIM_Base_MspInit+0x10c>)
 80043e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e6:	4a2a      	ldr	r2, [pc, #168]	@ (8004490 <HAL_TIM_Base_MspInit+0x10c>)
 80043e8:	f043 0302 	orr.w	r3, r3, #2
 80043ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80043ee:	4b28      	ldr	r3, [pc, #160]	@ (8004490 <HAL_TIM_Base_MspInit+0x10c>)
 80043f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	613b      	str	r3, [r7, #16]
 80043f8:	693b      	ldr	r3, [r7, #16]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin;
 80043fa:	23c0      	movs	r3, #192	@ 0xc0
 80043fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043fe:	2302      	movs	r3, #2
 8004400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004402:	2300      	movs	r3, #0
 8004404:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004406:	2300      	movs	r3, #0
 8004408:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800440a:	2302      	movs	r3, #2
 800440c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800440e:	f107 031c 	add.w	r3, r7, #28
 8004412:	4619      	mov	r1, r3
 8004414:	481f      	ldr	r0, [pc, #124]	@ (8004494 <HAL_TIM_Base_MspInit+0x110>)
 8004416:	f001 f9c1 	bl	800579c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IN3_Pin|IN4_Pin;
 800441a:	2303      	movs	r3, #3
 800441c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800441e:	2302      	movs	r3, #2
 8004420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004422:	2300      	movs	r3, #0
 8004424:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004426:	2300      	movs	r3, #0
 8004428:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800442a:	2302      	movs	r3, #2
 800442c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800442e:	f107 031c 	add.w	r3, r7, #28
 8004432:	4619      	mov	r1, r3
 8004434:	4818      	ldr	r0, [pc, #96]	@ (8004498 <HAL_TIM_Base_MspInit+0x114>)
 8004436:	f001 f9b1 	bl	800579c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800443a:	2200      	movs	r2, #0
 800443c:	2105      	movs	r1, #5
 800443e:	201d      	movs	r0, #29
 8004440:	f000 fe12 	bl	8005068 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004444:	201d      	movs	r0, #29
 8004446:	f000 fe2b 	bl	80050a0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800444a:	e01a      	b.n	8004482 <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM11)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a12      	ldr	r2, [pc, #72]	@ (800449c <HAL_TIM_Base_MspInit+0x118>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d115      	bne.n	8004482 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004456:	2300      	movs	r3, #0
 8004458:	60fb      	str	r3, [r7, #12]
 800445a:	4b0d      	ldr	r3, [pc, #52]	@ (8004490 <HAL_TIM_Base_MspInit+0x10c>)
 800445c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445e:	4a0c      	ldr	r2, [pc, #48]	@ (8004490 <HAL_TIM_Base_MspInit+0x10c>)
 8004460:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004464:	6453      	str	r3, [r2, #68]	@ 0x44
 8004466:	4b0a      	ldr	r3, [pc, #40]	@ (8004490 <HAL_TIM_Base_MspInit+0x10c>)
 8004468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800446a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8004472:	2200      	movs	r2, #0
 8004474:	2105      	movs	r1, #5
 8004476:	201a      	movs	r0, #26
 8004478:	f000 fdf6 	bl	8005068 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800447c:	201a      	movs	r0, #26
 800447e:	f000 fe0f 	bl	80050a0 <HAL_NVIC_EnableIRQ>
}
 8004482:	bf00      	nop
 8004484:	3730      	adds	r7, #48	@ 0x30
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	40000400 	.word	0x40000400
 8004490:	40023800 	.word	0x40023800
 8004494:	40020000 	.word	0x40020000
 8004498:	40020400 	.word	0x40020400
 800449c:	40014800 	.word	0x40014800

080044a0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a0b      	ldr	r2, [pc, #44]	@ (80044dc <HAL_TIM_PWM_MspInit+0x3c>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d10d      	bne.n	80044ce <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80044b2:	2300      	movs	r3, #0
 80044b4:	60fb      	str	r3, [r7, #12]
 80044b6:	4b0a      	ldr	r3, [pc, #40]	@ (80044e0 <HAL_TIM_PWM_MspInit+0x40>)
 80044b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ba:	4a09      	ldr	r2, [pc, #36]	@ (80044e0 <HAL_TIM_PWM_MspInit+0x40>)
 80044bc:	f043 0304 	orr.w	r3, r3, #4
 80044c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80044c2:	4b07      	ldr	r3, [pc, #28]	@ (80044e0 <HAL_TIM_PWM_MspInit+0x40>)
 80044c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c6:	f003 0304 	and.w	r3, r3, #4
 80044ca:	60fb      	str	r3, [r7, #12]
 80044cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80044ce:	bf00      	nop
 80044d0:	3714      	adds	r7, #20
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	40000800 	.word	0x40000800
 80044e0:	40023800 	.word	0x40023800

080044e4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b088      	sub	sp, #32
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044ec:	f107 030c 	add.w	r3, r7, #12
 80044f0:	2200      	movs	r2, #0
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	605a      	str	r2, [r3, #4]
 80044f6:	609a      	str	r2, [r3, #8]
 80044f8:	60da      	str	r2, [r3, #12]
 80044fa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a12      	ldr	r2, [pc, #72]	@ (800454c <HAL_TIM_MspPostInit+0x68>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d11e      	bne.n	8004544 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004506:	2300      	movs	r3, #0
 8004508:	60bb      	str	r3, [r7, #8]
 800450a:	4b11      	ldr	r3, [pc, #68]	@ (8004550 <HAL_TIM_MspPostInit+0x6c>)
 800450c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450e:	4a10      	ldr	r2, [pc, #64]	@ (8004550 <HAL_TIM_MspPostInit+0x6c>)
 8004510:	f043 0302 	orr.w	r3, r3, #2
 8004514:	6313      	str	r3, [r2, #48]	@ 0x30
 8004516:	4b0e      	ldr	r3, [pc, #56]	@ (8004550 <HAL_TIM_MspPostInit+0x6c>)
 8004518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	60bb      	str	r3, [r7, #8]
 8004520:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = OUT1_Pin|OUT2_Pin|OUT3_Pin|OUT4_Pin;
 8004522:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8004526:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004528:	2302      	movs	r3, #2
 800452a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800452c:	2300      	movs	r3, #0
 800452e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004530:	2303      	movs	r3, #3
 8004532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004534:	2302      	movs	r3, #2
 8004536:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004538:	f107 030c 	add.w	r3, r7, #12
 800453c:	4619      	mov	r1, r3
 800453e:	4805      	ldr	r0, [pc, #20]	@ (8004554 <HAL_TIM_MspPostInit+0x70>)
 8004540:	f001 f92c 	bl	800579c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004544:	bf00      	nop
 8004546:	3720      	adds	r7, #32
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	40000800 	.word	0x40000800
 8004550:	40023800 	.word	0x40023800
 8004554:	40020400 	.word	0x40020400

08004558 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800455c:	4b11      	ldr	r3, [pc, #68]	@ (80045a4 <MX_USART1_UART_Init+0x4c>)
 800455e:	4a12      	ldr	r2, [pc, #72]	@ (80045a8 <MX_USART1_UART_Init+0x50>)
 8004560:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004562:	4b10      	ldr	r3, [pc, #64]	@ (80045a4 <MX_USART1_UART_Init+0x4c>)
 8004564:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004568:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800456a:	4b0e      	ldr	r3, [pc, #56]	@ (80045a4 <MX_USART1_UART_Init+0x4c>)
 800456c:	2200      	movs	r2, #0
 800456e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004570:	4b0c      	ldr	r3, [pc, #48]	@ (80045a4 <MX_USART1_UART_Init+0x4c>)
 8004572:	2200      	movs	r2, #0
 8004574:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004576:	4b0b      	ldr	r3, [pc, #44]	@ (80045a4 <MX_USART1_UART_Init+0x4c>)
 8004578:	2200      	movs	r2, #0
 800457a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800457c:	4b09      	ldr	r3, [pc, #36]	@ (80045a4 <MX_USART1_UART_Init+0x4c>)
 800457e:	220c      	movs	r2, #12
 8004580:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004582:	4b08      	ldr	r3, [pc, #32]	@ (80045a4 <MX_USART1_UART_Init+0x4c>)
 8004584:	2200      	movs	r2, #0
 8004586:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004588:	4b06      	ldr	r3, [pc, #24]	@ (80045a4 <MX_USART1_UART_Init+0x4c>)
 800458a:	2200      	movs	r2, #0
 800458c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800458e:	4805      	ldr	r0, [pc, #20]	@ (80045a4 <MX_USART1_UART_Init+0x4c>)
 8004590:	f004 fbb2 	bl	8008cf8 <HAL_UART_Init>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800459a:	f7ff fa39 	bl	8003a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800459e:	bf00      	nop
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	20000608 	.word	0x20000608
 80045a8:	40011000 	.word	0x40011000

080045ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b08a      	sub	sp, #40	@ 0x28
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045b4:	f107 0314 	add.w	r3, r7, #20
 80045b8:	2200      	movs	r2, #0
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	605a      	str	r2, [r3, #4]
 80045be:	609a      	str	r2, [r3, #8]
 80045c0:	60da      	str	r2, [r3, #12]
 80045c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a19      	ldr	r2, [pc, #100]	@ (8004630 <HAL_UART_MspInit+0x84>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d12c      	bne.n	8004628 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80045ce:	2300      	movs	r3, #0
 80045d0:	613b      	str	r3, [r7, #16]
 80045d2:	4b18      	ldr	r3, [pc, #96]	@ (8004634 <HAL_UART_MspInit+0x88>)
 80045d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045d6:	4a17      	ldr	r2, [pc, #92]	@ (8004634 <HAL_UART_MspInit+0x88>)
 80045d8:	f043 0310 	orr.w	r3, r3, #16
 80045dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80045de:	4b15      	ldr	r3, [pc, #84]	@ (8004634 <HAL_UART_MspInit+0x88>)
 80045e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045e2:	f003 0310 	and.w	r3, r3, #16
 80045e6:	613b      	str	r3, [r7, #16]
 80045e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045ea:	2300      	movs	r3, #0
 80045ec:	60fb      	str	r3, [r7, #12]
 80045ee:	4b11      	ldr	r3, [pc, #68]	@ (8004634 <HAL_UART_MspInit+0x88>)
 80045f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f2:	4a10      	ldr	r2, [pc, #64]	@ (8004634 <HAL_UART_MspInit+0x88>)
 80045f4:	f043 0301 	orr.w	r3, r3, #1
 80045f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80045fa:	4b0e      	ldr	r3, [pc, #56]	@ (8004634 <HAL_UART_MspInit+0x88>)
 80045fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	60fb      	str	r3, [r7, #12]
 8004604:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TEL_TX_Pin|TEL_RX_Pin;
 8004606:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800460a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800460c:	2302      	movs	r3, #2
 800460e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004610:	2300      	movs	r3, #0
 8004612:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004614:	2303      	movs	r3, #3
 8004616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004618:	2307      	movs	r3, #7
 800461a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800461c:	f107 0314 	add.w	r3, r7, #20
 8004620:	4619      	mov	r1, r3
 8004622:	4805      	ldr	r0, [pc, #20]	@ (8004638 <HAL_UART_MspInit+0x8c>)
 8004624:	f001 f8ba 	bl	800579c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004628:	bf00      	nop
 800462a:	3728      	adds	r7, #40	@ 0x28
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	40011000 	.word	0x40011000
 8004634:	40023800 	.word	0x40023800
 8004638:	40020000 	.word	0x40020000

0800463c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800463c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004674 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004640:	f7ff fd78 	bl	8004134 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004644:	480c      	ldr	r0, [pc, #48]	@ (8004678 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004646:	490d      	ldr	r1, [pc, #52]	@ (800467c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004648:	4a0d      	ldr	r2, [pc, #52]	@ (8004680 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800464a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800464c:	e002      	b.n	8004654 <LoopCopyDataInit>

0800464e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800464e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004652:	3304      	adds	r3, #4

08004654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004658:	d3f9      	bcc.n	800464e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800465a:	4a0a      	ldr	r2, [pc, #40]	@ (8004684 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800465c:	4c0a      	ldr	r4, [pc, #40]	@ (8004688 <LoopFillZerobss+0x22>)
  movs r3, #0
 800465e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004660:	e001      	b.n	8004666 <LoopFillZerobss>

08004662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004664:	3204      	adds	r2, #4

08004666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004668:	d3fb      	bcc.n	8004662 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800466a:	f008 ff91 	bl	800d590 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800466e:	f7ff f935 	bl	80038dc <main>
  bx  lr    
 8004672:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004674:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800467c:	200002b8 	.word	0x200002b8
  ldr r2, =_sidata
 8004680:	0800fd40 	.word	0x0800fd40
  ldr r2, =_sbss
 8004684:	200002b8 	.word	0x200002b8
  ldr r4, =_ebss
 8004688:	200051ec 	.word	0x200051ec

0800468c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800468c:	e7fe      	b.n	800468c <ADC_IRQHandler>
	...

08004690 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004694:	4b0e      	ldr	r3, [pc, #56]	@ (80046d0 <HAL_Init+0x40>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a0d      	ldr	r2, [pc, #52]	@ (80046d0 <HAL_Init+0x40>)
 800469a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800469e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80046a0:	4b0b      	ldr	r3, [pc, #44]	@ (80046d0 <HAL_Init+0x40>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a0a      	ldr	r2, [pc, #40]	@ (80046d0 <HAL_Init+0x40>)
 80046a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80046aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046ac:	4b08      	ldr	r3, [pc, #32]	@ (80046d0 <HAL_Init+0x40>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a07      	ldr	r2, [pc, #28]	@ (80046d0 <HAL_Init+0x40>)
 80046b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046b8:	2003      	movs	r0, #3
 80046ba:	f000 fcca 	bl	8005052 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80046be:	200f      	movs	r0, #15
 80046c0:	f7ff f9d8 	bl	8003a74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80046c4:	f7ff f9aa 	bl	8003a1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	40023c00 	.word	0x40023c00

080046d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046d4:	b480      	push	{r7}
 80046d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046d8:	4b06      	ldr	r3, [pc, #24]	@ (80046f4 <HAL_IncTick+0x20>)
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	461a      	mov	r2, r3
 80046de:	4b06      	ldr	r3, [pc, #24]	@ (80046f8 <HAL_IncTick+0x24>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4413      	add	r3, r2
 80046e4:	4a04      	ldr	r2, [pc, #16]	@ (80046f8 <HAL_IncTick+0x24>)
 80046e6:	6013      	str	r3, [r2, #0]
}
 80046e8:	bf00      	nop
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	200000e8 	.word	0x200000e8
 80046f8:	20000650 	.word	0x20000650

080046fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046fc:	b480      	push	{r7}
 80046fe:	af00      	add	r7, sp, #0
  return uwTick;
 8004700:	4b03      	ldr	r3, [pc, #12]	@ (8004710 <HAL_GetTick+0x14>)
 8004702:	681b      	ldr	r3, [r3, #0]
}
 8004704:	4618      	mov	r0, r3
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	20000650 	.word	0x20000650

08004714 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800471c:	2300      	movs	r3, #0
 800471e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e033      	b.n	8004792 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472e:	2b00      	cmp	r3, #0
 8004730:	d109      	bne.n	8004746 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f7fd fa32 	bl	8001b9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474a:	f003 0310 	and.w	r3, r3, #16
 800474e:	2b00      	cmp	r3, #0
 8004750:	d118      	bne.n	8004784 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004756:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800475a:	f023 0302 	bic.w	r3, r3, #2
 800475e:	f043 0202 	orr.w	r2, r3, #2
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 fa48 	bl	8004bfc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004776:	f023 0303 	bic.w	r3, r3, #3
 800477a:	f043 0201 	orr.w	r2, r3, #1
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	641a      	str	r2, [r3, #64]	@ 0x40
 8004782:	e001      	b.n	8004788 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004790:	7bfb      	ldrb	r3, [r7, #15]
}
 8004792:	4618      	mov	r0, r3
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
	...

0800479c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80047a8:	2300      	movs	r3, #0
 80047aa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d101      	bne.n	80047ba <HAL_ADC_Start_DMA+0x1e>
 80047b6:	2302      	movs	r3, #2
 80047b8:	e0ce      	b.n	8004958 <HAL_ADC_Start_DMA+0x1bc>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d018      	beq.n	8004802 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689a      	ldr	r2, [r3, #8]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f042 0201 	orr.w	r2, r2, #1
 80047de:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80047e0:	4b5f      	ldr	r3, [pc, #380]	@ (8004960 <HAL_ADC_Start_DMA+0x1c4>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a5f      	ldr	r2, [pc, #380]	@ (8004964 <HAL_ADC_Start_DMA+0x1c8>)
 80047e6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ea:	0c9a      	lsrs	r2, r3, #18
 80047ec:	4613      	mov	r3, r2
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	4413      	add	r3, r2
 80047f2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80047f4:	e002      	b.n	80047fc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	3b01      	subs	r3, #1
 80047fa:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1f9      	bne.n	80047f6 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800480c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004810:	d107      	bne.n	8004822 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689a      	ldr	r2, [r3, #8]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004820:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	2b01      	cmp	r3, #1
 800482e:	f040 8086 	bne.w	800493e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004836:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800483a:	f023 0301 	bic.w	r3, r3, #1
 800483e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004850:	2b00      	cmp	r3, #0
 8004852:	d007      	beq.n	8004864 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004858:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800485c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004868:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800486c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004870:	d106      	bne.n	8004880 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004876:	f023 0206 	bic.w	r2, r3, #6
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	645a      	str	r2, [r3, #68]	@ 0x44
 800487e:	e002      	b.n	8004886 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800488e:	4b36      	ldr	r3, [pc, #216]	@ (8004968 <HAL_ADC_Start_DMA+0x1cc>)
 8004890:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004896:	4a35      	ldr	r2, [pc, #212]	@ (800496c <HAL_ADC_Start_DMA+0x1d0>)
 8004898:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800489e:	4a34      	ldr	r2, [pc, #208]	@ (8004970 <HAL_ADC_Start_DMA+0x1d4>)
 80048a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a6:	4a33      	ldr	r2, [pc, #204]	@ (8004974 <HAL_ADC_Start_DMA+0x1d8>)
 80048a8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80048b2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80048c2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689a      	ldr	r2, [r3, #8]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048d2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	334c      	adds	r3, #76	@ 0x4c
 80048de:	4619      	mov	r1, r3
 80048e0:	68ba      	ldr	r2, [r7, #8]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f000 fc98 	bl	8005218 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f003 031f 	and.w	r3, r3, #31
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10f      	bne.n	8004914 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d129      	bne.n	8004956 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689a      	ldr	r2, [r3, #8]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004910:	609a      	str	r2, [r3, #8]
 8004912:	e020      	b.n	8004956 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a17      	ldr	r2, [pc, #92]	@ (8004978 <HAL_ADC_Start_DMA+0x1dc>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d11b      	bne.n	8004956 <HAL_ADC_Start_DMA+0x1ba>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d114      	bne.n	8004956 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689a      	ldr	r2, [r3, #8]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800493a:	609a      	str	r2, [r3, #8]
 800493c:	e00b      	b.n	8004956 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004942:	f043 0210 	orr.w	r2, r3, #16
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800494e:	f043 0201 	orr.w	r2, r3, #1
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3718      	adds	r7, #24
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	200000e0 	.word	0x200000e0
 8004964:	431bde83 	.word	0x431bde83
 8004968:	40012300 	.word	0x40012300
 800496c:	08004df5 	.word	0x08004df5
 8004970:	08004eaf 	.word	0x08004eaf
 8004974:	08004ecb 	.word	0x08004ecb
 8004978:	40012000 	.word	0x40012000

0800497c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80049c2:	2300      	movs	r3, #0
 80049c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d101      	bne.n	80049d4 <HAL_ADC_ConfigChannel+0x1c>
 80049d0:	2302      	movs	r3, #2
 80049d2:	e105      	b.n	8004be0 <HAL_ADC_ConfigChannel+0x228>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2b09      	cmp	r3, #9
 80049e2:	d925      	bls.n	8004a30 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68d9      	ldr	r1, [r3, #12]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	461a      	mov	r2, r3
 80049f2:	4613      	mov	r3, r2
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	4413      	add	r3, r2
 80049f8:	3b1e      	subs	r3, #30
 80049fa:	2207      	movs	r2, #7
 80049fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004a00:	43da      	mvns	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	400a      	ands	r2, r1
 8004a08:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68d9      	ldr	r1, [r3, #12]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	689a      	ldr	r2, [r3, #8]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	005b      	lsls	r3, r3, #1
 8004a20:	4403      	add	r3, r0
 8004a22:	3b1e      	subs	r3, #30
 8004a24:	409a      	lsls	r2, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	60da      	str	r2, [r3, #12]
 8004a2e:	e022      	b.n	8004a76 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	6919      	ldr	r1, [r3, #16]
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	4613      	mov	r3, r2
 8004a40:	005b      	lsls	r3, r3, #1
 8004a42:	4413      	add	r3, r2
 8004a44:	2207      	movs	r2, #7
 8004a46:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4a:	43da      	mvns	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	400a      	ands	r2, r1
 8004a52:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6919      	ldr	r1, [r3, #16]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	689a      	ldr	r2, [r3, #8]
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	4618      	mov	r0, r3
 8004a66:	4603      	mov	r3, r0
 8004a68:	005b      	lsls	r3, r3, #1
 8004a6a:	4403      	add	r3, r0
 8004a6c:	409a      	lsls	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	2b06      	cmp	r3, #6
 8004a7c:	d824      	bhi.n	8004ac8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4413      	add	r3, r2
 8004a8e:	3b05      	subs	r3, #5
 8004a90:	221f      	movs	r2, #31
 8004a92:	fa02 f303 	lsl.w	r3, r2, r3
 8004a96:	43da      	mvns	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	400a      	ands	r2, r1
 8004a9e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	4618      	mov	r0, r3
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	685a      	ldr	r2, [r3, #4]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4413      	add	r3, r2
 8004ab8:	3b05      	subs	r3, #5
 8004aba:	fa00 f203 	lsl.w	r2, r0, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	635a      	str	r2, [r3, #52]	@ 0x34
 8004ac6:	e04c      	b.n	8004b62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	2b0c      	cmp	r3, #12
 8004ace:	d824      	bhi.n	8004b1a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	685a      	ldr	r2, [r3, #4]
 8004ada:	4613      	mov	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4413      	add	r3, r2
 8004ae0:	3b23      	subs	r3, #35	@ 0x23
 8004ae2:	221f      	movs	r2, #31
 8004ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae8:	43da      	mvns	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	400a      	ands	r2, r1
 8004af0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	4618      	mov	r0, r3
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	4613      	mov	r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4413      	add	r3, r2
 8004b0a:	3b23      	subs	r3, #35	@ 0x23
 8004b0c:	fa00 f203 	lsl.w	r2, r0, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	430a      	orrs	r2, r1
 8004b16:	631a      	str	r2, [r3, #48]	@ 0x30
 8004b18:	e023      	b.n	8004b62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	4613      	mov	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4413      	add	r3, r2
 8004b2a:	3b41      	subs	r3, #65	@ 0x41
 8004b2c:	221f      	movs	r2, #31
 8004b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b32:	43da      	mvns	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	400a      	ands	r2, r1
 8004b3a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	4618      	mov	r0, r3
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	3b41      	subs	r3, #65	@ 0x41
 8004b56:	fa00 f203 	lsl.w	r2, r0, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b62:	4b22      	ldr	r3, [pc, #136]	@ (8004bec <HAL_ADC_ConfigChannel+0x234>)
 8004b64:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a21      	ldr	r2, [pc, #132]	@ (8004bf0 <HAL_ADC_ConfigChannel+0x238>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d109      	bne.n	8004b84 <HAL_ADC_ConfigChannel+0x1cc>
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2b12      	cmp	r3, #18
 8004b76:	d105      	bne.n	8004b84 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a19      	ldr	r2, [pc, #100]	@ (8004bf0 <HAL_ADC_ConfigChannel+0x238>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d123      	bne.n	8004bd6 <HAL_ADC_ConfigChannel+0x21e>
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2b10      	cmp	r3, #16
 8004b94:	d003      	beq.n	8004b9e <HAL_ADC_ConfigChannel+0x1e6>
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2b11      	cmp	r3, #17
 8004b9c:	d11b      	bne.n	8004bd6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2b10      	cmp	r3, #16
 8004bb0:	d111      	bne.n	8004bd6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004bb2:	4b10      	ldr	r3, [pc, #64]	@ (8004bf4 <HAL_ADC_ConfigChannel+0x23c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a10      	ldr	r2, [pc, #64]	@ (8004bf8 <HAL_ADC_ConfigChannel+0x240>)
 8004bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bbc:	0c9a      	lsrs	r2, r3, #18
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4413      	add	r3, r2
 8004bc4:	005b      	lsls	r3, r3, #1
 8004bc6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004bc8:	e002      	b.n	8004bd0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1f9      	bne.n	8004bca <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3714      	adds	r7, #20
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	40012300 	.word	0x40012300
 8004bf0:	40012000 	.word	0x40012000
 8004bf4:	200000e0 	.word	0x200000e0
 8004bf8:	431bde83 	.word	0x431bde83

08004bfc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004c04:	4b79      	ldr	r3, [pc, #484]	@ (8004dec <ADC_Init+0x1f0>)
 8004c06:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	685a      	ldr	r2, [r3, #4]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6859      	ldr	r1, [r3, #4]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	021a      	lsls	r2, r3, #8
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	430a      	orrs	r2, r1
 8004c44:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	685a      	ldr	r2, [r3, #4]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004c54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	6859      	ldr	r1, [r3, #4]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689a      	ldr	r2, [r3, #8]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689a      	ldr	r2, [r3, #8]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6899      	ldr	r1, [r3, #8]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68da      	ldr	r2, [r3, #12]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c8e:	4a58      	ldr	r2, [pc, #352]	@ (8004df0 <ADC_Init+0x1f4>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d022      	beq.n	8004cda <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689a      	ldr	r2, [r3, #8]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004ca2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6899      	ldr	r1, [r3, #8]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	689a      	ldr	r2, [r3, #8]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004cc4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6899      	ldr	r1, [r3, #8]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	609a      	str	r2, [r3, #8]
 8004cd8:	e00f      	b.n	8004cfa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	689a      	ldr	r2, [r3, #8]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004ce8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689a      	ldr	r2, [r3, #8]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004cf8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689a      	ldr	r2, [r3, #8]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f022 0202 	bic.w	r2, r2, #2
 8004d08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	6899      	ldr	r1, [r3, #8]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	7e1b      	ldrb	r3, [r3, #24]
 8004d14:	005a      	lsls	r2, r3, #1
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d01b      	beq.n	8004d60 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d36:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004d46:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6859      	ldr	r1, [r3, #4]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d52:	3b01      	subs	r3, #1
 8004d54:	035a      	lsls	r2, r3, #13
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	605a      	str	r2, [r3, #4]
 8004d5e:	e007      	b.n	8004d70 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d6e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004d7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	69db      	ldr	r3, [r3, #28]
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	051a      	lsls	r2, r3, #20
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	689a      	ldr	r2, [r3, #8]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004da4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	6899      	ldr	r1, [r3, #8]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004db2:	025a      	lsls	r2, r3, #9
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	430a      	orrs	r2, r1
 8004dba:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	689a      	ldr	r2, [r3, #8]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6899      	ldr	r1, [r3, #8]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	029a      	lsls	r2, r3, #10
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	609a      	str	r2, [r3, #8]
}
 8004de0:	bf00      	nop
 8004de2:	3714      	adds	r7, #20
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	40012300 	.word	0x40012300
 8004df0:	0f000001 	.word	0x0f000001

08004df4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e00:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e06:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d13c      	bne.n	8004e88 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e12:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d12b      	bne.n	8004e80 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d127      	bne.n	8004e80 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e36:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d006      	beq.n	8004e4c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d119      	bne.n	8004e80 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f022 0220 	bic.w	r2, r2, #32
 8004e5a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d105      	bne.n	8004e80 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e78:	f043 0201 	orr.w	r2, r3, #1
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	f7ff fd7b 	bl	800497c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004e86:	e00e      	b.n	8004ea6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e8c:	f003 0310 	and.w	r3, r3, #16
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d003      	beq.n	8004e9c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f7ff fd85 	bl	80049a4 <HAL_ADC_ErrorCallback>
}
 8004e9a:	e004      	b.n	8004ea6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	4798      	blx	r3
}
 8004ea6:	bf00      	nop
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b084      	sub	sp, #16
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eba:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f7ff fd67 	bl	8004990 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ec2:	bf00      	nop
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b084      	sub	sp, #16
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ed6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2240      	movs	r2, #64	@ 0x40
 8004edc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ee2:	f043 0204 	orr.w	r2, r3, #4
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f7ff fd5a 	bl	80049a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ef0:	bf00      	nop
 8004ef2:	3710      	adds	r7, #16
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f003 0307 	and.w	r3, r3, #7
 8004f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f08:	4b0c      	ldr	r3, [pc, #48]	@ (8004f3c <__NVIC_SetPriorityGrouping+0x44>)
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004f14:	4013      	ands	r3, r2
 8004f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004f24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f2a:	4a04      	ldr	r2, [pc, #16]	@ (8004f3c <__NVIC_SetPriorityGrouping+0x44>)
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	60d3      	str	r3, [r2, #12]
}
 8004f30:	bf00      	nop
 8004f32:	3714      	adds	r7, #20
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	e000ed00 	.word	0xe000ed00

08004f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f40:	b480      	push	{r7}
 8004f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f44:	4b04      	ldr	r3, [pc, #16]	@ (8004f58 <__NVIC_GetPriorityGrouping+0x18>)
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	0a1b      	lsrs	r3, r3, #8
 8004f4a:	f003 0307 	and.w	r3, r3, #7
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr
 8004f58:	e000ed00 	.word	0xe000ed00

08004f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	4603      	mov	r3, r0
 8004f64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	db0b      	blt.n	8004f86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f6e:	79fb      	ldrb	r3, [r7, #7]
 8004f70:	f003 021f 	and.w	r2, r3, #31
 8004f74:	4907      	ldr	r1, [pc, #28]	@ (8004f94 <__NVIC_EnableIRQ+0x38>)
 8004f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f7a:	095b      	lsrs	r3, r3, #5
 8004f7c:	2001      	movs	r0, #1
 8004f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8004f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004f86:	bf00      	nop
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	e000e100 	.word	0xe000e100

08004f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	6039      	str	r1, [r7, #0]
 8004fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	db0a      	blt.n	8004fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	b2da      	uxtb	r2, r3
 8004fb0:	490c      	ldr	r1, [pc, #48]	@ (8004fe4 <__NVIC_SetPriority+0x4c>)
 8004fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fb6:	0112      	lsls	r2, r2, #4
 8004fb8:	b2d2      	uxtb	r2, r2
 8004fba:	440b      	add	r3, r1
 8004fbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004fc0:	e00a      	b.n	8004fd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	b2da      	uxtb	r2, r3
 8004fc6:	4908      	ldr	r1, [pc, #32]	@ (8004fe8 <__NVIC_SetPriority+0x50>)
 8004fc8:	79fb      	ldrb	r3, [r7, #7]
 8004fca:	f003 030f 	and.w	r3, r3, #15
 8004fce:	3b04      	subs	r3, #4
 8004fd0:	0112      	lsls	r2, r2, #4
 8004fd2:	b2d2      	uxtb	r2, r2
 8004fd4:	440b      	add	r3, r1
 8004fd6:	761a      	strb	r2, [r3, #24]
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr
 8004fe4:	e000e100 	.word	0xe000e100
 8004fe8:	e000ed00 	.word	0xe000ed00

08004fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b089      	sub	sp, #36	@ 0x24
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f003 0307 	and.w	r3, r3, #7
 8004ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	f1c3 0307 	rsb	r3, r3, #7
 8005006:	2b04      	cmp	r3, #4
 8005008:	bf28      	it	cs
 800500a:	2304      	movcs	r3, #4
 800500c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	3304      	adds	r3, #4
 8005012:	2b06      	cmp	r3, #6
 8005014:	d902      	bls.n	800501c <NVIC_EncodePriority+0x30>
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	3b03      	subs	r3, #3
 800501a:	e000      	b.n	800501e <NVIC_EncodePriority+0x32>
 800501c:	2300      	movs	r3, #0
 800501e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005020:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	fa02 f303 	lsl.w	r3, r2, r3
 800502a:	43da      	mvns	r2, r3
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	401a      	ands	r2, r3
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005034:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	fa01 f303 	lsl.w	r3, r1, r3
 800503e:	43d9      	mvns	r1, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005044:	4313      	orrs	r3, r2
         );
}
 8005046:	4618      	mov	r0, r3
 8005048:	3724      	adds	r7, #36	@ 0x24
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr

08005052 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b082      	sub	sp, #8
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f7ff ff4c 	bl	8004ef8 <__NVIC_SetPriorityGrouping>
}
 8005060:	bf00      	nop
 8005062:	3708      	adds	r7, #8
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af00      	add	r7, sp, #0
 800506e:	4603      	mov	r3, r0
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
 8005074:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005076:	2300      	movs	r3, #0
 8005078:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800507a:	f7ff ff61 	bl	8004f40 <__NVIC_GetPriorityGrouping>
 800507e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	68b9      	ldr	r1, [r7, #8]
 8005084:	6978      	ldr	r0, [r7, #20]
 8005086:	f7ff ffb1 	bl	8004fec <NVIC_EncodePriority>
 800508a:	4602      	mov	r2, r0
 800508c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005090:	4611      	mov	r1, r2
 8005092:	4618      	mov	r0, r3
 8005094:	f7ff ff80 	bl	8004f98 <__NVIC_SetPriority>
}
 8005098:	bf00      	nop
 800509a:	3718      	adds	r7, #24
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	4603      	mov	r3, r0
 80050a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7ff ff54 	bl	8004f5c <__NVIC_EnableIRQ>
}
 80050b4:	bf00      	nop
 80050b6:	3708      	adds	r7, #8
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b086      	sub	sp, #24
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80050c4:	2300      	movs	r3, #0
 80050c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80050c8:	f7ff fb18 	bl	80046fc <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d101      	bne.n	80050d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e099      	b.n	800520c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2202      	movs	r2, #2
 80050dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 0201 	bic.w	r2, r2, #1
 80050f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050f8:	e00f      	b.n	800511a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80050fa:	f7ff faff 	bl	80046fc <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	2b05      	cmp	r3, #5
 8005106:	d908      	bls.n	800511a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2220      	movs	r2, #32
 800510c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2203      	movs	r2, #3
 8005112:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e078      	b.n	800520c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0301 	and.w	r3, r3, #1
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1e8      	bne.n	80050fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	4b38      	ldr	r3, [pc, #224]	@ (8005214 <HAL_DMA_Init+0x158>)
 8005134:	4013      	ands	r3, r2
 8005136:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005146:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005152:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800515e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a1b      	ldr	r3, [r3, #32]
 8005164:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	4313      	orrs	r3, r2
 800516a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005170:	2b04      	cmp	r3, #4
 8005172:	d107      	bne.n	8005184 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800517c:	4313      	orrs	r3, r2
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	4313      	orrs	r3, r2
 8005182:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	f023 0307 	bic.w	r3, r3, #7
 800519a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a0:	697a      	ldr	r2, [r7, #20]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051aa:	2b04      	cmp	r3, #4
 80051ac:	d117      	bne.n	80051de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00e      	beq.n	80051de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 fa6f 	bl	80056a4 <DMA_CheckFifoParam>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d008      	beq.n	80051de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2240      	movs	r2, #64	@ 0x40
 80051d0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80051da:	2301      	movs	r3, #1
 80051dc:	e016      	b.n	800520c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 fa26 	bl	8005638 <DMA_CalcBaseAndBitshift>
 80051ec:	4603      	mov	r3, r0
 80051ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051f4:	223f      	movs	r2, #63	@ 0x3f
 80051f6:	409a      	lsls	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3718      	adds	r7, #24
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	f010803f 	.word	0xf010803f

08005218 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
 8005224:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005226:	2300      	movs	r3, #0
 8005228:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800522e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005236:	2b01      	cmp	r3, #1
 8005238:	d101      	bne.n	800523e <HAL_DMA_Start_IT+0x26>
 800523a:	2302      	movs	r3, #2
 800523c:	e040      	b.n	80052c0 <HAL_DMA_Start_IT+0xa8>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b01      	cmp	r3, #1
 8005250:	d12f      	bne.n	80052b2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2202      	movs	r2, #2
 8005256:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	68b9      	ldr	r1, [r7, #8]
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	f000 f9b8 	bl	80055dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005270:	223f      	movs	r2, #63	@ 0x3f
 8005272:	409a      	lsls	r2, r3
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f042 0216 	orr.w	r2, r2, #22
 8005286:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800528c:	2b00      	cmp	r3, #0
 800528e:	d007      	beq.n	80052a0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f042 0208 	orr.w	r2, r2, #8
 800529e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f042 0201 	orr.w	r2, r2, #1
 80052ae:	601a      	str	r2, [r3, #0]
 80052b0:	e005      	b.n	80052be <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80052ba:	2302      	movs	r3, #2
 80052bc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80052be:	7dfb      	ldrb	r3, [r7, #23]
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3718      	adds	r7, #24
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80052d0:	2300      	movs	r3, #0
 80052d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80052d4:	4b8e      	ldr	r3, [pc, #568]	@ (8005510 <HAL_DMA_IRQHandler+0x248>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a8e      	ldr	r2, [pc, #568]	@ (8005514 <HAL_DMA_IRQHandler+0x24c>)
 80052da:	fba2 2303 	umull	r2, r3, r2, r3
 80052de:	0a9b      	lsrs	r3, r3, #10
 80052e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052f2:	2208      	movs	r2, #8
 80052f4:	409a      	lsls	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4013      	ands	r3, r2
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d01a      	beq.n	8005334 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0304 	and.w	r3, r3, #4
 8005308:	2b00      	cmp	r3, #0
 800530a:	d013      	beq.n	8005334 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f022 0204 	bic.w	r2, r2, #4
 800531a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005320:	2208      	movs	r2, #8
 8005322:	409a      	lsls	r2, r3
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800532c:	f043 0201 	orr.w	r2, r3, #1
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005338:	2201      	movs	r2, #1
 800533a:	409a      	lsls	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	4013      	ands	r3, r2
 8005340:	2b00      	cmp	r3, #0
 8005342:	d012      	beq.n	800536a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00b      	beq.n	800536a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005356:	2201      	movs	r2, #1
 8005358:	409a      	lsls	r2, r3
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005362:	f043 0202 	orr.w	r2, r3, #2
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800536e:	2204      	movs	r2, #4
 8005370:	409a      	lsls	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	4013      	ands	r3, r2
 8005376:	2b00      	cmp	r3, #0
 8005378:	d012      	beq.n	80053a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0302 	and.w	r3, r3, #2
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00b      	beq.n	80053a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800538c:	2204      	movs	r2, #4
 800538e:	409a      	lsls	r2, r3
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005398:	f043 0204 	orr.w	r2, r3, #4
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053a4:	2210      	movs	r2, #16
 80053a6:	409a      	lsls	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	4013      	ands	r3, r2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d043      	beq.n	8005438 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0308 	and.w	r3, r3, #8
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d03c      	beq.n	8005438 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053c2:	2210      	movs	r2, #16
 80053c4:	409a      	lsls	r2, r3
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d018      	beq.n	800540a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d108      	bne.n	80053f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d024      	beq.n	8005438 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	4798      	blx	r3
 80053f6:	e01f      	b.n	8005438 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d01b      	beq.n	8005438 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	4798      	blx	r3
 8005408:	e016      	b.n	8005438 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005414:	2b00      	cmp	r3, #0
 8005416:	d107      	bne.n	8005428 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f022 0208 	bic.w	r2, r2, #8
 8005426:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800542c:	2b00      	cmp	r3, #0
 800542e:	d003      	beq.n	8005438 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800543c:	2220      	movs	r2, #32
 800543e:	409a      	lsls	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4013      	ands	r3, r2
 8005444:	2b00      	cmp	r3, #0
 8005446:	f000 808f 	beq.w	8005568 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0310 	and.w	r3, r3, #16
 8005454:	2b00      	cmp	r3, #0
 8005456:	f000 8087 	beq.w	8005568 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800545e:	2220      	movs	r2, #32
 8005460:	409a      	lsls	r2, r3
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b05      	cmp	r3, #5
 8005470:	d136      	bne.n	80054e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f022 0216 	bic.w	r2, r2, #22
 8005480:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	695a      	ldr	r2, [r3, #20]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005490:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005496:	2b00      	cmp	r3, #0
 8005498:	d103      	bne.n	80054a2 <HAL_DMA_IRQHandler+0x1da>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d007      	beq.n	80054b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f022 0208 	bic.w	r2, r2, #8
 80054b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054b6:	223f      	movs	r2, #63	@ 0x3f
 80054b8:	409a      	lsls	r2, r3
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d07e      	beq.n	80055d4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	4798      	blx	r3
        }
        return;
 80054de:	e079      	b.n	80055d4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d01d      	beq.n	800552a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10d      	bne.n	8005518 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005500:	2b00      	cmp	r3, #0
 8005502:	d031      	beq.n	8005568 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	4798      	blx	r3
 800550c:	e02c      	b.n	8005568 <HAL_DMA_IRQHandler+0x2a0>
 800550e:	bf00      	nop
 8005510:	200000e0 	.word	0x200000e0
 8005514:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800551c:	2b00      	cmp	r3, #0
 800551e:	d023      	beq.n	8005568 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	4798      	blx	r3
 8005528:	e01e      	b.n	8005568 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10f      	bne.n	8005558 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f022 0210 	bic.w	r2, r2, #16
 8005546:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800555c:	2b00      	cmp	r3, #0
 800555e:	d003      	beq.n	8005568 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800556c:	2b00      	cmp	r3, #0
 800556e:	d032      	beq.n	80055d6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005574:	f003 0301 	and.w	r3, r3, #1
 8005578:	2b00      	cmp	r3, #0
 800557a:	d022      	beq.n	80055c2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2205      	movs	r2, #5
 8005580:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f022 0201 	bic.w	r2, r2, #1
 8005592:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	3301      	adds	r3, #1
 8005598:	60bb      	str	r3, [r7, #8]
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	429a      	cmp	r2, r3
 800559e:	d307      	bcc.n	80055b0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1f2      	bne.n	8005594 <HAL_DMA_IRQHandler+0x2cc>
 80055ae:	e000      	b.n	80055b2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80055b0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d005      	beq.n	80055d6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	4798      	blx	r3
 80055d2:	e000      	b.n	80055d6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80055d4:	bf00      	nop
    }
  }
}
 80055d6:	3718      	adds	r7, #24
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
 80055e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80055f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	683a      	ldr	r2, [r7, #0]
 8005600:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	2b40      	cmp	r3, #64	@ 0x40
 8005608:	d108      	bne.n	800561c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800561a:	e007      	b.n	800562c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68ba      	ldr	r2, [r7, #8]
 8005622:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	60da      	str	r2, [r3, #12]
}
 800562c:	bf00      	nop
 800562e:	3714      	adds	r7, #20
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	b2db      	uxtb	r3, r3
 8005646:	3b10      	subs	r3, #16
 8005648:	4a14      	ldr	r2, [pc, #80]	@ (800569c <DMA_CalcBaseAndBitshift+0x64>)
 800564a:	fba2 2303 	umull	r2, r3, r2, r3
 800564e:	091b      	lsrs	r3, r3, #4
 8005650:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005652:	4a13      	ldr	r2, [pc, #76]	@ (80056a0 <DMA_CalcBaseAndBitshift+0x68>)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	4413      	add	r3, r2
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	461a      	mov	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2b03      	cmp	r3, #3
 8005664:	d909      	bls.n	800567a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800566e:	f023 0303 	bic.w	r3, r3, #3
 8005672:	1d1a      	adds	r2, r3, #4
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	659a      	str	r2, [r3, #88]	@ 0x58
 8005678:	e007      	b.n	800568a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005682:	f023 0303 	bic.w	r3, r3, #3
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800568e:	4618      	mov	r0, r3
 8005690:	3714      	adds	r7, #20
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	aaaaaaab 	.word	0xaaaaaaab
 80056a0:	0800f9b8 	.word	0x0800f9b8

080056a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056ac:	2300      	movs	r3, #0
 80056ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d11f      	bne.n	80056fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	2b03      	cmp	r3, #3
 80056c2:	d856      	bhi.n	8005772 <DMA_CheckFifoParam+0xce>
 80056c4:	a201      	add	r2, pc, #4	@ (adr r2, 80056cc <DMA_CheckFifoParam+0x28>)
 80056c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ca:	bf00      	nop
 80056cc:	080056dd 	.word	0x080056dd
 80056d0:	080056ef 	.word	0x080056ef
 80056d4:	080056dd 	.word	0x080056dd
 80056d8:	08005773 	.word	0x08005773
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d046      	beq.n	8005776 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056ec:	e043      	b.n	8005776 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80056f6:	d140      	bne.n	800577a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056fc:	e03d      	b.n	800577a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005706:	d121      	bne.n	800574c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	2b03      	cmp	r3, #3
 800570c:	d837      	bhi.n	800577e <DMA_CheckFifoParam+0xda>
 800570e:	a201      	add	r2, pc, #4	@ (adr r2, 8005714 <DMA_CheckFifoParam+0x70>)
 8005710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005714:	08005725 	.word	0x08005725
 8005718:	0800572b 	.word	0x0800572b
 800571c:	08005725 	.word	0x08005725
 8005720:	0800573d 	.word	0x0800573d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	73fb      	strb	r3, [r7, #15]
      break;
 8005728:	e030      	b.n	800578c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800572e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d025      	beq.n	8005782 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800573a:	e022      	b.n	8005782 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005740:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005744:	d11f      	bne.n	8005786 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800574a:	e01c      	b.n	8005786 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	2b02      	cmp	r3, #2
 8005750:	d903      	bls.n	800575a <DMA_CheckFifoParam+0xb6>
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	2b03      	cmp	r3, #3
 8005756:	d003      	beq.n	8005760 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005758:	e018      	b.n	800578c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	73fb      	strb	r3, [r7, #15]
      break;
 800575e:	e015      	b.n	800578c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005764:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00e      	beq.n	800578a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	73fb      	strb	r3, [r7, #15]
      break;
 8005770:	e00b      	b.n	800578a <DMA_CheckFifoParam+0xe6>
      break;
 8005772:	bf00      	nop
 8005774:	e00a      	b.n	800578c <DMA_CheckFifoParam+0xe8>
      break;
 8005776:	bf00      	nop
 8005778:	e008      	b.n	800578c <DMA_CheckFifoParam+0xe8>
      break;
 800577a:	bf00      	nop
 800577c:	e006      	b.n	800578c <DMA_CheckFifoParam+0xe8>
      break;
 800577e:	bf00      	nop
 8005780:	e004      	b.n	800578c <DMA_CheckFifoParam+0xe8>
      break;
 8005782:	bf00      	nop
 8005784:	e002      	b.n	800578c <DMA_CheckFifoParam+0xe8>
      break;   
 8005786:	bf00      	nop
 8005788:	e000      	b.n	800578c <DMA_CheckFifoParam+0xe8>
      break;
 800578a:	bf00      	nop
    }
  } 
  
  return status; 
 800578c:	7bfb      	ldrb	r3, [r7, #15]
}
 800578e:	4618      	mov	r0, r3
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop

0800579c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800579c:	b480      	push	{r7}
 800579e:	b089      	sub	sp, #36	@ 0x24
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80057a6:	2300      	movs	r3, #0
 80057a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80057aa:	2300      	movs	r3, #0
 80057ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80057ae:	2300      	movs	r3, #0
 80057b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057b2:	2300      	movs	r3, #0
 80057b4:	61fb      	str	r3, [r7, #28]
 80057b6:	e159      	b.n	8005a6c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80057b8:	2201      	movs	r2, #1
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	fa02 f303 	lsl.w	r3, r2, r3
 80057c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	4013      	ands	r3, r2
 80057ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	f040 8148 	bne.w	8005a66 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f003 0303 	and.w	r3, r3, #3
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d005      	beq.n	80057ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d130      	bne.n	8005850 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	005b      	lsls	r3, r3, #1
 80057f8:	2203      	movs	r2, #3
 80057fa:	fa02 f303 	lsl.w	r3, r2, r3
 80057fe:	43db      	mvns	r3, r3
 8005800:	69ba      	ldr	r2, [r7, #24]
 8005802:	4013      	ands	r3, r2
 8005804:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	68da      	ldr	r2, [r3, #12]
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	005b      	lsls	r3, r3, #1
 800580e:	fa02 f303 	lsl.w	r3, r2, r3
 8005812:	69ba      	ldr	r2, [r7, #24]
 8005814:	4313      	orrs	r3, r2
 8005816:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	69ba      	ldr	r2, [r7, #24]
 800581c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005824:	2201      	movs	r2, #1
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	fa02 f303 	lsl.w	r3, r2, r3
 800582c:	43db      	mvns	r3, r3
 800582e:	69ba      	ldr	r2, [r7, #24]
 8005830:	4013      	ands	r3, r2
 8005832:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	091b      	lsrs	r3, r3, #4
 800583a:	f003 0201 	and.w	r2, r3, #1
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	fa02 f303 	lsl.w	r3, r2, r3
 8005844:	69ba      	ldr	r2, [r7, #24]
 8005846:	4313      	orrs	r3, r2
 8005848:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	69ba      	ldr	r2, [r7, #24]
 800584e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f003 0303 	and.w	r3, r3, #3
 8005858:	2b03      	cmp	r3, #3
 800585a:	d017      	beq.n	800588c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	005b      	lsls	r3, r3, #1
 8005866:	2203      	movs	r2, #3
 8005868:	fa02 f303 	lsl.w	r3, r2, r3
 800586c:	43db      	mvns	r3, r3
 800586e:	69ba      	ldr	r2, [r7, #24]
 8005870:	4013      	ands	r3, r2
 8005872:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	689a      	ldr	r2, [r3, #8]
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	005b      	lsls	r3, r3, #1
 800587c:	fa02 f303 	lsl.w	r3, r2, r3
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	4313      	orrs	r3, r2
 8005884:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	69ba      	ldr	r2, [r7, #24]
 800588a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	f003 0303 	and.w	r3, r3, #3
 8005894:	2b02      	cmp	r3, #2
 8005896:	d123      	bne.n	80058e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	08da      	lsrs	r2, r3, #3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	3208      	adds	r2, #8
 80058a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	f003 0307 	and.w	r3, r3, #7
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	220f      	movs	r2, #15
 80058b0:	fa02 f303 	lsl.w	r3, r2, r3
 80058b4:	43db      	mvns	r3, r3
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	4013      	ands	r3, r2
 80058ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	691a      	ldr	r2, [r3, #16]
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	f003 0307 	and.w	r3, r3, #7
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	fa02 f303 	lsl.w	r3, r2, r3
 80058cc:	69ba      	ldr	r2, [r7, #24]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	08da      	lsrs	r2, r3, #3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	3208      	adds	r2, #8
 80058da:	69b9      	ldr	r1, [r7, #24]
 80058dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	005b      	lsls	r3, r3, #1
 80058ea:	2203      	movs	r2, #3
 80058ec:	fa02 f303 	lsl.w	r3, r2, r3
 80058f0:	43db      	mvns	r3, r3
 80058f2:	69ba      	ldr	r2, [r7, #24]
 80058f4:	4013      	ands	r3, r2
 80058f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f003 0203 	and.w	r2, r3, #3
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	005b      	lsls	r3, r3, #1
 8005904:	fa02 f303 	lsl.w	r3, r2, r3
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	4313      	orrs	r3, r2
 800590c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800591c:	2b00      	cmp	r3, #0
 800591e:	f000 80a2 	beq.w	8005a66 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005922:	2300      	movs	r3, #0
 8005924:	60fb      	str	r3, [r7, #12]
 8005926:	4b57      	ldr	r3, [pc, #348]	@ (8005a84 <HAL_GPIO_Init+0x2e8>)
 8005928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800592a:	4a56      	ldr	r2, [pc, #344]	@ (8005a84 <HAL_GPIO_Init+0x2e8>)
 800592c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005930:	6453      	str	r3, [r2, #68]	@ 0x44
 8005932:	4b54      	ldr	r3, [pc, #336]	@ (8005a84 <HAL_GPIO_Init+0x2e8>)
 8005934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005936:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800593a:	60fb      	str	r3, [r7, #12]
 800593c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800593e:	4a52      	ldr	r2, [pc, #328]	@ (8005a88 <HAL_GPIO_Init+0x2ec>)
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	089b      	lsrs	r3, r3, #2
 8005944:	3302      	adds	r3, #2
 8005946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800594a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	f003 0303 	and.w	r3, r3, #3
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	220f      	movs	r2, #15
 8005956:	fa02 f303 	lsl.w	r3, r2, r3
 800595a:	43db      	mvns	r3, r3
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	4013      	ands	r3, r2
 8005960:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a49      	ldr	r2, [pc, #292]	@ (8005a8c <HAL_GPIO_Init+0x2f0>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d019      	beq.n	800599e <HAL_GPIO_Init+0x202>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a48      	ldr	r2, [pc, #288]	@ (8005a90 <HAL_GPIO_Init+0x2f4>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d013      	beq.n	800599a <HAL_GPIO_Init+0x1fe>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a47      	ldr	r2, [pc, #284]	@ (8005a94 <HAL_GPIO_Init+0x2f8>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d00d      	beq.n	8005996 <HAL_GPIO_Init+0x1fa>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a46      	ldr	r2, [pc, #280]	@ (8005a98 <HAL_GPIO_Init+0x2fc>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d007      	beq.n	8005992 <HAL_GPIO_Init+0x1f6>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a45      	ldr	r2, [pc, #276]	@ (8005a9c <HAL_GPIO_Init+0x300>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d101      	bne.n	800598e <HAL_GPIO_Init+0x1f2>
 800598a:	2304      	movs	r3, #4
 800598c:	e008      	b.n	80059a0 <HAL_GPIO_Init+0x204>
 800598e:	2307      	movs	r3, #7
 8005990:	e006      	b.n	80059a0 <HAL_GPIO_Init+0x204>
 8005992:	2303      	movs	r3, #3
 8005994:	e004      	b.n	80059a0 <HAL_GPIO_Init+0x204>
 8005996:	2302      	movs	r3, #2
 8005998:	e002      	b.n	80059a0 <HAL_GPIO_Init+0x204>
 800599a:	2301      	movs	r3, #1
 800599c:	e000      	b.n	80059a0 <HAL_GPIO_Init+0x204>
 800599e:	2300      	movs	r3, #0
 80059a0:	69fa      	ldr	r2, [r7, #28]
 80059a2:	f002 0203 	and.w	r2, r2, #3
 80059a6:	0092      	lsls	r2, r2, #2
 80059a8:	4093      	lsls	r3, r2
 80059aa:	69ba      	ldr	r2, [r7, #24]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80059b0:	4935      	ldr	r1, [pc, #212]	@ (8005a88 <HAL_GPIO_Init+0x2ec>)
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	089b      	lsrs	r3, r3, #2
 80059b6:	3302      	adds	r3, #2
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80059be:	4b38      	ldr	r3, [pc, #224]	@ (8005aa0 <HAL_GPIO_Init+0x304>)
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	43db      	mvns	r3, r3
 80059c8:	69ba      	ldr	r2, [r7, #24]
 80059ca:	4013      	ands	r3, r2
 80059cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d003      	beq.n	80059e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80059da:	69ba      	ldr	r2, [r7, #24]
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	4313      	orrs	r3, r2
 80059e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80059e2:	4a2f      	ldr	r2, [pc, #188]	@ (8005aa0 <HAL_GPIO_Init+0x304>)
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80059e8:	4b2d      	ldr	r3, [pc, #180]	@ (8005aa0 <HAL_GPIO_Init+0x304>)
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	43db      	mvns	r3, r3
 80059f2:	69ba      	ldr	r2, [r7, #24]
 80059f4:	4013      	ands	r3, r2
 80059f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d003      	beq.n	8005a0c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a0c:	4a24      	ldr	r2, [pc, #144]	@ (8005aa0 <HAL_GPIO_Init+0x304>)
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005a12:	4b23      	ldr	r3, [pc, #140]	@ (8005aa0 <HAL_GPIO_Init+0x304>)
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	43db      	mvns	r3, r3
 8005a1c:	69ba      	ldr	r2, [r7, #24]
 8005a1e:	4013      	ands	r3, r2
 8005a20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d003      	beq.n	8005a36 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005a2e:	69ba      	ldr	r2, [r7, #24]
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a36:	4a1a      	ldr	r2, [pc, #104]	@ (8005aa0 <HAL_GPIO_Init+0x304>)
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a3c:	4b18      	ldr	r3, [pc, #96]	@ (8005aa0 <HAL_GPIO_Init+0x304>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	43db      	mvns	r3, r3
 8005a46:	69ba      	ldr	r2, [r7, #24]
 8005a48:	4013      	ands	r3, r2
 8005a4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d003      	beq.n	8005a60 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005a58:	69ba      	ldr	r2, [r7, #24]
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a60:	4a0f      	ldr	r2, [pc, #60]	@ (8005aa0 <HAL_GPIO_Init+0x304>)
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	61fb      	str	r3, [r7, #28]
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	2b0f      	cmp	r3, #15
 8005a70:	f67f aea2 	bls.w	80057b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005a74:	bf00      	nop
 8005a76:	bf00      	nop
 8005a78:	3724      	adds	r7, #36	@ 0x24
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	40023800 	.word	0x40023800
 8005a88:	40013800 	.word	0x40013800
 8005a8c:	40020000 	.word	0x40020000
 8005a90:	40020400 	.word	0x40020400
 8005a94:	40020800 	.word	0x40020800
 8005a98:	40020c00 	.word	0x40020c00
 8005a9c:	40021000 	.word	0x40021000
 8005aa0:	40013c00 	.word	0x40013c00

08005aa4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e12b      	b.n	8005d0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d106      	bne.n	8005ad0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f7fd fe9e 	bl	800380c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2224      	movs	r2, #36	@ 0x24
 8005ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f022 0201 	bic.w	r2, r2, #1
 8005ae6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005af6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005b08:	f001 fd86 	bl	8007618 <HAL_RCC_GetPCLK1Freq>
 8005b0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	4a81      	ldr	r2, [pc, #516]	@ (8005d18 <HAL_I2C_Init+0x274>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d807      	bhi.n	8005b28 <HAL_I2C_Init+0x84>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	4a80      	ldr	r2, [pc, #512]	@ (8005d1c <HAL_I2C_Init+0x278>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	bf94      	ite	ls
 8005b20:	2301      	movls	r3, #1
 8005b22:	2300      	movhi	r3, #0
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	e006      	b.n	8005b36 <HAL_I2C_Init+0x92>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	4a7d      	ldr	r2, [pc, #500]	@ (8005d20 <HAL_I2C_Init+0x27c>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	bf94      	ite	ls
 8005b30:	2301      	movls	r3, #1
 8005b32:	2300      	movhi	r3, #0
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d001      	beq.n	8005b3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e0e7      	b.n	8005d0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	4a78      	ldr	r2, [pc, #480]	@ (8005d24 <HAL_I2C_Init+0x280>)
 8005b42:	fba2 2303 	umull	r2, r3, r2, r3
 8005b46:	0c9b      	lsrs	r3, r3, #18
 8005b48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68ba      	ldr	r2, [r7, #8]
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	6a1b      	ldr	r3, [r3, #32]
 8005b64:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	4a6a      	ldr	r2, [pc, #424]	@ (8005d18 <HAL_I2C_Init+0x274>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d802      	bhi.n	8005b78 <HAL_I2C_Init+0xd4>
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	3301      	adds	r3, #1
 8005b76:	e009      	b.n	8005b8c <HAL_I2C_Init+0xe8>
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005b7e:	fb02 f303 	mul.w	r3, r2, r3
 8005b82:	4a69      	ldr	r2, [pc, #420]	@ (8005d28 <HAL_I2C_Init+0x284>)
 8005b84:	fba2 2303 	umull	r2, r3, r2, r3
 8005b88:	099b      	lsrs	r3, r3, #6
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	6812      	ldr	r2, [r2, #0]
 8005b90:	430b      	orrs	r3, r1
 8005b92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005b9e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	495c      	ldr	r1, [pc, #368]	@ (8005d18 <HAL_I2C_Init+0x274>)
 8005ba8:	428b      	cmp	r3, r1
 8005baa:	d819      	bhi.n	8005be0 <HAL_I2C_Init+0x13c>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	1e59      	subs	r1, r3, #1
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	005b      	lsls	r3, r3, #1
 8005bb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bba:	1c59      	adds	r1, r3, #1
 8005bbc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005bc0:	400b      	ands	r3, r1
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00a      	beq.n	8005bdc <HAL_I2C_Init+0x138>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	1e59      	subs	r1, r3, #1
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	005b      	lsls	r3, r3, #1
 8005bd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bda:	e051      	b.n	8005c80 <HAL_I2C_Init+0x1dc>
 8005bdc:	2304      	movs	r3, #4
 8005bde:	e04f      	b.n	8005c80 <HAL_I2C_Init+0x1dc>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d111      	bne.n	8005c0c <HAL_I2C_Init+0x168>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	1e58      	subs	r0, r3, #1
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6859      	ldr	r1, [r3, #4]
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	005b      	lsls	r3, r3, #1
 8005bf4:	440b      	add	r3, r1
 8005bf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	bf0c      	ite	eq
 8005c04:	2301      	moveq	r3, #1
 8005c06:	2300      	movne	r3, #0
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	e012      	b.n	8005c32 <HAL_I2C_Init+0x18e>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	1e58      	subs	r0, r3, #1
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6859      	ldr	r1, [r3, #4]
 8005c14:	460b      	mov	r3, r1
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	440b      	add	r3, r1
 8005c1a:	0099      	lsls	r1, r3, #2
 8005c1c:	440b      	add	r3, r1
 8005c1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c22:	3301      	adds	r3, #1
 8005c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	bf0c      	ite	eq
 8005c2c:	2301      	moveq	r3, #1
 8005c2e:	2300      	movne	r3, #0
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <HAL_I2C_Init+0x196>
 8005c36:	2301      	movs	r3, #1
 8005c38:	e022      	b.n	8005c80 <HAL_I2C_Init+0x1dc>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10e      	bne.n	8005c60 <HAL_I2C_Init+0x1bc>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	1e58      	subs	r0, r3, #1
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6859      	ldr	r1, [r3, #4]
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	005b      	lsls	r3, r3, #1
 8005c4e:	440b      	add	r3, r1
 8005c50:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c54:	3301      	adds	r3, #1
 8005c56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c5e:	e00f      	b.n	8005c80 <HAL_I2C_Init+0x1dc>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	1e58      	subs	r0, r3, #1
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6859      	ldr	r1, [r3, #4]
 8005c68:	460b      	mov	r3, r1
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	440b      	add	r3, r1
 8005c6e:	0099      	lsls	r1, r3, #2
 8005c70:	440b      	add	r3, r1
 8005c72:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c76:	3301      	adds	r3, #1
 8005c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c80:	6879      	ldr	r1, [r7, #4]
 8005c82:	6809      	ldr	r1, [r1, #0]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	69da      	ldr	r2, [r3, #28]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a1b      	ldr	r3, [r3, #32]
 8005c9a:	431a      	orrs	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005cae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	6911      	ldr	r1, [r2, #16]
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	68d2      	ldr	r2, [r2, #12]
 8005cba:	4311      	orrs	r1, r2
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	6812      	ldr	r2, [r2, #0]
 8005cc0:	430b      	orrs	r3, r1
 8005cc2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	695a      	ldr	r2, [r3, #20]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	431a      	orrs	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	430a      	orrs	r2, r1
 8005cde:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f042 0201 	orr.w	r2, r2, #1
 8005cee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2220      	movs	r2, #32
 8005cfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3710      	adds	r7, #16
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	000186a0 	.word	0x000186a0
 8005d1c:	001e847f 	.word	0x001e847f
 8005d20:	003d08ff 	.word	0x003d08ff
 8005d24:	431bde83 	.word	0x431bde83
 8005d28:	10624dd3 	.word	0x10624dd3

08005d2c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b088      	sub	sp, #32
 8005d30:	af02      	add	r7, sp, #8
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	607a      	str	r2, [r7, #4]
 8005d36:	461a      	mov	r2, r3
 8005d38:	460b      	mov	r3, r1
 8005d3a:	817b      	strh	r3, [r7, #10]
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d40:	f7fe fcdc 	bl	80046fc <HAL_GetTick>
 8005d44:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b20      	cmp	r3, #32
 8005d50:	f040 80e0 	bne.w	8005f14 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	9300      	str	r3, [sp, #0]
 8005d58:	2319      	movs	r3, #25
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	4970      	ldr	r1, [pc, #448]	@ (8005f20 <HAL_I2C_Master_Transmit+0x1f4>)
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f000 fdf4 	bl	800694c <I2C_WaitOnFlagUntilTimeout>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d001      	beq.n	8005d6e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005d6a:	2302      	movs	r3, #2
 8005d6c:	e0d3      	b.n	8005f16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d101      	bne.n	8005d7c <HAL_I2C_Master_Transmit+0x50>
 8005d78:	2302      	movs	r3, #2
 8005d7a:	e0cc      	b.n	8005f16 <HAL_I2C_Master_Transmit+0x1ea>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0301 	and.w	r3, r3, #1
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d007      	beq.n	8005da2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f042 0201 	orr.w	r2, r2, #1
 8005da0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005db0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2221      	movs	r2, #33	@ 0x21
 8005db6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2210      	movs	r2, #16
 8005dbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	893a      	ldrh	r2, [r7, #8]
 8005dd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	4a50      	ldr	r2, [pc, #320]	@ (8005f24 <HAL_I2C_Master_Transmit+0x1f8>)
 8005de2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005de4:	8979      	ldrh	r1, [r7, #10]
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	6a3a      	ldr	r2, [r7, #32]
 8005dea:	68f8      	ldr	r0, [r7, #12]
 8005dec:	f000 fbc8 	bl	8006580 <I2C_MasterRequestWrite>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d001      	beq.n	8005dfa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e08d      	b.n	8005f16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	613b      	str	r3, [r7, #16]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	695b      	ldr	r3, [r3, #20]
 8005e04:	613b      	str	r3, [r7, #16]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	613b      	str	r3, [r7, #16]
 8005e0e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005e10:	e066      	b.n	8005ee0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	6a39      	ldr	r1, [r7, #32]
 8005e16:	68f8      	ldr	r0, [r7, #12]
 8005e18:	f000 feb2 	bl	8006b80 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00d      	beq.n	8005e3e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e26:	2b04      	cmp	r3, #4
 8005e28:	d107      	bne.n	8005e3a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e06b      	b.n	8005f16 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e42:	781a      	ldrb	r2, [r3, #0]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e4e:	1c5a      	adds	r2, r3, #1
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	b29a      	uxth	r2, r3
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e66:	3b01      	subs	r3, #1
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	695b      	ldr	r3, [r3, #20]
 8005e74:	f003 0304 	and.w	r3, r3, #4
 8005e78:	2b04      	cmp	r3, #4
 8005e7a:	d11b      	bne.n	8005eb4 <HAL_I2C_Master_Transmit+0x188>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d017      	beq.n	8005eb4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e88:	781a      	ldrb	r2, [r3, #0]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e94:	1c5a      	adds	r2, r3, #1
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eac:	3b01      	subs	r3, #1
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	6a39      	ldr	r1, [r7, #32]
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f000 fea9 	bl	8006c10 <I2C_WaitOnBTFFlagUntilTimeout>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d00d      	beq.n	8005ee0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec8:	2b04      	cmp	r3, #4
 8005eca:	d107      	bne.n	8005edc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005eda:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e01a      	b.n	8005f16 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d194      	bne.n	8005e12 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ef6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2220      	movs	r2, #32
 8005efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005f10:	2300      	movs	r3, #0
 8005f12:	e000      	b.n	8005f16 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005f14:	2302      	movs	r3, #2
  }
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3718      	adds	r7, #24
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	00100002 	.word	0x00100002
 8005f24:	ffff0000 	.word	0xffff0000

08005f28 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b08c      	sub	sp, #48	@ 0x30
 8005f2c:	af02      	add	r7, sp, #8
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	607a      	str	r2, [r7, #4]
 8005f32:	461a      	mov	r2, r3
 8005f34:	460b      	mov	r3, r1
 8005f36:	817b      	strh	r3, [r7, #10]
 8005f38:	4613      	mov	r3, r2
 8005f3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f3c:	f7fe fbde 	bl	80046fc <HAL_GetTick>
 8005f40:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b20      	cmp	r3, #32
 8005f4c:	f040 8217 	bne.w	800637e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f52:	9300      	str	r3, [sp, #0]
 8005f54:	2319      	movs	r3, #25
 8005f56:	2201      	movs	r2, #1
 8005f58:	497c      	ldr	r1, [pc, #496]	@ (800614c <HAL_I2C_Master_Receive+0x224>)
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f000 fcf6 	bl	800694c <I2C_WaitOnFlagUntilTimeout>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d001      	beq.n	8005f6a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005f66:	2302      	movs	r3, #2
 8005f68:	e20a      	b.n	8006380 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d101      	bne.n	8005f78 <HAL_I2C_Master_Receive+0x50>
 8005f74:	2302      	movs	r3, #2
 8005f76:	e203      	b.n	8006380 <HAL_I2C_Master_Receive+0x458>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d007      	beq.n	8005f9e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f042 0201 	orr.w	r2, r2, #1
 8005f9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005fac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2222      	movs	r2, #34	@ 0x22
 8005fb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2210      	movs	r2, #16
 8005fba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	893a      	ldrh	r2, [r7, #8]
 8005fce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	4a5c      	ldr	r2, [pc, #368]	@ (8006150 <HAL_I2C_Master_Receive+0x228>)
 8005fde:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005fe0:	8979      	ldrh	r1, [r7, #10]
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f000 fb4c 	bl	8006684 <I2C_MasterRequestRead>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d001      	beq.n	8005ff6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e1c4      	b.n	8006380 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d113      	bne.n	8006026 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ffe:	2300      	movs	r3, #0
 8006000:	623b      	str	r3, [r7, #32]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	695b      	ldr	r3, [r3, #20]
 8006008:	623b      	str	r3, [r7, #32]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	699b      	ldr	r3, [r3, #24]
 8006010:	623b      	str	r3, [r7, #32]
 8006012:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006022:	601a      	str	r2, [r3, #0]
 8006024:	e198      	b.n	8006358 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800602a:	2b01      	cmp	r3, #1
 800602c:	d11b      	bne.n	8006066 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800603c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800603e:	2300      	movs	r3, #0
 8006040:	61fb      	str	r3, [r7, #28]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	695b      	ldr	r3, [r3, #20]
 8006048:	61fb      	str	r3, [r7, #28]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	699b      	ldr	r3, [r3, #24]
 8006050:	61fb      	str	r3, [r7, #28]
 8006052:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006062:	601a      	str	r2, [r3, #0]
 8006064:	e178      	b.n	8006358 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800606a:	2b02      	cmp	r3, #2
 800606c:	d11b      	bne.n	80060a6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800607c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800608c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800608e:	2300      	movs	r3, #0
 8006090:	61bb      	str	r3, [r7, #24]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	695b      	ldr	r3, [r3, #20]
 8006098:	61bb      	str	r3, [r7, #24]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	61bb      	str	r3, [r7, #24]
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	e158      	b.n	8006358 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80060b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060b6:	2300      	movs	r3, #0
 80060b8:	617b      	str	r3, [r7, #20]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	695b      	ldr	r3, [r3, #20]
 80060c0:	617b      	str	r3, [r7, #20]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	617b      	str	r3, [r7, #20]
 80060ca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80060cc:	e144      	b.n	8006358 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060d2:	2b03      	cmp	r3, #3
 80060d4:	f200 80f1 	bhi.w	80062ba <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d123      	bne.n	8006128 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060e2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f000 fddb 	bl	8006ca0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d001      	beq.n	80060f4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e145      	b.n	8006380 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	691a      	ldr	r2, [r3, #16]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060fe:	b2d2      	uxtb	r2, r2
 8006100:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006106:	1c5a      	adds	r2, r3, #1
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006110:	3b01      	subs	r3, #1
 8006112:	b29a      	uxth	r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800611c:	b29b      	uxth	r3, r3
 800611e:	3b01      	subs	r3, #1
 8006120:	b29a      	uxth	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006126:	e117      	b.n	8006358 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800612c:	2b02      	cmp	r3, #2
 800612e:	d14e      	bne.n	80061ce <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006132:	9300      	str	r3, [sp, #0]
 8006134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006136:	2200      	movs	r2, #0
 8006138:	4906      	ldr	r1, [pc, #24]	@ (8006154 <HAL_I2C_Master_Receive+0x22c>)
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	f000 fc06 	bl	800694c <I2C_WaitOnFlagUntilTimeout>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d008      	beq.n	8006158 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e11a      	b.n	8006380 <HAL_I2C_Master_Receive+0x458>
 800614a:	bf00      	nop
 800614c:	00100002 	.word	0x00100002
 8006150:	ffff0000 	.word	0xffff0000
 8006154:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006166:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	691a      	ldr	r2, [r3, #16]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006172:	b2d2      	uxtb	r2, r2
 8006174:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800617a:	1c5a      	adds	r2, r3, #1
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006184:	3b01      	subs	r3, #1
 8006186:	b29a      	uxth	r2, r3
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006190:	b29b      	uxth	r3, r3
 8006192:	3b01      	subs	r3, #1
 8006194:	b29a      	uxth	r2, r3
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	691a      	ldr	r2, [r3, #16]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a4:	b2d2      	uxtb	r2, r2
 80061a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ac:	1c5a      	adds	r2, r3, #1
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061b6:	3b01      	subs	r3, #1
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	3b01      	subs	r3, #1
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80061cc:	e0c4      	b.n	8006358 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80061ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d0:	9300      	str	r3, [sp, #0]
 80061d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d4:	2200      	movs	r2, #0
 80061d6:	496c      	ldr	r1, [pc, #432]	@ (8006388 <HAL_I2C_Master_Receive+0x460>)
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f000 fbb7 	bl	800694c <I2C_WaitOnFlagUntilTimeout>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d001      	beq.n	80061e8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e0cb      	b.n	8006380 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	691a      	ldr	r2, [r3, #16]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006202:	b2d2      	uxtb	r2, r2
 8006204:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800620a:	1c5a      	adds	r2, r3, #1
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006214:	3b01      	subs	r3, #1
 8006216:	b29a      	uxth	r2, r3
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006220:	b29b      	uxth	r3, r3
 8006222:	3b01      	subs	r3, #1
 8006224:	b29a      	uxth	r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800622a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622c:	9300      	str	r3, [sp, #0]
 800622e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006230:	2200      	movs	r2, #0
 8006232:	4955      	ldr	r1, [pc, #340]	@ (8006388 <HAL_I2C_Master_Receive+0x460>)
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	f000 fb89 	bl	800694c <I2C_WaitOnFlagUntilTimeout>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d001      	beq.n	8006244 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e09d      	b.n	8006380 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006252:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	691a      	ldr	r2, [r3, #16]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625e:	b2d2      	uxtb	r2, r2
 8006260:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006266:	1c5a      	adds	r2, r3, #1
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006270:	3b01      	subs	r3, #1
 8006272:	b29a      	uxth	r2, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800627c:	b29b      	uxth	r3, r3
 800627e:	3b01      	subs	r3, #1
 8006280:	b29a      	uxth	r2, r3
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	691a      	ldr	r2, [r3, #16]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006290:	b2d2      	uxtb	r2, r2
 8006292:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006298:	1c5a      	adds	r2, r3, #1
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062a2:	3b01      	subs	r3, #1
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	3b01      	subs	r3, #1
 80062b2:	b29a      	uxth	r2, r3
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80062b8:	e04e      	b.n	8006358 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062bc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f000 fcee 	bl	8006ca0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d001      	beq.n	80062ce <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e058      	b.n	8006380 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	691a      	ldr	r2, [r3, #16]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d8:	b2d2      	uxtb	r2, r2
 80062da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e0:	1c5a      	adds	r2, r3, #1
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062ea:	3b01      	subs	r3, #1
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	3b01      	subs	r3, #1
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	695b      	ldr	r3, [r3, #20]
 8006306:	f003 0304 	and.w	r3, r3, #4
 800630a:	2b04      	cmp	r3, #4
 800630c:	d124      	bne.n	8006358 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006312:	2b03      	cmp	r3, #3
 8006314:	d107      	bne.n	8006326 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006324:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	691a      	ldr	r2, [r3, #16]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006330:	b2d2      	uxtb	r2, r2
 8006332:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006338:	1c5a      	adds	r2, r3, #1
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006342:	3b01      	subs	r3, #1
 8006344:	b29a      	uxth	r2, r3
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800634e:	b29b      	uxth	r3, r3
 8006350:	3b01      	subs	r3, #1
 8006352:	b29a      	uxth	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800635c:	2b00      	cmp	r3, #0
 800635e:	f47f aeb6 	bne.w	80060ce <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2220      	movs	r2, #32
 8006366:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800637a:	2300      	movs	r3, #0
 800637c:	e000      	b.n	8006380 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800637e:	2302      	movs	r3, #2
  }
}
 8006380:	4618      	mov	r0, r3
 8006382:	3728      	adds	r7, #40	@ 0x28
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	00010004 	.word	0x00010004

0800638c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b088      	sub	sp, #32
 8006390:	af02      	add	r7, sp, #8
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	4608      	mov	r0, r1
 8006396:	4611      	mov	r1, r2
 8006398:	461a      	mov	r2, r3
 800639a:	4603      	mov	r3, r0
 800639c:	817b      	strh	r3, [r7, #10]
 800639e:	460b      	mov	r3, r1
 80063a0:	813b      	strh	r3, [r7, #8]
 80063a2:	4613      	mov	r3, r2
 80063a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80063a6:	f7fe f9a9 	bl	80046fc <HAL_GetTick>
 80063aa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	2b20      	cmp	r3, #32
 80063b6:	f040 80d9 	bne.w	800656c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	9300      	str	r3, [sp, #0]
 80063be:	2319      	movs	r3, #25
 80063c0:	2201      	movs	r2, #1
 80063c2:	496d      	ldr	r1, [pc, #436]	@ (8006578 <HAL_I2C_Mem_Write+0x1ec>)
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	f000 fac1 	bl	800694c <I2C_WaitOnFlagUntilTimeout>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d001      	beq.n	80063d4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80063d0:	2302      	movs	r3, #2
 80063d2:	e0cc      	b.n	800656e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d101      	bne.n	80063e2 <HAL_I2C_Mem_Write+0x56>
 80063de:	2302      	movs	r3, #2
 80063e0:	e0c5      	b.n	800656e <HAL_I2C_Mem_Write+0x1e2>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0301 	and.w	r3, r3, #1
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d007      	beq.n	8006408 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f042 0201 	orr.w	r2, r2, #1
 8006406:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006416:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2221      	movs	r2, #33	@ 0x21
 800641c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2240      	movs	r2, #64	@ 0x40
 8006424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6a3a      	ldr	r2, [r7, #32]
 8006432:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006438:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800643e:	b29a      	uxth	r2, r3
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	4a4d      	ldr	r2, [pc, #308]	@ (800657c <HAL_I2C_Mem_Write+0x1f0>)
 8006448:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800644a:	88f8      	ldrh	r0, [r7, #6]
 800644c:	893a      	ldrh	r2, [r7, #8]
 800644e:	8979      	ldrh	r1, [r7, #10]
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	9301      	str	r3, [sp, #4]
 8006454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006456:	9300      	str	r3, [sp, #0]
 8006458:	4603      	mov	r3, r0
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f000 f9e0 	bl	8006820 <I2C_RequestMemoryWrite>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d052      	beq.n	800650c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e081      	b.n	800656e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800646a:	697a      	ldr	r2, [r7, #20]
 800646c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	f000 fb86 	bl	8006b80 <I2C_WaitOnTXEFlagUntilTimeout>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00d      	beq.n	8006496 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800647e:	2b04      	cmp	r3, #4
 8006480:	d107      	bne.n	8006492 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006490:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e06b      	b.n	800656e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800649a:	781a      	ldrb	r2, [r3, #0]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a6:	1c5a      	adds	r2, r3, #1
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064b0:	3b01      	subs	r3, #1
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064bc:	b29b      	uxth	r3, r3
 80064be:	3b01      	subs	r3, #1
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	695b      	ldr	r3, [r3, #20]
 80064cc:	f003 0304 	and.w	r3, r3, #4
 80064d0:	2b04      	cmp	r3, #4
 80064d2:	d11b      	bne.n	800650c <HAL_I2C_Mem_Write+0x180>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d017      	beq.n	800650c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e0:	781a      	ldrb	r2, [r3, #0]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ec:	1c5a      	adds	r2, r3, #1
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064f6:	3b01      	subs	r3, #1
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006502:	b29b      	uxth	r3, r3
 8006504:	3b01      	subs	r3, #1
 8006506:	b29a      	uxth	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1aa      	bne.n	800646a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006514:	697a      	ldr	r2, [r7, #20]
 8006516:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f000 fb79 	bl	8006c10 <I2C_WaitOnBTFFlagUntilTimeout>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00d      	beq.n	8006540 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006528:	2b04      	cmp	r3, #4
 800652a:	d107      	bne.n	800653c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800653a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e016      	b.n	800656e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800654e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2220      	movs	r2, #32
 8006554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006568:	2300      	movs	r3, #0
 800656a:	e000      	b.n	800656e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800656c:	2302      	movs	r3, #2
  }
}
 800656e:	4618      	mov	r0, r3
 8006570:	3718      	adds	r7, #24
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	00100002 	.word	0x00100002
 800657c:	ffff0000 	.word	0xffff0000

08006580 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b088      	sub	sp, #32
 8006584:	af02      	add	r7, sp, #8
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	607a      	str	r2, [r7, #4]
 800658a:	603b      	str	r3, [r7, #0]
 800658c:	460b      	mov	r3, r1
 800658e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006594:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	2b08      	cmp	r3, #8
 800659a:	d006      	beq.n	80065aa <I2C_MasterRequestWrite+0x2a>
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d003      	beq.n	80065aa <I2C_MasterRequestWrite+0x2a>
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80065a8:	d108      	bne.n	80065bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80065b8:	601a      	str	r2, [r3, #0]
 80065ba:	e00b      	b.n	80065d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065c0:	2b12      	cmp	r3, #18
 80065c2:	d107      	bne.n	80065d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80065d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	9300      	str	r3, [sp, #0]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	f000 f9b3 	bl	800694c <I2C_WaitOnFlagUntilTimeout>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00d      	beq.n	8006608 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065fa:	d103      	bne.n	8006604 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006602:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	e035      	b.n	8006674 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006610:	d108      	bne.n	8006624 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006612:	897b      	ldrh	r3, [r7, #10]
 8006614:	b2db      	uxtb	r3, r3
 8006616:	461a      	mov	r2, r3
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006620:	611a      	str	r2, [r3, #16]
 8006622:	e01b      	b.n	800665c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006624:	897b      	ldrh	r3, [r7, #10]
 8006626:	11db      	asrs	r3, r3, #7
 8006628:	b2db      	uxtb	r3, r3
 800662a:	f003 0306 	and.w	r3, r3, #6
 800662e:	b2db      	uxtb	r3, r3
 8006630:	f063 030f 	orn	r3, r3, #15
 8006634:	b2da      	uxtb	r2, r3
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	490e      	ldr	r1, [pc, #56]	@ (800667c <I2C_MasterRequestWrite+0xfc>)
 8006642:	68f8      	ldr	r0, [r7, #12]
 8006644:	f000 f9fc 	bl	8006a40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d001      	beq.n	8006652 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	e010      	b.n	8006674 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006652:	897b      	ldrh	r3, [r7, #10]
 8006654:	b2da      	uxtb	r2, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	4907      	ldr	r1, [pc, #28]	@ (8006680 <I2C_MasterRequestWrite+0x100>)
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f000 f9ec 	bl	8006a40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d001      	beq.n	8006672 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e000      	b.n	8006674 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006672:	2300      	movs	r3, #0
}
 8006674:	4618      	mov	r0, r3
 8006676:	3718      	adds	r7, #24
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	00010008 	.word	0x00010008
 8006680:	00010002 	.word	0x00010002

08006684 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b088      	sub	sp, #32
 8006688:	af02      	add	r7, sp, #8
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	607a      	str	r2, [r7, #4]
 800668e:	603b      	str	r3, [r7, #0]
 8006690:	460b      	mov	r3, r1
 8006692:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006698:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80066a8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	2b08      	cmp	r3, #8
 80066ae:	d006      	beq.n	80066be <I2C_MasterRequestRead+0x3a>
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d003      	beq.n	80066be <I2C_MasterRequestRead+0x3a>
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80066bc:	d108      	bne.n	80066d0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80066cc:	601a      	str	r2, [r3, #0]
 80066ce:	e00b      	b.n	80066e8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066d4:	2b11      	cmp	r3, #17
 80066d6:	d107      	bne.n	80066e8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80066e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	9300      	str	r3, [sp, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f000 f929 	bl	800694c <I2C_WaitOnFlagUntilTimeout>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00d      	beq.n	800671c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800670a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800670e:	d103      	bne.n	8006718 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006716:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e079      	b.n	8006810 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006724:	d108      	bne.n	8006738 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006726:	897b      	ldrh	r3, [r7, #10]
 8006728:	b2db      	uxtb	r3, r3
 800672a:	f043 0301 	orr.w	r3, r3, #1
 800672e:	b2da      	uxtb	r2, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	611a      	str	r2, [r3, #16]
 8006736:	e05f      	b.n	80067f8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006738:	897b      	ldrh	r3, [r7, #10]
 800673a:	11db      	asrs	r3, r3, #7
 800673c:	b2db      	uxtb	r3, r3
 800673e:	f003 0306 	and.w	r3, r3, #6
 8006742:	b2db      	uxtb	r3, r3
 8006744:	f063 030f 	orn	r3, r3, #15
 8006748:	b2da      	uxtb	r2, r3
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	4930      	ldr	r1, [pc, #192]	@ (8006818 <I2C_MasterRequestRead+0x194>)
 8006756:	68f8      	ldr	r0, [r7, #12]
 8006758:	f000 f972 	bl	8006a40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d001      	beq.n	8006766 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e054      	b.n	8006810 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006766:	897b      	ldrh	r3, [r7, #10]
 8006768:	b2da      	uxtb	r2, r3
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	4929      	ldr	r1, [pc, #164]	@ (800681c <I2C_MasterRequestRead+0x198>)
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f000 f962 	bl	8006a40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d001      	beq.n	8006786 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e044      	b.n	8006810 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006786:	2300      	movs	r3, #0
 8006788:	613b      	str	r3, [r7, #16]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	695b      	ldr	r3, [r3, #20]
 8006790:	613b      	str	r3, [r7, #16]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	613b      	str	r3, [r7, #16]
 800679a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80067aa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80067b8:	68f8      	ldr	r0, [r7, #12]
 80067ba:	f000 f8c7 	bl	800694c <I2C_WaitOnFlagUntilTimeout>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00d      	beq.n	80067e0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067d2:	d103      	bne.n	80067dc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80067da:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e017      	b.n	8006810 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80067e0:	897b      	ldrh	r3, [r7, #10]
 80067e2:	11db      	asrs	r3, r3, #7
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	f003 0306 	and.w	r3, r3, #6
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	f063 030e 	orn	r3, r3, #14
 80067f0:	b2da      	uxtb	r2, r3
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	4907      	ldr	r1, [pc, #28]	@ (800681c <I2C_MasterRequestRead+0x198>)
 80067fe:	68f8      	ldr	r0, [r7, #12]
 8006800:	f000 f91e 	bl	8006a40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d001      	beq.n	800680e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e000      	b.n	8006810 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3718      	adds	r7, #24
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	00010008 	.word	0x00010008
 800681c:	00010002 	.word	0x00010002

08006820 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b088      	sub	sp, #32
 8006824:	af02      	add	r7, sp, #8
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	4608      	mov	r0, r1
 800682a:	4611      	mov	r1, r2
 800682c:	461a      	mov	r2, r3
 800682e:	4603      	mov	r3, r0
 8006830:	817b      	strh	r3, [r7, #10]
 8006832:	460b      	mov	r3, r1
 8006834:	813b      	strh	r3, [r7, #8]
 8006836:	4613      	mov	r3, r2
 8006838:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006848:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800684a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800684c:	9300      	str	r3, [sp, #0]
 800684e:	6a3b      	ldr	r3, [r7, #32]
 8006850:	2200      	movs	r2, #0
 8006852:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	f000 f878 	bl	800694c <I2C_WaitOnFlagUntilTimeout>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00d      	beq.n	800687e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800686c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006870:	d103      	bne.n	800687a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006878:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e05f      	b.n	800693e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800687e:	897b      	ldrh	r3, [r7, #10]
 8006880:	b2db      	uxtb	r3, r3
 8006882:	461a      	mov	r2, r3
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800688c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800688e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006890:	6a3a      	ldr	r2, [r7, #32]
 8006892:	492d      	ldr	r1, [pc, #180]	@ (8006948 <I2C_RequestMemoryWrite+0x128>)
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f000 f8d3 	bl	8006a40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d001      	beq.n	80068a4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e04c      	b.n	800693e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068a4:	2300      	movs	r3, #0
 80068a6:	617b      	str	r3, [r7, #20]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	617b      	str	r3, [r7, #20]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	617b      	str	r3, [r7, #20]
 80068b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068bc:	6a39      	ldr	r1, [r7, #32]
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	f000 f95e 	bl	8006b80 <I2C_WaitOnTXEFlagUntilTimeout>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00d      	beq.n	80068e6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ce:	2b04      	cmp	r3, #4
 80068d0:	d107      	bne.n	80068e2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e02b      	b.n	800693e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80068e6:	88fb      	ldrh	r3, [r7, #6]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d105      	bne.n	80068f8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80068ec:	893b      	ldrh	r3, [r7, #8]
 80068ee:	b2da      	uxtb	r2, r3
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	611a      	str	r2, [r3, #16]
 80068f6:	e021      	b.n	800693c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80068f8:	893b      	ldrh	r3, [r7, #8]
 80068fa:	0a1b      	lsrs	r3, r3, #8
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	b2da      	uxtb	r2, r3
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006906:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006908:	6a39      	ldr	r1, [r7, #32]
 800690a:	68f8      	ldr	r0, [r7, #12]
 800690c:	f000 f938 	bl	8006b80 <I2C_WaitOnTXEFlagUntilTimeout>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00d      	beq.n	8006932 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800691a:	2b04      	cmp	r3, #4
 800691c:	d107      	bne.n	800692e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800692c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e005      	b.n	800693e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006932:	893b      	ldrh	r3, [r7, #8]
 8006934:	b2da      	uxtb	r2, r3
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3718      	adds	r7, #24
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	00010002 	.word	0x00010002

0800694c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	603b      	str	r3, [r7, #0]
 8006958:	4613      	mov	r3, r2
 800695a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800695c:	e048      	b.n	80069f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006964:	d044      	beq.n	80069f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006966:	f7fd fec9 	bl	80046fc <HAL_GetTick>
 800696a:	4602      	mov	r2, r0
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	683a      	ldr	r2, [r7, #0]
 8006972:	429a      	cmp	r2, r3
 8006974:	d302      	bcc.n	800697c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d139      	bne.n	80069f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	0c1b      	lsrs	r3, r3, #16
 8006980:	b2db      	uxtb	r3, r3
 8006982:	2b01      	cmp	r3, #1
 8006984:	d10d      	bne.n	80069a2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	695b      	ldr	r3, [r3, #20]
 800698c:	43da      	mvns	r2, r3
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	4013      	ands	r3, r2
 8006992:	b29b      	uxth	r3, r3
 8006994:	2b00      	cmp	r3, #0
 8006996:	bf0c      	ite	eq
 8006998:	2301      	moveq	r3, #1
 800699a:	2300      	movne	r3, #0
 800699c:	b2db      	uxtb	r3, r3
 800699e:	461a      	mov	r2, r3
 80069a0:	e00c      	b.n	80069bc <I2C_WaitOnFlagUntilTimeout+0x70>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	43da      	mvns	r2, r3
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	4013      	ands	r3, r2
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	bf0c      	ite	eq
 80069b4:	2301      	moveq	r3, #1
 80069b6:	2300      	movne	r3, #0
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	461a      	mov	r2, r3
 80069bc:	79fb      	ldrb	r3, [r7, #7]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d116      	bne.n	80069f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2220      	movs	r2, #32
 80069cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069dc:	f043 0220 	orr.w	r2, r3, #32
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e023      	b.n	8006a38 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	0c1b      	lsrs	r3, r3, #16
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d10d      	bne.n	8006a16 <I2C_WaitOnFlagUntilTimeout+0xca>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	695b      	ldr	r3, [r3, #20]
 8006a00:	43da      	mvns	r2, r3
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	4013      	ands	r3, r2
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	bf0c      	ite	eq
 8006a0c:	2301      	moveq	r3, #1
 8006a0e:	2300      	movne	r3, #0
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	461a      	mov	r2, r3
 8006a14:	e00c      	b.n	8006a30 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	43da      	mvns	r2, r3
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	4013      	ands	r3, r2
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	bf0c      	ite	eq
 8006a28:	2301      	moveq	r3, #1
 8006a2a:	2300      	movne	r3, #0
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	461a      	mov	r2, r3
 8006a30:	79fb      	ldrb	r3, [r7, #7]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d093      	beq.n	800695e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]
 8006a4c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a4e:	e071      	b.n	8006b34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	695b      	ldr	r3, [r3, #20]
 8006a56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a5e:	d123      	bne.n	8006aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a6e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006a78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2220      	movs	r2, #32
 8006a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a94:	f043 0204 	orr.w	r2, r3, #4
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e067      	b.n	8006b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006aae:	d041      	beq.n	8006b34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ab0:	f7fd fe24 	bl	80046fc <HAL_GetTick>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d302      	bcc.n	8006ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d136      	bne.n	8006b34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	0c1b      	lsrs	r3, r3, #16
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d10c      	bne.n	8006aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	43da      	mvns	r2, r3
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	4013      	ands	r3, r2
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	bf14      	ite	ne
 8006ae2:	2301      	movne	r3, #1
 8006ae4:	2300      	moveq	r3, #0
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	e00b      	b.n	8006b02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	699b      	ldr	r3, [r3, #24]
 8006af0:	43da      	mvns	r2, r3
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	4013      	ands	r3, r2
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	bf14      	ite	ne
 8006afc:	2301      	movne	r3, #1
 8006afe:	2300      	moveq	r3, #0
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d016      	beq.n	8006b34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2220      	movs	r2, #32
 8006b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b20:	f043 0220 	orr.w	r2, r3, #32
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e021      	b.n	8006b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	0c1b      	lsrs	r3, r3, #16
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d10c      	bne.n	8006b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	695b      	ldr	r3, [r3, #20]
 8006b44:	43da      	mvns	r2, r3
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	4013      	ands	r3, r2
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	bf14      	ite	ne
 8006b50:	2301      	movne	r3, #1
 8006b52:	2300      	moveq	r3, #0
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	e00b      	b.n	8006b70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	699b      	ldr	r3, [r3, #24]
 8006b5e:	43da      	mvns	r2, r3
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	4013      	ands	r3, r2
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	bf14      	ite	ne
 8006b6a:	2301      	movne	r3, #1
 8006b6c:	2300      	moveq	r3, #0
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f47f af6d 	bne.w	8006a50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3710      	adds	r7, #16
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b8c:	e034      	b.n	8006bf8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	f000 f8e3 	bl	8006d5a <I2C_IsAcknowledgeFailed>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d001      	beq.n	8006b9e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e034      	b.n	8006c08 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ba4:	d028      	beq.n	8006bf8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ba6:	f7fd fda9 	bl	80046fc <HAL_GetTick>
 8006baa:	4602      	mov	r2, r0
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	1ad3      	subs	r3, r2, r3
 8006bb0:	68ba      	ldr	r2, [r7, #8]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d302      	bcc.n	8006bbc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d11d      	bne.n	8006bf8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	695b      	ldr	r3, [r3, #20]
 8006bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bc6:	2b80      	cmp	r3, #128	@ 0x80
 8006bc8:	d016      	beq.n	8006bf8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2220      	movs	r2, #32
 8006bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006be4:	f043 0220 	orr.w	r2, r3, #32
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e007      	b.n	8006c08 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	695b      	ldr	r3, [r3, #20]
 8006bfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c02:	2b80      	cmp	r3, #128	@ 0x80
 8006c04:	d1c3      	bne.n	8006b8e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3710      	adds	r7, #16
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006c1c:	e034      	b.n	8006c88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f000 f89b 	bl	8006d5a <I2C_IsAcknowledgeFailed>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d001      	beq.n	8006c2e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e034      	b.n	8006c98 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c34:	d028      	beq.n	8006c88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c36:	f7fd fd61 	bl	80046fc <HAL_GetTick>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	68ba      	ldr	r2, [r7, #8]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d302      	bcc.n	8006c4c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d11d      	bne.n	8006c88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	695b      	ldr	r3, [r3, #20]
 8006c52:	f003 0304 	and.w	r3, r3, #4
 8006c56:	2b04      	cmp	r3, #4
 8006c58:	d016      	beq.n	8006c88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2220      	movs	r2, #32
 8006c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c74:	f043 0220 	orr.w	r2, r3, #32
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	e007      	b.n	8006c98 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	695b      	ldr	r3, [r3, #20]
 8006c8e:	f003 0304 	and.w	r3, r3, #4
 8006c92:	2b04      	cmp	r3, #4
 8006c94:	d1c3      	bne.n	8006c1e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006cac:	e049      	b.n	8006d42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	695b      	ldr	r3, [r3, #20]
 8006cb4:	f003 0310 	and.w	r3, r3, #16
 8006cb8:	2b10      	cmp	r3, #16
 8006cba:	d119      	bne.n	8006cf0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f06f 0210 	mvn.w	r2, #16
 8006cc4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2220      	movs	r2, #32
 8006cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e030      	b.n	8006d52 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cf0:	f7fd fd04 	bl	80046fc <HAL_GetTick>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	68ba      	ldr	r2, [r7, #8]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d302      	bcc.n	8006d06 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d11d      	bne.n	8006d42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	695b      	ldr	r3, [r3, #20]
 8006d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d10:	2b40      	cmp	r3, #64	@ 0x40
 8006d12:	d016      	beq.n	8006d42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2220      	movs	r2, #32
 8006d1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d2e:	f043 0220 	orr.w	r2, r3, #32
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e007      	b.n	8006d52 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	695b      	ldr	r3, [r3, #20]
 8006d48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d4c:	2b40      	cmp	r3, #64	@ 0x40
 8006d4e:	d1ae      	bne.n	8006cae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	b083      	sub	sp, #12
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	695b      	ldr	r3, [r3, #20]
 8006d68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d70:	d11b      	bne.n	8006daa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006d7a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2220      	movs	r2, #32
 8006d86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d96:	f043 0204 	orr.w	r2, r3, #4
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e000      	b.n	8006dac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b086      	sub	sp, #24
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d101      	bne.n	8006dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e267      	b.n	800729a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0301 	and.w	r3, r3, #1
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d075      	beq.n	8006ec2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006dd6:	4b88      	ldr	r3, [pc, #544]	@ (8006ff8 <HAL_RCC_OscConfig+0x240>)
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	f003 030c 	and.w	r3, r3, #12
 8006dde:	2b04      	cmp	r3, #4
 8006de0:	d00c      	beq.n	8006dfc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006de2:	4b85      	ldr	r3, [pc, #532]	@ (8006ff8 <HAL_RCC_OscConfig+0x240>)
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006dea:	2b08      	cmp	r3, #8
 8006dec:	d112      	bne.n	8006e14 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006dee:	4b82      	ldr	r3, [pc, #520]	@ (8006ff8 <HAL_RCC_OscConfig+0x240>)
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006df6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006dfa:	d10b      	bne.n	8006e14 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dfc:	4b7e      	ldr	r3, [pc, #504]	@ (8006ff8 <HAL_RCC_OscConfig+0x240>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d05b      	beq.n	8006ec0 <HAL_RCC_OscConfig+0x108>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d157      	bne.n	8006ec0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	e242      	b.n	800729a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e1c:	d106      	bne.n	8006e2c <HAL_RCC_OscConfig+0x74>
 8006e1e:	4b76      	ldr	r3, [pc, #472]	@ (8006ff8 <HAL_RCC_OscConfig+0x240>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a75      	ldr	r2, [pc, #468]	@ (8006ff8 <HAL_RCC_OscConfig+0x240>)
 8006e24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e28:	6013      	str	r3, [r2, #0]
 8006e2a:	e01d      	b.n	8006e68 <HAL_RCC_OscConfig+0xb0>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006e34:	d10c      	bne.n	8006e50 <HAL_RCC_OscConfig+0x98>
 8006e36:	4b70      	ldr	r3, [pc, #448]	@ (8006ff8 <HAL_RCC_OscConfig+0x240>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a6f      	ldr	r2, [pc, #444]	@ (8006ff8 <HAL_RCC_OscConfig+0x240>)
 8006e3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006e40:	6013      	str	r3, [r2, #0]
 8006e42:	4b6d      	ldr	r3, [pc, #436]	@ (8006ff8 <HAL_RCC_OscConfig+0x240>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a6c      	ldr	r2, [pc, #432]	@ (8006ff8 <HAL_RCC_OscConfig+0x240>)
 8006e48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e4c:	6013      	str	r3, [r2, #0]
 8006e4e:	e00b      	b.n	8006e68 <HAL_RCC_OscConfig+0xb0>
 8006e50:	4b69      	ldr	r3, [pc, #420]	@ (8006ff8 <HAL_RCC_OscConfig+0x240>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a68      	ldr	r2, [pc, #416]	@ (8006ff8 <HAL_RCC_OscConfig+0x240>)
 8006e56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e5a:	6013      	str	r3, [r2, #0]
 8006e5c:	4b66      	ldr	r3, [pc, #408]	@ (8006ff8 <HAL_RCC_OscConfig+0x240>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a65      	ldr	r2, [pc, #404]	@ (8006ff8 <HAL_RCC_OscConfig+0x240>)
 8006e62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d013      	beq.n	8006e98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e70:	f7fd fc44 	bl	80046fc <HAL_GetTick>
 8006e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e76:	e008      	b.n	8006e8a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e78:	f7fd fc40 	bl	80046fc <HAL_GetTick>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	2b64      	cmp	r3, #100	@ 0x64
 8006e84:	d901      	bls.n	8006e8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006e86:	2303      	movs	r3, #3
 8006e88:	e207      	b.n	800729a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e8a:	4b5b      	ldr	r3, [pc, #364]	@ (8006ff8 <HAL_RCC_OscConfig+0x240>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d0f0      	beq.n	8006e78 <HAL_RCC_OscConfig+0xc0>
 8006e96:	e014      	b.n	8006ec2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e98:	f7fd fc30 	bl	80046fc <HAL_GetTick>
 8006e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e9e:	e008      	b.n	8006eb2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ea0:	f7fd fc2c 	bl	80046fc <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	2b64      	cmp	r3, #100	@ 0x64
 8006eac:	d901      	bls.n	8006eb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e1f3      	b.n	800729a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006eb2:	4b51      	ldr	r3, [pc, #324]	@ (8006ff8 <HAL_RCC_OscConfig+0x240>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d1f0      	bne.n	8006ea0 <HAL_RCC_OscConfig+0xe8>
 8006ebe:	e000      	b.n	8006ec2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f003 0302 	and.w	r3, r3, #2
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d063      	beq.n	8006f96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006ece:	4b4a      	ldr	r3, [pc, #296]	@ (8006ff8 <HAL_RCC_OscConfig+0x240>)
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	f003 030c 	and.w	r3, r3, #12
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00b      	beq.n	8006ef2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006eda:	4b47      	ldr	r3, [pc, #284]	@ (8006ff8 <HAL_RCC_OscConfig+0x240>)
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006ee2:	2b08      	cmp	r3, #8
 8006ee4:	d11c      	bne.n	8006f20 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ee6:	4b44      	ldr	r3, [pc, #272]	@ (8006ff8 <HAL_RCC_OscConfig+0x240>)
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d116      	bne.n	8006f20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ef2:	4b41      	ldr	r3, [pc, #260]	@ (8006ff8 <HAL_RCC_OscConfig+0x240>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 0302 	and.w	r3, r3, #2
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d005      	beq.n	8006f0a <HAL_RCC_OscConfig+0x152>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d001      	beq.n	8006f0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e1c7      	b.n	800729a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f0a:	4b3b      	ldr	r3, [pc, #236]	@ (8006ff8 <HAL_RCC_OscConfig+0x240>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	00db      	lsls	r3, r3, #3
 8006f18:	4937      	ldr	r1, [pc, #220]	@ (8006ff8 <HAL_RCC_OscConfig+0x240>)
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f1e:	e03a      	b.n	8006f96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d020      	beq.n	8006f6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f28:	4b34      	ldr	r3, [pc, #208]	@ (8006ffc <HAL_RCC_OscConfig+0x244>)
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f2e:	f7fd fbe5 	bl	80046fc <HAL_GetTick>
 8006f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f34:	e008      	b.n	8006f48 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f36:	f7fd fbe1 	bl	80046fc <HAL_GetTick>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	1ad3      	subs	r3, r2, r3
 8006f40:	2b02      	cmp	r3, #2
 8006f42:	d901      	bls.n	8006f48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e1a8      	b.n	800729a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f48:	4b2b      	ldr	r3, [pc, #172]	@ (8006ff8 <HAL_RCC_OscConfig+0x240>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0302 	and.w	r3, r3, #2
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d0f0      	beq.n	8006f36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f54:	4b28      	ldr	r3, [pc, #160]	@ (8006ff8 <HAL_RCC_OscConfig+0x240>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	00db      	lsls	r3, r3, #3
 8006f62:	4925      	ldr	r1, [pc, #148]	@ (8006ff8 <HAL_RCC_OscConfig+0x240>)
 8006f64:	4313      	orrs	r3, r2
 8006f66:	600b      	str	r3, [r1, #0]
 8006f68:	e015      	b.n	8006f96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f6a:	4b24      	ldr	r3, [pc, #144]	@ (8006ffc <HAL_RCC_OscConfig+0x244>)
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f70:	f7fd fbc4 	bl	80046fc <HAL_GetTick>
 8006f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f76:	e008      	b.n	8006f8a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f78:	f7fd fbc0 	bl	80046fc <HAL_GetTick>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d901      	bls.n	8006f8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	e187      	b.n	800729a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8006ff8 <HAL_RCC_OscConfig+0x240>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 0302 	and.w	r3, r3, #2
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d1f0      	bne.n	8006f78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 0308 	and.w	r3, r3, #8
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d036      	beq.n	8007010 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	695b      	ldr	r3, [r3, #20]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d016      	beq.n	8006fd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006faa:	4b15      	ldr	r3, [pc, #84]	@ (8007000 <HAL_RCC_OscConfig+0x248>)
 8006fac:	2201      	movs	r2, #1
 8006fae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fb0:	f7fd fba4 	bl	80046fc <HAL_GetTick>
 8006fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fb6:	e008      	b.n	8006fca <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fb8:	f7fd fba0 	bl	80046fc <HAL_GetTick>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d901      	bls.n	8006fca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	e167      	b.n	800729a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fca:	4b0b      	ldr	r3, [pc, #44]	@ (8006ff8 <HAL_RCC_OscConfig+0x240>)
 8006fcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fce:	f003 0302 	and.w	r3, r3, #2
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d0f0      	beq.n	8006fb8 <HAL_RCC_OscConfig+0x200>
 8006fd6:	e01b      	b.n	8007010 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006fd8:	4b09      	ldr	r3, [pc, #36]	@ (8007000 <HAL_RCC_OscConfig+0x248>)
 8006fda:	2200      	movs	r2, #0
 8006fdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fde:	f7fd fb8d 	bl	80046fc <HAL_GetTick>
 8006fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fe4:	e00e      	b.n	8007004 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fe6:	f7fd fb89 	bl	80046fc <HAL_GetTick>
 8006fea:	4602      	mov	r2, r0
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d907      	bls.n	8007004 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e150      	b.n	800729a <HAL_RCC_OscConfig+0x4e2>
 8006ff8:	40023800 	.word	0x40023800
 8006ffc:	42470000 	.word	0x42470000
 8007000:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007004:	4b88      	ldr	r3, [pc, #544]	@ (8007228 <HAL_RCC_OscConfig+0x470>)
 8007006:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007008:	f003 0302 	and.w	r3, r3, #2
 800700c:	2b00      	cmp	r3, #0
 800700e:	d1ea      	bne.n	8006fe6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 0304 	and.w	r3, r3, #4
 8007018:	2b00      	cmp	r3, #0
 800701a:	f000 8097 	beq.w	800714c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800701e:	2300      	movs	r3, #0
 8007020:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007022:	4b81      	ldr	r3, [pc, #516]	@ (8007228 <HAL_RCC_OscConfig+0x470>)
 8007024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800702a:	2b00      	cmp	r3, #0
 800702c:	d10f      	bne.n	800704e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800702e:	2300      	movs	r3, #0
 8007030:	60bb      	str	r3, [r7, #8]
 8007032:	4b7d      	ldr	r3, [pc, #500]	@ (8007228 <HAL_RCC_OscConfig+0x470>)
 8007034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007036:	4a7c      	ldr	r2, [pc, #496]	@ (8007228 <HAL_RCC_OscConfig+0x470>)
 8007038:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800703c:	6413      	str	r3, [r2, #64]	@ 0x40
 800703e:	4b7a      	ldr	r3, [pc, #488]	@ (8007228 <HAL_RCC_OscConfig+0x470>)
 8007040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007042:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007046:	60bb      	str	r3, [r7, #8]
 8007048:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800704a:	2301      	movs	r3, #1
 800704c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800704e:	4b77      	ldr	r3, [pc, #476]	@ (800722c <HAL_RCC_OscConfig+0x474>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007056:	2b00      	cmp	r3, #0
 8007058:	d118      	bne.n	800708c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800705a:	4b74      	ldr	r3, [pc, #464]	@ (800722c <HAL_RCC_OscConfig+0x474>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a73      	ldr	r2, [pc, #460]	@ (800722c <HAL_RCC_OscConfig+0x474>)
 8007060:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007064:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007066:	f7fd fb49 	bl	80046fc <HAL_GetTick>
 800706a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800706c:	e008      	b.n	8007080 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800706e:	f7fd fb45 	bl	80046fc <HAL_GetTick>
 8007072:	4602      	mov	r2, r0
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	2b02      	cmp	r3, #2
 800707a:	d901      	bls.n	8007080 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800707c:	2303      	movs	r3, #3
 800707e:	e10c      	b.n	800729a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007080:	4b6a      	ldr	r3, [pc, #424]	@ (800722c <HAL_RCC_OscConfig+0x474>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007088:	2b00      	cmp	r3, #0
 800708a:	d0f0      	beq.n	800706e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	2b01      	cmp	r3, #1
 8007092:	d106      	bne.n	80070a2 <HAL_RCC_OscConfig+0x2ea>
 8007094:	4b64      	ldr	r3, [pc, #400]	@ (8007228 <HAL_RCC_OscConfig+0x470>)
 8007096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007098:	4a63      	ldr	r2, [pc, #396]	@ (8007228 <HAL_RCC_OscConfig+0x470>)
 800709a:	f043 0301 	orr.w	r3, r3, #1
 800709e:	6713      	str	r3, [r2, #112]	@ 0x70
 80070a0:	e01c      	b.n	80070dc <HAL_RCC_OscConfig+0x324>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	2b05      	cmp	r3, #5
 80070a8:	d10c      	bne.n	80070c4 <HAL_RCC_OscConfig+0x30c>
 80070aa:	4b5f      	ldr	r3, [pc, #380]	@ (8007228 <HAL_RCC_OscConfig+0x470>)
 80070ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070ae:	4a5e      	ldr	r2, [pc, #376]	@ (8007228 <HAL_RCC_OscConfig+0x470>)
 80070b0:	f043 0304 	orr.w	r3, r3, #4
 80070b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80070b6:	4b5c      	ldr	r3, [pc, #368]	@ (8007228 <HAL_RCC_OscConfig+0x470>)
 80070b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070ba:	4a5b      	ldr	r2, [pc, #364]	@ (8007228 <HAL_RCC_OscConfig+0x470>)
 80070bc:	f043 0301 	orr.w	r3, r3, #1
 80070c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80070c2:	e00b      	b.n	80070dc <HAL_RCC_OscConfig+0x324>
 80070c4:	4b58      	ldr	r3, [pc, #352]	@ (8007228 <HAL_RCC_OscConfig+0x470>)
 80070c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070c8:	4a57      	ldr	r2, [pc, #348]	@ (8007228 <HAL_RCC_OscConfig+0x470>)
 80070ca:	f023 0301 	bic.w	r3, r3, #1
 80070ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80070d0:	4b55      	ldr	r3, [pc, #340]	@ (8007228 <HAL_RCC_OscConfig+0x470>)
 80070d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070d4:	4a54      	ldr	r2, [pc, #336]	@ (8007228 <HAL_RCC_OscConfig+0x470>)
 80070d6:	f023 0304 	bic.w	r3, r3, #4
 80070da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d015      	beq.n	8007110 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070e4:	f7fd fb0a 	bl	80046fc <HAL_GetTick>
 80070e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070ea:	e00a      	b.n	8007102 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070ec:	f7fd fb06 	bl	80046fc <HAL_GetTick>
 80070f0:	4602      	mov	r2, r0
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d901      	bls.n	8007102 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80070fe:	2303      	movs	r3, #3
 8007100:	e0cb      	b.n	800729a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007102:	4b49      	ldr	r3, [pc, #292]	@ (8007228 <HAL_RCC_OscConfig+0x470>)
 8007104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007106:	f003 0302 	and.w	r3, r3, #2
 800710a:	2b00      	cmp	r3, #0
 800710c:	d0ee      	beq.n	80070ec <HAL_RCC_OscConfig+0x334>
 800710e:	e014      	b.n	800713a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007110:	f7fd faf4 	bl	80046fc <HAL_GetTick>
 8007114:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007116:	e00a      	b.n	800712e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007118:	f7fd faf0 	bl	80046fc <HAL_GetTick>
 800711c:	4602      	mov	r2, r0
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	1ad3      	subs	r3, r2, r3
 8007122:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007126:	4293      	cmp	r3, r2
 8007128:	d901      	bls.n	800712e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800712a:	2303      	movs	r3, #3
 800712c:	e0b5      	b.n	800729a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800712e:	4b3e      	ldr	r3, [pc, #248]	@ (8007228 <HAL_RCC_OscConfig+0x470>)
 8007130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007132:	f003 0302 	and.w	r3, r3, #2
 8007136:	2b00      	cmp	r3, #0
 8007138:	d1ee      	bne.n	8007118 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800713a:	7dfb      	ldrb	r3, [r7, #23]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d105      	bne.n	800714c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007140:	4b39      	ldr	r3, [pc, #228]	@ (8007228 <HAL_RCC_OscConfig+0x470>)
 8007142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007144:	4a38      	ldr	r2, [pc, #224]	@ (8007228 <HAL_RCC_OscConfig+0x470>)
 8007146:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800714a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	699b      	ldr	r3, [r3, #24]
 8007150:	2b00      	cmp	r3, #0
 8007152:	f000 80a1 	beq.w	8007298 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007156:	4b34      	ldr	r3, [pc, #208]	@ (8007228 <HAL_RCC_OscConfig+0x470>)
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	f003 030c 	and.w	r3, r3, #12
 800715e:	2b08      	cmp	r3, #8
 8007160:	d05c      	beq.n	800721c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	699b      	ldr	r3, [r3, #24]
 8007166:	2b02      	cmp	r3, #2
 8007168:	d141      	bne.n	80071ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800716a:	4b31      	ldr	r3, [pc, #196]	@ (8007230 <HAL_RCC_OscConfig+0x478>)
 800716c:	2200      	movs	r2, #0
 800716e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007170:	f7fd fac4 	bl	80046fc <HAL_GetTick>
 8007174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007176:	e008      	b.n	800718a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007178:	f7fd fac0 	bl	80046fc <HAL_GetTick>
 800717c:	4602      	mov	r2, r0
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	2b02      	cmp	r3, #2
 8007184:	d901      	bls.n	800718a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007186:	2303      	movs	r3, #3
 8007188:	e087      	b.n	800729a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800718a:	4b27      	ldr	r3, [pc, #156]	@ (8007228 <HAL_RCC_OscConfig+0x470>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007192:	2b00      	cmp	r3, #0
 8007194:	d1f0      	bne.n	8007178 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	69da      	ldr	r2, [r3, #28]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6a1b      	ldr	r3, [r3, #32]
 800719e:	431a      	orrs	r2, r3
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071a4:	019b      	lsls	r3, r3, #6
 80071a6:	431a      	orrs	r2, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ac:	085b      	lsrs	r3, r3, #1
 80071ae:	3b01      	subs	r3, #1
 80071b0:	041b      	lsls	r3, r3, #16
 80071b2:	431a      	orrs	r2, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b8:	061b      	lsls	r3, r3, #24
 80071ba:	491b      	ldr	r1, [pc, #108]	@ (8007228 <HAL_RCC_OscConfig+0x470>)
 80071bc:	4313      	orrs	r3, r2
 80071be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80071c0:	4b1b      	ldr	r3, [pc, #108]	@ (8007230 <HAL_RCC_OscConfig+0x478>)
 80071c2:	2201      	movs	r2, #1
 80071c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071c6:	f7fd fa99 	bl	80046fc <HAL_GetTick>
 80071ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071cc:	e008      	b.n	80071e0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071ce:	f7fd fa95 	bl	80046fc <HAL_GetTick>
 80071d2:	4602      	mov	r2, r0
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	1ad3      	subs	r3, r2, r3
 80071d8:	2b02      	cmp	r3, #2
 80071da:	d901      	bls.n	80071e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80071dc:	2303      	movs	r3, #3
 80071de:	e05c      	b.n	800729a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071e0:	4b11      	ldr	r3, [pc, #68]	@ (8007228 <HAL_RCC_OscConfig+0x470>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d0f0      	beq.n	80071ce <HAL_RCC_OscConfig+0x416>
 80071ec:	e054      	b.n	8007298 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071ee:	4b10      	ldr	r3, [pc, #64]	@ (8007230 <HAL_RCC_OscConfig+0x478>)
 80071f0:	2200      	movs	r2, #0
 80071f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071f4:	f7fd fa82 	bl	80046fc <HAL_GetTick>
 80071f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071fa:	e008      	b.n	800720e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071fc:	f7fd fa7e 	bl	80046fc <HAL_GetTick>
 8007200:	4602      	mov	r2, r0
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	2b02      	cmp	r3, #2
 8007208:	d901      	bls.n	800720e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800720a:	2303      	movs	r3, #3
 800720c:	e045      	b.n	800729a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800720e:	4b06      	ldr	r3, [pc, #24]	@ (8007228 <HAL_RCC_OscConfig+0x470>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1f0      	bne.n	80071fc <HAL_RCC_OscConfig+0x444>
 800721a:	e03d      	b.n	8007298 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	699b      	ldr	r3, [r3, #24]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d107      	bne.n	8007234 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	e038      	b.n	800729a <HAL_RCC_OscConfig+0x4e2>
 8007228:	40023800 	.word	0x40023800
 800722c:	40007000 	.word	0x40007000
 8007230:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007234:	4b1b      	ldr	r3, [pc, #108]	@ (80072a4 <HAL_RCC_OscConfig+0x4ec>)
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	699b      	ldr	r3, [r3, #24]
 800723e:	2b01      	cmp	r3, #1
 8007240:	d028      	beq.n	8007294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800724c:	429a      	cmp	r2, r3
 800724e:	d121      	bne.n	8007294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800725a:	429a      	cmp	r2, r3
 800725c:	d11a      	bne.n	8007294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007264:	4013      	ands	r3, r2
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800726a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800726c:	4293      	cmp	r3, r2
 800726e:	d111      	bne.n	8007294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800727a:	085b      	lsrs	r3, r3, #1
 800727c:	3b01      	subs	r3, #1
 800727e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007280:	429a      	cmp	r2, r3
 8007282:	d107      	bne.n	8007294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800728e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007290:	429a      	cmp	r2, r3
 8007292:	d001      	beq.n	8007298 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	e000      	b.n	800729a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3718      	adds	r7, #24
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	40023800 	.word	0x40023800

080072a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d101      	bne.n	80072bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	e0cc      	b.n	8007456 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80072bc:	4b68      	ldr	r3, [pc, #416]	@ (8007460 <HAL_RCC_ClockConfig+0x1b8>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 0307 	and.w	r3, r3, #7
 80072c4:	683a      	ldr	r2, [r7, #0]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d90c      	bls.n	80072e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072ca:	4b65      	ldr	r3, [pc, #404]	@ (8007460 <HAL_RCC_ClockConfig+0x1b8>)
 80072cc:	683a      	ldr	r2, [r7, #0]
 80072ce:	b2d2      	uxtb	r2, r2
 80072d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072d2:	4b63      	ldr	r3, [pc, #396]	@ (8007460 <HAL_RCC_ClockConfig+0x1b8>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f003 0307 	and.w	r3, r3, #7
 80072da:	683a      	ldr	r2, [r7, #0]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d001      	beq.n	80072e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	e0b8      	b.n	8007456 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f003 0302 	and.w	r3, r3, #2
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d020      	beq.n	8007332 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 0304 	and.w	r3, r3, #4
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d005      	beq.n	8007308 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80072fc:	4b59      	ldr	r3, [pc, #356]	@ (8007464 <HAL_RCC_ClockConfig+0x1bc>)
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	4a58      	ldr	r2, [pc, #352]	@ (8007464 <HAL_RCC_ClockConfig+0x1bc>)
 8007302:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007306:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 0308 	and.w	r3, r3, #8
 8007310:	2b00      	cmp	r3, #0
 8007312:	d005      	beq.n	8007320 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007314:	4b53      	ldr	r3, [pc, #332]	@ (8007464 <HAL_RCC_ClockConfig+0x1bc>)
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	4a52      	ldr	r2, [pc, #328]	@ (8007464 <HAL_RCC_ClockConfig+0x1bc>)
 800731a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800731e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007320:	4b50      	ldr	r3, [pc, #320]	@ (8007464 <HAL_RCC_ClockConfig+0x1bc>)
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	494d      	ldr	r1, [pc, #308]	@ (8007464 <HAL_RCC_ClockConfig+0x1bc>)
 800732e:	4313      	orrs	r3, r2
 8007330:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 0301 	and.w	r3, r3, #1
 800733a:	2b00      	cmp	r3, #0
 800733c:	d044      	beq.n	80073c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	2b01      	cmp	r3, #1
 8007344:	d107      	bne.n	8007356 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007346:	4b47      	ldr	r3, [pc, #284]	@ (8007464 <HAL_RCC_ClockConfig+0x1bc>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800734e:	2b00      	cmp	r3, #0
 8007350:	d119      	bne.n	8007386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	e07f      	b.n	8007456 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	2b02      	cmp	r3, #2
 800735c:	d003      	beq.n	8007366 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007362:	2b03      	cmp	r3, #3
 8007364:	d107      	bne.n	8007376 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007366:	4b3f      	ldr	r3, [pc, #252]	@ (8007464 <HAL_RCC_ClockConfig+0x1bc>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800736e:	2b00      	cmp	r3, #0
 8007370:	d109      	bne.n	8007386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	e06f      	b.n	8007456 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007376:	4b3b      	ldr	r3, [pc, #236]	@ (8007464 <HAL_RCC_ClockConfig+0x1bc>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f003 0302 	and.w	r3, r3, #2
 800737e:	2b00      	cmp	r3, #0
 8007380:	d101      	bne.n	8007386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e067      	b.n	8007456 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007386:	4b37      	ldr	r3, [pc, #220]	@ (8007464 <HAL_RCC_ClockConfig+0x1bc>)
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	f023 0203 	bic.w	r2, r3, #3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	4934      	ldr	r1, [pc, #208]	@ (8007464 <HAL_RCC_ClockConfig+0x1bc>)
 8007394:	4313      	orrs	r3, r2
 8007396:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007398:	f7fd f9b0 	bl	80046fc <HAL_GetTick>
 800739c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800739e:	e00a      	b.n	80073b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073a0:	f7fd f9ac 	bl	80046fc <HAL_GetTick>
 80073a4:	4602      	mov	r2, r0
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d901      	bls.n	80073b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80073b2:	2303      	movs	r3, #3
 80073b4:	e04f      	b.n	8007456 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073b6:	4b2b      	ldr	r3, [pc, #172]	@ (8007464 <HAL_RCC_ClockConfig+0x1bc>)
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	f003 020c 	and.w	r2, r3, #12
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d1eb      	bne.n	80073a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80073c8:	4b25      	ldr	r3, [pc, #148]	@ (8007460 <HAL_RCC_ClockConfig+0x1b8>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 0307 	and.w	r3, r3, #7
 80073d0:	683a      	ldr	r2, [r7, #0]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d20c      	bcs.n	80073f0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073d6:	4b22      	ldr	r3, [pc, #136]	@ (8007460 <HAL_RCC_ClockConfig+0x1b8>)
 80073d8:	683a      	ldr	r2, [r7, #0]
 80073da:	b2d2      	uxtb	r2, r2
 80073dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073de:	4b20      	ldr	r3, [pc, #128]	@ (8007460 <HAL_RCC_ClockConfig+0x1b8>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 0307 	and.w	r3, r3, #7
 80073e6:	683a      	ldr	r2, [r7, #0]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d001      	beq.n	80073f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	e032      	b.n	8007456 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 0304 	and.w	r3, r3, #4
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d008      	beq.n	800740e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80073fc:	4b19      	ldr	r3, [pc, #100]	@ (8007464 <HAL_RCC_ClockConfig+0x1bc>)
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	4916      	ldr	r1, [pc, #88]	@ (8007464 <HAL_RCC_ClockConfig+0x1bc>)
 800740a:	4313      	orrs	r3, r2
 800740c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 0308 	and.w	r3, r3, #8
 8007416:	2b00      	cmp	r3, #0
 8007418:	d009      	beq.n	800742e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800741a:	4b12      	ldr	r3, [pc, #72]	@ (8007464 <HAL_RCC_ClockConfig+0x1bc>)
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	00db      	lsls	r3, r3, #3
 8007428:	490e      	ldr	r1, [pc, #56]	@ (8007464 <HAL_RCC_ClockConfig+0x1bc>)
 800742a:	4313      	orrs	r3, r2
 800742c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800742e:	f000 f821 	bl	8007474 <HAL_RCC_GetSysClockFreq>
 8007432:	4602      	mov	r2, r0
 8007434:	4b0b      	ldr	r3, [pc, #44]	@ (8007464 <HAL_RCC_ClockConfig+0x1bc>)
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	091b      	lsrs	r3, r3, #4
 800743a:	f003 030f 	and.w	r3, r3, #15
 800743e:	490a      	ldr	r1, [pc, #40]	@ (8007468 <HAL_RCC_ClockConfig+0x1c0>)
 8007440:	5ccb      	ldrb	r3, [r1, r3]
 8007442:	fa22 f303 	lsr.w	r3, r2, r3
 8007446:	4a09      	ldr	r2, [pc, #36]	@ (800746c <HAL_RCC_ClockConfig+0x1c4>)
 8007448:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800744a:	4b09      	ldr	r3, [pc, #36]	@ (8007470 <HAL_RCC_ClockConfig+0x1c8>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4618      	mov	r0, r3
 8007450:	f7fc fb10 	bl	8003a74 <HAL_InitTick>

  return HAL_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3710      	adds	r7, #16
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	40023c00 	.word	0x40023c00
 8007464:	40023800 	.word	0x40023800
 8007468:	0800f9a0 	.word	0x0800f9a0
 800746c:	200000e0 	.word	0x200000e0
 8007470:	200000e4 	.word	0x200000e4

08007474 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007478:	b090      	sub	sp, #64	@ 0x40
 800747a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800747c:	2300      	movs	r3, #0
 800747e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8007480:	2300      	movs	r3, #0
 8007482:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8007484:	2300      	movs	r3, #0
 8007486:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007488:	2300      	movs	r3, #0
 800748a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800748c:	4b59      	ldr	r3, [pc, #356]	@ (80075f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	f003 030c 	and.w	r3, r3, #12
 8007494:	2b08      	cmp	r3, #8
 8007496:	d00d      	beq.n	80074b4 <HAL_RCC_GetSysClockFreq+0x40>
 8007498:	2b08      	cmp	r3, #8
 800749a:	f200 80a1 	bhi.w	80075e0 <HAL_RCC_GetSysClockFreq+0x16c>
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d002      	beq.n	80074a8 <HAL_RCC_GetSysClockFreq+0x34>
 80074a2:	2b04      	cmp	r3, #4
 80074a4:	d003      	beq.n	80074ae <HAL_RCC_GetSysClockFreq+0x3a>
 80074a6:	e09b      	b.n	80075e0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80074a8:	4b53      	ldr	r3, [pc, #332]	@ (80075f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80074aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80074ac:	e09b      	b.n	80075e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80074ae:	4b53      	ldr	r3, [pc, #332]	@ (80075fc <HAL_RCC_GetSysClockFreq+0x188>)
 80074b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80074b2:	e098      	b.n	80075e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80074b4:	4b4f      	ldr	r3, [pc, #316]	@ (80075f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80074bc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80074be:	4b4d      	ldr	r3, [pc, #308]	@ (80075f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d028      	beq.n	800751c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074ca:	4b4a      	ldr	r3, [pc, #296]	@ (80075f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	099b      	lsrs	r3, r3, #6
 80074d0:	2200      	movs	r2, #0
 80074d2:	623b      	str	r3, [r7, #32]
 80074d4:	627a      	str	r2, [r7, #36]	@ 0x24
 80074d6:	6a3b      	ldr	r3, [r7, #32]
 80074d8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80074dc:	2100      	movs	r1, #0
 80074de:	4b47      	ldr	r3, [pc, #284]	@ (80075fc <HAL_RCC_GetSysClockFreq+0x188>)
 80074e0:	fb03 f201 	mul.w	r2, r3, r1
 80074e4:	2300      	movs	r3, #0
 80074e6:	fb00 f303 	mul.w	r3, r0, r3
 80074ea:	4413      	add	r3, r2
 80074ec:	4a43      	ldr	r2, [pc, #268]	@ (80075fc <HAL_RCC_GetSysClockFreq+0x188>)
 80074ee:	fba0 1202 	umull	r1, r2, r0, r2
 80074f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80074f4:	460a      	mov	r2, r1
 80074f6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80074f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074fa:	4413      	add	r3, r2
 80074fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80074fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007500:	2200      	movs	r2, #0
 8007502:	61bb      	str	r3, [r7, #24]
 8007504:	61fa      	str	r2, [r7, #28]
 8007506:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800750a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800750e:	f7f9 fb53 	bl	8000bb8 <__aeabi_uldivmod>
 8007512:	4602      	mov	r2, r0
 8007514:	460b      	mov	r3, r1
 8007516:	4613      	mov	r3, r2
 8007518:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800751a:	e053      	b.n	80075c4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800751c:	4b35      	ldr	r3, [pc, #212]	@ (80075f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	099b      	lsrs	r3, r3, #6
 8007522:	2200      	movs	r2, #0
 8007524:	613b      	str	r3, [r7, #16]
 8007526:	617a      	str	r2, [r7, #20]
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800752e:	f04f 0b00 	mov.w	fp, #0
 8007532:	4652      	mov	r2, sl
 8007534:	465b      	mov	r3, fp
 8007536:	f04f 0000 	mov.w	r0, #0
 800753a:	f04f 0100 	mov.w	r1, #0
 800753e:	0159      	lsls	r1, r3, #5
 8007540:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007544:	0150      	lsls	r0, r2, #5
 8007546:	4602      	mov	r2, r0
 8007548:	460b      	mov	r3, r1
 800754a:	ebb2 080a 	subs.w	r8, r2, sl
 800754e:	eb63 090b 	sbc.w	r9, r3, fp
 8007552:	f04f 0200 	mov.w	r2, #0
 8007556:	f04f 0300 	mov.w	r3, #0
 800755a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800755e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007562:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007566:	ebb2 0408 	subs.w	r4, r2, r8
 800756a:	eb63 0509 	sbc.w	r5, r3, r9
 800756e:	f04f 0200 	mov.w	r2, #0
 8007572:	f04f 0300 	mov.w	r3, #0
 8007576:	00eb      	lsls	r3, r5, #3
 8007578:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800757c:	00e2      	lsls	r2, r4, #3
 800757e:	4614      	mov	r4, r2
 8007580:	461d      	mov	r5, r3
 8007582:	eb14 030a 	adds.w	r3, r4, sl
 8007586:	603b      	str	r3, [r7, #0]
 8007588:	eb45 030b 	adc.w	r3, r5, fp
 800758c:	607b      	str	r3, [r7, #4]
 800758e:	f04f 0200 	mov.w	r2, #0
 8007592:	f04f 0300 	mov.w	r3, #0
 8007596:	e9d7 4500 	ldrd	r4, r5, [r7]
 800759a:	4629      	mov	r1, r5
 800759c:	028b      	lsls	r3, r1, #10
 800759e:	4621      	mov	r1, r4
 80075a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80075a4:	4621      	mov	r1, r4
 80075a6:	028a      	lsls	r2, r1, #10
 80075a8:	4610      	mov	r0, r2
 80075aa:	4619      	mov	r1, r3
 80075ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075ae:	2200      	movs	r2, #0
 80075b0:	60bb      	str	r3, [r7, #8]
 80075b2:	60fa      	str	r2, [r7, #12]
 80075b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80075b8:	f7f9 fafe 	bl	8000bb8 <__aeabi_uldivmod>
 80075bc:	4602      	mov	r2, r0
 80075be:	460b      	mov	r3, r1
 80075c0:	4613      	mov	r3, r2
 80075c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80075c4:	4b0b      	ldr	r3, [pc, #44]	@ (80075f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	0c1b      	lsrs	r3, r3, #16
 80075ca:	f003 0303 	and.w	r3, r3, #3
 80075ce:	3301      	adds	r3, #1
 80075d0:	005b      	lsls	r3, r3, #1
 80075d2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80075d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80075d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80075dc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80075de:	e002      	b.n	80075e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80075e0:	4b05      	ldr	r3, [pc, #20]	@ (80075f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80075e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80075e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80075e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3740      	adds	r7, #64	@ 0x40
 80075ec:	46bd      	mov	sp, r7
 80075ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075f2:	bf00      	nop
 80075f4:	40023800 	.word	0x40023800
 80075f8:	00f42400 	.word	0x00f42400
 80075fc:	017d7840 	.word	0x017d7840

08007600 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007600:	b480      	push	{r7}
 8007602:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007604:	4b03      	ldr	r3, [pc, #12]	@ (8007614 <HAL_RCC_GetHCLKFreq+0x14>)
 8007606:	681b      	ldr	r3, [r3, #0]
}
 8007608:	4618      	mov	r0, r3
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop
 8007614:	200000e0 	.word	0x200000e0

08007618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800761c:	f7ff fff0 	bl	8007600 <HAL_RCC_GetHCLKFreq>
 8007620:	4602      	mov	r2, r0
 8007622:	4b05      	ldr	r3, [pc, #20]	@ (8007638 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	0a9b      	lsrs	r3, r3, #10
 8007628:	f003 0307 	and.w	r3, r3, #7
 800762c:	4903      	ldr	r1, [pc, #12]	@ (800763c <HAL_RCC_GetPCLK1Freq+0x24>)
 800762e:	5ccb      	ldrb	r3, [r1, r3]
 8007630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007634:	4618      	mov	r0, r3
 8007636:	bd80      	pop	{r7, pc}
 8007638:	40023800 	.word	0x40023800
 800763c:	0800f9b0 	.word	0x0800f9b0

08007640 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007644:	f7ff ffdc 	bl	8007600 <HAL_RCC_GetHCLKFreq>
 8007648:	4602      	mov	r2, r0
 800764a:	4b05      	ldr	r3, [pc, #20]	@ (8007660 <HAL_RCC_GetPCLK2Freq+0x20>)
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	0b5b      	lsrs	r3, r3, #13
 8007650:	f003 0307 	and.w	r3, r3, #7
 8007654:	4903      	ldr	r1, [pc, #12]	@ (8007664 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007656:	5ccb      	ldrb	r3, [r1, r3]
 8007658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800765c:	4618      	mov	r0, r3
 800765e:	bd80      	pop	{r7, pc}
 8007660:	40023800 	.word	0x40023800
 8007664:	0800f9b0 	.word	0x0800f9b0

08007668 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007668:	b480      	push	{r7}
 800766a:	b083      	sub	sp, #12
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	220f      	movs	r2, #15
 8007676:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007678:	4b12      	ldr	r3, [pc, #72]	@ (80076c4 <HAL_RCC_GetClockConfig+0x5c>)
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	f003 0203 	and.w	r2, r3, #3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007684:	4b0f      	ldr	r3, [pc, #60]	@ (80076c4 <HAL_RCC_GetClockConfig+0x5c>)
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007690:	4b0c      	ldr	r3, [pc, #48]	@ (80076c4 <HAL_RCC_GetClockConfig+0x5c>)
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800769c:	4b09      	ldr	r3, [pc, #36]	@ (80076c4 <HAL_RCC_GetClockConfig+0x5c>)
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	08db      	lsrs	r3, r3, #3
 80076a2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80076aa:	4b07      	ldr	r3, [pc, #28]	@ (80076c8 <HAL_RCC_GetClockConfig+0x60>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 0207 	and.w	r2, r3, #7
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	601a      	str	r2, [r3, #0]
}
 80076b6:	bf00      	nop
 80076b8:	370c      	adds	r7, #12
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	40023800 	.word	0x40023800
 80076c8:	40023c00 	.word	0x40023c00

080076cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b082      	sub	sp, #8
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d101      	bne.n	80076de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e041      	b.n	8007762 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d106      	bne.n	80076f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2200      	movs	r2, #0
 80076ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f7fc fe46 	bl	8004384 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2202      	movs	r2, #2
 80076fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	3304      	adds	r3, #4
 8007708:	4619      	mov	r1, r3
 800770a:	4610      	mov	r0, r2
 800770c:	f000 fe7c 	bl	8008408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2201      	movs	r2, #1
 8007734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	3708      	adds	r7, #8
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
	...

0800776c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800776c:	b480      	push	{r7}
 800776e:	b085      	sub	sp, #20
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800777a:	b2db      	uxtb	r3, r3
 800777c:	2b01      	cmp	r3, #1
 800777e:	d001      	beq.n	8007784 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	e044      	b.n	800780e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2202      	movs	r2, #2
 8007788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	68da      	ldr	r2, [r3, #12]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f042 0201 	orr.w	r2, r2, #1
 800779a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a1e      	ldr	r2, [pc, #120]	@ (800781c <HAL_TIM_Base_Start_IT+0xb0>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d018      	beq.n	80077d8 <HAL_TIM_Base_Start_IT+0x6c>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077ae:	d013      	beq.n	80077d8 <HAL_TIM_Base_Start_IT+0x6c>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a1a      	ldr	r2, [pc, #104]	@ (8007820 <HAL_TIM_Base_Start_IT+0xb4>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d00e      	beq.n	80077d8 <HAL_TIM_Base_Start_IT+0x6c>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a19      	ldr	r2, [pc, #100]	@ (8007824 <HAL_TIM_Base_Start_IT+0xb8>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d009      	beq.n	80077d8 <HAL_TIM_Base_Start_IT+0x6c>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a17      	ldr	r2, [pc, #92]	@ (8007828 <HAL_TIM_Base_Start_IT+0xbc>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d004      	beq.n	80077d8 <HAL_TIM_Base_Start_IT+0x6c>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a16      	ldr	r2, [pc, #88]	@ (800782c <HAL_TIM_Base_Start_IT+0xc0>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d111      	bne.n	80077fc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	f003 0307 	and.w	r3, r3, #7
 80077e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2b06      	cmp	r3, #6
 80077e8:	d010      	beq.n	800780c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f042 0201 	orr.w	r2, r2, #1
 80077f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077fa:	e007      	b.n	800780c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f042 0201 	orr.w	r2, r2, #1
 800780a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3714      	adds	r7, #20
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	40010000 	.word	0x40010000
 8007820:	40000400 	.word	0x40000400
 8007824:	40000800 	.word	0x40000800
 8007828:	40000c00 	.word	0x40000c00
 800782c:	40014000 	.word	0x40014000

08007830 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d101      	bne.n	8007842 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	e041      	b.n	80078c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007848:	b2db      	uxtb	r3, r3
 800784a:	2b00      	cmp	r3, #0
 800784c:	d106      	bne.n	800785c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f7fc fe22 	bl	80044a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2202      	movs	r2, #2
 8007860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	3304      	adds	r3, #4
 800786c:	4619      	mov	r1, r3
 800786e:	4610      	mov	r0, r2
 8007870:	f000 fdca 	bl	8008408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2201      	movs	r2, #1
 80078a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2201      	movs	r2, #1
 80078c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3708      	adds	r7, #8
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
	...

080078d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d109      	bne.n	80078f4 <HAL_TIM_PWM_Start+0x24>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	bf14      	ite	ne
 80078ec:	2301      	movne	r3, #1
 80078ee:	2300      	moveq	r3, #0
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	e022      	b.n	800793a <HAL_TIM_PWM_Start+0x6a>
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	2b04      	cmp	r3, #4
 80078f8:	d109      	bne.n	800790e <HAL_TIM_PWM_Start+0x3e>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007900:	b2db      	uxtb	r3, r3
 8007902:	2b01      	cmp	r3, #1
 8007904:	bf14      	ite	ne
 8007906:	2301      	movne	r3, #1
 8007908:	2300      	moveq	r3, #0
 800790a:	b2db      	uxtb	r3, r3
 800790c:	e015      	b.n	800793a <HAL_TIM_PWM_Start+0x6a>
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	2b08      	cmp	r3, #8
 8007912:	d109      	bne.n	8007928 <HAL_TIM_PWM_Start+0x58>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800791a:	b2db      	uxtb	r3, r3
 800791c:	2b01      	cmp	r3, #1
 800791e:	bf14      	ite	ne
 8007920:	2301      	movne	r3, #1
 8007922:	2300      	moveq	r3, #0
 8007924:	b2db      	uxtb	r3, r3
 8007926:	e008      	b.n	800793a <HAL_TIM_PWM_Start+0x6a>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800792e:	b2db      	uxtb	r3, r3
 8007930:	2b01      	cmp	r3, #1
 8007932:	bf14      	ite	ne
 8007934:	2301      	movne	r3, #1
 8007936:	2300      	moveq	r3, #0
 8007938:	b2db      	uxtb	r3, r3
 800793a:	2b00      	cmp	r3, #0
 800793c:	d001      	beq.n	8007942 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	e068      	b.n	8007a14 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d104      	bne.n	8007952 <HAL_TIM_PWM_Start+0x82>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2202      	movs	r2, #2
 800794c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007950:	e013      	b.n	800797a <HAL_TIM_PWM_Start+0xaa>
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	2b04      	cmp	r3, #4
 8007956:	d104      	bne.n	8007962 <HAL_TIM_PWM_Start+0x92>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2202      	movs	r2, #2
 800795c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007960:	e00b      	b.n	800797a <HAL_TIM_PWM_Start+0xaa>
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	2b08      	cmp	r3, #8
 8007966:	d104      	bne.n	8007972 <HAL_TIM_PWM_Start+0xa2>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2202      	movs	r2, #2
 800796c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007970:	e003      	b.n	800797a <HAL_TIM_PWM_Start+0xaa>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2202      	movs	r2, #2
 8007976:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2201      	movs	r2, #1
 8007980:	6839      	ldr	r1, [r7, #0]
 8007982:	4618      	mov	r0, r3
 8007984:	f001 f910 	bl	8008ba8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a23      	ldr	r2, [pc, #140]	@ (8007a1c <HAL_TIM_PWM_Start+0x14c>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d107      	bne.n	80079a2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80079a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a1d      	ldr	r2, [pc, #116]	@ (8007a1c <HAL_TIM_PWM_Start+0x14c>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d018      	beq.n	80079de <HAL_TIM_PWM_Start+0x10e>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079b4:	d013      	beq.n	80079de <HAL_TIM_PWM_Start+0x10e>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a19      	ldr	r2, [pc, #100]	@ (8007a20 <HAL_TIM_PWM_Start+0x150>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d00e      	beq.n	80079de <HAL_TIM_PWM_Start+0x10e>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a17      	ldr	r2, [pc, #92]	@ (8007a24 <HAL_TIM_PWM_Start+0x154>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d009      	beq.n	80079de <HAL_TIM_PWM_Start+0x10e>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a16      	ldr	r2, [pc, #88]	@ (8007a28 <HAL_TIM_PWM_Start+0x158>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d004      	beq.n	80079de <HAL_TIM_PWM_Start+0x10e>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a14      	ldr	r2, [pc, #80]	@ (8007a2c <HAL_TIM_PWM_Start+0x15c>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d111      	bne.n	8007a02 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	f003 0307 	and.w	r3, r3, #7
 80079e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2b06      	cmp	r3, #6
 80079ee:	d010      	beq.n	8007a12 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f042 0201 	orr.w	r2, r2, #1
 80079fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a00:	e007      	b.n	8007a12 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f042 0201 	orr.w	r2, r2, #1
 8007a10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3710      	adds	r7, #16
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	40010000 	.word	0x40010000
 8007a20:	40000400 	.word	0x40000400
 8007a24:	40000800 	.word	0x40000800
 8007a28:	40000c00 	.word	0x40000c00
 8007a2c:	40014000 	.word	0x40014000

08007a30 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d101      	bne.n	8007a42 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e041      	b.n	8007ac6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d106      	bne.n	8007a5c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 f839 	bl	8007ace <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2202      	movs	r2, #2
 8007a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	3304      	adds	r3, #4
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	4610      	mov	r0, r2
 8007a70:	f000 fcca 	bl	8008408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ac4:	2300      	movs	r3, #0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3708      	adds	r7, #8
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007ace:	b480      	push	{r7}
 8007ad0:	b083      	sub	sp, #12
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007ad6:	bf00      	nop
 8007ad8:	370c      	adds	r7, #12
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr
	...

08007ae4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007aee:	2300      	movs	r3, #0
 8007af0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d104      	bne.n	8007b02 <HAL_TIM_IC_Start_IT+0x1e>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	e013      	b.n	8007b2a <HAL_TIM_IC_Start_IT+0x46>
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	2b04      	cmp	r3, #4
 8007b06:	d104      	bne.n	8007b12 <HAL_TIM_IC_Start_IT+0x2e>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	e00b      	b.n	8007b2a <HAL_TIM_IC_Start_IT+0x46>
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	2b08      	cmp	r3, #8
 8007b16:	d104      	bne.n	8007b22 <HAL_TIM_IC_Start_IT+0x3e>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	e003      	b.n	8007b2a <HAL_TIM_IC_Start_IT+0x46>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d104      	bne.n	8007b3c <HAL_TIM_IC_Start_IT+0x58>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	e013      	b.n	8007b64 <HAL_TIM_IC_Start_IT+0x80>
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	2b04      	cmp	r3, #4
 8007b40:	d104      	bne.n	8007b4c <HAL_TIM_IC_Start_IT+0x68>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	e00b      	b.n	8007b64 <HAL_TIM_IC_Start_IT+0x80>
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	2b08      	cmp	r3, #8
 8007b50:	d104      	bne.n	8007b5c <HAL_TIM_IC_Start_IT+0x78>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	e003      	b.n	8007b64 <HAL_TIM_IC_Start_IT+0x80>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b66:	7bbb      	ldrb	r3, [r7, #14]
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d102      	bne.n	8007b72 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007b6c:	7b7b      	ldrb	r3, [r7, #13]
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d001      	beq.n	8007b76 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e0c2      	b.n	8007cfc <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d104      	bne.n	8007b86 <HAL_TIM_IC_Start_IT+0xa2>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2202      	movs	r2, #2
 8007b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b84:	e013      	b.n	8007bae <HAL_TIM_IC_Start_IT+0xca>
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	2b04      	cmp	r3, #4
 8007b8a:	d104      	bne.n	8007b96 <HAL_TIM_IC_Start_IT+0xb2>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2202      	movs	r2, #2
 8007b90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b94:	e00b      	b.n	8007bae <HAL_TIM_IC_Start_IT+0xca>
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	2b08      	cmp	r3, #8
 8007b9a:	d104      	bne.n	8007ba6 <HAL_TIM_IC_Start_IT+0xc2>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2202      	movs	r2, #2
 8007ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ba4:	e003      	b.n	8007bae <HAL_TIM_IC_Start_IT+0xca>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2202      	movs	r2, #2
 8007baa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d104      	bne.n	8007bbe <HAL_TIM_IC_Start_IT+0xda>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2202      	movs	r2, #2
 8007bb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007bbc:	e013      	b.n	8007be6 <HAL_TIM_IC_Start_IT+0x102>
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	2b04      	cmp	r3, #4
 8007bc2:	d104      	bne.n	8007bce <HAL_TIM_IC_Start_IT+0xea>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2202      	movs	r2, #2
 8007bc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007bcc:	e00b      	b.n	8007be6 <HAL_TIM_IC_Start_IT+0x102>
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	2b08      	cmp	r3, #8
 8007bd2:	d104      	bne.n	8007bde <HAL_TIM_IC_Start_IT+0xfa>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2202      	movs	r2, #2
 8007bd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007bdc:	e003      	b.n	8007be6 <HAL_TIM_IC_Start_IT+0x102>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2202      	movs	r2, #2
 8007be2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	2b0c      	cmp	r3, #12
 8007bea:	d841      	bhi.n	8007c70 <HAL_TIM_IC_Start_IT+0x18c>
 8007bec:	a201      	add	r2, pc, #4	@ (adr r2, 8007bf4 <HAL_TIM_IC_Start_IT+0x110>)
 8007bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf2:	bf00      	nop
 8007bf4:	08007c29 	.word	0x08007c29
 8007bf8:	08007c71 	.word	0x08007c71
 8007bfc:	08007c71 	.word	0x08007c71
 8007c00:	08007c71 	.word	0x08007c71
 8007c04:	08007c3b 	.word	0x08007c3b
 8007c08:	08007c71 	.word	0x08007c71
 8007c0c:	08007c71 	.word	0x08007c71
 8007c10:	08007c71 	.word	0x08007c71
 8007c14:	08007c4d 	.word	0x08007c4d
 8007c18:	08007c71 	.word	0x08007c71
 8007c1c:	08007c71 	.word	0x08007c71
 8007c20:	08007c71 	.word	0x08007c71
 8007c24:	08007c5f 	.word	0x08007c5f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68da      	ldr	r2, [r3, #12]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f042 0202 	orr.w	r2, r2, #2
 8007c36:	60da      	str	r2, [r3, #12]
      break;
 8007c38:	e01d      	b.n	8007c76 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	68da      	ldr	r2, [r3, #12]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f042 0204 	orr.w	r2, r2, #4
 8007c48:	60da      	str	r2, [r3, #12]
      break;
 8007c4a:	e014      	b.n	8007c76 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	68da      	ldr	r2, [r3, #12]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f042 0208 	orr.w	r2, r2, #8
 8007c5a:	60da      	str	r2, [r3, #12]
      break;
 8007c5c:	e00b      	b.n	8007c76 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	68da      	ldr	r2, [r3, #12]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f042 0210 	orr.w	r2, r2, #16
 8007c6c:	60da      	str	r2, [r3, #12]
      break;
 8007c6e:	e002      	b.n	8007c76 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	73fb      	strb	r3, [r7, #15]
      break;
 8007c74:	bf00      	nop
  }

  if (status == HAL_OK)
 8007c76:	7bfb      	ldrb	r3, [r7, #15]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d13e      	bne.n	8007cfa <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2201      	movs	r2, #1
 8007c82:	6839      	ldr	r1, [r7, #0]
 8007c84:	4618      	mov	r0, r3
 8007c86:	f000 ff8f 	bl	8008ba8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a1d      	ldr	r2, [pc, #116]	@ (8007d04 <HAL_TIM_IC_Start_IT+0x220>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d018      	beq.n	8007cc6 <HAL_TIM_IC_Start_IT+0x1e2>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c9c:	d013      	beq.n	8007cc6 <HAL_TIM_IC_Start_IT+0x1e2>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a19      	ldr	r2, [pc, #100]	@ (8007d08 <HAL_TIM_IC_Start_IT+0x224>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d00e      	beq.n	8007cc6 <HAL_TIM_IC_Start_IT+0x1e2>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a17      	ldr	r2, [pc, #92]	@ (8007d0c <HAL_TIM_IC_Start_IT+0x228>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d009      	beq.n	8007cc6 <HAL_TIM_IC_Start_IT+0x1e2>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a16      	ldr	r2, [pc, #88]	@ (8007d10 <HAL_TIM_IC_Start_IT+0x22c>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d004      	beq.n	8007cc6 <HAL_TIM_IC_Start_IT+0x1e2>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a14      	ldr	r2, [pc, #80]	@ (8007d14 <HAL_TIM_IC_Start_IT+0x230>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d111      	bne.n	8007cea <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	f003 0307 	and.w	r3, r3, #7
 8007cd0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	2b06      	cmp	r3, #6
 8007cd6:	d010      	beq.n	8007cfa <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f042 0201 	orr.w	r2, r2, #1
 8007ce6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ce8:	e007      	b.n	8007cfa <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f042 0201 	orr.w	r2, r2, #1
 8007cf8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3710      	adds	r7, #16
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}
 8007d04:	40010000 	.word	0x40010000
 8007d08:	40000400 	.word	0x40000400
 8007d0c:	40000800 	.word	0x40000800
 8007d10:	40000c00 	.word	0x40000c00
 8007d14:	40014000 	.word	0x40014000

08007d18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	68db      	ldr	r3, [r3, #12]
 8007d26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	f003 0302 	and.w	r3, r3, #2
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d020      	beq.n	8007d7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f003 0302 	and.w	r3, r3, #2
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d01b      	beq.n	8007d7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f06f 0202 	mvn.w	r2, #2
 8007d4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2201      	movs	r2, #1
 8007d52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	699b      	ldr	r3, [r3, #24]
 8007d5a:	f003 0303 	and.w	r3, r3, #3
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d003      	beq.n	8007d6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f7fb ff6a 	bl	8003c3c <HAL_TIM_IC_CaptureCallback>
 8007d68:	e005      	b.n	8007d76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 fb2e 	bl	80083cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 fb35 	bl	80083e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	f003 0304 	and.w	r3, r3, #4
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d020      	beq.n	8007dc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f003 0304 	and.w	r3, r3, #4
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d01b      	beq.n	8007dc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f06f 0204 	mvn.w	r2, #4
 8007d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2202      	movs	r2, #2
 8007d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	699b      	ldr	r3, [r3, #24]
 8007da6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d003      	beq.n	8007db6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f7fb ff44 	bl	8003c3c <HAL_TIM_IC_CaptureCallback>
 8007db4:	e005      	b.n	8007dc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 fb08 	bl	80083cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 fb0f 	bl	80083e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	f003 0308 	and.w	r3, r3, #8
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d020      	beq.n	8007e14 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f003 0308 	and.w	r3, r3, #8
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d01b      	beq.n	8007e14 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f06f 0208 	mvn.w	r2, #8
 8007de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2204      	movs	r2, #4
 8007dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	69db      	ldr	r3, [r3, #28]
 8007df2:	f003 0303 	and.w	r3, r3, #3
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d003      	beq.n	8007e02 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f7fb ff1e 	bl	8003c3c <HAL_TIM_IC_CaptureCallback>
 8007e00:	e005      	b.n	8007e0e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 fae2 	bl	80083cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 fae9 	bl	80083e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	f003 0310 	and.w	r3, r3, #16
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d020      	beq.n	8007e60 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f003 0310 	and.w	r3, r3, #16
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d01b      	beq.n	8007e60 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f06f 0210 	mvn.w	r2, #16
 8007e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2208      	movs	r2, #8
 8007e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	69db      	ldr	r3, [r3, #28]
 8007e3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d003      	beq.n	8007e4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f7fb fef8 	bl	8003c3c <HAL_TIM_IC_CaptureCallback>
 8007e4c:	e005      	b.n	8007e5a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 fabc 	bl	80083cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 fac3 	bl	80083e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	f003 0301 	and.w	r3, r3, #1
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d00c      	beq.n	8007e84 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f003 0301 	and.w	r3, r3, #1
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d007      	beq.n	8007e84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f06f 0201 	mvn.w	r2, #1
 8007e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f7fb fdb4 	bl	80039ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d00c      	beq.n	8007ea8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d007      	beq.n	8007ea8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 ff1e 	bl	8008ce4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d00c      	beq.n	8007ecc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d007      	beq.n	8007ecc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 fa94 	bl	80083f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	f003 0320 	and.w	r3, r3, #32
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d00c      	beq.n	8007ef0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f003 0320 	and.w	r3, r3, #32
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d007      	beq.n	8007ef0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f06f 0220 	mvn.w	r2, #32
 8007ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 fef0 	bl	8008cd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ef0:	bf00      	nop
 8007ef2:	3710      	adds	r7, #16
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b086      	sub	sp, #24
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f04:	2300      	movs	r3, #0
 8007f06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d101      	bne.n	8007f16 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007f12:	2302      	movs	r3, #2
 8007f14:	e088      	b.n	8008028 <HAL_TIM_IC_ConfigChannel+0x130>
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2201      	movs	r2, #1
 8007f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d11b      	bne.n	8007f5c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007f34:	f000 fc80 	bl	8008838 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	699a      	ldr	r2, [r3, #24]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f022 020c 	bic.w	r2, r2, #12
 8007f46:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	6999      	ldr	r1, [r3, #24]
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	689a      	ldr	r2, [r3, #8]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	430a      	orrs	r2, r1
 8007f58:	619a      	str	r2, [r3, #24]
 8007f5a:	e060      	b.n	800801e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2b04      	cmp	r3, #4
 8007f60:	d11c      	bne.n	8007f9c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8007f72:	f000 fcf8 	bl	8008966 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	699a      	ldr	r2, [r3, #24]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007f84:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	6999      	ldr	r1, [r3, #24]
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	021a      	lsls	r2, r3, #8
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	430a      	orrs	r2, r1
 8007f98:	619a      	str	r2, [r3, #24]
 8007f9a:	e040      	b.n	800801e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2b08      	cmp	r3, #8
 8007fa0:	d11b      	bne.n	8007fda <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8007fb2:	f000 fd45 	bl	8008a40 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	69da      	ldr	r2, [r3, #28]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f022 020c 	bic.w	r2, r2, #12
 8007fc4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	69d9      	ldr	r1, [r3, #28]
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	689a      	ldr	r2, [r3, #8]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	430a      	orrs	r2, r1
 8007fd6:	61da      	str	r2, [r3, #28]
 8007fd8:	e021      	b.n	800801e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2b0c      	cmp	r3, #12
 8007fde:	d11c      	bne.n	800801a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8007ff0:	f000 fd62 	bl	8008ab8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	69da      	ldr	r2, [r3, #28]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008002:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	69d9      	ldr	r1, [r3, #28]
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	021a      	lsls	r2, r3, #8
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	430a      	orrs	r2, r1
 8008016:	61da      	str	r2, [r3, #28]
 8008018:	e001      	b.n	800801e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800801a:	2301      	movs	r3, #1
 800801c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2200      	movs	r2, #0
 8008022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008026:	7dfb      	ldrb	r3, [r7, #23]
}
 8008028:	4618      	mov	r0, r3
 800802a:	3718      	adds	r7, #24
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b086      	sub	sp, #24
 8008034:	af00      	add	r7, sp, #0
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	60b9      	str	r1, [r7, #8]
 800803a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800803c:	2300      	movs	r3, #0
 800803e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008046:	2b01      	cmp	r3, #1
 8008048:	d101      	bne.n	800804e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800804a:	2302      	movs	r3, #2
 800804c:	e0ae      	b.n	80081ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2201      	movs	r2, #1
 8008052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2b0c      	cmp	r3, #12
 800805a:	f200 809f 	bhi.w	800819c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800805e:	a201      	add	r2, pc, #4	@ (adr r2, 8008064 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008064:	08008099 	.word	0x08008099
 8008068:	0800819d 	.word	0x0800819d
 800806c:	0800819d 	.word	0x0800819d
 8008070:	0800819d 	.word	0x0800819d
 8008074:	080080d9 	.word	0x080080d9
 8008078:	0800819d 	.word	0x0800819d
 800807c:	0800819d 	.word	0x0800819d
 8008080:	0800819d 	.word	0x0800819d
 8008084:	0800811b 	.word	0x0800811b
 8008088:	0800819d 	.word	0x0800819d
 800808c:	0800819d 	.word	0x0800819d
 8008090:	0800819d 	.word	0x0800819d
 8008094:	0800815b 	.word	0x0800815b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	68b9      	ldr	r1, [r7, #8]
 800809e:	4618      	mov	r0, r3
 80080a0:	f000 fa3e 	bl	8008520 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	699a      	ldr	r2, [r3, #24]
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f042 0208 	orr.w	r2, r2, #8
 80080b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	699a      	ldr	r2, [r3, #24]
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f022 0204 	bic.w	r2, r2, #4
 80080c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	6999      	ldr	r1, [r3, #24]
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	691a      	ldr	r2, [r3, #16]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	430a      	orrs	r2, r1
 80080d4:	619a      	str	r2, [r3, #24]
      break;
 80080d6:	e064      	b.n	80081a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	68b9      	ldr	r1, [r7, #8]
 80080de:	4618      	mov	r0, r3
 80080e0:	f000 fa84 	bl	80085ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	699a      	ldr	r2, [r3, #24]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80080f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	699a      	ldr	r2, [r3, #24]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008102:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	6999      	ldr	r1, [r3, #24]
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	691b      	ldr	r3, [r3, #16]
 800810e:	021a      	lsls	r2, r3, #8
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	430a      	orrs	r2, r1
 8008116:	619a      	str	r2, [r3, #24]
      break;
 8008118:	e043      	b.n	80081a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	68b9      	ldr	r1, [r7, #8]
 8008120:	4618      	mov	r0, r3
 8008122:	f000 facf 	bl	80086c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	69da      	ldr	r2, [r3, #28]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f042 0208 	orr.w	r2, r2, #8
 8008134:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	69da      	ldr	r2, [r3, #28]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f022 0204 	bic.w	r2, r2, #4
 8008144:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	69d9      	ldr	r1, [r3, #28]
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	691a      	ldr	r2, [r3, #16]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	430a      	orrs	r2, r1
 8008156:	61da      	str	r2, [r3, #28]
      break;
 8008158:	e023      	b.n	80081a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	68b9      	ldr	r1, [r7, #8]
 8008160:	4618      	mov	r0, r3
 8008162:	f000 fb19 	bl	8008798 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	69da      	ldr	r2, [r3, #28]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008174:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	69da      	ldr	r2, [r3, #28]
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008184:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	69d9      	ldr	r1, [r3, #28]
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	021a      	lsls	r2, r3, #8
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	430a      	orrs	r2, r1
 8008198:	61da      	str	r2, [r3, #28]
      break;
 800819a:	e002      	b.n	80081a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800819c:	2301      	movs	r3, #1
 800819e:	75fb      	strb	r3, [r7, #23]
      break;
 80081a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80081aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3718      	adds	r7, #24
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081be:	2300      	movs	r3, #0
 80081c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d101      	bne.n	80081d0 <HAL_TIM_ConfigClockSource+0x1c>
 80081cc:	2302      	movs	r3, #2
 80081ce:	e0b4      	b.n	800833a <HAL_TIM_ConfigClockSource+0x186>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2202      	movs	r2, #2
 80081dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80081ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80081f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	68ba      	ldr	r2, [r7, #8]
 80081fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008208:	d03e      	beq.n	8008288 <HAL_TIM_ConfigClockSource+0xd4>
 800820a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800820e:	f200 8087 	bhi.w	8008320 <HAL_TIM_ConfigClockSource+0x16c>
 8008212:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008216:	f000 8086 	beq.w	8008326 <HAL_TIM_ConfigClockSource+0x172>
 800821a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800821e:	d87f      	bhi.n	8008320 <HAL_TIM_ConfigClockSource+0x16c>
 8008220:	2b70      	cmp	r3, #112	@ 0x70
 8008222:	d01a      	beq.n	800825a <HAL_TIM_ConfigClockSource+0xa6>
 8008224:	2b70      	cmp	r3, #112	@ 0x70
 8008226:	d87b      	bhi.n	8008320 <HAL_TIM_ConfigClockSource+0x16c>
 8008228:	2b60      	cmp	r3, #96	@ 0x60
 800822a:	d050      	beq.n	80082ce <HAL_TIM_ConfigClockSource+0x11a>
 800822c:	2b60      	cmp	r3, #96	@ 0x60
 800822e:	d877      	bhi.n	8008320 <HAL_TIM_ConfigClockSource+0x16c>
 8008230:	2b50      	cmp	r3, #80	@ 0x50
 8008232:	d03c      	beq.n	80082ae <HAL_TIM_ConfigClockSource+0xfa>
 8008234:	2b50      	cmp	r3, #80	@ 0x50
 8008236:	d873      	bhi.n	8008320 <HAL_TIM_ConfigClockSource+0x16c>
 8008238:	2b40      	cmp	r3, #64	@ 0x40
 800823a:	d058      	beq.n	80082ee <HAL_TIM_ConfigClockSource+0x13a>
 800823c:	2b40      	cmp	r3, #64	@ 0x40
 800823e:	d86f      	bhi.n	8008320 <HAL_TIM_ConfigClockSource+0x16c>
 8008240:	2b30      	cmp	r3, #48	@ 0x30
 8008242:	d064      	beq.n	800830e <HAL_TIM_ConfigClockSource+0x15a>
 8008244:	2b30      	cmp	r3, #48	@ 0x30
 8008246:	d86b      	bhi.n	8008320 <HAL_TIM_ConfigClockSource+0x16c>
 8008248:	2b20      	cmp	r3, #32
 800824a:	d060      	beq.n	800830e <HAL_TIM_ConfigClockSource+0x15a>
 800824c:	2b20      	cmp	r3, #32
 800824e:	d867      	bhi.n	8008320 <HAL_TIM_ConfigClockSource+0x16c>
 8008250:	2b00      	cmp	r3, #0
 8008252:	d05c      	beq.n	800830e <HAL_TIM_ConfigClockSource+0x15a>
 8008254:	2b10      	cmp	r3, #16
 8008256:	d05a      	beq.n	800830e <HAL_TIM_ConfigClockSource+0x15a>
 8008258:	e062      	b.n	8008320 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800826a:	f000 fc7d 	bl	8008b68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800827c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	68ba      	ldr	r2, [r7, #8]
 8008284:	609a      	str	r2, [r3, #8]
      break;
 8008286:	e04f      	b.n	8008328 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008298:	f000 fc66 	bl	8008b68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	689a      	ldr	r2, [r3, #8]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80082aa:	609a      	str	r2, [r3, #8]
      break;
 80082ac:	e03c      	b.n	8008328 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80082ba:	461a      	mov	r2, r3
 80082bc:	f000 fb24 	bl	8008908 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	2150      	movs	r1, #80	@ 0x50
 80082c6:	4618      	mov	r0, r3
 80082c8:	f000 fc33 	bl	8008b32 <TIM_ITRx_SetConfig>
      break;
 80082cc:	e02c      	b.n	8008328 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80082da:	461a      	mov	r2, r3
 80082dc:	f000 fb80 	bl	80089e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	2160      	movs	r1, #96	@ 0x60
 80082e6:	4618      	mov	r0, r3
 80082e8:	f000 fc23 	bl	8008b32 <TIM_ITRx_SetConfig>
      break;
 80082ec:	e01c      	b.n	8008328 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80082fa:	461a      	mov	r2, r3
 80082fc:	f000 fb04 	bl	8008908 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	2140      	movs	r1, #64	@ 0x40
 8008306:	4618      	mov	r0, r3
 8008308:	f000 fc13 	bl	8008b32 <TIM_ITRx_SetConfig>
      break;
 800830c:	e00c      	b.n	8008328 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4619      	mov	r1, r3
 8008318:	4610      	mov	r0, r2
 800831a:	f000 fc0a 	bl	8008b32 <TIM_ITRx_SetConfig>
      break;
 800831e:	e003      	b.n	8008328 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	73fb      	strb	r3, [r7, #15]
      break;
 8008324:	e000      	b.n	8008328 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008326:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008338:	7bfb      	ldrb	r3, [r7, #15]
}
 800833a:	4618      	mov	r0, r3
 800833c:	3710      	adds	r7, #16
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
	...

08008344 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008344:	b480      	push	{r7}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800834e:	2300      	movs	r3, #0
 8008350:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	2b0c      	cmp	r3, #12
 8008356:	d831      	bhi.n	80083bc <HAL_TIM_ReadCapturedValue+0x78>
 8008358:	a201      	add	r2, pc, #4	@ (adr r2, 8008360 <HAL_TIM_ReadCapturedValue+0x1c>)
 800835a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800835e:	bf00      	nop
 8008360:	08008395 	.word	0x08008395
 8008364:	080083bd 	.word	0x080083bd
 8008368:	080083bd 	.word	0x080083bd
 800836c:	080083bd 	.word	0x080083bd
 8008370:	0800839f 	.word	0x0800839f
 8008374:	080083bd 	.word	0x080083bd
 8008378:	080083bd 	.word	0x080083bd
 800837c:	080083bd 	.word	0x080083bd
 8008380:	080083a9 	.word	0x080083a9
 8008384:	080083bd 	.word	0x080083bd
 8008388:	080083bd 	.word	0x080083bd
 800838c:	080083bd 	.word	0x080083bd
 8008390:	080083b3 	.word	0x080083b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800839a:	60fb      	str	r3, [r7, #12]

      break;
 800839c:	e00f      	b.n	80083be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083a4:	60fb      	str	r3, [r7, #12]

      break;
 80083a6:	e00a      	b.n	80083be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083ae:	60fb      	str	r3, [r7, #12]

      break;
 80083b0:	e005      	b.n	80083be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083b8:	60fb      	str	r3, [r7, #12]

      break;
 80083ba:	e000      	b.n	80083be <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80083bc:	bf00      	nop
  }

  return tmpreg;
 80083be:	68fb      	ldr	r3, [r7, #12]
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3714      	adds	r7, #20
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80083d4:	bf00      	nop
 80083d6:	370c      	adds	r7, #12
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b083      	sub	sp, #12
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80083e8:	bf00      	nop
 80083ea:	370c      	adds	r7, #12
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80083fc:	bf00      	nop
 80083fe:	370c      	adds	r7, #12
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008408:	b480      	push	{r7}
 800840a:	b085      	sub	sp, #20
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	4a3a      	ldr	r2, [pc, #232]	@ (8008504 <TIM_Base_SetConfig+0xfc>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d00f      	beq.n	8008440 <TIM_Base_SetConfig+0x38>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008426:	d00b      	beq.n	8008440 <TIM_Base_SetConfig+0x38>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	4a37      	ldr	r2, [pc, #220]	@ (8008508 <TIM_Base_SetConfig+0x100>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d007      	beq.n	8008440 <TIM_Base_SetConfig+0x38>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	4a36      	ldr	r2, [pc, #216]	@ (800850c <TIM_Base_SetConfig+0x104>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d003      	beq.n	8008440 <TIM_Base_SetConfig+0x38>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	4a35      	ldr	r2, [pc, #212]	@ (8008510 <TIM_Base_SetConfig+0x108>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d108      	bne.n	8008452 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008446:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	68fa      	ldr	r2, [r7, #12]
 800844e:	4313      	orrs	r3, r2
 8008450:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	4a2b      	ldr	r2, [pc, #172]	@ (8008504 <TIM_Base_SetConfig+0xfc>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d01b      	beq.n	8008492 <TIM_Base_SetConfig+0x8a>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008460:	d017      	beq.n	8008492 <TIM_Base_SetConfig+0x8a>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	4a28      	ldr	r2, [pc, #160]	@ (8008508 <TIM_Base_SetConfig+0x100>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d013      	beq.n	8008492 <TIM_Base_SetConfig+0x8a>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	4a27      	ldr	r2, [pc, #156]	@ (800850c <TIM_Base_SetConfig+0x104>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d00f      	beq.n	8008492 <TIM_Base_SetConfig+0x8a>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	4a26      	ldr	r2, [pc, #152]	@ (8008510 <TIM_Base_SetConfig+0x108>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d00b      	beq.n	8008492 <TIM_Base_SetConfig+0x8a>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	4a25      	ldr	r2, [pc, #148]	@ (8008514 <TIM_Base_SetConfig+0x10c>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d007      	beq.n	8008492 <TIM_Base_SetConfig+0x8a>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	4a24      	ldr	r2, [pc, #144]	@ (8008518 <TIM_Base_SetConfig+0x110>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d003      	beq.n	8008492 <TIM_Base_SetConfig+0x8a>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	4a23      	ldr	r2, [pc, #140]	@ (800851c <TIM_Base_SetConfig+0x114>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d108      	bne.n	80084a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008498:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	68fa      	ldr	r2, [r7, #12]
 80084a0:	4313      	orrs	r3, r2
 80084a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	695b      	ldr	r3, [r3, #20]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	68fa      	ldr	r2, [r7, #12]
 80084b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	689a      	ldr	r2, [r3, #8]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	4a0e      	ldr	r2, [pc, #56]	@ (8008504 <TIM_Base_SetConfig+0xfc>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d103      	bne.n	80084d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	691a      	ldr	r2, [r3, #16]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2201      	movs	r2, #1
 80084dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	f003 0301 	and.w	r3, r3, #1
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d105      	bne.n	80084f6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	691b      	ldr	r3, [r3, #16]
 80084ee:	f023 0201 	bic.w	r2, r3, #1
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	611a      	str	r2, [r3, #16]
  }
}
 80084f6:	bf00      	nop
 80084f8:	3714      	adds	r7, #20
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr
 8008502:	bf00      	nop
 8008504:	40010000 	.word	0x40010000
 8008508:	40000400 	.word	0x40000400
 800850c:	40000800 	.word	0x40000800
 8008510:	40000c00 	.word	0x40000c00
 8008514:	40014000 	.word	0x40014000
 8008518:	40014400 	.word	0x40014400
 800851c:	40014800 	.word	0x40014800

08008520 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008520:	b480      	push	{r7}
 8008522:	b087      	sub	sp, #28
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a1b      	ldr	r3, [r3, #32]
 800852e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6a1b      	ldr	r3, [r3, #32]
 8008534:	f023 0201 	bic.w	r2, r3, #1
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	699b      	ldr	r3, [r3, #24]
 8008546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800854e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f023 0303 	bic.w	r3, r3, #3
 8008556:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	68fa      	ldr	r2, [r7, #12]
 800855e:	4313      	orrs	r3, r2
 8008560:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	f023 0302 	bic.w	r3, r3, #2
 8008568:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	697a      	ldr	r2, [r7, #20]
 8008570:	4313      	orrs	r3, r2
 8008572:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	4a1c      	ldr	r2, [pc, #112]	@ (80085e8 <TIM_OC1_SetConfig+0xc8>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d10c      	bne.n	8008596 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	f023 0308 	bic.w	r3, r3, #8
 8008582:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	68db      	ldr	r3, [r3, #12]
 8008588:	697a      	ldr	r2, [r7, #20]
 800858a:	4313      	orrs	r3, r2
 800858c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	f023 0304 	bic.w	r3, r3, #4
 8008594:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	4a13      	ldr	r2, [pc, #76]	@ (80085e8 <TIM_OC1_SetConfig+0xc8>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d111      	bne.n	80085c2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80085a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80085ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	695b      	ldr	r3, [r3, #20]
 80085b2:	693a      	ldr	r2, [r7, #16]
 80085b4:	4313      	orrs	r3, r2
 80085b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	699b      	ldr	r3, [r3, #24]
 80085bc:	693a      	ldr	r2, [r7, #16]
 80085be:	4313      	orrs	r3, r2
 80085c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	693a      	ldr	r2, [r7, #16]
 80085c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	68fa      	ldr	r2, [r7, #12]
 80085cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	685a      	ldr	r2, [r3, #4]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	697a      	ldr	r2, [r7, #20]
 80085da:	621a      	str	r2, [r3, #32]
}
 80085dc:	bf00      	nop
 80085de:	371c      	adds	r7, #28
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr
 80085e8:	40010000 	.word	0x40010000

080085ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b087      	sub	sp, #28
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6a1b      	ldr	r3, [r3, #32]
 80085fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6a1b      	ldr	r3, [r3, #32]
 8008600:	f023 0210 	bic.w	r2, r3, #16
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	699b      	ldr	r3, [r3, #24]
 8008612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800861a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008622:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	021b      	lsls	r3, r3, #8
 800862a:	68fa      	ldr	r2, [r7, #12]
 800862c:	4313      	orrs	r3, r2
 800862e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	f023 0320 	bic.w	r3, r3, #32
 8008636:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	011b      	lsls	r3, r3, #4
 800863e:	697a      	ldr	r2, [r7, #20]
 8008640:	4313      	orrs	r3, r2
 8008642:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4a1e      	ldr	r2, [pc, #120]	@ (80086c0 <TIM_OC2_SetConfig+0xd4>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d10d      	bne.n	8008668 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008652:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	68db      	ldr	r3, [r3, #12]
 8008658:	011b      	lsls	r3, r3, #4
 800865a:	697a      	ldr	r2, [r7, #20]
 800865c:	4313      	orrs	r3, r2
 800865e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008666:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	4a15      	ldr	r2, [pc, #84]	@ (80086c0 <TIM_OC2_SetConfig+0xd4>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d113      	bne.n	8008698 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008676:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800867e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	695b      	ldr	r3, [r3, #20]
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	693a      	ldr	r2, [r7, #16]
 8008688:	4313      	orrs	r3, r2
 800868a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	699b      	ldr	r3, [r3, #24]
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	693a      	ldr	r2, [r7, #16]
 8008694:	4313      	orrs	r3, r2
 8008696:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	693a      	ldr	r2, [r7, #16]
 800869c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	685a      	ldr	r2, [r3, #4]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	697a      	ldr	r2, [r7, #20]
 80086b0:	621a      	str	r2, [r3, #32]
}
 80086b2:	bf00      	nop
 80086b4:	371c      	adds	r7, #28
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr
 80086be:	bf00      	nop
 80086c0:	40010000 	.word	0x40010000

080086c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b087      	sub	sp, #28
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6a1b      	ldr	r3, [r3, #32]
 80086d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6a1b      	ldr	r3, [r3, #32]
 80086d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	69db      	ldr	r3, [r3, #28]
 80086ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f023 0303 	bic.w	r3, r3, #3
 80086fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	68fa      	ldr	r2, [r7, #12]
 8008702:	4313      	orrs	r3, r2
 8008704:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800870c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	021b      	lsls	r3, r3, #8
 8008714:	697a      	ldr	r2, [r7, #20]
 8008716:	4313      	orrs	r3, r2
 8008718:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4a1d      	ldr	r2, [pc, #116]	@ (8008794 <TIM_OC3_SetConfig+0xd0>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d10d      	bne.n	800873e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008728:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	021b      	lsls	r3, r3, #8
 8008730:	697a      	ldr	r2, [r7, #20]
 8008732:	4313      	orrs	r3, r2
 8008734:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800873c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4a14      	ldr	r2, [pc, #80]	@ (8008794 <TIM_OC3_SetConfig+0xd0>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d113      	bne.n	800876e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800874c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008754:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	695b      	ldr	r3, [r3, #20]
 800875a:	011b      	lsls	r3, r3, #4
 800875c:	693a      	ldr	r2, [r7, #16]
 800875e:	4313      	orrs	r3, r2
 8008760:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	699b      	ldr	r3, [r3, #24]
 8008766:	011b      	lsls	r3, r3, #4
 8008768:	693a      	ldr	r2, [r7, #16]
 800876a:	4313      	orrs	r3, r2
 800876c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	693a      	ldr	r2, [r7, #16]
 8008772:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	68fa      	ldr	r2, [r7, #12]
 8008778:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	685a      	ldr	r2, [r3, #4]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	697a      	ldr	r2, [r7, #20]
 8008786:	621a      	str	r2, [r3, #32]
}
 8008788:	bf00      	nop
 800878a:	371c      	adds	r7, #28
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr
 8008794:	40010000 	.word	0x40010000

08008798 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008798:	b480      	push	{r7}
 800879a:	b087      	sub	sp, #28
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6a1b      	ldr	r3, [r3, #32]
 80087a6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6a1b      	ldr	r3, [r3, #32]
 80087ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	69db      	ldr	r3, [r3, #28]
 80087be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	021b      	lsls	r3, r3, #8
 80087d6:	68fa      	ldr	r2, [r7, #12]
 80087d8:	4313      	orrs	r3, r2
 80087da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80087e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	031b      	lsls	r3, r3, #12
 80087ea:	693a      	ldr	r2, [r7, #16]
 80087ec:	4313      	orrs	r3, r2
 80087ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4a10      	ldr	r2, [pc, #64]	@ (8008834 <TIM_OC4_SetConfig+0x9c>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d109      	bne.n	800880c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80087fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	695b      	ldr	r3, [r3, #20]
 8008804:	019b      	lsls	r3, r3, #6
 8008806:	697a      	ldr	r2, [r7, #20]
 8008808:	4313      	orrs	r3, r2
 800880a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	697a      	ldr	r2, [r7, #20]
 8008810:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	68fa      	ldr	r2, [r7, #12]
 8008816:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	685a      	ldr	r2, [r3, #4]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	693a      	ldr	r2, [r7, #16]
 8008824:	621a      	str	r2, [r3, #32]
}
 8008826:	bf00      	nop
 8008828:	371c      	adds	r7, #28
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr
 8008832:	bf00      	nop
 8008834:	40010000 	.word	0x40010000

08008838 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008838:	b480      	push	{r7}
 800883a:	b087      	sub	sp, #28
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	607a      	str	r2, [r7, #4]
 8008844:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	6a1b      	ldr	r3, [r3, #32]
 800884a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	6a1b      	ldr	r3, [r3, #32]
 8008850:	f023 0201 	bic.w	r2, r3, #1
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	699b      	ldr	r3, [r3, #24]
 800885c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	4a24      	ldr	r2, [pc, #144]	@ (80088f4 <TIM_TI1_SetConfig+0xbc>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d013      	beq.n	800888e <TIM_TI1_SetConfig+0x56>
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800886c:	d00f      	beq.n	800888e <TIM_TI1_SetConfig+0x56>
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	4a21      	ldr	r2, [pc, #132]	@ (80088f8 <TIM_TI1_SetConfig+0xc0>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d00b      	beq.n	800888e <TIM_TI1_SetConfig+0x56>
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	4a20      	ldr	r2, [pc, #128]	@ (80088fc <TIM_TI1_SetConfig+0xc4>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d007      	beq.n	800888e <TIM_TI1_SetConfig+0x56>
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	4a1f      	ldr	r2, [pc, #124]	@ (8008900 <TIM_TI1_SetConfig+0xc8>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d003      	beq.n	800888e <TIM_TI1_SetConfig+0x56>
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	4a1e      	ldr	r2, [pc, #120]	@ (8008904 <TIM_TI1_SetConfig+0xcc>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d101      	bne.n	8008892 <TIM_TI1_SetConfig+0x5a>
 800888e:	2301      	movs	r3, #1
 8008890:	e000      	b.n	8008894 <TIM_TI1_SetConfig+0x5c>
 8008892:	2300      	movs	r3, #0
 8008894:	2b00      	cmp	r3, #0
 8008896:	d008      	beq.n	80088aa <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	f023 0303 	bic.w	r3, r3, #3
 800889e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80088a0:	697a      	ldr	r2, [r7, #20]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4313      	orrs	r3, r2
 80088a6:	617b      	str	r3, [r7, #20]
 80088a8:	e003      	b.n	80088b2 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	f043 0301 	orr.w	r3, r3, #1
 80088b0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80088b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	011b      	lsls	r3, r3, #4
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	697a      	ldr	r2, [r7, #20]
 80088c2:	4313      	orrs	r3, r2
 80088c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	f023 030a 	bic.w	r3, r3, #10
 80088cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	f003 030a 	and.w	r3, r3, #10
 80088d4:	693a      	ldr	r2, [r7, #16]
 80088d6:	4313      	orrs	r3, r2
 80088d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	697a      	ldr	r2, [r7, #20]
 80088de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	693a      	ldr	r2, [r7, #16]
 80088e4:	621a      	str	r2, [r3, #32]
}
 80088e6:	bf00      	nop
 80088e8:	371c      	adds	r7, #28
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr
 80088f2:	bf00      	nop
 80088f4:	40010000 	.word	0x40010000
 80088f8:	40000400 	.word	0x40000400
 80088fc:	40000800 	.word	0x40000800
 8008900:	40000c00 	.word	0x40000c00
 8008904:	40014000 	.word	0x40014000

08008908 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008908:	b480      	push	{r7}
 800890a:	b087      	sub	sp, #28
 800890c:	af00      	add	r7, sp, #0
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	60b9      	str	r1, [r7, #8]
 8008912:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	6a1b      	ldr	r3, [r3, #32]
 8008918:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	6a1b      	ldr	r3, [r3, #32]
 800891e:	f023 0201 	bic.w	r2, r3, #1
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	699b      	ldr	r3, [r3, #24]
 800892a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008932:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	011b      	lsls	r3, r3, #4
 8008938:	693a      	ldr	r2, [r7, #16]
 800893a:	4313      	orrs	r3, r2
 800893c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	f023 030a 	bic.w	r3, r3, #10
 8008944:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008946:	697a      	ldr	r2, [r7, #20]
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	4313      	orrs	r3, r2
 800894c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	693a      	ldr	r2, [r7, #16]
 8008952:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	697a      	ldr	r2, [r7, #20]
 8008958:	621a      	str	r2, [r3, #32]
}
 800895a:	bf00      	nop
 800895c:	371c      	adds	r7, #28
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr

08008966 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008966:	b480      	push	{r7}
 8008968:	b087      	sub	sp, #28
 800896a:	af00      	add	r7, sp, #0
 800896c:	60f8      	str	r0, [r7, #12]
 800896e:	60b9      	str	r1, [r7, #8]
 8008970:	607a      	str	r2, [r7, #4]
 8008972:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	6a1b      	ldr	r3, [r3, #32]
 8008978:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	6a1b      	ldr	r3, [r3, #32]
 800897e:	f023 0210 	bic.w	r2, r3, #16
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	699b      	ldr	r3, [r3, #24]
 800898a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008992:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	021b      	lsls	r3, r3, #8
 8008998:	693a      	ldr	r2, [r7, #16]
 800899a:	4313      	orrs	r3, r2
 800899c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80089a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	031b      	lsls	r3, r3, #12
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	693a      	ldr	r2, [r7, #16]
 80089ae:	4313      	orrs	r3, r2
 80089b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80089b8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	011b      	lsls	r3, r3, #4
 80089be:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80089c2:	697a      	ldr	r2, [r7, #20]
 80089c4:	4313      	orrs	r3, r2
 80089c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	693a      	ldr	r2, [r7, #16]
 80089cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	697a      	ldr	r2, [r7, #20]
 80089d2:	621a      	str	r2, [r3, #32]
}
 80089d4:	bf00      	nop
 80089d6:	371c      	adds	r7, #28
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b087      	sub	sp, #28
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	6a1b      	ldr	r3, [r3, #32]
 80089f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	6a1b      	ldr	r3, [r3, #32]
 80089f6:	f023 0210 	bic.w	r2, r3, #16
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	699b      	ldr	r3, [r3, #24]
 8008a02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008a0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	031b      	lsls	r3, r3, #12
 8008a10:	693a      	ldr	r2, [r7, #16]
 8008a12:	4313      	orrs	r3, r2
 8008a14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008a1c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	011b      	lsls	r3, r3, #4
 8008a22:	697a      	ldr	r2, [r7, #20]
 8008a24:	4313      	orrs	r3, r2
 8008a26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	693a      	ldr	r2, [r7, #16]
 8008a2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	697a      	ldr	r2, [r7, #20]
 8008a32:	621a      	str	r2, [r3, #32]
}
 8008a34:	bf00      	nop
 8008a36:	371c      	adds	r7, #28
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b087      	sub	sp, #28
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	60f8      	str	r0, [r7, #12]
 8008a48:	60b9      	str	r1, [r7, #8]
 8008a4a:	607a      	str	r2, [r7, #4]
 8008a4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	6a1b      	ldr	r3, [r3, #32]
 8008a52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	6a1b      	ldr	r3, [r3, #32]
 8008a58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	69db      	ldr	r3, [r3, #28]
 8008a64:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	f023 0303 	bic.w	r3, r3, #3
 8008a6c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8008a6e:	693a      	ldr	r2, [r7, #16]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	4313      	orrs	r3, r2
 8008a74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008a7c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	011b      	lsls	r3, r3, #4
 8008a82:	b2db      	uxtb	r3, r3
 8008a84:	693a      	ldr	r2, [r7, #16]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8008a90:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	021b      	lsls	r3, r3, #8
 8008a96:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8008a9a:	697a      	ldr	r2, [r7, #20]
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	693a      	ldr	r2, [r7, #16]
 8008aa4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	697a      	ldr	r2, [r7, #20]
 8008aaa:	621a      	str	r2, [r3, #32]
}
 8008aac:	bf00      	nop
 8008aae:	371c      	adds	r7, #28
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b087      	sub	sp, #28
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	607a      	str	r2, [r7, #4]
 8008ac4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	6a1b      	ldr	r3, [r3, #32]
 8008aca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	6a1b      	ldr	r3, [r3, #32]
 8008ad0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	69db      	ldr	r3, [r3, #28]
 8008adc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ae4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	021b      	lsls	r3, r3, #8
 8008aea:	693a      	ldr	r2, [r7, #16]
 8008aec:	4313      	orrs	r3, r2
 8008aee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008af6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	031b      	lsls	r3, r3, #12
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	693a      	ldr	r2, [r7, #16]
 8008b00:	4313      	orrs	r3, r2
 8008b02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8008b0a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	031b      	lsls	r3, r3, #12
 8008b10:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8008b14:	697a      	ldr	r2, [r7, #20]
 8008b16:	4313      	orrs	r3, r2
 8008b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	693a      	ldr	r2, [r7, #16]
 8008b1e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	697a      	ldr	r2, [r7, #20]
 8008b24:	621a      	str	r2, [r3, #32]
}
 8008b26:	bf00      	nop
 8008b28:	371c      	adds	r7, #28
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr

08008b32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008b32:	b480      	push	{r7}
 8008b34:	b085      	sub	sp, #20
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
 8008b3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b4a:	683a      	ldr	r2, [r7, #0]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	f043 0307 	orr.w	r3, r3, #7
 8008b54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	68fa      	ldr	r2, [r7, #12]
 8008b5a:	609a      	str	r2, [r3, #8]
}
 8008b5c:	bf00      	nop
 8008b5e:	3714      	adds	r7, #20
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b087      	sub	sp, #28
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	60b9      	str	r1, [r7, #8]
 8008b72:	607a      	str	r2, [r7, #4]
 8008b74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	689b      	ldr	r3, [r3, #8]
 8008b7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008b82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	021a      	lsls	r2, r3, #8
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	431a      	orrs	r2, r3
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	697a      	ldr	r2, [r7, #20]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	697a      	ldr	r2, [r7, #20]
 8008b9a:	609a      	str	r2, [r3, #8]
}
 8008b9c:	bf00      	nop
 8008b9e:	371c      	adds	r7, #28
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr

08008ba8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b087      	sub	sp, #28
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	60f8      	str	r0, [r7, #12]
 8008bb0:	60b9      	str	r1, [r7, #8]
 8008bb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	f003 031f 	and.w	r3, r3, #31
 8008bba:	2201      	movs	r2, #1
 8008bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8008bc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	6a1a      	ldr	r2, [r3, #32]
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	43db      	mvns	r3, r3
 8008bca:	401a      	ands	r2, r3
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	6a1a      	ldr	r2, [r3, #32]
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	f003 031f 	and.w	r3, r3, #31
 8008bda:	6879      	ldr	r1, [r7, #4]
 8008bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8008be0:	431a      	orrs	r2, r3
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	621a      	str	r2, [r3, #32]
}
 8008be6:	bf00      	nop
 8008be8:	371c      	adds	r7, #28
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr
	...

08008bf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b085      	sub	sp, #20
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d101      	bne.n	8008c0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c08:	2302      	movs	r3, #2
 8008c0a:	e050      	b.n	8008cae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2202      	movs	r2, #2
 8008c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	68fa      	ldr	r2, [r7, #12]
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	68fa      	ldr	r2, [r7, #12]
 8008c44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a1c      	ldr	r2, [pc, #112]	@ (8008cbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d018      	beq.n	8008c82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c58:	d013      	beq.n	8008c82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a18      	ldr	r2, [pc, #96]	@ (8008cc0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d00e      	beq.n	8008c82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a16      	ldr	r2, [pc, #88]	@ (8008cc4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d009      	beq.n	8008c82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a15      	ldr	r2, [pc, #84]	@ (8008cc8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d004      	beq.n	8008c82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a13      	ldr	r2, [pc, #76]	@ (8008ccc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d10c      	bne.n	8008c9c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	68ba      	ldr	r2, [r7, #8]
 8008c90:	4313      	orrs	r3, r2
 8008c92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	68ba      	ldr	r2, [r7, #8]
 8008c9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3714      	adds	r7, #20
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr
 8008cba:	bf00      	nop
 8008cbc:	40010000 	.word	0x40010000
 8008cc0:	40000400 	.word	0x40000400
 8008cc4:	40000800 	.word	0x40000800
 8008cc8:	40000c00 	.word	0x40000c00
 8008ccc:	40014000 	.word	0x40014000

08008cd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b083      	sub	sp, #12
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008cd8:	bf00      	nop
 8008cda:	370c      	adds	r7, #12
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr

08008ce4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b083      	sub	sp, #12
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008cec:	bf00      	nop
 8008cee:	370c      	adds	r7, #12
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr

08008cf8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b082      	sub	sp, #8
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d101      	bne.n	8008d0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d06:	2301      	movs	r3, #1
 8008d08:	e042      	b.n	8008d90 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d10:	b2db      	uxtb	r3, r3
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d106      	bne.n	8008d24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f7fb fc44 	bl	80045ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2224      	movs	r2, #36	@ 0x24
 8008d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	68da      	ldr	r2, [r3, #12]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008d3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 f973 	bl	8009028 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	691a      	ldr	r2, [r3, #16]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008d50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	695a      	ldr	r2, [r3, #20]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008d60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	68da      	ldr	r2, [r3, #12]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008d70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2200      	movs	r2, #0
 8008d76:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2220      	movs	r2, #32
 8008d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2220      	movs	r2, #32
 8008d84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008d8e:	2300      	movs	r3, #0
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3708      	adds	r7, #8
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b08a      	sub	sp, #40	@ 0x28
 8008d9c:	af02      	add	r7, sp, #8
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	60b9      	str	r1, [r7, #8]
 8008da2:	603b      	str	r3, [r7, #0]
 8008da4:	4613      	mov	r3, r2
 8008da6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008da8:	2300      	movs	r3, #0
 8008daa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008db2:	b2db      	uxtb	r3, r3
 8008db4:	2b20      	cmp	r3, #32
 8008db6:	d175      	bne.n	8008ea4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d002      	beq.n	8008dc4 <HAL_UART_Transmit+0x2c>
 8008dbe:	88fb      	ldrh	r3, [r7, #6]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d101      	bne.n	8008dc8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e06e      	b.n	8008ea6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2221      	movs	r2, #33	@ 0x21
 8008dd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008dd6:	f7fb fc91 	bl	80046fc <HAL_GetTick>
 8008dda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	88fa      	ldrh	r2, [r7, #6]
 8008de0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	88fa      	ldrh	r2, [r7, #6]
 8008de6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	689b      	ldr	r3, [r3, #8]
 8008dec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008df0:	d108      	bne.n	8008e04 <HAL_UART_Transmit+0x6c>
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	691b      	ldr	r3, [r3, #16]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d104      	bne.n	8008e04 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	61bb      	str	r3, [r7, #24]
 8008e02:	e003      	b.n	8008e0c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008e0c:	e02e      	b.n	8008e6c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	9300      	str	r3, [sp, #0]
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	2200      	movs	r2, #0
 8008e16:	2180      	movs	r1, #128	@ 0x80
 8008e18:	68f8      	ldr	r0, [r7, #12]
 8008e1a:	f000 f848 	bl	8008eae <UART_WaitOnFlagUntilTimeout>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d005      	beq.n	8008e30 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2220      	movs	r2, #32
 8008e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008e2c:	2303      	movs	r3, #3
 8008e2e:	e03a      	b.n	8008ea6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008e30:	69fb      	ldr	r3, [r7, #28]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d10b      	bne.n	8008e4e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008e36:	69bb      	ldr	r3, [r7, #24]
 8008e38:	881b      	ldrh	r3, [r3, #0]
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	3302      	adds	r3, #2
 8008e4a:	61bb      	str	r3, [r7, #24]
 8008e4c:	e007      	b.n	8008e5e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008e4e:	69fb      	ldr	r3, [r7, #28]
 8008e50:	781a      	ldrb	r2, [r3, #0]
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008e58:	69fb      	ldr	r3, [r7, #28]
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	3b01      	subs	r3, #1
 8008e66:	b29a      	uxth	r2, r3
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d1cb      	bne.n	8008e0e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	9300      	str	r3, [sp, #0]
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	2140      	movs	r1, #64	@ 0x40
 8008e80:	68f8      	ldr	r0, [r7, #12]
 8008e82:	f000 f814 	bl	8008eae <UART_WaitOnFlagUntilTimeout>
 8008e86:	4603      	mov	r3, r0
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d005      	beq.n	8008e98 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2220      	movs	r2, #32
 8008e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008e94:	2303      	movs	r3, #3
 8008e96:	e006      	b.n	8008ea6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2220      	movs	r2, #32
 8008e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	e000      	b.n	8008ea6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008ea4:	2302      	movs	r3, #2
  }
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3720      	adds	r7, #32
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b086      	sub	sp, #24
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	60f8      	str	r0, [r7, #12]
 8008eb6:	60b9      	str	r1, [r7, #8]
 8008eb8:	603b      	str	r3, [r7, #0]
 8008eba:	4613      	mov	r3, r2
 8008ebc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ebe:	e03b      	b.n	8008f38 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ec0:	6a3b      	ldr	r3, [r7, #32]
 8008ec2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ec6:	d037      	beq.n	8008f38 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ec8:	f7fb fc18 	bl	80046fc <HAL_GetTick>
 8008ecc:	4602      	mov	r2, r0
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	1ad3      	subs	r3, r2, r3
 8008ed2:	6a3a      	ldr	r2, [r7, #32]
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d302      	bcc.n	8008ede <UART_WaitOnFlagUntilTimeout+0x30>
 8008ed8:	6a3b      	ldr	r3, [r7, #32]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d101      	bne.n	8008ee2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008ede:	2303      	movs	r3, #3
 8008ee0:	e03a      	b.n	8008f58 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	68db      	ldr	r3, [r3, #12]
 8008ee8:	f003 0304 	and.w	r3, r3, #4
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d023      	beq.n	8008f38 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	2b80      	cmp	r3, #128	@ 0x80
 8008ef4:	d020      	beq.n	8008f38 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	2b40      	cmp	r3, #64	@ 0x40
 8008efa:	d01d      	beq.n	8008f38 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f003 0308 	and.w	r3, r3, #8
 8008f06:	2b08      	cmp	r3, #8
 8008f08:	d116      	bne.n	8008f38 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	617b      	str	r3, [r7, #20]
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	617b      	str	r3, [r7, #20]
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	617b      	str	r3, [r7, #20]
 8008f1e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008f20:	68f8      	ldr	r0, [r7, #12]
 8008f22:	f000 f81d 	bl	8008f60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2208      	movs	r2, #8
 8008f2a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008f34:	2301      	movs	r3, #1
 8008f36:	e00f      	b.n	8008f58 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	4013      	ands	r3, r2
 8008f42:	68ba      	ldr	r2, [r7, #8]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	bf0c      	ite	eq
 8008f48:	2301      	moveq	r3, #1
 8008f4a:	2300      	movne	r3, #0
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	461a      	mov	r2, r3
 8008f50:	79fb      	ldrb	r3, [r7, #7]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d0b4      	beq.n	8008ec0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f56:	2300      	movs	r3, #0
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3718      	adds	r7, #24
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b095      	sub	sp, #84	@ 0x54
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	330c      	adds	r3, #12
 8008f6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f72:	e853 3f00 	ldrex	r3, [r3]
 8008f76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	330c      	adds	r3, #12
 8008f86:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008f88:	643a      	str	r2, [r7, #64]	@ 0x40
 8008f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008f8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f90:	e841 2300 	strex	r3, r2, [r1]
 8008f94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d1e5      	bne.n	8008f68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	3314      	adds	r3, #20
 8008fa2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa4:	6a3b      	ldr	r3, [r7, #32]
 8008fa6:	e853 3f00 	ldrex	r3, [r3]
 8008faa:	61fb      	str	r3, [r7, #28]
   return(result);
 8008fac:	69fb      	ldr	r3, [r7, #28]
 8008fae:	f023 0301 	bic.w	r3, r3, #1
 8008fb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	3314      	adds	r3, #20
 8008fba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008fbc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008fc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008fc4:	e841 2300 	strex	r3, r2, [r1]
 8008fc8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d1e5      	bne.n	8008f9c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d119      	bne.n	800900c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	330c      	adds	r3, #12
 8008fde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	e853 3f00 	ldrex	r3, [r3]
 8008fe6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	f023 0310 	bic.w	r3, r3, #16
 8008fee:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	330c      	adds	r3, #12
 8008ff6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ff8:	61ba      	str	r2, [r7, #24]
 8008ffa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ffc:	6979      	ldr	r1, [r7, #20]
 8008ffe:	69ba      	ldr	r2, [r7, #24]
 8009000:	e841 2300 	strex	r3, r2, [r1]
 8009004:	613b      	str	r3, [r7, #16]
   return(result);
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d1e5      	bne.n	8008fd8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2220      	movs	r2, #32
 8009010:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2200      	movs	r2, #0
 8009018:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800901a:	bf00      	nop
 800901c:	3754      	adds	r7, #84	@ 0x54
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr
	...

08009028 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800902c:	b0c0      	sub	sp, #256	@ 0x100
 800902e:	af00      	add	r7, sp, #0
 8009030:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	691b      	ldr	r3, [r3, #16]
 800903c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009044:	68d9      	ldr	r1, [r3, #12]
 8009046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	ea40 0301 	orr.w	r3, r0, r1
 8009050:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009056:	689a      	ldr	r2, [r3, #8]
 8009058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800905c:	691b      	ldr	r3, [r3, #16]
 800905e:	431a      	orrs	r2, r3
 8009060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009064:	695b      	ldr	r3, [r3, #20]
 8009066:	431a      	orrs	r2, r3
 8009068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800906c:	69db      	ldr	r3, [r3, #28]
 800906e:	4313      	orrs	r3, r2
 8009070:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009080:	f021 010c 	bic.w	r1, r1, #12
 8009084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800908e:	430b      	orrs	r3, r1
 8009090:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	695b      	ldr	r3, [r3, #20]
 800909a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800909e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090a2:	6999      	ldr	r1, [r3, #24]
 80090a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090a8:	681a      	ldr	r2, [r3, #0]
 80090aa:	ea40 0301 	orr.w	r3, r0, r1
 80090ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80090b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	4b8f      	ldr	r3, [pc, #572]	@ (80092f4 <UART_SetConfig+0x2cc>)
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d005      	beq.n	80090c8 <UART_SetConfig+0xa0>
 80090bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090c0:	681a      	ldr	r2, [r3, #0]
 80090c2:	4b8d      	ldr	r3, [pc, #564]	@ (80092f8 <UART_SetConfig+0x2d0>)
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d104      	bne.n	80090d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80090c8:	f7fe faba 	bl	8007640 <HAL_RCC_GetPCLK2Freq>
 80090cc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80090d0:	e003      	b.n	80090da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80090d2:	f7fe faa1 	bl	8007618 <HAL_RCC_GetPCLK1Freq>
 80090d6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090de:	69db      	ldr	r3, [r3, #28]
 80090e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090e4:	f040 810c 	bne.w	8009300 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80090e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80090ec:	2200      	movs	r2, #0
 80090ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80090f2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80090f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80090fa:	4622      	mov	r2, r4
 80090fc:	462b      	mov	r3, r5
 80090fe:	1891      	adds	r1, r2, r2
 8009100:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009102:	415b      	adcs	r3, r3
 8009104:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009106:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800910a:	4621      	mov	r1, r4
 800910c:	eb12 0801 	adds.w	r8, r2, r1
 8009110:	4629      	mov	r1, r5
 8009112:	eb43 0901 	adc.w	r9, r3, r1
 8009116:	f04f 0200 	mov.w	r2, #0
 800911a:	f04f 0300 	mov.w	r3, #0
 800911e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009122:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009126:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800912a:	4690      	mov	r8, r2
 800912c:	4699      	mov	r9, r3
 800912e:	4623      	mov	r3, r4
 8009130:	eb18 0303 	adds.w	r3, r8, r3
 8009134:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009138:	462b      	mov	r3, r5
 800913a:	eb49 0303 	adc.w	r3, r9, r3
 800913e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	2200      	movs	r2, #0
 800914a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800914e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009152:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009156:	460b      	mov	r3, r1
 8009158:	18db      	adds	r3, r3, r3
 800915a:	653b      	str	r3, [r7, #80]	@ 0x50
 800915c:	4613      	mov	r3, r2
 800915e:	eb42 0303 	adc.w	r3, r2, r3
 8009162:	657b      	str	r3, [r7, #84]	@ 0x54
 8009164:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009168:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800916c:	f7f7 fd24 	bl	8000bb8 <__aeabi_uldivmod>
 8009170:	4602      	mov	r2, r0
 8009172:	460b      	mov	r3, r1
 8009174:	4b61      	ldr	r3, [pc, #388]	@ (80092fc <UART_SetConfig+0x2d4>)
 8009176:	fba3 2302 	umull	r2, r3, r3, r2
 800917a:	095b      	lsrs	r3, r3, #5
 800917c:	011c      	lsls	r4, r3, #4
 800917e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009182:	2200      	movs	r2, #0
 8009184:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009188:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800918c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009190:	4642      	mov	r2, r8
 8009192:	464b      	mov	r3, r9
 8009194:	1891      	adds	r1, r2, r2
 8009196:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009198:	415b      	adcs	r3, r3
 800919a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800919c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80091a0:	4641      	mov	r1, r8
 80091a2:	eb12 0a01 	adds.w	sl, r2, r1
 80091a6:	4649      	mov	r1, r9
 80091a8:	eb43 0b01 	adc.w	fp, r3, r1
 80091ac:	f04f 0200 	mov.w	r2, #0
 80091b0:	f04f 0300 	mov.w	r3, #0
 80091b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80091b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80091bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80091c0:	4692      	mov	sl, r2
 80091c2:	469b      	mov	fp, r3
 80091c4:	4643      	mov	r3, r8
 80091c6:	eb1a 0303 	adds.w	r3, sl, r3
 80091ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80091ce:	464b      	mov	r3, r9
 80091d0:	eb4b 0303 	adc.w	r3, fp, r3
 80091d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80091d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	2200      	movs	r2, #0
 80091e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80091e4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80091e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80091ec:	460b      	mov	r3, r1
 80091ee:	18db      	adds	r3, r3, r3
 80091f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80091f2:	4613      	mov	r3, r2
 80091f4:	eb42 0303 	adc.w	r3, r2, r3
 80091f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80091fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80091fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009202:	f7f7 fcd9 	bl	8000bb8 <__aeabi_uldivmod>
 8009206:	4602      	mov	r2, r0
 8009208:	460b      	mov	r3, r1
 800920a:	4611      	mov	r1, r2
 800920c:	4b3b      	ldr	r3, [pc, #236]	@ (80092fc <UART_SetConfig+0x2d4>)
 800920e:	fba3 2301 	umull	r2, r3, r3, r1
 8009212:	095b      	lsrs	r3, r3, #5
 8009214:	2264      	movs	r2, #100	@ 0x64
 8009216:	fb02 f303 	mul.w	r3, r2, r3
 800921a:	1acb      	subs	r3, r1, r3
 800921c:	00db      	lsls	r3, r3, #3
 800921e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009222:	4b36      	ldr	r3, [pc, #216]	@ (80092fc <UART_SetConfig+0x2d4>)
 8009224:	fba3 2302 	umull	r2, r3, r3, r2
 8009228:	095b      	lsrs	r3, r3, #5
 800922a:	005b      	lsls	r3, r3, #1
 800922c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009230:	441c      	add	r4, r3
 8009232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009236:	2200      	movs	r2, #0
 8009238:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800923c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009240:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009244:	4642      	mov	r2, r8
 8009246:	464b      	mov	r3, r9
 8009248:	1891      	adds	r1, r2, r2
 800924a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800924c:	415b      	adcs	r3, r3
 800924e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009250:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009254:	4641      	mov	r1, r8
 8009256:	1851      	adds	r1, r2, r1
 8009258:	6339      	str	r1, [r7, #48]	@ 0x30
 800925a:	4649      	mov	r1, r9
 800925c:	414b      	adcs	r3, r1
 800925e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009260:	f04f 0200 	mov.w	r2, #0
 8009264:	f04f 0300 	mov.w	r3, #0
 8009268:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800926c:	4659      	mov	r1, fp
 800926e:	00cb      	lsls	r3, r1, #3
 8009270:	4651      	mov	r1, sl
 8009272:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009276:	4651      	mov	r1, sl
 8009278:	00ca      	lsls	r2, r1, #3
 800927a:	4610      	mov	r0, r2
 800927c:	4619      	mov	r1, r3
 800927e:	4603      	mov	r3, r0
 8009280:	4642      	mov	r2, r8
 8009282:	189b      	adds	r3, r3, r2
 8009284:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009288:	464b      	mov	r3, r9
 800928a:	460a      	mov	r2, r1
 800928c:	eb42 0303 	adc.w	r3, r2, r3
 8009290:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	2200      	movs	r2, #0
 800929c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80092a0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80092a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80092a8:	460b      	mov	r3, r1
 80092aa:	18db      	adds	r3, r3, r3
 80092ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80092ae:	4613      	mov	r3, r2
 80092b0:	eb42 0303 	adc.w	r3, r2, r3
 80092b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80092b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80092ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80092be:	f7f7 fc7b 	bl	8000bb8 <__aeabi_uldivmod>
 80092c2:	4602      	mov	r2, r0
 80092c4:	460b      	mov	r3, r1
 80092c6:	4b0d      	ldr	r3, [pc, #52]	@ (80092fc <UART_SetConfig+0x2d4>)
 80092c8:	fba3 1302 	umull	r1, r3, r3, r2
 80092cc:	095b      	lsrs	r3, r3, #5
 80092ce:	2164      	movs	r1, #100	@ 0x64
 80092d0:	fb01 f303 	mul.w	r3, r1, r3
 80092d4:	1ad3      	subs	r3, r2, r3
 80092d6:	00db      	lsls	r3, r3, #3
 80092d8:	3332      	adds	r3, #50	@ 0x32
 80092da:	4a08      	ldr	r2, [pc, #32]	@ (80092fc <UART_SetConfig+0x2d4>)
 80092dc:	fba2 2303 	umull	r2, r3, r2, r3
 80092e0:	095b      	lsrs	r3, r3, #5
 80092e2:	f003 0207 	and.w	r2, r3, #7
 80092e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4422      	add	r2, r4
 80092ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80092f0:	e106      	b.n	8009500 <UART_SetConfig+0x4d8>
 80092f2:	bf00      	nop
 80092f4:	40011000 	.word	0x40011000
 80092f8:	40011400 	.word	0x40011400
 80092fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009300:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009304:	2200      	movs	r2, #0
 8009306:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800930a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800930e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009312:	4642      	mov	r2, r8
 8009314:	464b      	mov	r3, r9
 8009316:	1891      	adds	r1, r2, r2
 8009318:	6239      	str	r1, [r7, #32]
 800931a:	415b      	adcs	r3, r3
 800931c:	627b      	str	r3, [r7, #36]	@ 0x24
 800931e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009322:	4641      	mov	r1, r8
 8009324:	1854      	adds	r4, r2, r1
 8009326:	4649      	mov	r1, r9
 8009328:	eb43 0501 	adc.w	r5, r3, r1
 800932c:	f04f 0200 	mov.w	r2, #0
 8009330:	f04f 0300 	mov.w	r3, #0
 8009334:	00eb      	lsls	r3, r5, #3
 8009336:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800933a:	00e2      	lsls	r2, r4, #3
 800933c:	4614      	mov	r4, r2
 800933e:	461d      	mov	r5, r3
 8009340:	4643      	mov	r3, r8
 8009342:	18e3      	adds	r3, r4, r3
 8009344:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009348:	464b      	mov	r3, r9
 800934a:	eb45 0303 	adc.w	r3, r5, r3
 800934e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	2200      	movs	r2, #0
 800935a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800935e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009362:	f04f 0200 	mov.w	r2, #0
 8009366:	f04f 0300 	mov.w	r3, #0
 800936a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800936e:	4629      	mov	r1, r5
 8009370:	008b      	lsls	r3, r1, #2
 8009372:	4621      	mov	r1, r4
 8009374:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009378:	4621      	mov	r1, r4
 800937a:	008a      	lsls	r2, r1, #2
 800937c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009380:	f7f7 fc1a 	bl	8000bb8 <__aeabi_uldivmod>
 8009384:	4602      	mov	r2, r0
 8009386:	460b      	mov	r3, r1
 8009388:	4b60      	ldr	r3, [pc, #384]	@ (800950c <UART_SetConfig+0x4e4>)
 800938a:	fba3 2302 	umull	r2, r3, r3, r2
 800938e:	095b      	lsrs	r3, r3, #5
 8009390:	011c      	lsls	r4, r3, #4
 8009392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009396:	2200      	movs	r2, #0
 8009398:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800939c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80093a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80093a4:	4642      	mov	r2, r8
 80093a6:	464b      	mov	r3, r9
 80093a8:	1891      	adds	r1, r2, r2
 80093aa:	61b9      	str	r1, [r7, #24]
 80093ac:	415b      	adcs	r3, r3
 80093ae:	61fb      	str	r3, [r7, #28]
 80093b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80093b4:	4641      	mov	r1, r8
 80093b6:	1851      	adds	r1, r2, r1
 80093b8:	6139      	str	r1, [r7, #16]
 80093ba:	4649      	mov	r1, r9
 80093bc:	414b      	adcs	r3, r1
 80093be:	617b      	str	r3, [r7, #20]
 80093c0:	f04f 0200 	mov.w	r2, #0
 80093c4:	f04f 0300 	mov.w	r3, #0
 80093c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80093cc:	4659      	mov	r1, fp
 80093ce:	00cb      	lsls	r3, r1, #3
 80093d0:	4651      	mov	r1, sl
 80093d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80093d6:	4651      	mov	r1, sl
 80093d8:	00ca      	lsls	r2, r1, #3
 80093da:	4610      	mov	r0, r2
 80093dc:	4619      	mov	r1, r3
 80093de:	4603      	mov	r3, r0
 80093e0:	4642      	mov	r2, r8
 80093e2:	189b      	adds	r3, r3, r2
 80093e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80093e8:	464b      	mov	r3, r9
 80093ea:	460a      	mov	r2, r1
 80093ec:	eb42 0303 	adc.w	r3, r2, r3
 80093f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80093f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	2200      	movs	r2, #0
 80093fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80093fe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009400:	f04f 0200 	mov.w	r2, #0
 8009404:	f04f 0300 	mov.w	r3, #0
 8009408:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800940c:	4649      	mov	r1, r9
 800940e:	008b      	lsls	r3, r1, #2
 8009410:	4641      	mov	r1, r8
 8009412:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009416:	4641      	mov	r1, r8
 8009418:	008a      	lsls	r2, r1, #2
 800941a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800941e:	f7f7 fbcb 	bl	8000bb8 <__aeabi_uldivmod>
 8009422:	4602      	mov	r2, r0
 8009424:	460b      	mov	r3, r1
 8009426:	4611      	mov	r1, r2
 8009428:	4b38      	ldr	r3, [pc, #224]	@ (800950c <UART_SetConfig+0x4e4>)
 800942a:	fba3 2301 	umull	r2, r3, r3, r1
 800942e:	095b      	lsrs	r3, r3, #5
 8009430:	2264      	movs	r2, #100	@ 0x64
 8009432:	fb02 f303 	mul.w	r3, r2, r3
 8009436:	1acb      	subs	r3, r1, r3
 8009438:	011b      	lsls	r3, r3, #4
 800943a:	3332      	adds	r3, #50	@ 0x32
 800943c:	4a33      	ldr	r2, [pc, #204]	@ (800950c <UART_SetConfig+0x4e4>)
 800943e:	fba2 2303 	umull	r2, r3, r2, r3
 8009442:	095b      	lsrs	r3, r3, #5
 8009444:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009448:	441c      	add	r4, r3
 800944a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800944e:	2200      	movs	r2, #0
 8009450:	673b      	str	r3, [r7, #112]	@ 0x70
 8009452:	677a      	str	r2, [r7, #116]	@ 0x74
 8009454:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009458:	4642      	mov	r2, r8
 800945a:	464b      	mov	r3, r9
 800945c:	1891      	adds	r1, r2, r2
 800945e:	60b9      	str	r1, [r7, #8]
 8009460:	415b      	adcs	r3, r3
 8009462:	60fb      	str	r3, [r7, #12]
 8009464:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009468:	4641      	mov	r1, r8
 800946a:	1851      	adds	r1, r2, r1
 800946c:	6039      	str	r1, [r7, #0]
 800946e:	4649      	mov	r1, r9
 8009470:	414b      	adcs	r3, r1
 8009472:	607b      	str	r3, [r7, #4]
 8009474:	f04f 0200 	mov.w	r2, #0
 8009478:	f04f 0300 	mov.w	r3, #0
 800947c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009480:	4659      	mov	r1, fp
 8009482:	00cb      	lsls	r3, r1, #3
 8009484:	4651      	mov	r1, sl
 8009486:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800948a:	4651      	mov	r1, sl
 800948c:	00ca      	lsls	r2, r1, #3
 800948e:	4610      	mov	r0, r2
 8009490:	4619      	mov	r1, r3
 8009492:	4603      	mov	r3, r0
 8009494:	4642      	mov	r2, r8
 8009496:	189b      	adds	r3, r3, r2
 8009498:	66bb      	str	r3, [r7, #104]	@ 0x68
 800949a:	464b      	mov	r3, r9
 800949c:	460a      	mov	r2, r1
 800949e:	eb42 0303 	adc.w	r3, r2, r3
 80094a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80094a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	2200      	movs	r2, #0
 80094ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80094ae:	667a      	str	r2, [r7, #100]	@ 0x64
 80094b0:	f04f 0200 	mov.w	r2, #0
 80094b4:	f04f 0300 	mov.w	r3, #0
 80094b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80094bc:	4649      	mov	r1, r9
 80094be:	008b      	lsls	r3, r1, #2
 80094c0:	4641      	mov	r1, r8
 80094c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80094c6:	4641      	mov	r1, r8
 80094c8:	008a      	lsls	r2, r1, #2
 80094ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80094ce:	f7f7 fb73 	bl	8000bb8 <__aeabi_uldivmod>
 80094d2:	4602      	mov	r2, r0
 80094d4:	460b      	mov	r3, r1
 80094d6:	4b0d      	ldr	r3, [pc, #52]	@ (800950c <UART_SetConfig+0x4e4>)
 80094d8:	fba3 1302 	umull	r1, r3, r3, r2
 80094dc:	095b      	lsrs	r3, r3, #5
 80094de:	2164      	movs	r1, #100	@ 0x64
 80094e0:	fb01 f303 	mul.w	r3, r1, r3
 80094e4:	1ad3      	subs	r3, r2, r3
 80094e6:	011b      	lsls	r3, r3, #4
 80094e8:	3332      	adds	r3, #50	@ 0x32
 80094ea:	4a08      	ldr	r2, [pc, #32]	@ (800950c <UART_SetConfig+0x4e4>)
 80094ec:	fba2 2303 	umull	r2, r3, r2, r3
 80094f0:	095b      	lsrs	r3, r3, #5
 80094f2:	f003 020f 	and.w	r2, r3, #15
 80094f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4422      	add	r2, r4
 80094fe:	609a      	str	r2, [r3, #8]
}
 8009500:	bf00      	nop
 8009502:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009506:	46bd      	mov	sp, r7
 8009508:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800950c:	51eb851f 	.word	0x51eb851f

08009510 <__NVIC_SetPriority>:
{
 8009510:	b480      	push	{r7}
 8009512:	b083      	sub	sp, #12
 8009514:	af00      	add	r7, sp, #0
 8009516:	4603      	mov	r3, r0
 8009518:	6039      	str	r1, [r7, #0]
 800951a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800951c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009520:	2b00      	cmp	r3, #0
 8009522:	db0a      	blt.n	800953a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	b2da      	uxtb	r2, r3
 8009528:	490c      	ldr	r1, [pc, #48]	@ (800955c <__NVIC_SetPriority+0x4c>)
 800952a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800952e:	0112      	lsls	r2, r2, #4
 8009530:	b2d2      	uxtb	r2, r2
 8009532:	440b      	add	r3, r1
 8009534:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009538:	e00a      	b.n	8009550 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	b2da      	uxtb	r2, r3
 800953e:	4908      	ldr	r1, [pc, #32]	@ (8009560 <__NVIC_SetPriority+0x50>)
 8009540:	79fb      	ldrb	r3, [r7, #7]
 8009542:	f003 030f 	and.w	r3, r3, #15
 8009546:	3b04      	subs	r3, #4
 8009548:	0112      	lsls	r2, r2, #4
 800954a:	b2d2      	uxtb	r2, r2
 800954c:	440b      	add	r3, r1
 800954e:	761a      	strb	r2, [r3, #24]
}
 8009550:	bf00      	nop
 8009552:	370c      	adds	r7, #12
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr
 800955c:	e000e100 	.word	0xe000e100
 8009560:	e000ed00 	.word	0xe000ed00

08009564 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009564:	b580      	push	{r7, lr}
 8009566:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009568:	4b05      	ldr	r3, [pc, #20]	@ (8009580 <SysTick_Handler+0x1c>)
 800956a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800956c:	f002 f86c 	bl	800b648 <xTaskGetSchedulerState>
 8009570:	4603      	mov	r3, r0
 8009572:	2b01      	cmp	r3, #1
 8009574:	d001      	beq.n	800957a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009576:	f002 fe67 	bl	800c248 <xPortSysTickHandler>
  }
}
 800957a:	bf00      	nop
 800957c:	bd80      	pop	{r7, pc}
 800957e:	bf00      	nop
 8009580:	e000e010 	.word	0xe000e010

08009584 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009584:	b580      	push	{r7, lr}
 8009586:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009588:	2100      	movs	r1, #0
 800958a:	f06f 0004 	mvn.w	r0, #4
 800958e:	f7ff ffbf 	bl	8009510 <__NVIC_SetPriority>
#endif
}
 8009592:	bf00      	nop
 8009594:	bd80      	pop	{r7, pc}
	...

08009598 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009598:	b480      	push	{r7}
 800959a:	b083      	sub	sp, #12
 800959c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800959e:	f3ef 8305 	mrs	r3, IPSR
 80095a2:	603b      	str	r3, [r7, #0]
  return(result);
 80095a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d003      	beq.n	80095b2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80095aa:	f06f 0305 	mvn.w	r3, #5
 80095ae:	607b      	str	r3, [r7, #4]
 80095b0:	e00c      	b.n	80095cc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80095b2:	4b0a      	ldr	r3, [pc, #40]	@ (80095dc <osKernelInitialize+0x44>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d105      	bne.n	80095c6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80095ba:	4b08      	ldr	r3, [pc, #32]	@ (80095dc <osKernelInitialize+0x44>)
 80095bc:	2201      	movs	r2, #1
 80095be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80095c0:	2300      	movs	r3, #0
 80095c2:	607b      	str	r3, [r7, #4]
 80095c4:	e002      	b.n	80095cc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80095c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80095ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80095cc:	687b      	ldr	r3, [r7, #4]
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	370c      	adds	r7, #12
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr
 80095da:	bf00      	nop
 80095dc:	20000654 	.word	0x20000654

080095e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b082      	sub	sp, #8
 80095e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095e6:	f3ef 8305 	mrs	r3, IPSR
 80095ea:	603b      	str	r3, [r7, #0]
  return(result);
 80095ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d003      	beq.n	80095fa <osKernelStart+0x1a>
    stat = osErrorISR;
 80095f2:	f06f 0305 	mvn.w	r3, #5
 80095f6:	607b      	str	r3, [r7, #4]
 80095f8:	e010      	b.n	800961c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80095fa:	4b0b      	ldr	r3, [pc, #44]	@ (8009628 <osKernelStart+0x48>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	2b01      	cmp	r3, #1
 8009600:	d109      	bne.n	8009616 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009602:	f7ff ffbf 	bl	8009584 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009606:	4b08      	ldr	r3, [pc, #32]	@ (8009628 <osKernelStart+0x48>)
 8009608:	2202      	movs	r2, #2
 800960a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800960c:	f001 fae4 	bl	800abd8 <vTaskStartScheduler>
      stat = osOK;
 8009610:	2300      	movs	r3, #0
 8009612:	607b      	str	r3, [r7, #4]
 8009614:	e002      	b.n	800961c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009616:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800961a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800961c:	687b      	ldr	r3, [r7, #4]
}
 800961e:	4618      	mov	r0, r3
 8009620:	3708      	adds	r7, #8
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
 8009626:	bf00      	nop
 8009628:	20000654 	.word	0x20000654

0800962c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800962c:	b580      	push	{r7, lr}
 800962e:	b08e      	sub	sp, #56	@ 0x38
 8009630:	af04      	add	r7, sp, #16
 8009632:	60f8      	str	r0, [r7, #12]
 8009634:	60b9      	str	r1, [r7, #8]
 8009636:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009638:	2300      	movs	r3, #0
 800963a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800963c:	f3ef 8305 	mrs	r3, IPSR
 8009640:	617b      	str	r3, [r7, #20]
  return(result);
 8009642:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009644:	2b00      	cmp	r3, #0
 8009646:	d17e      	bne.n	8009746 <osThreadNew+0x11a>
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d07b      	beq.n	8009746 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800964e:	2380      	movs	r3, #128	@ 0x80
 8009650:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009652:	2318      	movs	r3, #24
 8009654:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009656:	2300      	movs	r3, #0
 8009658:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800965a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800965e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d045      	beq.n	80096f2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d002      	beq.n	8009674 <osThreadNew+0x48>
        name = attr->name;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	699b      	ldr	r3, [r3, #24]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d002      	beq.n	8009682 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	699b      	ldr	r3, [r3, #24]
 8009680:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009682:	69fb      	ldr	r3, [r7, #28]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d008      	beq.n	800969a <osThreadNew+0x6e>
 8009688:	69fb      	ldr	r3, [r7, #28]
 800968a:	2b38      	cmp	r3, #56	@ 0x38
 800968c:	d805      	bhi.n	800969a <osThreadNew+0x6e>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	f003 0301 	and.w	r3, r3, #1
 8009696:	2b00      	cmp	r3, #0
 8009698:	d001      	beq.n	800969e <osThreadNew+0x72>
        return (NULL);
 800969a:	2300      	movs	r3, #0
 800969c:	e054      	b.n	8009748 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	695b      	ldr	r3, [r3, #20]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d003      	beq.n	80096ae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	695b      	ldr	r3, [r3, #20]
 80096aa:	089b      	lsrs	r3, r3, #2
 80096ac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d00e      	beq.n	80096d4 <osThreadNew+0xa8>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	68db      	ldr	r3, [r3, #12]
 80096ba:	2baf      	cmp	r3, #175	@ 0xaf
 80096bc:	d90a      	bls.n	80096d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d006      	beq.n	80096d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	695b      	ldr	r3, [r3, #20]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d002      	beq.n	80096d4 <osThreadNew+0xa8>
        mem = 1;
 80096ce:	2301      	movs	r3, #1
 80096d0:	61bb      	str	r3, [r7, #24]
 80096d2:	e010      	b.n	80096f6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d10c      	bne.n	80096f6 <osThreadNew+0xca>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	68db      	ldr	r3, [r3, #12]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d108      	bne.n	80096f6 <osThreadNew+0xca>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	691b      	ldr	r3, [r3, #16]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d104      	bne.n	80096f6 <osThreadNew+0xca>
          mem = 0;
 80096ec:	2300      	movs	r3, #0
 80096ee:	61bb      	str	r3, [r7, #24]
 80096f0:	e001      	b.n	80096f6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80096f2:	2300      	movs	r3, #0
 80096f4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80096f6:	69bb      	ldr	r3, [r7, #24]
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d110      	bne.n	800971e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009700:	687a      	ldr	r2, [r7, #4]
 8009702:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009704:	9202      	str	r2, [sp, #8]
 8009706:	9301      	str	r3, [sp, #4]
 8009708:	69fb      	ldr	r3, [r7, #28]
 800970a:	9300      	str	r3, [sp, #0]
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	6a3a      	ldr	r2, [r7, #32]
 8009710:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009712:	68f8      	ldr	r0, [r7, #12]
 8009714:	f001 f866 	bl	800a7e4 <xTaskCreateStatic>
 8009718:	4603      	mov	r3, r0
 800971a:	613b      	str	r3, [r7, #16]
 800971c:	e013      	b.n	8009746 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800971e:	69bb      	ldr	r3, [r7, #24]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d110      	bne.n	8009746 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009724:	6a3b      	ldr	r3, [r7, #32]
 8009726:	b29a      	uxth	r2, r3
 8009728:	f107 0310 	add.w	r3, r7, #16
 800972c:	9301      	str	r3, [sp, #4]
 800972e:	69fb      	ldr	r3, [r7, #28]
 8009730:	9300      	str	r3, [sp, #0]
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009736:	68f8      	ldr	r0, [r7, #12]
 8009738:	f001 f8b4 	bl	800a8a4 <xTaskCreate>
 800973c:	4603      	mov	r3, r0
 800973e:	2b01      	cmp	r3, #1
 8009740:	d001      	beq.n	8009746 <osThreadNew+0x11a>
            hTask = NULL;
 8009742:	2300      	movs	r3, #0
 8009744:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009746:	693b      	ldr	r3, [r7, #16]
}
 8009748:	4618      	mov	r0, r3
 800974a:	3728      	adds	r7, #40	@ 0x28
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009750:	b580      	push	{r7, lr}
 8009752:	b084      	sub	sp, #16
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009758:	f3ef 8305 	mrs	r3, IPSR
 800975c:	60bb      	str	r3, [r7, #8]
  return(result);
 800975e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009760:	2b00      	cmp	r3, #0
 8009762:	d003      	beq.n	800976c <osDelay+0x1c>
    stat = osErrorISR;
 8009764:	f06f 0305 	mvn.w	r3, #5
 8009768:	60fb      	str	r3, [r7, #12]
 800976a:	e007      	b.n	800977c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800976c:	2300      	movs	r3, #0
 800976e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d002      	beq.n	800977c <osDelay+0x2c>
      vTaskDelay(ticks);
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f001 f9f8 	bl	800ab6c <vTaskDelay>
    }
  }

  return (stat);
 800977c:	68fb      	ldr	r3, [r7, #12]
}
 800977e:	4618      	mov	r0, r3
 8009780:	3710      	adds	r7, #16
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}

08009786 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009786:	b580      	push	{r7, lr}
 8009788:	b08a      	sub	sp, #40	@ 0x28
 800978a:	af02      	add	r7, sp, #8
 800978c:	60f8      	str	r0, [r7, #12]
 800978e:	60b9      	str	r1, [r7, #8]
 8009790:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009792:	2300      	movs	r3, #0
 8009794:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009796:	f3ef 8305 	mrs	r3, IPSR
 800979a:	613b      	str	r3, [r7, #16]
  return(result);
 800979c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d15f      	bne.n	8009862 <osMessageQueueNew+0xdc>
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d05c      	beq.n	8009862 <osMessageQueueNew+0xdc>
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d059      	beq.n	8009862 <osMessageQueueNew+0xdc>
    mem = -1;
 80097ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80097b2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d029      	beq.n	800980e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	689b      	ldr	r3, [r3, #8]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d012      	beq.n	80097e8 <osMessageQueueNew+0x62>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	2b4f      	cmp	r3, #79	@ 0x4f
 80097c8:	d90e      	bls.n	80097e8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d00a      	beq.n	80097e8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	695a      	ldr	r2, [r3, #20]
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	68b9      	ldr	r1, [r7, #8]
 80097da:	fb01 f303 	mul.w	r3, r1, r3
 80097de:	429a      	cmp	r2, r3
 80097e0:	d302      	bcc.n	80097e8 <osMessageQueueNew+0x62>
        mem = 1;
 80097e2:	2301      	movs	r3, #1
 80097e4:	61bb      	str	r3, [r7, #24]
 80097e6:	e014      	b.n	8009812 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d110      	bne.n	8009812 <osMessageQueueNew+0x8c>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	68db      	ldr	r3, [r3, #12]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d10c      	bne.n	8009812 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d108      	bne.n	8009812 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	695b      	ldr	r3, [r3, #20]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d104      	bne.n	8009812 <osMessageQueueNew+0x8c>
          mem = 0;
 8009808:	2300      	movs	r3, #0
 800980a:	61bb      	str	r3, [r7, #24]
 800980c:	e001      	b.n	8009812 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800980e:	2300      	movs	r3, #0
 8009810:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009812:	69bb      	ldr	r3, [r7, #24]
 8009814:	2b01      	cmp	r3, #1
 8009816:	d10b      	bne.n	8009830 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	691a      	ldr	r2, [r3, #16]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	689b      	ldr	r3, [r3, #8]
 8009820:	2100      	movs	r1, #0
 8009822:	9100      	str	r1, [sp, #0]
 8009824:	68b9      	ldr	r1, [r7, #8]
 8009826:	68f8      	ldr	r0, [r7, #12]
 8009828:	f000 fa50 	bl	8009ccc <xQueueGenericCreateStatic>
 800982c:	61f8      	str	r0, [r7, #28]
 800982e:	e008      	b.n	8009842 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009830:	69bb      	ldr	r3, [r7, #24]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d105      	bne.n	8009842 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009836:	2200      	movs	r2, #0
 8009838:	68b9      	ldr	r1, [r7, #8]
 800983a:	68f8      	ldr	r0, [r7, #12]
 800983c:	f000 fac3 	bl	8009dc6 <xQueueGenericCreate>
 8009840:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009842:	69fb      	ldr	r3, [r7, #28]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d00c      	beq.n	8009862 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d003      	beq.n	8009856 <osMessageQueueNew+0xd0>
        name = attr->name;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	617b      	str	r3, [r7, #20]
 8009854:	e001      	b.n	800985a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009856:	2300      	movs	r3, #0
 8009858:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800985a:	6979      	ldr	r1, [r7, #20]
 800985c:	69f8      	ldr	r0, [r7, #28]
 800985e:	f000 ff63 	bl	800a728 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009862:	69fb      	ldr	r3, [r7, #28]
}
 8009864:	4618      	mov	r0, r3
 8009866:	3720      	adds	r7, #32
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800986c:	b580      	push	{r7, lr}
 800986e:	b088      	sub	sp, #32
 8009870:	af00      	add	r7, sp, #0
 8009872:	60f8      	str	r0, [r7, #12]
 8009874:	60b9      	str	r1, [r7, #8]
 8009876:	603b      	str	r3, [r7, #0]
 8009878:	4613      	mov	r3, r2
 800987a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009880:	2300      	movs	r3, #0
 8009882:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009884:	f3ef 8305 	mrs	r3, IPSR
 8009888:	617b      	str	r3, [r7, #20]
  return(result);
 800988a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800988c:	2b00      	cmp	r3, #0
 800988e:	d028      	beq.n	80098e2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009890:	69bb      	ldr	r3, [r7, #24]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d005      	beq.n	80098a2 <osMessageQueuePut+0x36>
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d002      	beq.n	80098a2 <osMessageQueuePut+0x36>
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d003      	beq.n	80098aa <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80098a2:	f06f 0303 	mvn.w	r3, #3
 80098a6:	61fb      	str	r3, [r7, #28]
 80098a8:	e038      	b.n	800991c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80098aa:	2300      	movs	r3, #0
 80098ac:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80098ae:	f107 0210 	add.w	r2, r7, #16
 80098b2:	2300      	movs	r3, #0
 80098b4:	68b9      	ldr	r1, [r7, #8]
 80098b6:	69b8      	ldr	r0, [r7, #24]
 80098b8:	f000 fbe6 	bl	800a088 <xQueueGenericSendFromISR>
 80098bc:	4603      	mov	r3, r0
 80098be:	2b01      	cmp	r3, #1
 80098c0:	d003      	beq.n	80098ca <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80098c2:	f06f 0302 	mvn.w	r3, #2
 80098c6:	61fb      	str	r3, [r7, #28]
 80098c8:	e028      	b.n	800991c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d025      	beq.n	800991c <osMessageQueuePut+0xb0>
 80098d0:	4b15      	ldr	r3, [pc, #84]	@ (8009928 <osMessageQueuePut+0xbc>)
 80098d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098d6:	601a      	str	r2, [r3, #0]
 80098d8:	f3bf 8f4f 	dsb	sy
 80098dc:	f3bf 8f6f 	isb	sy
 80098e0:	e01c      	b.n	800991c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80098e2:	69bb      	ldr	r3, [r7, #24]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d002      	beq.n	80098ee <osMessageQueuePut+0x82>
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d103      	bne.n	80098f6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80098ee:	f06f 0303 	mvn.w	r3, #3
 80098f2:	61fb      	str	r3, [r7, #28]
 80098f4:	e012      	b.n	800991c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80098f6:	2300      	movs	r3, #0
 80098f8:	683a      	ldr	r2, [r7, #0]
 80098fa:	68b9      	ldr	r1, [r7, #8]
 80098fc:	69b8      	ldr	r0, [r7, #24]
 80098fe:	f000 fac1 	bl	8009e84 <xQueueGenericSend>
 8009902:	4603      	mov	r3, r0
 8009904:	2b01      	cmp	r3, #1
 8009906:	d009      	beq.n	800991c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d003      	beq.n	8009916 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800990e:	f06f 0301 	mvn.w	r3, #1
 8009912:	61fb      	str	r3, [r7, #28]
 8009914:	e002      	b.n	800991c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8009916:	f06f 0302 	mvn.w	r3, #2
 800991a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800991c:	69fb      	ldr	r3, [r7, #28]
}
 800991e:	4618      	mov	r0, r3
 8009920:	3720      	adds	r7, #32
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop
 8009928:	e000ed04 	.word	0xe000ed04

0800992c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800992c:	b580      	push	{r7, lr}
 800992e:	b088      	sub	sp, #32
 8009930:	af00      	add	r7, sp, #0
 8009932:	60f8      	str	r0, [r7, #12]
 8009934:	60b9      	str	r1, [r7, #8]
 8009936:	607a      	str	r2, [r7, #4]
 8009938:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800993e:	2300      	movs	r3, #0
 8009940:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009942:	f3ef 8305 	mrs	r3, IPSR
 8009946:	617b      	str	r3, [r7, #20]
  return(result);
 8009948:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800994a:	2b00      	cmp	r3, #0
 800994c:	d028      	beq.n	80099a0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800994e:	69bb      	ldr	r3, [r7, #24]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d005      	beq.n	8009960 <osMessageQueueGet+0x34>
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d002      	beq.n	8009960 <osMessageQueueGet+0x34>
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d003      	beq.n	8009968 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009960:	f06f 0303 	mvn.w	r3, #3
 8009964:	61fb      	str	r3, [r7, #28]
 8009966:	e037      	b.n	80099d8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009968:	2300      	movs	r3, #0
 800996a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800996c:	f107 0310 	add.w	r3, r7, #16
 8009970:	461a      	mov	r2, r3
 8009972:	68b9      	ldr	r1, [r7, #8]
 8009974:	69b8      	ldr	r0, [r7, #24]
 8009976:	f000 fd07 	bl	800a388 <xQueueReceiveFromISR>
 800997a:	4603      	mov	r3, r0
 800997c:	2b01      	cmp	r3, #1
 800997e:	d003      	beq.n	8009988 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009980:	f06f 0302 	mvn.w	r3, #2
 8009984:	61fb      	str	r3, [r7, #28]
 8009986:	e027      	b.n	80099d8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d024      	beq.n	80099d8 <osMessageQueueGet+0xac>
 800998e:	4b15      	ldr	r3, [pc, #84]	@ (80099e4 <osMessageQueueGet+0xb8>)
 8009990:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009994:	601a      	str	r2, [r3, #0]
 8009996:	f3bf 8f4f 	dsb	sy
 800999a:	f3bf 8f6f 	isb	sy
 800999e:	e01b      	b.n	80099d8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80099a0:	69bb      	ldr	r3, [r7, #24]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d002      	beq.n	80099ac <osMessageQueueGet+0x80>
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d103      	bne.n	80099b4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80099ac:	f06f 0303 	mvn.w	r3, #3
 80099b0:	61fb      	str	r3, [r7, #28]
 80099b2:	e011      	b.n	80099d8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80099b4:	683a      	ldr	r2, [r7, #0]
 80099b6:	68b9      	ldr	r1, [r7, #8]
 80099b8:	69b8      	ldr	r0, [r7, #24]
 80099ba:	f000 fc03 	bl	800a1c4 <xQueueReceive>
 80099be:	4603      	mov	r3, r0
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d009      	beq.n	80099d8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d003      	beq.n	80099d2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80099ca:	f06f 0301 	mvn.w	r3, #1
 80099ce:	61fb      	str	r3, [r7, #28]
 80099d0:	e002      	b.n	80099d8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80099d2:	f06f 0302 	mvn.w	r3, #2
 80099d6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80099d8:	69fb      	ldr	r3, [r7, #28]
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3720      	adds	r7, #32
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}
 80099e2:	bf00      	nop
 80099e4:	e000ed04 	.word	0xe000ed04

080099e8 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b086      	sub	sp, #24
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d102      	bne.n	8009a00 <osMessageQueueGetCount+0x18>
    count = 0U;
 80099fa:	2300      	movs	r3, #0
 80099fc:	617b      	str	r3, [r7, #20]
 80099fe:	e00e      	b.n	8009a1e <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a00:	f3ef 8305 	mrs	r3, IPSR
 8009a04:	60fb      	str	r3, [r7, #12]
  return(result);
 8009a06:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d004      	beq.n	8009a16 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8009a0c:	6938      	ldr	r0, [r7, #16]
 8009a0e:	f000 fd5c 	bl	800a4ca <uxQueueMessagesWaitingFromISR>
 8009a12:	6178      	str	r0, [r7, #20]
 8009a14:	e003      	b.n	8009a1e <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8009a16:	6938      	ldr	r0, [r7, #16]
 8009a18:	f000 fd38 	bl	800a48c <uxQueueMessagesWaiting>
 8009a1c:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8009a1e:	697b      	ldr	r3, [r7, #20]
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3718      	adds	r7, #24
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009a28:	b480      	push	{r7}
 8009a2a:	b085      	sub	sp, #20
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	60f8      	str	r0, [r7, #12]
 8009a30:	60b9      	str	r1, [r7, #8]
 8009a32:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	4a07      	ldr	r2, [pc, #28]	@ (8009a54 <vApplicationGetIdleTaskMemory+0x2c>)
 8009a38:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	4a06      	ldr	r2, [pc, #24]	@ (8009a58 <vApplicationGetIdleTaskMemory+0x30>)
 8009a3e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2280      	movs	r2, #128	@ 0x80
 8009a44:	601a      	str	r2, [r3, #0]
}
 8009a46:	bf00      	nop
 8009a48:	3714      	adds	r7, #20
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr
 8009a52:	bf00      	nop
 8009a54:	20000658 	.word	0x20000658
 8009a58:	20000708 	.word	0x20000708

08009a5c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009a5c:	b480      	push	{r7}
 8009a5e:	b085      	sub	sp, #20
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	60b9      	str	r1, [r7, #8]
 8009a66:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	4a07      	ldr	r2, [pc, #28]	@ (8009a88 <vApplicationGetTimerTaskMemory+0x2c>)
 8009a6c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	4a06      	ldr	r2, [pc, #24]	@ (8009a8c <vApplicationGetTimerTaskMemory+0x30>)
 8009a72:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009a7a:	601a      	str	r2, [r3, #0]
}
 8009a7c:	bf00      	nop
 8009a7e:	3714      	adds	r7, #20
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr
 8009a88:	20000908 	.word	0x20000908
 8009a8c:	200009b8 	.word	0x200009b8

08009a90 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009a90:	b480      	push	{r7}
 8009a92:	b083      	sub	sp, #12
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f103 0208 	add.w	r2, r3, #8
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009aa8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f103 0208 	add.w	r2, r3, #8
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f103 0208 	add.w	r2, r3, #8
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009ac4:	bf00      	nop
 8009ac6:	370c      	adds	r7, #12
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr

08009ad0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b083      	sub	sp, #12
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2200      	movs	r2, #0
 8009adc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009ade:	bf00      	nop
 8009ae0:	370c      	adds	r7, #12
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae8:	4770      	bx	lr

08009aea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009aea:	b480      	push	{r7}
 8009aec:	b085      	sub	sp, #20
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	6078      	str	r0, [r7, #4]
 8009af2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	68fa      	ldr	r2, [r7, #12]
 8009afe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	689a      	ldr	r2, [r3, #8]
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	689b      	ldr	r3, [r3, #8]
 8009b0c:	683a      	ldr	r2, [r7, #0]
 8009b0e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	683a      	ldr	r2, [r7, #0]
 8009b14:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	1c5a      	adds	r2, r3, #1
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	601a      	str	r2, [r3, #0]
}
 8009b26:	bf00      	nop
 8009b28:	3714      	adds	r7, #20
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b30:	4770      	bx	lr

08009b32 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009b32:	b480      	push	{r7}
 8009b34:	b085      	sub	sp, #20
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	6078      	str	r0, [r7, #4]
 8009b3a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009b48:	d103      	bne.n	8009b52 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	691b      	ldr	r3, [r3, #16]
 8009b4e:	60fb      	str	r3, [r7, #12]
 8009b50:	e00c      	b.n	8009b6c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	3308      	adds	r3, #8
 8009b56:	60fb      	str	r3, [r7, #12]
 8009b58:	e002      	b.n	8009b60 <vListInsert+0x2e>
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	60fb      	str	r3, [r7, #12]
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	68ba      	ldr	r2, [r7, #8]
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d2f6      	bcs.n	8009b5a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	685a      	ldr	r2, [r3, #4]
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	683a      	ldr	r2, [r7, #0]
 8009b7a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	68fa      	ldr	r2, [r7, #12]
 8009b80:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	683a      	ldr	r2, [r7, #0]
 8009b86:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	1c5a      	adds	r2, r3, #1
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	601a      	str	r2, [r3, #0]
}
 8009b98:	bf00      	nop
 8009b9a:	3714      	adds	r7, #20
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr

08009ba4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b085      	sub	sp, #20
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	691b      	ldr	r3, [r3, #16]
 8009bb0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	6892      	ldr	r2, [r2, #8]
 8009bba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	689b      	ldr	r3, [r3, #8]
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	6852      	ldr	r2, [r2, #4]
 8009bc4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d103      	bne.n	8009bd8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	689a      	ldr	r2, [r3, #8]
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	1e5a      	subs	r2, r3, #1
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3714      	adds	r7, #20
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr

08009bf8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b084      	sub	sp, #16
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d10b      	bne.n	8009c24 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c10:	f383 8811 	msr	BASEPRI, r3
 8009c14:	f3bf 8f6f 	isb	sy
 8009c18:	f3bf 8f4f 	dsb	sy
 8009c1c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009c1e:	bf00      	nop
 8009c20:	bf00      	nop
 8009c22:	e7fd      	b.n	8009c20 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009c24:	f002 fa80 	bl	800c128 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681a      	ldr	r2, [r3, #0]
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c30:	68f9      	ldr	r1, [r7, #12]
 8009c32:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009c34:	fb01 f303 	mul.w	r3, r1, r3
 8009c38:	441a      	add	r2, r3
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2200      	movs	r2, #0
 8009c42:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681a      	ldr	r2, [r3, #0]
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681a      	ldr	r2, [r3, #0]
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c54:	3b01      	subs	r3, #1
 8009c56:	68f9      	ldr	r1, [r7, #12]
 8009c58:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009c5a:	fb01 f303 	mul.w	r3, r1, r3
 8009c5e:	441a      	add	r2, r3
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	22ff      	movs	r2, #255	@ 0xff
 8009c68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	22ff      	movs	r2, #255	@ 0xff
 8009c70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d114      	bne.n	8009ca4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	691b      	ldr	r3, [r3, #16]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d01a      	beq.n	8009cb8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	3310      	adds	r3, #16
 8009c86:	4618      	mov	r0, r3
 8009c88:	f001 fac0 	bl	800b20c <xTaskRemoveFromEventList>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d012      	beq.n	8009cb8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009c92:	4b0d      	ldr	r3, [pc, #52]	@ (8009cc8 <xQueueGenericReset+0xd0>)
 8009c94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c98:	601a      	str	r2, [r3, #0]
 8009c9a:	f3bf 8f4f 	dsb	sy
 8009c9e:	f3bf 8f6f 	isb	sy
 8009ca2:	e009      	b.n	8009cb8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	3310      	adds	r3, #16
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f7ff fef1 	bl	8009a90 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	3324      	adds	r3, #36	@ 0x24
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f7ff feec 	bl	8009a90 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009cb8:	f002 fa68 	bl	800c18c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009cbc:	2301      	movs	r3, #1
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3710      	adds	r7, #16
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	e000ed04 	.word	0xe000ed04

08009ccc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b08e      	sub	sp, #56	@ 0x38
 8009cd0:	af02      	add	r7, sp, #8
 8009cd2:	60f8      	str	r0, [r7, #12]
 8009cd4:	60b9      	str	r1, [r7, #8]
 8009cd6:	607a      	str	r2, [r7, #4]
 8009cd8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d10b      	bne.n	8009cf8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ce4:	f383 8811 	msr	BASEPRI, r3
 8009ce8:	f3bf 8f6f 	isb	sy
 8009cec:	f3bf 8f4f 	dsb	sy
 8009cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009cf2:	bf00      	nop
 8009cf4:	bf00      	nop
 8009cf6:	e7fd      	b.n	8009cf4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d10b      	bne.n	8009d16 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d02:	f383 8811 	msr	BASEPRI, r3
 8009d06:	f3bf 8f6f 	isb	sy
 8009d0a:	f3bf 8f4f 	dsb	sy
 8009d0e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009d10:	bf00      	nop
 8009d12:	bf00      	nop
 8009d14:	e7fd      	b.n	8009d12 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d002      	beq.n	8009d22 <xQueueGenericCreateStatic+0x56>
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d001      	beq.n	8009d26 <xQueueGenericCreateStatic+0x5a>
 8009d22:	2301      	movs	r3, #1
 8009d24:	e000      	b.n	8009d28 <xQueueGenericCreateStatic+0x5c>
 8009d26:	2300      	movs	r3, #0
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d10b      	bne.n	8009d44 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d30:	f383 8811 	msr	BASEPRI, r3
 8009d34:	f3bf 8f6f 	isb	sy
 8009d38:	f3bf 8f4f 	dsb	sy
 8009d3c:	623b      	str	r3, [r7, #32]
}
 8009d3e:	bf00      	nop
 8009d40:	bf00      	nop
 8009d42:	e7fd      	b.n	8009d40 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d102      	bne.n	8009d50 <xQueueGenericCreateStatic+0x84>
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d101      	bne.n	8009d54 <xQueueGenericCreateStatic+0x88>
 8009d50:	2301      	movs	r3, #1
 8009d52:	e000      	b.n	8009d56 <xQueueGenericCreateStatic+0x8a>
 8009d54:	2300      	movs	r3, #0
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d10b      	bne.n	8009d72 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d5e:	f383 8811 	msr	BASEPRI, r3
 8009d62:	f3bf 8f6f 	isb	sy
 8009d66:	f3bf 8f4f 	dsb	sy
 8009d6a:	61fb      	str	r3, [r7, #28]
}
 8009d6c:	bf00      	nop
 8009d6e:	bf00      	nop
 8009d70:	e7fd      	b.n	8009d6e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009d72:	2350      	movs	r3, #80	@ 0x50
 8009d74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	2b50      	cmp	r3, #80	@ 0x50
 8009d7a:	d00b      	beq.n	8009d94 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d80:	f383 8811 	msr	BASEPRI, r3
 8009d84:	f3bf 8f6f 	isb	sy
 8009d88:	f3bf 8f4f 	dsb	sy
 8009d8c:	61bb      	str	r3, [r7, #24]
}
 8009d8e:	bf00      	nop
 8009d90:	bf00      	nop
 8009d92:	e7fd      	b.n	8009d90 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009d94:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d00d      	beq.n	8009dbc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009da2:	2201      	movs	r2, #1
 8009da4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009da8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dae:	9300      	str	r3, [sp, #0]
 8009db0:	4613      	mov	r3, r2
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	68b9      	ldr	r1, [r7, #8]
 8009db6:	68f8      	ldr	r0, [r7, #12]
 8009db8:	f000 f840 	bl	8009e3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3730      	adds	r7, #48	@ 0x30
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}

08009dc6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009dc6:	b580      	push	{r7, lr}
 8009dc8:	b08a      	sub	sp, #40	@ 0x28
 8009dca:	af02      	add	r7, sp, #8
 8009dcc:	60f8      	str	r0, [r7, #12]
 8009dce:	60b9      	str	r1, [r7, #8]
 8009dd0:	4613      	mov	r3, r2
 8009dd2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d10b      	bne.n	8009df2 <xQueueGenericCreate+0x2c>
	__asm volatile
 8009dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dde:	f383 8811 	msr	BASEPRI, r3
 8009de2:	f3bf 8f6f 	isb	sy
 8009de6:	f3bf 8f4f 	dsb	sy
 8009dea:	613b      	str	r3, [r7, #16]
}
 8009dec:	bf00      	nop
 8009dee:	bf00      	nop
 8009df0:	e7fd      	b.n	8009dee <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	68ba      	ldr	r2, [r7, #8]
 8009df6:	fb02 f303 	mul.w	r3, r2, r3
 8009dfa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009dfc:	69fb      	ldr	r3, [r7, #28]
 8009dfe:	3350      	adds	r3, #80	@ 0x50
 8009e00:	4618      	mov	r0, r3
 8009e02:	f002 fb97 	bl	800c534 <pvPortMalloc>
 8009e06:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009e08:	69bb      	ldr	r3, [r7, #24]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d011      	beq.n	8009e32 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009e0e:	69bb      	ldr	r3, [r7, #24]
 8009e10:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	3350      	adds	r3, #80	@ 0x50
 8009e16:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009e18:	69bb      	ldr	r3, [r7, #24]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009e20:	79fa      	ldrb	r2, [r7, #7]
 8009e22:	69bb      	ldr	r3, [r7, #24]
 8009e24:	9300      	str	r3, [sp, #0]
 8009e26:	4613      	mov	r3, r2
 8009e28:	697a      	ldr	r2, [r7, #20]
 8009e2a:	68b9      	ldr	r1, [r7, #8]
 8009e2c:	68f8      	ldr	r0, [r7, #12]
 8009e2e:	f000 f805 	bl	8009e3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009e32:	69bb      	ldr	r3, [r7, #24]
	}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3720      	adds	r7, #32
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b084      	sub	sp, #16
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	60b9      	str	r1, [r7, #8]
 8009e46:	607a      	str	r2, [r7, #4]
 8009e48:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d103      	bne.n	8009e58 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009e50:	69bb      	ldr	r3, [r7, #24]
 8009e52:	69ba      	ldr	r2, [r7, #24]
 8009e54:	601a      	str	r2, [r3, #0]
 8009e56:	e002      	b.n	8009e5e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009e58:	69bb      	ldr	r3, [r7, #24]
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009e5e:	69bb      	ldr	r3, [r7, #24]
 8009e60:	68fa      	ldr	r2, [r7, #12]
 8009e62:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009e64:	69bb      	ldr	r3, [r7, #24]
 8009e66:	68ba      	ldr	r2, [r7, #8]
 8009e68:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009e6a:	2101      	movs	r1, #1
 8009e6c:	69b8      	ldr	r0, [r7, #24]
 8009e6e:	f7ff fec3 	bl	8009bf8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009e72:	69bb      	ldr	r3, [r7, #24]
 8009e74:	78fa      	ldrb	r2, [r7, #3]
 8009e76:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009e7a:	bf00      	nop
 8009e7c:	3710      	adds	r7, #16
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
	...

08009e84 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b08e      	sub	sp, #56	@ 0x38
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	60f8      	str	r0, [r7, #12]
 8009e8c:	60b9      	str	r1, [r7, #8]
 8009e8e:	607a      	str	r2, [r7, #4]
 8009e90:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009e92:	2300      	movs	r3, #0
 8009e94:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d10b      	bne.n	8009eb8 <xQueueGenericSend+0x34>
	__asm volatile
 8009ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ea4:	f383 8811 	msr	BASEPRI, r3
 8009ea8:	f3bf 8f6f 	isb	sy
 8009eac:	f3bf 8f4f 	dsb	sy
 8009eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009eb2:	bf00      	nop
 8009eb4:	bf00      	nop
 8009eb6:	e7fd      	b.n	8009eb4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d103      	bne.n	8009ec6 <xQueueGenericSend+0x42>
 8009ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d101      	bne.n	8009eca <xQueueGenericSend+0x46>
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	e000      	b.n	8009ecc <xQueueGenericSend+0x48>
 8009eca:	2300      	movs	r3, #0
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d10b      	bne.n	8009ee8 <xQueueGenericSend+0x64>
	__asm volatile
 8009ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ed4:	f383 8811 	msr	BASEPRI, r3
 8009ed8:	f3bf 8f6f 	isb	sy
 8009edc:	f3bf 8f4f 	dsb	sy
 8009ee0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009ee2:	bf00      	nop
 8009ee4:	bf00      	nop
 8009ee6:	e7fd      	b.n	8009ee4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	2b02      	cmp	r3, #2
 8009eec:	d103      	bne.n	8009ef6 <xQueueGenericSend+0x72>
 8009eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d101      	bne.n	8009efa <xQueueGenericSend+0x76>
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	e000      	b.n	8009efc <xQueueGenericSend+0x78>
 8009efa:	2300      	movs	r3, #0
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d10b      	bne.n	8009f18 <xQueueGenericSend+0x94>
	__asm volatile
 8009f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f04:	f383 8811 	msr	BASEPRI, r3
 8009f08:	f3bf 8f6f 	isb	sy
 8009f0c:	f3bf 8f4f 	dsb	sy
 8009f10:	623b      	str	r3, [r7, #32]
}
 8009f12:	bf00      	nop
 8009f14:	bf00      	nop
 8009f16:	e7fd      	b.n	8009f14 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009f18:	f001 fb96 	bl	800b648 <xTaskGetSchedulerState>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d102      	bne.n	8009f28 <xQueueGenericSend+0xa4>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d101      	bne.n	8009f2c <xQueueGenericSend+0xa8>
 8009f28:	2301      	movs	r3, #1
 8009f2a:	e000      	b.n	8009f2e <xQueueGenericSend+0xaa>
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d10b      	bne.n	8009f4a <xQueueGenericSend+0xc6>
	__asm volatile
 8009f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f36:	f383 8811 	msr	BASEPRI, r3
 8009f3a:	f3bf 8f6f 	isb	sy
 8009f3e:	f3bf 8f4f 	dsb	sy
 8009f42:	61fb      	str	r3, [r7, #28]
}
 8009f44:	bf00      	nop
 8009f46:	bf00      	nop
 8009f48:	e7fd      	b.n	8009f46 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009f4a:	f002 f8ed 	bl	800c128 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f56:	429a      	cmp	r2, r3
 8009f58:	d302      	bcc.n	8009f60 <xQueueGenericSend+0xdc>
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	2b02      	cmp	r3, #2
 8009f5e:	d129      	bne.n	8009fb4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009f60:	683a      	ldr	r2, [r7, #0]
 8009f62:	68b9      	ldr	r1, [r7, #8]
 8009f64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009f66:	f000 facf 	bl	800a508 <prvCopyDataToQueue>
 8009f6a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d010      	beq.n	8009f96 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f76:	3324      	adds	r3, #36	@ 0x24
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f001 f947 	bl	800b20c <xTaskRemoveFromEventList>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d013      	beq.n	8009fac <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009f84:	4b3f      	ldr	r3, [pc, #252]	@ (800a084 <xQueueGenericSend+0x200>)
 8009f86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f8a:	601a      	str	r2, [r3, #0]
 8009f8c:	f3bf 8f4f 	dsb	sy
 8009f90:	f3bf 8f6f 	isb	sy
 8009f94:	e00a      	b.n	8009fac <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d007      	beq.n	8009fac <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009f9c:	4b39      	ldr	r3, [pc, #228]	@ (800a084 <xQueueGenericSend+0x200>)
 8009f9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fa2:	601a      	str	r2, [r3, #0]
 8009fa4:	f3bf 8f4f 	dsb	sy
 8009fa8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009fac:	f002 f8ee 	bl	800c18c <vPortExitCritical>
				return pdPASS;
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	e063      	b.n	800a07c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d103      	bne.n	8009fc2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009fba:	f002 f8e7 	bl	800c18c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	e05c      	b.n	800a07c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d106      	bne.n	8009fd6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009fc8:	f107 0314 	add.w	r3, r7, #20
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f001 f983 	bl	800b2d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009fd6:	f002 f8d9 	bl	800c18c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009fda:	f000 fe6f 	bl	800acbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009fde:	f002 f8a3 	bl	800c128 <vPortEnterCritical>
 8009fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fe4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009fe8:	b25b      	sxtb	r3, r3
 8009fea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009fee:	d103      	bne.n	8009ff8 <xQueueGenericSend+0x174>
 8009ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ffa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009ffe:	b25b      	sxtb	r3, r3
 800a000:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a004:	d103      	bne.n	800a00e <xQueueGenericSend+0x18a>
 800a006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a008:	2200      	movs	r2, #0
 800a00a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a00e:	f002 f8bd 	bl	800c18c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a012:	1d3a      	adds	r2, r7, #4
 800a014:	f107 0314 	add.w	r3, r7, #20
 800a018:	4611      	mov	r1, r2
 800a01a:	4618      	mov	r0, r3
 800a01c:	f001 f972 	bl	800b304 <xTaskCheckForTimeOut>
 800a020:	4603      	mov	r3, r0
 800a022:	2b00      	cmp	r3, #0
 800a024:	d124      	bne.n	800a070 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a026:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a028:	f000 fb66 	bl	800a6f8 <prvIsQueueFull>
 800a02c:	4603      	mov	r3, r0
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d018      	beq.n	800a064 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a034:	3310      	adds	r3, #16
 800a036:	687a      	ldr	r2, [r7, #4]
 800a038:	4611      	mov	r1, r2
 800a03a:	4618      	mov	r0, r3
 800a03c:	f001 f894 	bl	800b168 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a040:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a042:	f000 faf1 	bl	800a628 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a046:	f000 fe7f 	bl	800ad48 <xTaskResumeAll>
 800a04a:	4603      	mov	r3, r0
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	f47f af7c 	bne.w	8009f4a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a052:	4b0c      	ldr	r3, [pc, #48]	@ (800a084 <xQueueGenericSend+0x200>)
 800a054:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a058:	601a      	str	r2, [r3, #0]
 800a05a:	f3bf 8f4f 	dsb	sy
 800a05e:	f3bf 8f6f 	isb	sy
 800a062:	e772      	b.n	8009f4a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a064:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a066:	f000 fadf 	bl	800a628 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a06a:	f000 fe6d 	bl	800ad48 <xTaskResumeAll>
 800a06e:	e76c      	b.n	8009f4a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a070:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a072:	f000 fad9 	bl	800a628 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a076:	f000 fe67 	bl	800ad48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a07a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3738      	adds	r7, #56	@ 0x38
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}
 800a084:	e000ed04 	.word	0xe000ed04

0800a088 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b090      	sub	sp, #64	@ 0x40
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	60f8      	str	r0, [r7, #12]
 800a090:	60b9      	str	r1, [r7, #8]
 800a092:	607a      	str	r2, [r7, #4]
 800a094:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a09a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d10b      	bne.n	800a0b8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a0a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0a4:	f383 8811 	msr	BASEPRI, r3
 800a0a8:	f3bf 8f6f 	isb	sy
 800a0ac:	f3bf 8f4f 	dsb	sy
 800a0b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a0b2:	bf00      	nop
 800a0b4:	bf00      	nop
 800a0b6:	e7fd      	b.n	800a0b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d103      	bne.n	800a0c6 <xQueueGenericSendFromISR+0x3e>
 800a0be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d101      	bne.n	800a0ca <xQueueGenericSendFromISR+0x42>
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	e000      	b.n	800a0cc <xQueueGenericSendFromISR+0x44>
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d10b      	bne.n	800a0e8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a0d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0d4:	f383 8811 	msr	BASEPRI, r3
 800a0d8:	f3bf 8f6f 	isb	sy
 800a0dc:	f3bf 8f4f 	dsb	sy
 800a0e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a0e2:	bf00      	nop
 800a0e4:	bf00      	nop
 800a0e6:	e7fd      	b.n	800a0e4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	2b02      	cmp	r3, #2
 800a0ec:	d103      	bne.n	800a0f6 <xQueueGenericSendFromISR+0x6e>
 800a0ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	d101      	bne.n	800a0fa <xQueueGenericSendFromISR+0x72>
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e000      	b.n	800a0fc <xQueueGenericSendFromISR+0x74>
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d10b      	bne.n	800a118 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a104:	f383 8811 	msr	BASEPRI, r3
 800a108:	f3bf 8f6f 	isb	sy
 800a10c:	f3bf 8f4f 	dsb	sy
 800a110:	623b      	str	r3, [r7, #32]
}
 800a112:	bf00      	nop
 800a114:	bf00      	nop
 800a116:	e7fd      	b.n	800a114 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a118:	f002 f9ca 	bl	800c4b0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a11c:	f3ef 8211 	mrs	r2, BASEPRI
 800a120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a124:	f383 8811 	msr	BASEPRI, r3
 800a128:	f3bf 8f6f 	isb	sy
 800a12c:	f3bf 8f4f 	dsb	sy
 800a130:	61fa      	str	r2, [r7, #28]
 800a132:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a134:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a136:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a13a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a13c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a13e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a140:	429a      	cmp	r2, r3
 800a142:	d302      	bcc.n	800a14a <xQueueGenericSendFromISR+0xc2>
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	2b02      	cmp	r3, #2
 800a148:	d12f      	bne.n	800a1aa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a14a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a14c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a150:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a158:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a15a:	683a      	ldr	r2, [r7, #0]
 800a15c:	68b9      	ldr	r1, [r7, #8]
 800a15e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a160:	f000 f9d2 	bl	800a508 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a164:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a168:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a16c:	d112      	bne.n	800a194 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a16e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a172:	2b00      	cmp	r3, #0
 800a174:	d016      	beq.n	800a1a4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a178:	3324      	adds	r3, #36	@ 0x24
 800a17a:	4618      	mov	r0, r3
 800a17c:	f001 f846 	bl	800b20c <xTaskRemoveFromEventList>
 800a180:	4603      	mov	r3, r0
 800a182:	2b00      	cmp	r3, #0
 800a184:	d00e      	beq.n	800a1a4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d00b      	beq.n	800a1a4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2201      	movs	r2, #1
 800a190:	601a      	str	r2, [r3, #0]
 800a192:	e007      	b.n	800a1a4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a194:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a198:	3301      	adds	r3, #1
 800a19a:	b2db      	uxtb	r3, r3
 800a19c:	b25a      	sxtb	r2, r3
 800a19e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a1a8:	e001      	b.n	800a1ae <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1b0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a1b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a1ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3740      	adds	r7, #64	@ 0x40
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b08c      	sub	sp, #48	@ 0x30
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	60f8      	str	r0, [r7, #12]
 800a1cc:	60b9      	str	r1, [r7, #8]
 800a1ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a1d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d10b      	bne.n	800a1f6 <xQueueReceive+0x32>
	__asm volatile
 800a1de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1e2:	f383 8811 	msr	BASEPRI, r3
 800a1e6:	f3bf 8f6f 	isb	sy
 800a1ea:	f3bf 8f4f 	dsb	sy
 800a1ee:	623b      	str	r3, [r7, #32]
}
 800a1f0:	bf00      	nop
 800a1f2:	bf00      	nop
 800a1f4:	e7fd      	b.n	800a1f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d103      	bne.n	800a204 <xQueueReceive+0x40>
 800a1fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a200:	2b00      	cmp	r3, #0
 800a202:	d101      	bne.n	800a208 <xQueueReceive+0x44>
 800a204:	2301      	movs	r3, #1
 800a206:	e000      	b.n	800a20a <xQueueReceive+0x46>
 800a208:	2300      	movs	r3, #0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d10b      	bne.n	800a226 <xQueueReceive+0x62>
	__asm volatile
 800a20e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a212:	f383 8811 	msr	BASEPRI, r3
 800a216:	f3bf 8f6f 	isb	sy
 800a21a:	f3bf 8f4f 	dsb	sy
 800a21e:	61fb      	str	r3, [r7, #28]
}
 800a220:	bf00      	nop
 800a222:	bf00      	nop
 800a224:	e7fd      	b.n	800a222 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a226:	f001 fa0f 	bl	800b648 <xTaskGetSchedulerState>
 800a22a:	4603      	mov	r3, r0
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d102      	bne.n	800a236 <xQueueReceive+0x72>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d101      	bne.n	800a23a <xQueueReceive+0x76>
 800a236:	2301      	movs	r3, #1
 800a238:	e000      	b.n	800a23c <xQueueReceive+0x78>
 800a23a:	2300      	movs	r3, #0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d10b      	bne.n	800a258 <xQueueReceive+0x94>
	__asm volatile
 800a240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a244:	f383 8811 	msr	BASEPRI, r3
 800a248:	f3bf 8f6f 	isb	sy
 800a24c:	f3bf 8f4f 	dsb	sy
 800a250:	61bb      	str	r3, [r7, #24]
}
 800a252:	bf00      	nop
 800a254:	bf00      	nop
 800a256:	e7fd      	b.n	800a254 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a258:	f001 ff66 	bl	800c128 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a25c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a25e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a260:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a264:	2b00      	cmp	r3, #0
 800a266:	d01f      	beq.n	800a2a8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a268:	68b9      	ldr	r1, [r7, #8]
 800a26a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a26c:	f000 f9b6 	bl	800a5dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a272:	1e5a      	subs	r2, r3, #1
 800a274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a276:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a27a:	691b      	ldr	r3, [r3, #16]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d00f      	beq.n	800a2a0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a282:	3310      	adds	r3, #16
 800a284:	4618      	mov	r0, r3
 800a286:	f000 ffc1 	bl	800b20c <xTaskRemoveFromEventList>
 800a28a:	4603      	mov	r3, r0
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d007      	beq.n	800a2a0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a290:	4b3c      	ldr	r3, [pc, #240]	@ (800a384 <xQueueReceive+0x1c0>)
 800a292:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a296:	601a      	str	r2, [r3, #0]
 800a298:	f3bf 8f4f 	dsb	sy
 800a29c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a2a0:	f001 ff74 	bl	800c18c <vPortExitCritical>
				return pdPASS;
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	e069      	b.n	800a37c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d103      	bne.n	800a2b6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a2ae:	f001 ff6d 	bl	800c18c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	e062      	b.n	800a37c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a2b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d106      	bne.n	800a2ca <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a2bc:	f107 0310 	add.w	r3, r7, #16
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f001 f809 	bl	800b2d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a2ca:	f001 ff5f 	bl	800c18c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a2ce:	f000 fcf5 	bl	800acbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a2d2:	f001 ff29 	bl	800c128 <vPortEnterCritical>
 800a2d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a2dc:	b25b      	sxtb	r3, r3
 800a2de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a2e2:	d103      	bne.n	800a2ec <xQueueReceive+0x128>
 800a2e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a2ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a2f2:	b25b      	sxtb	r3, r3
 800a2f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a2f8:	d103      	bne.n	800a302 <xQueueReceive+0x13e>
 800a2fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a302:	f001 ff43 	bl	800c18c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a306:	1d3a      	adds	r2, r7, #4
 800a308:	f107 0310 	add.w	r3, r7, #16
 800a30c:	4611      	mov	r1, r2
 800a30e:	4618      	mov	r0, r3
 800a310:	f000 fff8 	bl	800b304 <xTaskCheckForTimeOut>
 800a314:	4603      	mov	r3, r0
 800a316:	2b00      	cmp	r3, #0
 800a318:	d123      	bne.n	800a362 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a31a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a31c:	f000 f9d6 	bl	800a6cc <prvIsQueueEmpty>
 800a320:	4603      	mov	r3, r0
 800a322:	2b00      	cmp	r3, #0
 800a324:	d017      	beq.n	800a356 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a328:	3324      	adds	r3, #36	@ 0x24
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	4611      	mov	r1, r2
 800a32e:	4618      	mov	r0, r3
 800a330:	f000 ff1a 	bl	800b168 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a334:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a336:	f000 f977 	bl	800a628 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a33a:	f000 fd05 	bl	800ad48 <xTaskResumeAll>
 800a33e:	4603      	mov	r3, r0
 800a340:	2b00      	cmp	r3, #0
 800a342:	d189      	bne.n	800a258 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a344:	4b0f      	ldr	r3, [pc, #60]	@ (800a384 <xQueueReceive+0x1c0>)
 800a346:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a34a:	601a      	str	r2, [r3, #0]
 800a34c:	f3bf 8f4f 	dsb	sy
 800a350:	f3bf 8f6f 	isb	sy
 800a354:	e780      	b.n	800a258 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a356:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a358:	f000 f966 	bl	800a628 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a35c:	f000 fcf4 	bl	800ad48 <xTaskResumeAll>
 800a360:	e77a      	b.n	800a258 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a362:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a364:	f000 f960 	bl	800a628 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a368:	f000 fcee 	bl	800ad48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a36c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a36e:	f000 f9ad 	bl	800a6cc <prvIsQueueEmpty>
 800a372:	4603      	mov	r3, r0
 800a374:	2b00      	cmp	r3, #0
 800a376:	f43f af6f 	beq.w	800a258 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a37a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3730      	adds	r7, #48	@ 0x30
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}
 800a384:	e000ed04 	.word	0xe000ed04

0800a388 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b08e      	sub	sp, #56	@ 0x38
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	60f8      	str	r0, [r7, #12]
 800a390:	60b9      	str	r1, [r7, #8]
 800a392:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d10b      	bne.n	800a3b6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800a39e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3a2:	f383 8811 	msr	BASEPRI, r3
 800a3a6:	f3bf 8f6f 	isb	sy
 800a3aa:	f3bf 8f4f 	dsb	sy
 800a3ae:	623b      	str	r3, [r7, #32]
}
 800a3b0:	bf00      	nop
 800a3b2:	bf00      	nop
 800a3b4:	e7fd      	b.n	800a3b2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d103      	bne.n	800a3c4 <xQueueReceiveFromISR+0x3c>
 800a3bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d101      	bne.n	800a3c8 <xQueueReceiveFromISR+0x40>
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	e000      	b.n	800a3ca <xQueueReceiveFromISR+0x42>
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d10b      	bne.n	800a3e6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800a3ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3d2:	f383 8811 	msr	BASEPRI, r3
 800a3d6:	f3bf 8f6f 	isb	sy
 800a3da:	f3bf 8f4f 	dsb	sy
 800a3de:	61fb      	str	r3, [r7, #28]
}
 800a3e0:	bf00      	nop
 800a3e2:	bf00      	nop
 800a3e4:	e7fd      	b.n	800a3e2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a3e6:	f002 f863 	bl	800c4b0 <vPortValidateInterruptPriority>
	__asm volatile
 800a3ea:	f3ef 8211 	mrs	r2, BASEPRI
 800a3ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3f2:	f383 8811 	msr	BASEPRI, r3
 800a3f6:	f3bf 8f6f 	isb	sy
 800a3fa:	f3bf 8f4f 	dsb	sy
 800a3fe:	61ba      	str	r2, [r7, #24]
 800a400:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a402:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a404:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a40a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a40c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d02f      	beq.n	800a472 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a414:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a418:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a41c:	68b9      	ldr	r1, [r7, #8]
 800a41e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a420:	f000 f8dc 	bl	800a5dc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a426:	1e5a      	subs	r2, r3, #1
 800a428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a42a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a42c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a430:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a434:	d112      	bne.n	800a45c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a438:	691b      	ldr	r3, [r3, #16]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d016      	beq.n	800a46c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a43e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a440:	3310      	adds	r3, #16
 800a442:	4618      	mov	r0, r3
 800a444:	f000 fee2 	bl	800b20c <xTaskRemoveFromEventList>
 800a448:	4603      	mov	r3, r0
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d00e      	beq.n	800a46c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d00b      	beq.n	800a46c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2201      	movs	r2, #1
 800a458:	601a      	str	r2, [r3, #0]
 800a45a:	e007      	b.n	800a46c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a45c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a460:	3301      	adds	r3, #1
 800a462:	b2db      	uxtb	r3, r3
 800a464:	b25a      	sxtb	r2, r3
 800a466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a468:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800a46c:	2301      	movs	r3, #1
 800a46e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a470:	e001      	b.n	800a476 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800a472:	2300      	movs	r3, #0
 800a474:	637b      	str	r3, [r7, #52]	@ 0x34
 800a476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a478:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	f383 8811 	msr	BASEPRI, r3
}
 800a480:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a484:	4618      	mov	r0, r3
 800a486:	3738      	adds	r7, #56	@ 0x38
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b084      	sub	sp, #16
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d10b      	bne.n	800a4b2 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800a49a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a49e:	f383 8811 	msr	BASEPRI, r3
 800a4a2:	f3bf 8f6f 	isb	sy
 800a4a6:	f3bf 8f4f 	dsb	sy
 800a4aa:	60bb      	str	r3, [r7, #8]
}
 800a4ac:	bf00      	nop
 800a4ae:	bf00      	nop
 800a4b0:	e7fd      	b.n	800a4ae <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800a4b2:	f001 fe39 	bl	800c128 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4ba:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800a4bc:	f001 fe66 	bl	800c18c <vPortExitCritical>

	return uxReturn;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3710      	adds	r7, #16
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}

0800a4ca <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800a4ca:	b480      	push	{r7}
 800a4cc:	b087      	sub	sp, #28
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d10b      	bne.n	800a4f4 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 800a4dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4e0:	f383 8811 	msr	BASEPRI, r3
 800a4e4:	f3bf 8f6f 	isb	sy
 800a4e8:	f3bf 8f4f 	dsb	sy
 800a4ec:	60fb      	str	r3, [r7, #12]
}
 800a4ee:	bf00      	nop
 800a4f0:	bf00      	nop
 800a4f2:	e7fd      	b.n	800a4f0 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4f8:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800a4fa:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	371c      	adds	r7, #28
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr

0800a508 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b086      	sub	sp, #24
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	60f8      	str	r0, [r7, #12]
 800a510:	60b9      	str	r1, [r7, #8]
 800a512:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a514:	2300      	movs	r3, #0
 800a516:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a51c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a522:	2b00      	cmp	r3, #0
 800a524:	d10d      	bne.n	800a542 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d14d      	bne.n	800a5ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	689b      	ldr	r3, [r3, #8]
 800a532:	4618      	mov	r0, r3
 800a534:	f001 f8a6 	bl	800b684 <xTaskPriorityDisinherit>
 800a538:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2200      	movs	r2, #0
 800a53e:	609a      	str	r2, [r3, #8]
 800a540:	e043      	b.n	800a5ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d119      	bne.n	800a57c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	6858      	ldr	r0, [r3, #4]
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a550:	461a      	mov	r2, r3
 800a552:	68b9      	ldr	r1, [r7, #8]
 800a554:	f003 f843 	bl	800d5de <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	685a      	ldr	r2, [r3, #4]
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a560:	441a      	add	r2, r3
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	685a      	ldr	r2, [r3, #4]
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	689b      	ldr	r3, [r3, #8]
 800a56e:	429a      	cmp	r2, r3
 800a570:	d32b      	bcc.n	800a5ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681a      	ldr	r2, [r3, #0]
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	605a      	str	r2, [r3, #4]
 800a57a:	e026      	b.n	800a5ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	68d8      	ldr	r0, [r3, #12]
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a584:	461a      	mov	r2, r3
 800a586:	68b9      	ldr	r1, [r7, #8]
 800a588:	f003 f829 	bl	800d5de <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	68da      	ldr	r2, [r3, #12]
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a594:	425b      	negs	r3, r3
 800a596:	441a      	add	r2, r3
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	68da      	ldr	r2, [r3, #12]
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	d207      	bcs.n	800a5b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	689a      	ldr	r2, [r3, #8]
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5b0:	425b      	negs	r3, r3
 800a5b2:	441a      	add	r2, r3
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2b02      	cmp	r3, #2
 800a5bc:	d105      	bne.n	800a5ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d002      	beq.n	800a5ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	3b01      	subs	r3, #1
 800a5c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	1c5a      	adds	r2, r3, #1
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a5d2:	697b      	ldr	r3, [r7, #20]
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3718      	adds	r7, #24
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b082      	sub	sp, #8
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d018      	beq.n	800a620 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	68da      	ldr	r2, [r3, #12]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5f6:	441a      	add	r2, r3
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	68da      	ldr	r2, [r3, #12]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	689b      	ldr	r3, [r3, #8]
 800a604:	429a      	cmp	r2, r3
 800a606:	d303      	bcc.n	800a610 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681a      	ldr	r2, [r3, #0]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	68d9      	ldr	r1, [r3, #12]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a618:	461a      	mov	r2, r3
 800a61a:	6838      	ldr	r0, [r7, #0]
 800a61c:	f002 ffdf 	bl	800d5de <memcpy>
	}
}
 800a620:	bf00      	nop
 800a622:	3708      	adds	r7, #8
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}

0800a628 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a630:	f001 fd7a 	bl	800c128 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a63a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a63c:	e011      	b.n	800a662 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a642:	2b00      	cmp	r3, #0
 800a644:	d012      	beq.n	800a66c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	3324      	adds	r3, #36	@ 0x24
 800a64a:	4618      	mov	r0, r3
 800a64c:	f000 fdde 	bl	800b20c <xTaskRemoveFromEventList>
 800a650:	4603      	mov	r3, r0
 800a652:	2b00      	cmp	r3, #0
 800a654:	d001      	beq.n	800a65a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a656:	f000 feb9 	bl	800b3cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a65a:	7bfb      	ldrb	r3, [r7, #15]
 800a65c:	3b01      	subs	r3, #1
 800a65e:	b2db      	uxtb	r3, r3
 800a660:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a666:	2b00      	cmp	r3, #0
 800a668:	dce9      	bgt.n	800a63e <prvUnlockQueue+0x16>
 800a66a:	e000      	b.n	800a66e <prvUnlockQueue+0x46>
					break;
 800a66c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	22ff      	movs	r2, #255	@ 0xff
 800a672:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a676:	f001 fd89 	bl	800c18c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a67a:	f001 fd55 	bl	800c128 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a684:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a686:	e011      	b.n	800a6ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	691b      	ldr	r3, [r3, #16]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d012      	beq.n	800a6b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	3310      	adds	r3, #16
 800a694:	4618      	mov	r0, r3
 800a696:	f000 fdb9 	bl	800b20c <xTaskRemoveFromEventList>
 800a69a:	4603      	mov	r3, r0
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d001      	beq.n	800a6a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a6a0:	f000 fe94 	bl	800b3cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a6a4:	7bbb      	ldrb	r3, [r7, #14]
 800a6a6:	3b01      	subs	r3, #1
 800a6a8:	b2db      	uxtb	r3, r3
 800a6aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a6ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	dce9      	bgt.n	800a688 <prvUnlockQueue+0x60>
 800a6b4:	e000      	b.n	800a6b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a6b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	22ff      	movs	r2, #255	@ 0xff
 800a6bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a6c0:	f001 fd64 	bl	800c18c <vPortExitCritical>
}
 800a6c4:	bf00      	nop
 800a6c6:	3710      	adds	r7, #16
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b084      	sub	sp, #16
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a6d4:	f001 fd28 	bl	800c128 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d102      	bne.n	800a6e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	60fb      	str	r3, [r7, #12]
 800a6e4:	e001      	b.n	800a6ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a6ea:	f001 fd4f 	bl	800c18c <vPortExitCritical>

	return xReturn;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3710      	adds	r7, #16
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b084      	sub	sp, #16
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a700:	f001 fd12 	bl	800c128 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d102      	bne.n	800a716 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a710:	2301      	movs	r3, #1
 800a712:	60fb      	str	r3, [r7, #12]
 800a714:	e001      	b.n	800a71a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a716:	2300      	movs	r3, #0
 800a718:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a71a:	f001 fd37 	bl	800c18c <vPortExitCritical>

	return xReturn;
 800a71e:	68fb      	ldr	r3, [r7, #12]
}
 800a720:	4618      	mov	r0, r3
 800a722:	3710      	adds	r7, #16
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}

0800a728 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a728:	b480      	push	{r7}
 800a72a:	b085      	sub	sp, #20
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a732:	2300      	movs	r3, #0
 800a734:	60fb      	str	r3, [r7, #12]
 800a736:	e014      	b.n	800a762 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a738:	4a0f      	ldr	r2, [pc, #60]	@ (800a778 <vQueueAddToRegistry+0x50>)
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d10b      	bne.n	800a75c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a744:	490c      	ldr	r1, [pc, #48]	@ (800a778 <vQueueAddToRegistry+0x50>)
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	683a      	ldr	r2, [r7, #0]
 800a74a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a74e:	4a0a      	ldr	r2, [pc, #40]	@ (800a778 <vQueueAddToRegistry+0x50>)
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	00db      	lsls	r3, r3, #3
 800a754:	4413      	add	r3, r2
 800a756:	687a      	ldr	r2, [r7, #4]
 800a758:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a75a:	e006      	b.n	800a76a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	3301      	adds	r3, #1
 800a760:	60fb      	str	r3, [r7, #12]
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	2b0f      	cmp	r3, #15
 800a766:	d9e7      	bls.n	800a738 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a768:	bf00      	nop
 800a76a:	bf00      	nop
 800a76c:	3714      	adds	r7, #20
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr
 800a776:	bf00      	nop
 800a778:	20000db8 	.word	0x20000db8

0800a77c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b086      	sub	sp, #24
 800a780:	af00      	add	r7, sp, #0
 800a782:	60f8      	str	r0, [r7, #12]
 800a784:	60b9      	str	r1, [r7, #8]
 800a786:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a78c:	f001 fccc 	bl	800c128 <vPortEnterCritical>
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a796:	b25b      	sxtb	r3, r3
 800a798:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a79c:	d103      	bne.n	800a7a6 <vQueueWaitForMessageRestricted+0x2a>
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a7ac:	b25b      	sxtb	r3, r3
 800a7ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a7b2:	d103      	bne.n	800a7bc <vQueueWaitForMessageRestricted+0x40>
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a7bc:	f001 fce6 	bl	800c18c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d106      	bne.n	800a7d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	3324      	adds	r3, #36	@ 0x24
 800a7cc:	687a      	ldr	r2, [r7, #4]
 800a7ce:	68b9      	ldr	r1, [r7, #8]
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f000 fcef 	bl	800b1b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a7d6:	6978      	ldr	r0, [r7, #20]
 800a7d8:	f7ff ff26 	bl	800a628 <prvUnlockQueue>
	}
 800a7dc:	bf00      	nop
 800a7de:	3718      	adds	r7, #24
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b08e      	sub	sp, #56	@ 0x38
 800a7e8:	af04      	add	r7, sp, #16
 800a7ea:	60f8      	str	r0, [r7, #12]
 800a7ec:	60b9      	str	r1, [r7, #8]
 800a7ee:	607a      	str	r2, [r7, #4]
 800a7f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a7f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d10b      	bne.n	800a810 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a7f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7fc:	f383 8811 	msr	BASEPRI, r3
 800a800:	f3bf 8f6f 	isb	sy
 800a804:	f3bf 8f4f 	dsb	sy
 800a808:	623b      	str	r3, [r7, #32]
}
 800a80a:	bf00      	nop
 800a80c:	bf00      	nop
 800a80e:	e7fd      	b.n	800a80c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a812:	2b00      	cmp	r3, #0
 800a814:	d10b      	bne.n	800a82e <xTaskCreateStatic+0x4a>
	__asm volatile
 800a816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a81a:	f383 8811 	msr	BASEPRI, r3
 800a81e:	f3bf 8f6f 	isb	sy
 800a822:	f3bf 8f4f 	dsb	sy
 800a826:	61fb      	str	r3, [r7, #28]
}
 800a828:	bf00      	nop
 800a82a:	bf00      	nop
 800a82c:	e7fd      	b.n	800a82a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a82e:	23b0      	movs	r3, #176	@ 0xb0
 800a830:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	2bb0      	cmp	r3, #176	@ 0xb0
 800a836:	d00b      	beq.n	800a850 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a83c:	f383 8811 	msr	BASEPRI, r3
 800a840:	f3bf 8f6f 	isb	sy
 800a844:	f3bf 8f4f 	dsb	sy
 800a848:	61bb      	str	r3, [r7, #24]
}
 800a84a:	bf00      	nop
 800a84c:	bf00      	nop
 800a84e:	e7fd      	b.n	800a84c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a850:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a854:	2b00      	cmp	r3, #0
 800a856:	d01e      	beq.n	800a896 <xTaskCreateStatic+0xb2>
 800a858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d01b      	beq.n	800a896 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a85e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a860:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a864:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a866:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a86a:	2202      	movs	r2, #2
 800a86c:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a870:	2300      	movs	r3, #0
 800a872:	9303      	str	r3, [sp, #12]
 800a874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a876:	9302      	str	r3, [sp, #8]
 800a878:	f107 0314 	add.w	r3, r7, #20
 800a87c:	9301      	str	r3, [sp, #4]
 800a87e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a880:	9300      	str	r3, [sp, #0]
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	68b9      	ldr	r1, [r7, #8]
 800a888:	68f8      	ldr	r0, [r7, #12]
 800a88a:	f000 f851 	bl	800a930 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a88e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a890:	f000 f8fc 	bl	800aa8c <prvAddNewTaskToReadyList>
 800a894:	e001      	b.n	800a89a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a896:	2300      	movs	r3, #0
 800a898:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a89a:	697b      	ldr	r3, [r7, #20]
	}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3728      	adds	r7, #40	@ 0x28
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}

0800a8a4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b08c      	sub	sp, #48	@ 0x30
 800a8a8:	af04      	add	r7, sp, #16
 800a8aa:	60f8      	str	r0, [r7, #12]
 800a8ac:	60b9      	str	r1, [r7, #8]
 800a8ae:	603b      	str	r3, [r7, #0]
 800a8b0:	4613      	mov	r3, r2
 800a8b2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a8b4:	88fb      	ldrh	r3, [r7, #6]
 800a8b6:	009b      	lsls	r3, r3, #2
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f001 fe3b 	bl	800c534 <pvPortMalloc>
 800a8be:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d00e      	beq.n	800a8e4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a8c6:	20b0      	movs	r0, #176	@ 0xb0
 800a8c8:	f001 fe34 	bl	800c534 <pvPortMalloc>
 800a8cc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a8ce:	69fb      	ldr	r3, [r7, #28]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d003      	beq.n	800a8dc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a8d4:	69fb      	ldr	r3, [r7, #28]
 800a8d6:	697a      	ldr	r2, [r7, #20]
 800a8d8:	631a      	str	r2, [r3, #48]	@ 0x30
 800a8da:	e005      	b.n	800a8e8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a8dc:	6978      	ldr	r0, [r7, #20]
 800a8de:	f001 fef7 	bl	800c6d0 <vPortFree>
 800a8e2:	e001      	b.n	800a8e8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a8e8:	69fb      	ldr	r3, [r7, #28]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d017      	beq.n	800a91e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a8ee:	69fb      	ldr	r3, [r7, #28]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a8f6:	88fa      	ldrh	r2, [r7, #6]
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	9303      	str	r3, [sp, #12]
 800a8fc:	69fb      	ldr	r3, [r7, #28]
 800a8fe:	9302      	str	r3, [sp, #8]
 800a900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a902:	9301      	str	r3, [sp, #4]
 800a904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a906:	9300      	str	r3, [sp, #0]
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	68b9      	ldr	r1, [r7, #8]
 800a90c:	68f8      	ldr	r0, [r7, #12]
 800a90e:	f000 f80f 	bl	800a930 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a912:	69f8      	ldr	r0, [r7, #28]
 800a914:	f000 f8ba 	bl	800aa8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a918:	2301      	movs	r3, #1
 800a91a:	61bb      	str	r3, [r7, #24]
 800a91c:	e002      	b.n	800a924 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a91e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a922:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a924:	69bb      	ldr	r3, [r7, #24]
	}
 800a926:	4618      	mov	r0, r3
 800a928:	3720      	adds	r7, #32
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}
	...

0800a930 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b088      	sub	sp, #32
 800a934:	af00      	add	r7, sp, #0
 800a936:	60f8      	str	r0, [r7, #12]
 800a938:	60b9      	str	r1, [r7, #8]
 800a93a:	607a      	str	r2, [r7, #4]
 800a93c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a93e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a940:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	009b      	lsls	r3, r3, #2
 800a946:	461a      	mov	r2, r3
 800a948:	21a5      	movs	r1, #165	@ 0xa5
 800a94a:	f002 fd72 	bl	800d432 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a94e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a950:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a958:	3b01      	subs	r3, #1
 800a95a:	009b      	lsls	r3, r3, #2
 800a95c:	4413      	add	r3, r2
 800a95e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a960:	69bb      	ldr	r3, [r7, #24]
 800a962:	f023 0307 	bic.w	r3, r3, #7
 800a966:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a968:	69bb      	ldr	r3, [r7, #24]
 800a96a:	f003 0307 	and.w	r3, r3, #7
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d00b      	beq.n	800a98a <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a976:	f383 8811 	msr	BASEPRI, r3
 800a97a:	f3bf 8f6f 	isb	sy
 800a97e:	f3bf 8f4f 	dsb	sy
 800a982:	617b      	str	r3, [r7, #20]
}
 800a984:	bf00      	nop
 800a986:	bf00      	nop
 800a988:	e7fd      	b.n	800a986 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800a98a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a98c:	69ba      	ldr	r2, [r7, #24]
 800a98e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d01f      	beq.n	800a9d6 <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a996:	2300      	movs	r3, #0
 800a998:	61fb      	str	r3, [r7, #28]
 800a99a:	e012      	b.n	800a9c2 <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a99c:	68ba      	ldr	r2, [r7, #8]
 800a99e:	69fb      	ldr	r3, [r7, #28]
 800a9a0:	4413      	add	r3, r2
 800a9a2:	7819      	ldrb	r1, [r3, #0]
 800a9a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9a6:	69fb      	ldr	r3, [r7, #28]
 800a9a8:	4413      	add	r3, r2
 800a9aa:	3334      	adds	r3, #52	@ 0x34
 800a9ac:	460a      	mov	r2, r1
 800a9ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a9b0:	68ba      	ldr	r2, [r7, #8]
 800a9b2:	69fb      	ldr	r3, [r7, #28]
 800a9b4:	4413      	add	r3, r2
 800a9b6:	781b      	ldrb	r3, [r3, #0]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d006      	beq.n	800a9ca <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a9bc:	69fb      	ldr	r3, [r7, #28]
 800a9be:	3301      	adds	r3, #1
 800a9c0:	61fb      	str	r3, [r7, #28]
 800a9c2:	69fb      	ldr	r3, [r7, #28]
 800a9c4:	2b0f      	cmp	r3, #15
 800a9c6:	d9e9      	bls.n	800a99c <prvInitialiseNewTask+0x6c>
 800a9c8:	e000      	b.n	800a9cc <prvInitialiseNewTask+0x9c>
			{
				break;
 800a9ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a9cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a9d4:	e003      	b.n	800a9de <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a9d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9d8:	2200      	movs	r2, #0
 800a9da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a9de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9e0:	2b37      	cmp	r3, #55	@ 0x37
 800a9e2:	d901      	bls.n	800a9e8 <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a9e4:	2337      	movs	r3, #55	@ 0x37
 800a9e6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a9e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a9ec:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a9ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a9f2:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800a9f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a9fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9fc:	3304      	adds	r3, #4
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f7ff f866 	bl	8009ad0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aa04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa06:	3318      	adds	r3, #24
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f7ff f861 	bl	8009ad0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aa0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa16:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800aa1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aa1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa22:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800aa24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa26:	2200      	movs	r2, #0
 800aa28:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aa2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aa32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa34:	2200      	movs	r2, #0
 800aa36:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800aa3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa3c:	335c      	adds	r3, #92	@ 0x5c
 800aa3e:	224c      	movs	r2, #76	@ 0x4c
 800aa40:	2100      	movs	r1, #0
 800aa42:	4618      	mov	r0, r3
 800aa44:	f002 fcf5 	bl	800d432 <memset>
 800aa48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa4a:	4a0d      	ldr	r2, [pc, #52]	@ (800aa80 <prvInitialiseNewTask+0x150>)
 800aa4c:	661a      	str	r2, [r3, #96]	@ 0x60
 800aa4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa50:	4a0c      	ldr	r2, [pc, #48]	@ (800aa84 <prvInitialiseNewTask+0x154>)
 800aa52:	665a      	str	r2, [r3, #100]	@ 0x64
 800aa54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa56:	4a0c      	ldr	r2, [pc, #48]	@ (800aa88 <prvInitialiseNewTask+0x158>)
 800aa58:	669a      	str	r2, [r3, #104]	@ 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aa5a:	683a      	ldr	r2, [r7, #0]
 800aa5c:	68f9      	ldr	r1, [r7, #12]
 800aa5e:	69b8      	ldr	r0, [r7, #24]
 800aa60:	f001 fa2e 	bl	800bec0 <pxPortInitialiseStack>
 800aa64:	4602      	mov	r2, r0
 800aa66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa68:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800aa6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d002      	beq.n	800aa76 <prvInitialiseNewTask+0x146>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aa70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa76:	bf00      	nop
 800aa78:	3720      	adds	r7, #32
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
 800aa7e:	bf00      	nop
 800aa80:	200050a0 	.word	0x200050a0
 800aa84:	20005108 	.word	0x20005108
 800aa88:	20005170 	.word	0x20005170

0800aa8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b082      	sub	sp, #8
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aa94:	f001 fb48 	bl	800c128 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800aa98:	4b2d      	ldr	r3, [pc, #180]	@ (800ab50 <prvAddNewTaskToReadyList+0xc4>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	4a2c      	ldr	r2, [pc, #176]	@ (800ab50 <prvAddNewTaskToReadyList+0xc4>)
 800aaa0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800aaa2:	4b2c      	ldr	r3, [pc, #176]	@ (800ab54 <prvAddNewTaskToReadyList+0xc8>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d109      	bne.n	800aabe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800aaaa:	4a2a      	ldr	r2, [pc, #168]	@ (800ab54 <prvAddNewTaskToReadyList+0xc8>)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800aab0:	4b27      	ldr	r3, [pc, #156]	@ (800ab50 <prvAddNewTaskToReadyList+0xc4>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	2b01      	cmp	r3, #1
 800aab6:	d110      	bne.n	800aada <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800aab8:	f000 fd02 	bl	800b4c0 <prvInitialiseTaskLists>
 800aabc:	e00d      	b.n	800aada <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800aabe:	4b26      	ldr	r3, [pc, #152]	@ (800ab58 <prvAddNewTaskToReadyList+0xcc>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d109      	bne.n	800aada <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800aac6:	4b23      	ldr	r3, [pc, #140]	@ (800ab54 <prvAddNewTaskToReadyList+0xc8>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aad0:	429a      	cmp	r2, r3
 800aad2:	d802      	bhi.n	800aada <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800aad4:	4a1f      	ldr	r2, [pc, #124]	@ (800ab54 <prvAddNewTaskToReadyList+0xc8>)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800aada:	4b20      	ldr	r3, [pc, #128]	@ (800ab5c <prvAddNewTaskToReadyList+0xd0>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	3301      	adds	r3, #1
 800aae0:	4a1e      	ldr	r2, [pc, #120]	@ (800ab5c <prvAddNewTaskToReadyList+0xd0>)
 800aae2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800aae4:	4b1d      	ldr	r3, [pc, #116]	@ (800ab5c <prvAddNewTaskToReadyList+0xd0>)
 800aae6:	681a      	ldr	r2, [r3, #0]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aaf0:	4b1b      	ldr	r3, [pc, #108]	@ (800ab60 <prvAddNewTaskToReadyList+0xd4>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	d903      	bls.n	800ab00 <prvAddNewTaskToReadyList+0x74>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aafc:	4a18      	ldr	r2, [pc, #96]	@ (800ab60 <prvAddNewTaskToReadyList+0xd4>)
 800aafe:	6013      	str	r3, [r2, #0]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab04:	4613      	mov	r3, r2
 800ab06:	009b      	lsls	r3, r3, #2
 800ab08:	4413      	add	r3, r2
 800ab0a:	009b      	lsls	r3, r3, #2
 800ab0c:	4a15      	ldr	r2, [pc, #84]	@ (800ab64 <prvAddNewTaskToReadyList+0xd8>)
 800ab0e:	441a      	add	r2, r3
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	3304      	adds	r3, #4
 800ab14:	4619      	mov	r1, r3
 800ab16:	4610      	mov	r0, r2
 800ab18:	f7fe ffe7 	bl	8009aea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ab1c:	f001 fb36 	bl	800c18c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ab20:	4b0d      	ldr	r3, [pc, #52]	@ (800ab58 <prvAddNewTaskToReadyList+0xcc>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d00e      	beq.n	800ab46 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ab28:	4b0a      	ldr	r3, [pc, #40]	@ (800ab54 <prvAddNewTaskToReadyList+0xc8>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab32:	429a      	cmp	r2, r3
 800ab34:	d207      	bcs.n	800ab46 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ab36:	4b0c      	ldr	r3, [pc, #48]	@ (800ab68 <prvAddNewTaskToReadyList+0xdc>)
 800ab38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab3c:	601a      	str	r2, [r3, #0]
 800ab3e:	f3bf 8f4f 	dsb	sy
 800ab42:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab46:	bf00      	nop
 800ab48:	3708      	adds	r7, #8
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop
 800ab50:	2000130c 	.word	0x2000130c
 800ab54:	20000e38 	.word	0x20000e38
 800ab58:	20001318 	.word	0x20001318
 800ab5c:	20001328 	.word	0x20001328
 800ab60:	20001314 	.word	0x20001314
 800ab64:	20000e3c 	.word	0x20000e3c
 800ab68:	e000ed04 	.word	0xe000ed04

0800ab6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b084      	sub	sp, #16
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ab74:	2300      	movs	r3, #0
 800ab76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d018      	beq.n	800abb0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ab7e:	4b14      	ldr	r3, [pc, #80]	@ (800abd0 <vTaskDelay+0x64>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d00b      	beq.n	800ab9e <vTaskDelay+0x32>
	__asm volatile
 800ab86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab8a:	f383 8811 	msr	BASEPRI, r3
 800ab8e:	f3bf 8f6f 	isb	sy
 800ab92:	f3bf 8f4f 	dsb	sy
 800ab96:	60bb      	str	r3, [r7, #8]
}
 800ab98:	bf00      	nop
 800ab9a:	bf00      	nop
 800ab9c:	e7fd      	b.n	800ab9a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ab9e:	f000 f88d 	bl	800acbc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800aba2:	2100      	movs	r1, #0
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f000 fddd 	bl	800b764 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800abaa:	f000 f8cd 	bl	800ad48 <xTaskResumeAll>
 800abae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d107      	bne.n	800abc6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800abb6:	4b07      	ldr	r3, [pc, #28]	@ (800abd4 <vTaskDelay+0x68>)
 800abb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800abbc:	601a      	str	r2, [r3, #0]
 800abbe:	f3bf 8f4f 	dsb	sy
 800abc2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800abc6:	bf00      	nop
 800abc8:	3710      	adds	r7, #16
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}
 800abce:	bf00      	nop
 800abd0:	20001334 	.word	0x20001334
 800abd4:	e000ed04 	.word	0xe000ed04

0800abd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b08a      	sub	sp, #40	@ 0x28
 800abdc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800abde:	2300      	movs	r3, #0
 800abe0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800abe2:	2300      	movs	r3, #0
 800abe4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800abe6:	463a      	mov	r2, r7
 800abe8:	1d39      	adds	r1, r7, #4
 800abea:	f107 0308 	add.w	r3, r7, #8
 800abee:	4618      	mov	r0, r3
 800abf0:	f7fe ff1a 	bl	8009a28 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800abf4:	6839      	ldr	r1, [r7, #0]
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	68ba      	ldr	r2, [r7, #8]
 800abfa:	9202      	str	r2, [sp, #8]
 800abfc:	9301      	str	r3, [sp, #4]
 800abfe:	2300      	movs	r3, #0
 800ac00:	9300      	str	r3, [sp, #0]
 800ac02:	2300      	movs	r3, #0
 800ac04:	460a      	mov	r2, r1
 800ac06:	4925      	ldr	r1, [pc, #148]	@ (800ac9c <vTaskStartScheduler+0xc4>)
 800ac08:	4825      	ldr	r0, [pc, #148]	@ (800aca0 <vTaskStartScheduler+0xc8>)
 800ac0a:	f7ff fdeb 	bl	800a7e4 <xTaskCreateStatic>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	4a24      	ldr	r2, [pc, #144]	@ (800aca4 <vTaskStartScheduler+0xcc>)
 800ac12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ac14:	4b23      	ldr	r3, [pc, #140]	@ (800aca4 <vTaskStartScheduler+0xcc>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d002      	beq.n	800ac22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	617b      	str	r3, [r7, #20]
 800ac20:	e001      	b.n	800ac26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ac22:	2300      	movs	r3, #0
 800ac24:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	d102      	bne.n	800ac32 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ac2c:	f000 fdee 	bl	800b80c <xTimerCreateTimerTask>
 800ac30:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	d11d      	bne.n	800ac74 <vTaskStartScheduler+0x9c>
	__asm volatile
 800ac38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac3c:	f383 8811 	msr	BASEPRI, r3
 800ac40:	f3bf 8f6f 	isb	sy
 800ac44:	f3bf 8f4f 	dsb	sy
 800ac48:	613b      	str	r3, [r7, #16]
}
 800ac4a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ac4c:	4b16      	ldr	r3, [pc, #88]	@ (800aca8 <vTaskStartScheduler+0xd0>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	335c      	adds	r3, #92	@ 0x5c
 800ac52:	4a16      	ldr	r2, [pc, #88]	@ (800acac <vTaskStartScheduler+0xd4>)
 800ac54:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ac56:	4b16      	ldr	r3, [pc, #88]	@ (800acb0 <vTaskStartScheduler+0xd8>)
 800ac58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ac5c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ac5e:	4b15      	ldr	r3, [pc, #84]	@ (800acb4 <vTaskStartScheduler+0xdc>)
 800ac60:	2201      	movs	r2, #1
 800ac62:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ac64:	4b14      	ldr	r3, [pc, #80]	@ (800acb8 <vTaskStartScheduler+0xe0>)
 800ac66:	2200      	movs	r2, #0
 800ac68:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800ac6a:	f7f8 fc37 	bl	80034dc <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ac6e:	f001 f9b7 	bl	800bfe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ac72:	e00f      	b.n	800ac94 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ac7a:	d10b      	bne.n	800ac94 <vTaskStartScheduler+0xbc>
	__asm volatile
 800ac7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac80:	f383 8811 	msr	BASEPRI, r3
 800ac84:	f3bf 8f6f 	isb	sy
 800ac88:	f3bf 8f4f 	dsb	sy
 800ac8c:	60fb      	str	r3, [r7, #12]
}
 800ac8e:	bf00      	nop
 800ac90:	bf00      	nop
 800ac92:	e7fd      	b.n	800ac90 <vTaskStartScheduler+0xb8>
}
 800ac94:	bf00      	nop
 800ac96:	3718      	adds	r7, #24
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}
 800ac9c:	0800f848 	.word	0x0800f848
 800aca0:	0800b3e5 	.word	0x0800b3e5
 800aca4:	20001330 	.word	0x20001330
 800aca8:	20000e38 	.word	0x20000e38
 800acac:	200000fc 	.word	0x200000fc
 800acb0:	2000132c 	.word	0x2000132c
 800acb4:	20001318 	.word	0x20001318
 800acb8:	20001310 	.word	0x20001310

0800acbc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800acbc:	b480      	push	{r7}
 800acbe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800acc0:	4b04      	ldr	r3, [pc, #16]	@ (800acd4 <vTaskSuspendAll+0x18>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	3301      	adds	r3, #1
 800acc6:	4a03      	ldr	r2, [pc, #12]	@ (800acd4 <vTaskSuspendAll+0x18>)
 800acc8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800acca:	bf00      	nop
 800accc:	46bd      	mov	sp, r7
 800acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd2:	4770      	bx	lr
 800acd4:	20001334 	.word	0x20001334

0800acd8 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800acd8:	b480      	push	{r7}
 800acda:	b083      	sub	sp, #12
 800acdc:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800acde:	2300      	movs	r3, #0
 800ace0:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800ace2:	4b14      	ldr	r3, [pc, #80]	@ (800ad34 <prvGetExpectedIdleTime+0x5c>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d001      	beq.n	800acee <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800acea:	2301      	movs	r3, #1
 800acec:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800acee:	4b12      	ldr	r3, [pc, #72]	@ (800ad38 <prvGetExpectedIdleTime+0x60>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d002      	beq.n	800acfe <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800acf8:	2300      	movs	r3, #0
 800acfa:	607b      	str	r3, [r7, #4]
 800acfc:	e012      	b.n	800ad24 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800acfe:	4b0f      	ldr	r3, [pc, #60]	@ (800ad3c <prvGetExpectedIdleTime+0x64>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	2b01      	cmp	r3, #1
 800ad04:	d902      	bls.n	800ad0c <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800ad06:	2300      	movs	r3, #0
 800ad08:	607b      	str	r3, [r7, #4]
 800ad0a:	e00b      	b.n	800ad24 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d002      	beq.n	800ad18 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800ad12:	2300      	movs	r3, #0
 800ad14:	607b      	str	r3, [r7, #4]
 800ad16:	e005      	b.n	800ad24 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800ad18:	4b09      	ldr	r3, [pc, #36]	@ (800ad40 <prvGetExpectedIdleTime+0x68>)
 800ad1a:	681a      	ldr	r2, [r3, #0]
 800ad1c:	4b09      	ldr	r3, [pc, #36]	@ (800ad44 <prvGetExpectedIdleTime+0x6c>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	1ad3      	subs	r3, r2, r3
 800ad22:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800ad24:	687b      	ldr	r3, [r7, #4]
	}
 800ad26:	4618      	mov	r0, r3
 800ad28:	370c      	adds	r7, #12
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad30:	4770      	bx	lr
 800ad32:	bf00      	nop
 800ad34:	20001314 	.word	0x20001314
 800ad38:	20000e38 	.word	0x20000e38
 800ad3c:	20000e3c 	.word	0x20000e3c
 800ad40:	2000132c 	.word	0x2000132c
 800ad44:	20001310 	.word	0x20001310

0800ad48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b084      	sub	sp, #16
 800ad4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ad52:	2300      	movs	r3, #0
 800ad54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ad56:	4b42      	ldr	r3, [pc, #264]	@ (800ae60 <xTaskResumeAll+0x118>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d10b      	bne.n	800ad76 <xTaskResumeAll+0x2e>
	__asm volatile
 800ad5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad62:	f383 8811 	msr	BASEPRI, r3
 800ad66:	f3bf 8f6f 	isb	sy
 800ad6a:	f3bf 8f4f 	dsb	sy
 800ad6e:	603b      	str	r3, [r7, #0]
}
 800ad70:	bf00      	nop
 800ad72:	bf00      	nop
 800ad74:	e7fd      	b.n	800ad72 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ad76:	f001 f9d7 	bl	800c128 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ad7a:	4b39      	ldr	r3, [pc, #228]	@ (800ae60 <xTaskResumeAll+0x118>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	3b01      	subs	r3, #1
 800ad80:	4a37      	ldr	r2, [pc, #220]	@ (800ae60 <xTaskResumeAll+0x118>)
 800ad82:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad84:	4b36      	ldr	r3, [pc, #216]	@ (800ae60 <xTaskResumeAll+0x118>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d162      	bne.n	800ae52 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ad8c:	4b35      	ldr	r3, [pc, #212]	@ (800ae64 <xTaskResumeAll+0x11c>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d05e      	beq.n	800ae52 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ad94:	e02f      	b.n	800adf6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad96:	4b34      	ldr	r3, [pc, #208]	@ (800ae68 <xTaskResumeAll+0x120>)
 800ad98:	68db      	ldr	r3, [r3, #12]
 800ad9a:	68db      	ldr	r3, [r3, #12]
 800ad9c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	3318      	adds	r3, #24
 800ada2:	4618      	mov	r0, r3
 800ada4:	f7fe fefe 	bl	8009ba4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	3304      	adds	r3, #4
 800adac:	4618      	mov	r0, r3
 800adae:	f7fe fef9 	bl	8009ba4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adb6:	4b2d      	ldr	r3, [pc, #180]	@ (800ae6c <xTaskResumeAll+0x124>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	429a      	cmp	r2, r3
 800adbc:	d903      	bls.n	800adc6 <xTaskResumeAll+0x7e>
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adc2:	4a2a      	ldr	r2, [pc, #168]	@ (800ae6c <xTaskResumeAll+0x124>)
 800adc4:	6013      	str	r3, [r2, #0]
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adca:	4613      	mov	r3, r2
 800adcc:	009b      	lsls	r3, r3, #2
 800adce:	4413      	add	r3, r2
 800add0:	009b      	lsls	r3, r3, #2
 800add2:	4a27      	ldr	r2, [pc, #156]	@ (800ae70 <xTaskResumeAll+0x128>)
 800add4:	441a      	add	r2, r3
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	3304      	adds	r3, #4
 800adda:	4619      	mov	r1, r3
 800addc:	4610      	mov	r0, r2
 800adde:	f7fe fe84 	bl	8009aea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ade6:	4b23      	ldr	r3, [pc, #140]	@ (800ae74 <xTaskResumeAll+0x12c>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adec:	429a      	cmp	r2, r3
 800adee:	d302      	bcc.n	800adf6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800adf0:	4b21      	ldr	r3, [pc, #132]	@ (800ae78 <xTaskResumeAll+0x130>)
 800adf2:	2201      	movs	r2, #1
 800adf4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800adf6:	4b1c      	ldr	r3, [pc, #112]	@ (800ae68 <xTaskResumeAll+0x120>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d1cb      	bne.n	800ad96 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d001      	beq.n	800ae08 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ae04:	f000 fc00 	bl	800b608 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ae08:	4b1c      	ldr	r3, [pc, #112]	@ (800ae7c <xTaskResumeAll+0x134>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d010      	beq.n	800ae36 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ae14:	f000 f86e 	bl	800aef4 <xTaskIncrementTick>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d002      	beq.n	800ae24 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ae1e:	4b16      	ldr	r3, [pc, #88]	@ (800ae78 <xTaskResumeAll+0x130>)
 800ae20:	2201      	movs	r2, #1
 800ae22:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	3b01      	subs	r3, #1
 800ae28:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d1f1      	bne.n	800ae14 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800ae30:	4b12      	ldr	r3, [pc, #72]	@ (800ae7c <xTaskResumeAll+0x134>)
 800ae32:	2200      	movs	r2, #0
 800ae34:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ae36:	4b10      	ldr	r3, [pc, #64]	@ (800ae78 <xTaskResumeAll+0x130>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d009      	beq.n	800ae52 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ae3e:	2301      	movs	r3, #1
 800ae40:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ae42:	4b0f      	ldr	r3, [pc, #60]	@ (800ae80 <xTaskResumeAll+0x138>)
 800ae44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae48:	601a      	str	r2, [r3, #0]
 800ae4a:	f3bf 8f4f 	dsb	sy
 800ae4e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ae52:	f001 f99b 	bl	800c18c <vPortExitCritical>

	return xAlreadyYielded;
 800ae56:	68bb      	ldr	r3, [r7, #8]
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3710      	adds	r7, #16
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}
 800ae60:	20001334 	.word	0x20001334
 800ae64:	2000130c 	.word	0x2000130c
 800ae68:	200012cc 	.word	0x200012cc
 800ae6c:	20001314 	.word	0x20001314
 800ae70:	20000e3c 	.word	0x20000e3c
 800ae74:	20000e38 	.word	0x20000e38
 800ae78:	20001320 	.word	0x20001320
 800ae7c:	2000131c 	.word	0x2000131c
 800ae80:	e000ed04 	.word	0xe000ed04

0800ae84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ae84:	b480      	push	{r7}
 800ae86:	b083      	sub	sp, #12
 800ae88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ae8a:	4b05      	ldr	r3, [pc, #20]	@ (800aea0 <xTaskGetTickCount+0x1c>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ae90:	687b      	ldr	r3, [r7, #4]
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	370c      	adds	r7, #12
 800ae96:	46bd      	mov	sp, r7
 800ae98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9c:	4770      	bx	lr
 800ae9e:	bf00      	nop
 800aea0:	20001310 	.word	0x20001310

0800aea4 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 800aea4:	b480      	push	{r7}
 800aea6:	b085      	sub	sp, #20
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800aeac:	4b0f      	ldr	r3, [pc, #60]	@ (800aeec <vTaskStepTick+0x48>)
 800aeae:	681a      	ldr	r2, [r3, #0]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	441a      	add	r2, r3
 800aeb4:	4b0e      	ldr	r3, [pc, #56]	@ (800aef0 <vTaskStepTick+0x4c>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	429a      	cmp	r2, r3
 800aeba:	d90b      	bls.n	800aed4 <vTaskStepTick+0x30>
	__asm volatile
 800aebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aec0:	f383 8811 	msr	BASEPRI, r3
 800aec4:	f3bf 8f6f 	isb	sy
 800aec8:	f3bf 8f4f 	dsb	sy
 800aecc:	60fb      	str	r3, [r7, #12]
}
 800aece:	bf00      	nop
 800aed0:	bf00      	nop
 800aed2:	e7fd      	b.n	800aed0 <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 800aed4:	4b05      	ldr	r3, [pc, #20]	@ (800aeec <vTaskStepTick+0x48>)
 800aed6:	681a      	ldr	r2, [r3, #0]
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	4413      	add	r3, r2
 800aedc:	4a03      	ldr	r2, [pc, #12]	@ (800aeec <vTaskStepTick+0x48>)
 800aede:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 800aee0:	bf00      	nop
 800aee2:	3714      	adds	r7, #20
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr
 800aeec:	20001310 	.word	0x20001310
 800aef0:	2000132c 	.word	0x2000132c

0800aef4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b086      	sub	sp, #24
 800aef8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aefa:	2300      	movs	r3, #0
 800aefc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aefe:	4b4f      	ldr	r3, [pc, #316]	@ (800b03c <xTaskIncrementTick+0x148>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	2b00      	cmp	r3, #0
 800af04:	f040 8090 	bne.w	800b028 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800af08:	4b4d      	ldr	r3, [pc, #308]	@ (800b040 <xTaskIncrementTick+0x14c>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	3301      	adds	r3, #1
 800af0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800af10:	4a4b      	ldr	r2, [pc, #300]	@ (800b040 <xTaskIncrementTick+0x14c>)
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d121      	bne.n	800af60 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800af1c:	4b49      	ldr	r3, [pc, #292]	@ (800b044 <xTaskIncrementTick+0x150>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d00b      	beq.n	800af3e <xTaskIncrementTick+0x4a>
	__asm volatile
 800af26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af2a:	f383 8811 	msr	BASEPRI, r3
 800af2e:	f3bf 8f6f 	isb	sy
 800af32:	f3bf 8f4f 	dsb	sy
 800af36:	603b      	str	r3, [r7, #0]
}
 800af38:	bf00      	nop
 800af3a:	bf00      	nop
 800af3c:	e7fd      	b.n	800af3a <xTaskIncrementTick+0x46>
 800af3e:	4b41      	ldr	r3, [pc, #260]	@ (800b044 <xTaskIncrementTick+0x150>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	60fb      	str	r3, [r7, #12]
 800af44:	4b40      	ldr	r3, [pc, #256]	@ (800b048 <xTaskIncrementTick+0x154>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	4a3e      	ldr	r2, [pc, #248]	@ (800b044 <xTaskIncrementTick+0x150>)
 800af4a:	6013      	str	r3, [r2, #0]
 800af4c:	4a3e      	ldr	r2, [pc, #248]	@ (800b048 <xTaskIncrementTick+0x154>)
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	6013      	str	r3, [r2, #0]
 800af52:	4b3e      	ldr	r3, [pc, #248]	@ (800b04c <xTaskIncrementTick+0x158>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	3301      	adds	r3, #1
 800af58:	4a3c      	ldr	r2, [pc, #240]	@ (800b04c <xTaskIncrementTick+0x158>)
 800af5a:	6013      	str	r3, [r2, #0]
 800af5c:	f000 fb54 	bl	800b608 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800af60:	4b3b      	ldr	r3, [pc, #236]	@ (800b050 <xTaskIncrementTick+0x15c>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	693a      	ldr	r2, [r7, #16]
 800af66:	429a      	cmp	r2, r3
 800af68:	d349      	bcc.n	800affe <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af6a:	4b36      	ldr	r3, [pc, #216]	@ (800b044 <xTaskIncrementTick+0x150>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d104      	bne.n	800af7e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af74:	4b36      	ldr	r3, [pc, #216]	@ (800b050 <xTaskIncrementTick+0x15c>)
 800af76:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800af7a:	601a      	str	r2, [r3, #0]
					break;
 800af7c:	e03f      	b.n	800affe <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af7e:	4b31      	ldr	r3, [pc, #196]	@ (800b044 <xTaskIncrementTick+0x150>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	68db      	ldr	r3, [r3, #12]
 800af84:	68db      	ldr	r3, [r3, #12]
 800af86:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	685b      	ldr	r3, [r3, #4]
 800af8c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800af8e:	693a      	ldr	r2, [r7, #16]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	429a      	cmp	r2, r3
 800af94:	d203      	bcs.n	800af9e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800af96:	4a2e      	ldr	r2, [pc, #184]	@ (800b050 <xTaskIncrementTick+0x15c>)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800af9c:	e02f      	b.n	800affe <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	3304      	adds	r3, #4
 800afa2:	4618      	mov	r0, r3
 800afa4:	f7fe fdfe 	bl	8009ba4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afac:	2b00      	cmp	r3, #0
 800afae:	d004      	beq.n	800afba <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	3318      	adds	r3, #24
 800afb4:	4618      	mov	r0, r3
 800afb6:	f7fe fdf5 	bl	8009ba4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afbe:	4b25      	ldr	r3, [pc, #148]	@ (800b054 <xTaskIncrementTick+0x160>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	429a      	cmp	r2, r3
 800afc4:	d903      	bls.n	800afce <xTaskIncrementTick+0xda>
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afca:	4a22      	ldr	r2, [pc, #136]	@ (800b054 <xTaskIncrementTick+0x160>)
 800afcc:	6013      	str	r3, [r2, #0]
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afd2:	4613      	mov	r3, r2
 800afd4:	009b      	lsls	r3, r3, #2
 800afd6:	4413      	add	r3, r2
 800afd8:	009b      	lsls	r3, r3, #2
 800afda:	4a1f      	ldr	r2, [pc, #124]	@ (800b058 <xTaskIncrementTick+0x164>)
 800afdc:	441a      	add	r2, r3
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	3304      	adds	r3, #4
 800afe2:	4619      	mov	r1, r3
 800afe4:	4610      	mov	r0, r2
 800afe6:	f7fe fd80 	bl	8009aea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afee:	4b1b      	ldr	r3, [pc, #108]	@ (800b05c <xTaskIncrementTick+0x168>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d3b8      	bcc.n	800af6a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800aff8:	2301      	movs	r3, #1
 800affa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800affc:	e7b5      	b.n	800af6a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800affe:	4b17      	ldr	r3, [pc, #92]	@ (800b05c <xTaskIncrementTick+0x168>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b004:	4914      	ldr	r1, [pc, #80]	@ (800b058 <xTaskIncrementTick+0x164>)
 800b006:	4613      	mov	r3, r2
 800b008:	009b      	lsls	r3, r3, #2
 800b00a:	4413      	add	r3, r2
 800b00c:	009b      	lsls	r3, r3, #2
 800b00e:	440b      	add	r3, r1
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	2b01      	cmp	r3, #1
 800b014:	d901      	bls.n	800b01a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b016:	2301      	movs	r3, #1
 800b018:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b01a:	4b11      	ldr	r3, [pc, #68]	@ (800b060 <xTaskIncrementTick+0x16c>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d007      	beq.n	800b032 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b022:	2301      	movs	r3, #1
 800b024:	617b      	str	r3, [r7, #20]
 800b026:	e004      	b.n	800b032 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b028:	4b0e      	ldr	r3, [pc, #56]	@ (800b064 <xTaskIncrementTick+0x170>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	3301      	adds	r3, #1
 800b02e:	4a0d      	ldr	r2, [pc, #52]	@ (800b064 <xTaskIncrementTick+0x170>)
 800b030:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b032:	697b      	ldr	r3, [r7, #20]
}
 800b034:	4618      	mov	r0, r3
 800b036:	3718      	adds	r7, #24
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}
 800b03c:	20001334 	.word	0x20001334
 800b040:	20001310 	.word	0x20001310
 800b044:	200012c4 	.word	0x200012c4
 800b048:	200012c8 	.word	0x200012c8
 800b04c:	20001324 	.word	0x20001324
 800b050:	2000132c 	.word	0x2000132c
 800b054:	20001314 	.word	0x20001314
 800b058:	20000e3c 	.word	0x20000e3c
 800b05c:	20000e38 	.word	0x20000e38
 800b060:	20001320 	.word	0x20001320
 800b064:	2000131c 	.word	0x2000131c

0800b068 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b084      	sub	sp, #16
 800b06c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b06e:	4b36      	ldr	r3, [pc, #216]	@ (800b148 <vTaskSwitchContext+0xe0>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d003      	beq.n	800b07e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b076:	4b35      	ldr	r3, [pc, #212]	@ (800b14c <vTaskSwitchContext+0xe4>)
 800b078:	2201      	movs	r2, #1
 800b07a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b07c:	e060      	b.n	800b140 <vTaskSwitchContext+0xd8>
		xYieldPending = pdFALSE;
 800b07e:	4b33      	ldr	r3, [pc, #204]	@ (800b14c <vTaskSwitchContext+0xe4>)
 800b080:	2200      	movs	r2, #0
 800b082:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800b084:	f7f8 fa34 	bl	80034f0 <getRunTimeCounterValue>
 800b088:	4603      	mov	r3, r0
 800b08a:	4a31      	ldr	r2, [pc, #196]	@ (800b150 <vTaskSwitchContext+0xe8>)
 800b08c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800b08e:	4b30      	ldr	r3, [pc, #192]	@ (800b150 <vTaskSwitchContext+0xe8>)
 800b090:	681a      	ldr	r2, [r3, #0]
 800b092:	4b30      	ldr	r3, [pc, #192]	@ (800b154 <vTaskSwitchContext+0xec>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	429a      	cmp	r2, r3
 800b098:	d909      	bls.n	800b0ae <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800b09a:	4b2f      	ldr	r3, [pc, #188]	@ (800b158 <vTaskSwitchContext+0xf0>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800b0a0:	4a2b      	ldr	r2, [pc, #172]	@ (800b150 <vTaskSwitchContext+0xe8>)
 800b0a2:	6810      	ldr	r0, [r2, #0]
 800b0a4:	4a2b      	ldr	r2, [pc, #172]	@ (800b154 <vTaskSwitchContext+0xec>)
 800b0a6:	6812      	ldr	r2, [r2, #0]
 800b0a8:	1a82      	subs	r2, r0, r2
 800b0aa:	440a      	add	r2, r1
 800b0ac:	659a      	str	r2, [r3, #88]	@ 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800b0ae:	4b28      	ldr	r3, [pc, #160]	@ (800b150 <vTaskSwitchContext+0xe8>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	4a28      	ldr	r2, [pc, #160]	@ (800b154 <vTaskSwitchContext+0xec>)
 800b0b4:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0b6:	4b29      	ldr	r3, [pc, #164]	@ (800b15c <vTaskSwitchContext+0xf4>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	60fb      	str	r3, [r7, #12]
 800b0bc:	e011      	b.n	800b0e2 <vTaskSwitchContext+0x7a>
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d10b      	bne.n	800b0dc <vTaskSwitchContext+0x74>
	__asm volatile
 800b0c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0c8:	f383 8811 	msr	BASEPRI, r3
 800b0cc:	f3bf 8f6f 	isb	sy
 800b0d0:	f3bf 8f4f 	dsb	sy
 800b0d4:	607b      	str	r3, [r7, #4]
}
 800b0d6:	bf00      	nop
 800b0d8:	bf00      	nop
 800b0da:	e7fd      	b.n	800b0d8 <vTaskSwitchContext+0x70>
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	3b01      	subs	r3, #1
 800b0e0:	60fb      	str	r3, [r7, #12]
 800b0e2:	491f      	ldr	r1, [pc, #124]	@ (800b160 <vTaskSwitchContext+0xf8>)
 800b0e4:	68fa      	ldr	r2, [r7, #12]
 800b0e6:	4613      	mov	r3, r2
 800b0e8:	009b      	lsls	r3, r3, #2
 800b0ea:	4413      	add	r3, r2
 800b0ec:	009b      	lsls	r3, r3, #2
 800b0ee:	440b      	add	r3, r1
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d0e3      	beq.n	800b0be <vTaskSwitchContext+0x56>
 800b0f6:	68fa      	ldr	r2, [r7, #12]
 800b0f8:	4613      	mov	r3, r2
 800b0fa:	009b      	lsls	r3, r3, #2
 800b0fc:	4413      	add	r3, r2
 800b0fe:	009b      	lsls	r3, r3, #2
 800b100:	4a17      	ldr	r2, [pc, #92]	@ (800b160 <vTaskSwitchContext+0xf8>)
 800b102:	4413      	add	r3, r2
 800b104:	60bb      	str	r3, [r7, #8]
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	685b      	ldr	r3, [r3, #4]
 800b10a:	685a      	ldr	r2, [r3, #4]
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	605a      	str	r2, [r3, #4]
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	685a      	ldr	r2, [r3, #4]
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	3308      	adds	r3, #8
 800b118:	429a      	cmp	r2, r3
 800b11a:	d104      	bne.n	800b126 <vTaskSwitchContext+0xbe>
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	685b      	ldr	r3, [r3, #4]
 800b120:	685a      	ldr	r2, [r3, #4]
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	605a      	str	r2, [r3, #4]
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	685b      	ldr	r3, [r3, #4]
 800b12a:	68db      	ldr	r3, [r3, #12]
 800b12c:	4a0a      	ldr	r2, [pc, #40]	@ (800b158 <vTaskSwitchContext+0xf0>)
 800b12e:	6013      	str	r3, [r2, #0]
 800b130:	4a0a      	ldr	r2, [pc, #40]	@ (800b15c <vTaskSwitchContext+0xf4>)
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b136:	4b08      	ldr	r3, [pc, #32]	@ (800b158 <vTaskSwitchContext+0xf0>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	335c      	adds	r3, #92	@ 0x5c
 800b13c:	4a09      	ldr	r2, [pc, #36]	@ (800b164 <vTaskSwitchContext+0xfc>)
 800b13e:	6013      	str	r3, [r2, #0]
}
 800b140:	bf00      	nop
 800b142:	3710      	adds	r7, #16
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}
 800b148:	20001334 	.word	0x20001334
 800b14c:	20001320 	.word	0x20001320
 800b150:	2000133c 	.word	0x2000133c
 800b154:	20001338 	.word	0x20001338
 800b158:	20000e38 	.word	0x20000e38
 800b15c:	20001314 	.word	0x20001314
 800b160:	20000e3c 	.word	0x20000e3c
 800b164:	200000fc 	.word	0x200000fc

0800b168 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b084      	sub	sp, #16
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
 800b170:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d10b      	bne.n	800b190 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b17c:	f383 8811 	msr	BASEPRI, r3
 800b180:	f3bf 8f6f 	isb	sy
 800b184:	f3bf 8f4f 	dsb	sy
 800b188:	60fb      	str	r3, [r7, #12]
}
 800b18a:	bf00      	nop
 800b18c:	bf00      	nop
 800b18e:	e7fd      	b.n	800b18c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b190:	4b07      	ldr	r3, [pc, #28]	@ (800b1b0 <vTaskPlaceOnEventList+0x48>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	3318      	adds	r3, #24
 800b196:	4619      	mov	r1, r3
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f7fe fcca 	bl	8009b32 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b19e:	2101      	movs	r1, #1
 800b1a0:	6838      	ldr	r0, [r7, #0]
 800b1a2:	f000 fadf 	bl	800b764 <prvAddCurrentTaskToDelayedList>
}
 800b1a6:	bf00      	nop
 800b1a8:	3710      	adds	r7, #16
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
 800b1ae:	bf00      	nop
 800b1b0:	20000e38 	.word	0x20000e38

0800b1b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b086      	sub	sp, #24
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	60f8      	str	r0, [r7, #12]
 800b1bc:	60b9      	str	r1, [r7, #8]
 800b1be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d10b      	bne.n	800b1de <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b1c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1ca:	f383 8811 	msr	BASEPRI, r3
 800b1ce:	f3bf 8f6f 	isb	sy
 800b1d2:	f3bf 8f4f 	dsb	sy
 800b1d6:	617b      	str	r3, [r7, #20]
}
 800b1d8:	bf00      	nop
 800b1da:	bf00      	nop
 800b1dc:	e7fd      	b.n	800b1da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b1de:	4b0a      	ldr	r3, [pc, #40]	@ (800b208 <vTaskPlaceOnEventListRestricted+0x54>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	3318      	adds	r3, #24
 800b1e4:	4619      	mov	r1, r3
 800b1e6:	68f8      	ldr	r0, [r7, #12]
 800b1e8:	f7fe fc7f 	bl	8009aea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d002      	beq.n	800b1f8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b1f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b1f6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b1f8:	6879      	ldr	r1, [r7, #4]
 800b1fa:	68b8      	ldr	r0, [r7, #8]
 800b1fc:	f000 fab2 	bl	800b764 <prvAddCurrentTaskToDelayedList>
	}
 800b200:	bf00      	nop
 800b202:	3718      	adds	r7, #24
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}
 800b208:	20000e38 	.word	0x20000e38

0800b20c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b086      	sub	sp, #24
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	68db      	ldr	r3, [r3, #12]
 800b218:	68db      	ldr	r3, [r3, #12]
 800b21a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d10b      	bne.n	800b23a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b226:	f383 8811 	msr	BASEPRI, r3
 800b22a:	f3bf 8f6f 	isb	sy
 800b22e:	f3bf 8f4f 	dsb	sy
 800b232:	60fb      	str	r3, [r7, #12]
}
 800b234:	bf00      	nop
 800b236:	bf00      	nop
 800b238:	e7fd      	b.n	800b236 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b23a:	693b      	ldr	r3, [r7, #16]
 800b23c:	3318      	adds	r3, #24
 800b23e:	4618      	mov	r0, r3
 800b240:	f7fe fcb0 	bl	8009ba4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b244:	4b1e      	ldr	r3, [pc, #120]	@ (800b2c0 <xTaskRemoveFromEventList+0xb4>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d11f      	bne.n	800b28c <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	3304      	adds	r3, #4
 800b250:	4618      	mov	r0, r3
 800b252:	f7fe fca7 	bl	8009ba4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b256:	693b      	ldr	r3, [r7, #16]
 800b258:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b25a:	4b1a      	ldr	r3, [pc, #104]	@ (800b2c4 <xTaskRemoveFromEventList+0xb8>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	429a      	cmp	r2, r3
 800b260:	d903      	bls.n	800b26a <xTaskRemoveFromEventList+0x5e>
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b266:	4a17      	ldr	r2, [pc, #92]	@ (800b2c4 <xTaskRemoveFromEventList+0xb8>)
 800b268:	6013      	str	r3, [r2, #0]
 800b26a:	693b      	ldr	r3, [r7, #16]
 800b26c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b26e:	4613      	mov	r3, r2
 800b270:	009b      	lsls	r3, r3, #2
 800b272:	4413      	add	r3, r2
 800b274:	009b      	lsls	r3, r3, #2
 800b276:	4a14      	ldr	r2, [pc, #80]	@ (800b2c8 <xTaskRemoveFromEventList+0xbc>)
 800b278:	441a      	add	r2, r3
 800b27a:	693b      	ldr	r3, [r7, #16]
 800b27c:	3304      	adds	r3, #4
 800b27e:	4619      	mov	r1, r3
 800b280:	4610      	mov	r0, r2
 800b282:	f7fe fc32 	bl	8009aea <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800b286:	f000 f9bf 	bl	800b608 <prvResetNextTaskUnblockTime>
 800b28a:	e005      	b.n	800b298 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	3318      	adds	r3, #24
 800b290:	4619      	mov	r1, r3
 800b292:	480e      	ldr	r0, [pc, #56]	@ (800b2cc <xTaskRemoveFromEventList+0xc0>)
 800b294:	f7fe fc29 	bl	8009aea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b29c:	4b0c      	ldr	r3, [pc, #48]	@ (800b2d0 <xTaskRemoveFromEventList+0xc4>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d905      	bls.n	800b2b2 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b2aa:	4b0a      	ldr	r3, [pc, #40]	@ (800b2d4 <xTaskRemoveFromEventList+0xc8>)
 800b2ac:	2201      	movs	r2, #1
 800b2ae:	601a      	str	r2, [r3, #0]
 800b2b0:	e001      	b.n	800b2b6 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b2b6:	697b      	ldr	r3, [r7, #20]
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3718      	adds	r7, #24
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}
 800b2c0:	20001334 	.word	0x20001334
 800b2c4:	20001314 	.word	0x20001314
 800b2c8:	20000e3c 	.word	0x20000e3c
 800b2cc:	200012cc 	.word	0x200012cc
 800b2d0:	20000e38 	.word	0x20000e38
 800b2d4:	20001320 	.word	0x20001320

0800b2d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b083      	sub	sp, #12
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b2e0:	4b06      	ldr	r3, [pc, #24]	@ (800b2fc <vTaskInternalSetTimeOutState+0x24>)
 800b2e2:	681a      	ldr	r2, [r3, #0]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b2e8:	4b05      	ldr	r3, [pc, #20]	@ (800b300 <vTaskInternalSetTimeOutState+0x28>)
 800b2ea:	681a      	ldr	r2, [r3, #0]
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	605a      	str	r2, [r3, #4]
}
 800b2f0:	bf00      	nop
 800b2f2:	370c      	adds	r7, #12
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fa:	4770      	bx	lr
 800b2fc:	20001324 	.word	0x20001324
 800b300:	20001310 	.word	0x20001310

0800b304 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b088      	sub	sp, #32
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d10b      	bne.n	800b32c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b318:	f383 8811 	msr	BASEPRI, r3
 800b31c:	f3bf 8f6f 	isb	sy
 800b320:	f3bf 8f4f 	dsb	sy
 800b324:	613b      	str	r3, [r7, #16]
}
 800b326:	bf00      	nop
 800b328:	bf00      	nop
 800b32a:	e7fd      	b.n	800b328 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d10b      	bne.n	800b34a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b336:	f383 8811 	msr	BASEPRI, r3
 800b33a:	f3bf 8f6f 	isb	sy
 800b33e:	f3bf 8f4f 	dsb	sy
 800b342:	60fb      	str	r3, [r7, #12]
}
 800b344:	bf00      	nop
 800b346:	bf00      	nop
 800b348:	e7fd      	b.n	800b346 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b34a:	f000 feed 	bl	800c128 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b34e:	4b1d      	ldr	r3, [pc, #116]	@ (800b3c4 <xTaskCheckForTimeOut+0xc0>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	685b      	ldr	r3, [r3, #4]
 800b358:	69ba      	ldr	r2, [r7, #24]
 800b35a:	1ad3      	subs	r3, r2, r3
 800b35c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b366:	d102      	bne.n	800b36e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b368:	2300      	movs	r3, #0
 800b36a:	61fb      	str	r3, [r7, #28]
 800b36c:	e023      	b.n	800b3b6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681a      	ldr	r2, [r3, #0]
 800b372:	4b15      	ldr	r3, [pc, #84]	@ (800b3c8 <xTaskCheckForTimeOut+0xc4>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	429a      	cmp	r2, r3
 800b378:	d007      	beq.n	800b38a <xTaskCheckForTimeOut+0x86>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	685b      	ldr	r3, [r3, #4]
 800b37e:	69ba      	ldr	r2, [r7, #24]
 800b380:	429a      	cmp	r2, r3
 800b382:	d302      	bcc.n	800b38a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b384:	2301      	movs	r3, #1
 800b386:	61fb      	str	r3, [r7, #28]
 800b388:	e015      	b.n	800b3b6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	697a      	ldr	r2, [r7, #20]
 800b390:	429a      	cmp	r2, r3
 800b392:	d20b      	bcs.n	800b3ac <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	681a      	ldr	r2, [r3, #0]
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	1ad2      	subs	r2, r2, r3
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f7ff ff99 	bl	800b2d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	61fb      	str	r3, [r7, #28]
 800b3aa:	e004      	b.n	800b3b6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b3b6:	f000 fee9 	bl	800c18c <vPortExitCritical>

	return xReturn;
 800b3ba:	69fb      	ldr	r3, [r7, #28]
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3720      	adds	r7, #32
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}
 800b3c4:	20001310 	.word	0x20001310
 800b3c8:	20001324 	.word	0x20001324

0800b3cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b3d0:	4b03      	ldr	r3, [pc, #12]	@ (800b3e0 <vTaskMissedYield+0x14>)
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	601a      	str	r2, [r3, #0]
}
 800b3d6:	bf00      	nop
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3de:	4770      	bx	lr
 800b3e0:	20001320 	.word	0x20001320

0800b3e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b084      	sub	sp, #16
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b3ec:	f000 f8a8 	bl	800b540 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b3f0:	4b18      	ldr	r3, [pc, #96]	@ (800b454 <prvIdleTask+0x70>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	2b01      	cmp	r3, #1
 800b3f6:	d907      	bls.n	800b408 <prvIdleTask+0x24>
			{
				taskYIELD();
 800b3f8:	4b17      	ldr	r3, [pc, #92]	@ (800b458 <prvIdleTask+0x74>)
 800b3fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3fe:	601a      	str	r2, [r3, #0]
 800b400:	f3bf 8f4f 	dsb	sy
 800b404:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800b408:	f7ff fc66 	bl	800acd8 <prvGetExpectedIdleTime>
 800b40c:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	2b01      	cmp	r3, #1
 800b412:	d9eb      	bls.n	800b3ec <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800b414:	f7ff fc52 	bl	800acbc <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800b418:	4b10      	ldr	r3, [pc, #64]	@ (800b45c <prvIdleTask+0x78>)
 800b41a:	681a      	ldr	r2, [r3, #0]
 800b41c:	4b10      	ldr	r3, [pc, #64]	@ (800b460 <prvIdleTask+0x7c>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	429a      	cmp	r2, r3
 800b422:	d20b      	bcs.n	800b43c <prvIdleTask+0x58>
	__asm volatile
 800b424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b428:	f383 8811 	msr	BASEPRI, r3
 800b42c:	f3bf 8f6f 	isb	sy
 800b430:	f3bf 8f4f 	dsb	sy
 800b434:	60bb      	str	r3, [r7, #8]
}
 800b436:	bf00      	nop
 800b438:	bf00      	nop
 800b43a:	e7fd      	b.n	800b438 <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800b43c:	f7ff fc4c 	bl	800acd8 <prvGetExpectedIdleTime>
 800b440:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	2b01      	cmp	r3, #1
 800b446:	d902      	bls.n	800b44e <prvIdleTask+0x6a>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800b448:	68f8      	ldr	r0, [r7, #12]
 800b44a:	f000 ff1f 	bl	800c28c <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800b44e:	f7ff fc7b 	bl	800ad48 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800b452:	e7cb      	b.n	800b3ec <prvIdleTask+0x8>
 800b454:	20000e3c 	.word	0x20000e3c
 800b458:	e000ed04 	.word	0xe000ed04
 800b45c:	2000132c 	.word	0x2000132c
 800b460:	20001310 	.word	0x20001310

0800b464 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 800b464:	b480      	push	{r7}
 800b466:	b083      	sub	sp, #12
 800b468:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 800b46a:	2301      	movs	r3, #1
 800b46c:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 800b46e:	2301      	movs	r3, #1
 800b470:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800b472:	4b0f      	ldr	r3, [pc, #60]	@ (800b4b0 <eTaskConfirmSleepModeStatus+0x4c>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d002      	beq.n	800b480 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800b47a:	2300      	movs	r3, #0
 800b47c:	71fb      	strb	r3, [r7, #7]
 800b47e:	e010      	b.n	800b4a2 <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 800b480:	4b0c      	ldr	r3, [pc, #48]	@ (800b4b4 <eTaskConfirmSleepModeStatus+0x50>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d002      	beq.n	800b48e <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800b488:	2300      	movs	r3, #0
 800b48a:	71fb      	strb	r3, [r7, #7]
 800b48c:	e009      	b.n	800b4a2 <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800b48e:	4b0a      	ldr	r3, [pc, #40]	@ (800b4b8 <eTaskConfirmSleepModeStatus+0x54>)
 800b490:	681a      	ldr	r2, [r3, #0]
 800b492:	4b0a      	ldr	r3, [pc, #40]	@ (800b4bc <eTaskConfirmSleepModeStatus+0x58>)
 800b494:	6819      	ldr	r1, [r3, #0]
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	1acb      	subs	r3, r1, r3
 800b49a:	429a      	cmp	r2, r3
 800b49c:	d101      	bne.n	800b4a2 <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 800b49e:	2302      	movs	r3, #2
 800b4a0:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 800b4a2:	79fb      	ldrb	r3, [r7, #7]
	}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	370c      	adds	r7, #12
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ae:	4770      	bx	lr
 800b4b0:	200012cc 	.word	0x200012cc
 800b4b4:	20001320 	.word	0x20001320
 800b4b8:	200012f8 	.word	0x200012f8
 800b4bc:	2000130c 	.word	0x2000130c

0800b4c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b082      	sub	sp, #8
 800b4c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	607b      	str	r3, [r7, #4]
 800b4ca:	e00c      	b.n	800b4e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b4cc:	687a      	ldr	r2, [r7, #4]
 800b4ce:	4613      	mov	r3, r2
 800b4d0:	009b      	lsls	r3, r3, #2
 800b4d2:	4413      	add	r3, r2
 800b4d4:	009b      	lsls	r3, r3, #2
 800b4d6:	4a12      	ldr	r2, [pc, #72]	@ (800b520 <prvInitialiseTaskLists+0x60>)
 800b4d8:	4413      	add	r3, r2
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f7fe fad8 	bl	8009a90 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	3301      	adds	r3, #1
 800b4e4:	607b      	str	r3, [r7, #4]
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2b37      	cmp	r3, #55	@ 0x37
 800b4ea:	d9ef      	bls.n	800b4cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b4ec:	480d      	ldr	r0, [pc, #52]	@ (800b524 <prvInitialiseTaskLists+0x64>)
 800b4ee:	f7fe facf 	bl	8009a90 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b4f2:	480d      	ldr	r0, [pc, #52]	@ (800b528 <prvInitialiseTaskLists+0x68>)
 800b4f4:	f7fe facc 	bl	8009a90 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b4f8:	480c      	ldr	r0, [pc, #48]	@ (800b52c <prvInitialiseTaskLists+0x6c>)
 800b4fa:	f7fe fac9 	bl	8009a90 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b4fe:	480c      	ldr	r0, [pc, #48]	@ (800b530 <prvInitialiseTaskLists+0x70>)
 800b500:	f7fe fac6 	bl	8009a90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b504:	480b      	ldr	r0, [pc, #44]	@ (800b534 <prvInitialiseTaskLists+0x74>)
 800b506:	f7fe fac3 	bl	8009a90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b50a:	4b0b      	ldr	r3, [pc, #44]	@ (800b538 <prvInitialiseTaskLists+0x78>)
 800b50c:	4a05      	ldr	r2, [pc, #20]	@ (800b524 <prvInitialiseTaskLists+0x64>)
 800b50e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b510:	4b0a      	ldr	r3, [pc, #40]	@ (800b53c <prvInitialiseTaskLists+0x7c>)
 800b512:	4a05      	ldr	r2, [pc, #20]	@ (800b528 <prvInitialiseTaskLists+0x68>)
 800b514:	601a      	str	r2, [r3, #0]
}
 800b516:	bf00      	nop
 800b518:	3708      	adds	r7, #8
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}
 800b51e:	bf00      	nop
 800b520:	20000e3c 	.word	0x20000e3c
 800b524:	2000129c 	.word	0x2000129c
 800b528:	200012b0 	.word	0x200012b0
 800b52c:	200012cc 	.word	0x200012cc
 800b530:	200012e0 	.word	0x200012e0
 800b534:	200012f8 	.word	0x200012f8
 800b538:	200012c4 	.word	0x200012c4
 800b53c:	200012c8 	.word	0x200012c8

0800b540 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b082      	sub	sp, #8
 800b544:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b546:	e019      	b.n	800b57c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b548:	f000 fdee 	bl	800c128 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b54c:	4b10      	ldr	r3, [pc, #64]	@ (800b590 <prvCheckTasksWaitingTermination+0x50>)
 800b54e:	68db      	ldr	r3, [r3, #12]
 800b550:	68db      	ldr	r3, [r3, #12]
 800b552:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	3304      	adds	r3, #4
 800b558:	4618      	mov	r0, r3
 800b55a:	f7fe fb23 	bl	8009ba4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b55e:	4b0d      	ldr	r3, [pc, #52]	@ (800b594 <prvCheckTasksWaitingTermination+0x54>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	3b01      	subs	r3, #1
 800b564:	4a0b      	ldr	r2, [pc, #44]	@ (800b594 <prvCheckTasksWaitingTermination+0x54>)
 800b566:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b568:	4b0b      	ldr	r3, [pc, #44]	@ (800b598 <prvCheckTasksWaitingTermination+0x58>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	3b01      	subs	r3, #1
 800b56e:	4a0a      	ldr	r2, [pc, #40]	@ (800b598 <prvCheckTasksWaitingTermination+0x58>)
 800b570:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b572:	f000 fe0b 	bl	800c18c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f000 f810 	bl	800b59c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b57c:	4b06      	ldr	r3, [pc, #24]	@ (800b598 <prvCheckTasksWaitingTermination+0x58>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d1e1      	bne.n	800b548 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b584:	bf00      	nop
 800b586:	bf00      	nop
 800b588:	3708      	adds	r7, #8
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}
 800b58e:	bf00      	nop
 800b590:	200012e0 	.word	0x200012e0
 800b594:	2000130c 	.word	0x2000130c
 800b598:	200012f4 	.word	0x200012f4

0800b59c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b084      	sub	sp, #16
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	335c      	adds	r3, #92	@ 0x5c
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f001 ff5f 	bl	800d46c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d108      	bne.n	800b5ca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f001 f887 	bl	800c6d0 <vPortFree>
				vPortFree( pxTCB );
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f001 f884 	bl	800c6d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b5c8:	e019      	b.n	800b5fe <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800b5d0:	2b01      	cmp	r3, #1
 800b5d2:	d103      	bne.n	800b5dc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f001 f87b 	bl	800c6d0 <vPortFree>
	}
 800b5da:	e010      	b.n	800b5fe <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800b5e2:	2b02      	cmp	r3, #2
 800b5e4:	d00b      	beq.n	800b5fe <prvDeleteTCB+0x62>
	__asm volatile
 800b5e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5ea:	f383 8811 	msr	BASEPRI, r3
 800b5ee:	f3bf 8f6f 	isb	sy
 800b5f2:	f3bf 8f4f 	dsb	sy
 800b5f6:	60fb      	str	r3, [r7, #12]
}
 800b5f8:	bf00      	nop
 800b5fa:	bf00      	nop
 800b5fc:	e7fd      	b.n	800b5fa <prvDeleteTCB+0x5e>
	}
 800b5fe:	bf00      	nop
 800b600:	3710      	adds	r7, #16
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
	...

0800b608 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b608:	b480      	push	{r7}
 800b60a:	b083      	sub	sp, #12
 800b60c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b60e:	4b0c      	ldr	r3, [pc, #48]	@ (800b640 <prvResetNextTaskUnblockTime+0x38>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d104      	bne.n	800b622 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b618:	4b0a      	ldr	r3, [pc, #40]	@ (800b644 <prvResetNextTaskUnblockTime+0x3c>)
 800b61a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b61e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b620:	e008      	b.n	800b634 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b622:	4b07      	ldr	r3, [pc, #28]	@ (800b640 <prvResetNextTaskUnblockTime+0x38>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	68db      	ldr	r3, [r3, #12]
 800b628:	68db      	ldr	r3, [r3, #12]
 800b62a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	4a04      	ldr	r2, [pc, #16]	@ (800b644 <prvResetNextTaskUnblockTime+0x3c>)
 800b632:	6013      	str	r3, [r2, #0]
}
 800b634:	bf00      	nop
 800b636:	370c      	adds	r7, #12
 800b638:	46bd      	mov	sp, r7
 800b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63e:	4770      	bx	lr
 800b640:	200012c4 	.word	0x200012c4
 800b644:	2000132c 	.word	0x2000132c

0800b648 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b648:	b480      	push	{r7}
 800b64a:	b083      	sub	sp, #12
 800b64c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b64e:	4b0b      	ldr	r3, [pc, #44]	@ (800b67c <xTaskGetSchedulerState+0x34>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d102      	bne.n	800b65c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b656:	2301      	movs	r3, #1
 800b658:	607b      	str	r3, [r7, #4]
 800b65a:	e008      	b.n	800b66e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b65c:	4b08      	ldr	r3, [pc, #32]	@ (800b680 <xTaskGetSchedulerState+0x38>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d102      	bne.n	800b66a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b664:	2302      	movs	r3, #2
 800b666:	607b      	str	r3, [r7, #4]
 800b668:	e001      	b.n	800b66e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b66a:	2300      	movs	r3, #0
 800b66c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b66e:	687b      	ldr	r3, [r7, #4]
	}
 800b670:	4618      	mov	r0, r3
 800b672:	370c      	adds	r7, #12
 800b674:	46bd      	mov	sp, r7
 800b676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67a:	4770      	bx	lr
 800b67c:	20001318 	.word	0x20001318
 800b680:	20001334 	.word	0x20001334

0800b684 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b684:	b580      	push	{r7, lr}
 800b686:	b086      	sub	sp, #24
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b690:	2300      	movs	r3, #0
 800b692:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d058      	beq.n	800b74c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b69a:	4b2f      	ldr	r3, [pc, #188]	@ (800b758 <xTaskPriorityDisinherit+0xd4>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	693a      	ldr	r2, [r7, #16]
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	d00b      	beq.n	800b6bc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b6a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6a8:	f383 8811 	msr	BASEPRI, r3
 800b6ac:	f3bf 8f6f 	isb	sy
 800b6b0:	f3bf 8f4f 	dsb	sy
 800b6b4:	60fb      	str	r3, [r7, #12]
}
 800b6b6:	bf00      	nop
 800b6b8:	bf00      	nop
 800b6ba:	e7fd      	b.n	800b6b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d10b      	bne.n	800b6dc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b6c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6c8:	f383 8811 	msr	BASEPRI, r3
 800b6cc:	f3bf 8f6f 	isb	sy
 800b6d0:	f3bf 8f4f 	dsb	sy
 800b6d4:	60bb      	str	r3, [r7, #8]
}
 800b6d6:	bf00      	nop
 800b6d8:	bf00      	nop
 800b6da:	e7fd      	b.n	800b6d8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6e0:	1e5a      	subs	r2, r3, #1
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	655a      	str	r2, [r3, #84]	@ 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6ea:	693b      	ldr	r3, [r7, #16]
 800b6ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b6ee:	429a      	cmp	r2, r3
 800b6f0:	d02c      	beq.n	800b74c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d128      	bne.n	800b74c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	3304      	adds	r3, #4
 800b6fe:	4618      	mov	r0, r3
 800b700:	f7fe fa50 	bl	8009ba4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b710:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b714:	693b      	ldr	r3, [r7, #16]
 800b716:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b71c:	4b0f      	ldr	r3, [pc, #60]	@ (800b75c <xTaskPriorityDisinherit+0xd8>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	429a      	cmp	r2, r3
 800b722:	d903      	bls.n	800b72c <xTaskPriorityDisinherit+0xa8>
 800b724:	693b      	ldr	r3, [r7, #16]
 800b726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b728:	4a0c      	ldr	r2, [pc, #48]	@ (800b75c <xTaskPriorityDisinherit+0xd8>)
 800b72a:	6013      	str	r3, [r2, #0]
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b730:	4613      	mov	r3, r2
 800b732:	009b      	lsls	r3, r3, #2
 800b734:	4413      	add	r3, r2
 800b736:	009b      	lsls	r3, r3, #2
 800b738:	4a09      	ldr	r2, [pc, #36]	@ (800b760 <xTaskPriorityDisinherit+0xdc>)
 800b73a:	441a      	add	r2, r3
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	3304      	adds	r3, #4
 800b740:	4619      	mov	r1, r3
 800b742:	4610      	mov	r0, r2
 800b744:	f7fe f9d1 	bl	8009aea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b748:	2301      	movs	r3, #1
 800b74a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b74c:	697b      	ldr	r3, [r7, #20]
	}
 800b74e:	4618      	mov	r0, r3
 800b750:	3718      	adds	r7, #24
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
 800b756:	bf00      	nop
 800b758:	20000e38 	.word	0x20000e38
 800b75c:	20001314 	.word	0x20001314
 800b760:	20000e3c 	.word	0x20000e3c

0800b764 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b084      	sub	sp, #16
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
 800b76c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b76e:	4b21      	ldr	r3, [pc, #132]	@ (800b7f4 <prvAddCurrentTaskToDelayedList+0x90>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b774:	4b20      	ldr	r3, [pc, #128]	@ (800b7f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	3304      	adds	r3, #4
 800b77a:	4618      	mov	r0, r3
 800b77c:	f7fe fa12 	bl	8009ba4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b786:	d10a      	bne.n	800b79e <prvAddCurrentTaskToDelayedList+0x3a>
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d007      	beq.n	800b79e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b78e:	4b1a      	ldr	r3, [pc, #104]	@ (800b7f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	3304      	adds	r3, #4
 800b794:	4619      	mov	r1, r3
 800b796:	4819      	ldr	r0, [pc, #100]	@ (800b7fc <prvAddCurrentTaskToDelayedList+0x98>)
 800b798:	f7fe f9a7 	bl	8009aea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b79c:	e026      	b.n	800b7ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b79e:	68fa      	ldr	r2, [r7, #12]
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	4413      	add	r3, r2
 800b7a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b7a6:	4b14      	ldr	r3, [pc, #80]	@ (800b7f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	68ba      	ldr	r2, [r7, #8]
 800b7ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b7ae:	68ba      	ldr	r2, [r7, #8]
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d209      	bcs.n	800b7ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b7b6:	4b12      	ldr	r3, [pc, #72]	@ (800b800 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b7b8:	681a      	ldr	r2, [r3, #0]
 800b7ba:	4b0f      	ldr	r3, [pc, #60]	@ (800b7f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	3304      	adds	r3, #4
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	4610      	mov	r0, r2
 800b7c4:	f7fe f9b5 	bl	8009b32 <vListInsert>
}
 800b7c8:	e010      	b.n	800b7ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b7ca:	4b0e      	ldr	r3, [pc, #56]	@ (800b804 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b7cc:	681a      	ldr	r2, [r3, #0]
 800b7ce:	4b0a      	ldr	r3, [pc, #40]	@ (800b7f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	3304      	adds	r3, #4
 800b7d4:	4619      	mov	r1, r3
 800b7d6:	4610      	mov	r0, r2
 800b7d8:	f7fe f9ab 	bl	8009b32 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b7dc:	4b0a      	ldr	r3, [pc, #40]	@ (800b808 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	68ba      	ldr	r2, [r7, #8]
 800b7e2:	429a      	cmp	r2, r3
 800b7e4:	d202      	bcs.n	800b7ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b7e6:	4a08      	ldr	r2, [pc, #32]	@ (800b808 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	6013      	str	r3, [r2, #0]
}
 800b7ec:	bf00      	nop
 800b7ee:	3710      	adds	r7, #16
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}
 800b7f4:	20001310 	.word	0x20001310
 800b7f8:	20000e38 	.word	0x20000e38
 800b7fc:	200012f8 	.word	0x200012f8
 800b800:	200012c8 	.word	0x200012c8
 800b804:	200012c4 	.word	0x200012c4
 800b808:	2000132c 	.word	0x2000132c

0800b80c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b08a      	sub	sp, #40	@ 0x28
 800b810:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b812:	2300      	movs	r3, #0
 800b814:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b816:	f000 fb13 	bl	800be40 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b81a:	4b1d      	ldr	r3, [pc, #116]	@ (800b890 <xTimerCreateTimerTask+0x84>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d021      	beq.n	800b866 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b822:	2300      	movs	r3, #0
 800b824:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b826:	2300      	movs	r3, #0
 800b828:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b82a:	1d3a      	adds	r2, r7, #4
 800b82c:	f107 0108 	add.w	r1, r7, #8
 800b830:	f107 030c 	add.w	r3, r7, #12
 800b834:	4618      	mov	r0, r3
 800b836:	f7fe f911 	bl	8009a5c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b83a:	6879      	ldr	r1, [r7, #4]
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	68fa      	ldr	r2, [r7, #12]
 800b840:	9202      	str	r2, [sp, #8]
 800b842:	9301      	str	r3, [sp, #4]
 800b844:	2302      	movs	r3, #2
 800b846:	9300      	str	r3, [sp, #0]
 800b848:	2300      	movs	r3, #0
 800b84a:	460a      	mov	r2, r1
 800b84c:	4911      	ldr	r1, [pc, #68]	@ (800b894 <xTimerCreateTimerTask+0x88>)
 800b84e:	4812      	ldr	r0, [pc, #72]	@ (800b898 <xTimerCreateTimerTask+0x8c>)
 800b850:	f7fe ffc8 	bl	800a7e4 <xTaskCreateStatic>
 800b854:	4603      	mov	r3, r0
 800b856:	4a11      	ldr	r2, [pc, #68]	@ (800b89c <xTimerCreateTimerTask+0x90>)
 800b858:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b85a:	4b10      	ldr	r3, [pc, #64]	@ (800b89c <xTimerCreateTimerTask+0x90>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d001      	beq.n	800b866 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b862:	2301      	movs	r3, #1
 800b864:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d10b      	bne.n	800b884 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b86c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b870:	f383 8811 	msr	BASEPRI, r3
 800b874:	f3bf 8f6f 	isb	sy
 800b878:	f3bf 8f4f 	dsb	sy
 800b87c:	613b      	str	r3, [r7, #16]
}
 800b87e:	bf00      	nop
 800b880:	bf00      	nop
 800b882:	e7fd      	b.n	800b880 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b884:	697b      	ldr	r3, [r7, #20]
}
 800b886:	4618      	mov	r0, r3
 800b888:	3718      	adds	r7, #24
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd80      	pop	{r7, pc}
 800b88e:	bf00      	nop
 800b890:	20001370 	.word	0x20001370
 800b894:	0800f878 	.word	0x0800f878
 800b898:	0800b9d9 	.word	0x0800b9d9
 800b89c:	20001374 	.word	0x20001374

0800b8a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b08a      	sub	sp, #40	@ 0x28
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	60f8      	str	r0, [r7, #12]
 800b8a8:	60b9      	str	r1, [r7, #8]
 800b8aa:	607a      	str	r2, [r7, #4]
 800b8ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d10b      	bne.n	800b8d0 <xTimerGenericCommand+0x30>
	__asm volatile
 800b8b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8bc:	f383 8811 	msr	BASEPRI, r3
 800b8c0:	f3bf 8f6f 	isb	sy
 800b8c4:	f3bf 8f4f 	dsb	sy
 800b8c8:	623b      	str	r3, [r7, #32]
}
 800b8ca:	bf00      	nop
 800b8cc:	bf00      	nop
 800b8ce:	e7fd      	b.n	800b8cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b8d0:	4b19      	ldr	r3, [pc, #100]	@ (800b938 <xTimerGenericCommand+0x98>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d02a      	beq.n	800b92e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	2b05      	cmp	r3, #5
 800b8e8:	dc18      	bgt.n	800b91c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b8ea:	f7ff fead 	bl	800b648 <xTaskGetSchedulerState>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	2b02      	cmp	r3, #2
 800b8f2:	d109      	bne.n	800b908 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b8f4:	4b10      	ldr	r3, [pc, #64]	@ (800b938 <xTimerGenericCommand+0x98>)
 800b8f6:	6818      	ldr	r0, [r3, #0]
 800b8f8:	f107 0110 	add.w	r1, r7, #16
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b900:	f7fe fac0 	bl	8009e84 <xQueueGenericSend>
 800b904:	6278      	str	r0, [r7, #36]	@ 0x24
 800b906:	e012      	b.n	800b92e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b908:	4b0b      	ldr	r3, [pc, #44]	@ (800b938 <xTimerGenericCommand+0x98>)
 800b90a:	6818      	ldr	r0, [r3, #0]
 800b90c:	f107 0110 	add.w	r1, r7, #16
 800b910:	2300      	movs	r3, #0
 800b912:	2200      	movs	r2, #0
 800b914:	f7fe fab6 	bl	8009e84 <xQueueGenericSend>
 800b918:	6278      	str	r0, [r7, #36]	@ 0x24
 800b91a:	e008      	b.n	800b92e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b91c:	4b06      	ldr	r3, [pc, #24]	@ (800b938 <xTimerGenericCommand+0x98>)
 800b91e:	6818      	ldr	r0, [r3, #0]
 800b920:	f107 0110 	add.w	r1, r7, #16
 800b924:	2300      	movs	r3, #0
 800b926:	683a      	ldr	r2, [r7, #0]
 800b928:	f7fe fbae 	bl	800a088 <xQueueGenericSendFromISR>
 800b92c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b92e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b930:	4618      	mov	r0, r3
 800b932:	3728      	adds	r7, #40	@ 0x28
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}
 800b938:	20001370 	.word	0x20001370

0800b93c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b088      	sub	sp, #32
 800b940:	af02      	add	r7, sp, #8
 800b942:	6078      	str	r0, [r7, #4]
 800b944:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b946:	4b23      	ldr	r3, [pc, #140]	@ (800b9d4 <prvProcessExpiredTimer+0x98>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	68db      	ldr	r3, [r3, #12]
 800b94c:	68db      	ldr	r3, [r3, #12]
 800b94e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b950:	697b      	ldr	r3, [r7, #20]
 800b952:	3304      	adds	r3, #4
 800b954:	4618      	mov	r0, r3
 800b956:	f7fe f925 	bl	8009ba4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b960:	f003 0304 	and.w	r3, r3, #4
 800b964:	2b00      	cmp	r3, #0
 800b966:	d023      	beq.n	800b9b0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	699a      	ldr	r2, [r3, #24]
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	18d1      	adds	r1, r2, r3
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	683a      	ldr	r2, [r7, #0]
 800b974:	6978      	ldr	r0, [r7, #20]
 800b976:	f000 f8d5 	bl	800bb24 <prvInsertTimerInActiveList>
 800b97a:	4603      	mov	r3, r0
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d020      	beq.n	800b9c2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b980:	2300      	movs	r3, #0
 800b982:	9300      	str	r3, [sp, #0]
 800b984:	2300      	movs	r3, #0
 800b986:	687a      	ldr	r2, [r7, #4]
 800b988:	2100      	movs	r1, #0
 800b98a:	6978      	ldr	r0, [r7, #20]
 800b98c:	f7ff ff88 	bl	800b8a0 <xTimerGenericCommand>
 800b990:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d114      	bne.n	800b9c2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b99c:	f383 8811 	msr	BASEPRI, r3
 800b9a0:	f3bf 8f6f 	isb	sy
 800b9a4:	f3bf 8f4f 	dsb	sy
 800b9a8:	60fb      	str	r3, [r7, #12]
}
 800b9aa:	bf00      	nop
 800b9ac:	bf00      	nop
 800b9ae:	e7fd      	b.n	800b9ac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b9b0:	697b      	ldr	r3, [r7, #20]
 800b9b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b9b6:	f023 0301 	bic.w	r3, r3, #1
 800b9ba:	b2da      	uxtb	r2, r3
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	6a1b      	ldr	r3, [r3, #32]
 800b9c6:	6978      	ldr	r0, [r7, #20]
 800b9c8:	4798      	blx	r3
}
 800b9ca:	bf00      	nop
 800b9cc:	3718      	adds	r7, #24
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
 800b9d2:	bf00      	nop
 800b9d4:	20001368 	.word	0x20001368

0800b9d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b084      	sub	sp, #16
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b9e0:	f107 0308 	add.w	r3, r7, #8
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f000 f859 	bl	800ba9c <prvGetNextExpireTime>
 800b9ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	4619      	mov	r1, r3
 800b9f0:	68f8      	ldr	r0, [r7, #12]
 800b9f2:	f000 f805 	bl	800ba00 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b9f6:	f000 f8d7 	bl	800bba8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b9fa:	bf00      	nop
 800b9fc:	e7f0      	b.n	800b9e0 <prvTimerTask+0x8>
	...

0800ba00 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b084      	sub	sp, #16
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
 800ba08:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ba0a:	f7ff f957 	bl	800acbc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ba0e:	f107 0308 	add.w	r3, r7, #8
 800ba12:	4618      	mov	r0, r3
 800ba14:	f000 f866 	bl	800bae4 <prvSampleTimeNow>
 800ba18:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d130      	bne.n	800ba82 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d10a      	bne.n	800ba3c <prvProcessTimerOrBlockTask+0x3c>
 800ba26:	687a      	ldr	r2, [r7, #4]
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d806      	bhi.n	800ba3c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ba2e:	f7ff f98b 	bl	800ad48 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ba32:	68f9      	ldr	r1, [r7, #12]
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f7ff ff81 	bl	800b93c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ba3a:	e024      	b.n	800ba86 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d008      	beq.n	800ba54 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ba42:	4b13      	ldr	r3, [pc, #76]	@ (800ba90 <prvProcessTimerOrBlockTask+0x90>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d101      	bne.n	800ba50 <prvProcessTimerOrBlockTask+0x50>
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	e000      	b.n	800ba52 <prvProcessTimerOrBlockTask+0x52>
 800ba50:	2300      	movs	r3, #0
 800ba52:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ba54:	4b0f      	ldr	r3, [pc, #60]	@ (800ba94 <prvProcessTimerOrBlockTask+0x94>)
 800ba56:	6818      	ldr	r0, [r3, #0]
 800ba58:	687a      	ldr	r2, [r7, #4]
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	1ad3      	subs	r3, r2, r3
 800ba5e:	683a      	ldr	r2, [r7, #0]
 800ba60:	4619      	mov	r1, r3
 800ba62:	f7fe fe8b 	bl	800a77c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ba66:	f7ff f96f 	bl	800ad48 <xTaskResumeAll>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d10a      	bne.n	800ba86 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ba70:	4b09      	ldr	r3, [pc, #36]	@ (800ba98 <prvProcessTimerOrBlockTask+0x98>)
 800ba72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba76:	601a      	str	r2, [r3, #0]
 800ba78:	f3bf 8f4f 	dsb	sy
 800ba7c:	f3bf 8f6f 	isb	sy
}
 800ba80:	e001      	b.n	800ba86 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ba82:	f7ff f961 	bl	800ad48 <xTaskResumeAll>
}
 800ba86:	bf00      	nop
 800ba88:	3710      	adds	r7, #16
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}
 800ba8e:	bf00      	nop
 800ba90:	2000136c 	.word	0x2000136c
 800ba94:	20001370 	.word	0x20001370
 800ba98:	e000ed04 	.word	0xe000ed04

0800ba9c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	b085      	sub	sp, #20
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800baa4:	4b0e      	ldr	r3, [pc, #56]	@ (800bae0 <prvGetNextExpireTime+0x44>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d101      	bne.n	800bab2 <prvGetNextExpireTime+0x16>
 800baae:	2201      	movs	r2, #1
 800bab0:	e000      	b.n	800bab4 <prvGetNextExpireTime+0x18>
 800bab2:	2200      	movs	r2, #0
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d105      	bne.n	800bacc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bac0:	4b07      	ldr	r3, [pc, #28]	@ (800bae0 <prvGetNextExpireTime+0x44>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	68db      	ldr	r3, [r3, #12]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	60fb      	str	r3, [r7, #12]
 800baca:	e001      	b.n	800bad0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bacc:	2300      	movs	r3, #0
 800bace:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bad0:	68fb      	ldr	r3, [r7, #12]
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	3714      	adds	r7, #20
 800bad6:	46bd      	mov	sp, r7
 800bad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800badc:	4770      	bx	lr
 800bade:	bf00      	nop
 800bae0:	20001368 	.word	0x20001368

0800bae4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b084      	sub	sp, #16
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800baec:	f7ff f9ca 	bl	800ae84 <xTaskGetTickCount>
 800baf0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800baf2:	4b0b      	ldr	r3, [pc, #44]	@ (800bb20 <prvSampleTimeNow+0x3c>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	68fa      	ldr	r2, [r7, #12]
 800baf8:	429a      	cmp	r2, r3
 800bafa:	d205      	bcs.n	800bb08 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bafc:	f000 f93a 	bl	800bd74 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2201      	movs	r2, #1
 800bb04:	601a      	str	r2, [r3, #0]
 800bb06:	e002      	b.n	800bb0e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bb0e:	4a04      	ldr	r2, [pc, #16]	@ (800bb20 <prvSampleTimeNow+0x3c>)
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bb14:	68fb      	ldr	r3, [r7, #12]
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3710      	adds	r7, #16
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}
 800bb1e:	bf00      	nop
 800bb20:	20001378 	.word	0x20001378

0800bb24 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b086      	sub	sp, #24
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	60f8      	str	r0, [r7, #12]
 800bb2c:	60b9      	str	r1, [r7, #8]
 800bb2e:	607a      	str	r2, [r7, #4]
 800bb30:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bb32:	2300      	movs	r3, #0
 800bb34:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	68ba      	ldr	r2, [r7, #8]
 800bb3a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	68fa      	ldr	r2, [r7, #12]
 800bb40:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bb42:	68ba      	ldr	r2, [r7, #8]
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	429a      	cmp	r2, r3
 800bb48:	d812      	bhi.n	800bb70 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb4a:	687a      	ldr	r2, [r7, #4]
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	1ad2      	subs	r2, r2, r3
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	699b      	ldr	r3, [r3, #24]
 800bb54:	429a      	cmp	r2, r3
 800bb56:	d302      	bcc.n	800bb5e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bb58:	2301      	movs	r3, #1
 800bb5a:	617b      	str	r3, [r7, #20]
 800bb5c:	e01b      	b.n	800bb96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bb5e:	4b10      	ldr	r3, [pc, #64]	@ (800bba0 <prvInsertTimerInActiveList+0x7c>)
 800bb60:	681a      	ldr	r2, [r3, #0]
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	3304      	adds	r3, #4
 800bb66:	4619      	mov	r1, r3
 800bb68:	4610      	mov	r0, r2
 800bb6a:	f7fd ffe2 	bl	8009b32 <vListInsert>
 800bb6e:	e012      	b.n	800bb96 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bb70:	687a      	ldr	r2, [r7, #4]
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d206      	bcs.n	800bb86 <prvInsertTimerInActiveList+0x62>
 800bb78:	68ba      	ldr	r2, [r7, #8]
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	429a      	cmp	r2, r3
 800bb7e:	d302      	bcc.n	800bb86 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bb80:	2301      	movs	r3, #1
 800bb82:	617b      	str	r3, [r7, #20]
 800bb84:	e007      	b.n	800bb96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bb86:	4b07      	ldr	r3, [pc, #28]	@ (800bba4 <prvInsertTimerInActiveList+0x80>)
 800bb88:	681a      	ldr	r2, [r3, #0]
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	3304      	adds	r3, #4
 800bb8e:	4619      	mov	r1, r3
 800bb90:	4610      	mov	r0, r2
 800bb92:	f7fd ffce 	bl	8009b32 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bb96:	697b      	ldr	r3, [r7, #20]
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3718      	adds	r7, #24
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}
 800bba0:	2000136c 	.word	0x2000136c
 800bba4:	20001368 	.word	0x20001368

0800bba8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b08e      	sub	sp, #56	@ 0x38
 800bbac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bbae:	e0ce      	b.n	800bd4e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	da19      	bge.n	800bbea <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bbb6:	1d3b      	adds	r3, r7, #4
 800bbb8:	3304      	adds	r3, #4
 800bbba:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bbbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d10b      	bne.n	800bbda <prvProcessReceivedCommands+0x32>
	__asm volatile
 800bbc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbc6:	f383 8811 	msr	BASEPRI, r3
 800bbca:	f3bf 8f6f 	isb	sy
 800bbce:	f3bf 8f4f 	dsb	sy
 800bbd2:	61fb      	str	r3, [r7, #28]
}
 800bbd4:	bf00      	nop
 800bbd6:	bf00      	nop
 800bbd8:	e7fd      	b.n	800bbd6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bbda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bbe0:	6850      	ldr	r0, [r2, #4]
 800bbe2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bbe4:	6892      	ldr	r2, [r2, #8]
 800bbe6:	4611      	mov	r1, r2
 800bbe8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	f2c0 80ae 	blt.w	800bd4e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bbf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbf8:	695b      	ldr	r3, [r3, #20]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d004      	beq.n	800bc08 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bbfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc00:	3304      	adds	r3, #4
 800bc02:	4618      	mov	r0, r3
 800bc04:	f7fd ffce 	bl	8009ba4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bc08:	463b      	mov	r3, r7
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f7ff ff6a 	bl	800bae4 <prvSampleTimeNow>
 800bc10:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2b09      	cmp	r3, #9
 800bc16:	f200 8097 	bhi.w	800bd48 <prvProcessReceivedCommands+0x1a0>
 800bc1a:	a201      	add	r2, pc, #4	@ (adr r2, 800bc20 <prvProcessReceivedCommands+0x78>)
 800bc1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc20:	0800bc49 	.word	0x0800bc49
 800bc24:	0800bc49 	.word	0x0800bc49
 800bc28:	0800bc49 	.word	0x0800bc49
 800bc2c:	0800bcbf 	.word	0x0800bcbf
 800bc30:	0800bcd3 	.word	0x0800bcd3
 800bc34:	0800bd1f 	.word	0x0800bd1f
 800bc38:	0800bc49 	.word	0x0800bc49
 800bc3c:	0800bc49 	.word	0x0800bc49
 800bc40:	0800bcbf 	.word	0x0800bcbf
 800bc44:	0800bcd3 	.word	0x0800bcd3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bc48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc4e:	f043 0301 	orr.w	r3, r3, #1
 800bc52:	b2da      	uxtb	r2, r3
 800bc54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bc5a:	68ba      	ldr	r2, [r7, #8]
 800bc5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc5e:	699b      	ldr	r3, [r3, #24]
 800bc60:	18d1      	adds	r1, r2, r3
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc68:	f7ff ff5c 	bl	800bb24 <prvInsertTimerInActiveList>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d06c      	beq.n	800bd4c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc74:	6a1b      	ldr	r3, [r3, #32]
 800bc76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc78:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc80:	f003 0304 	and.w	r3, r3, #4
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d061      	beq.n	800bd4c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bc88:	68ba      	ldr	r2, [r7, #8]
 800bc8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc8c:	699b      	ldr	r3, [r3, #24]
 800bc8e:	441a      	add	r2, r3
 800bc90:	2300      	movs	r3, #0
 800bc92:	9300      	str	r3, [sp, #0]
 800bc94:	2300      	movs	r3, #0
 800bc96:	2100      	movs	r1, #0
 800bc98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc9a:	f7ff fe01 	bl	800b8a0 <xTimerGenericCommand>
 800bc9e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bca0:	6a3b      	ldr	r3, [r7, #32]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d152      	bne.n	800bd4c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800bca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcaa:	f383 8811 	msr	BASEPRI, r3
 800bcae:	f3bf 8f6f 	isb	sy
 800bcb2:	f3bf 8f4f 	dsb	sy
 800bcb6:	61bb      	str	r3, [r7, #24]
}
 800bcb8:	bf00      	nop
 800bcba:	bf00      	nop
 800bcbc:	e7fd      	b.n	800bcba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bcbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bcc4:	f023 0301 	bic.w	r3, r3, #1
 800bcc8:	b2da      	uxtb	r2, r3
 800bcca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bccc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bcd0:	e03d      	b.n	800bd4e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bcd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcd4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bcd8:	f043 0301 	orr.w	r3, r3, #1
 800bcdc:	b2da      	uxtb	r2, r3
 800bcde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bce0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bce4:	68ba      	ldr	r2, [r7, #8]
 800bce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bce8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bcea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcec:	699b      	ldr	r3, [r3, #24]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d10b      	bne.n	800bd0a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800bcf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcf6:	f383 8811 	msr	BASEPRI, r3
 800bcfa:	f3bf 8f6f 	isb	sy
 800bcfe:	f3bf 8f4f 	dsb	sy
 800bd02:	617b      	str	r3, [r7, #20]
}
 800bd04:	bf00      	nop
 800bd06:	bf00      	nop
 800bd08:	e7fd      	b.n	800bd06 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bd0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd0c:	699a      	ldr	r2, [r3, #24]
 800bd0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd10:	18d1      	adds	r1, r2, r3
 800bd12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bd18:	f7ff ff04 	bl	800bb24 <prvInsertTimerInActiveList>
					break;
 800bd1c:	e017      	b.n	800bd4e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bd1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bd24:	f003 0302 	and.w	r3, r3, #2
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d103      	bne.n	800bd34 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800bd2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bd2e:	f000 fccf 	bl	800c6d0 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bd32:	e00c      	b.n	800bd4e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bd34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bd3a:	f023 0301 	bic.w	r3, r3, #1
 800bd3e:	b2da      	uxtb	r2, r3
 800bd40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bd46:	e002      	b.n	800bd4e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800bd48:	bf00      	nop
 800bd4a:	e000      	b.n	800bd4e <prvProcessReceivedCommands+0x1a6>
					break;
 800bd4c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bd4e:	4b08      	ldr	r3, [pc, #32]	@ (800bd70 <prvProcessReceivedCommands+0x1c8>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	1d39      	adds	r1, r7, #4
 800bd54:	2200      	movs	r2, #0
 800bd56:	4618      	mov	r0, r3
 800bd58:	f7fe fa34 	bl	800a1c4 <xQueueReceive>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	f47f af26 	bne.w	800bbb0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bd64:	bf00      	nop
 800bd66:	bf00      	nop
 800bd68:	3730      	adds	r7, #48	@ 0x30
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
 800bd6e:	bf00      	nop
 800bd70:	20001370 	.word	0x20001370

0800bd74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b088      	sub	sp, #32
 800bd78:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bd7a:	e049      	b.n	800be10 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bd7c:	4b2e      	ldr	r3, [pc, #184]	@ (800be38 <prvSwitchTimerLists+0xc4>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	68db      	ldr	r3, [r3, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd86:	4b2c      	ldr	r3, [pc, #176]	@ (800be38 <prvSwitchTimerLists+0xc4>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	68db      	ldr	r3, [r3, #12]
 800bd8c:	68db      	ldr	r3, [r3, #12]
 800bd8e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	3304      	adds	r3, #4
 800bd94:	4618      	mov	r0, r3
 800bd96:	f7fd ff05 	bl	8009ba4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	6a1b      	ldr	r3, [r3, #32]
 800bd9e:	68f8      	ldr	r0, [r7, #12]
 800bda0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bda8:	f003 0304 	and.w	r3, r3, #4
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d02f      	beq.n	800be10 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	699b      	ldr	r3, [r3, #24]
 800bdb4:	693a      	ldr	r2, [r7, #16]
 800bdb6:	4413      	add	r3, r2
 800bdb8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bdba:	68ba      	ldr	r2, [r7, #8]
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	429a      	cmp	r2, r3
 800bdc0:	d90e      	bls.n	800bde0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	68ba      	ldr	r2, [r7, #8]
 800bdc6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	68fa      	ldr	r2, [r7, #12]
 800bdcc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bdce:	4b1a      	ldr	r3, [pc, #104]	@ (800be38 <prvSwitchTimerLists+0xc4>)
 800bdd0:	681a      	ldr	r2, [r3, #0]
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	3304      	adds	r3, #4
 800bdd6:	4619      	mov	r1, r3
 800bdd8:	4610      	mov	r0, r2
 800bdda:	f7fd feaa 	bl	8009b32 <vListInsert>
 800bdde:	e017      	b.n	800be10 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bde0:	2300      	movs	r3, #0
 800bde2:	9300      	str	r3, [sp, #0]
 800bde4:	2300      	movs	r3, #0
 800bde6:	693a      	ldr	r2, [r7, #16]
 800bde8:	2100      	movs	r1, #0
 800bdea:	68f8      	ldr	r0, [r7, #12]
 800bdec:	f7ff fd58 	bl	800b8a0 <xTimerGenericCommand>
 800bdf0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d10b      	bne.n	800be10 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800bdf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdfc:	f383 8811 	msr	BASEPRI, r3
 800be00:	f3bf 8f6f 	isb	sy
 800be04:	f3bf 8f4f 	dsb	sy
 800be08:	603b      	str	r3, [r7, #0]
}
 800be0a:	bf00      	nop
 800be0c:	bf00      	nop
 800be0e:	e7fd      	b.n	800be0c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800be10:	4b09      	ldr	r3, [pc, #36]	@ (800be38 <prvSwitchTimerLists+0xc4>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d1b0      	bne.n	800bd7c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800be1a:	4b07      	ldr	r3, [pc, #28]	@ (800be38 <prvSwitchTimerLists+0xc4>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800be20:	4b06      	ldr	r3, [pc, #24]	@ (800be3c <prvSwitchTimerLists+0xc8>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	4a04      	ldr	r2, [pc, #16]	@ (800be38 <prvSwitchTimerLists+0xc4>)
 800be26:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800be28:	4a04      	ldr	r2, [pc, #16]	@ (800be3c <prvSwitchTimerLists+0xc8>)
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	6013      	str	r3, [r2, #0]
}
 800be2e:	bf00      	nop
 800be30:	3718      	adds	r7, #24
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}
 800be36:	bf00      	nop
 800be38:	20001368 	.word	0x20001368
 800be3c:	2000136c 	.word	0x2000136c

0800be40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b082      	sub	sp, #8
 800be44:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800be46:	f000 f96f 	bl	800c128 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800be4a:	4b15      	ldr	r3, [pc, #84]	@ (800bea0 <prvCheckForValidListAndQueue+0x60>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d120      	bne.n	800be94 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800be52:	4814      	ldr	r0, [pc, #80]	@ (800bea4 <prvCheckForValidListAndQueue+0x64>)
 800be54:	f7fd fe1c 	bl	8009a90 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800be58:	4813      	ldr	r0, [pc, #76]	@ (800bea8 <prvCheckForValidListAndQueue+0x68>)
 800be5a:	f7fd fe19 	bl	8009a90 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800be5e:	4b13      	ldr	r3, [pc, #76]	@ (800beac <prvCheckForValidListAndQueue+0x6c>)
 800be60:	4a10      	ldr	r2, [pc, #64]	@ (800bea4 <prvCheckForValidListAndQueue+0x64>)
 800be62:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800be64:	4b12      	ldr	r3, [pc, #72]	@ (800beb0 <prvCheckForValidListAndQueue+0x70>)
 800be66:	4a10      	ldr	r2, [pc, #64]	@ (800bea8 <prvCheckForValidListAndQueue+0x68>)
 800be68:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800be6a:	2300      	movs	r3, #0
 800be6c:	9300      	str	r3, [sp, #0]
 800be6e:	4b11      	ldr	r3, [pc, #68]	@ (800beb4 <prvCheckForValidListAndQueue+0x74>)
 800be70:	4a11      	ldr	r2, [pc, #68]	@ (800beb8 <prvCheckForValidListAndQueue+0x78>)
 800be72:	2110      	movs	r1, #16
 800be74:	200a      	movs	r0, #10
 800be76:	f7fd ff29 	bl	8009ccc <xQueueGenericCreateStatic>
 800be7a:	4603      	mov	r3, r0
 800be7c:	4a08      	ldr	r2, [pc, #32]	@ (800bea0 <prvCheckForValidListAndQueue+0x60>)
 800be7e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800be80:	4b07      	ldr	r3, [pc, #28]	@ (800bea0 <prvCheckForValidListAndQueue+0x60>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d005      	beq.n	800be94 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800be88:	4b05      	ldr	r3, [pc, #20]	@ (800bea0 <prvCheckForValidListAndQueue+0x60>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	490b      	ldr	r1, [pc, #44]	@ (800bebc <prvCheckForValidListAndQueue+0x7c>)
 800be8e:	4618      	mov	r0, r3
 800be90:	f7fe fc4a 	bl	800a728 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800be94:	f000 f97a 	bl	800c18c <vPortExitCritical>
}
 800be98:	bf00      	nop
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}
 800be9e:	bf00      	nop
 800bea0:	20001370 	.word	0x20001370
 800bea4:	20001340 	.word	0x20001340
 800bea8:	20001354 	.word	0x20001354
 800beac:	20001368 	.word	0x20001368
 800beb0:	2000136c 	.word	0x2000136c
 800beb4:	2000141c 	.word	0x2000141c
 800beb8:	2000137c 	.word	0x2000137c
 800bebc:	0800f880 	.word	0x0800f880

0800bec0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bec0:	b480      	push	{r7}
 800bec2:	b085      	sub	sp, #20
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	60f8      	str	r0, [r7, #12]
 800bec8:	60b9      	str	r1, [r7, #8]
 800beca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	3b04      	subs	r3, #4
 800bed0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800bed8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	3b04      	subs	r3, #4
 800bede:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	f023 0201 	bic.w	r2, r3, #1
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	3b04      	subs	r3, #4
 800beee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bef0:	4a0c      	ldr	r2, [pc, #48]	@ (800bf24 <pxPortInitialiseStack+0x64>)
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	3b14      	subs	r3, #20
 800befa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800befc:	687a      	ldr	r2, [r7, #4]
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	3b04      	subs	r3, #4
 800bf06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	f06f 0202 	mvn.w	r2, #2
 800bf0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	3b20      	subs	r3, #32
 800bf14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bf16:	68fb      	ldr	r3, [r7, #12]
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3714      	adds	r7, #20
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf22:	4770      	bx	lr
 800bf24:	0800bf29 	.word	0x0800bf29

0800bf28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b085      	sub	sp, #20
 800bf2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bf32:	4b13      	ldr	r3, [pc, #76]	@ (800bf80 <prvTaskExitError+0x58>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bf3a:	d00b      	beq.n	800bf54 <prvTaskExitError+0x2c>
	__asm volatile
 800bf3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf40:	f383 8811 	msr	BASEPRI, r3
 800bf44:	f3bf 8f6f 	isb	sy
 800bf48:	f3bf 8f4f 	dsb	sy
 800bf4c:	60fb      	str	r3, [r7, #12]
}
 800bf4e:	bf00      	nop
 800bf50:	bf00      	nop
 800bf52:	e7fd      	b.n	800bf50 <prvTaskExitError+0x28>
	__asm volatile
 800bf54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf58:	f383 8811 	msr	BASEPRI, r3
 800bf5c:	f3bf 8f6f 	isb	sy
 800bf60:	f3bf 8f4f 	dsb	sy
 800bf64:	60bb      	str	r3, [r7, #8]
}
 800bf66:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bf68:	bf00      	nop
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d0fc      	beq.n	800bf6a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bf70:	bf00      	nop
 800bf72:	bf00      	nop
 800bf74:	3714      	adds	r7, #20
 800bf76:	46bd      	mov	sp, r7
 800bf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7c:	4770      	bx	lr
 800bf7e:	bf00      	nop
 800bf80:	200000ec 	.word	0x200000ec
	...

0800bf90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bf90:	4b07      	ldr	r3, [pc, #28]	@ (800bfb0 <pxCurrentTCBConst2>)
 800bf92:	6819      	ldr	r1, [r3, #0]
 800bf94:	6808      	ldr	r0, [r1, #0]
 800bf96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf9a:	f380 8809 	msr	PSP, r0
 800bf9e:	f3bf 8f6f 	isb	sy
 800bfa2:	f04f 0000 	mov.w	r0, #0
 800bfa6:	f380 8811 	msr	BASEPRI, r0
 800bfaa:	4770      	bx	lr
 800bfac:	f3af 8000 	nop.w

0800bfb0 <pxCurrentTCBConst2>:
 800bfb0:	20000e38 	.word	0x20000e38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bfb4:	bf00      	nop
 800bfb6:	bf00      	nop

0800bfb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bfb8:	4808      	ldr	r0, [pc, #32]	@ (800bfdc <prvPortStartFirstTask+0x24>)
 800bfba:	6800      	ldr	r0, [r0, #0]
 800bfbc:	6800      	ldr	r0, [r0, #0]
 800bfbe:	f380 8808 	msr	MSP, r0
 800bfc2:	f04f 0000 	mov.w	r0, #0
 800bfc6:	f380 8814 	msr	CONTROL, r0
 800bfca:	b662      	cpsie	i
 800bfcc:	b661      	cpsie	f
 800bfce:	f3bf 8f4f 	dsb	sy
 800bfd2:	f3bf 8f6f 	isb	sy
 800bfd6:	df00      	svc	0
 800bfd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bfda:	bf00      	nop
 800bfdc:	e000ed08 	.word	0xe000ed08

0800bfe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b086      	sub	sp, #24
 800bfe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bfe6:	4b47      	ldr	r3, [pc, #284]	@ (800c104 <xPortStartScheduler+0x124>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	4a47      	ldr	r2, [pc, #284]	@ (800c108 <xPortStartScheduler+0x128>)
 800bfec:	4293      	cmp	r3, r2
 800bfee:	d10b      	bne.n	800c008 <xPortStartScheduler+0x28>
	__asm volatile
 800bff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bff4:	f383 8811 	msr	BASEPRI, r3
 800bff8:	f3bf 8f6f 	isb	sy
 800bffc:	f3bf 8f4f 	dsb	sy
 800c000:	613b      	str	r3, [r7, #16]
}
 800c002:	bf00      	nop
 800c004:	bf00      	nop
 800c006:	e7fd      	b.n	800c004 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c008:	4b3e      	ldr	r3, [pc, #248]	@ (800c104 <xPortStartScheduler+0x124>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	4a3f      	ldr	r2, [pc, #252]	@ (800c10c <xPortStartScheduler+0x12c>)
 800c00e:	4293      	cmp	r3, r2
 800c010:	d10b      	bne.n	800c02a <xPortStartScheduler+0x4a>
	__asm volatile
 800c012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c016:	f383 8811 	msr	BASEPRI, r3
 800c01a:	f3bf 8f6f 	isb	sy
 800c01e:	f3bf 8f4f 	dsb	sy
 800c022:	60fb      	str	r3, [r7, #12]
}
 800c024:	bf00      	nop
 800c026:	bf00      	nop
 800c028:	e7fd      	b.n	800c026 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c02a:	4b39      	ldr	r3, [pc, #228]	@ (800c110 <xPortStartScheduler+0x130>)
 800c02c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	781b      	ldrb	r3, [r3, #0]
 800c032:	b2db      	uxtb	r3, r3
 800c034:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	22ff      	movs	r2, #255	@ 0xff
 800c03a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c03c:	697b      	ldr	r3, [r7, #20]
 800c03e:	781b      	ldrb	r3, [r3, #0]
 800c040:	b2db      	uxtb	r3, r3
 800c042:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c044:	78fb      	ldrb	r3, [r7, #3]
 800c046:	b2db      	uxtb	r3, r3
 800c048:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c04c:	b2da      	uxtb	r2, r3
 800c04e:	4b31      	ldr	r3, [pc, #196]	@ (800c114 <xPortStartScheduler+0x134>)
 800c050:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c052:	4b31      	ldr	r3, [pc, #196]	@ (800c118 <xPortStartScheduler+0x138>)
 800c054:	2207      	movs	r2, #7
 800c056:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c058:	e009      	b.n	800c06e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c05a:	4b2f      	ldr	r3, [pc, #188]	@ (800c118 <xPortStartScheduler+0x138>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	3b01      	subs	r3, #1
 800c060:	4a2d      	ldr	r2, [pc, #180]	@ (800c118 <xPortStartScheduler+0x138>)
 800c062:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c064:	78fb      	ldrb	r3, [r7, #3]
 800c066:	b2db      	uxtb	r3, r3
 800c068:	005b      	lsls	r3, r3, #1
 800c06a:	b2db      	uxtb	r3, r3
 800c06c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c06e:	78fb      	ldrb	r3, [r7, #3]
 800c070:	b2db      	uxtb	r3, r3
 800c072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c076:	2b80      	cmp	r3, #128	@ 0x80
 800c078:	d0ef      	beq.n	800c05a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c07a:	4b27      	ldr	r3, [pc, #156]	@ (800c118 <xPortStartScheduler+0x138>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f1c3 0307 	rsb	r3, r3, #7
 800c082:	2b04      	cmp	r3, #4
 800c084:	d00b      	beq.n	800c09e <xPortStartScheduler+0xbe>
	__asm volatile
 800c086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c08a:	f383 8811 	msr	BASEPRI, r3
 800c08e:	f3bf 8f6f 	isb	sy
 800c092:	f3bf 8f4f 	dsb	sy
 800c096:	60bb      	str	r3, [r7, #8]
}
 800c098:	bf00      	nop
 800c09a:	bf00      	nop
 800c09c:	e7fd      	b.n	800c09a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c09e:	4b1e      	ldr	r3, [pc, #120]	@ (800c118 <xPortStartScheduler+0x138>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	021b      	lsls	r3, r3, #8
 800c0a4:	4a1c      	ldr	r2, [pc, #112]	@ (800c118 <xPortStartScheduler+0x138>)
 800c0a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c0a8:	4b1b      	ldr	r3, [pc, #108]	@ (800c118 <xPortStartScheduler+0x138>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c0b0:	4a19      	ldr	r2, [pc, #100]	@ (800c118 <xPortStartScheduler+0x138>)
 800c0b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	b2da      	uxtb	r2, r3
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c0bc:	4b17      	ldr	r3, [pc, #92]	@ (800c11c <xPortStartScheduler+0x13c>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	4a16      	ldr	r2, [pc, #88]	@ (800c11c <xPortStartScheduler+0x13c>)
 800c0c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c0c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c0c8:	4b14      	ldr	r3, [pc, #80]	@ (800c11c <xPortStartScheduler+0x13c>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	4a13      	ldr	r2, [pc, #76]	@ (800c11c <xPortStartScheduler+0x13c>)
 800c0ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c0d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c0d4:	f000 f9a6 	bl	800c424 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c0d8:	4b11      	ldr	r3, [pc, #68]	@ (800c120 <xPortStartScheduler+0x140>)
 800c0da:	2200      	movs	r2, #0
 800c0dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c0de:	f000 f9dd 	bl	800c49c <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c0e2:	4b10      	ldr	r3, [pc, #64]	@ (800c124 <xPortStartScheduler+0x144>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	4a0f      	ldr	r2, [pc, #60]	@ (800c124 <xPortStartScheduler+0x144>)
 800c0e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c0ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c0ee:	f7ff ff63 	bl	800bfb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c0f2:	f7fe ffb9 	bl	800b068 <vTaskSwitchContext>
	prvTaskExitError();
 800c0f6:	f7ff ff17 	bl	800bf28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c0fa:	2300      	movs	r3, #0
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3718      	adds	r7, #24
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}
 800c104:	e000ed00 	.word	0xe000ed00
 800c108:	410fc271 	.word	0x410fc271
 800c10c:	410fc270 	.word	0x410fc270
 800c110:	e000e400 	.word	0xe000e400
 800c114:	20001478 	.word	0x20001478
 800c118:	2000147c 	.word	0x2000147c
 800c11c:	e000ed20 	.word	0xe000ed20
 800c120:	200000ec 	.word	0x200000ec
 800c124:	e000ef34 	.word	0xe000ef34

0800c128 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c128:	b480      	push	{r7}
 800c12a:	b083      	sub	sp, #12
 800c12c:	af00      	add	r7, sp, #0
	__asm volatile
 800c12e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c132:	f383 8811 	msr	BASEPRI, r3
 800c136:	f3bf 8f6f 	isb	sy
 800c13a:	f3bf 8f4f 	dsb	sy
 800c13e:	607b      	str	r3, [r7, #4]
}
 800c140:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c142:	4b10      	ldr	r3, [pc, #64]	@ (800c184 <vPortEnterCritical+0x5c>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	3301      	adds	r3, #1
 800c148:	4a0e      	ldr	r2, [pc, #56]	@ (800c184 <vPortEnterCritical+0x5c>)
 800c14a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c14c:	4b0d      	ldr	r3, [pc, #52]	@ (800c184 <vPortEnterCritical+0x5c>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	2b01      	cmp	r3, #1
 800c152:	d110      	bne.n	800c176 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c154:	4b0c      	ldr	r3, [pc, #48]	@ (800c188 <vPortEnterCritical+0x60>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	b2db      	uxtb	r3, r3
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d00b      	beq.n	800c176 <vPortEnterCritical+0x4e>
	__asm volatile
 800c15e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c162:	f383 8811 	msr	BASEPRI, r3
 800c166:	f3bf 8f6f 	isb	sy
 800c16a:	f3bf 8f4f 	dsb	sy
 800c16e:	603b      	str	r3, [r7, #0]
}
 800c170:	bf00      	nop
 800c172:	bf00      	nop
 800c174:	e7fd      	b.n	800c172 <vPortEnterCritical+0x4a>
	}
}
 800c176:	bf00      	nop
 800c178:	370c      	adds	r7, #12
 800c17a:	46bd      	mov	sp, r7
 800c17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c180:	4770      	bx	lr
 800c182:	bf00      	nop
 800c184:	200000ec 	.word	0x200000ec
 800c188:	e000ed04 	.word	0xe000ed04

0800c18c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c18c:	b480      	push	{r7}
 800c18e:	b083      	sub	sp, #12
 800c190:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c192:	4b12      	ldr	r3, [pc, #72]	@ (800c1dc <vPortExitCritical+0x50>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d10b      	bne.n	800c1b2 <vPortExitCritical+0x26>
	__asm volatile
 800c19a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c19e:	f383 8811 	msr	BASEPRI, r3
 800c1a2:	f3bf 8f6f 	isb	sy
 800c1a6:	f3bf 8f4f 	dsb	sy
 800c1aa:	607b      	str	r3, [r7, #4]
}
 800c1ac:	bf00      	nop
 800c1ae:	bf00      	nop
 800c1b0:	e7fd      	b.n	800c1ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c1b2:	4b0a      	ldr	r3, [pc, #40]	@ (800c1dc <vPortExitCritical+0x50>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	3b01      	subs	r3, #1
 800c1b8:	4a08      	ldr	r2, [pc, #32]	@ (800c1dc <vPortExitCritical+0x50>)
 800c1ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c1bc:	4b07      	ldr	r3, [pc, #28]	@ (800c1dc <vPortExitCritical+0x50>)
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d105      	bne.n	800c1d0 <vPortExitCritical+0x44>
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	f383 8811 	msr	BASEPRI, r3
}
 800c1ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c1d0:	bf00      	nop
 800c1d2:	370c      	adds	r7, #12
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1da:	4770      	bx	lr
 800c1dc:	200000ec 	.word	0x200000ec

0800c1e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c1e0:	f3ef 8009 	mrs	r0, PSP
 800c1e4:	f3bf 8f6f 	isb	sy
 800c1e8:	4b15      	ldr	r3, [pc, #84]	@ (800c240 <pxCurrentTCBConst>)
 800c1ea:	681a      	ldr	r2, [r3, #0]
 800c1ec:	f01e 0f10 	tst.w	lr, #16
 800c1f0:	bf08      	it	eq
 800c1f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c1f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1fa:	6010      	str	r0, [r2, #0]
 800c1fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c200:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c204:	f380 8811 	msr	BASEPRI, r0
 800c208:	f3bf 8f4f 	dsb	sy
 800c20c:	f3bf 8f6f 	isb	sy
 800c210:	f7fe ff2a 	bl	800b068 <vTaskSwitchContext>
 800c214:	f04f 0000 	mov.w	r0, #0
 800c218:	f380 8811 	msr	BASEPRI, r0
 800c21c:	bc09      	pop	{r0, r3}
 800c21e:	6819      	ldr	r1, [r3, #0]
 800c220:	6808      	ldr	r0, [r1, #0]
 800c222:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c226:	f01e 0f10 	tst.w	lr, #16
 800c22a:	bf08      	it	eq
 800c22c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c230:	f380 8809 	msr	PSP, r0
 800c234:	f3bf 8f6f 	isb	sy
 800c238:	4770      	bx	lr
 800c23a:	bf00      	nop
 800c23c:	f3af 8000 	nop.w

0800c240 <pxCurrentTCBConst>:
 800c240:	20000e38 	.word	0x20000e38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c244:	bf00      	nop
 800c246:	bf00      	nop

0800c248 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b082      	sub	sp, #8
 800c24c:	af00      	add	r7, sp, #0
	__asm volatile
 800c24e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c252:	f383 8811 	msr	BASEPRI, r3
 800c256:	f3bf 8f6f 	isb	sy
 800c25a:	f3bf 8f4f 	dsb	sy
 800c25e:	607b      	str	r3, [r7, #4]
}
 800c260:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c262:	f7fe fe47 	bl	800aef4 <xTaskIncrementTick>
 800c266:	4603      	mov	r3, r0
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d003      	beq.n	800c274 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c26c:	4b06      	ldr	r3, [pc, #24]	@ (800c288 <xPortSysTickHandler+0x40>)
 800c26e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c272:	601a      	str	r2, [r3, #0]
 800c274:	2300      	movs	r3, #0
 800c276:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	f383 8811 	msr	BASEPRI, r3
}
 800c27e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c280:	bf00      	nop
 800c282:	3708      	adds	r7, #8
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}
 800c288:	e000ed04 	.word	0xe000ed04

0800c28c <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b088      	sub	sp, #32
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 800c294:	4b5d      	ldr	r3, [pc, #372]	@ (800c40c <vPortSuppressTicksAndSleep+0x180>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	687a      	ldr	r2, [r7, #4]
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d902      	bls.n	800c2a4 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800c29e:	4b5b      	ldr	r3, [pc, #364]	@ (800c40c <vPortSuppressTicksAndSleep+0x180>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800c2a4:	4b5a      	ldr	r3, [pc, #360]	@ (800c410 <vPortSuppressTicksAndSleep+0x184>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	4a59      	ldr	r2, [pc, #356]	@ (800c410 <vPortSuppressTicksAndSleep+0x184>)
 800c2aa:	f023 0301 	bic.w	r3, r3, #1
 800c2ae:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800c2b0:	4b58      	ldr	r3, [pc, #352]	@ (800c414 <vPortSuppressTicksAndSleep+0x188>)
 800c2b2:	681a      	ldr	r2, [r3, #0]
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	3b01      	subs	r3, #1
 800c2b8:	4957      	ldr	r1, [pc, #348]	@ (800c418 <vPortSuppressTicksAndSleep+0x18c>)
 800c2ba:	6809      	ldr	r1, [r1, #0]
 800c2bc:	fb01 f303 	mul.w	r3, r1, r3
 800c2c0:	4413      	add	r3, r2
 800c2c2:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 800c2c4:	4b55      	ldr	r3, [pc, #340]	@ (800c41c <vPortSuppressTicksAndSleep+0x190>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	69fa      	ldr	r2, [r7, #28]
 800c2ca:	429a      	cmp	r2, r3
 800c2cc:	d904      	bls.n	800c2d8 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800c2ce:	4b53      	ldr	r3, [pc, #332]	@ (800c41c <vPortSuppressTicksAndSleep+0x190>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	69fa      	ldr	r2, [r7, #28]
 800c2d4:	1ad3      	subs	r3, r2, r3
 800c2d6:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 800c2d8:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800c2da:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800c2de:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800c2e2:	f7ff f8bf 	bl	800b464 <eTaskConfirmSleepModeStatus>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d110      	bne.n	800c30e <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800c2ec:	4b49      	ldr	r3, [pc, #292]	@ (800c414 <vPortSuppressTicksAndSleep+0x188>)
 800c2ee:	4a4c      	ldr	r2, [pc, #304]	@ (800c420 <vPortSuppressTicksAndSleep+0x194>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800c2f4:	4b46      	ldr	r3, [pc, #280]	@ (800c410 <vPortSuppressTicksAndSleep+0x184>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	4a45      	ldr	r2, [pc, #276]	@ (800c410 <vPortSuppressTicksAndSleep+0x184>)
 800c2fa:	f043 0301 	orr.w	r3, r3, #1
 800c2fe:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800c300:	4b45      	ldr	r3, [pc, #276]	@ (800c418 <vPortSuppressTicksAndSleep+0x18c>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	4a46      	ldr	r2, [pc, #280]	@ (800c420 <vPortSuppressTicksAndSleep+0x194>)
 800c306:	3b01      	subs	r3, #1
 800c308:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800c30a:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800c30c:	e079      	b.n	800c402 <vPortSuppressTicksAndSleep+0x176>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800c30e:	4a44      	ldr	r2, [pc, #272]	@ (800c420 <vPortSuppressTicksAndSleep+0x194>)
 800c310:	69fb      	ldr	r3, [r7, #28]
 800c312:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c314:	4b3f      	ldr	r3, [pc, #252]	@ (800c414 <vPortSuppressTicksAndSleep+0x188>)
 800c316:	2200      	movs	r2, #0
 800c318:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800c31a:	4b3d      	ldr	r3, [pc, #244]	@ (800c410 <vPortSuppressTicksAndSleep+0x184>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	4a3c      	ldr	r2, [pc, #240]	@ (800c410 <vPortSuppressTicksAndSleep+0x184>)
 800c320:	f043 0301 	orr.w	r3, r3, #1
 800c324:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	613b      	str	r3, [r7, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 800c32a:	2300      	movs	r3, #0
 800c32c:	613b      	str	r3, [r7, #16]
 800c32e:	6938      	ldr	r0, [r7, #16]
 800c330:	f7f7 f8ea 	bl	8003508 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 800c334:	693b      	ldr	r3, [r7, #16]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d004      	beq.n	800c344 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 800c33a:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 800c33e:	bf30      	wfi
				__asm volatile( "isb" );
 800c340:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f7f7 f8e9 	bl	800351c <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800c34a:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800c34c:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800c350:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 800c354:	b672      	cpsid	i
			__asm volatile( "dsb" );
 800c356:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800c35a:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800c35e:	4b2c      	ldr	r3, [pc, #176]	@ (800c410 <vPortSuppressTicksAndSleep+0x184>)
 800c360:	2206      	movs	r2, #6
 800c362:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800c364:	4b2a      	ldr	r3, [pc, #168]	@ (800c410 <vPortSuppressTicksAndSleep+0x184>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d01d      	beq.n	800c3ac <vPortSuppressTicksAndSleep+0x120>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800c370:	4b29      	ldr	r3, [pc, #164]	@ (800c418 <vPortSuppressTicksAndSleep+0x18c>)
 800c372:	681a      	ldr	r2, [r3, #0]
 800c374:	4b27      	ldr	r3, [pc, #156]	@ (800c414 <vPortSuppressTicksAndSleep+0x188>)
 800c376:	6819      	ldr	r1, [r3, #0]
 800c378:	69fb      	ldr	r3, [r7, #28]
 800c37a:	1acb      	subs	r3, r1, r3
 800c37c:	4413      	add	r3, r2
 800c37e:	3b01      	subs	r3, #1
 800c380:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800c382:	4b26      	ldr	r3, [pc, #152]	@ (800c41c <vPortSuppressTicksAndSleep+0x190>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	697a      	ldr	r2, [r7, #20]
 800c388:	429a      	cmp	r2, r3
 800c38a:	d304      	bcc.n	800c396 <vPortSuppressTicksAndSleep+0x10a>
 800c38c:	4b22      	ldr	r3, [pc, #136]	@ (800c418 <vPortSuppressTicksAndSleep+0x18c>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	697a      	ldr	r2, [r7, #20]
 800c392:	429a      	cmp	r2, r3
 800c394:	d903      	bls.n	800c39e <vPortSuppressTicksAndSleep+0x112>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 800c396:	4b20      	ldr	r3, [pc, #128]	@ (800c418 <vPortSuppressTicksAndSleep+0x18c>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	3b01      	subs	r3, #1
 800c39c:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800c39e:	4a20      	ldr	r2, [pc, #128]	@ (800c420 <vPortSuppressTicksAndSleep+0x194>)
 800c3a0:	697b      	ldr	r3, [r7, #20]
 800c3a2:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	3b01      	subs	r3, #1
 800c3a8:	61bb      	str	r3, [r7, #24]
 800c3aa:	e018      	b.n	800c3de <vPortSuppressTicksAndSleep+0x152>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800c3ac:	4b1a      	ldr	r3, [pc, #104]	@ (800c418 <vPortSuppressTicksAndSleep+0x18c>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	687a      	ldr	r2, [r7, #4]
 800c3b2:	fb03 f202 	mul.w	r2, r3, r2
 800c3b6:	4b17      	ldr	r3, [pc, #92]	@ (800c414 <vPortSuppressTicksAndSleep+0x188>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	1ad3      	subs	r3, r2, r3
 800c3bc:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800c3be:	4b16      	ldr	r3, [pc, #88]	@ (800c418 <vPortSuppressTicksAndSleep+0x18c>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	68fa      	ldr	r2, [r7, #12]
 800c3c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3c8:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800c3ca:	69bb      	ldr	r3, [r7, #24]
 800c3cc:	3301      	adds	r3, #1
 800c3ce:	4a12      	ldr	r2, [pc, #72]	@ (800c418 <vPortSuppressTicksAndSleep+0x18c>)
 800c3d0:	6812      	ldr	r2, [r2, #0]
 800c3d2:	fb03 f202 	mul.w	r2, r3, r2
 800c3d6:	4912      	ldr	r1, [pc, #72]	@ (800c420 <vPortSuppressTicksAndSleep+0x194>)
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	1ad3      	subs	r3, r2, r3
 800c3dc:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c3de:	4b0d      	ldr	r3, [pc, #52]	@ (800c414 <vPortSuppressTicksAndSleep+0x188>)
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800c3e4:	4b0a      	ldr	r3, [pc, #40]	@ (800c410 <vPortSuppressTicksAndSleep+0x184>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	4a09      	ldr	r2, [pc, #36]	@ (800c410 <vPortSuppressTicksAndSleep+0x184>)
 800c3ea:	f043 0301 	orr.w	r3, r3, #1
 800c3ee:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 800c3f0:	69b8      	ldr	r0, [r7, #24]
 800c3f2:	f7fe fd57 	bl	800aea4 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800c3f6:	4b08      	ldr	r3, [pc, #32]	@ (800c418 <vPortSuppressTicksAndSleep+0x18c>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	4a09      	ldr	r2, [pc, #36]	@ (800c420 <vPortSuppressTicksAndSleep+0x194>)
 800c3fc:	3b01      	subs	r3, #1
 800c3fe:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 800c400:	b662      	cpsie	i
	}
 800c402:	bf00      	nop
 800c404:	3720      	adds	r7, #32
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}
 800c40a:	bf00      	nop
 800c40c:	20001470 	.word	0x20001470
 800c410:	e000e010 	.word	0xe000e010
 800c414:	e000e018 	.word	0xe000e018
 800c418:	2000146c 	.word	0x2000146c
 800c41c:	20001474 	.word	0x20001474
 800c420:	e000e014 	.word	0xe000e014

0800c424 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c424:	b480      	push	{r7}
 800c426:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800c428:	4b14      	ldr	r3, [pc, #80]	@ (800c47c <vPortSetupTimerInterrupt+0x58>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	4a14      	ldr	r2, [pc, #80]	@ (800c480 <vPortSetupTimerInterrupt+0x5c>)
 800c42e:	fba2 2303 	umull	r2, r3, r2, r3
 800c432:	099b      	lsrs	r3, r3, #6
 800c434:	4a13      	ldr	r2, [pc, #76]	@ (800c484 <vPortSetupTimerInterrupt+0x60>)
 800c436:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800c438:	4b12      	ldr	r3, [pc, #72]	@ (800c484 <vPortSetupTimerInterrupt+0x60>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800c440:	fbb2 f3f3 	udiv	r3, r2, r3
 800c444:	4a10      	ldr	r2, [pc, #64]	@ (800c488 <vPortSetupTimerInterrupt+0x64>)
 800c446:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800c448:	4b10      	ldr	r3, [pc, #64]	@ (800c48c <vPortSetupTimerInterrupt+0x68>)
 800c44a:	222d      	movs	r2, #45	@ 0x2d
 800c44c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c44e:	4b10      	ldr	r3, [pc, #64]	@ (800c490 <vPortSetupTimerInterrupt+0x6c>)
 800c450:	2200      	movs	r2, #0
 800c452:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c454:	4b0f      	ldr	r3, [pc, #60]	@ (800c494 <vPortSetupTimerInterrupt+0x70>)
 800c456:	2200      	movs	r2, #0
 800c458:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c45a:	4b08      	ldr	r3, [pc, #32]	@ (800c47c <vPortSetupTimerInterrupt+0x58>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	4a08      	ldr	r2, [pc, #32]	@ (800c480 <vPortSetupTimerInterrupt+0x5c>)
 800c460:	fba2 2303 	umull	r2, r3, r2, r3
 800c464:	099b      	lsrs	r3, r3, #6
 800c466:	4a0c      	ldr	r2, [pc, #48]	@ (800c498 <vPortSetupTimerInterrupt+0x74>)
 800c468:	3b01      	subs	r3, #1
 800c46a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c46c:	4b08      	ldr	r3, [pc, #32]	@ (800c490 <vPortSetupTimerInterrupt+0x6c>)
 800c46e:	2207      	movs	r2, #7
 800c470:	601a      	str	r2, [r3, #0]
}
 800c472:	bf00      	nop
 800c474:	46bd      	mov	sp, r7
 800c476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47a:	4770      	bx	lr
 800c47c:	200000e0 	.word	0x200000e0
 800c480:	10624dd3 	.word	0x10624dd3
 800c484:	2000146c 	.word	0x2000146c
 800c488:	20001470 	.word	0x20001470
 800c48c:	20001474 	.word	0x20001474
 800c490:	e000e010 	.word	0xe000e010
 800c494:	e000e018 	.word	0xe000e018
 800c498:	e000e014 	.word	0xe000e014

0800c49c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c49c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c4ac <vPortEnableVFP+0x10>
 800c4a0:	6801      	ldr	r1, [r0, #0]
 800c4a2:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c4a6:	6001      	str	r1, [r0, #0]
 800c4a8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c4aa:	bf00      	nop
 800c4ac:	e000ed88 	.word	0xe000ed88

0800c4b0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c4b0:	b480      	push	{r7}
 800c4b2:	b085      	sub	sp, #20
 800c4b4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c4b6:	f3ef 8305 	mrs	r3, IPSR
 800c4ba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	2b0f      	cmp	r3, #15
 800c4c0:	d915      	bls.n	800c4ee <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c4c2:	4a18      	ldr	r2, [pc, #96]	@ (800c524 <vPortValidateInterruptPriority+0x74>)
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	4413      	add	r3, r2
 800c4c8:	781b      	ldrb	r3, [r3, #0]
 800c4ca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c4cc:	4b16      	ldr	r3, [pc, #88]	@ (800c528 <vPortValidateInterruptPriority+0x78>)
 800c4ce:	781b      	ldrb	r3, [r3, #0]
 800c4d0:	7afa      	ldrb	r2, [r7, #11]
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	d20b      	bcs.n	800c4ee <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c4d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4da:	f383 8811 	msr	BASEPRI, r3
 800c4de:	f3bf 8f6f 	isb	sy
 800c4e2:	f3bf 8f4f 	dsb	sy
 800c4e6:	607b      	str	r3, [r7, #4]
}
 800c4e8:	bf00      	nop
 800c4ea:	bf00      	nop
 800c4ec:	e7fd      	b.n	800c4ea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c4ee:	4b0f      	ldr	r3, [pc, #60]	@ (800c52c <vPortValidateInterruptPriority+0x7c>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c4f6:	4b0e      	ldr	r3, [pc, #56]	@ (800c530 <vPortValidateInterruptPriority+0x80>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	d90b      	bls.n	800c516 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c4fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c502:	f383 8811 	msr	BASEPRI, r3
 800c506:	f3bf 8f6f 	isb	sy
 800c50a:	f3bf 8f4f 	dsb	sy
 800c50e:	603b      	str	r3, [r7, #0]
}
 800c510:	bf00      	nop
 800c512:	bf00      	nop
 800c514:	e7fd      	b.n	800c512 <vPortValidateInterruptPriority+0x62>
	}
 800c516:	bf00      	nop
 800c518:	3714      	adds	r7, #20
 800c51a:	46bd      	mov	sp, r7
 800c51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c520:	4770      	bx	lr
 800c522:	bf00      	nop
 800c524:	e000e3f0 	.word	0xe000e3f0
 800c528:	20001478 	.word	0x20001478
 800c52c:	e000ed0c 	.word	0xe000ed0c
 800c530:	2000147c 	.word	0x2000147c

0800c534 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b08a      	sub	sp, #40	@ 0x28
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c53c:	2300      	movs	r3, #0
 800c53e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c540:	f7fe fbbc 	bl	800acbc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c544:	4b5c      	ldr	r3, [pc, #368]	@ (800c6b8 <pvPortMalloc+0x184>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d101      	bne.n	800c550 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c54c:	f000 f924 	bl	800c798 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c550:	4b5a      	ldr	r3, [pc, #360]	@ (800c6bc <pvPortMalloc+0x188>)
 800c552:	681a      	ldr	r2, [r3, #0]
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	4013      	ands	r3, r2
 800c558:	2b00      	cmp	r3, #0
 800c55a:	f040 8095 	bne.w	800c688 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d01e      	beq.n	800c5a2 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c564:	2208      	movs	r2, #8
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	4413      	add	r3, r2
 800c56a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f003 0307 	and.w	r3, r3, #7
 800c572:	2b00      	cmp	r3, #0
 800c574:	d015      	beq.n	800c5a2 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f023 0307 	bic.w	r3, r3, #7
 800c57c:	3308      	adds	r3, #8
 800c57e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f003 0307 	and.w	r3, r3, #7
 800c586:	2b00      	cmp	r3, #0
 800c588:	d00b      	beq.n	800c5a2 <pvPortMalloc+0x6e>
	__asm volatile
 800c58a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c58e:	f383 8811 	msr	BASEPRI, r3
 800c592:	f3bf 8f6f 	isb	sy
 800c596:	f3bf 8f4f 	dsb	sy
 800c59a:	617b      	str	r3, [r7, #20]
}
 800c59c:	bf00      	nop
 800c59e:	bf00      	nop
 800c5a0:	e7fd      	b.n	800c59e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d06f      	beq.n	800c688 <pvPortMalloc+0x154>
 800c5a8:	4b45      	ldr	r3, [pc, #276]	@ (800c6c0 <pvPortMalloc+0x18c>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	687a      	ldr	r2, [r7, #4]
 800c5ae:	429a      	cmp	r2, r3
 800c5b0:	d86a      	bhi.n	800c688 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c5b2:	4b44      	ldr	r3, [pc, #272]	@ (800c6c4 <pvPortMalloc+0x190>)
 800c5b4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c5b6:	4b43      	ldr	r3, [pc, #268]	@ (800c6c4 <pvPortMalloc+0x190>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c5bc:	e004      	b.n	800c5c8 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c5be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5c0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c5c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c5c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ca:	685b      	ldr	r3, [r3, #4]
 800c5cc:	687a      	ldr	r2, [r7, #4]
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	d903      	bls.n	800c5da <pvPortMalloc+0xa6>
 800c5d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d1f1      	bne.n	800c5be <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c5da:	4b37      	ldr	r3, [pc, #220]	@ (800c6b8 <pvPortMalloc+0x184>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5e0:	429a      	cmp	r2, r3
 800c5e2:	d051      	beq.n	800c688 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c5e4:	6a3b      	ldr	r3, [r7, #32]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	2208      	movs	r2, #8
 800c5ea:	4413      	add	r3, r2
 800c5ec:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c5ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5f0:	681a      	ldr	r2, [r3, #0]
 800c5f2:	6a3b      	ldr	r3, [r7, #32]
 800c5f4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c5f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5f8:	685a      	ldr	r2, [r3, #4]
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	1ad2      	subs	r2, r2, r3
 800c5fe:	2308      	movs	r3, #8
 800c600:	005b      	lsls	r3, r3, #1
 800c602:	429a      	cmp	r2, r3
 800c604:	d920      	bls.n	800c648 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c606:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	4413      	add	r3, r2
 800c60c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c60e:	69bb      	ldr	r3, [r7, #24]
 800c610:	f003 0307 	and.w	r3, r3, #7
 800c614:	2b00      	cmp	r3, #0
 800c616:	d00b      	beq.n	800c630 <pvPortMalloc+0xfc>
	__asm volatile
 800c618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c61c:	f383 8811 	msr	BASEPRI, r3
 800c620:	f3bf 8f6f 	isb	sy
 800c624:	f3bf 8f4f 	dsb	sy
 800c628:	613b      	str	r3, [r7, #16]
}
 800c62a:	bf00      	nop
 800c62c:	bf00      	nop
 800c62e:	e7fd      	b.n	800c62c <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c632:	685a      	ldr	r2, [r3, #4]
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	1ad2      	subs	r2, r2, r3
 800c638:	69bb      	ldr	r3, [r7, #24]
 800c63a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c63c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c63e:	687a      	ldr	r2, [r7, #4]
 800c640:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c642:	69b8      	ldr	r0, [r7, #24]
 800c644:	f000 f90a 	bl	800c85c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c648:	4b1d      	ldr	r3, [pc, #116]	@ (800c6c0 <pvPortMalloc+0x18c>)
 800c64a:	681a      	ldr	r2, [r3, #0]
 800c64c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c64e:	685b      	ldr	r3, [r3, #4]
 800c650:	1ad3      	subs	r3, r2, r3
 800c652:	4a1b      	ldr	r2, [pc, #108]	@ (800c6c0 <pvPortMalloc+0x18c>)
 800c654:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c656:	4b1a      	ldr	r3, [pc, #104]	@ (800c6c0 <pvPortMalloc+0x18c>)
 800c658:	681a      	ldr	r2, [r3, #0]
 800c65a:	4b1b      	ldr	r3, [pc, #108]	@ (800c6c8 <pvPortMalloc+0x194>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	429a      	cmp	r2, r3
 800c660:	d203      	bcs.n	800c66a <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c662:	4b17      	ldr	r3, [pc, #92]	@ (800c6c0 <pvPortMalloc+0x18c>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	4a18      	ldr	r2, [pc, #96]	@ (800c6c8 <pvPortMalloc+0x194>)
 800c668:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c66a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c66c:	685a      	ldr	r2, [r3, #4]
 800c66e:	4b13      	ldr	r3, [pc, #76]	@ (800c6bc <pvPortMalloc+0x188>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	431a      	orrs	r2, r3
 800c674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c676:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c67a:	2200      	movs	r2, #0
 800c67c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c67e:	4b13      	ldr	r3, [pc, #76]	@ (800c6cc <pvPortMalloc+0x198>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	3301      	adds	r3, #1
 800c684:	4a11      	ldr	r2, [pc, #68]	@ (800c6cc <pvPortMalloc+0x198>)
 800c686:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c688:	f7fe fb5e 	bl	800ad48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c68c:	69fb      	ldr	r3, [r7, #28]
 800c68e:	f003 0307 	and.w	r3, r3, #7
 800c692:	2b00      	cmp	r3, #0
 800c694:	d00b      	beq.n	800c6ae <pvPortMalloc+0x17a>
	__asm volatile
 800c696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c69a:	f383 8811 	msr	BASEPRI, r3
 800c69e:	f3bf 8f6f 	isb	sy
 800c6a2:	f3bf 8f4f 	dsb	sy
 800c6a6:	60fb      	str	r3, [r7, #12]
}
 800c6a8:	bf00      	nop
 800c6aa:	bf00      	nop
 800c6ac:	e7fd      	b.n	800c6aa <pvPortMalloc+0x176>
	return pvReturn;
 800c6ae:	69fb      	ldr	r3, [r7, #28]
}
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	3728      	adds	r7, #40	@ 0x28
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}
 800c6b8:	20005088 	.word	0x20005088
 800c6bc:	2000509c 	.word	0x2000509c
 800c6c0:	2000508c 	.word	0x2000508c
 800c6c4:	20005080 	.word	0x20005080
 800c6c8:	20005090 	.word	0x20005090
 800c6cc:	20005094 	.word	0x20005094

0800c6d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b086      	sub	sp, #24
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d04f      	beq.n	800c782 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c6e2:	2308      	movs	r3, #8
 800c6e4:	425b      	negs	r3, r3
 800c6e6:	697a      	ldr	r2, [r7, #20]
 800c6e8:	4413      	add	r3, r2
 800c6ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c6ec:	697b      	ldr	r3, [r7, #20]
 800c6ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	685a      	ldr	r2, [r3, #4]
 800c6f4:	4b25      	ldr	r3, [pc, #148]	@ (800c78c <vPortFree+0xbc>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	4013      	ands	r3, r2
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d10b      	bne.n	800c716 <vPortFree+0x46>
	__asm volatile
 800c6fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c702:	f383 8811 	msr	BASEPRI, r3
 800c706:	f3bf 8f6f 	isb	sy
 800c70a:	f3bf 8f4f 	dsb	sy
 800c70e:	60fb      	str	r3, [r7, #12]
}
 800c710:	bf00      	nop
 800c712:	bf00      	nop
 800c714:	e7fd      	b.n	800c712 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c716:	693b      	ldr	r3, [r7, #16]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d00b      	beq.n	800c736 <vPortFree+0x66>
	__asm volatile
 800c71e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c722:	f383 8811 	msr	BASEPRI, r3
 800c726:	f3bf 8f6f 	isb	sy
 800c72a:	f3bf 8f4f 	dsb	sy
 800c72e:	60bb      	str	r3, [r7, #8]
}
 800c730:	bf00      	nop
 800c732:	bf00      	nop
 800c734:	e7fd      	b.n	800c732 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c736:	693b      	ldr	r3, [r7, #16]
 800c738:	685a      	ldr	r2, [r3, #4]
 800c73a:	4b14      	ldr	r3, [pc, #80]	@ (800c78c <vPortFree+0xbc>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	4013      	ands	r3, r2
 800c740:	2b00      	cmp	r3, #0
 800c742:	d01e      	beq.n	800c782 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d11a      	bne.n	800c782 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c74c:	693b      	ldr	r3, [r7, #16]
 800c74e:	685a      	ldr	r2, [r3, #4]
 800c750:	4b0e      	ldr	r3, [pc, #56]	@ (800c78c <vPortFree+0xbc>)
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	43db      	mvns	r3, r3
 800c756:	401a      	ands	r2, r3
 800c758:	693b      	ldr	r3, [r7, #16]
 800c75a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c75c:	f7fe faae 	bl	800acbc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c760:	693b      	ldr	r3, [r7, #16]
 800c762:	685a      	ldr	r2, [r3, #4]
 800c764:	4b0a      	ldr	r3, [pc, #40]	@ (800c790 <vPortFree+0xc0>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	4413      	add	r3, r2
 800c76a:	4a09      	ldr	r2, [pc, #36]	@ (800c790 <vPortFree+0xc0>)
 800c76c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c76e:	6938      	ldr	r0, [r7, #16]
 800c770:	f000 f874 	bl	800c85c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c774:	4b07      	ldr	r3, [pc, #28]	@ (800c794 <vPortFree+0xc4>)
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	3301      	adds	r3, #1
 800c77a:	4a06      	ldr	r2, [pc, #24]	@ (800c794 <vPortFree+0xc4>)
 800c77c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c77e:	f7fe fae3 	bl	800ad48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c782:	bf00      	nop
 800c784:	3718      	adds	r7, #24
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}
 800c78a:	bf00      	nop
 800c78c:	2000509c 	.word	0x2000509c
 800c790:	2000508c 	.word	0x2000508c
 800c794:	20005098 	.word	0x20005098

0800c798 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c798:	b480      	push	{r7}
 800c79a:	b085      	sub	sp, #20
 800c79c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c79e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800c7a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c7a4:	4b27      	ldr	r3, [pc, #156]	@ (800c844 <prvHeapInit+0xac>)
 800c7a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	f003 0307 	and.w	r3, r3, #7
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d00c      	beq.n	800c7cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	3307      	adds	r3, #7
 800c7b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	f023 0307 	bic.w	r3, r3, #7
 800c7be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c7c0:	68ba      	ldr	r2, [r7, #8]
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	1ad3      	subs	r3, r2, r3
 800c7c6:	4a1f      	ldr	r2, [pc, #124]	@ (800c844 <prvHeapInit+0xac>)
 800c7c8:	4413      	add	r3, r2
 800c7ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c7d0:	4a1d      	ldr	r2, [pc, #116]	@ (800c848 <prvHeapInit+0xb0>)
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c7d6:	4b1c      	ldr	r3, [pc, #112]	@ (800c848 <prvHeapInit+0xb0>)
 800c7d8:	2200      	movs	r2, #0
 800c7da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	68ba      	ldr	r2, [r7, #8]
 800c7e0:	4413      	add	r3, r2
 800c7e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c7e4:	2208      	movs	r2, #8
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	1a9b      	subs	r3, r3, r2
 800c7ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	f023 0307 	bic.w	r3, r3, #7
 800c7f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	4a15      	ldr	r2, [pc, #84]	@ (800c84c <prvHeapInit+0xb4>)
 800c7f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c7fa:	4b14      	ldr	r3, [pc, #80]	@ (800c84c <prvHeapInit+0xb4>)
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	2200      	movs	r2, #0
 800c800:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c802:	4b12      	ldr	r3, [pc, #72]	@ (800c84c <prvHeapInit+0xb4>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	2200      	movs	r2, #0
 800c808:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	68fa      	ldr	r2, [r7, #12]
 800c812:	1ad2      	subs	r2, r2, r3
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c818:	4b0c      	ldr	r3, [pc, #48]	@ (800c84c <prvHeapInit+0xb4>)
 800c81a:	681a      	ldr	r2, [r3, #0]
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	685b      	ldr	r3, [r3, #4]
 800c824:	4a0a      	ldr	r2, [pc, #40]	@ (800c850 <prvHeapInit+0xb8>)
 800c826:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	685b      	ldr	r3, [r3, #4]
 800c82c:	4a09      	ldr	r2, [pc, #36]	@ (800c854 <prvHeapInit+0xbc>)
 800c82e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c830:	4b09      	ldr	r3, [pc, #36]	@ (800c858 <prvHeapInit+0xc0>)
 800c832:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c836:	601a      	str	r2, [r3, #0]
}
 800c838:	bf00      	nop
 800c83a:	3714      	adds	r7, #20
 800c83c:	46bd      	mov	sp, r7
 800c83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c842:	4770      	bx	lr
 800c844:	20001480 	.word	0x20001480
 800c848:	20005080 	.word	0x20005080
 800c84c:	20005088 	.word	0x20005088
 800c850:	20005090 	.word	0x20005090
 800c854:	2000508c 	.word	0x2000508c
 800c858:	2000509c 	.word	0x2000509c

0800c85c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c85c:	b480      	push	{r7}
 800c85e:	b085      	sub	sp, #20
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c864:	4b28      	ldr	r3, [pc, #160]	@ (800c908 <prvInsertBlockIntoFreeList+0xac>)
 800c866:	60fb      	str	r3, [r7, #12]
 800c868:	e002      	b.n	800c870 <prvInsertBlockIntoFreeList+0x14>
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	60fb      	str	r3, [r7, #12]
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	687a      	ldr	r2, [r7, #4]
 800c876:	429a      	cmp	r2, r3
 800c878:	d8f7      	bhi.n	800c86a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	685b      	ldr	r3, [r3, #4]
 800c882:	68ba      	ldr	r2, [r7, #8]
 800c884:	4413      	add	r3, r2
 800c886:	687a      	ldr	r2, [r7, #4]
 800c888:	429a      	cmp	r2, r3
 800c88a:	d108      	bne.n	800c89e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	685a      	ldr	r2, [r3, #4]
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	685b      	ldr	r3, [r3, #4]
 800c894:	441a      	add	r2, r3
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	685b      	ldr	r3, [r3, #4]
 800c8a6:	68ba      	ldr	r2, [r7, #8]
 800c8a8:	441a      	add	r2, r3
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	429a      	cmp	r2, r3
 800c8b0:	d118      	bne.n	800c8e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	681a      	ldr	r2, [r3, #0]
 800c8b6:	4b15      	ldr	r3, [pc, #84]	@ (800c90c <prvInsertBlockIntoFreeList+0xb0>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	429a      	cmp	r2, r3
 800c8bc:	d00d      	beq.n	800c8da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	685a      	ldr	r2, [r3, #4]
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	685b      	ldr	r3, [r3, #4]
 800c8c8:	441a      	add	r2, r3
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	681a      	ldr	r2, [r3, #0]
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	601a      	str	r2, [r3, #0]
 800c8d8:	e008      	b.n	800c8ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c8da:	4b0c      	ldr	r3, [pc, #48]	@ (800c90c <prvInsertBlockIntoFreeList+0xb0>)
 800c8dc:	681a      	ldr	r2, [r3, #0]
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	601a      	str	r2, [r3, #0]
 800c8e2:	e003      	b.n	800c8ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	681a      	ldr	r2, [r3, #0]
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c8ec:	68fa      	ldr	r2, [r7, #12]
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	429a      	cmp	r2, r3
 800c8f2:	d002      	beq.n	800c8fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	687a      	ldr	r2, [r7, #4]
 800c8f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c8fa:	bf00      	nop
 800c8fc:	3714      	adds	r7, #20
 800c8fe:	46bd      	mov	sp, r7
 800c900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c904:	4770      	bx	lr
 800c906:	bf00      	nop
 800c908:	20005080 	.word	0x20005080
 800c90c:	20005088 	.word	0x20005088

0800c910 <__cvt>:
 800c910:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c914:	ec57 6b10 	vmov	r6, r7, d0
 800c918:	2f00      	cmp	r7, #0
 800c91a:	460c      	mov	r4, r1
 800c91c:	4619      	mov	r1, r3
 800c91e:	463b      	mov	r3, r7
 800c920:	bfbb      	ittet	lt
 800c922:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c926:	461f      	movlt	r7, r3
 800c928:	2300      	movge	r3, #0
 800c92a:	232d      	movlt	r3, #45	@ 0x2d
 800c92c:	700b      	strb	r3, [r1, #0]
 800c92e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c930:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c934:	4691      	mov	r9, r2
 800c936:	f023 0820 	bic.w	r8, r3, #32
 800c93a:	bfbc      	itt	lt
 800c93c:	4632      	movlt	r2, r6
 800c93e:	4616      	movlt	r6, r2
 800c940:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c944:	d005      	beq.n	800c952 <__cvt+0x42>
 800c946:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c94a:	d100      	bne.n	800c94e <__cvt+0x3e>
 800c94c:	3401      	adds	r4, #1
 800c94e:	2102      	movs	r1, #2
 800c950:	e000      	b.n	800c954 <__cvt+0x44>
 800c952:	2103      	movs	r1, #3
 800c954:	ab03      	add	r3, sp, #12
 800c956:	9301      	str	r3, [sp, #4]
 800c958:	ab02      	add	r3, sp, #8
 800c95a:	9300      	str	r3, [sp, #0]
 800c95c:	ec47 6b10 	vmov	d0, r6, r7
 800c960:	4653      	mov	r3, sl
 800c962:	4622      	mov	r2, r4
 800c964:	f000 fed4 	bl	800d710 <_dtoa_r>
 800c968:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c96c:	4605      	mov	r5, r0
 800c96e:	d119      	bne.n	800c9a4 <__cvt+0x94>
 800c970:	f019 0f01 	tst.w	r9, #1
 800c974:	d00e      	beq.n	800c994 <__cvt+0x84>
 800c976:	eb00 0904 	add.w	r9, r0, r4
 800c97a:	2200      	movs	r2, #0
 800c97c:	2300      	movs	r3, #0
 800c97e:	4630      	mov	r0, r6
 800c980:	4639      	mov	r1, r7
 800c982:	f7f4 f8a9 	bl	8000ad8 <__aeabi_dcmpeq>
 800c986:	b108      	cbz	r0, 800c98c <__cvt+0x7c>
 800c988:	f8cd 900c 	str.w	r9, [sp, #12]
 800c98c:	2230      	movs	r2, #48	@ 0x30
 800c98e:	9b03      	ldr	r3, [sp, #12]
 800c990:	454b      	cmp	r3, r9
 800c992:	d31e      	bcc.n	800c9d2 <__cvt+0xc2>
 800c994:	9b03      	ldr	r3, [sp, #12]
 800c996:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c998:	1b5b      	subs	r3, r3, r5
 800c99a:	4628      	mov	r0, r5
 800c99c:	6013      	str	r3, [r2, #0]
 800c99e:	b004      	add	sp, #16
 800c9a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c9a8:	eb00 0904 	add.w	r9, r0, r4
 800c9ac:	d1e5      	bne.n	800c97a <__cvt+0x6a>
 800c9ae:	7803      	ldrb	r3, [r0, #0]
 800c9b0:	2b30      	cmp	r3, #48	@ 0x30
 800c9b2:	d10a      	bne.n	800c9ca <__cvt+0xba>
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	4630      	mov	r0, r6
 800c9ba:	4639      	mov	r1, r7
 800c9bc:	f7f4 f88c 	bl	8000ad8 <__aeabi_dcmpeq>
 800c9c0:	b918      	cbnz	r0, 800c9ca <__cvt+0xba>
 800c9c2:	f1c4 0401 	rsb	r4, r4, #1
 800c9c6:	f8ca 4000 	str.w	r4, [sl]
 800c9ca:	f8da 3000 	ldr.w	r3, [sl]
 800c9ce:	4499      	add	r9, r3
 800c9d0:	e7d3      	b.n	800c97a <__cvt+0x6a>
 800c9d2:	1c59      	adds	r1, r3, #1
 800c9d4:	9103      	str	r1, [sp, #12]
 800c9d6:	701a      	strb	r2, [r3, #0]
 800c9d8:	e7d9      	b.n	800c98e <__cvt+0x7e>

0800c9da <__exponent>:
 800c9da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c9dc:	2900      	cmp	r1, #0
 800c9de:	bfba      	itte	lt
 800c9e0:	4249      	neglt	r1, r1
 800c9e2:	232d      	movlt	r3, #45	@ 0x2d
 800c9e4:	232b      	movge	r3, #43	@ 0x2b
 800c9e6:	2909      	cmp	r1, #9
 800c9e8:	7002      	strb	r2, [r0, #0]
 800c9ea:	7043      	strb	r3, [r0, #1]
 800c9ec:	dd29      	ble.n	800ca42 <__exponent+0x68>
 800c9ee:	f10d 0307 	add.w	r3, sp, #7
 800c9f2:	461d      	mov	r5, r3
 800c9f4:	270a      	movs	r7, #10
 800c9f6:	461a      	mov	r2, r3
 800c9f8:	fbb1 f6f7 	udiv	r6, r1, r7
 800c9fc:	fb07 1416 	mls	r4, r7, r6, r1
 800ca00:	3430      	adds	r4, #48	@ 0x30
 800ca02:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ca06:	460c      	mov	r4, r1
 800ca08:	2c63      	cmp	r4, #99	@ 0x63
 800ca0a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800ca0e:	4631      	mov	r1, r6
 800ca10:	dcf1      	bgt.n	800c9f6 <__exponent+0x1c>
 800ca12:	3130      	adds	r1, #48	@ 0x30
 800ca14:	1e94      	subs	r4, r2, #2
 800ca16:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ca1a:	1c41      	adds	r1, r0, #1
 800ca1c:	4623      	mov	r3, r4
 800ca1e:	42ab      	cmp	r3, r5
 800ca20:	d30a      	bcc.n	800ca38 <__exponent+0x5e>
 800ca22:	f10d 0309 	add.w	r3, sp, #9
 800ca26:	1a9b      	subs	r3, r3, r2
 800ca28:	42ac      	cmp	r4, r5
 800ca2a:	bf88      	it	hi
 800ca2c:	2300      	movhi	r3, #0
 800ca2e:	3302      	adds	r3, #2
 800ca30:	4403      	add	r3, r0
 800ca32:	1a18      	subs	r0, r3, r0
 800ca34:	b003      	add	sp, #12
 800ca36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca38:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ca3c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ca40:	e7ed      	b.n	800ca1e <__exponent+0x44>
 800ca42:	2330      	movs	r3, #48	@ 0x30
 800ca44:	3130      	adds	r1, #48	@ 0x30
 800ca46:	7083      	strb	r3, [r0, #2]
 800ca48:	70c1      	strb	r1, [r0, #3]
 800ca4a:	1d03      	adds	r3, r0, #4
 800ca4c:	e7f1      	b.n	800ca32 <__exponent+0x58>
	...

0800ca50 <_printf_float>:
 800ca50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca54:	b08d      	sub	sp, #52	@ 0x34
 800ca56:	460c      	mov	r4, r1
 800ca58:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ca5c:	4616      	mov	r6, r2
 800ca5e:	461f      	mov	r7, r3
 800ca60:	4605      	mov	r5, r0
 800ca62:	f000 fcef 	bl	800d444 <_localeconv_r>
 800ca66:	6803      	ldr	r3, [r0, #0]
 800ca68:	9304      	str	r3, [sp, #16]
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f7f3 fc08 	bl	8000280 <strlen>
 800ca70:	2300      	movs	r3, #0
 800ca72:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca74:	f8d8 3000 	ldr.w	r3, [r8]
 800ca78:	9005      	str	r0, [sp, #20]
 800ca7a:	3307      	adds	r3, #7
 800ca7c:	f023 0307 	bic.w	r3, r3, #7
 800ca80:	f103 0208 	add.w	r2, r3, #8
 800ca84:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ca88:	f8d4 b000 	ldr.w	fp, [r4]
 800ca8c:	f8c8 2000 	str.w	r2, [r8]
 800ca90:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ca94:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ca98:	9307      	str	r3, [sp, #28]
 800ca9a:	f8cd 8018 	str.w	r8, [sp, #24]
 800ca9e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800caa2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800caa6:	4b9c      	ldr	r3, [pc, #624]	@ (800cd18 <_printf_float+0x2c8>)
 800caa8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800caac:	f7f4 f846 	bl	8000b3c <__aeabi_dcmpun>
 800cab0:	bb70      	cbnz	r0, 800cb10 <_printf_float+0xc0>
 800cab2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cab6:	4b98      	ldr	r3, [pc, #608]	@ (800cd18 <_printf_float+0x2c8>)
 800cab8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cabc:	f7f4 f820 	bl	8000b00 <__aeabi_dcmple>
 800cac0:	bb30      	cbnz	r0, 800cb10 <_printf_float+0xc0>
 800cac2:	2200      	movs	r2, #0
 800cac4:	2300      	movs	r3, #0
 800cac6:	4640      	mov	r0, r8
 800cac8:	4649      	mov	r1, r9
 800caca:	f7f4 f80f 	bl	8000aec <__aeabi_dcmplt>
 800cace:	b110      	cbz	r0, 800cad6 <_printf_float+0x86>
 800cad0:	232d      	movs	r3, #45	@ 0x2d
 800cad2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cad6:	4a91      	ldr	r2, [pc, #580]	@ (800cd1c <_printf_float+0x2cc>)
 800cad8:	4b91      	ldr	r3, [pc, #580]	@ (800cd20 <_printf_float+0x2d0>)
 800cada:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cade:	bf94      	ite	ls
 800cae0:	4690      	movls	r8, r2
 800cae2:	4698      	movhi	r8, r3
 800cae4:	2303      	movs	r3, #3
 800cae6:	6123      	str	r3, [r4, #16]
 800cae8:	f02b 0304 	bic.w	r3, fp, #4
 800caec:	6023      	str	r3, [r4, #0]
 800caee:	f04f 0900 	mov.w	r9, #0
 800caf2:	9700      	str	r7, [sp, #0]
 800caf4:	4633      	mov	r3, r6
 800caf6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800caf8:	4621      	mov	r1, r4
 800cafa:	4628      	mov	r0, r5
 800cafc:	f000 f9d2 	bl	800cea4 <_printf_common>
 800cb00:	3001      	adds	r0, #1
 800cb02:	f040 808d 	bne.w	800cc20 <_printf_float+0x1d0>
 800cb06:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cb0a:	b00d      	add	sp, #52	@ 0x34
 800cb0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb10:	4642      	mov	r2, r8
 800cb12:	464b      	mov	r3, r9
 800cb14:	4640      	mov	r0, r8
 800cb16:	4649      	mov	r1, r9
 800cb18:	f7f4 f810 	bl	8000b3c <__aeabi_dcmpun>
 800cb1c:	b140      	cbz	r0, 800cb30 <_printf_float+0xe0>
 800cb1e:	464b      	mov	r3, r9
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	bfbc      	itt	lt
 800cb24:	232d      	movlt	r3, #45	@ 0x2d
 800cb26:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800cb2a:	4a7e      	ldr	r2, [pc, #504]	@ (800cd24 <_printf_float+0x2d4>)
 800cb2c:	4b7e      	ldr	r3, [pc, #504]	@ (800cd28 <_printf_float+0x2d8>)
 800cb2e:	e7d4      	b.n	800cada <_printf_float+0x8a>
 800cb30:	6863      	ldr	r3, [r4, #4]
 800cb32:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800cb36:	9206      	str	r2, [sp, #24]
 800cb38:	1c5a      	adds	r2, r3, #1
 800cb3a:	d13b      	bne.n	800cbb4 <_printf_float+0x164>
 800cb3c:	2306      	movs	r3, #6
 800cb3e:	6063      	str	r3, [r4, #4]
 800cb40:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800cb44:	2300      	movs	r3, #0
 800cb46:	6022      	str	r2, [r4, #0]
 800cb48:	9303      	str	r3, [sp, #12]
 800cb4a:	ab0a      	add	r3, sp, #40	@ 0x28
 800cb4c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800cb50:	ab09      	add	r3, sp, #36	@ 0x24
 800cb52:	9300      	str	r3, [sp, #0]
 800cb54:	6861      	ldr	r1, [r4, #4]
 800cb56:	ec49 8b10 	vmov	d0, r8, r9
 800cb5a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800cb5e:	4628      	mov	r0, r5
 800cb60:	f7ff fed6 	bl	800c910 <__cvt>
 800cb64:	9b06      	ldr	r3, [sp, #24]
 800cb66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cb68:	2b47      	cmp	r3, #71	@ 0x47
 800cb6a:	4680      	mov	r8, r0
 800cb6c:	d129      	bne.n	800cbc2 <_printf_float+0x172>
 800cb6e:	1cc8      	adds	r0, r1, #3
 800cb70:	db02      	blt.n	800cb78 <_printf_float+0x128>
 800cb72:	6863      	ldr	r3, [r4, #4]
 800cb74:	4299      	cmp	r1, r3
 800cb76:	dd41      	ble.n	800cbfc <_printf_float+0x1ac>
 800cb78:	f1aa 0a02 	sub.w	sl, sl, #2
 800cb7c:	fa5f fa8a 	uxtb.w	sl, sl
 800cb80:	3901      	subs	r1, #1
 800cb82:	4652      	mov	r2, sl
 800cb84:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800cb88:	9109      	str	r1, [sp, #36]	@ 0x24
 800cb8a:	f7ff ff26 	bl	800c9da <__exponent>
 800cb8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cb90:	1813      	adds	r3, r2, r0
 800cb92:	2a01      	cmp	r2, #1
 800cb94:	4681      	mov	r9, r0
 800cb96:	6123      	str	r3, [r4, #16]
 800cb98:	dc02      	bgt.n	800cba0 <_printf_float+0x150>
 800cb9a:	6822      	ldr	r2, [r4, #0]
 800cb9c:	07d2      	lsls	r2, r2, #31
 800cb9e:	d501      	bpl.n	800cba4 <_printf_float+0x154>
 800cba0:	3301      	adds	r3, #1
 800cba2:	6123      	str	r3, [r4, #16]
 800cba4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d0a2      	beq.n	800caf2 <_printf_float+0xa2>
 800cbac:	232d      	movs	r3, #45	@ 0x2d
 800cbae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cbb2:	e79e      	b.n	800caf2 <_printf_float+0xa2>
 800cbb4:	9a06      	ldr	r2, [sp, #24]
 800cbb6:	2a47      	cmp	r2, #71	@ 0x47
 800cbb8:	d1c2      	bne.n	800cb40 <_printf_float+0xf0>
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d1c0      	bne.n	800cb40 <_printf_float+0xf0>
 800cbbe:	2301      	movs	r3, #1
 800cbc0:	e7bd      	b.n	800cb3e <_printf_float+0xee>
 800cbc2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cbc6:	d9db      	bls.n	800cb80 <_printf_float+0x130>
 800cbc8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800cbcc:	d118      	bne.n	800cc00 <_printf_float+0x1b0>
 800cbce:	2900      	cmp	r1, #0
 800cbd0:	6863      	ldr	r3, [r4, #4]
 800cbd2:	dd0b      	ble.n	800cbec <_printf_float+0x19c>
 800cbd4:	6121      	str	r1, [r4, #16]
 800cbd6:	b913      	cbnz	r3, 800cbde <_printf_float+0x18e>
 800cbd8:	6822      	ldr	r2, [r4, #0]
 800cbda:	07d0      	lsls	r0, r2, #31
 800cbdc:	d502      	bpl.n	800cbe4 <_printf_float+0x194>
 800cbde:	3301      	adds	r3, #1
 800cbe0:	440b      	add	r3, r1
 800cbe2:	6123      	str	r3, [r4, #16]
 800cbe4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800cbe6:	f04f 0900 	mov.w	r9, #0
 800cbea:	e7db      	b.n	800cba4 <_printf_float+0x154>
 800cbec:	b913      	cbnz	r3, 800cbf4 <_printf_float+0x1a4>
 800cbee:	6822      	ldr	r2, [r4, #0]
 800cbf0:	07d2      	lsls	r2, r2, #31
 800cbf2:	d501      	bpl.n	800cbf8 <_printf_float+0x1a8>
 800cbf4:	3302      	adds	r3, #2
 800cbf6:	e7f4      	b.n	800cbe2 <_printf_float+0x192>
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	e7f2      	b.n	800cbe2 <_printf_float+0x192>
 800cbfc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800cc00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc02:	4299      	cmp	r1, r3
 800cc04:	db05      	blt.n	800cc12 <_printf_float+0x1c2>
 800cc06:	6823      	ldr	r3, [r4, #0]
 800cc08:	6121      	str	r1, [r4, #16]
 800cc0a:	07d8      	lsls	r0, r3, #31
 800cc0c:	d5ea      	bpl.n	800cbe4 <_printf_float+0x194>
 800cc0e:	1c4b      	adds	r3, r1, #1
 800cc10:	e7e7      	b.n	800cbe2 <_printf_float+0x192>
 800cc12:	2900      	cmp	r1, #0
 800cc14:	bfd4      	ite	le
 800cc16:	f1c1 0202 	rsble	r2, r1, #2
 800cc1a:	2201      	movgt	r2, #1
 800cc1c:	4413      	add	r3, r2
 800cc1e:	e7e0      	b.n	800cbe2 <_printf_float+0x192>
 800cc20:	6823      	ldr	r3, [r4, #0]
 800cc22:	055a      	lsls	r2, r3, #21
 800cc24:	d407      	bmi.n	800cc36 <_printf_float+0x1e6>
 800cc26:	6923      	ldr	r3, [r4, #16]
 800cc28:	4642      	mov	r2, r8
 800cc2a:	4631      	mov	r1, r6
 800cc2c:	4628      	mov	r0, r5
 800cc2e:	47b8      	blx	r7
 800cc30:	3001      	adds	r0, #1
 800cc32:	d12b      	bne.n	800cc8c <_printf_float+0x23c>
 800cc34:	e767      	b.n	800cb06 <_printf_float+0xb6>
 800cc36:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cc3a:	f240 80dd 	bls.w	800cdf8 <_printf_float+0x3a8>
 800cc3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cc42:	2200      	movs	r2, #0
 800cc44:	2300      	movs	r3, #0
 800cc46:	f7f3 ff47 	bl	8000ad8 <__aeabi_dcmpeq>
 800cc4a:	2800      	cmp	r0, #0
 800cc4c:	d033      	beq.n	800ccb6 <_printf_float+0x266>
 800cc4e:	4a37      	ldr	r2, [pc, #220]	@ (800cd2c <_printf_float+0x2dc>)
 800cc50:	2301      	movs	r3, #1
 800cc52:	4631      	mov	r1, r6
 800cc54:	4628      	mov	r0, r5
 800cc56:	47b8      	blx	r7
 800cc58:	3001      	adds	r0, #1
 800cc5a:	f43f af54 	beq.w	800cb06 <_printf_float+0xb6>
 800cc5e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800cc62:	4543      	cmp	r3, r8
 800cc64:	db02      	blt.n	800cc6c <_printf_float+0x21c>
 800cc66:	6823      	ldr	r3, [r4, #0]
 800cc68:	07d8      	lsls	r0, r3, #31
 800cc6a:	d50f      	bpl.n	800cc8c <_printf_float+0x23c>
 800cc6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cc70:	4631      	mov	r1, r6
 800cc72:	4628      	mov	r0, r5
 800cc74:	47b8      	blx	r7
 800cc76:	3001      	adds	r0, #1
 800cc78:	f43f af45 	beq.w	800cb06 <_printf_float+0xb6>
 800cc7c:	f04f 0900 	mov.w	r9, #0
 800cc80:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800cc84:	f104 0a1a 	add.w	sl, r4, #26
 800cc88:	45c8      	cmp	r8, r9
 800cc8a:	dc09      	bgt.n	800cca0 <_printf_float+0x250>
 800cc8c:	6823      	ldr	r3, [r4, #0]
 800cc8e:	079b      	lsls	r3, r3, #30
 800cc90:	f100 8103 	bmi.w	800ce9a <_printf_float+0x44a>
 800cc94:	68e0      	ldr	r0, [r4, #12]
 800cc96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cc98:	4298      	cmp	r0, r3
 800cc9a:	bfb8      	it	lt
 800cc9c:	4618      	movlt	r0, r3
 800cc9e:	e734      	b.n	800cb0a <_printf_float+0xba>
 800cca0:	2301      	movs	r3, #1
 800cca2:	4652      	mov	r2, sl
 800cca4:	4631      	mov	r1, r6
 800cca6:	4628      	mov	r0, r5
 800cca8:	47b8      	blx	r7
 800ccaa:	3001      	adds	r0, #1
 800ccac:	f43f af2b 	beq.w	800cb06 <_printf_float+0xb6>
 800ccb0:	f109 0901 	add.w	r9, r9, #1
 800ccb4:	e7e8      	b.n	800cc88 <_printf_float+0x238>
 800ccb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	dc39      	bgt.n	800cd30 <_printf_float+0x2e0>
 800ccbc:	4a1b      	ldr	r2, [pc, #108]	@ (800cd2c <_printf_float+0x2dc>)
 800ccbe:	2301      	movs	r3, #1
 800ccc0:	4631      	mov	r1, r6
 800ccc2:	4628      	mov	r0, r5
 800ccc4:	47b8      	blx	r7
 800ccc6:	3001      	adds	r0, #1
 800ccc8:	f43f af1d 	beq.w	800cb06 <_printf_float+0xb6>
 800cccc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ccd0:	ea59 0303 	orrs.w	r3, r9, r3
 800ccd4:	d102      	bne.n	800ccdc <_printf_float+0x28c>
 800ccd6:	6823      	ldr	r3, [r4, #0]
 800ccd8:	07d9      	lsls	r1, r3, #31
 800ccda:	d5d7      	bpl.n	800cc8c <_printf_float+0x23c>
 800ccdc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cce0:	4631      	mov	r1, r6
 800cce2:	4628      	mov	r0, r5
 800cce4:	47b8      	blx	r7
 800cce6:	3001      	adds	r0, #1
 800cce8:	f43f af0d 	beq.w	800cb06 <_printf_float+0xb6>
 800ccec:	f04f 0a00 	mov.w	sl, #0
 800ccf0:	f104 0b1a 	add.w	fp, r4, #26
 800ccf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccf6:	425b      	negs	r3, r3
 800ccf8:	4553      	cmp	r3, sl
 800ccfa:	dc01      	bgt.n	800cd00 <_printf_float+0x2b0>
 800ccfc:	464b      	mov	r3, r9
 800ccfe:	e793      	b.n	800cc28 <_printf_float+0x1d8>
 800cd00:	2301      	movs	r3, #1
 800cd02:	465a      	mov	r2, fp
 800cd04:	4631      	mov	r1, r6
 800cd06:	4628      	mov	r0, r5
 800cd08:	47b8      	blx	r7
 800cd0a:	3001      	adds	r0, #1
 800cd0c:	f43f aefb 	beq.w	800cb06 <_printf_float+0xb6>
 800cd10:	f10a 0a01 	add.w	sl, sl, #1
 800cd14:	e7ee      	b.n	800ccf4 <_printf_float+0x2a4>
 800cd16:	bf00      	nop
 800cd18:	7fefffff 	.word	0x7fefffff
 800cd1c:	0800f9c0 	.word	0x0800f9c0
 800cd20:	0800f9c4 	.word	0x0800f9c4
 800cd24:	0800f9c8 	.word	0x0800f9c8
 800cd28:	0800f9cc 	.word	0x0800f9cc
 800cd2c:	0800f9d0 	.word	0x0800f9d0
 800cd30:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cd32:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cd36:	4553      	cmp	r3, sl
 800cd38:	bfa8      	it	ge
 800cd3a:	4653      	movge	r3, sl
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	4699      	mov	r9, r3
 800cd40:	dc36      	bgt.n	800cdb0 <_printf_float+0x360>
 800cd42:	f04f 0b00 	mov.w	fp, #0
 800cd46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cd4a:	f104 021a 	add.w	r2, r4, #26
 800cd4e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cd50:	9306      	str	r3, [sp, #24]
 800cd52:	eba3 0309 	sub.w	r3, r3, r9
 800cd56:	455b      	cmp	r3, fp
 800cd58:	dc31      	bgt.n	800cdbe <_printf_float+0x36e>
 800cd5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd5c:	459a      	cmp	sl, r3
 800cd5e:	dc3a      	bgt.n	800cdd6 <_printf_float+0x386>
 800cd60:	6823      	ldr	r3, [r4, #0]
 800cd62:	07da      	lsls	r2, r3, #31
 800cd64:	d437      	bmi.n	800cdd6 <_printf_float+0x386>
 800cd66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd68:	ebaa 0903 	sub.w	r9, sl, r3
 800cd6c:	9b06      	ldr	r3, [sp, #24]
 800cd6e:	ebaa 0303 	sub.w	r3, sl, r3
 800cd72:	4599      	cmp	r9, r3
 800cd74:	bfa8      	it	ge
 800cd76:	4699      	movge	r9, r3
 800cd78:	f1b9 0f00 	cmp.w	r9, #0
 800cd7c:	dc33      	bgt.n	800cde6 <_printf_float+0x396>
 800cd7e:	f04f 0800 	mov.w	r8, #0
 800cd82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cd86:	f104 0b1a 	add.w	fp, r4, #26
 800cd8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd8c:	ebaa 0303 	sub.w	r3, sl, r3
 800cd90:	eba3 0309 	sub.w	r3, r3, r9
 800cd94:	4543      	cmp	r3, r8
 800cd96:	f77f af79 	ble.w	800cc8c <_printf_float+0x23c>
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	465a      	mov	r2, fp
 800cd9e:	4631      	mov	r1, r6
 800cda0:	4628      	mov	r0, r5
 800cda2:	47b8      	blx	r7
 800cda4:	3001      	adds	r0, #1
 800cda6:	f43f aeae 	beq.w	800cb06 <_printf_float+0xb6>
 800cdaa:	f108 0801 	add.w	r8, r8, #1
 800cdae:	e7ec      	b.n	800cd8a <_printf_float+0x33a>
 800cdb0:	4642      	mov	r2, r8
 800cdb2:	4631      	mov	r1, r6
 800cdb4:	4628      	mov	r0, r5
 800cdb6:	47b8      	blx	r7
 800cdb8:	3001      	adds	r0, #1
 800cdba:	d1c2      	bne.n	800cd42 <_printf_float+0x2f2>
 800cdbc:	e6a3      	b.n	800cb06 <_printf_float+0xb6>
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	4631      	mov	r1, r6
 800cdc2:	4628      	mov	r0, r5
 800cdc4:	9206      	str	r2, [sp, #24]
 800cdc6:	47b8      	blx	r7
 800cdc8:	3001      	adds	r0, #1
 800cdca:	f43f ae9c 	beq.w	800cb06 <_printf_float+0xb6>
 800cdce:	9a06      	ldr	r2, [sp, #24]
 800cdd0:	f10b 0b01 	add.w	fp, fp, #1
 800cdd4:	e7bb      	b.n	800cd4e <_printf_float+0x2fe>
 800cdd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cdda:	4631      	mov	r1, r6
 800cddc:	4628      	mov	r0, r5
 800cdde:	47b8      	blx	r7
 800cde0:	3001      	adds	r0, #1
 800cde2:	d1c0      	bne.n	800cd66 <_printf_float+0x316>
 800cde4:	e68f      	b.n	800cb06 <_printf_float+0xb6>
 800cde6:	9a06      	ldr	r2, [sp, #24]
 800cde8:	464b      	mov	r3, r9
 800cdea:	4442      	add	r2, r8
 800cdec:	4631      	mov	r1, r6
 800cdee:	4628      	mov	r0, r5
 800cdf0:	47b8      	blx	r7
 800cdf2:	3001      	adds	r0, #1
 800cdf4:	d1c3      	bne.n	800cd7e <_printf_float+0x32e>
 800cdf6:	e686      	b.n	800cb06 <_printf_float+0xb6>
 800cdf8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cdfc:	f1ba 0f01 	cmp.w	sl, #1
 800ce00:	dc01      	bgt.n	800ce06 <_printf_float+0x3b6>
 800ce02:	07db      	lsls	r3, r3, #31
 800ce04:	d536      	bpl.n	800ce74 <_printf_float+0x424>
 800ce06:	2301      	movs	r3, #1
 800ce08:	4642      	mov	r2, r8
 800ce0a:	4631      	mov	r1, r6
 800ce0c:	4628      	mov	r0, r5
 800ce0e:	47b8      	blx	r7
 800ce10:	3001      	adds	r0, #1
 800ce12:	f43f ae78 	beq.w	800cb06 <_printf_float+0xb6>
 800ce16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce1a:	4631      	mov	r1, r6
 800ce1c:	4628      	mov	r0, r5
 800ce1e:	47b8      	blx	r7
 800ce20:	3001      	adds	r0, #1
 800ce22:	f43f ae70 	beq.w	800cb06 <_printf_float+0xb6>
 800ce26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800ce32:	f7f3 fe51 	bl	8000ad8 <__aeabi_dcmpeq>
 800ce36:	b9c0      	cbnz	r0, 800ce6a <_printf_float+0x41a>
 800ce38:	4653      	mov	r3, sl
 800ce3a:	f108 0201 	add.w	r2, r8, #1
 800ce3e:	4631      	mov	r1, r6
 800ce40:	4628      	mov	r0, r5
 800ce42:	47b8      	blx	r7
 800ce44:	3001      	adds	r0, #1
 800ce46:	d10c      	bne.n	800ce62 <_printf_float+0x412>
 800ce48:	e65d      	b.n	800cb06 <_printf_float+0xb6>
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	465a      	mov	r2, fp
 800ce4e:	4631      	mov	r1, r6
 800ce50:	4628      	mov	r0, r5
 800ce52:	47b8      	blx	r7
 800ce54:	3001      	adds	r0, #1
 800ce56:	f43f ae56 	beq.w	800cb06 <_printf_float+0xb6>
 800ce5a:	f108 0801 	add.w	r8, r8, #1
 800ce5e:	45d0      	cmp	r8, sl
 800ce60:	dbf3      	blt.n	800ce4a <_printf_float+0x3fa>
 800ce62:	464b      	mov	r3, r9
 800ce64:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ce68:	e6df      	b.n	800cc2a <_printf_float+0x1da>
 800ce6a:	f04f 0800 	mov.w	r8, #0
 800ce6e:	f104 0b1a 	add.w	fp, r4, #26
 800ce72:	e7f4      	b.n	800ce5e <_printf_float+0x40e>
 800ce74:	2301      	movs	r3, #1
 800ce76:	4642      	mov	r2, r8
 800ce78:	e7e1      	b.n	800ce3e <_printf_float+0x3ee>
 800ce7a:	2301      	movs	r3, #1
 800ce7c:	464a      	mov	r2, r9
 800ce7e:	4631      	mov	r1, r6
 800ce80:	4628      	mov	r0, r5
 800ce82:	47b8      	blx	r7
 800ce84:	3001      	adds	r0, #1
 800ce86:	f43f ae3e 	beq.w	800cb06 <_printf_float+0xb6>
 800ce8a:	f108 0801 	add.w	r8, r8, #1
 800ce8e:	68e3      	ldr	r3, [r4, #12]
 800ce90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ce92:	1a5b      	subs	r3, r3, r1
 800ce94:	4543      	cmp	r3, r8
 800ce96:	dcf0      	bgt.n	800ce7a <_printf_float+0x42a>
 800ce98:	e6fc      	b.n	800cc94 <_printf_float+0x244>
 800ce9a:	f04f 0800 	mov.w	r8, #0
 800ce9e:	f104 0919 	add.w	r9, r4, #25
 800cea2:	e7f4      	b.n	800ce8e <_printf_float+0x43e>

0800cea4 <_printf_common>:
 800cea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cea8:	4616      	mov	r6, r2
 800ceaa:	4698      	mov	r8, r3
 800ceac:	688a      	ldr	r2, [r1, #8]
 800ceae:	690b      	ldr	r3, [r1, #16]
 800ceb0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ceb4:	4293      	cmp	r3, r2
 800ceb6:	bfb8      	it	lt
 800ceb8:	4613      	movlt	r3, r2
 800ceba:	6033      	str	r3, [r6, #0]
 800cebc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cec0:	4607      	mov	r7, r0
 800cec2:	460c      	mov	r4, r1
 800cec4:	b10a      	cbz	r2, 800ceca <_printf_common+0x26>
 800cec6:	3301      	adds	r3, #1
 800cec8:	6033      	str	r3, [r6, #0]
 800ceca:	6823      	ldr	r3, [r4, #0]
 800cecc:	0699      	lsls	r1, r3, #26
 800cece:	bf42      	ittt	mi
 800ced0:	6833      	ldrmi	r3, [r6, #0]
 800ced2:	3302      	addmi	r3, #2
 800ced4:	6033      	strmi	r3, [r6, #0]
 800ced6:	6825      	ldr	r5, [r4, #0]
 800ced8:	f015 0506 	ands.w	r5, r5, #6
 800cedc:	d106      	bne.n	800ceec <_printf_common+0x48>
 800cede:	f104 0a19 	add.w	sl, r4, #25
 800cee2:	68e3      	ldr	r3, [r4, #12]
 800cee4:	6832      	ldr	r2, [r6, #0]
 800cee6:	1a9b      	subs	r3, r3, r2
 800cee8:	42ab      	cmp	r3, r5
 800ceea:	dc26      	bgt.n	800cf3a <_printf_common+0x96>
 800ceec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cef0:	6822      	ldr	r2, [r4, #0]
 800cef2:	3b00      	subs	r3, #0
 800cef4:	bf18      	it	ne
 800cef6:	2301      	movne	r3, #1
 800cef8:	0692      	lsls	r2, r2, #26
 800cefa:	d42b      	bmi.n	800cf54 <_printf_common+0xb0>
 800cefc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cf00:	4641      	mov	r1, r8
 800cf02:	4638      	mov	r0, r7
 800cf04:	47c8      	blx	r9
 800cf06:	3001      	adds	r0, #1
 800cf08:	d01e      	beq.n	800cf48 <_printf_common+0xa4>
 800cf0a:	6823      	ldr	r3, [r4, #0]
 800cf0c:	6922      	ldr	r2, [r4, #16]
 800cf0e:	f003 0306 	and.w	r3, r3, #6
 800cf12:	2b04      	cmp	r3, #4
 800cf14:	bf02      	ittt	eq
 800cf16:	68e5      	ldreq	r5, [r4, #12]
 800cf18:	6833      	ldreq	r3, [r6, #0]
 800cf1a:	1aed      	subeq	r5, r5, r3
 800cf1c:	68a3      	ldr	r3, [r4, #8]
 800cf1e:	bf0c      	ite	eq
 800cf20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cf24:	2500      	movne	r5, #0
 800cf26:	4293      	cmp	r3, r2
 800cf28:	bfc4      	itt	gt
 800cf2a:	1a9b      	subgt	r3, r3, r2
 800cf2c:	18ed      	addgt	r5, r5, r3
 800cf2e:	2600      	movs	r6, #0
 800cf30:	341a      	adds	r4, #26
 800cf32:	42b5      	cmp	r5, r6
 800cf34:	d11a      	bne.n	800cf6c <_printf_common+0xc8>
 800cf36:	2000      	movs	r0, #0
 800cf38:	e008      	b.n	800cf4c <_printf_common+0xa8>
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	4652      	mov	r2, sl
 800cf3e:	4641      	mov	r1, r8
 800cf40:	4638      	mov	r0, r7
 800cf42:	47c8      	blx	r9
 800cf44:	3001      	adds	r0, #1
 800cf46:	d103      	bne.n	800cf50 <_printf_common+0xac>
 800cf48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cf4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf50:	3501      	adds	r5, #1
 800cf52:	e7c6      	b.n	800cee2 <_printf_common+0x3e>
 800cf54:	18e1      	adds	r1, r4, r3
 800cf56:	1c5a      	adds	r2, r3, #1
 800cf58:	2030      	movs	r0, #48	@ 0x30
 800cf5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cf5e:	4422      	add	r2, r4
 800cf60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cf64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cf68:	3302      	adds	r3, #2
 800cf6a:	e7c7      	b.n	800cefc <_printf_common+0x58>
 800cf6c:	2301      	movs	r3, #1
 800cf6e:	4622      	mov	r2, r4
 800cf70:	4641      	mov	r1, r8
 800cf72:	4638      	mov	r0, r7
 800cf74:	47c8      	blx	r9
 800cf76:	3001      	adds	r0, #1
 800cf78:	d0e6      	beq.n	800cf48 <_printf_common+0xa4>
 800cf7a:	3601      	adds	r6, #1
 800cf7c:	e7d9      	b.n	800cf32 <_printf_common+0x8e>
	...

0800cf80 <_printf_i>:
 800cf80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cf84:	7e0f      	ldrb	r7, [r1, #24]
 800cf86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cf88:	2f78      	cmp	r7, #120	@ 0x78
 800cf8a:	4691      	mov	r9, r2
 800cf8c:	4680      	mov	r8, r0
 800cf8e:	460c      	mov	r4, r1
 800cf90:	469a      	mov	sl, r3
 800cf92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cf96:	d807      	bhi.n	800cfa8 <_printf_i+0x28>
 800cf98:	2f62      	cmp	r7, #98	@ 0x62
 800cf9a:	d80a      	bhi.n	800cfb2 <_printf_i+0x32>
 800cf9c:	2f00      	cmp	r7, #0
 800cf9e:	f000 80d2 	beq.w	800d146 <_printf_i+0x1c6>
 800cfa2:	2f58      	cmp	r7, #88	@ 0x58
 800cfa4:	f000 80b9 	beq.w	800d11a <_printf_i+0x19a>
 800cfa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cfac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cfb0:	e03a      	b.n	800d028 <_printf_i+0xa8>
 800cfb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cfb6:	2b15      	cmp	r3, #21
 800cfb8:	d8f6      	bhi.n	800cfa8 <_printf_i+0x28>
 800cfba:	a101      	add	r1, pc, #4	@ (adr r1, 800cfc0 <_printf_i+0x40>)
 800cfbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cfc0:	0800d019 	.word	0x0800d019
 800cfc4:	0800d02d 	.word	0x0800d02d
 800cfc8:	0800cfa9 	.word	0x0800cfa9
 800cfcc:	0800cfa9 	.word	0x0800cfa9
 800cfd0:	0800cfa9 	.word	0x0800cfa9
 800cfd4:	0800cfa9 	.word	0x0800cfa9
 800cfd8:	0800d02d 	.word	0x0800d02d
 800cfdc:	0800cfa9 	.word	0x0800cfa9
 800cfe0:	0800cfa9 	.word	0x0800cfa9
 800cfe4:	0800cfa9 	.word	0x0800cfa9
 800cfe8:	0800cfa9 	.word	0x0800cfa9
 800cfec:	0800d12d 	.word	0x0800d12d
 800cff0:	0800d057 	.word	0x0800d057
 800cff4:	0800d0e7 	.word	0x0800d0e7
 800cff8:	0800cfa9 	.word	0x0800cfa9
 800cffc:	0800cfa9 	.word	0x0800cfa9
 800d000:	0800d14f 	.word	0x0800d14f
 800d004:	0800cfa9 	.word	0x0800cfa9
 800d008:	0800d057 	.word	0x0800d057
 800d00c:	0800cfa9 	.word	0x0800cfa9
 800d010:	0800cfa9 	.word	0x0800cfa9
 800d014:	0800d0ef 	.word	0x0800d0ef
 800d018:	6833      	ldr	r3, [r6, #0]
 800d01a:	1d1a      	adds	r2, r3, #4
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	6032      	str	r2, [r6, #0]
 800d020:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d024:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d028:	2301      	movs	r3, #1
 800d02a:	e09d      	b.n	800d168 <_printf_i+0x1e8>
 800d02c:	6833      	ldr	r3, [r6, #0]
 800d02e:	6820      	ldr	r0, [r4, #0]
 800d030:	1d19      	adds	r1, r3, #4
 800d032:	6031      	str	r1, [r6, #0]
 800d034:	0606      	lsls	r6, r0, #24
 800d036:	d501      	bpl.n	800d03c <_printf_i+0xbc>
 800d038:	681d      	ldr	r5, [r3, #0]
 800d03a:	e003      	b.n	800d044 <_printf_i+0xc4>
 800d03c:	0645      	lsls	r5, r0, #25
 800d03e:	d5fb      	bpl.n	800d038 <_printf_i+0xb8>
 800d040:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d044:	2d00      	cmp	r5, #0
 800d046:	da03      	bge.n	800d050 <_printf_i+0xd0>
 800d048:	232d      	movs	r3, #45	@ 0x2d
 800d04a:	426d      	negs	r5, r5
 800d04c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d050:	4859      	ldr	r0, [pc, #356]	@ (800d1b8 <_printf_i+0x238>)
 800d052:	230a      	movs	r3, #10
 800d054:	e011      	b.n	800d07a <_printf_i+0xfa>
 800d056:	6821      	ldr	r1, [r4, #0]
 800d058:	6833      	ldr	r3, [r6, #0]
 800d05a:	0608      	lsls	r0, r1, #24
 800d05c:	f853 5b04 	ldr.w	r5, [r3], #4
 800d060:	d402      	bmi.n	800d068 <_printf_i+0xe8>
 800d062:	0649      	lsls	r1, r1, #25
 800d064:	bf48      	it	mi
 800d066:	b2ad      	uxthmi	r5, r5
 800d068:	2f6f      	cmp	r7, #111	@ 0x6f
 800d06a:	4853      	ldr	r0, [pc, #332]	@ (800d1b8 <_printf_i+0x238>)
 800d06c:	6033      	str	r3, [r6, #0]
 800d06e:	bf14      	ite	ne
 800d070:	230a      	movne	r3, #10
 800d072:	2308      	moveq	r3, #8
 800d074:	2100      	movs	r1, #0
 800d076:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d07a:	6866      	ldr	r6, [r4, #4]
 800d07c:	60a6      	str	r6, [r4, #8]
 800d07e:	2e00      	cmp	r6, #0
 800d080:	bfa2      	ittt	ge
 800d082:	6821      	ldrge	r1, [r4, #0]
 800d084:	f021 0104 	bicge.w	r1, r1, #4
 800d088:	6021      	strge	r1, [r4, #0]
 800d08a:	b90d      	cbnz	r5, 800d090 <_printf_i+0x110>
 800d08c:	2e00      	cmp	r6, #0
 800d08e:	d04b      	beq.n	800d128 <_printf_i+0x1a8>
 800d090:	4616      	mov	r6, r2
 800d092:	fbb5 f1f3 	udiv	r1, r5, r3
 800d096:	fb03 5711 	mls	r7, r3, r1, r5
 800d09a:	5dc7      	ldrb	r7, [r0, r7]
 800d09c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d0a0:	462f      	mov	r7, r5
 800d0a2:	42bb      	cmp	r3, r7
 800d0a4:	460d      	mov	r5, r1
 800d0a6:	d9f4      	bls.n	800d092 <_printf_i+0x112>
 800d0a8:	2b08      	cmp	r3, #8
 800d0aa:	d10b      	bne.n	800d0c4 <_printf_i+0x144>
 800d0ac:	6823      	ldr	r3, [r4, #0]
 800d0ae:	07df      	lsls	r7, r3, #31
 800d0b0:	d508      	bpl.n	800d0c4 <_printf_i+0x144>
 800d0b2:	6923      	ldr	r3, [r4, #16]
 800d0b4:	6861      	ldr	r1, [r4, #4]
 800d0b6:	4299      	cmp	r1, r3
 800d0b8:	bfde      	ittt	le
 800d0ba:	2330      	movle	r3, #48	@ 0x30
 800d0bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d0c0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800d0c4:	1b92      	subs	r2, r2, r6
 800d0c6:	6122      	str	r2, [r4, #16]
 800d0c8:	f8cd a000 	str.w	sl, [sp]
 800d0cc:	464b      	mov	r3, r9
 800d0ce:	aa03      	add	r2, sp, #12
 800d0d0:	4621      	mov	r1, r4
 800d0d2:	4640      	mov	r0, r8
 800d0d4:	f7ff fee6 	bl	800cea4 <_printf_common>
 800d0d8:	3001      	adds	r0, #1
 800d0da:	d14a      	bne.n	800d172 <_printf_i+0x1f2>
 800d0dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d0e0:	b004      	add	sp, #16
 800d0e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0e6:	6823      	ldr	r3, [r4, #0]
 800d0e8:	f043 0320 	orr.w	r3, r3, #32
 800d0ec:	6023      	str	r3, [r4, #0]
 800d0ee:	4833      	ldr	r0, [pc, #204]	@ (800d1bc <_printf_i+0x23c>)
 800d0f0:	2778      	movs	r7, #120	@ 0x78
 800d0f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d0f6:	6823      	ldr	r3, [r4, #0]
 800d0f8:	6831      	ldr	r1, [r6, #0]
 800d0fa:	061f      	lsls	r7, r3, #24
 800d0fc:	f851 5b04 	ldr.w	r5, [r1], #4
 800d100:	d402      	bmi.n	800d108 <_printf_i+0x188>
 800d102:	065f      	lsls	r7, r3, #25
 800d104:	bf48      	it	mi
 800d106:	b2ad      	uxthmi	r5, r5
 800d108:	6031      	str	r1, [r6, #0]
 800d10a:	07d9      	lsls	r1, r3, #31
 800d10c:	bf44      	itt	mi
 800d10e:	f043 0320 	orrmi.w	r3, r3, #32
 800d112:	6023      	strmi	r3, [r4, #0]
 800d114:	b11d      	cbz	r5, 800d11e <_printf_i+0x19e>
 800d116:	2310      	movs	r3, #16
 800d118:	e7ac      	b.n	800d074 <_printf_i+0xf4>
 800d11a:	4827      	ldr	r0, [pc, #156]	@ (800d1b8 <_printf_i+0x238>)
 800d11c:	e7e9      	b.n	800d0f2 <_printf_i+0x172>
 800d11e:	6823      	ldr	r3, [r4, #0]
 800d120:	f023 0320 	bic.w	r3, r3, #32
 800d124:	6023      	str	r3, [r4, #0]
 800d126:	e7f6      	b.n	800d116 <_printf_i+0x196>
 800d128:	4616      	mov	r6, r2
 800d12a:	e7bd      	b.n	800d0a8 <_printf_i+0x128>
 800d12c:	6833      	ldr	r3, [r6, #0]
 800d12e:	6825      	ldr	r5, [r4, #0]
 800d130:	6961      	ldr	r1, [r4, #20]
 800d132:	1d18      	adds	r0, r3, #4
 800d134:	6030      	str	r0, [r6, #0]
 800d136:	062e      	lsls	r6, r5, #24
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	d501      	bpl.n	800d140 <_printf_i+0x1c0>
 800d13c:	6019      	str	r1, [r3, #0]
 800d13e:	e002      	b.n	800d146 <_printf_i+0x1c6>
 800d140:	0668      	lsls	r0, r5, #25
 800d142:	d5fb      	bpl.n	800d13c <_printf_i+0x1bc>
 800d144:	8019      	strh	r1, [r3, #0]
 800d146:	2300      	movs	r3, #0
 800d148:	6123      	str	r3, [r4, #16]
 800d14a:	4616      	mov	r6, r2
 800d14c:	e7bc      	b.n	800d0c8 <_printf_i+0x148>
 800d14e:	6833      	ldr	r3, [r6, #0]
 800d150:	1d1a      	adds	r2, r3, #4
 800d152:	6032      	str	r2, [r6, #0]
 800d154:	681e      	ldr	r6, [r3, #0]
 800d156:	6862      	ldr	r2, [r4, #4]
 800d158:	2100      	movs	r1, #0
 800d15a:	4630      	mov	r0, r6
 800d15c:	f7f3 f840 	bl	80001e0 <memchr>
 800d160:	b108      	cbz	r0, 800d166 <_printf_i+0x1e6>
 800d162:	1b80      	subs	r0, r0, r6
 800d164:	6060      	str	r0, [r4, #4]
 800d166:	6863      	ldr	r3, [r4, #4]
 800d168:	6123      	str	r3, [r4, #16]
 800d16a:	2300      	movs	r3, #0
 800d16c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d170:	e7aa      	b.n	800d0c8 <_printf_i+0x148>
 800d172:	6923      	ldr	r3, [r4, #16]
 800d174:	4632      	mov	r2, r6
 800d176:	4649      	mov	r1, r9
 800d178:	4640      	mov	r0, r8
 800d17a:	47d0      	blx	sl
 800d17c:	3001      	adds	r0, #1
 800d17e:	d0ad      	beq.n	800d0dc <_printf_i+0x15c>
 800d180:	6823      	ldr	r3, [r4, #0]
 800d182:	079b      	lsls	r3, r3, #30
 800d184:	d413      	bmi.n	800d1ae <_printf_i+0x22e>
 800d186:	68e0      	ldr	r0, [r4, #12]
 800d188:	9b03      	ldr	r3, [sp, #12]
 800d18a:	4298      	cmp	r0, r3
 800d18c:	bfb8      	it	lt
 800d18e:	4618      	movlt	r0, r3
 800d190:	e7a6      	b.n	800d0e0 <_printf_i+0x160>
 800d192:	2301      	movs	r3, #1
 800d194:	4632      	mov	r2, r6
 800d196:	4649      	mov	r1, r9
 800d198:	4640      	mov	r0, r8
 800d19a:	47d0      	blx	sl
 800d19c:	3001      	adds	r0, #1
 800d19e:	d09d      	beq.n	800d0dc <_printf_i+0x15c>
 800d1a0:	3501      	adds	r5, #1
 800d1a2:	68e3      	ldr	r3, [r4, #12]
 800d1a4:	9903      	ldr	r1, [sp, #12]
 800d1a6:	1a5b      	subs	r3, r3, r1
 800d1a8:	42ab      	cmp	r3, r5
 800d1aa:	dcf2      	bgt.n	800d192 <_printf_i+0x212>
 800d1ac:	e7eb      	b.n	800d186 <_printf_i+0x206>
 800d1ae:	2500      	movs	r5, #0
 800d1b0:	f104 0619 	add.w	r6, r4, #25
 800d1b4:	e7f5      	b.n	800d1a2 <_printf_i+0x222>
 800d1b6:	bf00      	nop
 800d1b8:	0800f9d2 	.word	0x0800f9d2
 800d1bc:	0800f9e3 	.word	0x0800f9e3

0800d1c0 <std>:
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	b510      	push	{r4, lr}
 800d1c4:	4604      	mov	r4, r0
 800d1c6:	e9c0 3300 	strd	r3, r3, [r0]
 800d1ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d1ce:	6083      	str	r3, [r0, #8]
 800d1d0:	8181      	strh	r1, [r0, #12]
 800d1d2:	6643      	str	r3, [r0, #100]	@ 0x64
 800d1d4:	81c2      	strh	r2, [r0, #14]
 800d1d6:	6183      	str	r3, [r0, #24]
 800d1d8:	4619      	mov	r1, r3
 800d1da:	2208      	movs	r2, #8
 800d1dc:	305c      	adds	r0, #92	@ 0x5c
 800d1de:	f000 f928 	bl	800d432 <memset>
 800d1e2:	4b0d      	ldr	r3, [pc, #52]	@ (800d218 <std+0x58>)
 800d1e4:	6263      	str	r3, [r4, #36]	@ 0x24
 800d1e6:	4b0d      	ldr	r3, [pc, #52]	@ (800d21c <std+0x5c>)
 800d1e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d1ea:	4b0d      	ldr	r3, [pc, #52]	@ (800d220 <std+0x60>)
 800d1ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d1ee:	4b0d      	ldr	r3, [pc, #52]	@ (800d224 <std+0x64>)
 800d1f0:	6323      	str	r3, [r4, #48]	@ 0x30
 800d1f2:	4b0d      	ldr	r3, [pc, #52]	@ (800d228 <std+0x68>)
 800d1f4:	6224      	str	r4, [r4, #32]
 800d1f6:	429c      	cmp	r4, r3
 800d1f8:	d006      	beq.n	800d208 <std+0x48>
 800d1fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d1fe:	4294      	cmp	r4, r2
 800d200:	d002      	beq.n	800d208 <std+0x48>
 800d202:	33d0      	adds	r3, #208	@ 0xd0
 800d204:	429c      	cmp	r4, r3
 800d206:	d105      	bne.n	800d214 <std+0x54>
 800d208:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d20c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d210:	f000 b9e2 	b.w	800d5d8 <__retarget_lock_init_recursive>
 800d214:	bd10      	pop	{r4, pc}
 800d216:	bf00      	nop
 800d218:	0800d3ad 	.word	0x0800d3ad
 800d21c:	0800d3cf 	.word	0x0800d3cf
 800d220:	0800d407 	.word	0x0800d407
 800d224:	0800d42b 	.word	0x0800d42b
 800d228:	200050a0 	.word	0x200050a0

0800d22c <stdio_exit_handler>:
 800d22c:	4a02      	ldr	r2, [pc, #8]	@ (800d238 <stdio_exit_handler+0xc>)
 800d22e:	4903      	ldr	r1, [pc, #12]	@ (800d23c <stdio_exit_handler+0x10>)
 800d230:	4803      	ldr	r0, [pc, #12]	@ (800d240 <stdio_exit_handler+0x14>)
 800d232:	f000 b869 	b.w	800d308 <_fwalk_sglue>
 800d236:	bf00      	nop
 800d238:	200000f0 	.word	0x200000f0
 800d23c:	0800ef55 	.word	0x0800ef55
 800d240:	20000100 	.word	0x20000100

0800d244 <cleanup_stdio>:
 800d244:	6841      	ldr	r1, [r0, #4]
 800d246:	4b0c      	ldr	r3, [pc, #48]	@ (800d278 <cleanup_stdio+0x34>)
 800d248:	4299      	cmp	r1, r3
 800d24a:	b510      	push	{r4, lr}
 800d24c:	4604      	mov	r4, r0
 800d24e:	d001      	beq.n	800d254 <cleanup_stdio+0x10>
 800d250:	f001 fe80 	bl	800ef54 <_fflush_r>
 800d254:	68a1      	ldr	r1, [r4, #8]
 800d256:	4b09      	ldr	r3, [pc, #36]	@ (800d27c <cleanup_stdio+0x38>)
 800d258:	4299      	cmp	r1, r3
 800d25a:	d002      	beq.n	800d262 <cleanup_stdio+0x1e>
 800d25c:	4620      	mov	r0, r4
 800d25e:	f001 fe79 	bl	800ef54 <_fflush_r>
 800d262:	68e1      	ldr	r1, [r4, #12]
 800d264:	4b06      	ldr	r3, [pc, #24]	@ (800d280 <cleanup_stdio+0x3c>)
 800d266:	4299      	cmp	r1, r3
 800d268:	d004      	beq.n	800d274 <cleanup_stdio+0x30>
 800d26a:	4620      	mov	r0, r4
 800d26c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d270:	f001 be70 	b.w	800ef54 <_fflush_r>
 800d274:	bd10      	pop	{r4, pc}
 800d276:	bf00      	nop
 800d278:	200050a0 	.word	0x200050a0
 800d27c:	20005108 	.word	0x20005108
 800d280:	20005170 	.word	0x20005170

0800d284 <global_stdio_init.part.0>:
 800d284:	b510      	push	{r4, lr}
 800d286:	4b0b      	ldr	r3, [pc, #44]	@ (800d2b4 <global_stdio_init.part.0+0x30>)
 800d288:	4c0b      	ldr	r4, [pc, #44]	@ (800d2b8 <global_stdio_init.part.0+0x34>)
 800d28a:	4a0c      	ldr	r2, [pc, #48]	@ (800d2bc <global_stdio_init.part.0+0x38>)
 800d28c:	601a      	str	r2, [r3, #0]
 800d28e:	4620      	mov	r0, r4
 800d290:	2200      	movs	r2, #0
 800d292:	2104      	movs	r1, #4
 800d294:	f7ff ff94 	bl	800d1c0 <std>
 800d298:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d29c:	2201      	movs	r2, #1
 800d29e:	2109      	movs	r1, #9
 800d2a0:	f7ff ff8e 	bl	800d1c0 <std>
 800d2a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d2a8:	2202      	movs	r2, #2
 800d2aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d2ae:	2112      	movs	r1, #18
 800d2b0:	f7ff bf86 	b.w	800d1c0 <std>
 800d2b4:	200051d8 	.word	0x200051d8
 800d2b8:	200050a0 	.word	0x200050a0
 800d2bc:	0800d22d 	.word	0x0800d22d

0800d2c0 <__sfp_lock_acquire>:
 800d2c0:	4801      	ldr	r0, [pc, #4]	@ (800d2c8 <__sfp_lock_acquire+0x8>)
 800d2c2:	f000 b98a 	b.w	800d5da <__retarget_lock_acquire_recursive>
 800d2c6:	bf00      	nop
 800d2c8:	200051e1 	.word	0x200051e1

0800d2cc <__sfp_lock_release>:
 800d2cc:	4801      	ldr	r0, [pc, #4]	@ (800d2d4 <__sfp_lock_release+0x8>)
 800d2ce:	f000 b985 	b.w	800d5dc <__retarget_lock_release_recursive>
 800d2d2:	bf00      	nop
 800d2d4:	200051e1 	.word	0x200051e1

0800d2d8 <__sinit>:
 800d2d8:	b510      	push	{r4, lr}
 800d2da:	4604      	mov	r4, r0
 800d2dc:	f7ff fff0 	bl	800d2c0 <__sfp_lock_acquire>
 800d2e0:	6a23      	ldr	r3, [r4, #32]
 800d2e2:	b11b      	cbz	r3, 800d2ec <__sinit+0x14>
 800d2e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d2e8:	f7ff bff0 	b.w	800d2cc <__sfp_lock_release>
 800d2ec:	4b04      	ldr	r3, [pc, #16]	@ (800d300 <__sinit+0x28>)
 800d2ee:	6223      	str	r3, [r4, #32]
 800d2f0:	4b04      	ldr	r3, [pc, #16]	@ (800d304 <__sinit+0x2c>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d1f5      	bne.n	800d2e4 <__sinit+0xc>
 800d2f8:	f7ff ffc4 	bl	800d284 <global_stdio_init.part.0>
 800d2fc:	e7f2      	b.n	800d2e4 <__sinit+0xc>
 800d2fe:	bf00      	nop
 800d300:	0800d245 	.word	0x0800d245
 800d304:	200051d8 	.word	0x200051d8

0800d308 <_fwalk_sglue>:
 800d308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d30c:	4607      	mov	r7, r0
 800d30e:	4688      	mov	r8, r1
 800d310:	4614      	mov	r4, r2
 800d312:	2600      	movs	r6, #0
 800d314:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d318:	f1b9 0901 	subs.w	r9, r9, #1
 800d31c:	d505      	bpl.n	800d32a <_fwalk_sglue+0x22>
 800d31e:	6824      	ldr	r4, [r4, #0]
 800d320:	2c00      	cmp	r4, #0
 800d322:	d1f7      	bne.n	800d314 <_fwalk_sglue+0xc>
 800d324:	4630      	mov	r0, r6
 800d326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d32a:	89ab      	ldrh	r3, [r5, #12]
 800d32c:	2b01      	cmp	r3, #1
 800d32e:	d907      	bls.n	800d340 <_fwalk_sglue+0x38>
 800d330:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d334:	3301      	adds	r3, #1
 800d336:	d003      	beq.n	800d340 <_fwalk_sglue+0x38>
 800d338:	4629      	mov	r1, r5
 800d33a:	4638      	mov	r0, r7
 800d33c:	47c0      	blx	r8
 800d33e:	4306      	orrs	r6, r0
 800d340:	3568      	adds	r5, #104	@ 0x68
 800d342:	e7e9      	b.n	800d318 <_fwalk_sglue+0x10>

0800d344 <sniprintf>:
 800d344:	b40c      	push	{r2, r3}
 800d346:	b530      	push	{r4, r5, lr}
 800d348:	4b17      	ldr	r3, [pc, #92]	@ (800d3a8 <sniprintf+0x64>)
 800d34a:	1e0c      	subs	r4, r1, #0
 800d34c:	681d      	ldr	r5, [r3, #0]
 800d34e:	b09d      	sub	sp, #116	@ 0x74
 800d350:	da08      	bge.n	800d364 <sniprintf+0x20>
 800d352:	238b      	movs	r3, #139	@ 0x8b
 800d354:	602b      	str	r3, [r5, #0]
 800d356:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d35a:	b01d      	add	sp, #116	@ 0x74
 800d35c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d360:	b002      	add	sp, #8
 800d362:	4770      	bx	lr
 800d364:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d368:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d36c:	bf14      	ite	ne
 800d36e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800d372:	4623      	moveq	r3, r4
 800d374:	9304      	str	r3, [sp, #16]
 800d376:	9307      	str	r3, [sp, #28]
 800d378:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d37c:	9002      	str	r0, [sp, #8]
 800d37e:	9006      	str	r0, [sp, #24]
 800d380:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d384:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d386:	ab21      	add	r3, sp, #132	@ 0x84
 800d388:	a902      	add	r1, sp, #8
 800d38a:	4628      	mov	r0, r5
 800d38c:	9301      	str	r3, [sp, #4]
 800d38e:	f001 fc61 	bl	800ec54 <_svfiprintf_r>
 800d392:	1c43      	adds	r3, r0, #1
 800d394:	bfbc      	itt	lt
 800d396:	238b      	movlt	r3, #139	@ 0x8b
 800d398:	602b      	strlt	r3, [r5, #0]
 800d39a:	2c00      	cmp	r4, #0
 800d39c:	d0dd      	beq.n	800d35a <sniprintf+0x16>
 800d39e:	9b02      	ldr	r3, [sp, #8]
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	701a      	strb	r2, [r3, #0]
 800d3a4:	e7d9      	b.n	800d35a <sniprintf+0x16>
 800d3a6:	bf00      	nop
 800d3a8:	200000fc 	.word	0x200000fc

0800d3ac <__sread>:
 800d3ac:	b510      	push	{r4, lr}
 800d3ae:	460c      	mov	r4, r1
 800d3b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3b4:	f000 f8c2 	bl	800d53c <_read_r>
 800d3b8:	2800      	cmp	r0, #0
 800d3ba:	bfab      	itete	ge
 800d3bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d3be:	89a3      	ldrhlt	r3, [r4, #12]
 800d3c0:	181b      	addge	r3, r3, r0
 800d3c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d3c6:	bfac      	ite	ge
 800d3c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d3ca:	81a3      	strhlt	r3, [r4, #12]
 800d3cc:	bd10      	pop	{r4, pc}

0800d3ce <__swrite>:
 800d3ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3d2:	461f      	mov	r7, r3
 800d3d4:	898b      	ldrh	r3, [r1, #12]
 800d3d6:	05db      	lsls	r3, r3, #23
 800d3d8:	4605      	mov	r5, r0
 800d3da:	460c      	mov	r4, r1
 800d3dc:	4616      	mov	r6, r2
 800d3de:	d505      	bpl.n	800d3ec <__swrite+0x1e>
 800d3e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3e4:	2302      	movs	r3, #2
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	f000 f896 	bl	800d518 <_lseek_r>
 800d3ec:	89a3      	ldrh	r3, [r4, #12]
 800d3ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d3f6:	81a3      	strh	r3, [r4, #12]
 800d3f8:	4632      	mov	r2, r6
 800d3fa:	463b      	mov	r3, r7
 800d3fc:	4628      	mov	r0, r5
 800d3fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d402:	f000 b8ad 	b.w	800d560 <_write_r>

0800d406 <__sseek>:
 800d406:	b510      	push	{r4, lr}
 800d408:	460c      	mov	r4, r1
 800d40a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d40e:	f000 f883 	bl	800d518 <_lseek_r>
 800d412:	1c43      	adds	r3, r0, #1
 800d414:	89a3      	ldrh	r3, [r4, #12]
 800d416:	bf15      	itete	ne
 800d418:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d41a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d41e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d422:	81a3      	strheq	r3, [r4, #12]
 800d424:	bf18      	it	ne
 800d426:	81a3      	strhne	r3, [r4, #12]
 800d428:	bd10      	pop	{r4, pc}

0800d42a <__sclose>:
 800d42a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d42e:	f000 b80d 	b.w	800d44c <_close_r>

0800d432 <memset>:
 800d432:	4402      	add	r2, r0
 800d434:	4603      	mov	r3, r0
 800d436:	4293      	cmp	r3, r2
 800d438:	d100      	bne.n	800d43c <memset+0xa>
 800d43a:	4770      	bx	lr
 800d43c:	f803 1b01 	strb.w	r1, [r3], #1
 800d440:	e7f9      	b.n	800d436 <memset+0x4>
	...

0800d444 <_localeconv_r>:
 800d444:	4800      	ldr	r0, [pc, #0]	@ (800d448 <_localeconv_r+0x4>)
 800d446:	4770      	bx	lr
 800d448:	2000023c 	.word	0x2000023c

0800d44c <_close_r>:
 800d44c:	b538      	push	{r3, r4, r5, lr}
 800d44e:	4d06      	ldr	r5, [pc, #24]	@ (800d468 <_close_r+0x1c>)
 800d450:	2300      	movs	r3, #0
 800d452:	4604      	mov	r4, r0
 800d454:	4608      	mov	r0, r1
 800d456:	602b      	str	r3, [r5, #0]
 800d458:	f7f6 fe02 	bl	8004060 <_close>
 800d45c:	1c43      	adds	r3, r0, #1
 800d45e:	d102      	bne.n	800d466 <_close_r+0x1a>
 800d460:	682b      	ldr	r3, [r5, #0]
 800d462:	b103      	cbz	r3, 800d466 <_close_r+0x1a>
 800d464:	6023      	str	r3, [r4, #0]
 800d466:	bd38      	pop	{r3, r4, r5, pc}
 800d468:	200051dc 	.word	0x200051dc

0800d46c <_reclaim_reent>:
 800d46c:	4b29      	ldr	r3, [pc, #164]	@ (800d514 <_reclaim_reent+0xa8>)
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	4283      	cmp	r3, r0
 800d472:	b570      	push	{r4, r5, r6, lr}
 800d474:	4604      	mov	r4, r0
 800d476:	d04b      	beq.n	800d510 <_reclaim_reent+0xa4>
 800d478:	69c3      	ldr	r3, [r0, #28]
 800d47a:	b1ab      	cbz	r3, 800d4a8 <_reclaim_reent+0x3c>
 800d47c:	68db      	ldr	r3, [r3, #12]
 800d47e:	b16b      	cbz	r3, 800d49c <_reclaim_reent+0x30>
 800d480:	2500      	movs	r5, #0
 800d482:	69e3      	ldr	r3, [r4, #28]
 800d484:	68db      	ldr	r3, [r3, #12]
 800d486:	5959      	ldr	r1, [r3, r5]
 800d488:	2900      	cmp	r1, #0
 800d48a:	d13b      	bne.n	800d504 <_reclaim_reent+0x98>
 800d48c:	3504      	adds	r5, #4
 800d48e:	2d80      	cmp	r5, #128	@ 0x80
 800d490:	d1f7      	bne.n	800d482 <_reclaim_reent+0x16>
 800d492:	69e3      	ldr	r3, [r4, #28]
 800d494:	4620      	mov	r0, r4
 800d496:	68d9      	ldr	r1, [r3, #12]
 800d498:	f000 fefe 	bl	800e298 <_free_r>
 800d49c:	69e3      	ldr	r3, [r4, #28]
 800d49e:	6819      	ldr	r1, [r3, #0]
 800d4a0:	b111      	cbz	r1, 800d4a8 <_reclaim_reent+0x3c>
 800d4a2:	4620      	mov	r0, r4
 800d4a4:	f000 fef8 	bl	800e298 <_free_r>
 800d4a8:	6961      	ldr	r1, [r4, #20]
 800d4aa:	b111      	cbz	r1, 800d4b2 <_reclaim_reent+0x46>
 800d4ac:	4620      	mov	r0, r4
 800d4ae:	f000 fef3 	bl	800e298 <_free_r>
 800d4b2:	69e1      	ldr	r1, [r4, #28]
 800d4b4:	b111      	cbz	r1, 800d4bc <_reclaim_reent+0x50>
 800d4b6:	4620      	mov	r0, r4
 800d4b8:	f000 feee 	bl	800e298 <_free_r>
 800d4bc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d4be:	b111      	cbz	r1, 800d4c6 <_reclaim_reent+0x5a>
 800d4c0:	4620      	mov	r0, r4
 800d4c2:	f000 fee9 	bl	800e298 <_free_r>
 800d4c6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d4c8:	b111      	cbz	r1, 800d4d0 <_reclaim_reent+0x64>
 800d4ca:	4620      	mov	r0, r4
 800d4cc:	f000 fee4 	bl	800e298 <_free_r>
 800d4d0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800d4d2:	b111      	cbz	r1, 800d4da <_reclaim_reent+0x6e>
 800d4d4:	4620      	mov	r0, r4
 800d4d6:	f000 fedf 	bl	800e298 <_free_r>
 800d4da:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d4dc:	b111      	cbz	r1, 800d4e4 <_reclaim_reent+0x78>
 800d4de:	4620      	mov	r0, r4
 800d4e0:	f000 feda 	bl	800e298 <_free_r>
 800d4e4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800d4e6:	b111      	cbz	r1, 800d4ee <_reclaim_reent+0x82>
 800d4e8:	4620      	mov	r0, r4
 800d4ea:	f000 fed5 	bl	800e298 <_free_r>
 800d4ee:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d4f0:	b111      	cbz	r1, 800d4f8 <_reclaim_reent+0x8c>
 800d4f2:	4620      	mov	r0, r4
 800d4f4:	f000 fed0 	bl	800e298 <_free_r>
 800d4f8:	6a23      	ldr	r3, [r4, #32]
 800d4fa:	b14b      	cbz	r3, 800d510 <_reclaim_reent+0xa4>
 800d4fc:	4620      	mov	r0, r4
 800d4fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d502:	4718      	bx	r3
 800d504:	680e      	ldr	r6, [r1, #0]
 800d506:	4620      	mov	r0, r4
 800d508:	f000 fec6 	bl	800e298 <_free_r>
 800d50c:	4631      	mov	r1, r6
 800d50e:	e7bb      	b.n	800d488 <_reclaim_reent+0x1c>
 800d510:	bd70      	pop	{r4, r5, r6, pc}
 800d512:	bf00      	nop
 800d514:	200000fc 	.word	0x200000fc

0800d518 <_lseek_r>:
 800d518:	b538      	push	{r3, r4, r5, lr}
 800d51a:	4d07      	ldr	r5, [pc, #28]	@ (800d538 <_lseek_r+0x20>)
 800d51c:	4604      	mov	r4, r0
 800d51e:	4608      	mov	r0, r1
 800d520:	4611      	mov	r1, r2
 800d522:	2200      	movs	r2, #0
 800d524:	602a      	str	r2, [r5, #0]
 800d526:	461a      	mov	r2, r3
 800d528:	f7f6 fdc1 	bl	80040ae <_lseek>
 800d52c:	1c43      	adds	r3, r0, #1
 800d52e:	d102      	bne.n	800d536 <_lseek_r+0x1e>
 800d530:	682b      	ldr	r3, [r5, #0]
 800d532:	b103      	cbz	r3, 800d536 <_lseek_r+0x1e>
 800d534:	6023      	str	r3, [r4, #0]
 800d536:	bd38      	pop	{r3, r4, r5, pc}
 800d538:	200051dc 	.word	0x200051dc

0800d53c <_read_r>:
 800d53c:	b538      	push	{r3, r4, r5, lr}
 800d53e:	4d07      	ldr	r5, [pc, #28]	@ (800d55c <_read_r+0x20>)
 800d540:	4604      	mov	r4, r0
 800d542:	4608      	mov	r0, r1
 800d544:	4611      	mov	r1, r2
 800d546:	2200      	movs	r2, #0
 800d548:	602a      	str	r2, [r5, #0]
 800d54a:	461a      	mov	r2, r3
 800d54c:	f7f6 fd4f 	bl	8003fee <_read>
 800d550:	1c43      	adds	r3, r0, #1
 800d552:	d102      	bne.n	800d55a <_read_r+0x1e>
 800d554:	682b      	ldr	r3, [r5, #0]
 800d556:	b103      	cbz	r3, 800d55a <_read_r+0x1e>
 800d558:	6023      	str	r3, [r4, #0]
 800d55a:	bd38      	pop	{r3, r4, r5, pc}
 800d55c:	200051dc 	.word	0x200051dc

0800d560 <_write_r>:
 800d560:	b538      	push	{r3, r4, r5, lr}
 800d562:	4d07      	ldr	r5, [pc, #28]	@ (800d580 <_write_r+0x20>)
 800d564:	4604      	mov	r4, r0
 800d566:	4608      	mov	r0, r1
 800d568:	4611      	mov	r1, r2
 800d56a:	2200      	movs	r2, #0
 800d56c:	602a      	str	r2, [r5, #0]
 800d56e:	461a      	mov	r2, r3
 800d570:	f7f6 fd5a 	bl	8004028 <_write>
 800d574:	1c43      	adds	r3, r0, #1
 800d576:	d102      	bne.n	800d57e <_write_r+0x1e>
 800d578:	682b      	ldr	r3, [r5, #0]
 800d57a:	b103      	cbz	r3, 800d57e <_write_r+0x1e>
 800d57c:	6023      	str	r3, [r4, #0]
 800d57e:	bd38      	pop	{r3, r4, r5, pc}
 800d580:	200051dc 	.word	0x200051dc

0800d584 <__errno>:
 800d584:	4b01      	ldr	r3, [pc, #4]	@ (800d58c <__errno+0x8>)
 800d586:	6818      	ldr	r0, [r3, #0]
 800d588:	4770      	bx	lr
 800d58a:	bf00      	nop
 800d58c:	200000fc 	.word	0x200000fc

0800d590 <__libc_init_array>:
 800d590:	b570      	push	{r4, r5, r6, lr}
 800d592:	4d0d      	ldr	r5, [pc, #52]	@ (800d5c8 <__libc_init_array+0x38>)
 800d594:	4c0d      	ldr	r4, [pc, #52]	@ (800d5cc <__libc_init_array+0x3c>)
 800d596:	1b64      	subs	r4, r4, r5
 800d598:	10a4      	asrs	r4, r4, #2
 800d59a:	2600      	movs	r6, #0
 800d59c:	42a6      	cmp	r6, r4
 800d59e:	d109      	bne.n	800d5b4 <__libc_init_array+0x24>
 800d5a0:	4d0b      	ldr	r5, [pc, #44]	@ (800d5d0 <__libc_init_array+0x40>)
 800d5a2:	4c0c      	ldr	r4, [pc, #48]	@ (800d5d4 <__libc_init_array+0x44>)
 800d5a4:	f002 f866 	bl	800f674 <_init>
 800d5a8:	1b64      	subs	r4, r4, r5
 800d5aa:	10a4      	asrs	r4, r4, #2
 800d5ac:	2600      	movs	r6, #0
 800d5ae:	42a6      	cmp	r6, r4
 800d5b0:	d105      	bne.n	800d5be <__libc_init_array+0x2e>
 800d5b2:	bd70      	pop	{r4, r5, r6, pc}
 800d5b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d5b8:	4798      	blx	r3
 800d5ba:	3601      	adds	r6, #1
 800d5bc:	e7ee      	b.n	800d59c <__libc_init_array+0xc>
 800d5be:	f855 3b04 	ldr.w	r3, [r5], #4
 800d5c2:	4798      	blx	r3
 800d5c4:	3601      	adds	r6, #1
 800d5c6:	e7f2      	b.n	800d5ae <__libc_init_array+0x1e>
 800d5c8:	0800fd38 	.word	0x0800fd38
 800d5cc:	0800fd38 	.word	0x0800fd38
 800d5d0:	0800fd38 	.word	0x0800fd38
 800d5d4:	0800fd3c 	.word	0x0800fd3c

0800d5d8 <__retarget_lock_init_recursive>:
 800d5d8:	4770      	bx	lr

0800d5da <__retarget_lock_acquire_recursive>:
 800d5da:	4770      	bx	lr

0800d5dc <__retarget_lock_release_recursive>:
 800d5dc:	4770      	bx	lr

0800d5de <memcpy>:
 800d5de:	440a      	add	r2, r1
 800d5e0:	4291      	cmp	r1, r2
 800d5e2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d5e6:	d100      	bne.n	800d5ea <memcpy+0xc>
 800d5e8:	4770      	bx	lr
 800d5ea:	b510      	push	{r4, lr}
 800d5ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d5f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d5f4:	4291      	cmp	r1, r2
 800d5f6:	d1f9      	bne.n	800d5ec <memcpy+0xe>
 800d5f8:	bd10      	pop	{r4, pc}

0800d5fa <quorem>:
 800d5fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5fe:	6903      	ldr	r3, [r0, #16]
 800d600:	690c      	ldr	r4, [r1, #16]
 800d602:	42a3      	cmp	r3, r4
 800d604:	4607      	mov	r7, r0
 800d606:	db7e      	blt.n	800d706 <quorem+0x10c>
 800d608:	3c01      	subs	r4, #1
 800d60a:	f101 0814 	add.w	r8, r1, #20
 800d60e:	00a3      	lsls	r3, r4, #2
 800d610:	f100 0514 	add.w	r5, r0, #20
 800d614:	9300      	str	r3, [sp, #0]
 800d616:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d61a:	9301      	str	r3, [sp, #4]
 800d61c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d620:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d624:	3301      	adds	r3, #1
 800d626:	429a      	cmp	r2, r3
 800d628:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d62c:	fbb2 f6f3 	udiv	r6, r2, r3
 800d630:	d32e      	bcc.n	800d690 <quorem+0x96>
 800d632:	f04f 0a00 	mov.w	sl, #0
 800d636:	46c4      	mov	ip, r8
 800d638:	46ae      	mov	lr, r5
 800d63a:	46d3      	mov	fp, sl
 800d63c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d640:	b298      	uxth	r0, r3
 800d642:	fb06 a000 	mla	r0, r6, r0, sl
 800d646:	0c02      	lsrs	r2, r0, #16
 800d648:	0c1b      	lsrs	r3, r3, #16
 800d64a:	fb06 2303 	mla	r3, r6, r3, r2
 800d64e:	f8de 2000 	ldr.w	r2, [lr]
 800d652:	b280      	uxth	r0, r0
 800d654:	b292      	uxth	r2, r2
 800d656:	1a12      	subs	r2, r2, r0
 800d658:	445a      	add	r2, fp
 800d65a:	f8de 0000 	ldr.w	r0, [lr]
 800d65e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d662:	b29b      	uxth	r3, r3
 800d664:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d668:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d66c:	b292      	uxth	r2, r2
 800d66e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d672:	45e1      	cmp	r9, ip
 800d674:	f84e 2b04 	str.w	r2, [lr], #4
 800d678:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d67c:	d2de      	bcs.n	800d63c <quorem+0x42>
 800d67e:	9b00      	ldr	r3, [sp, #0]
 800d680:	58eb      	ldr	r3, [r5, r3]
 800d682:	b92b      	cbnz	r3, 800d690 <quorem+0x96>
 800d684:	9b01      	ldr	r3, [sp, #4]
 800d686:	3b04      	subs	r3, #4
 800d688:	429d      	cmp	r5, r3
 800d68a:	461a      	mov	r2, r3
 800d68c:	d32f      	bcc.n	800d6ee <quorem+0xf4>
 800d68e:	613c      	str	r4, [r7, #16]
 800d690:	4638      	mov	r0, r7
 800d692:	f001 f97b 	bl	800e98c <__mcmp>
 800d696:	2800      	cmp	r0, #0
 800d698:	db25      	blt.n	800d6e6 <quorem+0xec>
 800d69a:	4629      	mov	r1, r5
 800d69c:	2000      	movs	r0, #0
 800d69e:	f858 2b04 	ldr.w	r2, [r8], #4
 800d6a2:	f8d1 c000 	ldr.w	ip, [r1]
 800d6a6:	fa1f fe82 	uxth.w	lr, r2
 800d6aa:	fa1f f38c 	uxth.w	r3, ip
 800d6ae:	eba3 030e 	sub.w	r3, r3, lr
 800d6b2:	4403      	add	r3, r0
 800d6b4:	0c12      	lsrs	r2, r2, #16
 800d6b6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d6ba:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d6be:	b29b      	uxth	r3, r3
 800d6c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d6c4:	45c1      	cmp	r9, r8
 800d6c6:	f841 3b04 	str.w	r3, [r1], #4
 800d6ca:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d6ce:	d2e6      	bcs.n	800d69e <quorem+0xa4>
 800d6d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d6d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d6d8:	b922      	cbnz	r2, 800d6e4 <quorem+0xea>
 800d6da:	3b04      	subs	r3, #4
 800d6dc:	429d      	cmp	r5, r3
 800d6de:	461a      	mov	r2, r3
 800d6e0:	d30b      	bcc.n	800d6fa <quorem+0x100>
 800d6e2:	613c      	str	r4, [r7, #16]
 800d6e4:	3601      	adds	r6, #1
 800d6e6:	4630      	mov	r0, r6
 800d6e8:	b003      	add	sp, #12
 800d6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6ee:	6812      	ldr	r2, [r2, #0]
 800d6f0:	3b04      	subs	r3, #4
 800d6f2:	2a00      	cmp	r2, #0
 800d6f4:	d1cb      	bne.n	800d68e <quorem+0x94>
 800d6f6:	3c01      	subs	r4, #1
 800d6f8:	e7c6      	b.n	800d688 <quorem+0x8e>
 800d6fa:	6812      	ldr	r2, [r2, #0]
 800d6fc:	3b04      	subs	r3, #4
 800d6fe:	2a00      	cmp	r2, #0
 800d700:	d1ef      	bne.n	800d6e2 <quorem+0xe8>
 800d702:	3c01      	subs	r4, #1
 800d704:	e7ea      	b.n	800d6dc <quorem+0xe2>
 800d706:	2000      	movs	r0, #0
 800d708:	e7ee      	b.n	800d6e8 <quorem+0xee>
 800d70a:	0000      	movs	r0, r0
 800d70c:	0000      	movs	r0, r0
	...

0800d710 <_dtoa_r>:
 800d710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d714:	69c7      	ldr	r7, [r0, #28]
 800d716:	b099      	sub	sp, #100	@ 0x64
 800d718:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d71c:	ec55 4b10 	vmov	r4, r5, d0
 800d720:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d722:	9109      	str	r1, [sp, #36]	@ 0x24
 800d724:	4683      	mov	fp, r0
 800d726:	920e      	str	r2, [sp, #56]	@ 0x38
 800d728:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d72a:	b97f      	cbnz	r7, 800d74c <_dtoa_r+0x3c>
 800d72c:	2010      	movs	r0, #16
 800d72e:	f000 fdfd 	bl	800e32c <malloc>
 800d732:	4602      	mov	r2, r0
 800d734:	f8cb 001c 	str.w	r0, [fp, #28]
 800d738:	b920      	cbnz	r0, 800d744 <_dtoa_r+0x34>
 800d73a:	4ba7      	ldr	r3, [pc, #668]	@ (800d9d8 <_dtoa_r+0x2c8>)
 800d73c:	21ef      	movs	r1, #239	@ 0xef
 800d73e:	48a7      	ldr	r0, [pc, #668]	@ (800d9dc <_dtoa_r+0x2cc>)
 800d740:	f001 fc5a 	bl	800eff8 <__assert_func>
 800d744:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d748:	6007      	str	r7, [r0, #0]
 800d74a:	60c7      	str	r7, [r0, #12]
 800d74c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d750:	6819      	ldr	r1, [r3, #0]
 800d752:	b159      	cbz	r1, 800d76c <_dtoa_r+0x5c>
 800d754:	685a      	ldr	r2, [r3, #4]
 800d756:	604a      	str	r2, [r1, #4]
 800d758:	2301      	movs	r3, #1
 800d75a:	4093      	lsls	r3, r2
 800d75c:	608b      	str	r3, [r1, #8]
 800d75e:	4658      	mov	r0, fp
 800d760:	f000 feda 	bl	800e518 <_Bfree>
 800d764:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d768:	2200      	movs	r2, #0
 800d76a:	601a      	str	r2, [r3, #0]
 800d76c:	1e2b      	subs	r3, r5, #0
 800d76e:	bfb9      	ittee	lt
 800d770:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d774:	9303      	strlt	r3, [sp, #12]
 800d776:	2300      	movge	r3, #0
 800d778:	6033      	strge	r3, [r6, #0]
 800d77a:	9f03      	ldr	r7, [sp, #12]
 800d77c:	4b98      	ldr	r3, [pc, #608]	@ (800d9e0 <_dtoa_r+0x2d0>)
 800d77e:	bfbc      	itt	lt
 800d780:	2201      	movlt	r2, #1
 800d782:	6032      	strlt	r2, [r6, #0]
 800d784:	43bb      	bics	r3, r7
 800d786:	d112      	bne.n	800d7ae <_dtoa_r+0x9e>
 800d788:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d78a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d78e:	6013      	str	r3, [r2, #0]
 800d790:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d794:	4323      	orrs	r3, r4
 800d796:	f000 854d 	beq.w	800e234 <_dtoa_r+0xb24>
 800d79a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d79c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d9f4 <_dtoa_r+0x2e4>
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	f000 854f 	beq.w	800e244 <_dtoa_r+0xb34>
 800d7a6:	f10a 0303 	add.w	r3, sl, #3
 800d7aa:	f000 bd49 	b.w	800e240 <_dtoa_r+0xb30>
 800d7ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	ec51 0b17 	vmov	r0, r1, d7
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d7be:	f7f3 f98b 	bl	8000ad8 <__aeabi_dcmpeq>
 800d7c2:	4680      	mov	r8, r0
 800d7c4:	b158      	cbz	r0, 800d7de <_dtoa_r+0xce>
 800d7c6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	6013      	str	r3, [r2, #0]
 800d7cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d7ce:	b113      	cbz	r3, 800d7d6 <_dtoa_r+0xc6>
 800d7d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d7d2:	4b84      	ldr	r3, [pc, #528]	@ (800d9e4 <_dtoa_r+0x2d4>)
 800d7d4:	6013      	str	r3, [r2, #0]
 800d7d6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d9f8 <_dtoa_r+0x2e8>
 800d7da:	f000 bd33 	b.w	800e244 <_dtoa_r+0xb34>
 800d7de:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d7e2:	aa16      	add	r2, sp, #88	@ 0x58
 800d7e4:	a917      	add	r1, sp, #92	@ 0x5c
 800d7e6:	4658      	mov	r0, fp
 800d7e8:	f001 f980 	bl	800eaec <__d2b>
 800d7ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d7f0:	4681      	mov	r9, r0
 800d7f2:	2e00      	cmp	r6, #0
 800d7f4:	d077      	beq.n	800d8e6 <_dtoa_r+0x1d6>
 800d7f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d7f8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d7fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d800:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d804:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d808:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d80c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d810:	4619      	mov	r1, r3
 800d812:	2200      	movs	r2, #0
 800d814:	4b74      	ldr	r3, [pc, #464]	@ (800d9e8 <_dtoa_r+0x2d8>)
 800d816:	f7f2 fd3f 	bl	8000298 <__aeabi_dsub>
 800d81a:	a369      	add	r3, pc, #420	@ (adr r3, 800d9c0 <_dtoa_r+0x2b0>)
 800d81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d820:	f7f2 fef2 	bl	8000608 <__aeabi_dmul>
 800d824:	a368      	add	r3, pc, #416	@ (adr r3, 800d9c8 <_dtoa_r+0x2b8>)
 800d826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d82a:	f7f2 fd37 	bl	800029c <__adddf3>
 800d82e:	4604      	mov	r4, r0
 800d830:	4630      	mov	r0, r6
 800d832:	460d      	mov	r5, r1
 800d834:	f7f2 fe7e 	bl	8000534 <__aeabi_i2d>
 800d838:	a365      	add	r3, pc, #404	@ (adr r3, 800d9d0 <_dtoa_r+0x2c0>)
 800d83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d83e:	f7f2 fee3 	bl	8000608 <__aeabi_dmul>
 800d842:	4602      	mov	r2, r0
 800d844:	460b      	mov	r3, r1
 800d846:	4620      	mov	r0, r4
 800d848:	4629      	mov	r1, r5
 800d84a:	f7f2 fd27 	bl	800029c <__adddf3>
 800d84e:	4604      	mov	r4, r0
 800d850:	460d      	mov	r5, r1
 800d852:	f7f3 f989 	bl	8000b68 <__aeabi_d2iz>
 800d856:	2200      	movs	r2, #0
 800d858:	4607      	mov	r7, r0
 800d85a:	2300      	movs	r3, #0
 800d85c:	4620      	mov	r0, r4
 800d85e:	4629      	mov	r1, r5
 800d860:	f7f3 f944 	bl	8000aec <__aeabi_dcmplt>
 800d864:	b140      	cbz	r0, 800d878 <_dtoa_r+0x168>
 800d866:	4638      	mov	r0, r7
 800d868:	f7f2 fe64 	bl	8000534 <__aeabi_i2d>
 800d86c:	4622      	mov	r2, r4
 800d86e:	462b      	mov	r3, r5
 800d870:	f7f3 f932 	bl	8000ad8 <__aeabi_dcmpeq>
 800d874:	b900      	cbnz	r0, 800d878 <_dtoa_r+0x168>
 800d876:	3f01      	subs	r7, #1
 800d878:	2f16      	cmp	r7, #22
 800d87a:	d851      	bhi.n	800d920 <_dtoa_r+0x210>
 800d87c:	4b5b      	ldr	r3, [pc, #364]	@ (800d9ec <_dtoa_r+0x2dc>)
 800d87e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d886:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d88a:	f7f3 f92f 	bl	8000aec <__aeabi_dcmplt>
 800d88e:	2800      	cmp	r0, #0
 800d890:	d048      	beq.n	800d924 <_dtoa_r+0x214>
 800d892:	3f01      	subs	r7, #1
 800d894:	2300      	movs	r3, #0
 800d896:	9312      	str	r3, [sp, #72]	@ 0x48
 800d898:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d89a:	1b9b      	subs	r3, r3, r6
 800d89c:	1e5a      	subs	r2, r3, #1
 800d89e:	bf44      	itt	mi
 800d8a0:	f1c3 0801 	rsbmi	r8, r3, #1
 800d8a4:	2300      	movmi	r3, #0
 800d8a6:	9208      	str	r2, [sp, #32]
 800d8a8:	bf54      	ite	pl
 800d8aa:	f04f 0800 	movpl.w	r8, #0
 800d8ae:	9308      	strmi	r3, [sp, #32]
 800d8b0:	2f00      	cmp	r7, #0
 800d8b2:	db39      	blt.n	800d928 <_dtoa_r+0x218>
 800d8b4:	9b08      	ldr	r3, [sp, #32]
 800d8b6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d8b8:	443b      	add	r3, r7
 800d8ba:	9308      	str	r3, [sp, #32]
 800d8bc:	2300      	movs	r3, #0
 800d8be:	930a      	str	r3, [sp, #40]	@ 0x28
 800d8c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8c2:	2b09      	cmp	r3, #9
 800d8c4:	d864      	bhi.n	800d990 <_dtoa_r+0x280>
 800d8c6:	2b05      	cmp	r3, #5
 800d8c8:	bfc4      	itt	gt
 800d8ca:	3b04      	subgt	r3, #4
 800d8cc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d8ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8d0:	f1a3 0302 	sub.w	r3, r3, #2
 800d8d4:	bfcc      	ite	gt
 800d8d6:	2400      	movgt	r4, #0
 800d8d8:	2401      	movle	r4, #1
 800d8da:	2b03      	cmp	r3, #3
 800d8dc:	d863      	bhi.n	800d9a6 <_dtoa_r+0x296>
 800d8de:	e8df f003 	tbb	[pc, r3]
 800d8e2:	372a      	.short	0x372a
 800d8e4:	5535      	.short	0x5535
 800d8e6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d8ea:	441e      	add	r6, r3
 800d8ec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d8f0:	2b20      	cmp	r3, #32
 800d8f2:	bfc1      	itttt	gt
 800d8f4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d8f8:	409f      	lslgt	r7, r3
 800d8fa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d8fe:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d902:	bfd6      	itet	le
 800d904:	f1c3 0320 	rsble	r3, r3, #32
 800d908:	ea47 0003 	orrgt.w	r0, r7, r3
 800d90c:	fa04 f003 	lslle.w	r0, r4, r3
 800d910:	f7f2 fe00 	bl	8000514 <__aeabi_ui2d>
 800d914:	2201      	movs	r2, #1
 800d916:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d91a:	3e01      	subs	r6, #1
 800d91c:	9214      	str	r2, [sp, #80]	@ 0x50
 800d91e:	e777      	b.n	800d810 <_dtoa_r+0x100>
 800d920:	2301      	movs	r3, #1
 800d922:	e7b8      	b.n	800d896 <_dtoa_r+0x186>
 800d924:	9012      	str	r0, [sp, #72]	@ 0x48
 800d926:	e7b7      	b.n	800d898 <_dtoa_r+0x188>
 800d928:	427b      	negs	r3, r7
 800d92a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d92c:	2300      	movs	r3, #0
 800d92e:	eba8 0807 	sub.w	r8, r8, r7
 800d932:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d934:	e7c4      	b.n	800d8c0 <_dtoa_r+0x1b0>
 800d936:	2300      	movs	r3, #0
 800d938:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d93a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	dc35      	bgt.n	800d9ac <_dtoa_r+0x29c>
 800d940:	2301      	movs	r3, #1
 800d942:	9300      	str	r3, [sp, #0]
 800d944:	9307      	str	r3, [sp, #28]
 800d946:	461a      	mov	r2, r3
 800d948:	920e      	str	r2, [sp, #56]	@ 0x38
 800d94a:	e00b      	b.n	800d964 <_dtoa_r+0x254>
 800d94c:	2301      	movs	r3, #1
 800d94e:	e7f3      	b.n	800d938 <_dtoa_r+0x228>
 800d950:	2300      	movs	r3, #0
 800d952:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d954:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d956:	18fb      	adds	r3, r7, r3
 800d958:	9300      	str	r3, [sp, #0]
 800d95a:	3301      	adds	r3, #1
 800d95c:	2b01      	cmp	r3, #1
 800d95e:	9307      	str	r3, [sp, #28]
 800d960:	bfb8      	it	lt
 800d962:	2301      	movlt	r3, #1
 800d964:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d968:	2100      	movs	r1, #0
 800d96a:	2204      	movs	r2, #4
 800d96c:	f102 0514 	add.w	r5, r2, #20
 800d970:	429d      	cmp	r5, r3
 800d972:	d91f      	bls.n	800d9b4 <_dtoa_r+0x2a4>
 800d974:	6041      	str	r1, [r0, #4]
 800d976:	4658      	mov	r0, fp
 800d978:	f000 fd8e 	bl	800e498 <_Balloc>
 800d97c:	4682      	mov	sl, r0
 800d97e:	2800      	cmp	r0, #0
 800d980:	d13c      	bne.n	800d9fc <_dtoa_r+0x2ec>
 800d982:	4b1b      	ldr	r3, [pc, #108]	@ (800d9f0 <_dtoa_r+0x2e0>)
 800d984:	4602      	mov	r2, r0
 800d986:	f240 11af 	movw	r1, #431	@ 0x1af
 800d98a:	e6d8      	b.n	800d73e <_dtoa_r+0x2e>
 800d98c:	2301      	movs	r3, #1
 800d98e:	e7e0      	b.n	800d952 <_dtoa_r+0x242>
 800d990:	2401      	movs	r4, #1
 800d992:	2300      	movs	r3, #0
 800d994:	9309      	str	r3, [sp, #36]	@ 0x24
 800d996:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d998:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d99c:	9300      	str	r3, [sp, #0]
 800d99e:	9307      	str	r3, [sp, #28]
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	2312      	movs	r3, #18
 800d9a4:	e7d0      	b.n	800d948 <_dtoa_r+0x238>
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d9aa:	e7f5      	b.n	800d998 <_dtoa_r+0x288>
 800d9ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d9ae:	9300      	str	r3, [sp, #0]
 800d9b0:	9307      	str	r3, [sp, #28]
 800d9b2:	e7d7      	b.n	800d964 <_dtoa_r+0x254>
 800d9b4:	3101      	adds	r1, #1
 800d9b6:	0052      	lsls	r2, r2, #1
 800d9b8:	e7d8      	b.n	800d96c <_dtoa_r+0x25c>
 800d9ba:	bf00      	nop
 800d9bc:	f3af 8000 	nop.w
 800d9c0:	636f4361 	.word	0x636f4361
 800d9c4:	3fd287a7 	.word	0x3fd287a7
 800d9c8:	8b60c8b3 	.word	0x8b60c8b3
 800d9cc:	3fc68a28 	.word	0x3fc68a28
 800d9d0:	509f79fb 	.word	0x509f79fb
 800d9d4:	3fd34413 	.word	0x3fd34413
 800d9d8:	0800fa01 	.word	0x0800fa01
 800d9dc:	0800fa18 	.word	0x0800fa18
 800d9e0:	7ff00000 	.word	0x7ff00000
 800d9e4:	0800f9d1 	.word	0x0800f9d1
 800d9e8:	3ff80000 	.word	0x3ff80000
 800d9ec:	0800fb10 	.word	0x0800fb10
 800d9f0:	0800fa70 	.word	0x0800fa70
 800d9f4:	0800f9fd 	.word	0x0800f9fd
 800d9f8:	0800f9d0 	.word	0x0800f9d0
 800d9fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800da00:	6018      	str	r0, [r3, #0]
 800da02:	9b07      	ldr	r3, [sp, #28]
 800da04:	2b0e      	cmp	r3, #14
 800da06:	f200 80a4 	bhi.w	800db52 <_dtoa_r+0x442>
 800da0a:	2c00      	cmp	r4, #0
 800da0c:	f000 80a1 	beq.w	800db52 <_dtoa_r+0x442>
 800da10:	2f00      	cmp	r7, #0
 800da12:	dd33      	ble.n	800da7c <_dtoa_r+0x36c>
 800da14:	4bad      	ldr	r3, [pc, #692]	@ (800dccc <_dtoa_r+0x5bc>)
 800da16:	f007 020f 	and.w	r2, r7, #15
 800da1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800da1e:	ed93 7b00 	vldr	d7, [r3]
 800da22:	05f8      	lsls	r0, r7, #23
 800da24:	ed8d 7b04 	vstr	d7, [sp, #16]
 800da28:	ea4f 1427 	mov.w	r4, r7, asr #4
 800da2c:	d516      	bpl.n	800da5c <_dtoa_r+0x34c>
 800da2e:	4ba8      	ldr	r3, [pc, #672]	@ (800dcd0 <_dtoa_r+0x5c0>)
 800da30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800da34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800da38:	f7f2 ff10 	bl	800085c <__aeabi_ddiv>
 800da3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da40:	f004 040f 	and.w	r4, r4, #15
 800da44:	2603      	movs	r6, #3
 800da46:	4da2      	ldr	r5, [pc, #648]	@ (800dcd0 <_dtoa_r+0x5c0>)
 800da48:	b954      	cbnz	r4, 800da60 <_dtoa_r+0x350>
 800da4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800da4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da52:	f7f2 ff03 	bl	800085c <__aeabi_ddiv>
 800da56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da5a:	e028      	b.n	800daae <_dtoa_r+0x39e>
 800da5c:	2602      	movs	r6, #2
 800da5e:	e7f2      	b.n	800da46 <_dtoa_r+0x336>
 800da60:	07e1      	lsls	r1, r4, #31
 800da62:	d508      	bpl.n	800da76 <_dtoa_r+0x366>
 800da64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800da68:	e9d5 2300 	ldrd	r2, r3, [r5]
 800da6c:	f7f2 fdcc 	bl	8000608 <__aeabi_dmul>
 800da70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800da74:	3601      	adds	r6, #1
 800da76:	1064      	asrs	r4, r4, #1
 800da78:	3508      	adds	r5, #8
 800da7a:	e7e5      	b.n	800da48 <_dtoa_r+0x338>
 800da7c:	f000 80d2 	beq.w	800dc24 <_dtoa_r+0x514>
 800da80:	427c      	negs	r4, r7
 800da82:	4b92      	ldr	r3, [pc, #584]	@ (800dccc <_dtoa_r+0x5bc>)
 800da84:	4d92      	ldr	r5, [pc, #584]	@ (800dcd0 <_dtoa_r+0x5c0>)
 800da86:	f004 020f 	and.w	r2, r4, #15
 800da8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800da8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800da96:	f7f2 fdb7 	bl	8000608 <__aeabi_dmul>
 800da9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da9e:	1124      	asrs	r4, r4, #4
 800daa0:	2300      	movs	r3, #0
 800daa2:	2602      	movs	r6, #2
 800daa4:	2c00      	cmp	r4, #0
 800daa6:	f040 80b2 	bne.w	800dc0e <_dtoa_r+0x4fe>
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d1d3      	bne.n	800da56 <_dtoa_r+0x346>
 800daae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dab0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	f000 80b7 	beq.w	800dc28 <_dtoa_r+0x518>
 800daba:	4b86      	ldr	r3, [pc, #536]	@ (800dcd4 <_dtoa_r+0x5c4>)
 800dabc:	2200      	movs	r2, #0
 800dabe:	4620      	mov	r0, r4
 800dac0:	4629      	mov	r1, r5
 800dac2:	f7f3 f813 	bl	8000aec <__aeabi_dcmplt>
 800dac6:	2800      	cmp	r0, #0
 800dac8:	f000 80ae 	beq.w	800dc28 <_dtoa_r+0x518>
 800dacc:	9b07      	ldr	r3, [sp, #28]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	f000 80aa 	beq.w	800dc28 <_dtoa_r+0x518>
 800dad4:	9b00      	ldr	r3, [sp, #0]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	dd37      	ble.n	800db4a <_dtoa_r+0x43a>
 800dada:	1e7b      	subs	r3, r7, #1
 800dadc:	9304      	str	r3, [sp, #16]
 800dade:	4620      	mov	r0, r4
 800dae0:	4b7d      	ldr	r3, [pc, #500]	@ (800dcd8 <_dtoa_r+0x5c8>)
 800dae2:	2200      	movs	r2, #0
 800dae4:	4629      	mov	r1, r5
 800dae6:	f7f2 fd8f 	bl	8000608 <__aeabi_dmul>
 800daea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800daee:	9c00      	ldr	r4, [sp, #0]
 800daf0:	3601      	adds	r6, #1
 800daf2:	4630      	mov	r0, r6
 800daf4:	f7f2 fd1e 	bl	8000534 <__aeabi_i2d>
 800daf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dafc:	f7f2 fd84 	bl	8000608 <__aeabi_dmul>
 800db00:	4b76      	ldr	r3, [pc, #472]	@ (800dcdc <_dtoa_r+0x5cc>)
 800db02:	2200      	movs	r2, #0
 800db04:	f7f2 fbca 	bl	800029c <__adddf3>
 800db08:	4605      	mov	r5, r0
 800db0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800db0e:	2c00      	cmp	r4, #0
 800db10:	f040 808d 	bne.w	800dc2e <_dtoa_r+0x51e>
 800db14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db18:	4b71      	ldr	r3, [pc, #452]	@ (800dce0 <_dtoa_r+0x5d0>)
 800db1a:	2200      	movs	r2, #0
 800db1c:	f7f2 fbbc 	bl	8000298 <__aeabi_dsub>
 800db20:	4602      	mov	r2, r0
 800db22:	460b      	mov	r3, r1
 800db24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800db28:	462a      	mov	r2, r5
 800db2a:	4633      	mov	r3, r6
 800db2c:	f7f2 fffc 	bl	8000b28 <__aeabi_dcmpgt>
 800db30:	2800      	cmp	r0, #0
 800db32:	f040 828b 	bne.w	800e04c <_dtoa_r+0x93c>
 800db36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db3a:	462a      	mov	r2, r5
 800db3c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800db40:	f7f2 ffd4 	bl	8000aec <__aeabi_dcmplt>
 800db44:	2800      	cmp	r0, #0
 800db46:	f040 8128 	bne.w	800dd9a <_dtoa_r+0x68a>
 800db4a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800db4e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800db52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800db54:	2b00      	cmp	r3, #0
 800db56:	f2c0 815a 	blt.w	800de0e <_dtoa_r+0x6fe>
 800db5a:	2f0e      	cmp	r7, #14
 800db5c:	f300 8157 	bgt.w	800de0e <_dtoa_r+0x6fe>
 800db60:	4b5a      	ldr	r3, [pc, #360]	@ (800dccc <_dtoa_r+0x5bc>)
 800db62:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800db66:	ed93 7b00 	vldr	d7, [r3]
 800db6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	ed8d 7b00 	vstr	d7, [sp]
 800db72:	da03      	bge.n	800db7c <_dtoa_r+0x46c>
 800db74:	9b07      	ldr	r3, [sp, #28]
 800db76:	2b00      	cmp	r3, #0
 800db78:	f340 8101 	ble.w	800dd7e <_dtoa_r+0x66e>
 800db7c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800db80:	4656      	mov	r6, sl
 800db82:	e9dd 2300 	ldrd	r2, r3, [sp]
 800db86:	4620      	mov	r0, r4
 800db88:	4629      	mov	r1, r5
 800db8a:	f7f2 fe67 	bl	800085c <__aeabi_ddiv>
 800db8e:	f7f2 ffeb 	bl	8000b68 <__aeabi_d2iz>
 800db92:	4680      	mov	r8, r0
 800db94:	f7f2 fcce 	bl	8000534 <__aeabi_i2d>
 800db98:	e9dd 2300 	ldrd	r2, r3, [sp]
 800db9c:	f7f2 fd34 	bl	8000608 <__aeabi_dmul>
 800dba0:	4602      	mov	r2, r0
 800dba2:	460b      	mov	r3, r1
 800dba4:	4620      	mov	r0, r4
 800dba6:	4629      	mov	r1, r5
 800dba8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800dbac:	f7f2 fb74 	bl	8000298 <__aeabi_dsub>
 800dbb0:	f806 4b01 	strb.w	r4, [r6], #1
 800dbb4:	9d07      	ldr	r5, [sp, #28]
 800dbb6:	eba6 040a 	sub.w	r4, r6, sl
 800dbba:	42a5      	cmp	r5, r4
 800dbbc:	4602      	mov	r2, r0
 800dbbe:	460b      	mov	r3, r1
 800dbc0:	f040 8117 	bne.w	800ddf2 <_dtoa_r+0x6e2>
 800dbc4:	f7f2 fb6a 	bl	800029c <__adddf3>
 800dbc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dbcc:	4604      	mov	r4, r0
 800dbce:	460d      	mov	r5, r1
 800dbd0:	f7f2 ffaa 	bl	8000b28 <__aeabi_dcmpgt>
 800dbd4:	2800      	cmp	r0, #0
 800dbd6:	f040 80f9 	bne.w	800ddcc <_dtoa_r+0x6bc>
 800dbda:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dbde:	4620      	mov	r0, r4
 800dbe0:	4629      	mov	r1, r5
 800dbe2:	f7f2 ff79 	bl	8000ad8 <__aeabi_dcmpeq>
 800dbe6:	b118      	cbz	r0, 800dbf0 <_dtoa_r+0x4e0>
 800dbe8:	f018 0f01 	tst.w	r8, #1
 800dbec:	f040 80ee 	bne.w	800ddcc <_dtoa_r+0x6bc>
 800dbf0:	4649      	mov	r1, r9
 800dbf2:	4658      	mov	r0, fp
 800dbf4:	f000 fc90 	bl	800e518 <_Bfree>
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	7033      	strb	r3, [r6, #0]
 800dbfc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800dbfe:	3701      	adds	r7, #1
 800dc00:	601f      	str	r7, [r3, #0]
 800dc02:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	f000 831d 	beq.w	800e244 <_dtoa_r+0xb34>
 800dc0a:	601e      	str	r6, [r3, #0]
 800dc0c:	e31a      	b.n	800e244 <_dtoa_r+0xb34>
 800dc0e:	07e2      	lsls	r2, r4, #31
 800dc10:	d505      	bpl.n	800dc1e <_dtoa_r+0x50e>
 800dc12:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dc16:	f7f2 fcf7 	bl	8000608 <__aeabi_dmul>
 800dc1a:	3601      	adds	r6, #1
 800dc1c:	2301      	movs	r3, #1
 800dc1e:	1064      	asrs	r4, r4, #1
 800dc20:	3508      	adds	r5, #8
 800dc22:	e73f      	b.n	800daa4 <_dtoa_r+0x394>
 800dc24:	2602      	movs	r6, #2
 800dc26:	e742      	b.n	800daae <_dtoa_r+0x39e>
 800dc28:	9c07      	ldr	r4, [sp, #28]
 800dc2a:	9704      	str	r7, [sp, #16]
 800dc2c:	e761      	b.n	800daf2 <_dtoa_r+0x3e2>
 800dc2e:	4b27      	ldr	r3, [pc, #156]	@ (800dccc <_dtoa_r+0x5bc>)
 800dc30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dc32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dc36:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dc3a:	4454      	add	r4, sl
 800dc3c:	2900      	cmp	r1, #0
 800dc3e:	d053      	beq.n	800dce8 <_dtoa_r+0x5d8>
 800dc40:	4928      	ldr	r1, [pc, #160]	@ (800dce4 <_dtoa_r+0x5d4>)
 800dc42:	2000      	movs	r0, #0
 800dc44:	f7f2 fe0a 	bl	800085c <__aeabi_ddiv>
 800dc48:	4633      	mov	r3, r6
 800dc4a:	462a      	mov	r2, r5
 800dc4c:	f7f2 fb24 	bl	8000298 <__aeabi_dsub>
 800dc50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800dc54:	4656      	mov	r6, sl
 800dc56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc5a:	f7f2 ff85 	bl	8000b68 <__aeabi_d2iz>
 800dc5e:	4605      	mov	r5, r0
 800dc60:	f7f2 fc68 	bl	8000534 <__aeabi_i2d>
 800dc64:	4602      	mov	r2, r0
 800dc66:	460b      	mov	r3, r1
 800dc68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc6c:	f7f2 fb14 	bl	8000298 <__aeabi_dsub>
 800dc70:	3530      	adds	r5, #48	@ 0x30
 800dc72:	4602      	mov	r2, r0
 800dc74:	460b      	mov	r3, r1
 800dc76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dc7a:	f806 5b01 	strb.w	r5, [r6], #1
 800dc7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800dc82:	f7f2 ff33 	bl	8000aec <__aeabi_dcmplt>
 800dc86:	2800      	cmp	r0, #0
 800dc88:	d171      	bne.n	800dd6e <_dtoa_r+0x65e>
 800dc8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dc8e:	4911      	ldr	r1, [pc, #68]	@ (800dcd4 <_dtoa_r+0x5c4>)
 800dc90:	2000      	movs	r0, #0
 800dc92:	f7f2 fb01 	bl	8000298 <__aeabi_dsub>
 800dc96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800dc9a:	f7f2 ff27 	bl	8000aec <__aeabi_dcmplt>
 800dc9e:	2800      	cmp	r0, #0
 800dca0:	f040 8095 	bne.w	800ddce <_dtoa_r+0x6be>
 800dca4:	42a6      	cmp	r6, r4
 800dca6:	f43f af50 	beq.w	800db4a <_dtoa_r+0x43a>
 800dcaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800dcae:	4b0a      	ldr	r3, [pc, #40]	@ (800dcd8 <_dtoa_r+0x5c8>)
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	f7f2 fca9 	bl	8000608 <__aeabi_dmul>
 800dcb6:	4b08      	ldr	r3, [pc, #32]	@ (800dcd8 <_dtoa_r+0x5c8>)
 800dcb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dcc2:	f7f2 fca1 	bl	8000608 <__aeabi_dmul>
 800dcc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dcca:	e7c4      	b.n	800dc56 <_dtoa_r+0x546>
 800dccc:	0800fb10 	.word	0x0800fb10
 800dcd0:	0800fae8 	.word	0x0800fae8
 800dcd4:	3ff00000 	.word	0x3ff00000
 800dcd8:	40240000 	.word	0x40240000
 800dcdc:	401c0000 	.word	0x401c0000
 800dce0:	40140000 	.word	0x40140000
 800dce4:	3fe00000 	.word	0x3fe00000
 800dce8:	4631      	mov	r1, r6
 800dcea:	4628      	mov	r0, r5
 800dcec:	f7f2 fc8c 	bl	8000608 <__aeabi_dmul>
 800dcf0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800dcf4:	9415      	str	r4, [sp, #84]	@ 0x54
 800dcf6:	4656      	mov	r6, sl
 800dcf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dcfc:	f7f2 ff34 	bl	8000b68 <__aeabi_d2iz>
 800dd00:	4605      	mov	r5, r0
 800dd02:	f7f2 fc17 	bl	8000534 <__aeabi_i2d>
 800dd06:	4602      	mov	r2, r0
 800dd08:	460b      	mov	r3, r1
 800dd0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd0e:	f7f2 fac3 	bl	8000298 <__aeabi_dsub>
 800dd12:	3530      	adds	r5, #48	@ 0x30
 800dd14:	f806 5b01 	strb.w	r5, [r6], #1
 800dd18:	4602      	mov	r2, r0
 800dd1a:	460b      	mov	r3, r1
 800dd1c:	42a6      	cmp	r6, r4
 800dd1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dd22:	f04f 0200 	mov.w	r2, #0
 800dd26:	d124      	bne.n	800dd72 <_dtoa_r+0x662>
 800dd28:	4bac      	ldr	r3, [pc, #688]	@ (800dfdc <_dtoa_r+0x8cc>)
 800dd2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800dd2e:	f7f2 fab5 	bl	800029c <__adddf3>
 800dd32:	4602      	mov	r2, r0
 800dd34:	460b      	mov	r3, r1
 800dd36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd3a:	f7f2 fef5 	bl	8000b28 <__aeabi_dcmpgt>
 800dd3e:	2800      	cmp	r0, #0
 800dd40:	d145      	bne.n	800ddce <_dtoa_r+0x6be>
 800dd42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800dd46:	49a5      	ldr	r1, [pc, #660]	@ (800dfdc <_dtoa_r+0x8cc>)
 800dd48:	2000      	movs	r0, #0
 800dd4a:	f7f2 faa5 	bl	8000298 <__aeabi_dsub>
 800dd4e:	4602      	mov	r2, r0
 800dd50:	460b      	mov	r3, r1
 800dd52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd56:	f7f2 fec9 	bl	8000aec <__aeabi_dcmplt>
 800dd5a:	2800      	cmp	r0, #0
 800dd5c:	f43f aef5 	beq.w	800db4a <_dtoa_r+0x43a>
 800dd60:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800dd62:	1e73      	subs	r3, r6, #1
 800dd64:	9315      	str	r3, [sp, #84]	@ 0x54
 800dd66:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dd6a:	2b30      	cmp	r3, #48	@ 0x30
 800dd6c:	d0f8      	beq.n	800dd60 <_dtoa_r+0x650>
 800dd6e:	9f04      	ldr	r7, [sp, #16]
 800dd70:	e73e      	b.n	800dbf0 <_dtoa_r+0x4e0>
 800dd72:	4b9b      	ldr	r3, [pc, #620]	@ (800dfe0 <_dtoa_r+0x8d0>)
 800dd74:	f7f2 fc48 	bl	8000608 <__aeabi_dmul>
 800dd78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dd7c:	e7bc      	b.n	800dcf8 <_dtoa_r+0x5e8>
 800dd7e:	d10c      	bne.n	800dd9a <_dtoa_r+0x68a>
 800dd80:	4b98      	ldr	r3, [pc, #608]	@ (800dfe4 <_dtoa_r+0x8d4>)
 800dd82:	2200      	movs	r2, #0
 800dd84:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dd88:	f7f2 fc3e 	bl	8000608 <__aeabi_dmul>
 800dd8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dd90:	f7f2 fec0 	bl	8000b14 <__aeabi_dcmpge>
 800dd94:	2800      	cmp	r0, #0
 800dd96:	f000 8157 	beq.w	800e048 <_dtoa_r+0x938>
 800dd9a:	2400      	movs	r4, #0
 800dd9c:	4625      	mov	r5, r4
 800dd9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dda0:	43db      	mvns	r3, r3
 800dda2:	9304      	str	r3, [sp, #16]
 800dda4:	4656      	mov	r6, sl
 800dda6:	2700      	movs	r7, #0
 800dda8:	4621      	mov	r1, r4
 800ddaa:	4658      	mov	r0, fp
 800ddac:	f000 fbb4 	bl	800e518 <_Bfree>
 800ddb0:	2d00      	cmp	r5, #0
 800ddb2:	d0dc      	beq.n	800dd6e <_dtoa_r+0x65e>
 800ddb4:	b12f      	cbz	r7, 800ddc2 <_dtoa_r+0x6b2>
 800ddb6:	42af      	cmp	r7, r5
 800ddb8:	d003      	beq.n	800ddc2 <_dtoa_r+0x6b2>
 800ddba:	4639      	mov	r1, r7
 800ddbc:	4658      	mov	r0, fp
 800ddbe:	f000 fbab 	bl	800e518 <_Bfree>
 800ddc2:	4629      	mov	r1, r5
 800ddc4:	4658      	mov	r0, fp
 800ddc6:	f000 fba7 	bl	800e518 <_Bfree>
 800ddca:	e7d0      	b.n	800dd6e <_dtoa_r+0x65e>
 800ddcc:	9704      	str	r7, [sp, #16]
 800ddce:	4633      	mov	r3, r6
 800ddd0:	461e      	mov	r6, r3
 800ddd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ddd6:	2a39      	cmp	r2, #57	@ 0x39
 800ddd8:	d107      	bne.n	800ddea <_dtoa_r+0x6da>
 800ddda:	459a      	cmp	sl, r3
 800dddc:	d1f8      	bne.n	800ddd0 <_dtoa_r+0x6c0>
 800ddde:	9a04      	ldr	r2, [sp, #16]
 800dde0:	3201      	adds	r2, #1
 800dde2:	9204      	str	r2, [sp, #16]
 800dde4:	2230      	movs	r2, #48	@ 0x30
 800dde6:	f88a 2000 	strb.w	r2, [sl]
 800ddea:	781a      	ldrb	r2, [r3, #0]
 800ddec:	3201      	adds	r2, #1
 800ddee:	701a      	strb	r2, [r3, #0]
 800ddf0:	e7bd      	b.n	800dd6e <_dtoa_r+0x65e>
 800ddf2:	4b7b      	ldr	r3, [pc, #492]	@ (800dfe0 <_dtoa_r+0x8d0>)
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	f7f2 fc07 	bl	8000608 <__aeabi_dmul>
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	4604      	mov	r4, r0
 800de00:	460d      	mov	r5, r1
 800de02:	f7f2 fe69 	bl	8000ad8 <__aeabi_dcmpeq>
 800de06:	2800      	cmp	r0, #0
 800de08:	f43f aebb 	beq.w	800db82 <_dtoa_r+0x472>
 800de0c:	e6f0      	b.n	800dbf0 <_dtoa_r+0x4e0>
 800de0e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800de10:	2a00      	cmp	r2, #0
 800de12:	f000 80db 	beq.w	800dfcc <_dtoa_r+0x8bc>
 800de16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800de18:	2a01      	cmp	r2, #1
 800de1a:	f300 80bf 	bgt.w	800df9c <_dtoa_r+0x88c>
 800de1e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800de20:	2a00      	cmp	r2, #0
 800de22:	f000 80b7 	beq.w	800df94 <_dtoa_r+0x884>
 800de26:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800de2a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800de2c:	4646      	mov	r6, r8
 800de2e:	9a08      	ldr	r2, [sp, #32]
 800de30:	2101      	movs	r1, #1
 800de32:	441a      	add	r2, r3
 800de34:	4658      	mov	r0, fp
 800de36:	4498      	add	r8, r3
 800de38:	9208      	str	r2, [sp, #32]
 800de3a:	f000 fc21 	bl	800e680 <__i2b>
 800de3e:	4605      	mov	r5, r0
 800de40:	b15e      	cbz	r6, 800de5a <_dtoa_r+0x74a>
 800de42:	9b08      	ldr	r3, [sp, #32]
 800de44:	2b00      	cmp	r3, #0
 800de46:	dd08      	ble.n	800de5a <_dtoa_r+0x74a>
 800de48:	42b3      	cmp	r3, r6
 800de4a:	9a08      	ldr	r2, [sp, #32]
 800de4c:	bfa8      	it	ge
 800de4e:	4633      	movge	r3, r6
 800de50:	eba8 0803 	sub.w	r8, r8, r3
 800de54:	1af6      	subs	r6, r6, r3
 800de56:	1ad3      	subs	r3, r2, r3
 800de58:	9308      	str	r3, [sp, #32]
 800de5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de5c:	b1f3      	cbz	r3, 800de9c <_dtoa_r+0x78c>
 800de5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800de60:	2b00      	cmp	r3, #0
 800de62:	f000 80b7 	beq.w	800dfd4 <_dtoa_r+0x8c4>
 800de66:	b18c      	cbz	r4, 800de8c <_dtoa_r+0x77c>
 800de68:	4629      	mov	r1, r5
 800de6a:	4622      	mov	r2, r4
 800de6c:	4658      	mov	r0, fp
 800de6e:	f000 fcc7 	bl	800e800 <__pow5mult>
 800de72:	464a      	mov	r2, r9
 800de74:	4601      	mov	r1, r0
 800de76:	4605      	mov	r5, r0
 800de78:	4658      	mov	r0, fp
 800de7a:	f000 fc17 	bl	800e6ac <__multiply>
 800de7e:	4649      	mov	r1, r9
 800de80:	9004      	str	r0, [sp, #16]
 800de82:	4658      	mov	r0, fp
 800de84:	f000 fb48 	bl	800e518 <_Bfree>
 800de88:	9b04      	ldr	r3, [sp, #16]
 800de8a:	4699      	mov	r9, r3
 800de8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de8e:	1b1a      	subs	r2, r3, r4
 800de90:	d004      	beq.n	800de9c <_dtoa_r+0x78c>
 800de92:	4649      	mov	r1, r9
 800de94:	4658      	mov	r0, fp
 800de96:	f000 fcb3 	bl	800e800 <__pow5mult>
 800de9a:	4681      	mov	r9, r0
 800de9c:	2101      	movs	r1, #1
 800de9e:	4658      	mov	r0, fp
 800dea0:	f000 fbee 	bl	800e680 <__i2b>
 800dea4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dea6:	4604      	mov	r4, r0
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	f000 81cf 	beq.w	800e24c <_dtoa_r+0xb3c>
 800deae:	461a      	mov	r2, r3
 800deb0:	4601      	mov	r1, r0
 800deb2:	4658      	mov	r0, fp
 800deb4:	f000 fca4 	bl	800e800 <__pow5mult>
 800deb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800deba:	2b01      	cmp	r3, #1
 800debc:	4604      	mov	r4, r0
 800debe:	f300 8095 	bgt.w	800dfec <_dtoa_r+0x8dc>
 800dec2:	9b02      	ldr	r3, [sp, #8]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	f040 8087 	bne.w	800dfd8 <_dtoa_r+0x8c8>
 800deca:	9b03      	ldr	r3, [sp, #12]
 800decc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	f040 8089 	bne.w	800dfe8 <_dtoa_r+0x8d8>
 800ded6:	9b03      	ldr	r3, [sp, #12]
 800ded8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dedc:	0d1b      	lsrs	r3, r3, #20
 800dede:	051b      	lsls	r3, r3, #20
 800dee0:	b12b      	cbz	r3, 800deee <_dtoa_r+0x7de>
 800dee2:	9b08      	ldr	r3, [sp, #32]
 800dee4:	3301      	adds	r3, #1
 800dee6:	9308      	str	r3, [sp, #32]
 800dee8:	f108 0801 	add.w	r8, r8, #1
 800deec:	2301      	movs	r3, #1
 800deee:	930a      	str	r3, [sp, #40]	@ 0x28
 800def0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800def2:	2b00      	cmp	r3, #0
 800def4:	f000 81b0 	beq.w	800e258 <_dtoa_r+0xb48>
 800def8:	6923      	ldr	r3, [r4, #16]
 800defa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800defe:	6918      	ldr	r0, [r3, #16]
 800df00:	f000 fb72 	bl	800e5e8 <__hi0bits>
 800df04:	f1c0 0020 	rsb	r0, r0, #32
 800df08:	9b08      	ldr	r3, [sp, #32]
 800df0a:	4418      	add	r0, r3
 800df0c:	f010 001f 	ands.w	r0, r0, #31
 800df10:	d077      	beq.n	800e002 <_dtoa_r+0x8f2>
 800df12:	f1c0 0320 	rsb	r3, r0, #32
 800df16:	2b04      	cmp	r3, #4
 800df18:	dd6b      	ble.n	800dff2 <_dtoa_r+0x8e2>
 800df1a:	9b08      	ldr	r3, [sp, #32]
 800df1c:	f1c0 001c 	rsb	r0, r0, #28
 800df20:	4403      	add	r3, r0
 800df22:	4480      	add	r8, r0
 800df24:	4406      	add	r6, r0
 800df26:	9308      	str	r3, [sp, #32]
 800df28:	f1b8 0f00 	cmp.w	r8, #0
 800df2c:	dd05      	ble.n	800df3a <_dtoa_r+0x82a>
 800df2e:	4649      	mov	r1, r9
 800df30:	4642      	mov	r2, r8
 800df32:	4658      	mov	r0, fp
 800df34:	f000 fcbe 	bl	800e8b4 <__lshift>
 800df38:	4681      	mov	r9, r0
 800df3a:	9b08      	ldr	r3, [sp, #32]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	dd05      	ble.n	800df4c <_dtoa_r+0x83c>
 800df40:	4621      	mov	r1, r4
 800df42:	461a      	mov	r2, r3
 800df44:	4658      	mov	r0, fp
 800df46:	f000 fcb5 	bl	800e8b4 <__lshift>
 800df4a:	4604      	mov	r4, r0
 800df4c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d059      	beq.n	800e006 <_dtoa_r+0x8f6>
 800df52:	4621      	mov	r1, r4
 800df54:	4648      	mov	r0, r9
 800df56:	f000 fd19 	bl	800e98c <__mcmp>
 800df5a:	2800      	cmp	r0, #0
 800df5c:	da53      	bge.n	800e006 <_dtoa_r+0x8f6>
 800df5e:	1e7b      	subs	r3, r7, #1
 800df60:	9304      	str	r3, [sp, #16]
 800df62:	4649      	mov	r1, r9
 800df64:	2300      	movs	r3, #0
 800df66:	220a      	movs	r2, #10
 800df68:	4658      	mov	r0, fp
 800df6a:	f000 faf7 	bl	800e55c <__multadd>
 800df6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800df70:	4681      	mov	r9, r0
 800df72:	2b00      	cmp	r3, #0
 800df74:	f000 8172 	beq.w	800e25c <_dtoa_r+0xb4c>
 800df78:	2300      	movs	r3, #0
 800df7a:	4629      	mov	r1, r5
 800df7c:	220a      	movs	r2, #10
 800df7e:	4658      	mov	r0, fp
 800df80:	f000 faec 	bl	800e55c <__multadd>
 800df84:	9b00      	ldr	r3, [sp, #0]
 800df86:	2b00      	cmp	r3, #0
 800df88:	4605      	mov	r5, r0
 800df8a:	dc67      	bgt.n	800e05c <_dtoa_r+0x94c>
 800df8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df8e:	2b02      	cmp	r3, #2
 800df90:	dc41      	bgt.n	800e016 <_dtoa_r+0x906>
 800df92:	e063      	b.n	800e05c <_dtoa_r+0x94c>
 800df94:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800df96:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800df9a:	e746      	b.n	800de2a <_dtoa_r+0x71a>
 800df9c:	9b07      	ldr	r3, [sp, #28]
 800df9e:	1e5c      	subs	r4, r3, #1
 800dfa0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dfa2:	42a3      	cmp	r3, r4
 800dfa4:	bfbf      	itttt	lt
 800dfa6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800dfa8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800dfaa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800dfac:	1ae3      	sublt	r3, r4, r3
 800dfae:	bfb4      	ite	lt
 800dfb0:	18d2      	addlt	r2, r2, r3
 800dfb2:	1b1c      	subge	r4, r3, r4
 800dfb4:	9b07      	ldr	r3, [sp, #28]
 800dfb6:	bfbc      	itt	lt
 800dfb8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800dfba:	2400      	movlt	r4, #0
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	bfb5      	itete	lt
 800dfc0:	eba8 0603 	sublt.w	r6, r8, r3
 800dfc4:	9b07      	ldrge	r3, [sp, #28]
 800dfc6:	2300      	movlt	r3, #0
 800dfc8:	4646      	movge	r6, r8
 800dfca:	e730      	b.n	800de2e <_dtoa_r+0x71e>
 800dfcc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800dfce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800dfd0:	4646      	mov	r6, r8
 800dfd2:	e735      	b.n	800de40 <_dtoa_r+0x730>
 800dfd4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dfd6:	e75c      	b.n	800de92 <_dtoa_r+0x782>
 800dfd8:	2300      	movs	r3, #0
 800dfda:	e788      	b.n	800deee <_dtoa_r+0x7de>
 800dfdc:	3fe00000 	.word	0x3fe00000
 800dfe0:	40240000 	.word	0x40240000
 800dfe4:	40140000 	.word	0x40140000
 800dfe8:	9b02      	ldr	r3, [sp, #8]
 800dfea:	e780      	b.n	800deee <_dtoa_r+0x7de>
 800dfec:	2300      	movs	r3, #0
 800dfee:	930a      	str	r3, [sp, #40]	@ 0x28
 800dff0:	e782      	b.n	800def8 <_dtoa_r+0x7e8>
 800dff2:	d099      	beq.n	800df28 <_dtoa_r+0x818>
 800dff4:	9a08      	ldr	r2, [sp, #32]
 800dff6:	331c      	adds	r3, #28
 800dff8:	441a      	add	r2, r3
 800dffa:	4498      	add	r8, r3
 800dffc:	441e      	add	r6, r3
 800dffe:	9208      	str	r2, [sp, #32]
 800e000:	e792      	b.n	800df28 <_dtoa_r+0x818>
 800e002:	4603      	mov	r3, r0
 800e004:	e7f6      	b.n	800dff4 <_dtoa_r+0x8e4>
 800e006:	9b07      	ldr	r3, [sp, #28]
 800e008:	9704      	str	r7, [sp, #16]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	dc20      	bgt.n	800e050 <_dtoa_r+0x940>
 800e00e:	9300      	str	r3, [sp, #0]
 800e010:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e012:	2b02      	cmp	r3, #2
 800e014:	dd1e      	ble.n	800e054 <_dtoa_r+0x944>
 800e016:	9b00      	ldr	r3, [sp, #0]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	f47f aec0 	bne.w	800dd9e <_dtoa_r+0x68e>
 800e01e:	4621      	mov	r1, r4
 800e020:	2205      	movs	r2, #5
 800e022:	4658      	mov	r0, fp
 800e024:	f000 fa9a 	bl	800e55c <__multadd>
 800e028:	4601      	mov	r1, r0
 800e02a:	4604      	mov	r4, r0
 800e02c:	4648      	mov	r0, r9
 800e02e:	f000 fcad 	bl	800e98c <__mcmp>
 800e032:	2800      	cmp	r0, #0
 800e034:	f77f aeb3 	ble.w	800dd9e <_dtoa_r+0x68e>
 800e038:	4656      	mov	r6, sl
 800e03a:	2331      	movs	r3, #49	@ 0x31
 800e03c:	f806 3b01 	strb.w	r3, [r6], #1
 800e040:	9b04      	ldr	r3, [sp, #16]
 800e042:	3301      	adds	r3, #1
 800e044:	9304      	str	r3, [sp, #16]
 800e046:	e6ae      	b.n	800dda6 <_dtoa_r+0x696>
 800e048:	9c07      	ldr	r4, [sp, #28]
 800e04a:	9704      	str	r7, [sp, #16]
 800e04c:	4625      	mov	r5, r4
 800e04e:	e7f3      	b.n	800e038 <_dtoa_r+0x928>
 800e050:	9b07      	ldr	r3, [sp, #28]
 800e052:	9300      	str	r3, [sp, #0]
 800e054:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e056:	2b00      	cmp	r3, #0
 800e058:	f000 8104 	beq.w	800e264 <_dtoa_r+0xb54>
 800e05c:	2e00      	cmp	r6, #0
 800e05e:	dd05      	ble.n	800e06c <_dtoa_r+0x95c>
 800e060:	4629      	mov	r1, r5
 800e062:	4632      	mov	r2, r6
 800e064:	4658      	mov	r0, fp
 800e066:	f000 fc25 	bl	800e8b4 <__lshift>
 800e06a:	4605      	mov	r5, r0
 800e06c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d05a      	beq.n	800e128 <_dtoa_r+0xa18>
 800e072:	6869      	ldr	r1, [r5, #4]
 800e074:	4658      	mov	r0, fp
 800e076:	f000 fa0f 	bl	800e498 <_Balloc>
 800e07a:	4606      	mov	r6, r0
 800e07c:	b928      	cbnz	r0, 800e08a <_dtoa_r+0x97a>
 800e07e:	4b84      	ldr	r3, [pc, #528]	@ (800e290 <_dtoa_r+0xb80>)
 800e080:	4602      	mov	r2, r0
 800e082:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e086:	f7ff bb5a 	b.w	800d73e <_dtoa_r+0x2e>
 800e08a:	692a      	ldr	r2, [r5, #16]
 800e08c:	3202      	adds	r2, #2
 800e08e:	0092      	lsls	r2, r2, #2
 800e090:	f105 010c 	add.w	r1, r5, #12
 800e094:	300c      	adds	r0, #12
 800e096:	f7ff faa2 	bl	800d5de <memcpy>
 800e09a:	2201      	movs	r2, #1
 800e09c:	4631      	mov	r1, r6
 800e09e:	4658      	mov	r0, fp
 800e0a0:	f000 fc08 	bl	800e8b4 <__lshift>
 800e0a4:	f10a 0301 	add.w	r3, sl, #1
 800e0a8:	9307      	str	r3, [sp, #28]
 800e0aa:	9b00      	ldr	r3, [sp, #0]
 800e0ac:	4453      	add	r3, sl
 800e0ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e0b0:	9b02      	ldr	r3, [sp, #8]
 800e0b2:	f003 0301 	and.w	r3, r3, #1
 800e0b6:	462f      	mov	r7, r5
 800e0b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800e0ba:	4605      	mov	r5, r0
 800e0bc:	9b07      	ldr	r3, [sp, #28]
 800e0be:	4621      	mov	r1, r4
 800e0c0:	3b01      	subs	r3, #1
 800e0c2:	4648      	mov	r0, r9
 800e0c4:	9300      	str	r3, [sp, #0]
 800e0c6:	f7ff fa98 	bl	800d5fa <quorem>
 800e0ca:	4639      	mov	r1, r7
 800e0cc:	9002      	str	r0, [sp, #8]
 800e0ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e0d2:	4648      	mov	r0, r9
 800e0d4:	f000 fc5a 	bl	800e98c <__mcmp>
 800e0d8:	462a      	mov	r2, r5
 800e0da:	9008      	str	r0, [sp, #32]
 800e0dc:	4621      	mov	r1, r4
 800e0de:	4658      	mov	r0, fp
 800e0e0:	f000 fc70 	bl	800e9c4 <__mdiff>
 800e0e4:	68c2      	ldr	r2, [r0, #12]
 800e0e6:	4606      	mov	r6, r0
 800e0e8:	bb02      	cbnz	r2, 800e12c <_dtoa_r+0xa1c>
 800e0ea:	4601      	mov	r1, r0
 800e0ec:	4648      	mov	r0, r9
 800e0ee:	f000 fc4d 	bl	800e98c <__mcmp>
 800e0f2:	4602      	mov	r2, r0
 800e0f4:	4631      	mov	r1, r6
 800e0f6:	4658      	mov	r0, fp
 800e0f8:	920e      	str	r2, [sp, #56]	@ 0x38
 800e0fa:	f000 fa0d 	bl	800e518 <_Bfree>
 800e0fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e100:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e102:	9e07      	ldr	r6, [sp, #28]
 800e104:	ea43 0102 	orr.w	r1, r3, r2
 800e108:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e10a:	4319      	orrs	r1, r3
 800e10c:	d110      	bne.n	800e130 <_dtoa_r+0xa20>
 800e10e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e112:	d029      	beq.n	800e168 <_dtoa_r+0xa58>
 800e114:	9b08      	ldr	r3, [sp, #32]
 800e116:	2b00      	cmp	r3, #0
 800e118:	dd02      	ble.n	800e120 <_dtoa_r+0xa10>
 800e11a:	9b02      	ldr	r3, [sp, #8]
 800e11c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e120:	9b00      	ldr	r3, [sp, #0]
 800e122:	f883 8000 	strb.w	r8, [r3]
 800e126:	e63f      	b.n	800dda8 <_dtoa_r+0x698>
 800e128:	4628      	mov	r0, r5
 800e12a:	e7bb      	b.n	800e0a4 <_dtoa_r+0x994>
 800e12c:	2201      	movs	r2, #1
 800e12e:	e7e1      	b.n	800e0f4 <_dtoa_r+0x9e4>
 800e130:	9b08      	ldr	r3, [sp, #32]
 800e132:	2b00      	cmp	r3, #0
 800e134:	db04      	blt.n	800e140 <_dtoa_r+0xa30>
 800e136:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e138:	430b      	orrs	r3, r1
 800e13a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e13c:	430b      	orrs	r3, r1
 800e13e:	d120      	bne.n	800e182 <_dtoa_r+0xa72>
 800e140:	2a00      	cmp	r2, #0
 800e142:	dded      	ble.n	800e120 <_dtoa_r+0xa10>
 800e144:	4649      	mov	r1, r9
 800e146:	2201      	movs	r2, #1
 800e148:	4658      	mov	r0, fp
 800e14a:	f000 fbb3 	bl	800e8b4 <__lshift>
 800e14e:	4621      	mov	r1, r4
 800e150:	4681      	mov	r9, r0
 800e152:	f000 fc1b 	bl	800e98c <__mcmp>
 800e156:	2800      	cmp	r0, #0
 800e158:	dc03      	bgt.n	800e162 <_dtoa_r+0xa52>
 800e15a:	d1e1      	bne.n	800e120 <_dtoa_r+0xa10>
 800e15c:	f018 0f01 	tst.w	r8, #1
 800e160:	d0de      	beq.n	800e120 <_dtoa_r+0xa10>
 800e162:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e166:	d1d8      	bne.n	800e11a <_dtoa_r+0xa0a>
 800e168:	9a00      	ldr	r2, [sp, #0]
 800e16a:	2339      	movs	r3, #57	@ 0x39
 800e16c:	7013      	strb	r3, [r2, #0]
 800e16e:	4633      	mov	r3, r6
 800e170:	461e      	mov	r6, r3
 800e172:	3b01      	subs	r3, #1
 800e174:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e178:	2a39      	cmp	r2, #57	@ 0x39
 800e17a:	d052      	beq.n	800e222 <_dtoa_r+0xb12>
 800e17c:	3201      	adds	r2, #1
 800e17e:	701a      	strb	r2, [r3, #0]
 800e180:	e612      	b.n	800dda8 <_dtoa_r+0x698>
 800e182:	2a00      	cmp	r2, #0
 800e184:	dd07      	ble.n	800e196 <_dtoa_r+0xa86>
 800e186:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e18a:	d0ed      	beq.n	800e168 <_dtoa_r+0xa58>
 800e18c:	9a00      	ldr	r2, [sp, #0]
 800e18e:	f108 0301 	add.w	r3, r8, #1
 800e192:	7013      	strb	r3, [r2, #0]
 800e194:	e608      	b.n	800dda8 <_dtoa_r+0x698>
 800e196:	9b07      	ldr	r3, [sp, #28]
 800e198:	9a07      	ldr	r2, [sp, #28]
 800e19a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e19e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e1a0:	4293      	cmp	r3, r2
 800e1a2:	d028      	beq.n	800e1f6 <_dtoa_r+0xae6>
 800e1a4:	4649      	mov	r1, r9
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	220a      	movs	r2, #10
 800e1aa:	4658      	mov	r0, fp
 800e1ac:	f000 f9d6 	bl	800e55c <__multadd>
 800e1b0:	42af      	cmp	r7, r5
 800e1b2:	4681      	mov	r9, r0
 800e1b4:	f04f 0300 	mov.w	r3, #0
 800e1b8:	f04f 020a 	mov.w	r2, #10
 800e1bc:	4639      	mov	r1, r7
 800e1be:	4658      	mov	r0, fp
 800e1c0:	d107      	bne.n	800e1d2 <_dtoa_r+0xac2>
 800e1c2:	f000 f9cb 	bl	800e55c <__multadd>
 800e1c6:	4607      	mov	r7, r0
 800e1c8:	4605      	mov	r5, r0
 800e1ca:	9b07      	ldr	r3, [sp, #28]
 800e1cc:	3301      	adds	r3, #1
 800e1ce:	9307      	str	r3, [sp, #28]
 800e1d0:	e774      	b.n	800e0bc <_dtoa_r+0x9ac>
 800e1d2:	f000 f9c3 	bl	800e55c <__multadd>
 800e1d6:	4629      	mov	r1, r5
 800e1d8:	4607      	mov	r7, r0
 800e1da:	2300      	movs	r3, #0
 800e1dc:	220a      	movs	r2, #10
 800e1de:	4658      	mov	r0, fp
 800e1e0:	f000 f9bc 	bl	800e55c <__multadd>
 800e1e4:	4605      	mov	r5, r0
 800e1e6:	e7f0      	b.n	800e1ca <_dtoa_r+0xaba>
 800e1e8:	9b00      	ldr	r3, [sp, #0]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	bfcc      	ite	gt
 800e1ee:	461e      	movgt	r6, r3
 800e1f0:	2601      	movle	r6, #1
 800e1f2:	4456      	add	r6, sl
 800e1f4:	2700      	movs	r7, #0
 800e1f6:	4649      	mov	r1, r9
 800e1f8:	2201      	movs	r2, #1
 800e1fa:	4658      	mov	r0, fp
 800e1fc:	f000 fb5a 	bl	800e8b4 <__lshift>
 800e200:	4621      	mov	r1, r4
 800e202:	4681      	mov	r9, r0
 800e204:	f000 fbc2 	bl	800e98c <__mcmp>
 800e208:	2800      	cmp	r0, #0
 800e20a:	dcb0      	bgt.n	800e16e <_dtoa_r+0xa5e>
 800e20c:	d102      	bne.n	800e214 <_dtoa_r+0xb04>
 800e20e:	f018 0f01 	tst.w	r8, #1
 800e212:	d1ac      	bne.n	800e16e <_dtoa_r+0xa5e>
 800e214:	4633      	mov	r3, r6
 800e216:	461e      	mov	r6, r3
 800e218:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e21c:	2a30      	cmp	r2, #48	@ 0x30
 800e21e:	d0fa      	beq.n	800e216 <_dtoa_r+0xb06>
 800e220:	e5c2      	b.n	800dda8 <_dtoa_r+0x698>
 800e222:	459a      	cmp	sl, r3
 800e224:	d1a4      	bne.n	800e170 <_dtoa_r+0xa60>
 800e226:	9b04      	ldr	r3, [sp, #16]
 800e228:	3301      	adds	r3, #1
 800e22a:	9304      	str	r3, [sp, #16]
 800e22c:	2331      	movs	r3, #49	@ 0x31
 800e22e:	f88a 3000 	strb.w	r3, [sl]
 800e232:	e5b9      	b.n	800dda8 <_dtoa_r+0x698>
 800e234:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e236:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e294 <_dtoa_r+0xb84>
 800e23a:	b11b      	cbz	r3, 800e244 <_dtoa_r+0xb34>
 800e23c:	f10a 0308 	add.w	r3, sl, #8
 800e240:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e242:	6013      	str	r3, [r2, #0]
 800e244:	4650      	mov	r0, sl
 800e246:	b019      	add	sp, #100	@ 0x64
 800e248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e24c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e24e:	2b01      	cmp	r3, #1
 800e250:	f77f ae37 	ble.w	800dec2 <_dtoa_r+0x7b2>
 800e254:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e256:	930a      	str	r3, [sp, #40]	@ 0x28
 800e258:	2001      	movs	r0, #1
 800e25a:	e655      	b.n	800df08 <_dtoa_r+0x7f8>
 800e25c:	9b00      	ldr	r3, [sp, #0]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	f77f aed6 	ble.w	800e010 <_dtoa_r+0x900>
 800e264:	4656      	mov	r6, sl
 800e266:	4621      	mov	r1, r4
 800e268:	4648      	mov	r0, r9
 800e26a:	f7ff f9c6 	bl	800d5fa <quorem>
 800e26e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e272:	f806 8b01 	strb.w	r8, [r6], #1
 800e276:	9b00      	ldr	r3, [sp, #0]
 800e278:	eba6 020a 	sub.w	r2, r6, sl
 800e27c:	4293      	cmp	r3, r2
 800e27e:	ddb3      	ble.n	800e1e8 <_dtoa_r+0xad8>
 800e280:	4649      	mov	r1, r9
 800e282:	2300      	movs	r3, #0
 800e284:	220a      	movs	r2, #10
 800e286:	4658      	mov	r0, fp
 800e288:	f000 f968 	bl	800e55c <__multadd>
 800e28c:	4681      	mov	r9, r0
 800e28e:	e7ea      	b.n	800e266 <_dtoa_r+0xb56>
 800e290:	0800fa70 	.word	0x0800fa70
 800e294:	0800f9f4 	.word	0x0800f9f4

0800e298 <_free_r>:
 800e298:	b538      	push	{r3, r4, r5, lr}
 800e29a:	4605      	mov	r5, r0
 800e29c:	2900      	cmp	r1, #0
 800e29e:	d041      	beq.n	800e324 <_free_r+0x8c>
 800e2a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e2a4:	1f0c      	subs	r4, r1, #4
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	bfb8      	it	lt
 800e2aa:	18e4      	addlt	r4, r4, r3
 800e2ac:	f000 f8e8 	bl	800e480 <__malloc_lock>
 800e2b0:	4a1d      	ldr	r2, [pc, #116]	@ (800e328 <_free_r+0x90>)
 800e2b2:	6813      	ldr	r3, [r2, #0]
 800e2b4:	b933      	cbnz	r3, 800e2c4 <_free_r+0x2c>
 800e2b6:	6063      	str	r3, [r4, #4]
 800e2b8:	6014      	str	r4, [r2, #0]
 800e2ba:	4628      	mov	r0, r5
 800e2bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2c0:	f000 b8e4 	b.w	800e48c <__malloc_unlock>
 800e2c4:	42a3      	cmp	r3, r4
 800e2c6:	d908      	bls.n	800e2da <_free_r+0x42>
 800e2c8:	6820      	ldr	r0, [r4, #0]
 800e2ca:	1821      	adds	r1, r4, r0
 800e2cc:	428b      	cmp	r3, r1
 800e2ce:	bf01      	itttt	eq
 800e2d0:	6819      	ldreq	r1, [r3, #0]
 800e2d2:	685b      	ldreq	r3, [r3, #4]
 800e2d4:	1809      	addeq	r1, r1, r0
 800e2d6:	6021      	streq	r1, [r4, #0]
 800e2d8:	e7ed      	b.n	800e2b6 <_free_r+0x1e>
 800e2da:	461a      	mov	r2, r3
 800e2dc:	685b      	ldr	r3, [r3, #4]
 800e2de:	b10b      	cbz	r3, 800e2e4 <_free_r+0x4c>
 800e2e0:	42a3      	cmp	r3, r4
 800e2e2:	d9fa      	bls.n	800e2da <_free_r+0x42>
 800e2e4:	6811      	ldr	r1, [r2, #0]
 800e2e6:	1850      	adds	r0, r2, r1
 800e2e8:	42a0      	cmp	r0, r4
 800e2ea:	d10b      	bne.n	800e304 <_free_r+0x6c>
 800e2ec:	6820      	ldr	r0, [r4, #0]
 800e2ee:	4401      	add	r1, r0
 800e2f0:	1850      	adds	r0, r2, r1
 800e2f2:	4283      	cmp	r3, r0
 800e2f4:	6011      	str	r1, [r2, #0]
 800e2f6:	d1e0      	bne.n	800e2ba <_free_r+0x22>
 800e2f8:	6818      	ldr	r0, [r3, #0]
 800e2fa:	685b      	ldr	r3, [r3, #4]
 800e2fc:	6053      	str	r3, [r2, #4]
 800e2fe:	4408      	add	r0, r1
 800e300:	6010      	str	r0, [r2, #0]
 800e302:	e7da      	b.n	800e2ba <_free_r+0x22>
 800e304:	d902      	bls.n	800e30c <_free_r+0x74>
 800e306:	230c      	movs	r3, #12
 800e308:	602b      	str	r3, [r5, #0]
 800e30a:	e7d6      	b.n	800e2ba <_free_r+0x22>
 800e30c:	6820      	ldr	r0, [r4, #0]
 800e30e:	1821      	adds	r1, r4, r0
 800e310:	428b      	cmp	r3, r1
 800e312:	bf04      	itt	eq
 800e314:	6819      	ldreq	r1, [r3, #0]
 800e316:	685b      	ldreq	r3, [r3, #4]
 800e318:	6063      	str	r3, [r4, #4]
 800e31a:	bf04      	itt	eq
 800e31c:	1809      	addeq	r1, r1, r0
 800e31e:	6021      	streq	r1, [r4, #0]
 800e320:	6054      	str	r4, [r2, #4]
 800e322:	e7ca      	b.n	800e2ba <_free_r+0x22>
 800e324:	bd38      	pop	{r3, r4, r5, pc}
 800e326:	bf00      	nop
 800e328:	200051e8 	.word	0x200051e8

0800e32c <malloc>:
 800e32c:	4b02      	ldr	r3, [pc, #8]	@ (800e338 <malloc+0xc>)
 800e32e:	4601      	mov	r1, r0
 800e330:	6818      	ldr	r0, [r3, #0]
 800e332:	f000 b825 	b.w	800e380 <_malloc_r>
 800e336:	bf00      	nop
 800e338:	200000fc 	.word	0x200000fc

0800e33c <sbrk_aligned>:
 800e33c:	b570      	push	{r4, r5, r6, lr}
 800e33e:	4e0f      	ldr	r6, [pc, #60]	@ (800e37c <sbrk_aligned+0x40>)
 800e340:	460c      	mov	r4, r1
 800e342:	6831      	ldr	r1, [r6, #0]
 800e344:	4605      	mov	r5, r0
 800e346:	b911      	cbnz	r1, 800e34e <sbrk_aligned+0x12>
 800e348:	f000 fe46 	bl	800efd8 <_sbrk_r>
 800e34c:	6030      	str	r0, [r6, #0]
 800e34e:	4621      	mov	r1, r4
 800e350:	4628      	mov	r0, r5
 800e352:	f000 fe41 	bl	800efd8 <_sbrk_r>
 800e356:	1c43      	adds	r3, r0, #1
 800e358:	d103      	bne.n	800e362 <sbrk_aligned+0x26>
 800e35a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800e35e:	4620      	mov	r0, r4
 800e360:	bd70      	pop	{r4, r5, r6, pc}
 800e362:	1cc4      	adds	r4, r0, #3
 800e364:	f024 0403 	bic.w	r4, r4, #3
 800e368:	42a0      	cmp	r0, r4
 800e36a:	d0f8      	beq.n	800e35e <sbrk_aligned+0x22>
 800e36c:	1a21      	subs	r1, r4, r0
 800e36e:	4628      	mov	r0, r5
 800e370:	f000 fe32 	bl	800efd8 <_sbrk_r>
 800e374:	3001      	adds	r0, #1
 800e376:	d1f2      	bne.n	800e35e <sbrk_aligned+0x22>
 800e378:	e7ef      	b.n	800e35a <sbrk_aligned+0x1e>
 800e37a:	bf00      	nop
 800e37c:	200051e4 	.word	0x200051e4

0800e380 <_malloc_r>:
 800e380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e384:	1ccd      	adds	r5, r1, #3
 800e386:	f025 0503 	bic.w	r5, r5, #3
 800e38a:	3508      	adds	r5, #8
 800e38c:	2d0c      	cmp	r5, #12
 800e38e:	bf38      	it	cc
 800e390:	250c      	movcc	r5, #12
 800e392:	2d00      	cmp	r5, #0
 800e394:	4606      	mov	r6, r0
 800e396:	db01      	blt.n	800e39c <_malloc_r+0x1c>
 800e398:	42a9      	cmp	r1, r5
 800e39a:	d904      	bls.n	800e3a6 <_malloc_r+0x26>
 800e39c:	230c      	movs	r3, #12
 800e39e:	6033      	str	r3, [r6, #0]
 800e3a0:	2000      	movs	r0, #0
 800e3a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e47c <_malloc_r+0xfc>
 800e3aa:	f000 f869 	bl	800e480 <__malloc_lock>
 800e3ae:	f8d8 3000 	ldr.w	r3, [r8]
 800e3b2:	461c      	mov	r4, r3
 800e3b4:	bb44      	cbnz	r4, 800e408 <_malloc_r+0x88>
 800e3b6:	4629      	mov	r1, r5
 800e3b8:	4630      	mov	r0, r6
 800e3ba:	f7ff ffbf 	bl	800e33c <sbrk_aligned>
 800e3be:	1c43      	adds	r3, r0, #1
 800e3c0:	4604      	mov	r4, r0
 800e3c2:	d158      	bne.n	800e476 <_malloc_r+0xf6>
 800e3c4:	f8d8 4000 	ldr.w	r4, [r8]
 800e3c8:	4627      	mov	r7, r4
 800e3ca:	2f00      	cmp	r7, #0
 800e3cc:	d143      	bne.n	800e456 <_malloc_r+0xd6>
 800e3ce:	2c00      	cmp	r4, #0
 800e3d0:	d04b      	beq.n	800e46a <_malloc_r+0xea>
 800e3d2:	6823      	ldr	r3, [r4, #0]
 800e3d4:	4639      	mov	r1, r7
 800e3d6:	4630      	mov	r0, r6
 800e3d8:	eb04 0903 	add.w	r9, r4, r3
 800e3dc:	f000 fdfc 	bl	800efd8 <_sbrk_r>
 800e3e0:	4581      	cmp	r9, r0
 800e3e2:	d142      	bne.n	800e46a <_malloc_r+0xea>
 800e3e4:	6821      	ldr	r1, [r4, #0]
 800e3e6:	1a6d      	subs	r5, r5, r1
 800e3e8:	4629      	mov	r1, r5
 800e3ea:	4630      	mov	r0, r6
 800e3ec:	f7ff ffa6 	bl	800e33c <sbrk_aligned>
 800e3f0:	3001      	adds	r0, #1
 800e3f2:	d03a      	beq.n	800e46a <_malloc_r+0xea>
 800e3f4:	6823      	ldr	r3, [r4, #0]
 800e3f6:	442b      	add	r3, r5
 800e3f8:	6023      	str	r3, [r4, #0]
 800e3fa:	f8d8 3000 	ldr.w	r3, [r8]
 800e3fe:	685a      	ldr	r2, [r3, #4]
 800e400:	bb62      	cbnz	r2, 800e45c <_malloc_r+0xdc>
 800e402:	f8c8 7000 	str.w	r7, [r8]
 800e406:	e00f      	b.n	800e428 <_malloc_r+0xa8>
 800e408:	6822      	ldr	r2, [r4, #0]
 800e40a:	1b52      	subs	r2, r2, r5
 800e40c:	d420      	bmi.n	800e450 <_malloc_r+0xd0>
 800e40e:	2a0b      	cmp	r2, #11
 800e410:	d917      	bls.n	800e442 <_malloc_r+0xc2>
 800e412:	1961      	adds	r1, r4, r5
 800e414:	42a3      	cmp	r3, r4
 800e416:	6025      	str	r5, [r4, #0]
 800e418:	bf18      	it	ne
 800e41a:	6059      	strne	r1, [r3, #4]
 800e41c:	6863      	ldr	r3, [r4, #4]
 800e41e:	bf08      	it	eq
 800e420:	f8c8 1000 	streq.w	r1, [r8]
 800e424:	5162      	str	r2, [r4, r5]
 800e426:	604b      	str	r3, [r1, #4]
 800e428:	4630      	mov	r0, r6
 800e42a:	f000 f82f 	bl	800e48c <__malloc_unlock>
 800e42e:	f104 000b 	add.w	r0, r4, #11
 800e432:	1d23      	adds	r3, r4, #4
 800e434:	f020 0007 	bic.w	r0, r0, #7
 800e438:	1ac2      	subs	r2, r0, r3
 800e43a:	bf1c      	itt	ne
 800e43c:	1a1b      	subne	r3, r3, r0
 800e43e:	50a3      	strne	r3, [r4, r2]
 800e440:	e7af      	b.n	800e3a2 <_malloc_r+0x22>
 800e442:	6862      	ldr	r2, [r4, #4]
 800e444:	42a3      	cmp	r3, r4
 800e446:	bf0c      	ite	eq
 800e448:	f8c8 2000 	streq.w	r2, [r8]
 800e44c:	605a      	strne	r2, [r3, #4]
 800e44e:	e7eb      	b.n	800e428 <_malloc_r+0xa8>
 800e450:	4623      	mov	r3, r4
 800e452:	6864      	ldr	r4, [r4, #4]
 800e454:	e7ae      	b.n	800e3b4 <_malloc_r+0x34>
 800e456:	463c      	mov	r4, r7
 800e458:	687f      	ldr	r7, [r7, #4]
 800e45a:	e7b6      	b.n	800e3ca <_malloc_r+0x4a>
 800e45c:	461a      	mov	r2, r3
 800e45e:	685b      	ldr	r3, [r3, #4]
 800e460:	42a3      	cmp	r3, r4
 800e462:	d1fb      	bne.n	800e45c <_malloc_r+0xdc>
 800e464:	2300      	movs	r3, #0
 800e466:	6053      	str	r3, [r2, #4]
 800e468:	e7de      	b.n	800e428 <_malloc_r+0xa8>
 800e46a:	230c      	movs	r3, #12
 800e46c:	6033      	str	r3, [r6, #0]
 800e46e:	4630      	mov	r0, r6
 800e470:	f000 f80c 	bl	800e48c <__malloc_unlock>
 800e474:	e794      	b.n	800e3a0 <_malloc_r+0x20>
 800e476:	6005      	str	r5, [r0, #0]
 800e478:	e7d6      	b.n	800e428 <_malloc_r+0xa8>
 800e47a:	bf00      	nop
 800e47c:	200051e8 	.word	0x200051e8

0800e480 <__malloc_lock>:
 800e480:	4801      	ldr	r0, [pc, #4]	@ (800e488 <__malloc_lock+0x8>)
 800e482:	f7ff b8aa 	b.w	800d5da <__retarget_lock_acquire_recursive>
 800e486:	bf00      	nop
 800e488:	200051e0 	.word	0x200051e0

0800e48c <__malloc_unlock>:
 800e48c:	4801      	ldr	r0, [pc, #4]	@ (800e494 <__malloc_unlock+0x8>)
 800e48e:	f7ff b8a5 	b.w	800d5dc <__retarget_lock_release_recursive>
 800e492:	bf00      	nop
 800e494:	200051e0 	.word	0x200051e0

0800e498 <_Balloc>:
 800e498:	b570      	push	{r4, r5, r6, lr}
 800e49a:	69c6      	ldr	r6, [r0, #28]
 800e49c:	4604      	mov	r4, r0
 800e49e:	460d      	mov	r5, r1
 800e4a0:	b976      	cbnz	r6, 800e4c0 <_Balloc+0x28>
 800e4a2:	2010      	movs	r0, #16
 800e4a4:	f7ff ff42 	bl	800e32c <malloc>
 800e4a8:	4602      	mov	r2, r0
 800e4aa:	61e0      	str	r0, [r4, #28]
 800e4ac:	b920      	cbnz	r0, 800e4b8 <_Balloc+0x20>
 800e4ae:	4b18      	ldr	r3, [pc, #96]	@ (800e510 <_Balloc+0x78>)
 800e4b0:	4818      	ldr	r0, [pc, #96]	@ (800e514 <_Balloc+0x7c>)
 800e4b2:	216b      	movs	r1, #107	@ 0x6b
 800e4b4:	f000 fda0 	bl	800eff8 <__assert_func>
 800e4b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e4bc:	6006      	str	r6, [r0, #0]
 800e4be:	60c6      	str	r6, [r0, #12]
 800e4c0:	69e6      	ldr	r6, [r4, #28]
 800e4c2:	68f3      	ldr	r3, [r6, #12]
 800e4c4:	b183      	cbz	r3, 800e4e8 <_Balloc+0x50>
 800e4c6:	69e3      	ldr	r3, [r4, #28]
 800e4c8:	68db      	ldr	r3, [r3, #12]
 800e4ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e4ce:	b9b8      	cbnz	r0, 800e500 <_Balloc+0x68>
 800e4d0:	2101      	movs	r1, #1
 800e4d2:	fa01 f605 	lsl.w	r6, r1, r5
 800e4d6:	1d72      	adds	r2, r6, #5
 800e4d8:	0092      	lsls	r2, r2, #2
 800e4da:	4620      	mov	r0, r4
 800e4dc:	f000 fdaa 	bl	800f034 <_calloc_r>
 800e4e0:	b160      	cbz	r0, 800e4fc <_Balloc+0x64>
 800e4e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e4e6:	e00e      	b.n	800e506 <_Balloc+0x6e>
 800e4e8:	2221      	movs	r2, #33	@ 0x21
 800e4ea:	2104      	movs	r1, #4
 800e4ec:	4620      	mov	r0, r4
 800e4ee:	f000 fda1 	bl	800f034 <_calloc_r>
 800e4f2:	69e3      	ldr	r3, [r4, #28]
 800e4f4:	60f0      	str	r0, [r6, #12]
 800e4f6:	68db      	ldr	r3, [r3, #12]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d1e4      	bne.n	800e4c6 <_Balloc+0x2e>
 800e4fc:	2000      	movs	r0, #0
 800e4fe:	bd70      	pop	{r4, r5, r6, pc}
 800e500:	6802      	ldr	r2, [r0, #0]
 800e502:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e506:	2300      	movs	r3, #0
 800e508:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e50c:	e7f7      	b.n	800e4fe <_Balloc+0x66>
 800e50e:	bf00      	nop
 800e510:	0800fa01 	.word	0x0800fa01
 800e514:	0800fa81 	.word	0x0800fa81

0800e518 <_Bfree>:
 800e518:	b570      	push	{r4, r5, r6, lr}
 800e51a:	69c6      	ldr	r6, [r0, #28]
 800e51c:	4605      	mov	r5, r0
 800e51e:	460c      	mov	r4, r1
 800e520:	b976      	cbnz	r6, 800e540 <_Bfree+0x28>
 800e522:	2010      	movs	r0, #16
 800e524:	f7ff ff02 	bl	800e32c <malloc>
 800e528:	4602      	mov	r2, r0
 800e52a:	61e8      	str	r0, [r5, #28]
 800e52c:	b920      	cbnz	r0, 800e538 <_Bfree+0x20>
 800e52e:	4b09      	ldr	r3, [pc, #36]	@ (800e554 <_Bfree+0x3c>)
 800e530:	4809      	ldr	r0, [pc, #36]	@ (800e558 <_Bfree+0x40>)
 800e532:	218f      	movs	r1, #143	@ 0x8f
 800e534:	f000 fd60 	bl	800eff8 <__assert_func>
 800e538:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e53c:	6006      	str	r6, [r0, #0]
 800e53e:	60c6      	str	r6, [r0, #12]
 800e540:	b13c      	cbz	r4, 800e552 <_Bfree+0x3a>
 800e542:	69eb      	ldr	r3, [r5, #28]
 800e544:	6862      	ldr	r2, [r4, #4]
 800e546:	68db      	ldr	r3, [r3, #12]
 800e548:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e54c:	6021      	str	r1, [r4, #0]
 800e54e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e552:	bd70      	pop	{r4, r5, r6, pc}
 800e554:	0800fa01 	.word	0x0800fa01
 800e558:	0800fa81 	.word	0x0800fa81

0800e55c <__multadd>:
 800e55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e560:	690d      	ldr	r5, [r1, #16]
 800e562:	4607      	mov	r7, r0
 800e564:	460c      	mov	r4, r1
 800e566:	461e      	mov	r6, r3
 800e568:	f101 0c14 	add.w	ip, r1, #20
 800e56c:	2000      	movs	r0, #0
 800e56e:	f8dc 3000 	ldr.w	r3, [ip]
 800e572:	b299      	uxth	r1, r3
 800e574:	fb02 6101 	mla	r1, r2, r1, r6
 800e578:	0c1e      	lsrs	r6, r3, #16
 800e57a:	0c0b      	lsrs	r3, r1, #16
 800e57c:	fb02 3306 	mla	r3, r2, r6, r3
 800e580:	b289      	uxth	r1, r1
 800e582:	3001      	adds	r0, #1
 800e584:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e588:	4285      	cmp	r5, r0
 800e58a:	f84c 1b04 	str.w	r1, [ip], #4
 800e58e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e592:	dcec      	bgt.n	800e56e <__multadd+0x12>
 800e594:	b30e      	cbz	r6, 800e5da <__multadd+0x7e>
 800e596:	68a3      	ldr	r3, [r4, #8]
 800e598:	42ab      	cmp	r3, r5
 800e59a:	dc19      	bgt.n	800e5d0 <__multadd+0x74>
 800e59c:	6861      	ldr	r1, [r4, #4]
 800e59e:	4638      	mov	r0, r7
 800e5a0:	3101      	adds	r1, #1
 800e5a2:	f7ff ff79 	bl	800e498 <_Balloc>
 800e5a6:	4680      	mov	r8, r0
 800e5a8:	b928      	cbnz	r0, 800e5b6 <__multadd+0x5a>
 800e5aa:	4602      	mov	r2, r0
 800e5ac:	4b0c      	ldr	r3, [pc, #48]	@ (800e5e0 <__multadd+0x84>)
 800e5ae:	480d      	ldr	r0, [pc, #52]	@ (800e5e4 <__multadd+0x88>)
 800e5b0:	21ba      	movs	r1, #186	@ 0xba
 800e5b2:	f000 fd21 	bl	800eff8 <__assert_func>
 800e5b6:	6922      	ldr	r2, [r4, #16]
 800e5b8:	3202      	adds	r2, #2
 800e5ba:	f104 010c 	add.w	r1, r4, #12
 800e5be:	0092      	lsls	r2, r2, #2
 800e5c0:	300c      	adds	r0, #12
 800e5c2:	f7ff f80c 	bl	800d5de <memcpy>
 800e5c6:	4621      	mov	r1, r4
 800e5c8:	4638      	mov	r0, r7
 800e5ca:	f7ff ffa5 	bl	800e518 <_Bfree>
 800e5ce:	4644      	mov	r4, r8
 800e5d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e5d4:	3501      	adds	r5, #1
 800e5d6:	615e      	str	r6, [r3, #20]
 800e5d8:	6125      	str	r5, [r4, #16]
 800e5da:	4620      	mov	r0, r4
 800e5dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5e0:	0800fa70 	.word	0x0800fa70
 800e5e4:	0800fa81 	.word	0x0800fa81

0800e5e8 <__hi0bits>:
 800e5e8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e5ec:	4603      	mov	r3, r0
 800e5ee:	bf36      	itet	cc
 800e5f0:	0403      	lslcc	r3, r0, #16
 800e5f2:	2000      	movcs	r0, #0
 800e5f4:	2010      	movcc	r0, #16
 800e5f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e5fa:	bf3c      	itt	cc
 800e5fc:	021b      	lslcc	r3, r3, #8
 800e5fe:	3008      	addcc	r0, #8
 800e600:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e604:	bf3c      	itt	cc
 800e606:	011b      	lslcc	r3, r3, #4
 800e608:	3004      	addcc	r0, #4
 800e60a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e60e:	bf3c      	itt	cc
 800e610:	009b      	lslcc	r3, r3, #2
 800e612:	3002      	addcc	r0, #2
 800e614:	2b00      	cmp	r3, #0
 800e616:	db05      	blt.n	800e624 <__hi0bits+0x3c>
 800e618:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e61c:	f100 0001 	add.w	r0, r0, #1
 800e620:	bf08      	it	eq
 800e622:	2020      	moveq	r0, #32
 800e624:	4770      	bx	lr

0800e626 <__lo0bits>:
 800e626:	6803      	ldr	r3, [r0, #0]
 800e628:	4602      	mov	r2, r0
 800e62a:	f013 0007 	ands.w	r0, r3, #7
 800e62e:	d00b      	beq.n	800e648 <__lo0bits+0x22>
 800e630:	07d9      	lsls	r1, r3, #31
 800e632:	d421      	bmi.n	800e678 <__lo0bits+0x52>
 800e634:	0798      	lsls	r0, r3, #30
 800e636:	bf49      	itett	mi
 800e638:	085b      	lsrmi	r3, r3, #1
 800e63a:	089b      	lsrpl	r3, r3, #2
 800e63c:	2001      	movmi	r0, #1
 800e63e:	6013      	strmi	r3, [r2, #0]
 800e640:	bf5c      	itt	pl
 800e642:	6013      	strpl	r3, [r2, #0]
 800e644:	2002      	movpl	r0, #2
 800e646:	4770      	bx	lr
 800e648:	b299      	uxth	r1, r3
 800e64a:	b909      	cbnz	r1, 800e650 <__lo0bits+0x2a>
 800e64c:	0c1b      	lsrs	r3, r3, #16
 800e64e:	2010      	movs	r0, #16
 800e650:	b2d9      	uxtb	r1, r3
 800e652:	b909      	cbnz	r1, 800e658 <__lo0bits+0x32>
 800e654:	3008      	adds	r0, #8
 800e656:	0a1b      	lsrs	r3, r3, #8
 800e658:	0719      	lsls	r1, r3, #28
 800e65a:	bf04      	itt	eq
 800e65c:	091b      	lsreq	r3, r3, #4
 800e65e:	3004      	addeq	r0, #4
 800e660:	0799      	lsls	r1, r3, #30
 800e662:	bf04      	itt	eq
 800e664:	089b      	lsreq	r3, r3, #2
 800e666:	3002      	addeq	r0, #2
 800e668:	07d9      	lsls	r1, r3, #31
 800e66a:	d403      	bmi.n	800e674 <__lo0bits+0x4e>
 800e66c:	085b      	lsrs	r3, r3, #1
 800e66e:	f100 0001 	add.w	r0, r0, #1
 800e672:	d003      	beq.n	800e67c <__lo0bits+0x56>
 800e674:	6013      	str	r3, [r2, #0]
 800e676:	4770      	bx	lr
 800e678:	2000      	movs	r0, #0
 800e67a:	4770      	bx	lr
 800e67c:	2020      	movs	r0, #32
 800e67e:	4770      	bx	lr

0800e680 <__i2b>:
 800e680:	b510      	push	{r4, lr}
 800e682:	460c      	mov	r4, r1
 800e684:	2101      	movs	r1, #1
 800e686:	f7ff ff07 	bl	800e498 <_Balloc>
 800e68a:	4602      	mov	r2, r0
 800e68c:	b928      	cbnz	r0, 800e69a <__i2b+0x1a>
 800e68e:	4b05      	ldr	r3, [pc, #20]	@ (800e6a4 <__i2b+0x24>)
 800e690:	4805      	ldr	r0, [pc, #20]	@ (800e6a8 <__i2b+0x28>)
 800e692:	f240 1145 	movw	r1, #325	@ 0x145
 800e696:	f000 fcaf 	bl	800eff8 <__assert_func>
 800e69a:	2301      	movs	r3, #1
 800e69c:	6144      	str	r4, [r0, #20]
 800e69e:	6103      	str	r3, [r0, #16]
 800e6a0:	bd10      	pop	{r4, pc}
 800e6a2:	bf00      	nop
 800e6a4:	0800fa70 	.word	0x0800fa70
 800e6a8:	0800fa81 	.word	0x0800fa81

0800e6ac <__multiply>:
 800e6ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6b0:	4614      	mov	r4, r2
 800e6b2:	690a      	ldr	r2, [r1, #16]
 800e6b4:	6923      	ldr	r3, [r4, #16]
 800e6b6:	429a      	cmp	r2, r3
 800e6b8:	bfa8      	it	ge
 800e6ba:	4623      	movge	r3, r4
 800e6bc:	460f      	mov	r7, r1
 800e6be:	bfa4      	itt	ge
 800e6c0:	460c      	movge	r4, r1
 800e6c2:	461f      	movge	r7, r3
 800e6c4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e6c8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e6cc:	68a3      	ldr	r3, [r4, #8]
 800e6ce:	6861      	ldr	r1, [r4, #4]
 800e6d0:	eb0a 0609 	add.w	r6, sl, r9
 800e6d4:	42b3      	cmp	r3, r6
 800e6d6:	b085      	sub	sp, #20
 800e6d8:	bfb8      	it	lt
 800e6da:	3101      	addlt	r1, #1
 800e6dc:	f7ff fedc 	bl	800e498 <_Balloc>
 800e6e0:	b930      	cbnz	r0, 800e6f0 <__multiply+0x44>
 800e6e2:	4602      	mov	r2, r0
 800e6e4:	4b44      	ldr	r3, [pc, #272]	@ (800e7f8 <__multiply+0x14c>)
 800e6e6:	4845      	ldr	r0, [pc, #276]	@ (800e7fc <__multiply+0x150>)
 800e6e8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e6ec:	f000 fc84 	bl	800eff8 <__assert_func>
 800e6f0:	f100 0514 	add.w	r5, r0, #20
 800e6f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e6f8:	462b      	mov	r3, r5
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	4543      	cmp	r3, r8
 800e6fe:	d321      	bcc.n	800e744 <__multiply+0x98>
 800e700:	f107 0114 	add.w	r1, r7, #20
 800e704:	f104 0214 	add.w	r2, r4, #20
 800e708:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e70c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e710:	9302      	str	r3, [sp, #8]
 800e712:	1b13      	subs	r3, r2, r4
 800e714:	3b15      	subs	r3, #21
 800e716:	f023 0303 	bic.w	r3, r3, #3
 800e71a:	3304      	adds	r3, #4
 800e71c:	f104 0715 	add.w	r7, r4, #21
 800e720:	42ba      	cmp	r2, r7
 800e722:	bf38      	it	cc
 800e724:	2304      	movcc	r3, #4
 800e726:	9301      	str	r3, [sp, #4]
 800e728:	9b02      	ldr	r3, [sp, #8]
 800e72a:	9103      	str	r1, [sp, #12]
 800e72c:	428b      	cmp	r3, r1
 800e72e:	d80c      	bhi.n	800e74a <__multiply+0x9e>
 800e730:	2e00      	cmp	r6, #0
 800e732:	dd03      	ble.n	800e73c <__multiply+0x90>
 800e734:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d05b      	beq.n	800e7f4 <__multiply+0x148>
 800e73c:	6106      	str	r6, [r0, #16]
 800e73e:	b005      	add	sp, #20
 800e740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e744:	f843 2b04 	str.w	r2, [r3], #4
 800e748:	e7d8      	b.n	800e6fc <__multiply+0x50>
 800e74a:	f8b1 a000 	ldrh.w	sl, [r1]
 800e74e:	f1ba 0f00 	cmp.w	sl, #0
 800e752:	d024      	beq.n	800e79e <__multiply+0xf2>
 800e754:	f104 0e14 	add.w	lr, r4, #20
 800e758:	46a9      	mov	r9, r5
 800e75a:	f04f 0c00 	mov.w	ip, #0
 800e75e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e762:	f8d9 3000 	ldr.w	r3, [r9]
 800e766:	fa1f fb87 	uxth.w	fp, r7
 800e76a:	b29b      	uxth	r3, r3
 800e76c:	fb0a 330b 	mla	r3, sl, fp, r3
 800e770:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e774:	f8d9 7000 	ldr.w	r7, [r9]
 800e778:	4463      	add	r3, ip
 800e77a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e77e:	fb0a c70b 	mla	r7, sl, fp, ip
 800e782:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e786:	b29b      	uxth	r3, r3
 800e788:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e78c:	4572      	cmp	r2, lr
 800e78e:	f849 3b04 	str.w	r3, [r9], #4
 800e792:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e796:	d8e2      	bhi.n	800e75e <__multiply+0xb2>
 800e798:	9b01      	ldr	r3, [sp, #4]
 800e79a:	f845 c003 	str.w	ip, [r5, r3]
 800e79e:	9b03      	ldr	r3, [sp, #12]
 800e7a0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e7a4:	3104      	adds	r1, #4
 800e7a6:	f1b9 0f00 	cmp.w	r9, #0
 800e7aa:	d021      	beq.n	800e7f0 <__multiply+0x144>
 800e7ac:	682b      	ldr	r3, [r5, #0]
 800e7ae:	f104 0c14 	add.w	ip, r4, #20
 800e7b2:	46ae      	mov	lr, r5
 800e7b4:	f04f 0a00 	mov.w	sl, #0
 800e7b8:	f8bc b000 	ldrh.w	fp, [ip]
 800e7bc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e7c0:	fb09 770b 	mla	r7, r9, fp, r7
 800e7c4:	4457      	add	r7, sl
 800e7c6:	b29b      	uxth	r3, r3
 800e7c8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e7cc:	f84e 3b04 	str.w	r3, [lr], #4
 800e7d0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e7d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e7d8:	f8be 3000 	ldrh.w	r3, [lr]
 800e7dc:	fb09 330a 	mla	r3, r9, sl, r3
 800e7e0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e7e4:	4562      	cmp	r2, ip
 800e7e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e7ea:	d8e5      	bhi.n	800e7b8 <__multiply+0x10c>
 800e7ec:	9f01      	ldr	r7, [sp, #4]
 800e7ee:	51eb      	str	r3, [r5, r7]
 800e7f0:	3504      	adds	r5, #4
 800e7f2:	e799      	b.n	800e728 <__multiply+0x7c>
 800e7f4:	3e01      	subs	r6, #1
 800e7f6:	e79b      	b.n	800e730 <__multiply+0x84>
 800e7f8:	0800fa70 	.word	0x0800fa70
 800e7fc:	0800fa81 	.word	0x0800fa81

0800e800 <__pow5mult>:
 800e800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e804:	4615      	mov	r5, r2
 800e806:	f012 0203 	ands.w	r2, r2, #3
 800e80a:	4607      	mov	r7, r0
 800e80c:	460e      	mov	r6, r1
 800e80e:	d007      	beq.n	800e820 <__pow5mult+0x20>
 800e810:	4c25      	ldr	r4, [pc, #148]	@ (800e8a8 <__pow5mult+0xa8>)
 800e812:	3a01      	subs	r2, #1
 800e814:	2300      	movs	r3, #0
 800e816:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e81a:	f7ff fe9f 	bl	800e55c <__multadd>
 800e81e:	4606      	mov	r6, r0
 800e820:	10ad      	asrs	r5, r5, #2
 800e822:	d03d      	beq.n	800e8a0 <__pow5mult+0xa0>
 800e824:	69fc      	ldr	r4, [r7, #28]
 800e826:	b97c      	cbnz	r4, 800e848 <__pow5mult+0x48>
 800e828:	2010      	movs	r0, #16
 800e82a:	f7ff fd7f 	bl	800e32c <malloc>
 800e82e:	4602      	mov	r2, r0
 800e830:	61f8      	str	r0, [r7, #28]
 800e832:	b928      	cbnz	r0, 800e840 <__pow5mult+0x40>
 800e834:	4b1d      	ldr	r3, [pc, #116]	@ (800e8ac <__pow5mult+0xac>)
 800e836:	481e      	ldr	r0, [pc, #120]	@ (800e8b0 <__pow5mult+0xb0>)
 800e838:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e83c:	f000 fbdc 	bl	800eff8 <__assert_func>
 800e840:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e844:	6004      	str	r4, [r0, #0]
 800e846:	60c4      	str	r4, [r0, #12]
 800e848:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e84c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e850:	b94c      	cbnz	r4, 800e866 <__pow5mult+0x66>
 800e852:	f240 2171 	movw	r1, #625	@ 0x271
 800e856:	4638      	mov	r0, r7
 800e858:	f7ff ff12 	bl	800e680 <__i2b>
 800e85c:	2300      	movs	r3, #0
 800e85e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e862:	4604      	mov	r4, r0
 800e864:	6003      	str	r3, [r0, #0]
 800e866:	f04f 0900 	mov.w	r9, #0
 800e86a:	07eb      	lsls	r3, r5, #31
 800e86c:	d50a      	bpl.n	800e884 <__pow5mult+0x84>
 800e86e:	4631      	mov	r1, r6
 800e870:	4622      	mov	r2, r4
 800e872:	4638      	mov	r0, r7
 800e874:	f7ff ff1a 	bl	800e6ac <__multiply>
 800e878:	4631      	mov	r1, r6
 800e87a:	4680      	mov	r8, r0
 800e87c:	4638      	mov	r0, r7
 800e87e:	f7ff fe4b 	bl	800e518 <_Bfree>
 800e882:	4646      	mov	r6, r8
 800e884:	106d      	asrs	r5, r5, #1
 800e886:	d00b      	beq.n	800e8a0 <__pow5mult+0xa0>
 800e888:	6820      	ldr	r0, [r4, #0]
 800e88a:	b938      	cbnz	r0, 800e89c <__pow5mult+0x9c>
 800e88c:	4622      	mov	r2, r4
 800e88e:	4621      	mov	r1, r4
 800e890:	4638      	mov	r0, r7
 800e892:	f7ff ff0b 	bl	800e6ac <__multiply>
 800e896:	6020      	str	r0, [r4, #0]
 800e898:	f8c0 9000 	str.w	r9, [r0]
 800e89c:	4604      	mov	r4, r0
 800e89e:	e7e4      	b.n	800e86a <__pow5mult+0x6a>
 800e8a0:	4630      	mov	r0, r6
 800e8a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8a6:	bf00      	nop
 800e8a8:	0800fadc 	.word	0x0800fadc
 800e8ac:	0800fa01 	.word	0x0800fa01
 800e8b0:	0800fa81 	.word	0x0800fa81

0800e8b4 <__lshift>:
 800e8b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8b8:	460c      	mov	r4, r1
 800e8ba:	6849      	ldr	r1, [r1, #4]
 800e8bc:	6923      	ldr	r3, [r4, #16]
 800e8be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e8c2:	68a3      	ldr	r3, [r4, #8]
 800e8c4:	4607      	mov	r7, r0
 800e8c6:	4691      	mov	r9, r2
 800e8c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e8cc:	f108 0601 	add.w	r6, r8, #1
 800e8d0:	42b3      	cmp	r3, r6
 800e8d2:	db0b      	blt.n	800e8ec <__lshift+0x38>
 800e8d4:	4638      	mov	r0, r7
 800e8d6:	f7ff fddf 	bl	800e498 <_Balloc>
 800e8da:	4605      	mov	r5, r0
 800e8dc:	b948      	cbnz	r0, 800e8f2 <__lshift+0x3e>
 800e8de:	4602      	mov	r2, r0
 800e8e0:	4b28      	ldr	r3, [pc, #160]	@ (800e984 <__lshift+0xd0>)
 800e8e2:	4829      	ldr	r0, [pc, #164]	@ (800e988 <__lshift+0xd4>)
 800e8e4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e8e8:	f000 fb86 	bl	800eff8 <__assert_func>
 800e8ec:	3101      	adds	r1, #1
 800e8ee:	005b      	lsls	r3, r3, #1
 800e8f0:	e7ee      	b.n	800e8d0 <__lshift+0x1c>
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	f100 0114 	add.w	r1, r0, #20
 800e8f8:	f100 0210 	add.w	r2, r0, #16
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	4553      	cmp	r3, sl
 800e900:	db33      	blt.n	800e96a <__lshift+0xb6>
 800e902:	6920      	ldr	r0, [r4, #16]
 800e904:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e908:	f104 0314 	add.w	r3, r4, #20
 800e90c:	f019 091f 	ands.w	r9, r9, #31
 800e910:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e914:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e918:	d02b      	beq.n	800e972 <__lshift+0xbe>
 800e91a:	f1c9 0e20 	rsb	lr, r9, #32
 800e91e:	468a      	mov	sl, r1
 800e920:	2200      	movs	r2, #0
 800e922:	6818      	ldr	r0, [r3, #0]
 800e924:	fa00 f009 	lsl.w	r0, r0, r9
 800e928:	4310      	orrs	r0, r2
 800e92a:	f84a 0b04 	str.w	r0, [sl], #4
 800e92e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e932:	459c      	cmp	ip, r3
 800e934:	fa22 f20e 	lsr.w	r2, r2, lr
 800e938:	d8f3      	bhi.n	800e922 <__lshift+0x6e>
 800e93a:	ebac 0304 	sub.w	r3, ip, r4
 800e93e:	3b15      	subs	r3, #21
 800e940:	f023 0303 	bic.w	r3, r3, #3
 800e944:	3304      	adds	r3, #4
 800e946:	f104 0015 	add.w	r0, r4, #21
 800e94a:	4584      	cmp	ip, r0
 800e94c:	bf38      	it	cc
 800e94e:	2304      	movcc	r3, #4
 800e950:	50ca      	str	r2, [r1, r3]
 800e952:	b10a      	cbz	r2, 800e958 <__lshift+0xa4>
 800e954:	f108 0602 	add.w	r6, r8, #2
 800e958:	3e01      	subs	r6, #1
 800e95a:	4638      	mov	r0, r7
 800e95c:	612e      	str	r6, [r5, #16]
 800e95e:	4621      	mov	r1, r4
 800e960:	f7ff fdda 	bl	800e518 <_Bfree>
 800e964:	4628      	mov	r0, r5
 800e966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e96a:	f842 0f04 	str.w	r0, [r2, #4]!
 800e96e:	3301      	adds	r3, #1
 800e970:	e7c5      	b.n	800e8fe <__lshift+0x4a>
 800e972:	3904      	subs	r1, #4
 800e974:	f853 2b04 	ldr.w	r2, [r3], #4
 800e978:	f841 2f04 	str.w	r2, [r1, #4]!
 800e97c:	459c      	cmp	ip, r3
 800e97e:	d8f9      	bhi.n	800e974 <__lshift+0xc0>
 800e980:	e7ea      	b.n	800e958 <__lshift+0xa4>
 800e982:	bf00      	nop
 800e984:	0800fa70 	.word	0x0800fa70
 800e988:	0800fa81 	.word	0x0800fa81

0800e98c <__mcmp>:
 800e98c:	690a      	ldr	r2, [r1, #16]
 800e98e:	4603      	mov	r3, r0
 800e990:	6900      	ldr	r0, [r0, #16]
 800e992:	1a80      	subs	r0, r0, r2
 800e994:	b530      	push	{r4, r5, lr}
 800e996:	d10e      	bne.n	800e9b6 <__mcmp+0x2a>
 800e998:	3314      	adds	r3, #20
 800e99a:	3114      	adds	r1, #20
 800e99c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e9a0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e9a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e9a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e9ac:	4295      	cmp	r5, r2
 800e9ae:	d003      	beq.n	800e9b8 <__mcmp+0x2c>
 800e9b0:	d205      	bcs.n	800e9be <__mcmp+0x32>
 800e9b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e9b6:	bd30      	pop	{r4, r5, pc}
 800e9b8:	42a3      	cmp	r3, r4
 800e9ba:	d3f3      	bcc.n	800e9a4 <__mcmp+0x18>
 800e9bc:	e7fb      	b.n	800e9b6 <__mcmp+0x2a>
 800e9be:	2001      	movs	r0, #1
 800e9c0:	e7f9      	b.n	800e9b6 <__mcmp+0x2a>
	...

0800e9c4 <__mdiff>:
 800e9c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9c8:	4689      	mov	r9, r1
 800e9ca:	4606      	mov	r6, r0
 800e9cc:	4611      	mov	r1, r2
 800e9ce:	4648      	mov	r0, r9
 800e9d0:	4614      	mov	r4, r2
 800e9d2:	f7ff ffdb 	bl	800e98c <__mcmp>
 800e9d6:	1e05      	subs	r5, r0, #0
 800e9d8:	d112      	bne.n	800ea00 <__mdiff+0x3c>
 800e9da:	4629      	mov	r1, r5
 800e9dc:	4630      	mov	r0, r6
 800e9de:	f7ff fd5b 	bl	800e498 <_Balloc>
 800e9e2:	4602      	mov	r2, r0
 800e9e4:	b928      	cbnz	r0, 800e9f2 <__mdiff+0x2e>
 800e9e6:	4b3f      	ldr	r3, [pc, #252]	@ (800eae4 <__mdiff+0x120>)
 800e9e8:	f240 2137 	movw	r1, #567	@ 0x237
 800e9ec:	483e      	ldr	r0, [pc, #248]	@ (800eae8 <__mdiff+0x124>)
 800e9ee:	f000 fb03 	bl	800eff8 <__assert_func>
 800e9f2:	2301      	movs	r3, #1
 800e9f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e9f8:	4610      	mov	r0, r2
 800e9fa:	b003      	add	sp, #12
 800e9fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea00:	bfbc      	itt	lt
 800ea02:	464b      	movlt	r3, r9
 800ea04:	46a1      	movlt	r9, r4
 800ea06:	4630      	mov	r0, r6
 800ea08:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ea0c:	bfba      	itte	lt
 800ea0e:	461c      	movlt	r4, r3
 800ea10:	2501      	movlt	r5, #1
 800ea12:	2500      	movge	r5, #0
 800ea14:	f7ff fd40 	bl	800e498 <_Balloc>
 800ea18:	4602      	mov	r2, r0
 800ea1a:	b918      	cbnz	r0, 800ea24 <__mdiff+0x60>
 800ea1c:	4b31      	ldr	r3, [pc, #196]	@ (800eae4 <__mdiff+0x120>)
 800ea1e:	f240 2145 	movw	r1, #581	@ 0x245
 800ea22:	e7e3      	b.n	800e9ec <__mdiff+0x28>
 800ea24:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ea28:	6926      	ldr	r6, [r4, #16]
 800ea2a:	60c5      	str	r5, [r0, #12]
 800ea2c:	f109 0310 	add.w	r3, r9, #16
 800ea30:	f109 0514 	add.w	r5, r9, #20
 800ea34:	f104 0e14 	add.w	lr, r4, #20
 800ea38:	f100 0b14 	add.w	fp, r0, #20
 800ea3c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ea40:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ea44:	9301      	str	r3, [sp, #4]
 800ea46:	46d9      	mov	r9, fp
 800ea48:	f04f 0c00 	mov.w	ip, #0
 800ea4c:	9b01      	ldr	r3, [sp, #4]
 800ea4e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ea52:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ea56:	9301      	str	r3, [sp, #4]
 800ea58:	fa1f f38a 	uxth.w	r3, sl
 800ea5c:	4619      	mov	r1, r3
 800ea5e:	b283      	uxth	r3, r0
 800ea60:	1acb      	subs	r3, r1, r3
 800ea62:	0c00      	lsrs	r0, r0, #16
 800ea64:	4463      	add	r3, ip
 800ea66:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ea6a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ea6e:	b29b      	uxth	r3, r3
 800ea70:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ea74:	4576      	cmp	r6, lr
 800ea76:	f849 3b04 	str.w	r3, [r9], #4
 800ea7a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ea7e:	d8e5      	bhi.n	800ea4c <__mdiff+0x88>
 800ea80:	1b33      	subs	r3, r6, r4
 800ea82:	3b15      	subs	r3, #21
 800ea84:	f023 0303 	bic.w	r3, r3, #3
 800ea88:	3415      	adds	r4, #21
 800ea8a:	3304      	adds	r3, #4
 800ea8c:	42a6      	cmp	r6, r4
 800ea8e:	bf38      	it	cc
 800ea90:	2304      	movcc	r3, #4
 800ea92:	441d      	add	r5, r3
 800ea94:	445b      	add	r3, fp
 800ea96:	461e      	mov	r6, r3
 800ea98:	462c      	mov	r4, r5
 800ea9a:	4544      	cmp	r4, r8
 800ea9c:	d30e      	bcc.n	800eabc <__mdiff+0xf8>
 800ea9e:	f108 0103 	add.w	r1, r8, #3
 800eaa2:	1b49      	subs	r1, r1, r5
 800eaa4:	f021 0103 	bic.w	r1, r1, #3
 800eaa8:	3d03      	subs	r5, #3
 800eaaa:	45a8      	cmp	r8, r5
 800eaac:	bf38      	it	cc
 800eaae:	2100      	movcc	r1, #0
 800eab0:	440b      	add	r3, r1
 800eab2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800eab6:	b191      	cbz	r1, 800eade <__mdiff+0x11a>
 800eab8:	6117      	str	r7, [r2, #16]
 800eaba:	e79d      	b.n	800e9f8 <__mdiff+0x34>
 800eabc:	f854 1b04 	ldr.w	r1, [r4], #4
 800eac0:	46e6      	mov	lr, ip
 800eac2:	0c08      	lsrs	r0, r1, #16
 800eac4:	fa1c fc81 	uxtah	ip, ip, r1
 800eac8:	4471      	add	r1, lr
 800eaca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800eace:	b289      	uxth	r1, r1
 800ead0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ead4:	f846 1b04 	str.w	r1, [r6], #4
 800ead8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800eadc:	e7dd      	b.n	800ea9a <__mdiff+0xd6>
 800eade:	3f01      	subs	r7, #1
 800eae0:	e7e7      	b.n	800eab2 <__mdiff+0xee>
 800eae2:	bf00      	nop
 800eae4:	0800fa70 	.word	0x0800fa70
 800eae8:	0800fa81 	.word	0x0800fa81

0800eaec <__d2b>:
 800eaec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800eaf0:	460f      	mov	r7, r1
 800eaf2:	2101      	movs	r1, #1
 800eaf4:	ec59 8b10 	vmov	r8, r9, d0
 800eaf8:	4616      	mov	r6, r2
 800eafa:	f7ff fccd 	bl	800e498 <_Balloc>
 800eafe:	4604      	mov	r4, r0
 800eb00:	b930      	cbnz	r0, 800eb10 <__d2b+0x24>
 800eb02:	4602      	mov	r2, r0
 800eb04:	4b23      	ldr	r3, [pc, #140]	@ (800eb94 <__d2b+0xa8>)
 800eb06:	4824      	ldr	r0, [pc, #144]	@ (800eb98 <__d2b+0xac>)
 800eb08:	f240 310f 	movw	r1, #783	@ 0x30f
 800eb0c:	f000 fa74 	bl	800eff8 <__assert_func>
 800eb10:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800eb14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800eb18:	b10d      	cbz	r5, 800eb1e <__d2b+0x32>
 800eb1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800eb1e:	9301      	str	r3, [sp, #4]
 800eb20:	f1b8 0300 	subs.w	r3, r8, #0
 800eb24:	d023      	beq.n	800eb6e <__d2b+0x82>
 800eb26:	4668      	mov	r0, sp
 800eb28:	9300      	str	r3, [sp, #0]
 800eb2a:	f7ff fd7c 	bl	800e626 <__lo0bits>
 800eb2e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800eb32:	b1d0      	cbz	r0, 800eb6a <__d2b+0x7e>
 800eb34:	f1c0 0320 	rsb	r3, r0, #32
 800eb38:	fa02 f303 	lsl.w	r3, r2, r3
 800eb3c:	430b      	orrs	r3, r1
 800eb3e:	40c2      	lsrs	r2, r0
 800eb40:	6163      	str	r3, [r4, #20]
 800eb42:	9201      	str	r2, [sp, #4]
 800eb44:	9b01      	ldr	r3, [sp, #4]
 800eb46:	61a3      	str	r3, [r4, #24]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	bf0c      	ite	eq
 800eb4c:	2201      	moveq	r2, #1
 800eb4e:	2202      	movne	r2, #2
 800eb50:	6122      	str	r2, [r4, #16]
 800eb52:	b1a5      	cbz	r5, 800eb7e <__d2b+0x92>
 800eb54:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800eb58:	4405      	add	r5, r0
 800eb5a:	603d      	str	r5, [r7, #0]
 800eb5c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800eb60:	6030      	str	r0, [r6, #0]
 800eb62:	4620      	mov	r0, r4
 800eb64:	b003      	add	sp, #12
 800eb66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb6a:	6161      	str	r1, [r4, #20]
 800eb6c:	e7ea      	b.n	800eb44 <__d2b+0x58>
 800eb6e:	a801      	add	r0, sp, #4
 800eb70:	f7ff fd59 	bl	800e626 <__lo0bits>
 800eb74:	9b01      	ldr	r3, [sp, #4]
 800eb76:	6163      	str	r3, [r4, #20]
 800eb78:	3020      	adds	r0, #32
 800eb7a:	2201      	movs	r2, #1
 800eb7c:	e7e8      	b.n	800eb50 <__d2b+0x64>
 800eb7e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eb82:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800eb86:	6038      	str	r0, [r7, #0]
 800eb88:	6918      	ldr	r0, [r3, #16]
 800eb8a:	f7ff fd2d 	bl	800e5e8 <__hi0bits>
 800eb8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800eb92:	e7e5      	b.n	800eb60 <__d2b+0x74>
 800eb94:	0800fa70 	.word	0x0800fa70
 800eb98:	0800fa81 	.word	0x0800fa81

0800eb9c <__ssputs_r>:
 800eb9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eba0:	688e      	ldr	r6, [r1, #8]
 800eba2:	461f      	mov	r7, r3
 800eba4:	42be      	cmp	r6, r7
 800eba6:	680b      	ldr	r3, [r1, #0]
 800eba8:	4682      	mov	sl, r0
 800ebaa:	460c      	mov	r4, r1
 800ebac:	4690      	mov	r8, r2
 800ebae:	d82d      	bhi.n	800ec0c <__ssputs_r+0x70>
 800ebb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ebb4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ebb8:	d026      	beq.n	800ec08 <__ssputs_r+0x6c>
 800ebba:	6965      	ldr	r5, [r4, #20]
 800ebbc:	6909      	ldr	r1, [r1, #16]
 800ebbe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ebc2:	eba3 0901 	sub.w	r9, r3, r1
 800ebc6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ebca:	1c7b      	adds	r3, r7, #1
 800ebcc:	444b      	add	r3, r9
 800ebce:	106d      	asrs	r5, r5, #1
 800ebd0:	429d      	cmp	r5, r3
 800ebd2:	bf38      	it	cc
 800ebd4:	461d      	movcc	r5, r3
 800ebd6:	0553      	lsls	r3, r2, #21
 800ebd8:	d527      	bpl.n	800ec2a <__ssputs_r+0x8e>
 800ebda:	4629      	mov	r1, r5
 800ebdc:	f7ff fbd0 	bl	800e380 <_malloc_r>
 800ebe0:	4606      	mov	r6, r0
 800ebe2:	b360      	cbz	r0, 800ec3e <__ssputs_r+0xa2>
 800ebe4:	6921      	ldr	r1, [r4, #16]
 800ebe6:	464a      	mov	r2, r9
 800ebe8:	f7fe fcf9 	bl	800d5de <memcpy>
 800ebec:	89a3      	ldrh	r3, [r4, #12]
 800ebee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ebf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ebf6:	81a3      	strh	r3, [r4, #12]
 800ebf8:	6126      	str	r6, [r4, #16]
 800ebfa:	6165      	str	r5, [r4, #20]
 800ebfc:	444e      	add	r6, r9
 800ebfe:	eba5 0509 	sub.w	r5, r5, r9
 800ec02:	6026      	str	r6, [r4, #0]
 800ec04:	60a5      	str	r5, [r4, #8]
 800ec06:	463e      	mov	r6, r7
 800ec08:	42be      	cmp	r6, r7
 800ec0a:	d900      	bls.n	800ec0e <__ssputs_r+0x72>
 800ec0c:	463e      	mov	r6, r7
 800ec0e:	6820      	ldr	r0, [r4, #0]
 800ec10:	4632      	mov	r2, r6
 800ec12:	4641      	mov	r1, r8
 800ec14:	f000 f9c6 	bl	800efa4 <memmove>
 800ec18:	68a3      	ldr	r3, [r4, #8]
 800ec1a:	1b9b      	subs	r3, r3, r6
 800ec1c:	60a3      	str	r3, [r4, #8]
 800ec1e:	6823      	ldr	r3, [r4, #0]
 800ec20:	4433      	add	r3, r6
 800ec22:	6023      	str	r3, [r4, #0]
 800ec24:	2000      	movs	r0, #0
 800ec26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec2a:	462a      	mov	r2, r5
 800ec2c:	f000 fa28 	bl	800f080 <_realloc_r>
 800ec30:	4606      	mov	r6, r0
 800ec32:	2800      	cmp	r0, #0
 800ec34:	d1e0      	bne.n	800ebf8 <__ssputs_r+0x5c>
 800ec36:	6921      	ldr	r1, [r4, #16]
 800ec38:	4650      	mov	r0, sl
 800ec3a:	f7ff fb2d 	bl	800e298 <_free_r>
 800ec3e:	230c      	movs	r3, #12
 800ec40:	f8ca 3000 	str.w	r3, [sl]
 800ec44:	89a3      	ldrh	r3, [r4, #12]
 800ec46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec4a:	81a3      	strh	r3, [r4, #12]
 800ec4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ec50:	e7e9      	b.n	800ec26 <__ssputs_r+0x8a>
	...

0800ec54 <_svfiprintf_r>:
 800ec54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec58:	4698      	mov	r8, r3
 800ec5a:	898b      	ldrh	r3, [r1, #12]
 800ec5c:	061b      	lsls	r3, r3, #24
 800ec5e:	b09d      	sub	sp, #116	@ 0x74
 800ec60:	4607      	mov	r7, r0
 800ec62:	460d      	mov	r5, r1
 800ec64:	4614      	mov	r4, r2
 800ec66:	d510      	bpl.n	800ec8a <_svfiprintf_r+0x36>
 800ec68:	690b      	ldr	r3, [r1, #16]
 800ec6a:	b973      	cbnz	r3, 800ec8a <_svfiprintf_r+0x36>
 800ec6c:	2140      	movs	r1, #64	@ 0x40
 800ec6e:	f7ff fb87 	bl	800e380 <_malloc_r>
 800ec72:	6028      	str	r0, [r5, #0]
 800ec74:	6128      	str	r0, [r5, #16]
 800ec76:	b930      	cbnz	r0, 800ec86 <_svfiprintf_r+0x32>
 800ec78:	230c      	movs	r3, #12
 800ec7a:	603b      	str	r3, [r7, #0]
 800ec7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ec80:	b01d      	add	sp, #116	@ 0x74
 800ec82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec86:	2340      	movs	r3, #64	@ 0x40
 800ec88:	616b      	str	r3, [r5, #20]
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec8e:	2320      	movs	r3, #32
 800ec90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ec94:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec98:	2330      	movs	r3, #48	@ 0x30
 800ec9a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ee38 <_svfiprintf_r+0x1e4>
 800ec9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800eca2:	f04f 0901 	mov.w	r9, #1
 800eca6:	4623      	mov	r3, r4
 800eca8:	469a      	mov	sl, r3
 800ecaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ecae:	b10a      	cbz	r2, 800ecb4 <_svfiprintf_r+0x60>
 800ecb0:	2a25      	cmp	r2, #37	@ 0x25
 800ecb2:	d1f9      	bne.n	800eca8 <_svfiprintf_r+0x54>
 800ecb4:	ebba 0b04 	subs.w	fp, sl, r4
 800ecb8:	d00b      	beq.n	800ecd2 <_svfiprintf_r+0x7e>
 800ecba:	465b      	mov	r3, fp
 800ecbc:	4622      	mov	r2, r4
 800ecbe:	4629      	mov	r1, r5
 800ecc0:	4638      	mov	r0, r7
 800ecc2:	f7ff ff6b 	bl	800eb9c <__ssputs_r>
 800ecc6:	3001      	adds	r0, #1
 800ecc8:	f000 80a7 	beq.w	800ee1a <_svfiprintf_r+0x1c6>
 800eccc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ecce:	445a      	add	r2, fp
 800ecd0:	9209      	str	r2, [sp, #36]	@ 0x24
 800ecd2:	f89a 3000 	ldrb.w	r3, [sl]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	f000 809f 	beq.w	800ee1a <_svfiprintf_r+0x1c6>
 800ecdc:	2300      	movs	r3, #0
 800ecde:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ece2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ece6:	f10a 0a01 	add.w	sl, sl, #1
 800ecea:	9304      	str	r3, [sp, #16]
 800ecec:	9307      	str	r3, [sp, #28]
 800ecee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ecf2:	931a      	str	r3, [sp, #104]	@ 0x68
 800ecf4:	4654      	mov	r4, sl
 800ecf6:	2205      	movs	r2, #5
 800ecf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecfc:	484e      	ldr	r0, [pc, #312]	@ (800ee38 <_svfiprintf_r+0x1e4>)
 800ecfe:	f7f1 fa6f 	bl	80001e0 <memchr>
 800ed02:	9a04      	ldr	r2, [sp, #16]
 800ed04:	b9d8      	cbnz	r0, 800ed3e <_svfiprintf_r+0xea>
 800ed06:	06d0      	lsls	r0, r2, #27
 800ed08:	bf44      	itt	mi
 800ed0a:	2320      	movmi	r3, #32
 800ed0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ed10:	0711      	lsls	r1, r2, #28
 800ed12:	bf44      	itt	mi
 800ed14:	232b      	movmi	r3, #43	@ 0x2b
 800ed16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ed1a:	f89a 3000 	ldrb.w	r3, [sl]
 800ed1e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ed20:	d015      	beq.n	800ed4e <_svfiprintf_r+0xfa>
 800ed22:	9a07      	ldr	r2, [sp, #28]
 800ed24:	4654      	mov	r4, sl
 800ed26:	2000      	movs	r0, #0
 800ed28:	f04f 0c0a 	mov.w	ip, #10
 800ed2c:	4621      	mov	r1, r4
 800ed2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed32:	3b30      	subs	r3, #48	@ 0x30
 800ed34:	2b09      	cmp	r3, #9
 800ed36:	d94b      	bls.n	800edd0 <_svfiprintf_r+0x17c>
 800ed38:	b1b0      	cbz	r0, 800ed68 <_svfiprintf_r+0x114>
 800ed3a:	9207      	str	r2, [sp, #28]
 800ed3c:	e014      	b.n	800ed68 <_svfiprintf_r+0x114>
 800ed3e:	eba0 0308 	sub.w	r3, r0, r8
 800ed42:	fa09 f303 	lsl.w	r3, r9, r3
 800ed46:	4313      	orrs	r3, r2
 800ed48:	9304      	str	r3, [sp, #16]
 800ed4a:	46a2      	mov	sl, r4
 800ed4c:	e7d2      	b.n	800ecf4 <_svfiprintf_r+0xa0>
 800ed4e:	9b03      	ldr	r3, [sp, #12]
 800ed50:	1d19      	adds	r1, r3, #4
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	9103      	str	r1, [sp, #12]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	bfbb      	ittet	lt
 800ed5a:	425b      	neglt	r3, r3
 800ed5c:	f042 0202 	orrlt.w	r2, r2, #2
 800ed60:	9307      	strge	r3, [sp, #28]
 800ed62:	9307      	strlt	r3, [sp, #28]
 800ed64:	bfb8      	it	lt
 800ed66:	9204      	strlt	r2, [sp, #16]
 800ed68:	7823      	ldrb	r3, [r4, #0]
 800ed6a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ed6c:	d10a      	bne.n	800ed84 <_svfiprintf_r+0x130>
 800ed6e:	7863      	ldrb	r3, [r4, #1]
 800ed70:	2b2a      	cmp	r3, #42	@ 0x2a
 800ed72:	d132      	bne.n	800edda <_svfiprintf_r+0x186>
 800ed74:	9b03      	ldr	r3, [sp, #12]
 800ed76:	1d1a      	adds	r2, r3, #4
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	9203      	str	r2, [sp, #12]
 800ed7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ed80:	3402      	adds	r4, #2
 800ed82:	9305      	str	r3, [sp, #20]
 800ed84:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ee48 <_svfiprintf_r+0x1f4>
 800ed88:	7821      	ldrb	r1, [r4, #0]
 800ed8a:	2203      	movs	r2, #3
 800ed8c:	4650      	mov	r0, sl
 800ed8e:	f7f1 fa27 	bl	80001e0 <memchr>
 800ed92:	b138      	cbz	r0, 800eda4 <_svfiprintf_r+0x150>
 800ed94:	9b04      	ldr	r3, [sp, #16]
 800ed96:	eba0 000a 	sub.w	r0, r0, sl
 800ed9a:	2240      	movs	r2, #64	@ 0x40
 800ed9c:	4082      	lsls	r2, r0
 800ed9e:	4313      	orrs	r3, r2
 800eda0:	3401      	adds	r4, #1
 800eda2:	9304      	str	r3, [sp, #16]
 800eda4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eda8:	4824      	ldr	r0, [pc, #144]	@ (800ee3c <_svfiprintf_r+0x1e8>)
 800edaa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800edae:	2206      	movs	r2, #6
 800edb0:	f7f1 fa16 	bl	80001e0 <memchr>
 800edb4:	2800      	cmp	r0, #0
 800edb6:	d036      	beq.n	800ee26 <_svfiprintf_r+0x1d2>
 800edb8:	4b21      	ldr	r3, [pc, #132]	@ (800ee40 <_svfiprintf_r+0x1ec>)
 800edba:	bb1b      	cbnz	r3, 800ee04 <_svfiprintf_r+0x1b0>
 800edbc:	9b03      	ldr	r3, [sp, #12]
 800edbe:	3307      	adds	r3, #7
 800edc0:	f023 0307 	bic.w	r3, r3, #7
 800edc4:	3308      	adds	r3, #8
 800edc6:	9303      	str	r3, [sp, #12]
 800edc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edca:	4433      	add	r3, r6
 800edcc:	9309      	str	r3, [sp, #36]	@ 0x24
 800edce:	e76a      	b.n	800eca6 <_svfiprintf_r+0x52>
 800edd0:	fb0c 3202 	mla	r2, ip, r2, r3
 800edd4:	460c      	mov	r4, r1
 800edd6:	2001      	movs	r0, #1
 800edd8:	e7a8      	b.n	800ed2c <_svfiprintf_r+0xd8>
 800edda:	2300      	movs	r3, #0
 800eddc:	3401      	adds	r4, #1
 800edde:	9305      	str	r3, [sp, #20]
 800ede0:	4619      	mov	r1, r3
 800ede2:	f04f 0c0a 	mov.w	ip, #10
 800ede6:	4620      	mov	r0, r4
 800ede8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800edec:	3a30      	subs	r2, #48	@ 0x30
 800edee:	2a09      	cmp	r2, #9
 800edf0:	d903      	bls.n	800edfa <_svfiprintf_r+0x1a6>
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d0c6      	beq.n	800ed84 <_svfiprintf_r+0x130>
 800edf6:	9105      	str	r1, [sp, #20]
 800edf8:	e7c4      	b.n	800ed84 <_svfiprintf_r+0x130>
 800edfa:	fb0c 2101 	mla	r1, ip, r1, r2
 800edfe:	4604      	mov	r4, r0
 800ee00:	2301      	movs	r3, #1
 800ee02:	e7f0      	b.n	800ede6 <_svfiprintf_r+0x192>
 800ee04:	ab03      	add	r3, sp, #12
 800ee06:	9300      	str	r3, [sp, #0]
 800ee08:	462a      	mov	r2, r5
 800ee0a:	4b0e      	ldr	r3, [pc, #56]	@ (800ee44 <_svfiprintf_r+0x1f0>)
 800ee0c:	a904      	add	r1, sp, #16
 800ee0e:	4638      	mov	r0, r7
 800ee10:	f7fd fe1e 	bl	800ca50 <_printf_float>
 800ee14:	1c42      	adds	r2, r0, #1
 800ee16:	4606      	mov	r6, r0
 800ee18:	d1d6      	bne.n	800edc8 <_svfiprintf_r+0x174>
 800ee1a:	89ab      	ldrh	r3, [r5, #12]
 800ee1c:	065b      	lsls	r3, r3, #25
 800ee1e:	f53f af2d 	bmi.w	800ec7c <_svfiprintf_r+0x28>
 800ee22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ee24:	e72c      	b.n	800ec80 <_svfiprintf_r+0x2c>
 800ee26:	ab03      	add	r3, sp, #12
 800ee28:	9300      	str	r3, [sp, #0]
 800ee2a:	462a      	mov	r2, r5
 800ee2c:	4b05      	ldr	r3, [pc, #20]	@ (800ee44 <_svfiprintf_r+0x1f0>)
 800ee2e:	a904      	add	r1, sp, #16
 800ee30:	4638      	mov	r0, r7
 800ee32:	f7fe f8a5 	bl	800cf80 <_printf_i>
 800ee36:	e7ed      	b.n	800ee14 <_svfiprintf_r+0x1c0>
 800ee38:	0800fbd8 	.word	0x0800fbd8
 800ee3c:	0800fbe2 	.word	0x0800fbe2
 800ee40:	0800ca51 	.word	0x0800ca51
 800ee44:	0800eb9d 	.word	0x0800eb9d
 800ee48:	0800fbde 	.word	0x0800fbde

0800ee4c <__sflush_r>:
 800ee4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ee50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee54:	0716      	lsls	r6, r2, #28
 800ee56:	4605      	mov	r5, r0
 800ee58:	460c      	mov	r4, r1
 800ee5a:	d454      	bmi.n	800ef06 <__sflush_r+0xba>
 800ee5c:	684b      	ldr	r3, [r1, #4]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	dc02      	bgt.n	800ee68 <__sflush_r+0x1c>
 800ee62:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	dd48      	ble.n	800eefa <__sflush_r+0xae>
 800ee68:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ee6a:	2e00      	cmp	r6, #0
 800ee6c:	d045      	beq.n	800eefa <__sflush_r+0xae>
 800ee6e:	2300      	movs	r3, #0
 800ee70:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ee74:	682f      	ldr	r7, [r5, #0]
 800ee76:	6a21      	ldr	r1, [r4, #32]
 800ee78:	602b      	str	r3, [r5, #0]
 800ee7a:	d030      	beq.n	800eede <__sflush_r+0x92>
 800ee7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ee7e:	89a3      	ldrh	r3, [r4, #12]
 800ee80:	0759      	lsls	r1, r3, #29
 800ee82:	d505      	bpl.n	800ee90 <__sflush_r+0x44>
 800ee84:	6863      	ldr	r3, [r4, #4]
 800ee86:	1ad2      	subs	r2, r2, r3
 800ee88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ee8a:	b10b      	cbz	r3, 800ee90 <__sflush_r+0x44>
 800ee8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ee8e:	1ad2      	subs	r2, r2, r3
 800ee90:	2300      	movs	r3, #0
 800ee92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ee94:	6a21      	ldr	r1, [r4, #32]
 800ee96:	4628      	mov	r0, r5
 800ee98:	47b0      	blx	r6
 800ee9a:	1c43      	adds	r3, r0, #1
 800ee9c:	89a3      	ldrh	r3, [r4, #12]
 800ee9e:	d106      	bne.n	800eeae <__sflush_r+0x62>
 800eea0:	6829      	ldr	r1, [r5, #0]
 800eea2:	291d      	cmp	r1, #29
 800eea4:	d82b      	bhi.n	800eefe <__sflush_r+0xb2>
 800eea6:	4a2a      	ldr	r2, [pc, #168]	@ (800ef50 <__sflush_r+0x104>)
 800eea8:	410a      	asrs	r2, r1
 800eeaa:	07d6      	lsls	r6, r2, #31
 800eeac:	d427      	bmi.n	800eefe <__sflush_r+0xb2>
 800eeae:	2200      	movs	r2, #0
 800eeb0:	6062      	str	r2, [r4, #4]
 800eeb2:	04d9      	lsls	r1, r3, #19
 800eeb4:	6922      	ldr	r2, [r4, #16]
 800eeb6:	6022      	str	r2, [r4, #0]
 800eeb8:	d504      	bpl.n	800eec4 <__sflush_r+0x78>
 800eeba:	1c42      	adds	r2, r0, #1
 800eebc:	d101      	bne.n	800eec2 <__sflush_r+0x76>
 800eebe:	682b      	ldr	r3, [r5, #0]
 800eec0:	b903      	cbnz	r3, 800eec4 <__sflush_r+0x78>
 800eec2:	6560      	str	r0, [r4, #84]	@ 0x54
 800eec4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eec6:	602f      	str	r7, [r5, #0]
 800eec8:	b1b9      	cbz	r1, 800eefa <__sflush_r+0xae>
 800eeca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eece:	4299      	cmp	r1, r3
 800eed0:	d002      	beq.n	800eed8 <__sflush_r+0x8c>
 800eed2:	4628      	mov	r0, r5
 800eed4:	f7ff f9e0 	bl	800e298 <_free_r>
 800eed8:	2300      	movs	r3, #0
 800eeda:	6363      	str	r3, [r4, #52]	@ 0x34
 800eedc:	e00d      	b.n	800eefa <__sflush_r+0xae>
 800eede:	2301      	movs	r3, #1
 800eee0:	4628      	mov	r0, r5
 800eee2:	47b0      	blx	r6
 800eee4:	4602      	mov	r2, r0
 800eee6:	1c50      	adds	r0, r2, #1
 800eee8:	d1c9      	bne.n	800ee7e <__sflush_r+0x32>
 800eeea:	682b      	ldr	r3, [r5, #0]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d0c6      	beq.n	800ee7e <__sflush_r+0x32>
 800eef0:	2b1d      	cmp	r3, #29
 800eef2:	d001      	beq.n	800eef8 <__sflush_r+0xac>
 800eef4:	2b16      	cmp	r3, #22
 800eef6:	d11e      	bne.n	800ef36 <__sflush_r+0xea>
 800eef8:	602f      	str	r7, [r5, #0]
 800eefa:	2000      	movs	r0, #0
 800eefc:	e022      	b.n	800ef44 <__sflush_r+0xf8>
 800eefe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef02:	b21b      	sxth	r3, r3
 800ef04:	e01b      	b.n	800ef3e <__sflush_r+0xf2>
 800ef06:	690f      	ldr	r7, [r1, #16]
 800ef08:	2f00      	cmp	r7, #0
 800ef0a:	d0f6      	beq.n	800eefa <__sflush_r+0xae>
 800ef0c:	0793      	lsls	r3, r2, #30
 800ef0e:	680e      	ldr	r6, [r1, #0]
 800ef10:	bf08      	it	eq
 800ef12:	694b      	ldreq	r3, [r1, #20]
 800ef14:	600f      	str	r7, [r1, #0]
 800ef16:	bf18      	it	ne
 800ef18:	2300      	movne	r3, #0
 800ef1a:	eba6 0807 	sub.w	r8, r6, r7
 800ef1e:	608b      	str	r3, [r1, #8]
 800ef20:	f1b8 0f00 	cmp.w	r8, #0
 800ef24:	dde9      	ble.n	800eefa <__sflush_r+0xae>
 800ef26:	6a21      	ldr	r1, [r4, #32]
 800ef28:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ef2a:	4643      	mov	r3, r8
 800ef2c:	463a      	mov	r2, r7
 800ef2e:	4628      	mov	r0, r5
 800ef30:	47b0      	blx	r6
 800ef32:	2800      	cmp	r0, #0
 800ef34:	dc08      	bgt.n	800ef48 <__sflush_r+0xfc>
 800ef36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef3e:	81a3      	strh	r3, [r4, #12]
 800ef40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ef44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef48:	4407      	add	r7, r0
 800ef4a:	eba8 0800 	sub.w	r8, r8, r0
 800ef4e:	e7e7      	b.n	800ef20 <__sflush_r+0xd4>
 800ef50:	dfbffffe 	.word	0xdfbffffe

0800ef54 <_fflush_r>:
 800ef54:	b538      	push	{r3, r4, r5, lr}
 800ef56:	690b      	ldr	r3, [r1, #16]
 800ef58:	4605      	mov	r5, r0
 800ef5a:	460c      	mov	r4, r1
 800ef5c:	b913      	cbnz	r3, 800ef64 <_fflush_r+0x10>
 800ef5e:	2500      	movs	r5, #0
 800ef60:	4628      	mov	r0, r5
 800ef62:	bd38      	pop	{r3, r4, r5, pc}
 800ef64:	b118      	cbz	r0, 800ef6e <_fflush_r+0x1a>
 800ef66:	6a03      	ldr	r3, [r0, #32]
 800ef68:	b90b      	cbnz	r3, 800ef6e <_fflush_r+0x1a>
 800ef6a:	f7fe f9b5 	bl	800d2d8 <__sinit>
 800ef6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d0f3      	beq.n	800ef5e <_fflush_r+0xa>
 800ef76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ef78:	07d0      	lsls	r0, r2, #31
 800ef7a:	d404      	bmi.n	800ef86 <_fflush_r+0x32>
 800ef7c:	0599      	lsls	r1, r3, #22
 800ef7e:	d402      	bmi.n	800ef86 <_fflush_r+0x32>
 800ef80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ef82:	f7fe fb2a 	bl	800d5da <__retarget_lock_acquire_recursive>
 800ef86:	4628      	mov	r0, r5
 800ef88:	4621      	mov	r1, r4
 800ef8a:	f7ff ff5f 	bl	800ee4c <__sflush_r>
 800ef8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ef90:	07da      	lsls	r2, r3, #31
 800ef92:	4605      	mov	r5, r0
 800ef94:	d4e4      	bmi.n	800ef60 <_fflush_r+0xc>
 800ef96:	89a3      	ldrh	r3, [r4, #12]
 800ef98:	059b      	lsls	r3, r3, #22
 800ef9a:	d4e1      	bmi.n	800ef60 <_fflush_r+0xc>
 800ef9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ef9e:	f7fe fb1d 	bl	800d5dc <__retarget_lock_release_recursive>
 800efa2:	e7dd      	b.n	800ef60 <_fflush_r+0xc>

0800efa4 <memmove>:
 800efa4:	4288      	cmp	r0, r1
 800efa6:	b510      	push	{r4, lr}
 800efa8:	eb01 0402 	add.w	r4, r1, r2
 800efac:	d902      	bls.n	800efb4 <memmove+0x10>
 800efae:	4284      	cmp	r4, r0
 800efb0:	4623      	mov	r3, r4
 800efb2:	d807      	bhi.n	800efc4 <memmove+0x20>
 800efb4:	1e43      	subs	r3, r0, #1
 800efb6:	42a1      	cmp	r1, r4
 800efb8:	d008      	beq.n	800efcc <memmove+0x28>
 800efba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800efbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800efc2:	e7f8      	b.n	800efb6 <memmove+0x12>
 800efc4:	4402      	add	r2, r0
 800efc6:	4601      	mov	r1, r0
 800efc8:	428a      	cmp	r2, r1
 800efca:	d100      	bne.n	800efce <memmove+0x2a>
 800efcc:	bd10      	pop	{r4, pc}
 800efce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800efd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800efd6:	e7f7      	b.n	800efc8 <memmove+0x24>

0800efd8 <_sbrk_r>:
 800efd8:	b538      	push	{r3, r4, r5, lr}
 800efda:	4d06      	ldr	r5, [pc, #24]	@ (800eff4 <_sbrk_r+0x1c>)
 800efdc:	2300      	movs	r3, #0
 800efde:	4604      	mov	r4, r0
 800efe0:	4608      	mov	r0, r1
 800efe2:	602b      	str	r3, [r5, #0]
 800efe4:	f7f5 f870 	bl	80040c8 <_sbrk>
 800efe8:	1c43      	adds	r3, r0, #1
 800efea:	d102      	bne.n	800eff2 <_sbrk_r+0x1a>
 800efec:	682b      	ldr	r3, [r5, #0]
 800efee:	b103      	cbz	r3, 800eff2 <_sbrk_r+0x1a>
 800eff0:	6023      	str	r3, [r4, #0]
 800eff2:	bd38      	pop	{r3, r4, r5, pc}
 800eff4:	200051dc 	.word	0x200051dc

0800eff8 <__assert_func>:
 800eff8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800effa:	4614      	mov	r4, r2
 800effc:	461a      	mov	r2, r3
 800effe:	4b09      	ldr	r3, [pc, #36]	@ (800f024 <__assert_func+0x2c>)
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	4605      	mov	r5, r0
 800f004:	68d8      	ldr	r0, [r3, #12]
 800f006:	b954      	cbnz	r4, 800f01e <__assert_func+0x26>
 800f008:	4b07      	ldr	r3, [pc, #28]	@ (800f028 <__assert_func+0x30>)
 800f00a:	461c      	mov	r4, r3
 800f00c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f010:	9100      	str	r1, [sp, #0]
 800f012:	462b      	mov	r3, r5
 800f014:	4905      	ldr	r1, [pc, #20]	@ (800f02c <__assert_func+0x34>)
 800f016:	f000 f86f 	bl	800f0f8 <fiprintf>
 800f01a:	f000 f87f 	bl	800f11c <abort>
 800f01e:	4b04      	ldr	r3, [pc, #16]	@ (800f030 <__assert_func+0x38>)
 800f020:	e7f4      	b.n	800f00c <__assert_func+0x14>
 800f022:	bf00      	nop
 800f024:	200000fc 	.word	0x200000fc
 800f028:	0800fc2e 	.word	0x0800fc2e
 800f02c:	0800fc00 	.word	0x0800fc00
 800f030:	0800fbf3 	.word	0x0800fbf3

0800f034 <_calloc_r>:
 800f034:	b570      	push	{r4, r5, r6, lr}
 800f036:	fba1 5402 	umull	r5, r4, r1, r2
 800f03a:	b93c      	cbnz	r4, 800f04c <_calloc_r+0x18>
 800f03c:	4629      	mov	r1, r5
 800f03e:	f7ff f99f 	bl	800e380 <_malloc_r>
 800f042:	4606      	mov	r6, r0
 800f044:	b928      	cbnz	r0, 800f052 <_calloc_r+0x1e>
 800f046:	2600      	movs	r6, #0
 800f048:	4630      	mov	r0, r6
 800f04a:	bd70      	pop	{r4, r5, r6, pc}
 800f04c:	220c      	movs	r2, #12
 800f04e:	6002      	str	r2, [r0, #0]
 800f050:	e7f9      	b.n	800f046 <_calloc_r+0x12>
 800f052:	462a      	mov	r2, r5
 800f054:	4621      	mov	r1, r4
 800f056:	f7fe f9ec 	bl	800d432 <memset>
 800f05a:	e7f5      	b.n	800f048 <_calloc_r+0x14>

0800f05c <__ascii_mbtowc>:
 800f05c:	b082      	sub	sp, #8
 800f05e:	b901      	cbnz	r1, 800f062 <__ascii_mbtowc+0x6>
 800f060:	a901      	add	r1, sp, #4
 800f062:	b142      	cbz	r2, 800f076 <__ascii_mbtowc+0x1a>
 800f064:	b14b      	cbz	r3, 800f07a <__ascii_mbtowc+0x1e>
 800f066:	7813      	ldrb	r3, [r2, #0]
 800f068:	600b      	str	r3, [r1, #0]
 800f06a:	7812      	ldrb	r2, [r2, #0]
 800f06c:	1e10      	subs	r0, r2, #0
 800f06e:	bf18      	it	ne
 800f070:	2001      	movne	r0, #1
 800f072:	b002      	add	sp, #8
 800f074:	4770      	bx	lr
 800f076:	4610      	mov	r0, r2
 800f078:	e7fb      	b.n	800f072 <__ascii_mbtowc+0x16>
 800f07a:	f06f 0001 	mvn.w	r0, #1
 800f07e:	e7f8      	b.n	800f072 <__ascii_mbtowc+0x16>

0800f080 <_realloc_r>:
 800f080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f084:	4680      	mov	r8, r0
 800f086:	4615      	mov	r5, r2
 800f088:	460c      	mov	r4, r1
 800f08a:	b921      	cbnz	r1, 800f096 <_realloc_r+0x16>
 800f08c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f090:	4611      	mov	r1, r2
 800f092:	f7ff b975 	b.w	800e380 <_malloc_r>
 800f096:	b92a      	cbnz	r2, 800f0a4 <_realloc_r+0x24>
 800f098:	f7ff f8fe 	bl	800e298 <_free_r>
 800f09c:	2400      	movs	r4, #0
 800f09e:	4620      	mov	r0, r4
 800f0a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0a4:	f000 f841 	bl	800f12a <_malloc_usable_size_r>
 800f0a8:	4285      	cmp	r5, r0
 800f0aa:	4606      	mov	r6, r0
 800f0ac:	d802      	bhi.n	800f0b4 <_realloc_r+0x34>
 800f0ae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f0b2:	d8f4      	bhi.n	800f09e <_realloc_r+0x1e>
 800f0b4:	4629      	mov	r1, r5
 800f0b6:	4640      	mov	r0, r8
 800f0b8:	f7ff f962 	bl	800e380 <_malloc_r>
 800f0bc:	4607      	mov	r7, r0
 800f0be:	2800      	cmp	r0, #0
 800f0c0:	d0ec      	beq.n	800f09c <_realloc_r+0x1c>
 800f0c2:	42b5      	cmp	r5, r6
 800f0c4:	462a      	mov	r2, r5
 800f0c6:	4621      	mov	r1, r4
 800f0c8:	bf28      	it	cs
 800f0ca:	4632      	movcs	r2, r6
 800f0cc:	f7fe fa87 	bl	800d5de <memcpy>
 800f0d0:	4621      	mov	r1, r4
 800f0d2:	4640      	mov	r0, r8
 800f0d4:	f7ff f8e0 	bl	800e298 <_free_r>
 800f0d8:	463c      	mov	r4, r7
 800f0da:	e7e0      	b.n	800f09e <_realloc_r+0x1e>

0800f0dc <__ascii_wctomb>:
 800f0dc:	4603      	mov	r3, r0
 800f0de:	4608      	mov	r0, r1
 800f0e0:	b141      	cbz	r1, 800f0f4 <__ascii_wctomb+0x18>
 800f0e2:	2aff      	cmp	r2, #255	@ 0xff
 800f0e4:	d904      	bls.n	800f0f0 <__ascii_wctomb+0x14>
 800f0e6:	228a      	movs	r2, #138	@ 0x8a
 800f0e8:	601a      	str	r2, [r3, #0]
 800f0ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f0ee:	4770      	bx	lr
 800f0f0:	700a      	strb	r2, [r1, #0]
 800f0f2:	2001      	movs	r0, #1
 800f0f4:	4770      	bx	lr
	...

0800f0f8 <fiprintf>:
 800f0f8:	b40e      	push	{r1, r2, r3}
 800f0fa:	b503      	push	{r0, r1, lr}
 800f0fc:	4601      	mov	r1, r0
 800f0fe:	ab03      	add	r3, sp, #12
 800f100:	4805      	ldr	r0, [pc, #20]	@ (800f118 <fiprintf+0x20>)
 800f102:	f853 2b04 	ldr.w	r2, [r3], #4
 800f106:	6800      	ldr	r0, [r0, #0]
 800f108:	9301      	str	r3, [sp, #4]
 800f10a:	f000 f83f 	bl	800f18c <_vfiprintf_r>
 800f10e:	b002      	add	sp, #8
 800f110:	f85d eb04 	ldr.w	lr, [sp], #4
 800f114:	b003      	add	sp, #12
 800f116:	4770      	bx	lr
 800f118:	200000fc 	.word	0x200000fc

0800f11c <abort>:
 800f11c:	b508      	push	{r3, lr}
 800f11e:	2006      	movs	r0, #6
 800f120:	f000 fa08 	bl	800f534 <raise>
 800f124:	2001      	movs	r0, #1
 800f126:	f7f4 ff57 	bl	8003fd8 <_exit>

0800f12a <_malloc_usable_size_r>:
 800f12a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f12e:	1f18      	subs	r0, r3, #4
 800f130:	2b00      	cmp	r3, #0
 800f132:	bfbc      	itt	lt
 800f134:	580b      	ldrlt	r3, [r1, r0]
 800f136:	18c0      	addlt	r0, r0, r3
 800f138:	4770      	bx	lr

0800f13a <__sfputc_r>:
 800f13a:	6893      	ldr	r3, [r2, #8]
 800f13c:	3b01      	subs	r3, #1
 800f13e:	2b00      	cmp	r3, #0
 800f140:	b410      	push	{r4}
 800f142:	6093      	str	r3, [r2, #8]
 800f144:	da08      	bge.n	800f158 <__sfputc_r+0x1e>
 800f146:	6994      	ldr	r4, [r2, #24]
 800f148:	42a3      	cmp	r3, r4
 800f14a:	db01      	blt.n	800f150 <__sfputc_r+0x16>
 800f14c:	290a      	cmp	r1, #10
 800f14e:	d103      	bne.n	800f158 <__sfputc_r+0x1e>
 800f150:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f154:	f000 b932 	b.w	800f3bc <__swbuf_r>
 800f158:	6813      	ldr	r3, [r2, #0]
 800f15a:	1c58      	adds	r0, r3, #1
 800f15c:	6010      	str	r0, [r2, #0]
 800f15e:	7019      	strb	r1, [r3, #0]
 800f160:	4608      	mov	r0, r1
 800f162:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f166:	4770      	bx	lr

0800f168 <__sfputs_r>:
 800f168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f16a:	4606      	mov	r6, r0
 800f16c:	460f      	mov	r7, r1
 800f16e:	4614      	mov	r4, r2
 800f170:	18d5      	adds	r5, r2, r3
 800f172:	42ac      	cmp	r4, r5
 800f174:	d101      	bne.n	800f17a <__sfputs_r+0x12>
 800f176:	2000      	movs	r0, #0
 800f178:	e007      	b.n	800f18a <__sfputs_r+0x22>
 800f17a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f17e:	463a      	mov	r2, r7
 800f180:	4630      	mov	r0, r6
 800f182:	f7ff ffda 	bl	800f13a <__sfputc_r>
 800f186:	1c43      	adds	r3, r0, #1
 800f188:	d1f3      	bne.n	800f172 <__sfputs_r+0xa>
 800f18a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f18c <_vfiprintf_r>:
 800f18c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f190:	460d      	mov	r5, r1
 800f192:	b09d      	sub	sp, #116	@ 0x74
 800f194:	4614      	mov	r4, r2
 800f196:	4698      	mov	r8, r3
 800f198:	4606      	mov	r6, r0
 800f19a:	b118      	cbz	r0, 800f1a4 <_vfiprintf_r+0x18>
 800f19c:	6a03      	ldr	r3, [r0, #32]
 800f19e:	b90b      	cbnz	r3, 800f1a4 <_vfiprintf_r+0x18>
 800f1a0:	f7fe f89a 	bl	800d2d8 <__sinit>
 800f1a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f1a6:	07d9      	lsls	r1, r3, #31
 800f1a8:	d405      	bmi.n	800f1b6 <_vfiprintf_r+0x2a>
 800f1aa:	89ab      	ldrh	r3, [r5, #12]
 800f1ac:	059a      	lsls	r2, r3, #22
 800f1ae:	d402      	bmi.n	800f1b6 <_vfiprintf_r+0x2a>
 800f1b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f1b2:	f7fe fa12 	bl	800d5da <__retarget_lock_acquire_recursive>
 800f1b6:	89ab      	ldrh	r3, [r5, #12]
 800f1b8:	071b      	lsls	r3, r3, #28
 800f1ba:	d501      	bpl.n	800f1c0 <_vfiprintf_r+0x34>
 800f1bc:	692b      	ldr	r3, [r5, #16]
 800f1be:	b99b      	cbnz	r3, 800f1e8 <_vfiprintf_r+0x5c>
 800f1c0:	4629      	mov	r1, r5
 800f1c2:	4630      	mov	r0, r6
 800f1c4:	f000 f938 	bl	800f438 <__swsetup_r>
 800f1c8:	b170      	cbz	r0, 800f1e8 <_vfiprintf_r+0x5c>
 800f1ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f1cc:	07dc      	lsls	r4, r3, #31
 800f1ce:	d504      	bpl.n	800f1da <_vfiprintf_r+0x4e>
 800f1d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f1d4:	b01d      	add	sp, #116	@ 0x74
 800f1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1da:	89ab      	ldrh	r3, [r5, #12]
 800f1dc:	0598      	lsls	r0, r3, #22
 800f1de:	d4f7      	bmi.n	800f1d0 <_vfiprintf_r+0x44>
 800f1e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f1e2:	f7fe f9fb 	bl	800d5dc <__retarget_lock_release_recursive>
 800f1e6:	e7f3      	b.n	800f1d0 <_vfiprintf_r+0x44>
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800f1ec:	2320      	movs	r3, #32
 800f1ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f1f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800f1f6:	2330      	movs	r3, #48	@ 0x30
 800f1f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f3a8 <_vfiprintf_r+0x21c>
 800f1fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f200:	f04f 0901 	mov.w	r9, #1
 800f204:	4623      	mov	r3, r4
 800f206:	469a      	mov	sl, r3
 800f208:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f20c:	b10a      	cbz	r2, 800f212 <_vfiprintf_r+0x86>
 800f20e:	2a25      	cmp	r2, #37	@ 0x25
 800f210:	d1f9      	bne.n	800f206 <_vfiprintf_r+0x7a>
 800f212:	ebba 0b04 	subs.w	fp, sl, r4
 800f216:	d00b      	beq.n	800f230 <_vfiprintf_r+0xa4>
 800f218:	465b      	mov	r3, fp
 800f21a:	4622      	mov	r2, r4
 800f21c:	4629      	mov	r1, r5
 800f21e:	4630      	mov	r0, r6
 800f220:	f7ff ffa2 	bl	800f168 <__sfputs_r>
 800f224:	3001      	adds	r0, #1
 800f226:	f000 80a7 	beq.w	800f378 <_vfiprintf_r+0x1ec>
 800f22a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f22c:	445a      	add	r2, fp
 800f22e:	9209      	str	r2, [sp, #36]	@ 0x24
 800f230:	f89a 3000 	ldrb.w	r3, [sl]
 800f234:	2b00      	cmp	r3, #0
 800f236:	f000 809f 	beq.w	800f378 <_vfiprintf_r+0x1ec>
 800f23a:	2300      	movs	r3, #0
 800f23c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f240:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f244:	f10a 0a01 	add.w	sl, sl, #1
 800f248:	9304      	str	r3, [sp, #16]
 800f24a:	9307      	str	r3, [sp, #28]
 800f24c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f250:	931a      	str	r3, [sp, #104]	@ 0x68
 800f252:	4654      	mov	r4, sl
 800f254:	2205      	movs	r2, #5
 800f256:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f25a:	4853      	ldr	r0, [pc, #332]	@ (800f3a8 <_vfiprintf_r+0x21c>)
 800f25c:	f7f0 ffc0 	bl	80001e0 <memchr>
 800f260:	9a04      	ldr	r2, [sp, #16]
 800f262:	b9d8      	cbnz	r0, 800f29c <_vfiprintf_r+0x110>
 800f264:	06d1      	lsls	r1, r2, #27
 800f266:	bf44      	itt	mi
 800f268:	2320      	movmi	r3, #32
 800f26a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f26e:	0713      	lsls	r3, r2, #28
 800f270:	bf44      	itt	mi
 800f272:	232b      	movmi	r3, #43	@ 0x2b
 800f274:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f278:	f89a 3000 	ldrb.w	r3, [sl]
 800f27c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f27e:	d015      	beq.n	800f2ac <_vfiprintf_r+0x120>
 800f280:	9a07      	ldr	r2, [sp, #28]
 800f282:	4654      	mov	r4, sl
 800f284:	2000      	movs	r0, #0
 800f286:	f04f 0c0a 	mov.w	ip, #10
 800f28a:	4621      	mov	r1, r4
 800f28c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f290:	3b30      	subs	r3, #48	@ 0x30
 800f292:	2b09      	cmp	r3, #9
 800f294:	d94b      	bls.n	800f32e <_vfiprintf_r+0x1a2>
 800f296:	b1b0      	cbz	r0, 800f2c6 <_vfiprintf_r+0x13a>
 800f298:	9207      	str	r2, [sp, #28]
 800f29a:	e014      	b.n	800f2c6 <_vfiprintf_r+0x13a>
 800f29c:	eba0 0308 	sub.w	r3, r0, r8
 800f2a0:	fa09 f303 	lsl.w	r3, r9, r3
 800f2a4:	4313      	orrs	r3, r2
 800f2a6:	9304      	str	r3, [sp, #16]
 800f2a8:	46a2      	mov	sl, r4
 800f2aa:	e7d2      	b.n	800f252 <_vfiprintf_r+0xc6>
 800f2ac:	9b03      	ldr	r3, [sp, #12]
 800f2ae:	1d19      	adds	r1, r3, #4
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	9103      	str	r1, [sp, #12]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	bfbb      	ittet	lt
 800f2b8:	425b      	neglt	r3, r3
 800f2ba:	f042 0202 	orrlt.w	r2, r2, #2
 800f2be:	9307      	strge	r3, [sp, #28]
 800f2c0:	9307      	strlt	r3, [sp, #28]
 800f2c2:	bfb8      	it	lt
 800f2c4:	9204      	strlt	r2, [sp, #16]
 800f2c6:	7823      	ldrb	r3, [r4, #0]
 800f2c8:	2b2e      	cmp	r3, #46	@ 0x2e
 800f2ca:	d10a      	bne.n	800f2e2 <_vfiprintf_r+0x156>
 800f2cc:	7863      	ldrb	r3, [r4, #1]
 800f2ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800f2d0:	d132      	bne.n	800f338 <_vfiprintf_r+0x1ac>
 800f2d2:	9b03      	ldr	r3, [sp, #12]
 800f2d4:	1d1a      	adds	r2, r3, #4
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	9203      	str	r2, [sp, #12]
 800f2da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f2de:	3402      	adds	r4, #2
 800f2e0:	9305      	str	r3, [sp, #20]
 800f2e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f3b8 <_vfiprintf_r+0x22c>
 800f2e6:	7821      	ldrb	r1, [r4, #0]
 800f2e8:	2203      	movs	r2, #3
 800f2ea:	4650      	mov	r0, sl
 800f2ec:	f7f0 ff78 	bl	80001e0 <memchr>
 800f2f0:	b138      	cbz	r0, 800f302 <_vfiprintf_r+0x176>
 800f2f2:	9b04      	ldr	r3, [sp, #16]
 800f2f4:	eba0 000a 	sub.w	r0, r0, sl
 800f2f8:	2240      	movs	r2, #64	@ 0x40
 800f2fa:	4082      	lsls	r2, r0
 800f2fc:	4313      	orrs	r3, r2
 800f2fe:	3401      	adds	r4, #1
 800f300:	9304      	str	r3, [sp, #16]
 800f302:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f306:	4829      	ldr	r0, [pc, #164]	@ (800f3ac <_vfiprintf_r+0x220>)
 800f308:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f30c:	2206      	movs	r2, #6
 800f30e:	f7f0 ff67 	bl	80001e0 <memchr>
 800f312:	2800      	cmp	r0, #0
 800f314:	d03f      	beq.n	800f396 <_vfiprintf_r+0x20a>
 800f316:	4b26      	ldr	r3, [pc, #152]	@ (800f3b0 <_vfiprintf_r+0x224>)
 800f318:	bb1b      	cbnz	r3, 800f362 <_vfiprintf_r+0x1d6>
 800f31a:	9b03      	ldr	r3, [sp, #12]
 800f31c:	3307      	adds	r3, #7
 800f31e:	f023 0307 	bic.w	r3, r3, #7
 800f322:	3308      	adds	r3, #8
 800f324:	9303      	str	r3, [sp, #12]
 800f326:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f328:	443b      	add	r3, r7
 800f32a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f32c:	e76a      	b.n	800f204 <_vfiprintf_r+0x78>
 800f32e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f332:	460c      	mov	r4, r1
 800f334:	2001      	movs	r0, #1
 800f336:	e7a8      	b.n	800f28a <_vfiprintf_r+0xfe>
 800f338:	2300      	movs	r3, #0
 800f33a:	3401      	adds	r4, #1
 800f33c:	9305      	str	r3, [sp, #20]
 800f33e:	4619      	mov	r1, r3
 800f340:	f04f 0c0a 	mov.w	ip, #10
 800f344:	4620      	mov	r0, r4
 800f346:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f34a:	3a30      	subs	r2, #48	@ 0x30
 800f34c:	2a09      	cmp	r2, #9
 800f34e:	d903      	bls.n	800f358 <_vfiprintf_r+0x1cc>
 800f350:	2b00      	cmp	r3, #0
 800f352:	d0c6      	beq.n	800f2e2 <_vfiprintf_r+0x156>
 800f354:	9105      	str	r1, [sp, #20]
 800f356:	e7c4      	b.n	800f2e2 <_vfiprintf_r+0x156>
 800f358:	fb0c 2101 	mla	r1, ip, r1, r2
 800f35c:	4604      	mov	r4, r0
 800f35e:	2301      	movs	r3, #1
 800f360:	e7f0      	b.n	800f344 <_vfiprintf_r+0x1b8>
 800f362:	ab03      	add	r3, sp, #12
 800f364:	9300      	str	r3, [sp, #0]
 800f366:	462a      	mov	r2, r5
 800f368:	4b12      	ldr	r3, [pc, #72]	@ (800f3b4 <_vfiprintf_r+0x228>)
 800f36a:	a904      	add	r1, sp, #16
 800f36c:	4630      	mov	r0, r6
 800f36e:	f7fd fb6f 	bl	800ca50 <_printf_float>
 800f372:	4607      	mov	r7, r0
 800f374:	1c78      	adds	r0, r7, #1
 800f376:	d1d6      	bne.n	800f326 <_vfiprintf_r+0x19a>
 800f378:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f37a:	07d9      	lsls	r1, r3, #31
 800f37c:	d405      	bmi.n	800f38a <_vfiprintf_r+0x1fe>
 800f37e:	89ab      	ldrh	r3, [r5, #12]
 800f380:	059a      	lsls	r2, r3, #22
 800f382:	d402      	bmi.n	800f38a <_vfiprintf_r+0x1fe>
 800f384:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f386:	f7fe f929 	bl	800d5dc <__retarget_lock_release_recursive>
 800f38a:	89ab      	ldrh	r3, [r5, #12]
 800f38c:	065b      	lsls	r3, r3, #25
 800f38e:	f53f af1f 	bmi.w	800f1d0 <_vfiprintf_r+0x44>
 800f392:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f394:	e71e      	b.n	800f1d4 <_vfiprintf_r+0x48>
 800f396:	ab03      	add	r3, sp, #12
 800f398:	9300      	str	r3, [sp, #0]
 800f39a:	462a      	mov	r2, r5
 800f39c:	4b05      	ldr	r3, [pc, #20]	@ (800f3b4 <_vfiprintf_r+0x228>)
 800f39e:	a904      	add	r1, sp, #16
 800f3a0:	4630      	mov	r0, r6
 800f3a2:	f7fd fded 	bl	800cf80 <_printf_i>
 800f3a6:	e7e4      	b.n	800f372 <_vfiprintf_r+0x1e6>
 800f3a8:	0800fbd8 	.word	0x0800fbd8
 800f3ac:	0800fbe2 	.word	0x0800fbe2
 800f3b0:	0800ca51 	.word	0x0800ca51
 800f3b4:	0800f169 	.word	0x0800f169
 800f3b8:	0800fbde 	.word	0x0800fbde

0800f3bc <__swbuf_r>:
 800f3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3be:	460e      	mov	r6, r1
 800f3c0:	4614      	mov	r4, r2
 800f3c2:	4605      	mov	r5, r0
 800f3c4:	b118      	cbz	r0, 800f3ce <__swbuf_r+0x12>
 800f3c6:	6a03      	ldr	r3, [r0, #32]
 800f3c8:	b90b      	cbnz	r3, 800f3ce <__swbuf_r+0x12>
 800f3ca:	f7fd ff85 	bl	800d2d8 <__sinit>
 800f3ce:	69a3      	ldr	r3, [r4, #24]
 800f3d0:	60a3      	str	r3, [r4, #8]
 800f3d2:	89a3      	ldrh	r3, [r4, #12]
 800f3d4:	071a      	lsls	r2, r3, #28
 800f3d6:	d501      	bpl.n	800f3dc <__swbuf_r+0x20>
 800f3d8:	6923      	ldr	r3, [r4, #16]
 800f3da:	b943      	cbnz	r3, 800f3ee <__swbuf_r+0x32>
 800f3dc:	4621      	mov	r1, r4
 800f3de:	4628      	mov	r0, r5
 800f3e0:	f000 f82a 	bl	800f438 <__swsetup_r>
 800f3e4:	b118      	cbz	r0, 800f3ee <__swbuf_r+0x32>
 800f3e6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800f3ea:	4638      	mov	r0, r7
 800f3ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3ee:	6823      	ldr	r3, [r4, #0]
 800f3f0:	6922      	ldr	r2, [r4, #16]
 800f3f2:	1a98      	subs	r0, r3, r2
 800f3f4:	6963      	ldr	r3, [r4, #20]
 800f3f6:	b2f6      	uxtb	r6, r6
 800f3f8:	4283      	cmp	r3, r0
 800f3fa:	4637      	mov	r7, r6
 800f3fc:	dc05      	bgt.n	800f40a <__swbuf_r+0x4e>
 800f3fe:	4621      	mov	r1, r4
 800f400:	4628      	mov	r0, r5
 800f402:	f7ff fda7 	bl	800ef54 <_fflush_r>
 800f406:	2800      	cmp	r0, #0
 800f408:	d1ed      	bne.n	800f3e6 <__swbuf_r+0x2a>
 800f40a:	68a3      	ldr	r3, [r4, #8]
 800f40c:	3b01      	subs	r3, #1
 800f40e:	60a3      	str	r3, [r4, #8]
 800f410:	6823      	ldr	r3, [r4, #0]
 800f412:	1c5a      	adds	r2, r3, #1
 800f414:	6022      	str	r2, [r4, #0]
 800f416:	701e      	strb	r6, [r3, #0]
 800f418:	6962      	ldr	r2, [r4, #20]
 800f41a:	1c43      	adds	r3, r0, #1
 800f41c:	429a      	cmp	r2, r3
 800f41e:	d004      	beq.n	800f42a <__swbuf_r+0x6e>
 800f420:	89a3      	ldrh	r3, [r4, #12]
 800f422:	07db      	lsls	r3, r3, #31
 800f424:	d5e1      	bpl.n	800f3ea <__swbuf_r+0x2e>
 800f426:	2e0a      	cmp	r6, #10
 800f428:	d1df      	bne.n	800f3ea <__swbuf_r+0x2e>
 800f42a:	4621      	mov	r1, r4
 800f42c:	4628      	mov	r0, r5
 800f42e:	f7ff fd91 	bl	800ef54 <_fflush_r>
 800f432:	2800      	cmp	r0, #0
 800f434:	d0d9      	beq.n	800f3ea <__swbuf_r+0x2e>
 800f436:	e7d6      	b.n	800f3e6 <__swbuf_r+0x2a>

0800f438 <__swsetup_r>:
 800f438:	b538      	push	{r3, r4, r5, lr}
 800f43a:	4b29      	ldr	r3, [pc, #164]	@ (800f4e0 <__swsetup_r+0xa8>)
 800f43c:	4605      	mov	r5, r0
 800f43e:	6818      	ldr	r0, [r3, #0]
 800f440:	460c      	mov	r4, r1
 800f442:	b118      	cbz	r0, 800f44c <__swsetup_r+0x14>
 800f444:	6a03      	ldr	r3, [r0, #32]
 800f446:	b90b      	cbnz	r3, 800f44c <__swsetup_r+0x14>
 800f448:	f7fd ff46 	bl	800d2d8 <__sinit>
 800f44c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f450:	0719      	lsls	r1, r3, #28
 800f452:	d422      	bmi.n	800f49a <__swsetup_r+0x62>
 800f454:	06da      	lsls	r2, r3, #27
 800f456:	d407      	bmi.n	800f468 <__swsetup_r+0x30>
 800f458:	2209      	movs	r2, #9
 800f45a:	602a      	str	r2, [r5, #0]
 800f45c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f460:	81a3      	strh	r3, [r4, #12]
 800f462:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f466:	e033      	b.n	800f4d0 <__swsetup_r+0x98>
 800f468:	0758      	lsls	r0, r3, #29
 800f46a:	d512      	bpl.n	800f492 <__swsetup_r+0x5a>
 800f46c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f46e:	b141      	cbz	r1, 800f482 <__swsetup_r+0x4a>
 800f470:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f474:	4299      	cmp	r1, r3
 800f476:	d002      	beq.n	800f47e <__swsetup_r+0x46>
 800f478:	4628      	mov	r0, r5
 800f47a:	f7fe ff0d 	bl	800e298 <_free_r>
 800f47e:	2300      	movs	r3, #0
 800f480:	6363      	str	r3, [r4, #52]	@ 0x34
 800f482:	89a3      	ldrh	r3, [r4, #12]
 800f484:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f488:	81a3      	strh	r3, [r4, #12]
 800f48a:	2300      	movs	r3, #0
 800f48c:	6063      	str	r3, [r4, #4]
 800f48e:	6923      	ldr	r3, [r4, #16]
 800f490:	6023      	str	r3, [r4, #0]
 800f492:	89a3      	ldrh	r3, [r4, #12]
 800f494:	f043 0308 	orr.w	r3, r3, #8
 800f498:	81a3      	strh	r3, [r4, #12]
 800f49a:	6923      	ldr	r3, [r4, #16]
 800f49c:	b94b      	cbnz	r3, 800f4b2 <__swsetup_r+0x7a>
 800f49e:	89a3      	ldrh	r3, [r4, #12]
 800f4a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f4a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f4a8:	d003      	beq.n	800f4b2 <__swsetup_r+0x7a>
 800f4aa:	4621      	mov	r1, r4
 800f4ac:	4628      	mov	r0, r5
 800f4ae:	f000 f883 	bl	800f5b8 <__smakebuf_r>
 800f4b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4b6:	f013 0201 	ands.w	r2, r3, #1
 800f4ba:	d00a      	beq.n	800f4d2 <__swsetup_r+0x9a>
 800f4bc:	2200      	movs	r2, #0
 800f4be:	60a2      	str	r2, [r4, #8]
 800f4c0:	6962      	ldr	r2, [r4, #20]
 800f4c2:	4252      	negs	r2, r2
 800f4c4:	61a2      	str	r2, [r4, #24]
 800f4c6:	6922      	ldr	r2, [r4, #16]
 800f4c8:	b942      	cbnz	r2, 800f4dc <__swsetup_r+0xa4>
 800f4ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f4ce:	d1c5      	bne.n	800f45c <__swsetup_r+0x24>
 800f4d0:	bd38      	pop	{r3, r4, r5, pc}
 800f4d2:	0799      	lsls	r1, r3, #30
 800f4d4:	bf58      	it	pl
 800f4d6:	6962      	ldrpl	r2, [r4, #20]
 800f4d8:	60a2      	str	r2, [r4, #8]
 800f4da:	e7f4      	b.n	800f4c6 <__swsetup_r+0x8e>
 800f4dc:	2000      	movs	r0, #0
 800f4de:	e7f7      	b.n	800f4d0 <__swsetup_r+0x98>
 800f4e0:	200000fc 	.word	0x200000fc

0800f4e4 <_raise_r>:
 800f4e4:	291f      	cmp	r1, #31
 800f4e6:	b538      	push	{r3, r4, r5, lr}
 800f4e8:	4605      	mov	r5, r0
 800f4ea:	460c      	mov	r4, r1
 800f4ec:	d904      	bls.n	800f4f8 <_raise_r+0x14>
 800f4ee:	2316      	movs	r3, #22
 800f4f0:	6003      	str	r3, [r0, #0]
 800f4f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f4f6:	bd38      	pop	{r3, r4, r5, pc}
 800f4f8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f4fa:	b112      	cbz	r2, 800f502 <_raise_r+0x1e>
 800f4fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f500:	b94b      	cbnz	r3, 800f516 <_raise_r+0x32>
 800f502:	4628      	mov	r0, r5
 800f504:	f000 f830 	bl	800f568 <_getpid_r>
 800f508:	4622      	mov	r2, r4
 800f50a:	4601      	mov	r1, r0
 800f50c:	4628      	mov	r0, r5
 800f50e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f512:	f000 b817 	b.w	800f544 <_kill_r>
 800f516:	2b01      	cmp	r3, #1
 800f518:	d00a      	beq.n	800f530 <_raise_r+0x4c>
 800f51a:	1c59      	adds	r1, r3, #1
 800f51c:	d103      	bne.n	800f526 <_raise_r+0x42>
 800f51e:	2316      	movs	r3, #22
 800f520:	6003      	str	r3, [r0, #0]
 800f522:	2001      	movs	r0, #1
 800f524:	e7e7      	b.n	800f4f6 <_raise_r+0x12>
 800f526:	2100      	movs	r1, #0
 800f528:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f52c:	4620      	mov	r0, r4
 800f52e:	4798      	blx	r3
 800f530:	2000      	movs	r0, #0
 800f532:	e7e0      	b.n	800f4f6 <_raise_r+0x12>

0800f534 <raise>:
 800f534:	4b02      	ldr	r3, [pc, #8]	@ (800f540 <raise+0xc>)
 800f536:	4601      	mov	r1, r0
 800f538:	6818      	ldr	r0, [r3, #0]
 800f53a:	f7ff bfd3 	b.w	800f4e4 <_raise_r>
 800f53e:	bf00      	nop
 800f540:	200000fc 	.word	0x200000fc

0800f544 <_kill_r>:
 800f544:	b538      	push	{r3, r4, r5, lr}
 800f546:	4d07      	ldr	r5, [pc, #28]	@ (800f564 <_kill_r+0x20>)
 800f548:	2300      	movs	r3, #0
 800f54a:	4604      	mov	r4, r0
 800f54c:	4608      	mov	r0, r1
 800f54e:	4611      	mov	r1, r2
 800f550:	602b      	str	r3, [r5, #0]
 800f552:	f7f4 fd31 	bl	8003fb8 <_kill>
 800f556:	1c43      	adds	r3, r0, #1
 800f558:	d102      	bne.n	800f560 <_kill_r+0x1c>
 800f55a:	682b      	ldr	r3, [r5, #0]
 800f55c:	b103      	cbz	r3, 800f560 <_kill_r+0x1c>
 800f55e:	6023      	str	r3, [r4, #0]
 800f560:	bd38      	pop	{r3, r4, r5, pc}
 800f562:	bf00      	nop
 800f564:	200051dc 	.word	0x200051dc

0800f568 <_getpid_r>:
 800f568:	f7f4 bd1e 	b.w	8003fa8 <_getpid>

0800f56c <__swhatbuf_r>:
 800f56c:	b570      	push	{r4, r5, r6, lr}
 800f56e:	460c      	mov	r4, r1
 800f570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f574:	2900      	cmp	r1, #0
 800f576:	b096      	sub	sp, #88	@ 0x58
 800f578:	4615      	mov	r5, r2
 800f57a:	461e      	mov	r6, r3
 800f57c:	da0d      	bge.n	800f59a <__swhatbuf_r+0x2e>
 800f57e:	89a3      	ldrh	r3, [r4, #12]
 800f580:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f584:	f04f 0100 	mov.w	r1, #0
 800f588:	bf14      	ite	ne
 800f58a:	2340      	movne	r3, #64	@ 0x40
 800f58c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f590:	2000      	movs	r0, #0
 800f592:	6031      	str	r1, [r6, #0]
 800f594:	602b      	str	r3, [r5, #0]
 800f596:	b016      	add	sp, #88	@ 0x58
 800f598:	bd70      	pop	{r4, r5, r6, pc}
 800f59a:	466a      	mov	r2, sp
 800f59c:	f000 f848 	bl	800f630 <_fstat_r>
 800f5a0:	2800      	cmp	r0, #0
 800f5a2:	dbec      	blt.n	800f57e <__swhatbuf_r+0x12>
 800f5a4:	9901      	ldr	r1, [sp, #4]
 800f5a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f5aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f5ae:	4259      	negs	r1, r3
 800f5b0:	4159      	adcs	r1, r3
 800f5b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f5b6:	e7eb      	b.n	800f590 <__swhatbuf_r+0x24>

0800f5b8 <__smakebuf_r>:
 800f5b8:	898b      	ldrh	r3, [r1, #12]
 800f5ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f5bc:	079d      	lsls	r5, r3, #30
 800f5be:	4606      	mov	r6, r0
 800f5c0:	460c      	mov	r4, r1
 800f5c2:	d507      	bpl.n	800f5d4 <__smakebuf_r+0x1c>
 800f5c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f5c8:	6023      	str	r3, [r4, #0]
 800f5ca:	6123      	str	r3, [r4, #16]
 800f5cc:	2301      	movs	r3, #1
 800f5ce:	6163      	str	r3, [r4, #20]
 800f5d0:	b003      	add	sp, #12
 800f5d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f5d4:	ab01      	add	r3, sp, #4
 800f5d6:	466a      	mov	r2, sp
 800f5d8:	f7ff ffc8 	bl	800f56c <__swhatbuf_r>
 800f5dc:	9f00      	ldr	r7, [sp, #0]
 800f5de:	4605      	mov	r5, r0
 800f5e0:	4639      	mov	r1, r7
 800f5e2:	4630      	mov	r0, r6
 800f5e4:	f7fe fecc 	bl	800e380 <_malloc_r>
 800f5e8:	b948      	cbnz	r0, 800f5fe <__smakebuf_r+0x46>
 800f5ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5ee:	059a      	lsls	r2, r3, #22
 800f5f0:	d4ee      	bmi.n	800f5d0 <__smakebuf_r+0x18>
 800f5f2:	f023 0303 	bic.w	r3, r3, #3
 800f5f6:	f043 0302 	orr.w	r3, r3, #2
 800f5fa:	81a3      	strh	r3, [r4, #12]
 800f5fc:	e7e2      	b.n	800f5c4 <__smakebuf_r+0xc>
 800f5fe:	89a3      	ldrh	r3, [r4, #12]
 800f600:	6020      	str	r0, [r4, #0]
 800f602:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f606:	81a3      	strh	r3, [r4, #12]
 800f608:	9b01      	ldr	r3, [sp, #4]
 800f60a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f60e:	b15b      	cbz	r3, 800f628 <__smakebuf_r+0x70>
 800f610:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f614:	4630      	mov	r0, r6
 800f616:	f000 f81d 	bl	800f654 <_isatty_r>
 800f61a:	b128      	cbz	r0, 800f628 <__smakebuf_r+0x70>
 800f61c:	89a3      	ldrh	r3, [r4, #12]
 800f61e:	f023 0303 	bic.w	r3, r3, #3
 800f622:	f043 0301 	orr.w	r3, r3, #1
 800f626:	81a3      	strh	r3, [r4, #12]
 800f628:	89a3      	ldrh	r3, [r4, #12]
 800f62a:	431d      	orrs	r5, r3
 800f62c:	81a5      	strh	r5, [r4, #12]
 800f62e:	e7cf      	b.n	800f5d0 <__smakebuf_r+0x18>

0800f630 <_fstat_r>:
 800f630:	b538      	push	{r3, r4, r5, lr}
 800f632:	4d07      	ldr	r5, [pc, #28]	@ (800f650 <_fstat_r+0x20>)
 800f634:	2300      	movs	r3, #0
 800f636:	4604      	mov	r4, r0
 800f638:	4608      	mov	r0, r1
 800f63a:	4611      	mov	r1, r2
 800f63c:	602b      	str	r3, [r5, #0]
 800f63e:	f7f4 fd1b 	bl	8004078 <_fstat>
 800f642:	1c43      	adds	r3, r0, #1
 800f644:	d102      	bne.n	800f64c <_fstat_r+0x1c>
 800f646:	682b      	ldr	r3, [r5, #0]
 800f648:	b103      	cbz	r3, 800f64c <_fstat_r+0x1c>
 800f64a:	6023      	str	r3, [r4, #0]
 800f64c:	bd38      	pop	{r3, r4, r5, pc}
 800f64e:	bf00      	nop
 800f650:	200051dc 	.word	0x200051dc

0800f654 <_isatty_r>:
 800f654:	b538      	push	{r3, r4, r5, lr}
 800f656:	4d06      	ldr	r5, [pc, #24]	@ (800f670 <_isatty_r+0x1c>)
 800f658:	2300      	movs	r3, #0
 800f65a:	4604      	mov	r4, r0
 800f65c:	4608      	mov	r0, r1
 800f65e:	602b      	str	r3, [r5, #0]
 800f660:	f7f4 fd1a 	bl	8004098 <_isatty>
 800f664:	1c43      	adds	r3, r0, #1
 800f666:	d102      	bne.n	800f66e <_isatty_r+0x1a>
 800f668:	682b      	ldr	r3, [r5, #0]
 800f66a:	b103      	cbz	r3, 800f66e <_isatty_r+0x1a>
 800f66c:	6023      	str	r3, [r4, #0]
 800f66e:	bd38      	pop	{r3, r4, r5, pc}
 800f670:	200051dc 	.word	0x200051dc

0800f674 <_init>:
 800f674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f676:	bf00      	nop
 800f678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f67a:	bc08      	pop	{r3}
 800f67c:	469e      	mov	lr, r3
 800f67e:	4770      	bx	lr

0800f680 <_fini>:
 800f680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f682:	bf00      	nop
 800f684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f686:	bc08      	pop	{r3}
 800f688:	469e      	mov	lr, r3
 800f68a:	4770      	bx	lr
