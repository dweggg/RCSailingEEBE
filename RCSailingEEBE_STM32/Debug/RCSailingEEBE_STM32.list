
RCSailingEEBE_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e110  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a0  0800e2b0  0800e2b0  0000f2b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eb50  0800eb50  000101f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800eb50  0800eb50  0000fb50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eb58  0800eb58  000101f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eb58  0800eb58  0000fb58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800eb5c  0800eb5c  0000fb5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  0800eb60  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e98  200001f8  0800ed58  000101f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005090  0800ed58  00011090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021d34  00000000  00000000  00010228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050dc  00000000  00000000  00031f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bf8  00000000  00000000  00037038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015a8  00000000  00000000  00038c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d7d4  00000000  00000000  0003a1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022aab  00000000  00000000  000579ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aa238  00000000  00000000  0007a457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012468f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008614  00000000  00000000  001246d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0012cce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e298 	.word	0x0800e298

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	0800e298 	.word	0x0800e298

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <adc_read>:
float extra1Offset = 0.0f;

float extra2Gain = 1.0f;
float extra2Offset = 0.0f;

void adc_read(void) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
    // Start ADC conversion using DMA
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_raw_readings, 4);
 8000f4e:	2204      	movs	r2, #4
 8000f50:	492d      	ldr	r1, [pc, #180]	@ (8001008 <adc_read+0xc0>)
 8000f52:	482e      	ldr	r0, [pc, #184]	@ (800100c <adc_read+0xc4>)
 8000f54:	f002 fb3c 	bl	80035d0 <HAL_ADC_Start_DMA>

    // Create a struct to hold the processed ADC data
    AdcData_t adcDataSent;
    adcDataSent.windDirection = ((float)adc_raw_readings[0] * windDirectionGain) - windDirectionOffset;
 8000f58:	4b2b      	ldr	r3, [pc, #172]	@ (8001008 <adc_read+0xc0>)
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	ee07 3a90 	vmov	s15, r3
 8000f62:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f66:	4b2a      	ldr	r3, [pc, #168]	@ (8001010 <adc_read+0xc8>)
 8000f68:	edd3 7a00 	vldr	s15, [r3]
 8000f6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f70:	4b28      	ldr	r3, [pc, #160]	@ (8001014 <adc_read+0xcc>)
 8000f72:	edd3 7a00 	vldr	s15, [r3]
 8000f76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f7a:	edc7 7a00 	vstr	s15, [r7]
    adcDataSent.batteryVoltage = ((float)adc_raw_readings[1] * batteryVoltageGain) - batteryVoltageOffset;
 8000f7e:	4b22      	ldr	r3, [pc, #136]	@ (8001008 <adc_read+0xc0>)
 8000f80:	885b      	ldrh	r3, [r3, #2]
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	ee07 3a90 	vmov	s15, r3
 8000f88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f8c:	4b22      	ldr	r3, [pc, #136]	@ (8001018 <adc_read+0xd0>)
 8000f8e:	edd3 7a00 	vldr	s15, [r3]
 8000f92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f96:	4b21      	ldr	r3, [pc, #132]	@ (800101c <adc_read+0xd4>)
 8000f98:	edd3 7a00 	vldr	s15, [r3]
 8000f9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fa0:	edc7 7a01 	vstr	s15, [r7, #4]
    adcDataSent.extra1 = ((float)adc_raw_readings[2] * extra1Gain) - extra1Offset;
 8000fa4:	4b18      	ldr	r3, [pc, #96]	@ (8001008 <adc_read+0xc0>)
 8000fa6:	889b      	ldrh	r3, [r3, #4]
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	ee07 3a90 	vmov	s15, r3
 8000fae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fb2:	4b1b      	ldr	r3, [pc, #108]	@ (8001020 <adc_read+0xd8>)
 8000fb4:	edd3 7a00 	vldr	s15, [r3]
 8000fb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fbc:	4b19      	ldr	r3, [pc, #100]	@ (8001024 <adc_read+0xdc>)
 8000fbe:	edd3 7a00 	vldr	s15, [r3]
 8000fc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fc6:	edc7 7a02 	vstr	s15, [r7, #8]
    adcDataSent.extra2 = ((float)adc_raw_readings[3] * extra2Gain) - extra2Offset;
 8000fca:	4b0f      	ldr	r3, [pc, #60]	@ (8001008 <adc_read+0xc0>)
 8000fcc:	88db      	ldrh	r3, [r3, #6]
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	ee07 3a90 	vmov	s15, r3
 8000fd4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fd8:	4b13      	ldr	r3, [pc, #76]	@ (8001028 <adc_read+0xe0>)
 8000fda:	edd3 7a00 	vldr	s15, [r3]
 8000fde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fe2:	4b12      	ldr	r3, [pc, #72]	@ (800102c <adc_read+0xe4>)
 8000fe4:	edd3 7a00 	vldr	s15, [r3]
 8000fe8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fec:	edc7 7a03 	vstr	s15, [r7, #12]

    // Send the struct to the ADC queue, overwriting previous value if full
    osMessageQueuePut(adcQueueHandle, &adcDataSent, 0, 0);
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8001030 <adc_read+0xe8>)
 8000ff2:	6818      	ldr	r0, [r3, #0]
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f007 f9db 	bl	80083b4 <osMessageQueuePut>
}
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000214 	.word	0x20000214
 800100c:	20000240 	.word	0x20000240
 8001010:	20000000 	.word	0x20000000
 8001014:	2000021c 	.word	0x2000021c
 8001018:	20000004 	.word	0x20000004
 800101c:	20000220 	.word	0x20000220
 8001020:	20000008 	.word	0x20000008
 8001024:	20000224 	.word	0x20000224
 8001028:	2000000c 	.word	0x2000000c
 800102c:	20000228 	.word	0x20000228
 8001030:	20000314 	.word	0x20000314

08001034 <control>:
int16_t pulse = 0;
float compare = 0;
float ms = 0;
float map(float x, float in_min, float in_max, float out_min, float out_max);

void control(void) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
    /* Receive from the queue (non-blocking) */
    RadioData_t newRadioData;
    if (osMessageQueueGet(radioQueueHandle, &newRadioData, NULL, 0) == osOK) {
 800103a:	4b3f      	ldr	r3, [pc, #252]	@ (8001138 <control+0x104>)
 800103c:	6818      	ldr	r0, [r3, #0]
 800103e:	1d39      	adds	r1, r7, #4
 8001040:	2300      	movs	r3, #0
 8001042:	2200      	movs	r2, #0
 8001044:	f007 fa16 	bl	8008474 <osMessageQueueGet>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d106      	bne.n	800105c <control+0x28>
        /* Update the global radioDataReceived */
        radioDataReceived = newRadioData;
 800104e:	4b3b      	ldr	r3, [pc, #236]	@ (800113c <control+0x108>)
 8001050:	461a      	mov	r2, r3
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001058:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    /* Get the selected channel value */
    uint32_t selectedPulseWidth;
    switch (selectedChannel) {
 800105c:	4b38      	ldr	r3, [pc, #224]	@ (8001140 <control+0x10c>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	3b01      	subs	r3, #1
 8001062:	2b03      	cmp	r3, #3
 8001064:	d81e      	bhi.n	80010a4 <control+0x70>
 8001066:	a201      	add	r2, pc, #4	@ (adr r2, 800106c <control+0x38>)
 8001068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800106c:	0800107d 	.word	0x0800107d
 8001070:	08001087 	.word	0x08001087
 8001074:	08001091 	.word	0x08001091
 8001078:	0800109b 	.word	0x0800109b
        case 1: selectedPulseWidth = radioDataReceived.ch1; break;
 800107c:	4b2f      	ldr	r3, [pc, #188]	@ (800113c <control+0x108>)
 800107e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	e013      	b.n	80010ae <control+0x7a>
        case 2: selectedPulseWidth = radioDataReceived.ch2; break;
 8001086:	4b2d      	ldr	r3, [pc, #180]	@ (800113c <control+0x108>)
 8001088:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	e00e      	b.n	80010ae <control+0x7a>
        case 3: selectedPulseWidth = radioDataReceived.ch3; break;
 8001090:	4b2a      	ldr	r3, [pc, #168]	@ (800113c <control+0x108>)
 8001092:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	e009      	b.n	80010ae <control+0x7a>
        case 4: selectedPulseWidth = radioDataReceived.ch4; break;
 800109a:	4b28      	ldr	r3, [pc, #160]	@ (800113c <control+0x108>)
 800109c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	e004      	b.n	80010ae <control+0x7a>
        default: selectedPulseWidth = radioDataReceived.ch1; break; // Default to CH1 if invalid
 80010a4:	4b25      	ldr	r3, [pc, #148]	@ (800113c <control+0x108>)
 80010a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	bf00      	nop
    }

    /* Convert pulse width from µs to ms */
    ms = (float)selectedPulseWidth / 1000.0F; // Convert µs to ms
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	ee07 3a90 	vmov	s15, r3
 80010b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010b8:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8001144 <control+0x110>
 80010bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010c0:	4b21      	ldr	r3, [pc, #132]	@ (8001148 <control+0x114>)
 80010c2:	edc3 7a00 	vstr	s15, [r3]

    /* Ensure the value is within the valid servo range */
    if (ms < 1.0F) ms = 1.0F;
 80010c6:	4b20      	ldr	r3, [pc, #128]	@ (8001148 <control+0x114>)
 80010c8:	edd3 7a00 	vldr	s15, [r3]
 80010cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80010d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d8:	d503      	bpl.n	80010e2 <control+0xae>
 80010da:	4b1b      	ldr	r3, [pc, #108]	@ (8001148 <control+0x114>)
 80010dc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80010e0:	601a      	str	r2, [r3, #0]
    if (ms > 2.0F) ms = 2.0F;
 80010e2:	4b19      	ldr	r3, [pc, #100]	@ (8001148 <control+0x114>)
 80010e4:	edd3 7a00 	vldr	s15, [r3]
 80010e8:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80010ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f4:	dd03      	ble.n	80010fe <control+0xca>
 80010f6:	4b14      	ldr	r3, [pc, #80]	@ (8001148 <control+0x114>)
 80010f8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010fc:	601a      	str	r2, [r3, #0]

    /* Scale for timer compare value */
    compare = ms * 59999.0F / 20.0F;
 80010fe:	4b12      	ldr	r3, [pc, #72]	@ (8001148 <control+0x114>)
 8001100:	edd3 7a00 	vldr	s15, [r3]
 8001104:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800114c <control+0x118>
 8001108:	ee27 7a87 	vmul.f32	s14, s15, s14
 800110c:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8001110:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001114:	4b0e      	ldr	r3, [pc, #56]	@ (8001150 <control+0x11c>)
 8001116:	edc3 7a00 	vstr	s15, [r3]

    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, (long)compare);
 800111a:	4b0d      	ldr	r3, [pc, #52]	@ (8001150 <control+0x11c>)
 800111c:	edd3 7a00 	vldr	s15, [r3]
 8001120:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001124:	4b0b      	ldr	r3, [pc, #44]	@ (8001154 <control+0x120>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	ee17 2a90 	vmov	r2, s15
 800112c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000310 	.word	0x20000310
 800113c:	2000022c 	.word	0x2000022c
 8001140:	20000010 	.word	0x20000010
 8001144:	447a0000 	.word	0x447a0000
 8001148:	20000238 	.word	0x20000238
 800114c:	476a5f00 	.word	0x476a5f00
 8001150:	20000234 	.word	0x20000234
 8001154:	2000041c 	.word	0x2000041c

08001158 <bno055_writeData>:
#else
  HAL_Delay(time);
#endif
}

void bno055_writeData(uint8_t reg, uint8_t data) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af02      	add	r7, sp, #8
 800115e:	4603      	mov	r3, r0
 8001160:	460a      	mov	r2, r1
 8001162:	71fb      	strb	r3, [r7, #7]
 8001164:	4613      	mov	r3, r2
 8001166:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	733b      	strb	r3, [r7, #12]
 800116c:	79bb      	ldrb	r3, [r7, #6]
 800116e:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8001170:	4b5a      	ldr	r3, [pc, #360]	@ (80012dc <bno055_writeData+0x184>)
 8001172:	6818      	ldr	r0, [r3, #0]
 8001174:	f107 020c 	add.w	r2, r7, #12
 8001178:	230a      	movs	r3, #10
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	2302      	movs	r3, #2
 800117e:	2150      	movs	r1, #80	@ 0x50
 8001180:	f003 fcee 	bl	8004b60 <HAL_I2C_Master_Transmit>
 8001184:	4603      	mov	r3, r0
 8001186:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8001188:	7dfb      	ldrb	r3, [r7, #23]
 800118a:	2b00      	cmp	r3, #0
 800118c:	f000 80a0 	beq.w	80012d0 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8001190:	7dfb      	ldrb	r3, [r7, #23]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d103      	bne.n	800119e <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8001196:	4852      	ldr	r0, [pc, #328]	@ (80012e0 <bno055_writeData+0x188>)
 8001198:	f00a fedc 	bl	800bf54 <puts>
 800119c:	e012      	b.n	80011c4 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 800119e:	7dfb      	ldrb	r3, [r7, #23]
 80011a0:	2b03      	cmp	r3, #3
 80011a2:	d103      	bne.n	80011ac <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 80011a4:	484f      	ldr	r0, [pc, #316]	@ (80012e4 <bno055_writeData+0x18c>)
 80011a6:	f00a fed5 	bl	800bf54 <puts>
 80011aa:	e00b      	b.n	80011c4 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 80011ac:	7dfb      	ldrb	r3, [r7, #23]
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d103      	bne.n	80011ba <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 80011b2:	484d      	ldr	r0, [pc, #308]	@ (80012e8 <bno055_writeData+0x190>)
 80011b4:	f00a fece 	bl	800bf54 <puts>
 80011b8:	e004      	b.n	80011c4 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 80011ba:	7dfb      	ldrb	r3, [r7, #23]
 80011bc:	4619      	mov	r1, r3
 80011be:	484b      	ldr	r0, [pc, #300]	@ (80012ec <bno055_writeData+0x194>)
 80011c0:	f00a fe60 	bl	800be84 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 80011c4:	4b45      	ldr	r3, [pc, #276]	@ (80012dc <bno055_writeData+0x184>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f004 f807 	bl	80051dc <HAL_I2C_GetError>
 80011ce:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d07e      	beq.n	80012d4 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d103      	bne.n	80011e4 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 80011dc:	4844      	ldr	r0, [pc, #272]	@ (80012f0 <bno055_writeData+0x198>)
 80011de:	f00a feb9 	bl	800bf54 <puts>
 80011e2:	e021      	b.n	8001228 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d103      	bne.n	80011f2 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 80011ea:	4842      	ldr	r0, [pc, #264]	@ (80012f4 <bno055_writeData+0x19c>)
 80011ec:	f00a feb2 	bl	800bf54 <puts>
 80011f0:	e01a      	b.n	8001228 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	2b04      	cmp	r3, #4
 80011f6:	d103      	bne.n	8001200 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 80011f8:	483f      	ldr	r0, [pc, #252]	@ (80012f8 <bno055_writeData+0x1a0>)
 80011fa:	f00a feab 	bl	800bf54 <puts>
 80011fe:	e013      	b.n	8001228 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	2b08      	cmp	r3, #8
 8001204:	d103      	bne.n	800120e <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8001206:	483d      	ldr	r0, [pc, #244]	@ (80012fc <bno055_writeData+0x1a4>)
 8001208:	f00a fea4 	bl	800bf54 <puts>
 800120c:	e00c      	b.n	8001228 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	2b10      	cmp	r3, #16
 8001212:	d103      	bne.n	800121c <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8001214:	483a      	ldr	r0, [pc, #232]	@ (8001300 <bno055_writeData+0x1a8>)
 8001216:	f00a fe9d 	bl	800bf54 <puts>
 800121a:	e005      	b.n	8001228 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	2b20      	cmp	r3, #32
 8001220:	d102      	bne.n	8001228 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8001222:	4838      	ldr	r0, [pc, #224]	@ (8001304 <bno055_writeData+0x1ac>)
 8001224:	f00a fe96 	bl	800bf54 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001228:	4b2c      	ldr	r3, [pc, #176]	@ (80012dc <bno055_writeData+0x184>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f003 ffc7 	bl	80051c0 <HAL_I2C_GetState>
 8001232:	4603      	mov	r3, r0
 8001234:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8001236:	7bfb      	ldrb	r3, [r7, #15]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d103      	bne.n	8001244 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 800123c:	4832      	ldr	r0, [pc, #200]	@ (8001308 <bno055_writeData+0x1b0>)
 800123e:	f00a fe89 	bl	800bf54 <puts>
 8001242:	e048      	b.n	80012d6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8001244:	7bfb      	ldrb	r3, [r7, #15]
 8001246:	2b20      	cmp	r3, #32
 8001248:	d103      	bne.n	8001252 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 800124a:	482f      	ldr	r0, [pc, #188]	@ (8001308 <bno055_writeData+0x1b0>)
 800124c:	f00a fe82 	bl	800bf54 <puts>
 8001250:	e041      	b.n	80012d6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	2b24      	cmp	r3, #36	@ 0x24
 8001256:	d103      	bne.n	8001260 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8001258:	482c      	ldr	r0, [pc, #176]	@ (800130c <bno055_writeData+0x1b4>)
 800125a:	f00a fe7b 	bl	800bf54 <puts>
 800125e:	e03a      	b.n	80012d6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	2b21      	cmp	r3, #33	@ 0x21
 8001264:	d103      	bne.n	800126e <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8001266:	482a      	ldr	r0, [pc, #168]	@ (8001310 <bno055_writeData+0x1b8>)
 8001268:	f00a fe74 	bl	800bf54 <puts>
 800126c:	e033      	b.n	80012d6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	2b22      	cmp	r3, #34	@ 0x22
 8001272:	d103      	bne.n	800127c <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8001274:	4827      	ldr	r0, [pc, #156]	@ (8001314 <bno055_writeData+0x1bc>)
 8001276:	f00a fe6d 	bl	800bf54 <puts>
 800127a:	e02c      	b.n	80012d6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 800127c:	7bfb      	ldrb	r3, [r7, #15]
 800127e:	2b28      	cmp	r3, #40	@ 0x28
 8001280:	d103      	bne.n	800128a <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8001282:	4825      	ldr	r0, [pc, #148]	@ (8001318 <bno055_writeData+0x1c0>)
 8001284:	f00a fe66 	bl	800bf54 <puts>
 8001288:	e025      	b.n	80012d6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	2b29      	cmp	r3, #41	@ 0x29
 800128e:	d103      	bne.n	8001298 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8001290:	4822      	ldr	r0, [pc, #136]	@ (800131c <bno055_writeData+0x1c4>)
 8001292:	f00a fe5f 	bl	800bf54 <puts>
 8001296:	e01e      	b.n	80012d6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8001298:	7bfb      	ldrb	r3, [r7, #15]
 800129a:	2b2a      	cmp	r3, #42	@ 0x2a
 800129c:	d103      	bne.n	80012a6 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 800129e:	4820      	ldr	r0, [pc, #128]	@ (8001320 <bno055_writeData+0x1c8>)
 80012a0:	f00a fe58 	bl	800bf54 <puts>
 80012a4:	e017      	b.n	80012d6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
 80012a8:	2b60      	cmp	r3, #96	@ 0x60
 80012aa:	d103      	bne.n	80012b4 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 80012ac:	481d      	ldr	r0, [pc, #116]	@ (8001324 <bno055_writeData+0x1cc>)
 80012ae:	f00a fe51 	bl	800bf54 <puts>
 80012b2:	e010      	b.n	80012d6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	2ba0      	cmp	r3, #160	@ 0xa0
 80012b8:	d103      	bne.n	80012c2 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 80012ba:	481b      	ldr	r0, [pc, #108]	@ (8001328 <bno055_writeData+0x1d0>)
 80012bc:	f00a fe4a 	bl	800bf54 <puts>
 80012c0:	e009      	b.n	80012d6 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	2be0      	cmp	r3, #224	@ 0xe0
 80012c6:	d106      	bne.n	80012d6 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 80012c8:	4818      	ldr	r0, [pc, #96]	@ (800132c <bno055_writeData+0x1d4>)
 80012ca:	f00a fe43 	bl	800bf54 <puts>
 80012ce:	e002      	b.n	80012d6 <bno055_writeData+0x17e>
    return;
 80012d0:	bf00      	nop
 80012d2:	e000      	b.n	80012d6 <bno055_writeData+0x17e>
    return;
 80012d4:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	2000023c 	.word	0x2000023c
 80012e0:	0800e2b0 	.word	0x0800e2b0
 80012e4:	0800e2d4 	.word	0x0800e2d4
 80012e8:	0800e2fc 	.word	0x0800e2fc
 80012ec:	0800e320 	.word	0x0800e320
 80012f0:	0800e338 	.word	0x0800e338
 80012f4:	0800e34c 	.word	0x0800e34c
 80012f8:	0800e360 	.word	0x0800e360
 80012fc:	0800e374 	.word	0x0800e374
 8001300:	0800e388 	.word	0x0800e388
 8001304:	0800e39c 	.word	0x0800e39c
 8001308:	0800e3b4 	.word	0x0800e3b4
 800130c:	0800e3cc 	.word	0x0800e3cc
 8001310:	0800e3e0 	.word	0x0800e3e0
 8001314:	0800e3f8 	.word	0x0800e3f8
 8001318:	0800e410 	.word	0x0800e410
 800131c:	0800e428 	.word	0x0800e428
 8001320:	0800e448 	.word	0x0800e448
 8001324:	0800e468 	.word	0x0800e468
 8001328:	0800e480 	.word	0x0800e480
 800132c:	0800e498 	.word	0x0800e498

08001330 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af02      	add	r7, sp, #8
 8001336:	4603      	mov	r3, r0
 8001338:	6039      	str	r1, [r7, #0]
 800133a:	71fb      	strb	r3, [r7, #7]
 800133c:	4613      	mov	r3, r2
 800133e:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8001340:	4b0b      	ldr	r3, [pc, #44]	@ (8001370 <bno055_readData+0x40>)
 8001342:	6818      	ldr	r0, [r3, #0]
 8001344:	1dfa      	adds	r2, r7, #7
 8001346:	2364      	movs	r3, #100	@ 0x64
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	2301      	movs	r3, #1
 800134c:	2150      	movs	r1, #80	@ 0x50
 800134e:	f003 fc07 	bl	8004b60 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8001352:	4b07      	ldr	r3, [pc, #28]	@ (8001370 <bno055_readData+0x40>)
 8001354:	6818      	ldr	r0, [r3, #0]
 8001356:	79bb      	ldrb	r3, [r7, #6]
 8001358:	b29b      	uxth	r3, r3
 800135a:	2264      	movs	r2, #100	@ 0x64
 800135c:	9200      	str	r2, [sp, #0]
 800135e:	683a      	ldr	r2, [r7, #0]
 8001360:	2150      	movs	r1, #80	@ 0x50
 8001362:	f003 fcfb 	bl	8004d5c <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	2000023c 	.word	0x2000023c

08001374 <imu_read>:
#include "IMU.h"
#include "bno055_stm32.h"  // Library from https://github.com/ivyknob/bno055_stm32
#include "cmsis_os.h"      // For osMessageQueuePut
extern osMessageQueueId_t imuQueueHandle;

void imu_read(void){
 8001374:	b580      	push	{r7, lr}
 8001376:	b0ac      	sub	sp, #176	@ 0xb0
 8001378:	af00      	add	r7, sp, #0
    ImuData_t imuData = {0};
 800137a:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800137e:	2230      	movs	r2, #48	@ 0x30
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f00a fefa 	bl	800c17c <memset>

    // Get fused Euler angles from the BNO055 sensor.
    // In the library’s example, bno055_getVectorEuler() returns a bno055_vector_t with:
    //   x = Heading, y = Roll, and z = Pitch.
    bno055_vector_t euler = bno055_getVectorEuler();
 8001388:	f000 ff6b 	bl	8002262 <bno055_getVectorEuler>
 800138c:	eeb0 4a40 	vmov.f32	s8, s0
 8001390:	eef0 4a60 	vmov.f32	s9, s1
 8001394:	eeb0 5a41 	vmov.f32	s10, s2
 8001398:	eef0 5a61 	vmov.f32	s11, s3
 800139c:	eeb0 6a42 	vmov.f32	s12, s4
 80013a0:	eef0 6a62 	vmov.f32	s13, s5
 80013a4:	eeb0 7a43 	vmov.f32	s14, s6
 80013a8:	eef0 7a63 	vmov.f32	s15, s7
 80013ac:	ed87 4b18 	vstr	d4, [r7, #96]	@ 0x60
 80013b0:	ed87 5b1a 	vstr	d5, [r7, #104]	@ 0x68
 80013b4:	ed87 6b1c 	vstr	d6, [r7, #112]	@ 0x70
 80013b8:	ed87 7b1e 	vstr	d7, [r7, #120]	@ 0x78

    // Map the Euler angles to our IMU data structure:
    imuData.yaw   = euler.x;  // Heading
 80013bc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80013c0:	4610      	mov	r0, r2
 80013c2:	4619      	mov	r1, r3
 80013c4:	f7ff fbf8 	bl	8000bb8 <__aeabi_d2f>
 80013c8:	4603      	mov	r3, r0
 80013ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    imuData.roll  = euler.y;
 80013ce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80013d2:	4610      	mov	r0, r2
 80013d4:	4619      	mov	r1, r3
 80013d6:	f7ff fbef 	bl	8000bb8 <__aeabi_d2f>
 80013da:	4603      	mov	r3, r0
 80013dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    imuData.pitch = euler.z;
 80013e0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80013e4:	4610      	mov	r0, r2
 80013e6:	4619      	mov	r1, r3
 80013e8:	f7ff fbe6 	bl	8000bb8 <__aeabi_d2f>
 80013ec:	4603      	mov	r3, r0
 80013ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

    bno055_vector_t accel = bno055_getVectorAccelerometer();
 80013f2:	f000 fe6d 	bl	80020d0 <bno055_getVectorAccelerometer>
 80013f6:	eeb0 4a40 	vmov.f32	s8, s0
 80013fa:	eef0 4a60 	vmov.f32	s9, s1
 80013fe:	eeb0 5a41 	vmov.f32	s10, s2
 8001402:	eef0 5a61 	vmov.f32	s11, s3
 8001406:	eeb0 6a42 	vmov.f32	s12, s4
 800140a:	eef0 6a62 	vmov.f32	s13, s5
 800140e:	eeb0 7a43 	vmov.f32	s14, s6
 8001412:	eef0 7a63 	vmov.f32	s15, s7
 8001416:	ed87 4b10 	vstr	d4, [r7, #64]	@ 0x40
 800141a:	ed87 5b12 	vstr	d5, [r7, #72]	@ 0x48
 800141e:	ed87 6b14 	vstr	d6, [r7, #80]	@ 0x50
 8001422:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58

    imuData.accelX = accel.x;
 8001426:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800142a:	4610      	mov	r0, r2
 800142c:	4619      	mov	r1, r3
 800142e:	f7ff fbc3 	bl	8000bb8 <__aeabi_d2f>
 8001432:	4603      	mov	r3, r0
 8001434:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    imuData.accelY = accel.y;
 8001438:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800143c:	4610      	mov	r0, r2
 800143e:	4619      	mov	r1, r3
 8001440:	f7ff fbba 	bl	8000bb8 <__aeabi_d2f>
 8001444:	4603      	mov	r3, r0
 8001446:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    imuData.accelZ = accel.z;
 800144a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800144e:	4610      	mov	r0, r2
 8001450:	4619      	mov	r1, r3
 8001452:	f7ff fbb1 	bl	8000bb8 <__aeabi_d2f>
 8001456:	4603      	mov	r3, r0
 8001458:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    bno055_vector_t gyro = bno055_getVectorGyroscope();
 800145c:	f000 febe 	bl	80021dc <bno055_getVectorGyroscope>
 8001460:	eeb0 4a40 	vmov.f32	s8, s0
 8001464:	eef0 4a60 	vmov.f32	s9, s1
 8001468:	eeb0 5a41 	vmov.f32	s10, s2
 800146c:	eef0 5a61 	vmov.f32	s11, s3
 8001470:	eeb0 6a42 	vmov.f32	s12, s4
 8001474:	eef0 6a62 	vmov.f32	s13, s5
 8001478:	eeb0 7a43 	vmov.f32	s14, s6
 800147c:	eef0 7a63 	vmov.f32	s15, s7
 8001480:	ed87 4b08 	vstr	d4, [r7, #32]
 8001484:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8001488:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 800148c:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
    imuData.gyroX = gyro.x;
 8001490:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001494:	4610      	mov	r0, r2
 8001496:	4619      	mov	r1, r3
 8001498:	f7ff fb8e 	bl	8000bb8 <__aeabi_d2f>
 800149c:	4603      	mov	r3, r0
 800149e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    imuData.gyroY = gyro.y;
 80014a2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80014a6:	4610      	mov	r0, r2
 80014a8:	4619      	mov	r1, r3
 80014aa:	f7ff fb85 	bl	8000bb8 <__aeabi_d2f>
 80014ae:	4603      	mov	r3, r0
 80014b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    imuData.gyroZ = gyro.z;
 80014b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80014b8:	4610      	mov	r0, r2
 80014ba:	4619      	mov	r1, r3
 80014bc:	f7ff fb7c 	bl	8000bb8 <__aeabi_d2f>
 80014c0:	4603      	mov	r3, r0
 80014c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

    bno055_vector_t mag = bno055_getVectorMagnetometer();
 80014c6:	f000 fe46 	bl	8002156 <bno055_getVectorMagnetometer>
 80014ca:	eeb0 4a40 	vmov.f32	s8, s0
 80014ce:	eef0 4a60 	vmov.f32	s9, s1
 80014d2:	eeb0 5a41 	vmov.f32	s10, s2
 80014d6:	eef0 5a61 	vmov.f32	s11, s3
 80014da:	eeb0 6a42 	vmov.f32	s12, s4
 80014de:	eef0 6a62 	vmov.f32	s13, s5
 80014e2:	eeb0 7a43 	vmov.f32	s14, s6
 80014e6:	eef0 7a63 	vmov.f32	s15, s7
 80014ea:	ed87 4b00 	vstr	d4, [r7]
 80014ee:	ed87 5b02 	vstr	d5, [r7, #8]
 80014f2:	ed87 6b04 	vstr	d6, [r7, #16]
 80014f6:	ed87 7b06 	vstr	d7, [r7, #24]
    imuData.magX = mag.x;
 80014fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80014fe:	4610      	mov	r0, r2
 8001500:	4619      	mov	r1, r3
 8001502:	f7ff fb59 	bl	8000bb8 <__aeabi_d2f>
 8001506:	4603      	mov	r3, r0
 8001508:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    imuData.magY = mag.y;
 800150c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	f7ff fb50 	bl	8000bb8 <__aeabi_d2f>
 8001518:	4603      	mov	r3, r0
 800151a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    imuData.magZ = mag.z;
 800151e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001522:	4610      	mov	r0, r2
 8001524:	4619      	mov	r1, r3
 8001526:	f7ff fb47 	bl	8000bb8 <__aeabi_d2f>
 800152a:	4603      	mov	r3, r0
 800152c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

    // Post the sensor data to the message queue.
    osMessageQueuePut(imuQueueHandle, &imuData, 0, 0);
 8001530:	4b05      	ldr	r3, [pc, #20]	@ (8001548 <imu_read+0x1d4>)
 8001532:	6818      	ldr	r0, [r3, #0]
 8001534:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 8001538:	2300      	movs	r3, #0
 800153a:	2200      	movs	r2, #0
 800153c:	f006 ff3a 	bl	80083b4 <osMessageQueuePut>
}
 8001540:	bf00      	nop
 8001542:	37b0      	adds	r7, #176	@ 0xb0
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000318 	.word	0x20000318

0800154c <telemetry>:
extern osMessageQueueId_t adcQueueHandle;
extern osMessageQueueId_t imuQueueHandle;
extern osMessageQueueId_t radioQueueHandle;
extern osMessageQueueId_t controlQueueHandle;

void telemetry(void) {
 800154c:	b580      	push	{r7, lr}
 800154e:	b0ba      	sub	sp, #232	@ 0xe8
 8001550:	af02      	add	r7, sp, #8
    ImuData_t imuDataReceived;
    RadioData_t radioDataReceived;
    ControlData_t controlDataReceived;

    for (;;) {
        if (osMessageQueueGetCount(imuQueueHandle) > 0) {
 8001552:	4bca      	ldr	r3, [pc, #808]	@ (800187c <telemetry+0x330>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f006 ffea 	bl	8008530 <osMessageQueueGetCount>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d078      	beq.n	8001654 <telemetry+0x108>
			// Get ADC Data
        	osMessageQueueGet(adcQueueHandle, (void*)&adcDataReceived, NULL, osWaitForever);
 8001562:	4bc7      	ldr	r3, [pc, #796]	@ (8001880 <telemetry+0x334>)
 8001564:	6818      	ldr	r0, [r3, #0]
 8001566:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800156a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800156e:	2200      	movs	r2, #0
 8001570:	f006 ff80 	bl	8008474 <osMessageQueueGet>
            // Send ADC Data
            snprintf(uartBuffer, sizeof(uartBuffer), "DIR: %.2f\r\n", adcDataReceived.windDirection);
 8001574:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001576:	4618      	mov	r0, r3
 8001578:	f7fe ffee 	bl	8000558 <__aeabi_f2d>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8001584:	e9cd 2300 	strd	r2, r3, [sp]
 8001588:	4abe      	ldr	r2, [pc, #760]	@ (8001884 <telemetry+0x338>)
 800158a:	2180      	movs	r1, #128	@ 0x80
 800158c:	f00a fcea 	bl	800bf64 <sniprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8001590:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe fe73 	bl	8000280 <strlen>
 800159a:	4603      	mov	r3, r0
 800159c:	b29a      	uxth	r2, r3
 800159e:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 80015a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015a6:	48b8      	ldr	r0, [pc, #736]	@ (8001888 <telemetry+0x33c>)
 80015a8:	f006 f99a 	bl	80078e0 <HAL_UART_Transmit>
            snprintf(uartBuffer, sizeof(uartBuffer), "BAT: %.2f\r\n", adcDataReceived.batteryVoltage);
 80015ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7fe ffd2 	bl	8000558 <__aeabi_f2d>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 80015bc:	e9cd 2300 	strd	r2, r3, [sp]
 80015c0:	4ab2      	ldr	r2, [pc, #712]	@ (800188c <telemetry+0x340>)
 80015c2:	2180      	movs	r1, #128	@ 0x80
 80015c4:	f00a fcce 	bl	800bf64 <sniprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 80015c8:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7fe fe57 	bl	8000280 <strlen>
 80015d2:	4603      	mov	r3, r0
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 80015da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015de:	48aa      	ldr	r0, [pc, #680]	@ (8001888 <telemetry+0x33c>)
 80015e0:	f006 f97e 	bl	80078e0 <HAL_UART_Transmit>
            snprintf(uartBuffer, sizeof(uartBuffer), "EX1: %.2f\r\n", adcDataReceived.extra1);
 80015e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7fe ffb6 	bl	8000558 <__aeabi_f2d>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 80015f4:	e9cd 2300 	strd	r2, r3, [sp]
 80015f8:	4aa5      	ldr	r2, [pc, #660]	@ (8001890 <telemetry+0x344>)
 80015fa:	2180      	movs	r1, #128	@ 0x80
 80015fc:	f00a fcb2 	bl	800bf64 <sniprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8001600:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001604:	4618      	mov	r0, r3
 8001606:	f7fe fe3b 	bl	8000280 <strlen>
 800160a:	4603      	mov	r3, r0
 800160c:	b29a      	uxth	r2, r3
 800160e:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8001612:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001616:	489c      	ldr	r0, [pc, #624]	@ (8001888 <telemetry+0x33c>)
 8001618:	f006 f962 	bl	80078e0 <HAL_UART_Transmit>
            snprintf(uartBuffer, sizeof(uartBuffer), "EX2: %.2f\r\n", adcDataReceived.extra2);
 800161c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe ff9a 	bl	8000558 <__aeabi_f2d>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 800162c:	e9cd 2300 	strd	r2, r3, [sp]
 8001630:	4a98      	ldr	r2, [pc, #608]	@ (8001894 <telemetry+0x348>)
 8001632:	2180      	movs	r1, #128	@ 0x80
 8001634:	f00a fc96 	bl	800bf64 <sniprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8001638:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800163c:	4618      	mov	r0, r3
 800163e:	f7fe fe1f 	bl	8000280 <strlen>
 8001642:	4603      	mov	r3, r0
 8001644:	b29a      	uxth	r2, r3
 8001646:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 800164a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800164e:	488e      	ldr	r0, [pc, #568]	@ (8001888 <telemetry+0x33c>)
 8001650:	f006 f946 	bl	80078e0 <HAL_UART_Transmit>
        }

        if (osMessageQueueGetCount(imuQueueHandle) > 0) {
 8001654:	4b89      	ldr	r3, [pc, #548]	@ (800187c <telemetry+0x330>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f006 ff69 	bl	8008530 <osMessageQueueGetCount>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	f000 817a 	beq.w	800195a <telemetry+0x40e>
			// Get IMU Data
			osMessageQueueGet(imuQueueHandle, (void*)&imuDataReceived, NULL, osWaitForever);
 8001666:	4b85      	ldr	r3, [pc, #532]	@ (800187c <telemetry+0x330>)
 8001668:	6818      	ldr	r0, [r3, #0]
 800166a:	f107 0120 	add.w	r1, r7, #32
 800166e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001672:	2200      	movs	r2, #0
 8001674:	f006 fefe 	bl	8008474 <osMessageQueueGet>
			// Send IMU Data
			snprintf(uartBuffer, sizeof(uartBuffer), "ROL: %.2f\r\n", imuDataReceived.roll);
 8001678:	6a3b      	ldr	r3, [r7, #32]
 800167a:	4618      	mov	r0, r3
 800167c:	f7fe ff6c 	bl	8000558 <__aeabi_f2d>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8001688:	e9cd 2300 	strd	r2, r3, [sp]
 800168c:	4a82      	ldr	r2, [pc, #520]	@ (8001898 <telemetry+0x34c>)
 800168e:	2180      	movs	r1, #128	@ 0x80
 8001690:	f00a fc68 	bl	800bf64 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8001694:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001698:	4618      	mov	r0, r3
 800169a:	f7fe fdf1 	bl	8000280 <strlen>
 800169e:	4603      	mov	r3, r0
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 80016a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016aa:	4877      	ldr	r0, [pc, #476]	@ (8001888 <telemetry+0x33c>)
 80016ac:	f006 f918 	bl	80078e0 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "PIT: %.2f\r\n", imuDataReceived.pitch);
 80016b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7fe ff50 	bl	8000558 <__aeabi_f2d>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 80016c0:	e9cd 2300 	strd	r2, r3, [sp]
 80016c4:	4a75      	ldr	r2, [pc, #468]	@ (800189c <telemetry+0x350>)
 80016c6:	2180      	movs	r1, #128	@ 0x80
 80016c8:	f00a fc4c 	bl	800bf64 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 80016cc:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7fe fdd5 	bl	8000280 <strlen>
 80016d6:	4603      	mov	r3, r0
 80016d8:	b29a      	uxth	r2, r3
 80016da:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 80016de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016e2:	4869      	ldr	r0, [pc, #420]	@ (8001888 <telemetry+0x33c>)
 80016e4:	f006 f8fc 	bl	80078e0 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "YAW: %.2f\r\n", imuDataReceived.yaw);
 80016e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7fe ff34 	bl	8000558 <__aeabi_f2d>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 80016f8:	e9cd 2300 	strd	r2, r3, [sp]
 80016fc:	4a68      	ldr	r2, [pc, #416]	@ (80018a0 <telemetry+0x354>)
 80016fe:	2180      	movs	r1, #128	@ 0x80
 8001700:	f00a fc30 	bl	800bf64 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8001704:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe fdb9 	bl	8000280 <strlen>
 800170e:	4603      	mov	r3, r0
 8001710:	b29a      	uxth	r2, r3
 8001712:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8001716:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800171a:	485b      	ldr	r0, [pc, #364]	@ (8001888 <telemetry+0x33c>)
 800171c:	f006 f8e0 	bl	80078e0 <HAL_UART_Transmit>

			snprintf(uartBuffer, sizeof(uartBuffer), "ACX: %.2f\r\n", imuDataReceived.accelX);
 8001720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe ff18 	bl	8000558 <__aeabi_f2d>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8001730:	e9cd 2300 	strd	r2, r3, [sp]
 8001734:	4a5b      	ldr	r2, [pc, #364]	@ (80018a4 <telemetry+0x358>)
 8001736:	2180      	movs	r1, #128	@ 0x80
 8001738:	f00a fc14 	bl	800bf64 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 800173c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001740:	4618      	mov	r0, r3
 8001742:	f7fe fd9d 	bl	8000280 <strlen>
 8001746:	4603      	mov	r3, r0
 8001748:	b29a      	uxth	r2, r3
 800174a:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 800174e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001752:	484d      	ldr	r0, [pc, #308]	@ (8001888 <telemetry+0x33c>)
 8001754:	f006 f8c4 	bl	80078e0 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "ACY: %.2f\r\n", imuDataReceived.accelY);
 8001758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800175a:	4618      	mov	r0, r3
 800175c:	f7fe fefc 	bl	8000558 <__aeabi_f2d>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8001768:	e9cd 2300 	strd	r2, r3, [sp]
 800176c:	4a4e      	ldr	r2, [pc, #312]	@ (80018a8 <telemetry+0x35c>)
 800176e:	2180      	movs	r1, #128	@ 0x80
 8001770:	f00a fbf8 	bl	800bf64 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8001774:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe fd81 	bl	8000280 <strlen>
 800177e:	4603      	mov	r3, r0
 8001780:	b29a      	uxth	r2, r3
 8001782:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8001786:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800178a:	483f      	ldr	r0, [pc, #252]	@ (8001888 <telemetry+0x33c>)
 800178c:	f006 f8a8 	bl	80078e0 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "ACZ: %.2f\r\n", imuDataReceived.accelZ);
 8001790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe fee0 	bl	8000558 <__aeabi_f2d>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 80017a0:	e9cd 2300 	strd	r2, r3, [sp]
 80017a4:	4a41      	ldr	r2, [pc, #260]	@ (80018ac <telemetry+0x360>)
 80017a6:	2180      	movs	r1, #128	@ 0x80
 80017a8:	f00a fbdc 	bl	800bf64 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 80017ac:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7fe fd65 	bl	8000280 <strlen>
 80017b6:	4603      	mov	r3, r0
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 80017be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017c2:	4831      	ldr	r0, [pc, #196]	@ (8001888 <telemetry+0x33c>)
 80017c4:	f006 f88c 	bl	80078e0 <HAL_UART_Transmit>

			snprintf(uartBuffer, sizeof(uartBuffer), "GYX: %.2f\r\n", imuDataReceived.gyroX);
 80017c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7fe fec4 	bl	8000558 <__aeabi_f2d>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 80017d8:	e9cd 2300 	strd	r2, r3, [sp]
 80017dc:	4a34      	ldr	r2, [pc, #208]	@ (80018b0 <telemetry+0x364>)
 80017de:	2180      	movs	r1, #128	@ 0x80
 80017e0:	f00a fbc0 	bl	800bf64 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 80017e4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7fe fd49 	bl	8000280 <strlen>
 80017ee:	4603      	mov	r3, r0
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 80017f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017fa:	4823      	ldr	r0, [pc, #140]	@ (8001888 <telemetry+0x33c>)
 80017fc:	f006 f870 	bl	80078e0 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "GYY: %.2f\r\n", imuDataReceived.gyroY);
 8001800:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe fea8 	bl	8000558 <__aeabi_f2d>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8001810:	e9cd 2300 	strd	r2, r3, [sp]
 8001814:	4a27      	ldr	r2, [pc, #156]	@ (80018b4 <telemetry+0x368>)
 8001816:	2180      	movs	r1, #128	@ 0x80
 8001818:	f00a fba4 	bl	800bf64 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 800181c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001820:	4618      	mov	r0, r3
 8001822:	f7fe fd2d 	bl	8000280 <strlen>
 8001826:	4603      	mov	r3, r0
 8001828:	b29a      	uxth	r2, r3
 800182a:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 800182e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001832:	4815      	ldr	r0, [pc, #84]	@ (8001888 <telemetry+0x33c>)
 8001834:	f006 f854 	bl	80078e0 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "GYZ: %.2f\r\n", imuDataReceived.gyroZ);
 8001838:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800183a:	4618      	mov	r0, r3
 800183c:	f7fe fe8c 	bl	8000558 <__aeabi_f2d>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8001848:	e9cd 2300 	strd	r2, r3, [sp]
 800184c:	4a1a      	ldr	r2, [pc, #104]	@ (80018b8 <telemetry+0x36c>)
 800184e:	2180      	movs	r1, #128	@ 0x80
 8001850:	f00a fb88 	bl	800bf64 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8001854:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe fd11 	bl	8000280 <strlen>
 800185e:	4603      	mov	r3, r0
 8001860:	b29a      	uxth	r2, r3
 8001862:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8001866:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800186a:	4807      	ldr	r0, [pc, #28]	@ (8001888 <telemetry+0x33c>)
 800186c:	f006 f838 	bl	80078e0 <HAL_UART_Transmit>

			snprintf(uartBuffer, sizeof(uartBuffer), "MGX: %.2f\r\n", imuDataReceived.magX);
 8001870:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001872:	4618      	mov	r0, r3
 8001874:	f7fe fe70 	bl	8000558 <__aeabi_f2d>
 8001878:	4602      	mov	r2, r0
 800187a:	e01f      	b.n	80018bc <telemetry+0x370>
 800187c:	20000318 	.word	0x20000318
 8001880:	20000314 	.word	0x20000314
 8001884:	0800e4b0 	.word	0x0800e4b0
 8001888:	200004ac 	.word	0x200004ac
 800188c:	0800e4bc 	.word	0x0800e4bc
 8001890:	0800e4c8 	.word	0x0800e4c8
 8001894:	0800e4d4 	.word	0x0800e4d4
 8001898:	0800e4e0 	.word	0x0800e4e0
 800189c:	0800e4ec 	.word	0x0800e4ec
 80018a0:	0800e4f8 	.word	0x0800e4f8
 80018a4:	0800e504 	.word	0x0800e504
 80018a8:	0800e510 	.word	0x0800e510
 80018ac:	0800e51c 	.word	0x0800e51c
 80018b0:	0800e528 	.word	0x0800e528
 80018b4:	0800e534 	.word	0x0800e534
 80018b8:	0800e540 	.word	0x0800e540
 80018bc:	460b      	mov	r3, r1
 80018be:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 80018c2:	e9cd 2300 	strd	r2, r3, [sp]
 80018c6:	4acf      	ldr	r2, [pc, #828]	@ (8001c04 <telemetry+0x6b8>)
 80018c8:	2180      	movs	r1, #128	@ 0x80
 80018ca:	f00a fb4b 	bl	800bf64 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 80018ce:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fcd4 	bl	8000280 <strlen>
 80018d8:	4603      	mov	r3, r0
 80018da:	b29a      	uxth	r2, r3
 80018dc:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 80018e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018e4:	48c8      	ldr	r0, [pc, #800]	@ (8001c08 <telemetry+0x6bc>)
 80018e6:	f005 fffb 	bl	80078e0 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "MGY: %.2f\r\n", imuDataReceived.magY);
 80018ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7fe fe33 	bl	8000558 <__aeabi_f2d>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 80018fa:	e9cd 2300 	strd	r2, r3, [sp]
 80018fe:	4ac3      	ldr	r2, [pc, #780]	@ (8001c0c <telemetry+0x6c0>)
 8001900:	2180      	movs	r1, #128	@ 0x80
 8001902:	f00a fb2f 	bl	800bf64 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8001906:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800190a:	4618      	mov	r0, r3
 800190c:	f7fe fcb8 	bl	8000280 <strlen>
 8001910:	4603      	mov	r3, r0
 8001912:	b29a      	uxth	r2, r3
 8001914:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8001918:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800191c:	48ba      	ldr	r0, [pc, #744]	@ (8001c08 <telemetry+0x6bc>)
 800191e:	f005 ffdf 	bl	80078e0 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "MGZ: %.2f\r\n", imuDataReceived.magZ);
 8001922:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001924:	4618      	mov	r0, r3
 8001926:	f7fe fe17 	bl	8000558 <__aeabi_f2d>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8001932:	e9cd 2300 	strd	r2, r3, [sp]
 8001936:	4ab6      	ldr	r2, [pc, #728]	@ (8001c10 <telemetry+0x6c4>)
 8001938:	2180      	movs	r1, #128	@ 0x80
 800193a:	f00a fb13 	bl	800bf64 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 800193e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe fc9c 	bl	8000280 <strlen>
 8001948:	4603      	mov	r3, r0
 800194a:	b29a      	uxth	r2, r3
 800194c:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8001950:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001954:	48ac      	ldr	r0, [pc, #688]	@ (8001c08 <telemetry+0x6bc>)
 8001956:	f005 ffc3 	bl	80078e0 <HAL_UART_Transmit>
        }

        if (osMessageQueueGetCount(radioQueueHandle) > 0) {
 800195a:	4bae      	ldr	r3, [pc, #696]	@ (8001c14 <telemetry+0x6c8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f006 fde6 	bl	8008530 <osMessageQueueGetCount>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	f000 8091 	beq.w	8001a8e <telemetry+0x542>
			// Get Radio Data
			osMessageQueueGet(radioQueueHandle, (void*)&radioDataReceived, NULL, osWaitForever);
 800196c:	4ba9      	ldr	r3, [pc, #676]	@ (8001c14 <telemetry+0x6c8>)
 800196e:	6818      	ldr	r0, [r3, #0]
 8001970:	f107 0118 	add.w	r1, r7, #24
 8001974:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001978:	2200      	movs	r2, #0
 800197a:	f006 fd7b 	bl	8008474 <osMessageQueueGet>
			// Send Radio Data
			snprintf(uartBuffer, sizeof(uartBuffer), "RW1: %.2f\r\n", (float)radioDataReceived.ch1);
 800197e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001982:	ee07 3a90 	vmov	s15, r3
 8001986:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800198a:	ee17 0a90 	vmov	r0, s15
 800198e:	f7fe fde3 	bl	8000558 <__aeabi_f2d>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 800199a:	e9cd 2300 	strd	r2, r3, [sp]
 800199e:	4a9e      	ldr	r2, [pc, #632]	@ (8001c18 <telemetry+0x6cc>)
 80019a0:	2180      	movs	r1, #128	@ 0x80
 80019a2:	f00a fadf 	bl	800bf64 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 80019a6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fc68 	bl	8000280 <strlen>
 80019b0:	4603      	mov	r3, r0
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 80019b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019bc:	4892      	ldr	r0, [pc, #584]	@ (8001c08 <telemetry+0x6bc>)
 80019be:	f005 ff8f 	bl	80078e0 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "RW2: %.2f\r\n", (float)radioDataReceived.ch2);
 80019c2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80019c6:	ee07 3a90 	vmov	s15, r3
 80019ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ce:	ee17 0a90 	vmov	r0, s15
 80019d2:	f7fe fdc1 	bl	8000558 <__aeabi_f2d>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 80019de:	e9cd 2300 	strd	r2, r3, [sp]
 80019e2:	4a8e      	ldr	r2, [pc, #568]	@ (8001c1c <telemetry+0x6d0>)
 80019e4:	2180      	movs	r1, #128	@ 0x80
 80019e6:	f00a fabd 	bl	800bf64 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 80019ea:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe fc46 	bl	8000280 <strlen>
 80019f4:	4603      	mov	r3, r0
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 80019fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a00:	4881      	ldr	r0, [pc, #516]	@ (8001c08 <telemetry+0x6bc>)
 8001a02:	f005 ff6d 	bl	80078e0 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "RW3: %.2f\r\n", (float)radioDataReceived.ch3);
 8001a06:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001a0a:	ee07 3a90 	vmov	s15, r3
 8001a0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a12:	ee17 0a90 	vmov	r0, s15
 8001a16:	f7fe fd9f 	bl	8000558 <__aeabi_f2d>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8001a22:	e9cd 2300 	strd	r2, r3, [sp]
 8001a26:	4a7e      	ldr	r2, [pc, #504]	@ (8001c20 <telemetry+0x6d4>)
 8001a28:	2180      	movs	r1, #128	@ 0x80
 8001a2a:	f00a fa9b 	bl	800bf64 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8001a2e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7fe fc24 	bl	8000280 <strlen>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8001a40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a44:	4870      	ldr	r0, [pc, #448]	@ (8001c08 <telemetry+0x6bc>)
 8001a46:	f005 ff4b 	bl	80078e0 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "RW4: %.2f\r\n", (float)radioDataReceived.ch4);
 8001a4a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001a4e:	ee07 3a90 	vmov	s15, r3
 8001a52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a56:	ee17 0a90 	vmov	r0, s15
 8001a5a:	f7fe fd7d 	bl	8000558 <__aeabi_f2d>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8001a66:	e9cd 2300 	strd	r2, r3, [sp]
 8001a6a:	4a6e      	ldr	r2, [pc, #440]	@ (8001c24 <telemetry+0x6d8>)
 8001a6c:	2180      	movs	r1, #128	@ 0x80
 8001a6e:	f00a fa79 	bl	800bf64 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8001a72:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7fe fc02 	bl	8000280 <strlen>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8001a84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a88:	485f      	ldr	r0, [pc, #380]	@ (8001c08 <telemetry+0x6bc>)
 8001a8a:	f005 ff29 	bl	80078e0 <HAL_UART_Transmit>

        }

        if (osMessageQueueGetCount(controlQueueHandle)>0){
 8001a8e:	4b66      	ldr	r3, [pc, #408]	@ (8001c28 <telemetry+0x6dc>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f006 fd4c 	bl	8008530 <osMessageQueueGetCount>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f43f ad59 	beq.w	8001552 <telemetry+0x6>

			// Get Radio Data
			osMessageQueueGet(controlQueueHandle, (void*)&controlDataReceived, NULL, osWaitForever);
 8001aa0:	4b61      	ldr	r3, [pc, #388]	@ (8001c28 <telemetry+0x6dc>)
 8001aa2:	6818      	ldr	r0, [r3, #0]
 8001aa4:	4639      	mov	r1, r7
 8001aa6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f006 fce2 	bl	8008474 <osMessageQueueGet>
			// Send Radio Data
			snprintf(uartBuffer, sizeof(uartBuffer), "CT1: %.2f\r\n", (float)controlDataReceived.ctrl1);
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7fe fd50 	bl	8000558 <__aeabi_f2d>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8001ac0:	e9cd 2300 	strd	r2, r3, [sp]
 8001ac4:	4a59      	ldr	r2, [pc, #356]	@ (8001c2c <telemetry+0x6e0>)
 8001ac6:	2180      	movs	r1, #128	@ 0x80
 8001ac8:	f00a fa4c 	bl	800bf64 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8001acc:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7fe fbd5 	bl	8000280 <strlen>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8001ade:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ae2:	4849      	ldr	r0, [pc, #292]	@ (8001c08 <telemetry+0x6bc>)
 8001ae4:	f005 fefc 	bl	80078e0 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "CT2: %.2f\r\n", (float)controlDataReceived.ctrl2);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7fe fd34 	bl	8000558 <__aeabi_f2d>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8001af8:	e9cd 2300 	strd	r2, r3, [sp]
 8001afc:	4a4c      	ldr	r2, [pc, #304]	@ (8001c30 <telemetry+0x6e4>)
 8001afe:	2180      	movs	r1, #128	@ 0x80
 8001b00:	f00a fa30 	bl	800bf64 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8001b04:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7fe fbb9 	bl	8000280 <strlen>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8001b16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b1a:	483b      	ldr	r0, [pc, #236]	@ (8001c08 <telemetry+0x6bc>)
 8001b1c:	f005 fee0 	bl	80078e0 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "CT3: %.2f\r\n", (float)controlDataReceived.ctrl3);
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe fd18 	bl	8000558 <__aeabi_f2d>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8001b30:	e9cd 2300 	strd	r2, r3, [sp]
 8001b34:	4a3f      	ldr	r2, [pc, #252]	@ (8001c34 <telemetry+0x6e8>)
 8001b36:	2180      	movs	r1, #128	@ 0x80
 8001b38:	f00a fa14 	bl	800bf64 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8001b3c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7fe fb9d 	bl	8000280 <strlen>
 8001b46:	4603      	mov	r3, r0
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8001b4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b52:	482d      	ldr	r0, [pc, #180]	@ (8001c08 <telemetry+0x6bc>)
 8001b54:	f005 fec4 	bl	80078e0 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "CT4: %.2f\r\n", (float)controlDataReceived.ctrl4);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7fe fcfc 	bl	8000558 <__aeabi_f2d>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8001b68:	e9cd 2300 	strd	r2, r3, [sp]
 8001b6c:	4a32      	ldr	r2, [pc, #200]	@ (8001c38 <telemetry+0x6ec>)
 8001b6e:	2180      	movs	r1, #128	@ 0x80
 8001b70:	f00a f9f8 	bl	800bf64 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8001b74:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7fe fb81 	bl	8000280 <strlen>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8001b86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b8a:	481f      	ldr	r0, [pc, #124]	@ (8001c08 <telemetry+0x6bc>)
 8001b8c:	f005 fea8 	bl	80078e0 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "CT5: %.2f\r\n", (float)controlDataReceived.ctrl5);
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7fe fce0 	bl	8000558 <__aeabi_f2d>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8001ba0:	e9cd 2300 	strd	r2, r3, [sp]
 8001ba4:	4a25      	ldr	r2, [pc, #148]	@ (8001c3c <telemetry+0x6f0>)
 8001ba6:	2180      	movs	r1, #128	@ 0x80
 8001ba8:	f00a f9dc 	bl	800bf64 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8001bac:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7fe fb65 	bl	8000280 <strlen>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bc2:	4811      	ldr	r0, [pc, #68]	@ (8001c08 <telemetry+0x6bc>)
 8001bc4:	f005 fe8c 	bl	80078e0 <HAL_UART_Transmit>
			snprintf(uartBuffer, sizeof(uartBuffer), "CT6: %.2f\r\n", (float)controlDataReceived.ctrl6);
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7fe fcc4 	bl	8000558 <__aeabi_f2d>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8001bd8:	e9cd 2300 	strd	r2, r3, [sp]
 8001bdc:	4a18      	ldr	r2, [pc, #96]	@ (8001c40 <telemetry+0x6f4>)
 8001bde:	2180      	movs	r1, #128	@ 0x80
 8001be0:	f00a f9c0 	bl	800bf64 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), HAL_MAX_DELAY);
 8001be4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7fe fb49 	bl	8000280 <strlen>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8001bf6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bfa:	4803      	ldr	r0, [pc, #12]	@ (8001c08 <telemetry+0x6bc>)
 8001bfc:	f005 fe70 	bl	80078e0 <HAL_UART_Transmit>
        if (osMessageQueueGetCount(imuQueueHandle) > 0) {
 8001c00:	e4a7      	b.n	8001552 <telemetry+0x6>
 8001c02:	bf00      	nop
 8001c04:	0800e54c 	.word	0x0800e54c
 8001c08:	200004ac 	.word	0x200004ac
 8001c0c:	0800e558 	.word	0x0800e558
 8001c10:	0800e564 	.word	0x0800e564
 8001c14:	20000310 	.word	0x20000310
 8001c18:	0800e570 	.word	0x0800e570
 8001c1c:	0800e57c 	.word	0x0800e57c
 8001c20:	0800e588 	.word	0x0800e588
 8001c24:	0800e594 	.word	0x0800e594
 8001c28:	2000031c 	.word	0x2000031c
 8001c2c:	0800e5a0 	.word	0x0800e5a0
 8001c30:	0800e5ac 	.word	0x0800e5ac
 8001c34:	0800e5b8 	.word	0x0800e5b8
 8001c38:	0800e5c4 	.word	0x0800e5c4
 8001c3c:	0800e5d0 	.word	0x0800e5d0
 8001c40:	0800e5dc 	.word	0x0800e5dc

08001c44 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c4a:	463b      	mov	r3, r7
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001c56:	4b36      	ldr	r3, [pc, #216]	@ (8001d30 <MX_ADC1_Init+0xec>)
 8001c58:	4a36      	ldr	r2, [pc, #216]	@ (8001d34 <MX_ADC1_Init+0xf0>)
 8001c5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c5c:	4b34      	ldr	r3, [pc, #208]	@ (8001d30 <MX_ADC1_Init+0xec>)
 8001c5e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001c62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c64:	4b32      	ldr	r3, [pc, #200]	@ (8001d30 <MX_ADC1_Init+0xec>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001c6a:	4b31      	ldr	r3, [pc, #196]	@ (8001d30 <MX_ADC1_Init+0xec>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c70:	4b2f      	ldr	r3, [pc, #188]	@ (8001d30 <MX_ADC1_Init+0xec>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c76:	4b2e      	ldr	r3, [pc, #184]	@ (8001d30 <MX_ADC1_Init+0xec>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c7e:	4b2c      	ldr	r3, [pc, #176]	@ (8001d30 <MX_ADC1_Init+0xec>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c84:	4b2a      	ldr	r3, [pc, #168]	@ (8001d30 <MX_ADC1_Init+0xec>)
 8001c86:	4a2c      	ldr	r2, [pc, #176]	@ (8001d38 <MX_ADC1_Init+0xf4>)
 8001c88:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c8a:	4b29      	ldr	r3, [pc, #164]	@ (8001d30 <MX_ADC1_Init+0xec>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001c90:	4b27      	ldr	r3, [pc, #156]	@ (8001d30 <MX_ADC1_Init+0xec>)
 8001c92:	2204      	movs	r2, #4
 8001c94:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001c96:	4b26      	ldr	r3, [pc, #152]	@ (8001d30 <MX_ADC1_Init+0xec>)
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001c9e:	4b24      	ldr	r3, [pc, #144]	@ (8001d30 <MX_ADC1_Init+0xec>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ca4:	4822      	ldr	r0, [pc, #136]	@ (8001d30 <MX_ADC1_Init+0xec>)
 8001ca6:	f001 fc4f 	bl	8003548 <HAL_ADC_Init>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001cb0:	f000 fdc8 	bl	8002844 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cc0:	463b      	mov	r3, r7
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	481a      	ldr	r0, [pc, #104]	@ (8001d30 <MX_ADC1_Init+0xec>)
 8001cc6:	f001 fd91 	bl	80037ec <HAL_ADC_ConfigChannel>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001cd0:	f000 fdb8 	bl	8002844 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cdc:	463b      	mov	r3, r7
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4813      	ldr	r0, [pc, #76]	@ (8001d30 <MX_ADC1_Init+0xec>)
 8001ce2:	f001 fd83 	bl	80037ec <HAL_ADC_ConfigChannel>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001cec:	f000 fdaa 	bl	8002844 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cf8:	463b      	mov	r3, r7
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	480c      	ldr	r0, [pc, #48]	@ (8001d30 <MX_ADC1_Init+0xec>)
 8001cfe:	f001 fd75 	bl	80037ec <HAL_ADC_ConfigChannel>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001d08:	f000 fd9c 	bl	8002844 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001d0c:	2304      	movs	r3, #4
 8001d0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001d10:	2304      	movs	r3, #4
 8001d12:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d14:	463b      	mov	r3, r7
 8001d16:	4619      	mov	r1, r3
 8001d18:	4805      	ldr	r0, [pc, #20]	@ (8001d30 <MX_ADC1_Init+0xec>)
 8001d1a:	f001 fd67 	bl	80037ec <HAL_ADC_ConfigChannel>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001d24:	f000 fd8e 	bl	8002844 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d28:	bf00      	nop
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20000240 	.word	0x20000240
 8001d34:	40012000 	.word	0x40012000
 8001d38:	0f000001 	.word	0x0f000001

08001d3c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08a      	sub	sp, #40	@ 0x28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a2f      	ldr	r2, [pc, #188]	@ (8001e18 <HAL_ADC_MspInit+0xdc>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d157      	bne.n	8001e0e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	4b2e      	ldr	r3, [pc, #184]	@ (8001e1c <HAL_ADC_MspInit+0xe0>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d66:	4a2d      	ldr	r2, [pc, #180]	@ (8001e1c <HAL_ADC_MspInit+0xe0>)
 8001d68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d6e:	4b2b      	ldr	r3, [pc, #172]	@ (8001e1c <HAL_ADC_MspInit+0xe0>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	4b27      	ldr	r3, [pc, #156]	@ (8001e1c <HAL_ADC_MspInit+0xe0>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d82:	4a26      	ldr	r2, [pc, #152]	@ (8001e1c <HAL_ADC_MspInit+0xe0>)
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d8a:	4b24      	ldr	r3, [pc, #144]	@ (8001e1c <HAL_ADC_MspInit+0xe0>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ANALOG1_Pin|ANALOG2_Pin|ANALOG3_Pin|ANALOG4_Pin;
 8001d96:	231e      	movs	r3, #30
 8001d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da2:	f107 0314 	add.w	r3, r7, #20
 8001da6:	4619      	mov	r1, r3
 8001da8:	481d      	ldr	r0, [pc, #116]	@ (8001e20 <HAL_ADC_MspInit+0xe4>)
 8001daa:	f002 fc11 	bl	80045d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001dae:	4b1d      	ldr	r3, [pc, #116]	@ (8001e24 <HAL_ADC_MspInit+0xe8>)
 8001db0:	4a1d      	ldr	r2, [pc, #116]	@ (8001e28 <HAL_ADC_MspInit+0xec>)
 8001db2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001db4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e24 <HAL_ADC_MspInit+0xe8>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dba:	4b1a      	ldr	r3, [pc, #104]	@ (8001e24 <HAL_ADC_MspInit+0xe8>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dc0:	4b18      	ldr	r3, [pc, #96]	@ (8001e24 <HAL_ADC_MspInit+0xe8>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001dc6:	4b17      	ldr	r3, [pc, #92]	@ (8001e24 <HAL_ADC_MspInit+0xe8>)
 8001dc8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dcc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001dce:	4b15      	ldr	r3, [pc, #84]	@ (8001e24 <HAL_ADC_MspInit+0xe8>)
 8001dd0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001dd4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001dd6:	4b13      	ldr	r3, [pc, #76]	@ (8001e24 <HAL_ADC_MspInit+0xe8>)
 8001dd8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ddc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001dde:	4b11      	ldr	r3, [pc, #68]	@ (8001e24 <HAL_ADC_MspInit+0xe8>)
 8001de0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001de4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001de6:	4b0f      	ldr	r3, [pc, #60]	@ (8001e24 <HAL_ADC_MspInit+0xe8>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dec:	4b0d      	ldr	r3, [pc, #52]	@ (8001e24 <HAL_ADC_MspInit+0xe8>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001df2:	480c      	ldr	r0, [pc, #48]	@ (8001e24 <HAL_ADC_MspInit+0xe8>)
 8001df4:	f002 f87c 	bl	8003ef0 <HAL_DMA_Init>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001dfe:	f000 fd21 	bl	8002844 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a07      	ldr	r2, [pc, #28]	@ (8001e24 <HAL_ADC_MspInit+0xe8>)
 8001e06:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e08:	4a06      	ldr	r2, [pc, #24]	@ (8001e24 <HAL_ADC_MspInit+0xe8>)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001e0e:	bf00      	nop
 8001e10:	3728      	adds	r7, #40	@ 0x28
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40012000 	.word	0x40012000
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	40020000 	.word	0x40020000
 8001e24:	20000288 	.word	0x20000288
 8001e28:	40026410 	.word	0x40026410

08001e2c <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	71fb      	strb	r3, [r7, #7]
 8001e36:	79fb      	ldrb	r3, [r7, #7]
 8001e38:	4619      	mov	r1, r3
 8001e3a:	2007      	movs	r0, #7
 8001e3c:	f7ff f98c 	bl	8001158 <bno055_writeData>
 8001e40:	bf00      	nop
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8001e48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e4c:	b09e      	sub	sp, #120	@ 0x78
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	4603      	mov	r3, r0
 8001e52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  bno055_setPage(0);
 8001e56:	2000      	movs	r0, #0
 8001e58:	f7ff ffe8 	bl	8001e2c <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8001e5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e60:	2b20      	cmp	r3, #32
 8001e62:	d108      	bne.n	8001e76 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8001e64:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001e68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e6c:	2208      	movs	r2, #8
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff fa5e 	bl	8001330 <bno055_readData>
 8001e74:	e007      	b.n	8001e86 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8001e76:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001e7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e7e:	2206      	movs	r2, #6
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff fa55 	bl	8001330 <bno055_readData>

  double scale = 1;
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	4b8b      	ldr	r3, [pc, #556]	@ (80020b8 <bno055_getVector+0x270>)
 8001e8c:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8001e90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e94:	2b0e      	cmp	r3, #14
 8001e96:	d109      	bne.n	8001eac <bno055_getVector+0x64>
    scale = magScale;
 8001e98:	4b88      	ldr	r3, [pc, #544]	@ (80020bc <bno055_getVector+0x274>)
 8001e9a:	881b      	ldrh	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7fe fb39 	bl	8000514 <__aeabi_ui2d>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8001eaa:	e03e      	b.n	8001f2a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8001eac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001eb0:	2b08      	cmp	r3, #8
 8001eb2:	d007      	beq.n	8001ec4 <bno055_getVector+0x7c>
 8001eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001eb8:	2b28      	cmp	r3, #40	@ 0x28
 8001eba:	d003      	beq.n	8001ec4 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8001ebc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ec0:	2b2e      	cmp	r3, #46	@ 0x2e
 8001ec2:	d109      	bne.n	8001ed8 <bno055_getVector+0x90>
    scale = accelScale;
 8001ec4:	4b7e      	ldr	r3, [pc, #504]	@ (80020c0 <bno055_getVector+0x278>)
 8001ec6:	881b      	ldrh	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7fe fb23 	bl	8000514 <__aeabi_ui2d>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8001ed6:	e028      	b.n	8001f2a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8001ed8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001edc:	2b14      	cmp	r3, #20
 8001ede:	d109      	bne.n	8001ef4 <bno055_getVector+0xac>
    scale = angularRateScale;
 8001ee0:	4b78      	ldr	r3, [pc, #480]	@ (80020c4 <bno055_getVector+0x27c>)
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7fe fb15 	bl	8000514 <__aeabi_ui2d>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8001ef2:	e01a      	b.n	8001f2a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8001ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ef8:	2b1a      	cmp	r3, #26
 8001efa:	d109      	bne.n	8001f10 <bno055_getVector+0xc8>
    scale = eulerScale;
 8001efc:	4b72      	ldr	r3, [pc, #456]	@ (80020c8 <bno055_getVector+0x280>)
 8001efe:	881b      	ldrh	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe fb07 	bl	8000514 <__aeabi_ui2d>
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8001f0e:	e00c      	b.n	8001f2a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8001f10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f14:	2b20      	cmp	r3, #32
 8001f16:	d108      	bne.n	8001f2a <bno055_getVector+0xe2>
    scale = quaScale;
 8001f18:	4b6c      	ldr	r3, [pc, #432]	@ (80020cc <bno055_getVector+0x284>)
 8001f1a:	881b      	ldrh	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7fe faf9 	bl	8000514 <__aeabi_ui2d>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8001f2a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f2e:	2220      	movs	r2, #32
 8001f30:	2100      	movs	r1, #0
 8001f32:	4618      	mov	r0, r3
 8001f34:	f00a f922 	bl	800c17c <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8001f38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f3c:	2b20      	cmp	r3, #32
 8001f3e:	d150      	bne.n	8001fe2 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001f40:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001f44:	021b      	lsls	r3, r3, #8
 8001f46:	b21a      	sxth	r2, r3
 8001f48:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001f4c:	b21b      	sxth	r3, r3
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	b21b      	sxth	r3, r3
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7fe faee 	bl	8000534 <__aeabi_i2d>
 8001f58:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001f5c:	f7fe fc7e 	bl	800085c <__aeabi_ddiv>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001f68:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001f6c:	021b      	lsls	r3, r3, #8
 8001f6e:	b21a      	sxth	r2, r3
 8001f70:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001f74:	b21b      	sxth	r3, r3
 8001f76:	4313      	orrs	r3, r2
 8001f78:	b21b      	sxth	r3, r3
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7fe fada 	bl	8000534 <__aeabi_i2d>
 8001f80:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001f84:	f7fe fc6a 	bl	800085c <__aeabi_ddiv>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001f90:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001f94:	021b      	lsls	r3, r3, #8
 8001f96:	b21a      	sxth	r2, r3
 8001f98:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001f9c:	b21b      	sxth	r3, r3
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	b21b      	sxth	r3, r3
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe fac6 	bl	8000534 <__aeabi_i2d>
 8001fa8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001fac:	f7fe fc56 	bl	800085c <__aeabi_ddiv>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8001fb8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001fbc:	021b      	lsls	r3, r3, #8
 8001fbe:	b21a      	sxth	r2, r3
 8001fc0:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001fc4:	b21b      	sxth	r3, r3
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	b21b      	sxth	r3, r3
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe fab2 	bl	8000534 <__aeabi_i2d>
 8001fd0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001fd4:	f7fe fc42 	bl	800085c <__aeabi_ddiv>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8001fe0:	e03b      	b.n	800205a <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001fe2:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001fe6:	021b      	lsls	r3, r3, #8
 8001fe8:	b21a      	sxth	r2, r3
 8001fea:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001fee:	b21b      	sxth	r3, r3
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	b21b      	sxth	r3, r3
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe fa9d 	bl	8000534 <__aeabi_i2d>
 8001ffa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001ffe:	f7fe fc2d 	bl	800085c <__aeabi_ddiv>
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
 8002006:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800200a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800200e:	021b      	lsls	r3, r3, #8
 8002010:	b21a      	sxth	r2, r3
 8002012:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8002016:	b21b      	sxth	r3, r3
 8002018:	4313      	orrs	r3, r2
 800201a:	b21b      	sxth	r3, r3
 800201c:	4618      	mov	r0, r3
 800201e:	f7fe fa89 	bl	8000534 <__aeabi_i2d>
 8002022:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002026:	f7fe fc19 	bl	800085c <__aeabi_ddiv>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8002032:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002036:	021b      	lsls	r3, r3, #8
 8002038:	b21a      	sxth	r2, r3
 800203a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800203e:	b21b      	sxth	r3, r3
 8002040:	4313      	orrs	r3, r2
 8002042:	b21b      	sxth	r3, r3
 8002044:	4618      	mov	r0, r3
 8002046:	f7fe fa75 	bl	8000534 <__aeabi_i2d>
 800204a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800204e:	f7fe fc05 	bl	800085c <__aeabi_ddiv>
 8002052:	4602      	mov	r2, r0
 8002054:	460b      	mov	r3, r1
 8002056:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  }

  return xyz;
 800205a:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 800205e:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 8002062:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002064:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002066:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800206a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800206e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002072:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8002076:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800207a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800207e:	ec49 8b14 	vmov	d4, r8, r9
 8002082:	ec45 4b15 	vmov	d5, r4, r5
 8002086:	ec41 0b16 	vmov	d6, r0, r1
 800208a:	ec43 2b17 	vmov	d7, r2, r3
}
 800208e:	eeb0 0a44 	vmov.f32	s0, s8
 8002092:	eef0 0a64 	vmov.f32	s1, s9
 8002096:	eeb0 1a45 	vmov.f32	s2, s10
 800209a:	eef0 1a65 	vmov.f32	s3, s11
 800209e:	eeb0 2a46 	vmov.f32	s4, s12
 80020a2:	eef0 2a66 	vmov.f32	s5, s13
 80020a6:	eeb0 3a47 	vmov.f32	s6, s14
 80020aa:	eef0 3a67 	vmov.f32	s7, s15
 80020ae:	3778      	adds	r7, #120	@ 0x78
 80020b0:	46bd      	mov	sp, r7
 80020b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80020b6:	bf00      	nop
 80020b8:	3ff00000 	.word	0x3ff00000
 80020bc:	20000018 	.word	0x20000018
 80020c0:	20000012 	.word	0x20000012
 80020c4:	20000014 	.word	0x20000014
 80020c8:	20000016 	.word	0x20000016
 80020cc:	2000001a 	.word	0x2000001a

080020d0 <bno055_getVectorAccelerometer>:

bno055_vector_t bno055_getVectorAccelerometer() {
 80020d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80020d4:	b090      	sub	sp, #64	@ 0x40
 80020d6:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
 80020d8:	2008      	movs	r0, #8
 80020da:	f7ff feb5 	bl	8001e48 <bno055_getVector>
 80020de:	eeb0 4a40 	vmov.f32	s8, s0
 80020e2:	eef0 4a60 	vmov.f32	s9, s1
 80020e6:	eeb0 5a41 	vmov.f32	s10, s2
 80020ea:	eef0 5a61 	vmov.f32	s11, s3
 80020ee:	eeb0 6a42 	vmov.f32	s12, s4
 80020f2:	eef0 6a62 	vmov.f32	s13, s5
 80020f6:	eeb0 7a43 	vmov.f32	s14, s6
 80020fa:	eef0 7a63 	vmov.f32	s15, s7
 80020fe:	ed87 4b08 	vstr	d4, [r7, #32]
 8002102:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8002106:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 800210a:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 800210e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002112:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8002116:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800211a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800211e:	ec49 8b14 	vmov	d4, r8, r9
 8002122:	ec45 4b15 	vmov	d5, r4, r5
 8002126:	ec41 0b16 	vmov	d6, r0, r1
 800212a:	ec43 2b17 	vmov	d7, r2, r3
}
 800212e:	eeb0 0a44 	vmov.f32	s0, s8
 8002132:	eef0 0a64 	vmov.f32	s1, s9
 8002136:	eeb0 1a45 	vmov.f32	s2, s10
 800213a:	eef0 1a65 	vmov.f32	s3, s11
 800213e:	eeb0 2a46 	vmov.f32	s4, s12
 8002142:	eef0 2a66 	vmov.f32	s5, s13
 8002146:	eeb0 3a47 	vmov.f32	s6, s14
 800214a:	eef0 3a67 	vmov.f32	s7, s15
 800214e:	3740      	adds	r7, #64	@ 0x40
 8002150:	46bd      	mov	sp, r7
 8002152:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002156 <bno055_getVectorMagnetometer>:
bno055_vector_t bno055_getVectorMagnetometer() {
 8002156:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800215a:	b090      	sub	sp, #64	@ 0x40
 800215c:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
 800215e:	200e      	movs	r0, #14
 8002160:	f7ff fe72 	bl	8001e48 <bno055_getVector>
 8002164:	eeb0 4a40 	vmov.f32	s8, s0
 8002168:	eef0 4a60 	vmov.f32	s9, s1
 800216c:	eeb0 5a41 	vmov.f32	s10, s2
 8002170:	eef0 5a61 	vmov.f32	s11, s3
 8002174:	eeb0 6a42 	vmov.f32	s12, s4
 8002178:	eef0 6a62 	vmov.f32	s13, s5
 800217c:	eeb0 7a43 	vmov.f32	s14, s6
 8002180:	eef0 7a63 	vmov.f32	s15, s7
 8002184:	ed87 4b08 	vstr	d4, [r7, #32]
 8002188:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 800218c:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8002190:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8002194:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002198:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 800219c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80021a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80021a4:	ec49 8b14 	vmov	d4, r8, r9
 80021a8:	ec45 4b15 	vmov	d5, r4, r5
 80021ac:	ec41 0b16 	vmov	d6, r0, r1
 80021b0:	ec43 2b17 	vmov	d7, r2, r3
}
 80021b4:	eeb0 0a44 	vmov.f32	s0, s8
 80021b8:	eef0 0a64 	vmov.f32	s1, s9
 80021bc:	eeb0 1a45 	vmov.f32	s2, s10
 80021c0:	eef0 1a65 	vmov.f32	s3, s11
 80021c4:	eeb0 2a46 	vmov.f32	s4, s12
 80021c8:	eef0 2a66 	vmov.f32	s5, s13
 80021cc:	eeb0 3a47 	vmov.f32	s6, s14
 80021d0:	eef0 3a67 	vmov.f32	s7, s15
 80021d4:	3740      	adds	r7, #64	@ 0x40
 80021d6:	46bd      	mov	sp, r7
 80021d8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080021dc <bno055_getVectorGyroscope>:
bno055_vector_t bno055_getVectorGyroscope() {
 80021dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80021e0:	b090      	sub	sp, #64	@ 0x40
 80021e2:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
 80021e4:	2014      	movs	r0, #20
 80021e6:	f7ff fe2f 	bl	8001e48 <bno055_getVector>
 80021ea:	eeb0 4a40 	vmov.f32	s8, s0
 80021ee:	eef0 4a60 	vmov.f32	s9, s1
 80021f2:	eeb0 5a41 	vmov.f32	s10, s2
 80021f6:	eef0 5a61 	vmov.f32	s11, s3
 80021fa:	eeb0 6a42 	vmov.f32	s12, s4
 80021fe:	eef0 6a62 	vmov.f32	s13, s5
 8002202:	eeb0 7a43 	vmov.f32	s14, s6
 8002206:	eef0 7a63 	vmov.f32	s15, s7
 800220a:	ed87 4b08 	vstr	d4, [r7, #32]
 800220e:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8002212:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8002216:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 800221a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800221e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8002222:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002226:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800222a:	ec49 8b14 	vmov	d4, r8, r9
 800222e:	ec45 4b15 	vmov	d5, r4, r5
 8002232:	ec41 0b16 	vmov	d6, r0, r1
 8002236:	ec43 2b17 	vmov	d7, r2, r3
}
 800223a:	eeb0 0a44 	vmov.f32	s0, s8
 800223e:	eef0 0a64 	vmov.f32	s1, s9
 8002242:	eeb0 1a45 	vmov.f32	s2, s10
 8002246:	eef0 1a65 	vmov.f32	s3, s11
 800224a:	eeb0 2a46 	vmov.f32	s4, s12
 800224e:	eef0 2a66 	vmov.f32	s5, s13
 8002252:	eeb0 3a47 	vmov.f32	s6, s14
 8002256:	eef0 3a67 	vmov.f32	s7, s15
 800225a:	3740      	adds	r7, #64	@ 0x40
 800225c:	46bd      	mov	sp, r7
 800225e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002262 <bno055_getVectorEuler>:
bno055_vector_t bno055_getVectorEuler() {
 8002262:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002266:	b090      	sub	sp, #64	@ 0x40
 8002268:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 800226a:	201a      	movs	r0, #26
 800226c:	f7ff fdec 	bl	8001e48 <bno055_getVector>
 8002270:	eeb0 4a40 	vmov.f32	s8, s0
 8002274:	eef0 4a60 	vmov.f32	s9, s1
 8002278:	eeb0 5a41 	vmov.f32	s10, s2
 800227c:	eef0 5a61 	vmov.f32	s11, s3
 8002280:	eeb0 6a42 	vmov.f32	s12, s4
 8002284:	eef0 6a62 	vmov.f32	s13, s5
 8002288:	eeb0 7a43 	vmov.f32	s14, s6
 800228c:	eef0 7a63 	vmov.f32	s15, s7
 8002290:	ed87 4b08 	vstr	d4, [r7, #32]
 8002294:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8002298:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 800229c:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 80022a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80022a4:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80022a8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80022ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80022b0:	ec49 8b14 	vmov	d4, r8, r9
 80022b4:	ec45 4b15 	vmov	d5, r4, r5
 80022b8:	ec41 0b16 	vmov	d6, r0, r1
 80022bc:	ec43 2b17 	vmov	d7, r2, r3
}
 80022c0:	eeb0 0a44 	vmov.f32	s0, s8
 80022c4:	eef0 0a64 	vmov.f32	s1, s9
 80022c8:	eeb0 1a45 	vmov.f32	s2, s10
 80022cc:	eef0 1a65 	vmov.f32	s3, s11
 80022d0:	eeb0 2a46 	vmov.f32	s4, s12
 80022d4:	eef0 2a66 	vmov.f32	s5, s13
 80022d8:	eeb0 3a47 	vmov.f32	s6, s14
 80022dc:	eef0 3a67 	vmov.f32	s7, s15
 80022e0:	3740      	adds	r7, #64	@ 0x40
 80022e2:	46bd      	mov	sp, r7
 80022e4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080022e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	607b      	str	r3, [r7, #4]
 80022f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002324 <MX_DMA_Init+0x3c>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f6:	4a0b      	ldr	r2, [pc, #44]	@ (8002324 <MX_DMA_Init+0x3c>)
 80022f8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80022fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022fe:	4b09      	ldr	r3, [pc, #36]	@ (8002324 <MX_DMA_Init+0x3c>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002302:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002306:	607b      	str	r3, [r7, #4]
 8002308:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800230a:	2200      	movs	r2, #0
 800230c:	2105      	movs	r1, #5
 800230e:	2038      	movs	r0, #56	@ 0x38
 8002310:	f001 fdc4 	bl	8003e9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002314:	2038      	movs	r0, #56	@ 0x38
 8002316:	f001 fddd 	bl	8003ed4 <HAL_NVIC_EnableIRQ>

}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40023800 	.word	0x40023800

08002328 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim11);
 800232c:	4802      	ldr	r0, [pc, #8]	@ (8002338 <configureTimerForRunTimeStats+0x10>)
 800232e:	f003 ffc1 	bl	80062b4 <HAL_TIM_Base_Start_IT>
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	20000464 	.word	0x20000464

0800233c <getRunTimeCounterValue>:

extern volatile unsigned long ulHighFrequencyTimerTicks;
__weak unsigned long getRunTimeCounterValue(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 8002340:	4b03      	ldr	r3, [pc, #12]	@ (8002350 <getRunTimeCounterValue+0x14>)
 8002342:	681b      	ldr	r3, [r3, #0]
}
 8002344:	4618      	mov	r0, r3
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	200003bc 	.word	0x200003bc

08002354 <PreSleepProcessing>:
/* USER CODE END 1 */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

	// Start all 4 input captures
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8002380:	2100      	movs	r1, #0
 8002382:	483a      	ldr	r0, [pc, #232]	@ (800246c <MX_FREERTOS_Init+0xf0>)
 8002384:	f004 f952 	bl	800662c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8002388:	2104      	movs	r1, #4
 800238a:	4838      	ldr	r0, [pc, #224]	@ (800246c <MX_FREERTOS_Init+0xf0>)
 800238c:	f004 f94e 	bl	800662c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8002390:	2108      	movs	r1, #8
 8002392:	4836      	ldr	r0, [pc, #216]	@ (800246c <MX_FREERTOS_Init+0xf0>)
 8002394:	f004 f94a 	bl	800662c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 8002398:	210c      	movs	r1, #12
 800239a:	4834      	ldr	r0, [pc, #208]	@ (800246c <MX_FREERTOS_Init+0xf0>)
 800239c:	f004 f946 	bl	800662c <HAL_TIM_IC_Start_IT>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80023a0:	2100      	movs	r1, #0
 80023a2:	4833      	ldr	r0, [pc, #204]	@ (8002470 <MX_FREERTOS_Init+0xf4>)
 80023a4:	f004 f838 	bl	8006418 <HAL_TIM_PWM_Start>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of radioQueue */
  radioQueueHandle = osMessageQueueNew (1, sizeof(RadioData_t), &radioQueue_attributes);
 80023a8:	4a32      	ldr	r2, [pc, #200]	@ (8002474 <MX_FREERTOS_Init+0xf8>)
 80023aa:	2108      	movs	r1, #8
 80023ac:	2001      	movs	r0, #1
 80023ae:	f005 ff8e 	bl	80082ce <osMessageQueueNew>
 80023b2:	4603      	mov	r3, r0
 80023b4:	4a30      	ldr	r2, [pc, #192]	@ (8002478 <MX_FREERTOS_Init+0xfc>)
 80023b6:	6013      	str	r3, [r2, #0]

  /* creation of adcQueue */
  adcQueueHandle = osMessageQueueNew (1, sizeof(AdcData_t), &adcQueue_attributes);
 80023b8:	4a30      	ldr	r2, [pc, #192]	@ (800247c <MX_FREERTOS_Init+0x100>)
 80023ba:	2110      	movs	r1, #16
 80023bc:	2001      	movs	r0, #1
 80023be:	f005 ff86 	bl	80082ce <osMessageQueueNew>
 80023c2:	4603      	mov	r3, r0
 80023c4:	4a2e      	ldr	r2, [pc, #184]	@ (8002480 <MX_FREERTOS_Init+0x104>)
 80023c6:	6013      	str	r3, [r2, #0]

  /* creation of imuQueue */
  imuQueueHandle = osMessageQueueNew (1, sizeof(ImuData_t), &imuQueue_attributes);
 80023c8:	4a2e      	ldr	r2, [pc, #184]	@ (8002484 <MX_FREERTOS_Init+0x108>)
 80023ca:	2130      	movs	r1, #48	@ 0x30
 80023cc:	2001      	movs	r0, #1
 80023ce:	f005 ff7e 	bl	80082ce <osMessageQueueNew>
 80023d2:	4603      	mov	r3, r0
 80023d4:	4a2c      	ldr	r2, [pc, #176]	@ (8002488 <MX_FREERTOS_Init+0x10c>)
 80023d6:	6013      	str	r3, [r2, #0]

  /* creation of telemetryQueue */
  controlQueueHandle = osMessageQueueNew (1, sizeof(ControlData_t), &controlQueue_attributes);
 80023d8:	4a2c      	ldr	r2, [pc, #176]	@ (800248c <MX_FREERTOS_Init+0x110>)
 80023da:	2118      	movs	r1, #24
 80023dc:	2001      	movs	r0, #1
 80023de:	f005 ff76 	bl	80082ce <osMessageQueueNew>
 80023e2:	4603      	mov	r3, r0
 80023e4:	4a2a      	ldr	r2, [pc, #168]	@ (8002490 <MX_FREERTOS_Init+0x114>)
 80023e6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  // Allowing the kernel-aware debugger to get to know our queues
  vQueueAddToRegistry( radioQueueHandle, "radioQueue" );
 80023e8:	4b23      	ldr	r3, [pc, #140]	@ (8002478 <MX_FREERTOS_Init+0xfc>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4929      	ldr	r1, [pc, #164]	@ (8002494 <MX_FREERTOS_Init+0x118>)
 80023ee:	4618      	mov	r0, r3
 80023f0:	f006 ff3e 	bl	8009270 <vQueueAddToRegistry>
  vQueueAddToRegistry( adcQueueHandle, "adcQueue" );
 80023f4:	4b22      	ldr	r3, [pc, #136]	@ (8002480 <MX_FREERTOS_Init+0x104>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4927      	ldr	r1, [pc, #156]	@ (8002498 <MX_FREERTOS_Init+0x11c>)
 80023fa:	4618      	mov	r0, r3
 80023fc:	f006 ff38 	bl	8009270 <vQueueAddToRegistry>
  vQueueAddToRegistry( imuQueueHandle, "imuQueue" );
 8002400:	4b21      	ldr	r3, [pc, #132]	@ (8002488 <MX_FREERTOS_Init+0x10c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4925      	ldr	r1, [pc, #148]	@ (800249c <MX_FREERTOS_Init+0x120>)
 8002406:	4618      	mov	r0, r3
 8002408:	f006 ff32 	bl	8009270 <vQueueAddToRegistry>
  vQueueAddToRegistry( controlQueueHandle, "controlQueue" );
 800240c:	4b20      	ldr	r3, [pc, #128]	@ (8002490 <MX_FREERTOS_Init+0x114>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4923      	ldr	r1, [pc, #140]	@ (80024a0 <MX_FREERTOS_Init+0x124>)
 8002412:	4618      	mov	r0, r3
 8002414:	f006 ff2c 	bl	8009270 <vQueueAddToRegistry>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002418:	4a22      	ldr	r2, [pc, #136]	@ (80024a4 <MX_FREERTOS_Init+0x128>)
 800241a:	2100      	movs	r1, #0
 800241c:	4822      	ldr	r0, [pc, #136]	@ (80024a8 <MX_FREERTOS_Init+0x12c>)
 800241e:	f005 fea9 	bl	8008174 <osThreadNew>
 8002422:	4603      	mov	r3, r0
 8002424:	4a21      	ldr	r2, [pc, #132]	@ (80024ac <MX_FREERTOS_Init+0x130>)
 8002426:	6013      	str	r3, [r2, #0]

  /* creation of control_task */
  control_taskHandle = osThreadNew(_control_task, NULL, &control_task_attributes);
 8002428:	4a21      	ldr	r2, [pc, #132]	@ (80024b0 <MX_FREERTOS_Init+0x134>)
 800242a:	2100      	movs	r1, #0
 800242c:	4821      	ldr	r0, [pc, #132]	@ (80024b4 <MX_FREERTOS_Init+0x138>)
 800242e:	f005 fea1 	bl	8008174 <osThreadNew>
 8002432:	4603      	mov	r3, r0
 8002434:	4a20      	ldr	r2, [pc, #128]	@ (80024b8 <MX_FREERTOS_Init+0x13c>)
 8002436:	6013      	str	r3, [r2, #0]

  /* creation of imu_read_task */
  imu_read_taskHandle = osThreadNew(_imu_read_task, NULL, &imu_read_task_attributes);
 8002438:	4a20      	ldr	r2, [pc, #128]	@ (80024bc <MX_FREERTOS_Init+0x140>)
 800243a:	2100      	movs	r1, #0
 800243c:	4820      	ldr	r0, [pc, #128]	@ (80024c0 <MX_FREERTOS_Init+0x144>)
 800243e:	f005 fe99 	bl	8008174 <osThreadNew>
 8002442:	4603      	mov	r3, r0
 8002444:	4a1f      	ldr	r2, [pc, #124]	@ (80024c4 <MX_FREERTOS_Init+0x148>)
 8002446:	6013      	str	r3, [r2, #0]

  /* creation of adc_read_task */
  adc_read_taskHandle = osThreadNew(_adc_read_task, NULL, &adc_read_task_attributes);
 8002448:	4a1f      	ldr	r2, [pc, #124]	@ (80024c8 <MX_FREERTOS_Init+0x14c>)
 800244a:	2100      	movs	r1, #0
 800244c:	481f      	ldr	r0, [pc, #124]	@ (80024cc <MX_FREERTOS_Init+0x150>)
 800244e:	f005 fe91 	bl	8008174 <osThreadNew>
 8002452:	4603      	mov	r3, r0
 8002454:	4a1e      	ldr	r2, [pc, #120]	@ (80024d0 <MX_FREERTOS_Init+0x154>)
 8002456:	6013      	str	r3, [r2, #0]

  /* creation of telemetry_task */
  telemetry_taskHandle = osThreadNew(_telemetry_task, NULL, &telemetry_task_attributes);
 8002458:	4a1e      	ldr	r2, [pc, #120]	@ (80024d4 <MX_FREERTOS_Init+0x158>)
 800245a:	2100      	movs	r1, #0
 800245c:	481e      	ldr	r0, [pc, #120]	@ (80024d8 <MX_FREERTOS_Init+0x15c>)
 800245e:	f005 fe89 	bl	8008174 <osThreadNew>
 8002462:	4603      	mov	r3, r0
 8002464:	4a1d      	ldr	r2, [pc, #116]	@ (80024dc <MX_FREERTOS_Init+0x160>)
 8002466:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002468:	bf00      	nop
 800246a:	bd80      	pop	{r7, pc}
 800246c:	200003d4 	.word	0x200003d4
 8002470:	2000041c 	.word	0x2000041c
 8002474:	0800e760 	.word	0x0800e760
 8002478:	20000310 	.word	0x20000310
 800247c:	0800e778 	.word	0x0800e778
 8002480:	20000314 	.word	0x20000314
 8002484:	0800e790 	.word	0x0800e790
 8002488:	20000318 	.word	0x20000318
 800248c:	0800e7a8 	.word	0x0800e7a8
 8002490:	2000031c 	.word	0x2000031c
 8002494:	0800e634 	.word	0x0800e634
 8002498:	0800e640 	.word	0x0800e640
 800249c:	0800e64c 	.word	0x0800e64c
 80024a0:	0800e658 	.word	0x0800e658
 80024a4:	0800e6ac 	.word	0x0800e6ac
 80024a8:	080024e1 	.word	0x080024e1
 80024ac:	200002fc 	.word	0x200002fc
 80024b0:	0800e6d0 	.word	0x0800e6d0
 80024b4:	08002501 	.word	0x08002501
 80024b8:	20000300 	.word	0x20000300
 80024bc:	0800e6f4 	.word	0x0800e6f4
 80024c0:	08002525 	.word	0x08002525
 80024c4:	20000304 	.word	0x20000304
 80024c8:	0800e718 	.word	0x0800e718
 80024cc:	08002549 	.word	0x08002549
 80024d0:	20000308 	.word	0x20000308
 80024d4:	0800e73c 	.word	0x0800e73c
 80024d8:	0800256d 	.word	0x0800256d
 80024dc:	2000030c 	.word	0x2000030c

080024e0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	idle_dummy++; // Keep incrementing the dummy variable
 80024e8:	4b04      	ldr	r3, [pc, #16]	@ (80024fc <StartDefaultTask+0x1c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	3301      	adds	r3, #1
 80024ee:	4a03      	ldr	r2, [pc, #12]	@ (80024fc <StartDefaultTask+0x1c>)
 80024f0:	6013      	str	r3, [r2, #0]
    osDelay(1); // A small delay to avoid task starvation
 80024f2:	2001      	movs	r0, #1
 80024f4:	f005 fed0 	bl	8008298 <osDelay>
	idle_dummy++; // Keep incrementing the dummy variable
 80024f8:	bf00      	nop
 80024fa:	e7f5      	b.n	80024e8 <StartDefaultTask+0x8>
 80024fc:	200002e8 	.word	0x200002e8

08002500 <_control_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header__control_task */
void _control_task(void *argument)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN _control_task */
  for(;;)
  {
	control_dummy++;
 8002508:	4b05      	ldr	r3, [pc, #20]	@ (8002520 <_control_task+0x20>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	3301      	adds	r3, #1
 800250e:	4a04      	ldr	r2, [pc, #16]	@ (8002520 <_control_task+0x20>)
 8002510:	6013      	str	r3, [r2, #0]
    control(); // Execute control function
 8002512:	f7fe fd8f 	bl	8001034 <control>
    osDelay(CONTROL_DELAY);
 8002516:	200a      	movs	r0, #10
 8002518:	f005 febe 	bl	8008298 <osDelay>
	control_dummy++;
 800251c:	bf00      	nop
 800251e:	e7f3      	b.n	8002508 <_control_task+0x8>
 8002520:	200002ec 	.word	0x200002ec

08002524 <_imu_read_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header__imu_read_task */
void _imu_read_task(void *argument)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN _imu_read_task */
  for(;;)
  {
	imu_dummy++;
 800252c:	4b05      	ldr	r3, [pc, #20]	@ (8002544 <_imu_read_task+0x20>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	3301      	adds	r3, #1
 8002532:	4a04      	ldr	r2, [pc, #16]	@ (8002544 <_imu_read_task+0x20>)
 8002534:	6013      	str	r3, [r2, #0]
    imu_read(); // Execute imu read function
 8002536:	f7fe ff1d 	bl	8001374 <imu_read>
    osDelay(IMU_DELAY);
 800253a:	2019      	movs	r0, #25
 800253c:	f005 feac 	bl	8008298 <osDelay>
	imu_dummy++;
 8002540:	bf00      	nop
 8002542:	e7f3      	b.n	800252c <_imu_read_task+0x8>
 8002544:	200002f4 	.word	0x200002f4

08002548 <_adc_read_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header__adc_read_task */
void _adc_read_task(void *argument)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN _adc_read_task */
  for(;;)
  {
	adc_dummy++;
 8002550:	4b05      	ldr	r3, [pc, #20]	@ (8002568 <_adc_read_task+0x20>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	3301      	adds	r3, #1
 8002556:	4a04      	ldr	r2, [pc, #16]	@ (8002568 <_adc_read_task+0x20>)
 8002558:	6013      	str	r3, [r2, #0]
    adc_read(); // Execute ADC read function
 800255a:	f7fe fcf5 	bl	8000f48 <adc_read>
    osDelay(ADC_DELAY);
 800255e:	2019      	movs	r0, #25
 8002560:	f005 fe9a 	bl	8008298 <osDelay>
	adc_dummy++;
 8002564:	bf00      	nop
 8002566:	e7f3      	b.n	8002550 <_adc_read_task+0x8>
 8002568:	200002f8 	.word	0x200002f8

0800256c <_telemetry_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header__telemetry_task */
void _telemetry_task(void *argument)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN _telemetry_task */
  for(;;)
  {
	telemetry_dummy++;
 8002574:	4b06      	ldr	r3, [pc, #24]	@ (8002590 <_telemetry_task+0x24>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	3301      	adds	r3, #1
 800257a:	4a05      	ldr	r2, [pc, #20]	@ (8002590 <_telemetry_task+0x24>)
 800257c:	6013      	str	r3, [r2, #0]
    telemetry(); // Execute telemetry function
 800257e:	f7fe ffe5 	bl	800154c <telemetry>
    osDelay(TELEMETRY_DELAY);
 8002582:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002586:	f005 fe87 	bl	8008298 <osDelay>
	telemetry_dummy++;
 800258a:	bf00      	nop
 800258c:	e7f2      	b.n	8002574 <_telemetry_task+0x8>
 800258e:	bf00      	nop
 8002590:	200002f0 	.word	0x200002f0

08002594 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	607b      	str	r3, [r7, #4]
 800259e:	4b10      	ldr	r3, [pc, #64]	@ (80025e0 <MX_GPIO_Init+0x4c>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a2:	4a0f      	ldr	r2, [pc, #60]	@ (80025e0 <MX_GPIO_Init+0x4c>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025aa:	4b0d      	ldr	r3, [pc, #52]	@ (80025e0 <MX_GPIO_Init+0x4c>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	607b      	str	r3, [r7, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	603b      	str	r3, [r7, #0]
 80025ba:	4b09      	ldr	r3, [pc, #36]	@ (80025e0 <MX_GPIO_Init+0x4c>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025be:	4a08      	ldr	r2, [pc, #32]	@ (80025e0 <MX_GPIO_Init+0x4c>)
 80025c0:	f043 0302 	orr.w	r3, r3, #2
 80025c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025c6:	4b06      	ldr	r3, [pc, #24]	@ (80025e0 <MX_GPIO_Init+0x4c>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	603b      	str	r3, [r7, #0]
 80025d0:	683b      	ldr	r3, [r7, #0]

}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	40023800 	.word	0x40023800

080025e4 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80025e8:	4b12      	ldr	r3, [pc, #72]	@ (8002634 <MX_I2C3_Init+0x50>)
 80025ea:	4a13      	ldr	r2, [pc, #76]	@ (8002638 <MX_I2C3_Init+0x54>)
 80025ec:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80025ee:	4b11      	ldr	r3, [pc, #68]	@ (8002634 <MX_I2C3_Init+0x50>)
 80025f0:	4a12      	ldr	r2, [pc, #72]	@ (800263c <MX_I2C3_Init+0x58>)
 80025f2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002634 <MX_I2C3_Init+0x50>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80025fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002634 <MX_I2C3_Init+0x50>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002600:	4b0c      	ldr	r3, [pc, #48]	@ (8002634 <MX_I2C3_Init+0x50>)
 8002602:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002606:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002608:	4b0a      	ldr	r3, [pc, #40]	@ (8002634 <MX_I2C3_Init+0x50>)
 800260a:	2200      	movs	r2, #0
 800260c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800260e:	4b09      	ldr	r3, [pc, #36]	@ (8002634 <MX_I2C3_Init+0x50>)
 8002610:	2200      	movs	r2, #0
 8002612:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002614:	4b07      	ldr	r3, [pc, #28]	@ (8002634 <MX_I2C3_Init+0x50>)
 8002616:	2200      	movs	r2, #0
 8002618:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800261a:	4b06      	ldr	r3, [pc, #24]	@ (8002634 <MX_I2C3_Init+0x50>)
 800261c:	2200      	movs	r2, #0
 800261e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002620:	4804      	ldr	r0, [pc, #16]	@ (8002634 <MX_I2C3_Init+0x50>)
 8002622:	f002 f959 	bl	80048d8 <HAL_I2C_Init>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800262c:	f000 f90a 	bl	8002844 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002630:	bf00      	nop
 8002632:	bd80      	pop	{r7, pc}
 8002634:	20000320 	.word	0x20000320
 8002638:	40005c00 	.word	0x40005c00
 800263c:	000186a0 	.word	0x000186a0

08002640 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b08a      	sub	sp, #40	@ 0x28
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002648:	f107 0314 	add.w	r3, r7, #20
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	609a      	str	r2, [r3, #8]
 8002654:	60da      	str	r2, [r3, #12]
 8002656:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a28      	ldr	r2, [pc, #160]	@ (8002700 <HAL_I2C_MspInit+0xc0>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d14a      	bne.n	80026f8 <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	4b27      	ldr	r3, [pc, #156]	@ (8002704 <HAL_I2C_MspInit+0xc4>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266a:	4a26      	ldr	r2, [pc, #152]	@ (8002704 <HAL_I2C_MspInit+0xc4>)
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	6313      	str	r3, [r2, #48]	@ 0x30
 8002672:	4b24      	ldr	r3, [pc, #144]	@ (8002704 <HAL_I2C_MspInit+0xc4>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	613b      	str	r3, [r7, #16]
 800267c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	4b20      	ldr	r3, [pc, #128]	@ (8002704 <HAL_I2C_MspInit+0xc4>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002686:	4a1f      	ldr	r2, [pc, #124]	@ (8002704 <HAL_I2C_MspInit+0xc4>)
 8002688:	f043 0302 	orr.w	r3, r3, #2
 800268c:	6313      	str	r3, [r2, #48]	@ 0x30
 800268e:	4b1d      	ldr	r3, [pc, #116]	@ (8002704 <HAL_I2C_MspInit+0xc4>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = IMU_CLK_Pin;
 800269a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800269e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026a0:	2312      	movs	r3, #18
 80026a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026a4:	2301      	movs	r3, #1
 80026a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a8:	2303      	movs	r3, #3
 80026aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80026ac:	2304      	movs	r3, #4
 80026ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(IMU_CLK_GPIO_Port, &GPIO_InitStruct);
 80026b0:	f107 0314 	add.w	r3, r7, #20
 80026b4:	4619      	mov	r1, r3
 80026b6:	4814      	ldr	r0, [pc, #80]	@ (8002708 <HAL_I2C_MspInit+0xc8>)
 80026b8:	f001 ff8a 	bl	80045d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IMU_SDA_Pin;
 80026bc:	2310      	movs	r3, #16
 80026be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026c0:	2312      	movs	r3, #18
 80026c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026c4:	2301      	movs	r3, #1
 80026c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c8:	2303      	movs	r3, #3
 80026ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 80026cc:	2309      	movs	r3, #9
 80026ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(IMU_SDA_GPIO_Port, &GPIO_InitStruct);
 80026d0:	f107 0314 	add.w	r3, r7, #20
 80026d4:	4619      	mov	r1, r3
 80026d6:	480d      	ldr	r0, [pc, #52]	@ (800270c <HAL_I2C_MspInit+0xcc>)
 80026d8:	f001 ff7a 	bl	80045d0 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80026dc:	2300      	movs	r3, #0
 80026de:	60bb      	str	r3, [r7, #8]
 80026e0:	4b08      	ldr	r3, [pc, #32]	@ (8002704 <HAL_I2C_MspInit+0xc4>)
 80026e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e4:	4a07      	ldr	r2, [pc, #28]	@ (8002704 <HAL_I2C_MspInit+0xc4>)
 80026e6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80026ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80026ec:	4b05      	ldr	r3, [pc, #20]	@ (8002704 <HAL_I2C_MspInit+0xc4>)
 80026ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026f4:	60bb      	str	r3, [r7, #8]
 80026f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80026f8:	bf00      	nop
 80026fa:	3728      	adds	r7, #40	@ 0x28
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40005c00 	.word	0x40005c00
 8002704:	40023800 	.word	0x40023800
 8002708:	40020000 	.word	0x40020000
 800270c:	40020400 	.word	0x40020400

08002710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8002714:	f000 fed6 	bl	80034c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002718:	f000 f818 	bl	800274c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800271c:	f7ff ff3a 	bl	8002594 <MX_GPIO_Init>
  MX_DMA_Init();
 8002720:	f7ff fde2 	bl	80022e8 <MX_DMA_Init>
  MX_ADC1_Init();
 8002724:	f7ff fa8e 	bl	8001c44 <MX_ADC1_Init>
  MX_TIM3_Init();
 8002728:	f000 fc30 	bl	8002f8c <MX_TIM3_Init>
  MX_TIM4_Init();
 800272c:	f000 fca8 	bl	8003080 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8002730:	f000 fe2c 	bl	800338c <MX_USART1_UART_Init>
  MX_I2C3_Init();
 8002734:	f7ff ff56 	bl	80025e4 <MX_I2C3_Init>
  MX_TIM11_Init();
 8002738:	f000 fd1c 	bl	8003174 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800273c:	f005 fcd0 	bl	80080e0 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002740:	f7ff fe1c 	bl	800237c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002744:	f005 fcf0 	bl	8008128 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002748:	bf00      	nop
 800274a:	e7fd      	b.n	8002748 <main+0x38>

0800274c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b094      	sub	sp, #80	@ 0x50
 8002750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002752:	f107 0320 	add.w	r3, r7, #32
 8002756:	2230      	movs	r2, #48	@ 0x30
 8002758:	2100      	movs	r1, #0
 800275a:	4618      	mov	r0, r3
 800275c:	f009 fd0e 	bl	800c17c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002760:	f107 030c 	add.w	r3, r7, #12
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	605a      	str	r2, [r3, #4]
 800276a:	609a      	str	r2, [r3, #8]
 800276c:	60da      	str	r2, [r3, #12]
 800276e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002770:	2300      	movs	r3, #0
 8002772:	60bb      	str	r3, [r7, #8]
 8002774:	4b28      	ldr	r3, [pc, #160]	@ (8002818 <SystemClock_Config+0xcc>)
 8002776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002778:	4a27      	ldr	r2, [pc, #156]	@ (8002818 <SystemClock_Config+0xcc>)
 800277a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800277e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002780:	4b25      	ldr	r3, [pc, #148]	@ (8002818 <SystemClock_Config+0xcc>)
 8002782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002784:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002788:	60bb      	str	r3, [r7, #8]
 800278a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800278c:	2300      	movs	r3, #0
 800278e:	607b      	str	r3, [r7, #4]
 8002790:	4b22      	ldr	r3, [pc, #136]	@ (800281c <SystemClock_Config+0xd0>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002798:	4a20      	ldr	r2, [pc, #128]	@ (800281c <SystemClock_Config+0xd0>)
 800279a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800279e:	6013      	str	r3, [r2, #0]
 80027a0:	4b1e      	ldr	r3, [pc, #120]	@ (800281c <SystemClock_Config+0xd0>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80027a8:	607b      	str	r3, [r7, #4]
 80027aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80027ac:	2302      	movs	r3, #2
 80027ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027b0:	2301      	movs	r3, #1
 80027b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027b4:	2310      	movs	r3, #16
 80027b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027b8:	2302      	movs	r3, #2
 80027ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80027bc:	2300      	movs	r3, #0
 80027be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80027c0:	2308      	movs	r3, #8
 80027c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80027c4:	2354      	movs	r3, #84	@ 0x54
 80027c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80027c8:	2302      	movs	r3, #2
 80027ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80027cc:	2304      	movs	r3, #4
 80027ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027d0:	f107 0320 	add.w	r3, r7, #32
 80027d4:	4618      	mov	r0, r3
 80027d6:	f003 f893 	bl	8005900 <HAL_RCC_OscConfig>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80027e0:	f000 f830 	bl	8002844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027e4:	230f      	movs	r3, #15
 80027e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027e8:	2302      	movs	r3, #2
 80027ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027ec:	2300      	movs	r3, #0
 80027ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027f6:	2300      	movs	r3, #0
 80027f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80027fa:	f107 030c 	add.w	r3, r7, #12
 80027fe:	2102      	movs	r1, #2
 8002800:	4618      	mov	r0, r3
 8002802:	f003 faf5 	bl	8005df0 <HAL_RCC_ClockConfig>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800280c:	f000 f81a 	bl	8002844 <Error_Handler>
  }
}
 8002810:	bf00      	nop
 8002812:	3750      	adds	r7, #80	@ 0x50
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40023800 	.word	0x40023800
 800281c:	40007000 	.word	0x40007000

08002820 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a04      	ldr	r2, [pc, #16]	@ (8002840 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d101      	bne.n	8002836 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002832:	f000 fe69 	bl	8003508 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002836:	bf00      	nop
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40014400 	.word	0x40014400

08002844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002848:	b672      	cpsid	i
}
 800284a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800284c:	bf00      	nop
 800284e:	e7fd      	b.n	800284c <Error_Handler+0x8>

08002850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	607b      	str	r3, [r7, #4]
 800285a:	4b12      	ldr	r3, [pc, #72]	@ (80028a4 <HAL_MspInit+0x54>)
 800285c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285e:	4a11      	ldr	r2, [pc, #68]	@ (80028a4 <HAL_MspInit+0x54>)
 8002860:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002864:	6453      	str	r3, [r2, #68]	@ 0x44
 8002866:	4b0f      	ldr	r3, [pc, #60]	@ (80028a4 <HAL_MspInit+0x54>)
 8002868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800286a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800286e:	607b      	str	r3, [r7, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	603b      	str	r3, [r7, #0]
 8002876:	4b0b      	ldr	r3, [pc, #44]	@ (80028a4 <HAL_MspInit+0x54>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287a:	4a0a      	ldr	r2, [pc, #40]	@ (80028a4 <HAL_MspInit+0x54>)
 800287c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002880:	6413      	str	r3, [r2, #64]	@ 0x40
 8002882:	4b08      	ldr	r3, [pc, #32]	@ (80028a4 <HAL_MspInit+0x54>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800288a:	603b      	str	r3, [r7, #0]
 800288c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800288e:	2200      	movs	r2, #0
 8002890:	210f      	movs	r1, #15
 8002892:	f06f 0001 	mvn.w	r0, #1
 8002896:	f001 fb01 	bl	8003e9c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800289a:	bf00      	nop
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40023800 	.word	0x40023800

080028a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b08c      	sub	sp, #48	@ 0x30
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80028b8:	2300      	movs	r3, #0
 80028ba:	60bb      	str	r3, [r7, #8]
 80028bc:	4b2e      	ldr	r3, [pc, #184]	@ (8002978 <HAL_InitTick+0xd0>)
 80028be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c0:	4a2d      	ldr	r2, [pc, #180]	@ (8002978 <HAL_InitTick+0xd0>)
 80028c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028c6:	6453      	str	r3, [r2, #68]	@ 0x44
 80028c8:	4b2b      	ldr	r3, [pc, #172]	@ (8002978 <HAL_InitTick+0xd0>)
 80028ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028d0:	60bb      	str	r3, [r7, #8]
 80028d2:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80028d4:	f107 020c 	add.w	r2, r7, #12
 80028d8:	f107 0310 	add.w	r3, r7, #16
 80028dc:	4611      	mov	r1, r2
 80028de:	4618      	mov	r0, r3
 80028e0:	f003 fc66 	bl	80061b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80028e4:	f003 fc50 	bl	8006188 <HAL_RCC_GetPCLK2Freq>
 80028e8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80028ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ec:	4a23      	ldr	r2, [pc, #140]	@ (800297c <HAL_InitTick+0xd4>)
 80028ee:	fba2 2303 	umull	r2, r3, r2, r3
 80028f2:	0c9b      	lsrs	r3, r3, #18
 80028f4:	3b01      	subs	r3, #1
 80028f6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80028f8:	4b21      	ldr	r3, [pc, #132]	@ (8002980 <HAL_InitTick+0xd8>)
 80028fa:	4a22      	ldr	r2, [pc, #136]	@ (8002984 <HAL_InitTick+0xdc>)
 80028fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 80028fe:	4b20      	ldr	r3, [pc, #128]	@ (8002980 <HAL_InitTick+0xd8>)
 8002900:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002904:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8002906:	4a1e      	ldr	r2, [pc, #120]	@ (8002980 <HAL_InitTick+0xd8>)
 8002908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290a:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 800290c:	4b1c      	ldr	r3, [pc, #112]	@ (8002980 <HAL_InitTick+0xd8>)
 800290e:	2200      	movs	r2, #0
 8002910:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002912:	4b1b      	ldr	r3, [pc, #108]	@ (8002980 <HAL_InitTick+0xd8>)
 8002914:	2200      	movs	r2, #0
 8002916:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002918:	4b19      	ldr	r3, [pc, #100]	@ (8002980 <HAL_InitTick+0xd8>)
 800291a:	2200      	movs	r2, #0
 800291c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 800291e:	4818      	ldr	r0, [pc, #96]	@ (8002980 <HAL_InitTick+0xd8>)
 8002920:	f003 fc78 	bl	8006214 <HAL_TIM_Base_Init>
 8002924:	4603      	mov	r3, r0
 8002926:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800292a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800292e:	2b00      	cmp	r3, #0
 8002930:	d11b      	bne.n	800296a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8002932:	4813      	ldr	r0, [pc, #76]	@ (8002980 <HAL_InitTick+0xd8>)
 8002934:	f003 fcbe 	bl	80062b4 <HAL_TIM_Base_Start_IT>
 8002938:	4603      	mov	r3, r0
 800293a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800293e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002942:	2b00      	cmp	r3, #0
 8002944:	d111      	bne.n	800296a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002946:	2019      	movs	r0, #25
 8002948:	f001 fac4 	bl	8003ed4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b0f      	cmp	r3, #15
 8002950:	d808      	bhi.n	8002964 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002952:	2200      	movs	r2, #0
 8002954:	6879      	ldr	r1, [r7, #4]
 8002956:	2019      	movs	r0, #25
 8002958:	f001 faa0 	bl	8003e9c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800295c:	4a0a      	ldr	r2, [pc, #40]	@ (8002988 <HAL_InitTick+0xe0>)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	e002      	b.n	800296a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800296a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800296e:	4618      	mov	r0, r3
 8002970:	3730      	adds	r7, #48	@ 0x30
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	40023800 	.word	0x40023800
 800297c:	431bde83 	.word	0x431bde83
 8002980:	20000374 	.word	0x20000374
 8002984:	40014400 	.word	0x40014400
 8002988:	20000024 	.word	0x20000024

0800298c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002990:	bf00      	nop
 8002992:	e7fd      	b.n	8002990 <NMI_Handler+0x4>

08002994 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002998:	bf00      	nop
 800299a:	e7fd      	b.n	8002998 <HardFault_Handler+0x4>

0800299c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029a0:	bf00      	nop
 80029a2:	e7fd      	b.n	80029a0 <MemManage_Handler+0x4>

080029a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029a8:	bf00      	nop
 80029aa:	e7fd      	b.n	80029a8 <BusFault_Handler+0x4>

080029ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029b0:	bf00      	nop
 80029b2:	e7fd      	b.n	80029b0 <UsageFault_Handler+0x4>

080029b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029b8:	bf00      	nop
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
	...

080029c4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80029c8:	4802      	ldr	r0, [pc, #8]	@ (80029d4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80029ca:	f003 ff49 	bl	8006860 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80029ce:	bf00      	nop
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	20000374 	.word	0x20000374

080029d8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80029dc:	4804      	ldr	r0, [pc, #16]	@ (80029f0 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80029de:	f003 ff3f 	bl	8006860 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */
  ulHighFrequencyTimerTicks++;
 80029e2:	4b04      	ldr	r3, [pc, #16]	@ (80029f4 <TIM1_TRG_COM_TIM11_IRQHandler+0x1c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	3301      	adds	r3, #1
 80029e8:	4a02      	ldr	r2, [pc, #8]	@ (80029f4 <TIM1_TRG_COM_TIM11_IRQHandler+0x1c>)
 80029ea:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80029ec:	bf00      	nop
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	20000464 	.word	0x20000464
 80029f4:	200003bc 	.word	0x200003bc

080029f8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80029fc:	4802      	ldr	r0, [pc, #8]	@ (8002a08 <TIM3_IRQHandler+0x10>)
 80029fe:	f003 ff2f 	bl	8006860 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002a02:	bf00      	nop
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	200003d4 	.word	0x200003d4

08002a0c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a10:	4802      	ldr	r0, [pc, #8]	@ (8002a1c <DMA2_Stream0_IRQHandler+0x10>)
 8002a12:	f001 fb73 	bl	80040fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002a16:	bf00      	nop
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	20000288 	.word	0x20000288

08002a20 <SendRadioData>:
volatile int16_t pulseWidth_CH4 = 0;


/* Helper function to send updated data to the queue */
static void SendRadioData(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
    RadioData_t radioData;
    radioData.ch1 = pulseWidth_CH1;
 8002a26:	4b0d      	ldr	r3, [pc, #52]	@ (8002a5c <SendRadioData+0x3c>)
 8002a28:	881b      	ldrh	r3, [r3, #0]
 8002a2a:	b21b      	sxth	r3, r3
 8002a2c:	803b      	strh	r3, [r7, #0]
    radioData.ch2 = pulseWidth_CH2;
 8002a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8002a60 <SendRadioData+0x40>)
 8002a30:	881b      	ldrh	r3, [r3, #0]
 8002a32:	b21b      	sxth	r3, r3
 8002a34:	807b      	strh	r3, [r7, #2]
    radioData.ch3 = pulseWidth_CH3;
 8002a36:	4b0b      	ldr	r3, [pc, #44]	@ (8002a64 <SendRadioData+0x44>)
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	b21b      	sxth	r3, r3
 8002a3c:	80bb      	strh	r3, [r7, #4]
    radioData.ch4 = pulseWidth_CH4;
 8002a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a68 <SendRadioData+0x48>)
 8002a40:	881b      	ldrh	r3, [r3, #0]
 8002a42:	b21b      	sxth	r3, r3
 8002a44:	80fb      	strh	r3, [r7, #6]
    /* Non-blocking put into the queue */
    osMessageQueuePut(radioQueueHandle, &radioData, 0, 0);
 8002a46:	4b09      	ldr	r3, [pc, #36]	@ (8002a6c <SendRadioData+0x4c>)
 8002a48:	6818      	ldr	r0, [r3, #0]
 8002a4a:	4639      	mov	r1, r7
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f005 fcb0 	bl	80083b4 <osMessageQueuePut>
}
 8002a54:	bf00      	nop
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	200003c2 	.word	0x200003c2
 8002a60:	200003c6 	.word	0x200003c6
 8002a64:	200003ca 	.word	0x200003ca
 8002a68:	200003ce 	.word	0x200003ce
 8002a6c:	20000310 	.word	0x20000310

08002a70 <HAL_TIM_IC_CaptureCallback>:

/* Input capture callback handling all four channels */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a82      	ldr	r2, [pc, #520]	@ (8002c88 <HAL_TIM_IC_CaptureCallback+0x218>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	f040 819c 	bne.w	8002dbc <HAL_TIM_IC_CaptureCallback+0x34c>
    {
        if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	7f1b      	ldrb	r3, [r3, #28]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d15d      	bne.n	8002b48 <HAL_TIM_IC_CaptureCallback+0xd8>
        {
            if (ic1_rising)
 8002a8c:	4b7f      	ldr	r3, [pc, #508]	@ (8002c8c <HAL_TIM_IC_CaptureCallback+0x21c>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d01b      	beq.n	8002ace <HAL_TIM_IC_CaptureCallback+0x5e>
            {
                /* Capture rising edge time for CH1 */
                ic1_rising_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002a96:	2100      	movs	r1, #0
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f004 f9f7 	bl	8006e8c <HAL_TIM_ReadCapturedValue>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	b21a      	sxth	r2, r3
 8002aa2:	4b7b      	ldr	r3, [pc, #492]	@ (8002c90 <HAL_TIM_IC_CaptureCallback+0x220>)
 8002aa4:	801a      	strh	r2, [r3, #0]
                ic1_rising = 0;
 8002aa6:	4b79      	ldr	r3, [pc, #484]	@ (8002c8c <HAL_TIM_IC_CaptureCallback+0x21c>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	701a      	strb	r2, [r3, #0]
                /* Switch polarity to falling edge */
                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6a1a      	ldr	r2, [r3, #32]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 020a 	bic.w	r2, r2, #10
 8002aba:	621a      	str	r2, [r3, #32]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6a1a      	ldr	r2, [r3, #32]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f042 0202 	orr.w	r2, r2, #2
 8002aca:	621a      	str	r2, [r3, #32]
                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
                SendRadioData();
            }
        }
    }
}
 8002acc:	e176      	b.n	8002dbc <HAL_TIM_IC_CaptureCallback+0x34c>
            	int16_t falling_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002ace:	2100      	movs	r1, #0
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f004 f9db 	bl	8006e8c <HAL_TIM_ReadCapturedValue>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	813b      	strh	r3, [r7, #8]
                if (falling_val >= ic1_rising_val)
 8002ada:	4b6d      	ldr	r3, [pc, #436]	@ (8002c90 <HAL_TIM_IC_CaptureCallback+0x220>)
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	b21b      	sxth	r3, r3
 8002ae0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	db0a      	blt.n	8002afe <HAL_TIM_IC_CaptureCallback+0x8e>
                    pulseWidth_CH1 = falling_val - ic1_rising_val;
 8002ae8:	893a      	ldrh	r2, [r7, #8]
 8002aea:	4b69      	ldr	r3, [pc, #420]	@ (8002c90 <HAL_TIM_IC_CaptureCallback+0x220>)
 8002aec:	881b      	ldrh	r3, [r3, #0]
 8002aee:	b21b      	sxth	r3, r3
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	b21a      	sxth	r2, r3
 8002af8:	4b66      	ldr	r3, [pc, #408]	@ (8002c94 <HAL_TIM_IC_CaptureCallback+0x224>)
 8002afa:	801a      	strh	r2, [r3, #0]
 8002afc:	e010      	b.n	8002b20 <HAL_TIM_IC_CaptureCallback+0xb0>
                    pulseWidth_CH1 = (htim->Init.Period - ic1_rising_val) + falling_val + 1;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	4b62      	ldr	r3, [pc, #392]	@ (8002c90 <HAL_TIM_IC_CaptureCallback+0x220>)
 8002b06:	881b      	ldrh	r3, [r3, #0]
 8002b08:	b21b      	sxth	r3, r3
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	893b      	ldrh	r3, [r7, #8]
 8002b12:	4413      	add	r3, r2
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	3301      	adds	r3, #1
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	b21a      	sxth	r2, r3
 8002b1c:	4b5d      	ldr	r3, [pc, #372]	@ (8002c94 <HAL_TIM_IC_CaptureCallback+0x224>)
 8002b1e:	801a      	strh	r2, [r3, #0]
                ic1_rising = 1;
 8002b20:	4b5a      	ldr	r3, [pc, #360]	@ (8002c8c <HAL_TIM_IC_CaptureCallback+0x21c>)
 8002b22:	2201      	movs	r2, #1
 8002b24:	701a      	strb	r2, [r3, #0]
                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6a1a      	ldr	r2, [r3, #32]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 020a 	bic.w	r2, r2, #10
 8002b34:	621a      	str	r2, [r3, #32]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6a12      	ldr	r2, [r2, #32]
 8002b40:	621a      	str	r2, [r3, #32]
                SendRadioData();
 8002b42:	f7ff ff6d 	bl	8002a20 <SendRadioData>
}
 8002b46:	e139      	b.n	8002dbc <HAL_TIM_IC_CaptureCallback+0x34c>
        else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	7f1b      	ldrb	r3, [r3, #28]
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d15d      	bne.n	8002c0c <HAL_TIM_IC_CaptureCallback+0x19c>
            if (ic2_rising)
 8002b50:	4b51      	ldr	r3, [pc, #324]	@ (8002c98 <HAL_TIM_IC_CaptureCallback+0x228>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d01b      	beq.n	8002b92 <HAL_TIM_IC_CaptureCallback+0x122>
                ic2_rising_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8002b5a:	2104      	movs	r1, #4
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f004 f995 	bl	8006e8c <HAL_TIM_ReadCapturedValue>
 8002b62:	4603      	mov	r3, r0
 8002b64:	b21a      	sxth	r2, r3
 8002b66:	4b4d      	ldr	r3, [pc, #308]	@ (8002c9c <HAL_TIM_IC_CaptureCallback+0x22c>)
 8002b68:	801a      	strh	r2, [r3, #0]
                ic2_rising = 0;
 8002b6a:	4b4b      	ldr	r3, [pc, #300]	@ (8002c98 <HAL_TIM_IC_CaptureCallback+0x228>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	701a      	strb	r2, [r3, #0]
                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6a1a      	ldr	r2, [r3, #32]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002b7e:	621a      	str	r2, [r3, #32]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6a1a      	ldr	r2, [r3, #32]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f042 0220 	orr.w	r2, r2, #32
 8002b8e:	621a      	str	r2, [r3, #32]
}
 8002b90:	e114      	b.n	8002dbc <HAL_TIM_IC_CaptureCallback+0x34c>
            	int16_t falling_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8002b92:	2104      	movs	r1, #4
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f004 f979 	bl	8006e8c <HAL_TIM_ReadCapturedValue>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	817b      	strh	r3, [r7, #10]
                if (falling_val >= ic2_rising_val)
 8002b9e:	4b3f      	ldr	r3, [pc, #252]	@ (8002c9c <HAL_TIM_IC_CaptureCallback+0x22c>)
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	b21b      	sxth	r3, r3
 8002ba4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	db0a      	blt.n	8002bc2 <HAL_TIM_IC_CaptureCallback+0x152>
                    pulseWidth_CH2 = falling_val - ic2_rising_val;
 8002bac:	897a      	ldrh	r2, [r7, #10]
 8002bae:	4b3b      	ldr	r3, [pc, #236]	@ (8002c9c <HAL_TIM_IC_CaptureCallback+0x22c>)
 8002bb0:	881b      	ldrh	r3, [r3, #0]
 8002bb2:	b21b      	sxth	r3, r3
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	b21a      	sxth	r2, r3
 8002bbc:	4b38      	ldr	r3, [pc, #224]	@ (8002ca0 <HAL_TIM_IC_CaptureCallback+0x230>)
 8002bbe:	801a      	strh	r2, [r3, #0]
 8002bc0:	e010      	b.n	8002be4 <HAL_TIM_IC_CaptureCallback+0x174>
                    pulseWidth_CH2 = (htim->Init.Period - ic2_rising_val) + falling_val + 1;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	4b34      	ldr	r3, [pc, #208]	@ (8002c9c <HAL_TIM_IC_CaptureCallback+0x22c>)
 8002bca:	881b      	ldrh	r3, [r3, #0]
 8002bcc:	b21b      	sxth	r3, r3
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	897b      	ldrh	r3, [r7, #10]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	3301      	adds	r3, #1
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	b21a      	sxth	r2, r3
 8002be0:	4b2f      	ldr	r3, [pc, #188]	@ (8002ca0 <HAL_TIM_IC_CaptureCallback+0x230>)
 8002be2:	801a      	strh	r2, [r3, #0]
                ic2_rising = 1;
 8002be4:	4b2c      	ldr	r3, [pc, #176]	@ (8002c98 <HAL_TIM_IC_CaptureCallback+0x228>)
 8002be6:	2201      	movs	r2, #1
 8002be8:	701a      	strb	r2, [r3, #0]
                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6a1a      	ldr	r2, [r3, #32]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002bf8:	621a      	str	r2, [r3, #32]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6a12      	ldr	r2, [r2, #32]
 8002c04:	621a      	str	r2, [r3, #32]
                SendRadioData();
 8002c06:	f7ff ff0b 	bl	8002a20 <SendRadioData>
}
 8002c0a:	e0d7      	b.n	8002dbc <HAL_TIM_IC_CaptureCallback+0x34c>
        else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	7f1b      	ldrb	r3, [r3, #28]
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d172      	bne.n	8002cfa <HAL_TIM_IC_CaptureCallback+0x28a>
            if (ic3_rising)
 8002c14:	4b23      	ldr	r3, [pc, #140]	@ (8002ca4 <HAL_TIM_IC_CaptureCallback+0x234>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d01b      	beq.n	8002c56 <HAL_TIM_IC_CaptureCallback+0x1e6>
                ic3_rising_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8002c1e:	2108      	movs	r1, #8
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f004 f933 	bl	8006e8c <HAL_TIM_ReadCapturedValue>
 8002c26:	4603      	mov	r3, r0
 8002c28:	b21a      	sxth	r2, r3
 8002c2a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ca8 <HAL_TIM_IC_CaptureCallback+0x238>)
 8002c2c:	801a      	strh	r2, [r3, #0]
                ic3_rising = 0;
 8002c2e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ca4 <HAL_TIM_IC_CaptureCallback+0x234>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	701a      	strb	r2, [r3, #0]
                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6a1a      	ldr	r2, [r3, #32]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 8002c42:	621a      	str	r2, [r3, #32]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6a1a      	ldr	r2, [r3, #32]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c52:	621a      	str	r2, [r3, #32]
}
 8002c54:	e0b2      	b.n	8002dbc <HAL_TIM_IC_CaptureCallback+0x34c>
            	int16_t falling_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8002c56:	2108      	movs	r1, #8
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f004 f917 	bl	8006e8c <HAL_TIM_ReadCapturedValue>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	81bb      	strh	r3, [r7, #12]
                if (falling_val >= ic3_rising_val)
 8002c62:	4b11      	ldr	r3, [pc, #68]	@ (8002ca8 <HAL_TIM_IC_CaptureCallback+0x238>)
 8002c64:	881b      	ldrh	r3, [r3, #0]
 8002c66:	b21b      	sxth	r3, r3
 8002c68:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	db1f      	blt.n	8002cb0 <HAL_TIM_IC_CaptureCallback+0x240>
                    pulseWidth_CH3 = falling_val - ic3_rising_val;
 8002c70:	89ba      	ldrh	r2, [r7, #12]
 8002c72:	4b0d      	ldr	r3, [pc, #52]	@ (8002ca8 <HAL_TIM_IC_CaptureCallback+0x238>)
 8002c74:	881b      	ldrh	r3, [r3, #0]
 8002c76:	b21b      	sxth	r3, r3
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	b21a      	sxth	r2, r3
 8002c80:	4b0a      	ldr	r3, [pc, #40]	@ (8002cac <HAL_TIM_IC_CaptureCallback+0x23c>)
 8002c82:	801a      	strh	r2, [r3, #0]
 8002c84:	e025      	b.n	8002cd2 <HAL_TIM_IC_CaptureCallback+0x262>
 8002c86:	bf00      	nop
 8002c88:	40000400 	.word	0x40000400
 8002c8c:	2000001c 	.word	0x2000001c
 8002c90:	200003c0 	.word	0x200003c0
 8002c94:	200003c2 	.word	0x200003c2
 8002c98:	2000001d 	.word	0x2000001d
 8002c9c:	200003c4 	.word	0x200003c4
 8002ca0:	200003c6 	.word	0x200003c6
 8002ca4:	2000001e 	.word	0x2000001e
 8002ca8:	200003c8 	.word	0x200003c8
 8002cac:	200003ca 	.word	0x200003ca
                    pulseWidth_CH3 = (htim->Init.Period - ic3_rising_val) + falling_val + 1;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	4b43      	ldr	r3, [pc, #268]	@ (8002dc4 <HAL_TIM_IC_CaptureCallback+0x354>)
 8002cb8:	881b      	ldrh	r3, [r3, #0]
 8002cba:	b21b      	sxth	r3, r3
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	89bb      	ldrh	r3, [r7, #12]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	3301      	adds	r3, #1
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	b21a      	sxth	r2, r3
 8002cce:	4b3e      	ldr	r3, [pc, #248]	@ (8002dc8 <HAL_TIM_IC_CaptureCallback+0x358>)
 8002cd0:	801a      	strh	r2, [r3, #0]
                ic3_rising = 1;
 8002cd2:	4b3e      	ldr	r3, [pc, #248]	@ (8002dcc <HAL_TIM_IC_CaptureCallback+0x35c>)
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	701a      	strb	r2, [r3, #0]
                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6a1a      	ldr	r2, [r3, #32]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 8002ce6:	621a      	str	r2, [r3, #32]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6a12      	ldr	r2, [r2, #32]
 8002cf2:	621a      	str	r2, [r3, #32]
                SendRadioData();
 8002cf4:	f7ff fe94 	bl	8002a20 <SendRadioData>
}
 8002cf8:	e060      	b.n	8002dbc <HAL_TIM_IC_CaptureCallback+0x34c>
        else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	7f1b      	ldrb	r3, [r3, #28]
 8002cfe:	2b08      	cmp	r3, #8
 8002d00:	d15c      	bne.n	8002dbc <HAL_TIM_IC_CaptureCallback+0x34c>
            if (ic4_rising)
 8002d02:	4b33      	ldr	r3, [pc, #204]	@ (8002dd0 <HAL_TIM_IC_CaptureCallback+0x360>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d01b      	beq.n	8002d44 <HAL_TIM_IC_CaptureCallback+0x2d4>
                ic4_rising_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8002d0c:	210c      	movs	r1, #12
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f004 f8bc 	bl	8006e8c <HAL_TIM_ReadCapturedValue>
 8002d14:	4603      	mov	r3, r0
 8002d16:	b21a      	sxth	r2, r3
 8002d18:	4b2e      	ldr	r3, [pc, #184]	@ (8002dd4 <HAL_TIM_IC_CaptureCallback+0x364>)
 8002d1a:	801a      	strh	r2, [r3, #0]
                ic4_rising = 0;
 8002d1c:	4b2c      	ldr	r3, [pc, #176]	@ (8002dd0 <HAL_TIM_IC_CaptureCallback+0x360>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	701a      	strb	r2, [r3, #0]
                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_FALLING);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6a1a      	ldr	r2, [r3, #32]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 8002d30:	621a      	str	r2, [r3, #32]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6a1a      	ldr	r2, [r3, #32]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d40:	621a      	str	r2, [r3, #32]
}
 8002d42:	e03b      	b.n	8002dbc <HAL_TIM_IC_CaptureCallback+0x34c>
            	int16_t falling_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8002d44:	210c      	movs	r1, #12
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f004 f8a0 	bl	8006e8c <HAL_TIM_ReadCapturedValue>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	81fb      	strh	r3, [r7, #14]
                if (falling_val >= ic4_rising_val)
 8002d50:	4b20      	ldr	r3, [pc, #128]	@ (8002dd4 <HAL_TIM_IC_CaptureCallback+0x364>)
 8002d52:	881b      	ldrh	r3, [r3, #0]
 8002d54:	b21b      	sxth	r3, r3
 8002d56:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	db0a      	blt.n	8002d74 <HAL_TIM_IC_CaptureCallback+0x304>
                    pulseWidth_CH4 = falling_val - ic4_rising_val;
 8002d5e:	89fa      	ldrh	r2, [r7, #14]
 8002d60:	4b1c      	ldr	r3, [pc, #112]	@ (8002dd4 <HAL_TIM_IC_CaptureCallback+0x364>)
 8002d62:	881b      	ldrh	r3, [r3, #0]
 8002d64:	b21b      	sxth	r3, r3
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	b21a      	sxth	r2, r3
 8002d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002dd8 <HAL_TIM_IC_CaptureCallback+0x368>)
 8002d70:	801a      	strh	r2, [r3, #0]
 8002d72:	e010      	b.n	8002d96 <HAL_TIM_IC_CaptureCallback+0x326>
                    pulseWidth_CH4 = (htim->Init.Period - ic4_rising_val) + falling_val + 1;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	4b16      	ldr	r3, [pc, #88]	@ (8002dd4 <HAL_TIM_IC_CaptureCallback+0x364>)
 8002d7c:	881b      	ldrh	r3, [r3, #0]
 8002d7e:	b21b      	sxth	r3, r3
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	89fb      	ldrh	r3, [r7, #14]
 8002d88:	4413      	add	r3, r2
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	b21a      	sxth	r2, r3
 8002d92:	4b11      	ldr	r3, [pc, #68]	@ (8002dd8 <HAL_TIM_IC_CaptureCallback+0x368>)
 8002d94:	801a      	strh	r2, [r3, #0]
                ic4_rising = 1;
 8002d96:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd0 <HAL_TIM_IC_CaptureCallback+0x360>)
 8002d98:	2201      	movs	r2, #1
 8002d9a:	701a      	strb	r2, [r3, #0]
                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6a1a      	ldr	r2, [r3, #32]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 8002daa:	621a      	str	r2, [r3, #32]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6a12      	ldr	r2, [r2, #32]
 8002db6:	621a      	str	r2, [r3, #32]
                SendRadioData();
 8002db8:	f7ff fe32 	bl	8002a20 <SendRadioData>
}
 8002dbc:	bf00      	nop
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	200003c8 	.word	0x200003c8
 8002dc8:	200003ca 	.word	0x200003ca
 8002dcc:	2000001e 	.word	0x2000001e
 8002dd0:	2000001f 	.word	0x2000001f
 8002dd4:	200003cc 	.word	0x200003cc
 8002dd8:	200003ce 	.word	0x200003ce

08002ddc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  return 1;
 8002de0:	2301      	movs	r3, #1
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <_kill>:

int _kill(int pid, int sig)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002df6:	f009 fa69 	bl	800c2cc <__errno>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2216      	movs	r2, #22
 8002dfe:	601a      	str	r2, [r3, #0]
  return -1;
 8002e00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <_exit>:

void _exit (int status)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e14:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f7ff ffe7 	bl	8002dec <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e1e:	bf00      	nop
 8002e20:	e7fd      	b.n	8002e1e <_exit+0x12>

08002e22 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b086      	sub	sp, #24
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	60f8      	str	r0, [r7, #12]
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e2e:	2300      	movs	r3, #0
 8002e30:	617b      	str	r3, [r7, #20]
 8002e32:	e00a      	b.n	8002e4a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e34:	f3af 8000 	nop.w
 8002e38:	4601      	mov	r1, r0
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	1c5a      	adds	r2, r3, #1
 8002e3e:	60ba      	str	r2, [r7, #8]
 8002e40:	b2ca      	uxtb	r2, r1
 8002e42:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	3301      	adds	r3, #1
 8002e48:	617b      	str	r3, [r7, #20]
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	dbf0      	blt.n	8002e34 <_read+0x12>
  }

  return len;
 8002e52:	687b      	ldr	r3, [r7, #4]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3718      	adds	r7, #24
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]
 8002e6c:	e009      	b.n	8002e82 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	60ba      	str	r2, [r7, #8]
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	617b      	str	r3, [r7, #20]
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	dbf1      	blt.n	8002e6e <_write+0x12>
  }
  return len;
 8002e8a:	687b      	ldr	r3, [r7, #4]
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3718      	adds	r7, #24
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <_close>:

int _close(int file)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ebc:	605a      	str	r2, [r3, #4]
  return 0;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <_isatty>:

int _isatty(int file)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ed4:	2301      	movs	r3, #1
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b085      	sub	sp, #20
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	60f8      	str	r0, [r7, #12]
 8002eea:	60b9      	str	r1, [r7, #8]
 8002eec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3714      	adds	r7, #20
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f04:	4a14      	ldr	r2, [pc, #80]	@ (8002f58 <_sbrk+0x5c>)
 8002f06:	4b15      	ldr	r3, [pc, #84]	@ (8002f5c <_sbrk+0x60>)
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f10:	4b13      	ldr	r3, [pc, #76]	@ (8002f60 <_sbrk+0x64>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d102      	bne.n	8002f1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f18:	4b11      	ldr	r3, [pc, #68]	@ (8002f60 <_sbrk+0x64>)
 8002f1a:	4a12      	ldr	r2, [pc, #72]	@ (8002f64 <_sbrk+0x68>)
 8002f1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f1e:	4b10      	ldr	r3, [pc, #64]	@ (8002f60 <_sbrk+0x64>)
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4413      	add	r3, r2
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d207      	bcs.n	8002f3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f2c:	f009 f9ce 	bl	800c2cc <__errno>
 8002f30:	4603      	mov	r3, r0
 8002f32:	220c      	movs	r2, #12
 8002f34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f3a:	e009      	b.n	8002f50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f3c:	4b08      	ldr	r3, [pc, #32]	@ (8002f60 <_sbrk+0x64>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f42:	4b07      	ldr	r3, [pc, #28]	@ (8002f60 <_sbrk+0x64>)
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4413      	add	r3, r2
 8002f4a:	4a05      	ldr	r2, [pc, #20]	@ (8002f60 <_sbrk+0x64>)
 8002f4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3718      	adds	r7, #24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	20010000 	.word	0x20010000
 8002f5c:	00000400 	.word	0x00000400
 8002f60:	200003d0 	.word	0x200003d0
 8002f64:	20005090 	.word	0x20005090

08002f68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f6c:	4b06      	ldr	r3, [pc, #24]	@ (8002f88 <SystemInit+0x20>)
 8002f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f72:	4a05      	ldr	r2, [pc, #20]	@ (8002f88 <SystemInit+0x20>)
 8002f74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f7c:	bf00      	nop
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	e000ed00 	.word	0xe000ed00

08002f8c <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b08c      	sub	sp, #48	@ 0x30
 8002f90:	af00      	add	r7, sp, #0
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f92:	f107 031c 	add.w	r3, r7, #28
 8002f96:	2200      	movs	r2, #0
 8002f98:	601a      	str	r2, [r3, #0]
 8002f9a:	605a      	str	r2, [r3, #4]
 8002f9c:	609a      	str	r2, [r3, #8]
 8002f9e:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fa0:	f107 0314 	add.w	r3, r7, #20
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	605a      	str	r2, [r3, #4]
    TIM_IC_InitTypeDef sConfigIC = {0};
 8002faa:	1d3b      	adds	r3, r7, #4
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	605a      	str	r2, [r3, #4]
 8002fb2:	609a      	str	r2, [r3, #8]
 8002fb4:	60da      	str	r2, [r3, #12]

    htim3.Instance = TIM3;
 8002fb6:	4b30      	ldr	r3, [pc, #192]	@ (8003078 <MX_TIM3_Init+0xec>)
 8002fb8:	4a30      	ldr	r2, [pc, #192]	@ (800307c <MX_TIM3_Init+0xf0>)
 8002fba:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 84 - 1; // Adjust for 1 MHz timer tick (assuming 84 MHz clock)
 8002fbc:	4b2e      	ldr	r3, [pc, #184]	@ (8003078 <MX_TIM3_Init+0xec>)
 8002fbe:	2253      	movs	r2, #83	@ 0x53
 8002fc0:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fc2:	4b2d      	ldr	r3, [pc, #180]	@ (8003078 <MX_TIM3_Init+0xec>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 0xFFFF;
 8002fc8:	4b2b      	ldr	r3, [pc, #172]	@ (8003078 <MX_TIM3_Init+0xec>)
 8002fca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002fce:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fd0:	4b29      	ldr	r3, [pc, #164]	@ (8003078 <MX_TIM3_Init+0xec>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fd6:	4b28      	ldr	r3, [pc, #160]	@ (8003078 <MX_TIM3_Init+0xec>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	619a      	str	r2, [r3, #24]

    if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002fdc:	4826      	ldr	r0, [pc, #152]	@ (8003078 <MX_TIM3_Init+0xec>)
 8002fde:	f003 f919 	bl	8006214 <HAL_TIM_Base_Init>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <MX_TIM3_Init+0x60>
    {
        Error_Handler();
 8002fe8:	f7ff fc2c 	bl	8002844 <Error_Handler>
    }

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ff0:	61fb      	str	r3, [r7, #28]
    if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002ff2:	f107 031c 	add.w	r3, r7, #28
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	481f      	ldr	r0, [pc, #124]	@ (8003078 <MX_TIM3_Init+0xec>)
 8002ffa:	f003 fe7f 	bl	8006cfc <HAL_TIM_ConfigClockSource>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <MX_TIM3_Init+0x7c>
    {
        Error_Handler();
 8003004:	f7ff fc1e 	bl	8002844 <Error_Handler>
    }

    if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8003008:	481b      	ldr	r0, [pc, #108]	@ (8003078 <MX_TIM3_Init+0xec>)
 800300a:	f003 fab5 	bl	8006578 <HAL_TIM_IC_Init>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <MX_TIM3_Init+0x8c>
    {
        Error_Handler();
 8003014:	f7ff fc16 	bl	8002844 <Error_Handler>
    }

    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003018:	2300      	movs	r3, #0
 800301a:	617b      	str	r3, [r7, #20]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800301c:	2300      	movs	r3, #0
 800301e:	61bb      	str	r3, [r7, #24]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003020:	f107 0314 	add.w	r3, r7, #20
 8003024:	4619      	mov	r1, r3
 8003026:	4814      	ldr	r0, [pc, #80]	@ (8003078 <MX_TIM3_Init+0xec>)
 8003028:	f004 fb88 	bl	800773c <HAL_TIMEx_MasterConfigSynchronization>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <MX_TIM3_Init+0xaa>
    {
        Error_Handler();
 8003032:	f7ff fc07 	bl	8002844 <Error_Handler>
    }

    sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8003036:	230a      	movs	r3, #10
 8003038:	607b      	str	r3, [r7, #4]
    sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800303a:	2301      	movs	r3, #1
 800303c:	60bb      	str	r3, [r7, #8]
    sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800303e:	2300      	movs	r3, #0
 8003040:	60fb      	str	r3, [r7, #12]
    sConfigIC.ICFilter = 0;
 8003042:	2300      	movs	r3, #0
 8003044:	613b      	str	r3, [r7, #16]

    for (int ch = TIM_CHANNEL_1; ch <= TIM_CHANNEL_4; ch += 4)
 8003046:	2300      	movs	r3, #0
 8003048:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800304a:	e00d      	b.n	8003068 <MX_TIM3_Init+0xdc>
    {
        if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, ch) != HAL_OK)
 800304c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800304e:	1d3b      	adds	r3, r7, #4
 8003050:	4619      	mov	r1, r3
 8003052:	4809      	ldr	r0, [pc, #36]	@ (8003078 <MX_TIM3_Init+0xec>)
 8003054:	f003 fcf4 	bl	8006a40 <HAL_TIM_IC_ConfigChannel>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <MX_TIM3_Init+0xd6>
        {
            Error_Handler();
 800305e:	f7ff fbf1 	bl	8002844 <Error_Handler>
    for (int ch = TIM_CHANNEL_1; ch <= TIM_CHANNEL_4; ch += 4)
 8003062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003064:	3304      	adds	r3, #4
 8003066:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800306a:	2b0c      	cmp	r3, #12
 800306c:	d9ee      	bls.n	800304c <MX_TIM3_Init+0xc0>
        }
    }


}
 800306e:	bf00      	nop
 8003070:	bf00      	nop
 8003072:	3730      	adds	r7, #48	@ 0x30
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	200003d4 	.word	0x200003d4
 800307c:	40000400 	.word	0x40000400

08003080 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b08a      	sub	sp, #40	@ 0x28
 8003084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003086:	f107 0320 	add.w	r3, r7, #32
 800308a:	2200      	movs	r2, #0
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003090:	1d3b      	adds	r3, r7, #4
 8003092:	2200      	movs	r2, #0
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	605a      	str	r2, [r3, #4]
 8003098:	609a      	str	r2, [r3, #8]
 800309a:	60da      	str	r2, [r3, #12]
 800309c:	611a      	str	r2, [r3, #16]
 800309e:	615a      	str	r2, [r3, #20]
 80030a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80030a2:	4b32      	ldr	r3, [pc, #200]	@ (800316c <MX_TIM4_Init+0xec>)
 80030a4:	4a32      	ldr	r2, [pc, #200]	@ (8003170 <MX_TIM4_Init+0xf0>)
 80030a6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 27;
 80030a8:	4b30      	ldr	r3, [pc, #192]	@ (800316c <MX_TIM4_Init+0xec>)
 80030aa:	221b      	movs	r2, #27
 80030ac:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030ae:	4b2f      	ldr	r3, [pc, #188]	@ (800316c <MX_TIM4_Init+0xec>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 80030b4:	4b2d      	ldr	r3, [pc, #180]	@ (800316c <MX_TIM4_Init+0xec>)
 80030b6:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80030ba:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030bc:	4b2b      	ldr	r3, [pc, #172]	@ (800316c <MX_TIM4_Init+0xec>)
 80030be:	2200      	movs	r2, #0
 80030c0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80030c2:	4b2a      	ldr	r3, [pc, #168]	@ (800316c <MX_TIM4_Init+0xec>)
 80030c4:	2280      	movs	r2, #128	@ 0x80
 80030c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80030c8:	4828      	ldr	r0, [pc, #160]	@ (800316c <MX_TIM4_Init+0xec>)
 80030ca:	f003 f955 	bl	8006378 <HAL_TIM_PWM_Init>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80030d4:	f7ff fbb6 	bl	8002844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030d8:	2300      	movs	r3, #0
 80030da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030dc:	2300      	movs	r3, #0
 80030de:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80030e0:	f107 0320 	add.w	r3, r7, #32
 80030e4:	4619      	mov	r1, r3
 80030e6:	4821      	ldr	r0, [pc, #132]	@ (800316c <MX_TIM4_Init+0xec>)
 80030e8:	f004 fb28 	bl	800773c <HAL_TIMEx_MasterConfigSynchronization>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80030f2:	f7ff fba7 	bl	8002844 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030f6:	2360      	movs	r3, #96	@ 0x60
 80030f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80030fa:	2300      	movs	r3, #0
 80030fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030fe:	2300      	movs	r3, #0
 8003100:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003102:	2300      	movs	r3, #0
 8003104:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003106:	1d3b      	adds	r3, r7, #4
 8003108:	2200      	movs	r2, #0
 800310a:	4619      	mov	r1, r3
 800310c:	4817      	ldr	r0, [pc, #92]	@ (800316c <MX_TIM4_Init+0xec>)
 800310e:	f003 fd33 	bl	8006b78 <HAL_TIM_PWM_ConfigChannel>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8003118:	f7ff fb94 	bl	8002844 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800311c:	1d3b      	adds	r3, r7, #4
 800311e:	2204      	movs	r2, #4
 8003120:	4619      	mov	r1, r3
 8003122:	4812      	ldr	r0, [pc, #72]	@ (800316c <MX_TIM4_Init+0xec>)
 8003124:	f003 fd28 	bl	8006b78 <HAL_TIM_PWM_ConfigChannel>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800312e:	f7ff fb89 	bl	8002844 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003132:	1d3b      	adds	r3, r7, #4
 8003134:	2208      	movs	r2, #8
 8003136:	4619      	mov	r1, r3
 8003138:	480c      	ldr	r0, [pc, #48]	@ (800316c <MX_TIM4_Init+0xec>)
 800313a:	f003 fd1d 	bl	8006b78 <HAL_TIM_PWM_ConfigChannel>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8003144:	f7ff fb7e 	bl	8002844 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003148:	1d3b      	adds	r3, r7, #4
 800314a:	220c      	movs	r2, #12
 800314c:	4619      	mov	r1, r3
 800314e:	4807      	ldr	r0, [pc, #28]	@ (800316c <MX_TIM4_Init+0xec>)
 8003150:	f003 fd12 	bl	8006b78 <HAL_TIM_PWM_ConfigChannel>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 800315a:	f7ff fb73 	bl	8002844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800315e:	4803      	ldr	r0, [pc, #12]	@ (800316c <MX_TIM4_Init+0xec>)
 8003160:	f000 f8da 	bl	8003318 <HAL_TIM_MspPostInit>

}
 8003164:	bf00      	nop
 8003166:	3728      	adds	r7, #40	@ 0x28
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	2000041c 	.word	0x2000041c
 8003170:	40000800 	.word	0x40000800

08003174 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003178:	4b0d      	ldr	r3, [pc, #52]	@ (80031b0 <MX_TIM11_Init+0x3c>)
 800317a:	4a0e      	ldr	r2, [pc, #56]	@ (80031b4 <MX_TIM11_Init+0x40>)
 800317c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 84;
 800317e:	4b0c      	ldr	r3, [pc, #48]	@ (80031b0 <MX_TIM11_Init+0x3c>)
 8003180:	2254      	movs	r2, #84	@ 0x54
 8003182:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003184:	4b0a      	ldr	r3, [pc, #40]	@ (80031b0 <MX_TIM11_Init+0x3c>)
 8003186:	2200      	movs	r2, #0
 8003188:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 99;
 800318a:	4b09      	ldr	r3, [pc, #36]	@ (80031b0 <MX_TIM11_Init+0x3c>)
 800318c:	2263      	movs	r2, #99	@ 0x63
 800318e:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003190:	4b07      	ldr	r3, [pc, #28]	@ (80031b0 <MX_TIM11_Init+0x3c>)
 8003192:	2200      	movs	r2, #0
 8003194:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003196:	4b06      	ldr	r3, [pc, #24]	@ (80031b0 <MX_TIM11_Init+0x3c>)
 8003198:	2280      	movs	r2, #128	@ 0x80
 800319a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800319c:	4804      	ldr	r0, [pc, #16]	@ (80031b0 <MX_TIM11_Init+0x3c>)
 800319e:	f003 f839 	bl	8006214 <HAL_TIM_Base_Init>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <MX_TIM11_Init+0x38>
  {
    Error_Handler();
 80031a8:	f7ff fb4c 	bl	8002844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80031ac:	bf00      	nop
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	20000464 	.word	0x20000464
 80031b4:	40014800 	.word	0x40014800

080031b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b08c      	sub	sp, #48	@ 0x30
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c0:	f107 031c 	add.w	r3, r7, #28
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	605a      	str	r2, [r3, #4]
 80031ca:	609a      	str	r2, [r3, #8]
 80031cc:	60da      	str	r2, [r3, #12]
 80031ce:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a3a      	ldr	r2, [pc, #232]	@ (80032c0 <HAL_TIM_Base_MspInit+0x108>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d152      	bne.n	8003280 <HAL_TIM_Base_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031da:	2300      	movs	r3, #0
 80031dc:	61bb      	str	r3, [r7, #24]
 80031de:	4b39      	ldr	r3, [pc, #228]	@ (80032c4 <HAL_TIM_Base_MspInit+0x10c>)
 80031e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e2:	4a38      	ldr	r2, [pc, #224]	@ (80032c4 <HAL_TIM_Base_MspInit+0x10c>)
 80031e4:	f043 0302 	orr.w	r3, r3, #2
 80031e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80031ea:	4b36      	ldr	r3, [pc, #216]	@ (80032c4 <HAL_TIM_Base_MspInit+0x10c>)
 80031ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	61bb      	str	r3, [r7, #24]
 80031f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031f6:	2300      	movs	r3, #0
 80031f8:	617b      	str	r3, [r7, #20]
 80031fa:	4b32      	ldr	r3, [pc, #200]	@ (80032c4 <HAL_TIM_Base_MspInit+0x10c>)
 80031fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fe:	4a31      	ldr	r2, [pc, #196]	@ (80032c4 <HAL_TIM_Base_MspInit+0x10c>)
 8003200:	f043 0301 	orr.w	r3, r3, #1
 8003204:	6313      	str	r3, [r2, #48]	@ 0x30
 8003206:	4b2f      	ldr	r3, [pc, #188]	@ (80032c4 <HAL_TIM_Base_MspInit+0x10c>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	617b      	str	r3, [r7, #20]
 8003210:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003212:	2300      	movs	r3, #0
 8003214:	613b      	str	r3, [r7, #16]
 8003216:	4b2b      	ldr	r3, [pc, #172]	@ (80032c4 <HAL_TIM_Base_MspInit+0x10c>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321a:	4a2a      	ldr	r2, [pc, #168]	@ (80032c4 <HAL_TIM_Base_MspInit+0x10c>)
 800321c:	f043 0302 	orr.w	r3, r3, #2
 8003220:	6313      	str	r3, [r2, #48]	@ 0x30
 8003222:	4b28      	ldr	r3, [pc, #160]	@ (80032c4 <HAL_TIM_Base_MspInit+0x10c>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	613b      	str	r3, [r7, #16]
 800322c:	693b      	ldr	r3, [r7, #16]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin;
 800322e:	23c0      	movs	r3, #192	@ 0xc0
 8003230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003232:	2302      	movs	r3, #2
 8003234:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003236:	2300      	movs	r3, #0
 8003238:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800323a:	2300      	movs	r3, #0
 800323c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800323e:	2302      	movs	r3, #2
 8003240:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003242:	f107 031c 	add.w	r3, r7, #28
 8003246:	4619      	mov	r1, r3
 8003248:	481f      	ldr	r0, [pc, #124]	@ (80032c8 <HAL_TIM_Base_MspInit+0x110>)
 800324a:	f001 f9c1 	bl	80045d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IN3_Pin|IN4_Pin;
 800324e:	2303      	movs	r3, #3
 8003250:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003252:	2302      	movs	r3, #2
 8003254:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003256:	2300      	movs	r3, #0
 8003258:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800325a:	2300      	movs	r3, #0
 800325c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800325e:	2302      	movs	r3, #2
 8003260:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003262:	f107 031c 	add.w	r3, r7, #28
 8003266:	4619      	mov	r1, r3
 8003268:	4818      	ldr	r0, [pc, #96]	@ (80032cc <HAL_TIM_Base_MspInit+0x114>)
 800326a:	f001 f9b1 	bl	80045d0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800326e:	2200      	movs	r2, #0
 8003270:	2105      	movs	r1, #5
 8003272:	201d      	movs	r0, #29
 8003274:	f000 fe12 	bl	8003e9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003278:	201d      	movs	r0, #29
 800327a:	f000 fe2b 	bl	8003ed4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800327e:	e01a      	b.n	80032b6 <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM11)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a12      	ldr	r2, [pc, #72]	@ (80032d0 <HAL_TIM_Base_MspInit+0x118>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d115      	bne.n	80032b6 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800328a:	2300      	movs	r3, #0
 800328c:	60fb      	str	r3, [r7, #12]
 800328e:	4b0d      	ldr	r3, [pc, #52]	@ (80032c4 <HAL_TIM_Base_MspInit+0x10c>)
 8003290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003292:	4a0c      	ldr	r2, [pc, #48]	@ (80032c4 <HAL_TIM_Base_MspInit+0x10c>)
 8003294:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003298:	6453      	str	r3, [r2, #68]	@ 0x44
 800329a:	4b0a      	ldr	r3, [pc, #40]	@ (80032c4 <HAL_TIM_Base_MspInit+0x10c>)
 800329c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800329e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032a2:	60fb      	str	r3, [r7, #12]
 80032a4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 80032a6:	2200      	movs	r2, #0
 80032a8:	2105      	movs	r1, #5
 80032aa:	201a      	movs	r0, #26
 80032ac:	f000 fdf6 	bl	8003e9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80032b0:	201a      	movs	r0, #26
 80032b2:	f000 fe0f 	bl	8003ed4 <HAL_NVIC_EnableIRQ>
}
 80032b6:	bf00      	nop
 80032b8:	3730      	adds	r7, #48	@ 0x30
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40000400 	.word	0x40000400
 80032c4:	40023800 	.word	0x40023800
 80032c8:	40020000 	.word	0x40020000
 80032cc:	40020400 	.word	0x40020400
 80032d0:	40014800 	.word	0x40014800

080032d4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a0b      	ldr	r2, [pc, #44]	@ (8003310 <HAL_TIM_PWM_MspInit+0x3c>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d10d      	bne.n	8003302 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003314 <HAL_TIM_PWM_MspInit+0x40>)
 80032ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ee:	4a09      	ldr	r2, [pc, #36]	@ (8003314 <HAL_TIM_PWM_MspInit+0x40>)
 80032f0:	f043 0304 	orr.w	r3, r3, #4
 80032f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80032f6:	4b07      	ldr	r3, [pc, #28]	@ (8003314 <HAL_TIM_PWM_MspInit+0x40>)
 80032f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fa:	f003 0304 	and.w	r3, r3, #4
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003302:	bf00      	nop
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	40000800 	.word	0x40000800
 8003314:	40023800 	.word	0x40023800

08003318 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b088      	sub	sp, #32
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003320:	f107 030c 	add.w	r3, r7, #12
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	605a      	str	r2, [r3, #4]
 800332a:	609a      	str	r2, [r3, #8]
 800332c:	60da      	str	r2, [r3, #12]
 800332e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a12      	ldr	r2, [pc, #72]	@ (8003380 <HAL_TIM_MspPostInit+0x68>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d11e      	bne.n	8003378 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800333a:	2300      	movs	r3, #0
 800333c:	60bb      	str	r3, [r7, #8]
 800333e:	4b11      	ldr	r3, [pc, #68]	@ (8003384 <HAL_TIM_MspPostInit+0x6c>)
 8003340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003342:	4a10      	ldr	r2, [pc, #64]	@ (8003384 <HAL_TIM_MspPostInit+0x6c>)
 8003344:	f043 0302 	orr.w	r3, r3, #2
 8003348:	6313      	str	r3, [r2, #48]	@ 0x30
 800334a:	4b0e      	ldr	r3, [pc, #56]	@ (8003384 <HAL_TIM_MspPostInit+0x6c>)
 800334c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	60bb      	str	r3, [r7, #8]
 8003354:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = OUT1_Pin|OUT2_Pin|OUT3_Pin|OUT4_Pin;
 8003356:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800335a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800335c:	2302      	movs	r3, #2
 800335e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003360:	2300      	movs	r3, #0
 8003362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003364:	2303      	movs	r3, #3
 8003366:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003368:	2302      	movs	r3, #2
 800336a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800336c:	f107 030c 	add.w	r3, r7, #12
 8003370:	4619      	mov	r1, r3
 8003372:	4805      	ldr	r0, [pc, #20]	@ (8003388 <HAL_TIM_MspPostInit+0x70>)
 8003374:	f001 f92c 	bl	80045d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003378:	bf00      	nop
 800337a:	3720      	adds	r7, #32
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	40000800 	.word	0x40000800
 8003384:	40023800 	.word	0x40023800
 8003388:	40020400 	.word	0x40020400

0800338c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003390:	4b11      	ldr	r3, [pc, #68]	@ (80033d8 <MX_USART1_UART_Init+0x4c>)
 8003392:	4a12      	ldr	r2, [pc, #72]	@ (80033dc <MX_USART1_UART_Init+0x50>)
 8003394:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003396:	4b10      	ldr	r3, [pc, #64]	@ (80033d8 <MX_USART1_UART_Init+0x4c>)
 8003398:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800339c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800339e:	4b0e      	ldr	r3, [pc, #56]	@ (80033d8 <MX_USART1_UART_Init+0x4c>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80033a4:	4b0c      	ldr	r3, [pc, #48]	@ (80033d8 <MX_USART1_UART_Init+0x4c>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80033aa:	4b0b      	ldr	r3, [pc, #44]	@ (80033d8 <MX_USART1_UART_Init+0x4c>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80033b0:	4b09      	ldr	r3, [pc, #36]	@ (80033d8 <MX_USART1_UART_Init+0x4c>)
 80033b2:	220c      	movs	r2, #12
 80033b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033b6:	4b08      	ldr	r3, [pc, #32]	@ (80033d8 <MX_USART1_UART_Init+0x4c>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80033bc:	4b06      	ldr	r3, [pc, #24]	@ (80033d8 <MX_USART1_UART_Init+0x4c>)
 80033be:	2200      	movs	r2, #0
 80033c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80033c2:	4805      	ldr	r0, [pc, #20]	@ (80033d8 <MX_USART1_UART_Init+0x4c>)
 80033c4:	f004 fa3c 	bl	8007840 <HAL_UART_Init>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80033ce:	f7ff fa39 	bl	8002844 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80033d2:	bf00      	nop
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	200004ac 	.word	0x200004ac
 80033dc:	40011000 	.word	0x40011000

080033e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b08a      	sub	sp, #40	@ 0x28
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e8:	f107 0314 	add.w	r3, r7, #20
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	605a      	str	r2, [r3, #4]
 80033f2:	609a      	str	r2, [r3, #8]
 80033f4:	60da      	str	r2, [r3, #12]
 80033f6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a19      	ldr	r2, [pc, #100]	@ (8003464 <HAL_UART_MspInit+0x84>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d12c      	bne.n	800345c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003402:	2300      	movs	r3, #0
 8003404:	613b      	str	r3, [r7, #16]
 8003406:	4b18      	ldr	r3, [pc, #96]	@ (8003468 <HAL_UART_MspInit+0x88>)
 8003408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800340a:	4a17      	ldr	r2, [pc, #92]	@ (8003468 <HAL_UART_MspInit+0x88>)
 800340c:	f043 0310 	orr.w	r3, r3, #16
 8003410:	6453      	str	r3, [r2, #68]	@ 0x44
 8003412:	4b15      	ldr	r3, [pc, #84]	@ (8003468 <HAL_UART_MspInit+0x88>)
 8003414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003416:	f003 0310 	and.w	r3, r3, #16
 800341a:	613b      	str	r3, [r7, #16]
 800341c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800341e:	2300      	movs	r3, #0
 8003420:	60fb      	str	r3, [r7, #12]
 8003422:	4b11      	ldr	r3, [pc, #68]	@ (8003468 <HAL_UART_MspInit+0x88>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003426:	4a10      	ldr	r2, [pc, #64]	@ (8003468 <HAL_UART_MspInit+0x88>)
 8003428:	f043 0301 	orr.w	r3, r3, #1
 800342c:	6313      	str	r3, [r2, #48]	@ 0x30
 800342e:	4b0e      	ldr	r3, [pc, #56]	@ (8003468 <HAL_UART_MspInit+0x88>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TEL_TX_Pin|TEL_RX_Pin;
 800343a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800343e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003440:	2302      	movs	r3, #2
 8003442:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003444:	2300      	movs	r3, #0
 8003446:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003448:	2303      	movs	r3, #3
 800344a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800344c:	2307      	movs	r3, #7
 800344e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003450:	f107 0314 	add.w	r3, r7, #20
 8003454:	4619      	mov	r1, r3
 8003456:	4805      	ldr	r0, [pc, #20]	@ (800346c <HAL_UART_MspInit+0x8c>)
 8003458:	f001 f8ba 	bl	80045d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800345c:	bf00      	nop
 800345e:	3728      	adds	r7, #40	@ 0x28
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40011000 	.word	0x40011000
 8003468:	40023800 	.word	0x40023800
 800346c:	40020000 	.word	0x40020000

08003470 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003470:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80034a8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003474:	f7ff fd78 	bl	8002f68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003478:	480c      	ldr	r0, [pc, #48]	@ (80034ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800347a:	490d      	ldr	r1, [pc, #52]	@ (80034b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800347c:	4a0d      	ldr	r2, [pc, #52]	@ (80034b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800347e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003480:	e002      	b.n	8003488 <LoopCopyDataInit>

08003482 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003482:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003484:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003486:	3304      	adds	r3, #4

08003488 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003488:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800348a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800348c:	d3f9      	bcc.n	8003482 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800348e:	4a0a      	ldr	r2, [pc, #40]	@ (80034b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003490:	4c0a      	ldr	r4, [pc, #40]	@ (80034bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8003492:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003494:	e001      	b.n	800349a <LoopFillZerobss>

08003496 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003498:	3204      	adds	r2, #4

0800349a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800349a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800349c:	d3fb      	bcc.n	8003496 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800349e:	f008 ff1b 	bl	800c2d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034a2:	f7ff f935 	bl	8002710 <main>
  bx  lr    
 80034a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80034a8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80034ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034b0:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80034b4:	0800eb60 	.word	0x0800eb60
  ldr r2, =_sbss
 80034b8:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80034bc:	20005090 	.word	0x20005090

080034c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034c0:	e7fe      	b.n	80034c0 <ADC_IRQHandler>
	...

080034c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80034c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003504 <HAL_Init+0x40>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003504 <HAL_Init+0x40>)
 80034ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80034d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80034d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003504 <HAL_Init+0x40>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a0a      	ldr	r2, [pc, #40]	@ (8003504 <HAL_Init+0x40>)
 80034da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80034de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034e0:	4b08      	ldr	r3, [pc, #32]	@ (8003504 <HAL_Init+0x40>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a07      	ldr	r2, [pc, #28]	@ (8003504 <HAL_Init+0x40>)
 80034e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034ec:	2003      	movs	r0, #3
 80034ee:	f000 fcca 	bl	8003e86 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034f2:	200f      	movs	r0, #15
 80034f4:	f7ff f9d8 	bl	80028a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034f8:	f7ff f9aa 	bl	8002850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	40023c00 	.word	0x40023c00

08003508 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800350c:	4b06      	ldr	r3, [pc, #24]	@ (8003528 <HAL_IncTick+0x20>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	461a      	mov	r2, r3
 8003512:	4b06      	ldr	r3, [pc, #24]	@ (800352c <HAL_IncTick+0x24>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4413      	add	r3, r2
 8003518:	4a04      	ldr	r2, [pc, #16]	@ (800352c <HAL_IncTick+0x24>)
 800351a:	6013      	str	r3, [r2, #0]
}
 800351c:	bf00      	nop
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	20000028 	.word	0x20000028
 800352c:	200004f4 	.word	0x200004f4

08003530 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  return uwTick;
 8003534:	4b03      	ldr	r3, [pc, #12]	@ (8003544 <HAL_GetTick+0x14>)
 8003536:	681b      	ldr	r3, [r3, #0]
}
 8003538:	4618      	mov	r0, r3
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	200004f4 	.word	0x200004f4

08003548 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003550:	2300      	movs	r3, #0
 8003552:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e033      	b.n	80035c6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003562:	2b00      	cmp	r3, #0
 8003564:	d109      	bne.n	800357a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7fe fbe8 	bl	8001d3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357e:	f003 0310 	and.w	r3, r3, #16
 8003582:	2b00      	cmp	r3, #0
 8003584:	d118      	bne.n	80035b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800358e:	f023 0302 	bic.w	r3, r3, #2
 8003592:	f043 0202 	orr.w	r2, r3, #2
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 fa48 	bl	8003a30 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035aa:	f023 0303 	bic.w	r3, r3, #3
 80035ae:	f043 0201 	orr.w	r2, r3, #1
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	641a      	str	r2, [r3, #64]	@ 0x40
 80035b6:	e001      	b.n	80035bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80035c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
	...

080035d0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80035dc:	2300      	movs	r3, #0
 80035de:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d101      	bne.n	80035ee <HAL_ADC_Start_DMA+0x1e>
 80035ea:	2302      	movs	r3, #2
 80035ec:	e0ce      	b.n	800378c <HAL_ADC_Start_DMA+0x1bc>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b01      	cmp	r3, #1
 8003602:	d018      	beq.n	8003636 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f042 0201 	orr.w	r2, r2, #1
 8003612:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003614:	4b5f      	ldr	r3, [pc, #380]	@ (8003794 <HAL_ADC_Start_DMA+0x1c4>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a5f      	ldr	r2, [pc, #380]	@ (8003798 <HAL_ADC_Start_DMA+0x1c8>)
 800361a:	fba2 2303 	umull	r2, r3, r2, r3
 800361e:	0c9a      	lsrs	r2, r3, #18
 8003620:	4613      	mov	r3, r2
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	4413      	add	r3, r2
 8003626:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003628:	e002      	b.n	8003630 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	3b01      	subs	r3, #1
 800362e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1f9      	bne.n	800362a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003640:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003644:	d107      	bne.n	8003656 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003654:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b01      	cmp	r3, #1
 8003662:	f040 8086 	bne.w	8003772 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800366e:	f023 0301 	bic.w	r3, r3, #1
 8003672:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003684:	2b00      	cmp	r3, #0
 8003686:	d007      	beq.n	8003698 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003690:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036a4:	d106      	bne.n	80036b4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036aa:	f023 0206 	bic.w	r2, r3, #6
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	645a      	str	r2, [r3, #68]	@ 0x44
 80036b2:	e002      	b.n	80036ba <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036c2:	4b36      	ldr	r3, [pc, #216]	@ (800379c <HAL_ADC_Start_DMA+0x1cc>)
 80036c4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ca:	4a35      	ldr	r2, [pc, #212]	@ (80037a0 <HAL_ADC_Start_DMA+0x1d0>)
 80036cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d2:	4a34      	ldr	r2, [pc, #208]	@ (80037a4 <HAL_ADC_Start_DMA+0x1d4>)
 80036d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036da:	4a33      	ldr	r2, [pc, #204]	@ (80037a8 <HAL_ADC_Start_DMA+0x1d8>)
 80036dc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80036e6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	685a      	ldr	r2, [r3, #4]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80036f6:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689a      	ldr	r2, [r3, #8]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003706:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	334c      	adds	r3, #76	@ 0x4c
 8003712:	4619      	mov	r1, r3
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f000 fc98 	bl	800404c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f003 031f 	and.w	r3, r3, #31
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10f      	bne.n	8003748 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d129      	bne.n	800378a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003744:	609a      	str	r2, [r3, #8]
 8003746:	e020      	b.n	800378a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a17      	ldr	r2, [pc, #92]	@ (80037ac <HAL_ADC_Start_DMA+0x1dc>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d11b      	bne.n	800378a <HAL_ADC_Start_DMA+0x1ba>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d114      	bne.n	800378a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689a      	ldr	r2, [r3, #8]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800376e:	609a      	str	r2, [r3, #8]
 8003770:	e00b      	b.n	800378a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003776:	f043 0210 	orr.w	r2, r3, #16
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003782:	f043 0201 	orr.w	r2, r3, #1
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3718      	adds	r7, #24
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	20000020 	.word	0x20000020
 8003798:	431bde83 	.word	0x431bde83
 800379c:	40012300 	.word	0x40012300
 80037a0:	08003c29 	.word	0x08003c29
 80037a4:	08003ce3 	.word	0x08003ce3
 80037a8:	08003cff 	.word	0x08003cff
 80037ac:	40012000 	.word	0x40012000

080037b0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80037f6:	2300      	movs	r3, #0
 80037f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_ADC_ConfigChannel+0x1c>
 8003804:	2302      	movs	r3, #2
 8003806:	e105      	b.n	8003a14 <HAL_ADC_ConfigChannel+0x228>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2b09      	cmp	r3, #9
 8003816:	d925      	bls.n	8003864 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68d9      	ldr	r1, [r3, #12]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	b29b      	uxth	r3, r3
 8003824:	461a      	mov	r2, r3
 8003826:	4613      	mov	r3, r2
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	4413      	add	r3, r2
 800382c:	3b1e      	subs	r3, #30
 800382e:	2207      	movs	r2, #7
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	43da      	mvns	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	400a      	ands	r2, r1
 800383c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68d9      	ldr	r1, [r3, #12]
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	b29b      	uxth	r3, r3
 800384e:	4618      	mov	r0, r3
 8003850:	4603      	mov	r3, r0
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	4403      	add	r3, r0
 8003856:	3b1e      	subs	r3, #30
 8003858:	409a      	lsls	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	60da      	str	r2, [r3, #12]
 8003862:	e022      	b.n	80038aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6919      	ldr	r1, [r3, #16]
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	b29b      	uxth	r3, r3
 8003870:	461a      	mov	r2, r3
 8003872:	4613      	mov	r3, r2
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	4413      	add	r3, r2
 8003878:	2207      	movs	r2, #7
 800387a:	fa02 f303 	lsl.w	r3, r2, r3
 800387e:	43da      	mvns	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	400a      	ands	r2, r1
 8003886:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6919      	ldr	r1, [r3, #16]
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	b29b      	uxth	r3, r3
 8003898:	4618      	mov	r0, r3
 800389a:	4603      	mov	r3, r0
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	4403      	add	r3, r0
 80038a0:	409a      	lsls	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	2b06      	cmp	r3, #6
 80038b0:	d824      	bhi.n	80038fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	4613      	mov	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4413      	add	r3, r2
 80038c2:	3b05      	subs	r3, #5
 80038c4:	221f      	movs	r2, #31
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	43da      	mvns	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	400a      	ands	r2, r1
 80038d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	b29b      	uxth	r3, r3
 80038e0:	4618      	mov	r0, r3
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	4613      	mov	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4413      	add	r3, r2
 80038ec:	3b05      	subs	r3, #5
 80038ee:	fa00 f203 	lsl.w	r2, r0, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	430a      	orrs	r2, r1
 80038f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80038fa:	e04c      	b.n	8003996 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	2b0c      	cmp	r3, #12
 8003902:	d824      	bhi.n	800394e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	4613      	mov	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	4413      	add	r3, r2
 8003914:	3b23      	subs	r3, #35	@ 0x23
 8003916:	221f      	movs	r2, #31
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	43da      	mvns	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	400a      	ands	r2, r1
 8003924:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	b29b      	uxth	r3, r3
 8003932:	4618      	mov	r0, r3
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	4613      	mov	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	3b23      	subs	r3, #35	@ 0x23
 8003940:	fa00 f203 	lsl.w	r2, r0, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	631a      	str	r2, [r3, #48]	@ 0x30
 800394c:	e023      	b.n	8003996 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	4613      	mov	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	4413      	add	r3, r2
 800395e:	3b41      	subs	r3, #65	@ 0x41
 8003960:	221f      	movs	r2, #31
 8003962:	fa02 f303 	lsl.w	r3, r2, r3
 8003966:	43da      	mvns	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	400a      	ands	r2, r1
 800396e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	b29b      	uxth	r3, r3
 800397c:	4618      	mov	r0, r3
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	4613      	mov	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4413      	add	r3, r2
 8003988:	3b41      	subs	r3, #65	@ 0x41
 800398a:	fa00 f203 	lsl.w	r2, r0, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003996:	4b22      	ldr	r3, [pc, #136]	@ (8003a20 <HAL_ADC_ConfigChannel+0x234>)
 8003998:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a21      	ldr	r2, [pc, #132]	@ (8003a24 <HAL_ADC_ConfigChannel+0x238>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d109      	bne.n	80039b8 <HAL_ADC_ConfigChannel+0x1cc>
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2b12      	cmp	r3, #18
 80039aa:	d105      	bne.n	80039b8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a19      	ldr	r2, [pc, #100]	@ (8003a24 <HAL_ADC_ConfigChannel+0x238>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d123      	bne.n	8003a0a <HAL_ADC_ConfigChannel+0x21e>
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2b10      	cmp	r3, #16
 80039c8:	d003      	beq.n	80039d2 <HAL_ADC_ConfigChannel+0x1e6>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2b11      	cmp	r3, #17
 80039d0:	d11b      	bne.n	8003a0a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2b10      	cmp	r3, #16
 80039e4:	d111      	bne.n	8003a0a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80039e6:	4b10      	ldr	r3, [pc, #64]	@ (8003a28 <HAL_ADC_ConfigChannel+0x23c>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a10      	ldr	r2, [pc, #64]	@ (8003a2c <HAL_ADC_ConfigChannel+0x240>)
 80039ec:	fba2 2303 	umull	r2, r3, r2, r3
 80039f0:	0c9a      	lsrs	r2, r3, #18
 80039f2:	4613      	mov	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4413      	add	r3, r2
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80039fc:	e002      	b.n	8003a04 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	3b01      	subs	r3, #1
 8003a02:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1f9      	bne.n	80039fe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3714      	adds	r7, #20
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	40012300 	.word	0x40012300
 8003a24:	40012000 	.word	0x40012000
 8003a28:	20000020 	.word	0x20000020
 8003a2c:	431bde83 	.word	0x431bde83

08003a30 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a38:	4b79      	ldr	r3, [pc, #484]	@ (8003c20 <ADC_Init+0x1f0>)
 8003a3a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	431a      	orrs	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6859      	ldr	r1, [r3, #4]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	021a      	lsls	r2, r3, #8
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003a88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6859      	ldr	r1, [r3, #4]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689a      	ldr	r2, [r3, #8]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003aaa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6899      	ldr	r1, [r3, #8]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68da      	ldr	r2, [r3, #12]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ac2:	4a58      	ldr	r2, [pc, #352]	@ (8003c24 <ADC_Init+0x1f4>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d022      	beq.n	8003b0e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689a      	ldr	r2, [r3, #8]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003ad6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6899      	ldr	r1, [r3, #8]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003af8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	6899      	ldr	r1, [r3, #8]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	609a      	str	r2, [r3, #8]
 8003b0c:	e00f      	b.n	8003b2e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003b1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003b2c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 0202 	bic.w	r2, r2, #2
 8003b3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	6899      	ldr	r1, [r3, #8]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	7e1b      	ldrb	r3, [r3, #24]
 8003b48:	005a      	lsls	r2, r3, #1
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d01b      	beq.n	8003b94 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b6a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003b7a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6859      	ldr	r1, [r3, #4]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b86:	3b01      	subs	r3, #1
 8003b88:	035a      	lsls	r2, r3, #13
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	605a      	str	r2, [r3, #4]
 8003b92:	e007      	b.n	8003ba4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685a      	ldr	r2, [r3, #4]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ba2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003bb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	051a      	lsls	r2, r3, #20
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003bd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6899      	ldr	r1, [r3, #8]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003be6:	025a      	lsls	r2, r3, #9
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	430a      	orrs	r2, r1
 8003bee:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689a      	ldr	r2, [r3, #8]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bfe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6899      	ldr	r1, [r3, #8]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	029a      	lsls	r2, r3, #10
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	609a      	str	r2, [r3, #8]
}
 8003c14:	bf00      	nop
 8003c16:	3714      	adds	r7, #20
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	40012300 	.word	0x40012300
 8003c24:	0f000001 	.word	0x0f000001

08003c28 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c34:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d13c      	bne.n	8003cbc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c46:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d12b      	bne.n	8003cb4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d127      	bne.n	8003cb4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c6a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d006      	beq.n	8003c80 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d119      	bne.n	8003cb4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 0220 	bic.w	r2, r2, #32
 8003c8e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d105      	bne.n	8003cb4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cac:	f043 0201 	orr.w	r2, r3, #1
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f7ff fd7b 	bl	80037b0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003cba:	e00e      	b.n	8003cda <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc0:	f003 0310 	and.w	r3, r3, #16
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d003      	beq.n	8003cd0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f7ff fd85 	bl	80037d8 <HAL_ADC_ErrorCallback>
}
 8003cce:	e004      	b.n	8003cda <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	4798      	blx	r3
}
 8003cda:	bf00      	nop
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b084      	sub	sp, #16
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cee:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f7ff fd67 	bl	80037c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003cf6:	bf00      	nop
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b084      	sub	sp, #16
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d0a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2240      	movs	r2, #64	@ 0x40
 8003d10:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d16:	f043 0204 	orr.w	r2, r3, #4
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f7ff fd5a 	bl	80037d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d24:	bf00      	nop
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f003 0307 	and.w	r3, r3, #7
 8003d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8003d70 <__NVIC_SetPriorityGrouping+0x44>)
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d48:	4013      	ands	r3, r2
 8003d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003d58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d5e:	4a04      	ldr	r2, [pc, #16]	@ (8003d70 <__NVIC_SetPriorityGrouping+0x44>)
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	60d3      	str	r3, [r2, #12]
}
 8003d64:	bf00      	nop
 8003d66:	3714      	adds	r7, #20
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	e000ed00 	.word	0xe000ed00

08003d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d74:	b480      	push	{r7}
 8003d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d78:	4b04      	ldr	r3, [pc, #16]	@ (8003d8c <__NVIC_GetPriorityGrouping+0x18>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	0a1b      	lsrs	r3, r3, #8
 8003d7e:	f003 0307 	and.w	r3, r3, #7
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr
 8003d8c:	e000ed00 	.word	0xe000ed00

08003d90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	4603      	mov	r3, r0
 8003d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	db0b      	blt.n	8003dba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003da2:	79fb      	ldrb	r3, [r7, #7]
 8003da4:	f003 021f 	and.w	r2, r3, #31
 8003da8:	4907      	ldr	r1, [pc, #28]	@ (8003dc8 <__NVIC_EnableIRQ+0x38>)
 8003daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dae:	095b      	lsrs	r3, r3, #5
 8003db0:	2001      	movs	r0, #1
 8003db2:	fa00 f202 	lsl.w	r2, r0, r2
 8003db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	e000e100 	.word	0xe000e100

08003dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	6039      	str	r1, [r7, #0]
 8003dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	db0a      	blt.n	8003df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	490c      	ldr	r1, [pc, #48]	@ (8003e18 <__NVIC_SetPriority+0x4c>)
 8003de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dea:	0112      	lsls	r2, r2, #4
 8003dec:	b2d2      	uxtb	r2, r2
 8003dee:	440b      	add	r3, r1
 8003df0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003df4:	e00a      	b.n	8003e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	b2da      	uxtb	r2, r3
 8003dfa:	4908      	ldr	r1, [pc, #32]	@ (8003e1c <__NVIC_SetPriority+0x50>)
 8003dfc:	79fb      	ldrb	r3, [r7, #7]
 8003dfe:	f003 030f 	and.w	r3, r3, #15
 8003e02:	3b04      	subs	r3, #4
 8003e04:	0112      	lsls	r2, r2, #4
 8003e06:	b2d2      	uxtb	r2, r2
 8003e08:	440b      	add	r3, r1
 8003e0a:	761a      	strb	r2, [r3, #24]
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	e000e100 	.word	0xe000e100
 8003e1c:	e000ed00 	.word	0xe000ed00

08003e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b089      	sub	sp, #36	@ 0x24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f003 0307 	and.w	r3, r3, #7
 8003e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	f1c3 0307 	rsb	r3, r3, #7
 8003e3a:	2b04      	cmp	r3, #4
 8003e3c:	bf28      	it	cs
 8003e3e:	2304      	movcs	r3, #4
 8003e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	3304      	adds	r3, #4
 8003e46:	2b06      	cmp	r3, #6
 8003e48:	d902      	bls.n	8003e50 <NVIC_EncodePriority+0x30>
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	3b03      	subs	r3, #3
 8003e4e:	e000      	b.n	8003e52 <NVIC_EncodePriority+0x32>
 8003e50:	2300      	movs	r3, #0
 8003e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5e:	43da      	mvns	r2, r3
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	401a      	ands	r2, r3
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e68:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e72:	43d9      	mvns	r1, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e78:	4313      	orrs	r3, r2
         );
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3724      	adds	r7, #36	@ 0x24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b082      	sub	sp, #8
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7ff ff4c 	bl	8003d2c <__NVIC_SetPriorityGrouping>
}
 8003e94:	bf00      	nop
 8003e96:	3708      	adds	r7, #8
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
 8003ea8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003eae:	f7ff ff61 	bl	8003d74 <__NVIC_GetPriorityGrouping>
 8003eb2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	68b9      	ldr	r1, [r7, #8]
 8003eb8:	6978      	ldr	r0, [r7, #20]
 8003eba:	f7ff ffb1 	bl	8003e20 <NVIC_EncodePriority>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ec4:	4611      	mov	r1, r2
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7ff ff80 	bl	8003dcc <__NVIC_SetPriority>
}
 8003ecc:	bf00      	nop
 8003ece:	3718      	adds	r7, #24
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	4603      	mov	r3, r0
 8003edc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff ff54 	bl	8003d90 <__NVIC_EnableIRQ>
}
 8003ee8:	bf00      	nop
 8003eea:	3708      	adds	r7, #8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003efc:	f7ff fb18 	bl	8003530 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d101      	bne.n	8003f0c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e099      	b.n	8004040 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f022 0201 	bic.w	r2, r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f2c:	e00f      	b.n	8003f4e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f2e:	f7ff faff 	bl	8003530 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b05      	cmp	r3, #5
 8003f3a:	d908      	bls.n	8003f4e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2203      	movs	r2, #3
 8003f46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e078      	b.n	8004040 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1e8      	bne.n	8003f2e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	4b38      	ldr	r3, [pc, #224]	@ (8004048 <HAL_DMA_Init+0x158>)
 8003f68:	4013      	ands	r3, r2
 8003f6a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f9a:	697a      	ldr	r2, [r7, #20]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa4:	2b04      	cmp	r3, #4
 8003fa6:	d107      	bne.n	8003fb8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	f023 0307 	bic.w	r3, r3, #7
 8003fce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fde:	2b04      	cmp	r3, #4
 8003fe0:	d117      	bne.n	8004012 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00e      	beq.n	8004012 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 fa6f 	bl	80044d8 <DMA_CheckFifoParam>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d008      	beq.n	8004012 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2240      	movs	r2, #64	@ 0x40
 8004004:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800400e:	2301      	movs	r3, #1
 8004010:	e016      	b.n	8004040 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 fa26 	bl	800446c <DMA_CalcBaseAndBitshift>
 8004020:	4603      	mov	r3, r0
 8004022:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004028:	223f      	movs	r2, #63	@ 0x3f
 800402a:	409a      	lsls	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3718      	adds	r7, #24
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	f010803f 	.word	0xf010803f

0800404c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
 8004058:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800405a:	2300      	movs	r3, #0
 800405c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004062:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800406a:	2b01      	cmp	r3, #1
 800406c:	d101      	bne.n	8004072 <HAL_DMA_Start_IT+0x26>
 800406e:	2302      	movs	r3, #2
 8004070:	e040      	b.n	80040f4 <HAL_DMA_Start_IT+0xa8>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b01      	cmp	r3, #1
 8004084:	d12f      	bne.n	80040e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2202      	movs	r2, #2
 800408a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	68b9      	ldr	r1, [r7, #8]
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 f9b8 	bl	8004410 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040a4:	223f      	movs	r2, #63	@ 0x3f
 80040a6:	409a      	lsls	r2, r3
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f042 0216 	orr.w	r2, r2, #22
 80040ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d007      	beq.n	80040d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f042 0208 	orr.w	r2, r2, #8
 80040d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f042 0201 	orr.w	r2, r2, #1
 80040e2:	601a      	str	r2, [r3, #0]
 80040e4:	e005      	b.n	80040f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80040ee:	2302      	movs	r3, #2
 80040f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80040f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3718      	adds	r7, #24
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004104:	2300      	movs	r3, #0
 8004106:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004108:	4b8e      	ldr	r3, [pc, #568]	@ (8004344 <HAL_DMA_IRQHandler+0x248>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a8e      	ldr	r2, [pc, #568]	@ (8004348 <HAL_DMA_IRQHandler+0x24c>)
 800410e:	fba2 2303 	umull	r2, r3, r2, r3
 8004112:	0a9b      	lsrs	r3, r3, #10
 8004114:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800411a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004126:	2208      	movs	r2, #8
 8004128:	409a      	lsls	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	4013      	ands	r3, r2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d01a      	beq.n	8004168 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b00      	cmp	r3, #0
 800413e:	d013      	beq.n	8004168 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 0204 	bic.w	r2, r2, #4
 800414e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004154:	2208      	movs	r2, #8
 8004156:	409a      	lsls	r2, r3
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004160:	f043 0201 	orr.w	r2, r3, #1
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800416c:	2201      	movs	r2, #1
 800416e:	409a      	lsls	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4013      	ands	r3, r2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d012      	beq.n	800419e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00b      	beq.n	800419e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800418a:	2201      	movs	r2, #1
 800418c:	409a      	lsls	r2, r3
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004196:	f043 0202 	orr.w	r2, r3, #2
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041a2:	2204      	movs	r2, #4
 80041a4:	409a      	lsls	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	4013      	ands	r3, r2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d012      	beq.n	80041d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00b      	beq.n	80041d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041c0:	2204      	movs	r2, #4
 80041c2:	409a      	lsls	r2, r3
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041cc:	f043 0204 	orr.w	r2, r3, #4
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041d8:	2210      	movs	r2, #16
 80041da:	409a      	lsls	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	4013      	ands	r3, r2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d043      	beq.n	800426c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0308 	and.w	r3, r3, #8
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d03c      	beq.n	800426c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041f6:	2210      	movs	r2, #16
 80041f8:	409a      	lsls	r2, r3
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d018      	beq.n	800423e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d108      	bne.n	800422c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421e:	2b00      	cmp	r3, #0
 8004220:	d024      	beq.n	800426c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	4798      	blx	r3
 800422a:	e01f      	b.n	800426c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004230:	2b00      	cmp	r3, #0
 8004232:	d01b      	beq.n	800426c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	4798      	blx	r3
 800423c:	e016      	b.n	800426c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004248:	2b00      	cmp	r3, #0
 800424a:	d107      	bne.n	800425c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 0208 	bic.w	r2, r2, #8
 800425a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004260:	2b00      	cmp	r3, #0
 8004262:	d003      	beq.n	800426c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004270:	2220      	movs	r2, #32
 8004272:	409a      	lsls	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	4013      	ands	r3, r2
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 808f 	beq.w	800439c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0310 	and.w	r3, r3, #16
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 8087 	beq.w	800439c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004292:	2220      	movs	r2, #32
 8004294:	409a      	lsls	r2, r3
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b05      	cmp	r3, #5
 80042a4:	d136      	bne.n	8004314 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f022 0216 	bic.w	r2, r2, #22
 80042b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	695a      	ldr	r2, [r3, #20]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80042c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d103      	bne.n	80042d6 <HAL_DMA_IRQHandler+0x1da>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d007      	beq.n	80042e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 0208 	bic.w	r2, r2, #8
 80042e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ea:	223f      	movs	r2, #63	@ 0x3f
 80042ec:	409a      	lsls	r2, r3
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004306:	2b00      	cmp	r3, #0
 8004308:	d07e      	beq.n	8004408 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	4798      	blx	r3
        }
        return;
 8004312:	e079      	b.n	8004408 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d01d      	beq.n	800435e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10d      	bne.n	800434c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004334:	2b00      	cmp	r3, #0
 8004336:	d031      	beq.n	800439c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	4798      	blx	r3
 8004340:	e02c      	b.n	800439c <HAL_DMA_IRQHandler+0x2a0>
 8004342:	bf00      	nop
 8004344:	20000020 	.word	0x20000020
 8004348:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004350:	2b00      	cmp	r3, #0
 8004352:	d023      	beq.n	800439c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	4798      	blx	r3
 800435c:	e01e      	b.n	800439c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10f      	bne.n	800438c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f022 0210 	bic.w	r2, r2, #16
 800437a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004390:	2b00      	cmp	r3, #0
 8004392:	d003      	beq.n	800439c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d032      	beq.n	800440a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043a8:	f003 0301 	and.w	r3, r3, #1
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d022      	beq.n	80043f6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2205      	movs	r2, #5
 80043b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 0201 	bic.w	r2, r2, #1
 80043c6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	3301      	adds	r3, #1
 80043cc:	60bb      	str	r3, [r7, #8]
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d307      	bcc.n	80043e4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1f2      	bne.n	80043c8 <HAL_DMA_IRQHandler+0x2cc>
 80043e2:	e000      	b.n	80043e6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80043e4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d005      	beq.n	800440a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	4798      	blx	r3
 8004406:	e000      	b.n	800440a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004408:	bf00      	nop
    }
  }
}
 800440a:	3718      	adds	r7, #24
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
 800441c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800442c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	2b40      	cmp	r3, #64	@ 0x40
 800443c:	d108      	bne.n	8004450 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800444e:	e007      	b.n	8004460 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68ba      	ldr	r2, [r7, #8]
 8004456:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	60da      	str	r2, [r3, #12]
}
 8004460:	bf00      	nop
 8004462:	3714      	adds	r7, #20
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	b2db      	uxtb	r3, r3
 800447a:	3b10      	subs	r3, #16
 800447c:	4a14      	ldr	r2, [pc, #80]	@ (80044d0 <DMA_CalcBaseAndBitshift+0x64>)
 800447e:	fba2 2303 	umull	r2, r3, r2, r3
 8004482:	091b      	lsrs	r3, r3, #4
 8004484:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004486:	4a13      	ldr	r2, [pc, #76]	@ (80044d4 <DMA_CalcBaseAndBitshift+0x68>)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	4413      	add	r3, r2
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	461a      	mov	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2b03      	cmp	r3, #3
 8004498:	d909      	bls.n	80044ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80044a2:	f023 0303 	bic.w	r3, r3, #3
 80044a6:	1d1a      	adds	r2, r3, #4
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	659a      	str	r2, [r3, #88]	@ 0x58
 80044ac:	e007      	b.n	80044be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80044b6:	f023 0303 	bic.w	r3, r3, #3
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	aaaaaaab 	.word	0xaaaaaaab
 80044d4:	0800e7d8 	.word	0x0800e7d8

080044d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044e0:	2300      	movs	r3, #0
 80044e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d11f      	bne.n	8004532 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	2b03      	cmp	r3, #3
 80044f6:	d856      	bhi.n	80045a6 <DMA_CheckFifoParam+0xce>
 80044f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004500 <DMA_CheckFifoParam+0x28>)
 80044fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044fe:	bf00      	nop
 8004500:	08004511 	.word	0x08004511
 8004504:	08004523 	.word	0x08004523
 8004508:	08004511 	.word	0x08004511
 800450c:	080045a7 	.word	0x080045a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004514:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d046      	beq.n	80045aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004520:	e043      	b.n	80045aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004526:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800452a:	d140      	bne.n	80045ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004530:	e03d      	b.n	80045ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800453a:	d121      	bne.n	8004580 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	2b03      	cmp	r3, #3
 8004540:	d837      	bhi.n	80045b2 <DMA_CheckFifoParam+0xda>
 8004542:	a201      	add	r2, pc, #4	@ (adr r2, 8004548 <DMA_CheckFifoParam+0x70>)
 8004544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004548:	08004559 	.word	0x08004559
 800454c:	0800455f 	.word	0x0800455f
 8004550:	08004559 	.word	0x08004559
 8004554:	08004571 	.word	0x08004571
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	73fb      	strb	r3, [r7, #15]
      break;
 800455c:	e030      	b.n	80045c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004562:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d025      	beq.n	80045b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800456e:	e022      	b.n	80045b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004574:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004578:	d11f      	bne.n	80045ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800457e:	e01c      	b.n	80045ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	2b02      	cmp	r3, #2
 8004584:	d903      	bls.n	800458e <DMA_CheckFifoParam+0xb6>
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	2b03      	cmp	r3, #3
 800458a:	d003      	beq.n	8004594 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800458c:	e018      	b.n	80045c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	73fb      	strb	r3, [r7, #15]
      break;
 8004592:	e015      	b.n	80045c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004598:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00e      	beq.n	80045be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	73fb      	strb	r3, [r7, #15]
      break;
 80045a4:	e00b      	b.n	80045be <DMA_CheckFifoParam+0xe6>
      break;
 80045a6:	bf00      	nop
 80045a8:	e00a      	b.n	80045c0 <DMA_CheckFifoParam+0xe8>
      break;
 80045aa:	bf00      	nop
 80045ac:	e008      	b.n	80045c0 <DMA_CheckFifoParam+0xe8>
      break;
 80045ae:	bf00      	nop
 80045b0:	e006      	b.n	80045c0 <DMA_CheckFifoParam+0xe8>
      break;
 80045b2:	bf00      	nop
 80045b4:	e004      	b.n	80045c0 <DMA_CheckFifoParam+0xe8>
      break;
 80045b6:	bf00      	nop
 80045b8:	e002      	b.n	80045c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80045ba:	bf00      	nop
 80045bc:	e000      	b.n	80045c0 <DMA_CheckFifoParam+0xe8>
      break;
 80045be:	bf00      	nop
    }
  } 
  
  return status; 
 80045c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3714      	adds	r7, #20
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop

080045d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b089      	sub	sp, #36	@ 0x24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045da:	2300      	movs	r3, #0
 80045dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80045de:	2300      	movs	r3, #0
 80045e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80045e2:	2300      	movs	r3, #0
 80045e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045e6:	2300      	movs	r3, #0
 80045e8:	61fb      	str	r3, [r7, #28]
 80045ea:	e159      	b.n	80048a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80045ec:	2201      	movs	r2, #1
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	fa02 f303 	lsl.w	r3, r2, r3
 80045f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	4013      	ands	r3, r2
 80045fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	429a      	cmp	r2, r3
 8004606:	f040 8148 	bne.w	800489a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f003 0303 	and.w	r3, r3, #3
 8004612:	2b01      	cmp	r3, #1
 8004614:	d005      	beq.n	8004622 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800461e:	2b02      	cmp	r3, #2
 8004620:	d130      	bne.n	8004684 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	2203      	movs	r2, #3
 800462e:	fa02 f303 	lsl.w	r3, r2, r3
 8004632:	43db      	mvns	r3, r3
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	4013      	ands	r3, r2
 8004638:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	68da      	ldr	r2, [r3, #12]
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	005b      	lsls	r3, r3, #1
 8004642:	fa02 f303 	lsl.w	r3, r2, r3
 8004646:	69ba      	ldr	r2, [r7, #24]
 8004648:	4313      	orrs	r3, r2
 800464a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	69ba      	ldr	r2, [r7, #24]
 8004650:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004658:	2201      	movs	r2, #1
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	fa02 f303 	lsl.w	r3, r2, r3
 8004660:	43db      	mvns	r3, r3
 8004662:	69ba      	ldr	r2, [r7, #24]
 8004664:	4013      	ands	r3, r2
 8004666:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	091b      	lsrs	r3, r3, #4
 800466e:	f003 0201 	and.w	r2, r3, #1
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	fa02 f303 	lsl.w	r3, r2, r3
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	4313      	orrs	r3, r2
 800467c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f003 0303 	and.w	r3, r3, #3
 800468c:	2b03      	cmp	r3, #3
 800468e:	d017      	beq.n	80046c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	2203      	movs	r2, #3
 800469c:	fa02 f303 	lsl.w	r3, r2, r3
 80046a0:	43db      	mvns	r3, r3
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	4013      	ands	r3, r2
 80046a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	005b      	lsls	r3, r3, #1
 80046b0:	fa02 f303 	lsl.w	r3, r2, r3
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f003 0303 	and.w	r3, r3, #3
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d123      	bne.n	8004714 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	08da      	lsrs	r2, r3, #3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	3208      	adds	r2, #8
 80046d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	f003 0307 	and.w	r3, r3, #7
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	220f      	movs	r2, #15
 80046e4:	fa02 f303 	lsl.w	r3, r2, r3
 80046e8:	43db      	mvns	r3, r3
 80046ea:	69ba      	ldr	r2, [r7, #24]
 80046ec:	4013      	ands	r3, r2
 80046ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	691a      	ldr	r2, [r3, #16]
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004700:	69ba      	ldr	r2, [r7, #24]
 8004702:	4313      	orrs	r3, r2
 8004704:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	08da      	lsrs	r2, r3, #3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	3208      	adds	r2, #8
 800470e:	69b9      	ldr	r1, [r7, #24]
 8004710:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	2203      	movs	r2, #3
 8004720:	fa02 f303 	lsl.w	r3, r2, r3
 8004724:	43db      	mvns	r3, r3
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	4013      	ands	r3, r2
 800472a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f003 0203 	and.w	r2, r3, #3
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	fa02 f303 	lsl.w	r3, r2, r3
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	4313      	orrs	r3, r2
 8004740:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004750:	2b00      	cmp	r3, #0
 8004752:	f000 80a2 	beq.w	800489a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004756:	2300      	movs	r3, #0
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	4b57      	ldr	r3, [pc, #348]	@ (80048b8 <HAL_GPIO_Init+0x2e8>)
 800475c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800475e:	4a56      	ldr	r2, [pc, #344]	@ (80048b8 <HAL_GPIO_Init+0x2e8>)
 8004760:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004764:	6453      	str	r3, [r2, #68]	@ 0x44
 8004766:	4b54      	ldr	r3, [pc, #336]	@ (80048b8 <HAL_GPIO_Init+0x2e8>)
 8004768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800476a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004772:	4a52      	ldr	r2, [pc, #328]	@ (80048bc <HAL_GPIO_Init+0x2ec>)
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	089b      	lsrs	r3, r3, #2
 8004778:	3302      	adds	r3, #2
 800477a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800477e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	f003 0303 	and.w	r3, r3, #3
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	220f      	movs	r2, #15
 800478a:	fa02 f303 	lsl.w	r3, r2, r3
 800478e:	43db      	mvns	r3, r3
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	4013      	ands	r3, r2
 8004794:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a49      	ldr	r2, [pc, #292]	@ (80048c0 <HAL_GPIO_Init+0x2f0>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d019      	beq.n	80047d2 <HAL_GPIO_Init+0x202>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a48      	ldr	r2, [pc, #288]	@ (80048c4 <HAL_GPIO_Init+0x2f4>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d013      	beq.n	80047ce <HAL_GPIO_Init+0x1fe>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a47      	ldr	r2, [pc, #284]	@ (80048c8 <HAL_GPIO_Init+0x2f8>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d00d      	beq.n	80047ca <HAL_GPIO_Init+0x1fa>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a46      	ldr	r2, [pc, #280]	@ (80048cc <HAL_GPIO_Init+0x2fc>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d007      	beq.n	80047c6 <HAL_GPIO_Init+0x1f6>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a45      	ldr	r2, [pc, #276]	@ (80048d0 <HAL_GPIO_Init+0x300>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d101      	bne.n	80047c2 <HAL_GPIO_Init+0x1f2>
 80047be:	2304      	movs	r3, #4
 80047c0:	e008      	b.n	80047d4 <HAL_GPIO_Init+0x204>
 80047c2:	2307      	movs	r3, #7
 80047c4:	e006      	b.n	80047d4 <HAL_GPIO_Init+0x204>
 80047c6:	2303      	movs	r3, #3
 80047c8:	e004      	b.n	80047d4 <HAL_GPIO_Init+0x204>
 80047ca:	2302      	movs	r3, #2
 80047cc:	e002      	b.n	80047d4 <HAL_GPIO_Init+0x204>
 80047ce:	2301      	movs	r3, #1
 80047d0:	e000      	b.n	80047d4 <HAL_GPIO_Init+0x204>
 80047d2:	2300      	movs	r3, #0
 80047d4:	69fa      	ldr	r2, [r7, #28]
 80047d6:	f002 0203 	and.w	r2, r2, #3
 80047da:	0092      	lsls	r2, r2, #2
 80047dc:	4093      	lsls	r3, r2
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047e4:	4935      	ldr	r1, [pc, #212]	@ (80048bc <HAL_GPIO_Init+0x2ec>)
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	089b      	lsrs	r3, r3, #2
 80047ea:	3302      	adds	r3, #2
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047f2:	4b38      	ldr	r3, [pc, #224]	@ (80048d4 <HAL_GPIO_Init+0x304>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	43db      	mvns	r3, r3
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	4013      	ands	r3, r2
 8004800:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d003      	beq.n	8004816 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800480e:	69ba      	ldr	r2, [r7, #24]
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	4313      	orrs	r3, r2
 8004814:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004816:	4a2f      	ldr	r2, [pc, #188]	@ (80048d4 <HAL_GPIO_Init+0x304>)
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800481c:	4b2d      	ldr	r3, [pc, #180]	@ (80048d4 <HAL_GPIO_Init+0x304>)
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	43db      	mvns	r3, r3
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	4013      	ands	r3, r2
 800482a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d003      	beq.n	8004840 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004838:	69ba      	ldr	r2, [r7, #24]
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	4313      	orrs	r3, r2
 800483e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004840:	4a24      	ldr	r2, [pc, #144]	@ (80048d4 <HAL_GPIO_Init+0x304>)
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004846:	4b23      	ldr	r3, [pc, #140]	@ (80048d4 <HAL_GPIO_Init+0x304>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	43db      	mvns	r3, r3
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	4013      	ands	r3, r2
 8004854:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	4313      	orrs	r3, r2
 8004868:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800486a:	4a1a      	ldr	r2, [pc, #104]	@ (80048d4 <HAL_GPIO_Init+0x304>)
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004870:	4b18      	ldr	r3, [pc, #96]	@ (80048d4 <HAL_GPIO_Init+0x304>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	43db      	mvns	r3, r3
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	4013      	ands	r3, r2
 800487e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d003      	beq.n	8004894 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800488c:	69ba      	ldr	r2, [r7, #24]
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	4313      	orrs	r3, r2
 8004892:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004894:	4a0f      	ldr	r2, [pc, #60]	@ (80048d4 <HAL_GPIO_Init+0x304>)
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	3301      	adds	r3, #1
 800489e:	61fb      	str	r3, [r7, #28]
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	2b0f      	cmp	r3, #15
 80048a4:	f67f aea2 	bls.w	80045ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80048a8:	bf00      	nop
 80048aa:	bf00      	nop
 80048ac:	3724      	adds	r7, #36	@ 0x24
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	40023800 	.word	0x40023800
 80048bc:	40013800 	.word	0x40013800
 80048c0:	40020000 	.word	0x40020000
 80048c4:	40020400 	.word	0x40020400
 80048c8:	40020800 	.word	0x40020800
 80048cc:	40020c00 	.word	0x40020c00
 80048d0:	40021000 	.word	0x40021000
 80048d4:	40013c00 	.word	0x40013c00

080048d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e12b      	b.n	8004b42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d106      	bne.n	8004904 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f7fd fe9e 	bl	8002640 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2224      	movs	r2, #36	@ 0x24
 8004908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f022 0201 	bic.w	r2, r2, #1
 800491a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800492a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800493a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800493c:	f001 fc10 	bl	8006160 <HAL_RCC_GetPCLK1Freq>
 8004940:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	4a81      	ldr	r2, [pc, #516]	@ (8004b4c <HAL_I2C_Init+0x274>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d807      	bhi.n	800495c <HAL_I2C_Init+0x84>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	4a80      	ldr	r2, [pc, #512]	@ (8004b50 <HAL_I2C_Init+0x278>)
 8004950:	4293      	cmp	r3, r2
 8004952:	bf94      	ite	ls
 8004954:	2301      	movls	r3, #1
 8004956:	2300      	movhi	r3, #0
 8004958:	b2db      	uxtb	r3, r3
 800495a:	e006      	b.n	800496a <HAL_I2C_Init+0x92>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4a7d      	ldr	r2, [pc, #500]	@ (8004b54 <HAL_I2C_Init+0x27c>)
 8004960:	4293      	cmp	r3, r2
 8004962:	bf94      	ite	ls
 8004964:	2301      	movls	r3, #1
 8004966:	2300      	movhi	r3, #0
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e0e7      	b.n	8004b42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	4a78      	ldr	r2, [pc, #480]	@ (8004b58 <HAL_I2C_Init+0x280>)
 8004976:	fba2 2303 	umull	r2, r3, r2, r3
 800497a:	0c9b      	lsrs	r3, r3, #18
 800497c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	430a      	orrs	r2, r1
 8004990:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	4a6a      	ldr	r2, [pc, #424]	@ (8004b4c <HAL_I2C_Init+0x274>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d802      	bhi.n	80049ac <HAL_I2C_Init+0xd4>
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	3301      	adds	r3, #1
 80049aa:	e009      	b.n	80049c0 <HAL_I2C_Init+0xe8>
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80049b2:	fb02 f303 	mul.w	r3, r2, r3
 80049b6:	4a69      	ldr	r2, [pc, #420]	@ (8004b5c <HAL_I2C_Init+0x284>)
 80049b8:	fba2 2303 	umull	r2, r3, r2, r3
 80049bc:	099b      	lsrs	r3, r3, #6
 80049be:	3301      	adds	r3, #1
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	6812      	ldr	r2, [r2, #0]
 80049c4:	430b      	orrs	r3, r1
 80049c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	69db      	ldr	r3, [r3, #28]
 80049ce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80049d2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	495c      	ldr	r1, [pc, #368]	@ (8004b4c <HAL_I2C_Init+0x274>)
 80049dc:	428b      	cmp	r3, r1
 80049de:	d819      	bhi.n	8004a14 <HAL_I2C_Init+0x13c>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	1e59      	subs	r1, r3, #1
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80049ee:	1c59      	adds	r1, r3, #1
 80049f0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80049f4:	400b      	ands	r3, r1
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00a      	beq.n	8004a10 <HAL_I2C_Init+0x138>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	1e59      	subs	r1, r3, #1
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	005b      	lsls	r3, r3, #1
 8004a04:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a08:	3301      	adds	r3, #1
 8004a0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a0e:	e051      	b.n	8004ab4 <HAL_I2C_Init+0x1dc>
 8004a10:	2304      	movs	r3, #4
 8004a12:	e04f      	b.n	8004ab4 <HAL_I2C_Init+0x1dc>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d111      	bne.n	8004a40 <HAL_I2C_Init+0x168>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	1e58      	subs	r0, r3, #1
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6859      	ldr	r1, [r3, #4]
 8004a24:	460b      	mov	r3, r1
 8004a26:	005b      	lsls	r3, r3, #1
 8004a28:	440b      	add	r3, r1
 8004a2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a2e:	3301      	adds	r3, #1
 8004a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	bf0c      	ite	eq
 8004a38:	2301      	moveq	r3, #1
 8004a3a:	2300      	movne	r3, #0
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	e012      	b.n	8004a66 <HAL_I2C_Init+0x18e>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	1e58      	subs	r0, r3, #1
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6859      	ldr	r1, [r3, #4]
 8004a48:	460b      	mov	r3, r1
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	440b      	add	r3, r1
 8004a4e:	0099      	lsls	r1, r3, #2
 8004a50:	440b      	add	r3, r1
 8004a52:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a56:	3301      	adds	r3, #1
 8004a58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	bf0c      	ite	eq
 8004a60:	2301      	moveq	r3, #1
 8004a62:	2300      	movne	r3, #0
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <HAL_I2C_Init+0x196>
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e022      	b.n	8004ab4 <HAL_I2C_Init+0x1dc>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10e      	bne.n	8004a94 <HAL_I2C_Init+0x1bc>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	1e58      	subs	r0, r3, #1
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6859      	ldr	r1, [r3, #4]
 8004a7e:	460b      	mov	r3, r1
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	440b      	add	r3, r1
 8004a84:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a88:	3301      	adds	r3, #1
 8004a8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a92:	e00f      	b.n	8004ab4 <HAL_I2C_Init+0x1dc>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	1e58      	subs	r0, r3, #1
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6859      	ldr	r1, [r3, #4]
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	440b      	add	r3, r1
 8004aa2:	0099      	lsls	r1, r3, #2
 8004aa4:	440b      	add	r3, r1
 8004aa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004aaa:	3301      	adds	r3, #1
 8004aac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ab0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ab4:	6879      	ldr	r1, [r7, #4]
 8004ab6:	6809      	ldr	r1, [r1, #0]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	69da      	ldr	r2, [r3, #28]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004ae2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	6911      	ldr	r1, [r2, #16]
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	68d2      	ldr	r2, [r2, #12]
 8004aee:	4311      	orrs	r1, r2
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	6812      	ldr	r2, [r2, #0]
 8004af4:	430b      	orrs	r3, r1
 8004af6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	695a      	ldr	r2, [r3, #20]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	430a      	orrs	r2, r1
 8004b12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f042 0201 	orr.w	r2, r2, #1
 8004b22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	000186a0 	.word	0x000186a0
 8004b50:	001e847f 	.word	0x001e847f
 8004b54:	003d08ff 	.word	0x003d08ff
 8004b58:	431bde83 	.word	0x431bde83
 8004b5c:	10624dd3 	.word	0x10624dd3

08004b60 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b088      	sub	sp, #32
 8004b64:	af02      	add	r7, sp, #8
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	607a      	str	r2, [r7, #4]
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	817b      	strh	r3, [r7, #10]
 8004b70:	4613      	mov	r3, r2
 8004b72:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b74:	f7fe fcdc 	bl	8003530 <HAL_GetTick>
 8004b78:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b20      	cmp	r3, #32
 8004b84:	f040 80e0 	bne.w	8004d48 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	2319      	movs	r3, #25
 8004b8e:	2201      	movs	r2, #1
 8004b90:	4970      	ldr	r1, [pc, #448]	@ (8004d54 <HAL_I2C_Master_Transmit+0x1f4>)
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f000 fc7e 	bl	8005494 <I2C_WaitOnFlagUntilTimeout>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	e0d3      	b.n	8004d4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d101      	bne.n	8004bb0 <HAL_I2C_Master_Transmit+0x50>
 8004bac:	2302      	movs	r3, #2
 8004bae:	e0cc      	b.n	8004d4a <HAL_I2C_Master_Transmit+0x1ea>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d007      	beq.n	8004bd6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f042 0201 	orr.w	r2, r2, #1
 8004bd4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004be4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2221      	movs	r2, #33	@ 0x21
 8004bea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2210      	movs	r2, #16
 8004bf2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	893a      	ldrh	r2, [r7, #8]
 8004c06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	4a50      	ldr	r2, [pc, #320]	@ (8004d58 <HAL_I2C_Master_Transmit+0x1f8>)
 8004c16:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004c18:	8979      	ldrh	r1, [r7, #10]
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	6a3a      	ldr	r2, [r7, #32]
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f000 fae8 	bl	80051f4 <I2C_MasterRequestWrite>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e08d      	b.n	8004d4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c2e:	2300      	movs	r3, #0
 8004c30:	613b      	str	r3, [r7, #16]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	613b      	str	r3, [r7, #16]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	613b      	str	r3, [r7, #16]
 8004c42:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004c44:	e066      	b.n	8004d14 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	6a39      	ldr	r1, [r7, #32]
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f000 fd3c 	bl	80056c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00d      	beq.n	8004c72 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5a:	2b04      	cmp	r3, #4
 8004c5c:	d107      	bne.n	8004c6e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e06b      	b.n	8004d4a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c76:	781a      	ldrb	r2, [r3, #0]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c82:	1c5a      	adds	r2, r3, #1
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	695b      	ldr	r3, [r3, #20]
 8004ca8:	f003 0304 	and.w	r3, r3, #4
 8004cac:	2b04      	cmp	r3, #4
 8004cae:	d11b      	bne.n	8004ce8 <HAL_I2C_Master_Transmit+0x188>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d017      	beq.n	8004ce8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cbc:	781a      	ldrb	r2, [r3, #0]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc8:	1c5a      	adds	r2, r3, #1
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ce8:	697a      	ldr	r2, [r7, #20]
 8004cea:	6a39      	ldr	r1, [r7, #32]
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f000 fd33 	bl	8005758 <I2C_WaitOnBTFFlagUntilTimeout>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00d      	beq.n	8004d14 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cfc:	2b04      	cmp	r3, #4
 8004cfe:	d107      	bne.n	8004d10 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d0e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e01a      	b.n	8004d4a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d194      	bne.n	8004c46 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004d44:	2300      	movs	r3, #0
 8004d46:	e000      	b.n	8004d4a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004d48:	2302      	movs	r3, #2
  }
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3718      	adds	r7, #24
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	00100002 	.word	0x00100002
 8004d58:	ffff0000 	.word	0xffff0000

08004d5c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b08c      	sub	sp, #48	@ 0x30
 8004d60:	af02      	add	r7, sp, #8
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	607a      	str	r2, [r7, #4]
 8004d66:	461a      	mov	r2, r3
 8004d68:	460b      	mov	r3, r1
 8004d6a:	817b      	strh	r3, [r7, #10]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d70:	f7fe fbde 	bl	8003530 <HAL_GetTick>
 8004d74:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b20      	cmp	r3, #32
 8004d80:	f040 8217 	bne.w	80051b2 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d86:	9300      	str	r3, [sp, #0]
 8004d88:	2319      	movs	r3, #25
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	497c      	ldr	r1, [pc, #496]	@ (8004f80 <HAL_I2C_Master_Receive+0x224>)
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f000 fb80 	bl	8005494 <I2C_WaitOnFlagUntilTimeout>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	e20a      	b.n	80051b4 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d101      	bne.n	8004dac <HAL_I2C_Master_Receive+0x50>
 8004da8:	2302      	movs	r3, #2
 8004daa:	e203      	b.n	80051b4 <HAL_I2C_Master_Receive+0x458>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d007      	beq.n	8004dd2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f042 0201 	orr.w	r2, r2, #1
 8004dd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004de0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2222      	movs	r2, #34	@ 0x22
 8004de6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2210      	movs	r2, #16
 8004dee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	893a      	ldrh	r2, [r7, #8]
 8004e02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	4a5c      	ldr	r2, [pc, #368]	@ (8004f84 <HAL_I2C_Master_Receive+0x228>)
 8004e12:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004e14:	8979      	ldrh	r1, [r7, #10]
 8004e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f000 fa6c 	bl	80052f8 <I2C_MasterRequestRead>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e1c4      	b.n	80051b4 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d113      	bne.n	8004e5a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e32:	2300      	movs	r3, #0
 8004e34:	623b      	str	r3, [r7, #32]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	695b      	ldr	r3, [r3, #20]
 8004e3c:	623b      	str	r3, [r7, #32]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	623b      	str	r3, [r7, #32]
 8004e46:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e56:	601a      	str	r2, [r3, #0]
 8004e58:	e198      	b.n	800518c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d11b      	bne.n	8004e9a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e72:	2300      	movs	r3, #0
 8004e74:	61fb      	str	r3, [r7, #28]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	61fb      	str	r3, [r7, #28]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	61fb      	str	r3, [r7, #28]
 8004e86:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e96:	601a      	str	r2, [r3, #0]
 8004e98:	e178      	b.n	800518c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d11b      	bne.n	8004eda <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004eb0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ec0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	61bb      	str	r3, [r7, #24]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	61bb      	str	r3, [r7, #24]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	61bb      	str	r3, [r7, #24]
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	e158      	b.n	800518c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004ee8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eea:	2300      	movs	r3, #0
 8004eec:	617b      	str	r3, [r7, #20]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	617b      	str	r3, [r7, #20]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	617b      	str	r3, [r7, #20]
 8004efe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004f00:	e144      	b.n	800518c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f06:	2b03      	cmp	r3, #3
 8004f08:	f200 80f1 	bhi.w	80050ee <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d123      	bne.n	8004f5c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f16:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f000 fc65 	bl	80057e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d001      	beq.n	8004f28 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e145      	b.n	80051b4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	691a      	ldr	r2, [r3, #16]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f32:	b2d2      	uxtb	r2, r2
 8004f34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f3a:	1c5a      	adds	r2, r3, #1
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f44:	3b01      	subs	r3, #1
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	3b01      	subs	r3, #1
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004f5a:	e117      	b.n	800518c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d14e      	bne.n	8005002 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f66:	9300      	str	r3, [sp, #0]
 8004f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	4906      	ldr	r1, [pc, #24]	@ (8004f88 <HAL_I2C_Master_Receive+0x22c>)
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f000 fa90 	bl	8005494 <I2C_WaitOnFlagUntilTimeout>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d008      	beq.n	8004f8c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e11a      	b.n	80051b4 <HAL_I2C_Master_Receive+0x458>
 8004f7e:	bf00      	nop
 8004f80:	00100002 	.word	0x00100002
 8004f84:	ffff0000 	.word	0xffff0000
 8004f88:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	691a      	ldr	r2, [r3, #16]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa6:	b2d2      	uxtb	r2, r2
 8004fa8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fae:	1c5a      	adds	r2, r3, #1
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	691a      	ldr	r2, [r3, #16]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd8:	b2d2      	uxtb	r2, r2
 8004fda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe0:	1c5a      	adds	r2, r3, #1
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fea:	3b01      	subs	r3, #1
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005000:	e0c4      	b.n	800518c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005004:	9300      	str	r3, [sp, #0]
 8005006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005008:	2200      	movs	r2, #0
 800500a:	496c      	ldr	r1, [pc, #432]	@ (80051bc <HAL_I2C_Master_Receive+0x460>)
 800500c:	68f8      	ldr	r0, [r7, #12]
 800500e:	f000 fa41 	bl	8005494 <I2C_WaitOnFlagUntilTimeout>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d001      	beq.n	800501c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e0cb      	b.n	80051b4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800502a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	691a      	ldr	r2, [r3, #16]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005036:	b2d2      	uxtb	r2, r2
 8005038:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800503e:	1c5a      	adds	r2, r3, #1
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005048:	3b01      	subs	r3, #1
 800504a:	b29a      	uxth	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005054:	b29b      	uxth	r3, r3
 8005056:	3b01      	subs	r3, #1
 8005058:	b29a      	uxth	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800505e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005060:	9300      	str	r3, [sp, #0]
 8005062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005064:	2200      	movs	r2, #0
 8005066:	4955      	ldr	r1, [pc, #340]	@ (80051bc <HAL_I2C_Master_Receive+0x460>)
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f000 fa13 	bl	8005494 <I2C_WaitOnFlagUntilTimeout>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d001      	beq.n	8005078 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e09d      	b.n	80051b4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005086:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	691a      	ldr	r2, [r3, #16]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005092:	b2d2      	uxtb	r2, r2
 8005094:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800509a:	1c5a      	adds	r2, r3, #1
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050a4:	3b01      	subs	r3, #1
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	3b01      	subs	r3, #1
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	691a      	ldr	r2, [r3, #16]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c4:	b2d2      	uxtb	r2, r2
 80050c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050cc:	1c5a      	adds	r2, r3, #1
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050d6:	3b01      	subs	r3, #1
 80050d8:	b29a      	uxth	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	3b01      	subs	r3, #1
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80050ec:	e04e      	b.n	800518c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f000 fb78 	bl	80057e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e058      	b.n	80051b4 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	691a      	ldr	r2, [r3, #16]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800510c:	b2d2      	uxtb	r2, r2
 800510e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005114:	1c5a      	adds	r2, r3, #1
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800511e:	3b01      	subs	r3, #1
 8005120:	b29a      	uxth	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800512a:	b29b      	uxth	r3, r3
 800512c:	3b01      	subs	r3, #1
 800512e:	b29a      	uxth	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	f003 0304 	and.w	r3, r3, #4
 800513e:	2b04      	cmp	r3, #4
 8005140:	d124      	bne.n	800518c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005146:	2b03      	cmp	r3, #3
 8005148:	d107      	bne.n	800515a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005158:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	691a      	ldr	r2, [r3, #16]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005164:	b2d2      	uxtb	r2, r2
 8005166:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800516c:	1c5a      	adds	r2, r3, #1
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005176:	3b01      	subs	r3, #1
 8005178:	b29a      	uxth	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005182:	b29b      	uxth	r3, r3
 8005184:	3b01      	subs	r3, #1
 8005186:	b29a      	uxth	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005190:	2b00      	cmp	r3, #0
 8005192:	f47f aeb6 	bne.w	8004f02 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2220      	movs	r2, #32
 800519a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80051ae:	2300      	movs	r3, #0
 80051b0:	e000      	b.n	80051b4 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80051b2:	2302      	movs	r3, #2
  }
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3728      	adds	r7, #40	@ 0x28
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	00010004 	.word	0x00010004

080051c0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051ce:	b2db      	uxtb	r3, r3
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b088      	sub	sp, #32
 80051f8:	af02      	add	r7, sp, #8
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	607a      	str	r2, [r7, #4]
 80051fe:	603b      	str	r3, [r7, #0]
 8005200:	460b      	mov	r3, r1
 8005202:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005208:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	2b08      	cmp	r3, #8
 800520e:	d006      	beq.n	800521e <I2C_MasterRequestWrite+0x2a>
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d003      	beq.n	800521e <I2C_MasterRequestWrite+0x2a>
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800521c:	d108      	bne.n	8005230 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800522c:	601a      	str	r2, [r3, #0]
 800522e:	e00b      	b.n	8005248 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005234:	2b12      	cmp	r3, #18
 8005236:	d107      	bne.n	8005248 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005246:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	9300      	str	r3, [sp, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f000 f91d 	bl	8005494 <I2C_WaitOnFlagUntilTimeout>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00d      	beq.n	800527c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800526a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800526e:	d103      	bne.n	8005278 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005276:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e035      	b.n	80052e8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005284:	d108      	bne.n	8005298 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005286:	897b      	ldrh	r3, [r7, #10]
 8005288:	b2db      	uxtb	r3, r3
 800528a:	461a      	mov	r2, r3
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005294:	611a      	str	r2, [r3, #16]
 8005296:	e01b      	b.n	80052d0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005298:	897b      	ldrh	r3, [r7, #10]
 800529a:	11db      	asrs	r3, r3, #7
 800529c:	b2db      	uxtb	r3, r3
 800529e:	f003 0306 	and.w	r3, r3, #6
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	f063 030f 	orn	r3, r3, #15
 80052a8:	b2da      	uxtb	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	490e      	ldr	r1, [pc, #56]	@ (80052f0 <I2C_MasterRequestWrite+0xfc>)
 80052b6:	68f8      	ldr	r0, [r7, #12]
 80052b8:	f000 f966 	bl	8005588 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d001      	beq.n	80052c6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e010      	b.n	80052e8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80052c6:	897b      	ldrh	r3, [r7, #10]
 80052c8:	b2da      	uxtb	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	4907      	ldr	r1, [pc, #28]	@ (80052f4 <I2C_MasterRequestWrite+0x100>)
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	f000 f956 	bl	8005588 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e000      	b.n	80052e8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3718      	adds	r7, #24
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	00010008 	.word	0x00010008
 80052f4:	00010002 	.word	0x00010002

080052f8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b088      	sub	sp, #32
 80052fc:	af02      	add	r7, sp, #8
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	607a      	str	r2, [r7, #4]
 8005302:	603b      	str	r3, [r7, #0]
 8005304:	460b      	mov	r3, r1
 8005306:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800530c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800531c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	2b08      	cmp	r3, #8
 8005322:	d006      	beq.n	8005332 <I2C_MasterRequestRead+0x3a>
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d003      	beq.n	8005332 <I2C_MasterRequestRead+0x3a>
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005330:	d108      	bne.n	8005344 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005340:	601a      	str	r2, [r3, #0]
 8005342:	e00b      	b.n	800535c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005348:	2b11      	cmp	r3, #17
 800534a:	d107      	bne.n	800535c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800535a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	9300      	str	r3, [sp, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f000 f893 	bl	8005494 <I2C_WaitOnFlagUntilTimeout>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00d      	beq.n	8005390 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800537e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005382:	d103      	bne.n	800538c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800538a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e079      	b.n	8005484 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005398:	d108      	bne.n	80053ac <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800539a:	897b      	ldrh	r3, [r7, #10]
 800539c:	b2db      	uxtb	r3, r3
 800539e:	f043 0301 	orr.w	r3, r3, #1
 80053a2:	b2da      	uxtb	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	611a      	str	r2, [r3, #16]
 80053aa:	e05f      	b.n	800546c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80053ac:	897b      	ldrh	r3, [r7, #10]
 80053ae:	11db      	asrs	r3, r3, #7
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	f003 0306 	and.w	r3, r3, #6
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	f063 030f 	orn	r3, r3, #15
 80053bc:	b2da      	uxtb	r2, r3
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	4930      	ldr	r1, [pc, #192]	@ (800548c <I2C_MasterRequestRead+0x194>)
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f000 f8dc 	bl	8005588 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d001      	beq.n	80053da <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e054      	b.n	8005484 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80053da:	897b      	ldrh	r3, [r7, #10]
 80053dc:	b2da      	uxtb	r2, r3
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	4929      	ldr	r1, [pc, #164]	@ (8005490 <I2C_MasterRequestRead+0x198>)
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	f000 f8cc 	bl	8005588 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d001      	beq.n	80053fa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e044      	b.n	8005484 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053fa:	2300      	movs	r3, #0
 80053fc:	613b      	str	r3, [r7, #16]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	695b      	ldr	r3, [r3, #20]
 8005404:	613b      	str	r3, [r7, #16]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	699b      	ldr	r3, [r3, #24]
 800540c:	613b      	str	r3, [r7, #16]
 800540e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800541e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	9300      	str	r3, [sp, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f000 f831 	bl	8005494 <I2C_WaitOnFlagUntilTimeout>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00d      	beq.n	8005454 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005442:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005446:	d103      	bne.n	8005450 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800544e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e017      	b.n	8005484 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005454:	897b      	ldrh	r3, [r7, #10]
 8005456:	11db      	asrs	r3, r3, #7
 8005458:	b2db      	uxtb	r3, r3
 800545a:	f003 0306 	and.w	r3, r3, #6
 800545e:	b2db      	uxtb	r3, r3
 8005460:	f063 030e 	orn	r3, r3, #14
 8005464:	b2da      	uxtb	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	4907      	ldr	r1, [pc, #28]	@ (8005490 <I2C_MasterRequestRead+0x198>)
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f000 f888 	bl	8005588 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d001      	beq.n	8005482 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e000      	b.n	8005484 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3718      	adds	r7, #24
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	00010008 	.word	0x00010008
 8005490:	00010002 	.word	0x00010002

08005494 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	603b      	str	r3, [r7, #0]
 80054a0:	4613      	mov	r3, r2
 80054a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054a4:	e048      	b.n	8005538 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80054ac:	d044      	beq.n	8005538 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ae:	f7fe f83f 	bl	8003530 <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d302      	bcc.n	80054c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d139      	bne.n	8005538 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	0c1b      	lsrs	r3, r3, #16
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d10d      	bne.n	80054ea <I2C_WaitOnFlagUntilTimeout+0x56>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	695b      	ldr	r3, [r3, #20]
 80054d4:	43da      	mvns	r2, r3
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	4013      	ands	r3, r2
 80054da:	b29b      	uxth	r3, r3
 80054dc:	2b00      	cmp	r3, #0
 80054de:	bf0c      	ite	eq
 80054e0:	2301      	moveq	r3, #1
 80054e2:	2300      	movne	r3, #0
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	461a      	mov	r2, r3
 80054e8:	e00c      	b.n	8005504 <I2C_WaitOnFlagUntilTimeout+0x70>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	43da      	mvns	r2, r3
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	4013      	ands	r3, r2
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	bf0c      	ite	eq
 80054fc:	2301      	moveq	r3, #1
 80054fe:	2300      	movne	r3, #0
 8005500:	b2db      	uxtb	r3, r3
 8005502:	461a      	mov	r2, r3
 8005504:	79fb      	ldrb	r3, [r7, #7]
 8005506:	429a      	cmp	r2, r3
 8005508:	d116      	bne.n	8005538 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2220      	movs	r2, #32
 8005514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005524:	f043 0220 	orr.w	r2, r3, #32
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e023      	b.n	8005580 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	0c1b      	lsrs	r3, r3, #16
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b01      	cmp	r3, #1
 8005540:	d10d      	bne.n	800555e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	695b      	ldr	r3, [r3, #20]
 8005548:	43da      	mvns	r2, r3
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	4013      	ands	r3, r2
 800554e:	b29b      	uxth	r3, r3
 8005550:	2b00      	cmp	r3, #0
 8005552:	bf0c      	ite	eq
 8005554:	2301      	moveq	r3, #1
 8005556:	2300      	movne	r3, #0
 8005558:	b2db      	uxtb	r3, r3
 800555a:	461a      	mov	r2, r3
 800555c:	e00c      	b.n	8005578 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	43da      	mvns	r2, r3
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	4013      	ands	r3, r2
 800556a:	b29b      	uxth	r3, r3
 800556c:	2b00      	cmp	r3, #0
 800556e:	bf0c      	ite	eq
 8005570:	2301      	moveq	r3, #1
 8005572:	2300      	movne	r3, #0
 8005574:	b2db      	uxtb	r3, r3
 8005576:	461a      	mov	r2, r3
 8005578:	79fb      	ldrb	r3, [r7, #7]
 800557a:	429a      	cmp	r2, r3
 800557c:	d093      	beq.n	80054a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	3710      	adds	r7, #16
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
 8005594:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005596:	e071      	b.n	800567c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055a6:	d123      	bne.n	80055f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055b6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80055c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2220      	movs	r2, #32
 80055cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055dc:	f043 0204 	orr.w	r2, r3, #4
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e067      	b.n	80056c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055f6:	d041      	beq.n	800567c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055f8:	f7fd ff9a 	bl	8003530 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	429a      	cmp	r2, r3
 8005606:	d302      	bcc.n	800560e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d136      	bne.n	800567c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	0c1b      	lsrs	r3, r3, #16
 8005612:	b2db      	uxtb	r3, r3
 8005614:	2b01      	cmp	r3, #1
 8005616:	d10c      	bne.n	8005632 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	43da      	mvns	r2, r3
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	4013      	ands	r3, r2
 8005624:	b29b      	uxth	r3, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	bf14      	ite	ne
 800562a:	2301      	movne	r3, #1
 800562c:	2300      	moveq	r3, #0
 800562e:	b2db      	uxtb	r3, r3
 8005630:	e00b      	b.n	800564a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	43da      	mvns	r2, r3
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	4013      	ands	r3, r2
 800563e:	b29b      	uxth	r3, r3
 8005640:	2b00      	cmp	r3, #0
 8005642:	bf14      	ite	ne
 8005644:	2301      	movne	r3, #1
 8005646:	2300      	moveq	r3, #0
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b00      	cmp	r3, #0
 800564c:	d016      	beq.n	800567c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2220      	movs	r2, #32
 8005658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005668:	f043 0220 	orr.w	r2, r3, #32
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e021      	b.n	80056c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	0c1b      	lsrs	r3, r3, #16
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b01      	cmp	r3, #1
 8005684:	d10c      	bne.n	80056a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	695b      	ldr	r3, [r3, #20]
 800568c:	43da      	mvns	r2, r3
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	4013      	ands	r3, r2
 8005692:	b29b      	uxth	r3, r3
 8005694:	2b00      	cmp	r3, #0
 8005696:	bf14      	ite	ne
 8005698:	2301      	movne	r3, #1
 800569a:	2300      	moveq	r3, #0
 800569c:	b2db      	uxtb	r3, r3
 800569e:	e00b      	b.n	80056b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	43da      	mvns	r2, r3
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	4013      	ands	r3, r2
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	bf14      	ite	ne
 80056b2:	2301      	movne	r3, #1
 80056b4:	2300      	moveq	r3, #0
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f47f af6d 	bne.w	8005598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3710      	adds	r7, #16
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056d4:	e034      	b.n	8005740 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f000 f8e3 	bl	80058a2 <I2C_IsAcknowledgeFailed>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d001      	beq.n	80056e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e034      	b.n	8005750 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056ec:	d028      	beq.n	8005740 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ee:	f7fd ff1f 	bl	8003530 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d302      	bcc.n	8005704 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d11d      	bne.n	8005740 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800570e:	2b80      	cmp	r3, #128	@ 0x80
 8005710:	d016      	beq.n	8005740 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2200      	movs	r2, #0
 8005716:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2220      	movs	r2, #32
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800572c:	f043 0220 	orr.w	r2, r3, #32
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e007      	b.n	8005750 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800574a:	2b80      	cmp	r3, #128	@ 0x80
 800574c:	d1c3      	bne.n	80056d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3710      	adds	r7, #16
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005764:	e034      	b.n	80057d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f000 f89b 	bl	80058a2 <I2C_IsAcknowledgeFailed>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e034      	b.n	80057e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800577c:	d028      	beq.n	80057d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800577e:	f7fd fed7 	bl	8003530 <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	68ba      	ldr	r2, [r7, #8]
 800578a:	429a      	cmp	r2, r3
 800578c:	d302      	bcc.n	8005794 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d11d      	bne.n	80057d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	f003 0304 	and.w	r3, r3, #4
 800579e:	2b04      	cmp	r3, #4
 80057a0:	d016      	beq.n	80057d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2220      	movs	r2, #32
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057bc:	f043 0220 	orr.w	r2, r3, #32
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e007      	b.n	80057e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	f003 0304 	and.w	r3, r3, #4
 80057da:	2b04      	cmp	r3, #4
 80057dc:	d1c3      	bne.n	8005766 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3710      	adds	r7, #16
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057f4:	e049      	b.n	800588a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	695b      	ldr	r3, [r3, #20]
 80057fc:	f003 0310 	and.w	r3, r3, #16
 8005800:	2b10      	cmp	r3, #16
 8005802:	d119      	bne.n	8005838 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f06f 0210 	mvn.w	r2, #16
 800580c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2220      	movs	r2, #32
 8005818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e030      	b.n	800589a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005838:	f7fd fe7a 	bl	8003530 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	429a      	cmp	r2, r3
 8005846:	d302      	bcc.n	800584e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d11d      	bne.n	800588a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	695b      	ldr	r3, [r3, #20]
 8005854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005858:	2b40      	cmp	r3, #64	@ 0x40
 800585a:	d016      	beq.n	800588a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2220      	movs	r2, #32
 8005866:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005876:	f043 0220 	orr.w	r2, r3, #32
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e007      	b.n	800589a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005894:	2b40      	cmp	r3, #64	@ 0x40
 8005896:	d1ae      	bne.n	80057f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3710      	adds	r7, #16
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}

080058a2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80058a2:	b480      	push	{r7}
 80058a4:	b083      	sub	sp, #12
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058b8:	d11b      	bne.n	80058f2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80058c2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2220      	movs	r2, #32
 80058ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058de:	f043 0204 	orr.w	r2, r3, #4
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e000      	b.n	80058f4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d101      	bne.n	8005912 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e267      	b.n	8005de2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	2b00      	cmp	r3, #0
 800591c:	d075      	beq.n	8005a0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800591e:	4b88      	ldr	r3, [pc, #544]	@ (8005b40 <HAL_RCC_OscConfig+0x240>)
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f003 030c 	and.w	r3, r3, #12
 8005926:	2b04      	cmp	r3, #4
 8005928:	d00c      	beq.n	8005944 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800592a:	4b85      	ldr	r3, [pc, #532]	@ (8005b40 <HAL_RCC_OscConfig+0x240>)
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005932:	2b08      	cmp	r3, #8
 8005934:	d112      	bne.n	800595c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005936:	4b82      	ldr	r3, [pc, #520]	@ (8005b40 <HAL_RCC_OscConfig+0x240>)
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800593e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005942:	d10b      	bne.n	800595c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005944:	4b7e      	ldr	r3, [pc, #504]	@ (8005b40 <HAL_RCC_OscConfig+0x240>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d05b      	beq.n	8005a08 <HAL_RCC_OscConfig+0x108>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d157      	bne.n	8005a08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e242      	b.n	8005de2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005964:	d106      	bne.n	8005974 <HAL_RCC_OscConfig+0x74>
 8005966:	4b76      	ldr	r3, [pc, #472]	@ (8005b40 <HAL_RCC_OscConfig+0x240>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a75      	ldr	r2, [pc, #468]	@ (8005b40 <HAL_RCC_OscConfig+0x240>)
 800596c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005970:	6013      	str	r3, [r2, #0]
 8005972:	e01d      	b.n	80059b0 <HAL_RCC_OscConfig+0xb0>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800597c:	d10c      	bne.n	8005998 <HAL_RCC_OscConfig+0x98>
 800597e:	4b70      	ldr	r3, [pc, #448]	@ (8005b40 <HAL_RCC_OscConfig+0x240>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a6f      	ldr	r2, [pc, #444]	@ (8005b40 <HAL_RCC_OscConfig+0x240>)
 8005984:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005988:	6013      	str	r3, [r2, #0]
 800598a:	4b6d      	ldr	r3, [pc, #436]	@ (8005b40 <HAL_RCC_OscConfig+0x240>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a6c      	ldr	r2, [pc, #432]	@ (8005b40 <HAL_RCC_OscConfig+0x240>)
 8005990:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005994:	6013      	str	r3, [r2, #0]
 8005996:	e00b      	b.n	80059b0 <HAL_RCC_OscConfig+0xb0>
 8005998:	4b69      	ldr	r3, [pc, #420]	@ (8005b40 <HAL_RCC_OscConfig+0x240>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a68      	ldr	r2, [pc, #416]	@ (8005b40 <HAL_RCC_OscConfig+0x240>)
 800599e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059a2:	6013      	str	r3, [r2, #0]
 80059a4:	4b66      	ldr	r3, [pc, #408]	@ (8005b40 <HAL_RCC_OscConfig+0x240>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a65      	ldr	r2, [pc, #404]	@ (8005b40 <HAL_RCC_OscConfig+0x240>)
 80059aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d013      	beq.n	80059e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059b8:	f7fd fdba 	bl	8003530 <HAL_GetTick>
 80059bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059be:	e008      	b.n	80059d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059c0:	f7fd fdb6 	bl	8003530 <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	2b64      	cmp	r3, #100	@ 0x64
 80059cc:	d901      	bls.n	80059d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e207      	b.n	8005de2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059d2:	4b5b      	ldr	r3, [pc, #364]	@ (8005b40 <HAL_RCC_OscConfig+0x240>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d0f0      	beq.n	80059c0 <HAL_RCC_OscConfig+0xc0>
 80059de:	e014      	b.n	8005a0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059e0:	f7fd fda6 	bl	8003530 <HAL_GetTick>
 80059e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059e6:	e008      	b.n	80059fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059e8:	f7fd fda2 	bl	8003530 <HAL_GetTick>
 80059ec:	4602      	mov	r2, r0
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	2b64      	cmp	r3, #100	@ 0x64
 80059f4:	d901      	bls.n	80059fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e1f3      	b.n	8005de2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059fa:	4b51      	ldr	r3, [pc, #324]	@ (8005b40 <HAL_RCC_OscConfig+0x240>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1f0      	bne.n	80059e8 <HAL_RCC_OscConfig+0xe8>
 8005a06:	e000      	b.n	8005a0a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0302 	and.w	r3, r3, #2
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d063      	beq.n	8005ade <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005a16:	4b4a      	ldr	r3, [pc, #296]	@ (8005b40 <HAL_RCC_OscConfig+0x240>)
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f003 030c 	and.w	r3, r3, #12
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00b      	beq.n	8005a3a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a22:	4b47      	ldr	r3, [pc, #284]	@ (8005b40 <HAL_RCC_OscConfig+0x240>)
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005a2a:	2b08      	cmp	r3, #8
 8005a2c:	d11c      	bne.n	8005a68 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a2e:	4b44      	ldr	r3, [pc, #272]	@ (8005b40 <HAL_RCC_OscConfig+0x240>)
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d116      	bne.n	8005a68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a3a:	4b41      	ldr	r3, [pc, #260]	@ (8005b40 <HAL_RCC_OscConfig+0x240>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d005      	beq.n	8005a52 <HAL_RCC_OscConfig+0x152>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d001      	beq.n	8005a52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e1c7      	b.n	8005de2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a52:	4b3b      	ldr	r3, [pc, #236]	@ (8005b40 <HAL_RCC_OscConfig+0x240>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	00db      	lsls	r3, r3, #3
 8005a60:	4937      	ldr	r1, [pc, #220]	@ (8005b40 <HAL_RCC_OscConfig+0x240>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a66:	e03a      	b.n	8005ade <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d020      	beq.n	8005ab2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a70:	4b34      	ldr	r3, [pc, #208]	@ (8005b44 <HAL_RCC_OscConfig+0x244>)
 8005a72:	2201      	movs	r2, #1
 8005a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a76:	f7fd fd5b 	bl	8003530 <HAL_GetTick>
 8005a7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a7c:	e008      	b.n	8005a90 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a7e:	f7fd fd57 	bl	8003530 <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d901      	bls.n	8005a90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e1a8      	b.n	8005de2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a90:	4b2b      	ldr	r3, [pc, #172]	@ (8005b40 <HAL_RCC_OscConfig+0x240>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0302 	and.w	r3, r3, #2
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d0f0      	beq.n	8005a7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a9c:	4b28      	ldr	r3, [pc, #160]	@ (8005b40 <HAL_RCC_OscConfig+0x240>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	00db      	lsls	r3, r3, #3
 8005aaa:	4925      	ldr	r1, [pc, #148]	@ (8005b40 <HAL_RCC_OscConfig+0x240>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	600b      	str	r3, [r1, #0]
 8005ab0:	e015      	b.n	8005ade <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ab2:	4b24      	ldr	r3, [pc, #144]	@ (8005b44 <HAL_RCC_OscConfig+0x244>)
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab8:	f7fd fd3a 	bl	8003530 <HAL_GetTick>
 8005abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005abe:	e008      	b.n	8005ad2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ac0:	f7fd fd36 	bl	8003530 <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d901      	bls.n	8005ad2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e187      	b.n	8005de2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ad2:	4b1b      	ldr	r3, [pc, #108]	@ (8005b40 <HAL_RCC_OscConfig+0x240>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1f0      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 0308 	and.w	r3, r3, #8
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d036      	beq.n	8005b58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	695b      	ldr	r3, [r3, #20]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d016      	beq.n	8005b20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005af2:	4b15      	ldr	r3, [pc, #84]	@ (8005b48 <HAL_RCC_OscConfig+0x248>)
 8005af4:	2201      	movs	r2, #1
 8005af6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005af8:	f7fd fd1a 	bl	8003530 <HAL_GetTick>
 8005afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005afe:	e008      	b.n	8005b12 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b00:	f7fd fd16 	bl	8003530 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d901      	bls.n	8005b12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e167      	b.n	8005de2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b12:	4b0b      	ldr	r3, [pc, #44]	@ (8005b40 <HAL_RCC_OscConfig+0x240>)
 8005b14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b16:	f003 0302 	and.w	r3, r3, #2
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d0f0      	beq.n	8005b00 <HAL_RCC_OscConfig+0x200>
 8005b1e:	e01b      	b.n	8005b58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b20:	4b09      	ldr	r3, [pc, #36]	@ (8005b48 <HAL_RCC_OscConfig+0x248>)
 8005b22:	2200      	movs	r2, #0
 8005b24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b26:	f7fd fd03 	bl	8003530 <HAL_GetTick>
 8005b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b2c:	e00e      	b.n	8005b4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b2e:	f7fd fcff 	bl	8003530 <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d907      	bls.n	8005b4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e150      	b.n	8005de2 <HAL_RCC_OscConfig+0x4e2>
 8005b40:	40023800 	.word	0x40023800
 8005b44:	42470000 	.word	0x42470000
 8005b48:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b4c:	4b88      	ldr	r3, [pc, #544]	@ (8005d70 <HAL_RCC_OscConfig+0x470>)
 8005b4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b50:	f003 0302 	and.w	r3, r3, #2
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1ea      	bne.n	8005b2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0304 	and.w	r3, r3, #4
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	f000 8097 	beq.w	8005c94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b66:	2300      	movs	r3, #0
 8005b68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b6a:	4b81      	ldr	r3, [pc, #516]	@ (8005d70 <HAL_RCC_OscConfig+0x470>)
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d10f      	bne.n	8005b96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b76:	2300      	movs	r3, #0
 8005b78:	60bb      	str	r3, [r7, #8]
 8005b7a:	4b7d      	ldr	r3, [pc, #500]	@ (8005d70 <HAL_RCC_OscConfig+0x470>)
 8005b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b7e:	4a7c      	ldr	r2, [pc, #496]	@ (8005d70 <HAL_RCC_OscConfig+0x470>)
 8005b80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b84:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b86:	4b7a      	ldr	r3, [pc, #488]	@ (8005d70 <HAL_RCC_OscConfig+0x470>)
 8005b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b8e:	60bb      	str	r3, [r7, #8]
 8005b90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b92:	2301      	movs	r3, #1
 8005b94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b96:	4b77      	ldr	r3, [pc, #476]	@ (8005d74 <HAL_RCC_OscConfig+0x474>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d118      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ba2:	4b74      	ldr	r3, [pc, #464]	@ (8005d74 <HAL_RCC_OscConfig+0x474>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a73      	ldr	r2, [pc, #460]	@ (8005d74 <HAL_RCC_OscConfig+0x474>)
 8005ba8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bae:	f7fd fcbf 	bl	8003530 <HAL_GetTick>
 8005bb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bb4:	e008      	b.n	8005bc8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bb6:	f7fd fcbb 	bl	8003530 <HAL_GetTick>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d901      	bls.n	8005bc8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e10c      	b.n	8005de2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bc8:	4b6a      	ldr	r3, [pc, #424]	@ (8005d74 <HAL_RCC_OscConfig+0x474>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d0f0      	beq.n	8005bb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d106      	bne.n	8005bea <HAL_RCC_OscConfig+0x2ea>
 8005bdc:	4b64      	ldr	r3, [pc, #400]	@ (8005d70 <HAL_RCC_OscConfig+0x470>)
 8005bde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005be0:	4a63      	ldr	r2, [pc, #396]	@ (8005d70 <HAL_RCC_OscConfig+0x470>)
 8005be2:	f043 0301 	orr.w	r3, r3, #1
 8005be6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005be8:	e01c      	b.n	8005c24 <HAL_RCC_OscConfig+0x324>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	2b05      	cmp	r3, #5
 8005bf0:	d10c      	bne.n	8005c0c <HAL_RCC_OscConfig+0x30c>
 8005bf2:	4b5f      	ldr	r3, [pc, #380]	@ (8005d70 <HAL_RCC_OscConfig+0x470>)
 8005bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bf6:	4a5e      	ldr	r2, [pc, #376]	@ (8005d70 <HAL_RCC_OscConfig+0x470>)
 8005bf8:	f043 0304 	orr.w	r3, r3, #4
 8005bfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bfe:	4b5c      	ldr	r3, [pc, #368]	@ (8005d70 <HAL_RCC_OscConfig+0x470>)
 8005c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c02:	4a5b      	ldr	r2, [pc, #364]	@ (8005d70 <HAL_RCC_OscConfig+0x470>)
 8005c04:	f043 0301 	orr.w	r3, r3, #1
 8005c08:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c0a:	e00b      	b.n	8005c24 <HAL_RCC_OscConfig+0x324>
 8005c0c:	4b58      	ldr	r3, [pc, #352]	@ (8005d70 <HAL_RCC_OscConfig+0x470>)
 8005c0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c10:	4a57      	ldr	r2, [pc, #348]	@ (8005d70 <HAL_RCC_OscConfig+0x470>)
 8005c12:	f023 0301 	bic.w	r3, r3, #1
 8005c16:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c18:	4b55      	ldr	r3, [pc, #340]	@ (8005d70 <HAL_RCC_OscConfig+0x470>)
 8005c1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c1c:	4a54      	ldr	r2, [pc, #336]	@ (8005d70 <HAL_RCC_OscConfig+0x470>)
 8005c1e:	f023 0304 	bic.w	r3, r3, #4
 8005c22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d015      	beq.n	8005c58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c2c:	f7fd fc80 	bl	8003530 <HAL_GetTick>
 8005c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c32:	e00a      	b.n	8005c4a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c34:	f7fd fc7c 	bl	8003530 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d901      	bls.n	8005c4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e0cb      	b.n	8005de2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c4a:	4b49      	ldr	r3, [pc, #292]	@ (8005d70 <HAL_RCC_OscConfig+0x470>)
 8005c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c4e:	f003 0302 	and.w	r3, r3, #2
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d0ee      	beq.n	8005c34 <HAL_RCC_OscConfig+0x334>
 8005c56:	e014      	b.n	8005c82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c58:	f7fd fc6a 	bl	8003530 <HAL_GetTick>
 8005c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c5e:	e00a      	b.n	8005c76 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c60:	f7fd fc66 	bl	8003530 <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d901      	bls.n	8005c76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e0b5      	b.n	8005de2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c76:	4b3e      	ldr	r3, [pc, #248]	@ (8005d70 <HAL_RCC_OscConfig+0x470>)
 8005c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c7a:	f003 0302 	and.w	r3, r3, #2
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1ee      	bne.n	8005c60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c82:	7dfb      	ldrb	r3, [r7, #23]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d105      	bne.n	8005c94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c88:	4b39      	ldr	r3, [pc, #228]	@ (8005d70 <HAL_RCC_OscConfig+0x470>)
 8005c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c8c:	4a38      	ldr	r2, [pc, #224]	@ (8005d70 <HAL_RCC_OscConfig+0x470>)
 8005c8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c92:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f000 80a1 	beq.w	8005de0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c9e:	4b34      	ldr	r3, [pc, #208]	@ (8005d70 <HAL_RCC_OscConfig+0x470>)
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f003 030c 	and.w	r3, r3, #12
 8005ca6:	2b08      	cmp	r3, #8
 8005ca8:	d05c      	beq.n	8005d64 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d141      	bne.n	8005d36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cb2:	4b31      	ldr	r3, [pc, #196]	@ (8005d78 <HAL_RCC_OscConfig+0x478>)
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cb8:	f7fd fc3a 	bl	8003530 <HAL_GetTick>
 8005cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cbe:	e008      	b.n	8005cd2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cc0:	f7fd fc36 	bl	8003530 <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d901      	bls.n	8005cd2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e087      	b.n	8005de2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cd2:	4b27      	ldr	r3, [pc, #156]	@ (8005d70 <HAL_RCC_OscConfig+0x470>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1f0      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	69da      	ldr	r2, [r3, #28]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	431a      	orrs	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cec:	019b      	lsls	r3, r3, #6
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cf4:	085b      	lsrs	r3, r3, #1
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	041b      	lsls	r3, r3, #16
 8005cfa:	431a      	orrs	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d00:	061b      	lsls	r3, r3, #24
 8005d02:	491b      	ldr	r1, [pc, #108]	@ (8005d70 <HAL_RCC_OscConfig+0x470>)
 8005d04:	4313      	orrs	r3, r2
 8005d06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d08:	4b1b      	ldr	r3, [pc, #108]	@ (8005d78 <HAL_RCC_OscConfig+0x478>)
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d0e:	f7fd fc0f 	bl	8003530 <HAL_GetTick>
 8005d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d14:	e008      	b.n	8005d28 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d16:	f7fd fc0b 	bl	8003530 <HAL_GetTick>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d901      	bls.n	8005d28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e05c      	b.n	8005de2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d28:	4b11      	ldr	r3, [pc, #68]	@ (8005d70 <HAL_RCC_OscConfig+0x470>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d0f0      	beq.n	8005d16 <HAL_RCC_OscConfig+0x416>
 8005d34:	e054      	b.n	8005de0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d36:	4b10      	ldr	r3, [pc, #64]	@ (8005d78 <HAL_RCC_OscConfig+0x478>)
 8005d38:	2200      	movs	r2, #0
 8005d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d3c:	f7fd fbf8 	bl	8003530 <HAL_GetTick>
 8005d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d42:	e008      	b.n	8005d56 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d44:	f7fd fbf4 	bl	8003530 <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d901      	bls.n	8005d56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e045      	b.n	8005de2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d56:	4b06      	ldr	r3, [pc, #24]	@ (8005d70 <HAL_RCC_OscConfig+0x470>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1f0      	bne.n	8005d44 <HAL_RCC_OscConfig+0x444>
 8005d62:	e03d      	b.n	8005de0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d107      	bne.n	8005d7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e038      	b.n	8005de2 <HAL_RCC_OscConfig+0x4e2>
 8005d70:	40023800 	.word	0x40023800
 8005d74:	40007000 	.word	0x40007000
 8005d78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8005dec <HAL_RCC_OscConfig+0x4ec>)
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d028      	beq.n	8005ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d121      	bne.n	8005ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d11a      	bne.n	8005ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005dac:	4013      	ands	r3, r2
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005db2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d111      	bne.n	8005ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dc2:	085b      	lsrs	r3, r3, #1
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d107      	bne.n	8005ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d001      	beq.n	8005de0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e000      	b.n	8005de2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3718      	adds	r7, #24
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	40023800 	.word	0x40023800

08005df0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d101      	bne.n	8005e04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e0cc      	b.n	8005f9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e04:	4b68      	ldr	r3, [pc, #416]	@ (8005fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0307 	and.w	r3, r3, #7
 8005e0c:	683a      	ldr	r2, [r7, #0]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d90c      	bls.n	8005e2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e12:	4b65      	ldr	r3, [pc, #404]	@ (8005fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8005e14:	683a      	ldr	r2, [r7, #0]
 8005e16:	b2d2      	uxtb	r2, r2
 8005e18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e1a:	4b63      	ldr	r3, [pc, #396]	@ (8005fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0307 	and.w	r3, r3, #7
 8005e22:	683a      	ldr	r2, [r7, #0]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d001      	beq.n	8005e2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e0b8      	b.n	8005f9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0302 	and.w	r3, r3, #2
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d020      	beq.n	8005e7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0304 	and.w	r3, r3, #4
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d005      	beq.n	8005e50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e44:	4b59      	ldr	r3, [pc, #356]	@ (8005fac <HAL_RCC_ClockConfig+0x1bc>)
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	4a58      	ldr	r2, [pc, #352]	@ (8005fac <HAL_RCC_ClockConfig+0x1bc>)
 8005e4a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005e4e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 0308 	and.w	r3, r3, #8
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d005      	beq.n	8005e68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e5c:	4b53      	ldr	r3, [pc, #332]	@ (8005fac <HAL_RCC_ClockConfig+0x1bc>)
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	4a52      	ldr	r2, [pc, #328]	@ (8005fac <HAL_RCC_ClockConfig+0x1bc>)
 8005e62:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005e66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e68:	4b50      	ldr	r3, [pc, #320]	@ (8005fac <HAL_RCC_ClockConfig+0x1bc>)
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	494d      	ldr	r1, [pc, #308]	@ (8005fac <HAL_RCC_ClockConfig+0x1bc>)
 8005e76:	4313      	orrs	r3, r2
 8005e78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 0301 	and.w	r3, r3, #1
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d044      	beq.n	8005f10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d107      	bne.n	8005e9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e8e:	4b47      	ldr	r3, [pc, #284]	@ (8005fac <HAL_RCC_ClockConfig+0x1bc>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d119      	bne.n	8005ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e07f      	b.n	8005f9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d003      	beq.n	8005eae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005eaa:	2b03      	cmp	r3, #3
 8005eac:	d107      	bne.n	8005ebe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005eae:	4b3f      	ldr	r3, [pc, #252]	@ (8005fac <HAL_RCC_ClockConfig+0x1bc>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d109      	bne.n	8005ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e06f      	b.n	8005f9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ebe:	4b3b      	ldr	r3, [pc, #236]	@ (8005fac <HAL_RCC_ClockConfig+0x1bc>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0302 	and.w	r3, r3, #2
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d101      	bne.n	8005ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e067      	b.n	8005f9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ece:	4b37      	ldr	r3, [pc, #220]	@ (8005fac <HAL_RCC_ClockConfig+0x1bc>)
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f023 0203 	bic.w	r2, r3, #3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	4934      	ldr	r1, [pc, #208]	@ (8005fac <HAL_RCC_ClockConfig+0x1bc>)
 8005edc:	4313      	orrs	r3, r2
 8005ede:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ee0:	f7fd fb26 	bl	8003530 <HAL_GetTick>
 8005ee4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ee6:	e00a      	b.n	8005efe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ee8:	f7fd fb22 	bl	8003530 <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d901      	bls.n	8005efe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e04f      	b.n	8005f9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005efe:	4b2b      	ldr	r3, [pc, #172]	@ (8005fac <HAL_RCC_ClockConfig+0x1bc>)
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	f003 020c 	and.w	r2, r3, #12
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d1eb      	bne.n	8005ee8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f10:	4b25      	ldr	r3, [pc, #148]	@ (8005fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0307 	and.w	r3, r3, #7
 8005f18:	683a      	ldr	r2, [r7, #0]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d20c      	bcs.n	8005f38 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f1e:	4b22      	ldr	r3, [pc, #136]	@ (8005fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8005f20:	683a      	ldr	r2, [r7, #0]
 8005f22:	b2d2      	uxtb	r2, r2
 8005f24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f26:	4b20      	ldr	r3, [pc, #128]	@ (8005fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 0307 	and.w	r3, r3, #7
 8005f2e:	683a      	ldr	r2, [r7, #0]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d001      	beq.n	8005f38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e032      	b.n	8005f9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0304 	and.w	r3, r3, #4
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d008      	beq.n	8005f56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f44:	4b19      	ldr	r3, [pc, #100]	@ (8005fac <HAL_RCC_ClockConfig+0x1bc>)
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	4916      	ldr	r1, [pc, #88]	@ (8005fac <HAL_RCC_ClockConfig+0x1bc>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0308 	and.w	r3, r3, #8
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d009      	beq.n	8005f76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f62:	4b12      	ldr	r3, [pc, #72]	@ (8005fac <HAL_RCC_ClockConfig+0x1bc>)
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	00db      	lsls	r3, r3, #3
 8005f70:	490e      	ldr	r1, [pc, #56]	@ (8005fac <HAL_RCC_ClockConfig+0x1bc>)
 8005f72:	4313      	orrs	r3, r2
 8005f74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005f76:	f000 f821 	bl	8005fbc <HAL_RCC_GetSysClockFreq>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8005fac <HAL_RCC_ClockConfig+0x1bc>)
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	091b      	lsrs	r3, r3, #4
 8005f82:	f003 030f 	and.w	r3, r3, #15
 8005f86:	490a      	ldr	r1, [pc, #40]	@ (8005fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8005f88:	5ccb      	ldrb	r3, [r1, r3]
 8005f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f8e:	4a09      	ldr	r2, [pc, #36]	@ (8005fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005f90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005f92:	4b09      	ldr	r3, [pc, #36]	@ (8005fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7fc fc86 	bl	80028a8 <HAL_InitTick>

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	40023c00 	.word	0x40023c00
 8005fac:	40023800 	.word	0x40023800
 8005fb0:	0800e7c0 	.word	0x0800e7c0
 8005fb4:	20000020 	.word	0x20000020
 8005fb8:	20000024 	.word	0x20000024

08005fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fc0:	b090      	sub	sp, #64	@ 0x40
 8005fc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005fd4:	4b59      	ldr	r3, [pc, #356]	@ (800613c <HAL_RCC_GetSysClockFreq+0x180>)
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	f003 030c 	and.w	r3, r3, #12
 8005fdc:	2b08      	cmp	r3, #8
 8005fde:	d00d      	beq.n	8005ffc <HAL_RCC_GetSysClockFreq+0x40>
 8005fe0:	2b08      	cmp	r3, #8
 8005fe2:	f200 80a1 	bhi.w	8006128 <HAL_RCC_GetSysClockFreq+0x16c>
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d002      	beq.n	8005ff0 <HAL_RCC_GetSysClockFreq+0x34>
 8005fea:	2b04      	cmp	r3, #4
 8005fec:	d003      	beq.n	8005ff6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005fee:	e09b      	b.n	8006128 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ff0:	4b53      	ldr	r3, [pc, #332]	@ (8006140 <HAL_RCC_GetSysClockFreq+0x184>)
 8005ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005ff4:	e09b      	b.n	800612e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ff6:	4b53      	ldr	r3, [pc, #332]	@ (8006144 <HAL_RCC_GetSysClockFreq+0x188>)
 8005ff8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005ffa:	e098      	b.n	800612e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ffc:	4b4f      	ldr	r3, [pc, #316]	@ (800613c <HAL_RCC_GetSysClockFreq+0x180>)
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006004:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006006:	4b4d      	ldr	r3, [pc, #308]	@ (800613c <HAL_RCC_GetSysClockFreq+0x180>)
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800600e:	2b00      	cmp	r3, #0
 8006010:	d028      	beq.n	8006064 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006012:	4b4a      	ldr	r3, [pc, #296]	@ (800613c <HAL_RCC_GetSysClockFreq+0x180>)
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	099b      	lsrs	r3, r3, #6
 8006018:	2200      	movs	r2, #0
 800601a:	623b      	str	r3, [r7, #32]
 800601c:	627a      	str	r2, [r7, #36]	@ 0x24
 800601e:	6a3b      	ldr	r3, [r7, #32]
 8006020:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006024:	2100      	movs	r1, #0
 8006026:	4b47      	ldr	r3, [pc, #284]	@ (8006144 <HAL_RCC_GetSysClockFreq+0x188>)
 8006028:	fb03 f201 	mul.w	r2, r3, r1
 800602c:	2300      	movs	r3, #0
 800602e:	fb00 f303 	mul.w	r3, r0, r3
 8006032:	4413      	add	r3, r2
 8006034:	4a43      	ldr	r2, [pc, #268]	@ (8006144 <HAL_RCC_GetSysClockFreq+0x188>)
 8006036:	fba0 1202 	umull	r1, r2, r0, r2
 800603a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800603c:	460a      	mov	r2, r1
 800603e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006040:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006042:	4413      	add	r3, r2
 8006044:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006048:	2200      	movs	r2, #0
 800604a:	61bb      	str	r3, [r7, #24]
 800604c:	61fa      	str	r2, [r7, #28]
 800604e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006052:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006056:	f7fa fdff 	bl	8000c58 <__aeabi_uldivmod>
 800605a:	4602      	mov	r2, r0
 800605c:	460b      	mov	r3, r1
 800605e:	4613      	mov	r3, r2
 8006060:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006062:	e053      	b.n	800610c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006064:	4b35      	ldr	r3, [pc, #212]	@ (800613c <HAL_RCC_GetSysClockFreq+0x180>)
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	099b      	lsrs	r3, r3, #6
 800606a:	2200      	movs	r2, #0
 800606c:	613b      	str	r3, [r7, #16]
 800606e:	617a      	str	r2, [r7, #20]
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006076:	f04f 0b00 	mov.w	fp, #0
 800607a:	4652      	mov	r2, sl
 800607c:	465b      	mov	r3, fp
 800607e:	f04f 0000 	mov.w	r0, #0
 8006082:	f04f 0100 	mov.w	r1, #0
 8006086:	0159      	lsls	r1, r3, #5
 8006088:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800608c:	0150      	lsls	r0, r2, #5
 800608e:	4602      	mov	r2, r0
 8006090:	460b      	mov	r3, r1
 8006092:	ebb2 080a 	subs.w	r8, r2, sl
 8006096:	eb63 090b 	sbc.w	r9, r3, fp
 800609a:	f04f 0200 	mov.w	r2, #0
 800609e:	f04f 0300 	mov.w	r3, #0
 80060a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80060a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80060aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80060ae:	ebb2 0408 	subs.w	r4, r2, r8
 80060b2:	eb63 0509 	sbc.w	r5, r3, r9
 80060b6:	f04f 0200 	mov.w	r2, #0
 80060ba:	f04f 0300 	mov.w	r3, #0
 80060be:	00eb      	lsls	r3, r5, #3
 80060c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060c4:	00e2      	lsls	r2, r4, #3
 80060c6:	4614      	mov	r4, r2
 80060c8:	461d      	mov	r5, r3
 80060ca:	eb14 030a 	adds.w	r3, r4, sl
 80060ce:	603b      	str	r3, [r7, #0]
 80060d0:	eb45 030b 	adc.w	r3, r5, fp
 80060d4:	607b      	str	r3, [r7, #4]
 80060d6:	f04f 0200 	mov.w	r2, #0
 80060da:	f04f 0300 	mov.w	r3, #0
 80060de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80060e2:	4629      	mov	r1, r5
 80060e4:	028b      	lsls	r3, r1, #10
 80060e6:	4621      	mov	r1, r4
 80060e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80060ec:	4621      	mov	r1, r4
 80060ee:	028a      	lsls	r2, r1, #10
 80060f0:	4610      	mov	r0, r2
 80060f2:	4619      	mov	r1, r3
 80060f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060f6:	2200      	movs	r2, #0
 80060f8:	60bb      	str	r3, [r7, #8]
 80060fa:	60fa      	str	r2, [r7, #12]
 80060fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006100:	f7fa fdaa 	bl	8000c58 <__aeabi_uldivmod>
 8006104:	4602      	mov	r2, r0
 8006106:	460b      	mov	r3, r1
 8006108:	4613      	mov	r3, r2
 800610a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800610c:	4b0b      	ldr	r3, [pc, #44]	@ (800613c <HAL_RCC_GetSysClockFreq+0x180>)
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	0c1b      	lsrs	r3, r3, #16
 8006112:	f003 0303 	and.w	r3, r3, #3
 8006116:	3301      	adds	r3, #1
 8006118:	005b      	lsls	r3, r3, #1
 800611a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800611c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800611e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006120:	fbb2 f3f3 	udiv	r3, r2, r3
 8006124:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006126:	e002      	b.n	800612e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006128:	4b05      	ldr	r3, [pc, #20]	@ (8006140 <HAL_RCC_GetSysClockFreq+0x184>)
 800612a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800612c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800612e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006130:	4618      	mov	r0, r3
 8006132:	3740      	adds	r7, #64	@ 0x40
 8006134:	46bd      	mov	sp, r7
 8006136:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800613a:	bf00      	nop
 800613c:	40023800 	.word	0x40023800
 8006140:	00f42400 	.word	0x00f42400
 8006144:	017d7840 	.word	0x017d7840

08006148 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006148:	b480      	push	{r7}
 800614a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800614c:	4b03      	ldr	r3, [pc, #12]	@ (800615c <HAL_RCC_GetHCLKFreq+0x14>)
 800614e:	681b      	ldr	r3, [r3, #0]
}
 8006150:	4618      	mov	r0, r3
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	20000020 	.word	0x20000020

08006160 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006164:	f7ff fff0 	bl	8006148 <HAL_RCC_GetHCLKFreq>
 8006168:	4602      	mov	r2, r0
 800616a:	4b05      	ldr	r3, [pc, #20]	@ (8006180 <HAL_RCC_GetPCLK1Freq+0x20>)
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	0a9b      	lsrs	r3, r3, #10
 8006170:	f003 0307 	and.w	r3, r3, #7
 8006174:	4903      	ldr	r1, [pc, #12]	@ (8006184 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006176:	5ccb      	ldrb	r3, [r1, r3]
 8006178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800617c:	4618      	mov	r0, r3
 800617e:	bd80      	pop	{r7, pc}
 8006180:	40023800 	.word	0x40023800
 8006184:	0800e7d0 	.word	0x0800e7d0

08006188 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800618c:	f7ff ffdc 	bl	8006148 <HAL_RCC_GetHCLKFreq>
 8006190:	4602      	mov	r2, r0
 8006192:	4b05      	ldr	r3, [pc, #20]	@ (80061a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	0b5b      	lsrs	r3, r3, #13
 8006198:	f003 0307 	and.w	r3, r3, #7
 800619c:	4903      	ldr	r1, [pc, #12]	@ (80061ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800619e:	5ccb      	ldrb	r3, [r1, r3]
 80061a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	40023800 	.word	0x40023800
 80061ac:	0800e7d0 	.word	0x0800e7d0

080061b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	220f      	movs	r2, #15
 80061be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80061c0:	4b12      	ldr	r3, [pc, #72]	@ (800620c <HAL_RCC_GetClockConfig+0x5c>)
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	f003 0203 	and.w	r2, r3, #3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80061cc:	4b0f      	ldr	r3, [pc, #60]	@ (800620c <HAL_RCC_GetClockConfig+0x5c>)
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80061d8:	4b0c      	ldr	r3, [pc, #48]	@ (800620c <HAL_RCC_GetClockConfig+0x5c>)
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80061e4:	4b09      	ldr	r3, [pc, #36]	@ (800620c <HAL_RCC_GetClockConfig+0x5c>)
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	08db      	lsrs	r3, r3, #3
 80061ea:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80061f2:	4b07      	ldr	r3, [pc, #28]	@ (8006210 <HAL_RCC_GetClockConfig+0x60>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 0207 	and.w	r2, r3, #7
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	601a      	str	r2, [r3, #0]
}
 80061fe:	bf00      	nop
 8006200:	370c      	adds	r7, #12
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	40023800 	.word	0x40023800
 8006210:	40023c00 	.word	0x40023c00

08006214 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d101      	bne.n	8006226 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e041      	b.n	80062aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800622c:	b2db      	uxtb	r3, r3
 800622e:	2b00      	cmp	r3, #0
 8006230:	d106      	bne.n	8006240 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f7fc ffbc 	bl	80031b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2202      	movs	r2, #2
 8006244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	3304      	adds	r3, #4
 8006250:	4619      	mov	r1, r3
 8006252:	4610      	mov	r0, r2
 8006254:	f000 fe7c 	bl	8006f50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3708      	adds	r7, #8
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
	...

080062b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d001      	beq.n	80062cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e044      	b.n	8006356 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2202      	movs	r2, #2
 80062d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68da      	ldr	r2, [r3, #12]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f042 0201 	orr.w	r2, r2, #1
 80062e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a1e      	ldr	r2, [pc, #120]	@ (8006364 <HAL_TIM_Base_Start_IT+0xb0>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d018      	beq.n	8006320 <HAL_TIM_Base_Start_IT+0x6c>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062f6:	d013      	beq.n	8006320 <HAL_TIM_Base_Start_IT+0x6c>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a1a      	ldr	r2, [pc, #104]	@ (8006368 <HAL_TIM_Base_Start_IT+0xb4>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d00e      	beq.n	8006320 <HAL_TIM_Base_Start_IT+0x6c>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a19      	ldr	r2, [pc, #100]	@ (800636c <HAL_TIM_Base_Start_IT+0xb8>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d009      	beq.n	8006320 <HAL_TIM_Base_Start_IT+0x6c>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a17      	ldr	r2, [pc, #92]	@ (8006370 <HAL_TIM_Base_Start_IT+0xbc>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d004      	beq.n	8006320 <HAL_TIM_Base_Start_IT+0x6c>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a16      	ldr	r2, [pc, #88]	@ (8006374 <HAL_TIM_Base_Start_IT+0xc0>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d111      	bne.n	8006344 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f003 0307 	and.w	r3, r3, #7
 800632a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2b06      	cmp	r3, #6
 8006330:	d010      	beq.n	8006354 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f042 0201 	orr.w	r2, r2, #1
 8006340:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006342:	e007      	b.n	8006354 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f042 0201 	orr.w	r2, r2, #1
 8006352:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3714      	adds	r7, #20
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	40010000 	.word	0x40010000
 8006368:	40000400 	.word	0x40000400
 800636c:	40000800 	.word	0x40000800
 8006370:	40000c00 	.word	0x40000c00
 8006374:	40014000 	.word	0x40014000

08006378 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d101      	bne.n	800638a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e041      	b.n	800640e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006390:	b2db      	uxtb	r3, r3
 8006392:	2b00      	cmp	r3, #0
 8006394:	d106      	bne.n	80063a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f7fc ff98 	bl	80032d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2202      	movs	r2, #2
 80063a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	3304      	adds	r3, #4
 80063b4:	4619      	mov	r1, r3
 80063b6:	4610      	mov	r0, r2
 80063b8:	f000 fdca 	bl	8006f50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3708      	adds	r7, #8
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
	...

08006418 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d109      	bne.n	800643c <HAL_TIM_PWM_Start+0x24>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800642e:	b2db      	uxtb	r3, r3
 8006430:	2b01      	cmp	r3, #1
 8006432:	bf14      	ite	ne
 8006434:	2301      	movne	r3, #1
 8006436:	2300      	moveq	r3, #0
 8006438:	b2db      	uxtb	r3, r3
 800643a:	e022      	b.n	8006482 <HAL_TIM_PWM_Start+0x6a>
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	2b04      	cmp	r3, #4
 8006440:	d109      	bne.n	8006456 <HAL_TIM_PWM_Start+0x3e>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006448:	b2db      	uxtb	r3, r3
 800644a:	2b01      	cmp	r3, #1
 800644c:	bf14      	ite	ne
 800644e:	2301      	movne	r3, #1
 8006450:	2300      	moveq	r3, #0
 8006452:	b2db      	uxtb	r3, r3
 8006454:	e015      	b.n	8006482 <HAL_TIM_PWM_Start+0x6a>
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	2b08      	cmp	r3, #8
 800645a:	d109      	bne.n	8006470 <HAL_TIM_PWM_Start+0x58>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006462:	b2db      	uxtb	r3, r3
 8006464:	2b01      	cmp	r3, #1
 8006466:	bf14      	ite	ne
 8006468:	2301      	movne	r3, #1
 800646a:	2300      	moveq	r3, #0
 800646c:	b2db      	uxtb	r3, r3
 800646e:	e008      	b.n	8006482 <HAL_TIM_PWM_Start+0x6a>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006476:	b2db      	uxtb	r3, r3
 8006478:	2b01      	cmp	r3, #1
 800647a:	bf14      	ite	ne
 800647c:	2301      	movne	r3, #1
 800647e:	2300      	moveq	r3, #0
 8006480:	b2db      	uxtb	r3, r3
 8006482:	2b00      	cmp	r3, #0
 8006484:	d001      	beq.n	800648a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e068      	b.n	800655c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d104      	bne.n	800649a <HAL_TIM_PWM_Start+0x82>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2202      	movs	r2, #2
 8006494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006498:	e013      	b.n	80064c2 <HAL_TIM_PWM_Start+0xaa>
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	2b04      	cmp	r3, #4
 800649e:	d104      	bne.n	80064aa <HAL_TIM_PWM_Start+0x92>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2202      	movs	r2, #2
 80064a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80064a8:	e00b      	b.n	80064c2 <HAL_TIM_PWM_Start+0xaa>
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	2b08      	cmp	r3, #8
 80064ae:	d104      	bne.n	80064ba <HAL_TIM_PWM_Start+0xa2>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2202      	movs	r2, #2
 80064b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80064b8:	e003      	b.n	80064c2 <HAL_TIM_PWM_Start+0xaa>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2202      	movs	r2, #2
 80064be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2201      	movs	r2, #1
 80064c8:	6839      	ldr	r1, [r7, #0]
 80064ca:	4618      	mov	r0, r3
 80064cc:	f001 f910 	bl	80076f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a23      	ldr	r2, [pc, #140]	@ (8006564 <HAL_TIM_PWM_Start+0x14c>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d107      	bne.n	80064ea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80064e8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a1d      	ldr	r2, [pc, #116]	@ (8006564 <HAL_TIM_PWM_Start+0x14c>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d018      	beq.n	8006526 <HAL_TIM_PWM_Start+0x10e>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064fc:	d013      	beq.n	8006526 <HAL_TIM_PWM_Start+0x10e>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a19      	ldr	r2, [pc, #100]	@ (8006568 <HAL_TIM_PWM_Start+0x150>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d00e      	beq.n	8006526 <HAL_TIM_PWM_Start+0x10e>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a17      	ldr	r2, [pc, #92]	@ (800656c <HAL_TIM_PWM_Start+0x154>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d009      	beq.n	8006526 <HAL_TIM_PWM_Start+0x10e>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a16      	ldr	r2, [pc, #88]	@ (8006570 <HAL_TIM_PWM_Start+0x158>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d004      	beq.n	8006526 <HAL_TIM_PWM_Start+0x10e>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a14      	ldr	r2, [pc, #80]	@ (8006574 <HAL_TIM_PWM_Start+0x15c>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d111      	bne.n	800654a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	f003 0307 	and.w	r3, r3, #7
 8006530:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2b06      	cmp	r3, #6
 8006536:	d010      	beq.n	800655a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f042 0201 	orr.w	r2, r2, #1
 8006546:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006548:	e007      	b.n	800655a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f042 0201 	orr.w	r2, r2, #1
 8006558:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	40010000 	.word	0x40010000
 8006568:	40000400 	.word	0x40000400
 800656c:	40000800 	.word	0x40000800
 8006570:	40000c00 	.word	0x40000c00
 8006574:	40014000 	.word	0x40014000

08006578 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d101      	bne.n	800658a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e041      	b.n	800660e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006590:	b2db      	uxtb	r3, r3
 8006592:	2b00      	cmp	r3, #0
 8006594:	d106      	bne.n	80065a4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 f839 	bl	8006616 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2202      	movs	r2, #2
 80065a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	3304      	adds	r3, #4
 80065b4:	4619      	mov	r1, r3
 80065b6:	4610      	mov	r0, r2
 80065b8:	f000 fcca 	bl	8006f50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3708      	adds	r7, #8
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006616:	b480      	push	{r7}
 8006618:	b083      	sub	sp, #12
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800661e:	bf00      	nop
 8006620:	370c      	adds	r7, #12
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
	...

0800662c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006636:	2300      	movs	r3, #0
 8006638:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d104      	bne.n	800664a <HAL_TIM_IC_Start_IT+0x1e>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006646:	b2db      	uxtb	r3, r3
 8006648:	e013      	b.n	8006672 <HAL_TIM_IC_Start_IT+0x46>
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	2b04      	cmp	r3, #4
 800664e:	d104      	bne.n	800665a <HAL_TIM_IC_Start_IT+0x2e>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006656:	b2db      	uxtb	r3, r3
 8006658:	e00b      	b.n	8006672 <HAL_TIM_IC_Start_IT+0x46>
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	2b08      	cmp	r3, #8
 800665e:	d104      	bne.n	800666a <HAL_TIM_IC_Start_IT+0x3e>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006666:	b2db      	uxtb	r3, r3
 8006668:	e003      	b.n	8006672 <HAL_TIM_IC_Start_IT+0x46>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006670:	b2db      	uxtb	r3, r3
 8006672:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d104      	bne.n	8006684 <HAL_TIM_IC_Start_IT+0x58>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006680:	b2db      	uxtb	r3, r3
 8006682:	e013      	b.n	80066ac <HAL_TIM_IC_Start_IT+0x80>
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	2b04      	cmp	r3, #4
 8006688:	d104      	bne.n	8006694 <HAL_TIM_IC_Start_IT+0x68>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006690:	b2db      	uxtb	r3, r3
 8006692:	e00b      	b.n	80066ac <HAL_TIM_IC_Start_IT+0x80>
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	2b08      	cmp	r3, #8
 8006698:	d104      	bne.n	80066a4 <HAL_TIM_IC_Start_IT+0x78>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	e003      	b.n	80066ac <HAL_TIM_IC_Start_IT+0x80>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80066ae:	7bbb      	ldrb	r3, [r7, #14]
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d102      	bne.n	80066ba <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80066b4:	7b7b      	ldrb	r3, [r7, #13]
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d001      	beq.n	80066be <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e0c2      	b.n	8006844 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d104      	bne.n	80066ce <HAL_TIM_IC_Start_IT+0xa2>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2202      	movs	r2, #2
 80066c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80066cc:	e013      	b.n	80066f6 <HAL_TIM_IC_Start_IT+0xca>
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	2b04      	cmp	r3, #4
 80066d2:	d104      	bne.n	80066de <HAL_TIM_IC_Start_IT+0xb2>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2202      	movs	r2, #2
 80066d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80066dc:	e00b      	b.n	80066f6 <HAL_TIM_IC_Start_IT+0xca>
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	2b08      	cmp	r3, #8
 80066e2:	d104      	bne.n	80066ee <HAL_TIM_IC_Start_IT+0xc2>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2202      	movs	r2, #2
 80066e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80066ec:	e003      	b.n	80066f6 <HAL_TIM_IC_Start_IT+0xca>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2202      	movs	r2, #2
 80066f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d104      	bne.n	8006706 <HAL_TIM_IC_Start_IT+0xda>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2202      	movs	r2, #2
 8006700:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006704:	e013      	b.n	800672e <HAL_TIM_IC_Start_IT+0x102>
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	2b04      	cmp	r3, #4
 800670a:	d104      	bne.n	8006716 <HAL_TIM_IC_Start_IT+0xea>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2202      	movs	r2, #2
 8006710:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006714:	e00b      	b.n	800672e <HAL_TIM_IC_Start_IT+0x102>
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	2b08      	cmp	r3, #8
 800671a:	d104      	bne.n	8006726 <HAL_TIM_IC_Start_IT+0xfa>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2202      	movs	r2, #2
 8006720:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006724:	e003      	b.n	800672e <HAL_TIM_IC_Start_IT+0x102>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2202      	movs	r2, #2
 800672a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	2b0c      	cmp	r3, #12
 8006732:	d841      	bhi.n	80067b8 <HAL_TIM_IC_Start_IT+0x18c>
 8006734:	a201      	add	r2, pc, #4	@ (adr r2, 800673c <HAL_TIM_IC_Start_IT+0x110>)
 8006736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800673a:	bf00      	nop
 800673c:	08006771 	.word	0x08006771
 8006740:	080067b9 	.word	0x080067b9
 8006744:	080067b9 	.word	0x080067b9
 8006748:	080067b9 	.word	0x080067b9
 800674c:	08006783 	.word	0x08006783
 8006750:	080067b9 	.word	0x080067b9
 8006754:	080067b9 	.word	0x080067b9
 8006758:	080067b9 	.word	0x080067b9
 800675c:	08006795 	.word	0x08006795
 8006760:	080067b9 	.word	0x080067b9
 8006764:	080067b9 	.word	0x080067b9
 8006768:	080067b9 	.word	0x080067b9
 800676c:	080067a7 	.word	0x080067a7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68da      	ldr	r2, [r3, #12]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f042 0202 	orr.w	r2, r2, #2
 800677e:	60da      	str	r2, [r3, #12]
      break;
 8006780:	e01d      	b.n	80067be <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68da      	ldr	r2, [r3, #12]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f042 0204 	orr.w	r2, r2, #4
 8006790:	60da      	str	r2, [r3, #12]
      break;
 8006792:	e014      	b.n	80067be <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68da      	ldr	r2, [r3, #12]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f042 0208 	orr.w	r2, r2, #8
 80067a2:	60da      	str	r2, [r3, #12]
      break;
 80067a4:	e00b      	b.n	80067be <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68da      	ldr	r2, [r3, #12]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f042 0210 	orr.w	r2, r2, #16
 80067b4:	60da      	str	r2, [r3, #12]
      break;
 80067b6:	e002      	b.n	80067be <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	73fb      	strb	r3, [r7, #15]
      break;
 80067bc:	bf00      	nop
  }

  if (status == HAL_OK)
 80067be:	7bfb      	ldrb	r3, [r7, #15]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d13e      	bne.n	8006842 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2201      	movs	r2, #1
 80067ca:	6839      	ldr	r1, [r7, #0]
 80067cc:	4618      	mov	r0, r3
 80067ce:	f000 ff8f 	bl	80076f0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a1d      	ldr	r2, [pc, #116]	@ (800684c <HAL_TIM_IC_Start_IT+0x220>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d018      	beq.n	800680e <HAL_TIM_IC_Start_IT+0x1e2>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067e4:	d013      	beq.n	800680e <HAL_TIM_IC_Start_IT+0x1e2>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a19      	ldr	r2, [pc, #100]	@ (8006850 <HAL_TIM_IC_Start_IT+0x224>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d00e      	beq.n	800680e <HAL_TIM_IC_Start_IT+0x1e2>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a17      	ldr	r2, [pc, #92]	@ (8006854 <HAL_TIM_IC_Start_IT+0x228>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d009      	beq.n	800680e <HAL_TIM_IC_Start_IT+0x1e2>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a16      	ldr	r2, [pc, #88]	@ (8006858 <HAL_TIM_IC_Start_IT+0x22c>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d004      	beq.n	800680e <HAL_TIM_IC_Start_IT+0x1e2>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a14      	ldr	r2, [pc, #80]	@ (800685c <HAL_TIM_IC_Start_IT+0x230>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d111      	bne.n	8006832 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	f003 0307 	and.w	r3, r3, #7
 8006818:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	2b06      	cmp	r3, #6
 800681e:	d010      	beq.n	8006842 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f042 0201 	orr.w	r2, r2, #1
 800682e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006830:	e007      	b.n	8006842 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f042 0201 	orr.w	r2, r2, #1
 8006840:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006842:	7bfb      	ldrb	r3, [r7, #15]
}
 8006844:	4618      	mov	r0, r3
 8006846:	3710      	adds	r7, #16
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	40010000 	.word	0x40010000
 8006850:	40000400 	.word	0x40000400
 8006854:	40000800 	.word	0x40000800
 8006858:	40000c00 	.word	0x40000c00
 800685c:	40014000 	.word	0x40014000

08006860 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	f003 0302 	and.w	r3, r3, #2
 800687e:	2b00      	cmp	r3, #0
 8006880:	d020      	beq.n	80068c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f003 0302 	and.w	r3, r3, #2
 8006888:	2b00      	cmp	r3, #0
 800688a:	d01b      	beq.n	80068c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f06f 0202 	mvn.w	r2, #2
 8006894:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2201      	movs	r2, #1
 800689a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	f003 0303 	and.w	r3, r3, #3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d003      	beq.n	80068b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f7fc f8e0 	bl	8002a70 <HAL_TIM_IC_CaptureCallback>
 80068b0:	e005      	b.n	80068be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 fb2e 	bl	8006f14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 fb35 	bl	8006f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	f003 0304 	and.w	r3, r3, #4
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d020      	beq.n	8006910 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f003 0304 	and.w	r3, r3, #4
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d01b      	beq.n	8006910 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f06f 0204 	mvn.w	r2, #4
 80068e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2202      	movs	r2, #2
 80068e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d003      	beq.n	80068fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f7fc f8ba 	bl	8002a70 <HAL_TIM_IC_CaptureCallback>
 80068fc:	e005      	b.n	800690a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 fb08 	bl	8006f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 fb0f 	bl	8006f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	f003 0308 	and.w	r3, r3, #8
 8006916:	2b00      	cmp	r3, #0
 8006918:	d020      	beq.n	800695c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f003 0308 	and.w	r3, r3, #8
 8006920:	2b00      	cmp	r3, #0
 8006922:	d01b      	beq.n	800695c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f06f 0208 	mvn.w	r2, #8
 800692c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2204      	movs	r2, #4
 8006932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	69db      	ldr	r3, [r3, #28]
 800693a:	f003 0303 	and.w	r3, r3, #3
 800693e:	2b00      	cmp	r3, #0
 8006940:	d003      	beq.n	800694a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f7fc f894 	bl	8002a70 <HAL_TIM_IC_CaptureCallback>
 8006948:	e005      	b.n	8006956 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 fae2 	bl	8006f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 fae9 	bl	8006f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	f003 0310 	and.w	r3, r3, #16
 8006962:	2b00      	cmp	r3, #0
 8006964:	d020      	beq.n	80069a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f003 0310 	and.w	r3, r3, #16
 800696c:	2b00      	cmp	r3, #0
 800696e:	d01b      	beq.n	80069a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f06f 0210 	mvn.w	r2, #16
 8006978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2208      	movs	r2, #8
 800697e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	69db      	ldr	r3, [r3, #28]
 8006986:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800698a:	2b00      	cmp	r3, #0
 800698c:	d003      	beq.n	8006996 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f7fc f86e 	bl	8002a70 <HAL_TIM_IC_CaptureCallback>
 8006994:	e005      	b.n	80069a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 fabc 	bl	8006f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 fac3 	bl	8006f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	f003 0301 	and.w	r3, r3, #1
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00c      	beq.n	80069cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f003 0301 	and.w	r3, r3, #1
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d007      	beq.n	80069cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f06f 0201 	mvn.w	r2, #1
 80069c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f7fb ff2a 	bl	8002820 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00c      	beq.n	80069f0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d007      	beq.n	80069f0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80069e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 ff1e 	bl	800782c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00c      	beq.n	8006a14 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d007      	beq.n	8006a14 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 fa94 	bl	8006f3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	f003 0320 	and.w	r3, r3, #32
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00c      	beq.n	8006a38 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f003 0320 	and.w	r3, r3, #32
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d007      	beq.n	8006a38 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f06f 0220 	mvn.w	r2, #32
 8006a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 fef0 	bl	8007818 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a38:	bf00      	nop
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b086      	sub	sp, #24
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d101      	bne.n	8006a5e <HAL_TIM_IC_ConfigChannel+0x1e>
 8006a5a:	2302      	movs	r3, #2
 8006a5c:	e088      	b.n	8006b70 <HAL_TIM_IC_ConfigChannel+0x130>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2201      	movs	r2, #1
 8006a62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d11b      	bne.n	8006aa4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006a7c:	f000 fc80 	bl	8007380 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	699a      	ldr	r2, [r3, #24]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f022 020c 	bic.w	r2, r2, #12
 8006a8e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	6999      	ldr	r1, [r3, #24]
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	689a      	ldr	r2, [r3, #8]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	430a      	orrs	r2, r1
 8006aa0:	619a      	str	r2, [r3, #24]
 8006aa2:	e060      	b.n	8006b66 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2b04      	cmp	r3, #4
 8006aa8:	d11c      	bne.n	8006ae4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006aba:	f000 fcf8 	bl	80074ae <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	699a      	ldr	r2, [r3, #24]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006acc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	6999      	ldr	r1, [r3, #24]
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	021a      	lsls	r2, r3, #8
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	430a      	orrs	r2, r1
 8006ae0:	619a      	str	r2, [r3, #24]
 8006ae2:	e040      	b.n	8006b66 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2b08      	cmp	r3, #8
 8006ae8:	d11b      	bne.n	8006b22 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006afa:	f000 fd45 	bl	8007588 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	69da      	ldr	r2, [r3, #28]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f022 020c 	bic.w	r2, r2, #12
 8006b0c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	69d9      	ldr	r1, [r3, #28]
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	689a      	ldr	r2, [r3, #8]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	430a      	orrs	r2, r1
 8006b1e:	61da      	str	r2, [r3, #28]
 8006b20:	e021      	b.n	8006b66 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2b0c      	cmp	r3, #12
 8006b26:	d11c      	bne.n	8006b62 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006b38:	f000 fd62 	bl	8007600 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	69da      	ldr	r2, [r3, #28]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006b4a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	69d9      	ldr	r1, [r3, #28]
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	021a      	lsls	r2, r3, #8
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	430a      	orrs	r2, r1
 8006b5e:	61da      	str	r2, [r3, #28]
 8006b60:	e001      	b.n	8006b66 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006b6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3718      	adds	r7, #24
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b086      	sub	sp, #24
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b84:	2300      	movs	r3, #0
 8006b86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d101      	bne.n	8006b96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b92:	2302      	movs	r3, #2
 8006b94:	e0ae      	b.n	8006cf4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2b0c      	cmp	r3, #12
 8006ba2:	f200 809f 	bhi.w	8006ce4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006ba6:	a201      	add	r2, pc, #4	@ (adr r2, 8006bac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bac:	08006be1 	.word	0x08006be1
 8006bb0:	08006ce5 	.word	0x08006ce5
 8006bb4:	08006ce5 	.word	0x08006ce5
 8006bb8:	08006ce5 	.word	0x08006ce5
 8006bbc:	08006c21 	.word	0x08006c21
 8006bc0:	08006ce5 	.word	0x08006ce5
 8006bc4:	08006ce5 	.word	0x08006ce5
 8006bc8:	08006ce5 	.word	0x08006ce5
 8006bcc:	08006c63 	.word	0x08006c63
 8006bd0:	08006ce5 	.word	0x08006ce5
 8006bd4:	08006ce5 	.word	0x08006ce5
 8006bd8:	08006ce5 	.word	0x08006ce5
 8006bdc:	08006ca3 	.word	0x08006ca3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68b9      	ldr	r1, [r7, #8]
 8006be6:	4618      	mov	r0, r3
 8006be8:	f000 fa3e 	bl	8007068 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	699a      	ldr	r2, [r3, #24]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f042 0208 	orr.w	r2, r2, #8
 8006bfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	699a      	ldr	r2, [r3, #24]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f022 0204 	bic.w	r2, r2, #4
 8006c0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	6999      	ldr	r1, [r3, #24]
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	691a      	ldr	r2, [r3, #16]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	430a      	orrs	r2, r1
 8006c1c:	619a      	str	r2, [r3, #24]
      break;
 8006c1e:	e064      	b.n	8006cea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68b9      	ldr	r1, [r7, #8]
 8006c26:	4618      	mov	r0, r3
 8006c28:	f000 fa84 	bl	8007134 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	699a      	ldr	r2, [r3, #24]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	699a      	ldr	r2, [r3, #24]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	6999      	ldr	r1, [r3, #24]
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	021a      	lsls	r2, r3, #8
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	430a      	orrs	r2, r1
 8006c5e:	619a      	str	r2, [r3, #24]
      break;
 8006c60:	e043      	b.n	8006cea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	68b9      	ldr	r1, [r7, #8]
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f000 facf 	bl	800720c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	69da      	ldr	r2, [r3, #28]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f042 0208 	orr.w	r2, r2, #8
 8006c7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	69da      	ldr	r2, [r3, #28]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f022 0204 	bic.w	r2, r2, #4
 8006c8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	69d9      	ldr	r1, [r3, #28]
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	691a      	ldr	r2, [r3, #16]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	430a      	orrs	r2, r1
 8006c9e:	61da      	str	r2, [r3, #28]
      break;
 8006ca0:	e023      	b.n	8006cea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68b9      	ldr	r1, [r7, #8]
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f000 fb19 	bl	80072e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	69da      	ldr	r2, [r3, #28]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006cbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	69da      	ldr	r2, [r3, #28]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ccc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	69d9      	ldr	r1, [r3, #28]
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	021a      	lsls	r2, r3, #8
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	430a      	orrs	r2, r1
 8006ce0:	61da      	str	r2, [r3, #28]
      break;
 8006ce2:	e002      	b.n	8006cea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	75fb      	strb	r3, [r7, #23]
      break;
 8006ce8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3718      	adds	r7, #24
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d06:	2300      	movs	r3, #0
 8006d08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d101      	bne.n	8006d18 <HAL_TIM_ConfigClockSource+0x1c>
 8006d14:	2302      	movs	r3, #2
 8006d16:	e0b4      	b.n	8006e82 <HAL_TIM_ConfigClockSource+0x186>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2202      	movs	r2, #2
 8006d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006d36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006d3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68ba      	ldr	r2, [r7, #8]
 8006d46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d50:	d03e      	beq.n	8006dd0 <HAL_TIM_ConfigClockSource+0xd4>
 8006d52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d56:	f200 8087 	bhi.w	8006e68 <HAL_TIM_ConfigClockSource+0x16c>
 8006d5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d5e:	f000 8086 	beq.w	8006e6e <HAL_TIM_ConfigClockSource+0x172>
 8006d62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d66:	d87f      	bhi.n	8006e68 <HAL_TIM_ConfigClockSource+0x16c>
 8006d68:	2b70      	cmp	r3, #112	@ 0x70
 8006d6a:	d01a      	beq.n	8006da2 <HAL_TIM_ConfigClockSource+0xa6>
 8006d6c:	2b70      	cmp	r3, #112	@ 0x70
 8006d6e:	d87b      	bhi.n	8006e68 <HAL_TIM_ConfigClockSource+0x16c>
 8006d70:	2b60      	cmp	r3, #96	@ 0x60
 8006d72:	d050      	beq.n	8006e16 <HAL_TIM_ConfigClockSource+0x11a>
 8006d74:	2b60      	cmp	r3, #96	@ 0x60
 8006d76:	d877      	bhi.n	8006e68 <HAL_TIM_ConfigClockSource+0x16c>
 8006d78:	2b50      	cmp	r3, #80	@ 0x50
 8006d7a:	d03c      	beq.n	8006df6 <HAL_TIM_ConfigClockSource+0xfa>
 8006d7c:	2b50      	cmp	r3, #80	@ 0x50
 8006d7e:	d873      	bhi.n	8006e68 <HAL_TIM_ConfigClockSource+0x16c>
 8006d80:	2b40      	cmp	r3, #64	@ 0x40
 8006d82:	d058      	beq.n	8006e36 <HAL_TIM_ConfigClockSource+0x13a>
 8006d84:	2b40      	cmp	r3, #64	@ 0x40
 8006d86:	d86f      	bhi.n	8006e68 <HAL_TIM_ConfigClockSource+0x16c>
 8006d88:	2b30      	cmp	r3, #48	@ 0x30
 8006d8a:	d064      	beq.n	8006e56 <HAL_TIM_ConfigClockSource+0x15a>
 8006d8c:	2b30      	cmp	r3, #48	@ 0x30
 8006d8e:	d86b      	bhi.n	8006e68 <HAL_TIM_ConfigClockSource+0x16c>
 8006d90:	2b20      	cmp	r3, #32
 8006d92:	d060      	beq.n	8006e56 <HAL_TIM_ConfigClockSource+0x15a>
 8006d94:	2b20      	cmp	r3, #32
 8006d96:	d867      	bhi.n	8006e68 <HAL_TIM_ConfigClockSource+0x16c>
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d05c      	beq.n	8006e56 <HAL_TIM_ConfigClockSource+0x15a>
 8006d9c:	2b10      	cmp	r3, #16
 8006d9e:	d05a      	beq.n	8006e56 <HAL_TIM_ConfigClockSource+0x15a>
 8006da0:	e062      	b.n	8006e68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006db2:	f000 fc7d 	bl	80076b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006dc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68ba      	ldr	r2, [r7, #8]
 8006dcc:	609a      	str	r2, [r3, #8]
      break;
 8006dce:	e04f      	b.n	8006e70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006de0:	f000 fc66 	bl	80076b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	689a      	ldr	r2, [r3, #8]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006df2:	609a      	str	r2, [r3, #8]
      break;
 8006df4:	e03c      	b.n	8006e70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e02:	461a      	mov	r2, r3
 8006e04:	f000 fb24 	bl	8007450 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2150      	movs	r1, #80	@ 0x50
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 fc33 	bl	800767a <TIM_ITRx_SetConfig>
      break;
 8006e14:	e02c      	b.n	8006e70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e22:	461a      	mov	r2, r3
 8006e24:	f000 fb80 	bl	8007528 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2160      	movs	r1, #96	@ 0x60
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f000 fc23 	bl	800767a <TIM_ITRx_SetConfig>
      break;
 8006e34:	e01c      	b.n	8006e70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e42:	461a      	mov	r2, r3
 8006e44:	f000 fb04 	bl	8007450 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2140      	movs	r1, #64	@ 0x40
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f000 fc13 	bl	800767a <TIM_ITRx_SetConfig>
      break;
 8006e54:	e00c      	b.n	8006e70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4619      	mov	r1, r3
 8006e60:	4610      	mov	r0, r2
 8006e62:	f000 fc0a 	bl	800767a <TIM_ITRx_SetConfig>
      break;
 8006e66:	e003      	b.n	8006e70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e6c:	e000      	b.n	8006e70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006e6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
	...

08006e8c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b085      	sub	sp, #20
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006e96:	2300      	movs	r3, #0
 8006e98:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	2b0c      	cmp	r3, #12
 8006e9e:	d831      	bhi.n	8006f04 <HAL_TIM_ReadCapturedValue+0x78>
 8006ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ea8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea6:	bf00      	nop
 8006ea8:	08006edd 	.word	0x08006edd
 8006eac:	08006f05 	.word	0x08006f05
 8006eb0:	08006f05 	.word	0x08006f05
 8006eb4:	08006f05 	.word	0x08006f05
 8006eb8:	08006ee7 	.word	0x08006ee7
 8006ebc:	08006f05 	.word	0x08006f05
 8006ec0:	08006f05 	.word	0x08006f05
 8006ec4:	08006f05 	.word	0x08006f05
 8006ec8:	08006ef1 	.word	0x08006ef1
 8006ecc:	08006f05 	.word	0x08006f05
 8006ed0:	08006f05 	.word	0x08006f05
 8006ed4:	08006f05 	.word	0x08006f05
 8006ed8:	08006efb 	.word	0x08006efb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ee2:	60fb      	str	r3, [r7, #12]

      break;
 8006ee4:	e00f      	b.n	8006f06 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eec:	60fb      	str	r3, [r7, #12]

      break;
 8006eee:	e00a      	b.n	8006f06 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ef6:	60fb      	str	r3, [r7, #12]

      break;
 8006ef8:	e005      	b.n	8006f06 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f00:	60fb      	str	r3, [r7, #12]

      break;
 8006f02:	e000      	b.n	8006f06 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006f04:	bf00      	nop
  }

  return tmpreg;
 8006f06:	68fb      	ldr	r3, [r7, #12]
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3714      	adds	r7, #20
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f1c:	bf00      	nop
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f30:	bf00      	nop
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f44:	bf00      	nop
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b085      	sub	sp, #20
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a3a      	ldr	r2, [pc, #232]	@ (800704c <TIM_Base_SetConfig+0xfc>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d00f      	beq.n	8006f88 <TIM_Base_SetConfig+0x38>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f6e:	d00b      	beq.n	8006f88 <TIM_Base_SetConfig+0x38>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a37      	ldr	r2, [pc, #220]	@ (8007050 <TIM_Base_SetConfig+0x100>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d007      	beq.n	8006f88 <TIM_Base_SetConfig+0x38>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a36      	ldr	r2, [pc, #216]	@ (8007054 <TIM_Base_SetConfig+0x104>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d003      	beq.n	8006f88 <TIM_Base_SetConfig+0x38>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a35      	ldr	r2, [pc, #212]	@ (8007058 <TIM_Base_SetConfig+0x108>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d108      	bne.n	8006f9a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a2b      	ldr	r2, [pc, #172]	@ (800704c <TIM_Base_SetConfig+0xfc>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d01b      	beq.n	8006fda <TIM_Base_SetConfig+0x8a>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fa8:	d017      	beq.n	8006fda <TIM_Base_SetConfig+0x8a>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a28      	ldr	r2, [pc, #160]	@ (8007050 <TIM_Base_SetConfig+0x100>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d013      	beq.n	8006fda <TIM_Base_SetConfig+0x8a>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4a27      	ldr	r2, [pc, #156]	@ (8007054 <TIM_Base_SetConfig+0x104>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d00f      	beq.n	8006fda <TIM_Base_SetConfig+0x8a>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a26      	ldr	r2, [pc, #152]	@ (8007058 <TIM_Base_SetConfig+0x108>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d00b      	beq.n	8006fda <TIM_Base_SetConfig+0x8a>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4a25      	ldr	r2, [pc, #148]	@ (800705c <TIM_Base_SetConfig+0x10c>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d007      	beq.n	8006fda <TIM_Base_SetConfig+0x8a>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a24      	ldr	r2, [pc, #144]	@ (8007060 <TIM_Base_SetConfig+0x110>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d003      	beq.n	8006fda <TIM_Base_SetConfig+0x8a>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a23      	ldr	r2, [pc, #140]	@ (8007064 <TIM_Base_SetConfig+0x114>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d108      	bne.n	8006fec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fe0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	695b      	ldr	r3, [r3, #20]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	68fa      	ldr	r2, [r7, #12]
 8006ffe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	689a      	ldr	r2, [r3, #8]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4a0e      	ldr	r2, [pc, #56]	@ (800704c <TIM_Base_SetConfig+0xfc>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d103      	bne.n	8007020 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	691a      	ldr	r2, [r3, #16]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	f003 0301 	and.w	r3, r3, #1
 800702e:	2b01      	cmp	r3, #1
 8007030:	d105      	bne.n	800703e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	f023 0201 	bic.w	r2, r3, #1
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	611a      	str	r2, [r3, #16]
  }
}
 800703e:	bf00      	nop
 8007040:	3714      	adds	r7, #20
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	40010000 	.word	0x40010000
 8007050:	40000400 	.word	0x40000400
 8007054:	40000800 	.word	0x40000800
 8007058:	40000c00 	.word	0x40000c00
 800705c:	40014000 	.word	0x40014000
 8007060:	40014400 	.word	0x40014400
 8007064:	40014800 	.word	0x40014800

08007068 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007068:	b480      	push	{r7}
 800706a:	b087      	sub	sp, #28
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a1b      	ldr	r3, [r3, #32]
 8007076:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6a1b      	ldr	r3, [r3, #32]
 800707c:	f023 0201 	bic.w	r2, r3, #1
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	699b      	ldr	r3, [r3, #24]
 800708e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f023 0303 	bic.w	r3, r3, #3
 800709e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	f023 0302 	bic.w	r3, r3, #2
 80070b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	697a      	ldr	r2, [r7, #20]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4a1c      	ldr	r2, [pc, #112]	@ (8007130 <TIM_OC1_SetConfig+0xc8>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d10c      	bne.n	80070de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	f023 0308 	bic.w	r3, r3, #8
 80070ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	697a      	ldr	r2, [r7, #20]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	f023 0304 	bic.w	r3, r3, #4
 80070dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a13      	ldr	r2, [pc, #76]	@ (8007130 <TIM_OC1_SetConfig+0xc8>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d111      	bne.n	800710a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80070f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	695b      	ldr	r3, [r3, #20]
 80070fa:	693a      	ldr	r2, [r7, #16]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	699b      	ldr	r3, [r3, #24]
 8007104:	693a      	ldr	r2, [r7, #16]
 8007106:	4313      	orrs	r3, r2
 8007108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	693a      	ldr	r2, [r7, #16]
 800710e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	685a      	ldr	r2, [r3, #4]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	697a      	ldr	r2, [r7, #20]
 8007122:	621a      	str	r2, [r3, #32]
}
 8007124:	bf00      	nop
 8007126:	371c      	adds	r7, #28
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr
 8007130:	40010000 	.word	0x40010000

08007134 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007134:	b480      	push	{r7}
 8007136:	b087      	sub	sp, #28
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a1b      	ldr	r3, [r3, #32]
 8007142:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6a1b      	ldr	r3, [r3, #32]
 8007148:	f023 0210 	bic.w	r2, r3, #16
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	699b      	ldr	r3, [r3, #24]
 800715a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800716a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	021b      	lsls	r3, r3, #8
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	4313      	orrs	r3, r2
 8007176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	f023 0320 	bic.w	r3, r3, #32
 800717e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	011b      	lsls	r3, r3, #4
 8007186:	697a      	ldr	r2, [r7, #20]
 8007188:	4313      	orrs	r3, r2
 800718a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a1e      	ldr	r2, [pc, #120]	@ (8007208 <TIM_OC2_SetConfig+0xd4>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d10d      	bne.n	80071b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800719a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	011b      	lsls	r3, r3, #4
 80071a2:	697a      	ldr	r2, [r7, #20]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a15      	ldr	r2, [pc, #84]	@ (8007208 <TIM_OC2_SetConfig+0xd4>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d113      	bne.n	80071e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80071be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80071c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	695b      	ldr	r3, [r3, #20]
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	699b      	ldr	r3, [r3, #24]
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	693a      	ldr	r2, [r7, #16]
 80071dc:	4313      	orrs	r3, r2
 80071de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	693a      	ldr	r2, [r7, #16]
 80071e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	685a      	ldr	r2, [r3, #4]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	697a      	ldr	r2, [r7, #20]
 80071f8:	621a      	str	r2, [r3, #32]
}
 80071fa:	bf00      	nop
 80071fc:	371c      	adds	r7, #28
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
 8007206:	bf00      	nop
 8007208:	40010000 	.word	0x40010000

0800720c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800720c:	b480      	push	{r7}
 800720e:	b087      	sub	sp, #28
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a1b      	ldr	r3, [r3, #32]
 800721a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6a1b      	ldr	r3, [r3, #32]
 8007220:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	69db      	ldr	r3, [r3, #28]
 8007232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800723a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f023 0303 	bic.w	r3, r3, #3
 8007242:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	4313      	orrs	r3, r2
 800724c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007254:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	021b      	lsls	r3, r3, #8
 800725c:	697a      	ldr	r2, [r7, #20]
 800725e:	4313      	orrs	r3, r2
 8007260:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a1d      	ldr	r2, [pc, #116]	@ (80072dc <TIM_OC3_SetConfig+0xd0>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d10d      	bne.n	8007286 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007270:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	021b      	lsls	r3, r3, #8
 8007278:	697a      	ldr	r2, [r7, #20]
 800727a:	4313      	orrs	r3, r2
 800727c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007284:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4a14      	ldr	r2, [pc, #80]	@ (80072dc <TIM_OC3_SetConfig+0xd0>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d113      	bne.n	80072b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007294:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800729c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	695b      	ldr	r3, [r3, #20]
 80072a2:	011b      	lsls	r3, r3, #4
 80072a4:	693a      	ldr	r2, [r7, #16]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	699b      	ldr	r3, [r3, #24]
 80072ae:	011b      	lsls	r3, r3, #4
 80072b0:	693a      	ldr	r2, [r7, #16]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	693a      	ldr	r2, [r7, #16]
 80072ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	685a      	ldr	r2, [r3, #4]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	697a      	ldr	r2, [r7, #20]
 80072ce:	621a      	str	r2, [r3, #32]
}
 80072d0:	bf00      	nop
 80072d2:	371c      	adds	r7, #28
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr
 80072dc:	40010000 	.word	0x40010000

080072e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b087      	sub	sp, #28
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a1b      	ldr	r3, [r3, #32]
 80072ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6a1b      	ldr	r3, [r3, #32]
 80072f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	69db      	ldr	r3, [r3, #28]
 8007306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800730e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007316:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	021b      	lsls	r3, r3, #8
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	4313      	orrs	r3, r2
 8007322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800732a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	031b      	lsls	r3, r3, #12
 8007332:	693a      	ldr	r2, [r7, #16]
 8007334:	4313      	orrs	r3, r2
 8007336:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a10      	ldr	r2, [pc, #64]	@ (800737c <TIM_OC4_SetConfig+0x9c>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d109      	bne.n	8007354 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007346:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	695b      	ldr	r3, [r3, #20]
 800734c:	019b      	lsls	r3, r3, #6
 800734e:	697a      	ldr	r2, [r7, #20]
 8007350:	4313      	orrs	r3, r2
 8007352:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	697a      	ldr	r2, [r7, #20]
 8007358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	685a      	ldr	r2, [r3, #4]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	693a      	ldr	r2, [r7, #16]
 800736c:	621a      	str	r2, [r3, #32]
}
 800736e:	bf00      	nop
 8007370:	371c      	adds	r7, #28
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	40010000 	.word	0x40010000

08007380 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007380:	b480      	push	{r7}
 8007382:	b087      	sub	sp, #28
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	607a      	str	r2, [r7, #4]
 800738c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6a1b      	ldr	r3, [r3, #32]
 8007392:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6a1b      	ldr	r3, [r3, #32]
 8007398:	f023 0201 	bic.w	r2, r3, #1
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	699b      	ldr	r3, [r3, #24]
 80073a4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	4a24      	ldr	r2, [pc, #144]	@ (800743c <TIM_TI1_SetConfig+0xbc>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d013      	beq.n	80073d6 <TIM_TI1_SetConfig+0x56>
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073b4:	d00f      	beq.n	80073d6 <TIM_TI1_SetConfig+0x56>
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	4a21      	ldr	r2, [pc, #132]	@ (8007440 <TIM_TI1_SetConfig+0xc0>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d00b      	beq.n	80073d6 <TIM_TI1_SetConfig+0x56>
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	4a20      	ldr	r2, [pc, #128]	@ (8007444 <TIM_TI1_SetConfig+0xc4>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d007      	beq.n	80073d6 <TIM_TI1_SetConfig+0x56>
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	4a1f      	ldr	r2, [pc, #124]	@ (8007448 <TIM_TI1_SetConfig+0xc8>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d003      	beq.n	80073d6 <TIM_TI1_SetConfig+0x56>
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	4a1e      	ldr	r2, [pc, #120]	@ (800744c <TIM_TI1_SetConfig+0xcc>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d101      	bne.n	80073da <TIM_TI1_SetConfig+0x5a>
 80073d6:	2301      	movs	r3, #1
 80073d8:	e000      	b.n	80073dc <TIM_TI1_SetConfig+0x5c>
 80073da:	2300      	movs	r3, #0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d008      	beq.n	80073f2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	f023 0303 	bic.w	r3, r3, #3
 80073e6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80073e8:	697a      	ldr	r2, [r7, #20]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4313      	orrs	r3, r2
 80073ee:	617b      	str	r3, [r7, #20]
 80073f0:	e003      	b.n	80073fa <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	f043 0301 	orr.w	r3, r3, #1
 80073f8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007400:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	011b      	lsls	r3, r3, #4
 8007406:	b2db      	uxtb	r3, r3
 8007408:	697a      	ldr	r2, [r7, #20]
 800740a:	4313      	orrs	r3, r2
 800740c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	f023 030a 	bic.w	r3, r3, #10
 8007414:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	f003 030a 	and.w	r3, r3, #10
 800741c:	693a      	ldr	r2, [r7, #16]
 800741e:	4313      	orrs	r3, r2
 8007420:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	697a      	ldr	r2, [r7, #20]
 8007426:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	693a      	ldr	r2, [r7, #16]
 800742c:	621a      	str	r2, [r3, #32]
}
 800742e:	bf00      	nop
 8007430:	371c      	adds	r7, #28
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr
 800743a:	bf00      	nop
 800743c:	40010000 	.word	0x40010000
 8007440:	40000400 	.word	0x40000400
 8007444:	40000800 	.word	0x40000800
 8007448:	40000c00 	.word	0x40000c00
 800744c:	40014000 	.word	0x40014000

08007450 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007450:	b480      	push	{r7}
 8007452:	b087      	sub	sp, #28
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6a1b      	ldr	r3, [r3, #32]
 8007460:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	6a1b      	ldr	r3, [r3, #32]
 8007466:	f023 0201 	bic.w	r2, r3, #1
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	699b      	ldr	r3, [r3, #24]
 8007472:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800747a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	011b      	lsls	r3, r3, #4
 8007480:	693a      	ldr	r2, [r7, #16]
 8007482:	4313      	orrs	r3, r2
 8007484:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	f023 030a 	bic.w	r3, r3, #10
 800748c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800748e:	697a      	ldr	r2, [r7, #20]
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	4313      	orrs	r3, r2
 8007494:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	693a      	ldr	r2, [r7, #16]
 800749a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	697a      	ldr	r2, [r7, #20]
 80074a0:	621a      	str	r2, [r3, #32]
}
 80074a2:	bf00      	nop
 80074a4:	371c      	adds	r7, #28
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr

080074ae <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80074ae:	b480      	push	{r7}
 80074b0:	b087      	sub	sp, #28
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	60f8      	str	r0, [r7, #12]
 80074b6:	60b9      	str	r1, [r7, #8]
 80074b8:	607a      	str	r2, [r7, #4]
 80074ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6a1b      	ldr	r3, [r3, #32]
 80074c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6a1b      	ldr	r3, [r3, #32]
 80074c6:	f023 0210 	bic.w	r2, r3, #16
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	699b      	ldr	r3, [r3, #24]
 80074d2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	021b      	lsls	r3, r3, #8
 80074e0:	693a      	ldr	r2, [r7, #16]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80074ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	031b      	lsls	r3, r3, #12
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	693a      	ldr	r2, [r7, #16]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007500:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	011b      	lsls	r3, r3, #4
 8007506:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800750a:	697a      	ldr	r2, [r7, #20]
 800750c:	4313      	orrs	r3, r2
 800750e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	693a      	ldr	r2, [r7, #16]
 8007514:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	697a      	ldr	r2, [r7, #20]
 800751a:	621a      	str	r2, [r3, #32]
}
 800751c:	bf00      	nop
 800751e:	371c      	adds	r7, #28
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007528:	b480      	push	{r7}
 800752a:	b087      	sub	sp, #28
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6a1b      	ldr	r3, [r3, #32]
 8007538:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6a1b      	ldr	r3, [r3, #32]
 800753e:	f023 0210 	bic.w	r2, r3, #16
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	699b      	ldr	r3, [r3, #24]
 800754a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007552:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	031b      	lsls	r3, r3, #12
 8007558:	693a      	ldr	r2, [r7, #16]
 800755a:	4313      	orrs	r3, r2
 800755c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007564:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	011b      	lsls	r3, r3, #4
 800756a:	697a      	ldr	r2, [r7, #20]
 800756c:	4313      	orrs	r3, r2
 800756e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	693a      	ldr	r2, [r7, #16]
 8007574:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	697a      	ldr	r2, [r7, #20]
 800757a:	621a      	str	r2, [r3, #32]
}
 800757c:	bf00      	nop
 800757e:	371c      	adds	r7, #28
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007588:	b480      	push	{r7}
 800758a:	b087      	sub	sp, #28
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	607a      	str	r2, [r7, #4]
 8007594:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6a1b      	ldr	r3, [r3, #32]
 800759a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6a1b      	ldr	r3, [r3, #32]
 80075a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	69db      	ldr	r3, [r3, #28]
 80075ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	f023 0303 	bic.w	r3, r3, #3
 80075b4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80075b6:	693a      	ldr	r2, [r7, #16]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80075c4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	011b      	lsls	r3, r3, #4
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	693a      	ldr	r2, [r7, #16]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80075d8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	021b      	lsls	r3, r3, #8
 80075de:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80075e2:	697a      	ldr	r2, [r7, #20]
 80075e4:	4313      	orrs	r3, r2
 80075e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	693a      	ldr	r2, [r7, #16]
 80075ec:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	697a      	ldr	r2, [r7, #20]
 80075f2:	621a      	str	r2, [r3, #32]
}
 80075f4:	bf00      	nop
 80075f6:	371c      	adds	r7, #28
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007600:	b480      	push	{r7}
 8007602:	b087      	sub	sp, #28
 8007604:	af00      	add	r7, sp, #0
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	607a      	str	r2, [r7, #4]
 800760c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6a1b      	ldr	r3, [r3, #32]
 8007612:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6a1b      	ldr	r3, [r3, #32]
 8007618:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	69db      	ldr	r3, [r3, #28]
 8007624:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800762c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	021b      	lsls	r3, r3, #8
 8007632:	693a      	ldr	r2, [r7, #16]
 8007634:	4313      	orrs	r3, r2
 8007636:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800763e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	031b      	lsls	r3, r3, #12
 8007644:	b29b      	uxth	r3, r3
 8007646:	693a      	ldr	r2, [r7, #16]
 8007648:	4313      	orrs	r3, r2
 800764a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8007652:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	031b      	lsls	r3, r3, #12
 8007658:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800765c:	697a      	ldr	r2, [r7, #20]
 800765e:	4313      	orrs	r3, r2
 8007660:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	697a      	ldr	r2, [r7, #20]
 800766c:	621a      	str	r2, [r3, #32]
}
 800766e:	bf00      	nop
 8007670:	371c      	adds	r7, #28
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr

0800767a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800767a:	b480      	push	{r7}
 800767c:	b085      	sub	sp, #20
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
 8007682:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007690:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007692:	683a      	ldr	r2, [r7, #0]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	4313      	orrs	r3, r2
 8007698:	f043 0307 	orr.w	r3, r3, #7
 800769c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	609a      	str	r2, [r3, #8]
}
 80076a4:	bf00      	nop
 80076a6:	3714      	adds	r7, #20
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b087      	sub	sp, #28
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	607a      	str	r2, [r7, #4]
 80076bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80076ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	021a      	lsls	r2, r3, #8
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	431a      	orrs	r2, r3
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	697a      	ldr	r2, [r7, #20]
 80076da:	4313      	orrs	r3, r2
 80076dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	697a      	ldr	r2, [r7, #20]
 80076e2:	609a      	str	r2, [r3, #8]
}
 80076e4:	bf00      	nop
 80076e6:	371c      	adds	r7, #28
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b087      	sub	sp, #28
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	f003 031f 	and.w	r3, r3, #31
 8007702:	2201      	movs	r2, #1
 8007704:	fa02 f303 	lsl.w	r3, r2, r3
 8007708:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6a1a      	ldr	r2, [r3, #32]
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	43db      	mvns	r3, r3
 8007712:	401a      	ands	r2, r3
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6a1a      	ldr	r2, [r3, #32]
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	f003 031f 	and.w	r3, r3, #31
 8007722:	6879      	ldr	r1, [r7, #4]
 8007724:	fa01 f303 	lsl.w	r3, r1, r3
 8007728:	431a      	orrs	r2, r3
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	621a      	str	r2, [r3, #32]
}
 800772e:	bf00      	nop
 8007730:	371c      	adds	r7, #28
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr
	...

0800773c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800774c:	2b01      	cmp	r3, #1
 800774e:	d101      	bne.n	8007754 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007750:	2302      	movs	r3, #2
 8007752:	e050      	b.n	80077f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2202      	movs	r2, #2
 8007760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800777a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	4313      	orrs	r3, r2
 8007784:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a1c      	ldr	r2, [pc, #112]	@ (8007804 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d018      	beq.n	80077ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077a0:	d013      	beq.n	80077ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a18      	ldr	r2, [pc, #96]	@ (8007808 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d00e      	beq.n	80077ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a16      	ldr	r2, [pc, #88]	@ (800780c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d009      	beq.n	80077ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a15      	ldr	r2, [pc, #84]	@ (8007810 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d004      	beq.n	80077ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a13      	ldr	r2, [pc, #76]	@ (8007814 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d10c      	bne.n	80077e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	68ba      	ldr	r2, [r7, #8]
 80077d8:	4313      	orrs	r3, r2
 80077da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68ba      	ldr	r2, [r7, #8]
 80077e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3714      	adds	r7, #20
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	40010000 	.word	0x40010000
 8007808:	40000400 	.word	0x40000400
 800780c:	40000800 	.word	0x40000800
 8007810:	40000c00 	.word	0x40000c00
 8007814:	40014000 	.word	0x40014000

08007818 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007820:	bf00      	nop
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007834:	bf00      	nop
 8007836:	370c      	adds	r7, #12
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d101      	bne.n	8007852 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	e042      	b.n	80078d8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007858:	b2db      	uxtb	r3, r3
 800785a:	2b00      	cmp	r3, #0
 800785c:	d106      	bne.n	800786c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f7fb fdba 	bl	80033e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2224      	movs	r2, #36	@ 0x24
 8007870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	68da      	ldr	r2, [r3, #12]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007882:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 f973 	bl	8007b70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	691a      	ldr	r2, [r3, #16]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007898:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	695a      	ldr	r2, [r3, #20]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80078a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	68da      	ldr	r2, [r3, #12]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80078b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2220      	movs	r2, #32
 80078c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2220      	movs	r2, #32
 80078cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80078d6:	2300      	movs	r3, #0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3708      	adds	r7, #8
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b08a      	sub	sp, #40	@ 0x28
 80078e4:	af02      	add	r7, sp, #8
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	603b      	str	r3, [r7, #0]
 80078ec:	4613      	mov	r3, r2
 80078ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80078f0:	2300      	movs	r3, #0
 80078f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	2b20      	cmp	r3, #32
 80078fe:	d175      	bne.n	80079ec <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d002      	beq.n	800790c <HAL_UART_Transmit+0x2c>
 8007906:	88fb      	ldrh	r3, [r7, #6]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d101      	bne.n	8007910 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	e06e      	b.n	80079ee <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2221      	movs	r2, #33	@ 0x21
 800791a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800791e:	f7fb fe07 	bl	8003530 <HAL_GetTick>
 8007922:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	88fa      	ldrh	r2, [r7, #6]
 8007928:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	88fa      	ldrh	r2, [r7, #6]
 800792e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007938:	d108      	bne.n	800794c <HAL_UART_Transmit+0x6c>
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d104      	bne.n	800794c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007942:	2300      	movs	r3, #0
 8007944:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	61bb      	str	r3, [r7, #24]
 800794a:	e003      	b.n	8007954 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007950:	2300      	movs	r3, #0
 8007952:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007954:	e02e      	b.n	80079b4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	9300      	str	r3, [sp, #0]
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	2200      	movs	r2, #0
 800795e:	2180      	movs	r1, #128	@ 0x80
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	f000 f848 	bl	80079f6 <UART_WaitOnFlagUntilTimeout>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d005      	beq.n	8007978 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2220      	movs	r2, #32
 8007970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007974:	2303      	movs	r3, #3
 8007976:	e03a      	b.n	80079ee <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007978:	69fb      	ldr	r3, [r7, #28]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d10b      	bne.n	8007996 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800797e:	69bb      	ldr	r3, [r7, #24]
 8007980:	881b      	ldrh	r3, [r3, #0]
 8007982:	461a      	mov	r2, r3
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800798c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	3302      	adds	r3, #2
 8007992:	61bb      	str	r3, [r7, #24]
 8007994:	e007      	b.n	80079a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	781a      	ldrb	r2, [r3, #0]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80079a0:	69fb      	ldr	r3, [r7, #28]
 80079a2:	3301      	adds	r3, #1
 80079a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	3b01      	subs	r3, #1
 80079ae:	b29a      	uxth	r2, r3
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d1cb      	bne.n	8007956 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	9300      	str	r3, [sp, #0]
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	2200      	movs	r2, #0
 80079c6:	2140      	movs	r1, #64	@ 0x40
 80079c8:	68f8      	ldr	r0, [r7, #12]
 80079ca:	f000 f814 	bl	80079f6 <UART_WaitOnFlagUntilTimeout>
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d005      	beq.n	80079e0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2220      	movs	r2, #32
 80079d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80079dc:	2303      	movs	r3, #3
 80079de:	e006      	b.n	80079ee <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2220      	movs	r2, #32
 80079e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80079e8:	2300      	movs	r3, #0
 80079ea:	e000      	b.n	80079ee <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80079ec:	2302      	movs	r3, #2
  }
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3720      	adds	r7, #32
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b086      	sub	sp, #24
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	60f8      	str	r0, [r7, #12]
 80079fe:	60b9      	str	r1, [r7, #8]
 8007a00:	603b      	str	r3, [r7, #0]
 8007a02:	4613      	mov	r3, r2
 8007a04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a06:	e03b      	b.n	8007a80 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a08:	6a3b      	ldr	r3, [r7, #32]
 8007a0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a0e:	d037      	beq.n	8007a80 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a10:	f7fb fd8e 	bl	8003530 <HAL_GetTick>
 8007a14:	4602      	mov	r2, r0
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	1ad3      	subs	r3, r2, r3
 8007a1a:	6a3a      	ldr	r2, [r7, #32]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d302      	bcc.n	8007a26 <UART_WaitOnFlagUntilTimeout+0x30>
 8007a20:	6a3b      	ldr	r3, [r7, #32]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d101      	bne.n	8007a2a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007a26:	2303      	movs	r3, #3
 8007a28:	e03a      	b.n	8007aa0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	f003 0304 	and.w	r3, r3, #4
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d023      	beq.n	8007a80 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	2b80      	cmp	r3, #128	@ 0x80
 8007a3c:	d020      	beq.n	8007a80 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	2b40      	cmp	r3, #64	@ 0x40
 8007a42:	d01d      	beq.n	8007a80 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f003 0308 	and.w	r3, r3, #8
 8007a4e:	2b08      	cmp	r3, #8
 8007a50:	d116      	bne.n	8007a80 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007a52:	2300      	movs	r3, #0
 8007a54:	617b      	str	r3, [r7, #20]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	617b      	str	r3, [r7, #20]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	617b      	str	r3, [r7, #20]
 8007a66:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a68:	68f8      	ldr	r0, [r7, #12]
 8007a6a:	f000 f81d 	bl	8007aa8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2208      	movs	r2, #8
 8007a72:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2200      	movs	r2, #0
 8007a78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e00f      	b.n	8007aa0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	4013      	ands	r3, r2
 8007a8a:	68ba      	ldr	r2, [r7, #8]
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	bf0c      	ite	eq
 8007a90:	2301      	moveq	r3, #1
 8007a92:	2300      	movne	r3, #0
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	461a      	mov	r2, r3
 8007a98:	79fb      	ldrb	r3, [r7, #7]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d0b4      	beq.n	8007a08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a9e:	2300      	movs	r3, #0
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3718      	adds	r7, #24
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b095      	sub	sp, #84	@ 0x54
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	330c      	adds	r3, #12
 8007ab6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aba:	e853 3f00 	ldrex	r3, [r3]
 8007abe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ac6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	330c      	adds	r3, #12
 8007ace:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007ad0:	643a      	str	r2, [r7, #64]	@ 0x40
 8007ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ad6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ad8:	e841 2300 	strex	r3, r2, [r1]
 8007adc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d1e5      	bne.n	8007ab0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	3314      	adds	r3, #20
 8007aea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aec:	6a3b      	ldr	r3, [r7, #32]
 8007aee:	e853 3f00 	ldrex	r3, [r3]
 8007af2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007af4:	69fb      	ldr	r3, [r7, #28]
 8007af6:	f023 0301 	bic.w	r3, r3, #1
 8007afa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	3314      	adds	r3, #20
 8007b02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b04:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007b06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b0c:	e841 2300 	strex	r3, r2, [r1]
 8007b10:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d1e5      	bne.n	8007ae4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d119      	bne.n	8007b54 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	330c      	adds	r3, #12
 8007b26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	e853 3f00 	ldrex	r3, [r3]
 8007b2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	f023 0310 	bic.w	r3, r3, #16
 8007b36:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	330c      	adds	r3, #12
 8007b3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b40:	61ba      	str	r2, [r7, #24]
 8007b42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b44:	6979      	ldr	r1, [r7, #20]
 8007b46:	69ba      	ldr	r2, [r7, #24]
 8007b48:	e841 2300 	strex	r3, r2, [r1]
 8007b4c:	613b      	str	r3, [r7, #16]
   return(result);
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1e5      	bne.n	8007b20 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2220      	movs	r2, #32
 8007b58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007b62:	bf00      	nop
 8007b64:	3754      	adds	r7, #84	@ 0x54
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr
	...

08007b70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b74:	b0c0      	sub	sp, #256	@ 0x100
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b8c:	68d9      	ldr	r1, [r3, #12]
 8007b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	ea40 0301 	orr.w	r3, r0, r1
 8007b98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b9e:	689a      	ldr	r2, [r3, #8]
 8007ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	431a      	orrs	r2, r3
 8007ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bac:	695b      	ldr	r3, [r3, #20]
 8007bae:	431a      	orrs	r2, r3
 8007bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bb4:	69db      	ldr	r3, [r3, #28]
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007bc8:	f021 010c 	bic.w	r1, r1, #12
 8007bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007bd6:	430b      	orrs	r3, r1
 8007bd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	695b      	ldr	r3, [r3, #20]
 8007be2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bea:	6999      	ldr	r1, [r3, #24]
 8007bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	ea40 0301 	orr.w	r3, r0, r1
 8007bf6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	4b8f      	ldr	r3, [pc, #572]	@ (8007e3c <UART_SetConfig+0x2cc>)
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d005      	beq.n	8007c10 <UART_SetConfig+0xa0>
 8007c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	4b8d      	ldr	r3, [pc, #564]	@ (8007e40 <UART_SetConfig+0x2d0>)
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d104      	bne.n	8007c1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c10:	f7fe faba 	bl	8006188 <HAL_RCC_GetPCLK2Freq>
 8007c14:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007c18:	e003      	b.n	8007c22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007c1a:	f7fe faa1 	bl	8006160 <HAL_RCC_GetPCLK1Freq>
 8007c1e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c26:	69db      	ldr	r3, [r3, #28]
 8007c28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c2c:	f040 810c 	bne.w	8007e48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007c30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c34:	2200      	movs	r2, #0
 8007c36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007c3a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007c3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007c42:	4622      	mov	r2, r4
 8007c44:	462b      	mov	r3, r5
 8007c46:	1891      	adds	r1, r2, r2
 8007c48:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007c4a:	415b      	adcs	r3, r3
 8007c4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007c52:	4621      	mov	r1, r4
 8007c54:	eb12 0801 	adds.w	r8, r2, r1
 8007c58:	4629      	mov	r1, r5
 8007c5a:	eb43 0901 	adc.w	r9, r3, r1
 8007c5e:	f04f 0200 	mov.w	r2, #0
 8007c62:	f04f 0300 	mov.w	r3, #0
 8007c66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007c6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007c6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c72:	4690      	mov	r8, r2
 8007c74:	4699      	mov	r9, r3
 8007c76:	4623      	mov	r3, r4
 8007c78:	eb18 0303 	adds.w	r3, r8, r3
 8007c7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007c80:	462b      	mov	r3, r5
 8007c82:	eb49 0303 	adc.w	r3, r9, r3
 8007c86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007c96:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007c9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	18db      	adds	r3, r3, r3
 8007ca2:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ca4:	4613      	mov	r3, r2
 8007ca6:	eb42 0303 	adc.w	r3, r2, r3
 8007caa:	657b      	str	r3, [r7, #84]	@ 0x54
 8007cac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007cb0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007cb4:	f7f8 ffd0 	bl	8000c58 <__aeabi_uldivmod>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	460b      	mov	r3, r1
 8007cbc:	4b61      	ldr	r3, [pc, #388]	@ (8007e44 <UART_SetConfig+0x2d4>)
 8007cbe:	fba3 2302 	umull	r2, r3, r3, r2
 8007cc2:	095b      	lsrs	r3, r3, #5
 8007cc4:	011c      	lsls	r4, r3, #4
 8007cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007cd0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007cd4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007cd8:	4642      	mov	r2, r8
 8007cda:	464b      	mov	r3, r9
 8007cdc:	1891      	adds	r1, r2, r2
 8007cde:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007ce0:	415b      	adcs	r3, r3
 8007ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ce4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007ce8:	4641      	mov	r1, r8
 8007cea:	eb12 0a01 	adds.w	sl, r2, r1
 8007cee:	4649      	mov	r1, r9
 8007cf0:	eb43 0b01 	adc.w	fp, r3, r1
 8007cf4:	f04f 0200 	mov.w	r2, #0
 8007cf8:	f04f 0300 	mov.w	r3, #0
 8007cfc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007d00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007d04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d08:	4692      	mov	sl, r2
 8007d0a:	469b      	mov	fp, r3
 8007d0c:	4643      	mov	r3, r8
 8007d0e:	eb1a 0303 	adds.w	r3, sl, r3
 8007d12:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007d16:	464b      	mov	r3, r9
 8007d18:	eb4b 0303 	adc.w	r3, fp, r3
 8007d1c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007d2c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007d30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007d34:	460b      	mov	r3, r1
 8007d36:	18db      	adds	r3, r3, r3
 8007d38:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d3a:	4613      	mov	r3, r2
 8007d3c:	eb42 0303 	adc.w	r3, r2, r3
 8007d40:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007d46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007d4a:	f7f8 ff85 	bl	8000c58 <__aeabi_uldivmod>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	460b      	mov	r3, r1
 8007d52:	4611      	mov	r1, r2
 8007d54:	4b3b      	ldr	r3, [pc, #236]	@ (8007e44 <UART_SetConfig+0x2d4>)
 8007d56:	fba3 2301 	umull	r2, r3, r3, r1
 8007d5a:	095b      	lsrs	r3, r3, #5
 8007d5c:	2264      	movs	r2, #100	@ 0x64
 8007d5e:	fb02 f303 	mul.w	r3, r2, r3
 8007d62:	1acb      	subs	r3, r1, r3
 8007d64:	00db      	lsls	r3, r3, #3
 8007d66:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007d6a:	4b36      	ldr	r3, [pc, #216]	@ (8007e44 <UART_SetConfig+0x2d4>)
 8007d6c:	fba3 2302 	umull	r2, r3, r3, r2
 8007d70:	095b      	lsrs	r3, r3, #5
 8007d72:	005b      	lsls	r3, r3, #1
 8007d74:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007d78:	441c      	add	r4, r3
 8007d7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d84:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007d88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007d8c:	4642      	mov	r2, r8
 8007d8e:	464b      	mov	r3, r9
 8007d90:	1891      	adds	r1, r2, r2
 8007d92:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007d94:	415b      	adcs	r3, r3
 8007d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007d9c:	4641      	mov	r1, r8
 8007d9e:	1851      	adds	r1, r2, r1
 8007da0:	6339      	str	r1, [r7, #48]	@ 0x30
 8007da2:	4649      	mov	r1, r9
 8007da4:	414b      	adcs	r3, r1
 8007da6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007da8:	f04f 0200 	mov.w	r2, #0
 8007dac:	f04f 0300 	mov.w	r3, #0
 8007db0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007db4:	4659      	mov	r1, fp
 8007db6:	00cb      	lsls	r3, r1, #3
 8007db8:	4651      	mov	r1, sl
 8007dba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007dbe:	4651      	mov	r1, sl
 8007dc0:	00ca      	lsls	r2, r1, #3
 8007dc2:	4610      	mov	r0, r2
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	4642      	mov	r2, r8
 8007dca:	189b      	adds	r3, r3, r2
 8007dcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007dd0:	464b      	mov	r3, r9
 8007dd2:	460a      	mov	r2, r1
 8007dd4:	eb42 0303 	adc.w	r3, r2, r3
 8007dd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007de8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007dec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007df0:	460b      	mov	r3, r1
 8007df2:	18db      	adds	r3, r3, r3
 8007df4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007df6:	4613      	mov	r3, r2
 8007df8:	eb42 0303 	adc.w	r3, r2, r3
 8007dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007dfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007e02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007e06:	f7f8 ff27 	bl	8000c58 <__aeabi_uldivmod>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8007e44 <UART_SetConfig+0x2d4>)
 8007e10:	fba3 1302 	umull	r1, r3, r3, r2
 8007e14:	095b      	lsrs	r3, r3, #5
 8007e16:	2164      	movs	r1, #100	@ 0x64
 8007e18:	fb01 f303 	mul.w	r3, r1, r3
 8007e1c:	1ad3      	subs	r3, r2, r3
 8007e1e:	00db      	lsls	r3, r3, #3
 8007e20:	3332      	adds	r3, #50	@ 0x32
 8007e22:	4a08      	ldr	r2, [pc, #32]	@ (8007e44 <UART_SetConfig+0x2d4>)
 8007e24:	fba2 2303 	umull	r2, r3, r2, r3
 8007e28:	095b      	lsrs	r3, r3, #5
 8007e2a:	f003 0207 	and.w	r2, r3, #7
 8007e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4422      	add	r2, r4
 8007e36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007e38:	e106      	b.n	8008048 <UART_SetConfig+0x4d8>
 8007e3a:	bf00      	nop
 8007e3c:	40011000 	.word	0x40011000
 8007e40:	40011400 	.word	0x40011400
 8007e44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007e52:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007e56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007e5a:	4642      	mov	r2, r8
 8007e5c:	464b      	mov	r3, r9
 8007e5e:	1891      	adds	r1, r2, r2
 8007e60:	6239      	str	r1, [r7, #32]
 8007e62:	415b      	adcs	r3, r3
 8007e64:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e6a:	4641      	mov	r1, r8
 8007e6c:	1854      	adds	r4, r2, r1
 8007e6e:	4649      	mov	r1, r9
 8007e70:	eb43 0501 	adc.w	r5, r3, r1
 8007e74:	f04f 0200 	mov.w	r2, #0
 8007e78:	f04f 0300 	mov.w	r3, #0
 8007e7c:	00eb      	lsls	r3, r5, #3
 8007e7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e82:	00e2      	lsls	r2, r4, #3
 8007e84:	4614      	mov	r4, r2
 8007e86:	461d      	mov	r5, r3
 8007e88:	4643      	mov	r3, r8
 8007e8a:	18e3      	adds	r3, r4, r3
 8007e8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007e90:	464b      	mov	r3, r9
 8007e92:	eb45 0303 	adc.w	r3, r5, r3
 8007e96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007ea6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007eaa:	f04f 0200 	mov.w	r2, #0
 8007eae:	f04f 0300 	mov.w	r3, #0
 8007eb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007eb6:	4629      	mov	r1, r5
 8007eb8:	008b      	lsls	r3, r1, #2
 8007eba:	4621      	mov	r1, r4
 8007ebc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ec0:	4621      	mov	r1, r4
 8007ec2:	008a      	lsls	r2, r1, #2
 8007ec4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007ec8:	f7f8 fec6 	bl	8000c58 <__aeabi_uldivmod>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	460b      	mov	r3, r1
 8007ed0:	4b60      	ldr	r3, [pc, #384]	@ (8008054 <UART_SetConfig+0x4e4>)
 8007ed2:	fba3 2302 	umull	r2, r3, r3, r2
 8007ed6:	095b      	lsrs	r3, r3, #5
 8007ed8:	011c      	lsls	r4, r3, #4
 8007eda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ede:	2200      	movs	r2, #0
 8007ee0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007ee4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007ee8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007eec:	4642      	mov	r2, r8
 8007eee:	464b      	mov	r3, r9
 8007ef0:	1891      	adds	r1, r2, r2
 8007ef2:	61b9      	str	r1, [r7, #24]
 8007ef4:	415b      	adcs	r3, r3
 8007ef6:	61fb      	str	r3, [r7, #28]
 8007ef8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007efc:	4641      	mov	r1, r8
 8007efe:	1851      	adds	r1, r2, r1
 8007f00:	6139      	str	r1, [r7, #16]
 8007f02:	4649      	mov	r1, r9
 8007f04:	414b      	adcs	r3, r1
 8007f06:	617b      	str	r3, [r7, #20]
 8007f08:	f04f 0200 	mov.w	r2, #0
 8007f0c:	f04f 0300 	mov.w	r3, #0
 8007f10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007f14:	4659      	mov	r1, fp
 8007f16:	00cb      	lsls	r3, r1, #3
 8007f18:	4651      	mov	r1, sl
 8007f1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f1e:	4651      	mov	r1, sl
 8007f20:	00ca      	lsls	r2, r1, #3
 8007f22:	4610      	mov	r0, r2
 8007f24:	4619      	mov	r1, r3
 8007f26:	4603      	mov	r3, r0
 8007f28:	4642      	mov	r2, r8
 8007f2a:	189b      	adds	r3, r3, r2
 8007f2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007f30:	464b      	mov	r3, r9
 8007f32:	460a      	mov	r2, r1
 8007f34:	eb42 0303 	adc.w	r3, r2, r3
 8007f38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007f46:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007f48:	f04f 0200 	mov.w	r2, #0
 8007f4c:	f04f 0300 	mov.w	r3, #0
 8007f50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007f54:	4649      	mov	r1, r9
 8007f56:	008b      	lsls	r3, r1, #2
 8007f58:	4641      	mov	r1, r8
 8007f5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f5e:	4641      	mov	r1, r8
 8007f60:	008a      	lsls	r2, r1, #2
 8007f62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007f66:	f7f8 fe77 	bl	8000c58 <__aeabi_uldivmod>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	4611      	mov	r1, r2
 8007f70:	4b38      	ldr	r3, [pc, #224]	@ (8008054 <UART_SetConfig+0x4e4>)
 8007f72:	fba3 2301 	umull	r2, r3, r3, r1
 8007f76:	095b      	lsrs	r3, r3, #5
 8007f78:	2264      	movs	r2, #100	@ 0x64
 8007f7a:	fb02 f303 	mul.w	r3, r2, r3
 8007f7e:	1acb      	subs	r3, r1, r3
 8007f80:	011b      	lsls	r3, r3, #4
 8007f82:	3332      	adds	r3, #50	@ 0x32
 8007f84:	4a33      	ldr	r2, [pc, #204]	@ (8008054 <UART_SetConfig+0x4e4>)
 8007f86:	fba2 2303 	umull	r2, r3, r2, r3
 8007f8a:	095b      	lsrs	r3, r3, #5
 8007f8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007f90:	441c      	add	r4, r3
 8007f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f96:	2200      	movs	r2, #0
 8007f98:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f9a:	677a      	str	r2, [r7, #116]	@ 0x74
 8007f9c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007fa0:	4642      	mov	r2, r8
 8007fa2:	464b      	mov	r3, r9
 8007fa4:	1891      	adds	r1, r2, r2
 8007fa6:	60b9      	str	r1, [r7, #8]
 8007fa8:	415b      	adcs	r3, r3
 8007faa:	60fb      	str	r3, [r7, #12]
 8007fac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007fb0:	4641      	mov	r1, r8
 8007fb2:	1851      	adds	r1, r2, r1
 8007fb4:	6039      	str	r1, [r7, #0]
 8007fb6:	4649      	mov	r1, r9
 8007fb8:	414b      	adcs	r3, r1
 8007fba:	607b      	str	r3, [r7, #4]
 8007fbc:	f04f 0200 	mov.w	r2, #0
 8007fc0:	f04f 0300 	mov.w	r3, #0
 8007fc4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007fc8:	4659      	mov	r1, fp
 8007fca:	00cb      	lsls	r3, r1, #3
 8007fcc:	4651      	mov	r1, sl
 8007fce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fd2:	4651      	mov	r1, sl
 8007fd4:	00ca      	lsls	r2, r1, #3
 8007fd6:	4610      	mov	r0, r2
 8007fd8:	4619      	mov	r1, r3
 8007fda:	4603      	mov	r3, r0
 8007fdc:	4642      	mov	r2, r8
 8007fde:	189b      	adds	r3, r3, r2
 8007fe0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007fe2:	464b      	mov	r3, r9
 8007fe4:	460a      	mov	r2, r1
 8007fe6:	eb42 0303 	adc.w	r3, r2, r3
 8007fea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	663b      	str	r3, [r7, #96]	@ 0x60
 8007ff6:	667a      	str	r2, [r7, #100]	@ 0x64
 8007ff8:	f04f 0200 	mov.w	r2, #0
 8007ffc:	f04f 0300 	mov.w	r3, #0
 8008000:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008004:	4649      	mov	r1, r9
 8008006:	008b      	lsls	r3, r1, #2
 8008008:	4641      	mov	r1, r8
 800800a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800800e:	4641      	mov	r1, r8
 8008010:	008a      	lsls	r2, r1, #2
 8008012:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008016:	f7f8 fe1f 	bl	8000c58 <__aeabi_uldivmod>
 800801a:	4602      	mov	r2, r0
 800801c:	460b      	mov	r3, r1
 800801e:	4b0d      	ldr	r3, [pc, #52]	@ (8008054 <UART_SetConfig+0x4e4>)
 8008020:	fba3 1302 	umull	r1, r3, r3, r2
 8008024:	095b      	lsrs	r3, r3, #5
 8008026:	2164      	movs	r1, #100	@ 0x64
 8008028:	fb01 f303 	mul.w	r3, r1, r3
 800802c:	1ad3      	subs	r3, r2, r3
 800802e:	011b      	lsls	r3, r3, #4
 8008030:	3332      	adds	r3, #50	@ 0x32
 8008032:	4a08      	ldr	r2, [pc, #32]	@ (8008054 <UART_SetConfig+0x4e4>)
 8008034:	fba2 2303 	umull	r2, r3, r2, r3
 8008038:	095b      	lsrs	r3, r3, #5
 800803a:	f003 020f 	and.w	r2, r3, #15
 800803e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4422      	add	r2, r4
 8008046:	609a      	str	r2, [r3, #8]
}
 8008048:	bf00      	nop
 800804a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800804e:	46bd      	mov	sp, r7
 8008050:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008054:	51eb851f 	.word	0x51eb851f

08008058 <__NVIC_SetPriority>:
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	4603      	mov	r3, r0
 8008060:	6039      	str	r1, [r7, #0]
 8008062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008068:	2b00      	cmp	r3, #0
 800806a:	db0a      	blt.n	8008082 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	b2da      	uxtb	r2, r3
 8008070:	490c      	ldr	r1, [pc, #48]	@ (80080a4 <__NVIC_SetPriority+0x4c>)
 8008072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008076:	0112      	lsls	r2, r2, #4
 8008078:	b2d2      	uxtb	r2, r2
 800807a:	440b      	add	r3, r1
 800807c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008080:	e00a      	b.n	8008098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	b2da      	uxtb	r2, r3
 8008086:	4908      	ldr	r1, [pc, #32]	@ (80080a8 <__NVIC_SetPriority+0x50>)
 8008088:	79fb      	ldrb	r3, [r7, #7]
 800808a:	f003 030f 	and.w	r3, r3, #15
 800808e:	3b04      	subs	r3, #4
 8008090:	0112      	lsls	r2, r2, #4
 8008092:	b2d2      	uxtb	r2, r2
 8008094:	440b      	add	r3, r1
 8008096:	761a      	strb	r2, [r3, #24]
}
 8008098:	bf00      	nop
 800809a:	370c      	adds	r7, #12
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr
 80080a4:	e000e100 	.word	0xe000e100
 80080a8:	e000ed00 	.word	0xe000ed00

080080ac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80080ac:	b580      	push	{r7, lr}
 80080ae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80080b0:	4b05      	ldr	r3, [pc, #20]	@ (80080c8 <SysTick_Handler+0x1c>)
 80080b2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80080b4:	f002 f86c 	bl	800a190 <xTaskGetSchedulerState>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d001      	beq.n	80080c2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80080be:	f002 fe63 	bl	800ad88 <xPortSysTickHandler>
  }
}
 80080c2:	bf00      	nop
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	bf00      	nop
 80080c8:	e000e010 	.word	0xe000e010

080080cc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80080cc:	b580      	push	{r7, lr}
 80080ce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80080d0:	2100      	movs	r1, #0
 80080d2:	f06f 0004 	mvn.w	r0, #4
 80080d6:	f7ff ffbf 	bl	8008058 <__NVIC_SetPriority>
#endif
}
 80080da:	bf00      	nop
 80080dc:	bd80      	pop	{r7, pc}
	...

080080e0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080e6:	f3ef 8305 	mrs	r3, IPSR
 80080ea:	603b      	str	r3, [r7, #0]
  return(result);
 80080ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d003      	beq.n	80080fa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80080f2:	f06f 0305 	mvn.w	r3, #5
 80080f6:	607b      	str	r3, [r7, #4]
 80080f8:	e00c      	b.n	8008114 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80080fa:	4b0a      	ldr	r3, [pc, #40]	@ (8008124 <osKernelInitialize+0x44>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d105      	bne.n	800810e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008102:	4b08      	ldr	r3, [pc, #32]	@ (8008124 <osKernelInitialize+0x44>)
 8008104:	2201      	movs	r2, #1
 8008106:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008108:	2300      	movs	r3, #0
 800810a:	607b      	str	r3, [r7, #4]
 800810c:	e002      	b.n	8008114 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800810e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008112:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008114:	687b      	ldr	r3, [r7, #4]
}
 8008116:	4618      	mov	r0, r3
 8008118:	370c      	adds	r7, #12
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop
 8008124:	200004f8 	.word	0x200004f8

08008128 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800812e:	f3ef 8305 	mrs	r3, IPSR
 8008132:	603b      	str	r3, [r7, #0]
  return(result);
 8008134:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008136:	2b00      	cmp	r3, #0
 8008138:	d003      	beq.n	8008142 <osKernelStart+0x1a>
    stat = osErrorISR;
 800813a:	f06f 0305 	mvn.w	r3, #5
 800813e:	607b      	str	r3, [r7, #4]
 8008140:	e010      	b.n	8008164 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008142:	4b0b      	ldr	r3, [pc, #44]	@ (8008170 <osKernelStart+0x48>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2b01      	cmp	r3, #1
 8008148:	d109      	bne.n	800815e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800814a:	f7ff ffbf 	bl	80080cc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800814e:	4b08      	ldr	r3, [pc, #32]	@ (8008170 <osKernelStart+0x48>)
 8008150:	2202      	movs	r2, #2
 8008152:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008154:	f001 fae4 	bl	8009720 <vTaskStartScheduler>
      stat = osOK;
 8008158:	2300      	movs	r3, #0
 800815a:	607b      	str	r3, [r7, #4]
 800815c:	e002      	b.n	8008164 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800815e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008162:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008164:	687b      	ldr	r3, [r7, #4]
}
 8008166:	4618      	mov	r0, r3
 8008168:	3708      	adds	r7, #8
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	200004f8 	.word	0x200004f8

08008174 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008174:	b580      	push	{r7, lr}
 8008176:	b08e      	sub	sp, #56	@ 0x38
 8008178:	af04      	add	r7, sp, #16
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008180:	2300      	movs	r3, #0
 8008182:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008184:	f3ef 8305 	mrs	r3, IPSR
 8008188:	617b      	str	r3, [r7, #20]
  return(result);
 800818a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800818c:	2b00      	cmp	r3, #0
 800818e:	d17e      	bne.n	800828e <osThreadNew+0x11a>
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d07b      	beq.n	800828e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008196:	2380      	movs	r3, #128	@ 0x80
 8008198:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800819a:	2318      	movs	r3, #24
 800819c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800819e:	2300      	movs	r3, #0
 80081a0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80081a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80081a6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d045      	beq.n	800823a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d002      	beq.n	80081bc <osThreadNew+0x48>
        name = attr->name;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	699b      	ldr	r3, [r3, #24]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d002      	beq.n	80081ca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	699b      	ldr	r3, [r3, #24]
 80081c8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d008      	beq.n	80081e2 <osThreadNew+0x6e>
 80081d0:	69fb      	ldr	r3, [r7, #28]
 80081d2:	2b38      	cmp	r3, #56	@ 0x38
 80081d4:	d805      	bhi.n	80081e2 <osThreadNew+0x6e>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	f003 0301 	and.w	r3, r3, #1
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d001      	beq.n	80081e6 <osThreadNew+0x72>
        return (NULL);
 80081e2:	2300      	movs	r3, #0
 80081e4:	e054      	b.n	8008290 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	695b      	ldr	r3, [r3, #20]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d003      	beq.n	80081f6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	695b      	ldr	r3, [r3, #20]
 80081f2:	089b      	lsrs	r3, r3, #2
 80081f4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	689b      	ldr	r3, [r3, #8]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d00e      	beq.n	800821c <osThreadNew+0xa8>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	68db      	ldr	r3, [r3, #12]
 8008202:	2baf      	cmp	r3, #175	@ 0xaf
 8008204:	d90a      	bls.n	800821c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800820a:	2b00      	cmp	r3, #0
 800820c:	d006      	beq.n	800821c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	695b      	ldr	r3, [r3, #20]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d002      	beq.n	800821c <osThreadNew+0xa8>
        mem = 1;
 8008216:	2301      	movs	r3, #1
 8008218:	61bb      	str	r3, [r7, #24]
 800821a:	e010      	b.n	800823e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d10c      	bne.n	800823e <osThreadNew+0xca>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d108      	bne.n	800823e <osThreadNew+0xca>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	691b      	ldr	r3, [r3, #16]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d104      	bne.n	800823e <osThreadNew+0xca>
          mem = 0;
 8008234:	2300      	movs	r3, #0
 8008236:	61bb      	str	r3, [r7, #24]
 8008238:	e001      	b.n	800823e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800823a:	2300      	movs	r3, #0
 800823c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800823e:	69bb      	ldr	r3, [r7, #24]
 8008240:	2b01      	cmp	r3, #1
 8008242:	d110      	bne.n	8008266 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800824c:	9202      	str	r2, [sp, #8]
 800824e:	9301      	str	r3, [sp, #4]
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	9300      	str	r3, [sp, #0]
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	6a3a      	ldr	r2, [r7, #32]
 8008258:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800825a:	68f8      	ldr	r0, [r7, #12]
 800825c:	f001 f866 	bl	800932c <xTaskCreateStatic>
 8008260:	4603      	mov	r3, r0
 8008262:	613b      	str	r3, [r7, #16]
 8008264:	e013      	b.n	800828e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d110      	bne.n	800828e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800826c:	6a3b      	ldr	r3, [r7, #32]
 800826e:	b29a      	uxth	r2, r3
 8008270:	f107 0310 	add.w	r3, r7, #16
 8008274:	9301      	str	r3, [sp, #4]
 8008276:	69fb      	ldr	r3, [r7, #28]
 8008278:	9300      	str	r3, [sp, #0]
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800827e:	68f8      	ldr	r0, [r7, #12]
 8008280:	f001 f8b4 	bl	80093ec <xTaskCreate>
 8008284:	4603      	mov	r3, r0
 8008286:	2b01      	cmp	r3, #1
 8008288:	d001      	beq.n	800828e <osThreadNew+0x11a>
            hTask = NULL;
 800828a:	2300      	movs	r3, #0
 800828c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800828e:	693b      	ldr	r3, [r7, #16]
}
 8008290:	4618      	mov	r0, r3
 8008292:	3728      	adds	r7, #40	@ 0x28
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082a0:	f3ef 8305 	mrs	r3, IPSR
 80082a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80082a6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d003      	beq.n	80082b4 <osDelay+0x1c>
    stat = osErrorISR;
 80082ac:	f06f 0305 	mvn.w	r3, #5
 80082b0:	60fb      	str	r3, [r7, #12]
 80082b2:	e007      	b.n	80082c4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80082b4:	2300      	movs	r3, #0
 80082b6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d002      	beq.n	80082c4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f001 f9f8 	bl	80096b4 <vTaskDelay>
    }
  }

  return (stat);
 80082c4:	68fb      	ldr	r3, [r7, #12]
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3710      	adds	r7, #16
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b08a      	sub	sp, #40	@ 0x28
 80082d2:	af02      	add	r7, sp, #8
 80082d4:	60f8      	str	r0, [r7, #12]
 80082d6:	60b9      	str	r1, [r7, #8]
 80082d8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80082da:	2300      	movs	r3, #0
 80082dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082de:	f3ef 8305 	mrs	r3, IPSR
 80082e2:	613b      	str	r3, [r7, #16]
  return(result);
 80082e4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d15f      	bne.n	80083aa <osMessageQueueNew+0xdc>
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d05c      	beq.n	80083aa <osMessageQueueNew+0xdc>
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d059      	beq.n	80083aa <osMessageQueueNew+0xdc>
    mem = -1;
 80082f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80082fa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d029      	beq.n	8008356 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d012      	beq.n	8008330 <osMessageQueueNew+0x62>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	68db      	ldr	r3, [r3, #12]
 800830e:	2b4f      	cmp	r3, #79	@ 0x4f
 8008310:	d90e      	bls.n	8008330 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008316:	2b00      	cmp	r3, #0
 8008318:	d00a      	beq.n	8008330 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	695a      	ldr	r2, [r3, #20]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	68b9      	ldr	r1, [r7, #8]
 8008322:	fb01 f303 	mul.w	r3, r1, r3
 8008326:	429a      	cmp	r2, r3
 8008328:	d302      	bcc.n	8008330 <osMessageQueueNew+0x62>
        mem = 1;
 800832a:	2301      	movs	r3, #1
 800832c:	61bb      	str	r3, [r7, #24]
 800832e:	e014      	b.n	800835a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d110      	bne.n	800835a <osMessageQueueNew+0x8c>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	68db      	ldr	r3, [r3, #12]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d10c      	bne.n	800835a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008344:	2b00      	cmp	r3, #0
 8008346:	d108      	bne.n	800835a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	695b      	ldr	r3, [r3, #20]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d104      	bne.n	800835a <osMessageQueueNew+0x8c>
          mem = 0;
 8008350:	2300      	movs	r3, #0
 8008352:	61bb      	str	r3, [r7, #24]
 8008354:	e001      	b.n	800835a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008356:	2300      	movs	r3, #0
 8008358:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800835a:	69bb      	ldr	r3, [r7, #24]
 800835c:	2b01      	cmp	r3, #1
 800835e:	d10b      	bne.n	8008378 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	691a      	ldr	r2, [r3, #16]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	2100      	movs	r1, #0
 800836a:	9100      	str	r1, [sp, #0]
 800836c:	68b9      	ldr	r1, [r7, #8]
 800836e:	68f8      	ldr	r0, [r7, #12]
 8008370:	f000 fa50 	bl	8008814 <xQueueGenericCreateStatic>
 8008374:	61f8      	str	r0, [r7, #28]
 8008376:	e008      	b.n	800838a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d105      	bne.n	800838a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800837e:	2200      	movs	r2, #0
 8008380:	68b9      	ldr	r1, [r7, #8]
 8008382:	68f8      	ldr	r0, [r7, #12]
 8008384:	f000 fac3 	bl	800890e <xQueueGenericCreate>
 8008388:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d00c      	beq.n	80083aa <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d003      	beq.n	800839e <osMessageQueueNew+0xd0>
        name = attr->name;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	617b      	str	r3, [r7, #20]
 800839c:	e001      	b.n	80083a2 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800839e:	2300      	movs	r3, #0
 80083a0:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80083a2:	6979      	ldr	r1, [r7, #20]
 80083a4:	69f8      	ldr	r0, [r7, #28]
 80083a6:	f000 ff63 	bl	8009270 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80083aa:	69fb      	ldr	r3, [r7, #28]
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3720      	adds	r7, #32
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b088      	sub	sp, #32
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	603b      	str	r3, [r7, #0]
 80083c0:	4613      	mov	r3, r2
 80083c2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80083c8:	2300      	movs	r3, #0
 80083ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083cc:	f3ef 8305 	mrs	r3, IPSR
 80083d0:	617b      	str	r3, [r7, #20]
  return(result);
 80083d2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d028      	beq.n	800842a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80083d8:	69bb      	ldr	r3, [r7, #24]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d005      	beq.n	80083ea <osMessageQueuePut+0x36>
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d002      	beq.n	80083ea <osMessageQueuePut+0x36>
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d003      	beq.n	80083f2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80083ea:	f06f 0303 	mvn.w	r3, #3
 80083ee:	61fb      	str	r3, [r7, #28]
 80083f0:	e038      	b.n	8008464 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80083f2:	2300      	movs	r3, #0
 80083f4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80083f6:	f107 0210 	add.w	r2, r7, #16
 80083fa:	2300      	movs	r3, #0
 80083fc:	68b9      	ldr	r1, [r7, #8]
 80083fe:	69b8      	ldr	r0, [r7, #24]
 8008400:	f000 fbe6 	bl	8008bd0 <xQueueGenericSendFromISR>
 8008404:	4603      	mov	r3, r0
 8008406:	2b01      	cmp	r3, #1
 8008408:	d003      	beq.n	8008412 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800840a:	f06f 0302 	mvn.w	r3, #2
 800840e:	61fb      	str	r3, [r7, #28]
 8008410:	e028      	b.n	8008464 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d025      	beq.n	8008464 <osMessageQueuePut+0xb0>
 8008418:	4b15      	ldr	r3, [pc, #84]	@ (8008470 <osMessageQueuePut+0xbc>)
 800841a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800841e:	601a      	str	r2, [r3, #0]
 8008420:	f3bf 8f4f 	dsb	sy
 8008424:	f3bf 8f6f 	isb	sy
 8008428:	e01c      	b.n	8008464 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800842a:	69bb      	ldr	r3, [r7, #24]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d002      	beq.n	8008436 <osMessageQueuePut+0x82>
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d103      	bne.n	800843e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008436:	f06f 0303 	mvn.w	r3, #3
 800843a:	61fb      	str	r3, [r7, #28]
 800843c:	e012      	b.n	8008464 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800843e:	2300      	movs	r3, #0
 8008440:	683a      	ldr	r2, [r7, #0]
 8008442:	68b9      	ldr	r1, [r7, #8]
 8008444:	69b8      	ldr	r0, [r7, #24]
 8008446:	f000 fac1 	bl	80089cc <xQueueGenericSend>
 800844a:	4603      	mov	r3, r0
 800844c:	2b01      	cmp	r3, #1
 800844e:	d009      	beq.n	8008464 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d003      	beq.n	800845e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008456:	f06f 0301 	mvn.w	r3, #1
 800845a:	61fb      	str	r3, [r7, #28]
 800845c:	e002      	b.n	8008464 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800845e:	f06f 0302 	mvn.w	r3, #2
 8008462:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008464:	69fb      	ldr	r3, [r7, #28]
}
 8008466:	4618      	mov	r0, r3
 8008468:	3720      	adds	r7, #32
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	e000ed04 	.word	0xe000ed04

08008474 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008474:	b580      	push	{r7, lr}
 8008476:	b088      	sub	sp, #32
 8008478:	af00      	add	r7, sp, #0
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	607a      	str	r2, [r7, #4]
 8008480:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008486:	2300      	movs	r3, #0
 8008488:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800848a:	f3ef 8305 	mrs	r3, IPSR
 800848e:	617b      	str	r3, [r7, #20]
  return(result);
 8008490:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008492:	2b00      	cmp	r3, #0
 8008494:	d028      	beq.n	80084e8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008496:	69bb      	ldr	r3, [r7, #24]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d005      	beq.n	80084a8 <osMessageQueueGet+0x34>
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d002      	beq.n	80084a8 <osMessageQueueGet+0x34>
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d003      	beq.n	80084b0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80084a8:	f06f 0303 	mvn.w	r3, #3
 80084ac:	61fb      	str	r3, [r7, #28]
 80084ae:	e037      	b.n	8008520 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80084b0:	2300      	movs	r3, #0
 80084b2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80084b4:	f107 0310 	add.w	r3, r7, #16
 80084b8:	461a      	mov	r2, r3
 80084ba:	68b9      	ldr	r1, [r7, #8]
 80084bc:	69b8      	ldr	r0, [r7, #24]
 80084be:	f000 fd07 	bl	8008ed0 <xQueueReceiveFromISR>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d003      	beq.n	80084d0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80084c8:	f06f 0302 	mvn.w	r3, #2
 80084cc:	61fb      	str	r3, [r7, #28]
 80084ce:	e027      	b.n	8008520 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d024      	beq.n	8008520 <osMessageQueueGet+0xac>
 80084d6:	4b15      	ldr	r3, [pc, #84]	@ (800852c <osMessageQueueGet+0xb8>)
 80084d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084dc:	601a      	str	r2, [r3, #0]
 80084de:	f3bf 8f4f 	dsb	sy
 80084e2:	f3bf 8f6f 	isb	sy
 80084e6:	e01b      	b.n	8008520 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80084e8:	69bb      	ldr	r3, [r7, #24]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d002      	beq.n	80084f4 <osMessageQueueGet+0x80>
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d103      	bne.n	80084fc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80084f4:	f06f 0303 	mvn.w	r3, #3
 80084f8:	61fb      	str	r3, [r7, #28]
 80084fa:	e011      	b.n	8008520 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80084fc:	683a      	ldr	r2, [r7, #0]
 80084fe:	68b9      	ldr	r1, [r7, #8]
 8008500:	69b8      	ldr	r0, [r7, #24]
 8008502:	f000 fc03 	bl	8008d0c <xQueueReceive>
 8008506:	4603      	mov	r3, r0
 8008508:	2b01      	cmp	r3, #1
 800850a:	d009      	beq.n	8008520 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d003      	beq.n	800851a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008512:	f06f 0301 	mvn.w	r3, #1
 8008516:	61fb      	str	r3, [r7, #28]
 8008518:	e002      	b.n	8008520 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800851a:	f06f 0302 	mvn.w	r3, #2
 800851e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008520:	69fb      	ldr	r3, [r7, #28]
}
 8008522:	4618      	mov	r0, r3
 8008524:	3720      	adds	r7, #32
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	e000ed04 	.word	0xe000ed04

08008530 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8008530:	b580      	push	{r7, lr}
 8008532:	b086      	sub	sp, #24
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d102      	bne.n	8008548 <osMessageQueueGetCount+0x18>
    count = 0U;
 8008542:	2300      	movs	r3, #0
 8008544:	617b      	str	r3, [r7, #20]
 8008546:	e00e      	b.n	8008566 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008548:	f3ef 8305 	mrs	r3, IPSR
 800854c:	60fb      	str	r3, [r7, #12]
  return(result);
 800854e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008550:	2b00      	cmp	r3, #0
 8008552:	d004      	beq.n	800855e <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8008554:	6938      	ldr	r0, [r7, #16]
 8008556:	f000 fd5c 	bl	8009012 <uxQueueMessagesWaitingFromISR>
 800855a:	6178      	str	r0, [r7, #20]
 800855c:	e003      	b.n	8008566 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800855e:	6938      	ldr	r0, [r7, #16]
 8008560:	f000 fd38 	bl	8008fd4 <uxQueueMessagesWaiting>
 8008564:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8008566:	697b      	ldr	r3, [r7, #20]
}
 8008568:	4618      	mov	r0, r3
 800856a:	3718      	adds	r7, #24
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008570:	b480      	push	{r7}
 8008572:	b085      	sub	sp, #20
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	4a07      	ldr	r2, [pc, #28]	@ (800859c <vApplicationGetIdleTaskMemory+0x2c>)
 8008580:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	4a06      	ldr	r2, [pc, #24]	@ (80085a0 <vApplicationGetIdleTaskMemory+0x30>)
 8008586:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2280      	movs	r2, #128	@ 0x80
 800858c:	601a      	str	r2, [r3, #0]
}
 800858e:	bf00      	nop
 8008590:	3714      	adds	r7, #20
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr
 800859a:	bf00      	nop
 800859c:	200004fc 	.word	0x200004fc
 80085a0:	200005ac 	.word	0x200005ac

080085a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80085a4:	b480      	push	{r7}
 80085a6:	b085      	sub	sp, #20
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	4a07      	ldr	r2, [pc, #28]	@ (80085d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80085b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	4a06      	ldr	r2, [pc, #24]	@ (80085d4 <vApplicationGetTimerTaskMemory+0x30>)
 80085ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80085c2:	601a      	str	r2, [r3, #0]
}
 80085c4:	bf00      	nop
 80085c6:	3714      	adds	r7, #20
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr
 80085d0:	200007ac 	.word	0x200007ac
 80085d4:	2000085c 	.word	0x2000085c

080085d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f103 0208 	add.w	r2, r3, #8
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80085f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f103 0208 	add.w	r2, r3, #8
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f103 0208 	add.w	r2, r3, #8
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800860c:	bf00      	nop
 800860e:	370c      	adds	r7, #12
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008618:	b480      	push	{r7}
 800861a:	b083      	sub	sp, #12
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008626:	bf00      	nop
 8008628:	370c      	adds	r7, #12
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr

08008632 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008632:	b480      	push	{r7}
 8008634:	b085      	sub	sp, #20
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
 800863a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	68fa      	ldr	r2, [r7, #12]
 8008646:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	689a      	ldr	r2, [r3, #8]
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	683a      	ldr	r2, [r7, #0]
 8008656:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	683a      	ldr	r2, [r7, #0]
 800865c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	1c5a      	adds	r2, r3, #1
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	601a      	str	r2, [r3, #0]
}
 800866e:	bf00      	nop
 8008670:	3714      	adds	r7, #20
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr

0800867a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800867a:	b480      	push	{r7}
 800867c:	b085      	sub	sp, #20
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
 8008682:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008690:	d103      	bne.n	800869a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	691b      	ldr	r3, [r3, #16]
 8008696:	60fb      	str	r3, [r7, #12]
 8008698:	e00c      	b.n	80086b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	3308      	adds	r3, #8
 800869e:	60fb      	str	r3, [r7, #12]
 80086a0:	e002      	b.n	80086a8 <vListInsert+0x2e>
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	60fb      	str	r3, [r7, #12]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	68ba      	ldr	r2, [r7, #8]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d2f6      	bcs.n	80086a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	685a      	ldr	r2, [r3, #4]
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	683a      	ldr	r2, [r7, #0]
 80086c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	68fa      	ldr	r2, [r7, #12]
 80086c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	683a      	ldr	r2, [r7, #0]
 80086ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	1c5a      	adds	r2, r3, #1
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	601a      	str	r2, [r3, #0]
}
 80086e0:	bf00      	nop
 80086e2:	3714      	adds	r7, #20
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80086ec:	b480      	push	{r7}
 80086ee:	b085      	sub	sp, #20
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	691b      	ldr	r3, [r3, #16]
 80086f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	6892      	ldr	r2, [r2, #8]
 8008702:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	6852      	ldr	r2, [r2, #4]
 800870c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	429a      	cmp	r2, r3
 8008716:	d103      	bne.n	8008720 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	689a      	ldr	r2, [r3, #8]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	1e5a      	subs	r2, r3, #1
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
}
 8008734:	4618      	mov	r0, r3
 8008736:	3714      	adds	r7, #20
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d10b      	bne.n	800876c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008758:	f383 8811 	msr	BASEPRI, r3
 800875c:	f3bf 8f6f 	isb	sy
 8008760:	f3bf 8f4f 	dsb	sy
 8008764:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008766:	bf00      	nop
 8008768:	bf00      	nop
 800876a:	e7fd      	b.n	8008768 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800876c:	f002 fa7c 	bl	800ac68 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008778:	68f9      	ldr	r1, [r7, #12]
 800877a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800877c:	fb01 f303 	mul.w	r3, r1, r3
 8008780:	441a      	add	r2, r3
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2200      	movs	r2, #0
 800878a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681a      	ldr	r2, [r3, #0]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800879c:	3b01      	subs	r3, #1
 800879e:	68f9      	ldr	r1, [r7, #12]
 80087a0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80087a2:	fb01 f303 	mul.w	r3, r1, r3
 80087a6:	441a      	add	r2, r3
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	22ff      	movs	r2, #255	@ 0xff
 80087b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	22ff      	movs	r2, #255	@ 0xff
 80087b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d114      	bne.n	80087ec <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	691b      	ldr	r3, [r3, #16]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d01a      	beq.n	8008800 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	3310      	adds	r3, #16
 80087ce:	4618      	mov	r0, r3
 80087d0:	f001 fac0 	bl	8009d54 <xTaskRemoveFromEventList>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d012      	beq.n	8008800 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80087da:	4b0d      	ldr	r3, [pc, #52]	@ (8008810 <xQueueGenericReset+0xd0>)
 80087dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087e0:	601a      	str	r2, [r3, #0]
 80087e2:	f3bf 8f4f 	dsb	sy
 80087e6:	f3bf 8f6f 	isb	sy
 80087ea:	e009      	b.n	8008800 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	3310      	adds	r3, #16
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7ff fef1 	bl	80085d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	3324      	adds	r3, #36	@ 0x24
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7ff feec 	bl	80085d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008800:	f002 fa64 	bl	800accc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008804:	2301      	movs	r3, #1
}
 8008806:	4618      	mov	r0, r3
 8008808:	3710      	adds	r7, #16
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	e000ed04 	.word	0xe000ed04

08008814 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008814:	b580      	push	{r7, lr}
 8008816:	b08e      	sub	sp, #56	@ 0x38
 8008818:	af02      	add	r7, sp, #8
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	607a      	str	r2, [r7, #4]
 8008820:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d10b      	bne.n	8008840 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800882c:	f383 8811 	msr	BASEPRI, r3
 8008830:	f3bf 8f6f 	isb	sy
 8008834:	f3bf 8f4f 	dsb	sy
 8008838:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800883a:	bf00      	nop
 800883c:	bf00      	nop
 800883e:	e7fd      	b.n	800883c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d10b      	bne.n	800885e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800884a:	f383 8811 	msr	BASEPRI, r3
 800884e:	f3bf 8f6f 	isb	sy
 8008852:	f3bf 8f4f 	dsb	sy
 8008856:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008858:	bf00      	nop
 800885a:	bf00      	nop
 800885c:	e7fd      	b.n	800885a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d002      	beq.n	800886a <xQueueGenericCreateStatic+0x56>
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d001      	beq.n	800886e <xQueueGenericCreateStatic+0x5a>
 800886a:	2301      	movs	r3, #1
 800886c:	e000      	b.n	8008870 <xQueueGenericCreateStatic+0x5c>
 800886e:	2300      	movs	r3, #0
 8008870:	2b00      	cmp	r3, #0
 8008872:	d10b      	bne.n	800888c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008878:	f383 8811 	msr	BASEPRI, r3
 800887c:	f3bf 8f6f 	isb	sy
 8008880:	f3bf 8f4f 	dsb	sy
 8008884:	623b      	str	r3, [r7, #32]
}
 8008886:	bf00      	nop
 8008888:	bf00      	nop
 800888a:	e7fd      	b.n	8008888 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d102      	bne.n	8008898 <xQueueGenericCreateStatic+0x84>
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d101      	bne.n	800889c <xQueueGenericCreateStatic+0x88>
 8008898:	2301      	movs	r3, #1
 800889a:	e000      	b.n	800889e <xQueueGenericCreateStatic+0x8a>
 800889c:	2300      	movs	r3, #0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d10b      	bne.n	80088ba <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80088a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a6:	f383 8811 	msr	BASEPRI, r3
 80088aa:	f3bf 8f6f 	isb	sy
 80088ae:	f3bf 8f4f 	dsb	sy
 80088b2:	61fb      	str	r3, [r7, #28]
}
 80088b4:	bf00      	nop
 80088b6:	bf00      	nop
 80088b8:	e7fd      	b.n	80088b6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80088ba:	2350      	movs	r3, #80	@ 0x50
 80088bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	2b50      	cmp	r3, #80	@ 0x50
 80088c2:	d00b      	beq.n	80088dc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80088c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c8:	f383 8811 	msr	BASEPRI, r3
 80088cc:	f3bf 8f6f 	isb	sy
 80088d0:	f3bf 8f4f 	dsb	sy
 80088d4:	61bb      	str	r3, [r7, #24]
}
 80088d6:	bf00      	nop
 80088d8:	bf00      	nop
 80088da:	e7fd      	b.n	80088d8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80088dc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80088e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d00d      	beq.n	8008904 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80088e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088ea:	2201      	movs	r2, #1
 80088ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80088f0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80088f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088f6:	9300      	str	r3, [sp, #0]
 80088f8:	4613      	mov	r3, r2
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	68b9      	ldr	r1, [r7, #8]
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f000 f840 	bl	8008984 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008906:	4618      	mov	r0, r3
 8008908:	3730      	adds	r7, #48	@ 0x30
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}

0800890e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800890e:	b580      	push	{r7, lr}
 8008910:	b08a      	sub	sp, #40	@ 0x28
 8008912:	af02      	add	r7, sp, #8
 8008914:	60f8      	str	r0, [r7, #12]
 8008916:	60b9      	str	r1, [r7, #8]
 8008918:	4613      	mov	r3, r2
 800891a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d10b      	bne.n	800893a <xQueueGenericCreate+0x2c>
	__asm volatile
 8008922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008926:	f383 8811 	msr	BASEPRI, r3
 800892a:	f3bf 8f6f 	isb	sy
 800892e:	f3bf 8f4f 	dsb	sy
 8008932:	613b      	str	r3, [r7, #16]
}
 8008934:	bf00      	nop
 8008936:	bf00      	nop
 8008938:	e7fd      	b.n	8008936 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	68ba      	ldr	r2, [r7, #8]
 800893e:	fb02 f303 	mul.w	r3, r2, r3
 8008942:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008944:	69fb      	ldr	r3, [r7, #28]
 8008946:	3350      	adds	r3, #80	@ 0x50
 8008948:	4618      	mov	r0, r3
 800894a:	f002 fb93 	bl	800b074 <pvPortMalloc>
 800894e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008950:	69bb      	ldr	r3, [r7, #24]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d011      	beq.n	800897a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008956:	69bb      	ldr	r3, [r7, #24]
 8008958:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	3350      	adds	r3, #80	@ 0x50
 800895e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008960:	69bb      	ldr	r3, [r7, #24]
 8008962:	2200      	movs	r2, #0
 8008964:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008968:	79fa      	ldrb	r2, [r7, #7]
 800896a:	69bb      	ldr	r3, [r7, #24]
 800896c:	9300      	str	r3, [sp, #0]
 800896e:	4613      	mov	r3, r2
 8008970:	697a      	ldr	r2, [r7, #20]
 8008972:	68b9      	ldr	r1, [r7, #8]
 8008974:	68f8      	ldr	r0, [r7, #12]
 8008976:	f000 f805 	bl	8008984 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800897a:	69bb      	ldr	r3, [r7, #24]
	}
 800897c:	4618      	mov	r0, r3
 800897e:	3720      	adds	r7, #32
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b084      	sub	sp, #16
 8008988:	af00      	add	r7, sp, #0
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	607a      	str	r2, [r7, #4]
 8008990:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d103      	bne.n	80089a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008998:	69bb      	ldr	r3, [r7, #24]
 800899a:	69ba      	ldr	r2, [r7, #24]
 800899c:	601a      	str	r2, [r3, #0]
 800899e:	e002      	b.n	80089a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80089a0:	69bb      	ldr	r3, [r7, #24]
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80089a6:	69bb      	ldr	r3, [r7, #24]
 80089a8:	68fa      	ldr	r2, [r7, #12]
 80089aa:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80089ac:	69bb      	ldr	r3, [r7, #24]
 80089ae:	68ba      	ldr	r2, [r7, #8]
 80089b0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80089b2:	2101      	movs	r1, #1
 80089b4:	69b8      	ldr	r0, [r7, #24]
 80089b6:	f7ff fec3 	bl	8008740 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80089ba:	69bb      	ldr	r3, [r7, #24]
 80089bc:	78fa      	ldrb	r2, [r7, #3]
 80089be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80089c2:	bf00      	nop
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
	...

080089cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b08e      	sub	sp, #56	@ 0x38
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	607a      	str	r2, [r7, #4]
 80089d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80089da:	2300      	movs	r3, #0
 80089dc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80089e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d10b      	bne.n	8008a00 <xQueueGenericSend+0x34>
	__asm volatile
 80089e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ec:	f383 8811 	msr	BASEPRI, r3
 80089f0:	f3bf 8f6f 	isb	sy
 80089f4:	f3bf 8f4f 	dsb	sy
 80089f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80089fa:	bf00      	nop
 80089fc:	bf00      	nop
 80089fe:	e7fd      	b.n	80089fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d103      	bne.n	8008a0e <xQueueGenericSend+0x42>
 8008a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d101      	bne.n	8008a12 <xQueueGenericSend+0x46>
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e000      	b.n	8008a14 <xQueueGenericSend+0x48>
 8008a12:	2300      	movs	r3, #0
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d10b      	bne.n	8008a30 <xQueueGenericSend+0x64>
	__asm volatile
 8008a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a1c:	f383 8811 	msr	BASEPRI, r3
 8008a20:	f3bf 8f6f 	isb	sy
 8008a24:	f3bf 8f4f 	dsb	sy
 8008a28:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008a2a:	bf00      	nop
 8008a2c:	bf00      	nop
 8008a2e:	e7fd      	b.n	8008a2c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	2b02      	cmp	r3, #2
 8008a34:	d103      	bne.n	8008a3e <xQueueGenericSend+0x72>
 8008a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d101      	bne.n	8008a42 <xQueueGenericSend+0x76>
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e000      	b.n	8008a44 <xQueueGenericSend+0x78>
 8008a42:	2300      	movs	r3, #0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d10b      	bne.n	8008a60 <xQueueGenericSend+0x94>
	__asm volatile
 8008a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a4c:	f383 8811 	msr	BASEPRI, r3
 8008a50:	f3bf 8f6f 	isb	sy
 8008a54:	f3bf 8f4f 	dsb	sy
 8008a58:	623b      	str	r3, [r7, #32]
}
 8008a5a:	bf00      	nop
 8008a5c:	bf00      	nop
 8008a5e:	e7fd      	b.n	8008a5c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a60:	f001 fb96 	bl	800a190 <xTaskGetSchedulerState>
 8008a64:	4603      	mov	r3, r0
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d102      	bne.n	8008a70 <xQueueGenericSend+0xa4>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d101      	bne.n	8008a74 <xQueueGenericSend+0xa8>
 8008a70:	2301      	movs	r3, #1
 8008a72:	e000      	b.n	8008a76 <xQueueGenericSend+0xaa>
 8008a74:	2300      	movs	r3, #0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d10b      	bne.n	8008a92 <xQueueGenericSend+0xc6>
	__asm volatile
 8008a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a7e:	f383 8811 	msr	BASEPRI, r3
 8008a82:	f3bf 8f6f 	isb	sy
 8008a86:	f3bf 8f4f 	dsb	sy
 8008a8a:	61fb      	str	r3, [r7, #28]
}
 8008a8c:	bf00      	nop
 8008a8e:	bf00      	nop
 8008a90:	e7fd      	b.n	8008a8e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a92:	f002 f8e9 	bl	800ac68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d302      	bcc.n	8008aa8 <xQueueGenericSend+0xdc>
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	2b02      	cmp	r3, #2
 8008aa6:	d129      	bne.n	8008afc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008aa8:	683a      	ldr	r2, [r7, #0]
 8008aaa:	68b9      	ldr	r1, [r7, #8]
 8008aac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008aae:	f000 facf 	bl	8009050 <prvCopyDataToQueue>
 8008ab2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d010      	beq.n	8008ade <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008abe:	3324      	adds	r3, #36	@ 0x24
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f001 f947 	bl	8009d54 <xTaskRemoveFromEventList>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d013      	beq.n	8008af4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008acc:	4b3f      	ldr	r3, [pc, #252]	@ (8008bcc <xQueueGenericSend+0x200>)
 8008ace:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ad2:	601a      	str	r2, [r3, #0]
 8008ad4:	f3bf 8f4f 	dsb	sy
 8008ad8:	f3bf 8f6f 	isb	sy
 8008adc:	e00a      	b.n	8008af4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d007      	beq.n	8008af4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008ae4:	4b39      	ldr	r3, [pc, #228]	@ (8008bcc <xQueueGenericSend+0x200>)
 8008ae6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008aea:	601a      	str	r2, [r3, #0]
 8008aec:	f3bf 8f4f 	dsb	sy
 8008af0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008af4:	f002 f8ea 	bl	800accc <vPortExitCritical>
				return pdPASS;
 8008af8:	2301      	movs	r3, #1
 8008afa:	e063      	b.n	8008bc4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d103      	bne.n	8008b0a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b02:	f002 f8e3 	bl	800accc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008b06:	2300      	movs	r3, #0
 8008b08:	e05c      	b.n	8008bc4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d106      	bne.n	8008b1e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b10:	f107 0314 	add.w	r3, r7, #20
 8008b14:	4618      	mov	r0, r3
 8008b16:	f001 f983 	bl	8009e20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b1e:	f002 f8d5 	bl	800accc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b22:	f000 fe6f 	bl	8009804 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b26:	f002 f89f 	bl	800ac68 <vPortEnterCritical>
 8008b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008b30:	b25b      	sxtb	r3, r3
 8008b32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b36:	d103      	bne.n	8008b40 <xQueueGenericSend+0x174>
 8008b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b46:	b25b      	sxtb	r3, r3
 8008b48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b4c:	d103      	bne.n	8008b56 <xQueueGenericSend+0x18a>
 8008b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b50:	2200      	movs	r2, #0
 8008b52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b56:	f002 f8b9 	bl	800accc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b5a:	1d3a      	adds	r2, r7, #4
 8008b5c:	f107 0314 	add.w	r3, r7, #20
 8008b60:	4611      	mov	r1, r2
 8008b62:	4618      	mov	r0, r3
 8008b64:	f001 f972 	bl	8009e4c <xTaskCheckForTimeOut>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d124      	bne.n	8008bb8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008b6e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b70:	f000 fb66 	bl	8009240 <prvIsQueueFull>
 8008b74:	4603      	mov	r3, r0
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d018      	beq.n	8008bac <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b7c:	3310      	adds	r3, #16
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	4611      	mov	r1, r2
 8008b82:	4618      	mov	r0, r3
 8008b84:	f001 f894 	bl	8009cb0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008b88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b8a:	f000 faf1 	bl	8009170 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008b8e:	f000 fe7f 	bl	8009890 <xTaskResumeAll>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	f47f af7c 	bne.w	8008a92 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8008bcc <xQueueGenericSend+0x200>)
 8008b9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ba0:	601a      	str	r2, [r3, #0]
 8008ba2:	f3bf 8f4f 	dsb	sy
 8008ba6:	f3bf 8f6f 	isb	sy
 8008baa:	e772      	b.n	8008a92 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008bac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008bae:	f000 fadf 	bl	8009170 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008bb2:	f000 fe6d 	bl	8009890 <xTaskResumeAll>
 8008bb6:	e76c      	b.n	8008a92 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008bb8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008bba:	f000 fad9 	bl	8009170 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008bbe:	f000 fe67 	bl	8009890 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008bc2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3738      	adds	r7, #56	@ 0x38
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}
 8008bcc:	e000ed04 	.word	0xe000ed04

08008bd0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b090      	sub	sp, #64	@ 0x40
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	60f8      	str	r0, [r7, #12]
 8008bd8:	60b9      	str	r1, [r7, #8]
 8008bda:	607a      	str	r2, [r7, #4]
 8008bdc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d10b      	bne.n	8008c00 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bec:	f383 8811 	msr	BASEPRI, r3
 8008bf0:	f3bf 8f6f 	isb	sy
 8008bf4:	f3bf 8f4f 	dsb	sy
 8008bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008bfa:	bf00      	nop
 8008bfc:	bf00      	nop
 8008bfe:	e7fd      	b.n	8008bfc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d103      	bne.n	8008c0e <xQueueGenericSendFromISR+0x3e>
 8008c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d101      	bne.n	8008c12 <xQueueGenericSendFromISR+0x42>
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e000      	b.n	8008c14 <xQueueGenericSendFromISR+0x44>
 8008c12:	2300      	movs	r3, #0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d10b      	bne.n	8008c30 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c1c:	f383 8811 	msr	BASEPRI, r3
 8008c20:	f3bf 8f6f 	isb	sy
 8008c24:	f3bf 8f4f 	dsb	sy
 8008c28:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008c2a:	bf00      	nop
 8008c2c:	bf00      	nop
 8008c2e:	e7fd      	b.n	8008c2c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	2b02      	cmp	r3, #2
 8008c34:	d103      	bne.n	8008c3e <xQueueGenericSendFromISR+0x6e>
 8008c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d101      	bne.n	8008c42 <xQueueGenericSendFromISR+0x72>
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e000      	b.n	8008c44 <xQueueGenericSendFromISR+0x74>
 8008c42:	2300      	movs	r3, #0
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d10b      	bne.n	8008c60 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c4c:	f383 8811 	msr	BASEPRI, r3
 8008c50:	f3bf 8f6f 	isb	sy
 8008c54:	f3bf 8f4f 	dsb	sy
 8008c58:	623b      	str	r3, [r7, #32]
}
 8008c5a:	bf00      	nop
 8008c5c:	bf00      	nop
 8008c5e:	e7fd      	b.n	8008c5c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c60:	f002 f9c6 	bl	800aff0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008c64:	f3ef 8211 	mrs	r2, BASEPRI
 8008c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c6c:	f383 8811 	msr	BASEPRI, r3
 8008c70:	f3bf 8f6f 	isb	sy
 8008c74:	f3bf 8f4f 	dsb	sy
 8008c78:	61fa      	str	r2, [r7, #28]
 8008c7a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008c7c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c7e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d302      	bcc.n	8008c92 <xQueueGenericSendFromISR+0xc2>
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	2b02      	cmp	r3, #2
 8008c90:	d12f      	bne.n	8008cf2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c98:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008ca2:	683a      	ldr	r2, [r7, #0]
 8008ca4:	68b9      	ldr	r1, [r7, #8]
 8008ca6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008ca8:	f000 f9d2 	bl	8009050 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008cac:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008cb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008cb4:	d112      	bne.n	8008cdc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d016      	beq.n	8008cec <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc0:	3324      	adds	r3, #36	@ 0x24
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f001 f846 	bl	8009d54 <xTaskRemoveFromEventList>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d00e      	beq.n	8008cec <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d00b      	beq.n	8008cec <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	601a      	str	r2, [r3, #0]
 8008cda:	e007      	b.n	8008cec <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008cdc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	b25a      	sxtb	r2, r3
 8008ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ce8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008cec:	2301      	movs	r3, #1
 8008cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008cf0:	e001      	b.n	8008cf6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cf8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008d00:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008d02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3740      	adds	r7, #64	@ 0x40
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b08c      	sub	sp, #48	@ 0x30
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	60f8      	str	r0, [r7, #12]
 8008d14:	60b9      	str	r1, [r7, #8]
 8008d16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d10b      	bne.n	8008d3e <xQueueReceive+0x32>
	__asm volatile
 8008d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d2a:	f383 8811 	msr	BASEPRI, r3
 8008d2e:	f3bf 8f6f 	isb	sy
 8008d32:	f3bf 8f4f 	dsb	sy
 8008d36:	623b      	str	r3, [r7, #32]
}
 8008d38:	bf00      	nop
 8008d3a:	bf00      	nop
 8008d3c:	e7fd      	b.n	8008d3a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d103      	bne.n	8008d4c <xQueueReceive+0x40>
 8008d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d101      	bne.n	8008d50 <xQueueReceive+0x44>
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e000      	b.n	8008d52 <xQueueReceive+0x46>
 8008d50:	2300      	movs	r3, #0
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d10b      	bne.n	8008d6e <xQueueReceive+0x62>
	__asm volatile
 8008d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d5a:	f383 8811 	msr	BASEPRI, r3
 8008d5e:	f3bf 8f6f 	isb	sy
 8008d62:	f3bf 8f4f 	dsb	sy
 8008d66:	61fb      	str	r3, [r7, #28]
}
 8008d68:	bf00      	nop
 8008d6a:	bf00      	nop
 8008d6c:	e7fd      	b.n	8008d6a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d6e:	f001 fa0f 	bl	800a190 <xTaskGetSchedulerState>
 8008d72:	4603      	mov	r3, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d102      	bne.n	8008d7e <xQueueReceive+0x72>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d101      	bne.n	8008d82 <xQueueReceive+0x76>
 8008d7e:	2301      	movs	r3, #1
 8008d80:	e000      	b.n	8008d84 <xQueueReceive+0x78>
 8008d82:	2300      	movs	r3, #0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d10b      	bne.n	8008da0 <xQueueReceive+0x94>
	__asm volatile
 8008d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d8c:	f383 8811 	msr	BASEPRI, r3
 8008d90:	f3bf 8f6f 	isb	sy
 8008d94:	f3bf 8f4f 	dsb	sy
 8008d98:	61bb      	str	r3, [r7, #24]
}
 8008d9a:	bf00      	nop
 8008d9c:	bf00      	nop
 8008d9e:	e7fd      	b.n	8008d9c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008da0:	f001 ff62 	bl	800ac68 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008da8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d01f      	beq.n	8008df0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008db0:	68b9      	ldr	r1, [r7, #8]
 8008db2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008db4:	f000 f9b6 	bl	8009124 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dba:	1e5a      	subs	r2, r3, #1
 8008dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dbe:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dc2:	691b      	ldr	r3, [r3, #16]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d00f      	beq.n	8008de8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dca:	3310      	adds	r3, #16
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f000 ffc1 	bl	8009d54 <xTaskRemoveFromEventList>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d007      	beq.n	8008de8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008dd8:	4b3c      	ldr	r3, [pc, #240]	@ (8008ecc <xQueueReceive+0x1c0>)
 8008dda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008dde:	601a      	str	r2, [r3, #0]
 8008de0:	f3bf 8f4f 	dsb	sy
 8008de4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008de8:	f001 ff70 	bl	800accc <vPortExitCritical>
				return pdPASS;
 8008dec:	2301      	movs	r3, #1
 8008dee:	e069      	b.n	8008ec4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d103      	bne.n	8008dfe <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008df6:	f001 ff69 	bl	800accc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	e062      	b.n	8008ec4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d106      	bne.n	8008e12 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e04:	f107 0310 	add.w	r3, r7, #16
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f001 f809 	bl	8009e20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e12:	f001 ff5b 	bl	800accc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e16:	f000 fcf5 	bl	8009804 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e1a:	f001 ff25 	bl	800ac68 <vPortEnterCritical>
 8008e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008e24:	b25b      	sxtb	r3, r3
 8008e26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008e2a:	d103      	bne.n	8008e34 <xQueueReceive+0x128>
 8008e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e2e:	2200      	movs	r2, #0
 8008e30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008e3a:	b25b      	sxtb	r3, r3
 8008e3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008e40:	d103      	bne.n	8008e4a <xQueueReceive+0x13e>
 8008e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e44:	2200      	movs	r2, #0
 8008e46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e4a:	f001 ff3f 	bl	800accc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e4e:	1d3a      	adds	r2, r7, #4
 8008e50:	f107 0310 	add.w	r3, r7, #16
 8008e54:	4611      	mov	r1, r2
 8008e56:	4618      	mov	r0, r3
 8008e58:	f000 fff8 	bl	8009e4c <xTaskCheckForTimeOut>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d123      	bne.n	8008eaa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e64:	f000 f9d6 	bl	8009214 <prvIsQueueEmpty>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d017      	beq.n	8008e9e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e70:	3324      	adds	r3, #36	@ 0x24
 8008e72:	687a      	ldr	r2, [r7, #4]
 8008e74:	4611      	mov	r1, r2
 8008e76:	4618      	mov	r0, r3
 8008e78:	f000 ff1a 	bl	8009cb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008e7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e7e:	f000 f977 	bl	8009170 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008e82:	f000 fd05 	bl	8009890 <xTaskResumeAll>
 8008e86:	4603      	mov	r3, r0
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d189      	bne.n	8008da0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8008ecc <xQueueReceive+0x1c0>)
 8008e8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e92:	601a      	str	r2, [r3, #0]
 8008e94:	f3bf 8f4f 	dsb	sy
 8008e98:	f3bf 8f6f 	isb	sy
 8008e9c:	e780      	b.n	8008da0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008e9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ea0:	f000 f966 	bl	8009170 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ea4:	f000 fcf4 	bl	8009890 <xTaskResumeAll>
 8008ea8:	e77a      	b.n	8008da0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008eaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008eac:	f000 f960 	bl	8009170 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008eb0:	f000 fcee 	bl	8009890 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008eb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008eb6:	f000 f9ad 	bl	8009214 <prvIsQueueEmpty>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	f43f af6f 	beq.w	8008da0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008ec2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3730      	adds	r7, #48	@ 0x30
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}
 8008ecc:	e000ed04 	.word	0xe000ed04

08008ed0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b08e      	sub	sp, #56	@ 0x38
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	60f8      	str	r0, [r7, #12]
 8008ed8:	60b9      	str	r1, [r7, #8]
 8008eda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d10b      	bne.n	8008efe <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8008ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eea:	f383 8811 	msr	BASEPRI, r3
 8008eee:	f3bf 8f6f 	isb	sy
 8008ef2:	f3bf 8f4f 	dsb	sy
 8008ef6:	623b      	str	r3, [r7, #32]
}
 8008ef8:	bf00      	nop
 8008efa:	bf00      	nop
 8008efc:	e7fd      	b.n	8008efa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d103      	bne.n	8008f0c <xQueueReceiveFromISR+0x3c>
 8008f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d101      	bne.n	8008f10 <xQueueReceiveFromISR+0x40>
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	e000      	b.n	8008f12 <xQueueReceiveFromISR+0x42>
 8008f10:	2300      	movs	r3, #0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d10b      	bne.n	8008f2e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8008f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f1a:	f383 8811 	msr	BASEPRI, r3
 8008f1e:	f3bf 8f6f 	isb	sy
 8008f22:	f3bf 8f4f 	dsb	sy
 8008f26:	61fb      	str	r3, [r7, #28]
}
 8008f28:	bf00      	nop
 8008f2a:	bf00      	nop
 8008f2c:	e7fd      	b.n	8008f2a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008f2e:	f002 f85f 	bl	800aff0 <vPortValidateInterruptPriority>
	__asm volatile
 8008f32:	f3ef 8211 	mrs	r2, BASEPRI
 8008f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f3a:	f383 8811 	msr	BASEPRI, r3
 8008f3e:	f3bf 8f6f 	isb	sy
 8008f42:	f3bf 8f4f 	dsb	sy
 8008f46:	61ba      	str	r2, [r7, #24]
 8008f48:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008f4a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f52:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d02f      	beq.n	8008fba <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008f60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008f64:	68b9      	ldr	r1, [r7, #8]
 8008f66:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f68:	f000 f8dc 	bl	8009124 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f6e:	1e5a      	subs	r2, r3, #1
 8008f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f72:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008f74:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008f78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008f7c:	d112      	bne.n	8008fa4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f80:	691b      	ldr	r3, [r3, #16]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d016      	beq.n	8008fb4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f88:	3310      	adds	r3, #16
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f000 fee2 	bl	8009d54 <xTaskRemoveFromEventList>
 8008f90:	4603      	mov	r3, r0
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d00e      	beq.n	8008fb4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d00b      	beq.n	8008fb4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	601a      	str	r2, [r3, #0]
 8008fa2:	e007      	b.n	8008fb4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008fa4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008fa8:	3301      	adds	r3, #1
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	b25a      	sxtb	r2, r3
 8008fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fb8:	e001      	b.n	8008fbe <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fc0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	f383 8811 	msr	BASEPRI, r3
}
 8008fc8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008fca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3738      	adds	r7, #56	@ 0x38
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b084      	sub	sp, #16
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d10b      	bne.n	8008ffa <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8008fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fe6:	f383 8811 	msr	BASEPRI, r3
 8008fea:	f3bf 8f6f 	isb	sy
 8008fee:	f3bf 8f4f 	dsb	sy
 8008ff2:	60bb      	str	r3, [r7, #8]
}
 8008ff4:	bf00      	nop
 8008ff6:	bf00      	nop
 8008ff8:	e7fd      	b.n	8008ff6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8008ffa:	f001 fe35 	bl	800ac68 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009002:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8009004:	f001 fe62 	bl	800accc <vPortExitCritical>

	return uxReturn;
 8009008:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800900a:	4618      	mov	r0, r3
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8009012:	b480      	push	{r7}
 8009014:	b087      	sub	sp, #28
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d10b      	bne.n	800903c <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 8009024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009028:	f383 8811 	msr	BASEPRI, r3
 800902c:	f3bf 8f6f 	isb	sy
 8009030:	f3bf 8f4f 	dsb	sy
 8009034:	60fb      	str	r3, [r7, #12]
}
 8009036:	bf00      	nop
 8009038:	bf00      	nop
 800903a:	e7fd      	b.n	8009038 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009040:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8009042:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8009044:	4618      	mov	r0, r3
 8009046:	371c      	adds	r7, #28
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr

08009050 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b086      	sub	sp, #24
 8009054:	af00      	add	r7, sp, #0
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	60b9      	str	r1, [r7, #8]
 800905a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800905c:	2300      	movs	r3, #0
 800905e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009064:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800906a:	2b00      	cmp	r3, #0
 800906c:	d10d      	bne.n	800908a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d14d      	bne.n	8009112 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	4618      	mov	r0, r3
 800907c:	f001 f8a6 	bl	800a1cc <xTaskPriorityDisinherit>
 8009080:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2200      	movs	r2, #0
 8009086:	609a      	str	r2, [r3, #8]
 8009088:	e043      	b.n	8009112 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d119      	bne.n	80090c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	6858      	ldr	r0, [r3, #4]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009098:	461a      	mov	r2, r3
 800909a:	68b9      	ldr	r1, [r7, #8]
 800909c:	f003 f943 	bl	800c326 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	685a      	ldr	r2, [r3, #4]
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090a8:	441a      	add	r2, r3
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	685a      	ldr	r2, [r3, #4]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	689b      	ldr	r3, [r3, #8]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d32b      	bcc.n	8009112 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	605a      	str	r2, [r3, #4]
 80090c2:	e026      	b.n	8009112 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	68d8      	ldr	r0, [r3, #12]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090cc:	461a      	mov	r2, r3
 80090ce:	68b9      	ldr	r1, [r7, #8]
 80090d0:	f003 f929 	bl	800c326 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	68da      	ldr	r2, [r3, #12]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090dc:	425b      	negs	r3, r3
 80090de:	441a      	add	r2, r3
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	68da      	ldr	r2, [r3, #12]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d207      	bcs.n	8009100 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	689a      	ldr	r2, [r3, #8]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090f8:	425b      	negs	r3, r3
 80090fa:	441a      	add	r2, r3
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2b02      	cmp	r3, #2
 8009104:	d105      	bne.n	8009112 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d002      	beq.n	8009112 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	3b01      	subs	r3, #1
 8009110:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	1c5a      	adds	r2, r3, #1
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800911a:	697b      	ldr	r3, [r7, #20]
}
 800911c:	4618      	mov	r0, r3
 800911e:	3718      	adds	r7, #24
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009132:	2b00      	cmp	r3, #0
 8009134:	d018      	beq.n	8009168 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	68da      	ldr	r2, [r3, #12]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800913e:	441a      	add	r2, r3
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	68da      	ldr	r2, [r3, #12]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	429a      	cmp	r2, r3
 800914e:	d303      	bcc.n	8009158 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	68d9      	ldr	r1, [r3, #12]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009160:	461a      	mov	r2, r3
 8009162:	6838      	ldr	r0, [r7, #0]
 8009164:	f003 f8df 	bl	800c326 <memcpy>
	}
}
 8009168:	bf00      	nop
 800916a:	3708      	adds	r7, #8
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009178:	f001 fd76 	bl	800ac68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009182:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009184:	e011      	b.n	80091aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800918a:	2b00      	cmp	r3, #0
 800918c:	d012      	beq.n	80091b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	3324      	adds	r3, #36	@ 0x24
 8009192:	4618      	mov	r0, r3
 8009194:	f000 fdde 	bl	8009d54 <xTaskRemoveFromEventList>
 8009198:	4603      	mov	r3, r0
 800919a:	2b00      	cmp	r3, #0
 800919c:	d001      	beq.n	80091a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800919e:	f000 feb9 	bl	8009f14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80091a2:	7bfb      	ldrb	r3, [r7, #15]
 80091a4:	3b01      	subs	r3, #1
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80091aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	dce9      	bgt.n	8009186 <prvUnlockQueue+0x16>
 80091b2:	e000      	b.n	80091b6 <prvUnlockQueue+0x46>
					break;
 80091b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	22ff      	movs	r2, #255	@ 0xff
 80091ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80091be:	f001 fd85 	bl	800accc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80091c2:	f001 fd51 	bl	800ac68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80091cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80091ce:	e011      	b.n	80091f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	691b      	ldr	r3, [r3, #16]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d012      	beq.n	80091fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	3310      	adds	r3, #16
 80091dc:	4618      	mov	r0, r3
 80091de:	f000 fdb9 	bl	8009d54 <xTaskRemoveFromEventList>
 80091e2:	4603      	mov	r3, r0
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d001      	beq.n	80091ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80091e8:	f000 fe94 	bl	8009f14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80091ec:	7bbb      	ldrb	r3, [r7, #14]
 80091ee:	3b01      	subs	r3, #1
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80091f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	dce9      	bgt.n	80091d0 <prvUnlockQueue+0x60>
 80091fc:	e000      	b.n	8009200 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80091fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	22ff      	movs	r2, #255	@ 0xff
 8009204:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009208:	f001 fd60 	bl	800accc <vPortExitCritical>
}
 800920c:	bf00      	nop
 800920e:	3710      	adds	r7, #16
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800921c:	f001 fd24 	bl	800ac68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009224:	2b00      	cmp	r3, #0
 8009226:	d102      	bne.n	800922e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009228:	2301      	movs	r3, #1
 800922a:	60fb      	str	r3, [r7, #12]
 800922c:	e001      	b.n	8009232 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800922e:	2300      	movs	r3, #0
 8009230:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009232:	f001 fd4b 	bl	800accc <vPortExitCritical>

	return xReturn;
 8009236:	68fb      	ldr	r3, [r7, #12]
}
 8009238:	4618      	mov	r0, r3
 800923a:	3710      	adds	r7, #16
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009248:	f001 fd0e 	bl	800ac68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009254:	429a      	cmp	r2, r3
 8009256:	d102      	bne.n	800925e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009258:	2301      	movs	r3, #1
 800925a:	60fb      	str	r3, [r7, #12]
 800925c:	e001      	b.n	8009262 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800925e:	2300      	movs	r3, #0
 8009260:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009262:	f001 fd33 	bl	800accc <vPortExitCritical>

	return xReturn;
 8009266:	68fb      	ldr	r3, [r7, #12]
}
 8009268:	4618      	mov	r0, r3
 800926a:	3710      	adds	r7, #16
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009270:	b480      	push	{r7}
 8009272:	b085      	sub	sp, #20
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800927a:	2300      	movs	r3, #0
 800927c:	60fb      	str	r3, [r7, #12]
 800927e:	e014      	b.n	80092aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009280:	4a0f      	ldr	r2, [pc, #60]	@ (80092c0 <vQueueAddToRegistry+0x50>)
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d10b      	bne.n	80092a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800928c:	490c      	ldr	r1, [pc, #48]	@ (80092c0 <vQueueAddToRegistry+0x50>)
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	683a      	ldr	r2, [r7, #0]
 8009292:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009296:	4a0a      	ldr	r2, [pc, #40]	@ (80092c0 <vQueueAddToRegistry+0x50>)
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	00db      	lsls	r3, r3, #3
 800929c:	4413      	add	r3, r2
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80092a2:	e006      	b.n	80092b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	3301      	adds	r3, #1
 80092a8:	60fb      	str	r3, [r7, #12]
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2b0f      	cmp	r3, #15
 80092ae:	d9e7      	bls.n	8009280 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80092b0:	bf00      	nop
 80092b2:	bf00      	nop
 80092b4:	3714      	adds	r7, #20
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr
 80092be:	bf00      	nop
 80092c0:	20000c5c 	.word	0x20000c5c

080092c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b086      	sub	sp, #24
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	60b9      	str	r1, [r7, #8]
 80092ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80092d4:	f001 fcc8 	bl	800ac68 <vPortEnterCritical>
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80092de:	b25b      	sxtb	r3, r3
 80092e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80092e4:	d103      	bne.n	80092ee <vQueueWaitForMessageRestricted+0x2a>
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	2200      	movs	r2, #0
 80092ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80092f4:	b25b      	sxtb	r3, r3
 80092f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80092fa:	d103      	bne.n	8009304 <vQueueWaitForMessageRestricted+0x40>
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	2200      	movs	r2, #0
 8009300:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009304:	f001 fce2 	bl	800accc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800930c:	2b00      	cmp	r3, #0
 800930e:	d106      	bne.n	800931e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	3324      	adds	r3, #36	@ 0x24
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	68b9      	ldr	r1, [r7, #8]
 8009318:	4618      	mov	r0, r3
 800931a:	f000 fcef 	bl	8009cfc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800931e:	6978      	ldr	r0, [r7, #20]
 8009320:	f7ff ff26 	bl	8009170 <prvUnlockQueue>
	}
 8009324:	bf00      	nop
 8009326:	3718      	adds	r7, #24
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800932c:	b580      	push	{r7, lr}
 800932e:	b08e      	sub	sp, #56	@ 0x38
 8009330:	af04      	add	r7, sp, #16
 8009332:	60f8      	str	r0, [r7, #12]
 8009334:	60b9      	str	r1, [r7, #8]
 8009336:	607a      	str	r2, [r7, #4]
 8009338:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800933a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800933c:	2b00      	cmp	r3, #0
 800933e:	d10b      	bne.n	8009358 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009344:	f383 8811 	msr	BASEPRI, r3
 8009348:	f3bf 8f6f 	isb	sy
 800934c:	f3bf 8f4f 	dsb	sy
 8009350:	623b      	str	r3, [r7, #32]
}
 8009352:	bf00      	nop
 8009354:	bf00      	nop
 8009356:	e7fd      	b.n	8009354 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800935a:	2b00      	cmp	r3, #0
 800935c:	d10b      	bne.n	8009376 <xTaskCreateStatic+0x4a>
	__asm volatile
 800935e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009362:	f383 8811 	msr	BASEPRI, r3
 8009366:	f3bf 8f6f 	isb	sy
 800936a:	f3bf 8f4f 	dsb	sy
 800936e:	61fb      	str	r3, [r7, #28]
}
 8009370:	bf00      	nop
 8009372:	bf00      	nop
 8009374:	e7fd      	b.n	8009372 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009376:	23b0      	movs	r3, #176	@ 0xb0
 8009378:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	2bb0      	cmp	r3, #176	@ 0xb0
 800937e:	d00b      	beq.n	8009398 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009384:	f383 8811 	msr	BASEPRI, r3
 8009388:	f3bf 8f6f 	isb	sy
 800938c:	f3bf 8f4f 	dsb	sy
 8009390:	61bb      	str	r3, [r7, #24]
}
 8009392:	bf00      	nop
 8009394:	bf00      	nop
 8009396:	e7fd      	b.n	8009394 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009398:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800939a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800939c:	2b00      	cmp	r3, #0
 800939e:	d01e      	beq.n	80093de <xTaskCreateStatic+0xb2>
 80093a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d01b      	beq.n	80093de <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80093a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093a8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80093aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80093ae:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80093b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093b2:	2202      	movs	r2, #2
 80093b4:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80093b8:	2300      	movs	r3, #0
 80093ba:	9303      	str	r3, [sp, #12]
 80093bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093be:	9302      	str	r3, [sp, #8]
 80093c0:	f107 0314 	add.w	r3, r7, #20
 80093c4:	9301      	str	r3, [sp, #4]
 80093c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c8:	9300      	str	r3, [sp, #0]
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	68b9      	ldr	r1, [r7, #8]
 80093d0:	68f8      	ldr	r0, [r7, #12]
 80093d2:	f000 f851 	bl	8009478 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80093d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80093d8:	f000 f8fc 	bl	80095d4 <prvAddNewTaskToReadyList>
 80093dc:	e001      	b.n	80093e2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80093de:	2300      	movs	r3, #0
 80093e0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80093e2:	697b      	ldr	r3, [r7, #20]
	}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3728      	adds	r7, #40	@ 0x28
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b08c      	sub	sp, #48	@ 0x30
 80093f0:	af04      	add	r7, sp, #16
 80093f2:	60f8      	str	r0, [r7, #12]
 80093f4:	60b9      	str	r1, [r7, #8]
 80093f6:	603b      	str	r3, [r7, #0]
 80093f8:	4613      	mov	r3, r2
 80093fa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80093fc:	88fb      	ldrh	r3, [r7, #6]
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	4618      	mov	r0, r3
 8009402:	f001 fe37 	bl	800b074 <pvPortMalloc>
 8009406:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d00e      	beq.n	800942c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800940e:	20b0      	movs	r0, #176	@ 0xb0
 8009410:	f001 fe30 	bl	800b074 <pvPortMalloc>
 8009414:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d003      	beq.n	8009424 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	697a      	ldr	r2, [r7, #20]
 8009420:	631a      	str	r2, [r3, #48]	@ 0x30
 8009422:	e005      	b.n	8009430 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009424:	6978      	ldr	r0, [r7, #20]
 8009426:	f001 fef3 	bl	800b210 <vPortFree>
 800942a:	e001      	b.n	8009430 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800942c:	2300      	movs	r3, #0
 800942e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009430:	69fb      	ldr	r3, [r7, #28]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d017      	beq.n	8009466 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009436:	69fb      	ldr	r3, [r7, #28]
 8009438:	2200      	movs	r2, #0
 800943a:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800943e:	88fa      	ldrh	r2, [r7, #6]
 8009440:	2300      	movs	r3, #0
 8009442:	9303      	str	r3, [sp, #12]
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	9302      	str	r3, [sp, #8]
 8009448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800944a:	9301      	str	r3, [sp, #4]
 800944c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800944e:	9300      	str	r3, [sp, #0]
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	68b9      	ldr	r1, [r7, #8]
 8009454:	68f8      	ldr	r0, [r7, #12]
 8009456:	f000 f80f 	bl	8009478 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800945a:	69f8      	ldr	r0, [r7, #28]
 800945c:	f000 f8ba 	bl	80095d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009460:	2301      	movs	r3, #1
 8009462:	61bb      	str	r3, [r7, #24]
 8009464:	e002      	b.n	800946c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009466:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800946a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800946c:	69bb      	ldr	r3, [r7, #24]
	}
 800946e:	4618      	mov	r0, r3
 8009470:	3720      	adds	r7, #32
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
	...

08009478 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b088      	sub	sp, #32
 800947c:	af00      	add	r7, sp, #0
 800947e:	60f8      	str	r0, [r7, #12]
 8009480:	60b9      	str	r1, [r7, #8]
 8009482:	607a      	str	r2, [r7, #4]
 8009484:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009488:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	461a      	mov	r2, r3
 8009490:	21a5      	movs	r1, #165	@ 0xa5
 8009492:	f002 fe73 	bl	800c17c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009498:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80094a0:	3b01      	subs	r3, #1
 80094a2:	009b      	lsls	r3, r3, #2
 80094a4:	4413      	add	r3, r2
 80094a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80094a8:	69bb      	ldr	r3, [r7, #24]
 80094aa:	f023 0307 	bic.w	r3, r3, #7
 80094ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80094b0:	69bb      	ldr	r3, [r7, #24]
 80094b2:	f003 0307 	and.w	r3, r3, #7
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d00b      	beq.n	80094d2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80094ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094be:	f383 8811 	msr	BASEPRI, r3
 80094c2:	f3bf 8f6f 	isb	sy
 80094c6:	f3bf 8f4f 	dsb	sy
 80094ca:	617b      	str	r3, [r7, #20]
}
 80094cc:	bf00      	nop
 80094ce:	bf00      	nop
 80094d0:	e7fd      	b.n	80094ce <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 80094d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d4:	69ba      	ldr	r2, [r7, #24]
 80094d6:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d01f      	beq.n	800951e <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80094de:	2300      	movs	r3, #0
 80094e0:	61fb      	str	r3, [r7, #28]
 80094e2:	e012      	b.n	800950a <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80094e4:	68ba      	ldr	r2, [r7, #8]
 80094e6:	69fb      	ldr	r3, [r7, #28]
 80094e8:	4413      	add	r3, r2
 80094ea:	7819      	ldrb	r1, [r3, #0]
 80094ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094ee:	69fb      	ldr	r3, [r7, #28]
 80094f0:	4413      	add	r3, r2
 80094f2:	3334      	adds	r3, #52	@ 0x34
 80094f4:	460a      	mov	r2, r1
 80094f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80094f8:	68ba      	ldr	r2, [r7, #8]
 80094fa:	69fb      	ldr	r3, [r7, #28]
 80094fc:	4413      	add	r3, r2
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d006      	beq.n	8009512 <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009504:	69fb      	ldr	r3, [r7, #28]
 8009506:	3301      	adds	r3, #1
 8009508:	61fb      	str	r3, [r7, #28]
 800950a:	69fb      	ldr	r3, [r7, #28]
 800950c:	2b0f      	cmp	r3, #15
 800950e:	d9e9      	bls.n	80094e4 <prvInitialiseNewTask+0x6c>
 8009510:	e000      	b.n	8009514 <prvInitialiseNewTask+0x9c>
			{
				break;
 8009512:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009516:	2200      	movs	r2, #0
 8009518:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800951c:	e003      	b.n	8009526 <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800951e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009520:	2200      	movs	r2, #0
 8009522:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009528:	2b37      	cmp	r3, #55	@ 0x37
 800952a:	d901      	bls.n	8009530 <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800952c:	2337      	movs	r3, #55	@ 0x37
 800952e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009532:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009534:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009538:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800953a:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800953c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800953e:	2200      	movs	r2, #0
 8009540:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009544:	3304      	adds	r3, #4
 8009546:	4618      	mov	r0, r3
 8009548:	f7ff f866 	bl	8008618 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800954c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800954e:	3318      	adds	r3, #24
 8009550:	4618      	mov	r0, r3
 8009552:	f7ff f861 	bl	8008618 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009558:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800955a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800955c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800955e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009564:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009568:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800956a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800956c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800956e:	2200      	movs	r2, #0
 8009570:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009574:	2200      	movs	r2, #0
 8009576:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800957a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800957c:	2200      	movs	r2, #0
 800957e:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009584:	335c      	adds	r3, #92	@ 0x5c
 8009586:	224c      	movs	r2, #76	@ 0x4c
 8009588:	2100      	movs	r1, #0
 800958a:	4618      	mov	r0, r3
 800958c:	f002 fdf6 	bl	800c17c <memset>
 8009590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009592:	4a0d      	ldr	r2, [pc, #52]	@ (80095c8 <prvInitialiseNewTask+0x150>)
 8009594:	661a      	str	r2, [r3, #96]	@ 0x60
 8009596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009598:	4a0c      	ldr	r2, [pc, #48]	@ (80095cc <prvInitialiseNewTask+0x154>)
 800959a:	665a      	str	r2, [r3, #100]	@ 0x64
 800959c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800959e:	4a0c      	ldr	r2, [pc, #48]	@ (80095d0 <prvInitialiseNewTask+0x158>)
 80095a0:	669a      	str	r2, [r3, #104]	@ 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80095a2:	683a      	ldr	r2, [r7, #0]
 80095a4:	68f9      	ldr	r1, [r7, #12]
 80095a6:	69b8      	ldr	r0, [r7, #24]
 80095a8:	f001 fa2e 	bl	800aa08 <pxPortInitialiseStack>
 80095ac:	4602      	mov	r2, r0
 80095ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80095b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d002      	beq.n	80095be <prvInitialiseNewTask+0x146>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80095b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095be:	bf00      	nop
 80095c0:	3720      	adds	r7, #32
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
 80095c6:	bf00      	nop
 80095c8:	20004f44 	.word	0x20004f44
 80095cc:	20004fac 	.word	0x20004fac
 80095d0:	20005014 	.word	0x20005014

080095d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b082      	sub	sp, #8
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80095dc:	f001 fb44 	bl	800ac68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80095e0:	4b2d      	ldr	r3, [pc, #180]	@ (8009698 <prvAddNewTaskToReadyList+0xc4>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	3301      	adds	r3, #1
 80095e6:	4a2c      	ldr	r2, [pc, #176]	@ (8009698 <prvAddNewTaskToReadyList+0xc4>)
 80095e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80095ea:	4b2c      	ldr	r3, [pc, #176]	@ (800969c <prvAddNewTaskToReadyList+0xc8>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d109      	bne.n	8009606 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80095f2:	4a2a      	ldr	r2, [pc, #168]	@ (800969c <prvAddNewTaskToReadyList+0xc8>)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80095f8:	4b27      	ldr	r3, [pc, #156]	@ (8009698 <prvAddNewTaskToReadyList+0xc4>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	d110      	bne.n	8009622 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009600:	f000 fd02 	bl	800a008 <prvInitialiseTaskLists>
 8009604:	e00d      	b.n	8009622 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009606:	4b26      	ldr	r3, [pc, #152]	@ (80096a0 <prvAddNewTaskToReadyList+0xcc>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d109      	bne.n	8009622 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800960e:	4b23      	ldr	r3, [pc, #140]	@ (800969c <prvAddNewTaskToReadyList+0xc8>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009618:	429a      	cmp	r2, r3
 800961a:	d802      	bhi.n	8009622 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800961c:	4a1f      	ldr	r2, [pc, #124]	@ (800969c <prvAddNewTaskToReadyList+0xc8>)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009622:	4b20      	ldr	r3, [pc, #128]	@ (80096a4 <prvAddNewTaskToReadyList+0xd0>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	3301      	adds	r3, #1
 8009628:	4a1e      	ldr	r2, [pc, #120]	@ (80096a4 <prvAddNewTaskToReadyList+0xd0>)
 800962a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800962c:	4b1d      	ldr	r3, [pc, #116]	@ (80096a4 <prvAddNewTaskToReadyList+0xd0>)
 800962e:	681a      	ldr	r2, [r3, #0]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009638:	4b1b      	ldr	r3, [pc, #108]	@ (80096a8 <prvAddNewTaskToReadyList+0xd4>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	429a      	cmp	r2, r3
 800963e:	d903      	bls.n	8009648 <prvAddNewTaskToReadyList+0x74>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009644:	4a18      	ldr	r2, [pc, #96]	@ (80096a8 <prvAddNewTaskToReadyList+0xd4>)
 8009646:	6013      	str	r3, [r2, #0]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800964c:	4613      	mov	r3, r2
 800964e:	009b      	lsls	r3, r3, #2
 8009650:	4413      	add	r3, r2
 8009652:	009b      	lsls	r3, r3, #2
 8009654:	4a15      	ldr	r2, [pc, #84]	@ (80096ac <prvAddNewTaskToReadyList+0xd8>)
 8009656:	441a      	add	r2, r3
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	3304      	adds	r3, #4
 800965c:	4619      	mov	r1, r3
 800965e:	4610      	mov	r0, r2
 8009660:	f7fe ffe7 	bl	8008632 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009664:	f001 fb32 	bl	800accc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009668:	4b0d      	ldr	r3, [pc, #52]	@ (80096a0 <prvAddNewTaskToReadyList+0xcc>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d00e      	beq.n	800968e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009670:	4b0a      	ldr	r3, [pc, #40]	@ (800969c <prvAddNewTaskToReadyList+0xc8>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800967a:	429a      	cmp	r2, r3
 800967c:	d207      	bcs.n	800968e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800967e:	4b0c      	ldr	r3, [pc, #48]	@ (80096b0 <prvAddNewTaskToReadyList+0xdc>)
 8009680:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009684:	601a      	str	r2, [r3, #0]
 8009686:	f3bf 8f4f 	dsb	sy
 800968a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800968e:	bf00      	nop
 8009690:	3708      	adds	r7, #8
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	200011b0 	.word	0x200011b0
 800969c:	20000cdc 	.word	0x20000cdc
 80096a0:	200011bc 	.word	0x200011bc
 80096a4:	200011cc 	.word	0x200011cc
 80096a8:	200011b8 	.word	0x200011b8
 80096ac:	20000ce0 	.word	0x20000ce0
 80096b0:	e000ed04 	.word	0xe000ed04

080096b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80096bc:	2300      	movs	r3, #0
 80096be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d018      	beq.n	80096f8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80096c6:	4b14      	ldr	r3, [pc, #80]	@ (8009718 <vTaskDelay+0x64>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d00b      	beq.n	80096e6 <vTaskDelay+0x32>
	__asm volatile
 80096ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096d2:	f383 8811 	msr	BASEPRI, r3
 80096d6:	f3bf 8f6f 	isb	sy
 80096da:	f3bf 8f4f 	dsb	sy
 80096de:	60bb      	str	r3, [r7, #8]
}
 80096e0:	bf00      	nop
 80096e2:	bf00      	nop
 80096e4:	e7fd      	b.n	80096e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80096e6:	f000 f88d 	bl	8009804 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80096ea:	2100      	movs	r1, #0
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 fddd 	bl	800a2ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80096f2:	f000 f8cd 	bl	8009890 <xTaskResumeAll>
 80096f6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d107      	bne.n	800970e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80096fe:	4b07      	ldr	r3, [pc, #28]	@ (800971c <vTaskDelay+0x68>)
 8009700:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009704:	601a      	str	r2, [r3, #0]
 8009706:	f3bf 8f4f 	dsb	sy
 800970a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800970e:	bf00      	nop
 8009710:	3710      	adds	r7, #16
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop
 8009718:	200011d8 	.word	0x200011d8
 800971c:	e000ed04 	.word	0xe000ed04

08009720 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b08a      	sub	sp, #40	@ 0x28
 8009724:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009726:	2300      	movs	r3, #0
 8009728:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800972a:	2300      	movs	r3, #0
 800972c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800972e:	463a      	mov	r2, r7
 8009730:	1d39      	adds	r1, r7, #4
 8009732:	f107 0308 	add.w	r3, r7, #8
 8009736:	4618      	mov	r0, r3
 8009738:	f7fe ff1a 	bl	8008570 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800973c:	6839      	ldr	r1, [r7, #0]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	68ba      	ldr	r2, [r7, #8]
 8009742:	9202      	str	r2, [sp, #8]
 8009744:	9301      	str	r3, [sp, #4]
 8009746:	2300      	movs	r3, #0
 8009748:	9300      	str	r3, [sp, #0]
 800974a:	2300      	movs	r3, #0
 800974c:	460a      	mov	r2, r1
 800974e:	4925      	ldr	r1, [pc, #148]	@ (80097e4 <vTaskStartScheduler+0xc4>)
 8009750:	4825      	ldr	r0, [pc, #148]	@ (80097e8 <vTaskStartScheduler+0xc8>)
 8009752:	f7ff fdeb 	bl	800932c <xTaskCreateStatic>
 8009756:	4603      	mov	r3, r0
 8009758:	4a24      	ldr	r2, [pc, #144]	@ (80097ec <vTaskStartScheduler+0xcc>)
 800975a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800975c:	4b23      	ldr	r3, [pc, #140]	@ (80097ec <vTaskStartScheduler+0xcc>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d002      	beq.n	800976a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009764:	2301      	movs	r3, #1
 8009766:	617b      	str	r3, [r7, #20]
 8009768:	e001      	b.n	800976e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800976a:	2300      	movs	r3, #0
 800976c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	2b01      	cmp	r3, #1
 8009772:	d102      	bne.n	800977a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009774:	f000 fdee 	bl	800a354 <xTimerCreateTimerTask>
 8009778:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	2b01      	cmp	r3, #1
 800977e:	d11d      	bne.n	80097bc <vTaskStartScheduler+0x9c>
	__asm volatile
 8009780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009784:	f383 8811 	msr	BASEPRI, r3
 8009788:	f3bf 8f6f 	isb	sy
 800978c:	f3bf 8f4f 	dsb	sy
 8009790:	613b      	str	r3, [r7, #16]
}
 8009792:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009794:	4b16      	ldr	r3, [pc, #88]	@ (80097f0 <vTaskStartScheduler+0xd0>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	335c      	adds	r3, #92	@ 0x5c
 800979a:	4a16      	ldr	r2, [pc, #88]	@ (80097f4 <vTaskStartScheduler+0xd4>)
 800979c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800979e:	4b16      	ldr	r3, [pc, #88]	@ (80097f8 <vTaskStartScheduler+0xd8>)
 80097a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80097a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80097a6:	4b15      	ldr	r3, [pc, #84]	@ (80097fc <vTaskStartScheduler+0xdc>)
 80097a8:	2201      	movs	r2, #1
 80097aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80097ac:	4b14      	ldr	r3, [pc, #80]	@ (8009800 <vTaskStartScheduler+0xe0>)
 80097ae:	2200      	movs	r2, #0
 80097b0:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80097b2:	f7f8 fdb9 	bl	8002328 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80097b6:	f001 f9b3 	bl	800ab20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80097ba:	e00f      	b.n	80097dc <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80097c2:	d10b      	bne.n	80097dc <vTaskStartScheduler+0xbc>
	__asm volatile
 80097c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097c8:	f383 8811 	msr	BASEPRI, r3
 80097cc:	f3bf 8f6f 	isb	sy
 80097d0:	f3bf 8f4f 	dsb	sy
 80097d4:	60fb      	str	r3, [r7, #12]
}
 80097d6:	bf00      	nop
 80097d8:	bf00      	nop
 80097da:	e7fd      	b.n	80097d8 <vTaskStartScheduler+0xb8>
}
 80097dc:	bf00      	nop
 80097de:	3718      	adds	r7, #24
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	0800e668 	.word	0x0800e668
 80097e8:	08009f2d 	.word	0x08009f2d
 80097ec:	200011d4 	.word	0x200011d4
 80097f0:	20000cdc 	.word	0x20000cdc
 80097f4:	2000003c 	.word	0x2000003c
 80097f8:	200011d0 	.word	0x200011d0
 80097fc:	200011bc 	.word	0x200011bc
 8009800:	200011b4 	.word	0x200011b4

08009804 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009804:	b480      	push	{r7}
 8009806:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009808:	4b04      	ldr	r3, [pc, #16]	@ (800981c <vTaskSuspendAll+0x18>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	3301      	adds	r3, #1
 800980e:	4a03      	ldr	r2, [pc, #12]	@ (800981c <vTaskSuspendAll+0x18>)
 8009810:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009812:	bf00      	nop
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr
 800981c:	200011d8 	.word	0x200011d8

08009820 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 8009820:	b480      	push	{r7}
 8009822:	b083      	sub	sp, #12
 8009824:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8009826:	2300      	movs	r3, #0
 8009828:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800982a:	4b14      	ldr	r3, [pc, #80]	@ (800987c <prvGetExpectedIdleTime+0x5c>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d001      	beq.n	8009836 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 8009832:	2301      	movs	r3, #1
 8009834:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8009836:	4b12      	ldr	r3, [pc, #72]	@ (8009880 <prvGetExpectedIdleTime+0x60>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800983c:	2b00      	cmp	r3, #0
 800983e:	d002      	beq.n	8009846 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 8009840:	2300      	movs	r3, #0
 8009842:	607b      	str	r3, [r7, #4]
 8009844:	e012      	b.n	800986c <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8009846:	4b0f      	ldr	r3, [pc, #60]	@ (8009884 <prvGetExpectedIdleTime+0x64>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	2b01      	cmp	r3, #1
 800984c:	d902      	bls.n	8009854 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800984e:	2300      	movs	r3, #0
 8009850:	607b      	str	r3, [r7, #4]
 8009852:	e00b      	b.n	800986c <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d002      	beq.n	8009860 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800985a:	2300      	movs	r3, #0
 800985c:	607b      	str	r3, [r7, #4]
 800985e:	e005      	b.n	800986c <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8009860:	4b09      	ldr	r3, [pc, #36]	@ (8009888 <prvGetExpectedIdleTime+0x68>)
 8009862:	681a      	ldr	r2, [r3, #0]
 8009864:	4b09      	ldr	r3, [pc, #36]	@ (800988c <prvGetExpectedIdleTime+0x6c>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	1ad3      	subs	r3, r2, r3
 800986a:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800986c:	687b      	ldr	r3, [r7, #4]
	}
 800986e:	4618      	mov	r0, r3
 8009870:	370c      	adds	r7, #12
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr
 800987a:	bf00      	nop
 800987c:	200011b8 	.word	0x200011b8
 8009880:	20000cdc 	.word	0x20000cdc
 8009884:	20000ce0 	.word	0x20000ce0
 8009888:	200011d0 	.word	0x200011d0
 800988c:	200011b4 	.word	0x200011b4

08009890 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009896:	2300      	movs	r3, #0
 8009898:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800989a:	2300      	movs	r3, #0
 800989c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800989e:	4b42      	ldr	r3, [pc, #264]	@ (80099a8 <xTaskResumeAll+0x118>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d10b      	bne.n	80098be <xTaskResumeAll+0x2e>
	__asm volatile
 80098a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098aa:	f383 8811 	msr	BASEPRI, r3
 80098ae:	f3bf 8f6f 	isb	sy
 80098b2:	f3bf 8f4f 	dsb	sy
 80098b6:	603b      	str	r3, [r7, #0]
}
 80098b8:	bf00      	nop
 80098ba:	bf00      	nop
 80098bc:	e7fd      	b.n	80098ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80098be:	f001 f9d3 	bl	800ac68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80098c2:	4b39      	ldr	r3, [pc, #228]	@ (80099a8 <xTaskResumeAll+0x118>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	3b01      	subs	r3, #1
 80098c8:	4a37      	ldr	r2, [pc, #220]	@ (80099a8 <xTaskResumeAll+0x118>)
 80098ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098cc:	4b36      	ldr	r3, [pc, #216]	@ (80099a8 <xTaskResumeAll+0x118>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d162      	bne.n	800999a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80098d4:	4b35      	ldr	r3, [pc, #212]	@ (80099ac <xTaskResumeAll+0x11c>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d05e      	beq.n	800999a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80098dc:	e02f      	b.n	800993e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098de:	4b34      	ldr	r3, [pc, #208]	@ (80099b0 <xTaskResumeAll+0x120>)
 80098e0:	68db      	ldr	r3, [r3, #12]
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	3318      	adds	r3, #24
 80098ea:	4618      	mov	r0, r3
 80098ec:	f7fe fefe 	bl	80086ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	3304      	adds	r3, #4
 80098f4:	4618      	mov	r0, r3
 80098f6:	f7fe fef9 	bl	80086ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098fe:	4b2d      	ldr	r3, [pc, #180]	@ (80099b4 <xTaskResumeAll+0x124>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	429a      	cmp	r2, r3
 8009904:	d903      	bls.n	800990e <xTaskResumeAll+0x7e>
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800990a:	4a2a      	ldr	r2, [pc, #168]	@ (80099b4 <xTaskResumeAll+0x124>)
 800990c:	6013      	str	r3, [r2, #0]
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009912:	4613      	mov	r3, r2
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	4413      	add	r3, r2
 8009918:	009b      	lsls	r3, r3, #2
 800991a:	4a27      	ldr	r2, [pc, #156]	@ (80099b8 <xTaskResumeAll+0x128>)
 800991c:	441a      	add	r2, r3
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	3304      	adds	r3, #4
 8009922:	4619      	mov	r1, r3
 8009924:	4610      	mov	r0, r2
 8009926:	f7fe fe84 	bl	8008632 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800992e:	4b23      	ldr	r3, [pc, #140]	@ (80099bc <xTaskResumeAll+0x12c>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009934:	429a      	cmp	r2, r3
 8009936:	d302      	bcc.n	800993e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009938:	4b21      	ldr	r3, [pc, #132]	@ (80099c0 <xTaskResumeAll+0x130>)
 800993a:	2201      	movs	r2, #1
 800993c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800993e:	4b1c      	ldr	r3, [pc, #112]	@ (80099b0 <xTaskResumeAll+0x120>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d1cb      	bne.n	80098de <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d001      	beq.n	8009950 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800994c:	f000 fc00 	bl	800a150 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009950:	4b1c      	ldr	r3, [pc, #112]	@ (80099c4 <xTaskResumeAll+0x134>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d010      	beq.n	800997e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800995c:	f000 f86e 	bl	8009a3c <xTaskIncrementTick>
 8009960:	4603      	mov	r3, r0
 8009962:	2b00      	cmp	r3, #0
 8009964:	d002      	beq.n	800996c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009966:	4b16      	ldr	r3, [pc, #88]	@ (80099c0 <xTaskResumeAll+0x130>)
 8009968:	2201      	movs	r2, #1
 800996a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	3b01      	subs	r3, #1
 8009970:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d1f1      	bne.n	800995c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009978:	4b12      	ldr	r3, [pc, #72]	@ (80099c4 <xTaskResumeAll+0x134>)
 800997a:	2200      	movs	r2, #0
 800997c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800997e:	4b10      	ldr	r3, [pc, #64]	@ (80099c0 <xTaskResumeAll+0x130>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d009      	beq.n	800999a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009986:	2301      	movs	r3, #1
 8009988:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800998a:	4b0f      	ldr	r3, [pc, #60]	@ (80099c8 <xTaskResumeAll+0x138>)
 800998c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009990:	601a      	str	r2, [r3, #0]
 8009992:	f3bf 8f4f 	dsb	sy
 8009996:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800999a:	f001 f997 	bl	800accc <vPortExitCritical>

	return xAlreadyYielded;
 800999e:	68bb      	ldr	r3, [r7, #8]
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3710      	adds	r7, #16
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}
 80099a8:	200011d8 	.word	0x200011d8
 80099ac:	200011b0 	.word	0x200011b0
 80099b0:	20001170 	.word	0x20001170
 80099b4:	200011b8 	.word	0x200011b8
 80099b8:	20000ce0 	.word	0x20000ce0
 80099bc:	20000cdc 	.word	0x20000cdc
 80099c0:	200011c4 	.word	0x200011c4
 80099c4:	200011c0 	.word	0x200011c0
 80099c8:	e000ed04 	.word	0xe000ed04

080099cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80099cc:	b480      	push	{r7}
 80099ce:	b083      	sub	sp, #12
 80099d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80099d2:	4b05      	ldr	r3, [pc, #20]	@ (80099e8 <xTaskGetTickCount+0x1c>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80099d8:	687b      	ldr	r3, [r7, #4]
}
 80099da:	4618      	mov	r0, r3
 80099dc:	370c      	adds	r7, #12
 80099de:	46bd      	mov	sp, r7
 80099e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e4:	4770      	bx	lr
 80099e6:	bf00      	nop
 80099e8:	200011b4 	.word	0x200011b4

080099ec <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 80099ec:	b480      	push	{r7}
 80099ee:	b085      	sub	sp, #20
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 80099f4:	4b0f      	ldr	r3, [pc, #60]	@ (8009a34 <vTaskStepTick+0x48>)
 80099f6:	681a      	ldr	r2, [r3, #0]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	441a      	add	r2, r3
 80099fc:	4b0e      	ldr	r3, [pc, #56]	@ (8009a38 <vTaskStepTick+0x4c>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d90b      	bls.n	8009a1c <vTaskStepTick+0x30>
	__asm volatile
 8009a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a08:	f383 8811 	msr	BASEPRI, r3
 8009a0c:	f3bf 8f6f 	isb	sy
 8009a10:	f3bf 8f4f 	dsb	sy
 8009a14:	60fb      	str	r3, [r7, #12]
}
 8009a16:	bf00      	nop
 8009a18:	bf00      	nop
 8009a1a:	e7fd      	b.n	8009a18 <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 8009a1c:	4b05      	ldr	r3, [pc, #20]	@ (8009a34 <vTaskStepTick+0x48>)
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	4413      	add	r3, r2
 8009a24:	4a03      	ldr	r2, [pc, #12]	@ (8009a34 <vTaskStepTick+0x48>)
 8009a26:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 8009a28:	bf00      	nop
 8009a2a:	3714      	adds	r7, #20
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr
 8009a34:	200011b4 	.word	0x200011b4
 8009a38:	200011d0 	.word	0x200011d0

08009a3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b086      	sub	sp, #24
 8009a40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009a42:	2300      	movs	r3, #0
 8009a44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a46:	4b4f      	ldr	r3, [pc, #316]	@ (8009b84 <xTaskIncrementTick+0x148>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	f040 8090 	bne.w	8009b70 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009a50:	4b4d      	ldr	r3, [pc, #308]	@ (8009b88 <xTaskIncrementTick+0x14c>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	3301      	adds	r3, #1
 8009a56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009a58:	4a4b      	ldr	r2, [pc, #300]	@ (8009b88 <xTaskIncrementTick+0x14c>)
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d121      	bne.n	8009aa8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009a64:	4b49      	ldr	r3, [pc, #292]	@ (8009b8c <xTaskIncrementTick+0x150>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d00b      	beq.n	8009a86 <xTaskIncrementTick+0x4a>
	__asm volatile
 8009a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a72:	f383 8811 	msr	BASEPRI, r3
 8009a76:	f3bf 8f6f 	isb	sy
 8009a7a:	f3bf 8f4f 	dsb	sy
 8009a7e:	603b      	str	r3, [r7, #0]
}
 8009a80:	bf00      	nop
 8009a82:	bf00      	nop
 8009a84:	e7fd      	b.n	8009a82 <xTaskIncrementTick+0x46>
 8009a86:	4b41      	ldr	r3, [pc, #260]	@ (8009b8c <xTaskIncrementTick+0x150>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	60fb      	str	r3, [r7, #12]
 8009a8c:	4b40      	ldr	r3, [pc, #256]	@ (8009b90 <xTaskIncrementTick+0x154>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a3e      	ldr	r2, [pc, #248]	@ (8009b8c <xTaskIncrementTick+0x150>)
 8009a92:	6013      	str	r3, [r2, #0]
 8009a94:	4a3e      	ldr	r2, [pc, #248]	@ (8009b90 <xTaskIncrementTick+0x154>)
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	6013      	str	r3, [r2, #0]
 8009a9a:	4b3e      	ldr	r3, [pc, #248]	@ (8009b94 <xTaskIncrementTick+0x158>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	4a3c      	ldr	r2, [pc, #240]	@ (8009b94 <xTaskIncrementTick+0x158>)
 8009aa2:	6013      	str	r3, [r2, #0]
 8009aa4:	f000 fb54 	bl	800a150 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009aa8:	4b3b      	ldr	r3, [pc, #236]	@ (8009b98 <xTaskIncrementTick+0x15c>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	693a      	ldr	r2, [r7, #16]
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d349      	bcc.n	8009b46 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ab2:	4b36      	ldr	r3, [pc, #216]	@ (8009b8c <xTaskIncrementTick+0x150>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d104      	bne.n	8009ac6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009abc:	4b36      	ldr	r3, [pc, #216]	@ (8009b98 <xTaskIncrementTick+0x15c>)
 8009abe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009ac2:	601a      	str	r2, [r3, #0]
					break;
 8009ac4:	e03f      	b.n	8009b46 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ac6:	4b31      	ldr	r3, [pc, #196]	@ (8009b8c <xTaskIncrementTick+0x150>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	68db      	ldr	r3, [r3, #12]
 8009acc:	68db      	ldr	r3, [r3, #12]
 8009ace:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009ad6:	693a      	ldr	r2, [r7, #16]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d203      	bcs.n	8009ae6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009ade:	4a2e      	ldr	r2, [pc, #184]	@ (8009b98 <xTaskIncrementTick+0x15c>)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009ae4:	e02f      	b.n	8009b46 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	3304      	adds	r3, #4
 8009aea:	4618      	mov	r0, r3
 8009aec:	f7fe fdfe 	bl	80086ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d004      	beq.n	8009b02 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	3318      	adds	r3, #24
 8009afc:	4618      	mov	r0, r3
 8009afe:	f7fe fdf5 	bl	80086ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b06:	4b25      	ldr	r3, [pc, #148]	@ (8009b9c <xTaskIncrementTick+0x160>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d903      	bls.n	8009b16 <xTaskIncrementTick+0xda>
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b12:	4a22      	ldr	r2, [pc, #136]	@ (8009b9c <xTaskIncrementTick+0x160>)
 8009b14:	6013      	str	r3, [r2, #0]
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b1a:	4613      	mov	r3, r2
 8009b1c:	009b      	lsls	r3, r3, #2
 8009b1e:	4413      	add	r3, r2
 8009b20:	009b      	lsls	r3, r3, #2
 8009b22:	4a1f      	ldr	r2, [pc, #124]	@ (8009ba0 <xTaskIncrementTick+0x164>)
 8009b24:	441a      	add	r2, r3
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	3304      	adds	r3, #4
 8009b2a:	4619      	mov	r1, r3
 8009b2c:	4610      	mov	r0, r2
 8009b2e:	f7fe fd80 	bl	8008632 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b36:	4b1b      	ldr	r3, [pc, #108]	@ (8009ba4 <xTaskIncrementTick+0x168>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	d3b8      	bcc.n	8009ab2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009b40:	2301      	movs	r3, #1
 8009b42:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b44:	e7b5      	b.n	8009ab2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009b46:	4b17      	ldr	r3, [pc, #92]	@ (8009ba4 <xTaskIncrementTick+0x168>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b4c:	4914      	ldr	r1, [pc, #80]	@ (8009ba0 <xTaskIncrementTick+0x164>)
 8009b4e:	4613      	mov	r3, r2
 8009b50:	009b      	lsls	r3, r3, #2
 8009b52:	4413      	add	r3, r2
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	440b      	add	r3, r1
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	2b01      	cmp	r3, #1
 8009b5c:	d901      	bls.n	8009b62 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009b62:	4b11      	ldr	r3, [pc, #68]	@ (8009ba8 <xTaskIncrementTick+0x16c>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d007      	beq.n	8009b7a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	617b      	str	r3, [r7, #20]
 8009b6e:	e004      	b.n	8009b7a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009b70:	4b0e      	ldr	r3, [pc, #56]	@ (8009bac <xTaskIncrementTick+0x170>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	3301      	adds	r3, #1
 8009b76:	4a0d      	ldr	r2, [pc, #52]	@ (8009bac <xTaskIncrementTick+0x170>)
 8009b78:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009b7a:	697b      	ldr	r3, [r7, #20]
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3718      	adds	r7, #24
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}
 8009b84:	200011d8 	.word	0x200011d8
 8009b88:	200011b4 	.word	0x200011b4
 8009b8c:	20001168 	.word	0x20001168
 8009b90:	2000116c 	.word	0x2000116c
 8009b94:	200011c8 	.word	0x200011c8
 8009b98:	200011d0 	.word	0x200011d0
 8009b9c:	200011b8 	.word	0x200011b8
 8009ba0:	20000ce0 	.word	0x20000ce0
 8009ba4:	20000cdc 	.word	0x20000cdc
 8009ba8:	200011c4 	.word	0x200011c4
 8009bac:	200011c0 	.word	0x200011c0

08009bb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009bb6:	4b36      	ldr	r3, [pc, #216]	@ (8009c90 <vTaskSwitchContext+0xe0>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d003      	beq.n	8009bc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009bbe:	4b35      	ldr	r3, [pc, #212]	@ (8009c94 <vTaskSwitchContext+0xe4>)
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009bc4:	e060      	b.n	8009c88 <vTaskSwitchContext+0xd8>
		xYieldPending = pdFALSE;
 8009bc6:	4b33      	ldr	r3, [pc, #204]	@ (8009c94 <vTaskSwitchContext+0xe4>)
 8009bc8:	2200      	movs	r2, #0
 8009bca:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8009bcc:	f7f8 fbb6 	bl	800233c <getRunTimeCounterValue>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	4a31      	ldr	r2, [pc, #196]	@ (8009c98 <vTaskSwitchContext+0xe8>)
 8009bd4:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8009bd6:	4b30      	ldr	r3, [pc, #192]	@ (8009c98 <vTaskSwitchContext+0xe8>)
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	4b30      	ldr	r3, [pc, #192]	@ (8009c9c <vTaskSwitchContext+0xec>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d909      	bls.n	8009bf6 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8009be2:	4b2f      	ldr	r3, [pc, #188]	@ (8009ca0 <vTaskSwitchContext+0xf0>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8009be8:	4a2b      	ldr	r2, [pc, #172]	@ (8009c98 <vTaskSwitchContext+0xe8>)
 8009bea:	6810      	ldr	r0, [r2, #0]
 8009bec:	4a2b      	ldr	r2, [pc, #172]	@ (8009c9c <vTaskSwitchContext+0xec>)
 8009bee:	6812      	ldr	r2, [r2, #0]
 8009bf0:	1a82      	subs	r2, r0, r2
 8009bf2:	440a      	add	r2, r1
 8009bf4:	659a      	str	r2, [r3, #88]	@ 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8009bf6:	4b28      	ldr	r3, [pc, #160]	@ (8009c98 <vTaskSwitchContext+0xe8>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a28      	ldr	r2, [pc, #160]	@ (8009c9c <vTaskSwitchContext+0xec>)
 8009bfc:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bfe:	4b29      	ldr	r3, [pc, #164]	@ (8009ca4 <vTaskSwitchContext+0xf4>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	60fb      	str	r3, [r7, #12]
 8009c04:	e011      	b.n	8009c2a <vTaskSwitchContext+0x7a>
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d10b      	bne.n	8009c24 <vTaskSwitchContext+0x74>
	__asm volatile
 8009c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c10:	f383 8811 	msr	BASEPRI, r3
 8009c14:	f3bf 8f6f 	isb	sy
 8009c18:	f3bf 8f4f 	dsb	sy
 8009c1c:	607b      	str	r3, [r7, #4]
}
 8009c1e:	bf00      	nop
 8009c20:	bf00      	nop
 8009c22:	e7fd      	b.n	8009c20 <vTaskSwitchContext+0x70>
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	3b01      	subs	r3, #1
 8009c28:	60fb      	str	r3, [r7, #12]
 8009c2a:	491f      	ldr	r1, [pc, #124]	@ (8009ca8 <vTaskSwitchContext+0xf8>)
 8009c2c:	68fa      	ldr	r2, [r7, #12]
 8009c2e:	4613      	mov	r3, r2
 8009c30:	009b      	lsls	r3, r3, #2
 8009c32:	4413      	add	r3, r2
 8009c34:	009b      	lsls	r3, r3, #2
 8009c36:	440b      	add	r3, r1
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d0e3      	beq.n	8009c06 <vTaskSwitchContext+0x56>
 8009c3e:	68fa      	ldr	r2, [r7, #12]
 8009c40:	4613      	mov	r3, r2
 8009c42:	009b      	lsls	r3, r3, #2
 8009c44:	4413      	add	r3, r2
 8009c46:	009b      	lsls	r3, r3, #2
 8009c48:	4a17      	ldr	r2, [pc, #92]	@ (8009ca8 <vTaskSwitchContext+0xf8>)
 8009c4a:	4413      	add	r3, r2
 8009c4c:	60bb      	str	r3, [r7, #8]
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	685a      	ldr	r2, [r3, #4]
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	605a      	str	r2, [r3, #4]
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	685a      	ldr	r2, [r3, #4]
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	3308      	adds	r3, #8
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d104      	bne.n	8009c6e <vTaskSwitchContext+0xbe>
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	685a      	ldr	r2, [r3, #4]
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	605a      	str	r2, [r3, #4]
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	685b      	ldr	r3, [r3, #4]
 8009c72:	68db      	ldr	r3, [r3, #12]
 8009c74:	4a0a      	ldr	r2, [pc, #40]	@ (8009ca0 <vTaskSwitchContext+0xf0>)
 8009c76:	6013      	str	r3, [r2, #0]
 8009c78:	4a0a      	ldr	r2, [pc, #40]	@ (8009ca4 <vTaskSwitchContext+0xf4>)
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009c7e:	4b08      	ldr	r3, [pc, #32]	@ (8009ca0 <vTaskSwitchContext+0xf0>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	335c      	adds	r3, #92	@ 0x5c
 8009c84:	4a09      	ldr	r2, [pc, #36]	@ (8009cac <vTaskSwitchContext+0xfc>)
 8009c86:	6013      	str	r3, [r2, #0]
}
 8009c88:	bf00      	nop
 8009c8a:	3710      	adds	r7, #16
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}
 8009c90:	200011d8 	.word	0x200011d8
 8009c94:	200011c4 	.word	0x200011c4
 8009c98:	200011e0 	.word	0x200011e0
 8009c9c:	200011dc 	.word	0x200011dc
 8009ca0:	20000cdc 	.word	0x20000cdc
 8009ca4:	200011b8 	.word	0x200011b8
 8009ca8:	20000ce0 	.word	0x20000ce0
 8009cac:	2000003c 	.word	0x2000003c

08009cb0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d10b      	bne.n	8009cd8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cc4:	f383 8811 	msr	BASEPRI, r3
 8009cc8:	f3bf 8f6f 	isb	sy
 8009ccc:	f3bf 8f4f 	dsb	sy
 8009cd0:	60fb      	str	r3, [r7, #12]
}
 8009cd2:	bf00      	nop
 8009cd4:	bf00      	nop
 8009cd6:	e7fd      	b.n	8009cd4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009cd8:	4b07      	ldr	r3, [pc, #28]	@ (8009cf8 <vTaskPlaceOnEventList+0x48>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	3318      	adds	r3, #24
 8009cde:	4619      	mov	r1, r3
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f7fe fcca 	bl	800867a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009ce6:	2101      	movs	r1, #1
 8009ce8:	6838      	ldr	r0, [r7, #0]
 8009cea:	f000 fadf 	bl	800a2ac <prvAddCurrentTaskToDelayedList>
}
 8009cee:	bf00      	nop
 8009cf0:	3710      	adds	r7, #16
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop
 8009cf8:	20000cdc 	.word	0x20000cdc

08009cfc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b086      	sub	sp, #24
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d10b      	bne.n	8009d26 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d12:	f383 8811 	msr	BASEPRI, r3
 8009d16:	f3bf 8f6f 	isb	sy
 8009d1a:	f3bf 8f4f 	dsb	sy
 8009d1e:	617b      	str	r3, [r7, #20]
}
 8009d20:	bf00      	nop
 8009d22:	bf00      	nop
 8009d24:	e7fd      	b.n	8009d22 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009d26:	4b0a      	ldr	r3, [pc, #40]	@ (8009d50 <vTaskPlaceOnEventListRestricted+0x54>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	3318      	adds	r3, #24
 8009d2c:	4619      	mov	r1, r3
 8009d2e:	68f8      	ldr	r0, [r7, #12]
 8009d30:	f7fe fc7f 	bl	8008632 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d002      	beq.n	8009d40 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009d3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009d3e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009d40:	6879      	ldr	r1, [r7, #4]
 8009d42:	68b8      	ldr	r0, [r7, #8]
 8009d44:	f000 fab2 	bl	800a2ac <prvAddCurrentTaskToDelayedList>
	}
 8009d48:	bf00      	nop
 8009d4a:	3718      	adds	r7, #24
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}
 8009d50:	20000cdc 	.word	0x20000cdc

08009d54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b086      	sub	sp, #24
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	68db      	ldr	r3, [r3, #12]
 8009d60:	68db      	ldr	r3, [r3, #12]
 8009d62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d10b      	bne.n	8009d82 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d6e:	f383 8811 	msr	BASEPRI, r3
 8009d72:	f3bf 8f6f 	isb	sy
 8009d76:	f3bf 8f4f 	dsb	sy
 8009d7a:	60fb      	str	r3, [r7, #12]
}
 8009d7c:	bf00      	nop
 8009d7e:	bf00      	nop
 8009d80:	e7fd      	b.n	8009d7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	3318      	adds	r3, #24
 8009d86:	4618      	mov	r0, r3
 8009d88:	f7fe fcb0 	bl	80086ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d8c:	4b1e      	ldr	r3, [pc, #120]	@ (8009e08 <xTaskRemoveFromEventList+0xb4>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d11f      	bne.n	8009dd4 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	3304      	adds	r3, #4
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f7fe fca7 	bl	80086ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009da2:	4b1a      	ldr	r3, [pc, #104]	@ (8009e0c <xTaskRemoveFromEventList+0xb8>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	429a      	cmp	r2, r3
 8009da8:	d903      	bls.n	8009db2 <xTaskRemoveFromEventList+0x5e>
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dae:	4a17      	ldr	r2, [pc, #92]	@ (8009e0c <xTaskRemoveFromEventList+0xb8>)
 8009db0:	6013      	str	r3, [r2, #0]
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009db6:	4613      	mov	r3, r2
 8009db8:	009b      	lsls	r3, r3, #2
 8009dba:	4413      	add	r3, r2
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	4a14      	ldr	r2, [pc, #80]	@ (8009e10 <xTaskRemoveFromEventList+0xbc>)
 8009dc0:	441a      	add	r2, r3
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	3304      	adds	r3, #4
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	4610      	mov	r0, r2
 8009dca:	f7fe fc32 	bl	8008632 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 8009dce:	f000 f9bf 	bl	800a150 <prvResetNextTaskUnblockTime>
 8009dd2:	e005      	b.n	8009de0 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	3318      	adds	r3, #24
 8009dd8:	4619      	mov	r1, r3
 8009dda:	480e      	ldr	r0, [pc, #56]	@ (8009e14 <xTaskRemoveFromEventList+0xc0>)
 8009ddc:	f7fe fc29 	bl	8008632 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009de4:	4b0c      	ldr	r3, [pc, #48]	@ (8009e18 <xTaskRemoveFromEventList+0xc4>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dea:	429a      	cmp	r2, r3
 8009dec:	d905      	bls.n	8009dfa <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009dee:	2301      	movs	r3, #1
 8009df0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009df2:	4b0a      	ldr	r3, [pc, #40]	@ (8009e1c <xTaskRemoveFromEventList+0xc8>)
 8009df4:	2201      	movs	r2, #1
 8009df6:	601a      	str	r2, [r3, #0]
 8009df8:	e001      	b.n	8009dfe <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009dfe:	697b      	ldr	r3, [r7, #20]
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3718      	adds	r7, #24
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}
 8009e08:	200011d8 	.word	0x200011d8
 8009e0c:	200011b8 	.word	0x200011b8
 8009e10:	20000ce0 	.word	0x20000ce0
 8009e14:	20001170 	.word	0x20001170
 8009e18:	20000cdc 	.word	0x20000cdc
 8009e1c:	200011c4 	.word	0x200011c4

08009e20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009e20:	b480      	push	{r7}
 8009e22:	b083      	sub	sp, #12
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009e28:	4b06      	ldr	r3, [pc, #24]	@ (8009e44 <vTaskInternalSetTimeOutState+0x24>)
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009e30:	4b05      	ldr	r3, [pc, #20]	@ (8009e48 <vTaskInternalSetTimeOutState+0x28>)
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	605a      	str	r2, [r3, #4]
}
 8009e38:	bf00      	nop
 8009e3a:	370c      	adds	r7, #12
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr
 8009e44:	200011c8 	.word	0x200011c8
 8009e48:	200011b4 	.word	0x200011b4

08009e4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b088      	sub	sp, #32
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d10b      	bne.n	8009e74 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e60:	f383 8811 	msr	BASEPRI, r3
 8009e64:	f3bf 8f6f 	isb	sy
 8009e68:	f3bf 8f4f 	dsb	sy
 8009e6c:	613b      	str	r3, [r7, #16]
}
 8009e6e:	bf00      	nop
 8009e70:	bf00      	nop
 8009e72:	e7fd      	b.n	8009e70 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d10b      	bne.n	8009e92 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e7e:	f383 8811 	msr	BASEPRI, r3
 8009e82:	f3bf 8f6f 	isb	sy
 8009e86:	f3bf 8f4f 	dsb	sy
 8009e8a:	60fb      	str	r3, [r7, #12]
}
 8009e8c:	bf00      	nop
 8009e8e:	bf00      	nop
 8009e90:	e7fd      	b.n	8009e8e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009e92:	f000 fee9 	bl	800ac68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009e96:	4b1d      	ldr	r3, [pc, #116]	@ (8009f0c <xTaskCheckForTimeOut+0xc0>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	69ba      	ldr	r2, [r7, #24]
 8009ea2:	1ad3      	subs	r3, r2, r3
 8009ea4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009eae:	d102      	bne.n	8009eb6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	61fb      	str	r3, [r7, #28]
 8009eb4:	e023      	b.n	8009efe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	4b15      	ldr	r3, [pc, #84]	@ (8009f10 <xTaskCheckForTimeOut+0xc4>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d007      	beq.n	8009ed2 <xTaskCheckForTimeOut+0x86>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	685b      	ldr	r3, [r3, #4]
 8009ec6:	69ba      	ldr	r2, [r7, #24]
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d302      	bcc.n	8009ed2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	61fb      	str	r3, [r7, #28]
 8009ed0:	e015      	b.n	8009efe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	697a      	ldr	r2, [r7, #20]
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d20b      	bcs.n	8009ef4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	1ad2      	subs	r2, r2, r3
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f7ff ff99 	bl	8009e20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	61fb      	str	r3, [r7, #28]
 8009ef2:	e004      	b.n	8009efe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009efa:	2301      	movs	r3, #1
 8009efc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009efe:	f000 fee5 	bl	800accc <vPortExitCritical>

	return xReturn;
 8009f02:	69fb      	ldr	r3, [r7, #28]
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3720      	adds	r7, #32
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}
 8009f0c:	200011b4 	.word	0x200011b4
 8009f10:	200011c8 	.word	0x200011c8

08009f14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009f14:	b480      	push	{r7}
 8009f16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009f18:	4b03      	ldr	r3, [pc, #12]	@ (8009f28 <vTaskMissedYield+0x14>)
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	601a      	str	r2, [r3, #0]
}
 8009f1e:	bf00      	nop
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	4770      	bx	lr
 8009f28:	200011c4 	.word	0x200011c4

08009f2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b084      	sub	sp, #16
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009f34:	f000 f8a8 	bl	800a088 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009f38:	4b18      	ldr	r3, [pc, #96]	@ (8009f9c <prvIdleTask+0x70>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d907      	bls.n	8009f50 <prvIdleTask+0x24>
			{
				taskYIELD();
 8009f40:	4b17      	ldr	r3, [pc, #92]	@ (8009fa0 <prvIdleTask+0x74>)
 8009f42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f46:	601a      	str	r2, [r3, #0]
 8009f48:	f3bf 8f4f 	dsb	sy
 8009f4c:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8009f50:	f7ff fc66 	bl	8009820 <prvGetExpectedIdleTime>
 8009f54:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	d9eb      	bls.n	8009f34 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8009f5c:	f7ff fc52 	bl	8009804 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8009f60:	4b10      	ldr	r3, [pc, #64]	@ (8009fa4 <prvIdleTask+0x78>)
 8009f62:	681a      	ldr	r2, [r3, #0]
 8009f64:	4b10      	ldr	r3, [pc, #64]	@ (8009fa8 <prvIdleTask+0x7c>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d20b      	bcs.n	8009f84 <prvIdleTask+0x58>
	__asm volatile
 8009f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f70:	f383 8811 	msr	BASEPRI, r3
 8009f74:	f3bf 8f6f 	isb	sy
 8009f78:	f3bf 8f4f 	dsb	sy
 8009f7c:	60bb      	str	r3, [r7, #8]
}
 8009f7e:	bf00      	nop
 8009f80:	bf00      	nop
 8009f82:	e7fd      	b.n	8009f80 <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8009f84:	f7ff fc4c 	bl	8009820 <prvGetExpectedIdleTime>
 8009f88:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2b01      	cmp	r3, #1
 8009f8e:	d902      	bls.n	8009f96 <prvIdleTask+0x6a>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8009f90:	68f8      	ldr	r0, [r7, #12]
 8009f92:	f000 ff1b 	bl	800adcc <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 8009f96:	f7ff fc7b 	bl	8009890 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 8009f9a:	e7cb      	b.n	8009f34 <prvIdleTask+0x8>
 8009f9c:	20000ce0 	.word	0x20000ce0
 8009fa0:	e000ed04 	.word	0xe000ed04
 8009fa4:	200011d0 	.word	0x200011d0
 8009fa8:	200011b4 	.word	0x200011b4

08009fac <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 8009fac:	b480      	push	{r7}
 8009fae:	b083      	sub	sp, #12
 8009fb0:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 8009fba:	4b0f      	ldr	r3, [pc, #60]	@ (8009ff8 <eTaskConfirmSleepModeStatus+0x4c>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d002      	beq.n	8009fc8 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	71fb      	strb	r3, [r7, #7]
 8009fc6:	e010      	b.n	8009fea <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 8009fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8009ffc <eTaskConfirmSleepModeStatus+0x50>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d002      	beq.n	8009fd6 <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	71fb      	strb	r3, [r7, #7]
 8009fd4:	e009      	b.n	8009fea <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 8009fd6:	4b0a      	ldr	r3, [pc, #40]	@ (800a000 <eTaskConfirmSleepModeStatus+0x54>)
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	4b0a      	ldr	r3, [pc, #40]	@ (800a004 <eTaskConfirmSleepModeStatus+0x58>)
 8009fdc:	6819      	ldr	r1, [r3, #0]
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	1acb      	subs	r3, r1, r3
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d101      	bne.n	8009fea <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 8009fe6:	2302      	movs	r3, #2
 8009fe8:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 8009fea:	79fb      	ldrb	r3, [r7, #7]
	}
 8009fec:	4618      	mov	r0, r3
 8009fee:	370c      	adds	r7, #12
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff6:	4770      	bx	lr
 8009ff8:	20001170 	.word	0x20001170
 8009ffc:	200011c4 	.word	0x200011c4
 800a000:	2000119c 	.word	0x2000119c
 800a004:	200011b0 	.word	0x200011b0

0800a008 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a00e:	2300      	movs	r3, #0
 800a010:	607b      	str	r3, [r7, #4]
 800a012:	e00c      	b.n	800a02e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a014:	687a      	ldr	r2, [r7, #4]
 800a016:	4613      	mov	r3, r2
 800a018:	009b      	lsls	r3, r3, #2
 800a01a:	4413      	add	r3, r2
 800a01c:	009b      	lsls	r3, r3, #2
 800a01e:	4a12      	ldr	r2, [pc, #72]	@ (800a068 <prvInitialiseTaskLists+0x60>)
 800a020:	4413      	add	r3, r2
 800a022:	4618      	mov	r0, r3
 800a024:	f7fe fad8 	bl	80085d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	3301      	adds	r3, #1
 800a02c:	607b      	str	r3, [r7, #4]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2b37      	cmp	r3, #55	@ 0x37
 800a032:	d9ef      	bls.n	800a014 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a034:	480d      	ldr	r0, [pc, #52]	@ (800a06c <prvInitialiseTaskLists+0x64>)
 800a036:	f7fe facf 	bl	80085d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a03a:	480d      	ldr	r0, [pc, #52]	@ (800a070 <prvInitialiseTaskLists+0x68>)
 800a03c:	f7fe facc 	bl	80085d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a040:	480c      	ldr	r0, [pc, #48]	@ (800a074 <prvInitialiseTaskLists+0x6c>)
 800a042:	f7fe fac9 	bl	80085d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a046:	480c      	ldr	r0, [pc, #48]	@ (800a078 <prvInitialiseTaskLists+0x70>)
 800a048:	f7fe fac6 	bl	80085d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a04c:	480b      	ldr	r0, [pc, #44]	@ (800a07c <prvInitialiseTaskLists+0x74>)
 800a04e:	f7fe fac3 	bl	80085d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a052:	4b0b      	ldr	r3, [pc, #44]	@ (800a080 <prvInitialiseTaskLists+0x78>)
 800a054:	4a05      	ldr	r2, [pc, #20]	@ (800a06c <prvInitialiseTaskLists+0x64>)
 800a056:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a058:	4b0a      	ldr	r3, [pc, #40]	@ (800a084 <prvInitialiseTaskLists+0x7c>)
 800a05a:	4a05      	ldr	r2, [pc, #20]	@ (800a070 <prvInitialiseTaskLists+0x68>)
 800a05c:	601a      	str	r2, [r3, #0]
}
 800a05e:	bf00      	nop
 800a060:	3708      	adds	r7, #8
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
 800a066:	bf00      	nop
 800a068:	20000ce0 	.word	0x20000ce0
 800a06c:	20001140 	.word	0x20001140
 800a070:	20001154 	.word	0x20001154
 800a074:	20001170 	.word	0x20001170
 800a078:	20001184 	.word	0x20001184
 800a07c:	2000119c 	.word	0x2000119c
 800a080:	20001168 	.word	0x20001168
 800a084:	2000116c 	.word	0x2000116c

0800a088 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b082      	sub	sp, #8
 800a08c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a08e:	e019      	b.n	800a0c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a090:	f000 fdea 	bl	800ac68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a094:	4b10      	ldr	r3, [pc, #64]	@ (800a0d8 <prvCheckTasksWaitingTermination+0x50>)
 800a096:	68db      	ldr	r3, [r3, #12]
 800a098:	68db      	ldr	r3, [r3, #12]
 800a09a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	3304      	adds	r3, #4
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f7fe fb23 	bl	80086ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a0a6:	4b0d      	ldr	r3, [pc, #52]	@ (800a0dc <prvCheckTasksWaitingTermination+0x54>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	3b01      	subs	r3, #1
 800a0ac:	4a0b      	ldr	r2, [pc, #44]	@ (800a0dc <prvCheckTasksWaitingTermination+0x54>)
 800a0ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a0b0:	4b0b      	ldr	r3, [pc, #44]	@ (800a0e0 <prvCheckTasksWaitingTermination+0x58>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	3b01      	subs	r3, #1
 800a0b6:	4a0a      	ldr	r2, [pc, #40]	@ (800a0e0 <prvCheckTasksWaitingTermination+0x58>)
 800a0b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a0ba:	f000 fe07 	bl	800accc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 f810 	bl	800a0e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a0c4:	4b06      	ldr	r3, [pc, #24]	@ (800a0e0 <prvCheckTasksWaitingTermination+0x58>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d1e1      	bne.n	800a090 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a0cc:	bf00      	nop
 800a0ce:	bf00      	nop
 800a0d0:	3708      	adds	r7, #8
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
 800a0d6:	bf00      	nop
 800a0d8:	20001184 	.word	0x20001184
 800a0dc:	200011b0 	.word	0x200011b0
 800a0e0:	20001198 	.word	0x20001198

0800a0e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b084      	sub	sp, #16
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	335c      	adds	r3, #92	@ 0x5c
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f002 f85f 	bl	800c1b4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d108      	bne.n	800a112 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a104:	4618      	mov	r0, r3
 800a106:	f001 f883 	bl	800b210 <vPortFree>
				vPortFree( pxTCB );
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f001 f880 	bl	800b210 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a110:	e019      	b.n	800a146 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d103      	bne.n	800a124 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f001 f877 	bl	800b210 <vPortFree>
	}
 800a122:	e010      	b.n	800a146 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800a12a:	2b02      	cmp	r3, #2
 800a12c:	d00b      	beq.n	800a146 <prvDeleteTCB+0x62>
	__asm volatile
 800a12e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a132:	f383 8811 	msr	BASEPRI, r3
 800a136:	f3bf 8f6f 	isb	sy
 800a13a:	f3bf 8f4f 	dsb	sy
 800a13e:	60fb      	str	r3, [r7, #12]
}
 800a140:	bf00      	nop
 800a142:	bf00      	nop
 800a144:	e7fd      	b.n	800a142 <prvDeleteTCB+0x5e>
	}
 800a146:	bf00      	nop
 800a148:	3710      	adds	r7, #16
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
	...

0800a150 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a150:	b480      	push	{r7}
 800a152:	b083      	sub	sp, #12
 800a154:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a156:	4b0c      	ldr	r3, [pc, #48]	@ (800a188 <prvResetNextTaskUnblockTime+0x38>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d104      	bne.n	800a16a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a160:	4b0a      	ldr	r3, [pc, #40]	@ (800a18c <prvResetNextTaskUnblockTime+0x3c>)
 800a162:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a166:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a168:	e008      	b.n	800a17c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a16a:	4b07      	ldr	r3, [pc, #28]	@ (800a188 <prvResetNextTaskUnblockTime+0x38>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	68db      	ldr	r3, [r3, #12]
 800a170:	68db      	ldr	r3, [r3, #12]
 800a172:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	4a04      	ldr	r2, [pc, #16]	@ (800a18c <prvResetNextTaskUnblockTime+0x3c>)
 800a17a:	6013      	str	r3, [r2, #0]
}
 800a17c:	bf00      	nop
 800a17e:	370c      	adds	r7, #12
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr
 800a188:	20001168 	.word	0x20001168
 800a18c:	200011d0 	.word	0x200011d0

0800a190 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a190:	b480      	push	{r7}
 800a192:	b083      	sub	sp, #12
 800a194:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a196:	4b0b      	ldr	r3, [pc, #44]	@ (800a1c4 <xTaskGetSchedulerState+0x34>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d102      	bne.n	800a1a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a19e:	2301      	movs	r3, #1
 800a1a0:	607b      	str	r3, [r7, #4]
 800a1a2:	e008      	b.n	800a1b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1a4:	4b08      	ldr	r3, [pc, #32]	@ (800a1c8 <xTaskGetSchedulerState+0x38>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d102      	bne.n	800a1b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a1ac:	2302      	movs	r3, #2
 800a1ae:	607b      	str	r3, [r7, #4]
 800a1b0:	e001      	b.n	800a1b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a1b6:	687b      	ldr	r3, [r7, #4]
	}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	370c      	adds	r7, #12
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c2:	4770      	bx	lr
 800a1c4:	200011bc 	.word	0x200011bc
 800a1c8:	200011d8 	.word	0x200011d8

0800a1cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b086      	sub	sp, #24
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d058      	beq.n	800a294 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a1e2:	4b2f      	ldr	r3, [pc, #188]	@ (800a2a0 <xTaskPriorityDisinherit+0xd4>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	693a      	ldr	r2, [r7, #16]
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d00b      	beq.n	800a204 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a1ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1f0:	f383 8811 	msr	BASEPRI, r3
 800a1f4:	f3bf 8f6f 	isb	sy
 800a1f8:	f3bf 8f4f 	dsb	sy
 800a1fc:	60fb      	str	r3, [r7, #12]
}
 800a1fe:	bf00      	nop
 800a200:	bf00      	nop
 800a202:	e7fd      	b.n	800a200 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d10b      	bne.n	800a224 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a20c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a210:	f383 8811 	msr	BASEPRI, r3
 800a214:	f3bf 8f6f 	isb	sy
 800a218:	f3bf 8f4f 	dsb	sy
 800a21c:	60bb      	str	r3, [r7, #8]
}
 800a21e:	bf00      	nop
 800a220:	bf00      	nop
 800a222:	e7fd      	b.n	800a220 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a228:	1e5a      	subs	r2, r3, #1
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	655a      	str	r2, [r3, #84]	@ 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a236:	429a      	cmp	r2, r3
 800a238:	d02c      	beq.n	800a294 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d128      	bne.n	800a294 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	3304      	adds	r3, #4
 800a246:	4618      	mov	r0, r3
 800a248:	f7fe fa50 	bl	80086ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a258:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a264:	4b0f      	ldr	r3, [pc, #60]	@ (800a2a4 <xTaskPriorityDisinherit+0xd8>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	429a      	cmp	r2, r3
 800a26a:	d903      	bls.n	800a274 <xTaskPriorityDisinherit+0xa8>
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a270:	4a0c      	ldr	r2, [pc, #48]	@ (800a2a4 <xTaskPriorityDisinherit+0xd8>)
 800a272:	6013      	str	r3, [r2, #0]
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a278:	4613      	mov	r3, r2
 800a27a:	009b      	lsls	r3, r3, #2
 800a27c:	4413      	add	r3, r2
 800a27e:	009b      	lsls	r3, r3, #2
 800a280:	4a09      	ldr	r2, [pc, #36]	@ (800a2a8 <xTaskPriorityDisinherit+0xdc>)
 800a282:	441a      	add	r2, r3
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	3304      	adds	r3, #4
 800a288:	4619      	mov	r1, r3
 800a28a:	4610      	mov	r0, r2
 800a28c:	f7fe f9d1 	bl	8008632 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a290:	2301      	movs	r3, #1
 800a292:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a294:	697b      	ldr	r3, [r7, #20]
	}
 800a296:	4618      	mov	r0, r3
 800a298:	3718      	adds	r7, #24
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	20000cdc 	.word	0x20000cdc
 800a2a4:	200011b8 	.word	0x200011b8
 800a2a8:	20000ce0 	.word	0x20000ce0

0800a2ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b084      	sub	sp, #16
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a2b6:	4b21      	ldr	r3, [pc, #132]	@ (800a33c <prvAddCurrentTaskToDelayedList+0x90>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a2bc:	4b20      	ldr	r3, [pc, #128]	@ (800a340 <prvAddCurrentTaskToDelayedList+0x94>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	3304      	adds	r3, #4
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f7fe fa12 	bl	80086ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a2ce:	d10a      	bne.n	800a2e6 <prvAddCurrentTaskToDelayedList+0x3a>
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d007      	beq.n	800a2e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2d6:	4b1a      	ldr	r3, [pc, #104]	@ (800a340 <prvAddCurrentTaskToDelayedList+0x94>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	3304      	adds	r3, #4
 800a2dc:	4619      	mov	r1, r3
 800a2de:	4819      	ldr	r0, [pc, #100]	@ (800a344 <prvAddCurrentTaskToDelayedList+0x98>)
 800a2e0:	f7fe f9a7 	bl	8008632 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a2e4:	e026      	b.n	800a334 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a2e6:	68fa      	ldr	r2, [r7, #12]
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	4413      	add	r3, r2
 800a2ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a2ee:	4b14      	ldr	r3, [pc, #80]	@ (800a340 <prvAddCurrentTaskToDelayedList+0x94>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	68ba      	ldr	r2, [r7, #8]
 800a2f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a2f6:	68ba      	ldr	r2, [r7, #8]
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d209      	bcs.n	800a312 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2fe:	4b12      	ldr	r3, [pc, #72]	@ (800a348 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a300:	681a      	ldr	r2, [r3, #0]
 800a302:	4b0f      	ldr	r3, [pc, #60]	@ (800a340 <prvAddCurrentTaskToDelayedList+0x94>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	3304      	adds	r3, #4
 800a308:	4619      	mov	r1, r3
 800a30a:	4610      	mov	r0, r2
 800a30c:	f7fe f9b5 	bl	800867a <vListInsert>
}
 800a310:	e010      	b.n	800a334 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a312:	4b0e      	ldr	r3, [pc, #56]	@ (800a34c <prvAddCurrentTaskToDelayedList+0xa0>)
 800a314:	681a      	ldr	r2, [r3, #0]
 800a316:	4b0a      	ldr	r3, [pc, #40]	@ (800a340 <prvAddCurrentTaskToDelayedList+0x94>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	3304      	adds	r3, #4
 800a31c:	4619      	mov	r1, r3
 800a31e:	4610      	mov	r0, r2
 800a320:	f7fe f9ab 	bl	800867a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a324:	4b0a      	ldr	r3, [pc, #40]	@ (800a350 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	68ba      	ldr	r2, [r7, #8]
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d202      	bcs.n	800a334 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a32e:	4a08      	ldr	r2, [pc, #32]	@ (800a350 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	6013      	str	r3, [r2, #0]
}
 800a334:	bf00      	nop
 800a336:	3710      	adds	r7, #16
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}
 800a33c:	200011b4 	.word	0x200011b4
 800a340:	20000cdc 	.word	0x20000cdc
 800a344:	2000119c 	.word	0x2000119c
 800a348:	2000116c 	.word	0x2000116c
 800a34c:	20001168 	.word	0x20001168
 800a350:	200011d0 	.word	0x200011d0

0800a354 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b08a      	sub	sp, #40	@ 0x28
 800a358:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a35a:	2300      	movs	r3, #0
 800a35c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a35e:	f000 fb13 	bl	800a988 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a362:	4b1d      	ldr	r3, [pc, #116]	@ (800a3d8 <xTimerCreateTimerTask+0x84>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d021      	beq.n	800a3ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a36a:	2300      	movs	r3, #0
 800a36c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a36e:	2300      	movs	r3, #0
 800a370:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a372:	1d3a      	adds	r2, r7, #4
 800a374:	f107 0108 	add.w	r1, r7, #8
 800a378:	f107 030c 	add.w	r3, r7, #12
 800a37c:	4618      	mov	r0, r3
 800a37e:	f7fe f911 	bl	80085a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a382:	6879      	ldr	r1, [r7, #4]
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	68fa      	ldr	r2, [r7, #12]
 800a388:	9202      	str	r2, [sp, #8]
 800a38a:	9301      	str	r3, [sp, #4]
 800a38c:	2302      	movs	r3, #2
 800a38e:	9300      	str	r3, [sp, #0]
 800a390:	2300      	movs	r3, #0
 800a392:	460a      	mov	r2, r1
 800a394:	4911      	ldr	r1, [pc, #68]	@ (800a3dc <xTimerCreateTimerTask+0x88>)
 800a396:	4812      	ldr	r0, [pc, #72]	@ (800a3e0 <xTimerCreateTimerTask+0x8c>)
 800a398:	f7fe ffc8 	bl	800932c <xTaskCreateStatic>
 800a39c:	4603      	mov	r3, r0
 800a39e:	4a11      	ldr	r2, [pc, #68]	@ (800a3e4 <xTimerCreateTimerTask+0x90>)
 800a3a0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a3a2:	4b10      	ldr	r3, [pc, #64]	@ (800a3e4 <xTimerCreateTimerTask+0x90>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d001      	beq.n	800a3ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d10b      	bne.n	800a3cc <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a3b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3b8:	f383 8811 	msr	BASEPRI, r3
 800a3bc:	f3bf 8f6f 	isb	sy
 800a3c0:	f3bf 8f4f 	dsb	sy
 800a3c4:	613b      	str	r3, [r7, #16]
}
 800a3c6:	bf00      	nop
 800a3c8:	bf00      	nop
 800a3ca:	e7fd      	b.n	800a3c8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a3cc:	697b      	ldr	r3, [r7, #20]
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	3718      	adds	r7, #24
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}
 800a3d6:	bf00      	nop
 800a3d8:	20001214 	.word	0x20001214
 800a3dc:	0800e698 	.word	0x0800e698
 800a3e0:	0800a521 	.word	0x0800a521
 800a3e4:	20001218 	.word	0x20001218

0800a3e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b08a      	sub	sp, #40	@ 0x28
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	60f8      	str	r0, [r7, #12]
 800a3f0:	60b9      	str	r1, [r7, #8]
 800a3f2:	607a      	str	r2, [r7, #4]
 800a3f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d10b      	bne.n	800a418 <xTimerGenericCommand+0x30>
	__asm volatile
 800a400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a404:	f383 8811 	msr	BASEPRI, r3
 800a408:	f3bf 8f6f 	isb	sy
 800a40c:	f3bf 8f4f 	dsb	sy
 800a410:	623b      	str	r3, [r7, #32]
}
 800a412:	bf00      	nop
 800a414:	bf00      	nop
 800a416:	e7fd      	b.n	800a414 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a418:	4b19      	ldr	r3, [pc, #100]	@ (800a480 <xTimerGenericCommand+0x98>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d02a      	beq.n	800a476 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	2b05      	cmp	r3, #5
 800a430:	dc18      	bgt.n	800a464 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a432:	f7ff fead 	bl	800a190 <xTaskGetSchedulerState>
 800a436:	4603      	mov	r3, r0
 800a438:	2b02      	cmp	r3, #2
 800a43a:	d109      	bne.n	800a450 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a43c:	4b10      	ldr	r3, [pc, #64]	@ (800a480 <xTimerGenericCommand+0x98>)
 800a43e:	6818      	ldr	r0, [r3, #0]
 800a440:	f107 0110 	add.w	r1, r7, #16
 800a444:	2300      	movs	r3, #0
 800a446:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a448:	f7fe fac0 	bl	80089cc <xQueueGenericSend>
 800a44c:	6278      	str	r0, [r7, #36]	@ 0x24
 800a44e:	e012      	b.n	800a476 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a450:	4b0b      	ldr	r3, [pc, #44]	@ (800a480 <xTimerGenericCommand+0x98>)
 800a452:	6818      	ldr	r0, [r3, #0]
 800a454:	f107 0110 	add.w	r1, r7, #16
 800a458:	2300      	movs	r3, #0
 800a45a:	2200      	movs	r2, #0
 800a45c:	f7fe fab6 	bl	80089cc <xQueueGenericSend>
 800a460:	6278      	str	r0, [r7, #36]	@ 0x24
 800a462:	e008      	b.n	800a476 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a464:	4b06      	ldr	r3, [pc, #24]	@ (800a480 <xTimerGenericCommand+0x98>)
 800a466:	6818      	ldr	r0, [r3, #0]
 800a468:	f107 0110 	add.w	r1, r7, #16
 800a46c:	2300      	movs	r3, #0
 800a46e:	683a      	ldr	r2, [r7, #0]
 800a470:	f7fe fbae 	bl	8008bd0 <xQueueGenericSendFromISR>
 800a474:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3728      	adds	r7, #40	@ 0x28
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}
 800a480:	20001214 	.word	0x20001214

0800a484 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b088      	sub	sp, #32
 800a488:	af02      	add	r7, sp, #8
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a48e:	4b23      	ldr	r3, [pc, #140]	@ (800a51c <prvProcessExpiredTimer+0x98>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	68db      	ldr	r3, [r3, #12]
 800a494:	68db      	ldr	r3, [r3, #12]
 800a496:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	3304      	adds	r3, #4
 800a49c:	4618      	mov	r0, r3
 800a49e:	f7fe f925 	bl	80086ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a4a8:	f003 0304 	and.w	r3, r3, #4
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d023      	beq.n	800a4f8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	699a      	ldr	r2, [r3, #24]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	18d1      	adds	r1, r2, r3
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	683a      	ldr	r2, [r7, #0]
 800a4bc:	6978      	ldr	r0, [r7, #20]
 800a4be:	f000 f8d5 	bl	800a66c <prvInsertTimerInActiveList>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d020      	beq.n	800a50a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	9300      	str	r3, [sp, #0]
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	2100      	movs	r1, #0
 800a4d2:	6978      	ldr	r0, [r7, #20]
 800a4d4:	f7ff ff88 	bl	800a3e8 <xTimerGenericCommand>
 800a4d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d114      	bne.n	800a50a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a4e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4e4:	f383 8811 	msr	BASEPRI, r3
 800a4e8:	f3bf 8f6f 	isb	sy
 800a4ec:	f3bf 8f4f 	dsb	sy
 800a4f0:	60fb      	str	r3, [r7, #12]
}
 800a4f2:	bf00      	nop
 800a4f4:	bf00      	nop
 800a4f6:	e7fd      	b.n	800a4f4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a4fe:	f023 0301 	bic.w	r3, r3, #1
 800a502:	b2da      	uxtb	r2, r3
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	6a1b      	ldr	r3, [r3, #32]
 800a50e:	6978      	ldr	r0, [r7, #20]
 800a510:	4798      	blx	r3
}
 800a512:	bf00      	nop
 800a514:	3718      	adds	r7, #24
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}
 800a51a:	bf00      	nop
 800a51c:	2000120c 	.word	0x2000120c

0800a520 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b084      	sub	sp, #16
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a528:	f107 0308 	add.w	r3, r7, #8
 800a52c:	4618      	mov	r0, r3
 800a52e:	f000 f859 	bl	800a5e4 <prvGetNextExpireTime>
 800a532:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	4619      	mov	r1, r3
 800a538:	68f8      	ldr	r0, [r7, #12]
 800a53a:	f000 f805 	bl	800a548 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a53e:	f000 f8d7 	bl	800a6f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a542:	bf00      	nop
 800a544:	e7f0      	b.n	800a528 <prvTimerTask+0x8>
	...

0800a548 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b084      	sub	sp, #16
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a552:	f7ff f957 	bl	8009804 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a556:	f107 0308 	add.w	r3, r7, #8
 800a55a:	4618      	mov	r0, r3
 800a55c:	f000 f866 	bl	800a62c <prvSampleTimeNow>
 800a560:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d130      	bne.n	800a5ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d10a      	bne.n	800a584 <prvProcessTimerOrBlockTask+0x3c>
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	429a      	cmp	r2, r3
 800a574:	d806      	bhi.n	800a584 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a576:	f7ff f98b 	bl	8009890 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a57a:	68f9      	ldr	r1, [r7, #12]
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f7ff ff81 	bl	800a484 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a582:	e024      	b.n	800a5ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d008      	beq.n	800a59c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a58a:	4b13      	ldr	r3, [pc, #76]	@ (800a5d8 <prvProcessTimerOrBlockTask+0x90>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d101      	bne.n	800a598 <prvProcessTimerOrBlockTask+0x50>
 800a594:	2301      	movs	r3, #1
 800a596:	e000      	b.n	800a59a <prvProcessTimerOrBlockTask+0x52>
 800a598:	2300      	movs	r3, #0
 800a59a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a59c:	4b0f      	ldr	r3, [pc, #60]	@ (800a5dc <prvProcessTimerOrBlockTask+0x94>)
 800a59e:	6818      	ldr	r0, [r3, #0]
 800a5a0:	687a      	ldr	r2, [r7, #4]
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	1ad3      	subs	r3, r2, r3
 800a5a6:	683a      	ldr	r2, [r7, #0]
 800a5a8:	4619      	mov	r1, r3
 800a5aa:	f7fe fe8b 	bl	80092c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a5ae:	f7ff f96f 	bl	8009890 <xTaskResumeAll>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d10a      	bne.n	800a5ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a5b8:	4b09      	ldr	r3, [pc, #36]	@ (800a5e0 <prvProcessTimerOrBlockTask+0x98>)
 800a5ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5be:	601a      	str	r2, [r3, #0]
 800a5c0:	f3bf 8f4f 	dsb	sy
 800a5c4:	f3bf 8f6f 	isb	sy
}
 800a5c8:	e001      	b.n	800a5ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a5ca:	f7ff f961 	bl	8009890 <xTaskResumeAll>
}
 800a5ce:	bf00      	nop
 800a5d0:	3710      	adds	r7, #16
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}
 800a5d6:	bf00      	nop
 800a5d8:	20001210 	.word	0x20001210
 800a5dc:	20001214 	.word	0x20001214
 800a5e0:	e000ed04 	.word	0xe000ed04

0800a5e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b085      	sub	sp, #20
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a5ec:	4b0e      	ldr	r3, [pc, #56]	@ (800a628 <prvGetNextExpireTime+0x44>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d101      	bne.n	800a5fa <prvGetNextExpireTime+0x16>
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	e000      	b.n	800a5fc <prvGetNextExpireTime+0x18>
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d105      	bne.n	800a614 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a608:	4b07      	ldr	r3, [pc, #28]	@ (800a628 <prvGetNextExpireTime+0x44>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	68db      	ldr	r3, [r3, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	60fb      	str	r3, [r7, #12]
 800a612:	e001      	b.n	800a618 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a614:	2300      	movs	r3, #0
 800a616:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a618:	68fb      	ldr	r3, [r7, #12]
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3714      	adds	r7, #20
 800a61e:	46bd      	mov	sp, r7
 800a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a624:	4770      	bx	lr
 800a626:	bf00      	nop
 800a628:	2000120c 	.word	0x2000120c

0800a62c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b084      	sub	sp, #16
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a634:	f7ff f9ca 	bl	80099cc <xTaskGetTickCount>
 800a638:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a63a:	4b0b      	ldr	r3, [pc, #44]	@ (800a668 <prvSampleTimeNow+0x3c>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	68fa      	ldr	r2, [r7, #12]
 800a640:	429a      	cmp	r2, r3
 800a642:	d205      	bcs.n	800a650 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a644:	f000 f93a 	bl	800a8bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2201      	movs	r2, #1
 800a64c:	601a      	str	r2, [r3, #0]
 800a64e:	e002      	b.n	800a656 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2200      	movs	r2, #0
 800a654:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a656:	4a04      	ldr	r2, [pc, #16]	@ (800a668 <prvSampleTimeNow+0x3c>)
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a65c:	68fb      	ldr	r3, [r7, #12]
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3710      	adds	r7, #16
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}
 800a666:	bf00      	nop
 800a668:	2000121c 	.word	0x2000121c

0800a66c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b086      	sub	sp, #24
 800a670:	af00      	add	r7, sp, #0
 800a672:	60f8      	str	r0, [r7, #12]
 800a674:	60b9      	str	r1, [r7, #8]
 800a676:	607a      	str	r2, [r7, #4]
 800a678:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a67a:	2300      	movs	r3, #0
 800a67c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	68ba      	ldr	r2, [r7, #8]
 800a682:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	68fa      	ldr	r2, [r7, #12]
 800a688:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a68a:	68ba      	ldr	r2, [r7, #8]
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	429a      	cmp	r2, r3
 800a690:	d812      	bhi.n	800a6b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a692:	687a      	ldr	r2, [r7, #4]
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	1ad2      	subs	r2, r2, r3
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	699b      	ldr	r3, [r3, #24]
 800a69c:	429a      	cmp	r2, r3
 800a69e:	d302      	bcc.n	800a6a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	617b      	str	r3, [r7, #20]
 800a6a4:	e01b      	b.n	800a6de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a6a6:	4b10      	ldr	r3, [pc, #64]	@ (800a6e8 <prvInsertTimerInActiveList+0x7c>)
 800a6a8:	681a      	ldr	r2, [r3, #0]
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	3304      	adds	r3, #4
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	4610      	mov	r0, r2
 800a6b2:	f7fd ffe2 	bl	800867a <vListInsert>
 800a6b6:	e012      	b.n	800a6de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a6b8:	687a      	ldr	r2, [r7, #4]
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	d206      	bcs.n	800a6ce <prvInsertTimerInActiveList+0x62>
 800a6c0:	68ba      	ldr	r2, [r7, #8]
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	429a      	cmp	r2, r3
 800a6c6:	d302      	bcc.n	800a6ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	617b      	str	r3, [r7, #20]
 800a6cc:	e007      	b.n	800a6de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a6ce:	4b07      	ldr	r3, [pc, #28]	@ (800a6ec <prvInsertTimerInActiveList+0x80>)
 800a6d0:	681a      	ldr	r2, [r3, #0]
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	3304      	adds	r3, #4
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	4610      	mov	r0, r2
 800a6da:	f7fd ffce 	bl	800867a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a6de:	697b      	ldr	r3, [r7, #20]
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3718      	adds	r7, #24
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}
 800a6e8:	20001210 	.word	0x20001210
 800a6ec:	2000120c 	.word	0x2000120c

0800a6f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b08e      	sub	sp, #56	@ 0x38
 800a6f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a6f6:	e0ce      	b.n	800a896 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	da19      	bge.n	800a732 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a6fe:	1d3b      	adds	r3, r7, #4
 800a700:	3304      	adds	r3, #4
 800a702:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a706:	2b00      	cmp	r3, #0
 800a708:	d10b      	bne.n	800a722 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a70a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a70e:	f383 8811 	msr	BASEPRI, r3
 800a712:	f3bf 8f6f 	isb	sy
 800a716:	f3bf 8f4f 	dsb	sy
 800a71a:	61fb      	str	r3, [r7, #28]
}
 800a71c:	bf00      	nop
 800a71e:	bf00      	nop
 800a720:	e7fd      	b.n	800a71e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a728:	6850      	ldr	r0, [r2, #4]
 800a72a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a72c:	6892      	ldr	r2, [r2, #8]
 800a72e:	4611      	mov	r1, r2
 800a730:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2b00      	cmp	r3, #0
 800a736:	f2c0 80ae 	blt.w	800a896 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a73e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a740:	695b      	ldr	r3, [r3, #20]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d004      	beq.n	800a750 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a748:	3304      	adds	r3, #4
 800a74a:	4618      	mov	r0, r3
 800a74c:	f7fd ffce 	bl	80086ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a750:	463b      	mov	r3, r7
 800a752:	4618      	mov	r0, r3
 800a754:	f7ff ff6a 	bl	800a62c <prvSampleTimeNow>
 800a758:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2b09      	cmp	r3, #9
 800a75e:	f200 8097 	bhi.w	800a890 <prvProcessReceivedCommands+0x1a0>
 800a762:	a201      	add	r2, pc, #4	@ (adr r2, 800a768 <prvProcessReceivedCommands+0x78>)
 800a764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a768:	0800a791 	.word	0x0800a791
 800a76c:	0800a791 	.word	0x0800a791
 800a770:	0800a791 	.word	0x0800a791
 800a774:	0800a807 	.word	0x0800a807
 800a778:	0800a81b 	.word	0x0800a81b
 800a77c:	0800a867 	.word	0x0800a867
 800a780:	0800a791 	.word	0x0800a791
 800a784:	0800a791 	.word	0x0800a791
 800a788:	0800a807 	.word	0x0800a807
 800a78c:	0800a81b 	.word	0x0800a81b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a792:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a796:	f043 0301 	orr.w	r3, r3, #1
 800a79a:	b2da      	uxtb	r2, r3
 800a79c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a79e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a7a2:	68ba      	ldr	r2, [r7, #8]
 800a7a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7a6:	699b      	ldr	r3, [r3, #24]
 800a7a8:	18d1      	adds	r1, r2, r3
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a7b0:	f7ff ff5c 	bl	800a66c <prvInsertTimerInActiveList>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d06c      	beq.n	800a894 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a7ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7bc:	6a1b      	ldr	r3, [r3, #32]
 800a7be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a7c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a7c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a7c8:	f003 0304 	and.w	r3, r3, #4
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d061      	beq.n	800a894 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a7d0:	68ba      	ldr	r2, [r7, #8]
 800a7d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7d4:	699b      	ldr	r3, [r3, #24]
 800a7d6:	441a      	add	r2, r3
 800a7d8:	2300      	movs	r3, #0
 800a7da:	9300      	str	r3, [sp, #0]
 800a7dc:	2300      	movs	r3, #0
 800a7de:	2100      	movs	r1, #0
 800a7e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a7e2:	f7ff fe01 	bl	800a3e8 <xTimerGenericCommand>
 800a7e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a7e8:	6a3b      	ldr	r3, [r7, #32]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d152      	bne.n	800a894 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a7ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7f2:	f383 8811 	msr	BASEPRI, r3
 800a7f6:	f3bf 8f6f 	isb	sy
 800a7fa:	f3bf 8f4f 	dsb	sy
 800a7fe:	61bb      	str	r3, [r7, #24]
}
 800a800:	bf00      	nop
 800a802:	bf00      	nop
 800a804:	e7fd      	b.n	800a802 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a808:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a80c:	f023 0301 	bic.w	r3, r3, #1
 800a810:	b2da      	uxtb	r2, r3
 800a812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a814:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a818:	e03d      	b.n	800a896 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a81a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a81c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a820:	f043 0301 	orr.w	r3, r3, #1
 800a824:	b2da      	uxtb	r2, r3
 800a826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a828:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a82c:	68ba      	ldr	r2, [r7, #8]
 800a82e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a830:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a834:	699b      	ldr	r3, [r3, #24]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d10b      	bne.n	800a852 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a83a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a83e:	f383 8811 	msr	BASEPRI, r3
 800a842:	f3bf 8f6f 	isb	sy
 800a846:	f3bf 8f4f 	dsb	sy
 800a84a:	617b      	str	r3, [r7, #20]
}
 800a84c:	bf00      	nop
 800a84e:	bf00      	nop
 800a850:	e7fd      	b.n	800a84e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a854:	699a      	ldr	r2, [r3, #24]
 800a856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a858:	18d1      	adds	r1, r2, r3
 800a85a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a85c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a85e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a860:	f7ff ff04 	bl	800a66c <prvInsertTimerInActiveList>
					break;
 800a864:	e017      	b.n	800a896 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a868:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a86c:	f003 0302 	and.w	r3, r3, #2
 800a870:	2b00      	cmp	r3, #0
 800a872:	d103      	bne.n	800a87c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a874:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a876:	f000 fccb 	bl	800b210 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a87a:	e00c      	b.n	800a896 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a87c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a87e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a882:	f023 0301 	bic.w	r3, r3, #1
 800a886:	b2da      	uxtb	r2, r3
 800a888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a88a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a88e:	e002      	b.n	800a896 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a890:	bf00      	nop
 800a892:	e000      	b.n	800a896 <prvProcessReceivedCommands+0x1a6>
					break;
 800a894:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a896:	4b08      	ldr	r3, [pc, #32]	@ (800a8b8 <prvProcessReceivedCommands+0x1c8>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	1d39      	adds	r1, r7, #4
 800a89c:	2200      	movs	r2, #0
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f7fe fa34 	bl	8008d0c <xQueueReceive>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	f47f af26 	bne.w	800a6f8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a8ac:	bf00      	nop
 800a8ae:	bf00      	nop
 800a8b0:	3730      	adds	r7, #48	@ 0x30
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}
 800a8b6:	bf00      	nop
 800a8b8:	20001214 	.word	0x20001214

0800a8bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b088      	sub	sp, #32
 800a8c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a8c2:	e049      	b.n	800a958 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a8c4:	4b2e      	ldr	r3, [pc, #184]	@ (800a980 <prvSwitchTimerLists+0xc4>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	68db      	ldr	r3, [r3, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8ce:	4b2c      	ldr	r3, [pc, #176]	@ (800a980 <prvSwitchTimerLists+0xc4>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	68db      	ldr	r3, [r3, #12]
 800a8d4:	68db      	ldr	r3, [r3, #12]
 800a8d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	3304      	adds	r3, #4
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f7fd ff05 	bl	80086ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	6a1b      	ldr	r3, [r3, #32]
 800a8e6:	68f8      	ldr	r0, [r7, #12]
 800a8e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a8f0:	f003 0304 	and.w	r3, r3, #4
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d02f      	beq.n	800a958 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	699b      	ldr	r3, [r3, #24]
 800a8fc:	693a      	ldr	r2, [r7, #16]
 800a8fe:	4413      	add	r3, r2
 800a900:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a902:	68ba      	ldr	r2, [r7, #8]
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	429a      	cmp	r2, r3
 800a908:	d90e      	bls.n	800a928 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	68ba      	ldr	r2, [r7, #8]
 800a90e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	68fa      	ldr	r2, [r7, #12]
 800a914:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a916:	4b1a      	ldr	r3, [pc, #104]	@ (800a980 <prvSwitchTimerLists+0xc4>)
 800a918:	681a      	ldr	r2, [r3, #0]
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	3304      	adds	r3, #4
 800a91e:	4619      	mov	r1, r3
 800a920:	4610      	mov	r0, r2
 800a922:	f7fd feaa 	bl	800867a <vListInsert>
 800a926:	e017      	b.n	800a958 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a928:	2300      	movs	r3, #0
 800a92a:	9300      	str	r3, [sp, #0]
 800a92c:	2300      	movs	r3, #0
 800a92e:	693a      	ldr	r2, [r7, #16]
 800a930:	2100      	movs	r1, #0
 800a932:	68f8      	ldr	r0, [r7, #12]
 800a934:	f7ff fd58 	bl	800a3e8 <xTimerGenericCommand>
 800a938:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d10b      	bne.n	800a958 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a944:	f383 8811 	msr	BASEPRI, r3
 800a948:	f3bf 8f6f 	isb	sy
 800a94c:	f3bf 8f4f 	dsb	sy
 800a950:	603b      	str	r3, [r7, #0]
}
 800a952:	bf00      	nop
 800a954:	bf00      	nop
 800a956:	e7fd      	b.n	800a954 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a958:	4b09      	ldr	r3, [pc, #36]	@ (800a980 <prvSwitchTimerLists+0xc4>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d1b0      	bne.n	800a8c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a962:	4b07      	ldr	r3, [pc, #28]	@ (800a980 <prvSwitchTimerLists+0xc4>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a968:	4b06      	ldr	r3, [pc, #24]	@ (800a984 <prvSwitchTimerLists+0xc8>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4a04      	ldr	r2, [pc, #16]	@ (800a980 <prvSwitchTimerLists+0xc4>)
 800a96e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a970:	4a04      	ldr	r2, [pc, #16]	@ (800a984 <prvSwitchTimerLists+0xc8>)
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	6013      	str	r3, [r2, #0]
}
 800a976:	bf00      	nop
 800a978:	3718      	adds	r7, #24
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	bf00      	nop
 800a980:	2000120c 	.word	0x2000120c
 800a984:	20001210 	.word	0x20001210

0800a988 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b082      	sub	sp, #8
 800a98c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a98e:	f000 f96b 	bl	800ac68 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a992:	4b15      	ldr	r3, [pc, #84]	@ (800a9e8 <prvCheckForValidListAndQueue+0x60>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d120      	bne.n	800a9dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a99a:	4814      	ldr	r0, [pc, #80]	@ (800a9ec <prvCheckForValidListAndQueue+0x64>)
 800a99c:	f7fd fe1c 	bl	80085d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a9a0:	4813      	ldr	r0, [pc, #76]	@ (800a9f0 <prvCheckForValidListAndQueue+0x68>)
 800a9a2:	f7fd fe19 	bl	80085d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a9a6:	4b13      	ldr	r3, [pc, #76]	@ (800a9f4 <prvCheckForValidListAndQueue+0x6c>)
 800a9a8:	4a10      	ldr	r2, [pc, #64]	@ (800a9ec <prvCheckForValidListAndQueue+0x64>)
 800a9aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a9ac:	4b12      	ldr	r3, [pc, #72]	@ (800a9f8 <prvCheckForValidListAndQueue+0x70>)
 800a9ae:	4a10      	ldr	r2, [pc, #64]	@ (800a9f0 <prvCheckForValidListAndQueue+0x68>)
 800a9b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	9300      	str	r3, [sp, #0]
 800a9b6:	4b11      	ldr	r3, [pc, #68]	@ (800a9fc <prvCheckForValidListAndQueue+0x74>)
 800a9b8:	4a11      	ldr	r2, [pc, #68]	@ (800aa00 <prvCheckForValidListAndQueue+0x78>)
 800a9ba:	2110      	movs	r1, #16
 800a9bc:	200a      	movs	r0, #10
 800a9be:	f7fd ff29 	bl	8008814 <xQueueGenericCreateStatic>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	4a08      	ldr	r2, [pc, #32]	@ (800a9e8 <prvCheckForValidListAndQueue+0x60>)
 800a9c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a9c8:	4b07      	ldr	r3, [pc, #28]	@ (800a9e8 <prvCheckForValidListAndQueue+0x60>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d005      	beq.n	800a9dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a9d0:	4b05      	ldr	r3, [pc, #20]	@ (800a9e8 <prvCheckForValidListAndQueue+0x60>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	490b      	ldr	r1, [pc, #44]	@ (800aa04 <prvCheckForValidListAndQueue+0x7c>)
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f7fe fc4a 	bl	8009270 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a9dc:	f000 f976 	bl	800accc <vPortExitCritical>
}
 800a9e0:	bf00      	nop
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	bf00      	nop
 800a9e8:	20001214 	.word	0x20001214
 800a9ec:	200011e4 	.word	0x200011e4
 800a9f0:	200011f8 	.word	0x200011f8
 800a9f4:	2000120c 	.word	0x2000120c
 800a9f8:	20001210 	.word	0x20001210
 800a9fc:	200012c0 	.word	0x200012c0
 800aa00:	20001220 	.word	0x20001220
 800aa04:	0800e6a0 	.word	0x0800e6a0

0800aa08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b085      	sub	sp, #20
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	60f8      	str	r0, [r7, #12]
 800aa10:	60b9      	str	r1, [r7, #8]
 800aa12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	3b04      	subs	r3, #4
 800aa18:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800aa20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	3b04      	subs	r3, #4
 800aa26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	f023 0201 	bic.w	r2, r3, #1
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	3b04      	subs	r3, #4
 800aa36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aa38:	4a0c      	ldr	r2, [pc, #48]	@ (800aa6c <pxPortInitialiseStack+0x64>)
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	3b14      	subs	r3, #20
 800aa42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aa44:	687a      	ldr	r2, [r7, #4]
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	3b04      	subs	r3, #4
 800aa4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	f06f 0202 	mvn.w	r2, #2
 800aa56:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	3b20      	subs	r3, #32
 800aa5c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3714      	adds	r7, #20
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr
 800aa6c:	0800aa71 	.word	0x0800aa71

0800aa70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aa70:	b480      	push	{r7}
 800aa72:	b085      	sub	sp, #20
 800aa74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aa76:	2300      	movs	r3, #0
 800aa78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aa7a:	4b13      	ldr	r3, [pc, #76]	@ (800aac8 <prvTaskExitError+0x58>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aa82:	d00b      	beq.n	800aa9c <prvTaskExitError+0x2c>
	__asm volatile
 800aa84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa88:	f383 8811 	msr	BASEPRI, r3
 800aa8c:	f3bf 8f6f 	isb	sy
 800aa90:	f3bf 8f4f 	dsb	sy
 800aa94:	60fb      	str	r3, [r7, #12]
}
 800aa96:	bf00      	nop
 800aa98:	bf00      	nop
 800aa9a:	e7fd      	b.n	800aa98 <prvTaskExitError+0x28>
	__asm volatile
 800aa9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaa0:	f383 8811 	msr	BASEPRI, r3
 800aaa4:	f3bf 8f6f 	isb	sy
 800aaa8:	f3bf 8f4f 	dsb	sy
 800aaac:	60bb      	str	r3, [r7, #8]
}
 800aaae:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aab0:	bf00      	nop
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d0fc      	beq.n	800aab2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aab8:	bf00      	nop
 800aaba:	bf00      	nop
 800aabc:	3714      	adds	r7, #20
 800aabe:	46bd      	mov	sp, r7
 800aac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac4:	4770      	bx	lr
 800aac6:	bf00      	nop
 800aac8:	2000002c 	.word	0x2000002c
 800aacc:	00000000 	.word	0x00000000

0800aad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aad0:	4b07      	ldr	r3, [pc, #28]	@ (800aaf0 <pxCurrentTCBConst2>)
 800aad2:	6819      	ldr	r1, [r3, #0]
 800aad4:	6808      	ldr	r0, [r1, #0]
 800aad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aada:	f380 8809 	msr	PSP, r0
 800aade:	f3bf 8f6f 	isb	sy
 800aae2:	f04f 0000 	mov.w	r0, #0
 800aae6:	f380 8811 	msr	BASEPRI, r0
 800aaea:	4770      	bx	lr
 800aaec:	f3af 8000 	nop.w

0800aaf0 <pxCurrentTCBConst2>:
 800aaf0:	20000cdc 	.word	0x20000cdc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aaf4:	bf00      	nop
 800aaf6:	bf00      	nop

0800aaf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aaf8:	4808      	ldr	r0, [pc, #32]	@ (800ab1c <prvPortStartFirstTask+0x24>)
 800aafa:	6800      	ldr	r0, [r0, #0]
 800aafc:	6800      	ldr	r0, [r0, #0]
 800aafe:	f380 8808 	msr	MSP, r0
 800ab02:	f04f 0000 	mov.w	r0, #0
 800ab06:	f380 8814 	msr	CONTROL, r0
 800ab0a:	b662      	cpsie	i
 800ab0c:	b661      	cpsie	f
 800ab0e:	f3bf 8f4f 	dsb	sy
 800ab12:	f3bf 8f6f 	isb	sy
 800ab16:	df00      	svc	0
 800ab18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ab1a:	bf00      	nop
 800ab1c:	e000ed08 	.word	0xe000ed08

0800ab20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b086      	sub	sp, #24
 800ab24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ab26:	4b47      	ldr	r3, [pc, #284]	@ (800ac44 <xPortStartScheduler+0x124>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4a47      	ldr	r2, [pc, #284]	@ (800ac48 <xPortStartScheduler+0x128>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d10b      	bne.n	800ab48 <xPortStartScheduler+0x28>
	__asm volatile
 800ab30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab34:	f383 8811 	msr	BASEPRI, r3
 800ab38:	f3bf 8f6f 	isb	sy
 800ab3c:	f3bf 8f4f 	dsb	sy
 800ab40:	613b      	str	r3, [r7, #16]
}
 800ab42:	bf00      	nop
 800ab44:	bf00      	nop
 800ab46:	e7fd      	b.n	800ab44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ab48:	4b3e      	ldr	r3, [pc, #248]	@ (800ac44 <xPortStartScheduler+0x124>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4a3f      	ldr	r2, [pc, #252]	@ (800ac4c <xPortStartScheduler+0x12c>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d10b      	bne.n	800ab6a <xPortStartScheduler+0x4a>
	__asm volatile
 800ab52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab56:	f383 8811 	msr	BASEPRI, r3
 800ab5a:	f3bf 8f6f 	isb	sy
 800ab5e:	f3bf 8f4f 	dsb	sy
 800ab62:	60fb      	str	r3, [r7, #12]
}
 800ab64:	bf00      	nop
 800ab66:	bf00      	nop
 800ab68:	e7fd      	b.n	800ab66 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ab6a:	4b39      	ldr	r3, [pc, #228]	@ (800ac50 <xPortStartScheduler+0x130>)
 800ab6c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	22ff      	movs	r2, #255	@ 0xff
 800ab7a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ab7c:	697b      	ldr	r3, [r7, #20]
 800ab7e:	781b      	ldrb	r3, [r3, #0]
 800ab80:	b2db      	uxtb	r3, r3
 800ab82:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ab84:	78fb      	ldrb	r3, [r7, #3]
 800ab86:	b2db      	uxtb	r3, r3
 800ab88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ab8c:	b2da      	uxtb	r2, r3
 800ab8e:	4b31      	ldr	r3, [pc, #196]	@ (800ac54 <xPortStartScheduler+0x134>)
 800ab90:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ab92:	4b31      	ldr	r3, [pc, #196]	@ (800ac58 <xPortStartScheduler+0x138>)
 800ab94:	2207      	movs	r2, #7
 800ab96:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ab98:	e009      	b.n	800abae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800ab9a:	4b2f      	ldr	r3, [pc, #188]	@ (800ac58 <xPortStartScheduler+0x138>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	3b01      	subs	r3, #1
 800aba0:	4a2d      	ldr	r2, [pc, #180]	@ (800ac58 <xPortStartScheduler+0x138>)
 800aba2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aba4:	78fb      	ldrb	r3, [r7, #3]
 800aba6:	b2db      	uxtb	r3, r3
 800aba8:	005b      	lsls	r3, r3, #1
 800abaa:	b2db      	uxtb	r3, r3
 800abac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800abae:	78fb      	ldrb	r3, [r7, #3]
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abb6:	2b80      	cmp	r3, #128	@ 0x80
 800abb8:	d0ef      	beq.n	800ab9a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800abba:	4b27      	ldr	r3, [pc, #156]	@ (800ac58 <xPortStartScheduler+0x138>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f1c3 0307 	rsb	r3, r3, #7
 800abc2:	2b04      	cmp	r3, #4
 800abc4:	d00b      	beq.n	800abde <xPortStartScheduler+0xbe>
	__asm volatile
 800abc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abca:	f383 8811 	msr	BASEPRI, r3
 800abce:	f3bf 8f6f 	isb	sy
 800abd2:	f3bf 8f4f 	dsb	sy
 800abd6:	60bb      	str	r3, [r7, #8]
}
 800abd8:	bf00      	nop
 800abda:	bf00      	nop
 800abdc:	e7fd      	b.n	800abda <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800abde:	4b1e      	ldr	r3, [pc, #120]	@ (800ac58 <xPortStartScheduler+0x138>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	021b      	lsls	r3, r3, #8
 800abe4:	4a1c      	ldr	r2, [pc, #112]	@ (800ac58 <xPortStartScheduler+0x138>)
 800abe6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800abe8:	4b1b      	ldr	r3, [pc, #108]	@ (800ac58 <xPortStartScheduler+0x138>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800abf0:	4a19      	ldr	r2, [pc, #100]	@ (800ac58 <xPortStartScheduler+0x138>)
 800abf2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	b2da      	uxtb	r2, r3
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800abfc:	4b17      	ldr	r3, [pc, #92]	@ (800ac5c <xPortStartScheduler+0x13c>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4a16      	ldr	r2, [pc, #88]	@ (800ac5c <xPortStartScheduler+0x13c>)
 800ac02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ac06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ac08:	4b14      	ldr	r3, [pc, #80]	@ (800ac5c <xPortStartScheduler+0x13c>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	4a13      	ldr	r2, [pc, #76]	@ (800ac5c <xPortStartScheduler+0x13c>)
 800ac0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ac12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ac14:	f000 f9a6 	bl	800af64 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ac18:	4b11      	ldr	r3, [pc, #68]	@ (800ac60 <xPortStartScheduler+0x140>)
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ac1e:	f000 f9dd 	bl	800afdc <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ac22:	4b10      	ldr	r3, [pc, #64]	@ (800ac64 <xPortStartScheduler+0x144>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	4a0f      	ldr	r2, [pc, #60]	@ (800ac64 <xPortStartScheduler+0x144>)
 800ac28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ac2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ac2e:	f7ff ff63 	bl	800aaf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ac32:	f7fe ffbd 	bl	8009bb0 <vTaskSwitchContext>
	prvTaskExitError();
 800ac36:	f7ff ff1b 	bl	800aa70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ac3a:	2300      	movs	r3, #0
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3718      	adds	r7, #24
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}
 800ac44:	e000ed00 	.word	0xe000ed00
 800ac48:	410fc271 	.word	0x410fc271
 800ac4c:	410fc270 	.word	0x410fc270
 800ac50:	e000e400 	.word	0xe000e400
 800ac54:	2000131c 	.word	0x2000131c
 800ac58:	20001320 	.word	0x20001320
 800ac5c:	e000ed20 	.word	0xe000ed20
 800ac60:	2000002c 	.word	0x2000002c
 800ac64:	e000ef34 	.word	0xe000ef34

0800ac68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b083      	sub	sp, #12
 800ac6c:	af00      	add	r7, sp, #0
	__asm volatile
 800ac6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac72:	f383 8811 	msr	BASEPRI, r3
 800ac76:	f3bf 8f6f 	isb	sy
 800ac7a:	f3bf 8f4f 	dsb	sy
 800ac7e:	607b      	str	r3, [r7, #4]
}
 800ac80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ac82:	4b10      	ldr	r3, [pc, #64]	@ (800acc4 <vPortEnterCritical+0x5c>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	3301      	adds	r3, #1
 800ac88:	4a0e      	ldr	r2, [pc, #56]	@ (800acc4 <vPortEnterCritical+0x5c>)
 800ac8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ac8c:	4b0d      	ldr	r3, [pc, #52]	@ (800acc4 <vPortEnterCritical+0x5c>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	2b01      	cmp	r3, #1
 800ac92:	d110      	bne.n	800acb6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ac94:	4b0c      	ldr	r3, [pc, #48]	@ (800acc8 <vPortEnterCritical+0x60>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	b2db      	uxtb	r3, r3
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d00b      	beq.n	800acb6 <vPortEnterCritical+0x4e>
	__asm volatile
 800ac9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aca2:	f383 8811 	msr	BASEPRI, r3
 800aca6:	f3bf 8f6f 	isb	sy
 800acaa:	f3bf 8f4f 	dsb	sy
 800acae:	603b      	str	r3, [r7, #0]
}
 800acb0:	bf00      	nop
 800acb2:	bf00      	nop
 800acb4:	e7fd      	b.n	800acb2 <vPortEnterCritical+0x4a>
	}
}
 800acb6:	bf00      	nop
 800acb8:	370c      	adds	r7, #12
 800acba:	46bd      	mov	sp, r7
 800acbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc0:	4770      	bx	lr
 800acc2:	bf00      	nop
 800acc4:	2000002c 	.word	0x2000002c
 800acc8:	e000ed04 	.word	0xe000ed04

0800accc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800accc:	b480      	push	{r7}
 800acce:	b083      	sub	sp, #12
 800acd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800acd2:	4b12      	ldr	r3, [pc, #72]	@ (800ad1c <vPortExitCritical+0x50>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d10b      	bne.n	800acf2 <vPortExitCritical+0x26>
	__asm volatile
 800acda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acde:	f383 8811 	msr	BASEPRI, r3
 800ace2:	f3bf 8f6f 	isb	sy
 800ace6:	f3bf 8f4f 	dsb	sy
 800acea:	607b      	str	r3, [r7, #4]
}
 800acec:	bf00      	nop
 800acee:	bf00      	nop
 800acf0:	e7fd      	b.n	800acee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800acf2:	4b0a      	ldr	r3, [pc, #40]	@ (800ad1c <vPortExitCritical+0x50>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	3b01      	subs	r3, #1
 800acf8:	4a08      	ldr	r2, [pc, #32]	@ (800ad1c <vPortExitCritical+0x50>)
 800acfa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800acfc:	4b07      	ldr	r3, [pc, #28]	@ (800ad1c <vPortExitCritical+0x50>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d105      	bne.n	800ad10 <vPortExitCritical+0x44>
 800ad04:	2300      	movs	r3, #0
 800ad06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	f383 8811 	msr	BASEPRI, r3
}
 800ad0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ad10:	bf00      	nop
 800ad12:	370c      	adds	r7, #12
 800ad14:	46bd      	mov	sp, r7
 800ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1a:	4770      	bx	lr
 800ad1c:	2000002c 	.word	0x2000002c

0800ad20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ad20:	f3ef 8009 	mrs	r0, PSP
 800ad24:	f3bf 8f6f 	isb	sy
 800ad28:	4b15      	ldr	r3, [pc, #84]	@ (800ad80 <pxCurrentTCBConst>)
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	f01e 0f10 	tst.w	lr, #16
 800ad30:	bf08      	it	eq
 800ad32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ad36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad3a:	6010      	str	r0, [r2, #0]
 800ad3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ad40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ad44:	f380 8811 	msr	BASEPRI, r0
 800ad48:	f3bf 8f4f 	dsb	sy
 800ad4c:	f3bf 8f6f 	isb	sy
 800ad50:	f7fe ff2e 	bl	8009bb0 <vTaskSwitchContext>
 800ad54:	f04f 0000 	mov.w	r0, #0
 800ad58:	f380 8811 	msr	BASEPRI, r0
 800ad5c:	bc09      	pop	{r0, r3}
 800ad5e:	6819      	ldr	r1, [r3, #0]
 800ad60:	6808      	ldr	r0, [r1, #0]
 800ad62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad66:	f01e 0f10 	tst.w	lr, #16
 800ad6a:	bf08      	it	eq
 800ad6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ad70:	f380 8809 	msr	PSP, r0
 800ad74:	f3bf 8f6f 	isb	sy
 800ad78:	4770      	bx	lr
 800ad7a:	bf00      	nop
 800ad7c:	f3af 8000 	nop.w

0800ad80 <pxCurrentTCBConst>:
 800ad80:	20000cdc 	.word	0x20000cdc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ad84:	bf00      	nop
 800ad86:	bf00      	nop

0800ad88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b082      	sub	sp, #8
 800ad8c:	af00      	add	r7, sp, #0
	__asm volatile
 800ad8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad92:	f383 8811 	msr	BASEPRI, r3
 800ad96:	f3bf 8f6f 	isb	sy
 800ad9a:	f3bf 8f4f 	dsb	sy
 800ad9e:	607b      	str	r3, [r7, #4]
}
 800ada0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ada2:	f7fe fe4b 	bl	8009a3c <xTaskIncrementTick>
 800ada6:	4603      	mov	r3, r0
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d003      	beq.n	800adb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800adac:	4b06      	ldr	r3, [pc, #24]	@ (800adc8 <xPortSysTickHandler+0x40>)
 800adae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800adb2:	601a      	str	r2, [r3, #0]
 800adb4:	2300      	movs	r3, #0
 800adb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	f383 8811 	msr	BASEPRI, r3
}
 800adbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800adc0:	bf00      	nop
 800adc2:	3708      	adds	r7, #8
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}
 800adc8:	e000ed04 	.word	0xe000ed04

0800adcc <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b088      	sub	sp, #32
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 800add4:	4b5d      	ldr	r3, [pc, #372]	@ (800af4c <vPortSuppressTicksAndSleep+0x180>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	687a      	ldr	r2, [r7, #4]
 800adda:	429a      	cmp	r2, r3
 800addc:	d902      	bls.n	800ade4 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800adde:	4b5b      	ldr	r3, [pc, #364]	@ (800af4c <vPortSuppressTicksAndSleep+0x180>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800ade4:	4b5a      	ldr	r3, [pc, #360]	@ (800af50 <vPortSuppressTicksAndSleep+0x184>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	4a59      	ldr	r2, [pc, #356]	@ (800af50 <vPortSuppressTicksAndSleep+0x184>)
 800adea:	f023 0301 	bic.w	r3, r3, #1
 800adee:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800adf0:	4b58      	ldr	r3, [pc, #352]	@ (800af54 <vPortSuppressTicksAndSleep+0x188>)
 800adf2:	681a      	ldr	r2, [r3, #0]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	3b01      	subs	r3, #1
 800adf8:	4957      	ldr	r1, [pc, #348]	@ (800af58 <vPortSuppressTicksAndSleep+0x18c>)
 800adfa:	6809      	ldr	r1, [r1, #0]
 800adfc:	fb01 f303 	mul.w	r3, r1, r3
 800ae00:	4413      	add	r3, r2
 800ae02:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 800ae04:	4b55      	ldr	r3, [pc, #340]	@ (800af5c <vPortSuppressTicksAndSleep+0x190>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	69fa      	ldr	r2, [r7, #28]
 800ae0a:	429a      	cmp	r2, r3
 800ae0c:	d904      	bls.n	800ae18 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800ae0e:	4b53      	ldr	r3, [pc, #332]	@ (800af5c <vPortSuppressTicksAndSleep+0x190>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	69fa      	ldr	r2, [r7, #28]
 800ae14:	1ad3      	subs	r3, r2, r3
 800ae16:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 800ae18:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800ae1a:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800ae1e:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800ae22:	f7ff f8c3 	bl	8009fac <eTaskConfirmSleepModeStatus>
 800ae26:	4603      	mov	r3, r0
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d110      	bne.n	800ae4e <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800ae2c:	4b49      	ldr	r3, [pc, #292]	@ (800af54 <vPortSuppressTicksAndSleep+0x188>)
 800ae2e:	4a4c      	ldr	r2, [pc, #304]	@ (800af60 <vPortSuppressTicksAndSleep+0x194>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800ae34:	4b46      	ldr	r3, [pc, #280]	@ (800af50 <vPortSuppressTicksAndSleep+0x184>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	4a45      	ldr	r2, [pc, #276]	@ (800af50 <vPortSuppressTicksAndSleep+0x184>)
 800ae3a:	f043 0301 	orr.w	r3, r3, #1
 800ae3e:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800ae40:	4b45      	ldr	r3, [pc, #276]	@ (800af58 <vPortSuppressTicksAndSleep+0x18c>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	4a46      	ldr	r2, [pc, #280]	@ (800af60 <vPortSuppressTicksAndSleep+0x194>)
 800ae46:	3b01      	subs	r3, #1
 800ae48:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800ae4a:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800ae4c:	e079      	b.n	800af42 <vPortSuppressTicksAndSleep+0x176>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800ae4e:	4a44      	ldr	r2, [pc, #272]	@ (800af60 <vPortSuppressTicksAndSleep+0x194>)
 800ae50:	69fb      	ldr	r3, [r7, #28]
 800ae52:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ae54:	4b3f      	ldr	r3, [pc, #252]	@ (800af54 <vPortSuppressTicksAndSleep+0x188>)
 800ae56:	2200      	movs	r2, #0
 800ae58:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800ae5a:	4b3d      	ldr	r3, [pc, #244]	@ (800af50 <vPortSuppressTicksAndSleep+0x184>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	4a3c      	ldr	r2, [pc, #240]	@ (800af50 <vPortSuppressTicksAndSleep+0x184>)
 800ae60:	f043 0301 	orr.w	r3, r3, #1
 800ae64:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	613b      	str	r3, [r7, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	613b      	str	r3, [r7, #16]
 800ae6e:	6938      	ldr	r0, [r7, #16]
 800ae70:	f7f7 fa70 	bl	8002354 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d004      	beq.n	800ae84 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 800ae7a:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 800ae7e:	bf30      	wfi
				__asm volatile( "isb" );
 800ae80:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f7f7 fa6f 	bl	8002368 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800ae8a:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800ae8c:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800ae90:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 800ae94:	b672      	cpsid	i
			__asm volatile( "dsb" );
 800ae96:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800ae9a:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800ae9e:	4b2c      	ldr	r3, [pc, #176]	@ (800af50 <vPortSuppressTicksAndSleep+0x184>)
 800aea0:	2206      	movs	r2, #6
 800aea2:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800aea4:	4b2a      	ldr	r3, [pc, #168]	@ (800af50 <vPortSuppressTicksAndSleep+0x184>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d01d      	beq.n	800aeec <vPortSuppressTicksAndSleep+0x120>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800aeb0:	4b29      	ldr	r3, [pc, #164]	@ (800af58 <vPortSuppressTicksAndSleep+0x18c>)
 800aeb2:	681a      	ldr	r2, [r3, #0]
 800aeb4:	4b27      	ldr	r3, [pc, #156]	@ (800af54 <vPortSuppressTicksAndSleep+0x188>)
 800aeb6:	6819      	ldr	r1, [r3, #0]
 800aeb8:	69fb      	ldr	r3, [r7, #28]
 800aeba:	1acb      	subs	r3, r1, r3
 800aebc:	4413      	add	r3, r2
 800aebe:	3b01      	subs	r3, #1
 800aec0:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800aec2:	4b26      	ldr	r3, [pc, #152]	@ (800af5c <vPortSuppressTicksAndSleep+0x190>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	697a      	ldr	r2, [r7, #20]
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d304      	bcc.n	800aed6 <vPortSuppressTicksAndSleep+0x10a>
 800aecc:	4b22      	ldr	r3, [pc, #136]	@ (800af58 <vPortSuppressTicksAndSleep+0x18c>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	697a      	ldr	r2, [r7, #20]
 800aed2:	429a      	cmp	r2, r3
 800aed4:	d903      	bls.n	800aede <vPortSuppressTicksAndSleep+0x112>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 800aed6:	4b20      	ldr	r3, [pc, #128]	@ (800af58 <vPortSuppressTicksAndSleep+0x18c>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	3b01      	subs	r3, #1
 800aedc:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800aede:	4a20      	ldr	r2, [pc, #128]	@ (800af60 <vPortSuppressTicksAndSleep+0x194>)
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	3b01      	subs	r3, #1
 800aee8:	61bb      	str	r3, [r7, #24]
 800aeea:	e018      	b.n	800af1e <vPortSuppressTicksAndSleep+0x152>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800aeec:	4b1a      	ldr	r3, [pc, #104]	@ (800af58 <vPortSuppressTicksAndSleep+0x18c>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	687a      	ldr	r2, [r7, #4]
 800aef2:	fb03 f202 	mul.w	r2, r3, r2
 800aef6:	4b17      	ldr	r3, [pc, #92]	@ (800af54 <vPortSuppressTicksAndSleep+0x188>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	1ad3      	subs	r3, r2, r3
 800aefc:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800aefe:	4b16      	ldr	r3, [pc, #88]	@ (800af58 <vPortSuppressTicksAndSleep+0x18c>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	68fa      	ldr	r2, [r7, #12]
 800af04:	fbb2 f3f3 	udiv	r3, r2, r3
 800af08:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800af0a:	69bb      	ldr	r3, [r7, #24]
 800af0c:	3301      	adds	r3, #1
 800af0e:	4a12      	ldr	r2, [pc, #72]	@ (800af58 <vPortSuppressTicksAndSleep+0x18c>)
 800af10:	6812      	ldr	r2, [r2, #0]
 800af12:	fb03 f202 	mul.w	r2, r3, r2
 800af16:	4912      	ldr	r1, [pc, #72]	@ (800af60 <vPortSuppressTicksAndSleep+0x194>)
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	1ad3      	subs	r3, r2, r3
 800af1c:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800af1e:	4b0d      	ldr	r3, [pc, #52]	@ (800af54 <vPortSuppressTicksAndSleep+0x188>)
 800af20:	2200      	movs	r2, #0
 800af22:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800af24:	4b0a      	ldr	r3, [pc, #40]	@ (800af50 <vPortSuppressTicksAndSleep+0x184>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4a09      	ldr	r2, [pc, #36]	@ (800af50 <vPortSuppressTicksAndSleep+0x184>)
 800af2a:	f043 0301 	orr.w	r3, r3, #1
 800af2e:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 800af30:	69b8      	ldr	r0, [r7, #24]
 800af32:	f7fe fd5b 	bl	80099ec <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800af36:	4b08      	ldr	r3, [pc, #32]	@ (800af58 <vPortSuppressTicksAndSleep+0x18c>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	4a09      	ldr	r2, [pc, #36]	@ (800af60 <vPortSuppressTicksAndSleep+0x194>)
 800af3c:	3b01      	subs	r3, #1
 800af3e:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 800af40:	b662      	cpsie	i
	}
 800af42:	bf00      	nop
 800af44:	3720      	adds	r7, #32
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop
 800af4c:	20001314 	.word	0x20001314
 800af50:	e000e010 	.word	0xe000e010
 800af54:	e000e018 	.word	0xe000e018
 800af58:	20001310 	.word	0x20001310
 800af5c:	20001318 	.word	0x20001318
 800af60:	e000e014 	.word	0xe000e014

0800af64 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800af64:	b480      	push	{r7}
 800af66:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800af68:	4b14      	ldr	r3, [pc, #80]	@ (800afbc <vPortSetupTimerInterrupt+0x58>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	4a14      	ldr	r2, [pc, #80]	@ (800afc0 <vPortSetupTimerInterrupt+0x5c>)
 800af6e:	fba2 2303 	umull	r2, r3, r2, r3
 800af72:	099b      	lsrs	r3, r3, #6
 800af74:	4a13      	ldr	r2, [pc, #76]	@ (800afc4 <vPortSetupTimerInterrupt+0x60>)
 800af76:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800af78:	4b12      	ldr	r3, [pc, #72]	@ (800afc4 <vPortSetupTimerInterrupt+0x60>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800af80:	fbb2 f3f3 	udiv	r3, r2, r3
 800af84:	4a10      	ldr	r2, [pc, #64]	@ (800afc8 <vPortSetupTimerInterrupt+0x64>)
 800af86:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800af88:	4b10      	ldr	r3, [pc, #64]	@ (800afcc <vPortSetupTimerInterrupt+0x68>)
 800af8a:	222d      	movs	r2, #45	@ 0x2d
 800af8c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800af8e:	4b10      	ldr	r3, [pc, #64]	@ (800afd0 <vPortSetupTimerInterrupt+0x6c>)
 800af90:	2200      	movs	r2, #0
 800af92:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800af94:	4b0f      	ldr	r3, [pc, #60]	@ (800afd4 <vPortSetupTimerInterrupt+0x70>)
 800af96:	2200      	movs	r2, #0
 800af98:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800af9a:	4b08      	ldr	r3, [pc, #32]	@ (800afbc <vPortSetupTimerInterrupt+0x58>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	4a08      	ldr	r2, [pc, #32]	@ (800afc0 <vPortSetupTimerInterrupt+0x5c>)
 800afa0:	fba2 2303 	umull	r2, r3, r2, r3
 800afa4:	099b      	lsrs	r3, r3, #6
 800afa6:	4a0c      	ldr	r2, [pc, #48]	@ (800afd8 <vPortSetupTimerInterrupt+0x74>)
 800afa8:	3b01      	subs	r3, #1
 800afaa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800afac:	4b08      	ldr	r3, [pc, #32]	@ (800afd0 <vPortSetupTimerInterrupt+0x6c>)
 800afae:	2207      	movs	r2, #7
 800afb0:	601a      	str	r2, [r3, #0]
}
 800afb2:	bf00      	nop
 800afb4:	46bd      	mov	sp, r7
 800afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afba:	4770      	bx	lr
 800afbc:	20000020 	.word	0x20000020
 800afc0:	10624dd3 	.word	0x10624dd3
 800afc4:	20001310 	.word	0x20001310
 800afc8:	20001314 	.word	0x20001314
 800afcc:	20001318 	.word	0x20001318
 800afd0:	e000e010 	.word	0xe000e010
 800afd4:	e000e018 	.word	0xe000e018
 800afd8:	e000e014 	.word	0xe000e014

0800afdc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800afdc:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800afec <vPortEnableVFP+0x10>
 800afe0:	6801      	ldr	r1, [r0, #0]
 800afe2:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800afe6:	6001      	str	r1, [r0, #0]
 800afe8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800afea:	bf00      	nop
 800afec:	e000ed88 	.word	0xe000ed88

0800aff0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aff0:	b480      	push	{r7}
 800aff2:	b085      	sub	sp, #20
 800aff4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aff6:	f3ef 8305 	mrs	r3, IPSR
 800affa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2b0f      	cmp	r3, #15
 800b000:	d915      	bls.n	800b02e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b002:	4a18      	ldr	r2, [pc, #96]	@ (800b064 <vPortValidateInterruptPriority+0x74>)
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	4413      	add	r3, r2
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b00c:	4b16      	ldr	r3, [pc, #88]	@ (800b068 <vPortValidateInterruptPriority+0x78>)
 800b00e:	781b      	ldrb	r3, [r3, #0]
 800b010:	7afa      	ldrb	r2, [r7, #11]
 800b012:	429a      	cmp	r2, r3
 800b014:	d20b      	bcs.n	800b02e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b01a:	f383 8811 	msr	BASEPRI, r3
 800b01e:	f3bf 8f6f 	isb	sy
 800b022:	f3bf 8f4f 	dsb	sy
 800b026:	607b      	str	r3, [r7, #4]
}
 800b028:	bf00      	nop
 800b02a:	bf00      	nop
 800b02c:	e7fd      	b.n	800b02a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b02e:	4b0f      	ldr	r3, [pc, #60]	@ (800b06c <vPortValidateInterruptPriority+0x7c>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b036:	4b0e      	ldr	r3, [pc, #56]	@ (800b070 <vPortValidateInterruptPriority+0x80>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	429a      	cmp	r2, r3
 800b03c:	d90b      	bls.n	800b056 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b03e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b042:	f383 8811 	msr	BASEPRI, r3
 800b046:	f3bf 8f6f 	isb	sy
 800b04a:	f3bf 8f4f 	dsb	sy
 800b04e:	603b      	str	r3, [r7, #0]
}
 800b050:	bf00      	nop
 800b052:	bf00      	nop
 800b054:	e7fd      	b.n	800b052 <vPortValidateInterruptPriority+0x62>
	}
 800b056:	bf00      	nop
 800b058:	3714      	adds	r7, #20
 800b05a:	46bd      	mov	sp, r7
 800b05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b060:	4770      	bx	lr
 800b062:	bf00      	nop
 800b064:	e000e3f0 	.word	0xe000e3f0
 800b068:	2000131c 	.word	0x2000131c
 800b06c:	e000ed0c 	.word	0xe000ed0c
 800b070:	20001320 	.word	0x20001320

0800b074 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b08a      	sub	sp, #40	@ 0x28
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b07c:	2300      	movs	r3, #0
 800b07e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b080:	f7fe fbc0 	bl	8009804 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b084:	4b5c      	ldr	r3, [pc, #368]	@ (800b1f8 <pvPortMalloc+0x184>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d101      	bne.n	800b090 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b08c:	f000 f924 	bl	800b2d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b090:	4b5a      	ldr	r3, [pc, #360]	@ (800b1fc <pvPortMalloc+0x188>)
 800b092:	681a      	ldr	r2, [r3, #0]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	4013      	ands	r3, r2
 800b098:	2b00      	cmp	r3, #0
 800b09a:	f040 8095 	bne.w	800b1c8 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d01e      	beq.n	800b0e2 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b0a4:	2208      	movs	r2, #8
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	4413      	add	r3, r2
 800b0aa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f003 0307 	and.w	r3, r3, #7
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d015      	beq.n	800b0e2 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f023 0307 	bic.w	r3, r3, #7
 800b0bc:	3308      	adds	r3, #8
 800b0be:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f003 0307 	and.w	r3, r3, #7
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d00b      	beq.n	800b0e2 <pvPortMalloc+0x6e>
	__asm volatile
 800b0ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0ce:	f383 8811 	msr	BASEPRI, r3
 800b0d2:	f3bf 8f6f 	isb	sy
 800b0d6:	f3bf 8f4f 	dsb	sy
 800b0da:	617b      	str	r3, [r7, #20]
}
 800b0dc:	bf00      	nop
 800b0de:	bf00      	nop
 800b0e0:	e7fd      	b.n	800b0de <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d06f      	beq.n	800b1c8 <pvPortMalloc+0x154>
 800b0e8:	4b45      	ldr	r3, [pc, #276]	@ (800b200 <pvPortMalloc+0x18c>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	687a      	ldr	r2, [r7, #4]
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d86a      	bhi.n	800b1c8 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b0f2:	4b44      	ldr	r3, [pc, #272]	@ (800b204 <pvPortMalloc+0x190>)
 800b0f4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b0f6:	4b43      	ldr	r3, [pc, #268]	@ (800b204 <pvPortMalloc+0x190>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b0fc:	e004      	b.n	800b108 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b0fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b100:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b10a:	685b      	ldr	r3, [r3, #4]
 800b10c:	687a      	ldr	r2, [r7, #4]
 800b10e:	429a      	cmp	r2, r3
 800b110:	d903      	bls.n	800b11a <pvPortMalloc+0xa6>
 800b112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d1f1      	bne.n	800b0fe <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b11a:	4b37      	ldr	r3, [pc, #220]	@ (800b1f8 <pvPortMalloc+0x184>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b120:	429a      	cmp	r2, r3
 800b122:	d051      	beq.n	800b1c8 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b124:	6a3b      	ldr	r3, [r7, #32]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	2208      	movs	r2, #8
 800b12a:	4413      	add	r3, r2
 800b12c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b12e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b130:	681a      	ldr	r2, [r3, #0]
 800b132:	6a3b      	ldr	r3, [r7, #32]
 800b134:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b138:	685a      	ldr	r2, [r3, #4]
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	1ad2      	subs	r2, r2, r3
 800b13e:	2308      	movs	r3, #8
 800b140:	005b      	lsls	r3, r3, #1
 800b142:	429a      	cmp	r2, r3
 800b144:	d920      	bls.n	800b188 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	4413      	add	r3, r2
 800b14c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b14e:	69bb      	ldr	r3, [r7, #24]
 800b150:	f003 0307 	and.w	r3, r3, #7
 800b154:	2b00      	cmp	r3, #0
 800b156:	d00b      	beq.n	800b170 <pvPortMalloc+0xfc>
	__asm volatile
 800b158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b15c:	f383 8811 	msr	BASEPRI, r3
 800b160:	f3bf 8f6f 	isb	sy
 800b164:	f3bf 8f4f 	dsb	sy
 800b168:	613b      	str	r3, [r7, #16]
}
 800b16a:	bf00      	nop
 800b16c:	bf00      	nop
 800b16e:	e7fd      	b.n	800b16c <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b172:	685a      	ldr	r2, [r3, #4]
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	1ad2      	subs	r2, r2, r3
 800b178:	69bb      	ldr	r3, [r7, #24]
 800b17a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b17c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b17e:	687a      	ldr	r2, [r7, #4]
 800b180:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b182:	69b8      	ldr	r0, [r7, #24]
 800b184:	f000 f90a 	bl	800b39c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b188:	4b1d      	ldr	r3, [pc, #116]	@ (800b200 <pvPortMalloc+0x18c>)
 800b18a:	681a      	ldr	r2, [r3, #0]
 800b18c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b18e:	685b      	ldr	r3, [r3, #4]
 800b190:	1ad3      	subs	r3, r2, r3
 800b192:	4a1b      	ldr	r2, [pc, #108]	@ (800b200 <pvPortMalloc+0x18c>)
 800b194:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b196:	4b1a      	ldr	r3, [pc, #104]	@ (800b200 <pvPortMalloc+0x18c>)
 800b198:	681a      	ldr	r2, [r3, #0]
 800b19a:	4b1b      	ldr	r3, [pc, #108]	@ (800b208 <pvPortMalloc+0x194>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	429a      	cmp	r2, r3
 800b1a0:	d203      	bcs.n	800b1aa <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b1a2:	4b17      	ldr	r3, [pc, #92]	@ (800b200 <pvPortMalloc+0x18c>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	4a18      	ldr	r2, [pc, #96]	@ (800b208 <pvPortMalloc+0x194>)
 800b1a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b1aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1ac:	685a      	ldr	r2, [r3, #4]
 800b1ae:	4b13      	ldr	r3, [pc, #76]	@ (800b1fc <pvPortMalloc+0x188>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	431a      	orrs	r2, r3
 800b1b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b1b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b1be:	4b13      	ldr	r3, [pc, #76]	@ (800b20c <pvPortMalloc+0x198>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	3301      	adds	r3, #1
 800b1c4:	4a11      	ldr	r2, [pc, #68]	@ (800b20c <pvPortMalloc+0x198>)
 800b1c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b1c8:	f7fe fb62 	bl	8009890 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b1cc:	69fb      	ldr	r3, [r7, #28]
 800b1ce:	f003 0307 	and.w	r3, r3, #7
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d00b      	beq.n	800b1ee <pvPortMalloc+0x17a>
	__asm volatile
 800b1d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1da:	f383 8811 	msr	BASEPRI, r3
 800b1de:	f3bf 8f6f 	isb	sy
 800b1e2:	f3bf 8f4f 	dsb	sy
 800b1e6:	60fb      	str	r3, [r7, #12]
}
 800b1e8:	bf00      	nop
 800b1ea:	bf00      	nop
 800b1ec:	e7fd      	b.n	800b1ea <pvPortMalloc+0x176>
	return pvReturn;
 800b1ee:	69fb      	ldr	r3, [r7, #28]
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3728      	adds	r7, #40	@ 0x28
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}
 800b1f8:	20004f2c 	.word	0x20004f2c
 800b1fc:	20004f40 	.word	0x20004f40
 800b200:	20004f30 	.word	0x20004f30
 800b204:	20004f24 	.word	0x20004f24
 800b208:	20004f34 	.word	0x20004f34
 800b20c:	20004f38 	.word	0x20004f38

0800b210 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b086      	sub	sp, #24
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d04f      	beq.n	800b2c2 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b222:	2308      	movs	r3, #8
 800b224:	425b      	negs	r3, r3
 800b226:	697a      	ldr	r2, [r7, #20]
 800b228:	4413      	add	r3, r2
 800b22a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b22c:	697b      	ldr	r3, [r7, #20]
 800b22e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b230:	693b      	ldr	r3, [r7, #16]
 800b232:	685a      	ldr	r2, [r3, #4]
 800b234:	4b25      	ldr	r3, [pc, #148]	@ (800b2cc <vPortFree+0xbc>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	4013      	ands	r3, r2
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d10b      	bne.n	800b256 <vPortFree+0x46>
	__asm volatile
 800b23e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b242:	f383 8811 	msr	BASEPRI, r3
 800b246:	f3bf 8f6f 	isb	sy
 800b24a:	f3bf 8f4f 	dsb	sy
 800b24e:	60fb      	str	r3, [r7, #12]
}
 800b250:	bf00      	nop
 800b252:	bf00      	nop
 800b254:	e7fd      	b.n	800b252 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b256:	693b      	ldr	r3, [r7, #16]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d00b      	beq.n	800b276 <vPortFree+0x66>
	__asm volatile
 800b25e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b262:	f383 8811 	msr	BASEPRI, r3
 800b266:	f3bf 8f6f 	isb	sy
 800b26a:	f3bf 8f4f 	dsb	sy
 800b26e:	60bb      	str	r3, [r7, #8]
}
 800b270:	bf00      	nop
 800b272:	bf00      	nop
 800b274:	e7fd      	b.n	800b272 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	685a      	ldr	r2, [r3, #4]
 800b27a:	4b14      	ldr	r3, [pc, #80]	@ (800b2cc <vPortFree+0xbc>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	4013      	ands	r3, r2
 800b280:	2b00      	cmp	r3, #0
 800b282:	d01e      	beq.n	800b2c2 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d11a      	bne.n	800b2c2 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	685a      	ldr	r2, [r3, #4]
 800b290:	4b0e      	ldr	r3, [pc, #56]	@ (800b2cc <vPortFree+0xbc>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	43db      	mvns	r3, r3
 800b296:	401a      	ands	r2, r3
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b29c:	f7fe fab2 	bl	8009804 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	685a      	ldr	r2, [r3, #4]
 800b2a4:	4b0a      	ldr	r3, [pc, #40]	@ (800b2d0 <vPortFree+0xc0>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	4413      	add	r3, r2
 800b2aa:	4a09      	ldr	r2, [pc, #36]	@ (800b2d0 <vPortFree+0xc0>)
 800b2ac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b2ae:	6938      	ldr	r0, [r7, #16]
 800b2b0:	f000 f874 	bl	800b39c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b2b4:	4b07      	ldr	r3, [pc, #28]	@ (800b2d4 <vPortFree+0xc4>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	3301      	adds	r3, #1
 800b2ba:	4a06      	ldr	r2, [pc, #24]	@ (800b2d4 <vPortFree+0xc4>)
 800b2bc:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b2be:	f7fe fae7 	bl	8009890 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b2c2:	bf00      	nop
 800b2c4:	3718      	adds	r7, #24
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}
 800b2ca:	bf00      	nop
 800b2cc:	20004f40 	.word	0x20004f40
 800b2d0:	20004f30 	.word	0x20004f30
 800b2d4:	20004f3c 	.word	0x20004f3c

0800b2d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b085      	sub	sp, #20
 800b2dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b2de:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800b2e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b2e4:	4b27      	ldr	r3, [pc, #156]	@ (800b384 <prvHeapInit+0xac>)
 800b2e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	f003 0307 	and.w	r3, r3, #7
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d00c      	beq.n	800b30c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	3307      	adds	r3, #7
 800b2f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	f023 0307 	bic.w	r3, r3, #7
 800b2fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b300:	68ba      	ldr	r2, [r7, #8]
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	1ad3      	subs	r3, r2, r3
 800b306:	4a1f      	ldr	r2, [pc, #124]	@ (800b384 <prvHeapInit+0xac>)
 800b308:	4413      	add	r3, r2
 800b30a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b310:	4a1d      	ldr	r2, [pc, #116]	@ (800b388 <prvHeapInit+0xb0>)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b316:	4b1c      	ldr	r3, [pc, #112]	@ (800b388 <prvHeapInit+0xb0>)
 800b318:	2200      	movs	r2, #0
 800b31a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	68ba      	ldr	r2, [r7, #8]
 800b320:	4413      	add	r3, r2
 800b322:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b324:	2208      	movs	r2, #8
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	1a9b      	subs	r3, r3, r2
 800b32a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	f023 0307 	bic.w	r3, r3, #7
 800b332:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	4a15      	ldr	r2, [pc, #84]	@ (800b38c <prvHeapInit+0xb4>)
 800b338:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b33a:	4b14      	ldr	r3, [pc, #80]	@ (800b38c <prvHeapInit+0xb4>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	2200      	movs	r2, #0
 800b340:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b342:	4b12      	ldr	r3, [pc, #72]	@ (800b38c <prvHeapInit+0xb4>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	2200      	movs	r2, #0
 800b348:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	68fa      	ldr	r2, [r7, #12]
 800b352:	1ad2      	subs	r2, r2, r3
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b358:	4b0c      	ldr	r3, [pc, #48]	@ (800b38c <prvHeapInit+0xb4>)
 800b35a:	681a      	ldr	r2, [r3, #0]
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	685b      	ldr	r3, [r3, #4]
 800b364:	4a0a      	ldr	r2, [pc, #40]	@ (800b390 <prvHeapInit+0xb8>)
 800b366:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	685b      	ldr	r3, [r3, #4]
 800b36c:	4a09      	ldr	r2, [pc, #36]	@ (800b394 <prvHeapInit+0xbc>)
 800b36e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b370:	4b09      	ldr	r3, [pc, #36]	@ (800b398 <prvHeapInit+0xc0>)
 800b372:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b376:	601a      	str	r2, [r3, #0]
}
 800b378:	bf00      	nop
 800b37a:	3714      	adds	r7, #20
 800b37c:	46bd      	mov	sp, r7
 800b37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b382:	4770      	bx	lr
 800b384:	20001324 	.word	0x20001324
 800b388:	20004f24 	.word	0x20004f24
 800b38c:	20004f2c 	.word	0x20004f2c
 800b390:	20004f34 	.word	0x20004f34
 800b394:	20004f30 	.word	0x20004f30
 800b398:	20004f40 	.word	0x20004f40

0800b39c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b39c:	b480      	push	{r7}
 800b39e:	b085      	sub	sp, #20
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b3a4:	4b28      	ldr	r3, [pc, #160]	@ (800b448 <prvInsertBlockIntoFreeList+0xac>)
 800b3a6:	60fb      	str	r3, [r7, #12]
 800b3a8:	e002      	b.n	800b3b0 <prvInsertBlockIntoFreeList+0x14>
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	60fb      	str	r3, [r7, #12]
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	687a      	ldr	r2, [r7, #4]
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d8f7      	bhi.n	800b3aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	685b      	ldr	r3, [r3, #4]
 800b3c2:	68ba      	ldr	r2, [r7, #8]
 800b3c4:	4413      	add	r3, r2
 800b3c6:	687a      	ldr	r2, [r7, #4]
 800b3c8:	429a      	cmp	r2, r3
 800b3ca:	d108      	bne.n	800b3de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	685a      	ldr	r2, [r3, #4]
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	441a      	add	r2, r3
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	68ba      	ldr	r2, [r7, #8]
 800b3e8:	441a      	add	r2, r3
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	429a      	cmp	r2, r3
 800b3f0:	d118      	bne.n	800b424 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	681a      	ldr	r2, [r3, #0]
 800b3f6:	4b15      	ldr	r3, [pc, #84]	@ (800b44c <prvInsertBlockIntoFreeList+0xb0>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d00d      	beq.n	800b41a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	685a      	ldr	r2, [r3, #4]
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	685b      	ldr	r3, [r3, #4]
 800b408:	441a      	add	r2, r3
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	681a      	ldr	r2, [r3, #0]
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	601a      	str	r2, [r3, #0]
 800b418:	e008      	b.n	800b42c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b41a:	4b0c      	ldr	r3, [pc, #48]	@ (800b44c <prvInsertBlockIntoFreeList+0xb0>)
 800b41c:	681a      	ldr	r2, [r3, #0]
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	601a      	str	r2, [r3, #0]
 800b422:	e003      	b.n	800b42c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	681a      	ldr	r2, [r3, #0]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b42c:	68fa      	ldr	r2, [r7, #12]
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	429a      	cmp	r2, r3
 800b432:	d002      	beq.n	800b43a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	687a      	ldr	r2, [r7, #4]
 800b438:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b43a:	bf00      	nop
 800b43c:	3714      	adds	r7, #20
 800b43e:	46bd      	mov	sp, r7
 800b440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b444:	4770      	bx	lr
 800b446:	bf00      	nop
 800b448:	20004f24 	.word	0x20004f24
 800b44c:	20004f2c 	.word	0x20004f2c

0800b450 <__cvt>:
 800b450:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b454:	ec57 6b10 	vmov	r6, r7, d0
 800b458:	2f00      	cmp	r7, #0
 800b45a:	460c      	mov	r4, r1
 800b45c:	4619      	mov	r1, r3
 800b45e:	463b      	mov	r3, r7
 800b460:	bfbb      	ittet	lt
 800b462:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b466:	461f      	movlt	r7, r3
 800b468:	2300      	movge	r3, #0
 800b46a:	232d      	movlt	r3, #45	@ 0x2d
 800b46c:	700b      	strb	r3, [r1, #0]
 800b46e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b470:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b474:	4691      	mov	r9, r2
 800b476:	f023 0820 	bic.w	r8, r3, #32
 800b47a:	bfbc      	itt	lt
 800b47c:	4632      	movlt	r2, r6
 800b47e:	4616      	movlt	r6, r2
 800b480:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b484:	d005      	beq.n	800b492 <__cvt+0x42>
 800b486:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b48a:	d100      	bne.n	800b48e <__cvt+0x3e>
 800b48c:	3401      	adds	r4, #1
 800b48e:	2102      	movs	r1, #2
 800b490:	e000      	b.n	800b494 <__cvt+0x44>
 800b492:	2103      	movs	r1, #3
 800b494:	ab03      	add	r3, sp, #12
 800b496:	9301      	str	r3, [sp, #4]
 800b498:	ab02      	add	r3, sp, #8
 800b49a:	9300      	str	r3, [sp, #0]
 800b49c:	ec47 6b10 	vmov	d0, r6, r7
 800b4a0:	4653      	mov	r3, sl
 800b4a2:	4622      	mov	r2, r4
 800b4a4:	f000 ffd8 	bl	800c458 <_dtoa_r>
 800b4a8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b4ac:	4605      	mov	r5, r0
 800b4ae:	d119      	bne.n	800b4e4 <__cvt+0x94>
 800b4b0:	f019 0f01 	tst.w	r9, #1
 800b4b4:	d00e      	beq.n	800b4d4 <__cvt+0x84>
 800b4b6:	eb00 0904 	add.w	r9, r0, r4
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	2300      	movs	r3, #0
 800b4be:	4630      	mov	r0, r6
 800b4c0:	4639      	mov	r1, r7
 800b4c2:	f7f5 fb09 	bl	8000ad8 <__aeabi_dcmpeq>
 800b4c6:	b108      	cbz	r0, 800b4cc <__cvt+0x7c>
 800b4c8:	f8cd 900c 	str.w	r9, [sp, #12]
 800b4cc:	2230      	movs	r2, #48	@ 0x30
 800b4ce:	9b03      	ldr	r3, [sp, #12]
 800b4d0:	454b      	cmp	r3, r9
 800b4d2:	d31e      	bcc.n	800b512 <__cvt+0xc2>
 800b4d4:	9b03      	ldr	r3, [sp, #12]
 800b4d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b4d8:	1b5b      	subs	r3, r3, r5
 800b4da:	4628      	mov	r0, r5
 800b4dc:	6013      	str	r3, [r2, #0]
 800b4de:	b004      	add	sp, #16
 800b4e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4e4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b4e8:	eb00 0904 	add.w	r9, r0, r4
 800b4ec:	d1e5      	bne.n	800b4ba <__cvt+0x6a>
 800b4ee:	7803      	ldrb	r3, [r0, #0]
 800b4f0:	2b30      	cmp	r3, #48	@ 0x30
 800b4f2:	d10a      	bne.n	800b50a <__cvt+0xba>
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	4630      	mov	r0, r6
 800b4fa:	4639      	mov	r1, r7
 800b4fc:	f7f5 faec 	bl	8000ad8 <__aeabi_dcmpeq>
 800b500:	b918      	cbnz	r0, 800b50a <__cvt+0xba>
 800b502:	f1c4 0401 	rsb	r4, r4, #1
 800b506:	f8ca 4000 	str.w	r4, [sl]
 800b50a:	f8da 3000 	ldr.w	r3, [sl]
 800b50e:	4499      	add	r9, r3
 800b510:	e7d3      	b.n	800b4ba <__cvt+0x6a>
 800b512:	1c59      	adds	r1, r3, #1
 800b514:	9103      	str	r1, [sp, #12]
 800b516:	701a      	strb	r2, [r3, #0]
 800b518:	e7d9      	b.n	800b4ce <__cvt+0x7e>

0800b51a <__exponent>:
 800b51a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b51c:	2900      	cmp	r1, #0
 800b51e:	bfba      	itte	lt
 800b520:	4249      	neglt	r1, r1
 800b522:	232d      	movlt	r3, #45	@ 0x2d
 800b524:	232b      	movge	r3, #43	@ 0x2b
 800b526:	2909      	cmp	r1, #9
 800b528:	7002      	strb	r2, [r0, #0]
 800b52a:	7043      	strb	r3, [r0, #1]
 800b52c:	dd29      	ble.n	800b582 <__exponent+0x68>
 800b52e:	f10d 0307 	add.w	r3, sp, #7
 800b532:	461d      	mov	r5, r3
 800b534:	270a      	movs	r7, #10
 800b536:	461a      	mov	r2, r3
 800b538:	fbb1 f6f7 	udiv	r6, r1, r7
 800b53c:	fb07 1416 	mls	r4, r7, r6, r1
 800b540:	3430      	adds	r4, #48	@ 0x30
 800b542:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b546:	460c      	mov	r4, r1
 800b548:	2c63      	cmp	r4, #99	@ 0x63
 800b54a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800b54e:	4631      	mov	r1, r6
 800b550:	dcf1      	bgt.n	800b536 <__exponent+0x1c>
 800b552:	3130      	adds	r1, #48	@ 0x30
 800b554:	1e94      	subs	r4, r2, #2
 800b556:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b55a:	1c41      	adds	r1, r0, #1
 800b55c:	4623      	mov	r3, r4
 800b55e:	42ab      	cmp	r3, r5
 800b560:	d30a      	bcc.n	800b578 <__exponent+0x5e>
 800b562:	f10d 0309 	add.w	r3, sp, #9
 800b566:	1a9b      	subs	r3, r3, r2
 800b568:	42ac      	cmp	r4, r5
 800b56a:	bf88      	it	hi
 800b56c:	2300      	movhi	r3, #0
 800b56e:	3302      	adds	r3, #2
 800b570:	4403      	add	r3, r0
 800b572:	1a18      	subs	r0, r3, r0
 800b574:	b003      	add	sp, #12
 800b576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b578:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b57c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b580:	e7ed      	b.n	800b55e <__exponent+0x44>
 800b582:	2330      	movs	r3, #48	@ 0x30
 800b584:	3130      	adds	r1, #48	@ 0x30
 800b586:	7083      	strb	r3, [r0, #2]
 800b588:	70c1      	strb	r1, [r0, #3]
 800b58a:	1d03      	adds	r3, r0, #4
 800b58c:	e7f1      	b.n	800b572 <__exponent+0x58>
	...

0800b590 <_printf_float>:
 800b590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b594:	b08d      	sub	sp, #52	@ 0x34
 800b596:	460c      	mov	r4, r1
 800b598:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b59c:	4616      	mov	r6, r2
 800b59e:	461f      	mov	r7, r3
 800b5a0:	4605      	mov	r5, r0
 800b5a2:	f000 fdf3 	bl	800c18c <_localeconv_r>
 800b5a6:	6803      	ldr	r3, [r0, #0]
 800b5a8:	9304      	str	r3, [sp, #16]
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f7f4 fe68 	bl	8000280 <strlen>
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b5b4:	f8d8 3000 	ldr.w	r3, [r8]
 800b5b8:	9005      	str	r0, [sp, #20]
 800b5ba:	3307      	adds	r3, #7
 800b5bc:	f023 0307 	bic.w	r3, r3, #7
 800b5c0:	f103 0208 	add.w	r2, r3, #8
 800b5c4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b5c8:	f8d4 b000 	ldr.w	fp, [r4]
 800b5cc:	f8c8 2000 	str.w	r2, [r8]
 800b5d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b5d4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b5d8:	9307      	str	r3, [sp, #28]
 800b5da:	f8cd 8018 	str.w	r8, [sp, #24]
 800b5de:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b5e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b5e6:	4b9c      	ldr	r3, [pc, #624]	@ (800b858 <_printf_float+0x2c8>)
 800b5e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b5ec:	f7f5 faa6 	bl	8000b3c <__aeabi_dcmpun>
 800b5f0:	bb70      	cbnz	r0, 800b650 <_printf_float+0xc0>
 800b5f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b5f6:	4b98      	ldr	r3, [pc, #608]	@ (800b858 <_printf_float+0x2c8>)
 800b5f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b5fc:	f7f5 fa80 	bl	8000b00 <__aeabi_dcmple>
 800b600:	bb30      	cbnz	r0, 800b650 <_printf_float+0xc0>
 800b602:	2200      	movs	r2, #0
 800b604:	2300      	movs	r3, #0
 800b606:	4640      	mov	r0, r8
 800b608:	4649      	mov	r1, r9
 800b60a:	f7f5 fa6f 	bl	8000aec <__aeabi_dcmplt>
 800b60e:	b110      	cbz	r0, 800b616 <_printf_float+0x86>
 800b610:	232d      	movs	r3, #45	@ 0x2d
 800b612:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b616:	4a91      	ldr	r2, [pc, #580]	@ (800b85c <_printf_float+0x2cc>)
 800b618:	4b91      	ldr	r3, [pc, #580]	@ (800b860 <_printf_float+0x2d0>)
 800b61a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b61e:	bf94      	ite	ls
 800b620:	4690      	movls	r8, r2
 800b622:	4698      	movhi	r8, r3
 800b624:	2303      	movs	r3, #3
 800b626:	6123      	str	r3, [r4, #16]
 800b628:	f02b 0304 	bic.w	r3, fp, #4
 800b62c:	6023      	str	r3, [r4, #0]
 800b62e:	f04f 0900 	mov.w	r9, #0
 800b632:	9700      	str	r7, [sp, #0]
 800b634:	4633      	mov	r3, r6
 800b636:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b638:	4621      	mov	r1, r4
 800b63a:	4628      	mov	r0, r5
 800b63c:	f000 f9d2 	bl	800b9e4 <_printf_common>
 800b640:	3001      	adds	r0, #1
 800b642:	f040 808d 	bne.w	800b760 <_printf_float+0x1d0>
 800b646:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b64a:	b00d      	add	sp, #52	@ 0x34
 800b64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b650:	4642      	mov	r2, r8
 800b652:	464b      	mov	r3, r9
 800b654:	4640      	mov	r0, r8
 800b656:	4649      	mov	r1, r9
 800b658:	f7f5 fa70 	bl	8000b3c <__aeabi_dcmpun>
 800b65c:	b140      	cbz	r0, 800b670 <_printf_float+0xe0>
 800b65e:	464b      	mov	r3, r9
 800b660:	2b00      	cmp	r3, #0
 800b662:	bfbc      	itt	lt
 800b664:	232d      	movlt	r3, #45	@ 0x2d
 800b666:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b66a:	4a7e      	ldr	r2, [pc, #504]	@ (800b864 <_printf_float+0x2d4>)
 800b66c:	4b7e      	ldr	r3, [pc, #504]	@ (800b868 <_printf_float+0x2d8>)
 800b66e:	e7d4      	b.n	800b61a <_printf_float+0x8a>
 800b670:	6863      	ldr	r3, [r4, #4]
 800b672:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b676:	9206      	str	r2, [sp, #24]
 800b678:	1c5a      	adds	r2, r3, #1
 800b67a:	d13b      	bne.n	800b6f4 <_printf_float+0x164>
 800b67c:	2306      	movs	r3, #6
 800b67e:	6063      	str	r3, [r4, #4]
 800b680:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b684:	2300      	movs	r3, #0
 800b686:	6022      	str	r2, [r4, #0]
 800b688:	9303      	str	r3, [sp, #12]
 800b68a:	ab0a      	add	r3, sp, #40	@ 0x28
 800b68c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b690:	ab09      	add	r3, sp, #36	@ 0x24
 800b692:	9300      	str	r3, [sp, #0]
 800b694:	6861      	ldr	r1, [r4, #4]
 800b696:	ec49 8b10 	vmov	d0, r8, r9
 800b69a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b69e:	4628      	mov	r0, r5
 800b6a0:	f7ff fed6 	bl	800b450 <__cvt>
 800b6a4:	9b06      	ldr	r3, [sp, #24]
 800b6a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b6a8:	2b47      	cmp	r3, #71	@ 0x47
 800b6aa:	4680      	mov	r8, r0
 800b6ac:	d129      	bne.n	800b702 <_printf_float+0x172>
 800b6ae:	1cc8      	adds	r0, r1, #3
 800b6b0:	db02      	blt.n	800b6b8 <_printf_float+0x128>
 800b6b2:	6863      	ldr	r3, [r4, #4]
 800b6b4:	4299      	cmp	r1, r3
 800b6b6:	dd41      	ble.n	800b73c <_printf_float+0x1ac>
 800b6b8:	f1aa 0a02 	sub.w	sl, sl, #2
 800b6bc:	fa5f fa8a 	uxtb.w	sl, sl
 800b6c0:	3901      	subs	r1, #1
 800b6c2:	4652      	mov	r2, sl
 800b6c4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b6c8:	9109      	str	r1, [sp, #36]	@ 0x24
 800b6ca:	f7ff ff26 	bl	800b51a <__exponent>
 800b6ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b6d0:	1813      	adds	r3, r2, r0
 800b6d2:	2a01      	cmp	r2, #1
 800b6d4:	4681      	mov	r9, r0
 800b6d6:	6123      	str	r3, [r4, #16]
 800b6d8:	dc02      	bgt.n	800b6e0 <_printf_float+0x150>
 800b6da:	6822      	ldr	r2, [r4, #0]
 800b6dc:	07d2      	lsls	r2, r2, #31
 800b6de:	d501      	bpl.n	800b6e4 <_printf_float+0x154>
 800b6e0:	3301      	adds	r3, #1
 800b6e2:	6123      	str	r3, [r4, #16]
 800b6e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d0a2      	beq.n	800b632 <_printf_float+0xa2>
 800b6ec:	232d      	movs	r3, #45	@ 0x2d
 800b6ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b6f2:	e79e      	b.n	800b632 <_printf_float+0xa2>
 800b6f4:	9a06      	ldr	r2, [sp, #24]
 800b6f6:	2a47      	cmp	r2, #71	@ 0x47
 800b6f8:	d1c2      	bne.n	800b680 <_printf_float+0xf0>
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d1c0      	bne.n	800b680 <_printf_float+0xf0>
 800b6fe:	2301      	movs	r3, #1
 800b700:	e7bd      	b.n	800b67e <_printf_float+0xee>
 800b702:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b706:	d9db      	bls.n	800b6c0 <_printf_float+0x130>
 800b708:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b70c:	d118      	bne.n	800b740 <_printf_float+0x1b0>
 800b70e:	2900      	cmp	r1, #0
 800b710:	6863      	ldr	r3, [r4, #4]
 800b712:	dd0b      	ble.n	800b72c <_printf_float+0x19c>
 800b714:	6121      	str	r1, [r4, #16]
 800b716:	b913      	cbnz	r3, 800b71e <_printf_float+0x18e>
 800b718:	6822      	ldr	r2, [r4, #0]
 800b71a:	07d0      	lsls	r0, r2, #31
 800b71c:	d502      	bpl.n	800b724 <_printf_float+0x194>
 800b71e:	3301      	adds	r3, #1
 800b720:	440b      	add	r3, r1
 800b722:	6123      	str	r3, [r4, #16]
 800b724:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b726:	f04f 0900 	mov.w	r9, #0
 800b72a:	e7db      	b.n	800b6e4 <_printf_float+0x154>
 800b72c:	b913      	cbnz	r3, 800b734 <_printf_float+0x1a4>
 800b72e:	6822      	ldr	r2, [r4, #0]
 800b730:	07d2      	lsls	r2, r2, #31
 800b732:	d501      	bpl.n	800b738 <_printf_float+0x1a8>
 800b734:	3302      	adds	r3, #2
 800b736:	e7f4      	b.n	800b722 <_printf_float+0x192>
 800b738:	2301      	movs	r3, #1
 800b73a:	e7f2      	b.n	800b722 <_printf_float+0x192>
 800b73c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b740:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b742:	4299      	cmp	r1, r3
 800b744:	db05      	blt.n	800b752 <_printf_float+0x1c2>
 800b746:	6823      	ldr	r3, [r4, #0]
 800b748:	6121      	str	r1, [r4, #16]
 800b74a:	07d8      	lsls	r0, r3, #31
 800b74c:	d5ea      	bpl.n	800b724 <_printf_float+0x194>
 800b74e:	1c4b      	adds	r3, r1, #1
 800b750:	e7e7      	b.n	800b722 <_printf_float+0x192>
 800b752:	2900      	cmp	r1, #0
 800b754:	bfd4      	ite	le
 800b756:	f1c1 0202 	rsble	r2, r1, #2
 800b75a:	2201      	movgt	r2, #1
 800b75c:	4413      	add	r3, r2
 800b75e:	e7e0      	b.n	800b722 <_printf_float+0x192>
 800b760:	6823      	ldr	r3, [r4, #0]
 800b762:	055a      	lsls	r2, r3, #21
 800b764:	d407      	bmi.n	800b776 <_printf_float+0x1e6>
 800b766:	6923      	ldr	r3, [r4, #16]
 800b768:	4642      	mov	r2, r8
 800b76a:	4631      	mov	r1, r6
 800b76c:	4628      	mov	r0, r5
 800b76e:	47b8      	blx	r7
 800b770:	3001      	adds	r0, #1
 800b772:	d12b      	bne.n	800b7cc <_printf_float+0x23c>
 800b774:	e767      	b.n	800b646 <_printf_float+0xb6>
 800b776:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b77a:	f240 80dd 	bls.w	800b938 <_printf_float+0x3a8>
 800b77e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b782:	2200      	movs	r2, #0
 800b784:	2300      	movs	r3, #0
 800b786:	f7f5 f9a7 	bl	8000ad8 <__aeabi_dcmpeq>
 800b78a:	2800      	cmp	r0, #0
 800b78c:	d033      	beq.n	800b7f6 <_printf_float+0x266>
 800b78e:	4a37      	ldr	r2, [pc, #220]	@ (800b86c <_printf_float+0x2dc>)
 800b790:	2301      	movs	r3, #1
 800b792:	4631      	mov	r1, r6
 800b794:	4628      	mov	r0, r5
 800b796:	47b8      	blx	r7
 800b798:	3001      	adds	r0, #1
 800b79a:	f43f af54 	beq.w	800b646 <_printf_float+0xb6>
 800b79e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b7a2:	4543      	cmp	r3, r8
 800b7a4:	db02      	blt.n	800b7ac <_printf_float+0x21c>
 800b7a6:	6823      	ldr	r3, [r4, #0]
 800b7a8:	07d8      	lsls	r0, r3, #31
 800b7aa:	d50f      	bpl.n	800b7cc <_printf_float+0x23c>
 800b7ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b7b0:	4631      	mov	r1, r6
 800b7b2:	4628      	mov	r0, r5
 800b7b4:	47b8      	blx	r7
 800b7b6:	3001      	adds	r0, #1
 800b7b8:	f43f af45 	beq.w	800b646 <_printf_float+0xb6>
 800b7bc:	f04f 0900 	mov.w	r9, #0
 800b7c0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b7c4:	f104 0a1a 	add.w	sl, r4, #26
 800b7c8:	45c8      	cmp	r8, r9
 800b7ca:	dc09      	bgt.n	800b7e0 <_printf_float+0x250>
 800b7cc:	6823      	ldr	r3, [r4, #0]
 800b7ce:	079b      	lsls	r3, r3, #30
 800b7d0:	f100 8103 	bmi.w	800b9da <_printf_float+0x44a>
 800b7d4:	68e0      	ldr	r0, [r4, #12]
 800b7d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b7d8:	4298      	cmp	r0, r3
 800b7da:	bfb8      	it	lt
 800b7dc:	4618      	movlt	r0, r3
 800b7de:	e734      	b.n	800b64a <_printf_float+0xba>
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	4652      	mov	r2, sl
 800b7e4:	4631      	mov	r1, r6
 800b7e6:	4628      	mov	r0, r5
 800b7e8:	47b8      	blx	r7
 800b7ea:	3001      	adds	r0, #1
 800b7ec:	f43f af2b 	beq.w	800b646 <_printf_float+0xb6>
 800b7f0:	f109 0901 	add.w	r9, r9, #1
 800b7f4:	e7e8      	b.n	800b7c8 <_printf_float+0x238>
 800b7f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	dc39      	bgt.n	800b870 <_printf_float+0x2e0>
 800b7fc:	4a1b      	ldr	r2, [pc, #108]	@ (800b86c <_printf_float+0x2dc>)
 800b7fe:	2301      	movs	r3, #1
 800b800:	4631      	mov	r1, r6
 800b802:	4628      	mov	r0, r5
 800b804:	47b8      	blx	r7
 800b806:	3001      	adds	r0, #1
 800b808:	f43f af1d 	beq.w	800b646 <_printf_float+0xb6>
 800b80c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b810:	ea59 0303 	orrs.w	r3, r9, r3
 800b814:	d102      	bne.n	800b81c <_printf_float+0x28c>
 800b816:	6823      	ldr	r3, [r4, #0]
 800b818:	07d9      	lsls	r1, r3, #31
 800b81a:	d5d7      	bpl.n	800b7cc <_printf_float+0x23c>
 800b81c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b820:	4631      	mov	r1, r6
 800b822:	4628      	mov	r0, r5
 800b824:	47b8      	blx	r7
 800b826:	3001      	adds	r0, #1
 800b828:	f43f af0d 	beq.w	800b646 <_printf_float+0xb6>
 800b82c:	f04f 0a00 	mov.w	sl, #0
 800b830:	f104 0b1a 	add.w	fp, r4, #26
 800b834:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b836:	425b      	negs	r3, r3
 800b838:	4553      	cmp	r3, sl
 800b83a:	dc01      	bgt.n	800b840 <_printf_float+0x2b0>
 800b83c:	464b      	mov	r3, r9
 800b83e:	e793      	b.n	800b768 <_printf_float+0x1d8>
 800b840:	2301      	movs	r3, #1
 800b842:	465a      	mov	r2, fp
 800b844:	4631      	mov	r1, r6
 800b846:	4628      	mov	r0, r5
 800b848:	47b8      	blx	r7
 800b84a:	3001      	adds	r0, #1
 800b84c:	f43f aefb 	beq.w	800b646 <_printf_float+0xb6>
 800b850:	f10a 0a01 	add.w	sl, sl, #1
 800b854:	e7ee      	b.n	800b834 <_printf_float+0x2a4>
 800b856:	bf00      	nop
 800b858:	7fefffff 	.word	0x7fefffff
 800b85c:	0800e7e0 	.word	0x0800e7e0
 800b860:	0800e7e4 	.word	0x0800e7e4
 800b864:	0800e7e8 	.word	0x0800e7e8
 800b868:	0800e7ec 	.word	0x0800e7ec
 800b86c:	0800e7f0 	.word	0x0800e7f0
 800b870:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b872:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b876:	4553      	cmp	r3, sl
 800b878:	bfa8      	it	ge
 800b87a:	4653      	movge	r3, sl
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	4699      	mov	r9, r3
 800b880:	dc36      	bgt.n	800b8f0 <_printf_float+0x360>
 800b882:	f04f 0b00 	mov.w	fp, #0
 800b886:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b88a:	f104 021a 	add.w	r2, r4, #26
 800b88e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b890:	9306      	str	r3, [sp, #24]
 800b892:	eba3 0309 	sub.w	r3, r3, r9
 800b896:	455b      	cmp	r3, fp
 800b898:	dc31      	bgt.n	800b8fe <_printf_float+0x36e>
 800b89a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b89c:	459a      	cmp	sl, r3
 800b89e:	dc3a      	bgt.n	800b916 <_printf_float+0x386>
 800b8a0:	6823      	ldr	r3, [r4, #0]
 800b8a2:	07da      	lsls	r2, r3, #31
 800b8a4:	d437      	bmi.n	800b916 <_printf_float+0x386>
 800b8a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8a8:	ebaa 0903 	sub.w	r9, sl, r3
 800b8ac:	9b06      	ldr	r3, [sp, #24]
 800b8ae:	ebaa 0303 	sub.w	r3, sl, r3
 800b8b2:	4599      	cmp	r9, r3
 800b8b4:	bfa8      	it	ge
 800b8b6:	4699      	movge	r9, r3
 800b8b8:	f1b9 0f00 	cmp.w	r9, #0
 800b8bc:	dc33      	bgt.n	800b926 <_printf_float+0x396>
 800b8be:	f04f 0800 	mov.w	r8, #0
 800b8c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b8c6:	f104 0b1a 	add.w	fp, r4, #26
 800b8ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8cc:	ebaa 0303 	sub.w	r3, sl, r3
 800b8d0:	eba3 0309 	sub.w	r3, r3, r9
 800b8d4:	4543      	cmp	r3, r8
 800b8d6:	f77f af79 	ble.w	800b7cc <_printf_float+0x23c>
 800b8da:	2301      	movs	r3, #1
 800b8dc:	465a      	mov	r2, fp
 800b8de:	4631      	mov	r1, r6
 800b8e0:	4628      	mov	r0, r5
 800b8e2:	47b8      	blx	r7
 800b8e4:	3001      	adds	r0, #1
 800b8e6:	f43f aeae 	beq.w	800b646 <_printf_float+0xb6>
 800b8ea:	f108 0801 	add.w	r8, r8, #1
 800b8ee:	e7ec      	b.n	800b8ca <_printf_float+0x33a>
 800b8f0:	4642      	mov	r2, r8
 800b8f2:	4631      	mov	r1, r6
 800b8f4:	4628      	mov	r0, r5
 800b8f6:	47b8      	blx	r7
 800b8f8:	3001      	adds	r0, #1
 800b8fa:	d1c2      	bne.n	800b882 <_printf_float+0x2f2>
 800b8fc:	e6a3      	b.n	800b646 <_printf_float+0xb6>
 800b8fe:	2301      	movs	r3, #1
 800b900:	4631      	mov	r1, r6
 800b902:	4628      	mov	r0, r5
 800b904:	9206      	str	r2, [sp, #24]
 800b906:	47b8      	blx	r7
 800b908:	3001      	adds	r0, #1
 800b90a:	f43f ae9c 	beq.w	800b646 <_printf_float+0xb6>
 800b90e:	9a06      	ldr	r2, [sp, #24]
 800b910:	f10b 0b01 	add.w	fp, fp, #1
 800b914:	e7bb      	b.n	800b88e <_printf_float+0x2fe>
 800b916:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b91a:	4631      	mov	r1, r6
 800b91c:	4628      	mov	r0, r5
 800b91e:	47b8      	blx	r7
 800b920:	3001      	adds	r0, #1
 800b922:	d1c0      	bne.n	800b8a6 <_printf_float+0x316>
 800b924:	e68f      	b.n	800b646 <_printf_float+0xb6>
 800b926:	9a06      	ldr	r2, [sp, #24]
 800b928:	464b      	mov	r3, r9
 800b92a:	4442      	add	r2, r8
 800b92c:	4631      	mov	r1, r6
 800b92e:	4628      	mov	r0, r5
 800b930:	47b8      	blx	r7
 800b932:	3001      	adds	r0, #1
 800b934:	d1c3      	bne.n	800b8be <_printf_float+0x32e>
 800b936:	e686      	b.n	800b646 <_printf_float+0xb6>
 800b938:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b93c:	f1ba 0f01 	cmp.w	sl, #1
 800b940:	dc01      	bgt.n	800b946 <_printf_float+0x3b6>
 800b942:	07db      	lsls	r3, r3, #31
 800b944:	d536      	bpl.n	800b9b4 <_printf_float+0x424>
 800b946:	2301      	movs	r3, #1
 800b948:	4642      	mov	r2, r8
 800b94a:	4631      	mov	r1, r6
 800b94c:	4628      	mov	r0, r5
 800b94e:	47b8      	blx	r7
 800b950:	3001      	adds	r0, #1
 800b952:	f43f ae78 	beq.w	800b646 <_printf_float+0xb6>
 800b956:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b95a:	4631      	mov	r1, r6
 800b95c:	4628      	mov	r0, r5
 800b95e:	47b8      	blx	r7
 800b960:	3001      	adds	r0, #1
 800b962:	f43f ae70 	beq.w	800b646 <_printf_float+0xb6>
 800b966:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b96a:	2200      	movs	r2, #0
 800b96c:	2300      	movs	r3, #0
 800b96e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b972:	f7f5 f8b1 	bl	8000ad8 <__aeabi_dcmpeq>
 800b976:	b9c0      	cbnz	r0, 800b9aa <_printf_float+0x41a>
 800b978:	4653      	mov	r3, sl
 800b97a:	f108 0201 	add.w	r2, r8, #1
 800b97e:	4631      	mov	r1, r6
 800b980:	4628      	mov	r0, r5
 800b982:	47b8      	blx	r7
 800b984:	3001      	adds	r0, #1
 800b986:	d10c      	bne.n	800b9a2 <_printf_float+0x412>
 800b988:	e65d      	b.n	800b646 <_printf_float+0xb6>
 800b98a:	2301      	movs	r3, #1
 800b98c:	465a      	mov	r2, fp
 800b98e:	4631      	mov	r1, r6
 800b990:	4628      	mov	r0, r5
 800b992:	47b8      	blx	r7
 800b994:	3001      	adds	r0, #1
 800b996:	f43f ae56 	beq.w	800b646 <_printf_float+0xb6>
 800b99a:	f108 0801 	add.w	r8, r8, #1
 800b99e:	45d0      	cmp	r8, sl
 800b9a0:	dbf3      	blt.n	800b98a <_printf_float+0x3fa>
 800b9a2:	464b      	mov	r3, r9
 800b9a4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b9a8:	e6df      	b.n	800b76a <_printf_float+0x1da>
 800b9aa:	f04f 0800 	mov.w	r8, #0
 800b9ae:	f104 0b1a 	add.w	fp, r4, #26
 800b9b2:	e7f4      	b.n	800b99e <_printf_float+0x40e>
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	4642      	mov	r2, r8
 800b9b8:	e7e1      	b.n	800b97e <_printf_float+0x3ee>
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	464a      	mov	r2, r9
 800b9be:	4631      	mov	r1, r6
 800b9c0:	4628      	mov	r0, r5
 800b9c2:	47b8      	blx	r7
 800b9c4:	3001      	adds	r0, #1
 800b9c6:	f43f ae3e 	beq.w	800b646 <_printf_float+0xb6>
 800b9ca:	f108 0801 	add.w	r8, r8, #1
 800b9ce:	68e3      	ldr	r3, [r4, #12]
 800b9d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b9d2:	1a5b      	subs	r3, r3, r1
 800b9d4:	4543      	cmp	r3, r8
 800b9d6:	dcf0      	bgt.n	800b9ba <_printf_float+0x42a>
 800b9d8:	e6fc      	b.n	800b7d4 <_printf_float+0x244>
 800b9da:	f04f 0800 	mov.w	r8, #0
 800b9de:	f104 0919 	add.w	r9, r4, #25
 800b9e2:	e7f4      	b.n	800b9ce <_printf_float+0x43e>

0800b9e4 <_printf_common>:
 800b9e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9e8:	4616      	mov	r6, r2
 800b9ea:	4698      	mov	r8, r3
 800b9ec:	688a      	ldr	r2, [r1, #8]
 800b9ee:	690b      	ldr	r3, [r1, #16]
 800b9f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b9f4:	4293      	cmp	r3, r2
 800b9f6:	bfb8      	it	lt
 800b9f8:	4613      	movlt	r3, r2
 800b9fa:	6033      	str	r3, [r6, #0]
 800b9fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ba00:	4607      	mov	r7, r0
 800ba02:	460c      	mov	r4, r1
 800ba04:	b10a      	cbz	r2, 800ba0a <_printf_common+0x26>
 800ba06:	3301      	adds	r3, #1
 800ba08:	6033      	str	r3, [r6, #0]
 800ba0a:	6823      	ldr	r3, [r4, #0]
 800ba0c:	0699      	lsls	r1, r3, #26
 800ba0e:	bf42      	ittt	mi
 800ba10:	6833      	ldrmi	r3, [r6, #0]
 800ba12:	3302      	addmi	r3, #2
 800ba14:	6033      	strmi	r3, [r6, #0]
 800ba16:	6825      	ldr	r5, [r4, #0]
 800ba18:	f015 0506 	ands.w	r5, r5, #6
 800ba1c:	d106      	bne.n	800ba2c <_printf_common+0x48>
 800ba1e:	f104 0a19 	add.w	sl, r4, #25
 800ba22:	68e3      	ldr	r3, [r4, #12]
 800ba24:	6832      	ldr	r2, [r6, #0]
 800ba26:	1a9b      	subs	r3, r3, r2
 800ba28:	42ab      	cmp	r3, r5
 800ba2a:	dc26      	bgt.n	800ba7a <_printf_common+0x96>
 800ba2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ba30:	6822      	ldr	r2, [r4, #0]
 800ba32:	3b00      	subs	r3, #0
 800ba34:	bf18      	it	ne
 800ba36:	2301      	movne	r3, #1
 800ba38:	0692      	lsls	r2, r2, #26
 800ba3a:	d42b      	bmi.n	800ba94 <_printf_common+0xb0>
 800ba3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ba40:	4641      	mov	r1, r8
 800ba42:	4638      	mov	r0, r7
 800ba44:	47c8      	blx	r9
 800ba46:	3001      	adds	r0, #1
 800ba48:	d01e      	beq.n	800ba88 <_printf_common+0xa4>
 800ba4a:	6823      	ldr	r3, [r4, #0]
 800ba4c:	6922      	ldr	r2, [r4, #16]
 800ba4e:	f003 0306 	and.w	r3, r3, #6
 800ba52:	2b04      	cmp	r3, #4
 800ba54:	bf02      	ittt	eq
 800ba56:	68e5      	ldreq	r5, [r4, #12]
 800ba58:	6833      	ldreq	r3, [r6, #0]
 800ba5a:	1aed      	subeq	r5, r5, r3
 800ba5c:	68a3      	ldr	r3, [r4, #8]
 800ba5e:	bf0c      	ite	eq
 800ba60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba64:	2500      	movne	r5, #0
 800ba66:	4293      	cmp	r3, r2
 800ba68:	bfc4      	itt	gt
 800ba6a:	1a9b      	subgt	r3, r3, r2
 800ba6c:	18ed      	addgt	r5, r5, r3
 800ba6e:	2600      	movs	r6, #0
 800ba70:	341a      	adds	r4, #26
 800ba72:	42b5      	cmp	r5, r6
 800ba74:	d11a      	bne.n	800baac <_printf_common+0xc8>
 800ba76:	2000      	movs	r0, #0
 800ba78:	e008      	b.n	800ba8c <_printf_common+0xa8>
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	4652      	mov	r2, sl
 800ba7e:	4641      	mov	r1, r8
 800ba80:	4638      	mov	r0, r7
 800ba82:	47c8      	blx	r9
 800ba84:	3001      	adds	r0, #1
 800ba86:	d103      	bne.n	800ba90 <_printf_common+0xac>
 800ba88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ba8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba90:	3501      	adds	r5, #1
 800ba92:	e7c6      	b.n	800ba22 <_printf_common+0x3e>
 800ba94:	18e1      	adds	r1, r4, r3
 800ba96:	1c5a      	adds	r2, r3, #1
 800ba98:	2030      	movs	r0, #48	@ 0x30
 800ba9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ba9e:	4422      	add	r2, r4
 800baa0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800baa4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800baa8:	3302      	adds	r3, #2
 800baaa:	e7c7      	b.n	800ba3c <_printf_common+0x58>
 800baac:	2301      	movs	r3, #1
 800baae:	4622      	mov	r2, r4
 800bab0:	4641      	mov	r1, r8
 800bab2:	4638      	mov	r0, r7
 800bab4:	47c8      	blx	r9
 800bab6:	3001      	adds	r0, #1
 800bab8:	d0e6      	beq.n	800ba88 <_printf_common+0xa4>
 800baba:	3601      	adds	r6, #1
 800babc:	e7d9      	b.n	800ba72 <_printf_common+0x8e>
	...

0800bac0 <_printf_i>:
 800bac0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bac4:	7e0f      	ldrb	r7, [r1, #24]
 800bac6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bac8:	2f78      	cmp	r7, #120	@ 0x78
 800baca:	4691      	mov	r9, r2
 800bacc:	4680      	mov	r8, r0
 800bace:	460c      	mov	r4, r1
 800bad0:	469a      	mov	sl, r3
 800bad2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bad6:	d807      	bhi.n	800bae8 <_printf_i+0x28>
 800bad8:	2f62      	cmp	r7, #98	@ 0x62
 800bada:	d80a      	bhi.n	800baf2 <_printf_i+0x32>
 800badc:	2f00      	cmp	r7, #0
 800bade:	f000 80d2 	beq.w	800bc86 <_printf_i+0x1c6>
 800bae2:	2f58      	cmp	r7, #88	@ 0x58
 800bae4:	f000 80b9 	beq.w	800bc5a <_printf_i+0x19a>
 800bae8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800baec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800baf0:	e03a      	b.n	800bb68 <_printf_i+0xa8>
 800baf2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800baf6:	2b15      	cmp	r3, #21
 800baf8:	d8f6      	bhi.n	800bae8 <_printf_i+0x28>
 800bafa:	a101      	add	r1, pc, #4	@ (adr r1, 800bb00 <_printf_i+0x40>)
 800bafc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bb00:	0800bb59 	.word	0x0800bb59
 800bb04:	0800bb6d 	.word	0x0800bb6d
 800bb08:	0800bae9 	.word	0x0800bae9
 800bb0c:	0800bae9 	.word	0x0800bae9
 800bb10:	0800bae9 	.word	0x0800bae9
 800bb14:	0800bae9 	.word	0x0800bae9
 800bb18:	0800bb6d 	.word	0x0800bb6d
 800bb1c:	0800bae9 	.word	0x0800bae9
 800bb20:	0800bae9 	.word	0x0800bae9
 800bb24:	0800bae9 	.word	0x0800bae9
 800bb28:	0800bae9 	.word	0x0800bae9
 800bb2c:	0800bc6d 	.word	0x0800bc6d
 800bb30:	0800bb97 	.word	0x0800bb97
 800bb34:	0800bc27 	.word	0x0800bc27
 800bb38:	0800bae9 	.word	0x0800bae9
 800bb3c:	0800bae9 	.word	0x0800bae9
 800bb40:	0800bc8f 	.word	0x0800bc8f
 800bb44:	0800bae9 	.word	0x0800bae9
 800bb48:	0800bb97 	.word	0x0800bb97
 800bb4c:	0800bae9 	.word	0x0800bae9
 800bb50:	0800bae9 	.word	0x0800bae9
 800bb54:	0800bc2f 	.word	0x0800bc2f
 800bb58:	6833      	ldr	r3, [r6, #0]
 800bb5a:	1d1a      	adds	r2, r3, #4
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	6032      	str	r2, [r6, #0]
 800bb60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bb64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bb68:	2301      	movs	r3, #1
 800bb6a:	e09d      	b.n	800bca8 <_printf_i+0x1e8>
 800bb6c:	6833      	ldr	r3, [r6, #0]
 800bb6e:	6820      	ldr	r0, [r4, #0]
 800bb70:	1d19      	adds	r1, r3, #4
 800bb72:	6031      	str	r1, [r6, #0]
 800bb74:	0606      	lsls	r6, r0, #24
 800bb76:	d501      	bpl.n	800bb7c <_printf_i+0xbc>
 800bb78:	681d      	ldr	r5, [r3, #0]
 800bb7a:	e003      	b.n	800bb84 <_printf_i+0xc4>
 800bb7c:	0645      	lsls	r5, r0, #25
 800bb7e:	d5fb      	bpl.n	800bb78 <_printf_i+0xb8>
 800bb80:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bb84:	2d00      	cmp	r5, #0
 800bb86:	da03      	bge.n	800bb90 <_printf_i+0xd0>
 800bb88:	232d      	movs	r3, #45	@ 0x2d
 800bb8a:	426d      	negs	r5, r5
 800bb8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb90:	4859      	ldr	r0, [pc, #356]	@ (800bcf8 <_printf_i+0x238>)
 800bb92:	230a      	movs	r3, #10
 800bb94:	e011      	b.n	800bbba <_printf_i+0xfa>
 800bb96:	6821      	ldr	r1, [r4, #0]
 800bb98:	6833      	ldr	r3, [r6, #0]
 800bb9a:	0608      	lsls	r0, r1, #24
 800bb9c:	f853 5b04 	ldr.w	r5, [r3], #4
 800bba0:	d402      	bmi.n	800bba8 <_printf_i+0xe8>
 800bba2:	0649      	lsls	r1, r1, #25
 800bba4:	bf48      	it	mi
 800bba6:	b2ad      	uxthmi	r5, r5
 800bba8:	2f6f      	cmp	r7, #111	@ 0x6f
 800bbaa:	4853      	ldr	r0, [pc, #332]	@ (800bcf8 <_printf_i+0x238>)
 800bbac:	6033      	str	r3, [r6, #0]
 800bbae:	bf14      	ite	ne
 800bbb0:	230a      	movne	r3, #10
 800bbb2:	2308      	moveq	r3, #8
 800bbb4:	2100      	movs	r1, #0
 800bbb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bbba:	6866      	ldr	r6, [r4, #4]
 800bbbc:	60a6      	str	r6, [r4, #8]
 800bbbe:	2e00      	cmp	r6, #0
 800bbc0:	bfa2      	ittt	ge
 800bbc2:	6821      	ldrge	r1, [r4, #0]
 800bbc4:	f021 0104 	bicge.w	r1, r1, #4
 800bbc8:	6021      	strge	r1, [r4, #0]
 800bbca:	b90d      	cbnz	r5, 800bbd0 <_printf_i+0x110>
 800bbcc:	2e00      	cmp	r6, #0
 800bbce:	d04b      	beq.n	800bc68 <_printf_i+0x1a8>
 800bbd0:	4616      	mov	r6, r2
 800bbd2:	fbb5 f1f3 	udiv	r1, r5, r3
 800bbd6:	fb03 5711 	mls	r7, r3, r1, r5
 800bbda:	5dc7      	ldrb	r7, [r0, r7]
 800bbdc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bbe0:	462f      	mov	r7, r5
 800bbe2:	42bb      	cmp	r3, r7
 800bbe4:	460d      	mov	r5, r1
 800bbe6:	d9f4      	bls.n	800bbd2 <_printf_i+0x112>
 800bbe8:	2b08      	cmp	r3, #8
 800bbea:	d10b      	bne.n	800bc04 <_printf_i+0x144>
 800bbec:	6823      	ldr	r3, [r4, #0]
 800bbee:	07df      	lsls	r7, r3, #31
 800bbf0:	d508      	bpl.n	800bc04 <_printf_i+0x144>
 800bbf2:	6923      	ldr	r3, [r4, #16]
 800bbf4:	6861      	ldr	r1, [r4, #4]
 800bbf6:	4299      	cmp	r1, r3
 800bbf8:	bfde      	ittt	le
 800bbfa:	2330      	movle	r3, #48	@ 0x30
 800bbfc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bc00:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800bc04:	1b92      	subs	r2, r2, r6
 800bc06:	6122      	str	r2, [r4, #16]
 800bc08:	f8cd a000 	str.w	sl, [sp]
 800bc0c:	464b      	mov	r3, r9
 800bc0e:	aa03      	add	r2, sp, #12
 800bc10:	4621      	mov	r1, r4
 800bc12:	4640      	mov	r0, r8
 800bc14:	f7ff fee6 	bl	800b9e4 <_printf_common>
 800bc18:	3001      	adds	r0, #1
 800bc1a:	d14a      	bne.n	800bcb2 <_printf_i+0x1f2>
 800bc1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bc20:	b004      	add	sp, #16
 800bc22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc26:	6823      	ldr	r3, [r4, #0]
 800bc28:	f043 0320 	orr.w	r3, r3, #32
 800bc2c:	6023      	str	r3, [r4, #0]
 800bc2e:	4833      	ldr	r0, [pc, #204]	@ (800bcfc <_printf_i+0x23c>)
 800bc30:	2778      	movs	r7, #120	@ 0x78
 800bc32:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bc36:	6823      	ldr	r3, [r4, #0]
 800bc38:	6831      	ldr	r1, [r6, #0]
 800bc3a:	061f      	lsls	r7, r3, #24
 800bc3c:	f851 5b04 	ldr.w	r5, [r1], #4
 800bc40:	d402      	bmi.n	800bc48 <_printf_i+0x188>
 800bc42:	065f      	lsls	r7, r3, #25
 800bc44:	bf48      	it	mi
 800bc46:	b2ad      	uxthmi	r5, r5
 800bc48:	6031      	str	r1, [r6, #0]
 800bc4a:	07d9      	lsls	r1, r3, #31
 800bc4c:	bf44      	itt	mi
 800bc4e:	f043 0320 	orrmi.w	r3, r3, #32
 800bc52:	6023      	strmi	r3, [r4, #0]
 800bc54:	b11d      	cbz	r5, 800bc5e <_printf_i+0x19e>
 800bc56:	2310      	movs	r3, #16
 800bc58:	e7ac      	b.n	800bbb4 <_printf_i+0xf4>
 800bc5a:	4827      	ldr	r0, [pc, #156]	@ (800bcf8 <_printf_i+0x238>)
 800bc5c:	e7e9      	b.n	800bc32 <_printf_i+0x172>
 800bc5e:	6823      	ldr	r3, [r4, #0]
 800bc60:	f023 0320 	bic.w	r3, r3, #32
 800bc64:	6023      	str	r3, [r4, #0]
 800bc66:	e7f6      	b.n	800bc56 <_printf_i+0x196>
 800bc68:	4616      	mov	r6, r2
 800bc6a:	e7bd      	b.n	800bbe8 <_printf_i+0x128>
 800bc6c:	6833      	ldr	r3, [r6, #0]
 800bc6e:	6825      	ldr	r5, [r4, #0]
 800bc70:	6961      	ldr	r1, [r4, #20]
 800bc72:	1d18      	adds	r0, r3, #4
 800bc74:	6030      	str	r0, [r6, #0]
 800bc76:	062e      	lsls	r6, r5, #24
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	d501      	bpl.n	800bc80 <_printf_i+0x1c0>
 800bc7c:	6019      	str	r1, [r3, #0]
 800bc7e:	e002      	b.n	800bc86 <_printf_i+0x1c6>
 800bc80:	0668      	lsls	r0, r5, #25
 800bc82:	d5fb      	bpl.n	800bc7c <_printf_i+0x1bc>
 800bc84:	8019      	strh	r1, [r3, #0]
 800bc86:	2300      	movs	r3, #0
 800bc88:	6123      	str	r3, [r4, #16]
 800bc8a:	4616      	mov	r6, r2
 800bc8c:	e7bc      	b.n	800bc08 <_printf_i+0x148>
 800bc8e:	6833      	ldr	r3, [r6, #0]
 800bc90:	1d1a      	adds	r2, r3, #4
 800bc92:	6032      	str	r2, [r6, #0]
 800bc94:	681e      	ldr	r6, [r3, #0]
 800bc96:	6862      	ldr	r2, [r4, #4]
 800bc98:	2100      	movs	r1, #0
 800bc9a:	4630      	mov	r0, r6
 800bc9c:	f7f4 faa0 	bl	80001e0 <memchr>
 800bca0:	b108      	cbz	r0, 800bca6 <_printf_i+0x1e6>
 800bca2:	1b80      	subs	r0, r0, r6
 800bca4:	6060      	str	r0, [r4, #4]
 800bca6:	6863      	ldr	r3, [r4, #4]
 800bca8:	6123      	str	r3, [r4, #16]
 800bcaa:	2300      	movs	r3, #0
 800bcac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bcb0:	e7aa      	b.n	800bc08 <_printf_i+0x148>
 800bcb2:	6923      	ldr	r3, [r4, #16]
 800bcb4:	4632      	mov	r2, r6
 800bcb6:	4649      	mov	r1, r9
 800bcb8:	4640      	mov	r0, r8
 800bcba:	47d0      	blx	sl
 800bcbc:	3001      	adds	r0, #1
 800bcbe:	d0ad      	beq.n	800bc1c <_printf_i+0x15c>
 800bcc0:	6823      	ldr	r3, [r4, #0]
 800bcc2:	079b      	lsls	r3, r3, #30
 800bcc4:	d413      	bmi.n	800bcee <_printf_i+0x22e>
 800bcc6:	68e0      	ldr	r0, [r4, #12]
 800bcc8:	9b03      	ldr	r3, [sp, #12]
 800bcca:	4298      	cmp	r0, r3
 800bccc:	bfb8      	it	lt
 800bcce:	4618      	movlt	r0, r3
 800bcd0:	e7a6      	b.n	800bc20 <_printf_i+0x160>
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	4632      	mov	r2, r6
 800bcd6:	4649      	mov	r1, r9
 800bcd8:	4640      	mov	r0, r8
 800bcda:	47d0      	blx	sl
 800bcdc:	3001      	adds	r0, #1
 800bcde:	d09d      	beq.n	800bc1c <_printf_i+0x15c>
 800bce0:	3501      	adds	r5, #1
 800bce2:	68e3      	ldr	r3, [r4, #12]
 800bce4:	9903      	ldr	r1, [sp, #12]
 800bce6:	1a5b      	subs	r3, r3, r1
 800bce8:	42ab      	cmp	r3, r5
 800bcea:	dcf2      	bgt.n	800bcd2 <_printf_i+0x212>
 800bcec:	e7eb      	b.n	800bcc6 <_printf_i+0x206>
 800bcee:	2500      	movs	r5, #0
 800bcf0:	f104 0619 	add.w	r6, r4, #25
 800bcf4:	e7f5      	b.n	800bce2 <_printf_i+0x222>
 800bcf6:	bf00      	nop
 800bcf8:	0800e7f2 	.word	0x0800e7f2
 800bcfc:	0800e803 	.word	0x0800e803

0800bd00 <std>:
 800bd00:	2300      	movs	r3, #0
 800bd02:	b510      	push	{r4, lr}
 800bd04:	4604      	mov	r4, r0
 800bd06:	e9c0 3300 	strd	r3, r3, [r0]
 800bd0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bd0e:	6083      	str	r3, [r0, #8]
 800bd10:	8181      	strh	r1, [r0, #12]
 800bd12:	6643      	str	r3, [r0, #100]	@ 0x64
 800bd14:	81c2      	strh	r2, [r0, #14]
 800bd16:	6183      	str	r3, [r0, #24]
 800bd18:	4619      	mov	r1, r3
 800bd1a:	2208      	movs	r2, #8
 800bd1c:	305c      	adds	r0, #92	@ 0x5c
 800bd1e:	f000 fa2d 	bl	800c17c <memset>
 800bd22:	4b0d      	ldr	r3, [pc, #52]	@ (800bd58 <std+0x58>)
 800bd24:	6263      	str	r3, [r4, #36]	@ 0x24
 800bd26:	4b0d      	ldr	r3, [pc, #52]	@ (800bd5c <std+0x5c>)
 800bd28:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bd2a:	4b0d      	ldr	r3, [pc, #52]	@ (800bd60 <std+0x60>)
 800bd2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bd2e:	4b0d      	ldr	r3, [pc, #52]	@ (800bd64 <std+0x64>)
 800bd30:	6323      	str	r3, [r4, #48]	@ 0x30
 800bd32:	4b0d      	ldr	r3, [pc, #52]	@ (800bd68 <std+0x68>)
 800bd34:	6224      	str	r4, [r4, #32]
 800bd36:	429c      	cmp	r4, r3
 800bd38:	d006      	beq.n	800bd48 <std+0x48>
 800bd3a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bd3e:	4294      	cmp	r4, r2
 800bd40:	d002      	beq.n	800bd48 <std+0x48>
 800bd42:	33d0      	adds	r3, #208	@ 0xd0
 800bd44:	429c      	cmp	r4, r3
 800bd46:	d105      	bne.n	800bd54 <std+0x54>
 800bd48:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bd4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd50:	f000 bae6 	b.w	800c320 <__retarget_lock_init_recursive>
 800bd54:	bd10      	pop	{r4, pc}
 800bd56:	bf00      	nop
 800bd58:	0800bfcd 	.word	0x0800bfcd
 800bd5c:	0800bfef 	.word	0x0800bfef
 800bd60:	0800c027 	.word	0x0800c027
 800bd64:	0800c04b 	.word	0x0800c04b
 800bd68:	20004f44 	.word	0x20004f44

0800bd6c <stdio_exit_handler>:
 800bd6c:	4a02      	ldr	r2, [pc, #8]	@ (800bd78 <stdio_exit_handler+0xc>)
 800bd6e:	4903      	ldr	r1, [pc, #12]	@ (800bd7c <stdio_exit_handler+0x10>)
 800bd70:	4803      	ldr	r0, [pc, #12]	@ (800bd80 <stdio_exit_handler+0x14>)
 800bd72:	f000 b869 	b.w	800be48 <_fwalk_sglue>
 800bd76:	bf00      	nop
 800bd78:	20000030 	.word	0x20000030
 800bd7c:	0800df21 	.word	0x0800df21
 800bd80:	20000040 	.word	0x20000040

0800bd84 <cleanup_stdio>:
 800bd84:	6841      	ldr	r1, [r0, #4]
 800bd86:	4b0c      	ldr	r3, [pc, #48]	@ (800bdb8 <cleanup_stdio+0x34>)
 800bd88:	4299      	cmp	r1, r3
 800bd8a:	b510      	push	{r4, lr}
 800bd8c:	4604      	mov	r4, r0
 800bd8e:	d001      	beq.n	800bd94 <cleanup_stdio+0x10>
 800bd90:	f002 f8c6 	bl	800df20 <_fflush_r>
 800bd94:	68a1      	ldr	r1, [r4, #8]
 800bd96:	4b09      	ldr	r3, [pc, #36]	@ (800bdbc <cleanup_stdio+0x38>)
 800bd98:	4299      	cmp	r1, r3
 800bd9a:	d002      	beq.n	800bda2 <cleanup_stdio+0x1e>
 800bd9c:	4620      	mov	r0, r4
 800bd9e:	f002 f8bf 	bl	800df20 <_fflush_r>
 800bda2:	68e1      	ldr	r1, [r4, #12]
 800bda4:	4b06      	ldr	r3, [pc, #24]	@ (800bdc0 <cleanup_stdio+0x3c>)
 800bda6:	4299      	cmp	r1, r3
 800bda8:	d004      	beq.n	800bdb4 <cleanup_stdio+0x30>
 800bdaa:	4620      	mov	r0, r4
 800bdac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdb0:	f002 b8b6 	b.w	800df20 <_fflush_r>
 800bdb4:	bd10      	pop	{r4, pc}
 800bdb6:	bf00      	nop
 800bdb8:	20004f44 	.word	0x20004f44
 800bdbc:	20004fac 	.word	0x20004fac
 800bdc0:	20005014 	.word	0x20005014

0800bdc4 <global_stdio_init.part.0>:
 800bdc4:	b510      	push	{r4, lr}
 800bdc6:	4b0b      	ldr	r3, [pc, #44]	@ (800bdf4 <global_stdio_init.part.0+0x30>)
 800bdc8:	4c0b      	ldr	r4, [pc, #44]	@ (800bdf8 <global_stdio_init.part.0+0x34>)
 800bdca:	4a0c      	ldr	r2, [pc, #48]	@ (800bdfc <global_stdio_init.part.0+0x38>)
 800bdcc:	601a      	str	r2, [r3, #0]
 800bdce:	4620      	mov	r0, r4
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	2104      	movs	r1, #4
 800bdd4:	f7ff ff94 	bl	800bd00 <std>
 800bdd8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bddc:	2201      	movs	r2, #1
 800bdde:	2109      	movs	r1, #9
 800bde0:	f7ff ff8e 	bl	800bd00 <std>
 800bde4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bde8:	2202      	movs	r2, #2
 800bdea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdee:	2112      	movs	r1, #18
 800bdf0:	f7ff bf86 	b.w	800bd00 <std>
 800bdf4:	2000507c 	.word	0x2000507c
 800bdf8:	20004f44 	.word	0x20004f44
 800bdfc:	0800bd6d 	.word	0x0800bd6d

0800be00 <__sfp_lock_acquire>:
 800be00:	4801      	ldr	r0, [pc, #4]	@ (800be08 <__sfp_lock_acquire+0x8>)
 800be02:	f000 ba8e 	b.w	800c322 <__retarget_lock_acquire_recursive>
 800be06:	bf00      	nop
 800be08:	20005085 	.word	0x20005085

0800be0c <__sfp_lock_release>:
 800be0c:	4801      	ldr	r0, [pc, #4]	@ (800be14 <__sfp_lock_release+0x8>)
 800be0e:	f000 ba89 	b.w	800c324 <__retarget_lock_release_recursive>
 800be12:	bf00      	nop
 800be14:	20005085 	.word	0x20005085

0800be18 <__sinit>:
 800be18:	b510      	push	{r4, lr}
 800be1a:	4604      	mov	r4, r0
 800be1c:	f7ff fff0 	bl	800be00 <__sfp_lock_acquire>
 800be20:	6a23      	ldr	r3, [r4, #32]
 800be22:	b11b      	cbz	r3, 800be2c <__sinit+0x14>
 800be24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be28:	f7ff bff0 	b.w	800be0c <__sfp_lock_release>
 800be2c:	4b04      	ldr	r3, [pc, #16]	@ (800be40 <__sinit+0x28>)
 800be2e:	6223      	str	r3, [r4, #32]
 800be30:	4b04      	ldr	r3, [pc, #16]	@ (800be44 <__sinit+0x2c>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d1f5      	bne.n	800be24 <__sinit+0xc>
 800be38:	f7ff ffc4 	bl	800bdc4 <global_stdio_init.part.0>
 800be3c:	e7f2      	b.n	800be24 <__sinit+0xc>
 800be3e:	bf00      	nop
 800be40:	0800bd85 	.word	0x0800bd85
 800be44:	2000507c 	.word	0x2000507c

0800be48 <_fwalk_sglue>:
 800be48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be4c:	4607      	mov	r7, r0
 800be4e:	4688      	mov	r8, r1
 800be50:	4614      	mov	r4, r2
 800be52:	2600      	movs	r6, #0
 800be54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800be58:	f1b9 0901 	subs.w	r9, r9, #1
 800be5c:	d505      	bpl.n	800be6a <_fwalk_sglue+0x22>
 800be5e:	6824      	ldr	r4, [r4, #0]
 800be60:	2c00      	cmp	r4, #0
 800be62:	d1f7      	bne.n	800be54 <_fwalk_sglue+0xc>
 800be64:	4630      	mov	r0, r6
 800be66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be6a:	89ab      	ldrh	r3, [r5, #12]
 800be6c:	2b01      	cmp	r3, #1
 800be6e:	d907      	bls.n	800be80 <_fwalk_sglue+0x38>
 800be70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800be74:	3301      	adds	r3, #1
 800be76:	d003      	beq.n	800be80 <_fwalk_sglue+0x38>
 800be78:	4629      	mov	r1, r5
 800be7a:	4638      	mov	r0, r7
 800be7c:	47c0      	blx	r8
 800be7e:	4306      	orrs	r6, r0
 800be80:	3568      	adds	r5, #104	@ 0x68
 800be82:	e7e9      	b.n	800be58 <_fwalk_sglue+0x10>

0800be84 <iprintf>:
 800be84:	b40f      	push	{r0, r1, r2, r3}
 800be86:	b507      	push	{r0, r1, r2, lr}
 800be88:	4906      	ldr	r1, [pc, #24]	@ (800bea4 <iprintf+0x20>)
 800be8a:	ab04      	add	r3, sp, #16
 800be8c:	6808      	ldr	r0, [r1, #0]
 800be8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800be92:	6881      	ldr	r1, [r0, #8]
 800be94:	9301      	str	r3, [sp, #4]
 800be96:	f001 fea7 	bl	800dbe8 <_vfiprintf_r>
 800be9a:	b003      	add	sp, #12
 800be9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bea0:	b004      	add	sp, #16
 800bea2:	4770      	bx	lr
 800bea4:	2000003c 	.word	0x2000003c

0800bea8 <_puts_r>:
 800bea8:	6a03      	ldr	r3, [r0, #32]
 800beaa:	b570      	push	{r4, r5, r6, lr}
 800beac:	6884      	ldr	r4, [r0, #8]
 800beae:	4605      	mov	r5, r0
 800beb0:	460e      	mov	r6, r1
 800beb2:	b90b      	cbnz	r3, 800beb8 <_puts_r+0x10>
 800beb4:	f7ff ffb0 	bl	800be18 <__sinit>
 800beb8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800beba:	07db      	lsls	r3, r3, #31
 800bebc:	d405      	bmi.n	800beca <_puts_r+0x22>
 800bebe:	89a3      	ldrh	r3, [r4, #12]
 800bec0:	0598      	lsls	r0, r3, #22
 800bec2:	d402      	bmi.n	800beca <_puts_r+0x22>
 800bec4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bec6:	f000 fa2c 	bl	800c322 <__retarget_lock_acquire_recursive>
 800beca:	89a3      	ldrh	r3, [r4, #12]
 800becc:	0719      	lsls	r1, r3, #28
 800bece:	d502      	bpl.n	800bed6 <_puts_r+0x2e>
 800bed0:	6923      	ldr	r3, [r4, #16]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d135      	bne.n	800bf42 <_puts_r+0x9a>
 800bed6:	4621      	mov	r1, r4
 800bed8:	4628      	mov	r0, r5
 800beda:	f000 f8f9 	bl	800c0d0 <__swsetup_r>
 800bede:	b380      	cbz	r0, 800bf42 <_puts_r+0x9a>
 800bee0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800bee4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bee6:	07da      	lsls	r2, r3, #31
 800bee8:	d405      	bmi.n	800bef6 <_puts_r+0x4e>
 800beea:	89a3      	ldrh	r3, [r4, #12]
 800beec:	059b      	lsls	r3, r3, #22
 800beee:	d402      	bmi.n	800bef6 <_puts_r+0x4e>
 800bef0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bef2:	f000 fa17 	bl	800c324 <__retarget_lock_release_recursive>
 800bef6:	4628      	mov	r0, r5
 800bef8:	bd70      	pop	{r4, r5, r6, pc}
 800befa:	2b00      	cmp	r3, #0
 800befc:	da04      	bge.n	800bf08 <_puts_r+0x60>
 800befe:	69a2      	ldr	r2, [r4, #24]
 800bf00:	429a      	cmp	r2, r3
 800bf02:	dc17      	bgt.n	800bf34 <_puts_r+0x8c>
 800bf04:	290a      	cmp	r1, #10
 800bf06:	d015      	beq.n	800bf34 <_puts_r+0x8c>
 800bf08:	6823      	ldr	r3, [r4, #0]
 800bf0a:	1c5a      	adds	r2, r3, #1
 800bf0c:	6022      	str	r2, [r4, #0]
 800bf0e:	7019      	strb	r1, [r3, #0]
 800bf10:	68a3      	ldr	r3, [r4, #8]
 800bf12:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bf16:	3b01      	subs	r3, #1
 800bf18:	60a3      	str	r3, [r4, #8]
 800bf1a:	2900      	cmp	r1, #0
 800bf1c:	d1ed      	bne.n	800befa <_puts_r+0x52>
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	da11      	bge.n	800bf46 <_puts_r+0x9e>
 800bf22:	4622      	mov	r2, r4
 800bf24:	210a      	movs	r1, #10
 800bf26:	4628      	mov	r0, r5
 800bf28:	f000 f893 	bl	800c052 <__swbuf_r>
 800bf2c:	3001      	adds	r0, #1
 800bf2e:	d0d7      	beq.n	800bee0 <_puts_r+0x38>
 800bf30:	250a      	movs	r5, #10
 800bf32:	e7d7      	b.n	800bee4 <_puts_r+0x3c>
 800bf34:	4622      	mov	r2, r4
 800bf36:	4628      	mov	r0, r5
 800bf38:	f000 f88b 	bl	800c052 <__swbuf_r>
 800bf3c:	3001      	adds	r0, #1
 800bf3e:	d1e7      	bne.n	800bf10 <_puts_r+0x68>
 800bf40:	e7ce      	b.n	800bee0 <_puts_r+0x38>
 800bf42:	3e01      	subs	r6, #1
 800bf44:	e7e4      	b.n	800bf10 <_puts_r+0x68>
 800bf46:	6823      	ldr	r3, [r4, #0]
 800bf48:	1c5a      	adds	r2, r3, #1
 800bf4a:	6022      	str	r2, [r4, #0]
 800bf4c:	220a      	movs	r2, #10
 800bf4e:	701a      	strb	r2, [r3, #0]
 800bf50:	e7ee      	b.n	800bf30 <_puts_r+0x88>
	...

0800bf54 <puts>:
 800bf54:	4b02      	ldr	r3, [pc, #8]	@ (800bf60 <puts+0xc>)
 800bf56:	4601      	mov	r1, r0
 800bf58:	6818      	ldr	r0, [r3, #0]
 800bf5a:	f7ff bfa5 	b.w	800bea8 <_puts_r>
 800bf5e:	bf00      	nop
 800bf60:	2000003c 	.word	0x2000003c

0800bf64 <sniprintf>:
 800bf64:	b40c      	push	{r2, r3}
 800bf66:	b530      	push	{r4, r5, lr}
 800bf68:	4b17      	ldr	r3, [pc, #92]	@ (800bfc8 <sniprintf+0x64>)
 800bf6a:	1e0c      	subs	r4, r1, #0
 800bf6c:	681d      	ldr	r5, [r3, #0]
 800bf6e:	b09d      	sub	sp, #116	@ 0x74
 800bf70:	da08      	bge.n	800bf84 <sniprintf+0x20>
 800bf72:	238b      	movs	r3, #139	@ 0x8b
 800bf74:	602b      	str	r3, [r5, #0]
 800bf76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bf7a:	b01d      	add	sp, #116	@ 0x74
 800bf7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf80:	b002      	add	sp, #8
 800bf82:	4770      	bx	lr
 800bf84:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bf88:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bf8c:	bf14      	ite	ne
 800bf8e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800bf92:	4623      	moveq	r3, r4
 800bf94:	9304      	str	r3, [sp, #16]
 800bf96:	9307      	str	r3, [sp, #28]
 800bf98:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bf9c:	9002      	str	r0, [sp, #8]
 800bf9e:	9006      	str	r0, [sp, #24]
 800bfa0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bfa4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bfa6:	ab21      	add	r3, sp, #132	@ 0x84
 800bfa8:	a902      	add	r1, sp, #8
 800bfaa:	4628      	mov	r0, r5
 800bfac:	9301      	str	r3, [sp, #4]
 800bfae:	f001 fcf5 	bl	800d99c <_svfiprintf_r>
 800bfb2:	1c43      	adds	r3, r0, #1
 800bfb4:	bfbc      	itt	lt
 800bfb6:	238b      	movlt	r3, #139	@ 0x8b
 800bfb8:	602b      	strlt	r3, [r5, #0]
 800bfba:	2c00      	cmp	r4, #0
 800bfbc:	d0dd      	beq.n	800bf7a <sniprintf+0x16>
 800bfbe:	9b02      	ldr	r3, [sp, #8]
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	701a      	strb	r2, [r3, #0]
 800bfc4:	e7d9      	b.n	800bf7a <sniprintf+0x16>
 800bfc6:	bf00      	nop
 800bfc8:	2000003c 	.word	0x2000003c

0800bfcc <__sread>:
 800bfcc:	b510      	push	{r4, lr}
 800bfce:	460c      	mov	r4, r1
 800bfd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfd4:	f000 f956 	bl	800c284 <_read_r>
 800bfd8:	2800      	cmp	r0, #0
 800bfda:	bfab      	itete	ge
 800bfdc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bfde:	89a3      	ldrhlt	r3, [r4, #12]
 800bfe0:	181b      	addge	r3, r3, r0
 800bfe2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bfe6:	bfac      	ite	ge
 800bfe8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bfea:	81a3      	strhlt	r3, [r4, #12]
 800bfec:	bd10      	pop	{r4, pc}

0800bfee <__swrite>:
 800bfee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bff2:	461f      	mov	r7, r3
 800bff4:	898b      	ldrh	r3, [r1, #12]
 800bff6:	05db      	lsls	r3, r3, #23
 800bff8:	4605      	mov	r5, r0
 800bffa:	460c      	mov	r4, r1
 800bffc:	4616      	mov	r6, r2
 800bffe:	d505      	bpl.n	800c00c <__swrite+0x1e>
 800c000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c004:	2302      	movs	r3, #2
 800c006:	2200      	movs	r2, #0
 800c008:	f000 f92a 	bl	800c260 <_lseek_r>
 800c00c:	89a3      	ldrh	r3, [r4, #12]
 800c00e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c012:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c016:	81a3      	strh	r3, [r4, #12]
 800c018:	4632      	mov	r2, r6
 800c01a:	463b      	mov	r3, r7
 800c01c:	4628      	mov	r0, r5
 800c01e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c022:	f000 b941 	b.w	800c2a8 <_write_r>

0800c026 <__sseek>:
 800c026:	b510      	push	{r4, lr}
 800c028:	460c      	mov	r4, r1
 800c02a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c02e:	f000 f917 	bl	800c260 <_lseek_r>
 800c032:	1c43      	adds	r3, r0, #1
 800c034:	89a3      	ldrh	r3, [r4, #12]
 800c036:	bf15      	itete	ne
 800c038:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c03a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c03e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c042:	81a3      	strheq	r3, [r4, #12]
 800c044:	bf18      	it	ne
 800c046:	81a3      	strhne	r3, [r4, #12]
 800c048:	bd10      	pop	{r4, pc}

0800c04a <__sclose>:
 800c04a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c04e:	f000 b8a1 	b.w	800c194 <_close_r>

0800c052 <__swbuf_r>:
 800c052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c054:	460e      	mov	r6, r1
 800c056:	4614      	mov	r4, r2
 800c058:	4605      	mov	r5, r0
 800c05a:	b118      	cbz	r0, 800c064 <__swbuf_r+0x12>
 800c05c:	6a03      	ldr	r3, [r0, #32]
 800c05e:	b90b      	cbnz	r3, 800c064 <__swbuf_r+0x12>
 800c060:	f7ff feda 	bl	800be18 <__sinit>
 800c064:	69a3      	ldr	r3, [r4, #24]
 800c066:	60a3      	str	r3, [r4, #8]
 800c068:	89a3      	ldrh	r3, [r4, #12]
 800c06a:	071a      	lsls	r2, r3, #28
 800c06c:	d501      	bpl.n	800c072 <__swbuf_r+0x20>
 800c06e:	6923      	ldr	r3, [r4, #16]
 800c070:	b943      	cbnz	r3, 800c084 <__swbuf_r+0x32>
 800c072:	4621      	mov	r1, r4
 800c074:	4628      	mov	r0, r5
 800c076:	f000 f82b 	bl	800c0d0 <__swsetup_r>
 800c07a:	b118      	cbz	r0, 800c084 <__swbuf_r+0x32>
 800c07c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c080:	4638      	mov	r0, r7
 800c082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c084:	6823      	ldr	r3, [r4, #0]
 800c086:	6922      	ldr	r2, [r4, #16]
 800c088:	1a98      	subs	r0, r3, r2
 800c08a:	6963      	ldr	r3, [r4, #20]
 800c08c:	b2f6      	uxtb	r6, r6
 800c08e:	4283      	cmp	r3, r0
 800c090:	4637      	mov	r7, r6
 800c092:	dc05      	bgt.n	800c0a0 <__swbuf_r+0x4e>
 800c094:	4621      	mov	r1, r4
 800c096:	4628      	mov	r0, r5
 800c098:	f001 ff42 	bl	800df20 <_fflush_r>
 800c09c:	2800      	cmp	r0, #0
 800c09e:	d1ed      	bne.n	800c07c <__swbuf_r+0x2a>
 800c0a0:	68a3      	ldr	r3, [r4, #8]
 800c0a2:	3b01      	subs	r3, #1
 800c0a4:	60a3      	str	r3, [r4, #8]
 800c0a6:	6823      	ldr	r3, [r4, #0]
 800c0a8:	1c5a      	adds	r2, r3, #1
 800c0aa:	6022      	str	r2, [r4, #0]
 800c0ac:	701e      	strb	r6, [r3, #0]
 800c0ae:	6962      	ldr	r2, [r4, #20]
 800c0b0:	1c43      	adds	r3, r0, #1
 800c0b2:	429a      	cmp	r2, r3
 800c0b4:	d004      	beq.n	800c0c0 <__swbuf_r+0x6e>
 800c0b6:	89a3      	ldrh	r3, [r4, #12]
 800c0b8:	07db      	lsls	r3, r3, #31
 800c0ba:	d5e1      	bpl.n	800c080 <__swbuf_r+0x2e>
 800c0bc:	2e0a      	cmp	r6, #10
 800c0be:	d1df      	bne.n	800c080 <__swbuf_r+0x2e>
 800c0c0:	4621      	mov	r1, r4
 800c0c2:	4628      	mov	r0, r5
 800c0c4:	f001 ff2c 	bl	800df20 <_fflush_r>
 800c0c8:	2800      	cmp	r0, #0
 800c0ca:	d0d9      	beq.n	800c080 <__swbuf_r+0x2e>
 800c0cc:	e7d6      	b.n	800c07c <__swbuf_r+0x2a>
	...

0800c0d0 <__swsetup_r>:
 800c0d0:	b538      	push	{r3, r4, r5, lr}
 800c0d2:	4b29      	ldr	r3, [pc, #164]	@ (800c178 <__swsetup_r+0xa8>)
 800c0d4:	4605      	mov	r5, r0
 800c0d6:	6818      	ldr	r0, [r3, #0]
 800c0d8:	460c      	mov	r4, r1
 800c0da:	b118      	cbz	r0, 800c0e4 <__swsetup_r+0x14>
 800c0dc:	6a03      	ldr	r3, [r0, #32]
 800c0de:	b90b      	cbnz	r3, 800c0e4 <__swsetup_r+0x14>
 800c0e0:	f7ff fe9a 	bl	800be18 <__sinit>
 800c0e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0e8:	0719      	lsls	r1, r3, #28
 800c0ea:	d422      	bmi.n	800c132 <__swsetup_r+0x62>
 800c0ec:	06da      	lsls	r2, r3, #27
 800c0ee:	d407      	bmi.n	800c100 <__swsetup_r+0x30>
 800c0f0:	2209      	movs	r2, #9
 800c0f2:	602a      	str	r2, [r5, #0]
 800c0f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c0f8:	81a3      	strh	r3, [r4, #12]
 800c0fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c0fe:	e033      	b.n	800c168 <__swsetup_r+0x98>
 800c100:	0758      	lsls	r0, r3, #29
 800c102:	d512      	bpl.n	800c12a <__swsetup_r+0x5a>
 800c104:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c106:	b141      	cbz	r1, 800c11a <__swsetup_r+0x4a>
 800c108:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c10c:	4299      	cmp	r1, r3
 800c10e:	d002      	beq.n	800c116 <__swsetup_r+0x46>
 800c110:	4628      	mov	r0, r5
 800c112:	f000 ff65 	bl	800cfe0 <_free_r>
 800c116:	2300      	movs	r3, #0
 800c118:	6363      	str	r3, [r4, #52]	@ 0x34
 800c11a:	89a3      	ldrh	r3, [r4, #12]
 800c11c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c120:	81a3      	strh	r3, [r4, #12]
 800c122:	2300      	movs	r3, #0
 800c124:	6063      	str	r3, [r4, #4]
 800c126:	6923      	ldr	r3, [r4, #16]
 800c128:	6023      	str	r3, [r4, #0]
 800c12a:	89a3      	ldrh	r3, [r4, #12]
 800c12c:	f043 0308 	orr.w	r3, r3, #8
 800c130:	81a3      	strh	r3, [r4, #12]
 800c132:	6923      	ldr	r3, [r4, #16]
 800c134:	b94b      	cbnz	r3, 800c14a <__swsetup_r+0x7a>
 800c136:	89a3      	ldrh	r3, [r4, #12]
 800c138:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c13c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c140:	d003      	beq.n	800c14a <__swsetup_r+0x7a>
 800c142:	4621      	mov	r1, r4
 800c144:	4628      	mov	r0, r5
 800c146:	f001 ff39 	bl	800dfbc <__smakebuf_r>
 800c14a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c14e:	f013 0201 	ands.w	r2, r3, #1
 800c152:	d00a      	beq.n	800c16a <__swsetup_r+0x9a>
 800c154:	2200      	movs	r2, #0
 800c156:	60a2      	str	r2, [r4, #8]
 800c158:	6962      	ldr	r2, [r4, #20]
 800c15a:	4252      	negs	r2, r2
 800c15c:	61a2      	str	r2, [r4, #24]
 800c15e:	6922      	ldr	r2, [r4, #16]
 800c160:	b942      	cbnz	r2, 800c174 <__swsetup_r+0xa4>
 800c162:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c166:	d1c5      	bne.n	800c0f4 <__swsetup_r+0x24>
 800c168:	bd38      	pop	{r3, r4, r5, pc}
 800c16a:	0799      	lsls	r1, r3, #30
 800c16c:	bf58      	it	pl
 800c16e:	6962      	ldrpl	r2, [r4, #20]
 800c170:	60a2      	str	r2, [r4, #8]
 800c172:	e7f4      	b.n	800c15e <__swsetup_r+0x8e>
 800c174:	2000      	movs	r0, #0
 800c176:	e7f7      	b.n	800c168 <__swsetup_r+0x98>
 800c178:	2000003c 	.word	0x2000003c

0800c17c <memset>:
 800c17c:	4402      	add	r2, r0
 800c17e:	4603      	mov	r3, r0
 800c180:	4293      	cmp	r3, r2
 800c182:	d100      	bne.n	800c186 <memset+0xa>
 800c184:	4770      	bx	lr
 800c186:	f803 1b01 	strb.w	r1, [r3], #1
 800c18a:	e7f9      	b.n	800c180 <memset+0x4>

0800c18c <_localeconv_r>:
 800c18c:	4800      	ldr	r0, [pc, #0]	@ (800c190 <_localeconv_r+0x4>)
 800c18e:	4770      	bx	lr
 800c190:	2000017c 	.word	0x2000017c

0800c194 <_close_r>:
 800c194:	b538      	push	{r3, r4, r5, lr}
 800c196:	4d06      	ldr	r5, [pc, #24]	@ (800c1b0 <_close_r+0x1c>)
 800c198:	2300      	movs	r3, #0
 800c19a:	4604      	mov	r4, r0
 800c19c:	4608      	mov	r0, r1
 800c19e:	602b      	str	r3, [r5, #0]
 800c1a0:	f7f6 fe78 	bl	8002e94 <_close>
 800c1a4:	1c43      	adds	r3, r0, #1
 800c1a6:	d102      	bne.n	800c1ae <_close_r+0x1a>
 800c1a8:	682b      	ldr	r3, [r5, #0]
 800c1aa:	b103      	cbz	r3, 800c1ae <_close_r+0x1a>
 800c1ac:	6023      	str	r3, [r4, #0]
 800c1ae:	bd38      	pop	{r3, r4, r5, pc}
 800c1b0:	20005080 	.word	0x20005080

0800c1b4 <_reclaim_reent>:
 800c1b4:	4b29      	ldr	r3, [pc, #164]	@ (800c25c <_reclaim_reent+0xa8>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	4283      	cmp	r3, r0
 800c1ba:	b570      	push	{r4, r5, r6, lr}
 800c1bc:	4604      	mov	r4, r0
 800c1be:	d04b      	beq.n	800c258 <_reclaim_reent+0xa4>
 800c1c0:	69c3      	ldr	r3, [r0, #28]
 800c1c2:	b1ab      	cbz	r3, 800c1f0 <_reclaim_reent+0x3c>
 800c1c4:	68db      	ldr	r3, [r3, #12]
 800c1c6:	b16b      	cbz	r3, 800c1e4 <_reclaim_reent+0x30>
 800c1c8:	2500      	movs	r5, #0
 800c1ca:	69e3      	ldr	r3, [r4, #28]
 800c1cc:	68db      	ldr	r3, [r3, #12]
 800c1ce:	5959      	ldr	r1, [r3, r5]
 800c1d0:	2900      	cmp	r1, #0
 800c1d2:	d13b      	bne.n	800c24c <_reclaim_reent+0x98>
 800c1d4:	3504      	adds	r5, #4
 800c1d6:	2d80      	cmp	r5, #128	@ 0x80
 800c1d8:	d1f7      	bne.n	800c1ca <_reclaim_reent+0x16>
 800c1da:	69e3      	ldr	r3, [r4, #28]
 800c1dc:	4620      	mov	r0, r4
 800c1de:	68d9      	ldr	r1, [r3, #12]
 800c1e0:	f000 fefe 	bl	800cfe0 <_free_r>
 800c1e4:	69e3      	ldr	r3, [r4, #28]
 800c1e6:	6819      	ldr	r1, [r3, #0]
 800c1e8:	b111      	cbz	r1, 800c1f0 <_reclaim_reent+0x3c>
 800c1ea:	4620      	mov	r0, r4
 800c1ec:	f000 fef8 	bl	800cfe0 <_free_r>
 800c1f0:	6961      	ldr	r1, [r4, #20]
 800c1f2:	b111      	cbz	r1, 800c1fa <_reclaim_reent+0x46>
 800c1f4:	4620      	mov	r0, r4
 800c1f6:	f000 fef3 	bl	800cfe0 <_free_r>
 800c1fa:	69e1      	ldr	r1, [r4, #28]
 800c1fc:	b111      	cbz	r1, 800c204 <_reclaim_reent+0x50>
 800c1fe:	4620      	mov	r0, r4
 800c200:	f000 feee 	bl	800cfe0 <_free_r>
 800c204:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c206:	b111      	cbz	r1, 800c20e <_reclaim_reent+0x5a>
 800c208:	4620      	mov	r0, r4
 800c20a:	f000 fee9 	bl	800cfe0 <_free_r>
 800c20e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c210:	b111      	cbz	r1, 800c218 <_reclaim_reent+0x64>
 800c212:	4620      	mov	r0, r4
 800c214:	f000 fee4 	bl	800cfe0 <_free_r>
 800c218:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800c21a:	b111      	cbz	r1, 800c222 <_reclaim_reent+0x6e>
 800c21c:	4620      	mov	r0, r4
 800c21e:	f000 fedf 	bl	800cfe0 <_free_r>
 800c222:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c224:	b111      	cbz	r1, 800c22c <_reclaim_reent+0x78>
 800c226:	4620      	mov	r0, r4
 800c228:	f000 feda 	bl	800cfe0 <_free_r>
 800c22c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c22e:	b111      	cbz	r1, 800c236 <_reclaim_reent+0x82>
 800c230:	4620      	mov	r0, r4
 800c232:	f000 fed5 	bl	800cfe0 <_free_r>
 800c236:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c238:	b111      	cbz	r1, 800c240 <_reclaim_reent+0x8c>
 800c23a:	4620      	mov	r0, r4
 800c23c:	f000 fed0 	bl	800cfe0 <_free_r>
 800c240:	6a23      	ldr	r3, [r4, #32]
 800c242:	b14b      	cbz	r3, 800c258 <_reclaim_reent+0xa4>
 800c244:	4620      	mov	r0, r4
 800c246:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c24a:	4718      	bx	r3
 800c24c:	680e      	ldr	r6, [r1, #0]
 800c24e:	4620      	mov	r0, r4
 800c250:	f000 fec6 	bl	800cfe0 <_free_r>
 800c254:	4631      	mov	r1, r6
 800c256:	e7bb      	b.n	800c1d0 <_reclaim_reent+0x1c>
 800c258:	bd70      	pop	{r4, r5, r6, pc}
 800c25a:	bf00      	nop
 800c25c:	2000003c 	.word	0x2000003c

0800c260 <_lseek_r>:
 800c260:	b538      	push	{r3, r4, r5, lr}
 800c262:	4d07      	ldr	r5, [pc, #28]	@ (800c280 <_lseek_r+0x20>)
 800c264:	4604      	mov	r4, r0
 800c266:	4608      	mov	r0, r1
 800c268:	4611      	mov	r1, r2
 800c26a:	2200      	movs	r2, #0
 800c26c:	602a      	str	r2, [r5, #0]
 800c26e:	461a      	mov	r2, r3
 800c270:	f7f6 fe37 	bl	8002ee2 <_lseek>
 800c274:	1c43      	adds	r3, r0, #1
 800c276:	d102      	bne.n	800c27e <_lseek_r+0x1e>
 800c278:	682b      	ldr	r3, [r5, #0]
 800c27a:	b103      	cbz	r3, 800c27e <_lseek_r+0x1e>
 800c27c:	6023      	str	r3, [r4, #0]
 800c27e:	bd38      	pop	{r3, r4, r5, pc}
 800c280:	20005080 	.word	0x20005080

0800c284 <_read_r>:
 800c284:	b538      	push	{r3, r4, r5, lr}
 800c286:	4d07      	ldr	r5, [pc, #28]	@ (800c2a4 <_read_r+0x20>)
 800c288:	4604      	mov	r4, r0
 800c28a:	4608      	mov	r0, r1
 800c28c:	4611      	mov	r1, r2
 800c28e:	2200      	movs	r2, #0
 800c290:	602a      	str	r2, [r5, #0]
 800c292:	461a      	mov	r2, r3
 800c294:	f7f6 fdc5 	bl	8002e22 <_read>
 800c298:	1c43      	adds	r3, r0, #1
 800c29a:	d102      	bne.n	800c2a2 <_read_r+0x1e>
 800c29c:	682b      	ldr	r3, [r5, #0]
 800c29e:	b103      	cbz	r3, 800c2a2 <_read_r+0x1e>
 800c2a0:	6023      	str	r3, [r4, #0]
 800c2a2:	bd38      	pop	{r3, r4, r5, pc}
 800c2a4:	20005080 	.word	0x20005080

0800c2a8 <_write_r>:
 800c2a8:	b538      	push	{r3, r4, r5, lr}
 800c2aa:	4d07      	ldr	r5, [pc, #28]	@ (800c2c8 <_write_r+0x20>)
 800c2ac:	4604      	mov	r4, r0
 800c2ae:	4608      	mov	r0, r1
 800c2b0:	4611      	mov	r1, r2
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	602a      	str	r2, [r5, #0]
 800c2b6:	461a      	mov	r2, r3
 800c2b8:	f7f6 fdd0 	bl	8002e5c <_write>
 800c2bc:	1c43      	adds	r3, r0, #1
 800c2be:	d102      	bne.n	800c2c6 <_write_r+0x1e>
 800c2c0:	682b      	ldr	r3, [r5, #0]
 800c2c2:	b103      	cbz	r3, 800c2c6 <_write_r+0x1e>
 800c2c4:	6023      	str	r3, [r4, #0]
 800c2c6:	bd38      	pop	{r3, r4, r5, pc}
 800c2c8:	20005080 	.word	0x20005080

0800c2cc <__errno>:
 800c2cc:	4b01      	ldr	r3, [pc, #4]	@ (800c2d4 <__errno+0x8>)
 800c2ce:	6818      	ldr	r0, [r3, #0]
 800c2d0:	4770      	bx	lr
 800c2d2:	bf00      	nop
 800c2d4:	2000003c 	.word	0x2000003c

0800c2d8 <__libc_init_array>:
 800c2d8:	b570      	push	{r4, r5, r6, lr}
 800c2da:	4d0d      	ldr	r5, [pc, #52]	@ (800c310 <__libc_init_array+0x38>)
 800c2dc:	4c0d      	ldr	r4, [pc, #52]	@ (800c314 <__libc_init_array+0x3c>)
 800c2de:	1b64      	subs	r4, r4, r5
 800c2e0:	10a4      	asrs	r4, r4, #2
 800c2e2:	2600      	movs	r6, #0
 800c2e4:	42a6      	cmp	r6, r4
 800c2e6:	d109      	bne.n	800c2fc <__libc_init_array+0x24>
 800c2e8:	4d0b      	ldr	r5, [pc, #44]	@ (800c318 <__libc_init_array+0x40>)
 800c2ea:	4c0c      	ldr	r4, [pc, #48]	@ (800c31c <__libc_init_array+0x44>)
 800c2ec:	f001 ffd4 	bl	800e298 <_init>
 800c2f0:	1b64      	subs	r4, r4, r5
 800c2f2:	10a4      	asrs	r4, r4, #2
 800c2f4:	2600      	movs	r6, #0
 800c2f6:	42a6      	cmp	r6, r4
 800c2f8:	d105      	bne.n	800c306 <__libc_init_array+0x2e>
 800c2fa:	bd70      	pop	{r4, r5, r6, pc}
 800c2fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c300:	4798      	blx	r3
 800c302:	3601      	adds	r6, #1
 800c304:	e7ee      	b.n	800c2e4 <__libc_init_array+0xc>
 800c306:	f855 3b04 	ldr.w	r3, [r5], #4
 800c30a:	4798      	blx	r3
 800c30c:	3601      	adds	r6, #1
 800c30e:	e7f2      	b.n	800c2f6 <__libc_init_array+0x1e>
 800c310:	0800eb58 	.word	0x0800eb58
 800c314:	0800eb58 	.word	0x0800eb58
 800c318:	0800eb58 	.word	0x0800eb58
 800c31c:	0800eb5c 	.word	0x0800eb5c

0800c320 <__retarget_lock_init_recursive>:
 800c320:	4770      	bx	lr

0800c322 <__retarget_lock_acquire_recursive>:
 800c322:	4770      	bx	lr

0800c324 <__retarget_lock_release_recursive>:
 800c324:	4770      	bx	lr

0800c326 <memcpy>:
 800c326:	440a      	add	r2, r1
 800c328:	4291      	cmp	r1, r2
 800c32a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c32e:	d100      	bne.n	800c332 <memcpy+0xc>
 800c330:	4770      	bx	lr
 800c332:	b510      	push	{r4, lr}
 800c334:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c338:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c33c:	4291      	cmp	r1, r2
 800c33e:	d1f9      	bne.n	800c334 <memcpy+0xe>
 800c340:	bd10      	pop	{r4, pc}

0800c342 <quorem>:
 800c342:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c346:	6903      	ldr	r3, [r0, #16]
 800c348:	690c      	ldr	r4, [r1, #16]
 800c34a:	42a3      	cmp	r3, r4
 800c34c:	4607      	mov	r7, r0
 800c34e:	db7e      	blt.n	800c44e <quorem+0x10c>
 800c350:	3c01      	subs	r4, #1
 800c352:	f101 0814 	add.w	r8, r1, #20
 800c356:	00a3      	lsls	r3, r4, #2
 800c358:	f100 0514 	add.w	r5, r0, #20
 800c35c:	9300      	str	r3, [sp, #0]
 800c35e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c362:	9301      	str	r3, [sp, #4]
 800c364:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c368:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c36c:	3301      	adds	r3, #1
 800c36e:	429a      	cmp	r2, r3
 800c370:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c374:	fbb2 f6f3 	udiv	r6, r2, r3
 800c378:	d32e      	bcc.n	800c3d8 <quorem+0x96>
 800c37a:	f04f 0a00 	mov.w	sl, #0
 800c37e:	46c4      	mov	ip, r8
 800c380:	46ae      	mov	lr, r5
 800c382:	46d3      	mov	fp, sl
 800c384:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c388:	b298      	uxth	r0, r3
 800c38a:	fb06 a000 	mla	r0, r6, r0, sl
 800c38e:	0c02      	lsrs	r2, r0, #16
 800c390:	0c1b      	lsrs	r3, r3, #16
 800c392:	fb06 2303 	mla	r3, r6, r3, r2
 800c396:	f8de 2000 	ldr.w	r2, [lr]
 800c39a:	b280      	uxth	r0, r0
 800c39c:	b292      	uxth	r2, r2
 800c39e:	1a12      	subs	r2, r2, r0
 800c3a0:	445a      	add	r2, fp
 800c3a2:	f8de 0000 	ldr.w	r0, [lr]
 800c3a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c3aa:	b29b      	uxth	r3, r3
 800c3ac:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c3b0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c3b4:	b292      	uxth	r2, r2
 800c3b6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c3ba:	45e1      	cmp	r9, ip
 800c3bc:	f84e 2b04 	str.w	r2, [lr], #4
 800c3c0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c3c4:	d2de      	bcs.n	800c384 <quorem+0x42>
 800c3c6:	9b00      	ldr	r3, [sp, #0]
 800c3c8:	58eb      	ldr	r3, [r5, r3]
 800c3ca:	b92b      	cbnz	r3, 800c3d8 <quorem+0x96>
 800c3cc:	9b01      	ldr	r3, [sp, #4]
 800c3ce:	3b04      	subs	r3, #4
 800c3d0:	429d      	cmp	r5, r3
 800c3d2:	461a      	mov	r2, r3
 800c3d4:	d32f      	bcc.n	800c436 <quorem+0xf4>
 800c3d6:	613c      	str	r4, [r7, #16]
 800c3d8:	4638      	mov	r0, r7
 800c3da:	f001 f97b 	bl	800d6d4 <__mcmp>
 800c3de:	2800      	cmp	r0, #0
 800c3e0:	db25      	blt.n	800c42e <quorem+0xec>
 800c3e2:	4629      	mov	r1, r5
 800c3e4:	2000      	movs	r0, #0
 800c3e6:	f858 2b04 	ldr.w	r2, [r8], #4
 800c3ea:	f8d1 c000 	ldr.w	ip, [r1]
 800c3ee:	fa1f fe82 	uxth.w	lr, r2
 800c3f2:	fa1f f38c 	uxth.w	r3, ip
 800c3f6:	eba3 030e 	sub.w	r3, r3, lr
 800c3fa:	4403      	add	r3, r0
 800c3fc:	0c12      	lsrs	r2, r2, #16
 800c3fe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c402:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c406:	b29b      	uxth	r3, r3
 800c408:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c40c:	45c1      	cmp	r9, r8
 800c40e:	f841 3b04 	str.w	r3, [r1], #4
 800c412:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c416:	d2e6      	bcs.n	800c3e6 <quorem+0xa4>
 800c418:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c41c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c420:	b922      	cbnz	r2, 800c42c <quorem+0xea>
 800c422:	3b04      	subs	r3, #4
 800c424:	429d      	cmp	r5, r3
 800c426:	461a      	mov	r2, r3
 800c428:	d30b      	bcc.n	800c442 <quorem+0x100>
 800c42a:	613c      	str	r4, [r7, #16]
 800c42c:	3601      	adds	r6, #1
 800c42e:	4630      	mov	r0, r6
 800c430:	b003      	add	sp, #12
 800c432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c436:	6812      	ldr	r2, [r2, #0]
 800c438:	3b04      	subs	r3, #4
 800c43a:	2a00      	cmp	r2, #0
 800c43c:	d1cb      	bne.n	800c3d6 <quorem+0x94>
 800c43e:	3c01      	subs	r4, #1
 800c440:	e7c6      	b.n	800c3d0 <quorem+0x8e>
 800c442:	6812      	ldr	r2, [r2, #0]
 800c444:	3b04      	subs	r3, #4
 800c446:	2a00      	cmp	r2, #0
 800c448:	d1ef      	bne.n	800c42a <quorem+0xe8>
 800c44a:	3c01      	subs	r4, #1
 800c44c:	e7ea      	b.n	800c424 <quorem+0xe2>
 800c44e:	2000      	movs	r0, #0
 800c450:	e7ee      	b.n	800c430 <quorem+0xee>
 800c452:	0000      	movs	r0, r0
 800c454:	0000      	movs	r0, r0
	...

0800c458 <_dtoa_r>:
 800c458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c45c:	69c7      	ldr	r7, [r0, #28]
 800c45e:	b099      	sub	sp, #100	@ 0x64
 800c460:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c464:	ec55 4b10 	vmov	r4, r5, d0
 800c468:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c46a:	9109      	str	r1, [sp, #36]	@ 0x24
 800c46c:	4683      	mov	fp, r0
 800c46e:	920e      	str	r2, [sp, #56]	@ 0x38
 800c470:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c472:	b97f      	cbnz	r7, 800c494 <_dtoa_r+0x3c>
 800c474:	2010      	movs	r0, #16
 800c476:	f000 fdfd 	bl	800d074 <malloc>
 800c47a:	4602      	mov	r2, r0
 800c47c:	f8cb 001c 	str.w	r0, [fp, #28]
 800c480:	b920      	cbnz	r0, 800c48c <_dtoa_r+0x34>
 800c482:	4ba7      	ldr	r3, [pc, #668]	@ (800c720 <_dtoa_r+0x2c8>)
 800c484:	21ef      	movs	r1, #239	@ 0xef
 800c486:	48a7      	ldr	r0, [pc, #668]	@ (800c724 <_dtoa_r+0x2cc>)
 800c488:	f001 fe20 	bl	800e0cc <__assert_func>
 800c48c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c490:	6007      	str	r7, [r0, #0]
 800c492:	60c7      	str	r7, [r0, #12]
 800c494:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c498:	6819      	ldr	r1, [r3, #0]
 800c49a:	b159      	cbz	r1, 800c4b4 <_dtoa_r+0x5c>
 800c49c:	685a      	ldr	r2, [r3, #4]
 800c49e:	604a      	str	r2, [r1, #4]
 800c4a0:	2301      	movs	r3, #1
 800c4a2:	4093      	lsls	r3, r2
 800c4a4:	608b      	str	r3, [r1, #8]
 800c4a6:	4658      	mov	r0, fp
 800c4a8:	f000 feda 	bl	800d260 <_Bfree>
 800c4ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	601a      	str	r2, [r3, #0]
 800c4b4:	1e2b      	subs	r3, r5, #0
 800c4b6:	bfb9      	ittee	lt
 800c4b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c4bc:	9303      	strlt	r3, [sp, #12]
 800c4be:	2300      	movge	r3, #0
 800c4c0:	6033      	strge	r3, [r6, #0]
 800c4c2:	9f03      	ldr	r7, [sp, #12]
 800c4c4:	4b98      	ldr	r3, [pc, #608]	@ (800c728 <_dtoa_r+0x2d0>)
 800c4c6:	bfbc      	itt	lt
 800c4c8:	2201      	movlt	r2, #1
 800c4ca:	6032      	strlt	r2, [r6, #0]
 800c4cc:	43bb      	bics	r3, r7
 800c4ce:	d112      	bne.n	800c4f6 <_dtoa_r+0x9e>
 800c4d0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c4d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c4d6:	6013      	str	r3, [r2, #0]
 800c4d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c4dc:	4323      	orrs	r3, r4
 800c4de:	f000 854d 	beq.w	800cf7c <_dtoa_r+0xb24>
 800c4e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c4e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c73c <_dtoa_r+0x2e4>
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	f000 854f 	beq.w	800cf8c <_dtoa_r+0xb34>
 800c4ee:	f10a 0303 	add.w	r3, sl, #3
 800c4f2:	f000 bd49 	b.w	800cf88 <_dtoa_r+0xb30>
 800c4f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	ec51 0b17 	vmov	r0, r1, d7
 800c500:	2300      	movs	r3, #0
 800c502:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c506:	f7f4 fae7 	bl	8000ad8 <__aeabi_dcmpeq>
 800c50a:	4680      	mov	r8, r0
 800c50c:	b158      	cbz	r0, 800c526 <_dtoa_r+0xce>
 800c50e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c510:	2301      	movs	r3, #1
 800c512:	6013      	str	r3, [r2, #0]
 800c514:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c516:	b113      	cbz	r3, 800c51e <_dtoa_r+0xc6>
 800c518:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c51a:	4b84      	ldr	r3, [pc, #528]	@ (800c72c <_dtoa_r+0x2d4>)
 800c51c:	6013      	str	r3, [r2, #0]
 800c51e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c740 <_dtoa_r+0x2e8>
 800c522:	f000 bd33 	b.w	800cf8c <_dtoa_r+0xb34>
 800c526:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c52a:	aa16      	add	r2, sp, #88	@ 0x58
 800c52c:	a917      	add	r1, sp, #92	@ 0x5c
 800c52e:	4658      	mov	r0, fp
 800c530:	f001 f980 	bl	800d834 <__d2b>
 800c534:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c538:	4681      	mov	r9, r0
 800c53a:	2e00      	cmp	r6, #0
 800c53c:	d077      	beq.n	800c62e <_dtoa_r+0x1d6>
 800c53e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c540:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c544:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c548:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c54c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c550:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c554:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c558:	4619      	mov	r1, r3
 800c55a:	2200      	movs	r2, #0
 800c55c:	4b74      	ldr	r3, [pc, #464]	@ (800c730 <_dtoa_r+0x2d8>)
 800c55e:	f7f3 fe9b 	bl	8000298 <__aeabi_dsub>
 800c562:	a369      	add	r3, pc, #420	@ (adr r3, 800c708 <_dtoa_r+0x2b0>)
 800c564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c568:	f7f4 f84e 	bl	8000608 <__aeabi_dmul>
 800c56c:	a368      	add	r3, pc, #416	@ (adr r3, 800c710 <_dtoa_r+0x2b8>)
 800c56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c572:	f7f3 fe93 	bl	800029c <__adddf3>
 800c576:	4604      	mov	r4, r0
 800c578:	4630      	mov	r0, r6
 800c57a:	460d      	mov	r5, r1
 800c57c:	f7f3 ffda 	bl	8000534 <__aeabi_i2d>
 800c580:	a365      	add	r3, pc, #404	@ (adr r3, 800c718 <_dtoa_r+0x2c0>)
 800c582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c586:	f7f4 f83f 	bl	8000608 <__aeabi_dmul>
 800c58a:	4602      	mov	r2, r0
 800c58c:	460b      	mov	r3, r1
 800c58e:	4620      	mov	r0, r4
 800c590:	4629      	mov	r1, r5
 800c592:	f7f3 fe83 	bl	800029c <__adddf3>
 800c596:	4604      	mov	r4, r0
 800c598:	460d      	mov	r5, r1
 800c59a:	f7f4 fae5 	bl	8000b68 <__aeabi_d2iz>
 800c59e:	2200      	movs	r2, #0
 800c5a0:	4607      	mov	r7, r0
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	4620      	mov	r0, r4
 800c5a6:	4629      	mov	r1, r5
 800c5a8:	f7f4 faa0 	bl	8000aec <__aeabi_dcmplt>
 800c5ac:	b140      	cbz	r0, 800c5c0 <_dtoa_r+0x168>
 800c5ae:	4638      	mov	r0, r7
 800c5b0:	f7f3 ffc0 	bl	8000534 <__aeabi_i2d>
 800c5b4:	4622      	mov	r2, r4
 800c5b6:	462b      	mov	r3, r5
 800c5b8:	f7f4 fa8e 	bl	8000ad8 <__aeabi_dcmpeq>
 800c5bc:	b900      	cbnz	r0, 800c5c0 <_dtoa_r+0x168>
 800c5be:	3f01      	subs	r7, #1
 800c5c0:	2f16      	cmp	r7, #22
 800c5c2:	d851      	bhi.n	800c668 <_dtoa_r+0x210>
 800c5c4:	4b5b      	ldr	r3, [pc, #364]	@ (800c734 <_dtoa_r+0x2dc>)
 800c5c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c5d2:	f7f4 fa8b 	bl	8000aec <__aeabi_dcmplt>
 800c5d6:	2800      	cmp	r0, #0
 800c5d8:	d048      	beq.n	800c66c <_dtoa_r+0x214>
 800c5da:	3f01      	subs	r7, #1
 800c5dc:	2300      	movs	r3, #0
 800c5de:	9312      	str	r3, [sp, #72]	@ 0x48
 800c5e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c5e2:	1b9b      	subs	r3, r3, r6
 800c5e4:	1e5a      	subs	r2, r3, #1
 800c5e6:	bf44      	itt	mi
 800c5e8:	f1c3 0801 	rsbmi	r8, r3, #1
 800c5ec:	2300      	movmi	r3, #0
 800c5ee:	9208      	str	r2, [sp, #32]
 800c5f0:	bf54      	ite	pl
 800c5f2:	f04f 0800 	movpl.w	r8, #0
 800c5f6:	9308      	strmi	r3, [sp, #32]
 800c5f8:	2f00      	cmp	r7, #0
 800c5fa:	db39      	blt.n	800c670 <_dtoa_r+0x218>
 800c5fc:	9b08      	ldr	r3, [sp, #32]
 800c5fe:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c600:	443b      	add	r3, r7
 800c602:	9308      	str	r3, [sp, #32]
 800c604:	2300      	movs	r3, #0
 800c606:	930a      	str	r3, [sp, #40]	@ 0x28
 800c608:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c60a:	2b09      	cmp	r3, #9
 800c60c:	d864      	bhi.n	800c6d8 <_dtoa_r+0x280>
 800c60e:	2b05      	cmp	r3, #5
 800c610:	bfc4      	itt	gt
 800c612:	3b04      	subgt	r3, #4
 800c614:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c618:	f1a3 0302 	sub.w	r3, r3, #2
 800c61c:	bfcc      	ite	gt
 800c61e:	2400      	movgt	r4, #0
 800c620:	2401      	movle	r4, #1
 800c622:	2b03      	cmp	r3, #3
 800c624:	d863      	bhi.n	800c6ee <_dtoa_r+0x296>
 800c626:	e8df f003 	tbb	[pc, r3]
 800c62a:	372a      	.short	0x372a
 800c62c:	5535      	.short	0x5535
 800c62e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c632:	441e      	add	r6, r3
 800c634:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c638:	2b20      	cmp	r3, #32
 800c63a:	bfc1      	itttt	gt
 800c63c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c640:	409f      	lslgt	r7, r3
 800c642:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c646:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c64a:	bfd6      	itet	le
 800c64c:	f1c3 0320 	rsble	r3, r3, #32
 800c650:	ea47 0003 	orrgt.w	r0, r7, r3
 800c654:	fa04 f003 	lslle.w	r0, r4, r3
 800c658:	f7f3 ff5c 	bl	8000514 <__aeabi_ui2d>
 800c65c:	2201      	movs	r2, #1
 800c65e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c662:	3e01      	subs	r6, #1
 800c664:	9214      	str	r2, [sp, #80]	@ 0x50
 800c666:	e777      	b.n	800c558 <_dtoa_r+0x100>
 800c668:	2301      	movs	r3, #1
 800c66a:	e7b8      	b.n	800c5de <_dtoa_r+0x186>
 800c66c:	9012      	str	r0, [sp, #72]	@ 0x48
 800c66e:	e7b7      	b.n	800c5e0 <_dtoa_r+0x188>
 800c670:	427b      	negs	r3, r7
 800c672:	930a      	str	r3, [sp, #40]	@ 0x28
 800c674:	2300      	movs	r3, #0
 800c676:	eba8 0807 	sub.w	r8, r8, r7
 800c67a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c67c:	e7c4      	b.n	800c608 <_dtoa_r+0x1b0>
 800c67e:	2300      	movs	r3, #0
 800c680:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c682:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c684:	2b00      	cmp	r3, #0
 800c686:	dc35      	bgt.n	800c6f4 <_dtoa_r+0x29c>
 800c688:	2301      	movs	r3, #1
 800c68a:	9300      	str	r3, [sp, #0]
 800c68c:	9307      	str	r3, [sp, #28]
 800c68e:	461a      	mov	r2, r3
 800c690:	920e      	str	r2, [sp, #56]	@ 0x38
 800c692:	e00b      	b.n	800c6ac <_dtoa_r+0x254>
 800c694:	2301      	movs	r3, #1
 800c696:	e7f3      	b.n	800c680 <_dtoa_r+0x228>
 800c698:	2300      	movs	r3, #0
 800c69a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c69c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c69e:	18fb      	adds	r3, r7, r3
 800c6a0:	9300      	str	r3, [sp, #0]
 800c6a2:	3301      	adds	r3, #1
 800c6a4:	2b01      	cmp	r3, #1
 800c6a6:	9307      	str	r3, [sp, #28]
 800c6a8:	bfb8      	it	lt
 800c6aa:	2301      	movlt	r3, #1
 800c6ac:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c6b0:	2100      	movs	r1, #0
 800c6b2:	2204      	movs	r2, #4
 800c6b4:	f102 0514 	add.w	r5, r2, #20
 800c6b8:	429d      	cmp	r5, r3
 800c6ba:	d91f      	bls.n	800c6fc <_dtoa_r+0x2a4>
 800c6bc:	6041      	str	r1, [r0, #4]
 800c6be:	4658      	mov	r0, fp
 800c6c0:	f000 fd8e 	bl	800d1e0 <_Balloc>
 800c6c4:	4682      	mov	sl, r0
 800c6c6:	2800      	cmp	r0, #0
 800c6c8:	d13c      	bne.n	800c744 <_dtoa_r+0x2ec>
 800c6ca:	4b1b      	ldr	r3, [pc, #108]	@ (800c738 <_dtoa_r+0x2e0>)
 800c6cc:	4602      	mov	r2, r0
 800c6ce:	f240 11af 	movw	r1, #431	@ 0x1af
 800c6d2:	e6d8      	b.n	800c486 <_dtoa_r+0x2e>
 800c6d4:	2301      	movs	r3, #1
 800c6d6:	e7e0      	b.n	800c69a <_dtoa_r+0x242>
 800c6d8:	2401      	movs	r4, #1
 800c6da:	2300      	movs	r3, #0
 800c6dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6de:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c6e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c6e4:	9300      	str	r3, [sp, #0]
 800c6e6:	9307      	str	r3, [sp, #28]
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	2312      	movs	r3, #18
 800c6ec:	e7d0      	b.n	800c690 <_dtoa_r+0x238>
 800c6ee:	2301      	movs	r3, #1
 800c6f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c6f2:	e7f5      	b.n	800c6e0 <_dtoa_r+0x288>
 800c6f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c6f6:	9300      	str	r3, [sp, #0]
 800c6f8:	9307      	str	r3, [sp, #28]
 800c6fa:	e7d7      	b.n	800c6ac <_dtoa_r+0x254>
 800c6fc:	3101      	adds	r1, #1
 800c6fe:	0052      	lsls	r2, r2, #1
 800c700:	e7d8      	b.n	800c6b4 <_dtoa_r+0x25c>
 800c702:	bf00      	nop
 800c704:	f3af 8000 	nop.w
 800c708:	636f4361 	.word	0x636f4361
 800c70c:	3fd287a7 	.word	0x3fd287a7
 800c710:	8b60c8b3 	.word	0x8b60c8b3
 800c714:	3fc68a28 	.word	0x3fc68a28
 800c718:	509f79fb 	.word	0x509f79fb
 800c71c:	3fd34413 	.word	0x3fd34413
 800c720:	0800e821 	.word	0x0800e821
 800c724:	0800e838 	.word	0x0800e838
 800c728:	7ff00000 	.word	0x7ff00000
 800c72c:	0800e7f1 	.word	0x0800e7f1
 800c730:	3ff80000 	.word	0x3ff80000
 800c734:	0800e930 	.word	0x0800e930
 800c738:	0800e890 	.word	0x0800e890
 800c73c:	0800e81d 	.word	0x0800e81d
 800c740:	0800e7f0 	.word	0x0800e7f0
 800c744:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c748:	6018      	str	r0, [r3, #0]
 800c74a:	9b07      	ldr	r3, [sp, #28]
 800c74c:	2b0e      	cmp	r3, #14
 800c74e:	f200 80a4 	bhi.w	800c89a <_dtoa_r+0x442>
 800c752:	2c00      	cmp	r4, #0
 800c754:	f000 80a1 	beq.w	800c89a <_dtoa_r+0x442>
 800c758:	2f00      	cmp	r7, #0
 800c75a:	dd33      	ble.n	800c7c4 <_dtoa_r+0x36c>
 800c75c:	4bad      	ldr	r3, [pc, #692]	@ (800ca14 <_dtoa_r+0x5bc>)
 800c75e:	f007 020f 	and.w	r2, r7, #15
 800c762:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c766:	ed93 7b00 	vldr	d7, [r3]
 800c76a:	05f8      	lsls	r0, r7, #23
 800c76c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c770:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c774:	d516      	bpl.n	800c7a4 <_dtoa_r+0x34c>
 800c776:	4ba8      	ldr	r3, [pc, #672]	@ (800ca18 <_dtoa_r+0x5c0>)
 800c778:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c77c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c780:	f7f4 f86c 	bl	800085c <__aeabi_ddiv>
 800c784:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c788:	f004 040f 	and.w	r4, r4, #15
 800c78c:	2603      	movs	r6, #3
 800c78e:	4da2      	ldr	r5, [pc, #648]	@ (800ca18 <_dtoa_r+0x5c0>)
 800c790:	b954      	cbnz	r4, 800c7a8 <_dtoa_r+0x350>
 800c792:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c796:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c79a:	f7f4 f85f 	bl	800085c <__aeabi_ddiv>
 800c79e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7a2:	e028      	b.n	800c7f6 <_dtoa_r+0x39e>
 800c7a4:	2602      	movs	r6, #2
 800c7a6:	e7f2      	b.n	800c78e <_dtoa_r+0x336>
 800c7a8:	07e1      	lsls	r1, r4, #31
 800c7aa:	d508      	bpl.n	800c7be <_dtoa_r+0x366>
 800c7ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c7b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c7b4:	f7f3 ff28 	bl	8000608 <__aeabi_dmul>
 800c7b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c7bc:	3601      	adds	r6, #1
 800c7be:	1064      	asrs	r4, r4, #1
 800c7c0:	3508      	adds	r5, #8
 800c7c2:	e7e5      	b.n	800c790 <_dtoa_r+0x338>
 800c7c4:	f000 80d2 	beq.w	800c96c <_dtoa_r+0x514>
 800c7c8:	427c      	negs	r4, r7
 800c7ca:	4b92      	ldr	r3, [pc, #584]	@ (800ca14 <_dtoa_r+0x5bc>)
 800c7cc:	4d92      	ldr	r5, [pc, #584]	@ (800ca18 <_dtoa_r+0x5c0>)
 800c7ce:	f004 020f 	and.w	r2, r4, #15
 800c7d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c7de:	f7f3 ff13 	bl	8000608 <__aeabi_dmul>
 800c7e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7e6:	1124      	asrs	r4, r4, #4
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	2602      	movs	r6, #2
 800c7ec:	2c00      	cmp	r4, #0
 800c7ee:	f040 80b2 	bne.w	800c956 <_dtoa_r+0x4fe>
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d1d3      	bne.n	800c79e <_dtoa_r+0x346>
 800c7f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c7f8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	f000 80b7 	beq.w	800c970 <_dtoa_r+0x518>
 800c802:	4b86      	ldr	r3, [pc, #536]	@ (800ca1c <_dtoa_r+0x5c4>)
 800c804:	2200      	movs	r2, #0
 800c806:	4620      	mov	r0, r4
 800c808:	4629      	mov	r1, r5
 800c80a:	f7f4 f96f 	bl	8000aec <__aeabi_dcmplt>
 800c80e:	2800      	cmp	r0, #0
 800c810:	f000 80ae 	beq.w	800c970 <_dtoa_r+0x518>
 800c814:	9b07      	ldr	r3, [sp, #28]
 800c816:	2b00      	cmp	r3, #0
 800c818:	f000 80aa 	beq.w	800c970 <_dtoa_r+0x518>
 800c81c:	9b00      	ldr	r3, [sp, #0]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	dd37      	ble.n	800c892 <_dtoa_r+0x43a>
 800c822:	1e7b      	subs	r3, r7, #1
 800c824:	9304      	str	r3, [sp, #16]
 800c826:	4620      	mov	r0, r4
 800c828:	4b7d      	ldr	r3, [pc, #500]	@ (800ca20 <_dtoa_r+0x5c8>)
 800c82a:	2200      	movs	r2, #0
 800c82c:	4629      	mov	r1, r5
 800c82e:	f7f3 feeb 	bl	8000608 <__aeabi_dmul>
 800c832:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c836:	9c00      	ldr	r4, [sp, #0]
 800c838:	3601      	adds	r6, #1
 800c83a:	4630      	mov	r0, r6
 800c83c:	f7f3 fe7a 	bl	8000534 <__aeabi_i2d>
 800c840:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c844:	f7f3 fee0 	bl	8000608 <__aeabi_dmul>
 800c848:	4b76      	ldr	r3, [pc, #472]	@ (800ca24 <_dtoa_r+0x5cc>)
 800c84a:	2200      	movs	r2, #0
 800c84c:	f7f3 fd26 	bl	800029c <__adddf3>
 800c850:	4605      	mov	r5, r0
 800c852:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c856:	2c00      	cmp	r4, #0
 800c858:	f040 808d 	bne.w	800c976 <_dtoa_r+0x51e>
 800c85c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c860:	4b71      	ldr	r3, [pc, #452]	@ (800ca28 <_dtoa_r+0x5d0>)
 800c862:	2200      	movs	r2, #0
 800c864:	f7f3 fd18 	bl	8000298 <__aeabi_dsub>
 800c868:	4602      	mov	r2, r0
 800c86a:	460b      	mov	r3, r1
 800c86c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c870:	462a      	mov	r2, r5
 800c872:	4633      	mov	r3, r6
 800c874:	f7f4 f958 	bl	8000b28 <__aeabi_dcmpgt>
 800c878:	2800      	cmp	r0, #0
 800c87a:	f040 828b 	bne.w	800cd94 <_dtoa_r+0x93c>
 800c87e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c882:	462a      	mov	r2, r5
 800c884:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c888:	f7f4 f930 	bl	8000aec <__aeabi_dcmplt>
 800c88c:	2800      	cmp	r0, #0
 800c88e:	f040 8128 	bne.w	800cae2 <_dtoa_r+0x68a>
 800c892:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c896:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c89a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	f2c0 815a 	blt.w	800cb56 <_dtoa_r+0x6fe>
 800c8a2:	2f0e      	cmp	r7, #14
 800c8a4:	f300 8157 	bgt.w	800cb56 <_dtoa_r+0x6fe>
 800c8a8:	4b5a      	ldr	r3, [pc, #360]	@ (800ca14 <_dtoa_r+0x5bc>)
 800c8aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c8ae:	ed93 7b00 	vldr	d7, [r3]
 800c8b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	ed8d 7b00 	vstr	d7, [sp]
 800c8ba:	da03      	bge.n	800c8c4 <_dtoa_r+0x46c>
 800c8bc:	9b07      	ldr	r3, [sp, #28]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	f340 8101 	ble.w	800cac6 <_dtoa_r+0x66e>
 800c8c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c8c8:	4656      	mov	r6, sl
 800c8ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c8ce:	4620      	mov	r0, r4
 800c8d0:	4629      	mov	r1, r5
 800c8d2:	f7f3 ffc3 	bl	800085c <__aeabi_ddiv>
 800c8d6:	f7f4 f947 	bl	8000b68 <__aeabi_d2iz>
 800c8da:	4680      	mov	r8, r0
 800c8dc:	f7f3 fe2a 	bl	8000534 <__aeabi_i2d>
 800c8e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c8e4:	f7f3 fe90 	bl	8000608 <__aeabi_dmul>
 800c8e8:	4602      	mov	r2, r0
 800c8ea:	460b      	mov	r3, r1
 800c8ec:	4620      	mov	r0, r4
 800c8ee:	4629      	mov	r1, r5
 800c8f0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c8f4:	f7f3 fcd0 	bl	8000298 <__aeabi_dsub>
 800c8f8:	f806 4b01 	strb.w	r4, [r6], #1
 800c8fc:	9d07      	ldr	r5, [sp, #28]
 800c8fe:	eba6 040a 	sub.w	r4, r6, sl
 800c902:	42a5      	cmp	r5, r4
 800c904:	4602      	mov	r2, r0
 800c906:	460b      	mov	r3, r1
 800c908:	f040 8117 	bne.w	800cb3a <_dtoa_r+0x6e2>
 800c90c:	f7f3 fcc6 	bl	800029c <__adddf3>
 800c910:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c914:	4604      	mov	r4, r0
 800c916:	460d      	mov	r5, r1
 800c918:	f7f4 f906 	bl	8000b28 <__aeabi_dcmpgt>
 800c91c:	2800      	cmp	r0, #0
 800c91e:	f040 80f9 	bne.w	800cb14 <_dtoa_r+0x6bc>
 800c922:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c926:	4620      	mov	r0, r4
 800c928:	4629      	mov	r1, r5
 800c92a:	f7f4 f8d5 	bl	8000ad8 <__aeabi_dcmpeq>
 800c92e:	b118      	cbz	r0, 800c938 <_dtoa_r+0x4e0>
 800c930:	f018 0f01 	tst.w	r8, #1
 800c934:	f040 80ee 	bne.w	800cb14 <_dtoa_r+0x6bc>
 800c938:	4649      	mov	r1, r9
 800c93a:	4658      	mov	r0, fp
 800c93c:	f000 fc90 	bl	800d260 <_Bfree>
 800c940:	2300      	movs	r3, #0
 800c942:	7033      	strb	r3, [r6, #0]
 800c944:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c946:	3701      	adds	r7, #1
 800c948:	601f      	str	r7, [r3, #0]
 800c94a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	f000 831d 	beq.w	800cf8c <_dtoa_r+0xb34>
 800c952:	601e      	str	r6, [r3, #0]
 800c954:	e31a      	b.n	800cf8c <_dtoa_r+0xb34>
 800c956:	07e2      	lsls	r2, r4, #31
 800c958:	d505      	bpl.n	800c966 <_dtoa_r+0x50e>
 800c95a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c95e:	f7f3 fe53 	bl	8000608 <__aeabi_dmul>
 800c962:	3601      	adds	r6, #1
 800c964:	2301      	movs	r3, #1
 800c966:	1064      	asrs	r4, r4, #1
 800c968:	3508      	adds	r5, #8
 800c96a:	e73f      	b.n	800c7ec <_dtoa_r+0x394>
 800c96c:	2602      	movs	r6, #2
 800c96e:	e742      	b.n	800c7f6 <_dtoa_r+0x39e>
 800c970:	9c07      	ldr	r4, [sp, #28]
 800c972:	9704      	str	r7, [sp, #16]
 800c974:	e761      	b.n	800c83a <_dtoa_r+0x3e2>
 800c976:	4b27      	ldr	r3, [pc, #156]	@ (800ca14 <_dtoa_r+0x5bc>)
 800c978:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c97a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c97e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c982:	4454      	add	r4, sl
 800c984:	2900      	cmp	r1, #0
 800c986:	d053      	beq.n	800ca30 <_dtoa_r+0x5d8>
 800c988:	4928      	ldr	r1, [pc, #160]	@ (800ca2c <_dtoa_r+0x5d4>)
 800c98a:	2000      	movs	r0, #0
 800c98c:	f7f3 ff66 	bl	800085c <__aeabi_ddiv>
 800c990:	4633      	mov	r3, r6
 800c992:	462a      	mov	r2, r5
 800c994:	f7f3 fc80 	bl	8000298 <__aeabi_dsub>
 800c998:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c99c:	4656      	mov	r6, sl
 800c99e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9a2:	f7f4 f8e1 	bl	8000b68 <__aeabi_d2iz>
 800c9a6:	4605      	mov	r5, r0
 800c9a8:	f7f3 fdc4 	bl	8000534 <__aeabi_i2d>
 800c9ac:	4602      	mov	r2, r0
 800c9ae:	460b      	mov	r3, r1
 800c9b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9b4:	f7f3 fc70 	bl	8000298 <__aeabi_dsub>
 800c9b8:	3530      	adds	r5, #48	@ 0x30
 800c9ba:	4602      	mov	r2, r0
 800c9bc:	460b      	mov	r3, r1
 800c9be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c9c2:	f806 5b01 	strb.w	r5, [r6], #1
 800c9c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c9ca:	f7f4 f88f 	bl	8000aec <__aeabi_dcmplt>
 800c9ce:	2800      	cmp	r0, #0
 800c9d0:	d171      	bne.n	800cab6 <_dtoa_r+0x65e>
 800c9d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c9d6:	4911      	ldr	r1, [pc, #68]	@ (800ca1c <_dtoa_r+0x5c4>)
 800c9d8:	2000      	movs	r0, #0
 800c9da:	f7f3 fc5d 	bl	8000298 <__aeabi_dsub>
 800c9de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c9e2:	f7f4 f883 	bl	8000aec <__aeabi_dcmplt>
 800c9e6:	2800      	cmp	r0, #0
 800c9e8:	f040 8095 	bne.w	800cb16 <_dtoa_r+0x6be>
 800c9ec:	42a6      	cmp	r6, r4
 800c9ee:	f43f af50 	beq.w	800c892 <_dtoa_r+0x43a>
 800c9f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c9f6:	4b0a      	ldr	r3, [pc, #40]	@ (800ca20 <_dtoa_r+0x5c8>)
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	f7f3 fe05 	bl	8000608 <__aeabi_dmul>
 800c9fe:	4b08      	ldr	r3, [pc, #32]	@ (800ca20 <_dtoa_r+0x5c8>)
 800ca00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ca04:	2200      	movs	r2, #0
 800ca06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca0a:	f7f3 fdfd 	bl	8000608 <__aeabi_dmul>
 800ca0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca12:	e7c4      	b.n	800c99e <_dtoa_r+0x546>
 800ca14:	0800e930 	.word	0x0800e930
 800ca18:	0800e908 	.word	0x0800e908
 800ca1c:	3ff00000 	.word	0x3ff00000
 800ca20:	40240000 	.word	0x40240000
 800ca24:	401c0000 	.word	0x401c0000
 800ca28:	40140000 	.word	0x40140000
 800ca2c:	3fe00000 	.word	0x3fe00000
 800ca30:	4631      	mov	r1, r6
 800ca32:	4628      	mov	r0, r5
 800ca34:	f7f3 fde8 	bl	8000608 <__aeabi_dmul>
 800ca38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ca3c:	9415      	str	r4, [sp, #84]	@ 0x54
 800ca3e:	4656      	mov	r6, sl
 800ca40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca44:	f7f4 f890 	bl	8000b68 <__aeabi_d2iz>
 800ca48:	4605      	mov	r5, r0
 800ca4a:	f7f3 fd73 	bl	8000534 <__aeabi_i2d>
 800ca4e:	4602      	mov	r2, r0
 800ca50:	460b      	mov	r3, r1
 800ca52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca56:	f7f3 fc1f 	bl	8000298 <__aeabi_dsub>
 800ca5a:	3530      	adds	r5, #48	@ 0x30
 800ca5c:	f806 5b01 	strb.w	r5, [r6], #1
 800ca60:	4602      	mov	r2, r0
 800ca62:	460b      	mov	r3, r1
 800ca64:	42a6      	cmp	r6, r4
 800ca66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ca6a:	f04f 0200 	mov.w	r2, #0
 800ca6e:	d124      	bne.n	800caba <_dtoa_r+0x662>
 800ca70:	4bac      	ldr	r3, [pc, #688]	@ (800cd24 <_dtoa_r+0x8cc>)
 800ca72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ca76:	f7f3 fc11 	bl	800029c <__adddf3>
 800ca7a:	4602      	mov	r2, r0
 800ca7c:	460b      	mov	r3, r1
 800ca7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca82:	f7f4 f851 	bl	8000b28 <__aeabi_dcmpgt>
 800ca86:	2800      	cmp	r0, #0
 800ca88:	d145      	bne.n	800cb16 <_dtoa_r+0x6be>
 800ca8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ca8e:	49a5      	ldr	r1, [pc, #660]	@ (800cd24 <_dtoa_r+0x8cc>)
 800ca90:	2000      	movs	r0, #0
 800ca92:	f7f3 fc01 	bl	8000298 <__aeabi_dsub>
 800ca96:	4602      	mov	r2, r0
 800ca98:	460b      	mov	r3, r1
 800ca9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca9e:	f7f4 f825 	bl	8000aec <__aeabi_dcmplt>
 800caa2:	2800      	cmp	r0, #0
 800caa4:	f43f aef5 	beq.w	800c892 <_dtoa_r+0x43a>
 800caa8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800caaa:	1e73      	subs	r3, r6, #1
 800caac:	9315      	str	r3, [sp, #84]	@ 0x54
 800caae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cab2:	2b30      	cmp	r3, #48	@ 0x30
 800cab4:	d0f8      	beq.n	800caa8 <_dtoa_r+0x650>
 800cab6:	9f04      	ldr	r7, [sp, #16]
 800cab8:	e73e      	b.n	800c938 <_dtoa_r+0x4e0>
 800caba:	4b9b      	ldr	r3, [pc, #620]	@ (800cd28 <_dtoa_r+0x8d0>)
 800cabc:	f7f3 fda4 	bl	8000608 <__aeabi_dmul>
 800cac0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cac4:	e7bc      	b.n	800ca40 <_dtoa_r+0x5e8>
 800cac6:	d10c      	bne.n	800cae2 <_dtoa_r+0x68a>
 800cac8:	4b98      	ldr	r3, [pc, #608]	@ (800cd2c <_dtoa_r+0x8d4>)
 800caca:	2200      	movs	r2, #0
 800cacc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cad0:	f7f3 fd9a 	bl	8000608 <__aeabi_dmul>
 800cad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cad8:	f7f4 f81c 	bl	8000b14 <__aeabi_dcmpge>
 800cadc:	2800      	cmp	r0, #0
 800cade:	f000 8157 	beq.w	800cd90 <_dtoa_r+0x938>
 800cae2:	2400      	movs	r4, #0
 800cae4:	4625      	mov	r5, r4
 800cae6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cae8:	43db      	mvns	r3, r3
 800caea:	9304      	str	r3, [sp, #16]
 800caec:	4656      	mov	r6, sl
 800caee:	2700      	movs	r7, #0
 800caf0:	4621      	mov	r1, r4
 800caf2:	4658      	mov	r0, fp
 800caf4:	f000 fbb4 	bl	800d260 <_Bfree>
 800caf8:	2d00      	cmp	r5, #0
 800cafa:	d0dc      	beq.n	800cab6 <_dtoa_r+0x65e>
 800cafc:	b12f      	cbz	r7, 800cb0a <_dtoa_r+0x6b2>
 800cafe:	42af      	cmp	r7, r5
 800cb00:	d003      	beq.n	800cb0a <_dtoa_r+0x6b2>
 800cb02:	4639      	mov	r1, r7
 800cb04:	4658      	mov	r0, fp
 800cb06:	f000 fbab 	bl	800d260 <_Bfree>
 800cb0a:	4629      	mov	r1, r5
 800cb0c:	4658      	mov	r0, fp
 800cb0e:	f000 fba7 	bl	800d260 <_Bfree>
 800cb12:	e7d0      	b.n	800cab6 <_dtoa_r+0x65e>
 800cb14:	9704      	str	r7, [sp, #16]
 800cb16:	4633      	mov	r3, r6
 800cb18:	461e      	mov	r6, r3
 800cb1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cb1e:	2a39      	cmp	r2, #57	@ 0x39
 800cb20:	d107      	bne.n	800cb32 <_dtoa_r+0x6da>
 800cb22:	459a      	cmp	sl, r3
 800cb24:	d1f8      	bne.n	800cb18 <_dtoa_r+0x6c0>
 800cb26:	9a04      	ldr	r2, [sp, #16]
 800cb28:	3201      	adds	r2, #1
 800cb2a:	9204      	str	r2, [sp, #16]
 800cb2c:	2230      	movs	r2, #48	@ 0x30
 800cb2e:	f88a 2000 	strb.w	r2, [sl]
 800cb32:	781a      	ldrb	r2, [r3, #0]
 800cb34:	3201      	adds	r2, #1
 800cb36:	701a      	strb	r2, [r3, #0]
 800cb38:	e7bd      	b.n	800cab6 <_dtoa_r+0x65e>
 800cb3a:	4b7b      	ldr	r3, [pc, #492]	@ (800cd28 <_dtoa_r+0x8d0>)
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	f7f3 fd63 	bl	8000608 <__aeabi_dmul>
 800cb42:	2200      	movs	r2, #0
 800cb44:	2300      	movs	r3, #0
 800cb46:	4604      	mov	r4, r0
 800cb48:	460d      	mov	r5, r1
 800cb4a:	f7f3 ffc5 	bl	8000ad8 <__aeabi_dcmpeq>
 800cb4e:	2800      	cmp	r0, #0
 800cb50:	f43f aebb 	beq.w	800c8ca <_dtoa_r+0x472>
 800cb54:	e6f0      	b.n	800c938 <_dtoa_r+0x4e0>
 800cb56:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cb58:	2a00      	cmp	r2, #0
 800cb5a:	f000 80db 	beq.w	800cd14 <_dtoa_r+0x8bc>
 800cb5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb60:	2a01      	cmp	r2, #1
 800cb62:	f300 80bf 	bgt.w	800cce4 <_dtoa_r+0x88c>
 800cb66:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800cb68:	2a00      	cmp	r2, #0
 800cb6a:	f000 80b7 	beq.w	800ccdc <_dtoa_r+0x884>
 800cb6e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800cb72:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cb74:	4646      	mov	r6, r8
 800cb76:	9a08      	ldr	r2, [sp, #32]
 800cb78:	2101      	movs	r1, #1
 800cb7a:	441a      	add	r2, r3
 800cb7c:	4658      	mov	r0, fp
 800cb7e:	4498      	add	r8, r3
 800cb80:	9208      	str	r2, [sp, #32]
 800cb82:	f000 fc21 	bl	800d3c8 <__i2b>
 800cb86:	4605      	mov	r5, r0
 800cb88:	b15e      	cbz	r6, 800cba2 <_dtoa_r+0x74a>
 800cb8a:	9b08      	ldr	r3, [sp, #32]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	dd08      	ble.n	800cba2 <_dtoa_r+0x74a>
 800cb90:	42b3      	cmp	r3, r6
 800cb92:	9a08      	ldr	r2, [sp, #32]
 800cb94:	bfa8      	it	ge
 800cb96:	4633      	movge	r3, r6
 800cb98:	eba8 0803 	sub.w	r8, r8, r3
 800cb9c:	1af6      	subs	r6, r6, r3
 800cb9e:	1ad3      	subs	r3, r2, r3
 800cba0:	9308      	str	r3, [sp, #32]
 800cba2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cba4:	b1f3      	cbz	r3, 800cbe4 <_dtoa_r+0x78c>
 800cba6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	f000 80b7 	beq.w	800cd1c <_dtoa_r+0x8c4>
 800cbae:	b18c      	cbz	r4, 800cbd4 <_dtoa_r+0x77c>
 800cbb0:	4629      	mov	r1, r5
 800cbb2:	4622      	mov	r2, r4
 800cbb4:	4658      	mov	r0, fp
 800cbb6:	f000 fcc7 	bl	800d548 <__pow5mult>
 800cbba:	464a      	mov	r2, r9
 800cbbc:	4601      	mov	r1, r0
 800cbbe:	4605      	mov	r5, r0
 800cbc0:	4658      	mov	r0, fp
 800cbc2:	f000 fc17 	bl	800d3f4 <__multiply>
 800cbc6:	4649      	mov	r1, r9
 800cbc8:	9004      	str	r0, [sp, #16]
 800cbca:	4658      	mov	r0, fp
 800cbcc:	f000 fb48 	bl	800d260 <_Bfree>
 800cbd0:	9b04      	ldr	r3, [sp, #16]
 800cbd2:	4699      	mov	r9, r3
 800cbd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cbd6:	1b1a      	subs	r2, r3, r4
 800cbd8:	d004      	beq.n	800cbe4 <_dtoa_r+0x78c>
 800cbda:	4649      	mov	r1, r9
 800cbdc:	4658      	mov	r0, fp
 800cbde:	f000 fcb3 	bl	800d548 <__pow5mult>
 800cbe2:	4681      	mov	r9, r0
 800cbe4:	2101      	movs	r1, #1
 800cbe6:	4658      	mov	r0, fp
 800cbe8:	f000 fbee 	bl	800d3c8 <__i2b>
 800cbec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cbee:	4604      	mov	r4, r0
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	f000 81cf 	beq.w	800cf94 <_dtoa_r+0xb3c>
 800cbf6:	461a      	mov	r2, r3
 800cbf8:	4601      	mov	r1, r0
 800cbfa:	4658      	mov	r0, fp
 800cbfc:	f000 fca4 	bl	800d548 <__pow5mult>
 800cc00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc02:	2b01      	cmp	r3, #1
 800cc04:	4604      	mov	r4, r0
 800cc06:	f300 8095 	bgt.w	800cd34 <_dtoa_r+0x8dc>
 800cc0a:	9b02      	ldr	r3, [sp, #8]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	f040 8087 	bne.w	800cd20 <_dtoa_r+0x8c8>
 800cc12:	9b03      	ldr	r3, [sp, #12]
 800cc14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	f040 8089 	bne.w	800cd30 <_dtoa_r+0x8d8>
 800cc1e:	9b03      	ldr	r3, [sp, #12]
 800cc20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cc24:	0d1b      	lsrs	r3, r3, #20
 800cc26:	051b      	lsls	r3, r3, #20
 800cc28:	b12b      	cbz	r3, 800cc36 <_dtoa_r+0x7de>
 800cc2a:	9b08      	ldr	r3, [sp, #32]
 800cc2c:	3301      	adds	r3, #1
 800cc2e:	9308      	str	r3, [sp, #32]
 800cc30:	f108 0801 	add.w	r8, r8, #1
 800cc34:	2301      	movs	r3, #1
 800cc36:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	f000 81b0 	beq.w	800cfa0 <_dtoa_r+0xb48>
 800cc40:	6923      	ldr	r3, [r4, #16]
 800cc42:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cc46:	6918      	ldr	r0, [r3, #16]
 800cc48:	f000 fb72 	bl	800d330 <__hi0bits>
 800cc4c:	f1c0 0020 	rsb	r0, r0, #32
 800cc50:	9b08      	ldr	r3, [sp, #32]
 800cc52:	4418      	add	r0, r3
 800cc54:	f010 001f 	ands.w	r0, r0, #31
 800cc58:	d077      	beq.n	800cd4a <_dtoa_r+0x8f2>
 800cc5a:	f1c0 0320 	rsb	r3, r0, #32
 800cc5e:	2b04      	cmp	r3, #4
 800cc60:	dd6b      	ble.n	800cd3a <_dtoa_r+0x8e2>
 800cc62:	9b08      	ldr	r3, [sp, #32]
 800cc64:	f1c0 001c 	rsb	r0, r0, #28
 800cc68:	4403      	add	r3, r0
 800cc6a:	4480      	add	r8, r0
 800cc6c:	4406      	add	r6, r0
 800cc6e:	9308      	str	r3, [sp, #32]
 800cc70:	f1b8 0f00 	cmp.w	r8, #0
 800cc74:	dd05      	ble.n	800cc82 <_dtoa_r+0x82a>
 800cc76:	4649      	mov	r1, r9
 800cc78:	4642      	mov	r2, r8
 800cc7a:	4658      	mov	r0, fp
 800cc7c:	f000 fcbe 	bl	800d5fc <__lshift>
 800cc80:	4681      	mov	r9, r0
 800cc82:	9b08      	ldr	r3, [sp, #32]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	dd05      	ble.n	800cc94 <_dtoa_r+0x83c>
 800cc88:	4621      	mov	r1, r4
 800cc8a:	461a      	mov	r2, r3
 800cc8c:	4658      	mov	r0, fp
 800cc8e:	f000 fcb5 	bl	800d5fc <__lshift>
 800cc92:	4604      	mov	r4, r0
 800cc94:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d059      	beq.n	800cd4e <_dtoa_r+0x8f6>
 800cc9a:	4621      	mov	r1, r4
 800cc9c:	4648      	mov	r0, r9
 800cc9e:	f000 fd19 	bl	800d6d4 <__mcmp>
 800cca2:	2800      	cmp	r0, #0
 800cca4:	da53      	bge.n	800cd4e <_dtoa_r+0x8f6>
 800cca6:	1e7b      	subs	r3, r7, #1
 800cca8:	9304      	str	r3, [sp, #16]
 800ccaa:	4649      	mov	r1, r9
 800ccac:	2300      	movs	r3, #0
 800ccae:	220a      	movs	r2, #10
 800ccb0:	4658      	mov	r0, fp
 800ccb2:	f000 faf7 	bl	800d2a4 <__multadd>
 800ccb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ccb8:	4681      	mov	r9, r0
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	f000 8172 	beq.w	800cfa4 <_dtoa_r+0xb4c>
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	4629      	mov	r1, r5
 800ccc4:	220a      	movs	r2, #10
 800ccc6:	4658      	mov	r0, fp
 800ccc8:	f000 faec 	bl	800d2a4 <__multadd>
 800cccc:	9b00      	ldr	r3, [sp, #0]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	4605      	mov	r5, r0
 800ccd2:	dc67      	bgt.n	800cda4 <_dtoa_r+0x94c>
 800ccd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccd6:	2b02      	cmp	r3, #2
 800ccd8:	dc41      	bgt.n	800cd5e <_dtoa_r+0x906>
 800ccda:	e063      	b.n	800cda4 <_dtoa_r+0x94c>
 800ccdc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ccde:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800cce2:	e746      	b.n	800cb72 <_dtoa_r+0x71a>
 800cce4:	9b07      	ldr	r3, [sp, #28]
 800cce6:	1e5c      	subs	r4, r3, #1
 800cce8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ccea:	42a3      	cmp	r3, r4
 800ccec:	bfbf      	itttt	lt
 800ccee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ccf0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ccf2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ccf4:	1ae3      	sublt	r3, r4, r3
 800ccf6:	bfb4      	ite	lt
 800ccf8:	18d2      	addlt	r2, r2, r3
 800ccfa:	1b1c      	subge	r4, r3, r4
 800ccfc:	9b07      	ldr	r3, [sp, #28]
 800ccfe:	bfbc      	itt	lt
 800cd00:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800cd02:	2400      	movlt	r4, #0
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	bfb5      	itete	lt
 800cd08:	eba8 0603 	sublt.w	r6, r8, r3
 800cd0c:	9b07      	ldrge	r3, [sp, #28]
 800cd0e:	2300      	movlt	r3, #0
 800cd10:	4646      	movge	r6, r8
 800cd12:	e730      	b.n	800cb76 <_dtoa_r+0x71e>
 800cd14:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cd16:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800cd18:	4646      	mov	r6, r8
 800cd1a:	e735      	b.n	800cb88 <_dtoa_r+0x730>
 800cd1c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cd1e:	e75c      	b.n	800cbda <_dtoa_r+0x782>
 800cd20:	2300      	movs	r3, #0
 800cd22:	e788      	b.n	800cc36 <_dtoa_r+0x7de>
 800cd24:	3fe00000 	.word	0x3fe00000
 800cd28:	40240000 	.word	0x40240000
 800cd2c:	40140000 	.word	0x40140000
 800cd30:	9b02      	ldr	r3, [sp, #8]
 800cd32:	e780      	b.n	800cc36 <_dtoa_r+0x7de>
 800cd34:	2300      	movs	r3, #0
 800cd36:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd38:	e782      	b.n	800cc40 <_dtoa_r+0x7e8>
 800cd3a:	d099      	beq.n	800cc70 <_dtoa_r+0x818>
 800cd3c:	9a08      	ldr	r2, [sp, #32]
 800cd3e:	331c      	adds	r3, #28
 800cd40:	441a      	add	r2, r3
 800cd42:	4498      	add	r8, r3
 800cd44:	441e      	add	r6, r3
 800cd46:	9208      	str	r2, [sp, #32]
 800cd48:	e792      	b.n	800cc70 <_dtoa_r+0x818>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	e7f6      	b.n	800cd3c <_dtoa_r+0x8e4>
 800cd4e:	9b07      	ldr	r3, [sp, #28]
 800cd50:	9704      	str	r7, [sp, #16]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	dc20      	bgt.n	800cd98 <_dtoa_r+0x940>
 800cd56:	9300      	str	r3, [sp, #0]
 800cd58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd5a:	2b02      	cmp	r3, #2
 800cd5c:	dd1e      	ble.n	800cd9c <_dtoa_r+0x944>
 800cd5e:	9b00      	ldr	r3, [sp, #0]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	f47f aec0 	bne.w	800cae6 <_dtoa_r+0x68e>
 800cd66:	4621      	mov	r1, r4
 800cd68:	2205      	movs	r2, #5
 800cd6a:	4658      	mov	r0, fp
 800cd6c:	f000 fa9a 	bl	800d2a4 <__multadd>
 800cd70:	4601      	mov	r1, r0
 800cd72:	4604      	mov	r4, r0
 800cd74:	4648      	mov	r0, r9
 800cd76:	f000 fcad 	bl	800d6d4 <__mcmp>
 800cd7a:	2800      	cmp	r0, #0
 800cd7c:	f77f aeb3 	ble.w	800cae6 <_dtoa_r+0x68e>
 800cd80:	4656      	mov	r6, sl
 800cd82:	2331      	movs	r3, #49	@ 0x31
 800cd84:	f806 3b01 	strb.w	r3, [r6], #1
 800cd88:	9b04      	ldr	r3, [sp, #16]
 800cd8a:	3301      	adds	r3, #1
 800cd8c:	9304      	str	r3, [sp, #16]
 800cd8e:	e6ae      	b.n	800caee <_dtoa_r+0x696>
 800cd90:	9c07      	ldr	r4, [sp, #28]
 800cd92:	9704      	str	r7, [sp, #16]
 800cd94:	4625      	mov	r5, r4
 800cd96:	e7f3      	b.n	800cd80 <_dtoa_r+0x928>
 800cd98:	9b07      	ldr	r3, [sp, #28]
 800cd9a:	9300      	str	r3, [sp, #0]
 800cd9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	f000 8104 	beq.w	800cfac <_dtoa_r+0xb54>
 800cda4:	2e00      	cmp	r6, #0
 800cda6:	dd05      	ble.n	800cdb4 <_dtoa_r+0x95c>
 800cda8:	4629      	mov	r1, r5
 800cdaa:	4632      	mov	r2, r6
 800cdac:	4658      	mov	r0, fp
 800cdae:	f000 fc25 	bl	800d5fc <__lshift>
 800cdb2:	4605      	mov	r5, r0
 800cdb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d05a      	beq.n	800ce70 <_dtoa_r+0xa18>
 800cdba:	6869      	ldr	r1, [r5, #4]
 800cdbc:	4658      	mov	r0, fp
 800cdbe:	f000 fa0f 	bl	800d1e0 <_Balloc>
 800cdc2:	4606      	mov	r6, r0
 800cdc4:	b928      	cbnz	r0, 800cdd2 <_dtoa_r+0x97a>
 800cdc6:	4b84      	ldr	r3, [pc, #528]	@ (800cfd8 <_dtoa_r+0xb80>)
 800cdc8:	4602      	mov	r2, r0
 800cdca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cdce:	f7ff bb5a 	b.w	800c486 <_dtoa_r+0x2e>
 800cdd2:	692a      	ldr	r2, [r5, #16]
 800cdd4:	3202      	adds	r2, #2
 800cdd6:	0092      	lsls	r2, r2, #2
 800cdd8:	f105 010c 	add.w	r1, r5, #12
 800cddc:	300c      	adds	r0, #12
 800cdde:	f7ff faa2 	bl	800c326 <memcpy>
 800cde2:	2201      	movs	r2, #1
 800cde4:	4631      	mov	r1, r6
 800cde6:	4658      	mov	r0, fp
 800cde8:	f000 fc08 	bl	800d5fc <__lshift>
 800cdec:	f10a 0301 	add.w	r3, sl, #1
 800cdf0:	9307      	str	r3, [sp, #28]
 800cdf2:	9b00      	ldr	r3, [sp, #0]
 800cdf4:	4453      	add	r3, sl
 800cdf6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cdf8:	9b02      	ldr	r3, [sp, #8]
 800cdfa:	f003 0301 	and.w	r3, r3, #1
 800cdfe:	462f      	mov	r7, r5
 800ce00:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce02:	4605      	mov	r5, r0
 800ce04:	9b07      	ldr	r3, [sp, #28]
 800ce06:	4621      	mov	r1, r4
 800ce08:	3b01      	subs	r3, #1
 800ce0a:	4648      	mov	r0, r9
 800ce0c:	9300      	str	r3, [sp, #0]
 800ce0e:	f7ff fa98 	bl	800c342 <quorem>
 800ce12:	4639      	mov	r1, r7
 800ce14:	9002      	str	r0, [sp, #8]
 800ce16:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ce1a:	4648      	mov	r0, r9
 800ce1c:	f000 fc5a 	bl	800d6d4 <__mcmp>
 800ce20:	462a      	mov	r2, r5
 800ce22:	9008      	str	r0, [sp, #32]
 800ce24:	4621      	mov	r1, r4
 800ce26:	4658      	mov	r0, fp
 800ce28:	f000 fc70 	bl	800d70c <__mdiff>
 800ce2c:	68c2      	ldr	r2, [r0, #12]
 800ce2e:	4606      	mov	r6, r0
 800ce30:	bb02      	cbnz	r2, 800ce74 <_dtoa_r+0xa1c>
 800ce32:	4601      	mov	r1, r0
 800ce34:	4648      	mov	r0, r9
 800ce36:	f000 fc4d 	bl	800d6d4 <__mcmp>
 800ce3a:	4602      	mov	r2, r0
 800ce3c:	4631      	mov	r1, r6
 800ce3e:	4658      	mov	r0, fp
 800ce40:	920e      	str	r2, [sp, #56]	@ 0x38
 800ce42:	f000 fa0d 	bl	800d260 <_Bfree>
 800ce46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce48:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ce4a:	9e07      	ldr	r6, [sp, #28]
 800ce4c:	ea43 0102 	orr.w	r1, r3, r2
 800ce50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce52:	4319      	orrs	r1, r3
 800ce54:	d110      	bne.n	800ce78 <_dtoa_r+0xa20>
 800ce56:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ce5a:	d029      	beq.n	800ceb0 <_dtoa_r+0xa58>
 800ce5c:	9b08      	ldr	r3, [sp, #32]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	dd02      	ble.n	800ce68 <_dtoa_r+0xa10>
 800ce62:	9b02      	ldr	r3, [sp, #8]
 800ce64:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ce68:	9b00      	ldr	r3, [sp, #0]
 800ce6a:	f883 8000 	strb.w	r8, [r3]
 800ce6e:	e63f      	b.n	800caf0 <_dtoa_r+0x698>
 800ce70:	4628      	mov	r0, r5
 800ce72:	e7bb      	b.n	800cdec <_dtoa_r+0x994>
 800ce74:	2201      	movs	r2, #1
 800ce76:	e7e1      	b.n	800ce3c <_dtoa_r+0x9e4>
 800ce78:	9b08      	ldr	r3, [sp, #32]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	db04      	blt.n	800ce88 <_dtoa_r+0xa30>
 800ce7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ce80:	430b      	orrs	r3, r1
 800ce82:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ce84:	430b      	orrs	r3, r1
 800ce86:	d120      	bne.n	800ceca <_dtoa_r+0xa72>
 800ce88:	2a00      	cmp	r2, #0
 800ce8a:	dded      	ble.n	800ce68 <_dtoa_r+0xa10>
 800ce8c:	4649      	mov	r1, r9
 800ce8e:	2201      	movs	r2, #1
 800ce90:	4658      	mov	r0, fp
 800ce92:	f000 fbb3 	bl	800d5fc <__lshift>
 800ce96:	4621      	mov	r1, r4
 800ce98:	4681      	mov	r9, r0
 800ce9a:	f000 fc1b 	bl	800d6d4 <__mcmp>
 800ce9e:	2800      	cmp	r0, #0
 800cea0:	dc03      	bgt.n	800ceaa <_dtoa_r+0xa52>
 800cea2:	d1e1      	bne.n	800ce68 <_dtoa_r+0xa10>
 800cea4:	f018 0f01 	tst.w	r8, #1
 800cea8:	d0de      	beq.n	800ce68 <_dtoa_r+0xa10>
 800ceaa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ceae:	d1d8      	bne.n	800ce62 <_dtoa_r+0xa0a>
 800ceb0:	9a00      	ldr	r2, [sp, #0]
 800ceb2:	2339      	movs	r3, #57	@ 0x39
 800ceb4:	7013      	strb	r3, [r2, #0]
 800ceb6:	4633      	mov	r3, r6
 800ceb8:	461e      	mov	r6, r3
 800ceba:	3b01      	subs	r3, #1
 800cebc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cec0:	2a39      	cmp	r2, #57	@ 0x39
 800cec2:	d052      	beq.n	800cf6a <_dtoa_r+0xb12>
 800cec4:	3201      	adds	r2, #1
 800cec6:	701a      	strb	r2, [r3, #0]
 800cec8:	e612      	b.n	800caf0 <_dtoa_r+0x698>
 800ceca:	2a00      	cmp	r2, #0
 800cecc:	dd07      	ble.n	800cede <_dtoa_r+0xa86>
 800cece:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ced2:	d0ed      	beq.n	800ceb0 <_dtoa_r+0xa58>
 800ced4:	9a00      	ldr	r2, [sp, #0]
 800ced6:	f108 0301 	add.w	r3, r8, #1
 800ceda:	7013      	strb	r3, [r2, #0]
 800cedc:	e608      	b.n	800caf0 <_dtoa_r+0x698>
 800cede:	9b07      	ldr	r3, [sp, #28]
 800cee0:	9a07      	ldr	r2, [sp, #28]
 800cee2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800cee6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cee8:	4293      	cmp	r3, r2
 800ceea:	d028      	beq.n	800cf3e <_dtoa_r+0xae6>
 800ceec:	4649      	mov	r1, r9
 800ceee:	2300      	movs	r3, #0
 800cef0:	220a      	movs	r2, #10
 800cef2:	4658      	mov	r0, fp
 800cef4:	f000 f9d6 	bl	800d2a4 <__multadd>
 800cef8:	42af      	cmp	r7, r5
 800cefa:	4681      	mov	r9, r0
 800cefc:	f04f 0300 	mov.w	r3, #0
 800cf00:	f04f 020a 	mov.w	r2, #10
 800cf04:	4639      	mov	r1, r7
 800cf06:	4658      	mov	r0, fp
 800cf08:	d107      	bne.n	800cf1a <_dtoa_r+0xac2>
 800cf0a:	f000 f9cb 	bl	800d2a4 <__multadd>
 800cf0e:	4607      	mov	r7, r0
 800cf10:	4605      	mov	r5, r0
 800cf12:	9b07      	ldr	r3, [sp, #28]
 800cf14:	3301      	adds	r3, #1
 800cf16:	9307      	str	r3, [sp, #28]
 800cf18:	e774      	b.n	800ce04 <_dtoa_r+0x9ac>
 800cf1a:	f000 f9c3 	bl	800d2a4 <__multadd>
 800cf1e:	4629      	mov	r1, r5
 800cf20:	4607      	mov	r7, r0
 800cf22:	2300      	movs	r3, #0
 800cf24:	220a      	movs	r2, #10
 800cf26:	4658      	mov	r0, fp
 800cf28:	f000 f9bc 	bl	800d2a4 <__multadd>
 800cf2c:	4605      	mov	r5, r0
 800cf2e:	e7f0      	b.n	800cf12 <_dtoa_r+0xaba>
 800cf30:	9b00      	ldr	r3, [sp, #0]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	bfcc      	ite	gt
 800cf36:	461e      	movgt	r6, r3
 800cf38:	2601      	movle	r6, #1
 800cf3a:	4456      	add	r6, sl
 800cf3c:	2700      	movs	r7, #0
 800cf3e:	4649      	mov	r1, r9
 800cf40:	2201      	movs	r2, #1
 800cf42:	4658      	mov	r0, fp
 800cf44:	f000 fb5a 	bl	800d5fc <__lshift>
 800cf48:	4621      	mov	r1, r4
 800cf4a:	4681      	mov	r9, r0
 800cf4c:	f000 fbc2 	bl	800d6d4 <__mcmp>
 800cf50:	2800      	cmp	r0, #0
 800cf52:	dcb0      	bgt.n	800ceb6 <_dtoa_r+0xa5e>
 800cf54:	d102      	bne.n	800cf5c <_dtoa_r+0xb04>
 800cf56:	f018 0f01 	tst.w	r8, #1
 800cf5a:	d1ac      	bne.n	800ceb6 <_dtoa_r+0xa5e>
 800cf5c:	4633      	mov	r3, r6
 800cf5e:	461e      	mov	r6, r3
 800cf60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cf64:	2a30      	cmp	r2, #48	@ 0x30
 800cf66:	d0fa      	beq.n	800cf5e <_dtoa_r+0xb06>
 800cf68:	e5c2      	b.n	800caf0 <_dtoa_r+0x698>
 800cf6a:	459a      	cmp	sl, r3
 800cf6c:	d1a4      	bne.n	800ceb8 <_dtoa_r+0xa60>
 800cf6e:	9b04      	ldr	r3, [sp, #16]
 800cf70:	3301      	adds	r3, #1
 800cf72:	9304      	str	r3, [sp, #16]
 800cf74:	2331      	movs	r3, #49	@ 0x31
 800cf76:	f88a 3000 	strb.w	r3, [sl]
 800cf7a:	e5b9      	b.n	800caf0 <_dtoa_r+0x698>
 800cf7c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cf7e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800cfdc <_dtoa_r+0xb84>
 800cf82:	b11b      	cbz	r3, 800cf8c <_dtoa_r+0xb34>
 800cf84:	f10a 0308 	add.w	r3, sl, #8
 800cf88:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cf8a:	6013      	str	r3, [r2, #0]
 800cf8c:	4650      	mov	r0, sl
 800cf8e:	b019      	add	sp, #100	@ 0x64
 800cf90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf96:	2b01      	cmp	r3, #1
 800cf98:	f77f ae37 	ble.w	800cc0a <_dtoa_r+0x7b2>
 800cf9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf9e:	930a      	str	r3, [sp, #40]	@ 0x28
 800cfa0:	2001      	movs	r0, #1
 800cfa2:	e655      	b.n	800cc50 <_dtoa_r+0x7f8>
 800cfa4:	9b00      	ldr	r3, [sp, #0]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	f77f aed6 	ble.w	800cd58 <_dtoa_r+0x900>
 800cfac:	4656      	mov	r6, sl
 800cfae:	4621      	mov	r1, r4
 800cfb0:	4648      	mov	r0, r9
 800cfb2:	f7ff f9c6 	bl	800c342 <quorem>
 800cfb6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cfba:	f806 8b01 	strb.w	r8, [r6], #1
 800cfbe:	9b00      	ldr	r3, [sp, #0]
 800cfc0:	eba6 020a 	sub.w	r2, r6, sl
 800cfc4:	4293      	cmp	r3, r2
 800cfc6:	ddb3      	ble.n	800cf30 <_dtoa_r+0xad8>
 800cfc8:	4649      	mov	r1, r9
 800cfca:	2300      	movs	r3, #0
 800cfcc:	220a      	movs	r2, #10
 800cfce:	4658      	mov	r0, fp
 800cfd0:	f000 f968 	bl	800d2a4 <__multadd>
 800cfd4:	4681      	mov	r9, r0
 800cfd6:	e7ea      	b.n	800cfae <_dtoa_r+0xb56>
 800cfd8:	0800e890 	.word	0x0800e890
 800cfdc:	0800e814 	.word	0x0800e814

0800cfe0 <_free_r>:
 800cfe0:	b538      	push	{r3, r4, r5, lr}
 800cfe2:	4605      	mov	r5, r0
 800cfe4:	2900      	cmp	r1, #0
 800cfe6:	d041      	beq.n	800d06c <_free_r+0x8c>
 800cfe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfec:	1f0c      	subs	r4, r1, #4
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	bfb8      	it	lt
 800cff2:	18e4      	addlt	r4, r4, r3
 800cff4:	f000 f8e8 	bl	800d1c8 <__malloc_lock>
 800cff8:	4a1d      	ldr	r2, [pc, #116]	@ (800d070 <_free_r+0x90>)
 800cffa:	6813      	ldr	r3, [r2, #0]
 800cffc:	b933      	cbnz	r3, 800d00c <_free_r+0x2c>
 800cffe:	6063      	str	r3, [r4, #4]
 800d000:	6014      	str	r4, [r2, #0]
 800d002:	4628      	mov	r0, r5
 800d004:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d008:	f000 b8e4 	b.w	800d1d4 <__malloc_unlock>
 800d00c:	42a3      	cmp	r3, r4
 800d00e:	d908      	bls.n	800d022 <_free_r+0x42>
 800d010:	6820      	ldr	r0, [r4, #0]
 800d012:	1821      	adds	r1, r4, r0
 800d014:	428b      	cmp	r3, r1
 800d016:	bf01      	itttt	eq
 800d018:	6819      	ldreq	r1, [r3, #0]
 800d01a:	685b      	ldreq	r3, [r3, #4]
 800d01c:	1809      	addeq	r1, r1, r0
 800d01e:	6021      	streq	r1, [r4, #0]
 800d020:	e7ed      	b.n	800cffe <_free_r+0x1e>
 800d022:	461a      	mov	r2, r3
 800d024:	685b      	ldr	r3, [r3, #4]
 800d026:	b10b      	cbz	r3, 800d02c <_free_r+0x4c>
 800d028:	42a3      	cmp	r3, r4
 800d02a:	d9fa      	bls.n	800d022 <_free_r+0x42>
 800d02c:	6811      	ldr	r1, [r2, #0]
 800d02e:	1850      	adds	r0, r2, r1
 800d030:	42a0      	cmp	r0, r4
 800d032:	d10b      	bne.n	800d04c <_free_r+0x6c>
 800d034:	6820      	ldr	r0, [r4, #0]
 800d036:	4401      	add	r1, r0
 800d038:	1850      	adds	r0, r2, r1
 800d03a:	4283      	cmp	r3, r0
 800d03c:	6011      	str	r1, [r2, #0]
 800d03e:	d1e0      	bne.n	800d002 <_free_r+0x22>
 800d040:	6818      	ldr	r0, [r3, #0]
 800d042:	685b      	ldr	r3, [r3, #4]
 800d044:	6053      	str	r3, [r2, #4]
 800d046:	4408      	add	r0, r1
 800d048:	6010      	str	r0, [r2, #0]
 800d04a:	e7da      	b.n	800d002 <_free_r+0x22>
 800d04c:	d902      	bls.n	800d054 <_free_r+0x74>
 800d04e:	230c      	movs	r3, #12
 800d050:	602b      	str	r3, [r5, #0]
 800d052:	e7d6      	b.n	800d002 <_free_r+0x22>
 800d054:	6820      	ldr	r0, [r4, #0]
 800d056:	1821      	adds	r1, r4, r0
 800d058:	428b      	cmp	r3, r1
 800d05a:	bf04      	itt	eq
 800d05c:	6819      	ldreq	r1, [r3, #0]
 800d05e:	685b      	ldreq	r3, [r3, #4]
 800d060:	6063      	str	r3, [r4, #4]
 800d062:	bf04      	itt	eq
 800d064:	1809      	addeq	r1, r1, r0
 800d066:	6021      	streq	r1, [r4, #0]
 800d068:	6054      	str	r4, [r2, #4]
 800d06a:	e7ca      	b.n	800d002 <_free_r+0x22>
 800d06c:	bd38      	pop	{r3, r4, r5, pc}
 800d06e:	bf00      	nop
 800d070:	2000508c 	.word	0x2000508c

0800d074 <malloc>:
 800d074:	4b02      	ldr	r3, [pc, #8]	@ (800d080 <malloc+0xc>)
 800d076:	4601      	mov	r1, r0
 800d078:	6818      	ldr	r0, [r3, #0]
 800d07a:	f000 b825 	b.w	800d0c8 <_malloc_r>
 800d07e:	bf00      	nop
 800d080:	2000003c 	.word	0x2000003c

0800d084 <sbrk_aligned>:
 800d084:	b570      	push	{r4, r5, r6, lr}
 800d086:	4e0f      	ldr	r6, [pc, #60]	@ (800d0c4 <sbrk_aligned+0x40>)
 800d088:	460c      	mov	r4, r1
 800d08a:	6831      	ldr	r1, [r6, #0]
 800d08c:	4605      	mov	r5, r0
 800d08e:	b911      	cbnz	r1, 800d096 <sbrk_aligned+0x12>
 800d090:	f001 f80c 	bl	800e0ac <_sbrk_r>
 800d094:	6030      	str	r0, [r6, #0]
 800d096:	4621      	mov	r1, r4
 800d098:	4628      	mov	r0, r5
 800d09a:	f001 f807 	bl	800e0ac <_sbrk_r>
 800d09e:	1c43      	adds	r3, r0, #1
 800d0a0:	d103      	bne.n	800d0aa <sbrk_aligned+0x26>
 800d0a2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d0a6:	4620      	mov	r0, r4
 800d0a8:	bd70      	pop	{r4, r5, r6, pc}
 800d0aa:	1cc4      	adds	r4, r0, #3
 800d0ac:	f024 0403 	bic.w	r4, r4, #3
 800d0b0:	42a0      	cmp	r0, r4
 800d0b2:	d0f8      	beq.n	800d0a6 <sbrk_aligned+0x22>
 800d0b4:	1a21      	subs	r1, r4, r0
 800d0b6:	4628      	mov	r0, r5
 800d0b8:	f000 fff8 	bl	800e0ac <_sbrk_r>
 800d0bc:	3001      	adds	r0, #1
 800d0be:	d1f2      	bne.n	800d0a6 <sbrk_aligned+0x22>
 800d0c0:	e7ef      	b.n	800d0a2 <sbrk_aligned+0x1e>
 800d0c2:	bf00      	nop
 800d0c4:	20005088 	.word	0x20005088

0800d0c8 <_malloc_r>:
 800d0c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0cc:	1ccd      	adds	r5, r1, #3
 800d0ce:	f025 0503 	bic.w	r5, r5, #3
 800d0d2:	3508      	adds	r5, #8
 800d0d4:	2d0c      	cmp	r5, #12
 800d0d6:	bf38      	it	cc
 800d0d8:	250c      	movcc	r5, #12
 800d0da:	2d00      	cmp	r5, #0
 800d0dc:	4606      	mov	r6, r0
 800d0de:	db01      	blt.n	800d0e4 <_malloc_r+0x1c>
 800d0e0:	42a9      	cmp	r1, r5
 800d0e2:	d904      	bls.n	800d0ee <_malloc_r+0x26>
 800d0e4:	230c      	movs	r3, #12
 800d0e6:	6033      	str	r3, [r6, #0]
 800d0e8:	2000      	movs	r0, #0
 800d0ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d1c4 <_malloc_r+0xfc>
 800d0f2:	f000 f869 	bl	800d1c8 <__malloc_lock>
 800d0f6:	f8d8 3000 	ldr.w	r3, [r8]
 800d0fa:	461c      	mov	r4, r3
 800d0fc:	bb44      	cbnz	r4, 800d150 <_malloc_r+0x88>
 800d0fe:	4629      	mov	r1, r5
 800d100:	4630      	mov	r0, r6
 800d102:	f7ff ffbf 	bl	800d084 <sbrk_aligned>
 800d106:	1c43      	adds	r3, r0, #1
 800d108:	4604      	mov	r4, r0
 800d10a:	d158      	bne.n	800d1be <_malloc_r+0xf6>
 800d10c:	f8d8 4000 	ldr.w	r4, [r8]
 800d110:	4627      	mov	r7, r4
 800d112:	2f00      	cmp	r7, #0
 800d114:	d143      	bne.n	800d19e <_malloc_r+0xd6>
 800d116:	2c00      	cmp	r4, #0
 800d118:	d04b      	beq.n	800d1b2 <_malloc_r+0xea>
 800d11a:	6823      	ldr	r3, [r4, #0]
 800d11c:	4639      	mov	r1, r7
 800d11e:	4630      	mov	r0, r6
 800d120:	eb04 0903 	add.w	r9, r4, r3
 800d124:	f000 ffc2 	bl	800e0ac <_sbrk_r>
 800d128:	4581      	cmp	r9, r0
 800d12a:	d142      	bne.n	800d1b2 <_malloc_r+0xea>
 800d12c:	6821      	ldr	r1, [r4, #0]
 800d12e:	1a6d      	subs	r5, r5, r1
 800d130:	4629      	mov	r1, r5
 800d132:	4630      	mov	r0, r6
 800d134:	f7ff ffa6 	bl	800d084 <sbrk_aligned>
 800d138:	3001      	adds	r0, #1
 800d13a:	d03a      	beq.n	800d1b2 <_malloc_r+0xea>
 800d13c:	6823      	ldr	r3, [r4, #0]
 800d13e:	442b      	add	r3, r5
 800d140:	6023      	str	r3, [r4, #0]
 800d142:	f8d8 3000 	ldr.w	r3, [r8]
 800d146:	685a      	ldr	r2, [r3, #4]
 800d148:	bb62      	cbnz	r2, 800d1a4 <_malloc_r+0xdc>
 800d14a:	f8c8 7000 	str.w	r7, [r8]
 800d14e:	e00f      	b.n	800d170 <_malloc_r+0xa8>
 800d150:	6822      	ldr	r2, [r4, #0]
 800d152:	1b52      	subs	r2, r2, r5
 800d154:	d420      	bmi.n	800d198 <_malloc_r+0xd0>
 800d156:	2a0b      	cmp	r2, #11
 800d158:	d917      	bls.n	800d18a <_malloc_r+0xc2>
 800d15a:	1961      	adds	r1, r4, r5
 800d15c:	42a3      	cmp	r3, r4
 800d15e:	6025      	str	r5, [r4, #0]
 800d160:	bf18      	it	ne
 800d162:	6059      	strne	r1, [r3, #4]
 800d164:	6863      	ldr	r3, [r4, #4]
 800d166:	bf08      	it	eq
 800d168:	f8c8 1000 	streq.w	r1, [r8]
 800d16c:	5162      	str	r2, [r4, r5]
 800d16e:	604b      	str	r3, [r1, #4]
 800d170:	4630      	mov	r0, r6
 800d172:	f000 f82f 	bl	800d1d4 <__malloc_unlock>
 800d176:	f104 000b 	add.w	r0, r4, #11
 800d17a:	1d23      	adds	r3, r4, #4
 800d17c:	f020 0007 	bic.w	r0, r0, #7
 800d180:	1ac2      	subs	r2, r0, r3
 800d182:	bf1c      	itt	ne
 800d184:	1a1b      	subne	r3, r3, r0
 800d186:	50a3      	strne	r3, [r4, r2]
 800d188:	e7af      	b.n	800d0ea <_malloc_r+0x22>
 800d18a:	6862      	ldr	r2, [r4, #4]
 800d18c:	42a3      	cmp	r3, r4
 800d18e:	bf0c      	ite	eq
 800d190:	f8c8 2000 	streq.w	r2, [r8]
 800d194:	605a      	strne	r2, [r3, #4]
 800d196:	e7eb      	b.n	800d170 <_malloc_r+0xa8>
 800d198:	4623      	mov	r3, r4
 800d19a:	6864      	ldr	r4, [r4, #4]
 800d19c:	e7ae      	b.n	800d0fc <_malloc_r+0x34>
 800d19e:	463c      	mov	r4, r7
 800d1a0:	687f      	ldr	r7, [r7, #4]
 800d1a2:	e7b6      	b.n	800d112 <_malloc_r+0x4a>
 800d1a4:	461a      	mov	r2, r3
 800d1a6:	685b      	ldr	r3, [r3, #4]
 800d1a8:	42a3      	cmp	r3, r4
 800d1aa:	d1fb      	bne.n	800d1a4 <_malloc_r+0xdc>
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	6053      	str	r3, [r2, #4]
 800d1b0:	e7de      	b.n	800d170 <_malloc_r+0xa8>
 800d1b2:	230c      	movs	r3, #12
 800d1b4:	6033      	str	r3, [r6, #0]
 800d1b6:	4630      	mov	r0, r6
 800d1b8:	f000 f80c 	bl	800d1d4 <__malloc_unlock>
 800d1bc:	e794      	b.n	800d0e8 <_malloc_r+0x20>
 800d1be:	6005      	str	r5, [r0, #0]
 800d1c0:	e7d6      	b.n	800d170 <_malloc_r+0xa8>
 800d1c2:	bf00      	nop
 800d1c4:	2000508c 	.word	0x2000508c

0800d1c8 <__malloc_lock>:
 800d1c8:	4801      	ldr	r0, [pc, #4]	@ (800d1d0 <__malloc_lock+0x8>)
 800d1ca:	f7ff b8aa 	b.w	800c322 <__retarget_lock_acquire_recursive>
 800d1ce:	bf00      	nop
 800d1d0:	20005084 	.word	0x20005084

0800d1d4 <__malloc_unlock>:
 800d1d4:	4801      	ldr	r0, [pc, #4]	@ (800d1dc <__malloc_unlock+0x8>)
 800d1d6:	f7ff b8a5 	b.w	800c324 <__retarget_lock_release_recursive>
 800d1da:	bf00      	nop
 800d1dc:	20005084 	.word	0x20005084

0800d1e0 <_Balloc>:
 800d1e0:	b570      	push	{r4, r5, r6, lr}
 800d1e2:	69c6      	ldr	r6, [r0, #28]
 800d1e4:	4604      	mov	r4, r0
 800d1e6:	460d      	mov	r5, r1
 800d1e8:	b976      	cbnz	r6, 800d208 <_Balloc+0x28>
 800d1ea:	2010      	movs	r0, #16
 800d1ec:	f7ff ff42 	bl	800d074 <malloc>
 800d1f0:	4602      	mov	r2, r0
 800d1f2:	61e0      	str	r0, [r4, #28]
 800d1f4:	b920      	cbnz	r0, 800d200 <_Balloc+0x20>
 800d1f6:	4b18      	ldr	r3, [pc, #96]	@ (800d258 <_Balloc+0x78>)
 800d1f8:	4818      	ldr	r0, [pc, #96]	@ (800d25c <_Balloc+0x7c>)
 800d1fa:	216b      	movs	r1, #107	@ 0x6b
 800d1fc:	f000 ff66 	bl	800e0cc <__assert_func>
 800d200:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d204:	6006      	str	r6, [r0, #0]
 800d206:	60c6      	str	r6, [r0, #12]
 800d208:	69e6      	ldr	r6, [r4, #28]
 800d20a:	68f3      	ldr	r3, [r6, #12]
 800d20c:	b183      	cbz	r3, 800d230 <_Balloc+0x50>
 800d20e:	69e3      	ldr	r3, [r4, #28]
 800d210:	68db      	ldr	r3, [r3, #12]
 800d212:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d216:	b9b8      	cbnz	r0, 800d248 <_Balloc+0x68>
 800d218:	2101      	movs	r1, #1
 800d21a:	fa01 f605 	lsl.w	r6, r1, r5
 800d21e:	1d72      	adds	r2, r6, #5
 800d220:	0092      	lsls	r2, r2, #2
 800d222:	4620      	mov	r0, r4
 800d224:	f000 ff70 	bl	800e108 <_calloc_r>
 800d228:	b160      	cbz	r0, 800d244 <_Balloc+0x64>
 800d22a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d22e:	e00e      	b.n	800d24e <_Balloc+0x6e>
 800d230:	2221      	movs	r2, #33	@ 0x21
 800d232:	2104      	movs	r1, #4
 800d234:	4620      	mov	r0, r4
 800d236:	f000 ff67 	bl	800e108 <_calloc_r>
 800d23a:	69e3      	ldr	r3, [r4, #28]
 800d23c:	60f0      	str	r0, [r6, #12]
 800d23e:	68db      	ldr	r3, [r3, #12]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d1e4      	bne.n	800d20e <_Balloc+0x2e>
 800d244:	2000      	movs	r0, #0
 800d246:	bd70      	pop	{r4, r5, r6, pc}
 800d248:	6802      	ldr	r2, [r0, #0]
 800d24a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d24e:	2300      	movs	r3, #0
 800d250:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d254:	e7f7      	b.n	800d246 <_Balloc+0x66>
 800d256:	bf00      	nop
 800d258:	0800e821 	.word	0x0800e821
 800d25c:	0800e8a1 	.word	0x0800e8a1

0800d260 <_Bfree>:
 800d260:	b570      	push	{r4, r5, r6, lr}
 800d262:	69c6      	ldr	r6, [r0, #28]
 800d264:	4605      	mov	r5, r0
 800d266:	460c      	mov	r4, r1
 800d268:	b976      	cbnz	r6, 800d288 <_Bfree+0x28>
 800d26a:	2010      	movs	r0, #16
 800d26c:	f7ff ff02 	bl	800d074 <malloc>
 800d270:	4602      	mov	r2, r0
 800d272:	61e8      	str	r0, [r5, #28]
 800d274:	b920      	cbnz	r0, 800d280 <_Bfree+0x20>
 800d276:	4b09      	ldr	r3, [pc, #36]	@ (800d29c <_Bfree+0x3c>)
 800d278:	4809      	ldr	r0, [pc, #36]	@ (800d2a0 <_Bfree+0x40>)
 800d27a:	218f      	movs	r1, #143	@ 0x8f
 800d27c:	f000 ff26 	bl	800e0cc <__assert_func>
 800d280:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d284:	6006      	str	r6, [r0, #0]
 800d286:	60c6      	str	r6, [r0, #12]
 800d288:	b13c      	cbz	r4, 800d29a <_Bfree+0x3a>
 800d28a:	69eb      	ldr	r3, [r5, #28]
 800d28c:	6862      	ldr	r2, [r4, #4]
 800d28e:	68db      	ldr	r3, [r3, #12]
 800d290:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d294:	6021      	str	r1, [r4, #0]
 800d296:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d29a:	bd70      	pop	{r4, r5, r6, pc}
 800d29c:	0800e821 	.word	0x0800e821
 800d2a0:	0800e8a1 	.word	0x0800e8a1

0800d2a4 <__multadd>:
 800d2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2a8:	690d      	ldr	r5, [r1, #16]
 800d2aa:	4607      	mov	r7, r0
 800d2ac:	460c      	mov	r4, r1
 800d2ae:	461e      	mov	r6, r3
 800d2b0:	f101 0c14 	add.w	ip, r1, #20
 800d2b4:	2000      	movs	r0, #0
 800d2b6:	f8dc 3000 	ldr.w	r3, [ip]
 800d2ba:	b299      	uxth	r1, r3
 800d2bc:	fb02 6101 	mla	r1, r2, r1, r6
 800d2c0:	0c1e      	lsrs	r6, r3, #16
 800d2c2:	0c0b      	lsrs	r3, r1, #16
 800d2c4:	fb02 3306 	mla	r3, r2, r6, r3
 800d2c8:	b289      	uxth	r1, r1
 800d2ca:	3001      	adds	r0, #1
 800d2cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d2d0:	4285      	cmp	r5, r0
 800d2d2:	f84c 1b04 	str.w	r1, [ip], #4
 800d2d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d2da:	dcec      	bgt.n	800d2b6 <__multadd+0x12>
 800d2dc:	b30e      	cbz	r6, 800d322 <__multadd+0x7e>
 800d2de:	68a3      	ldr	r3, [r4, #8]
 800d2e0:	42ab      	cmp	r3, r5
 800d2e2:	dc19      	bgt.n	800d318 <__multadd+0x74>
 800d2e4:	6861      	ldr	r1, [r4, #4]
 800d2e6:	4638      	mov	r0, r7
 800d2e8:	3101      	adds	r1, #1
 800d2ea:	f7ff ff79 	bl	800d1e0 <_Balloc>
 800d2ee:	4680      	mov	r8, r0
 800d2f0:	b928      	cbnz	r0, 800d2fe <__multadd+0x5a>
 800d2f2:	4602      	mov	r2, r0
 800d2f4:	4b0c      	ldr	r3, [pc, #48]	@ (800d328 <__multadd+0x84>)
 800d2f6:	480d      	ldr	r0, [pc, #52]	@ (800d32c <__multadd+0x88>)
 800d2f8:	21ba      	movs	r1, #186	@ 0xba
 800d2fa:	f000 fee7 	bl	800e0cc <__assert_func>
 800d2fe:	6922      	ldr	r2, [r4, #16]
 800d300:	3202      	adds	r2, #2
 800d302:	f104 010c 	add.w	r1, r4, #12
 800d306:	0092      	lsls	r2, r2, #2
 800d308:	300c      	adds	r0, #12
 800d30a:	f7ff f80c 	bl	800c326 <memcpy>
 800d30e:	4621      	mov	r1, r4
 800d310:	4638      	mov	r0, r7
 800d312:	f7ff ffa5 	bl	800d260 <_Bfree>
 800d316:	4644      	mov	r4, r8
 800d318:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d31c:	3501      	adds	r5, #1
 800d31e:	615e      	str	r6, [r3, #20]
 800d320:	6125      	str	r5, [r4, #16]
 800d322:	4620      	mov	r0, r4
 800d324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d328:	0800e890 	.word	0x0800e890
 800d32c:	0800e8a1 	.word	0x0800e8a1

0800d330 <__hi0bits>:
 800d330:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d334:	4603      	mov	r3, r0
 800d336:	bf36      	itet	cc
 800d338:	0403      	lslcc	r3, r0, #16
 800d33a:	2000      	movcs	r0, #0
 800d33c:	2010      	movcc	r0, #16
 800d33e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d342:	bf3c      	itt	cc
 800d344:	021b      	lslcc	r3, r3, #8
 800d346:	3008      	addcc	r0, #8
 800d348:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d34c:	bf3c      	itt	cc
 800d34e:	011b      	lslcc	r3, r3, #4
 800d350:	3004      	addcc	r0, #4
 800d352:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d356:	bf3c      	itt	cc
 800d358:	009b      	lslcc	r3, r3, #2
 800d35a:	3002      	addcc	r0, #2
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	db05      	blt.n	800d36c <__hi0bits+0x3c>
 800d360:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d364:	f100 0001 	add.w	r0, r0, #1
 800d368:	bf08      	it	eq
 800d36a:	2020      	moveq	r0, #32
 800d36c:	4770      	bx	lr

0800d36e <__lo0bits>:
 800d36e:	6803      	ldr	r3, [r0, #0]
 800d370:	4602      	mov	r2, r0
 800d372:	f013 0007 	ands.w	r0, r3, #7
 800d376:	d00b      	beq.n	800d390 <__lo0bits+0x22>
 800d378:	07d9      	lsls	r1, r3, #31
 800d37a:	d421      	bmi.n	800d3c0 <__lo0bits+0x52>
 800d37c:	0798      	lsls	r0, r3, #30
 800d37e:	bf49      	itett	mi
 800d380:	085b      	lsrmi	r3, r3, #1
 800d382:	089b      	lsrpl	r3, r3, #2
 800d384:	2001      	movmi	r0, #1
 800d386:	6013      	strmi	r3, [r2, #0]
 800d388:	bf5c      	itt	pl
 800d38a:	6013      	strpl	r3, [r2, #0]
 800d38c:	2002      	movpl	r0, #2
 800d38e:	4770      	bx	lr
 800d390:	b299      	uxth	r1, r3
 800d392:	b909      	cbnz	r1, 800d398 <__lo0bits+0x2a>
 800d394:	0c1b      	lsrs	r3, r3, #16
 800d396:	2010      	movs	r0, #16
 800d398:	b2d9      	uxtb	r1, r3
 800d39a:	b909      	cbnz	r1, 800d3a0 <__lo0bits+0x32>
 800d39c:	3008      	adds	r0, #8
 800d39e:	0a1b      	lsrs	r3, r3, #8
 800d3a0:	0719      	lsls	r1, r3, #28
 800d3a2:	bf04      	itt	eq
 800d3a4:	091b      	lsreq	r3, r3, #4
 800d3a6:	3004      	addeq	r0, #4
 800d3a8:	0799      	lsls	r1, r3, #30
 800d3aa:	bf04      	itt	eq
 800d3ac:	089b      	lsreq	r3, r3, #2
 800d3ae:	3002      	addeq	r0, #2
 800d3b0:	07d9      	lsls	r1, r3, #31
 800d3b2:	d403      	bmi.n	800d3bc <__lo0bits+0x4e>
 800d3b4:	085b      	lsrs	r3, r3, #1
 800d3b6:	f100 0001 	add.w	r0, r0, #1
 800d3ba:	d003      	beq.n	800d3c4 <__lo0bits+0x56>
 800d3bc:	6013      	str	r3, [r2, #0]
 800d3be:	4770      	bx	lr
 800d3c0:	2000      	movs	r0, #0
 800d3c2:	4770      	bx	lr
 800d3c4:	2020      	movs	r0, #32
 800d3c6:	4770      	bx	lr

0800d3c8 <__i2b>:
 800d3c8:	b510      	push	{r4, lr}
 800d3ca:	460c      	mov	r4, r1
 800d3cc:	2101      	movs	r1, #1
 800d3ce:	f7ff ff07 	bl	800d1e0 <_Balloc>
 800d3d2:	4602      	mov	r2, r0
 800d3d4:	b928      	cbnz	r0, 800d3e2 <__i2b+0x1a>
 800d3d6:	4b05      	ldr	r3, [pc, #20]	@ (800d3ec <__i2b+0x24>)
 800d3d8:	4805      	ldr	r0, [pc, #20]	@ (800d3f0 <__i2b+0x28>)
 800d3da:	f240 1145 	movw	r1, #325	@ 0x145
 800d3de:	f000 fe75 	bl	800e0cc <__assert_func>
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	6144      	str	r4, [r0, #20]
 800d3e6:	6103      	str	r3, [r0, #16]
 800d3e8:	bd10      	pop	{r4, pc}
 800d3ea:	bf00      	nop
 800d3ec:	0800e890 	.word	0x0800e890
 800d3f0:	0800e8a1 	.word	0x0800e8a1

0800d3f4 <__multiply>:
 800d3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3f8:	4614      	mov	r4, r2
 800d3fa:	690a      	ldr	r2, [r1, #16]
 800d3fc:	6923      	ldr	r3, [r4, #16]
 800d3fe:	429a      	cmp	r2, r3
 800d400:	bfa8      	it	ge
 800d402:	4623      	movge	r3, r4
 800d404:	460f      	mov	r7, r1
 800d406:	bfa4      	itt	ge
 800d408:	460c      	movge	r4, r1
 800d40a:	461f      	movge	r7, r3
 800d40c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d410:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d414:	68a3      	ldr	r3, [r4, #8]
 800d416:	6861      	ldr	r1, [r4, #4]
 800d418:	eb0a 0609 	add.w	r6, sl, r9
 800d41c:	42b3      	cmp	r3, r6
 800d41e:	b085      	sub	sp, #20
 800d420:	bfb8      	it	lt
 800d422:	3101      	addlt	r1, #1
 800d424:	f7ff fedc 	bl	800d1e0 <_Balloc>
 800d428:	b930      	cbnz	r0, 800d438 <__multiply+0x44>
 800d42a:	4602      	mov	r2, r0
 800d42c:	4b44      	ldr	r3, [pc, #272]	@ (800d540 <__multiply+0x14c>)
 800d42e:	4845      	ldr	r0, [pc, #276]	@ (800d544 <__multiply+0x150>)
 800d430:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d434:	f000 fe4a 	bl	800e0cc <__assert_func>
 800d438:	f100 0514 	add.w	r5, r0, #20
 800d43c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d440:	462b      	mov	r3, r5
 800d442:	2200      	movs	r2, #0
 800d444:	4543      	cmp	r3, r8
 800d446:	d321      	bcc.n	800d48c <__multiply+0x98>
 800d448:	f107 0114 	add.w	r1, r7, #20
 800d44c:	f104 0214 	add.w	r2, r4, #20
 800d450:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d454:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d458:	9302      	str	r3, [sp, #8]
 800d45a:	1b13      	subs	r3, r2, r4
 800d45c:	3b15      	subs	r3, #21
 800d45e:	f023 0303 	bic.w	r3, r3, #3
 800d462:	3304      	adds	r3, #4
 800d464:	f104 0715 	add.w	r7, r4, #21
 800d468:	42ba      	cmp	r2, r7
 800d46a:	bf38      	it	cc
 800d46c:	2304      	movcc	r3, #4
 800d46e:	9301      	str	r3, [sp, #4]
 800d470:	9b02      	ldr	r3, [sp, #8]
 800d472:	9103      	str	r1, [sp, #12]
 800d474:	428b      	cmp	r3, r1
 800d476:	d80c      	bhi.n	800d492 <__multiply+0x9e>
 800d478:	2e00      	cmp	r6, #0
 800d47a:	dd03      	ble.n	800d484 <__multiply+0x90>
 800d47c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d480:	2b00      	cmp	r3, #0
 800d482:	d05b      	beq.n	800d53c <__multiply+0x148>
 800d484:	6106      	str	r6, [r0, #16]
 800d486:	b005      	add	sp, #20
 800d488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d48c:	f843 2b04 	str.w	r2, [r3], #4
 800d490:	e7d8      	b.n	800d444 <__multiply+0x50>
 800d492:	f8b1 a000 	ldrh.w	sl, [r1]
 800d496:	f1ba 0f00 	cmp.w	sl, #0
 800d49a:	d024      	beq.n	800d4e6 <__multiply+0xf2>
 800d49c:	f104 0e14 	add.w	lr, r4, #20
 800d4a0:	46a9      	mov	r9, r5
 800d4a2:	f04f 0c00 	mov.w	ip, #0
 800d4a6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d4aa:	f8d9 3000 	ldr.w	r3, [r9]
 800d4ae:	fa1f fb87 	uxth.w	fp, r7
 800d4b2:	b29b      	uxth	r3, r3
 800d4b4:	fb0a 330b 	mla	r3, sl, fp, r3
 800d4b8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d4bc:	f8d9 7000 	ldr.w	r7, [r9]
 800d4c0:	4463      	add	r3, ip
 800d4c2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d4c6:	fb0a c70b 	mla	r7, sl, fp, ip
 800d4ca:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d4ce:	b29b      	uxth	r3, r3
 800d4d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d4d4:	4572      	cmp	r2, lr
 800d4d6:	f849 3b04 	str.w	r3, [r9], #4
 800d4da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d4de:	d8e2      	bhi.n	800d4a6 <__multiply+0xb2>
 800d4e0:	9b01      	ldr	r3, [sp, #4]
 800d4e2:	f845 c003 	str.w	ip, [r5, r3]
 800d4e6:	9b03      	ldr	r3, [sp, #12]
 800d4e8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d4ec:	3104      	adds	r1, #4
 800d4ee:	f1b9 0f00 	cmp.w	r9, #0
 800d4f2:	d021      	beq.n	800d538 <__multiply+0x144>
 800d4f4:	682b      	ldr	r3, [r5, #0]
 800d4f6:	f104 0c14 	add.w	ip, r4, #20
 800d4fa:	46ae      	mov	lr, r5
 800d4fc:	f04f 0a00 	mov.w	sl, #0
 800d500:	f8bc b000 	ldrh.w	fp, [ip]
 800d504:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d508:	fb09 770b 	mla	r7, r9, fp, r7
 800d50c:	4457      	add	r7, sl
 800d50e:	b29b      	uxth	r3, r3
 800d510:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d514:	f84e 3b04 	str.w	r3, [lr], #4
 800d518:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d51c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d520:	f8be 3000 	ldrh.w	r3, [lr]
 800d524:	fb09 330a 	mla	r3, r9, sl, r3
 800d528:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d52c:	4562      	cmp	r2, ip
 800d52e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d532:	d8e5      	bhi.n	800d500 <__multiply+0x10c>
 800d534:	9f01      	ldr	r7, [sp, #4]
 800d536:	51eb      	str	r3, [r5, r7]
 800d538:	3504      	adds	r5, #4
 800d53a:	e799      	b.n	800d470 <__multiply+0x7c>
 800d53c:	3e01      	subs	r6, #1
 800d53e:	e79b      	b.n	800d478 <__multiply+0x84>
 800d540:	0800e890 	.word	0x0800e890
 800d544:	0800e8a1 	.word	0x0800e8a1

0800d548 <__pow5mult>:
 800d548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d54c:	4615      	mov	r5, r2
 800d54e:	f012 0203 	ands.w	r2, r2, #3
 800d552:	4607      	mov	r7, r0
 800d554:	460e      	mov	r6, r1
 800d556:	d007      	beq.n	800d568 <__pow5mult+0x20>
 800d558:	4c25      	ldr	r4, [pc, #148]	@ (800d5f0 <__pow5mult+0xa8>)
 800d55a:	3a01      	subs	r2, #1
 800d55c:	2300      	movs	r3, #0
 800d55e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d562:	f7ff fe9f 	bl	800d2a4 <__multadd>
 800d566:	4606      	mov	r6, r0
 800d568:	10ad      	asrs	r5, r5, #2
 800d56a:	d03d      	beq.n	800d5e8 <__pow5mult+0xa0>
 800d56c:	69fc      	ldr	r4, [r7, #28]
 800d56e:	b97c      	cbnz	r4, 800d590 <__pow5mult+0x48>
 800d570:	2010      	movs	r0, #16
 800d572:	f7ff fd7f 	bl	800d074 <malloc>
 800d576:	4602      	mov	r2, r0
 800d578:	61f8      	str	r0, [r7, #28]
 800d57a:	b928      	cbnz	r0, 800d588 <__pow5mult+0x40>
 800d57c:	4b1d      	ldr	r3, [pc, #116]	@ (800d5f4 <__pow5mult+0xac>)
 800d57e:	481e      	ldr	r0, [pc, #120]	@ (800d5f8 <__pow5mult+0xb0>)
 800d580:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d584:	f000 fda2 	bl	800e0cc <__assert_func>
 800d588:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d58c:	6004      	str	r4, [r0, #0]
 800d58e:	60c4      	str	r4, [r0, #12]
 800d590:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d594:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d598:	b94c      	cbnz	r4, 800d5ae <__pow5mult+0x66>
 800d59a:	f240 2171 	movw	r1, #625	@ 0x271
 800d59e:	4638      	mov	r0, r7
 800d5a0:	f7ff ff12 	bl	800d3c8 <__i2b>
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	f8c8 0008 	str.w	r0, [r8, #8]
 800d5aa:	4604      	mov	r4, r0
 800d5ac:	6003      	str	r3, [r0, #0]
 800d5ae:	f04f 0900 	mov.w	r9, #0
 800d5b2:	07eb      	lsls	r3, r5, #31
 800d5b4:	d50a      	bpl.n	800d5cc <__pow5mult+0x84>
 800d5b6:	4631      	mov	r1, r6
 800d5b8:	4622      	mov	r2, r4
 800d5ba:	4638      	mov	r0, r7
 800d5bc:	f7ff ff1a 	bl	800d3f4 <__multiply>
 800d5c0:	4631      	mov	r1, r6
 800d5c2:	4680      	mov	r8, r0
 800d5c4:	4638      	mov	r0, r7
 800d5c6:	f7ff fe4b 	bl	800d260 <_Bfree>
 800d5ca:	4646      	mov	r6, r8
 800d5cc:	106d      	asrs	r5, r5, #1
 800d5ce:	d00b      	beq.n	800d5e8 <__pow5mult+0xa0>
 800d5d0:	6820      	ldr	r0, [r4, #0]
 800d5d2:	b938      	cbnz	r0, 800d5e4 <__pow5mult+0x9c>
 800d5d4:	4622      	mov	r2, r4
 800d5d6:	4621      	mov	r1, r4
 800d5d8:	4638      	mov	r0, r7
 800d5da:	f7ff ff0b 	bl	800d3f4 <__multiply>
 800d5de:	6020      	str	r0, [r4, #0]
 800d5e0:	f8c0 9000 	str.w	r9, [r0]
 800d5e4:	4604      	mov	r4, r0
 800d5e6:	e7e4      	b.n	800d5b2 <__pow5mult+0x6a>
 800d5e8:	4630      	mov	r0, r6
 800d5ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5ee:	bf00      	nop
 800d5f0:	0800e8fc 	.word	0x0800e8fc
 800d5f4:	0800e821 	.word	0x0800e821
 800d5f8:	0800e8a1 	.word	0x0800e8a1

0800d5fc <__lshift>:
 800d5fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d600:	460c      	mov	r4, r1
 800d602:	6849      	ldr	r1, [r1, #4]
 800d604:	6923      	ldr	r3, [r4, #16]
 800d606:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d60a:	68a3      	ldr	r3, [r4, #8]
 800d60c:	4607      	mov	r7, r0
 800d60e:	4691      	mov	r9, r2
 800d610:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d614:	f108 0601 	add.w	r6, r8, #1
 800d618:	42b3      	cmp	r3, r6
 800d61a:	db0b      	blt.n	800d634 <__lshift+0x38>
 800d61c:	4638      	mov	r0, r7
 800d61e:	f7ff fddf 	bl	800d1e0 <_Balloc>
 800d622:	4605      	mov	r5, r0
 800d624:	b948      	cbnz	r0, 800d63a <__lshift+0x3e>
 800d626:	4602      	mov	r2, r0
 800d628:	4b28      	ldr	r3, [pc, #160]	@ (800d6cc <__lshift+0xd0>)
 800d62a:	4829      	ldr	r0, [pc, #164]	@ (800d6d0 <__lshift+0xd4>)
 800d62c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d630:	f000 fd4c 	bl	800e0cc <__assert_func>
 800d634:	3101      	adds	r1, #1
 800d636:	005b      	lsls	r3, r3, #1
 800d638:	e7ee      	b.n	800d618 <__lshift+0x1c>
 800d63a:	2300      	movs	r3, #0
 800d63c:	f100 0114 	add.w	r1, r0, #20
 800d640:	f100 0210 	add.w	r2, r0, #16
 800d644:	4618      	mov	r0, r3
 800d646:	4553      	cmp	r3, sl
 800d648:	db33      	blt.n	800d6b2 <__lshift+0xb6>
 800d64a:	6920      	ldr	r0, [r4, #16]
 800d64c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d650:	f104 0314 	add.w	r3, r4, #20
 800d654:	f019 091f 	ands.w	r9, r9, #31
 800d658:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d65c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d660:	d02b      	beq.n	800d6ba <__lshift+0xbe>
 800d662:	f1c9 0e20 	rsb	lr, r9, #32
 800d666:	468a      	mov	sl, r1
 800d668:	2200      	movs	r2, #0
 800d66a:	6818      	ldr	r0, [r3, #0]
 800d66c:	fa00 f009 	lsl.w	r0, r0, r9
 800d670:	4310      	orrs	r0, r2
 800d672:	f84a 0b04 	str.w	r0, [sl], #4
 800d676:	f853 2b04 	ldr.w	r2, [r3], #4
 800d67a:	459c      	cmp	ip, r3
 800d67c:	fa22 f20e 	lsr.w	r2, r2, lr
 800d680:	d8f3      	bhi.n	800d66a <__lshift+0x6e>
 800d682:	ebac 0304 	sub.w	r3, ip, r4
 800d686:	3b15      	subs	r3, #21
 800d688:	f023 0303 	bic.w	r3, r3, #3
 800d68c:	3304      	adds	r3, #4
 800d68e:	f104 0015 	add.w	r0, r4, #21
 800d692:	4584      	cmp	ip, r0
 800d694:	bf38      	it	cc
 800d696:	2304      	movcc	r3, #4
 800d698:	50ca      	str	r2, [r1, r3]
 800d69a:	b10a      	cbz	r2, 800d6a0 <__lshift+0xa4>
 800d69c:	f108 0602 	add.w	r6, r8, #2
 800d6a0:	3e01      	subs	r6, #1
 800d6a2:	4638      	mov	r0, r7
 800d6a4:	612e      	str	r6, [r5, #16]
 800d6a6:	4621      	mov	r1, r4
 800d6a8:	f7ff fdda 	bl	800d260 <_Bfree>
 800d6ac:	4628      	mov	r0, r5
 800d6ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6b2:	f842 0f04 	str.w	r0, [r2, #4]!
 800d6b6:	3301      	adds	r3, #1
 800d6b8:	e7c5      	b.n	800d646 <__lshift+0x4a>
 800d6ba:	3904      	subs	r1, #4
 800d6bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6c0:	f841 2f04 	str.w	r2, [r1, #4]!
 800d6c4:	459c      	cmp	ip, r3
 800d6c6:	d8f9      	bhi.n	800d6bc <__lshift+0xc0>
 800d6c8:	e7ea      	b.n	800d6a0 <__lshift+0xa4>
 800d6ca:	bf00      	nop
 800d6cc:	0800e890 	.word	0x0800e890
 800d6d0:	0800e8a1 	.word	0x0800e8a1

0800d6d4 <__mcmp>:
 800d6d4:	690a      	ldr	r2, [r1, #16]
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	6900      	ldr	r0, [r0, #16]
 800d6da:	1a80      	subs	r0, r0, r2
 800d6dc:	b530      	push	{r4, r5, lr}
 800d6de:	d10e      	bne.n	800d6fe <__mcmp+0x2a>
 800d6e0:	3314      	adds	r3, #20
 800d6e2:	3114      	adds	r1, #20
 800d6e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d6e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d6ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d6f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d6f4:	4295      	cmp	r5, r2
 800d6f6:	d003      	beq.n	800d700 <__mcmp+0x2c>
 800d6f8:	d205      	bcs.n	800d706 <__mcmp+0x32>
 800d6fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d6fe:	bd30      	pop	{r4, r5, pc}
 800d700:	42a3      	cmp	r3, r4
 800d702:	d3f3      	bcc.n	800d6ec <__mcmp+0x18>
 800d704:	e7fb      	b.n	800d6fe <__mcmp+0x2a>
 800d706:	2001      	movs	r0, #1
 800d708:	e7f9      	b.n	800d6fe <__mcmp+0x2a>
	...

0800d70c <__mdiff>:
 800d70c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d710:	4689      	mov	r9, r1
 800d712:	4606      	mov	r6, r0
 800d714:	4611      	mov	r1, r2
 800d716:	4648      	mov	r0, r9
 800d718:	4614      	mov	r4, r2
 800d71a:	f7ff ffdb 	bl	800d6d4 <__mcmp>
 800d71e:	1e05      	subs	r5, r0, #0
 800d720:	d112      	bne.n	800d748 <__mdiff+0x3c>
 800d722:	4629      	mov	r1, r5
 800d724:	4630      	mov	r0, r6
 800d726:	f7ff fd5b 	bl	800d1e0 <_Balloc>
 800d72a:	4602      	mov	r2, r0
 800d72c:	b928      	cbnz	r0, 800d73a <__mdiff+0x2e>
 800d72e:	4b3f      	ldr	r3, [pc, #252]	@ (800d82c <__mdiff+0x120>)
 800d730:	f240 2137 	movw	r1, #567	@ 0x237
 800d734:	483e      	ldr	r0, [pc, #248]	@ (800d830 <__mdiff+0x124>)
 800d736:	f000 fcc9 	bl	800e0cc <__assert_func>
 800d73a:	2301      	movs	r3, #1
 800d73c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d740:	4610      	mov	r0, r2
 800d742:	b003      	add	sp, #12
 800d744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d748:	bfbc      	itt	lt
 800d74a:	464b      	movlt	r3, r9
 800d74c:	46a1      	movlt	r9, r4
 800d74e:	4630      	mov	r0, r6
 800d750:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d754:	bfba      	itte	lt
 800d756:	461c      	movlt	r4, r3
 800d758:	2501      	movlt	r5, #1
 800d75a:	2500      	movge	r5, #0
 800d75c:	f7ff fd40 	bl	800d1e0 <_Balloc>
 800d760:	4602      	mov	r2, r0
 800d762:	b918      	cbnz	r0, 800d76c <__mdiff+0x60>
 800d764:	4b31      	ldr	r3, [pc, #196]	@ (800d82c <__mdiff+0x120>)
 800d766:	f240 2145 	movw	r1, #581	@ 0x245
 800d76a:	e7e3      	b.n	800d734 <__mdiff+0x28>
 800d76c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d770:	6926      	ldr	r6, [r4, #16]
 800d772:	60c5      	str	r5, [r0, #12]
 800d774:	f109 0310 	add.w	r3, r9, #16
 800d778:	f109 0514 	add.w	r5, r9, #20
 800d77c:	f104 0e14 	add.w	lr, r4, #20
 800d780:	f100 0b14 	add.w	fp, r0, #20
 800d784:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d788:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d78c:	9301      	str	r3, [sp, #4]
 800d78e:	46d9      	mov	r9, fp
 800d790:	f04f 0c00 	mov.w	ip, #0
 800d794:	9b01      	ldr	r3, [sp, #4]
 800d796:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d79a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d79e:	9301      	str	r3, [sp, #4]
 800d7a0:	fa1f f38a 	uxth.w	r3, sl
 800d7a4:	4619      	mov	r1, r3
 800d7a6:	b283      	uxth	r3, r0
 800d7a8:	1acb      	subs	r3, r1, r3
 800d7aa:	0c00      	lsrs	r0, r0, #16
 800d7ac:	4463      	add	r3, ip
 800d7ae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d7b2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d7b6:	b29b      	uxth	r3, r3
 800d7b8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d7bc:	4576      	cmp	r6, lr
 800d7be:	f849 3b04 	str.w	r3, [r9], #4
 800d7c2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d7c6:	d8e5      	bhi.n	800d794 <__mdiff+0x88>
 800d7c8:	1b33      	subs	r3, r6, r4
 800d7ca:	3b15      	subs	r3, #21
 800d7cc:	f023 0303 	bic.w	r3, r3, #3
 800d7d0:	3415      	adds	r4, #21
 800d7d2:	3304      	adds	r3, #4
 800d7d4:	42a6      	cmp	r6, r4
 800d7d6:	bf38      	it	cc
 800d7d8:	2304      	movcc	r3, #4
 800d7da:	441d      	add	r5, r3
 800d7dc:	445b      	add	r3, fp
 800d7de:	461e      	mov	r6, r3
 800d7e0:	462c      	mov	r4, r5
 800d7e2:	4544      	cmp	r4, r8
 800d7e4:	d30e      	bcc.n	800d804 <__mdiff+0xf8>
 800d7e6:	f108 0103 	add.w	r1, r8, #3
 800d7ea:	1b49      	subs	r1, r1, r5
 800d7ec:	f021 0103 	bic.w	r1, r1, #3
 800d7f0:	3d03      	subs	r5, #3
 800d7f2:	45a8      	cmp	r8, r5
 800d7f4:	bf38      	it	cc
 800d7f6:	2100      	movcc	r1, #0
 800d7f8:	440b      	add	r3, r1
 800d7fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d7fe:	b191      	cbz	r1, 800d826 <__mdiff+0x11a>
 800d800:	6117      	str	r7, [r2, #16]
 800d802:	e79d      	b.n	800d740 <__mdiff+0x34>
 800d804:	f854 1b04 	ldr.w	r1, [r4], #4
 800d808:	46e6      	mov	lr, ip
 800d80a:	0c08      	lsrs	r0, r1, #16
 800d80c:	fa1c fc81 	uxtah	ip, ip, r1
 800d810:	4471      	add	r1, lr
 800d812:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d816:	b289      	uxth	r1, r1
 800d818:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d81c:	f846 1b04 	str.w	r1, [r6], #4
 800d820:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d824:	e7dd      	b.n	800d7e2 <__mdiff+0xd6>
 800d826:	3f01      	subs	r7, #1
 800d828:	e7e7      	b.n	800d7fa <__mdiff+0xee>
 800d82a:	bf00      	nop
 800d82c:	0800e890 	.word	0x0800e890
 800d830:	0800e8a1 	.word	0x0800e8a1

0800d834 <__d2b>:
 800d834:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d838:	460f      	mov	r7, r1
 800d83a:	2101      	movs	r1, #1
 800d83c:	ec59 8b10 	vmov	r8, r9, d0
 800d840:	4616      	mov	r6, r2
 800d842:	f7ff fccd 	bl	800d1e0 <_Balloc>
 800d846:	4604      	mov	r4, r0
 800d848:	b930      	cbnz	r0, 800d858 <__d2b+0x24>
 800d84a:	4602      	mov	r2, r0
 800d84c:	4b23      	ldr	r3, [pc, #140]	@ (800d8dc <__d2b+0xa8>)
 800d84e:	4824      	ldr	r0, [pc, #144]	@ (800d8e0 <__d2b+0xac>)
 800d850:	f240 310f 	movw	r1, #783	@ 0x30f
 800d854:	f000 fc3a 	bl	800e0cc <__assert_func>
 800d858:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d85c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d860:	b10d      	cbz	r5, 800d866 <__d2b+0x32>
 800d862:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d866:	9301      	str	r3, [sp, #4]
 800d868:	f1b8 0300 	subs.w	r3, r8, #0
 800d86c:	d023      	beq.n	800d8b6 <__d2b+0x82>
 800d86e:	4668      	mov	r0, sp
 800d870:	9300      	str	r3, [sp, #0]
 800d872:	f7ff fd7c 	bl	800d36e <__lo0bits>
 800d876:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d87a:	b1d0      	cbz	r0, 800d8b2 <__d2b+0x7e>
 800d87c:	f1c0 0320 	rsb	r3, r0, #32
 800d880:	fa02 f303 	lsl.w	r3, r2, r3
 800d884:	430b      	orrs	r3, r1
 800d886:	40c2      	lsrs	r2, r0
 800d888:	6163      	str	r3, [r4, #20]
 800d88a:	9201      	str	r2, [sp, #4]
 800d88c:	9b01      	ldr	r3, [sp, #4]
 800d88e:	61a3      	str	r3, [r4, #24]
 800d890:	2b00      	cmp	r3, #0
 800d892:	bf0c      	ite	eq
 800d894:	2201      	moveq	r2, #1
 800d896:	2202      	movne	r2, #2
 800d898:	6122      	str	r2, [r4, #16]
 800d89a:	b1a5      	cbz	r5, 800d8c6 <__d2b+0x92>
 800d89c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d8a0:	4405      	add	r5, r0
 800d8a2:	603d      	str	r5, [r7, #0]
 800d8a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d8a8:	6030      	str	r0, [r6, #0]
 800d8aa:	4620      	mov	r0, r4
 800d8ac:	b003      	add	sp, #12
 800d8ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d8b2:	6161      	str	r1, [r4, #20]
 800d8b4:	e7ea      	b.n	800d88c <__d2b+0x58>
 800d8b6:	a801      	add	r0, sp, #4
 800d8b8:	f7ff fd59 	bl	800d36e <__lo0bits>
 800d8bc:	9b01      	ldr	r3, [sp, #4]
 800d8be:	6163      	str	r3, [r4, #20]
 800d8c0:	3020      	adds	r0, #32
 800d8c2:	2201      	movs	r2, #1
 800d8c4:	e7e8      	b.n	800d898 <__d2b+0x64>
 800d8c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d8ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d8ce:	6038      	str	r0, [r7, #0]
 800d8d0:	6918      	ldr	r0, [r3, #16]
 800d8d2:	f7ff fd2d 	bl	800d330 <__hi0bits>
 800d8d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d8da:	e7e5      	b.n	800d8a8 <__d2b+0x74>
 800d8dc:	0800e890 	.word	0x0800e890
 800d8e0:	0800e8a1 	.word	0x0800e8a1

0800d8e4 <__ssputs_r>:
 800d8e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8e8:	688e      	ldr	r6, [r1, #8]
 800d8ea:	461f      	mov	r7, r3
 800d8ec:	42be      	cmp	r6, r7
 800d8ee:	680b      	ldr	r3, [r1, #0]
 800d8f0:	4682      	mov	sl, r0
 800d8f2:	460c      	mov	r4, r1
 800d8f4:	4690      	mov	r8, r2
 800d8f6:	d82d      	bhi.n	800d954 <__ssputs_r+0x70>
 800d8f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d8fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d900:	d026      	beq.n	800d950 <__ssputs_r+0x6c>
 800d902:	6965      	ldr	r5, [r4, #20]
 800d904:	6909      	ldr	r1, [r1, #16]
 800d906:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d90a:	eba3 0901 	sub.w	r9, r3, r1
 800d90e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d912:	1c7b      	adds	r3, r7, #1
 800d914:	444b      	add	r3, r9
 800d916:	106d      	asrs	r5, r5, #1
 800d918:	429d      	cmp	r5, r3
 800d91a:	bf38      	it	cc
 800d91c:	461d      	movcc	r5, r3
 800d91e:	0553      	lsls	r3, r2, #21
 800d920:	d527      	bpl.n	800d972 <__ssputs_r+0x8e>
 800d922:	4629      	mov	r1, r5
 800d924:	f7ff fbd0 	bl	800d0c8 <_malloc_r>
 800d928:	4606      	mov	r6, r0
 800d92a:	b360      	cbz	r0, 800d986 <__ssputs_r+0xa2>
 800d92c:	6921      	ldr	r1, [r4, #16]
 800d92e:	464a      	mov	r2, r9
 800d930:	f7fe fcf9 	bl	800c326 <memcpy>
 800d934:	89a3      	ldrh	r3, [r4, #12]
 800d936:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d93a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d93e:	81a3      	strh	r3, [r4, #12]
 800d940:	6126      	str	r6, [r4, #16]
 800d942:	6165      	str	r5, [r4, #20]
 800d944:	444e      	add	r6, r9
 800d946:	eba5 0509 	sub.w	r5, r5, r9
 800d94a:	6026      	str	r6, [r4, #0]
 800d94c:	60a5      	str	r5, [r4, #8]
 800d94e:	463e      	mov	r6, r7
 800d950:	42be      	cmp	r6, r7
 800d952:	d900      	bls.n	800d956 <__ssputs_r+0x72>
 800d954:	463e      	mov	r6, r7
 800d956:	6820      	ldr	r0, [r4, #0]
 800d958:	4632      	mov	r2, r6
 800d95a:	4641      	mov	r1, r8
 800d95c:	f000 fb6a 	bl	800e034 <memmove>
 800d960:	68a3      	ldr	r3, [r4, #8]
 800d962:	1b9b      	subs	r3, r3, r6
 800d964:	60a3      	str	r3, [r4, #8]
 800d966:	6823      	ldr	r3, [r4, #0]
 800d968:	4433      	add	r3, r6
 800d96a:	6023      	str	r3, [r4, #0]
 800d96c:	2000      	movs	r0, #0
 800d96e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d972:	462a      	mov	r2, r5
 800d974:	f000 fbee 	bl	800e154 <_realloc_r>
 800d978:	4606      	mov	r6, r0
 800d97a:	2800      	cmp	r0, #0
 800d97c:	d1e0      	bne.n	800d940 <__ssputs_r+0x5c>
 800d97e:	6921      	ldr	r1, [r4, #16]
 800d980:	4650      	mov	r0, sl
 800d982:	f7ff fb2d 	bl	800cfe0 <_free_r>
 800d986:	230c      	movs	r3, #12
 800d988:	f8ca 3000 	str.w	r3, [sl]
 800d98c:	89a3      	ldrh	r3, [r4, #12]
 800d98e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d992:	81a3      	strh	r3, [r4, #12]
 800d994:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d998:	e7e9      	b.n	800d96e <__ssputs_r+0x8a>
	...

0800d99c <_svfiprintf_r>:
 800d99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9a0:	4698      	mov	r8, r3
 800d9a2:	898b      	ldrh	r3, [r1, #12]
 800d9a4:	061b      	lsls	r3, r3, #24
 800d9a6:	b09d      	sub	sp, #116	@ 0x74
 800d9a8:	4607      	mov	r7, r0
 800d9aa:	460d      	mov	r5, r1
 800d9ac:	4614      	mov	r4, r2
 800d9ae:	d510      	bpl.n	800d9d2 <_svfiprintf_r+0x36>
 800d9b0:	690b      	ldr	r3, [r1, #16]
 800d9b2:	b973      	cbnz	r3, 800d9d2 <_svfiprintf_r+0x36>
 800d9b4:	2140      	movs	r1, #64	@ 0x40
 800d9b6:	f7ff fb87 	bl	800d0c8 <_malloc_r>
 800d9ba:	6028      	str	r0, [r5, #0]
 800d9bc:	6128      	str	r0, [r5, #16]
 800d9be:	b930      	cbnz	r0, 800d9ce <_svfiprintf_r+0x32>
 800d9c0:	230c      	movs	r3, #12
 800d9c2:	603b      	str	r3, [r7, #0]
 800d9c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d9c8:	b01d      	add	sp, #116	@ 0x74
 800d9ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9ce:	2340      	movs	r3, #64	@ 0x40
 800d9d0:	616b      	str	r3, [r5, #20]
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d9d6:	2320      	movs	r3, #32
 800d9d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d9dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800d9e0:	2330      	movs	r3, #48	@ 0x30
 800d9e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800db80 <_svfiprintf_r+0x1e4>
 800d9e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d9ea:	f04f 0901 	mov.w	r9, #1
 800d9ee:	4623      	mov	r3, r4
 800d9f0:	469a      	mov	sl, r3
 800d9f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d9f6:	b10a      	cbz	r2, 800d9fc <_svfiprintf_r+0x60>
 800d9f8:	2a25      	cmp	r2, #37	@ 0x25
 800d9fa:	d1f9      	bne.n	800d9f0 <_svfiprintf_r+0x54>
 800d9fc:	ebba 0b04 	subs.w	fp, sl, r4
 800da00:	d00b      	beq.n	800da1a <_svfiprintf_r+0x7e>
 800da02:	465b      	mov	r3, fp
 800da04:	4622      	mov	r2, r4
 800da06:	4629      	mov	r1, r5
 800da08:	4638      	mov	r0, r7
 800da0a:	f7ff ff6b 	bl	800d8e4 <__ssputs_r>
 800da0e:	3001      	adds	r0, #1
 800da10:	f000 80a7 	beq.w	800db62 <_svfiprintf_r+0x1c6>
 800da14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800da16:	445a      	add	r2, fp
 800da18:	9209      	str	r2, [sp, #36]	@ 0x24
 800da1a:	f89a 3000 	ldrb.w	r3, [sl]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	f000 809f 	beq.w	800db62 <_svfiprintf_r+0x1c6>
 800da24:	2300      	movs	r3, #0
 800da26:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800da2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da2e:	f10a 0a01 	add.w	sl, sl, #1
 800da32:	9304      	str	r3, [sp, #16]
 800da34:	9307      	str	r3, [sp, #28]
 800da36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800da3a:	931a      	str	r3, [sp, #104]	@ 0x68
 800da3c:	4654      	mov	r4, sl
 800da3e:	2205      	movs	r2, #5
 800da40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da44:	484e      	ldr	r0, [pc, #312]	@ (800db80 <_svfiprintf_r+0x1e4>)
 800da46:	f7f2 fbcb 	bl	80001e0 <memchr>
 800da4a:	9a04      	ldr	r2, [sp, #16]
 800da4c:	b9d8      	cbnz	r0, 800da86 <_svfiprintf_r+0xea>
 800da4e:	06d0      	lsls	r0, r2, #27
 800da50:	bf44      	itt	mi
 800da52:	2320      	movmi	r3, #32
 800da54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800da58:	0711      	lsls	r1, r2, #28
 800da5a:	bf44      	itt	mi
 800da5c:	232b      	movmi	r3, #43	@ 0x2b
 800da5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800da62:	f89a 3000 	ldrb.w	r3, [sl]
 800da66:	2b2a      	cmp	r3, #42	@ 0x2a
 800da68:	d015      	beq.n	800da96 <_svfiprintf_r+0xfa>
 800da6a:	9a07      	ldr	r2, [sp, #28]
 800da6c:	4654      	mov	r4, sl
 800da6e:	2000      	movs	r0, #0
 800da70:	f04f 0c0a 	mov.w	ip, #10
 800da74:	4621      	mov	r1, r4
 800da76:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da7a:	3b30      	subs	r3, #48	@ 0x30
 800da7c:	2b09      	cmp	r3, #9
 800da7e:	d94b      	bls.n	800db18 <_svfiprintf_r+0x17c>
 800da80:	b1b0      	cbz	r0, 800dab0 <_svfiprintf_r+0x114>
 800da82:	9207      	str	r2, [sp, #28]
 800da84:	e014      	b.n	800dab0 <_svfiprintf_r+0x114>
 800da86:	eba0 0308 	sub.w	r3, r0, r8
 800da8a:	fa09 f303 	lsl.w	r3, r9, r3
 800da8e:	4313      	orrs	r3, r2
 800da90:	9304      	str	r3, [sp, #16]
 800da92:	46a2      	mov	sl, r4
 800da94:	e7d2      	b.n	800da3c <_svfiprintf_r+0xa0>
 800da96:	9b03      	ldr	r3, [sp, #12]
 800da98:	1d19      	adds	r1, r3, #4
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	9103      	str	r1, [sp, #12]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	bfbb      	ittet	lt
 800daa2:	425b      	neglt	r3, r3
 800daa4:	f042 0202 	orrlt.w	r2, r2, #2
 800daa8:	9307      	strge	r3, [sp, #28]
 800daaa:	9307      	strlt	r3, [sp, #28]
 800daac:	bfb8      	it	lt
 800daae:	9204      	strlt	r2, [sp, #16]
 800dab0:	7823      	ldrb	r3, [r4, #0]
 800dab2:	2b2e      	cmp	r3, #46	@ 0x2e
 800dab4:	d10a      	bne.n	800dacc <_svfiprintf_r+0x130>
 800dab6:	7863      	ldrb	r3, [r4, #1]
 800dab8:	2b2a      	cmp	r3, #42	@ 0x2a
 800daba:	d132      	bne.n	800db22 <_svfiprintf_r+0x186>
 800dabc:	9b03      	ldr	r3, [sp, #12]
 800dabe:	1d1a      	adds	r2, r3, #4
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	9203      	str	r2, [sp, #12]
 800dac4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dac8:	3402      	adds	r4, #2
 800daca:	9305      	str	r3, [sp, #20]
 800dacc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800db90 <_svfiprintf_r+0x1f4>
 800dad0:	7821      	ldrb	r1, [r4, #0]
 800dad2:	2203      	movs	r2, #3
 800dad4:	4650      	mov	r0, sl
 800dad6:	f7f2 fb83 	bl	80001e0 <memchr>
 800dada:	b138      	cbz	r0, 800daec <_svfiprintf_r+0x150>
 800dadc:	9b04      	ldr	r3, [sp, #16]
 800dade:	eba0 000a 	sub.w	r0, r0, sl
 800dae2:	2240      	movs	r2, #64	@ 0x40
 800dae4:	4082      	lsls	r2, r0
 800dae6:	4313      	orrs	r3, r2
 800dae8:	3401      	adds	r4, #1
 800daea:	9304      	str	r3, [sp, #16]
 800daec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800daf0:	4824      	ldr	r0, [pc, #144]	@ (800db84 <_svfiprintf_r+0x1e8>)
 800daf2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800daf6:	2206      	movs	r2, #6
 800daf8:	f7f2 fb72 	bl	80001e0 <memchr>
 800dafc:	2800      	cmp	r0, #0
 800dafe:	d036      	beq.n	800db6e <_svfiprintf_r+0x1d2>
 800db00:	4b21      	ldr	r3, [pc, #132]	@ (800db88 <_svfiprintf_r+0x1ec>)
 800db02:	bb1b      	cbnz	r3, 800db4c <_svfiprintf_r+0x1b0>
 800db04:	9b03      	ldr	r3, [sp, #12]
 800db06:	3307      	adds	r3, #7
 800db08:	f023 0307 	bic.w	r3, r3, #7
 800db0c:	3308      	adds	r3, #8
 800db0e:	9303      	str	r3, [sp, #12]
 800db10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db12:	4433      	add	r3, r6
 800db14:	9309      	str	r3, [sp, #36]	@ 0x24
 800db16:	e76a      	b.n	800d9ee <_svfiprintf_r+0x52>
 800db18:	fb0c 3202 	mla	r2, ip, r2, r3
 800db1c:	460c      	mov	r4, r1
 800db1e:	2001      	movs	r0, #1
 800db20:	e7a8      	b.n	800da74 <_svfiprintf_r+0xd8>
 800db22:	2300      	movs	r3, #0
 800db24:	3401      	adds	r4, #1
 800db26:	9305      	str	r3, [sp, #20]
 800db28:	4619      	mov	r1, r3
 800db2a:	f04f 0c0a 	mov.w	ip, #10
 800db2e:	4620      	mov	r0, r4
 800db30:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db34:	3a30      	subs	r2, #48	@ 0x30
 800db36:	2a09      	cmp	r2, #9
 800db38:	d903      	bls.n	800db42 <_svfiprintf_r+0x1a6>
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d0c6      	beq.n	800dacc <_svfiprintf_r+0x130>
 800db3e:	9105      	str	r1, [sp, #20]
 800db40:	e7c4      	b.n	800dacc <_svfiprintf_r+0x130>
 800db42:	fb0c 2101 	mla	r1, ip, r1, r2
 800db46:	4604      	mov	r4, r0
 800db48:	2301      	movs	r3, #1
 800db4a:	e7f0      	b.n	800db2e <_svfiprintf_r+0x192>
 800db4c:	ab03      	add	r3, sp, #12
 800db4e:	9300      	str	r3, [sp, #0]
 800db50:	462a      	mov	r2, r5
 800db52:	4b0e      	ldr	r3, [pc, #56]	@ (800db8c <_svfiprintf_r+0x1f0>)
 800db54:	a904      	add	r1, sp, #16
 800db56:	4638      	mov	r0, r7
 800db58:	f7fd fd1a 	bl	800b590 <_printf_float>
 800db5c:	1c42      	adds	r2, r0, #1
 800db5e:	4606      	mov	r6, r0
 800db60:	d1d6      	bne.n	800db10 <_svfiprintf_r+0x174>
 800db62:	89ab      	ldrh	r3, [r5, #12]
 800db64:	065b      	lsls	r3, r3, #25
 800db66:	f53f af2d 	bmi.w	800d9c4 <_svfiprintf_r+0x28>
 800db6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800db6c:	e72c      	b.n	800d9c8 <_svfiprintf_r+0x2c>
 800db6e:	ab03      	add	r3, sp, #12
 800db70:	9300      	str	r3, [sp, #0]
 800db72:	462a      	mov	r2, r5
 800db74:	4b05      	ldr	r3, [pc, #20]	@ (800db8c <_svfiprintf_r+0x1f0>)
 800db76:	a904      	add	r1, sp, #16
 800db78:	4638      	mov	r0, r7
 800db7a:	f7fd ffa1 	bl	800bac0 <_printf_i>
 800db7e:	e7ed      	b.n	800db5c <_svfiprintf_r+0x1c0>
 800db80:	0800e9f8 	.word	0x0800e9f8
 800db84:	0800ea02 	.word	0x0800ea02
 800db88:	0800b591 	.word	0x0800b591
 800db8c:	0800d8e5 	.word	0x0800d8e5
 800db90:	0800e9fe 	.word	0x0800e9fe

0800db94 <__sfputc_r>:
 800db94:	6893      	ldr	r3, [r2, #8]
 800db96:	3b01      	subs	r3, #1
 800db98:	2b00      	cmp	r3, #0
 800db9a:	b410      	push	{r4}
 800db9c:	6093      	str	r3, [r2, #8]
 800db9e:	da08      	bge.n	800dbb2 <__sfputc_r+0x1e>
 800dba0:	6994      	ldr	r4, [r2, #24]
 800dba2:	42a3      	cmp	r3, r4
 800dba4:	db01      	blt.n	800dbaa <__sfputc_r+0x16>
 800dba6:	290a      	cmp	r1, #10
 800dba8:	d103      	bne.n	800dbb2 <__sfputc_r+0x1e>
 800dbaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dbae:	f7fe ba50 	b.w	800c052 <__swbuf_r>
 800dbb2:	6813      	ldr	r3, [r2, #0]
 800dbb4:	1c58      	adds	r0, r3, #1
 800dbb6:	6010      	str	r0, [r2, #0]
 800dbb8:	7019      	strb	r1, [r3, #0]
 800dbba:	4608      	mov	r0, r1
 800dbbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dbc0:	4770      	bx	lr

0800dbc2 <__sfputs_r>:
 800dbc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbc4:	4606      	mov	r6, r0
 800dbc6:	460f      	mov	r7, r1
 800dbc8:	4614      	mov	r4, r2
 800dbca:	18d5      	adds	r5, r2, r3
 800dbcc:	42ac      	cmp	r4, r5
 800dbce:	d101      	bne.n	800dbd4 <__sfputs_r+0x12>
 800dbd0:	2000      	movs	r0, #0
 800dbd2:	e007      	b.n	800dbe4 <__sfputs_r+0x22>
 800dbd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbd8:	463a      	mov	r2, r7
 800dbda:	4630      	mov	r0, r6
 800dbdc:	f7ff ffda 	bl	800db94 <__sfputc_r>
 800dbe0:	1c43      	adds	r3, r0, #1
 800dbe2:	d1f3      	bne.n	800dbcc <__sfputs_r+0xa>
 800dbe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dbe8 <_vfiprintf_r>:
 800dbe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbec:	460d      	mov	r5, r1
 800dbee:	b09d      	sub	sp, #116	@ 0x74
 800dbf0:	4614      	mov	r4, r2
 800dbf2:	4698      	mov	r8, r3
 800dbf4:	4606      	mov	r6, r0
 800dbf6:	b118      	cbz	r0, 800dc00 <_vfiprintf_r+0x18>
 800dbf8:	6a03      	ldr	r3, [r0, #32]
 800dbfa:	b90b      	cbnz	r3, 800dc00 <_vfiprintf_r+0x18>
 800dbfc:	f7fe f90c 	bl	800be18 <__sinit>
 800dc00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dc02:	07d9      	lsls	r1, r3, #31
 800dc04:	d405      	bmi.n	800dc12 <_vfiprintf_r+0x2a>
 800dc06:	89ab      	ldrh	r3, [r5, #12]
 800dc08:	059a      	lsls	r2, r3, #22
 800dc0a:	d402      	bmi.n	800dc12 <_vfiprintf_r+0x2a>
 800dc0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dc0e:	f7fe fb88 	bl	800c322 <__retarget_lock_acquire_recursive>
 800dc12:	89ab      	ldrh	r3, [r5, #12]
 800dc14:	071b      	lsls	r3, r3, #28
 800dc16:	d501      	bpl.n	800dc1c <_vfiprintf_r+0x34>
 800dc18:	692b      	ldr	r3, [r5, #16]
 800dc1a:	b99b      	cbnz	r3, 800dc44 <_vfiprintf_r+0x5c>
 800dc1c:	4629      	mov	r1, r5
 800dc1e:	4630      	mov	r0, r6
 800dc20:	f7fe fa56 	bl	800c0d0 <__swsetup_r>
 800dc24:	b170      	cbz	r0, 800dc44 <_vfiprintf_r+0x5c>
 800dc26:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dc28:	07dc      	lsls	r4, r3, #31
 800dc2a:	d504      	bpl.n	800dc36 <_vfiprintf_r+0x4e>
 800dc2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dc30:	b01d      	add	sp, #116	@ 0x74
 800dc32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc36:	89ab      	ldrh	r3, [r5, #12]
 800dc38:	0598      	lsls	r0, r3, #22
 800dc3a:	d4f7      	bmi.n	800dc2c <_vfiprintf_r+0x44>
 800dc3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dc3e:	f7fe fb71 	bl	800c324 <__retarget_lock_release_recursive>
 800dc42:	e7f3      	b.n	800dc2c <_vfiprintf_r+0x44>
 800dc44:	2300      	movs	r3, #0
 800dc46:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc48:	2320      	movs	r3, #32
 800dc4a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dc4e:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc52:	2330      	movs	r3, #48	@ 0x30
 800dc54:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800de04 <_vfiprintf_r+0x21c>
 800dc58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dc5c:	f04f 0901 	mov.w	r9, #1
 800dc60:	4623      	mov	r3, r4
 800dc62:	469a      	mov	sl, r3
 800dc64:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc68:	b10a      	cbz	r2, 800dc6e <_vfiprintf_r+0x86>
 800dc6a:	2a25      	cmp	r2, #37	@ 0x25
 800dc6c:	d1f9      	bne.n	800dc62 <_vfiprintf_r+0x7a>
 800dc6e:	ebba 0b04 	subs.w	fp, sl, r4
 800dc72:	d00b      	beq.n	800dc8c <_vfiprintf_r+0xa4>
 800dc74:	465b      	mov	r3, fp
 800dc76:	4622      	mov	r2, r4
 800dc78:	4629      	mov	r1, r5
 800dc7a:	4630      	mov	r0, r6
 800dc7c:	f7ff ffa1 	bl	800dbc2 <__sfputs_r>
 800dc80:	3001      	adds	r0, #1
 800dc82:	f000 80a7 	beq.w	800ddd4 <_vfiprintf_r+0x1ec>
 800dc86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc88:	445a      	add	r2, fp
 800dc8a:	9209      	str	r2, [sp, #36]	@ 0x24
 800dc8c:	f89a 3000 	ldrb.w	r3, [sl]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	f000 809f 	beq.w	800ddd4 <_vfiprintf_r+0x1ec>
 800dc96:	2300      	movs	r3, #0
 800dc98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dc9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dca0:	f10a 0a01 	add.w	sl, sl, #1
 800dca4:	9304      	str	r3, [sp, #16]
 800dca6:	9307      	str	r3, [sp, #28]
 800dca8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dcac:	931a      	str	r3, [sp, #104]	@ 0x68
 800dcae:	4654      	mov	r4, sl
 800dcb0:	2205      	movs	r2, #5
 800dcb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcb6:	4853      	ldr	r0, [pc, #332]	@ (800de04 <_vfiprintf_r+0x21c>)
 800dcb8:	f7f2 fa92 	bl	80001e0 <memchr>
 800dcbc:	9a04      	ldr	r2, [sp, #16]
 800dcbe:	b9d8      	cbnz	r0, 800dcf8 <_vfiprintf_r+0x110>
 800dcc0:	06d1      	lsls	r1, r2, #27
 800dcc2:	bf44      	itt	mi
 800dcc4:	2320      	movmi	r3, #32
 800dcc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dcca:	0713      	lsls	r3, r2, #28
 800dccc:	bf44      	itt	mi
 800dcce:	232b      	movmi	r3, #43	@ 0x2b
 800dcd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dcd4:	f89a 3000 	ldrb.w	r3, [sl]
 800dcd8:	2b2a      	cmp	r3, #42	@ 0x2a
 800dcda:	d015      	beq.n	800dd08 <_vfiprintf_r+0x120>
 800dcdc:	9a07      	ldr	r2, [sp, #28]
 800dcde:	4654      	mov	r4, sl
 800dce0:	2000      	movs	r0, #0
 800dce2:	f04f 0c0a 	mov.w	ip, #10
 800dce6:	4621      	mov	r1, r4
 800dce8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dcec:	3b30      	subs	r3, #48	@ 0x30
 800dcee:	2b09      	cmp	r3, #9
 800dcf0:	d94b      	bls.n	800dd8a <_vfiprintf_r+0x1a2>
 800dcf2:	b1b0      	cbz	r0, 800dd22 <_vfiprintf_r+0x13a>
 800dcf4:	9207      	str	r2, [sp, #28]
 800dcf6:	e014      	b.n	800dd22 <_vfiprintf_r+0x13a>
 800dcf8:	eba0 0308 	sub.w	r3, r0, r8
 800dcfc:	fa09 f303 	lsl.w	r3, r9, r3
 800dd00:	4313      	orrs	r3, r2
 800dd02:	9304      	str	r3, [sp, #16]
 800dd04:	46a2      	mov	sl, r4
 800dd06:	e7d2      	b.n	800dcae <_vfiprintf_r+0xc6>
 800dd08:	9b03      	ldr	r3, [sp, #12]
 800dd0a:	1d19      	adds	r1, r3, #4
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	9103      	str	r1, [sp, #12]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	bfbb      	ittet	lt
 800dd14:	425b      	neglt	r3, r3
 800dd16:	f042 0202 	orrlt.w	r2, r2, #2
 800dd1a:	9307      	strge	r3, [sp, #28]
 800dd1c:	9307      	strlt	r3, [sp, #28]
 800dd1e:	bfb8      	it	lt
 800dd20:	9204      	strlt	r2, [sp, #16]
 800dd22:	7823      	ldrb	r3, [r4, #0]
 800dd24:	2b2e      	cmp	r3, #46	@ 0x2e
 800dd26:	d10a      	bne.n	800dd3e <_vfiprintf_r+0x156>
 800dd28:	7863      	ldrb	r3, [r4, #1]
 800dd2a:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd2c:	d132      	bne.n	800dd94 <_vfiprintf_r+0x1ac>
 800dd2e:	9b03      	ldr	r3, [sp, #12]
 800dd30:	1d1a      	adds	r2, r3, #4
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	9203      	str	r2, [sp, #12]
 800dd36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dd3a:	3402      	adds	r4, #2
 800dd3c:	9305      	str	r3, [sp, #20]
 800dd3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800de14 <_vfiprintf_r+0x22c>
 800dd42:	7821      	ldrb	r1, [r4, #0]
 800dd44:	2203      	movs	r2, #3
 800dd46:	4650      	mov	r0, sl
 800dd48:	f7f2 fa4a 	bl	80001e0 <memchr>
 800dd4c:	b138      	cbz	r0, 800dd5e <_vfiprintf_r+0x176>
 800dd4e:	9b04      	ldr	r3, [sp, #16]
 800dd50:	eba0 000a 	sub.w	r0, r0, sl
 800dd54:	2240      	movs	r2, #64	@ 0x40
 800dd56:	4082      	lsls	r2, r0
 800dd58:	4313      	orrs	r3, r2
 800dd5a:	3401      	adds	r4, #1
 800dd5c:	9304      	str	r3, [sp, #16]
 800dd5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd62:	4829      	ldr	r0, [pc, #164]	@ (800de08 <_vfiprintf_r+0x220>)
 800dd64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dd68:	2206      	movs	r2, #6
 800dd6a:	f7f2 fa39 	bl	80001e0 <memchr>
 800dd6e:	2800      	cmp	r0, #0
 800dd70:	d03f      	beq.n	800ddf2 <_vfiprintf_r+0x20a>
 800dd72:	4b26      	ldr	r3, [pc, #152]	@ (800de0c <_vfiprintf_r+0x224>)
 800dd74:	bb1b      	cbnz	r3, 800ddbe <_vfiprintf_r+0x1d6>
 800dd76:	9b03      	ldr	r3, [sp, #12]
 800dd78:	3307      	adds	r3, #7
 800dd7a:	f023 0307 	bic.w	r3, r3, #7
 800dd7e:	3308      	adds	r3, #8
 800dd80:	9303      	str	r3, [sp, #12]
 800dd82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd84:	443b      	add	r3, r7
 800dd86:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd88:	e76a      	b.n	800dc60 <_vfiprintf_r+0x78>
 800dd8a:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd8e:	460c      	mov	r4, r1
 800dd90:	2001      	movs	r0, #1
 800dd92:	e7a8      	b.n	800dce6 <_vfiprintf_r+0xfe>
 800dd94:	2300      	movs	r3, #0
 800dd96:	3401      	adds	r4, #1
 800dd98:	9305      	str	r3, [sp, #20]
 800dd9a:	4619      	mov	r1, r3
 800dd9c:	f04f 0c0a 	mov.w	ip, #10
 800dda0:	4620      	mov	r0, r4
 800dda2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dda6:	3a30      	subs	r2, #48	@ 0x30
 800dda8:	2a09      	cmp	r2, #9
 800ddaa:	d903      	bls.n	800ddb4 <_vfiprintf_r+0x1cc>
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d0c6      	beq.n	800dd3e <_vfiprintf_r+0x156>
 800ddb0:	9105      	str	r1, [sp, #20]
 800ddb2:	e7c4      	b.n	800dd3e <_vfiprintf_r+0x156>
 800ddb4:	fb0c 2101 	mla	r1, ip, r1, r2
 800ddb8:	4604      	mov	r4, r0
 800ddba:	2301      	movs	r3, #1
 800ddbc:	e7f0      	b.n	800dda0 <_vfiprintf_r+0x1b8>
 800ddbe:	ab03      	add	r3, sp, #12
 800ddc0:	9300      	str	r3, [sp, #0]
 800ddc2:	462a      	mov	r2, r5
 800ddc4:	4b12      	ldr	r3, [pc, #72]	@ (800de10 <_vfiprintf_r+0x228>)
 800ddc6:	a904      	add	r1, sp, #16
 800ddc8:	4630      	mov	r0, r6
 800ddca:	f7fd fbe1 	bl	800b590 <_printf_float>
 800ddce:	4607      	mov	r7, r0
 800ddd0:	1c78      	adds	r0, r7, #1
 800ddd2:	d1d6      	bne.n	800dd82 <_vfiprintf_r+0x19a>
 800ddd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ddd6:	07d9      	lsls	r1, r3, #31
 800ddd8:	d405      	bmi.n	800dde6 <_vfiprintf_r+0x1fe>
 800ddda:	89ab      	ldrh	r3, [r5, #12]
 800dddc:	059a      	lsls	r2, r3, #22
 800ddde:	d402      	bmi.n	800dde6 <_vfiprintf_r+0x1fe>
 800dde0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dde2:	f7fe fa9f 	bl	800c324 <__retarget_lock_release_recursive>
 800dde6:	89ab      	ldrh	r3, [r5, #12]
 800dde8:	065b      	lsls	r3, r3, #25
 800ddea:	f53f af1f 	bmi.w	800dc2c <_vfiprintf_r+0x44>
 800ddee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ddf0:	e71e      	b.n	800dc30 <_vfiprintf_r+0x48>
 800ddf2:	ab03      	add	r3, sp, #12
 800ddf4:	9300      	str	r3, [sp, #0]
 800ddf6:	462a      	mov	r2, r5
 800ddf8:	4b05      	ldr	r3, [pc, #20]	@ (800de10 <_vfiprintf_r+0x228>)
 800ddfa:	a904      	add	r1, sp, #16
 800ddfc:	4630      	mov	r0, r6
 800ddfe:	f7fd fe5f 	bl	800bac0 <_printf_i>
 800de02:	e7e4      	b.n	800ddce <_vfiprintf_r+0x1e6>
 800de04:	0800e9f8 	.word	0x0800e9f8
 800de08:	0800ea02 	.word	0x0800ea02
 800de0c:	0800b591 	.word	0x0800b591
 800de10:	0800dbc3 	.word	0x0800dbc3
 800de14:	0800e9fe 	.word	0x0800e9fe

0800de18 <__sflush_r>:
 800de18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800de1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de20:	0716      	lsls	r6, r2, #28
 800de22:	4605      	mov	r5, r0
 800de24:	460c      	mov	r4, r1
 800de26:	d454      	bmi.n	800ded2 <__sflush_r+0xba>
 800de28:	684b      	ldr	r3, [r1, #4]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	dc02      	bgt.n	800de34 <__sflush_r+0x1c>
 800de2e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800de30:	2b00      	cmp	r3, #0
 800de32:	dd48      	ble.n	800dec6 <__sflush_r+0xae>
 800de34:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800de36:	2e00      	cmp	r6, #0
 800de38:	d045      	beq.n	800dec6 <__sflush_r+0xae>
 800de3a:	2300      	movs	r3, #0
 800de3c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800de40:	682f      	ldr	r7, [r5, #0]
 800de42:	6a21      	ldr	r1, [r4, #32]
 800de44:	602b      	str	r3, [r5, #0]
 800de46:	d030      	beq.n	800deaa <__sflush_r+0x92>
 800de48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800de4a:	89a3      	ldrh	r3, [r4, #12]
 800de4c:	0759      	lsls	r1, r3, #29
 800de4e:	d505      	bpl.n	800de5c <__sflush_r+0x44>
 800de50:	6863      	ldr	r3, [r4, #4]
 800de52:	1ad2      	subs	r2, r2, r3
 800de54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800de56:	b10b      	cbz	r3, 800de5c <__sflush_r+0x44>
 800de58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800de5a:	1ad2      	subs	r2, r2, r3
 800de5c:	2300      	movs	r3, #0
 800de5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800de60:	6a21      	ldr	r1, [r4, #32]
 800de62:	4628      	mov	r0, r5
 800de64:	47b0      	blx	r6
 800de66:	1c43      	adds	r3, r0, #1
 800de68:	89a3      	ldrh	r3, [r4, #12]
 800de6a:	d106      	bne.n	800de7a <__sflush_r+0x62>
 800de6c:	6829      	ldr	r1, [r5, #0]
 800de6e:	291d      	cmp	r1, #29
 800de70:	d82b      	bhi.n	800deca <__sflush_r+0xb2>
 800de72:	4a2a      	ldr	r2, [pc, #168]	@ (800df1c <__sflush_r+0x104>)
 800de74:	410a      	asrs	r2, r1
 800de76:	07d6      	lsls	r6, r2, #31
 800de78:	d427      	bmi.n	800deca <__sflush_r+0xb2>
 800de7a:	2200      	movs	r2, #0
 800de7c:	6062      	str	r2, [r4, #4]
 800de7e:	04d9      	lsls	r1, r3, #19
 800de80:	6922      	ldr	r2, [r4, #16]
 800de82:	6022      	str	r2, [r4, #0]
 800de84:	d504      	bpl.n	800de90 <__sflush_r+0x78>
 800de86:	1c42      	adds	r2, r0, #1
 800de88:	d101      	bne.n	800de8e <__sflush_r+0x76>
 800de8a:	682b      	ldr	r3, [r5, #0]
 800de8c:	b903      	cbnz	r3, 800de90 <__sflush_r+0x78>
 800de8e:	6560      	str	r0, [r4, #84]	@ 0x54
 800de90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800de92:	602f      	str	r7, [r5, #0]
 800de94:	b1b9      	cbz	r1, 800dec6 <__sflush_r+0xae>
 800de96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800de9a:	4299      	cmp	r1, r3
 800de9c:	d002      	beq.n	800dea4 <__sflush_r+0x8c>
 800de9e:	4628      	mov	r0, r5
 800dea0:	f7ff f89e 	bl	800cfe0 <_free_r>
 800dea4:	2300      	movs	r3, #0
 800dea6:	6363      	str	r3, [r4, #52]	@ 0x34
 800dea8:	e00d      	b.n	800dec6 <__sflush_r+0xae>
 800deaa:	2301      	movs	r3, #1
 800deac:	4628      	mov	r0, r5
 800deae:	47b0      	blx	r6
 800deb0:	4602      	mov	r2, r0
 800deb2:	1c50      	adds	r0, r2, #1
 800deb4:	d1c9      	bne.n	800de4a <__sflush_r+0x32>
 800deb6:	682b      	ldr	r3, [r5, #0]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d0c6      	beq.n	800de4a <__sflush_r+0x32>
 800debc:	2b1d      	cmp	r3, #29
 800debe:	d001      	beq.n	800dec4 <__sflush_r+0xac>
 800dec0:	2b16      	cmp	r3, #22
 800dec2:	d11e      	bne.n	800df02 <__sflush_r+0xea>
 800dec4:	602f      	str	r7, [r5, #0]
 800dec6:	2000      	movs	r0, #0
 800dec8:	e022      	b.n	800df10 <__sflush_r+0xf8>
 800deca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dece:	b21b      	sxth	r3, r3
 800ded0:	e01b      	b.n	800df0a <__sflush_r+0xf2>
 800ded2:	690f      	ldr	r7, [r1, #16]
 800ded4:	2f00      	cmp	r7, #0
 800ded6:	d0f6      	beq.n	800dec6 <__sflush_r+0xae>
 800ded8:	0793      	lsls	r3, r2, #30
 800deda:	680e      	ldr	r6, [r1, #0]
 800dedc:	bf08      	it	eq
 800dede:	694b      	ldreq	r3, [r1, #20]
 800dee0:	600f      	str	r7, [r1, #0]
 800dee2:	bf18      	it	ne
 800dee4:	2300      	movne	r3, #0
 800dee6:	eba6 0807 	sub.w	r8, r6, r7
 800deea:	608b      	str	r3, [r1, #8]
 800deec:	f1b8 0f00 	cmp.w	r8, #0
 800def0:	dde9      	ble.n	800dec6 <__sflush_r+0xae>
 800def2:	6a21      	ldr	r1, [r4, #32]
 800def4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800def6:	4643      	mov	r3, r8
 800def8:	463a      	mov	r2, r7
 800defa:	4628      	mov	r0, r5
 800defc:	47b0      	blx	r6
 800defe:	2800      	cmp	r0, #0
 800df00:	dc08      	bgt.n	800df14 <__sflush_r+0xfc>
 800df02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df0a:	81a3      	strh	r3, [r4, #12]
 800df0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800df10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df14:	4407      	add	r7, r0
 800df16:	eba8 0800 	sub.w	r8, r8, r0
 800df1a:	e7e7      	b.n	800deec <__sflush_r+0xd4>
 800df1c:	dfbffffe 	.word	0xdfbffffe

0800df20 <_fflush_r>:
 800df20:	b538      	push	{r3, r4, r5, lr}
 800df22:	690b      	ldr	r3, [r1, #16]
 800df24:	4605      	mov	r5, r0
 800df26:	460c      	mov	r4, r1
 800df28:	b913      	cbnz	r3, 800df30 <_fflush_r+0x10>
 800df2a:	2500      	movs	r5, #0
 800df2c:	4628      	mov	r0, r5
 800df2e:	bd38      	pop	{r3, r4, r5, pc}
 800df30:	b118      	cbz	r0, 800df3a <_fflush_r+0x1a>
 800df32:	6a03      	ldr	r3, [r0, #32]
 800df34:	b90b      	cbnz	r3, 800df3a <_fflush_r+0x1a>
 800df36:	f7fd ff6f 	bl	800be18 <__sinit>
 800df3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d0f3      	beq.n	800df2a <_fflush_r+0xa>
 800df42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800df44:	07d0      	lsls	r0, r2, #31
 800df46:	d404      	bmi.n	800df52 <_fflush_r+0x32>
 800df48:	0599      	lsls	r1, r3, #22
 800df4a:	d402      	bmi.n	800df52 <_fflush_r+0x32>
 800df4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800df4e:	f7fe f9e8 	bl	800c322 <__retarget_lock_acquire_recursive>
 800df52:	4628      	mov	r0, r5
 800df54:	4621      	mov	r1, r4
 800df56:	f7ff ff5f 	bl	800de18 <__sflush_r>
 800df5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800df5c:	07da      	lsls	r2, r3, #31
 800df5e:	4605      	mov	r5, r0
 800df60:	d4e4      	bmi.n	800df2c <_fflush_r+0xc>
 800df62:	89a3      	ldrh	r3, [r4, #12]
 800df64:	059b      	lsls	r3, r3, #22
 800df66:	d4e1      	bmi.n	800df2c <_fflush_r+0xc>
 800df68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800df6a:	f7fe f9db 	bl	800c324 <__retarget_lock_release_recursive>
 800df6e:	e7dd      	b.n	800df2c <_fflush_r+0xc>

0800df70 <__swhatbuf_r>:
 800df70:	b570      	push	{r4, r5, r6, lr}
 800df72:	460c      	mov	r4, r1
 800df74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df78:	2900      	cmp	r1, #0
 800df7a:	b096      	sub	sp, #88	@ 0x58
 800df7c:	4615      	mov	r5, r2
 800df7e:	461e      	mov	r6, r3
 800df80:	da0d      	bge.n	800df9e <__swhatbuf_r+0x2e>
 800df82:	89a3      	ldrh	r3, [r4, #12]
 800df84:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800df88:	f04f 0100 	mov.w	r1, #0
 800df8c:	bf14      	ite	ne
 800df8e:	2340      	movne	r3, #64	@ 0x40
 800df90:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800df94:	2000      	movs	r0, #0
 800df96:	6031      	str	r1, [r6, #0]
 800df98:	602b      	str	r3, [r5, #0]
 800df9a:	b016      	add	sp, #88	@ 0x58
 800df9c:	bd70      	pop	{r4, r5, r6, pc}
 800df9e:	466a      	mov	r2, sp
 800dfa0:	f000 f862 	bl	800e068 <_fstat_r>
 800dfa4:	2800      	cmp	r0, #0
 800dfa6:	dbec      	blt.n	800df82 <__swhatbuf_r+0x12>
 800dfa8:	9901      	ldr	r1, [sp, #4]
 800dfaa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dfae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dfb2:	4259      	negs	r1, r3
 800dfb4:	4159      	adcs	r1, r3
 800dfb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dfba:	e7eb      	b.n	800df94 <__swhatbuf_r+0x24>

0800dfbc <__smakebuf_r>:
 800dfbc:	898b      	ldrh	r3, [r1, #12]
 800dfbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dfc0:	079d      	lsls	r5, r3, #30
 800dfc2:	4606      	mov	r6, r0
 800dfc4:	460c      	mov	r4, r1
 800dfc6:	d507      	bpl.n	800dfd8 <__smakebuf_r+0x1c>
 800dfc8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dfcc:	6023      	str	r3, [r4, #0]
 800dfce:	6123      	str	r3, [r4, #16]
 800dfd0:	2301      	movs	r3, #1
 800dfd2:	6163      	str	r3, [r4, #20]
 800dfd4:	b003      	add	sp, #12
 800dfd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfd8:	ab01      	add	r3, sp, #4
 800dfda:	466a      	mov	r2, sp
 800dfdc:	f7ff ffc8 	bl	800df70 <__swhatbuf_r>
 800dfe0:	9f00      	ldr	r7, [sp, #0]
 800dfe2:	4605      	mov	r5, r0
 800dfe4:	4639      	mov	r1, r7
 800dfe6:	4630      	mov	r0, r6
 800dfe8:	f7ff f86e 	bl	800d0c8 <_malloc_r>
 800dfec:	b948      	cbnz	r0, 800e002 <__smakebuf_r+0x46>
 800dfee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dff2:	059a      	lsls	r2, r3, #22
 800dff4:	d4ee      	bmi.n	800dfd4 <__smakebuf_r+0x18>
 800dff6:	f023 0303 	bic.w	r3, r3, #3
 800dffa:	f043 0302 	orr.w	r3, r3, #2
 800dffe:	81a3      	strh	r3, [r4, #12]
 800e000:	e7e2      	b.n	800dfc8 <__smakebuf_r+0xc>
 800e002:	89a3      	ldrh	r3, [r4, #12]
 800e004:	6020      	str	r0, [r4, #0]
 800e006:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e00a:	81a3      	strh	r3, [r4, #12]
 800e00c:	9b01      	ldr	r3, [sp, #4]
 800e00e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e012:	b15b      	cbz	r3, 800e02c <__smakebuf_r+0x70>
 800e014:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e018:	4630      	mov	r0, r6
 800e01a:	f000 f837 	bl	800e08c <_isatty_r>
 800e01e:	b128      	cbz	r0, 800e02c <__smakebuf_r+0x70>
 800e020:	89a3      	ldrh	r3, [r4, #12]
 800e022:	f023 0303 	bic.w	r3, r3, #3
 800e026:	f043 0301 	orr.w	r3, r3, #1
 800e02a:	81a3      	strh	r3, [r4, #12]
 800e02c:	89a3      	ldrh	r3, [r4, #12]
 800e02e:	431d      	orrs	r5, r3
 800e030:	81a5      	strh	r5, [r4, #12]
 800e032:	e7cf      	b.n	800dfd4 <__smakebuf_r+0x18>

0800e034 <memmove>:
 800e034:	4288      	cmp	r0, r1
 800e036:	b510      	push	{r4, lr}
 800e038:	eb01 0402 	add.w	r4, r1, r2
 800e03c:	d902      	bls.n	800e044 <memmove+0x10>
 800e03e:	4284      	cmp	r4, r0
 800e040:	4623      	mov	r3, r4
 800e042:	d807      	bhi.n	800e054 <memmove+0x20>
 800e044:	1e43      	subs	r3, r0, #1
 800e046:	42a1      	cmp	r1, r4
 800e048:	d008      	beq.n	800e05c <memmove+0x28>
 800e04a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e04e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e052:	e7f8      	b.n	800e046 <memmove+0x12>
 800e054:	4402      	add	r2, r0
 800e056:	4601      	mov	r1, r0
 800e058:	428a      	cmp	r2, r1
 800e05a:	d100      	bne.n	800e05e <memmove+0x2a>
 800e05c:	bd10      	pop	{r4, pc}
 800e05e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e062:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e066:	e7f7      	b.n	800e058 <memmove+0x24>

0800e068 <_fstat_r>:
 800e068:	b538      	push	{r3, r4, r5, lr}
 800e06a:	4d07      	ldr	r5, [pc, #28]	@ (800e088 <_fstat_r+0x20>)
 800e06c:	2300      	movs	r3, #0
 800e06e:	4604      	mov	r4, r0
 800e070:	4608      	mov	r0, r1
 800e072:	4611      	mov	r1, r2
 800e074:	602b      	str	r3, [r5, #0]
 800e076:	f7f4 ff19 	bl	8002eac <_fstat>
 800e07a:	1c43      	adds	r3, r0, #1
 800e07c:	d102      	bne.n	800e084 <_fstat_r+0x1c>
 800e07e:	682b      	ldr	r3, [r5, #0]
 800e080:	b103      	cbz	r3, 800e084 <_fstat_r+0x1c>
 800e082:	6023      	str	r3, [r4, #0]
 800e084:	bd38      	pop	{r3, r4, r5, pc}
 800e086:	bf00      	nop
 800e088:	20005080 	.word	0x20005080

0800e08c <_isatty_r>:
 800e08c:	b538      	push	{r3, r4, r5, lr}
 800e08e:	4d06      	ldr	r5, [pc, #24]	@ (800e0a8 <_isatty_r+0x1c>)
 800e090:	2300      	movs	r3, #0
 800e092:	4604      	mov	r4, r0
 800e094:	4608      	mov	r0, r1
 800e096:	602b      	str	r3, [r5, #0]
 800e098:	f7f4 ff18 	bl	8002ecc <_isatty>
 800e09c:	1c43      	adds	r3, r0, #1
 800e09e:	d102      	bne.n	800e0a6 <_isatty_r+0x1a>
 800e0a0:	682b      	ldr	r3, [r5, #0]
 800e0a2:	b103      	cbz	r3, 800e0a6 <_isatty_r+0x1a>
 800e0a4:	6023      	str	r3, [r4, #0]
 800e0a6:	bd38      	pop	{r3, r4, r5, pc}
 800e0a8:	20005080 	.word	0x20005080

0800e0ac <_sbrk_r>:
 800e0ac:	b538      	push	{r3, r4, r5, lr}
 800e0ae:	4d06      	ldr	r5, [pc, #24]	@ (800e0c8 <_sbrk_r+0x1c>)
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	4604      	mov	r4, r0
 800e0b4:	4608      	mov	r0, r1
 800e0b6:	602b      	str	r3, [r5, #0]
 800e0b8:	f7f4 ff20 	bl	8002efc <_sbrk>
 800e0bc:	1c43      	adds	r3, r0, #1
 800e0be:	d102      	bne.n	800e0c6 <_sbrk_r+0x1a>
 800e0c0:	682b      	ldr	r3, [r5, #0]
 800e0c2:	b103      	cbz	r3, 800e0c6 <_sbrk_r+0x1a>
 800e0c4:	6023      	str	r3, [r4, #0]
 800e0c6:	bd38      	pop	{r3, r4, r5, pc}
 800e0c8:	20005080 	.word	0x20005080

0800e0cc <__assert_func>:
 800e0cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e0ce:	4614      	mov	r4, r2
 800e0d0:	461a      	mov	r2, r3
 800e0d2:	4b09      	ldr	r3, [pc, #36]	@ (800e0f8 <__assert_func+0x2c>)
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	4605      	mov	r5, r0
 800e0d8:	68d8      	ldr	r0, [r3, #12]
 800e0da:	b954      	cbnz	r4, 800e0f2 <__assert_func+0x26>
 800e0dc:	4b07      	ldr	r3, [pc, #28]	@ (800e0fc <__assert_func+0x30>)
 800e0de:	461c      	mov	r4, r3
 800e0e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e0e4:	9100      	str	r1, [sp, #0]
 800e0e6:	462b      	mov	r3, r5
 800e0e8:	4905      	ldr	r1, [pc, #20]	@ (800e100 <__assert_func+0x34>)
 800e0ea:	f000 f86f 	bl	800e1cc <fiprintf>
 800e0ee:	f000 f87f 	bl	800e1f0 <abort>
 800e0f2:	4b04      	ldr	r3, [pc, #16]	@ (800e104 <__assert_func+0x38>)
 800e0f4:	e7f4      	b.n	800e0e0 <__assert_func+0x14>
 800e0f6:	bf00      	nop
 800e0f8:	2000003c 	.word	0x2000003c
 800e0fc:	0800ea4e 	.word	0x0800ea4e
 800e100:	0800ea20 	.word	0x0800ea20
 800e104:	0800ea13 	.word	0x0800ea13

0800e108 <_calloc_r>:
 800e108:	b570      	push	{r4, r5, r6, lr}
 800e10a:	fba1 5402 	umull	r5, r4, r1, r2
 800e10e:	b93c      	cbnz	r4, 800e120 <_calloc_r+0x18>
 800e110:	4629      	mov	r1, r5
 800e112:	f7fe ffd9 	bl	800d0c8 <_malloc_r>
 800e116:	4606      	mov	r6, r0
 800e118:	b928      	cbnz	r0, 800e126 <_calloc_r+0x1e>
 800e11a:	2600      	movs	r6, #0
 800e11c:	4630      	mov	r0, r6
 800e11e:	bd70      	pop	{r4, r5, r6, pc}
 800e120:	220c      	movs	r2, #12
 800e122:	6002      	str	r2, [r0, #0]
 800e124:	e7f9      	b.n	800e11a <_calloc_r+0x12>
 800e126:	462a      	mov	r2, r5
 800e128:	4621      	mov	r1, r4
 800e12a:	f7fe f827 	bl	800c17c <memset>
 800e12e:	e7f5      	b.n	800e11c <_calloc_r+0x14>

0800e130 <__ascii_mbtowc>:
 800e130:	b082      	sub	sp, #8
 800e132:	b901      	cbnz	r1, 800e136 <__ascii_mbtowc+0x6>
 800e134:	a901      	add	r1, sp, #4
 800e136:	b142      	cbz	r2, 800e14a <__ascii_mbtowc+0x1a>
 800e138:	b14b      	cbz	r3, 800e14e <__ascii_mbtowc+0x1e>
 800e13a:	7813      	ldrb	r3, [r2, #0]
 800e13c:	600b      	str	r3, [r1, #0]
 800e13e:	7812      	ldrb	r2, [r2, #0]
 800e140:	1e10      	subs	r0, r2, #0
 800e142:	bf18      	it	ne
 800e144:	2001      	movne	r0, #1
 800e146:	b002      	add	sp, #8
 800e148:	4770      	bx	lr
 800e14a:	4610      	mov	r0, r2
 800e14c:	e7fb      	b.n	800e146 <__ascii_mbtowc+0x16>
 800e14e:	f06f 0001 	mvn.w	r0, #1
 800e152:	e7f8      	b.n	800e146 <__ascii_mbtowc+0x16>

0800e154 <_realloc_r>:
 800e154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e158:	4680      	mov	r8, r0
 800e15a:	4615      	mov	r5, r2
 800e15c:	460c      	mov	r4, r1
 800e15e:	b921      	cbnz	r1, 800e16a <_realloc_r+0x16>
 800e160:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e164:	4611      	mov	r1, r2
 800e166:	f7fe bfaf 	b.w	800d0c8 <_malloc_r>
 800e16a:	b92a      	cbnz	r2, 800e178 <_realloc_r+0x24>
 800e16c:	f7fe ff38 	bl	800cfe0 <_free_r>
 800e170:	2400      	movs	r4, #0
 800e172:	4620      	mov	r0, r4
 800e174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e178:	f000 f841 	bl	800e1fe <_malloc_usable_size_r>
 800e17c:	4285      	cmp	r5, r0
 800e17e:	4606      	mov	r6, r0
 800e180:	d802      	bhi.n	800e188 <_realloc_r+0x34>
 800e182:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e186:	d8f4      	bhi.n	800e172 <_realloc_r+0x1e>
 800e188:	4629      	mov	r1, r5
 800e18a:	4640      	mov	r0, r8
 800e18c:	f7fe ff9c 	bl	800d0c8 <_malloc_r>
 800e190:	4607      	mov	r7, r0
 800e192:	2800      	cmp	r0, #0
 800e194:	d0ec      	beq.n	800e170 <_realloc_r+0x1c>
 800e196:	42b5      	cmp	r5, r6
 800e198:	462a      	mov	r2, r5
 800e19a:	4621      	mov	r1, r4
 800e19c:	bf28      	it	cs
 800e19e:	4632      	movcs	r2, r6
 800e1a0:	f7fe f8c1 	bl	800c326 <memcpy>
 800e1a4:	4621      	mov	r1, r4
 800e1a6:	4640      	mov	r0, r8
 800e1a8:	f7fe ff1a 	bl	800cfe0 <_free_r>
 800e1ac:	463c      	mov	r4, r7
 800e1ae:	e7e0      	b.n	800e172 <_realloc_r+0x1e>

0800e1b0 <__ascii_wctomb>:
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	4608      	mov	r0, r1
 800e1b4:	b141      	cbz	r1, 800e1c8 <__ascii_wctomb+0x18>
 800e1b6:	2aff      	cmp	r2, #255	@ 0xff
 800e1b8:	d904      	bls.n	800e1c4 <__ascii_wctomb+0x14>
 800e1ba:	228a      	movs	r2, #138	@ 0x8a
 800e1bc:	601a      	str	r2, [r3, #0]
 800e1be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e1c2:	4770      	bx	lr
 800e1c4:	700a      	strb	r2, [r1, #0]
 800e1c6:	2001      	movs	r0, #1
 800e1c8:	4770      	bx	lr
	...

0800e1cc <fiprintf>:
 800e1cc:	b40e      	push	{r1, r2, r3}
 800e1ce:	b503      	push	{r0, r1, lr}
 800e1d0:	4601      	mov	r1, r0
 800e1d2:	ab03      	add	r3, sp, #12
 800e1d4:	4805      	ldr	r0, [pc, #20]	@ (800e1ec <fiprintf+0x20>)
 800e1d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1da:	6800      	ldr	r0, [r0, #0]
 800e1dc:	9301      	str	r3, [sp, #4]
 800e1de:	f7ff fd03 	bl	800dbe8 <_vfiprintf_r>
 800e1e2:	b002      	add	sp, #8
 800e1e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e1e8:	b003      	add	sp, #12
 800e1ea:	4770      	bx	lr
 800e1ec:	2000003c 	.word	0x2000003c

0800e1f0 <abort>:
 800e1f0:	b508      	push	{r3, lr}
 800e1f2:	2006      	movs	r0, #6
 800e1f4:	f000 f834 	bl	800e260 <raise>
 800e1f8:	2001      	movs	r0, #1
 800e1fa:	f7f4 fe07 	bl	8002e0c <_exit>

0800e1fe <_malloc_usable_size_r>:
 800e1fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e202:	1f18      	subs	r0, r3, #4
 800e204:	2b00      	cmp	r3, #0
 800e206:	bfbc      	itt	lt
 800e208:	580b      	ldrlt	r3, [r1, r0]
 800e20a:	18c0      	addlt	r0, r0, r3
 800e20c:	4770      	bx	lr

0800e20e <_raise_r>:
 800e20e:	291f      	cmp	r1, #31
 800e210:	b538      	push	{r3, r4, r5, lr}
 800e212:	4605      	mov	r5, r0
 800e214:	460c      	mov	r4, r1
 800e216:	d904      	bls.n	800e222 <_raise_r+0x14>
 800e218:	2316      	movs	r3, #22
 800e21a:	6003      	str	r3, [r0, #0]
 800e21c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e220:	bd38      	pop	{r3, r4, r5, pc}
 800e222:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e224:	b112      	cbz	r2, 800e22c <_raise_r+0x1e>
 800e226:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e22a:	b94b      	cbnz	r3, 800e240 <_raise_r+0x32>
 800e22c:	4628      	mov	r0, r5
 800e22e:	f000 f831 	bl	800e294 <_getpid_r>
 800e232:	4622      	mov	r2, r4
 800e234:	4601      	mov	r1, r0
 800e236:	4628      	mov	r0, r5
 800e238:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e23c:	f000 b818 	b.w	800e270 <_kill_r>
 800e240:	2b01      	cmp	r3, #1
 800e242:	d00a      	beq.n	800e25a <_raise_r+0x4c>
 800e244:	1c59      	adds	r1, r3, #1
 800e246:	d103      	bne.n	800e250 <_raise_r+0x42>
 800e248:	2316      	movs	r3, #22
 800e24a:	6003      	str	r3, [r0, #0]
 800e24c:	2001      	movs	r0, #1
 800e24e:	e7e7      	b.n	800e220 <_raise_r+0x12>
 800e250:	2100      	movs	r1, #0
 800e252:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e256:	4620      	mov	r0, r4
 800e258:	4798      	blx	r3
 800e25a:	2000      	movs	r0, #0
 800e25c:	e7e0      	b.n	800e220 <_raise_r+0x12>
	...

0800e260 <raise>:
 800e260:	4b02      	ldr	r3, [pc, #8]	@ (800e26c <raise+0xc>)
 800e262:	4601      	mov	r1, r0
 800e264:	6818      	ldr	r0, [r3, #0]
 800e266:	f7ff bfd2 	b.w	800e20e <_raise_r>
 800e26a:	bf00      	nop
 800e26c:	2000003c 	.word	0x2000003c

0800e270 <_kill_r>:
 800e270:	b538      	push	{r3, r4, r5, lr}
 800e272:	4d07      	ldr	r5, [pc, #28]	@ (800e290 <_kill_r+0x20>)
 800e274:	2300      	movs	r3, #0
 800e276:	4604      	mov	r4, r0
 800e278:	4608      	mov	r0, r1
 800e27a:	4611      	mov	r1, r2
 800e27c:	602b      	str	r3, [r5, #0]
 800e27e:	f7f4 fdb5 	bl	8002dec <_kill>
 800e282:	1c43      	adds	r3, r0, #1
 800e284:	d102      	bne.n	800e28c <_kill_r+0x1c>
 800e286:	682b      	ldr	r3, [r5, #0]
 800e288:	b103      	cbz	r3, 800e28c <_kill_r+0x1c>
 800e28a:	6023      	str	r3, [r4, #0]
 800e28c:	bd38      	pop	{r3, r4, r5, pc}
 800e28e:	bf00      	nop
 800e290:	20005080 	.word	0x20005080

0800e294 <_getpid_r>:
 800e294:	f7f4 bda2 	b.w	8002ddc <_getpid>

0800e298 <_init>:
 800e298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e29a:	bf00      	nop
 800e29c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e29e:	bc08      	pop	{r3}
 800e2a0:	469e      	mov	lr, r3
 800e2a2:	4770      	bx	lr

0800e2a4 <_fini>:
 800e2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2a6:	bf00      	nop
 800e2a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2aa:	bc08      	pop	{r3}
 800e2ac:	469e      	mov	lr, r3
 800e2ae:	4770      	bx	lr
