
RCSailingEEBE_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011494  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a4  08011638  08011638  00012638  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011cdc  08011cdc  000132b8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08011cdc  08011cdc  00012cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011ce4  08011ce4  000132b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011ce4  08011ce4  00012ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011ce8  08011ce8  00012ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002b8  20000000  08011cec  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005004  200002b8  08011fa4  000132b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200052bc  08011fa4  000132bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000132b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000241e8  00000000  00000000  000132e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005218  00000000  00000000  000374d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c88  00000000  00000000  0003c6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001627  00000000  00000000  0003e370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001db98  00000000  00000000  0003f997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024e6e  00000000  00000000  0005d52f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aa9c7  00000000  00000000  0008239d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012cd64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008c8c  00000000  00000000  0012cda8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00135a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002b8 	.word	0x200002b8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801161c 	.word	0x0801161c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002bc 	.word	0x200002bc
 80001dc:	0801161c 	.word	0x0801161c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9be 	b.w	800102c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	468e      	mov	lr, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	4688      	mov	r8, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d962      	bls.n	8000e10 <__udivmoddi4+0xdc>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	b14e      	cbz	r6, 8000d64 <__udivmoddi4+0x30>
 8000d50:	f1c6 0320 	rsb	r3, r6, #32
 8000d54:	fa01 f806 	lsl.w	r8, r1, r6
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	40b7      	lsls	r7, r6
 8000d5e:	ea43 0808 	orr.w	r8, r3, r8
 8000d62:	40b4      	lsls	r4, r6
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d88:	f080 80ea 	bcs.w	8000f60 <__udivmoddi4+0x22c>
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f240 80e7 	bls.w	8000f60 <__udivmoddi4+0x22c>
 8000d92:	3902      	subs	r1, #2
 8000d94:	443b      	add	r3, r7
 8000d96:	1a9a      	subs	r2, r3, r2
 8000d98:	b2a3      	uxth	r3, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000daa:	459c      	cmp	ip, r3
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0x8e>
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db4:	f080 80d6 	bcs.w	8000f64 <__udivmoddi4+0x230>
 8000db8:	459c      	cmp	ip, r3
 8000dba:	f240 80d3 	bls.w	8000f64 <__udivmoddi4+0x230>
 8000dbe:	443b      	add	r3, r7
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc6:	eba3 030c 	sub.w	r3, r3, ip
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40f3      	lsrs	r3, r6
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xb6>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb0>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x14c>
 8000df2:	4573      	cmp	r3, lr
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xc8>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 8105 	bhi.w	8001006 <__udivmoddi4+0x2d2>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	4690      	mov	r8, r2
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e5      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e0e:	e7e2      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f000 8090 	beq.w	8000f36 <__udivmoddi4+0x202>
 8000e16:	fab2 f682 	clz	r6, r2
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	f040 80a4 	bne.w	8000f68 <__udivmoddi4+0x234>
 8000e20:	1a8a      	subs	r2, r1, r2
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	b280      	uxth	r0, r0
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x11e>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e48:	d202      	bcs.n	8000e50 <__udivmoddi4+0x11c>
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	f200 80e0 	bhi.w	8001010 <__udivmoddi4+0x2dc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e60:	fb02 f404 	mul.w	r4, r2, r4
 8000e64:	429c      	cmp	r4, r3
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x144>
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x142>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f200 80ca 	bhi.w	800100a <__udivmoddi4+0x2d6>
 8000e76:	4602      	mov	r2, r0
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e90:	fa20 f306 	lsr.w	r3, r0, r6
 8000e94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	fa1f fc87 	uxth.w	ip, r7
 8000ea6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000eb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x1a0>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ec6:	f080 809c 	bcs.w	8001002 <__udivmoddi4+0x2ce>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f240 8099 	bls.w	8001002 <__udivmoddi4+0x2ce>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	eba4 040e 	sub.w	r4, r4, lr
 8000ed8:	fa1f fe83 	uxth.w	lr, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ee8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eec:	45a4      	cmp	ip, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1ce>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ef6:	f080 8082 	bcs.w	8000ffe <__udivmoddi4+0x2ca>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d97f      	bls.n	8000ffe <__udivmoddi4+0x2ca>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f06:	eba4 040c 	sub.w	r4, r4, ip
 8000f0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f0e:	4564      	cmp	r4, ip
 8000f10:	4673      	mov	r3, lr
 8000f12:	46e1      	mov	r9, ip
 8000f14:	d362      	bcc.n	8000fdc <__udivmoddi4+0x2a8>
 8000f16:	d05f      	beq.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x1fe>
 8000f1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	fa22 f301 	lsr.w	r3, r2, r1
 8000f2a:	431e      	orrs	r6, r3
 8000f2c:	40cc      	lsrs	r4, r1
 8000f2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f32:	2100      	movs	r1, #0
 8000f34:	e74f      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000f36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f3a:	0c01      	lsrs	r1, r0, #16
 8000f3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f40:	b280      	uxth	r0, r0
 8000f42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f46:	463b      	mov	r3, r7
 8000f48:	4638      	mov	r0, r7
 8000f4a:	463c      	mov	r4, r7
 8000f4c:	46b8      	mov	r8, r7
 8000f4e:	46be      	mov	lr, r7
 8000f50:	2620      	movs	r6, #32
 8000f52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f56:	eba2 0208 	sub.w	r2, r2, r8
 8000f5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f5e:	e766      	b.n	8000e2e <__udivmoddi4+0xfa>
 8000f60:	4601      	mov	r1, r0
 8000f62:	e718      	b.n	8000d96 <__udivmoddi4+0x62>
 8000f64:	4610      	mov	r0, r2
 8000f66:	e72c      	b.n	8000dc2 <__udivmoddi4+0x8e>
 8000f68:	f1c6 0220 	rsb	r2, r6, #32
 8000f6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f70:	40b7      	lsls	r7, r6
 8000f72:	40b1      	lsls	r1, r6
 8000f74:	fa20 f202 	lsr.w	r2, r0, r2
 8000f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f82:	b2bc      	uxth	r4, r7
 8000f84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8e:	fb08 f904 	mul.w	r9, r8, r4
 8000f92:	40b0      	lsls	r0, r6
 8000f94:	4589      	cmp	r9, r1
 8000f96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	d93e      	bls.n	800101c <__udivmoddi4+0x2e8>
 8000f9e:	1879      	adds	r1, r7, r1
 8000fa0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fa4:	d201      	bcs.n	8000faa <__udivmoddi4+0x276>
 8000fa6:	4589      	cmp	r9, r1
 8000fa8:	d81f      	bhi.n	8000fea <__udivmoddi4+0x2b6>
 8000faa:	eba1 0109 	sub.w	r1, r1, r9
 8000fae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb2:	fb09 f804 	mul.w	r8, r9, r4
 8000fb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d229      	bcs.n	8001018 <__udivmoddi4+0x2e4>
 8000fc4:	18ba      	adds	r2, r7, r2
 8000fc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fca:	d2c4      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fcc:	4542      	cmp	r2, r8
 8000fce:	d2c2      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd4:	443a      	add	r2, r7
 8000fd6:	e7be      	b.n	8000f56 <__udivmoddi4+0x222>
 8000fd8:	45f0      	cmp	r8, lr
 8000fda:	d29d      	bcs.n	8000f18 <__udivmoddi4+0x1e4>
 8000fdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fe0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	46e1      	mov	r9, ip
 8000fe8:	e796      	b.n	8000f18 <__udivmoddi4+0x1e4>
 8000fea:	eba7 0909 	sub.w	r9, r7, r9
 8000fee:	4449      	add	r1, r9
 8000ff0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	e7db      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000ffe:	4673      	mov	r3, lr
 8001000:	e77f      	b.n	8000f02 <__udivmoddi4+0x1ce>
 8001002:	4650      	mov	r0, sl
 8001004:	e766      	b.n	8000ed4 <__udivmoddi4+0x1a0>
 8001006:	4608      	mov	r0, r1
 8001008:	e6fd      	b.n	8000e06 <__udivmoddi4+0xd2>
 800100a:	443b      	add	r3, r7
 800100c:	3a02      	subs	r2, #2
 800100e:	e733      	b.n	8000e78 <__udivmoddi4+0x144>
 8001010:	f1ac 0c02 	sub.w	ip, ip, #2
 8001014:	443b      	add	r3, r7
 8001016:	e71c      	b.n	8000e52 <__udivmoddi4+0x11e>
 8001018:	4649      	mov	r1, r9
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x222>
 800101c:	eba1 0109 	sub.w	r1, r1, r9
 8001020:	46c4      	mov	ip, r8
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fb09 f804 	mul.w	r8, r9, r4
 800102a:	e7c4      	b.n	8000fb6 <__udivmoddi4+0x282>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <adc_read>:

float extra2Gain = 1.0f;
float extra2Offset = 0.0f;
AdcData_t adcDataSent;

void adc_read(void) {
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
    // Start ADC conversion using DMA
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_raw_readings, 4);
 8001034:	2204      	movs	r2, #4
 8001036:	492e      	ldr	r1, [pc, #184]	@ (80010f0 <adc_read+0xc0>)
 8001038:	482e      	ldr	r0, [pc, #184]	@ (80010f4 <adc_read+0xc4>)
 800103a:	f003 fc1b 	bl	8004874 <HAL_ADC_Start_DMA>

    // Create a struct to hold the processed ADC data
    adcDataSent.windDirection = ((float)adc_raw_readings[0] * windDirectionGain) - windDirectionOffset;
 800103e:	4b2c      	ldr	r3, [pc, #176]	@ (80010f0 <adc_read+0xc0>)
 8001040:	881b      	ldrh	r3, [r3, #0]
 8001042:	b29b      	uxth	r3, r3
 8001044:	ee07 3a90 	vmov	s15, r3
 8001048:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800104c:	4b2a      	ldr	r3, [pc, #168]	@ (80010f8 <adc_read+0xc8>)
 800104e:	edd3 7a00 	vldr	s15, [r3]
 8001052:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001056:	4b29      	ldr	r3, [pc, #164]	@ (80010fc <adc_read+0xcc>)
 8001058:	edd3 7a00 	vldr	s15, [r3]
 800105c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001060:	4b27      	ldr	r3, [pc, #156]	@ (8001100 <adc_read+0xd0>)
 8001062:	edc3 7a00 	vstr	s15, [r3]
    adcDataSent.batteryVoltage = ((float)adc_raw_readings[1] * batteryVoltageGain) - batteryVoltageOffset;
 8001066:	4b22      	ldr	r3, [pc, #136]	@ (80010f0 <adc_read+0xc0>)
 8001068:	885b      	ldrh	r3, [r3, #2]
 800106a:	b29b      	uxth	r3, r3
 800106c:	ee07 3a90 	vmov	s15, r3
 8001070:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001074:	4b23      	ldr	r3, [pc, #140]	@ (8001104 <adc_read+0xd4>)
 8001076:	edd3 7a00 	vldr	s15, [r3]
 800107a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800107e:	4b22      	ldr	r3, [pc, #136]	@ (8001108 <adc_read+0xd8>)
 8001080:	edd3 7a00 	vldr	s15, [r3]
 8001084:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001088:	4b1d      	ldr	r3, [pc, #116]	@ (8001100 <adc_read+0xd0>)
 800108a:	edc3 7a01 	vstr	s15, [r3, #4]
    adcDataSent.extra1 = ((float)adc_raw_readings[2] * extra1Gain) - extra1Offset;
 800108e:	4b18      	ldr	r3, [pc, #96]	@ (80010f0 <adc_read+0xc0>)
 8001090:	889b      	ldrh	r3, [r3, #4]
 8001092:	b29b      	uxth	r3, r3
 8001094:	ee07 3a90 	vmov	s15, r3
 8001098:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800109c:	4b1b      	ldr	r3, [pc, #108]	@ (800110c <adc_read+0xdc>)
 800109e:	edd3 7a00 	vldr	s15, [r3]
 80010a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001110 <adc_read+0xe0>)
 80010a8:	edd3 7a00 	vldr	s15, [r3]
 80010ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010b0:	4b13      	ldr	r3, [pc, #76]	@ (8001100 <adc_read+0xd0>)
 80010b2:	edc3 7a02 	vstr	s15, [r3, #8]
    adcDataSent.extra2 = ((float)adc_raw_readings[3] * extra2Gain) - extra2Offset;
 80010b6:	4b0e      	ldr	r3, [pc, #56]	@ (80010f0 <adc_read+0xc0>)
 80010b8:	88db      	ldrh	r3, [r3, #6]
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	ee07 3a90 	vmov	s15, r3
 80010c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010c4:	4b13      	ldr	r3, [pc, #76]	@ (8001114 <adc_read+0xe4>)
 80010c6:	edd3 7a00 	vldr	s15, [r3]
 80010ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010ce:	4b12      	ldr	r3, [pc, #72]	@ (8001118 <adc_read+0xe8>)
 80010d0:	edd3 7a00 	vldr	s15, [r3]
 80010d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010d8:	4b09      	ldr	r3, [pc, #36]	@ (8001100 <adc_read+0xd0>)
 80010da:	edc3 7a03 	vstr	s15, [r3, #12]

    // Send the struct to the ADC queue, overwriting previous value if full
    osMessageQueuePut(adcQueueHandle, &adcDataSent, 0, 0);
 80010de:	4b0f      	ldr	r3, [pc, #60]	@ (800111c <adc_read+0xec>)
 80010e0:	6818      	ldr	r0, [r3, #0]
 80010e2:	2300      	movs	r3, #0
 80010e4:	2200      	movs	r2, #0
 80010e6:	4906      	ldr	r1, [pc, #24]	@ (8001100 <adc_read+0xd0>)
 80010e8:	f008 fe3c 	bl	8009d64 <osMessageQueuePut>
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	200002d4 	.word	0x200002d4
 80010f4:	2000040c 	.word	0x2000040c
 80010f8:	20000000 	.word	0x20000000
 80010fc:	200002dc 	.word	0x200002dc
 8001100:	200002ec 	.word	0x200002ec
 8001104:	20000004 	.word	0x20000004
 8001108:	200002e0 	.word	0x200002e0
 800110c:	20000008 	.word	0x20000008
 8001110:	200002e4 	.word	0x200002e4
 8001114:	2000000c 	.word	0x2000000c
 8001118:	200002e8 	.word	0x200002e8
 800111c:	200004e0 	.word	0x200004e0

08001120 <map_float>:

/* External queue handle (make sure this is defined elsewhere) */
extern osMessageQueueId_t radioQueueHandle;

/* Simple float mapping function */
float map_float(float x, float in_min, float in_max, float out_min, float out_max) {
 8001120:	b480      	push	{r7}
 8001122:	b087      	sub	sp, #28
 8001124:	af00      	add	r7, sp, #0
 8001126:	ed87 0a05 	vstr	s0, [r7, #20]
 800112a:	edc7 0a04 	vstr	s1, [r7, #16]
 800112e:	ed87 1a03 	vstr	s2, [r7, #12]
 8001132:	edc7 1a02 	vstr	s3, [r7, #8]
 8001136:	ed87 2a01 	vstr	s4, [r7, #4]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800113a:	ed97 7a05 	vldr	s14, [r7, #20]
 800113e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001142:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001146:	edd7 6a01 	vldr	s13, [r7, #4]
 800114a:	edd7 7a02 	vldr	s15, [r7, #8]
 800114e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001152:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001156:	ed97 7a03 	vldr	s14, [r7, #12]
 800115a:	edd7 7a04 	vldr	s15, [r7, #16]
 800115e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001166:	edd7 7a02 	vldr	s15, [r7, #8]
 800116a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800116e:	eeb0 0a67 	vmov.f32	s0, s15
 8001172:	371c      	adds	r7, #28
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <handleMappingMode>:

/* Function to handle mapping mode */
void handleMappingMode(void) {
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
    if (radioDataReceived.ch1 < mappingBoundaries.ch1_min && radioDataReceived.ch1 > MIN_VALID_PULSE_US)
 8001180:	4b44      	ldr	r3, [pc, #272]	@ (8001294 <handleMappingMode+0x118>)
 8001182:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001186:	461a      	mov	r2, r3
 8001188:	4b43      	ldr	r3, [pc, #268]	@ (8001298 <handleMappingMode+0x11c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	429a      	cmp	r2, r3
 800118e:	d20a      	bcs.n	80011a6 <handleMappingMode+0x2a>
 8001190:	4b40      	ldr	r3, [pc, #256]	@ (8001294 <handleMappingMode+0x118>)
 8001192:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001196:	2b64      	cmp	r3, #100	@ 0x64
 8001198:	dd05      	ble.n	80011a6 <handleMappingMode+0x2a>
        mappingBoundaries.ch1_min = radioDataReceived.ch1;
 800119a:	4b3e      	ldr	r3, [pc, #248]	@ (8001294 <handleMappingMode+0x118>)
 800119c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001298 <handleMappingMode+0x11c>)
 80011a4:	601a      	str	r2, [r3, #0]
    if (radioDataReceived.ch1 > mappingBoundaries.ch1_max)
 80011a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001294 <handleMappingMode+0x118>)
 80011a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001298 <handleMappingMode+0x11c>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d905      	bls.n	80011c2 <handleMappingMode+0x46>
        mappingBoundaries.ch1_max = radioDataReceived.ch1;
 80011b6:	4b37      	ldr	r3, [pc, #220]	@ (8001294 <handleMappingMode+0x118>)
 80011b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011bc:	461a      	mov	r2, r3
 80011be:	4b36      	ldr	r3, [pc, #216]	@ (8001298 <handleMappingMode+0x11c>)
 80011c0:	605a      	str	r2, [r3, #4]

    if (radioDataReceived.ch2 < mappingBoundaries.ch2_min && radioDataReceived.ch2 > MIN_VALID_PULSE_US)
 80011c2:	4b34      	ldr	r3, [pc, #208]	@ (8001294 <handleMappingMode+0x118>)
 80011c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b33      	ldr	r3, [pc, #204]	@ (8001298 <handleMappingMode+0x11c>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d20a      	bcs.n	80011e8 <handleMappingMode+0x6c>
 80011d2:	4b30      	ldr	r3, [pc, #192]	@ (8001294 <handleMappingMode+0x118>)
 80011d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011d8:	2b64      	cmp	r3, #100	@ 0x64
 80011da:	dd05      	ble.n	80011e8 <handleMappingMode+0x6c>
        mappingBoundaries.ch2_min = radioDataReceived.ch2;
 80011dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001294 <handleMappingMode+0x118>)
 80011de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011e2:	461a      	mov	r2, r3
 80011e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001298 <handleMappingMode+0x11c>)
 80011e6:	609a      	str	r2, [r3, #8]
    if (radioDataReceived.ch2 > mappingBoundaries.ch2_max)
 80011e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001294 <handleMappingMode+0x118>)
 80011ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011ee:	461a      	mov	r2, r3
 80011f0:	4b29      	ldr	r3, [pc, #164]	@ (8001298 <handleMappingMode+0x11c>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d905      	bls.n	8001204 <handleMappingMode+0x88>
        mappingBoundaries.ch2_max = radioDataReceived.ch2;
 80011f8:	4b26      	ldr	r3, [pc, #152]	@ (8001294 <handleMappingMode+0x118>)
 80011fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011fe:	461a      	mov	r2, r3
 8001200:	4b25      	ldr	r3, [pc, #148]	@ (8001298 <handleMappingMode+0x11c>)
 8001202:	60da      	str	r2, [r3, #12]

    if (radioDataReceived.ch3 < mappingBoundaries.ch3_min && radioDataReceived.ch3 > MIN_VALID_PULSE_US)
 8001204:	4b23      	ldr	r3, [pc, #140]	@ (8001294 <handleMappingMode+0x118>)
 8001206:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800120a:	461a      	mov	r2, r3
 800120c:	4b22      	ldr	r3, [pc, #136]	@ (8001298 <handleMappingMode+0x11c>)
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	429a      	cmp	r2, r3
 8001212:	d20a      	bcs.n	800122a <handleMappingMode+0xae>
 8001214:	4b1f      	ldr	r3, [pc, #124]	@ (8001294 <handleMappingMode+0x118>)
 8001216:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800121a:	2b64      	cmp	r3, #100	@ 0x64
 800121c:	dd05      	ble.n	800122a <handleMappingMode+0xae>
        mappingBoundaries.ch3_min = radioDataReceived.ch3;
 800121e:	4b1d      	ldr	r3, [pc, #116]	@ (8001294 <handleMappingMode+0x118>)
 8001220:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001224:	461a      	mov	r2, r3
 8001226:	4b1c      	ldr	r3, [pc, #112]	@ (8001298 <handleMappingMode+0x11c>)
 8001228:	611a      	str	r2, [r3, #16]
    if (radioDataReceived.ch3 > mappingBoundaries.ch3_max)
 800122a:	4b1a      	ldr	r3, [pc, #104]	@ (8001294 <handleMappingMode+0x118>)
 800122c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001230:	461a      	mov	r2, r3
 8001232:	4b19      	ldr	r3, [pc, #100]	@ (8001298 <handleMappingMode+0x11c>)
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	429a      	cmp	r2, r3
 8001238:	d905      	bls.n	8001246 <handleMappingMode+0xca>
        mappingBoundaries.ch3_max = radioDataReceived.ch3;
 800123a:	4b16      	ldr	r3, [pc, #88]	@ (8001294 <handleMappingMode+0x118>)
 800123c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001240:	461a      	mov	r2, r3
 8001242:	4b15      	ldr	r3, [pc, #84]	@ (8001298 <handleMappingMode+0x11c>)
 8001244:	615a      	str	r2, [r3, #20]

    if (radioDataReceived.ch4 < mappingBoundaries.ch4_min && radioDataReceived.ch4 > MIN_VALID_PULSE_US)
 8001246:	4b13      	ldr	r3, [pc, #76]	@ (8001294 <handleMappingMode+0x118>)
 8001248:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800124c:	461a      	mov	r2, r3
 800124e:	4b12      	ldr	r3, [pc, #72]	@ (8001298 <handleMappingMode+0x11c>)
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	429a      	cmp	r2, r3
 8001254:	d20a      	bcs.n	800126c <handleMappingMode+0xf0>
 8001256:	4b0f      	ldr	r3, [pc, #60]	@ (8001294 <handleMappingMode+0x118>)
 8001258:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800125c:	2b64      	cmp	r3, #100	@ 0x64
 800125e:	dd05      	ble.n	800126c <handleMappingMode+0xf0>
        mappingBoundaries.ch4_min = radioDataReceived.ch4;
 8001260:	4b0c      	ldr	r3, [pc, #48]	@ (8001294 <handleMappingMode+0x118>)
 8001262:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001266:	461a      	mov	r2, r3
 8001268:	4b0b      	ldr	r3, [pc, #44]	@ (8001298 <handleMappingMode+0x11c>)
 800126a:	619a      	str	r2, [r3, #24]
    if (radioDataReceived.ch4 > mappingBoundaries.ch4_max)
 800126c:	4b09      	ldr	r3, [pc, #36]	@ (8001294 <handleMappingMode+0x118>)
 800126e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001272:	461a      	mov	r2, r3
 8001274:	4b08      	ldr	r3, [pc, #32]	@ (8001298 <handleMappingMode+0x11c>)
 8001276:	69db      	ldr	r3, [r3, #28]
 8001278:	429a      	cmp	r2, r3
 800127a:	d905      	bls.n	8001288 <handleMappingMode+0x10c>
        mappingBoundaries.ch4_max = radioDataReceived.ch4;
 800127c:	4b05      	ldr	r3, [pc, #20]	@ (8001294 <handleMappingMode+0x118>)
 800127e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001282:	461a      	mov	r2, r3
 8001284:	4b04      	ldr	r3, [pc, #16]	@ (8001298 <handleMappingMode+0x11c>)
 8001286:	61da      	str	r2, [r3, #28]
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	200002fc 	.word	0x200002fc
 8001298:	20000010 	.word	0x20000010

0800129c <handleBypassMode>:

/* Function to handle normal mode (bypassMode) */
void handleBypassMode(void) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b090      	sub	sp, #64	@ 0x40
 80012a0:	af00      	add	r7, sp, #0
    uint32_t pulseWidth[4] = {
        radioDataReceived.ch1,
 80012a2:	4b69      	ldr	r3, [pc, #420]	@ (8001448 <handleBypassMode+0x1ac>)
 80012a4:	f9b3 3000 	ldrsh.w	r3, [r3]
    uint32_t pulseWidth[4] = {
 80012a8:	623b      	str	r3, [r7, #32]
        radioDataReceived.ch2,
 80012aa:	4b67      	ldr	r3, [pc, #412]	@ (8001448 <handleBypassMode+0x1ac>)
 80012ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    uint32_t pulseWidth[4] = {
 80012b0:	627b      	str	r3, [r7, #36]	@ 0x24
        radioDataReceived.ch3,
 80012b2:	4b65      	ldr	r3, [pc, #404]	@ (8001448 <handleBypassMode+0x1ac>)
 80012b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    uint32_t pulseWidth[4] = {
 80012b8:	62bb      	str	r3, [r7, #40]	@ 0x28
        radioDataReceived.ch4
 80012ba:	4b63      	ldr	r3, [pc, #396]	@ (8001448 <handleBypassMode+0x1ac>)
 80012bc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    uint32_t pulseWidth[4] = {
 80012c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    };

    uint32_t min_val[4] = {
        mappingBoundaries.ch1_min,
 80012c2:	4b62      	ldr	r3, [pc, #392]	@ (800144c <handleBypassMode+0x1b0>)
 80012c4:	681b      	ldr	r3, [r3, #0]
    uint32_t min_val[4] = {
 80012c6:	613b      	str	r3, [r7, #16]
        mappingBoundaries.ch2_min,
 80012c8:	4b60      	ldr	r3, [pc, #384]	@ (800144c <handleBypassMode+0x1b0>)
 80012ca:	689b      	ldr	r3, [r3, #8]
    uint32_t min_val[4] = {
 80012cc:	617b      	str	r3, [r7, #20]
        mappingBoundaries.ch3_min,
 80012ce:	4b5f      	ldr	r3, [pc, #380]	@ (800144c <handleBypassMode+0x1b0>)
 80012d0:	691b      	ldr	r3, [r3, #16]
    uint32_t min_val[4] = {
 80012d2:	61bb      	str	r3, [r7, #24]
        mappingBoundaries.ch4_min
 80012d4:	4b5d      	ldr	r3, [pc, #372]	@ (800144c <handleBypassMode+0x1b0>)
 80012d6:	699b      	ldr	r3, [r3, #24]
    uint32_t min_val[4] = {
 80012d8:	61fb      	str	r3, [r7, #28]
    };

    uint32_t max_val[4] = {
        mappingBoundaries.ch1_max,
 80012da:	4b5c      	ldr	r3, [pc, #368]	@ (800144c <handleBypassMode+0x1b0>)
 80012dc:	685b      	ldr	r3, [r3, #4]
    uint32_t max_val[4] = {
 80012de:	603b      	str	r3, [r7, #0]
        mappingBoundaries.ch2_max,
 80012e0:	4b5a      	ldr	r3, [pc, #360]	@ (800144c <handleBypassMode+0x1b0>)
 80012e2:	68db      	ldr	r3, [r3, #12]
    uint32_t max_val[4] = {
 80012e4:	607b      	str	r3, [r7, #4]
        mappingBoundaries.ch3_max,
 80012e6:	4b59      	ldr	r3, [pc, #356]	@ (800144c <handleBypassMode+0x1b0>)
 80012e8:	695b      	ldr	r3, [r3, #20]
    uint32_t max_val[4] = {
 80012ea:	60bb      	str	r3, [r7, #8]
        mappingBoundaries.ch4_max
 80012ec:	4b57      	ldr	r3, [pc, #348]	@ (800144c <handleBypassMode+0x1b0>)
 80012ee:	69db      	ldr	r3, [r3, #28]
    uint32_t max_val[4] = {
 80012f0:	60fb      	str	r3, [r7, #12]
    };

    /* Avoid division by zero if boundaries are not properly set */
    for (int i = 0; i < 4; i++) {
 80012f2:	2300      	movs	r3, #0
 80012f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80012f6:	e09e      	b.n	8001436 <handleBypassMode+0x19a>
        if (max_val[i] <= min_val[i])
 80012f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	3340      	adds	r3, #64	@ 0x40
 80012fe:	443b      	add	r3, r7
 8001300:	f853 2c40 	ldr.w	r2, [r3, #-64]
 8001304:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	3340      	adds	r3, #64	@ 0x40
 800130a:	443b      	add	r3, r7
 800130c:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001310:	429a      	cmp	r2, r3
 8001312:	f240 8095 	bls.w	8001440 <handleBypassMode+0x1a4>
            return;  // Invalid range

        /* Calculate percentage (0.0 to 1.0) for each channel */
        float percent = (float)(pulseWidth[i] - min_val[i]) / (float)(max_val[i] - min_val[i]);
 8001316:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	3340      	adds	r3, #64	@ 0x40
 800131c:	443b      	add	r3, r7
 800131e:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8001322:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	3340      	adds	r3, #64	@ 0x40
 8001328:	443b      	add	r3, r7
 800132a:	f853 3c30 	ldr.w	r3, [r3, #-48]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	ee07 3a90 	vmov	s15, r3
 8001334:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001338:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	3340      	adds	r3, #64	@ 0x40
 800133e:	443b      	add	r3, r7
 8001340:	f853 2c40 	ldr.w	r2, [r3, #-64]
 8001344:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	3340      	adds	r3, #64	@ 0x40
 800134a:	443b      	add	r3, r7
 800134c:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	ee07 3a90 	vmov	s15, r3
 8001356:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800135a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800135e:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
        if (percent < 0.0F) percent = 0.0F;
 8001362:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001366:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800136a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800136e:	d502      	bpl.n	8001376 <handleBypassMode+0xda>
 8001370:	f04f 0300 	mov.w	r3, #0
 8001374:	63bb      	str	r3, [r7, #56]	@ 0x38
        if (percent > 1.0F) percent = 1.0F;
 8001376:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800137a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800137e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001386:	dd02      	ble.n	800138e <handleBypassMode+0xf2>
 8001388:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800138c:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Map percentage to servo pulse width in ms.
           Desired servo range: 0.6 ms (0%) to 2.4 ms (100%)
        */
        float servoPulse_ms = map_float(percent, 0.0F, 1.0F, 0.6F, 2.4F);
 800138e:	ed9f 2a30 	vldr	s4, [pc, #192]	@ 8001450 <handleBypassMode+0x1b4>
 8001392:	eddf 1a30 	vldr	s3, [pc, #192]	@ 8001454 <handleBypassMode+0x1b8>
 8001396:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 800139a:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 8001458 <handleBypassMode+0x1bc>
 800139e:	ed97 0a0e 	vldr	s0, [r7, #56]	@ 0x38
 80013a2:	f7ff febd 	bl	8001120 <map_float>
 80013a6:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
        /* Convert servoPulse_ms to a timer compare value.
           (Assuming that your timer (htim4) is configured so that a full period equals 20ms,
            and the ARR is set such that 20ms corresponds to 59999 ticks.
            Adjust the scaling factor as needed.)
        */
        float compare_val = servoPulse_ms * 59999.0F / 20.0F;
 80013aa:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80013ae:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 800145c <handleBypassMode+0x1c0>
 80013b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013b6:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 80013ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013be:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

        /* Set the compare value for the corresponding timer channel */
        switch (i) {
 80013c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013c4:	2b03      	cmp	r3, #3
 80013c6:	d833      	bhi.n	8001430 <handleBypassMode+0x194>
 80013c8:	a201      	add	r2, pc, #4	@ (adr r2, 80013d0 <handleBypassMode+0x134>)
 80013ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ce:	bf00      	nop
 80013d0:	080013e1 	.word	0x080013e1
 80013d4:	080013f5 	.word	0x080013f5
 80013d8:	08001409 	.word	0x08001409
 80013dc:	0800141d 	.word	0x0800141d
            case 0:
                __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, (long)compare_val);
 80013e0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80013e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001460 <handleBypassMode+0x1c4>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	ee17 2a90 	vmov	r2, s15
 80013f0:	635a      	str	r2, [r3, #52]	@ 0x34
                break;
 80013f2:	e01d      	b.n	8001430 <handleBypassMode+0x194>
            case 1:
                __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, (long)compare_val);
 80013f4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80013f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013fc:	4b18      	ldr	r3, [pc, #96]	@ (8001460 <handleBypassMode+0x1c4>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	ee17 2a90 	vmov	r2, s15
 8001404:	639a      	str	r2, [r3, #56]	@ 0x38
                break;
 8001406:	e013      	b.n	8001430 <handleBypassMode+0x194>
            case 2:
                __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, (long)compare_val);
 8001408:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800140c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001410:	4b13      	ldr	r3, [pc, #76]	@ (8001460 <handleBypassMode+0x1c4>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	ee17 2a90 	vmov	r2, s15
 8001418:	63da      	str	r2, [r3, #60]	@ 0x3c
                break;
 800141a:	e009      	b.n	8001430 <handleBypassMode+0x194>
            case 3:
                __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, (long)compare_val);
 800141c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001420:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001424:	4b0e      	ldr	r3, [pc, #56]	@ (8001460 <handleBypassMode+0x1c4>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	ee17 2a90 	vmov	r2, s15
 800142c:	641a      	str	r2, [r3, #64]	@ 0x40
                break;
 800142e:	bf00      	nop
    for (int i = 0; i < 4; i++) {
 8001430:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001432:	3301      	adds	r3, #1
 8001434:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001438:	2b03      	cmp	r3, #3
 800143a:	f77f af5d 	ble.w	80012f8 <handleBypassMode+0x5c>
 800143e:	e000      	b.n	8001442 <handleBypassMode+0x1a6>
            return;  // Invalid range
 8001440:	bf00      	nop
        }
    }
}
 8001442:	3740      	adds	r7, #64	@ 0x40
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	200002fc 	.word	0x200002fc
 800144c:	20000010 	.word	0x20000010
 8001450:	4019999a 	.word	0x4019999a
 8001454:	3f19999a 	.word	0x3f19999a
 8001458:	00000000 	.word	0x00000000
 800145c:	476a5f00 	.word	0x476a5f00
 8001460:	200005e8 	.word	0x200005e8

08001464 <control>:

/* Main control function */
void control(void) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
    RadioData_t newRadioData;

    /* Attempt non-blocking receive from the radio queue */
    if (osMessageQueueGet(radioQueueHandle, &newRadioData, NULL, 0) == osOK) {
 800146a:	4b11      	ldr	r3, [pc, #68]	@ (80014b0 <control+0x4c>)
 800146c:	6818      	ldr	r0, [r3, #0]
 800146e:	4639      	mov	r1, r7
 8001470:	2300      	movs	r3, #0
 8001472:	2200      	movs	r2, #0
 8001474:	f008 fcd6 	bl	8009e24 <osMessageQueueGet>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d106      	bne.n	800148c <control+0x28>
        radioDataReceived = newRadioData;
 800147e:	4b0d      	ldr	r3, [pc, #52]	@ (80014b4 <control+0x50>)
 8001480:	461a      	mov	r2, r3
 8001482:	463b      	mov	r3, r7
 8001484:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001488:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    /* Handle the current mode */
    switch (currentMode) {
 800148c:	4b0a      	ldr	r3, [pc, #40]	@ (80014b8 <control+0x54>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d002      	beq.n	800149a <control+0x36>
 8001494:	2b01      	cmp	r3, #1
 8001496:	d003      	beq.n	80014a0 <control+0x3c>
        case BYPASS_MODE:
            handleBypassMode();  // Calculate and output servo values
            break;
        default:
            // Handle any new modes that are added in the future
            break;
 8001498:	e005      	b.n	80014a6 <control+0x42>
            handleMappingMode();  // Update min/max boundaries
 800149a:	f7ff fe6f 	bl	800117c <handleMappingMode>
            break;
 800149e:	e002      	b.n	80014a6 <control+0x42>
            handleBypassMode();  // Calculate and output servo values
 80014a0:	f7ff fefc 	bl	800129c <handleBypassMode>
            break;
 80014a4:	bf00      	nop
    }
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	200004dc 	.word	0x200004dc
 80014b4:	200002fc 	.word	0x200002fc
 80014b8:	20000304 	.word	0x20000304

080014bc <imu_read>:
ImuData_t imuDataSent= {0};

int initialized = 0;
enum _error_bno imu_error;

void imu_read(void) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08c      	sub	sp, #48	@ 0x30
 80014c0:	af00      	add	r7, sp, #0

    if (!initialized) {
 80014c2:	4b33      	ldr	r3, [pc, #204]	@ (8001590 <imu_read+0xd4>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d110      	bne.n	80014ec <imu_read+0x30>
    	osDelay(10);
 80014ca:	200a      	movs	r0, #10
 80014cc:	f008 fbbc 	bl	8009c48 <osDelay>
        // Initialize the sensor
        imu_error = bno055_init(&bno);
 80014d0:	4830      	ldr	r0, [pc, #192]	@ (8001594 <imu_read+0xd8>)
 80014d2:	f000 fbbd 	bl	8001c50 <bno055_init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	461a      	mov	r2, r3
 80014da:	4b2f      	ldr	r3, [pc, #188]	@ (8001598 <imu_read+0xdc>)
 80014dc:	701a      	strb	r2, [r3, #0]
        if (imu_error == BNO_OK) { initialized = 1;}
 80014de:	4b2e      	ldr	r3, [pc, #184]	@ (8001598 <imu_read+0xdc>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d102      	bne.n	80014ec <imu_read+0x30>
 80014e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001590 <imu_read+0xd4>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	601a      	str	r2, [r3, #0]
    }


    // Fetch accelerometer data (X, Y, Z)
    bno055_vec3_t accelData;
    if (bno055_acc(&bno, &accelData) == BNO_OK) {
 80014ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014f0:	4619      	mov	r1, r3
 80014f2:	4828      	ldr	r0, [pc, #160]	@ (8001594 <imu_read+0xd8>)
 80014f4:	f000 fdc4 	bl	8002080 <bno055_acc>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d108      	bne.n	8001510 <imu_read+0x54>
    	imuDataSent.accelX = accelData.x;
 80014fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001500:	4a26      	ldr	r2, [pc, #152]	@ (800159c <imu_read+0xe0>)
 8001502:	60d3      	str	r3, [r2, #12]
    	imuDataSent.accelY = accelData.y;
 8001504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001506:	4a25      	ldr	r2, [pc, #148]	@ (800159c <imu_read+0xe0>)
 8001508:	6113      	str	r3, [r2, #16]
    	imuDataSent.accelZ = accelData.z;
 800150a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800150c:	4a23      	ldr	r2, [pc, #140]	@ (800159c <imu_read+0xe0>)
 800150e:	6153      	str	r3, [r2, #20]
    }

    // Fetch gyroscope data (X, Y, Z)
    bno055_vec3_t gyroData;
    if (bno055_gyro(&bno, &gyroData) == BNO_OK) {
 8001510:	f107 0318 	add.w	r3, r7, #24
 8001514:	4619      	mov	r1, r3
 8001516:	481f      	ldr	r0, [pc, #124]	@ (8001594 <imu_read+0xd8>)
 8001518:	f001 f802 	bl	8002520 <bno055_gyro>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d108      	bne.n	8001534 <imu_read+0x78>
    	imuDataSent.gyroX = gyroData.x;
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	4a1d      	ldr	r2, [pc, #116]	@ (800159c <imu_read+0xe0>)
 8001526:	6193      	str	r3, [r2, #24]
    	imuDataSent.gyroY = gyroData.y;
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	4a1c      	ldr	r2, [pc, #112]	@ (800159c <imu_read+0xe0>)
 800152c:	61d3      	str	r3, [r2, #28]
    	imuDataSent.gyroZ = gyroData.z;
 800152e:	6a3b      	ldr	r3, [r7, #32]
 8001530:	4a1a      	ldr	r2, [pc, #104]	@ (800159c <imu_read+0xe0>)
 8001532:	6213      	str	r3, [r2, #32]
    }

    // Fetch magnetometer data (X, Y, Z)
    bno055_vec3_t magData;
    if (bno055_mag(&bno, &magData) == BNO_OK) {
 8001534:	f107 030c 	add.w	r3, r7, #12
 8001538:	4619      	mov	r1, r3
 800153a:	4816      	ldr	r0, [pc, #88]	@ (8001594 <imu_read+0xd8>)
 800153c:	f001 f8fd 	bl	800273a <bno055_mag>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d108      	bne.n	8001558 <imu_read+0x9c>
    	imuDataSent.magX = magData.x;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	4a14      	ldr	r2, [pc, #80]	@ (800159c <imu_read+0xe0>)
 800154a:	6253      	str	r3, [r2, #36]	@ 0x24
    	imuDataSent.magY = magData.y;
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	4a13      	ldr	r2, [pc, #76]	@ (800159c <imu_read+0xe0>)
 8001550:	6293      	str	r3, [r2, #40]	@ 0x28
    	imuDataSent.magZ = magData.z;
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	4a11      	ldr	r2, [pc, #68]	@ (800159c <imu_read+0xe0>)
 8001556:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    // Fetch Euler angles (Roll, Pitch, Yaw)
    bno055_euler_t eulerData;
    if (bno055_euler(&bno, &eulerData) == BNO_OK) {
 8001558:	463b      	mov	r3, r7
 800155a:	4619      	mov	r1, r3
 800155c:	480d      	ldr	r0, [pc, #52]	@ (8001594 <imu_read+0xd8>)
 800155e:	f001 fb3d 	bl	8002bdc <bno055_euler>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d108      	bne.n	800157a <imu_read+0xbe>
    	imuDataSent.roll = eulerData.roll;
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	4a0c      	ldr	r2, [pc, #48]	@ (800159c <imu_read+0xe0>)
 800156c:	6013      	str	r3, [r2, #0]
    	imuDataSent.pitch = eulerData.pitch;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a0a      	ldr	r2, [pc, #40]	@ (800159c <imu_read+0xe0>)
 8001572:	6053      	str	r3, [r2, #4]
    	imuDataSent.yaw = eulerData.yaw;
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	4a09      	ldr	r2, [pc, #36]	@ (800159c <imu_read+0xe0>)
 8001578:	6093      	str	r3, [r2, #8]
    }

    // Post the sensor data to the message queue.
    osMessageQueuePut(imuQueueHandle, &imuDataSent, 0, 0);
 800157a:	4b09      	ldr	r3, [pc, #36]	@ (80015a0 <imu_read+0xe4>)
 800157c:	6818      	ldr	r0, [r3, #0]
 800157e:	2300      	movs	r3, #0
 8001580:	2200      	movs	r2, #0
 8001582:	4906      	ldr	r1, [pc, #24]	@ (800159c <imu_read+0xe0>)
 8001584:	f008 fbee 	bl	8009d64 <osMessageQueuePut>
}
 8001588:	bf00      	nop
 800158a:	3730      	adds	r7, #48	@ 0x30
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000338 	.word	0x20000338
 8001594:	20000030 	.word	0x20000030
 8001598:	2000033c 	.word	0x2000033c
 800159c:	20000308 	.word	0x20000308
 80015a0:	200004e4 	.word	0x200004e4

080015a4 <is_imu_initialized>:

int is_imu_initialized(void){
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
    return initialized;
 80015a8:	4b03      	ldr	r3, [pc, #12]	@ (80015b8 <is_imu_initialized+0x14>)
 80015aa:	681b      	ldr	r3, [r3, #0]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	20000338 	.word	0x20000338

080015bc <telemetry_transmit>:
/**
 * @brief Transmits a telemetry value with a given key.
 *
 * The message is formatted as "KEY:VALUE\r\n".
 */
static void telemetry_transmit(const char *key, float value) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af02      	add	r7, sp, #8
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	ed87 0a00 	vstr	s0, [r7]
    snprintf(uartTxBuffer, sizeof(uartTxBuffer), "%s:%.2f\r\n", key, value);
 80015c8:	6838      	ldr	r0, [r7, #0]
 80015ca:	f7fe ffc5 	bl	8000558 <__aeabi_f2d>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	e9cd 2300 	strd	r2, r3, [sp]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a09      	ldr	r2, [pc, #36]	@ (8001600 <telemetry_transmit+0x44>)
 80015da:	2110      	movs	r1, #16
 80015dc:	4809      	ldr	r0, [pc, #36]	@ (8001604 <telemetry_transmit+0x48>)
 80015de:	f00d f94f 	bl	800e880 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)uartTxBuffer, strlen(uartTxBuffer), 1);
 80015e2:	4808      	ldr	r0, [pc, #32]	@ (8001604 <telemetry_transmit+0x48>)
 80015e4:	f7fe fe4c 	bl	8000280 <strlen>
 80015e8:	4603      	mov	r3, r0
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	2301      	movs	r3, #1
 80015ee:	4905      	ldr	r1, [pc, #20]	@ (8001604 <telemetry_transmit+0x48>)
 80015f0:	4805      	ldr	r0, [pc, #20]	@ (8001608 <telemetry_transmit+0x4c>)
 80015f2:	f007 fc3d 	bl	8008e70 <HAL_UART_Transmit>
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	08011638 	.word	0x08011638
 8001604:	200003b4 	.word	0x200003b4
 8001608:	20000678 	.word	0x20000678

0800160c <telemetry_start_rx_dma>:
 * @brief Starts UART RX in DMA mode using a circular buffer.
 *
 * Only the pointer to the buffer is passed so that the DMA hardware
 * writes directly into uartRxBuffer.
 */
static void telemetry_start_rx_dma(void) {
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
    HAL_UART_Receive_DMA(&huart1, (uint8_t *)uartRxBuffer, RX_BUFFER_SIZE);
 8001610:	2210      	movs	r2, #16
 8001612:	4903      	ldr	r1, [pc, #12]	@ (8001620 <telemetry_start_rx_dma+0x14>)
 8001614:	4803      	ldr	r0, [pc, #12]	@ (8001624 <telemetry_start_rx_dma+0x18>)
 8001616:	f007 fcb6 	bl	8008f86 <HAL_UART_Receive_DMA>
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	200003a0 	.word	0x200003a0
 8001624:	20000678 	.word	0x20000678

08001628 <telemetry_receive>:

// Define a sufficiently large temporary buffer for complete messages.
#define TEMP_BUFFER_SIZE 64

bool telemetry_receive(const char *key, float *value) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
    static uint16_t tempIndex = 0;

    // Determine the current index in the DMA circular buffer.
    // RX_BUFFER_SIZE is defined in the file as 16.
    // __HAL_DMA_GET_COUNTER returns the number of bytes remaining.
    uint16_t dma_remaining = __HAL_DMA_GET_COUNTER(huart1.hdmarx);
 8001632:	4b3d      	ldr	r3, [pc, #244]	@ (8001728 <telemetry_receive+0x100>)
 8001634:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	82fb      	strh	r3, [r7, #22]
    uint16_t current_index = RX_BUFFER_SIZE - dma_remaining;
 800163c:	8afb      	ldrh	r3, [r7, #22]
 800163e:	f1c3 0310 	rsb	r3, r3, #16
 8001642:	82bb      	strh	r3, [r7, #20]

    // Process all new characters in the circular buffer
    while (last_read_index != current_index) {
 8001644:	e066      	b.n	8001714 <telemetry_receive+0xec>
        char ch = uartRxBuffer[last_read_index];
 8001646:	4b39      	ldr	r3, [pc, #228]	@ (800172c <telemetry_receive+0x104>)
 8001648:	881b      	ldrh	r3, [r3, #0]
 800164a:	461a      	mov	r2, r3
 800164c:	4b38      	ldr	r3, [pc, #224]	@ (8001730 <telemetry_receive+0x108>)
 800164e:	5c9b      	ldrb	r3, [r3, r2]
 8001650:	74fb      	strb	r3, [r7, #19]
        // Update the read pointer, wrapping around if necessary.
        last_read_index = (last_read_index + 1) % RX_BUFFER_SIZE;
 8001652:	4b36      	ldr	r3, [pc, #216]	@ (800172c <telemetry_receive+0x104>)
 8001654:	881b      	ldrh	r3, [r3, #0]
 8001656:	3301      	adds	r3, #1
 8001658:	425a      	negs	r2, r3
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	f002 020f 	and.w	r2, r2, #15
 8001662:	bf58      	it	pl
 8001664:	4253      	negpl	r3, r2
 8001666:	b29a      	uxth	r2, r3
 8001668:	4b30      	ldr	r3, [pc, #192]	@ (800172c <telemetry_receive+0x104>)
 800166a:	801a      	strh	r2, [r3, #0]

        // Append the character to the temporary buffer if space is available.
        if (tempIndex < TEMP_BUFFER_SIZE - 1) {
 800166c:	4b31      	ldr	r3, [pc, #196]	@ (8001734 <telemetry_receive+0x10c>)
 800166e:	881b      	ldrh	r3, [r3, #0]
 8001670:	2b3e      	cmp	r3, #62	@ 0x3e
 8001672:	d80a      	bhi.n	800168a <telemetry_receive+0x62>
            tempBuffer[tempIndex++] = ch;
 8001674:	4b2f      	ldr	r3, [pc, #188]	@ (8001734 <telemetry_receive+0x10c>)
 8001676:	881b      	ldrh	r3, [r3, #0]
 8001678:	1c5a      	adds	r2, r3, #1
 800167a:	b291      	uxth	r1, r2
 800167c:	4a2d      	ldr	r2, [pc, #180]	@ (8001734 <telemetry_receive+0x10c>)
 800167e:	8011      	strh	r1, [r2, #0]
 8001680:	4619      	mov	r1, r3
 8001682:	4a2d      	ldr	r2, [pc, #180]	@ (8001738 <telemetry_receive+0x110>)
 8001684:	7cfb      	ldrb	r3, [r7, #19]
 8001686:	5453      	strb	r3, [r2, r1]
 8001688:	e002      	b.n	8001690 <telemetry_receive+0x68>
        } else {
            // Overflow protection: reset temp buffer if it gets too full.
            tempIndex = 0;
 800168a:	4b2a      	ldr	r3, [pc, #168]	@ (8001734 <telemetry_receive+0x10c>)
 800168c:	2200      	movs	r2, #0
 800168e:	801a      	strh	r2, [r3, #0]
        }

        // Check if the last two characters form the "\r\n" delimiter.
        if (tempIndex >= 2 &&
 8001690:	4b28      	ldr	r3, [pc, #160]	@ (8001734 <telemetry_receive+0x10c>)
 8001692:	881b      	ldrh	r3, [r3, #0]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d93d      	bls.n	8001714 <telemetry_receive+0xec>
            tempBuffer[tempIndex - 2] == '\r' &&
 8001698:	4b26      	ldr	r3, [pc, #152]	@ (8001734 <telemetry_receive+0x10c>)
 800169a:	881b      	ldrh	r3, [r3, #0]
 800169c:	3b02      	subs	r3, #2
 800169e:	4a26      	ldr	r2, [pc, #152]	@ (8001738 <telemetry_receive+0x110>)
 80016a0:	5cd3      	ldrb	r3, [r2, r3]
        if (tempIndex >= 2 &&
 80016a2:	2b0d      	cmp	r3, #13
 80016a4:	d136      	bne.n	8001714 <telemetry_receive+0xec>
            tempBuffer[tempIndex - 1] == '\n') {
 80016a6:	4b23      	ldr	r3, [pc, #140]	@ (8001734 <telemetry_receive+0x10c>)
 80016a8:	881b      	ldrh	r3, [r3, #0]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	4a22      	ldr	r2, [pc, #136]	@ (8001738 <telemetry_receive+0x110>)
 80016ae:	5cd3      	ldrb	r3, [r2, r3]
            tempBuffer[tempIndex - 2] == '\r' &&
 80016b0:	2b0a      	cmp	r3, #10
 80016b2:	d12f      	bne.n	8001714 <telemetry_receive+0xec>

            // Null-terminate the message (overwrite '\r' with '\0').
            tempBuffer[tempIndex - 2] = '\0';
 80016b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001734 <telemetry_receive+0x10c>)
 80016b6:	881b      	ldrh	r3, [r3, #0]
 80016b8:	3b02      	subs	r3, #2
 80016ba:	4a1f      	ldr	r2, [pc, #124]	@ (8001738 <telemetry_receive+0x110>)
 80016bc:	2100      	movs	r1, #0
 80016be:	54d1      	strb	r1, [r2, r3]

            // Check if the message starts with the given key followed by a colon.
            size_t keyLen = strlen(key);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7fe fddd 	bl	8000280 <strlen>
 80016c6:	60f8      	str	r0, [r7, #12]
            if (strncmp(tempBuffer, key, keyLen) == 0 && tempBuffer[keyLen] == ':') {
 80016c8:	68fa      	ldr	r2, [r7, #12]
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	481a      	ldr	r0, [pc, #104]	@ (8001738 <telemetry_receive+0x110>)
 80016ce:	f00d f97a 	bl	800e9c6 <strncmp>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d11a      	bne.n	800170e <telemetry_receive+0xe6>
 80016d8:	4a17      	ldr	r2, [pc, #92]	@ (8001738 <telemetry_receive+0x110>)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	4413      	add	r3, r2
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b3a      	cmp	r3, #58	@ 0x3a
 80016e2:	d114      	bne.n	800170e <telemetry_receive+0xe6>
                // Convert the string after the colon to a float.
                *value = (float)atof(&tempBuffer[keyLen + 1]);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	3301      	adds	r3, #1
 80016e8:	4a13      	ldr	r2, [pc, #76]	@ (8001738 <telemetry_receive+0x110>)
 80016ea:	4413      	add	r3, r2
 80016ec:	4618      	mov	r0, r3
 80016ee:	f00b fb87 	bl	800ce00 <atof>
 80016f2:	ec53 2b10 	vmov	r2, r3, d0
 80016f6:	4610      	mov	r0, r2
 80016f8:	4619      	mov	r1, r3
 80016fa:	f7ff fa7d 	bl	8000bf8 <__aeabi_d2f>
 80016fe:	4602      	mov	r2, r0
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	601a      	str	r2, [r3, #0]
                // Reset the temporary buffer for the next message.
                tempIndex = 0;
 8001704:	4b0b      	ldr	r3, [pc, #44]	@ (8001734 <telemetry_receive+0x10c>)
 8001706:	2200      	movs	r2, #0
 8001708:	801a      	strh	r2, [r3, #0]
                return true;
 800170a:	2301      	movs	r3, #1
 800170c:	e008      	b.n	8001720 <telemetry_receive+0xf8>
            }
            // Message was complete but did not match the key.
            // Clear the temp buffer and continue processing.
            tempIndex = 0;
 800170e:	4b09      	ldr	r3, [pc, #36]	@ (8001734 <telemetry_receive+0x10c>)
 8001710:	2200      	movs	r2, #0
 8001712:	801a      	strh	r2, [r3, #0]
    while (last_read_index != current_index) {
 8001714:	4b05      	ldr	r3, [pc, #20]	@ (800172c <telemetry_receive+0x104>)
 8001716:	881b      	ldrh	r3, [r3, #0]
 8001718:	8aba      	ldrh	r2, [r7, #20]
 800171a:	429a      	cmp	r2, r3
 800171c:	d193      	bne.n	8001646 <telemetry_receive+0x1e>
        }
    }

    // No complete message with the requested key was received.
    return false;
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000678 	.word	0x20000678
 800172c:	200003c8 	.word	0x200003c8
 8001730:	200003a0 	.word	0x200003a0
 8001734:	200003ca 	.word	0x200003ca
 8001738:	200003cc 	.word	0x200003cc

0800173c <telemetry>:

int telemetry_initialized = 0;

void telemetry(void) {
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
    if (!telemetry_initialized) {
 8001740:	4ba1      	ldr	r3, [pc, #644]	@ (80019c8 <telemetry+0x28c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d104      	bne.n	8001752 <telemetry+0x16>

    	// Start RX DMA (assumes this only needs to be done once)
    	telemetry_start_rx_dma();
 8001748:	f7ff ff60 	bl	800160c <telemetry_start_rx_dma>
    	telemetry_initialized = 1;
 800174c:	4b9e      	ldr	r3, [pc, #632]	@ (80019c8 <telemetry+0x28c>)
 800174e:	2201      	movs	r2, #1
 8001750:	601a      	str	r2, [r3, #0]
    }

	// Send a simple "OK" heartbeat
	snprintf(uartTxBuffer, sizeof(uartTxBuffer), "OK\r\n");
 8001752:	4a9e      	ldr	r2, [pc, #632]	@ (80019cc <telemetry+0x290>)
 8001754:	2110      	movs	r1, #16
 8001756:	489e      	ldr	r0, [pc, #632]	@ (80019d0 <telemetry+0x294>)
 8001758:	f00d f892 	bl	800e880 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)uartTxBuffer, strlen(uartTxBuffer), HAL_MAX_DELAY);
 800175c:	489c      	ldr	r0, [pc, #624]	@ (80019d0 <telemetry+0x294>)
 800175e:	f7fe fd8f 	bl	8000280 <strlen>
 8001762:	4603      	mov	r3, r0
 8001764:	b29a      	uxth	r2, r3
 8001766:	f04f 33ff 	mov.w	r3, #4294967295
 800176a:	4999      	ldr	r1, [pc, #612]	@ (80019d0 <telemetry+0x294>)
 800176c:	4899      	ldr	r0, [pc, #612]	@ (80019d4 <telemetry+0x298>)
 800176e:	f007 fb7f 	bl	8008e70 <HAL_UART_Transmit>

	// Transmit ADC data if available.
	if (osMessageQueueGetCount(adcQueueHandle) > 0) {
 8001772:	4b99      	ldr	r3, [pc, #612]	@ (80019d8 <telemetry+0x29c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f008 fbb2 	bl	8009ee0 <osMessageQueueGetCount>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d027      	beq.n	80017d2 <telemetry+0x96>
		osMessageQueueGet(adcQueueHandle, (void *)&adcDataReceived, NULL, osWaitForever);
 8001782:	4b95      	ldr	r3, [pc, #596]	@ (80019d8 <telemetry+0x29c>)
 8001784:	6818      	ldr	r0, [r3, #0]
 8001786:	f04f 33ff 	mov.w	r3, #4294967295
 800178a:	2200      	movs	r2, #0
 800178c:	4993      	ldr	r1, [pc, #588]	@ (80019dc <telemetry+0x2a0>)
 800178e:	f008 fb49 	bl	8009e24 <osMessageQueueGet>
		telemetry_transmit("DIR", adcDataReceived.windDirection);
 8001792:	4b92      	ldr	r3, [pc, #584]	@ (80019dc <telemetry+0x2a0>)
 8001794:	edd3 7a00 	vldr	s15, [r3]
 8001798:	eeb0 0a67 	vmov.f32	s0, s15
 800179c:	4890      	ldr	r0, [pc, #576]	@ (80019e0 <telemetry+0x2a4>)
 800179e:	f7ff ff0d 	bl	80015bc <telemetry_transmit>
		telemetry_transmit("BAT", adcDataReceived.batteryVoltage);
 80017a2:	4b8e      	ldr	r3, [pc, #568]	@ (80019dc <telemetry+0x2a0>)
 80017a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80017a8:	eeb0 0a67 	vmov.f32	s0, s15
 80017ac:	488d      	ldr	r0, [pc, #564]	@ (80019e4 <telemetry+0x2a8>)
 80017ae:	f7ff ff05 	bl	80015bc <telemetry_transmit>
		telemetry_transmit("EX1", adcDataReceived.extra1);
 80017b2:	4b8a      	ldr	r3, [pc, #552]	@ (80019dc <telemetry+0x2a0>)
 80017b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80017b8:	eeb0 0a67 	vmov.f32	s0, s15
 80017bc:	488a      	ldr	r0, [pc, #552]	@ (80019e8 <telemetry+0x2ac>)
 80017be:	f7ff fefd 	bl	80015bc <telemetry_transmit>
		telemetry_transmit("EX2", adcDataReceived.extra2);
 80017c2:	4b86      	ldr	r3, [pc, #536]	@ (80019dc <telemetry+0x2a0>)
 80017c4:	edd3 7a03 	vldr	s15, [r3, #12]
 80017c8:	eeb0 0a67 	vmov.f32	s0, s15
 80017cc:	4887      	ldr	r0, [pc, #540]	@ (80019ec <telemetry+0x2b0>)
 80017ce:	f7ff fef5 	bl	80015bc <telemetry_transmit>
	}

	// Transmit IMU data if available and initialized.
	if (osMessageQueueGetCount(imuQueueHandle) > 0 && is_imu_initialized()) {
 80017d2:	4b87      	ldr	r3, [pc, #540]	@ (80019f0 <telemetry+0x2b4>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f008 fb82 	bl	8009ee0 <osMessageQueueGetCount>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d06c      	beq.n	80018bc <telemetry+0x180>
 80017e2:	f7ff fedf 	bl	80015a4 <is_imu_initialized>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d067      	beq.n	80018bc <telemetry+0x180>
		osMessageQueueGet(imuQueueHandle, (void *)&imuDataReceived, NULL, osWaitForever);
 80017ec:	4b80      	ldr	r3, [pc, #512]	@ (80019f0 <telemetry+0x2b4>)
 80017ee:	6818      	ldr	r0, [r3, #0]
 80017f0:	f04f 33ff 	mov.w	r3, #4294967295
 80017f4:	2200      	movs	r2, #0
 80017f6:	497f      	ldr	r1, [pc, #508]	@ (80019f4 <telemetry+0x2b8>)
 80017f8:	f008 fb14 	bl	8009e24 <osMessageQueueGet>
		telemetry_transmit("ROL", imuDataReceived.roll);
 80017fc:	4b7d      	ldr	r3, [pc, #500]	@ (80019f4 <telemetry+0x2b8>)
 80017fe:	edd3 7a00 	vldr	s15, [r3]
 8001802:	eeb0 0a67 	vmov.f32	s0, s15
 8001806:	487c      	ldr	r0, [pc, #496]	@ (80019f8 <telemetry+0x2bc>)
 8001808:	f7ff fed8 	bl	80015bc <telemetry_transmit>
		telemetry_transmit("PIT", imuDataReceived.pitch);
 800180c:	4b79      	ldr	r3, [pc, #484]	@ (80019f4 <telemetry+0x2b8>)
 800180e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001812:	eeb0 0a67 	vmov.f32	s0, s15
 8001816:	4879      	ldr	r0, [pc, #484]	@ (80019fc <telemetry+0x2c0>)
 8001818:	f7ff fed0 	bl	80015bc <telemetry_transmit>
		telemetry_transmit("YAW", imuDataReceived.yaw);
 800181c:	4b75      	ldr	r3, [pc, #468]	@ (80019f4 <telemetry+0x2b8>)
 800181e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001822:	eeb0 0a67 	vmov.f32	s0, s15
 8001826:	4876      	ldr	r0, [pc, #472]	@ (8001a00 <telemetry+0x2c4>)
 8001828:	f7ff fec8 	bl	80015bc <telemetry_transmit>
		telemetry_transmit("ACX", imuDataReceived.accelX);
 800182c:	4b71      	ldr	r3, [pc, #452]	@ (80019f4 <telemetry+0x2b8>)
 800182e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001832:	eeb0 0a67 	vmov.f32	s0, s15
 8001836:	4873      	ldr	r0, [pc, #460]	@ (8001a04 <telemetry+0x2c8>)
 8001838:	f7ff fec0 	bl	80015bc <telemetry_transmit>
		telemetry_transmit("ACY", imuDataReceived.accelY);
 800183c:	4b6d      	ldr	r3, [pc, #436]	@ (80019f4 <telemetry+0x2b8>)
 800183e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001842:	eeb0 0a67 	vmov.f32	s0, s15
 8001846:	4870      	ldr	r0, [pc, #448]	@ (8001a08 <telemetry+0x2cc>)
 8001848:	f7ff feb8 	bl	80015bc <telemetry_transmit>
		telemetry_transmit("ACZ", imuDataReceived.accelZ);
 800184c:	4b69      	ldr	r3, [pc, #420]	@ (80019f4 <telemetry+0x2b8>)
 800184e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001852:	eeb0 0a67 	vmov.f32	s0, s15
 8001856:	486d      	ldr	r0, [pc, #436]	@ (8001a0c <telemetry+0x2d0>)
 8001858:	f7ff feb0 	bl	80015bc <telemetry_transmit>
		telemetry_transmit("GYX", imuDataReceived.gyroX);
 800185c:	4b65      	ldr	r3, [pc, #404]	@ (80019f4 <telemetry+0x2b8>)
 800185e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001862:	eeb0 0a67 	vmov.f32	s0, s15
 8001866:	486a      	ldr	r0, [pc, #424]	@ (8001a10 <telemetry+0x2d4>)
 8001868:	f7ff fea8 	bl	80015bc <telemetry_transmit>
		telemetry_transmit("GYY", imuDataReceived.gyroY);
 800186c:	4b61      	ldr	r3, [pc, #388]	@ (80019f4 <telemetry+0x2b8>)
 800186e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001872:	eeb0 0a67 	vmov.f32	s0, s15
 8001876:	4867      	ldr	r0, [pc, #412]	@ (8001a14 <telemetry+0x2d8>)
 8001878:	f7ff fea0 	bl	80015bc <telemetry_transmit>
		telemetry_transmit("GYZ", imuDataReceived.gyroZ);
 800187c:	4b5d      	ldr	r3, [pc, #372]	@ (80019f4 <telemetry+0x2b8>)
 800187e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001882:	eeb0 0a67 	vmov.f32	s0, s15
 8001886:	4864      	ldr	r0, [pc, #400]	@ (8001a18 <telemetry+0x2dc>)
 8001888:	f7ff fe98 	bl	80015bc <telemetry_transmit>
		telemetry_transmit("MGX", imuDataReceived.magX);
 800188c:	4b59      	ldr	r3, [pc, #356]	@ (80019f4 <telemetry+0x2b8>)
 800188e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001892:	eeb0 0a67 	vmov.f32	s0, s15
 8001896:	4861      	ldr	r0, [pc, #388]	@ (8001a1c <telemetry+0x2e0>)
 8001898:	f7ff fe90 	bl	80015bc <telemetry_transmit>
		telemetry_transmit("MGY", imuDataReceived.magY);
 800189c:	4b55      	ldr	r3, [pc, #340]	@ (80019f4 <telemetry+0x2b8>)
 800189e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80018a2:	eeb0 0a67 	vmov.f32	s0, s15
 80018a6:	485e      	ldr	r0, [pc, #376]	@ (8001a20 <telemetry+0x2e4>)
 80018a8:	f7ff fe88 	bl	80015bc <telemetry_transmit>
		telemetry_transmit("MGZ", imuDataReceived.magZ);
 80018ac:	4b51      	ldr	r3, [pc, #324]	@ (80019f4 <telemetry+0x2b8>)
 80018ae:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80018b2:	eeb0 0a67 	vmov.f32	s0, s15
 80018b6:	485b      	ldr	r0, [pc, #364]	@ (8001a24 <telemetry+0x2e8>)
 80018b8:	f7ff fe80 	bl	80015bc <telemetry_transmit>
	}

	// Transmit Radio data if available.
	if (osMessageQueueGetCount(radioQueueHandle) > 0) {
 80018bc:	4b5a      	ldr	r3, [pc, #360]	@ (8001a28 <telemetry+0x2ec>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f008 fb0d 	bl	8009ee0 <osMessageQueueGetCount>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d037      	beq.n	800193c <telemetry+0x200>
		osMessageQueueGet(radioQueueHandle, (void *)&radioDataReceived, NULL, osWaitForever);
 80018cc:	4b56      	ldr	r3, [pc, #344]	@ (8001a28 <telemetry+0x2ec>)
 80018ce:	6818      	ldr	r0, [r3, #0]
 80018d0:	f04f 33ff 	mov.w	r3, #4294967295
 80018d4:	2200      	movs	r2, #0
 80018d6:	4955      	ldr	r1, [pc, #340]	@ (8001a2c <telemetry+0x2f0>)
 80018d8:	f008 faa4 	bl	8009e24 <osMessageQueueGet>
		telemetry_transmit("RW1", (float)radioDataReceived.ch1);
 80018dc:	4b53      	ldr	r3, [pc, #332]	@ (8001a2c <telemetry+0x2f0>)
 80018de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018e2:	ee07 3a90 	vmov	s15, r3
 80018e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ea:	eeb0 0a67 	vmov.f32	s0, s15
 80018ee:	4850      	ldr	r0, [pc, #320]	@ (8001a30 <telemetry+0x2f4>)
 80018f0:	f7ff fe64 	bl	80015bc <telemetry_transmit>
		telemetry_transmit("RW2", (float)radioDataReceived.ch2);
 80018f4:	4b4d      	ldr	r3, [pc, #308]	@ (8001a2c <telemetry+0x2f0>)
 80018f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018fa:	ee07 3a90 	vmov	s15, r3
 80018fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001902:	eeb0 0a67 	vmov.f32	s0, s15
 8001906:	484b      	ldr	r0, [pc, #300]	@ (8001a34 <telemetry+0x2f8>)
 8001908:	f7ff fe58 	bl	80015bc <telemetry_transmit>
		telemetry_transmit("RW3", (float)radioDataReceived.ch3);
 800190c:	4b47      	ldr	r3, [pc, #284]	@ (8001a2c <telemetry+0x2f0>)
 800190e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001912:	ee07 3a90 	vmov	s15, r3
 8001916:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800191a:	eeb0 0a67 	vmov.f32	s0, s15
 800191e:	4846      	ldr	r0, [pc, #280]	@ (8001a38 <telemetry+0x2fc>)
 8001920:	f7ff fe4c 	bl	80015bc <telemetry_transmit>
		telemetry_transmit("RW4", (float)radioDataReceived.ch4);
 8001924:	4b41      	ldr	r3, [pc, #260]	@ (8001a2c <telemetry+0x2f0>)
 8001926:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800192a:	ee07 3a90 	vmov	s15, r3
 800192e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001932:	eeb0 0a67 	vmov.f32	s0, s15
 8001936:	4841      	ldr	r0, [pc, #260]	@ (8001a3c <telemetry+0x300>)
 8001938:	f7ff fe40 	bl	80015bc <telemetry_transmit>
	}

	// Transmit Control data if available.
	if (osMessageQueueGetCount(controlQueueHandle) > 0) {
 800193c:	4b40      	ldr	r3, [pc, #256]	@ (8001a40 <telemetry+0x304>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f008 facd 	bl	8009ee0 <osMessageQueueGetCount>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d037      	beq.n	80019bc <telemetry+0x280>
		osMessageQueueGet(controlQueueHandle, (void *)&controlDataReceived, NULL, osWaitForever);
 800194c:	4b3c      	ldr	r3, [pc, #240]	@ (8001a40 <telemetry+0x304>)
 800194e:	6818      	ldr	r0, [r3, #0]
 8001950:	f04f 33ff 	mov.w	r3, #4294967295
 8001954:	2200      	movs	r2, #0
 8001956:	493b      	ldr	r1, [pc, #236]	@ (8001a44 <telemetry+0x308>)
 8001958:	f008 fa64 	bl	8009e24 <osMessageQueueGet>
		telemetry_transmit("CT1", (float)controlDataReceived.ctrl1);
 800195c:	4b39      	ldr	r3, [pc, #228]	@ (8001a44 <telemetry+0x308>)
 800195e:	edd3 7a00 	vldr	s15, [r3]
 8001962:	eeb0 0a67 	vmov.f32	s0, s15
 8001966:	4838      	ldr	r0, [pc, #224]	@ (8001a48 <telemetry+0x30c>)
 8001968:	f7ff fe28 	bl	80015bc <telemetry_transmit>
		telemetry_transmit("CT2", (float)controlDataReceived.ctrl2);
 800196c:	4b35      	ldr	r3, [pc, #212]	@ (8001a44 <telemetry+0x308>)
 800196e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001972:	eeb0 0a67 	vmov.f32	s0, s15
 8001976:	4835      	ldr	r0, [pc, #212]	@ (8001a4c <telemetry+0x310>)
 8001978:	f7ff fe20 	bl	80015bc <telemetry_transmit>
		telemetry_transmit("CT3", (float)controlDataReceived.ctrl3);
 800197c:	4b31      	ldr	r3, [pc, #196]	@ (8001a44 <telemetry+0x308>)
 800197e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001982:	eeb0 0a67 	vmov.f32	s0, s15
 8001986:	4832      	ldr	r0, [pc, #200]	@ (8001a50 <telemetry+0x314>)
 8001988:	f7ff fe18 	bl	80015bc <telemetry_transmit>
		telemetry_transmit("CT4", (float)controlDataReceived.ctrl4);
 800198c:	4b2d      	ldr	r3, [pc, #180]	@ (8001a44 <telemetry+0x308>)
 800198e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001992:	eeb0 0a67 	vmov.f32	s0, s15
 8001996:	482f      	ldr	r0, [pc, #188]	@ (8001a54 <telemetry+0x318>)
 8001998:	f7ff fe10 	bl	80015bc <telemetry_transmit>
		telemetry_transmit("CT5", (float)controlDataReceived.ctrl5);
 800199c:	4b29      	ldr	r3, [pc, #164]	@ (8001a44 <telemetry+0x308>)
 800199e:	edd3 7a04 	vldr	s15, [r3, #16]
 80019a2:	eeb0 0a67 	vmov.f32	s0, s15
 80019a6:	482c      	ldr	r0, [pc, #176]	@ (8001a58 <telemetry+0x31c>)
 80019a8:	f7ff fe08 	bl	80015bc <telemetry_transmit>
		telemetry_transmit("CT6", (float)controlDataReceived.ctrl6);
 80019ac:	4b25      	ldr	r3, [pc, #148]	@ (8001a44 <telemetry+0x308>)
 80019ae:	edd3 7a05 	vldr	s15, [r3, #20]
 80019b2:	eeb0 0a67 	vmov.f32	s0, s15
 80019b6:	4829      	ldr	r0, [pc, #164]	@ (8001a5c <telemetry+0x320>)
 80019b8:	f7ff fe00 	bl	80015bc <telemetry_transmit>
	}

	// Example: receive a variable (e.g., "MOD") from the circular DMA buffer.
	{
		if (telemetry_receive("MOD", &modValue)) {
 80019bc:	4928      	ldr	r1, [pc, #160]	@ (8001a60 <telemetry+0x324>)
 80019be:	4829      	ldr	r0, [pc, #164]	@ (8001a64 <telemetry+0x328>)
 80019c0:	f7ff fe32 	bl	8001628 <telemetry_receive>
		}
	}

}
 80019c4:	bf00      	nop
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	200003c4 	.word	0x200003c4
 80019cc:	08011644 	.word	0x08011644
 80019d0:	200003b4 	.word	0x200003b4
 80019d4:	20000678 	.word	0x20000678
 80019d8:	200004e0 	.word	0x200004e0
 80019dc:	20000340 	.word	0x20000340
 80019e0:	0801164c 	.word	0x0801164c
 80019e4:	08011650 	.word	0x08011650
 80019e8:	08011654 	.word	0x08011654
 80019ec:	08011658 	.word	0x08011658
 80019f0:	200004e4 	.word	0x200004e4
 80019f4:	20000350 	.word	0x20000350
 80019f8:	0801165c 	.word	0x0801165c
 80019fc:	08011660 	.word	0x08011660
 8001a00:	08011664 	.word	0x08011664
 8001a04:	08011668 	.word	0x08011668
 8001a08:	0801166c 	.word	0x0801166c
 8001a0c:	08011670 	.word	0x08011670
 8001a10:	08011674 	.word	0x08011674
 8001a14:	08011678 	.word	0x08011678
 8001a18:	0801167c 	.word	0x0801167c
 8001a1c:	08011680 	.word	0x08011680
 8001a20:	08011684 	.word	0x08011684
 8001a24:	08011688 	.word	0x08011688
 8001a28:	200004dc 	.word	0x200004dc
 8001a2c:	20000380 	.word	0x20000380
 8001a30:	0801168c 	.word	0x0801168c
 8001a34:	08011690 	.word	0x08011690
 8001a38:	08011694 	.word	0x08011694
 8001a3c:	08011698 	.word	0x08011698
 8001a40:	200004e8 	.word	0x200004e8
 8001a44:	20000388 	.word	0x20000388
 8001a48:	0801169c 	.word	0x0801169c
 8001a4c:	080116a0 	.word	0x080116a0
 8001a50:	080116a4 	.word	0x080116a4
 8001a54:	080116a8 	.word	0x080116a8
 8001a58:	080116ac 	.word	0x080116ac
 8001a5c:	080116b0 	.word	0x080116b0
 8001a60:	200003b0 	.word	0x200003b0
 8001a64:	080116b4 	.word	0x080116b4

08001a68 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a6e:	463b      	mov	r3, r7
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a7a:	4b36      	ldr	r3, [pc, #216]	@ (8001b54 <MX_ADC1_Init+0xec>)
 8001a7c:	4a36      	ldr	r2, [pc, #216]	@ (8001b58 <MX_ADC1_Init+0xf0>)
 8001a7e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001a80:	4b34      	ldr	r3, [pc, #208]	@ (8001b54 <MX_ADC1_Init+0xec>)
 8001a82:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001a86:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a88:	4b32      	ldr	r3, [pc, #200]	@ (8001b54 <MX_ADC1_Init+0xec>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001a8e:	4b31      	ldr	r3, [pc, #196]	@ (8001b54 <MX_ADC1_Init+0xec>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a94:	4b2f      	ldr	r3, [pc, #188]	@ (8001b54 <MX_ADC1_Init+0xec>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a9a:	4b2e      	ldr	r3, [pc, #184]	@ (8001b54 <MX_ADC1_Init+0xec>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001aa2:	4b2c      	ldr	r3, [pc, #176]	@ (8001b54 <MX_ADC1_Init+0xec>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001aa8:	4b2a      	ldr	r3, [pc, #168]	@ (8001b54 <MX_ADC1_Init+0xec>)
 8001aaa:	4a2c      	ldr	r2, [pc, #176]	@ (8001b5c <MX_ADC1_Init+0xf4>)
 8001aac:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001aae:	4b29      	ldr	r3, [pc, #164]	@ (8001b54 <MX_ADC1_Init+0xec>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001ab4:	4b27      	ldr	r3, [pc, #156]	@ (8001b54 <MX_ADC1_Init+0xec>)
 8001ab6:	2204      	movs	r2, #4
 8001ab8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001aba:	4b26      	ldr	r3, [pc, #152]	@ (8001b54 <MX_ADC1_Init+0xec>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001ac2:	4b24      	ldr	r3, [pc, #144]	@ (8001b54 <MX_ADC1_Init+0xec>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ac8:	4822      	ldr	r0, [pc, #136]	@ (8001b54 <MX_ADC1_Init+0xec>)
 8001aca:	f002 fe8f 	bl	80047ec <HAL_ADC_Init>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001ad4:	f001 ffb2 	bl	8003a3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001adc:	2301      	movs	r3, #1
 8001ade:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ae4:	463b      	mov	r3, r7
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	481a      	ldr	r0, [pc, #104]	@ (8001b54 <MX_ADC1_Init+0xec>)
 8001aea:	f002 ffd1 	bl	8004a90 <HAL_ADC_ConfigChannel>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001af4:	f001 ffa2 	bl	8003a3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001af8:	2302      	movs	r3, #2
 8001afa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001afc:	2302      	movs	r3, #2
 8001afe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b00:	463b      	mov	r3, r7
 8001b02:	4619      	mov	r1, r3
 8001b04:	4813      	ldr	r0, [pc, #76]	@ (8001b54 <MX_ADC1_Init+0xec>)
 8001b06:	f002 ffc3 	bl	8004a90 <HAL_ADC_ConfigChannel>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001b10:	f001 ff94 	bl	8003a3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001b14:	2303      	movs	r3, #3
 8001b16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b1c:	463b      	mov	r3, r7
 8001b1e:	4619      	mov	r1, r3
 8001b20:	480c      	ldr	r0, [pc, #48]	@ (8001b54 <MX_ADC1_Init+0xec>)
 8001b22:	f002 ffb5 	bl	8004a90 <HAL_ADC_ConfigChannel>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001b2c:	f001 ff86 	bl	8003a3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001b30:	2304      	movs	r3, #4
 8001b32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001b34:	2304      	movs	r3, #4
 8001b36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b38:	463b      	mov	r3, r7
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4805      	ldr	r0, [pc, #20]	@ (8001b54 <MX_ADC1_Init+0xec>)
 8001b3e:	f002 ffa7 	bl	8004a90 <HAL_ADC_ConfigChannel>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001b48:	f001 ff78 	bl	8003a3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b4c:	bf00      	nop
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	2000040c 	.word	0x2000040c
 8001b58:	40012000 	.word	0x40012000
 8001b5c:	0f000001 	.word	0x0f000001

08001b60 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08a      	sub	sp, #40	@ 0x28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b68:	f107 0314 	add.w	r3, r7, #20
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a2f      	ldr	r2, [pc, #188]	@ (8001c3c <HAL_ADC_MspInit+0xdc>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d157      	bne.n	8001c32 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	4b2e      	ldr	r3, [pc, #184]	@ (8001c40 <HAL_ADC_MspInit+0xe0>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8a:	4a2d      	ldr	r2, [pc, #180]	@ (8001c40 <HAL_ADC_MspInit+0xe0>)
 8001b8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b90:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b92:	4b2b      	ldr	r3, [pc, #172]	@ (8001c40 <HAL_ADC_MspInit+0xe0>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	4b27      	ldr	r3, [pc, #156]	@ (8001c40 <HAL_ADC_MspInit+0xe0>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba6:	4a26      	ldr	r2, [pc, #152]	@ (8001c40 <HAL_ADC_MspInit+0xe0>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bae:	4b24      	ldr	r3, [pc, #144]	@ (8001c40 <HAL_ADC_MspInit+0xe0>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ANALOG1_Pin|ANALOG2_Pin|ANALOG3_Pin|ANALOG4_Pin;
 8001bba:	231e      	movs	r3, #30
 8001bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc6:	f107 0314 	add.w	r3, r7, #20
 8001bca:	4619      	mov	r1, r3
 8001bcc:	481d      	ldr	r0, [pc, #116]	@ (8001c44 <HAL_ADC_MspInit+0xe4>)
 8001bce:	f003 fe51 	bl	8005874 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001bd2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c48 <HAL_ADC_MspInit+0xe8>)
 8001bd4:	4a1d      	ldr	r2, [pc, #116]	@ (8001c4c <HAL_ADC_MspInit+0xec>)
 8001bd6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c48 <HAL_ADC_MspInit+0xe8>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bde:	4b1a      	ldr	r3, [pc, #104]	@ (8001c48 <HAL_ADC_MspInit+0xe8>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001be4:	4b18      	ldr	r3, [pc, #96]	@ (8001c48 <HAL_ADC_MspInit+0xe8>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001bea:	4b17      	ldr	r3, [pc, #92]	@ (8001c48 <HAL_ADC_MspInit+0xe8>)
 8001bec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bf0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bf2:	4b15      	ldr	r3, [pc, #84]	@ (8001c48 <HAL_ADC_MspInit+0xe8>)
 8001bf4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001bf8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bfa:	4b13      	ldr	r3, [pc, #76]	@ (8001c48 <HAL_ADC_MspInit+0xe8>)
 8001bfc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c00:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001c02:	4b11      	ldr	r3, [pc, #68]	@ (8001c48 <HAL_ADC_MspInit+0xe8>)
 8001c04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c08:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c48 <HAL_ADC_MspInit+0xe8>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c10:	4b0d      	ldr	r3, [pc, #52]	@ (8001c48 <HAL_ADC_MspInit+0xe8>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c16:	480c      	ldr	r0, [pc, #48]	@ (8001c48 <HAL_ADC_MspInit+0xe8>)
 8001c18:	f003 fabc 	bl	8005194 <HAL_DMA_Init>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001c22:	f001 ff0b 	bl	8003a3c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a07      	ldr	r2, [pc, #28]	@ (8001c48 <HAL_ADC_MspInit+0xe8>)
 8001c2a:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c2c:	4a06      	ldr	r2, [pc, #24]	@ (8001c48 <HAL_ADC_MspInit+0xe8>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001c32:	bf00      	nop
 8001c34:	3728      	adds	r7, #40	@ 0x28
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40012000 	.word	0x40012000
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40020000 	.word	0x40020000
 8001c48:	20000454 	.word	0x20000454
 8001c4c:	40026410 	.word	0x40026410

08001c50 <bno055_init>:
 *
 *  Return:
 *  > `bool`: `true` if none of the init steps fail, `false` else
 * ---------------------------------------------------------------
 */
error_bno bno055_init(bno055_t* imu) {
 8001c50:	b590      	push	{r4, r7, lr}
 8001c52:	b0af      	sub	sp, #188	@ 0xbc
 8001c54:	af2a      	add	r7, sp, #168	@ 0xa8
 8001c56:	6078      	str	r0, [r7, #4]
    u8 id = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	73bb      	strb	r3, [r7, #14]
    error_bno err;

    imu->addr = (imu->addr << 1);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	799b      	ldrb	r3, [r3, #6]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	719a      	strb	r2, [r3, #6]
    err = bno055_read_regs(*imu, BNO_CHIP_ID, &id, 1);
 8001c68:	687c      	ldr	r4, [r7, #4]
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001c6e:	f107 030e 	add.w	r3, r7, #14
 8001c72:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001c74:	2300      	movs	r3, #0
 8001c76:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001c78:	4668      	mov	r0, sp
 8001c7a:	f104 0310 	add.w	r3, r4, #16
 8001c7e:	229c      	movs	r2, #156	@ 0x9c
 8001c80:	4619      	mov	r1, r3
 8001c82:	f00c ff88 	bl	800eb96 <memcpy>
 8001c86:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c8a:	f001 fb6a 	bl	8003362 <bno055_read_regs>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <bno055_init+0x4c>
        return err;
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
 8001c9a:	e0b6      	b.n	8001e0a <bno055_init+0x1ba>
    }
    if (id != BNO_DEF_CHIP_ID) {
 8001c9c:	7bbb      	ldrb	r3, [r7, #14]
 8001c9e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001ca0:	d001      	beq.n	8001ca6 <bno055_init+0x56>
        return BNO_ERR_WRONG_CHIP_ID;
 8001ca2:	2306      	movs	r3, #6
 8001ca4:	e0b1      	b.n	8001e0a <bno055_init+0x1ba>
    }
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f001 fa90 	bl	80031ce <bno055_set_opmode>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	73fb      	strb	r3, [r7, #15]
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <bno055_init+0x6c>
        return err;
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
 8001cba:	e0a6      	b.n	8001e0a <bno055_init+0x1ba>
    }
    osDelay(2);
 8001cbc:	2002      	movs	r0, #2
 8001cbe:	f007 ffc3 	bl	8009c48 <osDelay>
    bno055_reset(imu);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f001 fb07 	bl	80032d6 <bno055_reset>
    osDelay(5000);
 8001cc8:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001ccc:	f007 ffbc 	bl	8009c48 <osDelay>
    if ((err = bno055_set_pwr_mode(imu, BNO_PWR_NORMAL)) != BNO_OK) {
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f001 faa2 	bl	800321c <bno055_set_pwr_mode>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	73fb      	strb	r3, [r7, #15]
 8001cdc:	7bfb      	ldrb	r3, [r7, #15]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <bno055_init+0x96>
        return err;
 8001ce2:	7bfb      	ldrb	r3, [r7, #15]
 8001ce4:	e091      	b.n	8001e0a <bno055_init+0x1ba>
    }
    osDelay(10);
 8001ce6:	200a      	movs	r0, #10
 8001ce8:	f007 ffae 	bl	8009c48 <osDelay>
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8001cec:	2100      	movs	r1, #0
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f001 fb9b 	bl	800342a <bno055_set_page>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	73fb      	strb	r3, [r7, #15]
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <bno055_init+0xb2>
        return err;
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
 8001d00:	e083      	b.n	8001e0a <bno055_init+0x1ba>
    }
    osDelay(BNO_CONFIG_TIME_DELAY + 5);
 8001d02:	200c      	movs	r0, #12
 8001d04:	f007 ffa0 	bl	8009c48 <osDelay>
    bno055_on(imu);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f001 fb07 	bl	800331c <bno055_on>
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	791b      	ldrb	r3, [r3, #4]
 8001d12:	4619      	mov	r1, r3
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f001 fa5a 	bl	80031ce <bno055_set_opmode>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	73fb      	strb	r3, [r7, #15]
 8001d1e:	7bfb      	ldrb	r3, [r7, #15]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <bno055_init+0xd8>
        return err;
 8001d24:	7bfb      	ldrb	r3, [r7, #15]
 8001d26:	e070      	b.n	8001e0a <bno055_init+0x1ba>
    }
    osDelay(BNO_ANY_TIME_DELAY + 5);
 8001d28:	2018      	movs	r0, #24
 8001d2a:	f007 ff8d 	bl	8009c48 <osDelay>

    imu->temperature = &bno055_temperature;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a38      	ldr	r2, [pc, #224]	@ (8001e14 <bno055_init+0x1c4>)
 8001d32:	625a      	str	r2, [r3, #36]	@ 0x24
    imu->acc_x = &bno055_acc_x;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a38      	ldr	r2, [pc, #224]	@ (8001e18 <bno055_init+0x1c8>)
 8001d38:	629a      	str	r2, [r3, #40]	@ 0x28
    imu->acc_y = &bno055_acc_y;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a37      	ldr	r2, [pc, #220]	@ (8001e1c <bno055_init+0x1cc>)
 8001d3e:	62da      	str	r2, [r3, #44]	@ 0x2c
    imu->acc_z = &bno055_acc_z;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a37      	ldr	r2, [pc, #220]	@ (8001e20 <bno055_init+0x1d0>)
 8001d44:	631a      	str	r2, [r3, #48]	@ 0x30
    imu->acc = &bno055_acc;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a36      	ldr	r2, [pc, #216]	@ (8001e24 <bno055_init+0x1d4>)
 8001d4a:	635a      	str	r2, [r3, #52]	@ 0x34
    imu->linear_acc_x = &bno055_linear_acc_x;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a36      	ldr	r2, [pc, #216]	@ (8001e28 <bno055_init+0x1d8>)
 8001d50:	639a      	str	r2, [r3, #56]	@ 0x38
    imu->linear_acc_y = &bno055_linear_acc_y;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a35      	ldr	r2, [pc, #212]	@ (8001e2c <bno055_init+0x1dc>)
 8001d56:	63da      	str	r2, [r3, #60]	@ 0x3c
    imu->linear_acc_z = &bno055_linear_acc_z;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a35      	ldr	r2, [pc, #212]	@ (8001e30 <bno055_init+0x1e0>)
 8001d5c:	641a      	str	r2, [r3, #64]	@ 0x40
    imu->linear_acc = &bno055_linear_acc;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a34      	ldr	r2, [pc, #208]	@ (8001e34 <bno055_init+0x1e4>)
 8001d62:	645a      	str	r2, [r3, #68]	@ 0x44
    imu->gyro_x = &bno055_gyro_x;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a34      	ldr	r2, [pc, #208]	@ (8001e38 <bno055_init+0x1e8>)
 8001d68:	649a      	str	r2, [r3, #72]	@ 0x48
    imu->gyro_y = &bno055_gyro_y;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a33      	ldr	r2, [pc, #204]	@ (8001e3c <bno055_init+0x1ec>)
 8001d6e:	64da      	str	r2, [r3, #76]	@ 0x4c
    imu->gyro_z = &bno055_gyro_z;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a33      	ldr	r2, [pc, #204]	@ (8001e40 <bno055_init+0x1f0>)
 8001d74:	651a      	str	r2, [r3, #80]	@ 0x50
    imu->gyro = &bno055_gyro;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a32      	ldr	r2, [pc, #200]	@ (8001e44 <bno055_init+0x1f4>)
 8001d7a:	655a      	str	r2, [r3, #84]	@ 0x54
    imu->mag_x = &bno055_mag_x;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a32      	ldr	r2, [pc, #200]	@ (8001e48 <bno055_init+0x1f8>)
 8001d80:	659a      	str	r2, [r3, #88]	@ 0x58
    imu->mag_y = &bno055_mag_y;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a31      	ldr	r2, [pc, #196]	@ (8001e4c <bno055_init+0x1fc>)
 8001d86:	65da      	str	r2, [r3, #92]	@ 0x5c
    imu->mag_z = &bno055_mag_z;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a31      	ldr	r2, [pc, #196]	@ (8001e50 <bno055_init+0x200>)
 8001d8c:	661a      	str	r2, [r3, #96]	@ 0x60
    imu->mag = &bno055_mag;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a30      	ldr	r2, [pc, #192]	@ (8001e54 <bno055_init+0x204>)
 8001d92:	665a      	str	r2, [r3, #100]	@ 0x64
    imu->gravity_x = &bno055_gravity_x;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a30      	ldr	r2, [pc, #192]	@ (8001e58 <bno055_init+0x208>)
 8001d98:	669a      	str	r2, [r3, #104]	@ 0x68
    imu->gravity_y = &bno055_gravity_y;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a2f      	ldr	r2, [pc, #188]	@ (8001e5c <bno055_init+0x20c>)
 8001d9e:	66da      	str	r2, [r3, #108]	@ 0x6c
    imu->gravity_z = &bno055_gravity_z;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a2f      	ldr	r2, [pc, #188]	@ (8001e60 <bno055_init+0x210>)
 8001da4:	671a      	str	r2, [r3, #112]	@ 0x70
    imu->gravity = &bno055_gravity;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a2e      	ldr	r2, [pc, #184]	@ (8001e64 <bno055_init+0x214>)
 8001daa:	675a      	str	r2, [r3, #116]	@ 0x74
    imu->euler_yaw = &bno055_euler_yaw;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a2e      	ldr	r2, [pc, #184]	@ (8001e68 <bno055_init+0x218>)
 8001db0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    imu->euler_roll = &bno055_euler_roll;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a2d      	ldr	r2, [pc, #180]	@ (8001e6c <bno055_init+0x21c>)
 8001db8:	679a      	str	r2, [r3, #120]	@ 0x78
    imu->euler_pitch = &bno055_euler_pitch;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a2c      	ldr	r2, [pc, #176]	@ (8001e70 <bno055_init+0x220>)
 8001dbe:	67da      	str	r2, [r3, #124]	@ 0x7c
    imu->euler = &bno055_euler;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a2c      	ldr	r2, [pc, #176]	@ (8001e74 <bno055_init+0x224>)
 8001dc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    imu->quaternion_w = &bno055_quaternion_w;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a2b      	ldr	r2, [pc, #172]	@ (8001e78 <bno055_init+0x228>)
 8001dcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    imu->quaternion_x = &bno055_quaternion_x;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a2a      	ldr	r2, [pc, #168]	@ (8001e7c <bno055_init+0x22c>)
 8001dd4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    imu->quaternion_y = &bno055_quaternion_y;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a29      	ldr	r2, [pc, #164]	@ (8001e80 <bno055_init+0x230>)
 8001ddc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    imu->quaternion_z = &bno055_quaternion_z;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a28      	ldr	r2, [pc, #160]	@ (8001e84 <bno055_init+0x234>)
 8001de4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    imu->quaternion = &bno055_quaternion;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a27      	ldr	r2, [pc, #156]	@ (8001e88 <bno055_init+0x238>)
 8001dec:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

    imu->acc_config = &bno055_acc_conf;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a26      	ldr	r2, [pc, #152]	@ (8001e8c <bno055_init+0x23c>)
 8001df4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    imu->gyr_config = &bno055_gyr_conf;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a25      	ldr	r2, [pc, #148]	@ (8001e90 <bno055_init+0x240>)
 8001dfc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    imu->mag_config = &bno055_mag_conf;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a24      	ldr	r2, [pc, #144]	@ (8001e94 <bno055_init+0x244>)
 8001e04:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
    return BNO_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd90      	pop	{r4, r7, pc}
 8001e12:	bf00      	nop
 8001e14:	08001e99 	.word	0x08001e99
 8001e18:	08001f01 	.word	0x08001f01
 8001e1c:	08001f81 	.word	0x08001f81
 8001e20:	08002001 	.word	0x08002001
 8001e24:	08002081 	.word	0x08002081
 8001e28:	08002151 	.word	0x08002151
 8001e2c:	080021d1 	.word	0x080021d1
 8001e30:	08002251 	.word	0x08002251
 8001e34:	080022d1 	.word	0x080022d1
 8001e38:	080023a1 	.word	0x080023a1
 8001e3c:	08002421 	.word	0x08002421
 8001e40:	080024a1 	.word	0x080024a1
 8001e44:	08002521 	.word	0x08002521
 8001e48:	080025f1 	.word	0x080025f1
 8001e4c:	0800265f 	.word	0x0800265f
 8001e50:	080026cd 	.word	0x080026cd
 8001e54:	0800273b 	.word	0x0800273b
 8001e58:	080027f5 	.word	0x080027f5
 8001e5c:	08002879 	.word	0x08002879
 8001e60:	080028fd 	.word	0x080028fd
 8001e64:	08002981 	.word	0x08002981
 8001e68:	08002a51 	.word	0x08002a51
 8001e6c:	08002ad5 	.word	0x08002ad5
 8001e70:	08002b59 	.word	0x08002b59
 8001e74:	08002bdd 	.word	0x08002bdd
 8001e78:	08002cad 	.word	0x08002cad
 8001e7c:	08002d21 	.word	0x08002d21
 8001e80:	08002d95 	.word	0x08002d95
 8001e84:	08002e09 	.word	0x08002e09
 8001e88:	08002e7d 	.word	0x08002e7d
 8001e8c:	08002f61 	.word	0x08002f61
 8001e90:	08003031 	.word	0x08003031
 8001e94:	080030ff 	.word	0x080030ff

08001e98 <bno055_temperature>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, `BNO_ERR_X` else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_temperature(bno055_t* imu, s8* buf) {
 8001e98:	b590      	push	{r4, r7, lr}
 8001e9a:	b0af      	sub	sp, #188	@ 0xbc
 8001e9c:	af2a      	add	r7, sp, #168	@ 0xa8
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data = 0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_read_regs(*imu, BNO_TEMP, &data, 1)) != BNO_OK) {
 8001ea6:	687c      	ldr	r4, [r7, #4]
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001eac:	f107 030e 	add.w	r3, r7, #14
 8001eb0:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001eb2:	2334      	movs	r3, #52	@ 0x34
 8001eb4:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001eb6:	4668      	mov	r0, sp
 8001eb8:	f104 0310 	add.w	r3, r4, #16
 8001ebc:	229c      	movs	r2, #156	@ 0x9c
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	f00c fe69 	bl	800eb96 <memcpy>
 8001ec4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ec8:	f001 fa4b 	bl	8003362 <bno055_read_regs>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	73fb      	strb	r3, [r7, #15]
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <bno055_temperature+0x42>
        return err;
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
 8001ed8:	e00d      	b.n	8001ef6 <bno055_temperature+0x5e>
    }
    *buf = (imu->_temp_unit) ? data * 2 : data;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	7bdb      	ldrb	r3, [r3, #15]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d004      	beq.n	8001eec <bno055_temperature+0x54>
 8001ee2:	7bbb      	ldrb	r3, [r7, #14]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	b25b      	sxtb	r3, r3
 8001eea:	e001      	b.n	8001ef0 <bno055_temperature+0x58>
 8001eec:	7bbb      	ldrb	r3, [r7, #14]
 8001eee:	b25b      	sxtb	r3, r3
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	7013      	strb	r3, [r2, #0]
    return BNO_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd90      	pop	{r4, r7, pc}
	...

08001f00 <bno055_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_x(bno055_t* imu, f32* buf) {
 8001f00:	b590      	push	{r4, r7, lr}
 8001f02:	b0af      	sub	sp, #188	@ 0xbc
 8001f04:	af2a      	add	r7, sp, #168	@ 0xa8
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 2)) != BNO_OK) {
 8001f0a:	687c      	ldr	r4, [r7, #4]
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001f10:	f107 030c 	add.w	r3, r7, #12
 8001f14:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001f16:	2308      	movs	r3, #8
 8001f18:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001f1a:	4668      	mov	r0, sp
 8001f1c:	f104 0310 	add.w	r3, r4, #16
 8001f20:	229c      	movs	r2, #156	@ 0x9c
 8001f22:	4619      	mov	r1, r3
 8001f24:	f00c fe37 	bl	800eb96 <memcpy>
 8001f28:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f2c:	f001 fa19 	bl	8003362 <bno055_read_regs>
 8001f30:	4603      	mov	r3, r0
 8001f32:	73fb      	strb	r3, [r7, #15]
 8001f34:	7bfb      	ldrb	r3, [r7, #15]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <bno055_acc_x+0x3e>
        return err;
 8001f3a:	7bfb      	ldrb	r3, [r7, #15]
 8001f3c:	e01a      	b.n	8001f74 <bno055_acc_x+0x74>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001f3e:	7b7b      	ldrb	r3, [r7, #13]
 8001f40:	b21b      	sxth	r3, r3
 8001f42:	021b      	lsls	r3, r3, #8
 8001f44:	b21a      	sxth	r2, r3
 8001f46:	7b3b      	ldrb	r3, [r7, #12]
 8001f48:	b21b      	sxth	r3, r3
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	b21b      	sxth	r3, r3
 8001f4e:	ee07 3a90 	vmov	s15, r3
 8001f52:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d102      	bne.n	8001f64 <bno055_acc_x+0x64>
 8001f5e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001f7c <bno055_acc_x+0x7c>
 8001f62:	e001      	b.n	8001f68 <bno055_acc_x+0x68>
 8001f64:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8001f68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001f72:	2300      	movs	r3, #0
};
 8001f74:	4618      	mov	r0, r3
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd90      	pop	{r4, r7, pc}
 8001f7c:	42c80000 	.word	0x42c80000

08001f80 <bno055_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_y(bno055_t* imu, f32* buf) {
 8001f80:	b590      	push	{r4, r7, lr}
 8001f82:	b0af      	sub	sp, #188	@ 0xbc
 8001f84:	af2a      	add	r7, sp, #168	@ 0xa8
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8001f8a:	687c      	ldr	r4, [r7, #4]
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8001f90:	f107 030c 	add.w	r3, r7, #12
 8001f94:	9328      	str	r3, [sp, #160]	@ 0xa0
 8001f96:	230a      	movs	r3, #10
 8001f98:	9327      	str	r3, [sp, #156]	@ 0x9c
 8001f9a:	4668      	mov	r0, sp
 8001f9c:	f104 0310 	add.w	r3, r4, #16
 8001fa0:	229c      	movs	r2, #156	@ 0x9c
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	f00c fdf7 	bl	800eb96 <memcpy>
 8001fa8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001fac:	f001 f9d9 	bl	8003362 <bno055_read_regs>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	73fb      	strb	r3, [r7, #15]
 8001fb4:	7bfb      	ldrb	r3, [r7, #15]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <bno055_acc_y+0x3e>
        return err;
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
 8001fbc:	e01a      	b.n	8001ff4 <bno055_acc_y+0x74>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8001fbe:	7b7b      	ldrb	r3, [r7, #13]
 8001fc0:	b21b      	sxth	r3, r3
 8001fc2:	021b      	lsls	r3, r3, #8
 8001fc4:	b21a      	sxth	r2, r3
 8001fc6:	7b3b      	ldrb	r3, [r7, #12]
 8001fc8:	b21b      	sxth	r3, r3
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	b21b      	sxth	r3, r3
 8001fce:	ee07 3a90 	vmov	s15, r3
 8001fd2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d102      	bne.n	8001fe4 <bno055_acc_y+0x64>
 8001fde:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001ffc <bno055_acc_y+0x7c>
 8001fe2:	e001      	b.n	8001fe8 <bno055_acc_y+0x68>
 8001fe4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8001fe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8001ff2:	2300      	movs	r3, #0
};
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3714      	adds	r7, #20
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd90      	pop	{r4, r7, pc}
 8001ffc:	42c80000 	.word	0x42c80000

08002000 <bno055_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_z(bno055_t* imu, f32* buf) {
 8002000:	b590      	push	{r4, r7, lr}
 8002002:	b0af      	sub	sp, #188	@ 0xbc
 8002004:	af2a      	add	r7, sp, #168	@ 0xa8
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Z_LSB, data, 2)) != BNO_OK) {
 800200a:	687c      	ldr	r4, [r7, #4]
 800200c:	2302      	movs	r3, #2
 800200e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002010:	f107 030c 	add.w	r3, r7, #12
 8002014:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002016:	230c      	movs	r3, #12
 8002018:	9327      	str	r3, [sp, #156]	@ 0x9c
 800201a:	4668      	mov	r0, sp
 800201c:	f104 0310 	add.w	r3, r4, #16
 8002020:	229c      	movs	r2, #156	@ 0x9c
 8002022:	4619      	mov	r1, r3
 8002024:	f00c fdb7 	bl	800eb96 <memcpy>
 8002028:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800202c:	f001 f999 	bl	8003362 <bno055_read_regs>
 8002030:	4603      	mov	r3, r0
 8002032:	73fb      	strb	r3, [r7, #15]
 8002034:	7bfb      	ldrb	r3, [r7, #15]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <bno055_acc_z+0x3e>
        return err;
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	e01a      	b.n	8002074 <bno055_acc_z+0x74>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 800203e:	7b7b      	ldrb	r3, [r7, #13]
 8002040:	b21b      	sxth	r3, r3
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	b21a      	sxth	r2, r3
 8002046:	7b3b      	ldrb	r3, [r7, #12]
 8002048:	b21b      	sxth	r3, r3
 800204a:	4313      	orrs	r3, r2
 800204c:	b21b      	sxth	r3, r3
 800204e:	ee07 3a90 	vmov	s15, r3
 8002052:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 800205a:	2b00      	cmp	r3, #0
 800205c:	d102      	bne.n	8002064 <bno055_acc_z+0x64>
 800205e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800207c <bno055_acc_z+0x7c>
 8002062:	e001      	b.n	8002068 <bno055_acc_z+0x68>
 8002064:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8002068:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002072:	2300      	movs	r3, #0
};
 8002074:	4618      	mov	r0, r3
 8002076:	3714      	adds	r7, #20
 8002078:	46bd      	mov	sp, r7
 800207a:	bd90      	pop	{r4, r7, pc}
 800207c:	42c80000 	.word	0x42c80000

08002080 <bno055_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 8002080:	b590      	push	{r4, r7, lr}
 8002082:	b0b1      	sub	sp, #196	@ 0xc4
 8002084:	af2a      	add	r7, sp, #168	@ 0xa8
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 6)) != BNO_OK) {
 800208a:	687c      	ldr	r4, [r7, #4]
 800208c:	2306      	movs	r3, #6
 800208e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002090:	f107 0308 	add.w	r3, r7, #8
 8002094:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002096:	2308      	movs	r3, #8
 8002098:	9327      	str	r3, [sp, #156]	@ 0x9c
 800209a:	4668      	mov	r0, sp
 800209c:	f104 0310 	add.w	r3, r4, #16
 80020a0:	229c      	movs	r2, #156	@ 0x9c
 80020a2:	4619      	mov	r1, r3
 80020a4:	f00c fd77 	bl	800eb96 <memcpy>
 80020a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80020ac:	f001 f959 	bl	8003362 <bno055_read_regs>
 80020b0:	4603      	mov	r3, r0
 80020b2:	75fb      	strb	r3, [r7, #23]
 80020b4:	7dfb      	ldrb	r3, [r7, #23]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <bno055_acc+0x3e>
        return err;
 80020ba:	7dfb      	ldrb	r3, [r7, #23]
 80020bc:	e042      	b.n	8002144 <bno055_acc+0xc4>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <bno055_acc+0x4a>
 80020c6:	4b21      	ldr	r3, [pc, #132]	@ (800214c <bno055_acc+0xcc>)
 80020c8:	e001      	b.n	80020ce <bno055_acc+0x4e>
 80020ca:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80020ce:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 80020d0:	7a7b      	ldrb	r3, [r7, #9]
 80020d2:	b21b      	sxth	r3, r3
 80020d4:	021b      	lsls	r3, r3, #8
 80020d6:	b21a      	sxth	r2, r3
 80020d8:	7a3b      	ldrb	r3, [r7, #8]
 80020da:	b21b      	sxth	r3, r3
 80020dc:	4313      	orrs	r3, r2
 80020de:	b21b      	sxth	r3, r3
 80020e0:	ee07 3a90 	vmov	s15, r3
 80020e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80020e8:	ed97 7a04 	vldr	s14, [r7, #16]
 80020ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 80020f6:	7afb      	ldrb	r3, [r7, #11]
 80020f8:	b21b      	sxth	r3, r3
 80020fa:	021b      	lsls	r3, r3, #8
 80020fc:	b21a      	sxth	r2, r3
 80020fe:	7abb      	ldrb	r3, [r7, #10]
 8002100:	b21b      	sxth	r3, r3
 8002102:	4313      	orrs	r3, r2
 8002104:	b21b      	sxth	r3, r3
 8002106:	ee07 3a90 	vmov	s15, r3
 800210a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800210e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002112:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 800211c:	7b7b      	ldrb	r3, [r7, #13]
 800211e:	b21b      	sxth	r3, r3
 8002120:	021b      	lsls	r3, r3, #8
 8002122:	b21a      	sxth	r2, r3
 8002124:	7b3b      	ldrb	r3, [r7, #12]
 8002126:	b21b      	sxth	r3, r3
 8002128:	4313      	orrs	r3, r2
 800212a:	b21b      	sxth	r3, r3
 800212c:	ee07 3a90 	vmov	s15, r3
 8002130:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002134:	ed97 7a04 	vldr	s14, [r7, #16]
 8002138:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8002142:	2300      	movs	r3, #0
};
 8002144:	4618      	mov	r0, r3
 8002146:	371c      	adds	r7, #28
 8002148:	46bd      	mov	sp, r7
 800214a:	bd90      	pop	{r4, r7, pc}
 800214c:	42c80000 	.word	0x42c80000

08002150 <bno055_linear_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_x(bno055_t* imu, f32* buf) {
 8002150:	b590      	push	{r4, r7, lr}
 8002152:	b0af      	sub	sp, #188	@ 0xbc
 8002154:	af2a      	add	r7, sp, #168	@ 0xa8
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 2)) != BNO_OK) {
 800215a:	687c      	ldr	r4, [r7, #4]
 800215c:	2302      	movs	r3, #2
 800215e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002160:	f107 030c 	add.w	r3, r7, #12
 8002164:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002166:	2328      	movs	r3, #40	@ 0x28
 8002168:	9327      	str	r3, [sp, #156]	@ 0x9c
 800216a:	4668      	mov	r0, sp
 800216c:	f104 0310 	add.w	r3, r4, #16
 8002170:	229c      	movs	r2, #156	@ 0x9c
 8002172:	4619      	mov	r1, r3
 8002174:	f00c fd0f 	bl	800eb96 <memcpy>
 8002178:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800217c:	f001 f8f1 	bl	8003362 <bno055_read_regs>
 8002180:	4603      	mov	r3, r0
 8002182:	73fb      	strb	r3, [r7, #15]
 8002184:	7bfb      	ldrb	r3, [r7, #15]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <bno055_linear_acc_x+0x3e>
        return err;
 800218a:	7bfb      	ldrb	r3, [r7, #15]
 800218c:	e01a      	b.n	80021c4 <bno055_linear_acc_x+0x74>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 800218e:	7b7b      	ldrb	r3, [r7, #13]
 8002190:	b21b      	sxth	r3, r3
 8002192:	021b      	lsls	r3, r3, #8
 8002194:	b21a      	sxth	r2, r3
 8002196:	7b3b      	ldrb	r3, [r7, #12]
 8002198:	b21b      	sxth	r3, r3
 800219a:	4313      	orrs	r3, r2
 800219c:	b21b      	sxth	r3, r3
 800219e:	ee07 3a90 	vmov	s15, r3
 80021a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d102      	bne.n	80021b4 <bno055_linear_acc_x+0x64>
 80021ae:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80021cc <bno055_linear_acc_x+0x7c>
 80021b2:	e001      	b.n	80021b8 <bno055_linear_acc_x+0x68>
 80021b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 80021b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80021c2:	2300      	movs	r3, #0
};
 80021c4:	4618      	mov	r0, r3
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd90      	pop	{r4, r7, pc}
 80021cc:	42c80000 	.word	0x42c80000

080021d0 <bno055_linear_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_y(bno055_t* imu, f32* buf) {
 80021d0:	b590      	push	{r4, r7, lr}
 80021d2:	b0af      	sub	sp, #188	@ 0xbc
 80021d4:	af2a      	add	r7, sp, #168	@ 0xa8
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80021da:	687c      	ldr	r4, [r7, #4]
 80021dc:	2302      	movs	r3, #2
 80021de:	9329      	str	r3, [sp, #164]	@ 0xa4
 80021e0:	f107 030c 	add.w	r3, r7, #12
 80021e4:	9328      	str	r3, [sp, #160]	@ 0xa0
 80021e6:	232a      	movs	r3, #42	@ 0x2a
 80021e8:	9327      	str	r3, [sp, #156]	@ 0x9c
 80021ea:	4668      	mov	r0, sp
 80021ec:	f104 0310 	add.w	r3, r4, #16
 80021f0:	229c      	movs	r2, #156	@ 0x9c
 80021f2:	4619      	mov	r1, r3
 80021f4:	f00c fccf 	bl	800eb96 <memcpy>
 80021f8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80021fc:	f001 f8b1 	bl	8003362 <bno055_read_regs>
 8002200:	4603      	mov	r3, r0
 8002202:	73fb      	strb	r3, [r7, #15]
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <bno055_linear_acc_y+0x3e>
        return err;
 800220a:	7bfb      	ldrb	r3, [r7, #15]
 800220c:	e01a      	b.n	8002244 <bno055_linear_acc_y+0x74>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 800220e:	7b7b      	ldrb	r3, [r7, #13]
 8002210:	b21b      	sxth	r3, r3
 8002212:	021b      	lsls	r3, r3, #8
 8002214:	b21a      	sxth	r2, r3
 8002216:	7b3b      	ldrb	r3, [r7, #12]
 8002218:	b21b      	sxth	r3, r3
 800221a:	4313      	orrs	r3, r2
 800221c:	b21b      	sxth	r3, r3
 800221e:	ee07 3a90 	vmov	s15, r3
 8002222:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 800222a:	2b00      	cmp	r3, #0
 800222c:	d102      	bne.n	8002234 <bno055_linear_acc_y+0x64>
 800222e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800224c <bno055_linear_acc_y+0x7c>
 8002232:	e001      	b.n	8002238 <bno055_linear_acc_y+0x68>
 8002234:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8002238:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002242:	2300      	movs	r3, #0
};
 8002244:	4618      	mov	r0, r3
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	bd90      	pop	{r4, r7, pc}
 800224c:	42c80000 	.word	0x42c80000

08002250 <bno055_linear_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_z(bno055_t* imu, f32* buf) {
 8002250:	b590      	push	{r4, r7, lr}
 8002252:	b0af      	sub	sp, #188	@ 0xbc
 8002254:	af2a      	add	r7, sp, #168	@ 0xa8
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 800225a:	687c      	ldr	r4, [r7, #4]
 800225c:	2302      	movs	r3, #2
 800225e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002260:	f107 030c 	add.w	r3, r7, #12
 8002264:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002266:	232c      	movs	r3, #44	@ 0x2c
 8002268:	9327      	str	r3, [sp, #156]	@ 0x9c
 800226a:	4668      	mov	r0, sp
 800226c:	f104 0310 	add.w	r3, r4, #16
 8002270:	229c      	movs	r2, #156	@ 0x9c
 8002272:	4619      	mov	r1, r3
 8002274:	f00c fc8f 	bl	800eb96 <memcpy>
 8002278:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800227c:	f001 f871 	bl	8003362 <bno055_read_regs>
 8002280:	4603      	mov	r3, r0
 8002282:	73fb      	strb	r3, [r7, #15]
 8002284:	7bfb      	ldrb	r3, [r7, #15]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <bno055_linear_acc_z+0x3e>
        return err;
 800228a:	7bfb      	ldrb	r3, [r7, #15]
 800228c:	e01a      	b.n	80022c4 <bno055_linear_acc_z+0x74>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 800228e:	7b7b      	ldrb	r3, [r7, #13]
 8002290:	b21b      	sxth	r3, r3
 8002292:	021b      	lsls	r3, r3, #8
 8002294:	b21a      	sxth	r2, r3
 8002296:	7b3b      	ldrb	r3, [r7, #12]
 8002298:	b21b      	sxth	r3, r3
 800229a:	4313      	orrs	r3, r2
 800229c:	b21b      	sxth	r3, r3
 800229e:	ee07 3a90 	vmov	s15, r3
 80022a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d102      	bne.n	80022b4 <bno055_linear_acc_z+0x64>
 80022ae:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80022cc <bno055_linear_acc_z+0x7c>
 80022b2:	e001      	b.n	80022b8 <bno055_linear_acc_z+0x68>
 80022b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 80022b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80022c2:	2300      	movs	r3, #0
};
 80022c4:	4618      	mov	r0, r3
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd90      	pop	{r4, r7, pc}
 80022cc:	42c80000 	.word	0x42c80000

080022d0 <bno055_linear_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 80022d0:	b590      	push	{r4, r7, lr}
 80022d2:	b0b1      	sub	sp, #196	@ 0xc4
 80022d4:	af2a      	add	r7, sp, #168	@ 0xa8
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 6)) != BNO_OK) {
 80022da:	687c      	ldr	r4, [r7, #4]
 80022dc:	2306      	movs	r3, #6
 80022de:	9329      	str	r3, [sp, #164]	@ 0xa4
 80022e0:	f107 0308 	add.w	r3, r7, #8
 80022e4:	9328      	str	r3, [sp, #160]	@ 0xa0
 80022e6:	2328      	movs	r3, #40	@ 0x28
 80022e8:	9327      	str	r3, [sp, #156]	@ 0x9c
 80022ea:	4668      	mov	r0, sp
 80022ec:	f104 0310 	add.w	r3, r4, #16
 80022f0:	229c      	movs	r2, #156	@ 0x9c
 80022f2:	4619      	mov	r1, r3
 80022f4:	f00c fc4f 	bl	800eb96 <memcpy>
 80022f8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80022fc:	f001 f831 	bl	8003362 <bno055_read_regs>
 8002300:	4603      	mov	r3, r0
 8002302:	75fb      	strb	r3, [r7, #23]
 8002304:	7dfb      	ldrb	r3, [r7, #23]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <bno055_linear_acc+0x3e>
        return err;
 800230a:	7dfb      	ldrb	r3, [r7, #23]
 800230c:	e042      	b.n	8002394 <bno055_linear_acc+0xc4>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <bno055_linear_acc+0x4a>
 8002316:	4b21      	ldr	r3, [pc, #132]	@ (800239c <bno055_linear_acc+0xcc>)
 8002318:	e001      	b.n	800231e <bno055_linear_acc+0x4e>
 800231a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800231e:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8002320:	7a7b      	ldrb	r3, [r7, #9]
 8002322:	b21b      	sxth	r3, r3
 8002324:	021b      	lsls	r3, r3, #8
 8002326:	b21a      	sxth	r2, r3
 8002328:	7a3b      	ldrb	r3, [r7, #8]
 800232a:	b21b      	sxth	r3, r3
 800232c:	4313      	orrs	r3, r2
 800232e:	b21b      	sxth	r3, r3
 8002330:	ee07 3a90 	vmov	s15, r3
 8002334:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002338:	ed97 7a04 	vldr	s14, [r7, #16]
 800233c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8002346:	7afb      	ldrb	r3, [r7, #11]
 8002348:	b21b      	sxth	r3, r3
 800234a:	021b      	lsls	r3, r3, #8
 800234c:	b21a      	sxth	r2, r3
 800234e:	7abb      	ldrb	r3, [r7, #10]
 8002350:	b21b      	sxth	r3, r3
 8002352:	4313      	orrs	r3, r2
 8002354:	b21b      	sxth	r3, r3
 8002356:	ee07 3a90 	vmov	s15, r3
 800235a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800235e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002362:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 800236c:	7b7b      	ldrb	r3, [r7, #13]
 800236e:	b21b      	sxth	r3, r3
 8002370:	021b      	lsls	r3, r3, #8
 8002372:	b21a      	sxth	r2, r3
 8002374:	7b3b      	ldrb	r3, [r7, #12]
 8002376:	b21b      	sxth	r3, r3
 8002378:	4313      	orrs	r3, r2
 800237a:	b21b      	sxth	r3, r3
 800237c:	ee07 3a90 	vmov	s15, r3
 8002380:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002384:	ed97 7a04 	vldr	s14, [r7, #16]
 8002388:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8002392:	2300      	movs	r3, #0
};
 8002394:	4618      	mov	r0, r3
 8002396:	371c      	adds	r7, #28
 8002398:	46bd      	mov	sp, r7
 800239a:	bd90      	pop	{r4, r7, pc}
 800239c:	42c80000 	.word	0x42c80000

080023a0 <bno055_gyro_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_x(bno055_t* imu, f32* buf) {
 80023a0:	b590      	push	{r4, r7, lr}
 80023a2:	b0af      	sub	sp, #188	@ 0xbc
 80023a4:	af2a      	add	r7, sp, #168	@ 0xa8
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 2)) != BNO_OK) {
 80023aa:	687c      	ldr	r4, [r7, #4]
 80023ac:	2302      	movs	r3, #2
 80023ae:	9329      	str	r3, [sp, #164]	@ 0xa4
 80023b0:	f107 030c 	add.w	r3, r7, #12
 80023b4:	9328      	str	r3, [sp, #160]	@ 0xa0
 80023b6:	2314      	movs	r3, #20
 80023b8:	9327      	str	r3, [sp, #156]	@ 0x9c
 80023ba:	4668      	mov	r0, sp
 80023bc:	f104 0310 	add.w	r3, r4, #16
 80023c0:	229c      	movs	r2, #156	@ 0x9c
 80023c2:	4619      	mov	r1, r3
 80023c4:	f00c fbe7 	bl	800eb96 <memcpy>
 80023c8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80023cc:	f000 ffc9 	bl	8003362 <bno055_read_regs>
 80023d0:	4603      	mov	r3, r0
 80023d2:	73fb      	strb	r3, [r7, #15]
 80023d4:	7bfb      	ldrb	r3, [r7, #15]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <bno055_gyro_x+0x3e>
        return err;
 80023da:	7bfb      	ldrb	r3, [r7, #15]
 80023dc:	e01a      	b.n	8002414 <bno055_gyro_x+0x74>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80023de:	7b7b      	ldrb	r3, [r7, #13]
 80023e0:	b21b      	sxth	r3, r3
 80023e2:	021b      	lsls	r3, r3, #8
 80023e4:	b21a      	sxth	r2, r3
 80023e6:	7b3b      	ldrb	r3, [r7, #12]
 80023e8:	b21b      	sxth	r3, r3
 80023ea:	4313      	orrs	r3, r2
 80023ec:	b21b      	sxth	r3, r3
 80023ee:	ee07 3a90 	vmov	s15, r3
 80023f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d102      	bne.n	8002404 <bno055_gyro_x+0x64>
 80023fe:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8002402:	e001      	b.n	8002408 <bno055_gyro_x+0x68>
 8002404:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800241c <bno055_gyro_x+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 8002408:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002412:	2300      	movs	r3, #0
};
 8002414:	4618      	mov	r0, r3
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	bd90      	pop	{r4, r7, pc}
 800241c:	44610000 	.word	0x44610000

08002420 <bno055_gyro_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_y(bno055_t* imu, f32* buf) {
 8002420:	b590      	push	{r4, r7, lr}
 8002422:	b0af      	sub	sp, #188	@ 0xbc
 8002424:	af2a      	add	r7, sp, #168	@ 0xa8
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Y_LSB, data, 2)) != BNO_OK) {
 800242a:	687c      	ldr	r4, [r7, #4]
 800242c:	2302      	movs	r3, #2
 800242e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002430:	f107 030c 	add.w	r3, r7, #12
 8002434:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002436:	2316      	movs	r3, #22
 8002438:	9327      	str	r3, [sp, #156]	@ 0x9c
 800243a:	4668      	mov	r0, sp
 800243c:	f104 0310 	add.w	r3, r4, #16
 8002440:	229c      	movs	r2, #156	@ 0x9c
 8002442:	4619      	mov	r1, r3
 8002444:	f00c fba7 	bl	800eb96 <memcpy>
 8002448:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800244c:	f000 ff89 	bl	8003362 <bno055_read_regs>
 8002450:	4603      	mov	r3, r0
 8002452:	73fb      	strb	r3, [r7, #15]
 8002454:	7bfb      	ldrb	r3, [r7, #15]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <bno055_gyro_y+0x3e>
        return err;
 800245a:	7bfb      	ldrb	r3, [r7, #15]
 800245c:	e01a      	b.n	8002494 <bno055_gyro_y+0x74>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 800245e:	7b7b      	ldrb	r3, [r7, #13]
 8002460:	b21b      	sxth	r3, r3
 8002462:	021b      	lsls	r3, r3, #8
 8002464:	b21a      	sxth	r2, r3
 8002466:	7b3b      	ldrb	r3, [r7, #12]
 8002468:	b21b      	sxth	r3, r3
 800246a:	4313      	orrs	r3, r2
 800246c:	b21b      	sxth	r3, r3
 800246e:	ee07 3a90 	vmov	s15, r3
 8002472:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 800247a:	2b00      	cmp	r3, #0
 800247c:	d102      	bne.n	8002484 <bno055_gyro_y+0x64>
 800247e:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8002482:	e001      	b.n	8002488 <bno055_gyro_y+0x68>
 8002484:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800249c <bno055_gyro_y+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 8002488:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002492:	2300      	movs	r3, #0
};
 8002494:	4618      	mov	r0, r3
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	bd90      	pop	{r4, r7, pc}
 800249c:	44610000 	.word	0x44610000

080024a0 <bno055_gyro_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_z(bno055_t* imu, f32* buf) {
 80024a0:	b590      	push	{r4, r7, lr}
 80024a2:	b0af      	sub	sp, #188	@ 0xbc
 80024a4:	af2a      	add	r7, sp, #168	@ 0xa8
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Z_LSB, data, 2)) != BNO_OK) {
 80024aa:	687c      	ldr	r4, [r7, #4]
 80024ac:	2302      	movs	r3, #2
 80024ae:	9329      	str	r3, [sp, #164]	@ 0xa4
 80024b0:	f107 030c 	add.w	r3, r7, #12
 80024b4:	9328      	str	r3, [sp, #160]	@ 0xa0
 80024b6:	2318      	movs	r3, #24
 80024b8:	9327      	str	r3, [sp, #156]	@ 0x9c
 80024ba:	4668      	mov	r0, sp
 80024bc:	f104 0310 	add.w	r3, r4, #16
 80024c0:	229c      	movs	r2, #156	@ 0x9c
 80024c2:	4619      	mov	r1, r3
 80024c4:	f00c fb67 	bl	800eb96 <memcpy>
 80024c8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80024cc:	f000 ff49 	bl	8003362 <bno055_read_regs>
 80024d0:	4603      	mov	r3, r0
 80024d2:	73fb      	strb	r3, [r7, #15]
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <bno055_gyro_z+0x3e>
        return err;
 80024da:	7bfb      	ldrb	r3, [r7, #15]
 80024dc:	e01a      	b.n	8002514 <bno055_gyro_z+0x74>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80024de:	7b7b      	ldrb	r3, [r7, #13]
 80024e0:	b21b      	sxth	r3, r3
 80024e2:	021b      	lsls	r3, r3, #8
 80024e4:	b21a      	sxth	r2, r3
 80024e6:	7b3b      	ldrb	r3, [r7, #12]
 80024e8:	b21b      	sxth	r3, r3
 80024ea:	4313      	orrs	r3, r2
 80024ec:	b21b      	sxth	r3, r3
 80024ee:	ee07 3a90 	vmov	s15, r3
 80024f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d102      	bne.n	8002504 <bno055_gyro_z+0x64>
 80024fe:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8002502:	e001      	b.n	8002508 <bno055_gyro_z+0x68>
 8002504:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800251c <bno055_gyro_z+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 8002508:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002512:	2300      	movs	r3, #0
};
 8002514:	4618      	mov	r0, r3
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	bd90      	pop	{r4, r7, pc}
 800251c:	44610000 	.word	0x44610000

08002520 <bno055_gyro>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro(bno055_t* imu, bno055_vec3_t* xyz) {
 8002520:	b590      	push	{r4, r7, lr}
 8002522:	b0b1      	sub	sp, #196	@ 0xc4
 8002524:	af2a      	add	r7, sp, #168	@ 0xa8
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 6)) != BNO_OK) {
 800252a:	687c      	ldr	r4, [r7, #4]
 800252c:	2306      	movs	r3, #6
 800252e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002530:	f107 0308 	add.w	r3, r7, #8
 8002534:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002536:	2314      	movs	r3, #20
 8002538:	9327      	str	r3, [sp, #156]	@ 0x9c
 800253a:	4668      	mov	r0, sp
 800253c:	f104 0310 	add.w	r3, r4, #16
 8002540:	229c      	movs	r2, #156	@ 0x9c
 8002542:	4619      	mov	r1, r3
 8002544:	f00c fb27 	bl	800eb96 <memcpy>
 8002548:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800254c:	f000 ff09 	bl	8003362 <bno055_read_regs>
 8002550:	4603      	mov	r3, r0
 8002552:	75fb      	strb	r3, [r7, #23]
 8002554:	7dfb      	ldrb	r3, [r7, #23]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <bno055_gyro+0x3e>
        return err;
 800255a:	7dfb      	ldrb	r3, [r7, #23]
 800255c:	e042      	b.n	80025e4 <bno055_gyro+0xc4>
    }

    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	7c1b      	ldrb	r3, [r3, #16]
                                                     : BNO_GYR_SCALE_RPS;
 8002562:	2b00      	cmp	r3, #0
 8002564:	d102      	bne.n	800256c <bno055_gyro+0x4c>
 8002566:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 800256a:	e000      	b.n	800256e <bno055_gyro+0x4e>
 800256c:	4b1f      	ldr	r3, [pc, #124]	@ (80025ec <bno055_gyro+0xcc>)
    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 800256e:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8002570:	7a7b      	ldrb	r3, [r7, #9]
 8002572:	b21b      	sxth	r3, r3
 8002574:	021b      	lsls	r3, r3, #8
 8002576:	b21a      	sxth	r2, r3
 8002578:	7a3b      	ldrb	r3, [r7, #8]
 800257a:	b21b      	sxth	r3, r3
 800257c:	4313      	orrs	r3, r2
 800257e:	b21b      	sxth	r3, r3
 8002580:	ee07 3a90 	vmov	s15, r3
 8002584:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002588:	ed97 7a04 	vldr	s14, [r7, #16]
 800258c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8002596:	7afb      	ldrb	r3, [r7, #11]
 8002598:	b21b      	sxth	r3, r3
 800259a:	021b      	lsls	r3, r3, #8
 800259c:	b21a      	sxth	r2, r3
 800259e:	7abb      	ldrb	r3, [r7, #10]
 80025a0:	b21b      	sxth	r3, r3
 80025a2:	4313      	orrs	r3, r2
 80025a4:	b21b      	sxth	r3, r3
 80025a6:	ee07 3a90 	vmov	s15, r3
 80025aa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80025ae:	ed97 7a04 	vldr	s14, [r7, #16]
 80025b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 80025bc:	7b7b      	ldrb	r3, [r7, #13]
 80025be:	b21b      	sxth	r3, r3
 80025c0:	021b      	lsls	r3, r3, #8
 80025c2:	b21a      	sxth	r2, r3
 80025c4:	7b3b      	ldrb	r3, [r7, #12]
 80025c6:	b21b      	sxth	r3, r3
 80025c8:	4313      	orrs	r3, r2
 80025ca:	b21b      	sxth	r3, r3
 80025cc:	ee07 3a90 	vmov	s15, r3
 80025d0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80025d4:	ed97 7a04 	vldr	s14, [r7, #16]
 80025d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	371c      	adds	r7, #28
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd90      	pop	{r4, r7, pc}
 80025ec:	44610000 	.word	0x44610000

080025f0 <bno055_mag_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_x(bno055_t* imu, f32* buf) {
 80025f0:	b590      	push	{r4, r7, lr}
 80025f2:	b0af      	sub	sp, #188	@ 0xbc
 80025f4:	af2a      	add	r7, sp, #168	@ 0xa8
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 2)) != BNO_OK) {
 80025fa:	687c      	ldr	r4, [r7, #4]
 80025fc:	2302      	movs	r3, #2
 80025fe:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002600:	f107 030c 	add.w	r3, r7, #12
 8002604:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002606:	230e      	movs	r3, #14
 8002608:	9327      	str	r3, [sp, #156]	@ 0x9c
 800260a:	4668      	mov	r0, sp
 800260c:	f104 0310 	add.w	r3, r4, #16
 8002610:	229c      	movs	r2, #156	@ 0x9c
 8002612:	4619      	mov	r1, r3
 8002614:	f00c fabf 	bl	800eb96 <memcpy>
 8002618:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800261c:	f000 fea1 	bl	8003362 <bno055_read_regs>
 8002620:	4603      	mov	r3, r0
 8002622:	73fb      	strb	r3, [r7, #15]
 8002624:	7bfb      	ldrb	r3, [r7, #15]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <bno055_mag_x+0x3e>
        return err;
 800262a:	7bfb      	ldrb	r3, [r7, #15]
 800262c:	e013      	b.n	8002656 <bno055_mag_x+0x66>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 800262e:	7b7b      	ldrb	r3, [r7, #13]
 8002630:	b21b      	sxth	r3, r3
 8002632:	021b      	lsls	r3, r3, #8
 8002634:	b21a      	sxth	r2, r3
 8002636:	7b3b      	ldrb	r3, [r7, #12]
 8002638:	b21b      	sxth	r3, r3
 800263a:	4313      	orrs	r3, r2
 800263c:	b21b      	sxth	r3, r3
 800263e:	ee07 3a90 	vmov	s15, r3
 8002642:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002646:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800264a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	bd90      	pop	{r4, r7, pc}

0800265e <bno055_mag_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_y(bno055_t* imu, f32* buf) {
 800265e:	b590      	push	{r4, r7, lr}
 8002660:	b0af      	sub	sp, #188	@ 0xbc
 8002662:	af2a      	add	r7, sp, #168	@ 0xa8
 8002664:	6078      	str	r0, [r7, #4]
 8002666:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8002668:	687c      	ldr	r4, [r7, #4]
 800266a:	2302      	movs	r3, #2
 800266c:	9329      	str	r3, [sp, #164]	@ 0xa4
 800266e:	f107 030c 	add.w	r3, r7, #12
 8002672:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002674:	2310      	movs	r3, #16
 8002676:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002678:	4668      	mov	r0, sp
 800267a:	f104 0310 	add.w	r3, r4, #16
 800267e:	229c      	movs	r2, #156	@ 0x9c
 8002680:	4619      	mov	r1, r3
 8002682:	f00c fa88 	bl	800eb96 <memcpy>
 8002686:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800268a:	f000 fe6a 	bl	8003362 <bno055_read_regs>
 800268e:	4603      	mov	r3, r0
 8002690:	73fb      	strb	r3, [r7, #15]
 8002692:	7bfb      	ldrb	r3, [r7, #15]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <bno055_mag_y+0x3e>
        return err;
 8002698:	7bfb      	ldrb	r3, [r7, #15]
 800269a:	e013      	b.n	80026c4 <bno055_mag_y+0x66>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 800269c:	7b7b      	ldrb	r3, [r7, #13]
 800269e:	b21b      	sxth	r3, r3
 80026a0:	021b      	lsls	r3, r3, #8
 80026a2:	b21a      	sxth	r2, r3
 80026a4:	7b3b      	ldrb	r3, [r7, #12]
 80026a6:	b21b      	sxth	r3, r3
 80026a8:	4313      	orrs	r3, r2
 80026aa:	b21b      	sxth	r3, r3
 80026ac:	ee07 3a90 	vmov	s15, r3
 80026b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026b4:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80026b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd90      	pop	{r4, r7, pc}

080026cc <bno055_mag_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_z(bno055_t* imu, f32* buf) {
 80026cc:	b590      	push	{r4, r7, lr}
 80026ce:	b0af      	sub	sp, #188	@ 0xbc
 80026d0:	af2a      	add	r7, sp, #168	@ 0xa8
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Z_LSB, data, 2)) != BNO_OK) {
 80026d6:	687c      	ldr	r4, [r7, #4]
 80026d8:	2302      	movs	r3, #2
 80026da:	9329      	str	r3, [sp, #164]	@ 0xa4
 80026dc:	f107 030c 	add.w	r3, r7, #12
 80026e0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80026e2:	2312      	movs	r3, #18
 80026e4:	9327      	str	r3, [sp, #156]	@ 0x9c
 80026e6:	4668      	mov	r0, sp
 80026e8:	f104 0310 	add.w	r3, r4, #16
 80026ec:	229c      	movs	r2, #156	@ 0x9c
 80026ee:	4619      	mov	r1, r3
 80026f0:	f00c fa51 	bl	800eb96 <memcpy>
 80026f4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80026f8:	f000 fe33 	bl	8003362 <bno055_read_regs>
 80026fc:	4603      	mov	r3, r0
 80026fe:	73fb      	strb	r3, [r7, #15]
 8002700:	7bfb      	ldrb	r3, [r7, #15]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <bno055_mag_z+0x3e>
        return err;
 8002706:	7bfb      	ldrb	r3, [r7, #15]
 8002708:	e013      	b.n	8002732 <bno055_mag_z+0x66>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 800270a:	7b7b      	ldrb	r3, [r7, #13]
 800270c:	b21b      	sxth	r3, r3
 800270e:	021b      	lsls	r3, r3, #8
 8002710:	b21a      	sxth	r2, r3
 8002712:	7b3b      	ldrb	r3, [r7, #12]
 8002714:	b21b      	sxth	r3, r3
 8002716:	4313      	orrs	r3, r2
 8002718:	b21b      	sxth	r3, r3
 800271a:	ee07 3a90 	vmov	s15, r3
 800271e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002722:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8002726:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	bd90      	pop	{r4, r7, pc}

0800273a <bno055_mag>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag(bno055_t* imu, bno055_vec3_t* xyz) {
 800273a:	b590      	push	{r4, r7, lr}
 800273c:	b0af      	sub	sp, #188	@ 0xbc
 800273e:	af2a      	add	r7, sp, #168	@ 0xa8
 8002740:	6078      	str	r0, [r7, #4]
 8002742:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 6)) != BNO_OK) {
 8002744:	687c      	ldr	r4, [r7, #4]
 8002746:	2306      	movs	r3, #6
 8002748:	9329      	str	r3, [sp, #164]	@ 0xa4
 800274a:	f107 0308 	add.w	r3, r7, #8
 800274e:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002750:	230e      	movs	r3, #14
 8002752:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002754:	4668      	mov	r0, sp
 8002756:	f104 0310 	add.w	r3, r4, #16
 800275a:	229c      	movs	r2, #156	@ 0x9c
 800275c:	4619      	mov	r1, r3
 800275e:	f00c fa1a 	bl	800eb96 <memcpy>
 8002762:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002766:	f000 fdfc 	bl	8003362 <bno055_read_regs>
 800276a:	4603      	mov	r3, r0
 800276c:	73fb      	strb	r3, [r7, #15]
 800276e:	7bfb      	ldrb	r3, [r7, #15]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <bno055_mag+0x3e>
        return err;
 8002774:	7bfb      	ldrb	r3, [r7, #15]
 8002776:	e039      	b.n	80027ec <bno055_mag+0xb2>
    }

    xyz->x = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8002778:	7a7b      	ldrb	r3, [r7, #9]
 800277a:	b21b      	sxth	r3, r3
 800277c:	021b      	lsls	r3, r3, #8
 800277e:	b21a      	sxth	r2, r3
 8002780:	7a3b      	ldrb	r3, [r7, #8]
 8002782:	b21b      	sxth	r3, r3
 8002784:	4313      	orrs	r3, r2
 8002786:	b21b      	sxth	r3, r3
 8002788:	ee07 3a90 	vmov	s15, r3
 800278c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002790:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8002794:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / BNO_MAG_SCALE;
 800279e:	7afb      	ldrb	r3, [r7, #11]
 80027a0:	b21b      	sxth	r3, r3
 80027a2:	021b      	lsls	r3, r3, #8
 80027a4:	b21a      	sxth	r2, r3
 80027a6:	7abb      	ldrb	r3, [r7, #10]
 80027a8:	b21b      	sxth	r3, r3
 80027aa:	4313      	orrs	r3, r2
 80027ac:	b21b      	sxth	r3, r3
 80027ae:	ee07 3a90 	vmov	s15, r3
 80027b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027b6:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80027ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / BNO_MAG_SCALE;
 80027c4:	7b7b      	ldrb	r3, [r7, #13]
 80027c6:	b21b      	sxth	r3, r3
 80027c8:	021b      	lsls	r3, r3, #8
 80027ca:	b21a      	sxth	r2, r3
 80027cc:	7b3b      	ldrb	r3, [r7, #12]
 80027ce:	b21b      	sxth	r3, r3
 80027d0:	4313      	orrs	r3, r2
 80027d2:	b21b      	sxth	r3, r3
 80027d4:	ee07 3a90 	vmov	s15, r3
 80027d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027dc:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80027e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 80027ea:	2300      	movs	r3, #0
};
 80027ec:	4618      	mov	r0, r3
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd90      	pop	{r4, r7, pc}

080027f4 <bno055_gravity_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_x(bno055_t* imu, f32* buf) {
 80027f4:	b590      	push	{r4, r7, lr}
 80027f6:	b0b1      	sub	sp, #196	@ 0xc4
 80027f8:	af2a      	add	r7, sp, #168	@ 0xa8
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 2)) != BNO_OK) {
 80027fe:	687c      	ldr	r4, [r7, #4]
 8002800:	2302      	movs	r3, #2
 8002802:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002804:	f107 030c 	add.w	r3, r7, #12
 8002808:	9328      	str	r3, [sp, #160]	@ 0xa0
 800280a:	232e      	movs	r3, #46	@ 0x2e
 800280c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800280e:	4668      	mov	r0, sp
 8002810:	f104 0310 	add.w	r3, r4, #16
 8002814:	229c      	movs	r2, #156	@ 0x9c
 8002816:	4619      	mov	r1, r3
 8002818:	f00c f9bd 	bl	800eb96 <memcpy>
 800281c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002820:	f000 fd9f 	bl	8003362 <bno055_read_regs>
 8002824:	4603      	mov	r3, r0
 8002826:	75fb      	strb	r3, [r7, #23]
 8002828:	7dfb      	ldrb	r3, [r7, #23]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <bno055_gravity_x+0x3e>
        return err;
 800282e:	7dfb      	ldrb	r3, [r7, #23]
 8002830:	e01c      	b.n	800286c <bno055_gravity_x+0x78>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <bno055_gravity_x+0x4a>
 800283a:	4b0e      	ldr	r3, [pc, #56]	@ (8002874 <bno055_gravity_x+0x80>)
 800283c:	e001      	b.n	8002842 <bno055_gravity_x+0x4e>
 800283e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8002842:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8002844:	7b7b      	ldrb	r3, [r7, #13]
 8002846:	b21b      	sxth	r3, r3
 8002848:	021b      	lsls	r3, r3, #8
 800284a:	b21a      	sxth	r2, r3
 800284c:	7b3b      	ldrb	r3, [r7, #12]
 800284e:	b21b      	sxth	r3, r3
 8002850:	4313      	orrs	r3, r2
 8002852:	b21b      	sxth	r3, r3
 8002854:	ee07 3a90 	vmov	s15, r3
 8002858:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800285c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002860:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	371c      	adds	r7, #28
 8002870:	46bd      	mov	sp, r7
 8002872:	bd90      	pop	{r4, r7, pc}
 8002874:	42c80000 	.word	0x42c80000

08002878 <bno055_gravity_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_y(bno055_t* imu, f32* buf) {
 8002878:	b590      	push	{r4, r7, lr}
 800287a:	b0b1      	sub	sp, #196	@ 0xc4
 800287c:	af2a      	add	r7, sp, #168	@ 0xa8
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8002882:	687c      	ldr	r4, [r7, #4]
 8002884:	2302      	movs	r3, #2
 8002886:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002888:	f107 030c 	add.w	r3, r7, #12
 800288c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800288e:	2330      	movs	r3, #48	@ 0x30
 8002890:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002892:	4668      	mov	r0, sp
 8002894:	f104 0310 	add.w	r3, r4, #16
 8002898:	229c      	movs	r2, #156	@ 0x9c
 800289a:	4619      	mov	r1, r3
 800289c:	f00c f97b 	bl	800eb96 <memcpy>
 80028a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80028a4:	f000 fd5d 	bl	8003362 <bno055_read_regs>
 80028a8:	4603      	mov	r3, r0
 80028aa:	75fb      	strb	r3, [r7, #23]
 80028ac:	7dfb      	ldrb	r3, [r7, #23]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <bno055_gravity_y+0x3e>
        return err;
 80028b2:	7dfb      	ldrb	r3, [r7, #23]
 80028b4:	e01c      	b.n	80028f0 <bno055_gravity_y+0x78>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <bno055_gravity_y+0x4a>
 80028be:	4b0e      	ldr	r3, [pc, #56]	@ (80028f8 <bno055_gravity_y+0x80>)
 80028c0:	e001      	b.n	80028c6 <bno055_gravity_y+0x4e>
 80028c2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80028c6:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 80028c8:	7b7b      	ldrb	r3, [r7, #13]
 80028ca:	b21b      	sxth	r3, r3
 80028cc:	021b      	lsls	r3, r3, #8
 80028ce:	b21a      	sxth	r2, r3
 80028d0:	7b3b      	ldrb	r3, [r7, #12]
 80028d2:	b21b      	sxth	r3, r3
 80028d4:	4313      	orrs	r3, r2
 80028d6:	b21b      	sxth	r3, r3
 80028d8:	ee07 3a90 	vmov	s15, r3
 80028dc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80028e0:	ed97 7a04 	vldr	s14, [r7, #16]
 80028e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	371c      	adds	r7, #28
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd90      	pop	{r4, r7, pc}
 80028f8:	42c80000 	.word	0x42c80000

080028fc <bno055_gravity_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_z(bno055_t* imu, f32* buf) {
 80028fc:	b590      	push	{r4, r7, lr}
 80028fe:	b0b1      	sub	sp, #196	@ 0xc4
 8002900:	af2a      	add	r7, sp, #168	@ 0xa8
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8002906:	687c      	ldr	r4, [r7, #4]
 8002908:	2302      	movs	r3, #2
 800290a:	9329      	str	r3, [sp, #164]	@ 0xa4
 800290c:	f107 030c 	add.w	r3, r7, #12
 8002910:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002912:	2332      	movs	r3, #50	@ 0x32
 8002914:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002916:	4668      	mov	r0, sp
 8002918:	f104 0310 	add.w	r3, r4, #16
 800291c:	229c      	movs	r2, #156	@ 0x9c
 800291e:	4619      	mov	r1, r3
 8002920:	f00c f939 	bl	800eb96 <memcpy>
 8002924:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002928:	f000 fd1b 	bl	8003362 <bno055_read_regs>
 800292c:	4603      	mov	r3, r0
 800292e:	75fb      	strb	r3, [r7, #23]
 8002930:	7dfb      	ldrb	r3, [r7, #23]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <bno055_gravity_z+0x3e>
        return err;
 8002936:	7dfb      	ldrb	r3, [r7, #23]
 8002938:	e01c      	b.n	8002974 <bno055_gravity_z+0x78>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <bno055_gravity_z+0x4a>
 8002942:	4b0e      	ldr	r3, [pc, #56]	@ (800297c <bno055_gravity_z+0x80>)
 8002944:	e001      	b.n	800294a <bno055_gravity_z+0x4e>
 8002946:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800294a:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 800294c:	7b7b      	ldrb	r3, [r7, #13]
 800294e:	b21b      	sxth	r3, r3
 8002950:	021b      	lsls	r3, r3, #8
 8002952:	b21a      	sxth	r2, r3
 8002954:	7b3b      	ldrb	r3, [r7, #12]
 8002956:	b21b      	sxth	r3, r3
 8002958:	4313      	orrs	r3, r2
 800295a:	b21b      	sxth	r3, r3
 800295c:	ee07 3a90 	vmov	s15, r3
 8002960:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002964:	ed97 7a04 	vldr	s14, [r7, #16]
 8002968:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	371c      	adds	r7, #28
 8002978:	46bd      	mov	sp, r7
 800297a:	bd90      	pop	{r4, r7, pc}
 800297c:	42c80000 	.word	0x42c80000

08002980 <bno055_gravity>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity(bno055_t* imu, bno055_vec3_t* buf) {
 8002980:	b590      	push	{r4, r7, lr}
 8002982:	b0b1      	sub	sp, #196	@ 0xc4
 8002984:	af2a      	add	r7, sp, #168	@ 0xa8
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 6)) != BNO_OK) {
 800298a:	687c      	ldr	r4, [r7, #4]
 800298c:	2306      	movs	r3, #6
 800298e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002990:	f107 0308 	add.w	r3, r7, #8
 8002994:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002996:	232e      	movs	r3, #46	@ 0x2e
 8002998:	9327      	str	r3, [sp, #156]	@ 0x9c
 800299a:	4668      	mov	r0, sp
 800299c:	f104 0310 	add.w	r3, r4, #16
 80029a0:	229c      	movs	r2, #156	@ 0x9c
 80029a2:	4619      	mov	r1, r3
 80029a4:	f00c f8f7 	bl	800eb96 <memcpy>
 80029a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80029ac:	f000 fcd9 	bl	8003362 <bno055_read_regs>
 80029b0:	4603      	mov	r3, r0
 80029b2:	75fb      	strb	r3, [r7, #23]
 80029b4:	7dfb      	ldrb	r3, [r7, #23]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <bno055_gravity+0x3e>
        return err;
 80029ba:	7dfb      	ldrb	r3, [r7, #23]
 80029bc:	e042      	b.n	8002a44 <bno055_gravity+0xc4>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <bno055_gravity+0x4a>
 80029c6:	4b21      	ldr	r3, [pc, #132]	@ (8002a4c <bno055_gravity+0xcc>)
 80029c8:	e001      	b.n	80029ce <bno055_gravity+0x4e>
 80029ca:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80029ce:	613b      	str	r3, [r7, #16]
    buf->x = (s16)((data[1] << 8) | data[0]) / scale;
 80029d0:	7a7b      	ldrb	r3, [r7, #9]
 80029d2:	b21b      	sxth	r3, r3
 80029d4:	021b      	lsls	r3, r3, #8
 80029d6:	b21a      	sxth	r2, r3
 80029d8:	7a3b      	ldrb	r3, [r7, #8]
 80029da:	b21b      	sxth	r3, r3
 80029dc:	4313      	orrs	r3, r2
 80029de:	b21b      	sxth	r3, r3
 80029e0:	ee07 3a90 	vmov	s15, r3
 80029e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80029e8:	ed97 7a04 	vldr	s14, [r7, #16]
 80029ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	edc3 7a00 	vstr	s15, [r3]
    buf->y = (s16)((data[3] << 8) | data[2]) / scale;
 80029f6:	7afb      	ldrb	r3, [r7, #11]
 80029f8:	b21b      	sxth	r3, r3
 80029fa:	021b      	lsls	r3, r3, #8
 80029fc:	b21a      	sxth	r2, r3
 80029fe:	7abb      	ldrb	r3, [r7, #10]
 8002a00:	b21b      	sxth	r3, r3
 8002a02:	4313      	orrs	r3, r2
 8002a04:	b21b      	sxth	r3, r3
 8002a06:	ee07 3a90 	vmov	s15, r3
 8002a0a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002a0e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002a12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	edc3 7a01 	vstr	s15, [r3, #4]
    buf->x = (s16)((data[5] << 8) | data[4]) / scale;
 8002a1c:	7b7b      	ldrb	r3, [r7, #13]
 8002a1e:	b21b      	sxth	r3, r3
 8002a20:	021b      	lsls	r3, r3, #8
 8002a22:	b21a      	sxth	r2, r3
 8002a24:	7b3b      	ldrb	r3, [r7, #12]
 8002a26:	b21b      	sxth	r3, r3
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	b21b      	sxth	r3, r3
 8002a2c:	ee07 3a90 	vmov	s15, r3
 8002a30:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002a34:	ed97 7a04 	vldr	s14, [r7, #16]
 8002a38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	371c      	adds	r7, #28
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd90      	pop	{r4, r7, pc}
 8002a4c:	42c80000 	.word	0x42c80000

08002a50 <bno055_euler_yaw>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_yaw(bno055_t* imu, f32* buf) {
 8002a50:	b590      	push	{r4, r7, lr}
 8002a52:	b0b1      	sub	sp, #196	@ 0xc4
 8002a54:	af2a      	add	r7, sp, #168	@ 0xa8
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 2)) !=
 8002a5a:	687c      	ldr	r4, [r7, #4]
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002a60:	f107 030c 	add.w	r3, r7, #12
 8002a64:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002a66:	231a      	movs	r3, #26
 8002a68:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002a6a:	4668      	mov	r0, sp
 8002a6c:	f104 0310 	add.w	r3, r4, #16
 8002a70:	229c      	movs	r2, #156	@ 0x9c
 8002a72:	4619      	mov	r1, r3
 8002a74:	f00c f88f 	bl	800eb96 <memcpy>
 8002a78:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002a7c:	f000 fc71 	bl	8003362 <bno055_read_regs>
 8002a80:	4603      	mov	r3, r0
 8002a82:	75fb      	strb	r3, [r7, #23]
 8002a84:	7dfb      	ldrb	r3, [r7, #23]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <bno055_euler_yaw+0x3e>
        BNO_OK) {
        return err;
 8002a8a:	7dfb      	ldrb	r3, [r7, #23]
 8002a8c:	e01c      	b.n	8002ac8 <bno055_euler_yaw+0x78>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d102      	bne.n	8002a9c <bno055_euler_yaw+0x4c>
 8002a96:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8002a9a:	e000      	b.n	8002a9e <bno055_euler_yaw+0x4e>
 8002a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad0 <bno055_euler_yaw+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8002a9e:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8002aa0:	7b7b      	ldrb	r3, [r7, #13]
 8002aa2:	b21b      	sxth	r3, r3
 8002aa4:	021b      	lsls	r3, r3, #8
 8002aa6:	b21a      	sxth	r2, r3
 8002aa8:	7b3b      	ldrb	r3, [r7, #12]
 8002aaa:	b21b      	sxth	r3, r3
 8002aac:	4313      	orrs	r3, r2
 8002aae:	b21b      	sxth	r3, r3
 8002ab0:	ee07 3a90 	vmov	s15, r3
 8002ab4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002ab8:	ed97 7a04 	vldr	s14, [r7, #16]
 8002abc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	371c      	adds	r7, #28
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd90      	pop	{r4, r7, pc}
 8002ad0:	44610000 	.word	0x44610000

08002ad4 <bno055_euler_roll>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_roll(bno055_t* imu, f32* buf) {
 8002ad4:	b590      	push	{r4, r7, lr}
 8002ad6:	b0b1      	sub	sp, #196	@ 0xc4
 8002ad8:	af2a      	add	r7, sp, #168	@ 0xa8
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_ROLL_LSB, data, 2)) != BNO_OK) {
 8002ade:	687c      	ldr	r4, [r7, #4]
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002ae4:	f107 030c 	add.w	r3, r7, #12
 8002ae8:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002aea:	231c      	movs	r3, #28
 8002aec:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002aee:	4668      	mov	r0, sp
 8002af0:	f104 0310 	add.w	r3, r4, #16
 8002af4:	229c      	movs	r2, #156	@ 0x9c
 8002af6:	4619      	mov	r1, r3
 8002af8:	f00c f84d 	bl	800eb96 <memcpy>
 8002afc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002b00:	f000 fc2f 	bl	8003362 <bno055_read_regs>
 8002b04:	4603      	mov	r3, r0
 8002b06:	75fb      	strb	r3, [r7, #23]
 8002b08:	7dfb      	ldrb	r3, [r7, #23]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <bno055_euler_roll+0x3e>
        return err;
 8002b0e:	7dfb      	ldrb	r3, [r7, #23]
 8002b10:	e01c      	b.n	8002b4c <bno055_euler_roll+0x78>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d102      	bne.n	8002b20 <bno055_euler_roll+0x4c>
 8002b1a:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8002b1e:	e000      	b.n	8002b22 <bno055_euler_roll+0x4e>
 8002b20:	4b0c      	ldr	r3, [pc, #48]	@ (8002b54 <bno055_euler_roll+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8002b22:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8002b24:	7b7b      	ldrb	r3, [r7, #13]
 8002b26:	b21b      	sxth	r3, r3
 8002b28:	021b      	lsls	r3, r3, #8
 8002b2a:	b21a      	sxth	r2, r3
 8002b2c:	7b3b      	ldrb	r3, [r7, #12]
 8002b2e:	b21b      	sxth	r3, r3
 8002b30:	4313      	orrs	r3, r2
 8002b32:	b21b      	sxth	r3, r3
 8002b34:	ee07 3a90 	vmov	s15, r3
 8002b38:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002b3c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	371c      	adds	r7, #28
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd90      	pop	{r4, r7, pc}
 8002b54:	44610000 	.word	0x44610000

08002b58 <bno055_euler_pitch>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_pitch(bno055_t* imu, f32* buf) {
 8002b58:	b590      	push	{r4, r7, lr}
 8002b5a:	b0b1      	sub	sp, #196	@ 0xc4
 8002b5c:	af2a      	add	r7, sp, #168	@ 0xa8
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_PITCH_LSB, data, 2)) != BNO_OK) {
 8002b62:	687c      	ldr	r4, [r7, #4]
 8002b64:	2302      	movs	r3, #2
 8002b66:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002b68:	f107 030c 	add.w	r3, r7, #12
 8002b6c:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002b6e:	231e      	movs	r3, #30
 8002b70:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002b72:	4668      	mov	r0, sp
 8002b74:	f104 0310 	add.w	r3, r4, #16
 8002b78:	229c      	movs	r2, #156	@ 0x9c
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	f00c f80b 	bl	800eb96 <memcpy>
 8002b80:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002b84:	f000 fbed 	bl	8003362 <bno055_read_regs>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	75fb      	strb	r3, [r7, #23]
 8002b8c:	7dfb      	ldrb	r3, [r7, #23]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <bno055_euler_pitch+0x3e>
        return err;
 8002b92:	7dfb      	ldrb	r3, [r7, #23]
 8002b94:	e01c      	b.n	8002bd0 <bno055_euler_pitch+0x78>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d102      	bne.n	8002ba4 <bno055_euler_pitch+0x4c>
 8002b9e:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8002ba2:	e000      	b.n	8002ba6 <bno055_euler_pitch+0x4e>
 8002ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd8 <bno055_euler_pitch+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8002ba6:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8002ba8:	7b7b      	ldrb	r3, [r7, #13]
 8002baa:	b21b      	sxth	r3, r3
 8002bac:	021b      	lsls	r3, r3, #8
 8002bae:	b21a      	sxth	r2, r3
 8002bb0:	7b3b      	ldrb	r3, [r7, #12]
 8002bb2:	b21b      	sxth	r3, r3
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	b21b      	sxth	r3, r3
 8002bb8:	ee07 3a90 	vmov	s15, r3
 8002bbc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002bc0:	ed97 7a04 	vldr	s14, [r7, #16]
 8002bc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	371c      	adds	r7, #28
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd90      	pop	{r4, r7, pc}
 8002bd8:	44610000 	.word	0x44610000

08002bdc <bno055_euler>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler(bno055_t* imu, bno055_euler_t* buf) {
 8002bdc:	b590      	push	{r4, r7, lr}
 8002bde:	b0b1      	sub	sp, #196	@ 0xc4
 8002be0:	af2a      	add	r7, sp, #168	@ 0xa8
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 6)) !=
 8002be6:	687c      	ldr	r4, [r7, #4]
 8002be8:	2306      	movs	r3, #6
 8002bea:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002bec:	f107 0308 	add.w	r3, r7, #8
 8002bf0:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002bf2:	231a      	movs	r3, #26
 8002bf4:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002bf6:	4668      	mov	r0, sp
 8002bf8:	f104 0310 	add.w	r3, r4, #16
 8002bfc:	229c      	movs	r2, #156	@ 0x9c
 8002bfe:	4619      	mov	r1, r3
 8002c00:	f00b ffc9 	bl	800eb96 <memcpy>
 8002c04:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002c08:	f000 fbab 	bl	8003362 <bno055_read_regs>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	75fb      	strb	r3, [r7, #23]
 8002c10:	7dfb      	ldrb	r3, [r7, #23]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <bno055_euler+0x3e>
        BNO_OK) {
        return err;
 8002c16:	7dfb      	ldrb	r3, [r7, #23]
 8002c18:	e042      	b.n	8002ca0 <bno055_euler+0xc4>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d102      	bne.n	8002c28 <bno055_euler+0x4c>
 8002c22:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8002c26:	e000      	b.n	8002c2a <bno055_euler+0x4e>
 8002c28:	4b1f      	ldr	r3, [pc, #124]	@ (8002ca8 <bno055_euler+0xcc>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8002c2a:	613b      	str	r3, [r7, #16]
    buf->yaw = (s16)((data[1] << 8) | data[0]) / scale;
 8002c2c:	7a7b      	ldrb	r3, [r7, #9]
 8002c2e:	b21b      	sxth	r3, r3
 8002c30:	021b      	lsls	r3, r3, #8
 8002c32:	b21a      	sxth	r2, r3
 8002c34:	7a3b      	ldrb	r3, [r7, #8]
 8002c36:	b21b      	sxth	r3, r3
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	b21b      	sxth	r3, r3
 8002c3c:	ee07 3a90 	vmov	s15, r3
 8002c40:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002c44:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	edc3 7a02 	vstr	s15, [r3, #8]
    buf->roll = (s16)((data[3] << 8) | data[2]) / scale;
 8002c52:	7afb      	ldrb	r3, [r7, #11]
 8002c54:	b21b      	sxth	r3, r3
 8002c56:	021b      	lsls	r3, r3, #8
 8002c58:	b21a      	sxth	r2, r3
 8002c5a:	7abb      	ldrb	r3, [r7, #10]
 8002c5c:	b21b      	sxth	r3, r3
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	b21b      	sxth	r3, r3
 8002c62:	ee07 3a90 	vmov	s15, r3
 8002c66:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002c6a:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	edc3 7a00 	vstr	s15, [r3]
    buf->pitch = (s16)((data[5] << 8) | data[4]) / scale;
 8002c78:	7b7b      	ldrb	r3, [r7, #13]
 8002c7a:	b21b      	sxth	r3, r3
 8002c7c:	021b      	lsls	r3, r3, #8
 8002c7e:	b21a      	sxth	r2, r3
 8002c80:	7b3b      	ldrb	r3, [r7, #12]
 8002c82:	b21b      	sxth	r3, r3
 8002c84:	4313      	orrs	r3, r2
 8002c86:	b21b      	sxth	r3, r3
 8002c88:	ee07 3a90 	vmov	s15, r3
 8002c8c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002c90:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	edc3 7a01 	vstr	s15, [r3, #4]
    return BNO_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	371c      	adds	r7, #28
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd90      	pop	{r4, r7, pc}
 8002ca8:	44610000 	.word	0x44610000

08002cac <bno055_quaternion_w>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_w(bno055_t* imu, f32* buf) {
 8002cac:	b590      	push	{r4, r7, lr}
 8002cae:	b0af      	sub	sp, #188	@ 0xbc
 8002cb0:	af2a      	add	r7, sp, #168	@ 0xa8
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 2)) != BNO_OK) {
 8002cb6:	687c      	ldr	r4, [r7, #4]
 8002cb8:	2302      	movs	r3, #2
 8002cba:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002cbc:	f107 030c 	add.w	r3, r7, #12
 8002cc0:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002cc2:	2320      	movs	r3, #32
 8002cc4:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002cc6:	4668      	mov	r0, sp
 8002cc8:	f104 0310 	add.w	r3, r4, #16
 8002ccc:	229c      	movs	r2, #156	@ 0x9c
 8002cce:	4619      	mov	r1, r3
 8002cd0:	f00b ff61 	bl	800eb96 <memcpy>
 8002cd4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002cd8:	f000 fb43 	bl	8003362 <bno055_read_regs>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	73fb      	strb	r3, [r7, #15]
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <bno055_quaternion_w+0x3e>
        return err;
 8002ce6:	7bfb      	ldrb	r3, [r7, #15]
 8002ce8:	e013      	b.n	8002d12 <bno055_quaternion_w+0x66>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8002cea:	7b7b      	ldrb	r3, [r7, #13]
 8002cec:	b21b      	sxth	r3, r3
 8002cee:	021b      	lsls	r3, r3, #8
 8002cf0:	b21a      	sxth	r2, r3
 8002cf2:	7b3b      	ldrb	r3, [r7, #12]
 8002cf4:	b21b      	sxth	r3, r3
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	b21b      	sxth	r3, r3
 8002cfa:	ee07 3a90 	vmov	s15, r3
 8002cfe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d02:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8002d1c <bno055_quaternion_w+0x70>
 8002d06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd90      	pop	{r4, r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	46800000 	.word	0x46800000

08002d20 <bno055_quaternion_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_x(bno055_t* imu, f32* buf) {
 8002d20:	b590      	push	{r4, r7, lr}
 8002d22:	b0af      	sub	sp, #188	@ 0xbc
 8002d24:	af2a      	add	r7, sp, #168	@ 0xa8
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_X_LSB, data, 2)) != BNO_OK) {
 8002d2a:	687c      	ldr	r4, [r7, #4]
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002d30:	f107 030c 	add.w	r3, r7, #12
 8002d34:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002d36:	2322      	movs	r3, #34	@ 0x22
 8002d38:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002d3a:	4668      	mov	r0, sp
 8002d3c:	f104 0310 	add.w	r3, r4, #16
 8002d40:	229c      	movs	r2, #156	@ 0x9c
 8002d42:	4619      	mov	r1, r3
 8002d44:	f00b ff27 	bl	800eb96 <memcpy>
 8002d48:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002d4c:	f000 fb09 	bl	8003362 <bno055_read_regs>
 8002d50:	4603      	mov	r3, r0
 8002d52:	73fb      	strb	r3, [r7, #15]
 8002d54:	7bfb      	ldrb	r3, [r7, #15]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <bno055_quaternion_x+0x3e>
        return err;
 8002d5a:	7bfb      	ldrb	r3, [r7, #15]
 8002d5c:	e013      	b.n	8002d86 <bno055_quaternion_x+0x66>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8002d5e:	7b7b      	ldrb	r3, [r7, #13]
 8002d60:	b21b      	sxth	r3, r3
 8002d62:	021b      	lsls	r3, r3, #8
 8002d64:	b21a      	sxth	r2, r3
 8002d66:	7b3b      	ldrb	r3, [r7, #12]
 8002d68:	b21b      	sxth	r3, r3
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	b21b      	sxth	r3, r3
 8002d6e:	ee07 3a90 	vmov	s15, r3
 8002d72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d76:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8002d90 <bno055_quaternion_x+0x70>
 8002d7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3714      	adds	r7, #20
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd90      	pop	{r4, r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	46800000 	.word	0x46800000

08002d94 <bno055_quaternion_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_y(bno055_t* imu, f32* buf) {
 8002d94:	b590      	push	{r4, r7, lr}
 8002d96:	b0af      	sub	sp, #188	@ 0xbc
 8002d98:	af2a      	add	r7, sp, #168	@ 0xa8
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8002d9e:	687c      	ldr	r4, [r7, #4]
 8002da0:	2302      	movs	r3, #2
 8002da2:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002da4:	f107 030c 	add.w	r3, r7, #12
 8002da8:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002daa:	2324      	movs	r3, #36	@ 0x24
 8002dac:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002dae:	4668      	mov	r0, sp
 8002db0:	f104 0310 	add.w	r3, r4, #16
 8002db4:	229c      	movs	r2, #156	@ 0x9c
 8002db6:	4619      	mov	r1, r3
 8002db8:	f00b feed 	bl	800eb96 <memcpy>
 8002dbc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002dc0:	f000 facf 	bl	8003362 <bno055_read_regs>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	73fb      	strb	r3, [r7, #15]
 8002dc8:	7bfb      	ldrb	r3, [r7, #15]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <bno055_quaternion_y+0x3e>
        return err;
 8002dce:	7bfb      	ldrb	r3, [r7, #15]
 8002dd0:	e013      	b.n	8002dfa <bno055_quaternion_y+0x66>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8002dd2:	7b7b      	ldrb	r3, [r7, #13]
 8002dd4:	b21b      	sxth	r3, r3
 8002dd6:	021b      	lsls	r3, r3, #8
 8002dd8:	b21a      	sxth	r2, r3
 8002dda:	7b3b      	ldrb	r3, [r7, #12]
 8002ddc:	b21b      	sxth	r3, r3
 8002dde:	4313      	orrs	r3, r2
 8002de0:	b21b      	sxth	r3, r3
 8002de2:	ee07 3a90 	vmov	s15, r3
 8002de6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dea:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8002e04 <bno055_quaternion_y+0x70>
 8002dee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd90      	pop	{r4, r7, pc}
 8002e02:	bf00      	nop
 8002e04:	46800000 	.word	0x46800000

08002e08 <bno055_quaternion_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_z(bno055_t* imu, f32* buf) {
 8002e08:	b590      	push	{r4, r7, lr}
 8002e0a:	b0af      	sub	sp, #188	@ 0xbc
 8002e0c:	af2a      	add	r7, sp, #168	@ 0xa8
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8002e12:	687c      	ldr	r4, [r7, #4]
 8002e14:	2302      	movs	r3, #2
 8002e16:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002e18:	f107 030c 	add.w	r3, r7, #12
 8002e1c:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002e1e:	2326      	movs	r3, #38	@ 0x26
 8002e20:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002e22:	4668      	mov	r0, sp
 8002e24:	f104 0310 	add.w	r3, r4, #16
 8002e28:	229c      	movs	r2, #156	@ 0x9c
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	f00b feb3 	bl	800eb96 <memcpy>
 8002e30:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002e34:	f000 fa95 	bl	8003362 <bno055_read_regs>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	73fb      	strb	r3, [r7, #15]
 8002e3c:	7bfb      	ldrb	r3, [r7, #15]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <bno055_quaternion_z+0x3e>
        return err;
 8002e42:	7bfb      	ldrb	r3, [r7, #15]
 8002e44:	e013      	b.n	8002e6e <bno055_quaternion_z+0x66>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8002e46:	7b7b      	ldrb	r3, [r7, #13]
 8002e48:	b21b      	sxth	r3, r3
 8002e4a:	021b      	lsls	r3, r3, #8
 8002e4c:	b21a      	sxth	r2, r3
 8002e4e:	7b3b      	ldrb	r3, [r7, #12]
 8002e50:	b21b      	sxth	r3, r3
 8002e52:	4313      	orrs	r3, r2
 8002e54:	b21b      	sxth	r3, r3
 8002e56:	ee07 3a90 	vmov	s15, r3
 8002e5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e5e:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8002e78 <bno055_quaternion_z+0x70>
 8002e62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd90      	pop	{r4, r7, pc}
 8002e76:	bf00      	nop
 8002e78:	46800000 	.word	0x46800000

08002e7c <bno055_quaternion>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion(bno055_t* imu, bno055_vec4_t* buf) {
 8002e7c:	b590      	push	{r4, r7, lr}
 8002e7e:	b0b1      	sub	sp, #196	@ 0xc4
 8002e80:	af2a      	add	r7, sp, #168	@ 0xa8
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[8];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 8)) != BNO_OK) {
 8002e86:	687c      	ldr	r4, [r7, #4]
 8002e88:	2308      	movs	r3, #8
 8002e8a:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002e8c:	f107 030c 	add.w	r3, r7, #12
 8002e90:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002e92:	2320      	movs	r3, #32
 8002e94:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002e96:	4668      	mov	r0, sp
 8002e98:	f104 0310 	add.w	r3, r4, #16
 8002e9c:	229c      	movs	r2, #156	@ 0x9c
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	f00b fe79 	bl	800eb96 <memcpy>
 8002ea4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002ea8:	f000 fa5b 	bl	8003362 <bno055_read_regs>
 8002eac:	4603      	mov	r3, r0
 8002eae:	75fb      	strb	r3, [r7, #23]
 8002eb0:	7dfb      	ldrb	r3, [r7, #23]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <bno055_quaternion+0x3e>
        return err;
 8002eb6:	7dfb      	ldrb	r3, [r7, #23]
 8002eb8:	e04c      	b.n	8002f54 <bno055_quaternion+0xd8>
    }
    buf->w = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8002eba:	7b7b      	ldrb	r3, [r7, #13]
 8002ebc:	b21b      	sxth	r3, r3
 8002ebe:	021b      	lsls	r3, r3, #8
 8002ec0:	b21a      	sxth	r2, r3
 8002ec2:	7b3b      	ldrb	r3, [r7, #12]
 8002ec4:	b21b      	sxth	r3, r3
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	b21b      	sxth	r3, r3
 8002eca:	ee07 3a90 	vmov	s15, r3
 8002ece:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ed2:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8002f5c <bno055_quaternion+0xe0>
 8002ed6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	edc3 7a03 	vstr	s15, [r3, #12]
    buf->x = (s16)((data[3] << 8) | data[2]) / (f32)BNO_QUA_SCALE;
 8002ee0:	7bfb      	ldrb	r3, [r7, #15]
 8002ee2:	b21b      	sxth	r3, r3
 8002ee4:	021b      	lsls	r3, r3, #8
 8002ee6:	b21a      	sxth	r2, r3
 8002ee8:	7bbb      	ldrb	r3, [r7, #14]
 8002eea:	b21b      	sxth	r3, r3
 8002eec:	4313      	orrs	r3, r2
 8002eee:	b21b      	sxth	r3, r3
 8002ef0:	ee07 3a90 	vmov	s15, r3
 8002ef4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ef8:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8002f5c <bno055_quaternion+0xe0>
 8002efc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	edc3 7a00 	vstr	s15, [r3]
    buf->y = (s16)((data[5] << 8) | data[4]) / (f32)BNO_QUA_SCALE;
 8002f06:	7c7b      	ldrb	r3, [r7, #17]
 8002f08:	b21b      	sxth	r3, r3
 8002f0a:	021b      	lsls	r3, r3, #8
 8002f0c:	b21a      	sxth	r2, r3
 8002f0e:	7c3b      	ldrb	r3, [r7, #16]
 8002f10:	b21b      	sxth	r3, r3
 8002f12:	4313      	orrs	r3, r2
 8002f14:	b21b      	sxth	r3, r3
 8002f16:	ee07 3a90 	vmov	s15, r3
 8002f1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f1e:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8002f5c <bno055_quaternion+0xe0>
 8002f22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	edc3 7a01 	vstr	s15, [r3, #4]
    buf->z = (s16)((data[7] << 8) | data[6]) / (f32)BNO_QUA_SCALE;
 8002f2c:	7cfb      	ldrb	r3, [r7, #19]
 8002f2e:	b21b      	sxth	r3, r3
 8002f30:	021b      	lsls	r3, r3, #8
 8002f32:	b21a      	sxth	r2, r3
 8002f34:	7cbb      	ldrb	r3, [r7, #18]
 8002f36:	b21b      	sxth	r3, r3
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	b21b      	sxth	r3, r3
 8002f3c:	ee07 3a90 	vmov	s15, r3
 8002f40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f44:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8002f5c <bno055_quaternion+0xe0>
 8002f48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	edc3 7a02 	vstr	s15, [r3, #8]
    return BNO_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	371c      	adds	r7, #28
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd90      	pop	{r4, r7, pc}
 8002f5c:	46800000 	.word	0x46800000

08002f60 <bno055_acc_conf>:

error_bno bno055_acc_conf(bno055_t* bno, const bno055_acc_range_t range,
                          const bno055_acc_band_t bandwidth,
                          const bno055_acc_mode_t mode) {
 8002f60:	b590      	push	{r4, r7, lr}
 8002f62:	b0af      	sub	sp, #188	@ 0xbc
 8002f64:	af2a      	add	r7, sp, #168	@ 0xa8
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	4608      	mov	r0, r1
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	4603      	mov	r3, r0
 8002f70:	70fb      	strb	r3, [r7, #3]
 8002f72:	460b      	mov	r3, r1
 8002f74:	70bb      	strb	r3, [r7, #2]
 8002f76:	4613      	mov	r3, r2
 8002f78:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 fa54 	bl	800342a <bno055_set_page>
 8002f82:	4603      	mov	r3, r0
 8002f84:	73fb      	strb	r3, [r7, #15]
 8002f86:	7bfb      	ldrb	r3, [r7, #15]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <bno055_acc_conf+0x30>
        return err;
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
 8002f8e:	e04b      	b.n	8003028 <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8002f90:	2100      	movs	r1, #0
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 f91b 	bl	80031ce <bno055_set_opmode>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	73fb      	strb	r3, [r7, #15]
 8002f9c:	7bfb      	ldrb	r3, [r7, #15]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <bno055_acc_conf+0x46>
        return err;
 8002fa2:	7bfb      	ldrb	r3, [r7, #15]
 8002fa4:	e040      	b.n	8003028 <bno055_acc_conf+0xc8>
    }
    osDelay(BNO_CONFIG_TIME_DELAY + 5);
 8002fa6:	200c      	movs	r0, #12
 8002fa8:	f006 fe4e 	bl	8009c48 <osDelay>
    u8 config = range | bandwidth | mode;
 8002fac:	78fa      	ldrb	r2, [r7, #3]
 8002fae:	78bb      	ldrb	r3, [r7, #2]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	787b      	ldrb	r3, [r7, #1]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_ACC_CONFIG, &config, 1)) != BNO_OK) {
 8002fbc:	687c      	ldr	r4, [r7, #4]
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002fc2:	f107 030e 	add.w	r3, r7, #14
 8002fc6:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002fc8:	2308      	movs	r3, #8
 8002fca:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002fcc:	4668      	mov	r0, sp
 8002fce:	f104 0310 	add.w	r3, r4, #16
 8002fd2:	229c      	movs	r2, #156	@ 0x9c
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	f00b fdde 	bl	800eb96 <memcpy>
 8002fda:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002fde:	f000 f9f6 	bl	80033ce <bno055_write_regs>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	73fb      	strb	r3, [r7, #15]
 8002fe6:	7bfb      	ldrb	r3, [r7, #15]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <bno055_acc_conf+0x90>
        return err;
 8002fec:	7bfb      	ldrb	r3, [r7, #15]
 8002fee:	e01b      	b.n	8003028 <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	791b      	ldrb	r3, [r3, #4]
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 f8e9 	bl	80031ce <bno055_set_opmode>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	73fb      	strb	r3, [r7, #15]
 8003000:	7bfb      	ldrb	r3, [r7, #15]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <bno055_acc_conf+0xaa>
        return err;
 8003006:	7bfb      	ldrb	r3, [r7, #15]
 8003008:	e00e      	b.n	8003028 <bno055_acc_conf+0xc8>
    }
    osDelay(BNO_ANY_TIME_DELAY + 5);
 800300a:	2018      	movs	r0, #24
 800300c:	f006 fe1c 	bl	8009c48 <osDelay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8003010:	2100      	movs	r1, #0
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 fa09 	bl	800342a <bno055_set_page>
 8003018:	4603      	mov	r3, r0
 800301a:	73fb      	strb	r3, [r7, #15]
 800301c:	7bfb      	ldrb	r3, [r7, #15]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <bno055_acc_conf+0xc6>
        return err;
 8003022:	7bfb      	ldrb	r3, [r7, #15]
 8003024:	e000      	b.n	8003028 <bno055_acc_conf+0xc8>
    }
    return BNO_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	bd90      	pop	{r4, r7, pc}

08003030 <bno055_gyr_conf>:

error_bno bno055_gyr_conf(bno055_t* bno, const bno055_gyr_range_t range,
                          const bno055_gyr_band_t bandwidth,
                          const bno055_gyr_mode_t mode) {
 8003030:	b590      	push	{r4, r7, lr}
 8003032:	b0af      	sub	sp, #188	@ 0xbc
 8003034:	af2a      	add	r7, sp, #168	@ 0xa8
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	4608      	mov	r0, r1
 800303a:	4611      	mov	r1, r2
 800303c:	461a      	mov	r2, r3
 800303e:	4603      	mov	r3, r0
 8003040:	70fb      	strb	r3, [r7, #3]
 8003042:	460b      	mov	r3, r1
 8003044:	70bb      	strb	r3, [r7, #2]
 8003046:	4613      	mov	r3, r2
 8003048:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 800304a:	2101      	movs	r1, #1
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 f9ec 	bl	800342a <bno055_set_page>
 8003052:	4603      	mov	r3, r0
 8003054:	73fb      	strb	r3, [r7, #15]
 8003056:	7bfb      	ldrb	r3, [r7, #15]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <bno055_gyr_conf+0x30>
        return err;
 800305c:	7bfb      	ldrb	r3, [r7, #15]
 800305e:	e04a      	b.n	80030f6 <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8003060:	2100      	movs	r1, #0
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f8b3 	bl	80031ce <bno055_set_opmode>
 8003068:	4603      	mov	r3, r0
 800306a:	73fb      	strb	r3, [r7, #15]
 800306c:	7bfb      	ldrb	r3, [r7, #15]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <bno055_gyr_conf+0x46>
        return err;
 8003072:	7bfb      	ldrb	r3, [r7, #15]
 8003074:	e03f      	b.n	80030f6 <bno055_gyr_conf+0xc6>
    }
    osDelay(BNO_CONFIG_TIME_DELAY + 5);
 8003076:	200c      	movs	r0, #12
 8003078:	f006 fde6 	bl	8009c48 <osDelay>
    u8 config[2] = {range | bandwidth, mode};
 800307c:	78fa      	ldrb	r2, [r7, #3]
 800307e:	78bb      	ldrb	r3, [r7, #2]
 8003080:	4313      	orrs	r3, r2
 8003082:	b2db      	uxtb	r3, r3
 8003084:	733b      	strb	r3, [r7, #12]
 8003086:	787b      	ldrb	r3, [r7, #1]
 8003088:	737b      	strb	r3, [r7, #13]
    if ((err = bno055_write_regs(*bno, BNO_GYR_CONFIG_0, config, 2)) !=
 800308a:	687c      	ldr	r4, [r7, #4]
 800308c:	2302      	movs	r3, #2
 800308e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8003090:	f107 030c 	add.w	r3, r7, #12
 8003094:	9328      	str	r3, [sp, #160]	@ 0xa0
 8003096:	230a      	movs	r3, #10
 8003098:	9327      	str	r3, [sp, #156]	@ 0x9c
 800309a:	4668      	mov	r0, sp
 800309c:	f104 0310 	add.w	r3, r4, #16
 80030a0:	229c      	movs	r2, #156	@ 0x9c
 80030a2:	4619      	mov	r1, r3
 80030a4:	f00b fd77 	bl	800eb96 <memcpy>
 80030a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80030ac:	f000 f98f 	bl	80033ce <bno055_write_regs>
 80030b0:	4603      	mov	r3, r0
 80030b2:	73fb      	strb	r3, [r7, #15]
 80030b4:	7bfb      	ldrb	r3, [r7, #15]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <bno055_gyr_conf+0x8e>
        BNO_OK) {
        return err;
 80030ba:	7bfb      	ldrb	r3, [r7, #15]
 80030bc:	e01b      	b.n	80030f6 <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	791b      	ldrb	r3, [r3, #4]
 80030c2:	4619      	mov	r1, r3
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 f882 	bl	80031ce <bno055_set_opmode>
 80030ca:	4603      	mov	r3, r0
 80030cc:	73fb      	strb	r3, [r7, #15]
 80030ce:	7bfb      	ldrb	r3, [r7, #15]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <bno055_gyr_conf+0xa8>
        return err;
 80030d4:	7bfb      	ldrb	r3, [r7, #15]
 80030d6:	e00e      	b.n	80030f6 <bno055_gyr_conf+0xc6>
    }
    osDelay(BNO_ANY_TIME_DELAY + 5);
 80030d8:	2018      	movs	r0, #24
 80030da:	f006 fdb5 	bl	8009c48 <osDelay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 80030de:	2100      	movs	r1, #0
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 f9a2 	bl	800342a <bno055_set_page>
 80030e6:	4603      	mov	r3, r0
 80030e8:	73fb      	strb	r3, [r7, #15]
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <bno055_gyr_conf+0xc4>
        return err;
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
 80030f2:	e000      	b.n	80030f6 <bno055_gyr_conf+0xc6>
    }
    return BNO_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3714      	adds	r7, #20
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd90      	pop	{r4, r7, pc}

080030fe <bno055_mag_conf>:
error_bno bno055_mag_conf(bno055_t* bno, const bno055_mag_rate_t out_rate,
                          const bno055_mag_pwr_t pwr_mode,
                          const bno055_mag_mode_t mode) {
 80030fe:	b590      	push	{r4, r7, lr}
 8003100:	b0af      	sub	sp, #188	@ 0xbc
 8003102:	af2a      	add	r7, sp, #168	@ 0xa8
 8003104:	6078      	str	r0, [r7, #4]
 8003106:	4608      	mov	r0, r1
 8003108:	4611      	mov	r1, r2
 800310a:	461a      	mov	r2, r3
 800310c:	4603      	mov	r3, r0
 800310e:	70fb      	strb	r3, [r7, #3]
 8003110:	460b      	mov	r3, r1
 8003112:	70bb      	strb	r3, [r7, #2]
 8003114:	4613      	mov	r3, r2
 8003116:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 8003118:	2101      	movs	r1, #1
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f985 	bl	800342a <bno055_set_page>
 8003120:	4603      	mov	r3, r0
 8003122:	73fb      	strb	r3, [r7, #15]
 8003124:	7bfb      	ldrb	r3, [r7, #15]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <bno055_mag_conf+0x30>
        return err;
 800312a:	7bfb      	ldrb	r3, [r7, #15]
 800312c:	e04b      	b.n	80031c6 <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 800312e:	2100      	movs	r1, #0
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 f84c 	bl	80031ce <bno055_set_opmode>
 8003136:	4603      	mov	r3, r0
 8003138:	73fb      	strb	r3, [r7, #15]
 800313a:	7bfb      	ldrb	r3, [r7, #15]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <bno055_mag_conf+0x46>
        return err;
 8003140:	7bfb      	ldrb	r3, [r7, #15]
 8003142:	e040      	b.n	80031c6 <bno055_mag_conf+0xc8>
    }
    osDelay(BNO_CONFIG_TIME_DELAY + 5);
 8003144:	200c      	movs	r0, #12
 8003146:	f006 fd7f 	bl	8009c48 <osDelay>
    u8 config = out_rate | pwr_mode | mode;
 800314a:	78fa      	ldrb	r2, [r7, #3]
 800314c:	78bb      	ldrb	r3, [r7, #2]
 800314e:	4313      	orrs	r3, r2
 8003150:	b2da      	uxtb	r2, r3
 8003152:	787b      	ldrb	r3, [r7, #1]
 8003154:	4313      	orrs	r3, r2
 8003156:	b2db      	uxtb	r3, r3
 8003158:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_MAG_CONFIG, &config, 1)) != BNO_OK) {
 800315a:	687c      	ldr	r4, [r7, #4]
 800315c:	2301      	movs	r3, #1
 800315e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8003160:	f107 030e 	add.w	r3, r7, #14
 8003164:	9328      	str	r3, [sp, #160]	@ 0xa0
 8003166:	2309      	movs	r3, #9
 8003168:	9327      	str	r3, [sp, #156]	@ 0x9c
 800316a:	4668      	mov	r0, sp
 800316c:	f104 0310 	add.w	r3, r4, #16
 8003170:	229c      	movs	r2, #156	@ 0x9c
 8003172:	4619      	mov	r1, r3
 8003174:	f00b fd0f 	bl	800eb96 <memcpy>
 8003178:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800317c:	f000 f927 	bl	80033ce <bno055_write_regs>
 8003180:	4603      	mov	r3, r0
 8003182:	73fb      	strb	r3, [r7, #15]
 8003184:	7bfb      	ldrb	r3, [r7, #15]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <bno055_mag_conf+0x90>
        return err;
 800318a:	7bfb      	ldrb	r3, [r7, #15]
 800318c:	e01b      	b.n	80031c6 <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	791b      	ldrb	r3, [r3, #4]
 8003192:	4619      	mov	r1, r3
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 f81a 	bl	80031ce <bno055_set_opmode>
 800319a:	4603      	mov	r3, r0
 800319c:	73fb      	strb	r3, [r7, #15]
 800319e:	7bfb      	ldrb	r3, [r7, #15]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <bno055_mag_conf+0xaa>
        return err;
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
 80031a6:	e00e      	b.n	80031c6 <bno055_mag_conf+0xc8>
    }
    osDelay(BNO_ANY_TIME_DELAY + 5);
 80031a8:	2018      	movs	r0, #24
 80031aa:	f006 fd4d 	bl	8009c48 <osDelay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 80031ae:	2100      	movs	r1, #0
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 f93a 	bl	800342a <bno055_set_page>
 80031b6:	4603      	mov	r3, r0
 80031b8:	73fb      	strb	r3, [r7, #15]
 80031ba:	7bfb      	ldrb	r3, [r7, #15]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <bno055_mag_conf+0xc6>
        return err;
 80031c0:	7bfb      	ldrb	r3, [r7, #15]
 80031c2:	e000      	b.n	80031c6 <bno055_mag_conf+0xc8>
    }
    return BNO_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3714      	adds	r7, #20
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd90      	pop	{r4, r7, pc}

080031ce <bno055_set_opmode>:

error_bno bno055_set_opmode(bno055_t* imu, const bno055_opmode_t opmode) {
 80031ce:	b590      	push	{r4, r7, lr}
 80031d0:	b0af      	sub	sp, #188	@ 0xbc
 80031d2:	af2a      	add	r7, sp, #168	@ 0xa8
 80031d4:	6078      	str	r0, [r7, #4]
 80031d6:	460b      	mov	r3, r1
 80031d8:	70fb      	strb	r3, [r7, #3]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    if ((err = bno055_write_regs(*imu, BNO_OPR_MODE, (u8*)&opmode, 1)) !=
 80031da:	687c      	ldr	r4, [r7, #4]
 80031dc:	2301      	movs	r3, #1
 80031de:	9329      	str	r3, [sp, #164]	@ 0xa4
 80031e0:	1cfb      	adds	r3, r7, #3
 80031e2:	9328      	str	r3, [sp, #160]	@ 0xa0
 80031e4:	233d      	movs	r3, #61	@ 0x3d
 80031e6:	9327      	str	r3, [sp, #156]	@ 0x9c
 80031e8:	4668      	mov	r0, sp
 80031ea:	f104 0310 	add.w	r3, r4, #16
 80031ee:	229c      	movs	r2, #156	@ 0x9c
 80031f0:	4619      	mov	r1, r3
 80031f2:	f00b fcd0 	bl	800eb96 <memcpy>
 80031f6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80031fa:	f000 f8e8 	bl	80033ce <bno055_write_regs>
 80031fe:	4603      	mov	r3, r0
 8003200:	73fb      	strb	r3, [r7, #15]
 8003202:	7bfb      	ldrb	r3, [r7, #15]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <bno055_set_opmode+0x3e>
        BNO_OK) {
        return err;
 8003208:	7bfb      	ldrb	r3, [r7, #15]
 800320a:	e003      	b.n	8003214 <bno055_set_opmode+0x46>
    }
    osDelay(BNO_ANY_TIME_DELAY + 5);
 800320c:	2018      	movs	r0, #24
 800320e:	f006 fd1b 	bl	8009c48 <osDelay>
    return BNO_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	bd90      	pop	{r4, r7, pc}

0800321c <bno055_set_pwr_mode>:
        return err;
    }
    return BNO_OK;
}

error_bno bno055_set_pwr_mode(bno055_t* imu, bno055_pwr_t pwr_mode) {
 800321c:	b590      	push	{r4, r7, lr}
 800321e:	b0af      	sub	sp, #188	@ 0xbc
 8003220:	af2a      	add	r7, sp, #168	@ 0xa8
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	460b      	mov	r3, r1
 8003226:	70fb      	strb	r3, [r7, #3]
    if (imu == NULL) {
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <bno055_set_pwr_mode+0x16>
        return BNO_ERR_NULL_PTR;
 800322e:	2304      	movs	r3, #4
 8003230:	e04d      	b.n	80032ce <bno055_set_pwr_mode+0xb2>
    }
    error_bno err;
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 8003232:	2100      	movs	r1, #0
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7ff ffca 	bl	80031ce <bno055_set_opmode>
 800323a:	4603      	mov	r3, r0
 800323c:	73fb      	strb	r3, [r7, #15]
 800323e:	7bfb      	ldrb	r3, [r7, #15]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <bno055_set_pwr_mode+0x2c>
        return err;
 8003244:	7bfb      	ldrb	r3, [r7, #15]
 8003246:	e042      	b.n	80032ce <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8003248:	2100      	movs	r1, #0
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f8ed 	bl	800342a <bno055_set_page>
 8003250:	4603      	mov	r3, r0
 8003252:	73fb      	strb	r3, [r7, #15]
 8003254:	7bfb      	ldrb	r3, [r7, #15]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <bno055_set_pwr_mode+0x42>
        return err;
 800325a:	7bfb      	ldrb	r3, [r7, #15]
 800325c:	e037      	b.n	80032ce <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_write_regs(*imu, BNO_PWR_MODE, (u8*)&pwr_mode, 1)) !=
 800325e:	687c      	ldr	r4, [r7, #4]
 8003260:	2301      	movs	r3, #1
 8003262:	9329      	str	r3, [sp, #164]	@ 0xa4
 8003264:	1cfb      	adds	r3, r7, #3
 8003266:	9328      	str	r3, [sp, #160]	@ 0xa0
 8003268:	233e      	movs	r3, #62	@ 0x3e
 800326a:	9327      	str	r3, [sp, #156]	@ 0x9c
 800326c:	4668      	mov	r0, sp
 800326e:	f104 0310 	add.w	r3, r4, #16
 8003272:	229c      	movs	r2, #156	@ 0x9c
 8003274:	4619      	mov	r1, r3
 8003276:	f00b fc8e 	bl	800eb96 <memcpy>
 800327a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800327e:	f000 f8a6 	bl	80033ce <bno055_write_regs>
 8003282:	4603      	mov	r3, r0
 8003284:	73fb      	strb	r3, [r7, #15]
 8003286:	7bfb      	ldrb	r3, [r7, #15]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <bno055_set_pwr_mode+0x74>
        BNO_OK) {
        return err;
 800328c:	7bfb      	ldrb	r3, [r7, #15]
 800328e:	e01e      	b.n	80032ce <bno055_set_pwr_mode+0xb2>
    }
    imu->_pwr_mode = pwr_mode;
 8003290:	78fa      	ldrb	r2, [r7, #3]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	731a      	strb	r2, [r3, #12]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8003296:	2100      	movs	r1, #0
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f000 f8c6 	bl	800342a <bno055_set_page>
 800329e:	4603      	mov	r3, r0
 80032a0:	73fb      	strb	r3, [r7, #15]
 80032a2:	7bfb      	ldrb	r3, [r7, #15]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <bno055_set_pwr_mode+0x90>
        return err;
 80032a8:	7bfb      	ldrb	r3, [r7, #15]
 80032aa:	e010      	b.n	80032ce <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	791b      	ldrb	r3, [r3, #4]
 80032b0:	4619      	mov	r1, r3
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7ff ff8b 	bl	80031ce <bno055_set_opmode>
 80032b8:	4603      	mov	r3, r0
 80032ba:	73fb      	strb	r3, [r7, #15]
 80032bc:	7bfb      	ldrb	r3, [r7, #15]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <bno055_set_pwr_mode+0xaa>
        return err;
 80032c2:	7bfb      	ldrb	r3, [r7, #15]
 80032c4:	e003      	b.n	80032ce <bno055_set_pwr_mode+0xb2>
    }
    osDelay(2);
 80032c6:	2002      	movs	r0, #2
 80032c8:	f006 fcbe 	bl	8009c48 <osDelay>
    return BNO_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3714      	adds	r7, #20
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd90      	pop	{r4, r7, pc}

080032d6 <bno055_reset>:

error_bno bno055_reset(bno055_t* imu) {
 80032d6:	b590      	push	{r4, r7, lr}
 80032d8:	b0af      	sub	sp, #188	@ 0xbc
 80032da:	af2a      	add	r7, sp, #168	@ 0xa8
 80032dc:	6078      	str	r0, [r7, #4]
    u8 data = 0x20U;
 80032de:	2320      	movs	r3, #32
 80032e0:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 80032e2:	687c      	ldr	r4, [r7, #4]
 80032e4:	2301      	movs	r3, #1
 80032e6:	9329      	str	r3, [sp, #164]	@ 0xa4
 80032e8:	f107 030f 	add.w	r3, r7, #15
 80032ec:	9328      	str	r3, [sp, #160]	@ 0xa0
 80032ee:	233f      	movs	r3, #63	@ 0x3f
 80032f0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80032f2:	4668      	mov	r0, sp
 80032f4:	f104 0310 	add.w	r3, r4, #16
 80032f8:	229c      	movs	r2, #156	@ 0x9c
 80032fa:	4619      	mov	r1, r3
 80032fc:	f00b fc4b 	bl	800eb96 <memcpy>
 8003300:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003304:	f000 f863 	bl	80033ce <bno055_write_regs>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <bno055_reset+0x3c>
        return BNO_ERR_I2C;
 800330e:	2301      	movs	r3, #1
 8003310:	e000      	b.n	8003314 <bno055_reset+0x3e>
    }
    return BNO_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3714      	adds	r7, #20
 8003318:	46bd      	mov	sp, r7
 800331a:	bd90      	pop	{r4, r7, pc}

0800331c <bno055_on>:

error_bno bno055_on(bno055_t* imu) {
 800331c:	b590      	push	{r4, r7, lr}
 800331e:	b0af      	sub	sp, #188	@ 0xbc
 8003320:	af2a      	add	r7, sp, #168	@ 0xa8
 8003322:	6078      	str	r0, [r7, #4]
    u8 data = 0x00U;
 8003324:	2300      	movs	r3, #0
 8003326:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 8003328:	687c      	ldr	r4, [r7, #4]
 800332a:	2301      	movs	r3, #1
 800332c:	9329      	str	r3, [sp, #164]	@ 0xa4
 800332e:	f107 030f 	add.w	r3, r7, #15
 8003332:	9328      	str	r3, [sp, #160]	@ 0xa0
 8003334:	233f      	movs	r3, #63	@ 0x3f
 8003336:	9327      	str	r3, [sp, #156]	@ 0x9c
 8003338:	4668      	mov	r0, sp
 800333a:	f104 0310 	add.w	r3, r4, #16
 800333e:	229c      	movs	r2, #156	@ 0x9c
 8003340:	4619      	mov	r1, r3
 8003342:	f00b fc28 	bl	800eb96 <memcpy>
 8003346:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800334a:	f000 f840 	bl	80033ce <bno055_write_regs>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <bno055_on+0x3c>
        return BNO_ERR_I2C;
 8003354:	2301      	movs	r3, #1
 8003356:	e000      	b.n	800335a <bno055_on+0x3e>
    }
    return BNO_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3714      	adds	r7, #20
 800335e:	46bd      	mov	sp, r7
 8003360:	bd90      	pop	{r4, r7, pc}

08003362 <bno055_read_regs>:

error_bno bno055_read_regs(bno055_t imu, u8 addr, uint8_t* buf,
                           uint32_t buf_size) {
 8003362:	b084      	sub	sp, #16
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af02      	add	r7, sp, #8
 800336a:	f107 0c10 	add.w	ip, r7, #16
 800336e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
    // buf,
    //                        buf_size, HAL_MAX_DELAY);
    err = HAL_I2C_Master_Transmit(imu.i2c, imu.addr, &addr, 1, HAL_MAX_DELAY);
 8003372:	6938      	ldr	r0, [r7, #16]
 8003374:	7dbb      	ldrb	r3, [r7, #22]
 8003376:	4619      	mov	r1, r3
 8003378:	f107 02bc 	add.w	r2, r7, #188	@ 0xbc
 800337c:	f04f 33ff 	mov.w	r3, #4294967295
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	2301      	movs	r3, #1
 8003384:	f002 fd3e 	bl	8005e04 <HAL_I2C_Master_Transmit>
 8003388:	4603      	mov	r3, r0
 800338a:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 800338c:	79fb      	ldrb	r3, [r7, #7]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <bno055_read_regs+0x34>
        return BNO_ERR_I2C;
 8003392:	2301      	movs	r3, #1
 8003394:	e014      	b.n	80033c0 <bno055_read_regs+0x5e>
    }
    err =
        HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 8003396:	6938      	ldr	r0, [r7, #16]
 8003398:	7dbb      	ldrb	r3, [r7, #22]
 800339a:	4619      	mov	r1, r3
 800339c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	f04f 32ff 	mov.w	r2, #4294967295
 80033a6:	9200      	str	r2, [sp, #0]
 80033a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80033ac:	f002 fe28 	bl	8006000 <HAL_I2C_Master_Receive>
 80033b0:	4603      	mov	r3, r0
 80033b2:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 80033b4:	79fb      	ldrb	r3, [r7, #7]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <bno055_read_regs+0x5c>
        return BNO_ERR_I2C;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e000      	b.n	80033c0 <bno055_read_regs+0x5e>
    }
    return BNO_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80033ca:	b004      	add	sp, #16
 80033cc:	4770      	bx	lr

080033ce <bno055_write_regs>:

error_bno bno055_write_regs(bno055_t imu, uint32_t addr, uint8_t* buf,
                            uint32_t buf_size) {
 80033ce:	b084      	sub	sp, #16
 80033d0:	b5b0      	push	{r4, r5, r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af04      	add	r7, sp, #16
 80033d6:	f107 0418 	add.w	r4, r7, #24
 80033da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 80033de:	69b8      	ldr	r0, [r7, #24]
 80033e0:	7fbb      	ldrb	r3, [r7, #30]
 80033e2:	461d      	mov	r5, r3
 80033e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80033ee:	b299      	uxth	r1, r3
 80033f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	f04f 34ff 	mov.w	r4, #4294967295
 80033fa:	9402      	str	r4, [sp, #8]
 80033fc:	9301      	str	r3, [sp, #4]
 80033fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	460b      	mov	r3, r1
 8003406:	4629      	mov	r1, r5
 8003408:	f003 f82c 	bl	8006464 <HAL_I2C_Mem_Write>
 800340c:	4603      	mov	r3, r0
 800340e:	71fb      	strb	r3, [r7, #7]
                            HAL_MAX_DELAY);
    if (err != HAL_OK) {
 8003410:	79fb      	ldrb	r3, [r7, #7]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <bno055_write_regs+0x4c>
        return BNO_ERR_I2C;
 8003416:	2301      	movs	r3, #1
 8003418:	e000      	b.n	800341c <bno055_write_regs+0x4e>
    }
    return BNO_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8003426:	b004      	add	sp, #16
 8003428:	4770      	bx	lr

0800342a <bno055_set_page>:

error_bno bno055_set_page(bno055_t* imu, const bno055_page_t page) {
 800342a:	b590      	push	{r4, r7, lr}
 800342c:	b0af      	sub	sp, #188	@ 0xbc
 800342e:	af2a      	add	r7, sp, #168	@ 0xa8
 8003430:	6078      	str	r0, [r7, #4]
 8003432:	460b      	mov	r3, r1
 8003434:	70fb      	strb	r3, [r7, #3]
    if (imu->_page != page) {
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	7b5a      	ldrb	r2, [r3, #13]
 800343a:	78fb      	ldrb	r3, [r7, #3]
 800343c:	429a      	cmp	r2, r3
 800343e:	d001      	beq.n	8003444 <bno055_set_page+0x1a>
        return BNO_OK;
 8003440:	2300      	movs	r3, #0
 8003442:	e024      	b.n	800348e <bno055_set_page+0x64>
    }
    if (page > 0x01) {
 8003444:	78fb      	ldrb	r3, [r7, #3]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d901      	bls.n	800344e <bno055_set_page+0x24>
        return BNO_ERR_PAGE_TOO_HIGH;
 800344a:	2302      	movs	r3, #2
 800344c:	e01f      	b.n	800348e <bno055_set_page+0x64>
    }
    error_bno err;
    err = bno055_write_regs(*imu, BNO_PAGE_ID, (u8*)&page, 1);
 800344e:	687c      	ldr	r4, [r7, #4]
 8003450:	2301      	movs	r3, #1
 8003452:	9329      	str	r3, [sp, #164]	@ 0xa4
 8003454:	1cfb      	adds	r3, r7, #3
 8003456:	9328      	str	r3, [sp, #160]	@ 0xa0
 8003458:	2307      	movs	r3, #7
 800345a:	9327      	str	r3, [sp, #156]	@ 0x9c
 800345c:	4668      	mov	r0, sp
 800345e:	f104 0310 	add.w	r3, r4, #16
 8003462:	229c      	movs	r2, #156	@ 0x9c
 8003464:	4619      	mov	r1, r3
 8003466:	f00b fb96 	bl	800eb96 <memcpy>
 800346a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800346e:	f7ff ffae 	bl	80033ce <bno055_write_regs>
 8003472:	4603      	mov	r3, r0
 8003474:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 8003476:	7bfb      	ldrb	r3, [r7, #15]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <bno055_set_page+0x56>
        return err;
 800347c:	7bfb      	ldrb	r3, [r7, #15]
 800347e:	e006      	b.n	800348e <bno055_set_page+0x64>
    }
    imu->_page = page;
 8003480:	78fa      	ldrb	r2, [r7, #3]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	735a      	strb	r2, [r3, #13]
    osDelay(2);
 8003486:	2002      	movs	r0, #2
 8003488:	f006 fbde 	bl	8009c48 <osDelay>
    return BNO_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	bd90      	pop	{r4, r7, pc}
	...

08003498 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800349e:	2300      	movs	r3, #0
 80034a0:	607b      	str	r3, [r7, #4]
 80034a2:	4b10      	ldr	r3, [pc, #64]	@ (80034e4 <MX_DMA_Init+0x4c>)
 80034a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a6:	4a0f      	ldr	r2, [pc, #60]	@ (80034e4 <MX_DMA_Init+0x4c>)
 80034a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80034ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80034ae:	4b0d      	ldr	r3, [pc, #52]	@ (80034e4 <MX_DMA_Init+0x4c>)
 80034b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034b6:	607b      	str	r3, [r7, #4]
 80034b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80034ba:	2200      	movs	r2, #0
 80034bc:	2105      	movs	r1, #5
 80034be:	2038      	movs	r0, #56	@ 0x38
 80034c0:	f001 fe3e 	bl	8005140 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80034c4:	2038      	movs	r0, #56	@ 0x38
 80034c6:	f001 fe57 	bl	8005178 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80034ca:	2200      	movs	r2, #0
 80034cc:	2105      	movs	r1, #5
 80034ce:	203a      	movs	r0, #58	@ 0x3a
 80034d0:	f001 fe36 	bl	8005140 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80034d4:	203a      	movs	r0, #58	@ 0x3a
 80034d6:	f001 fe4f 	bl	8005178 <HAL_NVIC_EnableIRQ>

}
 80034da:	bf00      	nop
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	40023800 	.word	0x40023800

080034e8 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start_IT(&htim11);
 80034ec:	4809      	ldr	r0, [pc, #36]	@ (8003514 <configureTimerForRunTimeStats+0x2c>)
 80034ee:	f004 f9a9 	bl	8007844 <HAL_TIM_Base_Start_IT>
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80034f2:	4b09      	ldr	r3, [pc, #36]	@ (8003518 <configureTimerForRunTimeStats+0x30>)
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	4a08      	ldr	r2, [pc, #32]	@ (8003518 <configureTimerForRunTimeStats+0x30>)
 80034f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034fc:	60d3      	str	r3, [r2, #12]

    DWT->CTRL |= 1;
 80034fe:	4b07      	ldr	r3, [pc, #28]	@ (800351c <configureTimerForRunTimeStats+0x34>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a06      	ldr	r2, [pc, #24]	@ (800351c <configureTimerForRunTimeStats+0x34>)
 8003504:	f043 0301 	orr.w	r3, r3, #1
 8003508:	6013      	str	r3, [r2, #0]
    DWT->CYCCNT = 0;
 800350a:	4b04      	ldr	r3, [pc, #16]	@ (800351c <configureTimerForRunTimeStats+0x34>)
 800350c:	2200      	movs	r2, #0
 800350e:	605a      	str	r2, [r3, #4]
}
 8003510:	bf00      	nop
 8003512:	bd80      	pop	{r7, pc}
 8003514:	20000630 	.word	0x20000630
 8003518:	e000edf0 	.word	0xe000edf0
 800351c:	e0001000 	.word	0xe0001000

08003520 <getRunTimeCounterValue>:

extern volatile unsigned long ulHighFrequencyTimerTicks;
__weak unsigned long getRunTimeCounterValue(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
    return ulHighFrequencyTimerTicks;
 8003524:	4b03      	ldr	r3, [pc, #12]	@ (8003534 <getRunTimeCounterValue+0x14>)
 8003526:	681b      	ldr	r3, [r3, #0]
}
 8003528:	4618      	mov	r0, r3
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	20000588 	.word	0x20000588

08003538 <PreSleepProcessing>:
/* USER CODE END 1 */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

    // Start all 4 input captures
    HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8003564:	2100      	movs	r1, #0
 8003566:	4840      	ldr	r0, [pc, #256]	@ (8003668 <MX_FREERTOS_Init+0x108>)
 8003568:	f004 fb28 	bl	8007bbc <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 800356c:	2104      	movs	r1, #4
 800356e:	483e      	ldr	r0, [pc, #248]	@ (8003668 <MX_FREERTOS_Init+0x108>)
 8003570:	f004 fb24 	bl	8007bbc <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8003574:	2108      	movs	r1, #8
 8003576:	483c      	ldr	r0, [pc, #240]	@ (8003668 <MX_FREERTOS_Init+0x108>)
 8003578:	f004 fb20 	bl	8007bbc <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 800357c:	210c      	movs	r1, #12
 800357e:	483a      	ldr	r0, [pc, #232]	@ (8003668 <MX_FREERTOS_Init+0x108>)
 8003580:	f004 fb1c 	bl	8007bbc <HAL_TIM_IC_Start_IT>

    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8003584:	2100      	movs	r1, #0
 8003586:	4839      	ldr	r0, [pc, #228]	@ (800366c <MX_FREERTOS_Init+0x10c>)
 8003588:	f004 fa0e 	bl	80079a8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800358c:	2104      	movs	r1, #4
 800358e:	4837      	ldr	r0, [pc, #220]	@ (800366c <MX_FREERTOS_Init+0x10c>)
 8003590:	f004 fa0a 	bl	80079a8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8003594:	2108      	movs	r1, #8
 8003596:	4835      	ldr	r0, [pc, #212]	@ (800366c <MX_FREERTOS_Init+0x10c>)
 8003598:	f004 fa06 	bl	80079a8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800359c:	210c      	movs	r1, #12
 800359e:	4833      	ldr	r0, [pc, #204]	@ (800366c <MX_FREERTOS_Init+0x10c>)
 80035a0:	f004 fa02 	bl	80079a8 <HAL_TIM_PWM_Start>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of radioQueue */
  radioQueueHandle = osMessageQueueNew (1, sizeof(RadioData_t), &radioQueue_attributes);
 80035a4:	4a32      	ldr	r2, [pc, #200]	@ (8003670 <MX_FREERTOS_Init+0x110>)
 80035a6:	2108      	movs	r1, #8
 80035a8:	2001      	movs	r0, #1
 80035aa:	f006 fb68 	bl	8009c7e <osMessageQueueNew>
 80035ae:	4603      	mov	r3, r0
 80035b0:	4a30      	ldr	r2, [pc, #192]	@ (8003674 <MX_FREERTOS_Init+0x114>)
 80035b2:	6013      	str	r3, [r2, #0]

  /* creation of adcQueue */
  adcQueueHandle = osMessageQueueNew (1, sizeof(AdcData_t), &adcQueue_attributes);
 80035b4:	4a30      	ldr	r2, [pc, #192]	@ (8003678 <MX_FREERTOS_Init+0x118>)
 80035b6:	2110      	movs	r1, #16
 80035b8:	2001      	movs	r0, #1
 80035ba:	f006 fb60 	bl	8009c7e <osMessageQueueNew>
 80035be:	4603      	mov	r3, r0
 80035c0:	4a2e      	ldr	r2, [pc, #184]	@ (800367c <MX_FREERTOS_Init+0x11c>)
 80035c2:	6013      	str	r3, [r2, #0]

  /* creation of imuQueue */
  imuQueueHandle = osMessageQueueNew (1, sizeof(ImuData_t), &imuQueue_attributes);
 80035c4:	4a2e      	ldr	r2, [pc, #184]	@ (8003680 <MX_FREERTOS_Init+0x120>)
 80035c6:	2130      	movs	r1, #48	@ 0x30
 80035c8:	2001      	movs	r0, #1
 80035ca:	f006 fb58 	bl	8009c7e <osMessageQueueNew>
 80035ce:	4603      	mov	r3, r0
 80035d0:	4a2c      	ldr	r2, [pc, #176]	@ (8003684 <MX_FREERTOS_Init+0x124>)
 80035d2:	6013      	str	r3, [r2, #0]

  /* creation of controlQueue */
  controlQueueHandle = osMessageQueueNew (1, sizeof(ControlData_t), &controlQueue_attributes);
 80035d4:	4a2c      	ldr	r2, [pc, #176]	@ (8003688 <MX_FREERTOS_Init+0x128>)
 80035d6:	2118      	movs	r1, #24
 80035d8:	2001      	movs	r0, #1
 80035da:	f006 fb50 	bl	8009c7e <osMessageQueueNew>
 80035de:	4603      	mov	r3, r0
 80035e0:	4a2a      	ldr	r2, [pc, #168]	@ (800368c <MX_FREERTOS_Init+0x12c>)
 80035e2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  // Allowing the kernel-aware debugger to get to know our queues
  vQueueAddToRegistry( radioQueueHandle, "radioQueue" );
 80035e4:	4b23      	ldr	r3, [pc, #140]	@ (8003674 <MX_FREERTOS_Init+0x114>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4929      	ldr	r1, [pc, #164]	@ (8003690 <MX_FREERTOS_Init+0x130>)
 80035ea:	4618      	mov	r0, r3
 80035ec:	f007 fb18 	bl	800ac20 <vQueueAddToRegistry>
  vQueueAddToRegistry( adcQueueHandle, "adcQueue" );
 80035f0:	4b22      	ldr	r3, [pc, #136]	@ (800367c <MX_FREERTOS_Init+0x11c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4927      	ldr	r1, [pc, #156]	@ (8003694 <MX_FREERTOS_Init+0x134>)
 80035f6:	4618      	mov	r0, r3
 80035f8:	f007 fb12 	bl	800ac20 <vQueueAddToRegistry>
  vQueueAddToRegistry( imuQueueHandle, "imuQueue" );
 80035fc:	4b21      	ldr	r3, [pc, #132]	@ (8003684 <MX_FREERTOS_Init+0x124>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4925      	ldr	r1, [pc, #148]	@ (8003698 <MX_FREERTOS_Init+0x138>)
 8003602:	4618      	mov	r0, r3
 8003604:	f007 fb0c 	bl	800ac20 <vQueueAddToRegistry>
  vQueueAddToRegistry( controlQueueHandle, "controlQueue" );
 8003608:	4b20      	ldr	r3, [pc, #128]	@ (800368c <MX_FREERTOS_Init+0x12c>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4923      	ldr	r1, [pc, #140]	@ (800369c <MX_FREERTOS_Init+0x13c>)
 800360e:	4618      	mov	r0, r3
 8003610:	f007 fb06 	bl	800ac20 <vQueueAddToRegistry>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003614:	4a22      	ldr	r2, [pc, #136]	@ (80036a0 <MX_FREERTOS_Init+0x140>)
 8003616:	2100      	movs	r1, #0
 8003618:	4822      	ldr	r0, [pc, #136]	@ (80036a4 <MX_FREERTOS_Init+0x144>)
 800361a:	f006 fa83 	bl	8009b24 <osThreadNew>
 800361e:	4603      	mov	r3, r0
 8003620:	4a21      	ldr	r2, [pc, #132]	@ (80036a8 <MX_FREERTOS_Init+0x148>)
 8003622:	6013      	str	r3, [r2, #0]

  /* creation of control_task */
  control_taskHandle = osThreadNew(_control_task, NULL, &control_task_attributes);
 8003624:	4a21      	ldr	r2, [pc, #132]	@ (80036ac <MX_FREERTOS_Init+0x14c>)
 8003626:	2100      	movs	r1, #0
 8003628:	4821      	ldr	r0, [pc, #132]	@ (80036b0 <MX_FREERTOS_Init+0x150>)
 800362a:	f006 fa7b 	bl	8009b24 <osThreadNew>
 800362e:	4603      	mov	r3, r0
 8003630:	4a20      	ldr	r2, [pc, #128]	@ (80036b4 <MX_FREERTOS_Init+0x154>)
 8003632:	6013      	str	r3, [r2, #0]

  /* creation of imu_read_task */
  imu_read_taskHandle = osThreadNew(_imu_read_task, NULL, &imu_read_task_attributes);
 8003634:	4a20      	ldr	r2, [pc, #128]	@ (80036b8 <MX_FREERTOS_Init+0x158>)
 8003636:	2100      	movs	r1, #0
 8003638:	4820      	ldr	r0, [pc, #128]	@ (80036bc <MX_FREERTOS_Init+0x15c>)
 800363a:	f006 fa73 	bl	8009b24 <osThreadNew>
 800363e:	4603      	mov	r3, r0
 8003640:	4a1f      	ldr	r2, [pc, #124]	@ (80036c0 <MX_FREERTOS_Init+0x160>)
 8003642:	6013      	str	r3, [r2, #0]

  /* creation of adc_read_task */
  adc_read_taskHandle = osThreadNew(_adc_read_task, NULL, &adc_read_task_attributes);
 8003644:	4a1f      	ldr	r2, [pc, #124]	@ (80036c4 <MX_FREERTOS_Init+0x164>)
 8003646:	2100      	movs	r1, #0
 8003648:	481f      	ldr	r0, [pc, #124]	@ (80036c8 <MX_FREERTOS_Init+0x168>)
 800364a:	f006 fa6b 	bl	8009b24 <osThreadNew>
 800364e:	4603      	mov	r3, r0
 8003650:	4a1e      	ldr	r2, [pc, #120]	@ (80036cc <MX_FREERTOS_Init+0x16c>)
 8003652:	6013      	str	r3, [r2, #0]

  /* creation of telemetry_task */
  telemetry_taskHandle = osThreadNew(_telemetry_task, NULL, &telemetry_task_attributes);
 8003654:	4a1e      	ldr	r2, [pc, #120]	@ (80036d0 <MX_FREERTOS_Init+0x170>)
 8003656:	2100      	movs	r1, #0
 8003658:	481e      	ldr	r0, [pc, #120]	@ (80036d4 <MX_FREERTOS_Init+0x174>)
 800365a:	f006 fa63 	bl	8009b24 <osThreadNew>
 800365e:	4603      	mov	r3, r0
 8003660:	4a1d      	ldr	r2, [pc, #116]	@ (80036d8 <MX_FREERTOS_Init+0x178>)
 8003662:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8003664:	bf00      	nop
 8003666:	bd80      	pop	{r7, pc}
 8003668:	200005a0 	.word	0x200005a0
 800366c:	200005e8 	.word	0x200005e8
 8003670:	0801182c 	.word	0x0801182c
 8003674:	200004dc 	.word	0x200004dc
 8003678:	08011844 	.word	0x08011844
 800367c:	200004e0 	.word	0x200004e0
 8003680:	0801185c 	.word	0x0801185c
 8003684:	200004e4 	.word	0x200004e4
 8003688:	08011874 	.word	0x08011874
 800368c:	200004e8 	.word	0x200004e8
 8003690:	08011704 	.word	0x08011704
 8003694:	08011710 	.word	0x08011710
 8003698:	0801171c 	.word	0x0801171c
 800369c:	08011728 	.word	0x08011728
 80036a0:	08011778 	.word	0x08011778
 80036a4:	080036dd 	.word	0x080036dd
 80036a8:	200004c8 	.word	0x200004c8
 80036ac:	0801179c 	.word	0x0801179c
 80036b0:	080036fd 	.word	0x080036fd
 80036b4:	200004cc 	.word	0x200004cc
 80036b8:	080117c0 	.word	0x080117c0
 80036bc:	08003721 	.word	0x08003721
 80036c0:	200004d0 	.word	0x200004d0
 80036c4:	080117e4 	.word	0x080117e4
 80036c8:	08003745 	.word	0x08003745
 80036cc:	200004d4 	.word	0x200004d4
 80036d0:	08011808 	.word	0x08011808
 80036d4:	08003769 	.word	0x08003769
 80036d8:	200004d8 	.word	0x200004d8

080036dc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    idle_dummy++; // Keep incrementing the dummy variable
 80036e4:	4b04      	ldr	r3, [pc, #16]	@ (80036f8 <StartDefaultTask+0x1c>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	3301      	adds	r3, #1
 80036ea:	4a03      	ldr	r2, [pc, #12]	@ (80036f8 <StartDefaultTask+0x1c>)
 80036ec:	6013      	str	r3, [r2, #0]
    osDelay(1); // A small delay to avoid task starvation
 80036ee:	2001      	movs	r0, #1
 80036f0:	f006 faaa 	bl	8009c48 <osDelay>
    idle_dummy++; // Keep incrementing the dummy variable
 80036f4:	bf00      	nop
 80036f6:	e7f5      	b.n	80036e4 <StartDefaultTask+0x8>
 80036f8:	200004b4 	.word	0x200004b4

080036fc <_control_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header__control_task */
void _control_task(void *argument)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN _control_task */
  for(;;)
  {
    control_dummy++;
 8003704:	4b05      	ldr	r3, [pc, #20]	@ (800371c <_control_task+0x20>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	3301      	adds	r3, #1
 800370a:	4a04      	ldr	r2, [pc, #16]	@ (800371c <_control_task+0x20>)
 800370c:	6013      	str	r3, [r2, #0]
    control(); // Execute control function
 800370e:	f7fd fea9 	bl	8001464 <control>
    osDelay(CONTROL_DELAY);
 8003712:	200a      	movs	r0, #10
 8003714:	f006 fa98 	bl	8009c48 <osDelay>
    control_dummy++;
 8003718:	bf00      	nop
 800371a:	e7f3      	b.n	8003704 <_control_task+0x8>
 800371c:	200004b8 	.word	0x200004b8

08003720 <_imu_read_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header__imu_read_task */
void _imu_read_task(void *argument)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN _imu_read_task */
  for(;;)
  {
    imu_dummy++;
 8003728:	4b05      	ldr	r3, [pc, #20]	@ (8003740 <_imu_read_task+0x20>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	3301      	adds	r3, #1
 800372e:	4a04      	ldr	r2, [pc, #16]	@ (8003740 <_imu_read_task+0x20>)
 8003730:	6013      	str	r3, [r2, #0]
    imu_read(); // Execute imu read function
 8003732:	f7fd fec3 	bl	80014bc <imu_read>
    osDelay(IMU_DELAY);
 8003736:	200a      	movs	r0, #10
 8003738:	f006 fa86 	bl	8009c48 <osDelay>
    imu_dummy++;
 800373c:	bf00      	nop
 800373e:	e7f3      	b.n	8003728 <_imu_read_task+0x8>
 8003740:	200004c0 	.word	0x200004c0

08003744 <_adc_read_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header__adc_read_task */
void _adc_read_task(void *argument)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN _adc_read_task */
  for(;;)
  {
    adc_dummy++;
 800374c:	4b05      	ldr	r3, [pc, #20]	@ (8003764 <_adc_read_task+0x20>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	3301      	adds	r3, #1
 8003752:	4a04      	ldr	r2, [pc, #16]	@ (8003764 <_adc_read_task+0x20>)
 8003754:	6013      	str	r3, [r2, #0]
    adc_read(); // Execute ADC read function
 8003756:	f7fd fc6b 	bl	8001030 <adc_read>
    osDelay(ADC_DELAY);
 800375a:	200a      	movs	r0, #10
 800375c:	f006 fa74 	bl	8009c48 <osDelay>
    adc_dummy++;
 8003760:	bf00      	nop
 8003762:	e7f3      	b.n	800374c <_adc_read_task+0x8>
 8003764:	200004c4 	.word	0x200004c4

08003768 <_telemetry_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header__telemetry_task */
void _telemetry_task(void *argument)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN _telemetry_task */
  for(;;)
  {
    telemetry_dummy++;
 8003770:	4b05      	ldr	r3, [pc, #20]	@ (8003788 <_telemetry_task+0x20>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	3301      	adds	r3, #1
 8003776:	4a04      	ldr	r2, [pc, #16]	@ (8003788 <_telemetry_task+0x20>)
 8003778:	6013      	str	r3, [r2, #0]
    telemetry(); // Execute telemetry function
 800377a:	f7fd ffdf 	bl	800173c <telemetry>
    osDelay(TELEMETRY_DELAY);
 800377e:	200a      	movs	r0, #10
 8003780:	f006 fa62 	bl	8009c48 <osDelay>
    telemetry_dummy++;
 8003784:	bf00      	nop
 8003786:	e7f3      	b.n	8003770 <_telemetry_task+0x8>
 8003788:	200004bc 	.word	0x200004bc

0800378c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003792:	2300      	movs	r3, #0
 8003794:	607b      	str	r3, [r7, #4]
 8003796:	4b10      	ldr	r3, [pc, #64]	@ (80037d8 <MX_GPIO_Init+0x4c>)
 8003798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379a:	4a0f      	ldr	r2, [pc, #60]	@ (80037d8 <MX_GPIO_Init+0x4c>)
 800379c:	f043 0301 	orr.w	r3, r3, #1
 80037a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80037a2:	4b0d      	ldr	r3, [pc, #52]	@ (80037d8 <MX_GPIO_Init+0x4c>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	607b      	str	r3, [r7, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ae:	2300      	movs	r3, #0
 80037b0:	603b      	str	r3, [r7, #0]
 80037b2:	4b09      	ldr	r3, [pc, #36]	@ (80037d8 <MX_GPIO_Init+0x4c>)
 80037b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b6:	4a08      	ldr	r2, [pc, #32]	@ (80037d8 <MX_GPIO_Init+0x4c>)
 80037b8:	f043 0302 	orr.w	r3, r3, #2
 80037bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80037be:	4b06      	ldr	r3, [pc, #24]	@ (80037d8 <MX_GPIO_Init+0x4c>)
 80037c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	603b      	str	r3, [r7, #0]
 80037c8:	683b      	ldr	r3, [r7, #0]

}
 80037ca:	bf00      	nop
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	40023800 	.word	0x40023800

080037dc <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80037e0:	4b12      	ldr	r3, [pc, #72]	@ (800382c <MX_I2C3_Init+0x50>)
 80037e2:	4a13      	ldr	r2, [pc, #76]	@ (8003830 <MX_I2C3_Init+0x54>)
 80037e4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80037e6:	4b11      	ldr	r3, [pc, #68]	@ (800382c <MX_I2C3_Init+0x50>)
 80037e8:	4a12      	ldr	r2, [pc, #72]	@ (8003834 <MX_I2C3_Init+0x58>)
 80037ea:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80037ec:	4b0f      	ldr	r3, [pc, #60]	@ (800382c <MX_I2C3_Init+0x50>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80037f2:	4b0e      	ldr	r3, [pc, #56]	@ (800382c <MX_I2C3_Init+0x50>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80037f8:	4b0c      	ldr	r3, [pc, #48]	@ (800382c <MX_I2C3_Init+0x50>)
 80037fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80037fe:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003800:	4b0a      	ldr	r3, [pc, #40]	@ (800382c <MX_I2C3_Init+0x50>)
 8003802:	2200      	movs	r2, #0
 8003804:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003806:	4b09      	ldr	r3, [pc, #36]	@ (800382c <MX_I2C3_Init+0x50>)
 8003808:	2200      	movs	r2, #0
 800380a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800380c:	4b07      	ldr	r3, [pc, #28]	@ (800382c <MX_I2C3_Init+0x50>)
 800380e:	2200      	movs	r2, #0
 8003810:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003812:	4b06      	ldr	r3, [pc, #24]	@ (800382c <MX_I2C3_Init+0x50>)
 8003814:	2200      	movs	r2, #0
 8003816:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003818:	4804      	ldr	r0, [pc, #16]	@ (800382c <MX_I2C3_Init+0x50>)
 800381a:	f002 f9af 	bl	8005b7c <HAL_I2C_Init>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003824:	f000 f90a 	bl	8003a3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003828:	bf00      	nop
 800382a:	bd80      	pop	{r7, pc}
 800382c:	200004ec 	.word	0x200004ec
 8003830:	40005c00 	.word	0x40005c00
 8003834:	000186a0 	.word	0x000186a0

08003838 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08a      	sub	sp, #40	@ 0x28
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003840:	f107 0314 	add.w	r3, r7, #20
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	605a      	str	r2, [r3, #4]
 800384a:	609a      	str	r2, [r3, #8]
 800384c:	60da      	str	r2, [r3, #12]
 800384e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a28      	ldr	r2, [pc, #160]	@ (80038f8 <HAL_I2C_MspInit+0xc0>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d14a      	bne.n	80038f0 <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800385a:	2300      	movs	r3, #0
 800385c:	613b      	str	r3, [r7, #16]
 800385e:	4b27      	ldr	r3, [pc, #156]	@ (80038fc <HAL_I2C_MspInit+0xc4>)
 8003860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003862:	4a26      	ldr	r2, [pc, #152]	@ (80038fc <HAL_I2C_MspInit+0xc4>)
 8003864:	f043 0301 	orr.w	r3, r3, #1
 8003868:	6313      	str	r3, [r2, #48]	@ 0x30
 800386a:	4b24      	ldr	r3, [pc, #144]	@ (80038fc <HAL_I2C_MspInit+0xc4>)
 800386c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	613b      	str	r3, [r7, #16]
 8003874:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003876:	2300      	movs	r3, #0
 8003878:	60fb      	str	r3, [r7, #12]
 800387a:	4b20      	ldr	r3, [pc, #128]	@ (80038fc <HAL_I2C_MspInit+0xc4>)
 800387c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387e:	4a1f      	ldr	r2, [pc, #124]	@ (80038fc <HAL_I2C_MspInit+0xc4>)
 8003880:	f043 0302 	orr.w	r3, r3, #2
 8003884:	6313      	str	r3, [r2, #48]	@ 0x30
 8003886:	4b1d      	ldr	r3, [pc, #116]	@ (80038fc <HAL_I2C_MspInit+0xc4>)
 8003888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	60fb      	str	r3, [r7, #12]
 8003890:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = IMU_CLK_Pin;
 8003892:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003898:	2312      	movs	r3, #18
 800389a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800389c:	2301      	movs	r3, #1
 800389e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038a0:	2303      	movs	r3, #3
 80038a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80038a4:	2304      	movs	r3, #4
 80038a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(IMU_CLK_GPIO_Port, &GPIO_InitStruct);
 80038a8:	f107 0314 	add.w	r3, r7, #20
 80038ac:	4619      	mov	r1, r3
 80038ae:	4814      	ldr	r0, [pc, #80]	@ (8003900 <HAL_I2C_MspInit+0xc8>)
 80038b0:	f001 ffe0 	bl	8005874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IMU_SDA_Pin;
 80038b4:	2310      	movs	r3, #16
 80038b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038b8:	2312      	movs	r3, #18
 80038ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038bc:	2301      	movs	r3, #1
 80038be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038c0:	2303      	movs	r3, #3
 80038c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 80038c4:	2309      	movs	r3, #9
 80038c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(IMU_SDA_GPIO_Port, &GPIO_InitStruct);
 80038c8:	f107 0314 	add.w	r3, r7, #20
 80038cc:	4619      	mov	r1, r3
 80038ce:	480d      	ldr	r0, [pc, #52]	@ (8003904 <HAL_I2C_MspInit+0xcc>)
 80038d0:	f001 ffd0 	bl	8005874 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80038d4:	2300      	movs	r3, #0
 80038d6:	60bb      	str	r3, [r7, #8]
 80038d8:	4b08      	ldr	r3, [pc, #32]	@ (80038fc <HAL_I2C_MspInit+0xc4>)
 80038da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038dc:	4a07      	ldr	r2, [pc, #28]	@ (80038fc <HAL_I2C_MspInit+0xc4>)
 80038de:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80038e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80038e4:	4b05      	ldr	r3, [pc, #20]	@ (80038fc <HAL_I2C_MspInit+0xc4>)
 80038e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038ec:	60bb      	str	r3, [r7, #8]
 80038ee:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80038f0:	bf00      	nop
 80038f2:	3728      	adds	r7, #40	@ 0x28
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	40005c00 	.word	0x40005c00
 80038fc:	40023800 	.word	0x40023800
 8003900:	40020000 	.word	0x40020000
 8003904:	40020400 	.word	0x40020400

08003908 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800390c:	f000 ff2c 	bl	8004768 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003910:	f000 f818 	bl	8003944 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003914:	f7ff ff3a 	bl	800378c <MX_GPIO_Init>
  MX_DMA_Init();
 8003918:	f7ff fdbe 	bl	8003498 <MX_DMA_Init>
  MX_ADC1_Init();
 800391c:	f7fe f8a4 	bl	8001a68 <MX_ADC1_Init>
  MX_TIM3_Init();
 8003920:	f000 fc3a 	bl	8004198 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003924:	f000 fcca 	bl	80042bc <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8003928:	f000 fe4e 	bl	80045c8 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 800392c:	f7ff ff56 	bl	80037dc <MX_I2C3_Init>
  MX_TIM11_Init();
 8003930:	f000 fd3e 	bl	80043b0 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003934:	f006 f8ac 	bl	8009a90 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8003938:	f7ff fe12 	bl	8003560 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800393c:	f006 f8cc 	bl	8009ad8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003940:	bf00      	nop
 8003942:	e7fd      	b.n	8003940 <main+0x38>

08003944 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b094      	sub	sp, #80	@ 0x50
 8003948:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800394a:	f107 0320 	add.w	r3, r7, #32
 800394e:	2230      	movs	r2, #48	@ 0x30
 8003950:	2100      	movs	r1, #0
 8003952:	4618      	mov	r0, r3
 8003954:	f00b f82f 	bl	800e9b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003958:	f107 030c 	add.w	r3, r7, #12
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	605a      	str	r2, [r3, #4]
 8003962:	609a      	str	r2, [r3, #8]
 8003964:	60da      	str	r2, [r3, #12]
 8003966:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003968:	2300      	movs	r3, #0
 800396a:	60bb      	str	r3, [r7, #8]
 800396c:	4b28      	ldr	r3, [pc, #160]	@ (8003a10 <SystemClock_Config+0xcc>)
 800396e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003970:	4a27      	ldr	r2, [pc, #156]	@ (8003a10 <SystemClock_Config+0xcc>)
 8003972:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003976:	6413      	str	r3, [r2, #64]	@ 0x40
 8003978:	4b25      	ldr	r3, [pc, #148]	@ (8003a10 <SystemClock_Config+0xcc>)
 800397a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003980:	60bb      	str	r3, [r7, #8]
 8003982:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003984:	2300      	movs	r3, #0
 8003986:	607b      	str	r3, [r7, #4]
 8003988:	4b22      	ldr	r3, [pc, #136]	@ (8003a14 <SystemClock_Config+0xd0>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003990:	4a20      	ldr	r2, [pc, #128]	@ (8003a14 <SystemClock_Config+0xd0>)
 8003992:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003996:	6013      	str	r3, [r2, #0]
 8003998:	4b1e      	ldr	r3, [pc, #120]	@ (8003a14 <SystemClock_Config+0xd0>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80039a0:	607b      	str	r3, [r7, #4]
 80039a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80039a4:	2302      	movs	r3, #2
 80039a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80039a8:	2301      	movs	r3, #1
 80039aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80039ac:	2310      	movs	r3, #16
 80039ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039b0:	2302      	movs	r3, #2
 80039b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80039b4:	2300      	movs	r3, #0
 80039b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80039b8:	2308      	movs	r3, #8
 80039ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80039bc:	2354      	movs	r3, #84	@ 0x54
 80039be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80039c0:	2302      	movs	r3, #2
 80039c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80039c4:	2304      	movs	r3, #4
 80039c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039c8:	f107 0320 	add.w	r3, r7, #32
 80039cc:	4618      	mov	r0, r3
 80039ce:	f003 fa5f 	bl	8006e90 <HAL_RCC_OscConfig>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80039d8:	f000 f830 	bl	8003a3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039dc:	230f      	movs	r3, #15
 80039de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80039e0:	2302      	movs	r3, #2
 80039e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039e4:	2300      	movs	r3, #0
 80039e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80039e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80039ee:	2300      	movs	r3, #0
 80039f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80039f2:	f107 030c 	add.w	r3, r7, #12
 80039f6:	2102      	movs	r1, #2
 80039f8:	4618      	mov	r0, r3
 80039fa:	f003 fcc1 	bl	8007380 <HAL_RCC_ClockConfig>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003a04:	f000 f81a 	bl	8003a3c <Error_Handler>
  }
}
 8003a08:	bf00      	nop
 8003a0a:	3750      	adds	r7, #80	@ 0x50
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	40023800 	.word	0x40023800
 8003a14:	40007000 	.word	0x40007000

08003a18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a04      	ldr	r2, [pc, #16]	@ (8003a38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d101      	bne.n	8003a2e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8003a2a:	f000 febf 	bl	80047ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003a2e:	bf00      	nop
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	40014400 	.word	0x40014400

08003a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a40:	b672      	cpsid	i
}
 8003a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a44:	bf00      	nop
 8003a46:	e7fd      	b.n	8003a44 <Error_Handler+0x8>

08003a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a4e:	2300      	movs	r3, #0
 8003a50:	607b      	str	r3, [r7, #4]
 8003a52:	4b12      	ldr	r3, [pc, #72]	@ (8003a9c <HAL_MspInit+0x54>)
 8003a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a56:	4a11      	ldr	r2, [pc, #68]	@ (8003a9c <HAL_MspInit+0x54>)
 8003a58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8003a9c <HAL_MspInit+0x54>)
 8003a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a66:	607b      	str	r3, [r7, #4]
 8003a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	603b      	str	r3, [r7, #0]
 8003a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a9c <HAL_MspInit+0x54>)
 8003a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a72:	4a0a      	ldr	r2, [pc, #40]	@ (8003a9c <HAL_MspInit+0x54>)
 8003a74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a78:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a7a:	4b08      	ldr	r3, [pc, #32]	@ (8003a9c <HAL_MspInit+0x54>)
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a82:	603b      	str	r3, [r7, #0]
 8003a84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a86:	2200      	movs	r2, #0
 8003a88:	210f      	movs	r1, #15
 8003a8a:	f06f 0001 	mvn.w	r0, #1
 8003a8e:	f001 fb57 	bl	8005140 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a92:	bf00      	nop
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	40023800 	.word	0x40023800

08003aa0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b08c      	sub	sp, #48	@ 0x30
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	60bb      	str	r3, [r7, #8]
 8003ab4:	4b2e      	ldr	r3, [pc, #184]	@ (8003b70 <HAL_InitTick+0xd0>)
 8003ab6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab8:	4a2d      	ldr	r2, [pc, #180]	@ (8003b70 <HAL_InitTick+0xd0>)
 8003aba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003abe:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ac0:	4b2b      	ldr	r3, [pc, #172]	@ (8003b70 <HAL_InitTick+0xd0>)
 8003ac2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ac4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ac8:	60bb      	str	r3, [r7, #8]
 8003aca:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003acc:	f107 020c 	add.w	r2, r7, #12
 8003ad0:	f107 0310 	add.w	r3, r7, #16
 8003ad4:	4611      	mov	r1, r2
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f003 fe32 	bl	8007740 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003adc:	f003 fe1c 	bl	8007718 <HAL_RCC_GetPCLK2Freq>
 8003ae0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ae4:	4a23      	ldr	r2, [pc, #140]	@ (8003b74 <HAL_InitTick+0xd4>)
 8003ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aea:	0c9b      	lsrs	r3, r3, #18
 8003aec:	3b01      	subs	r3, #1
 8003aee:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8003af0:	4b21      	ldr	r3, [pc, #132]	@ (8003b78 <HAL_InitTick+0xd8>)
 8003af2:	4a22      	ldr	r2, [pc, #136]	@ (8003b7c <HAL_InitTick+0xdc>)
 8003af4:	601a      	str	r2, [r3, #0]
   * Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8003af6:	4b20      	ldr	r3, [pc, #128]	@ (8003b78 <HAL_InitTick+0xd8>)
 8003af8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003afc:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8003afe:	4a1e      	ldr	r2, [pc, #120]	@ (8003b78 <HAL_InitTick+0xd8>)
 8003b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b02:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8003b04:	4b1c      	ldr	r3, [pc, #112]	@ (8003b78 <HAL_InitTick+0xd8>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b0a:	4b1b      	ldr	r3, [pc, #108]	@ (8003b78 <HAL_InitTick+0xd8>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b10:	4b19      	ldr	r3, [pc, #100]	@ (8003b78 <HAL_InitTick+0xd8>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8003b16:	4818      	ldr	r0, [pc, #96]	@ (8003b78 <HAL_InitTick+0xd8>)
 8003b18:	f003 fe44 	bl	80077a4 <HAL_TIM_Base_Init>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8003b22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d11b      	bne.n	8003b62 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8003b2a:	4813      	ldr	r0, [pc, #76]	@ (8003b78 <HAL_InitTick+0xd8>)
 8003b2c:	f003 fe8a 	bl	8007844 <HAL_TIM_Base_Start_IT>
 8003b30:	4603      	mov	r3, r0
 8003b32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8003b36:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d111      	bne.n	8003b62 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003b3e:	2019      	movs	r0, #25
 8003b40:	f001 fb1a 	bl	8005178 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b0f      	cmp	r3, #15
 8003b48:	d808      	bhi.n	8003b5c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	6879      	ldr	r1, [r7, #4]
 8003b4e:	2019      	movs	r0, #25
 8003b50:	f001 faf6 	bl	8005140 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b54:	4a0a      	ldr	r2, [pc, #40]	@ (8003b80 <HAL_InitTick+0xe0>)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	e002      	b.n	8003b62 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003b62:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3730      	adds	r7, #48	@ 0x30
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40023800 	.word	0x40023800
 8003b74:	431bde83 	.word	0x431bde83
 8003b78:	20000540 	.word	0x20000540
 8003b7c:	40014400 	.word	0x40014400
 8003b80:	200000e4 	.word	0x200000e4

08003b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003b88:	bf00      	nop
 8003b8a:	e7fd      	b.n	8003b88 <NMI_Handler+0x4>

08003b8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b90:	bf00      	nop
 8003b92:	e7fd      	b.n	8003b90 <HardFault_Handler+0x4>

08003b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b98:	bf00      	nop
 8003b9a:	e7fd      	b.n	8003b98 <MemManage_Handler+0x4>

08003b9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ba0:	bf00      	nop
 8003ba2:	e7fd      	b.n	8003ba0 <BusFault_Handler+0x4>

08003ba4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ba8:	bf00      	nop
 8003baa:	e7fd      	b.n	8003ba8 <UsageFault_Handler+0x4>

08003bac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bb0:	bf00      	nop
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
	...

08003bbc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8003bc0:	4802      	ldr	r0, [pc, #8]	@ (8003bcc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003bc2:	f004 f915 	bl	8007df0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003bc6:	bf00      	nop
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	20000540 	.word	0x20000540

08003bd0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8003bd4:	4804      	ldr	r0, [pc, #16]	@ (8003be8 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8003bd6:	f004 f90b 	bl	8007df0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */
  ulHighFrequencyTimerTicks++;
 8003bda:	4b04      	ldr	r3, [pc, #16]	@ (8003bec <TIM1_TRG_COM_TIM11_IRQHandler+0x1c>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	3301      	adds	r3, #1
 8003be0:	4a02      	ldr	r2, [pc, #8]	@ (8003bec <TIM1_TRG_COM_TIM11_IRQHandler+0x1c>)
 8003be2:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003be4:	bf00      	nop
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	20000630 	.word	0x20000630
 8003bec:	20000588 	.word	0x20000588

08003bf0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003bf4:	4802      	ldr	r0, [pc, #8]	@ (8003c00 <TIM3_IRQHandler+0x10>)
 8003bf6:	f004 f8fb 	bl	8007df0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003bfa:	bf00      	nop
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	200005a0 	.word	0x200005a0

08003c04 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003c08:	4802      	ldr	r0, [pc, #8]	@ (8003c14 <DMA2_Stream0_IRQHandler+0x10>)
 8003c0a:	f001 fbc9 	bl	80053a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003c0e:	bf00      	nop
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	20000454 	.word	0x20000454

08003c18 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003c1c:	4802      	ldr	r0, [pc, #8]	@ (8003c28 <DMA2_Stream2_IRQHandler+0x10>)
 8003c1e:	f001 fbbf 	bl	80053a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003c22:	bf00      	nop
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	200006c0 	.word	0x200006c0

08003c2c <SendRadioData>:
volatile int16_t pulseWidth_CH4 = 0;


/* Helper function to send updated data to the queue */
static void SendRadioData(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
    RadioData_t radioData;
    radioData.ch1 = pulseWidth_CH1;
 8003c32:	4b0d      	ldr	r3, [pc, #52]	@ (8003c68 <SendRadioData+0x3c>)
 8003c34:	881b      	ldrh	r3, [r3, #0]
 8003c36:	b21b      	sxth	r3, r3
 8003c38:	803b      	strh	r3, [r7, #0]
    radioData.ch2 = pulseWidth_CH2;
 8003c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8003c6c <SendRadioData+0x40>)
 8003c3c:	881b      	ldrh	r3, [r3, #0]
 8003c3e:	b21b      	sxth	r3, r3
 8003c40:	807b      	strh	r3, [r7, #2]
    radioData.ch3 = pulseWidth_CH3;
 8003c42:	4b0b      	ldr	r3, [pc, #44]	@ (8003c70 <SendRadioData+0x44>)
 8003c44:	881b      	ldrh	r3, [r3, #0]
 8003c46:	b21b      	sxth	r3, r3
 8003c48:	80bb      	strh	r3, [r7, #4]
    radioData.ch4 = pulseWidth_CH4;
 8003c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8003c74 <SendRadioData+0x48>)
 8003c4c:	881b      	ldrh	r3, [r3, #0]
 8003c4e:	b21b      	sxth	r3, r3
 8003c50:	80fb      	strh	r3, [r7, #6]
    /* Non-blocking put into the queue */
    osMessageQueuePut(radioQueueHandle, &radioData, 0, 0);
 8003c52:	4b09      	ldr	r3, [pc, #36]	@ (8003c78 <SendRadioData+0x4c>)
 8003c54:	6818      	ldr	r0, [r3, #0]
 8003c56:	4639      	mov	r1, r7
 8003c58:	2300      	movs	r3, #0
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f006 f882 	bl	8009d64 <osMessageQueuePut>
}
 8003c60:	bf00      	nop
 8003c62:	3708      	adds	r7, #8
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	2000058e 	.word	0x2000058e
 8003c6c:	20000592 	.word	0x20000592
 8003c70:	20000596 	.word	0x20000596
 8003c74:	2000059a 	.word	0x2000059a
 8003c78:	200004dc 	.word	0x200004dc

08003c7c <HAL_TIM_IC_CaptureCallback>:

/* Input capture callback handling all four channels */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a82      	ldr	r2, [pc, #520]	@ (8003e94 <HAL_TIM_IC_CaptureCallback+0x218>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	f040 819c 	bne.w	8003fc8 <HAL_TIM_IC_CaptureCallback+0x34c>
    {
        if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	7f1b      	ldrb	r3, [r3, #28]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d15d      	bne.n	8003d54 <HAL_TIM_IC_CaptureCallback+0xd8>
        {
            if (ic1_rising)
 8003c98:	4b7f      	ldr	r3, [pc, #508]	@ (8003e98 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d01b      	beq.n	8003cda <HAL_TIM_IC_CaptureCallback+0x5e>
            {
                /* Capture rising edge time for CH1 */
                ic1_rising_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f004 fbb9 	bl	800841c <HAL_TIM_ReadCapturedValue>
 8003caa:	4603      	mov	r3, r0
 8003cac:	b21a      	sxth	r2, r3
 8003cae:	4b7b      	ldr	r3, [pc, #492]	@ (8003e9c <HAL_TIM_IC_CaptureCallback+0x220>)
 8003cb0:	801a      	strh	r2, [r3, #0]
                ic1_rising = 0;
 8003cb2:	4b79      	ldr	r3, [pc, #484]	@ (8003e98 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	701a      	strb	r2, [r3, #0]
                /* Switch polarity to falling edge */
                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6a1a      	ldr	r2, [r3, #32]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 020a 	bic.w	r2, r2, #10
 8003cc6:	621a      	str	r2, [r3, #32]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6a1a      	ldr	r2, [r3, #32]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f042 0202 	orr.w	r2, r2, #2
 8003cd6:	621a      	str	r2, [r3, #32]
                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
                SendRadioData();
            }
        }
    }
}
 8003cd8:	e176      	b.n	8003fc8 <HAL_TIM_IC_CaptureCallback+0x34c>
                int16_t falling_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8003cda:	2100      	movs	r1, #0
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f004 fb9d 	bl	800841c <HAL_TIM_ReadCapturedValue>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	813b      	strh	r3, [r7, #8]
                if (falling_val >= ic1_rising_val)
 8003ce6:	4b6d      	ldr	r3, [pc, #436]	@ (8003e9c <HAL_TIM_IC_CaptureCallback+0x220>)
 8003ce8:	881b      	ldrh	r3, [r3, #0]
 8003cea:	b21b      	sxth	r3, r3
 8003cec:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	db0a      	blt.n	8003d0a <HAL_TIM_IC_CaptureCallback+0x8e>
                    pulseWidth_CH1 = falling_val - ic1_rising_val;
 8003cf4:	893a      	ldrh	r2, [r7, #8]
 8003cf6:	4b69      	ldr	r3, [pc, #420]	@ (8003e9c <HAL_TIM_IC_CaptureCallback+0x220>)
 8003cf8:	881b      	ldrh	r3, [r3, #0]
 8003cfa:	b21b      	sxth	r3, r3
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	b21a      	sxth	r2, r3
 8003d04:	4b66      	ldr	r3, [pc, #408]	@ (8003ea0 <HAL_TIM_IC_CaptureCallback+0x224>)
 8003d06:	801a      	strh	r2, [r3, #0]
 8003d08:	e010      	b.n	8003d2c <HAL_TIM_IC_CaptureCallback+0xb0>
                    pulseWidth_CH1 = (htim->Init.Period - ic1_rising_val) + falling_val + 1;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	4b62      	ldr	r3, [pc, #392]	@ (8003e9c <HAL_TIM_IC_CaptureCallback+0x220>)
 8003d12:	881b      	ldrh	r3, [r3, #0]
 8003d14:	b21b      	sxth	r3, r3
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	893b      	ldrh	r3, [r7, #8]
 8003d1e:	4413      	add	r3, r2
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	3301      	adds	r3, #1
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	b21a      	sxth	r2, r3
 8003d28:	4b5d      	ldr	r3, [pc, #372]	@ (8003ea0 <HAL_TIM_IC_CaptureCallback+0x224>)
 8003d2a:	801a      	strh	r2, [r3, #0]
                ic1_rising = 1;
 8003d2c:	4b5a      	ldr	r3, [pc, #360]	@ (8003e98 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8003d2e:	2201      	movs	r2, #1
 8003d30:	701a      	strb	r2, [r3, #0]
                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6a1a      	ldr	r2, [r3, #32]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f022 020a 	bic.w	r2, r2, #10
 8003d40:	621a      	str	r2, [r3, #32]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	6a12      	ldr	r2, [r2, #32]
 8003d4c:	621a      	str	r2, [r3, #32]
                SendRadioData();
 8003d4e:	f7ff ff6d 	bl	8003c2c <SendRadioData>
}
 8003d52:	e139      	b.n	8003fc8 <HAL_TIM_IC_CaptureCallback+0x34c>
        else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	7f1b      	ldrb	r3, [r3, #28]
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d15d      	bne.n	8003e18 <HAL_TIM_IC_CaptureCallback+0x19c>
            if (ic2_rising)
 8003d5c:	4b51      	ldr	r3, [pc, #324]	@ (8003ea4 <HAL_TIM_IC_CaptureCallback+0x228>)
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d01b      	beq.n	8003d9e <HAL_TIM_IC_CaptureCallback+0x122>
                ic2_rising_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8003d66:	2104      	movs	r1, #4
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f004 fb57 	bl	800841c <HAL_TIM_ReadCapturedValue>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	b21a      	sxth	r2, r3
 8003d72:	4b4d      	ldr	r3, [pc, #308]	@ (8003ea8 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8003d74:	801a      	strh	r2, [r3, #0]
                ic2_rising = 0;
 8003d76:	4b4b      	ldr	r3, [pc, #300]	@ (8003ea4 <HAL_TIM_IC_CaptureCallback+0x228>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	701a      	strb	r2, [r3, #0]
                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6a1a      	ldr	r2, [r3, #32]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003d8a:	621a      	str	r2, [r3, #32]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6a1a      	ldr	r2, [r3, #32]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f042 0220 	orr.w	r2, r2, #32
 8003d9a:	621a      	str	r2, [r3, #32]
}
 8003d9c:	e114      	b.n	8003fc8 <HAL_TIM_IC_CaptureCallback+0x34c>
                int16_t falling_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8003d9e:	2104      	movs	r1, #4
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f004 fb3b 	bl	800841c <HAL_TIM_ReadCapturedValue>
 8003da6:	4603      	mov	r3, r0
 8003da8:	817b      	strh	r3, [r7, #10]
                if (falling_val >= ic2_rising_val)
 8003daa:	4b3f      	ldr	r3, [pc, #252]	@ (8003ea8 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8003dac:	881b      	ldrh	r3, [r3, #0]
 8003dae:	b21b      	sxth	r3, r3
 8003db0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	db0a      	blt.n	8003dce <HAL_TIM_IC_CaptureCallback+0x152>
                    pulseWidth_CH2 = falling_val - ic2_rising_val;
 8003db8:	897a      	ldrh	r2, [r7, #10]
 8003dba:	4b3b      	ldr	r3, [pc, #236]	@ (8003ea8 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8003dbc:	881b      	ldrh	r3, [r3, #0]
 8003dbe:	b21b      	sxth	r3, r3
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	b21a      	sxth	r2, r3
 8003dc8:	4b38      	ldr	r3, [pc, #224]	@ (8003eac <HAL_TIM_IC_CaptureCallback+0x230>)
 8003dca:	801a      	strh	r2, [r3, #0]
 8003dcc:	e010      	b.n	8003df0 <HAL_TIM_IC_CaptureCallback+0x174>
                    pulseWidth_CH2 = (htim->Init.Period - ic2_rising_val) + falling_val + 1;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	4b34      	ldr	r3, [pc, #208]	@ (8003ea8 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8003dd6:	881b      	ldrh	r3, [r3, #0]
 8003dd8:	b21b      	sxth	r3, r3
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	897b      	ldrh	r3, [r7, #10]
 8003de2:	4413      	add	r3, r2
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	3301      	adds	r3, #1
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	b21a      	sxth	r2, r3
 8003dec:	4b2f      	ldr	r3, [pc, #188]	@ (8003eac <HAL_TIM_IC_CaptureCallback+0x230>)
 8003dee:	801a      	strh	r2, [r3, #0]
                ic2_rising = 1;
 8003df0:	4b2c      	ldr	r3, [pc, #176]	@ (8003ea4 <HAL_TIM_IC_CaptureCallback+0x228>)
 8003df2:	2201      	movs	r2, #1
 8003df4:	701a      	strb	r2, [r3, #0]
                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	6a1a      	ldr	r2, [r3, #32]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e04:	621a      	str	r2, [r3, #32]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	6a12      	ldr	r2, [r2, #32]
 8003e10:	621a      	str	r2, [r3, #32]
                SendRadioData();
 8003e12:	f7ff ff0b 	bl	8003c2c <SendRadioData>
}
 8003e16:	e0d7      	b.n	8003fc8 <HAL_TIM_IC_CaptureCallback+0x34c>
        else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	7f1b      	ldrb	r3, [r3, #28]
 8003e1c:	2b04      	cmp	r3, #4
 8003e1e:	d172      	bne.n	8003f06 <HAL_TIM_IC_CaptureCallback+0x28a>
            if (ic3_rising)
 8003e20:	4b23      	ldr	r3, [pc, #140]	@ (8003eb0 <HAL_TIM_IC_CaptureCallback+0x234>)
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d01b      	beq.n	8003e62 <HAL_TIM_IC_CaptureCallback+0x1e6>
                ic3_rising_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8003e2a:	2108      	movs	r1, #8
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f004 faf5 	bl	800841c <HAL_TIM_ReadCapturedValue>
 8003e32:	4603      	mov	r3, r0
 8003e34:	b21a      	sxth	r2, r3
 8003e36:	4b1f      	ldr	r3, [pc, #124]	@ (8003eb4 <HAL_TIM_IC_CaptureCallback+0x238>)
 8003e38:	801a      	strh	r2, [r3, #0]
                ic3_rising = 0;
 8003e3a:	4b1d      	ldr	r3, [pc, #116]	@ (8003eb0 <HAL_TIM_IC_CaptureCallback+0x234>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	701a      	strb	r2, [r3, #0]
                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6a1a      	ldr	r2, [r3, #32]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 8003e4e:	621a      	str	r2, [r3, #32]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6a1a      	ldr	r2, [r3, #32]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e5e:	621a      	str	r2, [r3, #32]
}
 8003e60:	e0b2      	b.n	8003fc8 <HAL_TIM_IC_CaptureCallback+0x34c>
                int16_t falling_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8003e62:	2108      	movs	r1, #8
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f004 fad9 	bl	800841c <HAL_TIM_ReadCapturedValue>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	81bb      	strh	r3, [r7, #12]
                if (falling_val >= ic3_rising_val)
 8003e6e:	4b11      	ldr	r3, [pc, #68]	@ (8003eb4 <HAL_TIM_IC_CaptureCallback+0x238>)
 8003e70:	881b      	ldrh	r3, [r3, #0]
 8003e72:	b21b      	sxth	r3, r3
 8003e74:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	db1f      	blt.n	8003ebc <HAL_TIM_IC_CaptureCallback+0x240>
                    pulseWidth_CH3 = falling_val - ic3_rising_val;
 8003e7c:	89ba      	ldrh	r2, [r7, #12]
 8003e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003eb4 <HAL_TIM_IC_CaptureCallback+0x238>)
 8003e80:	881b      	ldrh	r3, [r3, #0]
 8003e82:	b21b      	sxth	r3, r3
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	b21a      	sxth	r2, r3
 8003e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8003eb8 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8003e8e:	801a      	strh	r2, [r3, #0]
 8003e90:	e025      	b.n	8003ede <HAL_TIM_IC_CaptureCallback+0x262>
 8003e92:	bf00      	nop
 8003e94:	40000400 	.word	0x40000400
 8003e98:	200000dc 	.word	0x200000dc
 8003e9c:	2000058c 	.word	0x2000058c
 8003ea0:	2000058e 	.word	0x2000058e
 8003ea4:	200000dd 	.word	0x200000dd
 8003ea8:	20000590 	.word	0x20000590
 8003eac:	20000592 	.word	0x20000592
 8003eb0:	200000de 	.word	0x200000de
 8003eb4:	20000594 	.word	0x20000594
 8003eb8:	20000596 	.word	0x20000596
                    pulseWidth_CH3 = (htim->Init.Period - ic3_rising_val) + falling_val + 1;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	4b43      	ldr	r3, [pc, #268]	@ (8003fd0 <HAL_TIM_IC_CaptureCallback+0x354>)
 8003ec4:	881b      	ldrh	r3, [r3, #0]
 8003ec6:	b21b      	sxth	r3, r3
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	89bb      	ldrh	r3, [r7, #12]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	b21a      	sxth	r2, r3
 8003eda:	4b3e      	ldr	r3, [pc, #248]	@ (8003fd4 <HAL_TIM_IC_CaptureCallback+0x358>)
 8003edc:	801a      	strh	r2, [r3, #0]
                ic3_rising = 1;
 8003ede:	4b3e      	ldr	r3, [pc, #248]	@ (8003fd8 <HAL_TIM_IC_CaptureCallback+0x35c>)
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	701a      	strb	r2, [r3, #0]
                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6a1a      	ldr	r2, [r3, #32]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 8003ef2:	621a      	str	r2, [r3, #32]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6a12      	ldr	r2, [r2, #32]
 8003efe:	621a      	str	r2, [r3, #32]
                SendRadioData();
 8003f00:	f7ff fe94 	bl	8003c2c <SendRadioData>
}
 8003f04:	e060      	b.n	8003fc8 <HAL_TIM_IC_CaptureCallback+0x34c>
        else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	7f1b      	ldrb	r3, [r3, #28]
 8003f0a:	2b08      	cmp	r3, #8
 8003f0c:	d15c      	bne.n	8003fc8 <HAL_TIM_IC_CaptureCallback+0x34c>
            if (ic4_rising)
 8003f0e:	4b33      	ldr	r3, [pc, #204]	@ (8003fdc <HAL_TIM_IC_CaptureCallback+0x360>)
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d01b      	beq.n	8003f50 <HAL_TIM_IC_CaptureCallback+0x2d4>
                ic4_rising_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8003f18:	210c      	movs	r1, #12
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f004 fa7e 	bl	800841c <HAL_TIM_ReadCapturedValue>
 8003f20:	4603      	mov	r3, r0
 8003f22:	b21a      	sxth	r2, r3
 8003f24:	4b2e      	ldr	r3, [pc, #184]	@ (8003fe0 <HAL_TIM_IC_CaptureCallback+0x364>)
 8003f26:	801a      	strh	r2, [r3, #0]
                ic4_rising = 0;
 8003f28:	4b2c      	ldr	r3, [pc, #176]	@ (8003fdc <HAL_TIM_IC_CaptureCallback+0x360>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	701a      	strb	r2, [r3, #0]
                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_FALLING);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6a1a      	ldr	r2, [r3, #32]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 8003f3c:	621a      	str	r2, [r3, #32]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6a1a      	ldr	r2, [r3, #32]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f4c:	621a      	str	r2, [r3, #32]
}
 8003f4e:	e03b      	b.n	8003fc8 <HAL_TIM_IC_CaptureCallback+0x34c>
                int16_t falling_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8003f50:	210c      	movs	r1, #12
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f004 fa62 	bl	800841c <HAL_TIM_ReadCapturedValue>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	81fb      	strh	r3, [r7, #14]
                if (falling_val >= ic4_rising_val)
 8003f5c:	4b20      	ldr	r3, [pc, #128]	@ (8003fe0 <HAL_TIM_IC_CaptureCallback+0x364>)
 8003f5e:	881b      	ldrh	r3, [r3, #0]
 8003f60:	b21b      	sxth	r3, r3
 8003f62:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	db0a      	blt.n	8003f80 <HAL_TIM_IC_CaptureCallback+0x304>
                    pulseWidth_CH4 = falling_val - ic4_rising_val;
 8003f6a:	89fa      	ldrh	r2, [r7, #14]
 8003f6c:	4b1c      	ldr	r3, [pc, #112]	@ (8003fe0 <HAL_TIM_IC_CaptureCallback+0x364>)
 8003f6e:	881b      	ldrh	r3, [r3, #0]
 8003f70:	b21b      	sxth	r3, r3
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	b21a      	sxth	r2, r3
 8003f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8003fe4 <HAL_TIM_IC_CaptureCallback+0x368>)
 8003f7c:	801a      	strh	r2, [r3, #0]
 8003f7e:	e010      	b.n	8003fa2 <HAL_TIM_IC_CaptureCallback+0x326>
                    pulseWidth_CH4 = (htim->Init.Period - ic4_rising_val) + falling_val + 1;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	4b16      	ldr	r3, [pc, #88]	@ (8003fe0 <HAL_TIM_IC_CaptureCallback+0x364>)
 8003f88:	881b      	ldrh	r3, [r3, #0]
 8003f8a:	b21b      	sxth	r3, r3
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	89fb      	ldrh	r3, [r7, #14]
 8003f94:	4413      	add	r3, r2
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	3301      	adds	r3, #1
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	b21a      	sxth	r2, r3
 8003f9e:	4b11      	ldr	r3, [pc, #68]	@ (8003fe4 <HAL_TIM_IC_CaptureCallback+0x368>)
 8003fa0:	801a      	strh	r2, [r3, #0]
                ic4_rising = 1;
 8003fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8003fdc <HAL_TIM_IC_CaptureCallback+0x360>)
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	701a      	strb	r2, [r3, #0]
                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6a1a      	ldr	r2, [r3, #32]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 8003fb6:	621a      	str	r2, [r3, #32]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6a12      	ldr	r2, [r2, #32]
 8003fc2:	621a      	str	r2, [r3, #32]
                SendRadioData();
 8003fc4:	f7ff fe32 	bl	8003c2c <SendRadioData>
}
 8003fc8:	bf00      	nop
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	20000594 	.word	0x20000594
 8003fd4:	20000596 	.word	0x20000596
 8003fd8:	200000de 	.word	0x200000de
 8003fdc:	200000df 	.word	0x200000df
 8003fe0:	20000598 	.word	0x20000598
 8003fe4:	2000059a 	.word	0x2000059a

08003fe8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
  return 1;
 8003fec:	2301      	movs	r3, #1
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <_kill>:

int _kill(int pid, int sig)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004002:	f00a fd9b 	bl	800eb3c <__errno>
 8004006:	4603      	mov	r3, r0
 8004008:	2216      	movs	r2, #22
 800400a:	601a      	str	r2, [r3, #0]
  return -1;
 800400c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004010:	4618      	mov	r0, r3
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <_exit>:

void _exit (int status)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004020:	f04f 31ff 	mov.w	r1, #4294967295
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f7ff ffe7 	bl	8003ff8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800402a:	bf00      	nop
 800402c:	e7fd      	b.n	800402a <_exit+0x12>

0800402e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b086      	sub	sp, #24
 8004032:	af00      	add	r7, sp, #0
 8004034:	60f8      	str	r0, [r7, #12]
 8004036:	60b9      	str	r1, [r7, #8]
 8004038:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800403a:	2300      	movs	r3, #0
 800403c:	617b      	str	r3, [r7, #20]
 800403e:	e00a      	b.n	8004056 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004040:	f3af 8000 	nop.w
 8004044:	4601      	mov	r1, r0
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	1c5a      	adds	r2, r3, #1
 800404a:	60ba      	str	r2, [r7, #8]
 800404c:	b2ca      	uxtb	r2, r1
 800404e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	3301      	adds	r3, #1
 8004054:	617b      	str	r3, [r7, #20]
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	429a      	cmp	r2, r3
 800405c:	dbf0      	blt.n	8004040 <_read+0x12>
  }

  return len;
 800405e:	687b      	ldr	r3, [r7, #4]
}
 8004060:	4618      	mov	r0, r3
 8004062:	3718      	adds	r7, #24
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004074:	2300      	movs	r3, #0
 8004076:	617b      	str	r3, [r7, #20]
 8004078:	e009      	b.n	800408e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	1c5a      	adds	r2, r3, #1
 800407e:	60ba      	str	r2, [r7, #8]
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	3301      	adds	r3, #1
 800408c:	617b      	str	r3, [r7, #20]
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	429a      	cmp	r2, r3
 8004094:	dbf1      	blt.n	800407a <_write+0x12>
  }
  return len;
 8004096:	687b      	ldr	r3, [r7, #4]
}
 8004098:	4618      	mov	r0, r3
 800409a:	3718      	adds	r7, #24
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <_close>:

int _close(int file)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80040a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80040c8:	605a      	str	r2, [r3, #4]
  return 0;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <_isatty>:

int _isatty(int file)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80040e0:	2301      	movs	r3, #1
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b085      	sub	sp, #20
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	60f8      	str	r0, [r7, #12]
 80040f6:	60b9      	str	r1, [r7, #8]
 80040f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3714      	adds	r7, #20
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004110:	4a14      	ldr	r2, [pc, #80]	@ (8004164 <_sbrk+0x5c>)
 8004112:	4b15      	ldr	r3, [pc, #84]	@ (8004168 <_sbrk+0x60>)
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800411c:	4b13      	ldr	r3, [pc, #76]	@ (800416c <_sbrk+0x64>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d102      	bne.n	800412a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004124:	4b11      	ldr	r3, [pc, #68]	@ (800416c <_sbrk+0x64>)
 8004126:	4a12      	ldr	r2, [pc, #72]	@ (8004170 <_sbrk+0x68>)
 8004128:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800412a:	4b10      	ldr	r3, [pc, #64]	@ (800416c <_sbrk+0x64>)
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4413      	add	r3, r2
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	429a      	cmp	r2, r3
 8004136:	d207      	bcs.n	8004148 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004138:	f00a fd00 	bl	800eb3c <__errno>
 800413c:	4603      	mov	r3, r0
 800413e:	220c      	movs	r2, #12
 8004140:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004142:	f04f 33ff 	mov.w	r3, #4294967295
 8004146:	e009      	b.n	800415c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004148:	4b08      	ldr	r3, [pc, #32]	@ (800416c <_sbrk+0x64>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800414e:	4b07      	ldr	r3, [pc, #28]	@ (800416c <_sbrk+0x64>)
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4413      	add	r3, r2
 8004156:	4a05      	ldr	r2, [pc, #20]	@ (800416c <_sbrk+0x64>)
 8004158:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800415a:	68fb      	ldr	r3, [r7, #12]
}
 800415c:	4618      	mov	r0, r3
 800415e:	3718      	adds	r7, #24
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	20010000 	.word	0x20010000
 8004168:	00000400 	.word	0x00000400
 800416c:	2000059c 	.word	0x2000059c
 8004170:	200052c0 	.word	0x200052c0

08004174 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004174:	b480      	push	{r7}
 8004176:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004178:	4b06      	ldr	r3, [pc, #24]	@ (8004194 <SystemInit+0x20>)
 800417a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800417e:	4a05      	ldr	r2, [pc, #20]	@ (8004194 <SystemInit+0x20>)
 8004180:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004184:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004188:	bf00      	nop
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	e000ed00 	.word	0xe000ed00

08004198 <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b08a      	sub	sp, #40	@ 0x28
 800419c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800419e:	f107 0318 	add.w	r3, r7, #24
 80041a2:	2200      	movs	r2, #0
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	605a      	str	r2, [r3, #4]
 80041a8:	609a      	str	r2, [r3, #8]
 80041aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041ac:	f107 0310 	add.w	r3, r7, #16
 80041b0:	2200      	movs	r2, #0
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80041b6:	463b      	mov	r3, r7
 80041b8:	2200      	movs	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]
 80041bc:	605a      	str	r2, [r3, #4]
 80041be:	609a      	str	r2, [r3, #8]
 80041c0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80041c2:	4b3c      	ldr	r3, [pc, #240]	@ (80042b4 <MX_TIM3_Init+0x11c>)
 80041c4:	4a3c      	ldr	r2, [pc, #240]	@ (80042b8 <MX_TIM3_Init+0x120>)
 80041c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 80041c8:	4b3a      	ldr	r3, [pc, #232]	@ (80042b4 <MX_TIM3_Init+0x11c>)
 80041ca:	2254      	movs	r2, #84	@ 0x54
 80041cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041ce:	4b39      	ldr	r3, [pc, #228]	@ (80042b4 <MX_TIM3_Init+0x11c>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80041d4:	4b37      	ldr	r3, [pc, #220]	@ (80042b4 <MX_TIM3_Init+0x11c>)
 80041d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80041da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041dc:	4b35      	ldr	r3, [pc, #212]	@ (80042b4 <MX_TIM3_Init+0x11c>)
 80041de:	2200      	movs	r2, #0
 80041e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041e2:	4b34      	ldr	r3, [pc, #208]	@ (80042b4 <MX_TIM3_Init+0x11c>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80041e8:	4832      	ldr	r0, [pc, #200]	@ (80042b4 <MX_TIM3_Init+0x11c>)
 80041ea:	f003 fadb 	bl	80077a4 <HAL_TIM_Base_Init>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d001      	beq.n	80041f8 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80041f4:	f7ff fc22 	bl	8003a3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80041fc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80041fe:	f107 0318 	add.w	r3, r7, #24
 8004202:	4619      	mov	r1, r3
 8004204:	482b      	ldr	r0, [pc, #172]	@ (80042b4 <MX_TIM3_Init+0x11c>)
 8004206:	f004 f841 	bl	800828c <HAL_TIM_ConfigClockSource>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8004210:	f7ff fc14 	bl	8003a3c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8004214:	4827      	ldr	r0, [pc, #156]	@ (80042b4 <MX_TIM3_Init+0x11c>)
 8004216:	f003 fc77 	bl	8007b08 <HAL_TIM_IC_Init>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8004220:	f7ff fc0c 	bl	8003a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004224:	2300      	movs	r3, #0
 8004226:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004228:	2300      	movs	r3, #0
 800422a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800422c:	f107 0310 	add.w	r3, r7, #16
 8004230:	4619      	mov	r1, r3
 8004232:	4820      	ldr	r0, [pc, #128]	@ (80042b4 <MX_TIM3_Init+0x11c>)
 8004234:	f004 fd4a 	bl	8008ccc <HAL_TIMEx_MasterConfigSynchronization>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800423e:	f7ff fbfd 	bl	8003a3c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8004242:	230a      	movs	r3, #10
 8004244:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004246:	2301      	movs	r3, #1
 8004248:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800424a:	2300      	movs	r3, #0
 800424c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800424e:	2300      	movs	r3, #0
 8004250:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004252:	463b      	mov	r3, r7
 8004254:	2200      	movs	r2, #0
 8004256:	4619      	mov	r1, r3
 8004258:	4816      	ldr	r0, [pc, #88]	@ (80042b4 <MX_TIM3_Init+0x11c>)
 800425a:	f003 feb9 	bl	8007fd0 <HAL_TIM_IC_ConfigChannel>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8004264:	f7ff fbea 	bl	8003a3c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8004268:	463b      	mov	r3, r7
 800426a:	2204      	movs	r2, #4
 800426c:	4619      	mov	r1, r3
 800426e:	4811      	ldr	r0, [pc, #68]	@ (80042b4 <MX_TIM3_Init+0x11c>)
 8004270:	f003 feae 	bl	8007fd0 <HAL_TIM_IC_ConfigChannel>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 800427a:	f7ff fbdf 	bl	8003a3c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800427e:	463b      	mov	r3, r7
 8004280:	2208      	movs	r2, #8
 8004282:	4619      	mov	r1, r3
 8004284:	480b      	ldr	r0, [pc, #44]	@ (80042b4 <MX_TIM3_Init+0x11c>)
 8004286:	f003 fea3 	bl	8007fd0 <HAL_TIM_IC_ConfigChannel>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d001      	beq.n	8004294 <MX_TIM3_Init+0xfc>
  {
    Error_Handler();
 8004290:	f7ff fbd4 	bl	8003a3c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8004294:	463b      	mov	r3, r7
 8004296:	220c      	movs	r2, #12
 8004298:	4619      	mov	r1, r3
 800429a:	4806      	ldr	r0, [pc, #24]	@ (80042b4 <MX_TIM3_Init+0x11c>)
 800429c:	f003 fe98 	bl	8007fd0 <HAL_TIM_IC_ConfigChannel>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <MX_TIM3_Init+0x112>
  {
    Error_Handler();
 80042a6:	f7ff fbc9 	bl	8003a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80042aa:	bf00      	nop
 80042ac:	3728      	adds	r7, #40	@ 0x28
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	200005a0 	.word	0x200005a0
 80042b8:	40000400 	.word	0x40000400

080042bc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b08a      	sub	sp, #40	@ 0x28
 80042c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042c2:	f107 0320 	add.w	r3, r7, #32
 80042c6:	2200      	movs	r2, #0
 80042c8:	601a      	str	r2, [r3, #0]
 80042ca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80042cc:	1d3b      	adds	r3, r7, #4
 80042ce:	2200      	movs	r2, #0
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	605a      	str	r2, [r3, #4]
 80042d4:	609a      	str	r2, [r3, #8]
 80042d6:	60da      	str	r2, [r3, #12]
 80042d8:	611a      	str	r2, [r3, #16]
 80042da:	615a      	str	r2, [r3, #20]
 80042dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80042de:	4b32      	ldr	r3, [pc, #200]	@ (80043a8 <MX_TIM4_Init+0xec>)
 80042e0:	4a32      	ldr	r2, [pc, #200]	@ (80043ac <MX_TIM4_Init+0xf0>)
 80042e2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 27;
 80042e4:	4b30      	ldr	r3, [pc, #192]	@ (80043a8 <MX_TIM4_Init+0xec>)
 80042e6:	221b      	movs	r2, #27
 80042e8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042ea:	4b2f      	ldr	r3, [pc, #188]	@ (80043a8 <MX_TIM4_Init+0xec>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 80042f0:	4b2d      	ldr	r3, [pc, #180]	@ (80043a8 <MX_TIM4_Init+0xec>)
 80042f2:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80042f6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042f8:	4b2b      	ldr	r3, [pc, #172]	@ (80043a8 <MX_TIM4_Init+0xec>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80042fe:	4b2a      	ldr	r3, [pc, #168]	@ (80043a8 <MX_TIM4_Init+0xec>)
 8004300:	2280      	movs	r2, #128	@ 0x80
 8004302:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004304:	4828      	ldr	r0, [pc, #160]	@ (80043a8 <MX_TIM4_Init+0xec>)
 8004306:	f003 faff 	bl	8007908 <HAL_TIM_PWM_Init>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d001      	beq.n	8004314 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8004310:	f7ff fb94 	bl	8003a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004314:	2300      	movs	r3, #0
 8004316:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004318:	2300      	movs	r3, #0
 800431a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800431c:	f107 0320 	add.w	r3, r7, #32
 8004320:	4619      	mov	r1, r3
 8004322:	4821      	ldr	r0, [pc, #132]	@ (80043a8 <MX_TIM4_Init+0xec>)
 8004324:	f004 fcd2 	bl	8008ccc <HAL_TIMEx_MasterConfigSynchronization>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800432e:	f7ff fb85 	bl	8003a3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004332:	2360      	movs	r3, #96	@ 0x60
 8004334:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004336:	2300      	movs	r3, #0
 8004338:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800433a:	2300      	movs	r3, #0
 800433c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800433e:	2300      	movs	r3, #0
 8004340:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004342:	1d3b      	adds	r3, r7, #4
 8004344:	2200      	movs	r2, #0
 8004346:	4619      	mov	r1, r3
 8004348:	4817      	ldr	r0, [pc, #92]	@ (80043a8 <MX_TIM4_Init+0xec>)
 800434a:	f003 fedd 	bl	8008108 <HAL_TIM_PWM_ConfigChannel>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d001      	beq.n	8004358 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8004354:	f7ff fb72 	bl	8003a3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004358:	1d3b      	adds	r3, r7, #4
 800435a:	2204      	movs	r2, #4
 800435c:	4619      	mov	r1, r3
 800435e:	4812      	ldr	r0, [pc, #72]	@ (80043a8 <MX_TIM4_Init+0xec>)
 8004360:	f003 fed2 	bl	8008108 <HAL_TIM_PWM_ConfigChannel>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800436a:	f7ff fb67 	bl	8003a3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800436e:	1d3b      	adds	r3, r7, #4
 8004370:	2208      	movs	r2, #8
 8004372:	4619      	mov	r1, r3
 8004374:	480c      	ldr	r0, [pc, #48]	@ (80043a8 <MX_TIM4_Init+0xec>)
 8004376:	f003 fec7 	bl	8008108 <HAL_TIM_PWM_ConfigChannel>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8004380:	f7ff fb5c 	bl	8003a3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004384:	1d3b      	adds	r3, r7, #4
 8004386:	220c      	movs	r2, #12
 8004388:	4619      	mov	r1, r3
 800438a:	4807      	ldr	r0, [pc, #28]	@ (80043a8 <MX_TIM4_Init+0xec>)
 800438c:	f003 febc 	bl	8008108 <HAL_TIM_PWM_ConfigChannel>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8004396:	f7ff fb51 	bl	8003a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800439a:	4803      	ldr	r0, [pc, #12]	@ (80043a8 <MX_TIM4_Init+0xec>)
 800439c:	f000 f8da 	bl	8004554 <HAL_TIM_MspPostInit>

}
 80043a0:	bf00      	nop
 80043a2:	3728      	adds	r7, #40	@ 0x28
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	200005e8 	.word	0x200005e8
 80043ac:	40000800 	.word	0x40000800

080043b0 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80043b4:	4b0d      	ldr	r3, [pc, #52]	@ (80043ec <MX_TIM11_Init+0x3c>)
 80043b6:	4a0e      	ldr	r2, [pc, #56]	@ (80043f0 <MX_TIM11_Init+0x40>)
 80043b8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 84;
 80043ba:	4b0c      	ldr	r3, [pc, #48]	@ (80043ec <MX_TIM11_Init+0x3c>)
 80043bc:	2254      	movs	r2, #84	@ 0x54
 80043be:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043c0:	4b0a      	ldr	r3, [pc, #40]	@ (80043ec <MX_TIM11_Init+0x3c>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 99;
 80043c6:	4b09      	ldr	r3, [pc, #36]	@ (80043ec <MX_TIM11_Init+0x3c>)
 80043c8:	2263      	movs	r2, #99	@ 0x63
 80043ca:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043cc:	4b07      	ldr	r3, [pc, #28]	@ (80043ec <MX_TIM11_Init+0x3c>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80043d2:	4b06      	ldr	r3, [pc, #24]	@ (80043ec <MX_TIM11_Init+0x3c>)
 80043d4:	2280      	movs	r2, #128	@ 0x80
 80043d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80043d8:	4804      	ldr	r0, [pc, #16]	@ (80043ec <MX_TIM11_Init+0x3c>)
 80043da:	f003 f9e3 	bl	80077a4 <HAL_TIM_Base_Init>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <MX_TIM11_Init+0x38>
  {
    Error_Handler();
 80043e4:	f7ff fb2a 	bl	8003a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80043e8:	bf00      	nop
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	20000630 	.word	0x20000630
 80043f0:	40014800 	.word	0x40014800

080043f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b08c      	sub	sp, #48	@ 0x30
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043fc:	f107 031c 	add.w	r3, r7, #28
 8004400:	2200      	movs	r2, #0
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	605a      	str	r2, [r3, #4]
 8004406:	609a      	str	r2, [r3, #8]
 8004408:	60da      	str	r2, [r3, #12]
 800440a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a3a      	ldr	r2, [pc, #232]	@ (80044fc <HAL_TIM_Base_MspInit+0x108>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d152      	bne.n	80044bc <HAL_TIM_Base_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004416:	2300      	movs	r3, #0
 8004418:	61bb      	str	r3, [r7, #24]
 800441a:	4b39      	ldr	r3, [pc, #228]	@ (8004500 <HAL_TIM_Base_MspInit+0x10c>)
 800441c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441e:	4a38      	ldr	r2, [pc, #224]	@ (8004500 <HAL_TIM_Base_MspInit+0x10c>)
 8004420:	f043 0302 	orr.w	r3, r3, #2
 8004424:	6413      	str	r3, [r2, #64]	@ 0x40
 8004426:	4b36      	ldr	r3, [pc, #216]	@ (8004500 <HAL_TIM_Base_MspInit+0x10c>)
 8004428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	61bb      	str	r3, [r7, #24]
 8004430:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004432:	2300      	movs	r3, #0
 8004434:	617b      	str	r3, [r7, #20]
 8004436:	4b32      	ldr	r3, [pc, #200]	@ (8004500 <HAL_TIM_Base_MspInit+0x10c>)
 8004438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800443a:	4a31      	ldr	r2, [pc, #196]	@ (8004500 <HAL_TIM_Base_MspInit+0x10c>)
 800443c:	f043 0301 	orr.w	r3, r3, #1
 8004440:	6313      	str	r3, [r2, #48]	@ 0x30
 8004442:	4b2f      	ldr	r3, [pc, #188]	@ (8004500 <HAL_TIM_Base_MspInit+0x10c>)
 8004444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	617b      	str	r3, [r7, #20]
 800444c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800444e:	2300      	movs	r3, #0
 8004450:	613b      	str	r3, [r7, #16]
 8004452:	4b2b      	ldr	r3, [pc, #172]	@ (8004500 <HAL_TIM_Base_MspInit+0x10c>)
 8004454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004456:	4a2a      	ldr	r2, [pc, #168]	@ (8004500 <HAL_TIM_Base_MspInit+0x10c>)
 8004458:	f043 0302 	orr.w	r3, r3, #2
 800445c:	6313      	str	r3, [r2, #48]	@ 0x30
 800445e:	4b28      	ldr	r3, [pc, #160]	@ (8004500 <HAL_TIM_Base_MspInit+0x10c>)
 8004460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	613b      	str	r3, [r7, #16]
 8004468:	693b      	ldr	r3, [r7, #16]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin;
 800446a:	23c0      	movs	r3, #192	@ 0xc0
 800446c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800446e:	2302      	movs	r3, #2
 8004470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004472:	2300      	movs	r3, #0
 8004474:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004476:	2300      	movs	r3, #0
 8004478:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800447a:	2302      	movs	r3, #2
 800447c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800447e:	f107 031c 	add.w	r3, r7, #28
 8004482:	4619      	mov	r1, r3
 8004484:	481f      	ldr	r0, [pc, #124]	@ (8004504 <HAL_TIM_Base_MspInit+0x110>)
 8004486:	f001 f9f5 	bl	8005874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IN3_Pin|IN4_Pin;
 800448a:	2303      	movs	r3, #3
 800448c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800448e:	2302      	movs	r3, #2
 8004490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004492:	2300      	movs	r3, #0
 8004494:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004496:	2300      	movs	r3, #0
 8004498:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800449a:	2302      	movs	r3, #2
 800449c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800449e:	f107 031c 	add.w	r3, r7, #28
 80044a2:	4619      	mov	r1, r3
 80044a4:	4818      	ldr	r0, [pc, #96]	@ (8004508 <HAL_TIM_Base_MspInit+0x114>)
 80044a6:	f001 f9e5 	bl	8005874 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80044aa:	2200      	movs	r2, #0
 80044ac:	2105      	movs	r1, #5
 80044ae:	201d      	movs	r0, #29
 80044b0:	f000 fe46 	bl	8005140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80044b4:	201d      	movs	r0, #29
 80044b6:	f000 fe5f 	bl	8005178 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80044ba:	e01a      	b.n	80044f2 <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM11)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a12      	ldr	r2, [pc, #72]	@ (800450c <HAL_TIM_Base_MspInit+0x118>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d115      	bne.n	80044f2 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80044c6:	2300      	movs	r3, #0
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004500 <HAL_TIM_Base_MspInit+0x10c>)
 80044cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ce:	4a0c      	ldr	r2, [pc, #48]	@ (8004500 <HAL_TIM_Base_MspInit+0x10c>)
 80044d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80044d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004500 <HAL_TIM_Base_MspInit+0x10c>)
 80044d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044de:	60fb      	str	r3, [r7, #12]
 80044e0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 80044e2:	2200      	movs	r2, #0
 80044e4:	2105      	movs	r1, #5
 80044e6:	201a      	movs	r0, #26
 80044e8:	f000 fe2a 	bl	8005140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80044ec:	201a      	movs	r0, #26
 80044ee:	f000 fe43 	bl	8005178 <HAL_NVIC_EnableIRQ>
}
 80044f2:	bf00      	nop
 80044f4:	3730      	adds	r7, #48	@ 0x30
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	40000400 	.word	0x40000400
 8004500:	40023800 	.word	0x40023800
 8004504:	40020000 	.word	0x40020000
 8004508:	40020400 	.word	0x40020400
 800450c:	40014800 	.word	0x40014800

08004510 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a0b      	ldr	r2, [pc, #44]	@ (800454c <HAL_TIM_PWM_MspInit+0x3c>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d10d      	bne.n	800453e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004522:	2300      	movs	r3, #0
 8004524:	60fb      	str	r3, [r7, #12]
 8004526:	4b0a      	ldr	r3, [pc, #40]	@ (8004550 <HAL_TIM_PWM_MspInit+0x40>)
 8004528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452a:	4a09      	ldr	r2, [pc, #36]	@ (8004550 <HAL_TIM_PWM_MspInit+0x40>)
 800452c:	f043 0304 	orr.w	r3, r3, #4
 8004530:	6413      	str	r3, [r2, #64]	@ 0x40
 8004532:	4b07      	ldr	r3, [pc, #28]	@ (8004550 <HAL_TIM_PWM_MspInit+0x40>)
 8004534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004536:	f003 0304 	and.w	r3, r3, #4
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800453e:	bf00      	nop
 8004540:	3714      	adds	r7, #20
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	40000800 	.word	0x40000800
 8004550:	40023800 	.word	0x40023800

08004554 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b088      	sub	sp, #32
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800455c:	f107 030c 	add.w	r3, r7, #12
 8004560:	2200      	movs	r2, #0
 8004562:	601a      	str	r2, [r3, #0]
 8004564:	605a      	str	r2, [r3, #4]
 8004566:	609a      	str	r2, [r3, #8]
 8004568:	60da      	str	r2, [r3, #12]
 800456a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a12      	ldr	r2, [pc, #72]	@ (80045bc <HAL_TIM_MspPostInit+0x68>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d11e      	bne.n	80045b4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004576:	2300      	movs	r3, #0
 8004578:	60bb      	str	r3, [r7, #8]
 800457a:	4b11      	ldr	r3, [pc, #68]	@ (80045c0 <HAL_TIM_MspPostInit+0x6c>)
 800457c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800457e:	4a10      	ldr	r2, [pc, #64]	@ (80045c0 <HAL_TIM_MspPostInit+0x6c>)
 8004580:	f043 0302 	orr.w	r3, r3, #2
 8004584:	6313      	str	r3, [r2, #48]	@ 0x30
 8004586:	4b0e      	ldr	r3, [pc, #56]	@ (80045c0 <HAL_TIM_MspPostInit+0x6c>)
 8004588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	60bb      	str	r3, [r7, #8]
 8004590:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = OUT1_Pin|OUT2_Pin|OUT3_Pin|OUT4_Pin;
 8004592:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8004596:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004598:	2302      	movs	r3, #2
 800459a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800459c:	2300      	movs	r3, #0
 800459e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045a0:	2303      	movs	r3, #3
 80045a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80045a4:	2302      	movs	r3, #2
 80045a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045a8:	f107 030c 	add.w	r3, r7, #12
 80045ac:	4619      	mov	r1, r3
 80045ae:	4805      	ldr	r0, [pc, #20]	@ (80045c4 <HAL_TIM_MspPostInit+0x70>)
 80045b0:	f001 f960 	bl	8005874 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80045b4:	bf00      	nop
 80045b6:	3720      	adds	r7, #32
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	40000800 	.word	0x40000800
 80045c0:	40023800 	.word	0x40023800
 80045c4:	40020400 	.word	0x40020400

080045c8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80045cc:	4b11      	ldr	r3, [pc, #68]	@ (8004614 <MX_USART1_UART_Init+0x4c>)
 80045ce:	4a12      	ldr	r2, [pc, #72]	@ (8004618 <MX_USART1_UART_Init+0x50>)
 80045d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80045d2:	4b10      	ldr	r3, [pc, #64]	@ (8004614 <MX_USART1_UART_Init+0x4c>)
 80045d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80045d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80045da:	4b0e      	ldr	r3, [pc, #56]	@ (8004614 <MX_USART1_UART_Init+0x4c>)
 80045dc:	2200      	movs	r2, #0
 80045de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80045e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004614 <MX_USART1_UART_Init+0x4c>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80045e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004614 <MX_USART1_UART_Init+0x4c>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80045ec:	4b09      	ldr	r3, [pc, #36]	@ (8004614 <MX_USART1_UART_Init+0x4c>)
 80045ee:	220c      	movs	r2, #12
 80045f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045f2:	4b08      	ldr	r3, [pc, #32]	@ (8004614 <MX_USART1_UART_Init+0x4c>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80045f8:	4b06      	ldr	r3, [pc, #24]	@ (8004614 <MX_USART1_UART_Init+0x4c>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80045fe:	4805      	ldr	r0, [pc, #20]	@ (8004614 <MX_USART1_UART_Init+0x4c>)
 8004600:	f004 fbe6 	bl	8008dd0 <HAL_UART_Init>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800460a:	f7ff fa17 	bl	8003a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800460e:	bf00      	nop
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	20000678 	.word	0x20000678
 8004618:	40011000 	.word	0x40011000

0800461c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b08a      	sub	sp, #40	@ 0x28
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004624:	f107 0314 	add.w	r3, r7, #20
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]
 800462c:	605a      	str	r2, [r3, #4]
 800462e:	609a      	str	r2, [r3, #8]
 8004630:	60da      	str	r2, [r3, #12]
 8004632:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a31      	ldr	r2, [pc, #196]	@ (8004700 <HAL_UART_MspInit+0xe4>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d15b      	bne.n	80046f6 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800463e:	2300      	movs	r3, #0
 8004640:	613b      	str	r3, [r7, #16]
 8004642:	4b30      	ldr	r3, [pc, #192]	@ (8004704 <HAL_UART_MspInit+0xe8>)
 8004644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004646:	4a2f      	ldr	r2, [pc, #188]	@ (8004704 <HAL_UART_MspInit+0xe8>)
 8004648:	f043 0310 	orr.w	r3, r3, #16
 800464c:	6453      	str	r3, [r2, #68]	@ 0x44
 800464e:	4b2d      	ldr	r3, [pc, #180]	@ (8004704 <HAL_UART_MspInit+0xe8>)
 8004650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004652:	f003 0310 	and.w	r3, r3, #16
 8004656:	613b      	str	r3, [r7, #16]
 8004658:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800465a:	2300      	movs	r3, #0
 800465c:	60fb      	str	r3, [r7, #12]
 800465e:	4b29      	ldr	r3, [pc, #164]	@ (8004704 <HAL_UART_MspInit+0xe8>)
 8004660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004662:	4a28      	ldr	r2, [pc, #160]	@ (8004704 <HAL_UART_MspInit+0xe8>)
 8004664:	f043 0301 	orr.w	r3, r3, #1
 8004668:	6313      	str	r3, [r2, #48]	@ 0x30
 800466a:	4b26      	ldr	r3, [pc, #152]	@ (8004704 <HAL_UART_MspInit+0xe8>)
 800466c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	60fb      	str	r3, [r7, #12]
 8004674:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TEL_TX_Pin|TEL_RX_Pin;
 8004676:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800467a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800467c:	2302      	movs	r3, #2
 800467e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004680:	2300      	movs	r3, #0
 8004682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004684:	2303      	movs	r3, #3
 8004686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004688:	2307      	movs	r3, #7
 800468a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800468c:	f107 0314 	add.w	r3, r7, #20
 8004690:	4619      	mov	r1, r3
 8004692:	481d      	ldr	r0, [pc, #116]	@ (8004708 <HAL_UART_MspInit+0xec>)
 8004694:	f001 f8ee 	bl	8005874 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8004698:	4b1c      	ldr	r3, [pc, #112]	@ (800470c <HAL_UART_MspInit+0xf0>)
 800469a:	4a1d      	ldr	r2, [pc, #116]	@ (8004710 <HAL_UART_MspInit+0xf4>)
 800469c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800469e:	4b1b      	ldr	r3, [pc, #108]	@ (800470c <HAL_UART_MspInit+0xf0>)
 80046a0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80046a4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80046a6:	4b19      	ldr	r3, [pc, #100]	@ (800470c <HAL_UART_MspInit+0xf0>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80046ac:	4b17      	ldr	r3, [pc, #92]	@ (800470c <HAL_UART_MspInit+0xf0>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80046b2:	4b16      	ldr	r3, [pc, #88]	@ (800470c <HAL_UART_MspInit+0xf0>)
 80046b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80046b8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80046ba:	4b14      	ldr	r3, [pc, #80]	@ (800470c <HAL_UART_MspInit+0xf0>)
 80046bc:	2200      	movs	r2, #0
 80046be:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80046c0:	4b12      	ldr	r3, [pc, #72]	@ (800470c <HAL_UART_MspInit+0xf0>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80046c6:	4b11      	ldr	r3, [pc, #68]	@ (800470c <HAL_UART_MspInit+0xf0>)
 80046c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80046cc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80046ce:	4b0f      	ldr	r3, [pc, #60]	@ (800470c <HAL_UART_MspInit+0xf0>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80046d4:	4b0d      	ldr	r3, [pc, #52]	@ (800470c <HAL_UART_MspInit+0xf0>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80046da:	480c      	ldr	r0, [pc, #48]	@ (800470c <HAL_UART_MspInit+0xf0>)
 80046dc:	f000 fd5a 	bl	8005194 <HAL_DMA_Init>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80046e6:	f7ff f9a9 	bl	8003a3c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a07      	ldr	r2, [pc, #28]	@ (800470c <HAL_UART_MspInit+0xf0>)
 80046ee:	63da      	str	r2, [r3, #60]	@ 0x3c
 80046f0:	4a06      	ldr	r2, [pc, #24]	@ (800470c <HAL_UART_MspInit+0xf0>)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80046f6:	bf00      	nop
 80046f8:	3728      	adds	r7, #40	@ 0x28
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	40011000 	.word	0x40011000
 8004704:	40023800 	.word	0x40023800
 8004708:	40020000 	.word	0x40020000
 800470c:	200006c0 	.word	0x200006c0
 8004710:	40026440 	.word	0x40026440

08004714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004714:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800474c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004718:	f7ff fd2c 	bl	8004174 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800471c:	480c      	ldr	r0, [pc, #48]	@ (8004750 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800471e:	490d      	ldr	r1, [pc, #52]	@ (8004754 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004720:	4a0d      	ldr	r2, [pc, #52]	@ (8004758 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004724:	e002      	b.n	800472c <LoopCopyDataInit>

08004726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800472a:	3304      	adds	r3, #4

0800472c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800472c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800472e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004730:	d3f9      	bcc.n	8004726 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004732:	4a0a      	ldr	r2, [pc, #40]	@ (800475c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004734:	4c0a      	ldr	r4, [pc, #40]	@ (8004760 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004738:	e001      	b.n	800473e <LoopFillZerobss>

0800473a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800473a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800473c:	3204      	adds	r2, #4

0800473e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800473e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004740:	d3fb      	bcc.n	800473a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004742:	f00a fa01 	bl	800eb48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004746:	f7ff f8df 	bl	8003908 <main>
  bx  lr    
 800474a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800474c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004754:	200002b8 	.word	0x200002b8
  ldr r2, =_sidata
 8004758:	08011cec 	.word	0x08011cec
  ldr r2, =_sbss
 800475c:	200002b8 	.word	0x200002b8
  ldr r4, =_ebss
 8004760:	200052bc 	.word	0x200052bc

08004764 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004764:	e7fe      	b.n	8004764 <ADC_IRQHandler>
	...

08004768 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800476c:	4b0e      	ldr	r3, [pc, #56]	@ (80047a8 <HAL_Init+0x40>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a0d      	ldr	r2, [pc, #52]	@ (80047a8 <HAL_Init+0x40>)
 8004772:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004776:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004778:	4b0b      	ldr	r3, [pc, #44]	@ (80047a8 <HAL_Init+0x40>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a0a      	ldr	r2, [pc, #40]	@ (80047a8 <HAL_Init+0x40>)
 800477e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004782:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004784:	4b08      	ldr	r3, [pc, #32]	@ (80047a8 <HAL_Init+0x40>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a07      	ldr	r2, [pc, #28]	@ (80047a8 <HAL_Init+0x40>)
 800478a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800478e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004790:	2003      	movs	r0, #3
 8004792:	f000 fcca 	bl	800512a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004796:	200f      	movs	r0, #15
 8004798:	f7ff f982 	bl	8003aa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800479c:	f7ff f954 	bl	8003a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	40023c00 	.word	0x40023c00

080047ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047ac:	b480      	push	{r7}
 80047ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80047b0:	4b06      	ldr	r3, [pc, #24]	@ (80047cc <HAL_IncTick+0x20>)
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	461a      	mov	r2, r3
 80047b6:	4b06      	ldr	r3, [pc, #24]	@ (80047d0 <HAL_IncTick+0x24>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4413      	add	r3, r2
 80047bc:	4a04      	ldr	r2, [pc, #16]	@ (80047d0 <HAL_IncTick+0x24>)
 80047be:	6013      	str	r3, [r2, #0]
}
 80047c0:	bf00      	nop
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	200000e8 	.word	0x200000e8
 80047d0:	20000720 	.word	0x20000720

080047d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0
  return uwTick;
 80047d8:	4b03      	ldr	r3, [pc, #12]	@ (80047e8 <HAL_GetTick+0x14>)
 80047da:	681b      	ldr	r3, [r3, #0]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	20000720 	.word	0x20000720

080047ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047f4:	2300      	movs	r3, #0
 80047f6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e033      	b.n	800486a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004806:	2b00      	cmp	r3, #0
 8004808:	d109      	bne.n	800481e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7fd f9a8 	bl	8001b60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004822:	f003 0310 	and.w	r3, r3, #16
 8004826:	2b00      	cmp	r3, #0
 8004828:	d118      	bne.n	800485c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004832:	f023 0302 	bic.w	r3, r3, #2
 8004836:	f043 0202 	orr.w	r2, r3, #2
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 fa48 	bl	8004cd4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484e:	f023 0303 	bic.w	r3, r3, #3
 8004852:	f043 0201 	orr.w	r2, r3, #1
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	641a      	str	r2, [r3, #64]	@ 0x40
 800485a:	e001      	b.n	8004860 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004868:	7bfb      	ldrb	r3, [r7, #15]
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
	...

08004874 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004880:	2300      	movs	r3, #0
 8004882:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800488a:	2b01      	cmp	r3, #1
 800488c:	d101      	bne.n	8004892 <HAL_ADC_Start_DMA+0x1e>
 800488e:	2302      	movs	r3, #2
 8004890:	e0ce      	b.n	8004a30 <HAL_ADC_Start_DMA+0x1bc>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f003 0301 	and.w	r3, r3, #1
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d018      	beq.n	80048da <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689a      	ldr	r2, [r3, #8]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f042 0201 	orr.w	r2, r2, #1
 80048b6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80048b8:	4b5f      	ldr	r3, [pc, #380]	@ (8004a38 <HAL_ADC_Start_DMA+0x1c4>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a5f      	ldr	r2, [pc, #380]	@ (8004a3c <HAL_ADC_Start_DMA+0x1c8>)
 80048be:	fba2 2303 	umull	r2, r3, r2, r3
 80048c2:	0c9a      	lsrs	r2, r3, #18
 80048c4:	4613      	mov	r3, r2
 80048c6:	005b      	lsls	r3, r3, #1
 80048c8:	4413      	add	r3, r2
 80048ca:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80048cc:	e002      	b.n	80048d4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	3b01      	subs	r3, #1
 80048d2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1f9      	bne.n	80048ce <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048e8:	d107      	bne.n	80048fa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689a      	ldr	r2, [r3, #8]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048f8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	2b01      	cmp	r3, #1
 8004906:	f040 8086 	bne.w	8004a16 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004912:	f023 0301 	bic.w	r3, r3, #1
 8004916:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004928:	2b00      	cmp	r3, #0
 800492a:	d007      	beq.n	800493c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004930:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004934:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004940:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004944:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004948:	d106      	bne.n	8004958 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800494e:	f023 0206 	bic.w	r2, r3, #6
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	645a      	str	r2, [r3, #68]	@ 0x44
 8004956:	e002      	b.n	800495e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004966:	4b36      	ldr	r3, [pc, #216]	@ (8004a40 <HAL_ADC_Start_DMA+0x1cc>)
 8004968:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800496e:	4a35      	ldr	r2, [pc, #212]	@ (8004a44 <HAL_ADC_Start_DMA+0x1d0>)
 8004970:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004976:	4a34      	ldr	r2, [pc, #208]	@ (8004a48 <HAL_ADC_Start_DMA+0x1d4>)
 8004978:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800497e:	4a33      	ldr	r2, [pc, #204]	@ (8004a4c <HAL_ADC_Start_DMA+0x1d8>)
 8004980:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800498a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	685a      	ldr	r2, [r3, #4]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800499a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689a      	ldr	r2, [r3, #8]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049aa:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	334c      	adds	r3, #76	@ 0x4c
 80049b6:	4619      	mov	r1, r3
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f000 fc98 	bl	80052f0 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f003 031f 	and.w	r3, r3, #31
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10f      	bne.n	80049ec <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d129      	bne.n	8004a2e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	689a      	ldr	r2, [r3, #8]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80049e8:	609a      	str	r2, [r3, #8]
 80049ea:	e020      	b.n	8004a2e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a17      	ldr	r2, [pc, #92]	@ (8004a50 <HAL_ADC_Start_DMA+0x1dc>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d11b      	bne.n	8004a2e <HAL_ADC_Start_DMA+0x1ba>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d114      	bne.n	8004a2e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689a      	ldr	r2, [r3, #8]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004a12:	609a      	str	r2, [r3, #8]
 8004a14:	e00b      	b.n	8004a2e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1a:	f043 0210 	orr.w	r2, r3, #16
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a26:	f043 0201 	orr.w	r2, r3, #1
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3718      	adds	r7, #24
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	200000e0 	.word	0x200000e0
 8004a3c:	431bde83 	.word	0x431bde83
 8004a40:	40012300 	.word	0x40012300
 8004a44:	08004ecd 	.word	0x08004ecd
 8004a48:	08004f87 	.word	0x08004f87
 8004a4c:	08004fa3 	.word	0x08004fa3
 8004a50:	40012000 	.word	0x40012000

08004a54 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d101      	bne.n	8004aac <HAL_ADC_ConfigChannel+0x1c>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	e105      	b.n	8004cb8 <HAL_ADC_ConfigChannel+0x228>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2b09      	cmp	r3, #9
 8004aba:	d925      	bls.n	8004b08 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68d9      	ldr	r1, [r3, #12]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	461a      	mov	r2, r3
 8004aca:	4613      	mov	r3, r2
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	4413      	add	r3, r2
 8004ad0:	3b1e      	subs	r3, #30
 8004ad2:	2207      	movs	r2, #7
 8004ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad8:	43da      	mvns	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	400a      	ands	r2, r1
 8004ae0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68d9      	ldr	r1, [r3, #12]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	689a      	ldr	r2, [r3, #8]
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	4618      	mov	r0, r3
 8004af4:	4603      	mov	r3, r0
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	4403      	add	r3, r0
 8004afa:	3b1e      	subs	r3, #30
 8004afc:	409a      	lsls	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	60da      	str	r2, [r3, #12]
 8004b06:	e022      	b.n	8004b4e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6919      	ldr	r1, [r3, #16]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	461a      	mov	r2, r3
 8004b16:	4613      	mov	r3, r2
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	4413      	add	r3, r2
 8004b1c:	2207      	movs	r2, #7
 8004b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b22:	43da      	mvns	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	400a      	ands	r2, r1
 8004b2a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6919      	ldr	r1, [r3, #16]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	689a      	ldr	r2, [r3, #8]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	4603      	mov	r3, r0
 8004b40:	005b      	lsls	r3, r3, #1
 8004b42:	4403      	add	r3, r0
 8004b44:	409a      	lsls	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	2b06      	cmp	r3, #6
 8004b54:	d824      	bhi.n	8004ba0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685a      	ldr	r2, [r3, #4]
 8004b60:	4613      	mov	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	3b05      	subs	r3, #5
 8004b68:	221f      	movs	r2, #31
 8004b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6e:	43da      	mvns	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	400a      	ands	r2, r1
 8004b76:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	4618      	mov	r0, r3
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4413      	add	r3, r2
 8004b90:	3b05      	subs	r3, #5
 8004b92:	fa00 f203 	lsl.w	r2, r0, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8004b9e:	e04c      	b.n	8004c3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2b0c      	cmp	r3, #12
 8004ba6:	d824      	bhi.n	8004bf2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	685a      	ldr	r2, [r3, #4]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	3b23      	subs	r3, #35	@ 0x23
 8004bba:	221f      	movs	r2, #31
 8004bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc0:	43da      	mvns	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	400a      	ands	r2, r1
 8004bc8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	4413      	add	r3, r2
 8004be2:	3b23      	subs	r3, #35	@ 0x23
 8004be4:	fa00 f203 	lsl.w	r2, r0, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	631a      	str	r2, [r3, #48]	@ 0x30
 8004bf0:	e023      	b.n	8004c3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4413      	add	r3, r2
 8004c02:	3b41      	subs	r3, #65	@ 0x41
 8004c04:	221f      	movs	r2, #31
 8004c06:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0a:	43da      	mvns	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	400a      	ands	r2, r1
 8004c12:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	4618      	mov	r0, r3
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	4613      	mov	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4413      	add	r3, r2
 8004c2c:	3b41      	subs	r3, #65	@ 0x41
 8004c2e:	fa00 f203 	lsl.w	r2, r0, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004c3a:	4b22      	ldr	r3, [pc, #136]	@ (8004cc4 <HAL_ADC_ConfigChannel+0x234>)
 8004c3c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a21      	ldr	r2, [pc, #132]	@ (8004cc8 <HAL_ADC_ConfigChannel+0x238>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d109      	bne.n	8004c5c <HAL_ADC_ConfigChannel+0x1cc>
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2b12      	cmp	r3, #18
 8004c4e:	d105      	bne.n	8004c5c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a19      	ldr	r2, [pc, #100]	@ (8004cc8 <HAL_ADC_ConfigChannel+0x238>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d123      	bne.n	8004cae <HAL_ADC_ConfigChannel+0x21e>
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2b10      	cmp	r3, #16
 8004c6c:	d003      	beq.n	8004c76 <HAL_ADC_ConfigChannel+0x1e6>
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2b11      	cmp	r3, #17
 8004c74:	d11b      	bne.n	8004cae <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2b10      	cmp	r3, #16
 8004c88:	d111      	bne.n	8004cae <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004c8a:	4b10      	ldr	r3, [pc, #64]	@ (8004ccc <HAL_ADC_ConfigChannel+0x23c>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a10      	ldr	r2, [pc, #64]	@ (8004cd0 <HAL_ADC_ConfigChannel+0x240>)
 8004c90:	fba2 2303 	umull	r2, r3, r2, r3
 8004c94:	0c9a      	lsrs	r2, r3, #18
 8004c96:	4613      	mov	r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4413      	add	r3, r2
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004ca0:	e002      	b.n	8004ca8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1f9      	bne.n	8004ca2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3714      	adds	r7, #20
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr
 8004cc4:	40012300 	.word	0x40012300
 8004cc8:	40012000 	.word	0x40012000
 8004ccc:	200000e0 	.word	0x200000e0
 8004cd0:	431bde83 	.word	0x431bde83

08004cd4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004cdc:	4b79      	ldr	r3, [pc, #484]	@ (8004ec4 <ADC_Init+0x1f0>)
 8004cde:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	685a      	ldr	r2, [r3, #4]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	431a      	orrs	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	685a      	ldr	r2, [r3, #4]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	6859      	ldr	r1, [r3, #4]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	021a      	lsls	r2, r3, #8
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004d2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	6859      	ldr	r1, [r3, #4]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689a      	ldr	r2, [r3, #8]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	689a      	ldr	r2, [r3, #8]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6899      	ldr	r1, [r3, #8]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68da      	ldr	r2, [r3, #12]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d66:	4a58      	ldr	r2, [pc, #352]	@ (8004ec8 <ADC_Init+0x1f4>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d022      	beq.n	8004db2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689a      	ldr	r2, [r3, #8]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004d7a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6899      	ldr	r1, [r3, #8]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	689a      	ldr	r2, [r3, #8]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004d9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6899      	ldr	r1, [r3, #8]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	609a      	str	r2, [r3, #8]
 8004db0:	e00f      	b.n	8004dd2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	689a      	ldr	r2, [r3, #8]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004dc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	689a      	ldr	r2, [r3, #8]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004dd0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	689a      	ldr	r2, [r3, #8]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f022 0202 	bic.w	r2, r2, #2
 8004de0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	6899      	ldr	r1, [r3, #8]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	7e1b      	ldrb	r3, [r3, #24]
 8004dec:	005a      	lsls	r2, r3, #1
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d01b      	beq.n	8004e38 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e0e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004e1e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6859      	ldr	r1, [r3, #4]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	035a      	lsls	r2, r3, #13
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	605a      	str	r2, [r3, #4]
 8004e36:	e007      	b.n	8004e48 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e46:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004e56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	69db      	ldr	r3, [r3, #28]
 8004e62:	3b01      	subs	r3, #1
 8004e64:	051a      	lsls	r2, r3, #20
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004e7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	6899      	ldr	r1, [r3, #8]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004e8a:	025a      	lsls	r2, r3, #9
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	430a      	orrs	r2, r1
 8004e92:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689a      	ldr	r2, [r3, #8]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ea2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6899      	ldr	r1, [r3, #8]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	029a      	lsls	r2, r3, #10
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	609a      	str	r2, [r3, #8]
}
 8004eb8:	bf00      	nop
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	40012300 	.word	0x40012300
 8004ec8:	0f000001 	.word	0x0f000001

08004ecc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ed8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ede:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d13c      	bne.n	8004f60 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eea:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d12b      	bne.n	8004f58 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d127      	bne.n	8004f58 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f0e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d006      	beq.n	8004f24 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d119      	bne.n	8004f58 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	685a      	ldr	r2, [r3, #4]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f022 0220 	bic.w	r2, r2, #32
 8004f32:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f38:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d105      	bne.n	8004f58 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f50:	f043 0201 	orr.w	r2, r3, #1
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f7ff fd7b 	bl	8004a54 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004f5e:	e00e      	b.n	8004f7e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f64:	f003 0310 	and.w	r3, r3, #16
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d003      	beq.n	8004f74 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004f6c:	68f8      	ldr	r0, [r7, #12]
 8004f6e:	f7ff fd85 	bl	8004a7c <HAL_ADC_ErrorCallback>
}
 8004f72:	e004      	b.n	8004f7e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	4798      	blx	r3
}
 8004f7e:	bf00      	nop
 8004f80:	3710      	adds	r7, #16
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b084      	sub	sp, #16
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f92:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f7ff fd67 	bl	8004a68 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f9a:	bf00      	nop
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b084      	sub	sp, #16
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fae:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2240      	movs	r2, #64	@ 0x40
 8004fb4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fba:	f043 0204 	orr.w	r2, r3, #4
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f7ff fd5a 	bl	8004a7c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004fc8:	bf00      	nop
 8004fca:	3710      	adds	r7, #16
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f003 0307 	and.w	r3, r3, #7
 8004fde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8005014 <__NVIC_SetPriorityGrouping+0x44>)
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004fec:	4013      	ands	r3, r2
 8004fee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ff8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004ffc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005000:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005002:	4a04      	ldr	r2, [pc, #16]	@ (8005014 <__NVIC_SetPriorityGrouping+0x44>)
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	60d3      	str	r3, [r2, #12]
}
 8005008:	bf00      	nop
 800500a:	3714      	adds	r7, #20
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	e000ed00 	.word	0xe000ed00

08005018 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005018:	b480      	push	{r7}
 800501a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800501c:	4b04      	ldr	r3, [pc, #16]	@ (8005030 <__NVIC_GetPriorityGrouping+0x18>)
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	0a1b      	lsrs	r3, r3, #8
 8005022:	f003 0307 	and.w	r3, r3, #7
}
 8005026:	4618      	mov	r0, r3
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr
 8005030:	e000ed00 	.word	0xe000ed00

08005034 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	4603      	mov	r3, r0
 800503c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800503e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005042:	2b00      	cmp	r3, #0
 8005044:	db0b      	blt.n	800505e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005046:	79fb      	ldrb	r3, [r7, #7]
 8005048:	f003 021f 	and.w	r2, r3, #31
 800504c:	4907      	ldr	r1, [pc, #28]	@ (800506c <__NVIC_EnableIRQ+0x38>)
 800504e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005052:	095b      	lsrs	r3, r3, #5
 8005054:	2001      	movs	r0, #1
 8005056:	fa00 f202 	lsl.w	r2, r0, r2
 800505a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800505e:	bf00      	nop
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	e000e100 	.word	0xe000e100

08005070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	4603      	mov	r3, r0
 8005078:	6039      	str	r1, [r7, #0]
 800507a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800507c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005080:	2b00      	cmp	r3, #0
 8005082:	db0a      	blt.n	800509a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	b2da      	uxtb	r2, r3
 8005088:	490c      	ldr	r1, [pc, #48]	@ (80050bc <__NVIC_SetPriority+0x4c>)
 800508a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800508e:	0112      	lsls	r2, r2, #4
 8005090:	b2d2      	uxtb	r2, r2
 8005092:	440b      	add	r3, r1
 8005094:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005098:	e00a      	b.n	80050b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	b2da      	uxtb	r2, r3
 800509e:	4908      	ldr	r1, [pc, #32]	@ (80050c0 <__NVIC_SetPriority+0x50>)
 80050a0:	79fb      	ldrb	r3, [r7, #7]
 80050a2:	f003 030f 	and.w	r3, r3, #15
 80050a6:	3b04      	subs	r3, #4
 80050a8:	0112      	lsls	r2, r2, #4
 80050aa:	b2d2      	uxtb	r2, r2
 80050ac:	440b      	add	r3, r1
 80050ae:	761a      	strb	r2, [r3, #24]
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	e000e100 	.word	0xe000e100
 80050c0:	e000ed00 	.word	0xe000ed00

080050c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b089      	sub	sp, #36	@ 0x24
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f003 0307 	and.w	r3, r3, #7
 80050d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	f1c3 0307 	rsb	r3, r3, #7
 80050de:	2b04      	cmp	r3, #4
 80050e0:	bf28      	it	cs
 80050e2:	2304      	movcs	r3, #4
 80050e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	3304      	adds	r3, #4
 80050ea:	2b06      	cmp	r3, #6
 80050ec:	d902      	bls.n	80050f4 <NVIC_EncodePriority+0x30>
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	3b03      	subs	r3, #3
 80050f2:	e000      	b.n	80050f6 <NVIC_EncodePriority+0x32>
 80050f4:	2300      	movs	r3, #0
 80050f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050f8:	f04f 32ff 	mov.w	r2, #4294967295
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005102:	43da      	mvns	r2, r3
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	401a      	ands	r2, r3
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800510c:	f04f 31ff 	mov.w	r1, #4294967295
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	fa01 f303 	lsl.w	r3, r1, r3
 8005116:	43d9      	mvns	r1, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800511c:	4313      	orrs	r3, r2
         );
}
 800511e:	4618      	mov	r0, r3
 8005120:	3724      	adds	r7, #36	@ 0x24
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr

0800512a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800512a:	b580      	push	{r7, lr}
 800512c:	b082      	sub	sp, #8
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7ff ff4c 	bl	8004fd0 <__NVIC_SetPriorityGrouping>
}
 8005138:	bf00      	nop
 800513a:	3708      	adds	r7, #8
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af00      	add	r7, sp, #0
 8005146:	4603      	mov	r3, r0
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
 800514c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800514e:	2300      	movs	r3, #0
 8005150:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005152:	f7ff ff61 	bl	8005018 <__NVIC_GetPriorityGrouping>
 8005156:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	68b9      	ldr	r1, [r7, #8]
 800515c:	6978      	ldr	r0, [r7, #20]
 800515e:	f7ff ffb1 	bl	80050c4 <NVIC_EncodePriority>
 8005162:	4602      	mov	r2, r0
 8005164:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005168:	4611      	mov	r1, r2
 800516a:	4618      	mov	r0, r3
 800516c:	f7ff ff80 	bl	8005070 <__NVIC_SetPriority>
}
 8005170:	bf00      	nop
 8005172:	3718      	adds	r7, #24
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	4603      	mov	r3, r0
 8005180:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005186:	4618      	mov	r0, r3
 8005188:	f7ff ff54 	bl	8005034 <__NVIC_EnableIRQ>
}
 800518c:	bf00      	nop
 800518e:	3708      	adds	r7, #8
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800519c:	2300      	movs	r3, #0
 800519e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80051a0:	f7ff fb18 	bl	80047d4 <HAL_GetTick>
 80051a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e099      	b.n	80052e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2202      	movs	r2, #2
 80051b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f022 0201 	bic.w	r2, r2, #1
 80051ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051d0:	e00f      	b.n	80051f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80051d2:	f7ff faff 	bl	80047d4 <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	2b05      	cmp	r3, #5
 80051de:	d908      	bls.n	80051f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2220      	movs	r2, #32
 80051e4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2203      	movs	r2, #3
 80051ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e078      	b.n	80052e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1e8      	bne.n	80051d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	4b38      	ldr	r3, [pc, #224]	@ (80052ec <HAL_DMA_Init+0x158>)
 800520c:	4013      	ands	r3, r2
 800520e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685a      	ldr	r2, [r3, #4]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800521e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800522a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005236:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	4313      	orrs	r3, r2
 8005242:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005248:	2b04      	cmp	r3, #4
 800524a:	d107      	bne.n	800525c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005254:	4313      	orrs	r3, r2
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	4313      	orrs	r3, r2
 800525a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	f023 0307 	bic.w	r3, r3, #7
 8005272:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	4313      	orrs	r3, r2
 800527c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005282:	2b04      	cmp	r3, #4
 8005284:	d117      	bne.n	80052b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	4313      	orrs	r3, r2
 800528e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00e      	beq.n	80052b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 fa6f 	bl	800577c <DMA_CheckFifoParam>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d008      	beq.n	80052b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2240      	movs	r2, #64	@ 0x40
 80052a8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80052b2:	2301      	movs	r3, #1
 80052b4:	e016      	b.n	80052e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 fa26 	bl	8005710 <DMA_CalcBaseAndBitshift>
 80052c4:	4603      	mov	r3, r0
 80052c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052cc:	223f      	movs	r2, #63	@ 0x3f
 80052ce:	409a      	lsls	r2, r3
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3718      	adds	r7, #24
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	f010803f 	.word	0xf010803f

080052f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
 80052fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052fe:	2300      	movs	r3, #0
 8005300:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005306:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800530e:	2b01      	cmp	r3, #1
 8005310:	d101      	bne.n	8005316 <HAL_DMA_Start_IT+0x26>
 8005312:	2302      	movs	r3, #2
 8005314:	e040      	b.n	8005398 <HAL_DMA_Start_IT+0xa8>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2201      	movs	r2, #1
 800531a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b01      	cmp	r3, #1
 8005328:	d12f      	bne.n	800538a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2202      	movs	r2, #2
 800532e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	68b9      	ldr	r1, [r7, #8]
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f000 f9b8 	bl	80056b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005348:	223f      	movs	r2, #63	@ 0x3f
 800534a:	409a      	lsls	r2, r3
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f042 0216 	orr.w	r2, r2, #22
 800535e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005364:	2b00      	cmp	r3, #0
 8005366:	d007      	beq.n	8005378 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f042 0208 	orr.w	r2, r2, #8
 8005376:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f042 0201 	orr.w	r2, r2, #1
 8005386:	601a      	str	r2, [r3, #0]
 8005388:	e005      	b.n	8005396 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005392:	2302      	movs	r3, #2
 8005394:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005396:	7dfb      	ldrb	r3, [r7, #23]
}
 8005398:	4618      	mov	r0, r3
 800539a:	3718      	adds	r7, #24
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80053a8:	2300      	movs	r3, #0
 80053aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80053ac:	4b8e      	ldr	r3, [pc, #568]	@ (80055e8 <HAL_DMA_IRQHandler+0x248>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a8e      	ldr	r2, [pc, #568]	@ (80055ec <HAL_DMA_IRQHandler+0x24c>)
 80053b2:	fba2 2303 	umull	r2, r3, r2, r3
 80053b6:	0a9b      	lsrs	r3, r3, #10
 80053b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053ca:	2208      	movs	r2, #8
 80053cc:	409a      	lsls	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	4013      	ands	r3, r2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d01a      	beq.n	800540c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0304 	and.w	r3, r3, #4
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d013      	beq.n	800540c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f022 0204 	bic.w	r2, r2, #4
 80053f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053f8:	2208      	movs	r2, #8
 80053fa:	409a      	lsls	r2, r3
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005404:	f043 0201 	orr.w	r2, r3, #1
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005410:	2201      	movs	r2, #1
 8005412:	409a      	lsls	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4013      	ands	r3, r2
 8005418:	2b00      	cmp	r3, #0
 800541a:	d012      	beq.n	8005442 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00b      	beq.n	8005442 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800542e:	2201      	movs	r2, #1
 8005430:	409a      	lsls	r2, r3
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800543a:	f043 0202 	orr.w	r2, r3, #2
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005446:	2204      	movs	r2, #4
 8005448:	409a      	lsls	r2, r3
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	4013      	ands	r3, r2
 800544e:	2b00      	cmp	r3, #0
 8005450:	d012      	beq.n	8005478 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0302 	and.w	r3, r3, #2
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00b      	beq.n	8005478 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005464:	2204      	movs	r2, #4
 8005466:	409a      	lsls	r2, r3
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005470:	f043 0204 	orr.w	r2, r3, #4
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800547c:	2210      	movs	r2, #16
 800547e:	409a      	lsls	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4013      	ands	r3, r2
 8005484:	2b00      	cmp	r3, #0
 8005486:	d043      	beq.n	8005510 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0308 	and.w	r3, r3, #8
 8005492:	2b00      	cmp	r3, #0
 8005494:	d03c      	beq.n	8005510 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800549a:	2210      	movs	r2, #16
 800549c:	409a      	lsls	r2, r3
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d018      	beq.n	80054e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d108      	bne.n	80054d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d024      	beq.n	8005510 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	4798      	blx	r3
 80054ce:	e01f      	b.n	8005510 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d01b      	beq.n	8005510 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	4798      	blx	r3
 80054e0:	e016      	b.n	8005510 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d107      	bne.n	8005500 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f022 0208 	bic.w	r2, r2, #8
 80054fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005504:	2b00      	cmp	r3, #0
 8005506:	d003      	beq.n	8005510 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005514:	2220      	movs	r2, #32
 8005516:	409a      	lsls	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	4013      	ands	r3, r2
 800551c:	2b00      	cmp	r3, #0
 800551e:	f000 808f 	beq.w	8005640 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0310 	and.w	r3, r3, #16
 800552c:	2b00      	cmp	r3, #0
 800552e:	f000 8087 	beq.w	8005640 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005536:	2220      	movs	r2, #32
 8005538:	409a      	lsls	r2, r3
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b05      	cmp	r3, #5
 8005548:	d136      	bne.n	80055b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f022 0216 	bic.w	r2, r2, #22
 8005558:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	695a      	ldr	r2, [r3, #20]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005568:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800556e:	2b00      	cmp	r3, #0
 8005570:	d103      	bne.n	800557a <HAL_DMA_IRQHandler+0x1da>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005576:	2b00      	cmp	r3, #0
 8005578:	d007      	beq.n	800558a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f022 0208 	bic.w	r2, r2, #8
 8005588:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800558e:	223f      	movs	r2, #63	@ 0x3f
 8005590:	409a      	lsls	r2, r3
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d07e      	beq.n	80056ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	4798      	blx	r3
        }
        return;
 80055b6:	e079      	b.n	80056ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d01d      	beq.n	8005602 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d10d      	bne.n	80055f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d031      	beq.n	8005640 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	4798      	blx	r3
 80055e4:	e02c      	b.n	8005640 <HAL_DMA_IRQHandler+0x2a0>
 80055e6:	bf00      	nop
 80055e8:	200000e0 	.word	0x200000e0
 80055ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d023      	beq.n	8005640 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	4798      	blx	r3
 8005600:	e01e      	b.n	8005640 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800560c:	2b00      	cmp	r3, #0
 800560e:	d10f      	bne.n	8005630 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f022 0210 	bic.w	r2, r2, #16
 800561e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005634:	2b00      	cmp	r3, #0
 8005636:	d003      	beq.n	8005640 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005644:	2b00      	cmp	r3, #0
 8005646:	d032      	beq.n	80056ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800564c:	f003 0301 	and.w	r3, r3, #1
 8005650:	2b00      	cmp	r3, #0
 8005652:	d022      	beq.n	800569a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2205      	movs	r2, #5
 8005658:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f022 0201 	bic.w	r2, r2, #1
 800566a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	3301      	adds	r3, #1
 8005670:	60bb      	str	r3, [r7, #8]
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	429a      	cmp	r2, r3
 8005676:	d307      	bcc.n	8005688 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0301 	and.w	r3, r3, #1
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1f2      	bne.n	800566c <HAL_DMA_IRQHandler+0x2cc>
 8005686:	e000      	b.n	800568a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005688:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d005      	beq.n	80056ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	4798      	blx	r3
 80056aa:	e000      	b.n	80056ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80056ac:	bf00      	nop
    }
  }
}
 80056ae:	3718      	adds	r7, #24
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
 80056c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80056d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	683a      	ldr	r2, [r7, #0]
 80056d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	2b40      	cmp	r3, #64	@ 0x40
 80056e0:	d108      	bne.n	80056f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80056f2:	e007      	b.n	8005704 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	60da      	str	r2, [r3, #12]
}
 8005704:	bf00      	nop
 8005706:	3714      	adds	r7, #20
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	b2db      	uxtb	r3, r3
 800571e:	3b10      	subs	r3, #16
 8005720:	4a14      	ldr	r2, [pc, #80]	@ (8005774 <DMA_CalcBaseAndBitshift+0x64>)
 8005722:	fba2 2303 	umull	r2, r3, r2, r3
 8005726:	091b      	lsrs	r3, r3, #4
 8005728:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800572a:	4a13      	ldr	r2, [pc, #76]	@ (8005778 <DMA_CalcBaseAndBitshift+0x68>)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4413      	add	r3, r2
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	461a      	mov	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2b03      	cmp	r3, #3
 800573c:	d909      	bls.n	8005752 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005746:	f023 0303 	bic.w	r3, r3, #3
 800574a:	1d1a      	adds	r2, r3, #4
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	659a      	str	r2, [r3, #88]	@ 0x58
 8005750:	e007      	b.n	8005762 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800575a:	f023 0303 	bic.w	r3, r3, #3
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005766:	4618      	mov	r0, r3
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	aaaaaaab 	.word	0xaaaaaaab
 8005778:	080118a4 	.word	0x080118a4

0800577c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005784:	2300      	movs	r3, #0
 8005786:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800578c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d11f      	bne.n	80057d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	2b03      	cmp	r3, #3
 800579a:	d856      	bhi.n	800584a <DMA_CheckFifoParam+0xce>
 800579c:	a201      	add	r2, pc, #4	@ (adr r2, 80057a4 <DMA_CheckFifoParam+0x28>)
 800579e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a2:	bf00      	nop
 80057a4:	080057b5 	.word	0x080057b5
 80057a8:	080057c7 	.word	0x080057c7
 80057ac:	080057b5 	.word	0x080057b5
 80057b0:	0800584b 	.word	0x0800584b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d046      	beq.n	800584e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057c4:	e043      	b.n	800584e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80057ce:	d140      	bne.n	8005852 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057d4:	e03d      	b.n	8005852 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057de:	d121      	bne.n	8005824 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	2b03      	cmp	r3, #3
 80057e4:	d837      	bhi.n	8005856 <DMA_CheckFifoParam+0xda>
 80057e6:	a201      	add	r2, pc, #4	@ (adr r2, 80057ec <DMA_CheckFifoParam+0x70>)
 80057e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ec:	080057fd 	.word	0x080057fd
 80057f0:	08005803 	.word	0x08005803
 80057f4:	080057fd 	.word	0x080057fd
 80057f8:	08005815 	.word	0x08005815
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005800:	e030      	b.n	8005864 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005806:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d025      	beq.n	800585a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005812:	e022      	b.n	800585a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005818:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800581c:	d11f      	bne.n	800585e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005822:	e01c      	b.n	800585e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	2b02      	cmp	r3, #2
 8005828:	d903      	bls.n	8005832 <DMA_CheckFifoParam+0xb6>
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	2b03      	cmp	r3, #3
 800582e:	d003      	beq.n	8005838 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005830:	e018      	b.n	8005864 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	73fb      	strb	r3, [r7, #15]
      break;
 8005836:	e015      	b.n	8005864 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800583c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00e      	beq.n	8005862 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	73fb      	strb	r3, [r7, #15]
      break;
 8005848:	e00b      	b.n	8005862 <DMA_CheckFifoParam+0xe6>
      break;
 800584a:	bf00      	nop
 800584c:	e00a      	b.n	8005864 <DMA_CheckFifoParam+0xe8>
      break;
 800584e:	bf00      	nop
 8005850:	e008      	b.n	8005864 <DMA_CheckFifoParam+0xe8>
      break;
 8005852:	bf00      	nop
 8005854:	e006      	b.n	8005864 <DMA_CheckFifoParam+0xe8>
      break;
 8005856:	bf00      	nop
 8005858:	e004      	b.n	8005864 <DMA_CheckFifoParam+0xe8>
      break;
 800585a:	bf00      	nop
 800585c:	e002      	b.n	8005864 <DMA_CheckFifoParam+0xe8>
      break;   
 800585e:	bf00      	nop
 8005860:	e000      	b.n	8005864 <DMA_CheckFifoParam+0xe8>
      break;
 8005862:	bf00      	nop
    }
  } 
  
  return status; 
 8005864:	7bfb      	ldrb	r3, [r7, #15]
}
 8005866:	4618      	mov	r0, r3
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop

08005874 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005874:	b480      	push	{r7}
 8005876:	b089      	sub	sp, #36	@ 0x24
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800587e:	2300      	movs	r3, #0
 8005880:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005882:	2300      	movs	r3, #0
 8005884:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005886:	2300      	movs	r3, #0
 8005888:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800588a:	2300      	movs	r3, #0
 800588c:	61fb      	str	r3, [r7, #28]
 800588e:	e159      	b.n	8005b44 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005890:	2201      	movs	r2, #1
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	fa02 f303 	lsl.w	r3, r2, r3
 8005898:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	697a      	ldr	r2, [r7, #20]
 80058a0:	4013      	ands	r3, r2
 80058a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	f040 8148 	bne.w	8005b3e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	f003 0303 	and.w	r3, r3, #3
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d005      	beq.n	80058c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d130      	bne.n	8005928 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	005b      	lsls	r3, r3, #1
 80058d0:	2203      	movs	r2, #3
 80058d2:	fa02 f303 	lsl.w	r3, r2, r3
 80058d6:	43db      	mvns	r3, r3
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	4013      	ands	r3, r2
 80058dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	68da      	ldr	r2, [r3, #12]
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	005b      	lsls	r3, r3, #1
 80058e6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ea:	69ba      	ldr	r2, [r7, #24]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	69ba      	ldr	r2, [r7, #24]
 80058f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80058fc:	2201      	movs	r2, #1
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	fa02 f303 	lsl.w	r3, r2, r3
 8005904:	43db      	mvns	r3, r3
 8005906:	69ba      	ldr	r2, [r7, #24]
 8005908:	4013      	ands	r3, r2
 800590a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	091b      	lsrs	r3, r3, #4
 8005912:	f003 0201 	and.w	r2, r3, #1
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	fa02 f303 	lsl.w	r3, r2, r3
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	4313      	orrs	r3, r2
 8005920:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	69ba      	ldr	r2, [r7, #24]
 8005926:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f003 0303 	and.w	r3, r3, #3
 8005930:	2b03      	cmp	r3, #3
 8005932:	d017      	beq.n	8005964 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	005b      	lsls	r3, r3, #1
 800593e:	2203      	movs	r2, #3
 8005940:	fa02 f303 	lsl.w	r3, r2, r3
 8005944:	43db      	mvns	r3, r3
 8005946:	69ba      	ldr	r2, [r7, #24]
 8005948:	4013      	ands	r3, r2
 800594a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	689a      	ldr	r2, [r3, #8]
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	005b      	lsls	r3, r3, #1
 8005954:	fa02 f303 	lsl.w	r3, r2, r3
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	4313      	orrs	r3, r2
 800595c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	69ba      	ldr	r2, [r7, #24]
 8005962:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f003 0303 	and.w	r3, r3, #3
 800596c:	2b02      	cmp	r3, #2
 800596e:	d123      	bne.n	80059b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	08da      	lsrs	r2, r3, #3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	3208      	adds	r2, #8
 8005978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800597c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	f003 0307 	and.w	r3, r3, #7
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	220f      	movs	r2, #15
 8005988:	fa02 f303 	lsl.w	r3, r2, r3
 800598c:	43db      	mvns	r3, r3
 800598e:	69ba      	ldr	r2, [r7, #24]
 8005990:	4013      	ands	r3, r2
 8005992:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	691a      	ldr	r2, [r3, #16]
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	f003 0307 	and.w	r3, r3, #7
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	fa02 f303 	lsl.w	r3, r2, r3
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	08da      	lsrs	r2, r3, #3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	3208      	adds	r2, #8
 80059b2:	69b9      	ldr	r1, [r7, #24]
 80059b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	005b      	lsls	r3, r3, #1
 80059c2:	2203      	movs	r2, #3
 80059c4:	fa02 f303 	lsl.w	r3, r2, r3
 80059c8:	43db      	mvns	r3, r3
 80059ca:	69ba      	ldr	r2, [r7, #24]
 80059cc:	4013      	ands	r3, r2
 80059ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	f003 0203 	and.w	r2, r3, #3
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	005b      	lsls	r3, r3, #1
 80059dc:	fa02 f303 	lsl.w	r3, r2, r3
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	69ba      	ldr	r2, [r7, #24]
 80059ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	f000 80a2 	beq.w	8005b3e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059fa:	2300      	movs	r3, #0
 80059fc:	60fb      	str	r3, [r7, #12]
 80059fe:	4b57      	ldr	r3, [pc, #348]	@ (8005b5c <HAL_GPIO_Init+0x2e8>)
 8005a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a02:	4a56      	ldr	r2, [pc, #344]	@ (8005b5c <HAL_GPIO_Init+0x2e8>)
 8005a04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005a08:	6453      	str	r3, [r2, #68]	@ 0x44
 8005a0a:	4b54      	ldr	r3, [pc, #336]	@ (8005b5c <HAL_GPIO_Init+0x2e8>)
 8005a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a12:	60fb      	str	r3, [r7, #12]
 8005a14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a16:	4a52      	ldr	r2, [pc, #328]	@ (8005b60 <HAL_GPIO_Init+0x2ec>)
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	089b      	lsrs	r3, r3, #2
 8005a1c:	3302      	adds	r3, #2
 8005a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	f003 0303 	and.w	r3, r3, #3
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	220f      	movs	r2, #15
 8005a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a32:	43db      	mvns	r3, r3
 8005a34:	69ba      	ldr	r2, [r7, #24]
 8005a36:	4013      	ands	r3, r2
 8005a38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a49      	ldr	r2, [pc, #292]	@ (8005b64 <HAL_GPIO_Init+0x2f0>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d019      	beq.n	8005a76 <HAL_GPIO_Init+0x202>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a48      	ldr	r2, [pc, #288]	@ (8005b68 <HAL_GPIO_Init+0x2f4>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d013      	beq.n	8005a72 <HAL_GPIO_Init+0x1fe>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a47      	ldr	r2, [pc, #284]	@ (8005b6c <HAL_GPIO_Init+0x2f8>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d00d      	beq.n	8005a6e <HAL_GPIO_Init+0x1fa>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a46      	ldr	r2, [pc, #280]	@ (8005b70 <HAL_GPIO_Init+0x2fc>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d007      	beq.n	8005a6a <HAL_GPIO_Init+0x1f6>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a45      	ldr	r2, [pc, #276]	@ (8005b74 <HAL_GPIO_Init+0x300>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d101      	bne.n	8005a66 <HAL_GPIO_Init+0x1f2>
 8005a62:	2304      	movs	r3, #4
 8005a64:	e008      	b.n	8005a78 <HAL_GPIO_Init+0x204>
 8005a66:	2307      	movs	r3, #7
 8005a68:	e006      	b.n	8005a78 <HAL_GPIO_Init+0x204>
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e004      	b.n	8005a78 <HAL_GPIO_Init+0x204>
 8005a6e:	2302      	movs	r3, #2
 8005a70:	e002      	b.n	8005a78 <HAL_GPIO_Init+0x204>
 8005a72:	2301      	movs	r3, #1
 8005a74:	e000      	b.n	8005a78 <HAL_GPIO_Init+0x204>
 8005a76:	2300      	movs	r3, #0
 8005a78:	69fa      	ldr	r2, [r7, #28]
 8005a7a:	f002 0203 	and.w	r2, r2, #3
 8005a7e:	0092      	lsls	r2, r2, #2
 8005a80:	4093      	lsls	r3, r2
 8005a82:	69ba      	ldr	r2, [r7, #24]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a88:	4935      	ldr	r1, [pc, #212]	@ (8005b60 <HAL_GPIO_Init+0x2ec>)
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	089b      	lsrs	r3, r3, #2
 8005a8e:	3302      	adds	r3, #2
 8005a90:	69ba      	ldr	r2, [r7, #24]
 8005a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a96:	4b38      	ldr	r3, [pc, #224]	@ (8005b78 <HAL_GPIO_Init+0x304>)
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	43db      	mvns	r3, r3
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d003      	beq.n	8005aba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005ab2:	69ba      	ldr	r2, [r7, #24]
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005aba:	4a2f      	ldr	r2, [pc, #188]	@ (8005b78 <HAL_GPIO_Init+0x304>)
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005ac0:	4b2d      	ldr	r3, [pc, #180]	@ (8005b78 <HAL_GPIO_Init+0x304>)
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	43db      	mvns	r3, r3
 8005aca:	69ba      	ldr	r2, [r7, #24]
 8005acc:	4013      	ands	r3, r2
 8005ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d003      	beq.n	8005ae4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005adc:	69ba      	ldr	r2, [r7, #24]
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005ae4:	4a24      	ldr	r2, [pc, #144]	@ (8005b78 <HAL_GPIO_Init+0x304>)
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005aea:	4b23      	ldr	r3, [pc, #140]	@ (8005b78 <HAL_GPIO_Init+0x304>)
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	43db      	mvns	r3, r3
 8005af4:	69ba      	ldr	r2, [r7, #24]
 8005af6:	4013      	ands	r3, r2
 8005af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d003      	beq.n	8005b0e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005b06:	69ba      	ldr	r2, [r7, #24]
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005b0e:	4a1a      	ldr	r2, [pc, #104]	@ (8005b78 <HAL_GPIO_Init+0x304>)
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b14:	4b18      	ldr	r3, [pc, #96]	@ (8005b78 <HAL_GPIO_Init+0x304>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	43db      	mvns	r3, r3
 8005b1e:	69ba      	ldr	r2, [r7, #24]
 8005b20:	4013      	ands	r3, r2
 8005b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d003      	beq.n	8005b38 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005b30:	69ba      	ldr	r2, [r7, #24]
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005b38:	4a0f      	ldr	r2, [pc, #60]	@ (8005b78 <HAL_GPIO_Init+0x304>)
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	3301      	adds	r3, #1
 8005b42:	61fb      	str	r3, [r7, #28]
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	2b0f      	cmp	r3, #15
 8005b48:	f67f aea2 	bls.w	8005890 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005b4c:	bf00      	nop
 8005b4e:	bf00      	nop
 8005b50:	3724      	adds	r7, #36	@ 0x24
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	40023800 	.word	0x40023800
 8005b60:	40013800 	.word	0x40013800
 8005b64:	40020000 	.word	0x40020000
 8005b68:	40020400 	.word	0x40020400
 8005b6c:	40020800 	.word	0x40020800
 8005b70:	40020c00 	.word	0x40020c00
 8005b74:	40021000 	.word	0x40021000
 8005b78:	40013c00 	.word	0x40013c00

08005b7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d101      	bne.n	8005b8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e12b      	b.n	8005de6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d106      	bne.n	8005ba8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f7fd fe48 	bl	8003838 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2224      	movs	r2, #36	@ 0x24
 8005bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f022 0201 	bic.w	r2, r2, #1
 8005bbe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005bce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005bde:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005be0:	f001 fd86 	bl	80076f0 <HAL_RCC_GetPCLK1Freq>
 8005be4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	4a81      	ldr	r2, [pc, #516]	@ (8005df0 <HAL_I2C_Init+0x274>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d807      	bhi.n	8005c00 <HAL_I2C_Init+0x84>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	4a80      	ldr	r2, [pc, #512]	@ (8005df4 <HAL_I2C_Init+0x278>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	bf94      	ite	ls
 8005bf8:	2301      	movls	r3, #1
 8005bfa:	2300      	movhi	r3, #0
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	e006      	b.n	8005c0e <HAL_I2C_Init+0x92>
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	4a7d      	ldr	r2, [pc, #500]	@ (8005df8 <HAL_I2C_Init+0x27c>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	bf94      	ite	ls
 8005c08:	2301      	movls	r3, #1
 8005c0a:	2300      	movhi	r3, #0
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d001      	beq.n	8005c16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e0e7      	b.n	8005de6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	4a78      	ldr	r2, [pc, #480]	@ (8005dfc <HAL_I2C_Init+0x280>)
 8005c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c1e:	0c9b      	lsrs	r3, r3, #18
 8005c20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	430a      	orrs	r2, r1
 8005c34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	6a1b      	ldr	r3, [r3, #32]
 8005c3c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	4a6a      	ldr	r2, [pc, #424]	@ (8005df0 <HAL_I2C_Init+0x274>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d802      	bhi.n	8005c50 <HAL_I2C_Init+0xd4>
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	e009      	b.n	8005c64 <HAL_I2C_Init+0xe8>
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005c56:	fb02 f303 	mul.w	r3, r2, r3
 8005c5a:	4a69      	ldr	r2, [pc, #420]	@ (8005e00 <HAL_I2C_Init+0x284>)
 8005c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c60:	099b      	lsrs	r3, r3, #6
 8005c62:	3301      	adds	r3, #1
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	6812      	ldr	r2, [r2, #0]
 8005c68:	430b      	orrs	r3, r1
 8005c6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005c76:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	495c      	ldr	r1, [pc, #368]	@ (8005df0 <HAL_I2C_Init+0x274>)
 8005c80:	428b      	cmp	r3, r1
 8005c82:	d819      	bhi.n	8005cb8 <HAL_I2C_Init+0x13c>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	1e59      	subs	r1, r3, #1
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	005b      	lsls	r3, r3, #1
 8005c8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c92:	1c59      	adds	r1, r3, #1
 8005c94:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005c98:	400b      	ands	r3, r1
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00a      	beq.n	8005cb4 <HAL_I2C_Init+0x138>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	1e59      	subs	r1, r3, #1
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	005b      	lsls	r3, r3, #1
 8005ca8:	fbb1 f3f3 	udiv	r3, r1, r3
 8005cac:	3301      	adds	r3, #1
 8005cae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cb2:	e051      	b.n	8005d58 <HAL_I2C_Init+0x1dc>
 8005cb4:	2304      	movs	r3, #4
 8005cb6:	e04f      	b.n	8005d58 <HAL_I2C_Init+0x1dc>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d111      	bne.n	8005ce4 <HAL_I2C_Init+0x168>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	1e58      	subs	r0, r3, #1
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6859      	ldr	r1, [r3, #4]
 8005cc8:	460b      	mov	r3, r1
 8005cca:	005b      	lsls	r3, r3, #1
 8005ccc:	440b      	add	r3, r1
 8005cce:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	bf0c      	ite	eq
 8005cdc:	2301      	moveq	r3, #1
 8005cde:	2300      	movne	r3, #0
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	e012      	b.n	8005d0a <HAL_I2C_Init+0x18e>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	1e58      	subs	r0, r3, #1
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6859      	ldr	r1, [r3, #4]
 8005cec:	460b      	mov	r3, r1
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	440b      	add	r3, r1
 8005cf2:	0099      	lsls	r1, r3, #2
 8005cf4:	440b      	add	r3, r1
 8005cf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	bf0c      	ite	eq
 8005d04:	2301      	moveq	r3, #1
 8005d06:	2300      	movne	r3, #0
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <HAL_I2C_Init+0x196>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e022      	b.n	8005d58 <HAL_I2C_Init+0x1dc>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10e      	bne.n	8005d38 <HAL_I2C_Init+0x1bc>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	1e58      	subs	r0, r3, #1
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6859      	ldr	r1, [r3, #4]
 8005d22:	460b      	mov	r3, r1
 8005d24:	005b      	lsls	r3, r3, #1
 8005d26:	440b      	add	r3, r1
 8005d28:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d36:	e00f      	b.n	8005d58 <HAL_I2C_Init+0x1dc>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	1e58      	subs	r0, r3, #1
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6859      	ldr	r1, [r3, #4]
 8005d40:	460b      	mov	r3, r1
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	440b      	add	r3, r1
 8005d46:	0099      	lsls	r1, r3, #2
 8005d48:	440b      	add	r3, r1
 8005d4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d4e:	3301      	adds	r3, #1
 8005d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d54:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d58:	6879      	ldr	r1, [r7, #4]
 8005d5a:	6809      	ldr	r1, [r1, #0]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	69da      	ldr	r2, [r3, #28]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	431a      	orrs	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	430a      	orrs	r2, r1
 8005d7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005d86:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	6911      	ldr	r1, [r2, #16]
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	68d2      	ldr	r2, [r2, #12]
 8005d92:	4311      	orrs	r1, r2
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	6812      	ldr	r2, [r2, #0]
 8005d98:	430b      	orrs	r3, r1
 8005d9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	695a      	ldr	r2, [r3, #20]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	699b      	ldr	r3, [r3, #24]
 8005dae:	431a      	orrs	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	430a      	orrs	r2, r1
 8005db6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f042 0201 	orr.w	r2, r2, #1
 8005dc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2220      	movs	r2, #32
 8005dd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3710      	adds	r7, #16
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	000186a0 	.word	0x000186a0
 8005df4:	001e847f 	.word	0x001e847f
 8005df8:	003d08ff 	.word	0x003d08ff
 8005dfc:	431bde83 	.word	0x431bde83
 8005e00:	10624dd3 	.word	0x10624dd3

08005e04 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b088      	sub	sp, #32
 8005e08:	af02      	add	r7, sp, #8
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	607a      	str	r2, [r7, #4]
 8005e0e:	461a      	mov	r2, r3
 8005e10:	460b      	mov	r3, r1
 8005e12:	817b      	strh	r3, [r7, #10]
 8005e14:	4613      	mov	r3, r2
 8005e16:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e18:	f7fe fcdc 	bl	80047d4 <HAL_GetTick>
 8005e1c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b20      	cmp	r3, #32
 8005e28:	f040 80e0 	bne.w	8005fec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	9300      	str	r3, [sp, #0]
 8005e30:	2319      	movs	r3, #25
 8005e32:	2201      	movs	r2, #1
 8005e34:	4970      	ldr	r1, [pc, #448]	@ (8005ff8 <HAL_I2C_Master_Transmit+0x1f4>)
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f000 fdf4 	bl	8006a24 <I2C_WaitOnFlagUntilTimeout>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d001      	beq.n	8005e46 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005e42:	2302      	movs	r3, #2
 8005e44:	e0d3      	b.n	8005fee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d101      	bne.n	8005e54 <HAL_I2C_Master_Transmit+0x50>
 8005e50:	2302      	movs	r3, #2
 8005e52:	e0cc      	b.n	8005fee <HAL_I2C_Master_Transmit+0x1ea>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0301 	and.w	r3, r3, #1
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d007      	beq.n	8005e7a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f042 0201 	orr.w	r2, r2, #1
 8005e78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e88:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2221      	movs	r2, #33	@ 0x21
 8005e8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2210      	movs	r2, #16
 8005e96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	893a      	ldrh	r2, [r7, #8]
 8005eaa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	4a50      	ldr	r2, [pc, #320]	@ (8005ffc <HAL_I2C_Master_Transmit+0x1f8>)
 8005eba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005ebc:	8979      	ldrh	r1, [r7, #10]
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	6a3a      	ldr	r2, [r7, #32]
 8005ec2:	68f8      	ldr	r0, [r7, #12]
 8005ec4:	f000 fbc8 	bl	8006658 <I2C_MasterRequestWrite>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d001      	beq.n	8005ed2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e08d      	b.n	8005fee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	613b      	str	r3, [r7, #16]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	695b      	ldr	r3, [r3, #20]
 8005edc:	613b      	str	r3, [r7, #16]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	699b      	ldr	r3, [r3, #24]
 8005ee4:	613b      	str	r3, [r7, #16]
 8005ee6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005ee8:	e066      	b.n	8005fb8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	6a39      	ldr	r1, [r7, #32]
 8005eee:	68f8      	ldr	r0, [r7, #12]
 8005ef0:	f000 feb2 	bl	8006c58 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00d      	beq.n	8005f16 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005efe:	2b04      	cmp	r3, #4
 8005f00:	d107      	bne.n	8005f12 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e06b      	b.n	8005fee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f1a:	781a      	ldrb	r2, [r3, #0]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f26:	1c5a      	adds	r2, r3, #1
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	3b01      	subs	r3, #1
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	695b      	ldr	r3, [r3, #20]
 8005f4c:	f003 0304 	and.w	r3, r3, #4
 8005f50:	2b04      	cmp	r3, #4
 8005f52:	d11b      	bne.n	8005f8c <HAL_I2C_Master_Transmit+0x188>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d017      	beq.n	8005f8c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f60:	781a      	ldrb	r2, [r3, #0]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f6c:	1c5a      	adds	r2, r3, #1
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	b29a      	uxth	r2, r3
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f84:	3b01      	subs	r3, #1
 8005f86:	b29a      	uxth	r2, r3
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	6a39      	ldr	r1, [r7, #32]
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f000 fea9 	bl	8006ce8 <I2C_WaitOnBTFFlagUntilTimeout>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00d      	beq.n	8005fb8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa0:	2b04      	cmp	r3, #4
 8005fa2:	d107      	bne.n	8005fb4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fb2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e01a      	b.n	8005fee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d194      	bne.n	8005eea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2220      	movs	r2, #32
 8005fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	e000      	b.n	8005fee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005fec:	2302      	movs	r3, #2
  }
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3718      	adds	r7, #24
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	00100002 	.word	0x00100002
 8005ffc:	ffff0000 	.word	0xffff0000

08006000 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b08c      	sub	sp, #48	@ 0x30
 8006004:	af02      	add	r7, sp, #8
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	607a      	str	r2, [r7, #4]
 800600a:	461a      	mov	r2, r3
 800600c:	460b      	mov	r3, r1
 800600e:	817b      	strh	r3, [r7, #10]
 8006010:	4613      	mov	r3, r2
 8006012:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006014:	f7fe fbde 	bl	80047d4 <HAL_GetTick>
 8006018:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b20      	cmp	r3, #32
 8006024:	f040 8217 	bne.w	8006456 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800602a:	9300      	str	r3, [sp, #0]
 800602c:	2319      	movs	r3, #25
 800602e:	2201      	movs	r2, #1
 8006030:	497c      	ldr	r1, [pc, #496]	@ (8006224 <HAL_I2C_Master_Receive+0x224>)
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f000 fcf6 	bl	8006a24 <I2C_WaitOnFlagUntilTimeout>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d001      	beq.n	8006042 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800603e:	2302      	movs	r3, #2
 8006040:	e20a      	b.n	8006458 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006048:	2b01      	cmp	r3, #1
 800604a:	d101      	bne.n	8006050 <HAL_I2C_Master_Receive+0x50>
 800604c:	2302      	movs	r3, #2
 800604e:	e203      	b.n	8006458 <HAL_I2C_Master_Receive+0x458>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0301 	and.w	r3, r3, #1
 8006062:	2b01      	cmp	r3, #1
 8006064:	d007      	beq.n	8006076 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f042 0201 	orr.w	r2, r2, #1
 8006074:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006084:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2222      	movs	r2, #34	@ 0x22
 800608a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2210      	movs	r2, #16
 8006092:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	893a      	ldrh	r2, [r7, #8]
 80060a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060ac:	b29a      	uxth	r2, r3
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	4a5c      	ldr	r2, [pc, #368]	@ (8006228 <HAL_I2C_Master_Receive+0x228>)
 80060b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80060b8:	8979      	ldrh	r1, [r7, #10]
 80060ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	f000 fb4c 	bl	800675c <I2C_MasterRequestRead>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d001      	beq.n	80060ce <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e1c4      	b.n	8006458 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d113      	bne.n	80060fe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060d6:	2300      	movs	r3, #0
 80060d8:	623b      	str	r3, [r7, #32]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	695b      	ldr	r3, [r3, #20]
 80060e0:	623b      	str	r3, [r7, #32]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	623b      	str	r3, [r7, #32]
 80060ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060fa:	601a      	str	r2, [r3, #0]
 80060fc:	e198      	b.n	8006430 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006102:	2b01      	cmp	r3, #1
 8006104:	d11b      	bne.n	800613e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006114:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006116:	2300      	movs	r3, #0
 8006118:	61fb      	str	r3, [r7, #28]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	61fb      	str	r3, [r7, #28]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	699b      	ldr	r3, [r3, #24]
 8006128:	61fb      	str	r3, [r7, #28]
 800612a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800613a:	601a      	str	r2, [r3, #0]
 800613c:	e178      	b.n	8006430 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006142:	2b02      	cmp	r3, #2
 8006144:	d11b      	bne.n	800617e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006154:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006164:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006166:	2300      	movs	r3, #0
 8006168:	61bb      	str	r3, [r7, #24]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	695b      	ldr	r3, [r3, #20]
 8006170:	61bb      	str	r3, [r7, #24]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	61bb      	str	r3, [r7, #24]
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	e158      	b.n	8006430 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800618c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800618e:	2300      	movs	r3, #0
 8006190:	617b      	str	r3, [r7, #20]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	695b      	ldr	r3, [r3, #20]
 8006198:	617b      	str	r3, [r7, #20]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	617b      	str	r3, [r7, #20]
 80061a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80061a4:	e144      	b.n	8006430 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061aa:	2b03      	cmp	r3, #3
 80061ac:	f200 80f1 	bhi.w	8006392 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d123      	bne.n	8006200 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f000 fddb 	bl	8006d78 <I2C_WaitOnRXNEFlagUntilTimeout>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d001      	beq.n	80061cc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e145      	b.n	8006458 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	691a      	ldr	r2, [r3, #16]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d6:	b2d2      	uxtb	r2, r2
 80061d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061de:	1c5a      	adds	r2, r3, #1
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061e8:	3b01      	subs	r3, #1
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	3b01      	subs	r3, #1
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80061fe:	e117      	b.n	8006430 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006204:	2b02      	cmp	r3, #2
 8006206:	d14e      	bne.n	80062a6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800620e:	2200      	movs	r2, #0
 8006210:	4906      	ldr	r1, [pc, #24]	@ (800622c <HAL_I2C_Master_Receive+0x22c>)
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f000 fc06 	bl	8006a24 <I2C_WaitOnFlagUntilTimeout>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d008      	beq.n	8006230 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e11a      	b.n	8006458 <HAL_I2C_Master_Receive+0x458>
 8006222:	bf00      	nop
 8006224:	00100002 	.word	0x00100002
 8006228:	ffff0000 	.word	0xffff0000
 800622c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800623e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	691a      	ldr	r2, [r3, #16]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800624a:	b2d2      	uxtb	r2, r2
 800624c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006252:	1c5a      	adds	r2, r3, #1
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800625c:	3b01      	subs	r3, #1
 800625e:	b29a      	uxth	r2, r3
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006268:	b29b      	uxth	r3, r3
 800626a:	3b01      	subs	r3, #1
 800626c:	b29a      	uxth	r2, r3
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	691a      	ldr	r2, [r3, #16]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800627c:	b2d2      	uxtb	r2, r2
 800627e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006284:	1c5a      	adds	r2, r3, #1
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800628e:	3b01      	subs	r3, #1
 8006290:	b29a      	uxth	r2, r3
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800629a:	b29b      	uxth	r3, r3
 800629c:	3b01      	subs	r3, #1
 800629e:	b29a      	uxth	r2, r3
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80062a4:	e0c4      	b.n	8006430 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80062a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a8:	9300      	str	r3, [sp, #0]
 80062aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ac:	2200      	movs	r2, #0
 80062ae:	496c      	ldr	r1, [pc, #432]	@ (8006460 <HAL_I2C_Master_Receive+0x460>)
 80062b0:	68f8      	ldr	r0, [r7, #12]
 80062b2:	f000 fbb7 	bl	8006a24 <I2C_WaitOnFlagUntilTimeout>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d001      	beq.n	80062c0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	e0cb      	b.n	8006458 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	691a      	ldr	r2, [r3, #16]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062da:	b2d2      	uxtb	r2, r2
 80062dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e2:	1c5a      	adds	r2, r3, #1
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062ec:	3b01      	subs	r3, #1
 80062ee:	b29a      	uxth	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	3b01      	subs	r3, #1
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006304:	9300      	str	r3, [sp, #0]
 8006306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006308:	2200      	movs	r2, #0
 800630a:	4955      	ldr	r1, [pc, #340]	@ (8006460 <HAL_I2C_Master_Receive+0x460>)
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f000 fb89 	bl	8006a24 <I2C_WaitOnFlagUntilTimeout>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d001      	beq.n	800631c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e09d      	b.n	8006458 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800632a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	691a      	ldr	r2, [r3, #16]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006336:	b2d2      	uxtb	r2, r2
 8006338:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800633e:	1c5a      	adds	r2, r3, #1
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006348:	3b01      	subs	r3, #1
 800634a:	b29a      	uxth	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006354:	b29b      	uxth	r3, r3
 8006356:	3b01      	subs	r3, #1
 8006358:	b29a      	uxth	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	691a      	ldr	r2, [r3, #16]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006368:	b2d2      	uxtb	r2, r2
 800636a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006370:	1c5a      	adds	r2, r3, #1
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800637a:	3b01      	subs	r3, #1
 800637c:	b29a      	uxth	r2, r3
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006386:	b29b      	uxth	r3, r3
 8006388:	3b01      	subs	r3, #1
 800638a:	b29a      	uxth	r2, r3
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006390:	e04e      	b.n	8006430 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006392:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006394:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f000 fcee 	bl	8006d78 <I2C_WaitOnRXNEFlagUntilTimeout>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d001      	beq.n	80063a6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e058      	b.n	8006458 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	691a      	ldr	r2, [r3, #16]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063b0:	b2d2      	uxtb	r2, r2
 80063b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063b8:	1c5a      	adds	r2, r3, #1
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063c2:	3b01      	subs	r3, #1
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	3b01      	subs	r3, #1
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	695b      	ldr	r3, [r3, #20]
 80063de:	f003 0304 	and.w	r3, r3, #4
 80063e2:	2b04      	cmp	r3, #4
 80063e4:	d124      	bne.n	8006430 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063ea:	2b03      	cmp	r3, #3
 80063ec:	d107      	bne.n	80063fe <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063fc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	691a      	ldr	r2, [r3, #16]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006408:	b2d2      	uxtb	r2, r2
 800640a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006410:	1c5a      	adds	r2, r3, #1
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800641a:	3b01      	subs	r3, #1
 800641c:	b29a      	uxth	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006426:	b29b      	uxth	r3, r3
 8006428:	3b01      	subs	r3, #1
 800642a:	b29a      	uxth	r2, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006434:	2b00      	cmp	r3, #0
 8006436:	f47f aeb6 	bne.w	80061a6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2220      	movs	r2, #32
 800643e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006452:	2300      	movs	r3, #0
 8006454:	e000      	b.n	8006458 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006456:	2302      	movs	r3, #2
  }
}
 8006458:	4618      	mov	r0, r3
 800645a:	3728      	adds	r7, #40	@ 0x28
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	00010004 	.word	0x00010004

08006464 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b088      	sub	sp, #32
 8006468:	af02      	add	r7, sp, #8
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	4608      	mov	r0, r1
 800646e:	4611      	mov	r1, r2
 8006470:	461a      	mov	r2, r3
 8006472:	4603      	mov	r3, r0
 8006474:	817b      	strh	r3, [r7, #10]
 8006476:	460b      	mov	r3, r1
 8006478:	813b      	strh	r3, [r7, #8]
 800647a:	4613      	mov	r3, r2
 800647c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800647e:	f7fe f9a9 	bl	80047d4 <HAL_GetTick>
 8006482:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800648a:	b2db      	uxtb	r3, r3
 800648c:	2b20      	cmp	r3, #32
 800648e:	f040 80d9 	bne.w	8006644 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	9300      	str	r3, [sp, #0]
 8006496:	2319      	movs	r3, #25
 8006498:	2201      	movs	r2, #1
 800649a:	496d      	ldr	r1, [pc, #436]	@ (8006650 <HAL_I2C_Mem_Write+0x1ec>)
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f000 fac1 	bl	8006a24 <I2C_WaitOnFlagUntilTimeout>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d001      	beq.n	80064ac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80064a8:	2302      	movs	r3, #2
 80064aa:	e0cc      	b.n	8006646 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d101      	bne.n	80064ba <HAL_I2C_Mem_Write+0x56>
 80064b6:	2302      	movs	r3, #2
 80064b8:	e0c5      	b.n	8006646 <HAL_I2C_Mem_Write+0x1e2>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0301 	and.w	r3, r3, #1
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d007      	beq.n	80064e0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f042 0201 	orr.w	r2, r2, #1
 80064de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80064ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2221      	movs	r2, #33	@ 0x21
 80064f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2240      	movs	r2, #64	@ 0x40
 80064fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2200      	movs	r2, #0
 8006504:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6a3a      	ldr	r2, [r7, #32]
 800650a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006510:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006516:	b29a      	uxth	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	4a4d      	ldr	r2, [pc, #308]	@ (8006654 <HAL_I2C_Mem_Write+0x1f0>)
 8006520:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006522:	88f8      	ldrh	r0, [r7, #6]
 8006524:	893a      	ldrh	r2, [r7, #8]
 8006526:	8979      	ldrh	r1, [r7, #10]
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	9301      	str	r3, [sp, #4]
 800652c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800652e:	9300      	str	r3, [sp, #0]
 8006530:	4603      	mov	r3, r0
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f000 f9e0 	bl	80068f8 <I2C_RequestMemoryWrite>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d052      	beq.n	80065e4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	e081      	b.n	8006646 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006542:	697a      	ldr	r2, [r7, #20]
 8006544:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f000 fb86 	bl	8006c58 <I2C_WaitOnTXEFlagUntilTimeout>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00d      	beq.n	800656e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006556:	2b04      	cmp	r3, #4
 8006558:	d107      	bne.n	800656a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006568:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e06b      	b.n	8006646 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006572:	781a      	ldrb	r2, [r3, #0]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800657e:	1c5a      	adds	r2, r3, #1
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006588:	3b01      	subs	r3, #1
 800658a:	b29a      	uxth	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006594:	b29b      	uxth	r3, r3
 8006596:	3b01      	subs	r3, #1
 8006598:	b29a      	uxth	r2, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	695b      	ldr	r3, [r3, #20]
 80065a4:	f003 0304 	and.w	r3, r3, #4
 80065a8:	2b04      	cmp	r3, #4
 80065aa:	d11b      	bne.n	80065e4 <HAL_I2C_Mem_Write+0x180>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d017      	beq.n	80065e4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b8:	781a      	ldrb	r2, [r3, #0]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065c4:	1c5a      	adds	r2, r3, #1
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065ce:	3b01      	subs	r3, #1
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065da:	b29b      	uxth	r3, r3
 80065dc:	3b01      	subs	r3, #1
 80065de:	b29a      	uxth	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1aa      	bne.n	8006542 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065ec:	697a      	ldr	r2, [r7, #20]
 80065ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f000 fb79 	bl	8006ce8 <I2C_WaitOnBTFFlagUntilTimeout>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00d      	beq.n	8006618 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006600:	2b04      	cmp	r3, #4
 8006602:	d107      	bne.n	8006614 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006612:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	e016      	b.n	8006646 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006626:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2220      	movs	r2, #32
 800662c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2200      	movs	r2, #0
 8006634:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006640:	2300      	movs	r3, #0
 8006642:	e000      	b.n	8006646 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006644:	2302      	movs	r3, #2
  }
}
 8006646:	4618      	mov	r0, r3
 8006648:	3718      	adds	r7, #24
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	00100002 	.word	0x00100002
 8006654:	ffff0000 	.word	0xffff0000

08006658 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b088      	sub	sp, #32
 800665c:	af02      	add	r7, sp, #8
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	607a      	str	r2, [r7, #4]
 8006662:	603b      	str	r3, [r7, #0]
 8006664:	460b      	mov	r3, r1
 8006666:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800666c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	2b08      	cmp	r3, #8
 8006672:	d006      	beq.n	8006682 <I2C_MasterRequestWrite+0x2a>
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	2b01      	cmp	r3, #1
 8006678:	d003      	beq.n	8006682 <I2C_MasterRequestWrite+0x2a>
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006680:	d108      	bne.n	8006694 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006690:	601a      	str	r2, [r3, #0]
 8006692:	e00b      	b.n	80066ac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006698:	2b12      	cmp	r3, #18
 800669a:	d107      	bne.n	80066ac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80066aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	9300      	str	r3, [sp, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f000 f9b3 	bl	8006a24 <I2C_WaitOnFlagUntilTimeout>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00d      	beq.n	80066e0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066d2:	d103      	bne.n	80066dc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80066da:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80066dc:	2303      	movs	r3, #3
 80066de:	e035      	b.n	800674c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	691b      	ldr	r3, [r3, #16]
 80066e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066e8:	d108      	bne.n	80066fc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80066ea:	897b      	ldrh	r3, [r7, #10]
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	461a      	mov	r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80066f8:	611a      	str	r2, [r3, #16]
 80066fa:	e01b      	b.n	8006734 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80066fc:	897b      	ldrh	r3, [r7, #10]
 80066fe:	11db      	asrs	r3, r3, #7
 8006700:	b2db      	uxtb	r3, r3
 8006702:	f003 0306 	and.w	r3, r3, #6
 8006706:	b2db      	uxtb	r3, r3
 8006708:	f063 030f 	orn	r3, r3, #15
 800670c:	b2da      	uxtb	r2, r3
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	490e      	ldr	r1, [pc, #56]	@ (8006754 <I2C_MasterRequestWrite+0xfc>)
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	f000 f9fc 	bl	8006b18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d001      	beq.n	800672a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e010      	b.n	800674c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800672a:	897b      	ldrh	r3, [r7, #10]
 800672c:	b2da      	uxtb	r2, r3
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	4907      	ldr	r1, [pc, #28]	@ (8006758 <I2C_MasterRequestWrite+0x100>)
 800673a:	68f8      	ldr	r0, [r7, #12]
 800673c:	f000 f9ec 	bl	8006b18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d001      	beq.n	800674a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e000      	b.n	800674c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	3718      	adds	r7, #24
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	00010008 	.word	0x00010008
 8006758:	00010002 	.word	0x00010002

0800675c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b088      	sub	sp, #32
 8006760:	af02      	add	r7, sp, #8
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	607a      	str	r2, [r7, #4]
 8006766:	603b      	str	r3, [r7, #0]
 8006768:	460b      	mov	r3, r1
 800676a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006770:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006780:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	2b08      	cmp	r3, #8
 8006786:	d006      	beq.n	8006796 <I2C_MasterRequestRead+0x3a>
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	2b01      	cmp	r3, #1
 800678c:	d003      	beq.n	8006796 <I2C_MasterRequestRead+0x3a>
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006794:	d108      	bne.n	80067a8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80067a4:	601a      	str	r2, [r3, #0]
 80067a6:	e00b      	b.n	80067c0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ac:	2b11      	cmp	r3, #17
 80067ae:	d107      	bne.n	80067c0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80067be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	9300      	str	r3, [sp, #0]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	f000 f929 	bl	8006a24 <I2C_WaitOnFlagUntilTimeout>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d00d      	beq.n	80067f4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067e6:	d103      	bne.n	80067f0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80067ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	e079      	b.n	80068e8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067fc:	d108      	bne.n	8006810 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80067fe:	897b      	ldrh	r3, [r7, #10]
 8006800:	b2db      	uxtb	r3, r3
 8006802:	f043 0301 	orr.w	r3, r3, #1
 8006806:	b2da      	uxtb	r2, r3
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	611a      	str	r2, [r3, #16]
 800680e:	e05f      	b.n	80068d0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006810:	897b      	ldrh	r3, [r7, #10]
 8006812:	11db      	asrs	r3, r3, #7
 8006814:	b2db      	uxtb	r3, r3
 8006816:	f003 0306 	and.w	r3, r3, #6
 800681a:	b2db      	uxtb	r3, r3
 800681c:	f063 030f 	orn	r3, r3, #15
 8006820:	b2da      	uxtb	r2, r3
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	4930      	ldr	r1, [pc, #192]	@ (80068f0 <I2C_MasterRequestRead+0x194>)
 800682e:	68f8      	ldr	r0, [r7, #12]
 8006830:	f000 f972 	bl	8006b18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d001      	beq.n	800683e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e054      	b.n	80068e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800683e:	897b      	ldrh	r3, [r7, #10]
 8006840:	b2da      	uxtb	r2, r3
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	4929      	ldr	r1, [pc, #164]	@ (80068f4 <I2C_MasterRequestRead+0x198>)
 800684e:	68f8      	ldr	r0, [r7, #12]
 8006850:	f000 f962 	bl	8006b18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d001      	beq.n	800685e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e044      	b.n	80068e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800685e:	2300      	movs	r3, #0
 8006860:	613b      	str	r3, [r7, #16]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	695b      	ldr	r3, [r3, #20]
 8006868:	613b      	str	r3, [r7, #16]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	613b      	str	r3, [r7, #16]
 8006872:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006882:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	9300      	str	r3, [sp, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f000 f8c7 	bl	8006a24 <I2C_WaitOnFlagUntilTimeout>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00d      	beq.n	80068b8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068aa:	d103      	bne.n	80068b4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068b2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80068b4:	2303      	movs	r3, #3
 80068b6:	e017      	b.n	80068e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80068b8:	897b      	ldrh	r3, [r7, #10]
 80068ba:	11db      	asrs	r3, r3, #7
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	f003 0306 	and.w	r3, r3, #6
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	f063 030e 	orn	r3, r3, #14
 80068c8:	b2da      	uxtb	r2, r3
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	4907      	ldr	r1, [pc, #28]	@ (80068f4 <I2C_MasterRequestRead+0x198>)
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f000 f91e 	bl	8006b18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d001      	beq.n	80068e6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e000      	b.n	80068e8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3718      	adds	r7, #24
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	00010008 	.word	0x00010008
 80068f4:	00010002 	.word	0x00010002

080068f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b088      	sub	sp, #32
 80068fc:	af02      	add	r7, sp, #8
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	4608      	mov	r0, r1
 8006902:	4611      	mov	r1, r2
 8006904:	461a      	mov	r2, r3
 8006906:	4603      	mov	r3, r0
 8006908:	817b      	strh	r3, [r7, #10]
 800690a:	460b      	mov	r3, r1
 800690c:	813b      	strh	r3, [r7, #8]
 800690e:	4613      	mov	r3, r2
 8006910:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006920:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006924:	9300      	str	r3, [sp, #0]
 8006926:	6a3b      	ldr	r3, [r7, #32]
 8006928:	2200      	movs	r2, #0
 800692a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	f000 f878 	bl	8006a24 <I2C_WaitOnFlagUntilTimeout>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00d      	beq.n	8006956 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006944:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006948:	d103      	bne.n	8006952 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006950:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	e05f      	b.n	8006a16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006956:	897b      	ldrh	r3, [r7, #10]
 8006958:	b2db      	uxtb	r3, r3
 800695a:	461a      	mov	r2, r3
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006964:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006968:	6a3a      	ldr	r2, [r7, #32]
 800696a:	492d      	ldr	r1, [pc, #180]	@ (8006a20 <I2C_RequestMemoryWrite+0x128>)
 800696c:	68f8      	ldr	r0, [r7, #12]
 800696e:	f000 f8d3 	bl	8006b18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006972:	4603      	mov	r3, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d001      	beq.n	800697c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e04c      	b.n	8006a16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800697c:	2300      	movs	r3, #0
 800697e:	617b      	str	r3, [r7, #20]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	617b      	str	r3, [r7, #20]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	699b      	ldr	r3, [r3, #24]
 800698e:	617b      	str	r3, [r7, #20]
 8006990:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006992:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006994:	6a39      	ldr	r1, [r7, #32]
 8006996:	68f8      	ldr	r0, [r7, #12]
 8006998:	f000 f95e 	bl	8006c58 <I2C_WaitOnTXEFlagUntilTimeout>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00d      	beq.n	80069be <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a6:	2b04      	cmp	r3, #4
 80069a8:	d107      	bne.n	80069ba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80069b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e02b      	b.n	8006a16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80069be:	88fb      	ldrh	r3, [r7, #6]
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d105      	bne.n	80069d0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80069c4:	893b      	ldrh	r3, [r7, #8]
 80069c6:	b2da      	uxtb	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	611a      	str	r2, [r3, #16]
 80069ce:	e021      	b.n	8006a14 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80069d0:	893b      	ldrh	r3, [r7, #8]
 80069d2:	0a1b      	lsrs	r3, r3, #8
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	b2da      	uxtb	r2, r3
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069e0:	6a39      	ldr	r1, [r7, #32]
 80069e2:	68f8      	ldr	r0, [r7, #12]
 80069e4:	f000 f938 	bl	8006c58 <I2C_WaitOnTXEFlagUntilTimeout>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00d      	beq.n	8006a0a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069f2:	2b04      	cmp	r3, #4
 80069f4:	d107      	bne.n	8006a06 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e005      	b.n	8006a16 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a0a:	893b      	ldrh	r3, [r7, #8]
 8006a0c:	b2da      	uxtb	r2, r3
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3718      	adds	r7, #24
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	00010002 	.word	0x00010002

08006a24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	603b      	str	r3, [r7, #0]
 8006a30:	4613      	mov	r3, r2
 8006a32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a34:	e048      	b.n	8006ac8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a3c:	d044      	beq.n	8006ac8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a3e:	f7fd fec9 	bl	80047d4 <HAL_GetTick>
 8006a42:	4602      	mov	r2, r0
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	683a      	ldr	r2, [r7, #0]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d302      	bcc.n	8006a54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d139      	bne.n	8006ac8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	0c1b      	lsrs	r3, r3, #16
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d10d      	bne.n	8006a7a <I2C_WaitOnFlagUntilTimeout+0x56>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	695b      	ldr	r3, [r3, #20]
 8006a64:	43da      	mvns	r2, r3
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	4013      	ands	r3, r2
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	bf0c      	ite	eq
 8006a70:	2301      	moveq	r3, #1
 8006a72:	2300      	movne	r3, #0
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	461a      	mov	r2, r3
 8006a78:	e00c      	b.n	8006a94 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	699b      	ldr	r3, [r3, #24]
 8006a80:	43da      	mvns	r2, r3
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	4013      	ands	r3, r2
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	bf0c      	ite	eq
 8006a8c:	2301      	moveq	r3, #1
 8006a8e:	2300      	movne	r3, #0
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	461a      	mov	r2, r3
 8006a94:	79fb      	ldrb	r3, [r7, #7]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d116      	bne.n	8006ac8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2220      	movs	r2, #32
 8006aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ab4:	f043 0220 	orr.w	r2, r3, #32
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e023      	b.n	8006b10 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	0c1b      	lsrs	r3, r3, #16
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d10d      	bne.n	8006aee <I2C_WaitOnFlagUntilTimeout+0xca>
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	695b      	ldr	r3, [r3, #20]
 8006ad8:	43da      	mvns	r2, r3
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	4013      	ands	r3, r2
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	bf0c      	ite	eq
 8006ae4:	2301      	moveq	r3, #1
 8006ae6:	2300      	movne	r3, #0
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	461a      	mov	r2, r3
 8006aec:	e00c      	b.n	8006b08 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	699b      	ldr	r3, [r3, #24]
 8006af4:	43da      	mvns	r2, r3
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	4013      	ands	r3, r2
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	bf0c      	ite	eq
 8006b00:	2301      	moveq	r3, #1
 8006b02:	2300      	movne	r3, #0
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	461a      	mov	r2, r3
 8006b08:	79fb      	ldrb	r3, [r7, #7]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d093      	beq.n	8006a36 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3710      	adds	r7, #16
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	607a      	str	r2, [r7, #4]
 8006b24:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006b26:	e071      	b.n	8006c0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b36:	d123      	bne.n	8006b80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b46:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006b50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2220      	movs	r2, #32
 8006b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b6c:	f043 0204 	orr.w	r2, r3, #4
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e067      	b.n	8006c50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b86:	d041      	beq.n	8006c0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b88:	f7fd fe24 	bl	80047d4 <HAL_GetTick>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d302      	bcc.n	8006b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d136      	bne.n	8006c0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	0c1b      	lsrs	r3, r3, #16
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d10c      	bne.n	8006bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	695b      	ldr	r3, [r3, #20]
 8006bae:	43da      	mvns	r2, r3
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	4013      	ands	r3, r2
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	bf14      	ite	ne
 8006bba:	2301      	movne	r3, #1
 8006bbc:	2300      	moveq	r3, #0
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	e00b      	b.n	8006bda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	699b      	ldr	r3, [r3, #24]
 8006bc8:	43da      	mvns	r2, r3
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	4013      	ands	r3, r2
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	bf14      	ite	ne
 8006bd4:	2301      	movne	r3, #1
 8006bd6:	2300      	moveq	r3, #0
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d016      	beq.n	8006c0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2200      	movs	r2, #0
 8006be2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2220      	movs	r2, #32
 8006be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bf8:	f043 0220 	orr.w	r2, r3, #32
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e021      	b.n	8006c50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	0c1b      	lsrs	r3, r3, #16
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d10c      	bne.n	8006c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	695b      	ldr	r3, [r3, #20]
 8006c1c:	43da      	mvns	r2, r3
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	4013      	ands	r3, r2
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	bf14      	ite	ne
 8006c28:	2301      	movne	r3, #1
 8006c2a:	2300      	moveq	r3, #0
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	e00b      	b.n	8006c48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	43da      	mvns	r2, r3
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	bf14      	ite	ne
 8006c42:	2301      	movne	r3, #1
 8006c44:	2300      	moveq	r3, #0
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f47f af6d 	bne.w	8006b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3710      	adds	r7, #16
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c64:	e034      	b.n	8006cd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f000 f8e3 	bl	8006e32 <I2C_IsAcknowledgeFailed>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d001      	beq.n	8006c76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e034      	b.n	8006ce0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c7c:	d028      	beq.n	8006cd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c7e:	f7fd fda9 	bl	80047d4 <HAL_GetTick>
 8006c82:	4602      	mov	r2, r0
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	1ad3      	subs	r3, r2, r3
 8006c88:	68ba      	ldr	r2, [r7, #8]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d302      	bcc.n	8006c94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d11d      	bne.n	8006cd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	695b      	ldr	r3, [r3, #20]
 8006c9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c9e:	2b80      	cmp	r3, #128	@ 0x80
 8006ca0:	d016      	beq.n	8006cd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2220      	movs	r2, #32
 8006cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cbc:	f043 0220 	orr.w	r2, r3, #32
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e007      	b.n	8006ce0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	695b      	ldr	r3, [r3, #20]
 8006cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cda:	2b80      	cmp	r3, #128	@ 0x80
 8006cdc:	d1c3      	bne.n	8006c66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3710      	adds	r7, #16
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006cf4:	e034      	b.n	8006d60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006cf6:	68f8      	ldr	r0, [r7, #12]
 8006cf8:	f000 f89b 	bl	8006e32 <I2C_IsAcknowledgeFailed>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d001      	beq.n	8006d06 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e034      	b.n	8006d70 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d0c:	d028      	beq.n	8006d60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d0e:	f7fd fd61 	bl	80047d4 <HAL_GetTick>
 8006d12:	4602      	mov	r2, r0
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	68ba      	ldr	r2, [r7, #8]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d302      	bcc.n	8006d24 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d11d      	bne.n	8006d60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	695b      	ldr	r3, [r3, #20]
 8006d2a:	f003 0304 	and.w	r3, r3, #4
 8006d2e:	2b04      	cmp	r3, #4
 8006d30:	d016      	beq.n	8006d60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2220      	movs	r2, #32
 8006d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d4c:	f043 0220 	orr.w	r2, r3, #32
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e007      	b.n	8006d70 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	695b      	ldr	r3, [r3, #20]
 8006d66:	f003 0304 	and.w	r3, r3, #4
 8006d6a:	2b04      	cmp	r3, #4
 8006d6c:	d1c3      	bne.n	8006cf6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006d6e:	2300      	movs	r3, #0
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3710      	adds	r7, #16
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006d84:	e049      	b.n	8006e1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	695b      	ldr	r3, [r3, #20]
 8006d8c:	f003 0310 	and.w	r3, r3, #16
 8006d90:	2b10      	cmp	r3, #16
 8006d92:	d119      	bne.n	8006dc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f06f 0210 	mvn.w	r2, #16
 8006d9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2200      	movs	r2, #0
 8006da2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2220      	movs	r2, #32
 8006da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e030      	b.n	8006e2a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dc8:	f7fd fd04 	bl	80047d4 <HAL_GetTick>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	68ba      	ldr	r2, [r7, #8]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d302      	bcc.n	8006dde <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d11d      	bne.n	8006e1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	695b      	ldr	r3, [r3, #20]
 8006de4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006de8:	2b40      	cmp	r3, #64	@ 0x40
 8006dea:	d016      	beq.n	8006e1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2200      	movs	r2, #0
 8006df0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2220      	movs	r2, #32
 8006df6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e06:	f043 0220 	orr.w	r2, r3, #32
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e007      	b.n	8006e2a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	695b      	ldr	r3, [r3, #20]
 8006e20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e24:	2b40      	cmp	r3, #64	@ 0x40
 8006e26:	d1ae      	bne.n	8006d86 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006e32:	b480      	push	{r7}
 8006e34:	b083      	sub	sp, #12
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	695b      	ldr	r3, [r3, #20]
 8006e40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e48:	d11b      	bne.n	8006e82 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006e52:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2220      	movs	r2, #32
 8006e5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e6e:	f043 0204 	orr.w	r2, r3, #4
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e000      	b.n	8006e84 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b086      	sub	sp, #24
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d101      	bne.n	8006ea2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e267      	b.n	8007372 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 0301 	and.w	r3, r3, #1
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d075      	beq.n	8006f9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006eae:	4b88      	ldr	r3, [pc, #544]	@ (80070d0 <HAL_RCC_OscConfig+0x240>)
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	f003 030c 	and.w	r3, r3, #12
 8006eb6:	2b04      	cmp	r3, #4
 8006eb8:	d00c      	beq.n	8006ed4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006eba:	4b85      	ldr	r3, [pc, #532]	@ (80070d0 <HAL_RCC_OscConfig+0x240>)
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006ec2:	2b08      	cmp	r3, #8
 8006ec4:	d112      	bne.n	8006eec <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ec6:	4b82      	ldr	r3, [pc, #520]	@ (80070d0 <HAL_RCC_OscConfig+0x240>)
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ece:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ed2:	d10b      	bne.n	8006eec <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ed4:	4b7e      	ldr	r3, [pc, #504]	@ (80070d0 <HAL_RCC_OscConfig+0x240>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d05b      	beq.n	8006f98 <HAL_RCC_OscConfig+0x108>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d157      	bne.n	8006f98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e242      	b.n	8007372 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ef4:	d106      	bne.n	8006f04 <HAL_RCC_OscConfig+0x74>
 8006ef6:	4b76      	ldr	r3, [pc, #472]	@ (80070d0 <HAL_RCC_OscConfig+0x240>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a75      	ldr	r2, [pc, #468]	@ (80070d0 <HAL_RCC_OscConfig+0x240>)
 8006efc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f00:	6013      	str	r3, [r2, #0]
 8006f02:	e01d      	b.n	8006f40 <HAL_RCC_OscConfig+0xb0>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f0c:	d10c      	bne.n	8006f28 <HAL_RCC_OscConfig+0x98>
 8006f0e:	4b70      	ldr	r3, [pc, #448]	@ (80070d0 <HAL_RCC_OscConfig+0x240>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a6f      	ldr	r2, [pc, #444]	@ (80070d0 <HAL_RCC_OscConfig+0x240>)
 8006f14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f18:	6013      	str	r3, [r2, #0]
 8006f1a:	4b6d      	ldr	r3, [pc, #436]	@ (80070d0 <HAL_RCC_OscConfig+0x240>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a6c      	ldr	r2, [pc, #432]	@ (80070d0 <HAL_RCC_OscConfig+0x240>)
 8006f20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f24:	6013      	str	r3, [r2, #0]
 8006f26:	e00b      	b.n	8006f40 <HAL_RCC_OscConfig+0xb0>
 8006f28:	4b69      	ldr	r3, [pc, #420]	@ (80070d0 <HAL_RCC_OscConfig+0x240>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a68      	ldr	r2, [pc, #416]	@ (80070d0 <HAL_RCC_OscConfig+0x240>)
 8006f2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f32:	6013      	str	r3, [r2, #0]
 8006f34:	4b66      	ldr	r3, [pc, #408]	@ (80070d0 <HAL_RCC_OscConfig+0x240>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a65      	ldr	r2, [pc, #404]	@ (80070d0 <HAL_RCC_OscConfig+0x240>)
 8006f3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d013      	beq.n	8006f70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f48:	f7fd fc44 	bl	80047d4 <HAL_GetTick>
 8006f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f4e:	e008      	b.n	8006f62 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f50:	f7fd fc40 	bl	80047d4 <HAL_GetTick>
 8006f54:	4602      	mov	r2, r0
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	2b64      	cmp	r3, #100	@ 0x64
 8006f5c:	d901      	bls.n	8006f62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	e207      	b.n	8007372 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f62:	4b5b      	ldr	r3, [pc, #364]	@ (80070d0 <HAL_RCC_OscConfig+0x240>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d0f0      	beq.n	8006f50 <HAL_RCC_OscConfig+0xc0>
 8006f6e:	e014      	b.n	8006f9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f70:	f7fd fc30 	bl	80047d4 <HAL_GetTick>
 8006f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f76:	e008      	b.n	8006f8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f78:	f7fd fc2c 	bl	80047d4 <HAL_GetTick>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	2b64      	cmp	r3, #100	@ 0x64
 8006f84:	d901      	bls.n	8006f8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	e1f3      	b.n	8007372 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f8a:	4b51      	ldr	r3, [pc, #324]	@ (80070d0 <HAL_RCC_OscConfig+0x240>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d1f0      	bne.n	8006f78 <HAL_RCC_OscConfig+0xe8>
 8006f96:	e000      	b.n	8006f9a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 0302 	and.w	r3, r3, #2
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d063      	beq.n	800706e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006fa6:	4b4a      	ldr	r3, [pc, #296]	@ (80070d0 <HAL_RCC_OscConfig+0x240>)
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	f003 030c 	and.w	r3, r3, #12
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00b      	beq.n	8006fca <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006fb2:	4b47      	ldr	r3, [pc, #284]	@ (80070d0 <HAL_RCC_OscConfig+0x240>)
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006fba:	2b08      	cmp	r3, #8
 8006fbc:	d11c      	bne.n	8006ff8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006fbe:	4b44      	ldr	r3, [pc, #272]	@ (80070d0 <HAL_RCC_OscConfig+0x240>)
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d116      	bne.n	8006ff8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fca:	4b41      	ldr	r3, [pc, #260]	@ (80070d0 <HAL_RCC_OscConfig+0x240>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 0302 	and.w	r3, r3, #2
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d005      	beq.n	8006fe2 <HAL_RCC_OscConfig+0x152>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d001      	beq.n	8006fe2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e1c7      	b.n	8007372 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fe2:	4b3b      	ldr	r3, [pc, #236]	@ (80070d0 <HAL_RCC_OscConfig+0x240>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	00db      	lsls	r3, r3, #3
 8006ff0:	4937      	ldr	r1, [pc, #220]	@ (80070d0 <HAL_RCC_OscConfig+0x240>)
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ff6:	e03a      	b.n	800706e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d020      	beq.n	8007042 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007000:	4b34      	ldr	r3, [pc, #208]	@ (80070d4 <HAL_RCC_OscConfig+0x244>)
 8007002:	2201      	movs	r2, #1
 8007004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007006:	f7fd fbe5 	bl	80047d4 <HAL_GetTick>
 800700a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800700c:	e008      	b.n	8007020 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800700e:	f7fd fbe1 	bl	80047d4 <HAL_GetTick>
 8007012:	4602      	mov	r2, r0
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	2b02      	cmp	r3, #2
 800701a:	d901      	bls.n	8007020 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800701c:	2303      	movs	r3, #3
 800701e:	e1a8      	b.n	8007372 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007020:	4b2b      	ldr	r3, [pc, #172]	@ (80070d0 <HAL_RCC_OscConfig+0x240>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 0302 	and.w	r3, r3, #2
 8007028:	2b00      	cmp	r3, #0
 800702a:	d0f0      	beq.n	800700e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800702c:	4b28      	ldr	r3, [pc, #160]	@ (80070d0 <HAL_RCC_OscConfig+0x240>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	00db      	lsls	r3, r3, #3
 800703a:	4925      	ldr	r1, [pc, #148]	@ (80070d0 <HAL_RCC_OscConfig+0x240>)
 800703c:	4313      	orrs	r3, r2
 800703e:	600b      	str	r3, [r1, #0]
 8007040:	e015      	b.n	800706e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007042:	4b24      	ldr	r3, [pc, #144]	@ (80070d4 <HAL_RCC_OscConfig+0x244>)
 8007044:	2200      	movs	r2, #0
 8007046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007048:	f7fd fbc4 	bl	80047d4 <HAL_GetTick>
 800704c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800704e:	e008      	b.n	8007062 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007050:	f7fd fbc0 	bl	80047d4 <HAL_GetTick>
 8007054:	4602      	mov	r2, r0
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	2b02      	cmp	r3, #2
 800705c:	d901      	bls.n	8007062 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	e187      	b.n	8007372 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007062:	4b1b      	ldr	r3, [pc, #108]	@ (80070d0 <HAL_RCC_OscConfig+0x240>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 0302 	and.w	r3, r3, #2
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1f0      	bne.n	8007050 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 0308 	and.w	r3, r3, #8
 8007076:	2b00      	cmp	r3, #0
 8007078:	d036      	beq.n	80070e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	695b      	ldr	r3, [r3, #20]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d016      	beq.n	80070b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007082:	4b15      	ldr	r3, [pc, #84]	@ (80070d8 <HAL_RCC_OscConfig+0x248>)
 8007084:	2201      	movs	r2, #1
 8007086:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007088:	f7fd fba4 	bl	80047d4 <HAL_GetTick>
 800708c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800708e:	e008      	b.n	80070a2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007090:	f7fd fba0 	bl	80047d4 <HAL_GetTick>
 8007094:	4602      	mov	r2, r0
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	1ad3      	subs	r3, r2, r3
 800709a:	2b02      	cmp	r3, #2
 800709c:	d901      	bls.n	80070a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800709e:	2303      	movs	r3, #3
 80070a0:	e167      	b.n	8007372 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070a2:	4b0b      	ldr	r3, [pc, #44]	@ (80070d0 <HAL_RCC_OscConfig+0x240>)
 80070a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070a6:	f003 0302 	and.w	r3, r3, #2
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d0f0      	beq.n	8007090 <HAL_RCC_OscConfig+0x200>
 80070ae:	e01b      	b.n	80070e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80070b0:	4b09      	ldr	r3, [pc, #36]	@ (80070d8 <HAL_RCC_OscConfig+0x248>)
 80070b2:	2200      	movs	r2, #0
 80070b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070b6:	f7fd fb8d 	bl	80047d4 <HAL_GetTick>
 80070ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070bc:	e00e      	b.n	80070dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070be:	f7fd fb89 	bl	80047d4 <HAL_GetTick>
 80070c2:	4602      	mov	r2, r0
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	1ad3      	subs	r3, r2, r3
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d907      	bls.n	80070dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80070cc:	2303      	movs	r3, #3
 80070ce:	e150      	b.n	8007372 <HAL_RCC_OscConfig+0x4e2>
 80070d0:	40023800 	.word	0x40023800
 80070d4:	42470000 	.word	0x42470000
 80070d8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070dc:	4b88      	ldr	r3, [pc, #544]	@ (8007300 <HAL_RCC_OscConfig+0x470>)
 80070de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070e0:	f003 0302 	and.w	r3, r3, #2
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d1ea      	bne.n	80070be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0304 	and.w	r3, r3, #4
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f000 8097 	beq.w	8007224 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070f6:	2300      	movs	r3, #0
 80070f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070fa:	4b81      	ldr	r3, [pc, #516]	@ (8007300 <HAL_RCC_OscConfig+0x470>)
 80070fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d10f      	bne.n	8007126 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007106:	2300      	movs	r3, #0
 8007108:	60bb      	str	r3, [r7, #8]
 800710a:	4b7d      	ldr	r3, [pc, #500]	@ (8007300 <HAL_RCC_OscConfig+0x470>)
 800710c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800710e:	4a7c      	ldr	r2, [pc, #496]	@ (8007300 <HAL_RCC_OscConfig+0x470>)
 8007110:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007114:	6413      	str	r3, [r2, #64]	@ 0x40
 8007116:	4b7a      	ldr	r3, [pc, #488]	@ (8007300 <HAL_RCC_OscConfig+0x470>)
 8007118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800711a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800711e:	60bb      	str	r3, [r7, #8]
 8007120:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007122:	2301      	movs	r3, #1
 8007124:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007126:	4b77      	ldr	r3, [pc, #476]	@ (8007304 <HAL_RCC_OscConfig+0x474>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800712e:	2b00      	cmp	r3, #0
 8007130:	d118      	bne.n	8007164 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007132:	4b74      	ldr	r3, [pc, #464]	@ (8007304 <HAL_RCC_OscConfig+0x474>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a73      	ldr	r2, [pc, #460]	@ (8007304 <HAL_RCC_OscConfig+0x474>)
 8007138:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800713c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800713e:	f7fd fb49 	bl	80047d4 <HAL_GetTick>
 8007142:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007144:	e008      	b.n	8007158 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007146:	f7fd fb45 	bl	80047d4 <HAL_GetTick>
 800714a:	4602      	mov	r2, r0
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	1ad3      	subs	r3, r2, r3
 8007150:	2b02      	cmp	r3, #2
 8007152:	d901      	bls.n	8007158 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007154:	2303      	movs	r3, #3
 8007156:	e10c      	b.n	8007372 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007158:	4b6a      	ldr	r3, [pc, #424]	@ (8007304 <HAL_RCC_OscConfig+0x474>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007160:	2b00      	cmp	r3, #0
 8007162:	d0f0      	beq.n	8007146 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	2b01      	cmp	r3, #1
 800716a:	d106      	bne.n	800717a <HAL_RCC_OscConfig+0x2ea>
 800716c:	4b64      	ldr	r3, [pc, #400]	@ (8007300 <HAL_RCC_OscConfig+0x470>)
 800716e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007170:	4a63      	ldr	r2, [pc, #396]	@ (8007300 <HAL_RCC_OscConfig+0x470>)
 8007172:	f043 0301 	orr.w	r3, r3, #1
 8007176:	6713      	str	r3, [r2, #112]	@ 0x70
 8007178:	e01c      	b.n	80071b4 <HAL_RCC_OscConfig+0x324>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	2b05      	cmp	r3, #5
 8007180:	d10c      	bne.n	800719c <HAL_RCC_OscConfig+0x30c>
 8007182:	4b5f      	ldr	r3, [pc, #380]	@ (8007300 <HAL_RCC_OscConfig+0x470>)
 8007184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007186:	4a5e      	ldr	r2, [pc, #376]	@ (8007300 <HAL_RCC_OscConfig+0x470>)
 8007188:	f043 0304 	orr.w	r3, r3, #4
 800718c:	6713      	str	r3, [r2, #112]	@ 0x70
 800718e:	4b5c      	ldr	r3, [pc, #368]	@ (8007300 <HAL_RCC_OscConfig+0x470>)
 8007190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007192:	4a5b      	ldr	r2, [pc, #364]	@ (8007300 <HAL_RCC_OscConfig+0x470>)
 8007194:	f043 0301 	orr.w	r3, r3, #1
 8007198:	6713      	str	r3, [r2, #112]	@ 0x70
 800719a:	e00b      	b.n	80071b4 <HAL_RCC_OscConfig+0x324>
 800719c:	4b58      	ldr	r3, [pc, #352]	@ (8007300 <HAL_RCC_OscConfig+0x470>)
 800719e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071a0:	4a57      	ldr	r2, [pc, #348]	@ (8007300 <HAL_RCC_OscConfig+0x470>)
 80071a2:	f023 0301 	bic.w	r3, r3, #1
 80071a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80071a8:	4b55      	ldr	r3, [pc, #340]	@ (8007300 <HAL_RCC_OscConfig+0x470>)
 80071aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071ac:	4a54      	ldr	r2, [pc, #336]	@ (8007300 <HAL_RCC_OscConfig+0x470>)
 80071ae:	f023 0304 	bic.w	r3, r3, #4
 80071b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d015      	beq.n	80071e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071bc:	f7fd fb0a 	bl	80047d4 <HAL_GetTick>
 80071c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071c2:	e00a      	b.n	80071da <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071c4:	f7fd fb06 	bl	80047d4 <HAL_GetTick>
 80071c8:	4602      	mov	r2, r0
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	1ad3      	subs	r3, r2, r3
 80071ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d901      	bls.n	80071da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	e0cb      	b.n	8007372 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071da:	4b49      	ldr	r3, [pc, #292]	@ (8007300 <HAL_RCC_OscConfig+0x470>)
 80071dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071de:	f003 0302 	and.w	r3, r3, #2
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d0ee      	beq.n	80071c4 <HAL_RCC_OscConfig+0x334>
 80071e6:	e014      	b.n	8007212 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071e8:	f7fd faf4 	bl	80047d4 <HAL_GetTick>
 80071ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071ee:	e00a      	b.n	8007206 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071f0:	f7fd faf0 	bl	80047d4 <HAL_GetTick>
 80071f4:	4602      	mov	r2, r0
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	1ad3      	subs	r3, r2, r3
 80071fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071fe:	4293      	cmp	r3, r2
 8007200:	d901      	bls.n	8007206 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007202:	2303      	movs	r3, #3
 8007204:	e0b5      	b.n	8007372 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007206:	4b3e      	ldr	r3, [pc, #248]	@ (8007300 <HAL_RCC_OscConfig+0x470>)
 8007208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800720a:	f003 0302 	and.w	r3, r3, #2
 800720e:	2b00      	cmp	r3, #0
 8007210:	d1ee      	bne.n	80071f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007212:	7dfb      	ldrb	r3, [r7, #23]
 8007214:	2b01      	cmp	r3, #1
 8007216:	d105      	bne.n	8007224 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007218:	4b39      	ldr	r3, [pc, #228]	@ (8007300 <HAL_RCC_OscConfig+0x470>)
 800721a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800721c:	4a38      	ldr	r2, [pc, #224]	@ (8007300 <HAL_RCC_OscConfig+0x470>)
 800721e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007222:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	2b00      	cmp	r3, #0
 800722a:	f000 80a1 	beq.w	8007370 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800722e:	4b34      	ldr	r3, [pc, #208]	@ (8007300 <HAL_RCC_OscConfig+0x470>)
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	f003 030c 	and.w	r3, r3, #12
 8007236:	2b08      	cmp	r3, #8
 8007238:	d05c      	beq.n	80072f4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	699b      	ldr	r3, [r3, #24]
 800723e:	2b02      	cmp	r3, #2
 8007240:	d141      	bne.n	80072c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007242:	4b31      	ldr	r3, [pc, #196]	@ (8007308 <HAL_RCC_OscConfig+0x478>)
 8007244:	2200      	movs	r2, #0
 8007246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007248:	f7fd fac4 	bl	80047d4 <HAL_GetTick>
 800724c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800724e:	e008      	b.n	8007262 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007250:	f7fd fac0 	bl	80047d4 <HAL_GetTick>
 8007254:	4602      	mov	r2, r0
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	2b02      	cmp	r3, #2
 800725c:	d901      	bls.n	8007262 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	e087      	b.n	8007372 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007262:	4b27      	ldr	r3, [pc, #156]	@ (8007300 <HAL_RCC_OscConfig+0x470>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1f0      	bne.n	8007250 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	69da      	ldr	r2, [r3, #28]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a1b      	ldr	r3, [r3, #32]
 8007276:	431a      	orrs	r2, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800727c:	019b      	lsls	r3, r3, #6
 800727e:	431a      	orrs	r2, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007284:	085b      	lsrs	r3, r3, #1
 8007286:	3b01      	subs	r3, #1
 8007288:	041b      	lsls	r3, r3, #16
 800728a:	431a      	orrs	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007290:	061b      	lsls	r3, r3, #24
 8007292:	491b      	ldr	r1, [pc, #108]	@ (8007300 <HAL_RCC_OscConfig+0x470>)
 8007294:	4313      	orrs	r3, r2
 8007296:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007298:	4b1b      	ldr	r3, [pc, #108]	@ (8007308 <HAL_RCC_OscConfig+0x478>)
 800729a:	2201      	movs	r2, #1
 800729c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800729e:	f7fd fa99 	bl	80047d4 <HAL_GetTick>
 80072a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072a4:	e008      	b.n	80072b8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072a6:	f7fd fa95 	bl	80047d4 <HAL_GetTick>
 80072aa:	4602      	mov	r2, r0
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d901      	bls.n	80072b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80072b4:	2303      	movs	r3, #3
 80072b6:	e05c      	b.n	8007372 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072b8:	4b11      	ldr	r3, [pc, #68]	@ (8007300 <HAL_RCC_OscConfig+0x470>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d0f0      	beq.n	80072a6 <HAL_RCC_OscConfig+0x416>
 80072c4:	e054      	b.n	8007370 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072c6:	4b10      	ldr	r3, [pc, #64]	@ (8007308 <HAL_RCC_OscConfig+0x478>)
 80072c8:	2200      	movs	r2, #0
 80072ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072cc:	f7fd fa82 	bl	80047d4 <HAL_GetTick>
 80072d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072d2:	e008      	b.n	80072e6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072d4:	f7fd fa7e 	bl	80047d4 <HAL_GetTick>
 80072d8:	4602      	mov	r2, r0
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	1ad3      	subs	r3, r2, r3
 80072de:	2b02      	cmp	r3, #2
 80072e0:	d901      	bls.n	80072e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80072e2:	2303      	movs	r3, #3
 80072e4:	e045      	b.n	8007372 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072e6:	4b06      	ldr	r3, [pc, #24]	@ (8007300 <HAL_RCC_OscConfig+0x470>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1f0      	bne.n	80072d4 <HAL_RCC_OscConfig+0x444>
 80072f2:	e03d      	b.n	8007370 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	699b      	ldr	r3, [r3, #24]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d107      	bne.n	800730c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	e038      	b.n	8007372 <HAL_RCC_OscConfig+0x4e2>
 8007300:	40023800 	.word	0x40023800
 8007304:	40007000 	.word	0x40007000
 8007308:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800730c:	4b1b      	ldr	r3, [pc, #108]	@ (800737c <HAL_RCC_OscConfig+0x4ec>)
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	699b      	ldr	r3, [r3, #24]
 8007316:	2b01      	cmp	r3, #1
 8007318:	d028      	beq.n	800736c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007324:	429a      	cmp	r2, r3
 8007326:	d121      	bne.n	800736c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007332:	429a      	cmp	r2, r3
 8007334:	d11a      	bne.n	800736c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800733c:	4013      	ands	r3, r2
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007342:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007344:	4293      	cmp	r3, r2
 8007346:	d111      	bne.n	800736c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007352:	085b      	lsrs	r3, r3, #1
 8007354:	3b01      	subs	r3, #1
 8007356:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007358:	429a      	cmp	r2, r3
 800735a:	d107      	bne.n	800736c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007366:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007368:	429a      	cmp	r2, r3
 800736a:	d001      	beq.n	8007370 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	e000      	b.n	8007372 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3718      	adds	r7, #24
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	40023800 	.word	0x40023800

08007380 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d101      	bne.n	8007394 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	e0cc      	b.n	800752e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007394:	4b68      	ldr	r3, [pc, #416]	@ (8007538 <HAL_RCC_ClockConfig+0x1b8>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 0307 	and.w	r3, r3, #7
 800739c:	683a      	ldr	r2, [r7, #0]
 800739e:	429a      	cmp	r2, r3
 80073a0:	d90c      	bls.n	80073bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073a2:	4b65      	ldr	r3, [pc, #404]	@ (8007538 <HAL_RCC_ClockConfig+0x1b8>)
 80073a4:	683a      	ldr	r2, [r7, #0]
 80073a6:	b2d2      	uxtb	r2, r2
 80073a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073aa:	4b63      	ldr	r3, [pc, #396]	@ (8007538 <HAL_RCC_ClockConfig+0x1b8>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 0307 	and.w	r3, r3, #7
 80073b2:	683a      	ldr	r2, [r7, #0]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d001      	beq.n	80073bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	e0b8      	b.n	800752e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 0302 	and.w	r3, r3, #2
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d020      	beq.n	800740a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 0304 	and.w	r3, r3, #4
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d005      	beq.n	80073e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80073d4:	4b59      	ldr	r3, [pc, #356]	@ (800753c <HAL_RCC_ClockConfig+0x1bc>)
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	4a58      	ldr	r2, [pc, #352]	@ (800753c <HAL_RCC_ClockConfig+0x1bc>)
 80073da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80073de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f003 0308 	and.w	r3, r3, #8
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d005      	beq.n	80073f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80073ec:	4b53      	ldr	r3, [pc, #332]	@ (800753c <HAL_RCC_ClockConfig+0x1bc>)
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	4a52      	ldr	r2, [pc, #328]	@ (800753c <HAL_RCC_ClockConfig+0x1bc>)
 80073f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80073f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073f8:	4b50      	ldr	r3, [pc, #320]	@ (800753c <HAL_RCC_ClockConfig+0x1bc>)
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	494d      	ldr	r1, [pc, #308]	@ (800753c <HAL_RCC_ClockConfig+0x1bc>)
 8007406:	4313      	orrs	r3, r2
 8007408:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f003 0301 	and.w	r3, r3, #1
 8007412:	2b00      	cmp	r3, #0
 8007414:	d044      	beq.n	80074a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	2b01      	cmp	r3, #1
 800741c:	d107      	bne.n	800742e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800741e:	4b47      	ldr	r3, [pc, #284]	@ (800753c <HAL_RCC_ClockConfig+0x1bc>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007426:	2b00      	cmp	r3, #0
 8007428:	d119      	bne.n	800745e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	e07f      	b.n	800752e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	2b02      	cmp	r3, #2
 8007434:	d003      	beq.n	800743e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800743a:	2b03      	cmp	r3, #3
 800743c:	d107      	bne.n	800744e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800743e:	4b3f      	ldr	r3, [pc, #252]	@ (800753c <HAL_RCC_ClockConfig+0x1bc>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007446:	2b00      	cmp	r3, #0
 8007448:	d109      	bne.n	800745e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	e06f      	b.n	800752e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800744e:	4b3b      	ldr	r3, [pc, #236]	@ (800753c <HAL_RCC_ClockConfig+0x1bc>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f003 0302 	and.w	r3, r3, #2
 8007456:	2b00      	cmp	r3, #0
 8007458:	d101      	bne.n	800745e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	e067      	b.n	800752e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800745e:	4b37      	ldr	r3, [pc, #220]	@ (800753c <HAL_RCC_ClockConfig+0x1bc>)
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	f023 0203 	bic.w	r2, r3, #3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	4934      	ldr	r1, [pc, #208]	@ (800753c <HAL_RCC_ClockConfig+0x1bc>)
 800746c:	4313      	orrs	r3, r2
 800746e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007470:	f7fd f9b0 	bl	80047d4 <HAL_GetTick>
 8007474:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007476:	e00a      	b.n	800748e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007478:	f7fd f9ac 	bl	80047d4 <HAL_GetTick>
 800747c:	4602      	mov	r2, r0
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	1ad3      	subs	r3, r2, r3
 8007482:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007486:	4293      	cmp	r3, r2
 8007488:	d901      	bls.n	800748e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800748a:	2303      	movs	r3, #3
 800748c:	e04f      	b.n	800752e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800748e:	4b2b      	ldr	r3, [pc, #172]	@ (800753c <HAL_RCC_ClockConfig+0x1bc>)
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	f003 020c 	and.w	r2, r3, #12
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	429a      	cmp	r2, r3
 800749e:	d1eb      	bne.n	8007478 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80074a0:	4b25      	ldr	r3, [pc, #148]	@ (8007538 <HAL_RCC_ClockConfig+0x1b8>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 0307 	and.w	r3, r3, #7
 80074a8:	683a      	ldr	r2, [r7, #0]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d20c      	bcs.n	80074c8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074ae:	4b22      	ldr	r3, [pc, #136]	@ (8007538 <HAL_RCC_ClockConfig+0x1b8>)
 80074b0:	683a      	ldr	r2, [r7, #0]
 80074b2:	b2d2      	uxtb	r2, r2
 80074b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074b6:	4b20      	ldr	r3, [pc, #128]	@ (8007538 <HAL_RCC_ClockConfig+0x1b8>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 0307 	and.w	r3, r3, #7
 80074be:	683a      	ldr	r2, [r7, #0]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d001      	beq.n	80074c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e032      	b.n	800752e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f003 0304 	and.w	r3, r3, #4
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d008      	beq.n	80074e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80074d4:	4b19      	ldr	r3, [pc, #100]	@ (800753c <HAL_RCC_ClockConfig+0x1bc>)
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	4916      	ldr	r1, [pc, #88]	@ (800753c <HAL_RCC_ClockConfig+0x1bc>)
 80074e2:	4313      	orrs	r3, r2
 80074e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 0308 	and.w	r3, r3, #8
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d009      	beq.n	8007506 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80074f2:	4b12      	ldr	r3, [pc, #72]	@ (800753c <HAL_RCC_ClockConfig+0x1bc>)
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	00db      	lsls	r3, r3, #3
 8007500:	490e      	ldr	r1, [pc, #56]	@ (800753c <HAL_RCC_ClockConfig+0x1bc>)
 8007502:	4313      	orrs	r3, r2
 8007504:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007506:	f000 f821 	bl	800754c <HAL_RCC_GetSysClockFreq>
 800750a:	4602      	mov	r2, r0
 800750c:	4b0b      	ldr	r3, [pc, #44]	@ (800753c <HAL_RCC_ClockConfig+0x1bc>)
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	091b      	lsrs	r3, r3, #4
 8007512:	f003 030f 	and.w	r3, r3, #15
 8007516:	490a      	ldr	r1, [pc, #40]	@ (8007540 <HAL_RCC_ClockConfig+0x1c0>)
 8007518:	5ccb      	ldrb	r3, [r1, r3]
 800751a:	fa22 f303 	lsr.w	r3, r2, r3
 800751e:	4a09      	ldr	r2, [pc, #36]	@ (8007544 <HAL_RCC_ClockConfig+0x1c4>)
 8007520:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007522:	4b09      	ldr	r3, [pc, #36]	@ (8007548 <HAL_RCC_ClockConfig+0x1c8>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4618      	mov	r0, r3
 8007528:	f7fc faba 	bl	8003aa0 <HAL_InitTick>

  return HAL_OK;
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	40023c00 	.word	0x40023c00
 800753c:	40023800 	.word	0x40023800
 8007540:	0801188c 	.word	0x0801188c
 8007544:	200000e0 	.word	0x200000e0
 8007548:	200000e4 	.word	0x200000e4

0800754c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800754c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007550:	b090      	sub	sp, #64	@ 0x40
 8007552:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007554:	2300      	movs	r3, #0
 8007556:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8007558:	2300      	movs	r3, #0
 800755a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800755c:	2300      	movs	r3, #0
 800755e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007560:	2300      	movs	r3, #0
 8007562:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007564:	4b59      	ldr	r3, [pc, #356]	@ (80076cc <HAL_RCC_GetSysClockFreq+0x180>)
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	f003 030c 	and.w	r3, r3, #12
 800756c:	2b08      	cmp	r3, #8
 800756e:	d00d      	beq.n	800758c <HAL_RCC_GetSysClockFreq+0x40>
 8007570:	2b08      	cmp	r3, #8
 8007572:	f200 80a1 	bhi.w	80076b8 <HAL_RCC_GetSysClockFreq+0x16c>
 8007576:	2b00      	cmp	r3, #0
 8007578:	d002      	beq.n	8007580 <HAL_RCC_GetSysClockFreq+0x34>
 800757a:	2b04      	cmp	r3, #4
 800757c:	d003      	beq.n	8007586 <HAL_RCC_GetSysClockFreq+0x3a>
 800757e:	e09b      	b.n	80076b8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007580:	4b53      	ldr	r3, [pc, #332]	@ (80076d0 <HAL_RCC_GetSysClockFreq+0x184>)
 8007582:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007584:	e09b      	b.n	80076be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007586:	4b53      	ldr	r3, [pc, #332]	@ (80076d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007588:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800758a:	e098      	b.n	80076be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800758c:	4b4f      	ldr	r3, [pc, #316]	@ (80076cc <HAL_RCC_GetSysClockFreq+0x180>)
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007594:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007596:	4b4d      	ldr	r3, [pc, #308]	@ (80076cc <HAL_RCC_GetSysClockFreq+0x180>)
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d028      	beq.n	80075f4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075a2:	4b4a      	ldr	r3, [pc, #296]	@ (80076cc <HAL_RCC_GetSysClockFreq+0x180>)
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	099b      	lsrs	r3, r3, #6
 80075a8:	2200      	movs	r2, #0
 80075aa:	623b      	str	r3, [r7, #32]
 80075ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80075ae:	6a3b      	ldr	r3, [r7, #32]
 80075b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80075b4:	2100      	movs	r1, #0
 80075b6:	4b47      	ldr	r3, [pc, #284]	@ (80076d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80075b8:	fb03 f201 	mul.w	r2, r3, r1
 80075bc:	2300      	movs	r3, #0
 80075be:	fb00 f303 	mul.w	r3, r0, r3
 80075c2:	4413      	add	r3, r2
 80075c4:	4a43      	ldr	r2, [pc, #268]	@ (80076d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80075c6:	fba0 1202 	umull	r1, r2, r0, r2
 80075ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80075cc:	460a      	mov	r2, r1
 80075ce:	62ba      	str	r2, [r7, #40]	@ 0x28
 80075d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075d2:	4413      	add	r3, r2
 80075d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075d8:	2200      	movs	r2, #0
 80075da:	61bb      	str	r3, [r7, #24]
 80075dc:	61fa      	str	r2, [r7, #28]
 80075de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80075e6:	f7f9 fb57 	bl	8000c98 <__aeabi_uldivmod>
 80075ea:	4602      	mov	r2, r0
 80075ec:	460b      	mov	r3, r1
 80075ee:	4613      	mov	r3, r2
 80075f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075f2:	e053      	b.n	800769c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075f4:	4b35      	ldr	r3, [pc, #212]	@ (80076cc <HAL_RCC_GetSysClockFreq+0x180>)
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	099b      	lsrs	r3, r3, #6
 80075fa:	2200      	movs	r2, #0
 80075fc:	613b      	str	r3, [r7, #16]
 80075fe:	617a      	str	r2, [r7, #20]
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007606:	f04f 0b00 	mov.w	fp, #0
 800760a:	4652      	mov	r2, sl
 800760c:	465b      	mov	r3, fp
 800760e:	f04f 0000 	mov.w	r0, #0
 8007612:	f04f 0100 	mov.w	r1, #0
 8007616:	0159      	lsls	r1, r3, #5
 8007618:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800761c:	0150      	lsls	r0, r2, #5
 800761e:	4602      	mov	r2, r0
 8007620:	460b      	mov	r3, r1
 8007622:	ebb2 080a 	subs.w	r8, r2, sl
 8007626:	eb63 090b 	sbc.w	r9, r3, fp
 800762a:	f04f 0200 	mov.w	r2, #0
 800762e:	f04f 0300 	mov.w	r3, #0
 8007632:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007636:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800763a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800763e:	ebb2 0408 	subs.w	r4, r2, r8
 8007642:	eb63 0509 	sbc.w	r5, r3, r9
 8007646:	f04f 0200 	mov.w	r2, #0
 800764a:	f04f 0300 	mov.w	r3, #0
 800764e:	00eb      	lsls	r3, r5, #3
 8007650:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007654:	00e2      	lsls	r2, r4, #3
 8007656:	4614      	mov	r4, r2
 8007658:	461d      	mov	r5, r3
 800765a:	eb14 030a 	adds.w	r3, r4, sl
 800765e:	603b      	str	r3, [r7, #0]
 8007660:	eb45 030b 	adc.w	r3, r5, fp
 8007664:	607b      	str	r3, [r7, #4]
 8007666:	f04f 0200 	mov.w	r2, #0
 800766a:	f04f 0300 	mov.w	r3, #0
 800766e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007672:	4629      	mov	r1, r5
 8007674:	028b      	lsls	r3, r1, #10
 8007676:	4621      	mov	r1, r4
 8007678:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800767c:	4621      	mov	r1, r4
 800767e:	028a      	lsls	r2, r1, #10
 8007680:	4610      	mov	r0, r2
 8007682:	4619      	mov	r1, r3
 8007684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007686:	2200      	movs	r2, #0
 8007688:	60bb      	str	r3, [r7, #8]
 800768a:	60fa      	str	r2, [r7, #12]
 800768c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007690:	f7f9 fb02 	bl	8000c98 <__aeabi_uldivmod>
 8007694:	4602      	mov	r2, r0
 8007696:	460b      	mov	r3, r1
 8007698:	4613      	mov	r3, r2
 800769a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800769c:	4b0b      	ldr	r3, [pc, #44]	@ (80076cc <HAL_RCC_GetSysClockFreq+0x180>)
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	0c1b      	lsrs	r3, r3, #16
 80076a2:	f003 0303 	and.w	r3, r3, #3
 80076a6:	3301      	adds	r3, #1
 80076a8:	005b      	lsls	r3, r3, #1
 80076aa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80076ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80076ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80076b4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80076b6:	e002      	b.n	80076be <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80076b8:	4b05      	ldr	r3, [pc, #20]	@ (80076d0 <HAL_RCC_GetSysClockFreq+0x184>)
 80076ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80076bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80076be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3740      	adds	r7, #64	@ 0x40
 80076c4:	46bd      	mov	sp, r7
 80076c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076ca:	bf00      	nop
 80076cc:	40023800 	.word	0x40023800
 80076d0:	00f42400 	.word	0x00f42400
 80076d4:	017d7840 	.word	0x017d7840

080076d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076d8:	b480      	push	{r7}
 80076da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80076dc:	4b03      	ldr	r3, [pc, #12]	@ (80076ec <HAL_RCC_GetHCLKFreq+0x14>)
 80076de:	681b      	ldr	r3, [r3, #0]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	200000e0 	.word	0x200000e0

080076f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80076f4:	f7ff fff0 	bl	80076d8 <HAL_RCC_GetHCLKFreq>
 80076f8:	4602      	mov	r2, r0
 80076fa:	4b05      	ldr	r3, [pc, #20]	@ (8007710 <HAL_RCC_GetPCLK1Freq+0x20>)
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	0a9b      	lsrs	r3, r3, #10
 8007700:	f003 0307 	and.w	r3, r3, #7
 8007704:	4903      	ldr	r1, [pc, #12]	@ (8007714 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007706:	5ccb      	ldrb	r3, [r1, r3]
 8007708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800770c:	4618      	mov	r0, r3
 800770e:	bd80      	pop	{r7, pc}
 8007710:	40023800 	.word	0x40023800
 8007714:	0801189c 	.word	0x0801189c

08007718 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800771c:	f7ff ffdc 	bl	80076d8 <HAL_RCC_GetHCLKFreq>
 8007720:	4602      	mov	r2, r0
 8007722:	4b05      	ldr	r3, [pc, #20]	@ (8007738 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	0b5b      	lsrs	r3, r3, #13
 8007728:	f003 0307 	and.w	r3, r3, #7
 800772c:	4903      	ldr	r1, [pc, #12]	@ (800773c <HAL_RCC_GetPCLK2Freq+0x24>)
 800772e:	5ccb      	ldrb	r3, [r1, r3]
 8007730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007734:	4618      	mov	r0, r3
 8007736:	bd80      	pop	{r7, pc}
 8007738:	40023800 	.word	0x40023800
 800773c:	0801189c 	.word	0x0801189c

08007740 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	220f      	movs	r2, #15
 800774e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007750:	4b12      	ldr	r3, [pc, #72]	@ (800779c <HAL_RCC_GetClockConfig+0x5c>)
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	f003 0203 	and.w	r2, r3, #3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800775c:	4b0f      	ldr	r3, [pc, #60]	@ (800779c <HAL_RCC_GetClockConfig+0x5c>)
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007768:	4b0c      	ldr	r3, [pc, #48]	@ (800779c <HAL_RCC_GetClockConfig+0x5c>)
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007774:	4b09      	ldr	r3, [pc, #36]	@ (800779c <HAL_RCC_GetClockConfig+0x5c>)
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	08db      	lsrs	r3, r3, #3
 800777a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007782:	4b07      	ldr	r3, [pc, #28]	@ (80077a0 <HAL_RCC_GetClockConfig+0x60>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 0207 	and.w	r2, r3, #7
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	601a      	str	r2, [r3, #0]
}
 800778e:	bf00      	nop
 8007790:	370c      	adds	r7, #12
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	40023800 	.word	0x40023800
 80077a0:	40023c00 	.word	0x40023c00

080077a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d101      	bne.n	80077b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	e041      	b.n	800783a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d106      	bne.n	80077d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f7fc fe12 	bl	80043f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2202      	movs	r2, #2
 80077d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	3304      	adds	r3, #4
 80077e0:	4619      	mov	r1, r3
 80077e2:	4610      	mov	r0, r2
 80077e4:	f000 fe7c 	bl	80084e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007838:	2300      	movs	r3, #0
}
 800783a:	4618      	mov	r0, r3
 800783c:	3708      	adds	r7, #8
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
	...

08007844 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007852:	b2db      	uxtb	r3, r3
 8007854:	2b01      	cmp	r3, #1
 8007856:	d001      	beq.n	800785c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e044      	b.n	80078e6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2202      	movs	r2, #2
 8007860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	68da      	ldr	r2, [r3, #12]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f042 0201 	orr.w	r2, r2, #1
 8007872:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a1e      	ldr	r2, [pc, #120]	@ (80078f4 <HAL_TIM_Base_Start_IT+0xb0>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d018      	beq.n	80078b0 <HAL_TIM_Base_Start_IT+0x6c>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007886:	d013      	beq.n	80078b0 <HAL_TIM_Base_Start_IT+0x6c>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a1a      	ldr	r2, [pc, #104]	@ (80078f8 <HAL_TIM_Base_Start_IT+0xb4>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d00e      	beq.n	80078b0 <HAL_TIM_Base_Start_IT+0x6c>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a19      	ldr	r2, [pc, #100]	@ (80078fc <HAL_TIM_Base_Start_IT+0xb8>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d009      	beq.n	80078b0 <HAL_TIM_Base_Start_IT+0x6c>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a17      	ldr	r2, [pc, #92]	@ (8007900 <HAL_TIM_Base_Start_IT+0xbc>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d004      	beq.n	80078b0 <HAL_TIM_Base_Start_IT+0x6c>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a16      	ldr	r2, [pc, #88]	@ (8007904 <HAL_TIM_Base_Start_IT+0xc0>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d111      	bne.n	80078d4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	f003 0307 	and.w	r3, r3, #7
 80078ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2b06      	cmp	r3, #6
 80078c0:	d010      	beq.n	80078e4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f042 0201 	orr.w	r2, r2, #1
 80078d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078d2:	e007      	b.n	80078e4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f042 0201 	orr.w	r2, r2, #1
 80078e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3714      	adds	r7, #20
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	40010000 	.word	0x40010000
 80078f8:	40000400 	.word	0x40000400
 80078fc:	40000800 	.word	0x40000800
 8007900:	40000c00 	.word	0x40000c00
 8007904:	40014000 	.word	0x40014000

08007908 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d101      	bne.n	800791a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e041      	b.n	800799e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007920:	b2db      	uxtb	r3, r3
 8007922:	2b00      	cmp	r3, #0
 8007924:	d106      	bne.n	8007934 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f7fc fdee 	bl	8004510 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2202      	movs	r2, #2
 8007938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	3304      	adds	r3, #4
 8007944:	4619      	mov	r1, r3
 8007946:	4610      	mov	r0, r2
 8007948:	f000 fdca 	bl	80084e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800799c:	2300      	movs	r3, #0
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3708      	adds	r7, #8
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
	...

080079a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d109      	bne.n	80079cc <HAL_TIM_PWM_Start+0x24>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	bf14      	ite	ne
 80079c4:	2301      	movne	r3, #1
 80079c6:	2300      	moveq	r3, #0
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	e022      	b.n	8007a12 <HAL_TIM_PWM_Start+0x6a>
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	2b04      	cmp	r3, #4
 80079d0:	d109      	bne.n	80079e6 <HAL_TIM_PWM_Start+0x3e>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	2b01      	cmp	r3, #1
 80079dc:	bf14      	ite	ne
 80079de:	2301      	movne	r3, #1
 80079e0:	2300      	moveq	r3, #0
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	e015      	b.n	8007a12 <HAL_TIM_PWM_Start+0x6a>
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	2b08      	cmp	r3, #8
 80079ea:	d109      	bne.n	8007a00 <HAL_TIM_PWM_Start+0x58>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	bf14      	ite	ne
 80079f8:	2301      	movne	r3, #1
 80079fa:	2300      	moveq	r3, #0
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	e008      	b.n	8007a12 <HAL_TIM_PWM_Start+0x6a>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	bf14      	ite	ne
 8007a0c:	2301      	movne	r3, #1
 8007a0e:	2300      	moveq	r3, #0
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d001      	beq.n	8007a1a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	e068      	b.n	8007aec <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d104      	bne.n	8007a2a <HAL_TIM_PWM_Start+0x82>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2202      	movs	r2, #2
 8007a24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a28:	e013      	b.n	8007a52 <HAL_TIM_PWM_Start+0xaa>
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	2b04      	cmp	r3, #4
 8007a2e:	d104      	bne.n	8007a3a <HAL_TIM_PWM_Start+0x92>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2202      	movs	r2, #2
 8007a34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a38:	e00b      	b.n	8007a52 <HAL_TIM_PWM_Start+0xaa>
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	2b08      	cmp	r3, #8
 8007a3e:	d104      	bne.n	8007a4a <HAL_TIM_PWM_Start+0xa2>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2202      	movs	r2, #2
 8007a44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a48:	e003      	b.n	8007a52 <HAL_TIM_PWM_Start+0xaa>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2202      	movs	r2, #2
 8007a4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2201      	movs	r2, #1
 8007a58:	6839      	ldr	r1, [r7, #0]
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f001 f910 	bl	8008c80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a23      	ldr	r2, [pc, #140]	@ (8007af4 <HAL_TIM_PWM_Start+0x14c>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d107      	bne.n	8007a7a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007a78:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a1d      	ldr	r2, [pc, #116]	@ (8007af4 <HAL_TIM_PWM_Start+0x14c>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d018      	beq.n	8007ab6 <HAL_TIM_PWM_Start+0x10e>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a8c:	d013      	beq.n	8007ab6 <HAL_TIM_PWM_Start+0x10e>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a19      	ldr	r2, [pc, #100]	@ (8007af8 <HAL_TIM_PWM_Start+0x150>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d00e      	beq.n	8007ab6 <HAL_TIM_PWM_Start+0x10e>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a17      	ldr	r2, [pc, #92]	@ (8007afc <HAL_TIM_PWM_Start+0x154>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d009      	beq.n	8007ab6 <HAL_TIM_PWM_Start+0x10e>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a16      	ldr	r2, [pc, #88]	@ (8007b00 <HAL_TIM_PWM_Start+0x158>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d004      	beq.n	8007ab6 <HAL_TIM_PWM_Start+0x10e>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a14      	ldr	r2, [pc, #80]	@ (8007b04 <HAL_TIM_PWM_Start+0x15c>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d111      	bne.n	8007ada <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	f003 0307 	and.w	r3, r3, #7
 8007ac0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2b06      	cmp	r3, #6
 8007ac6:	d010      	beq.n	8007aea <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f042 0201 	orr.w	r2, r2, #1
 8007ad6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ad8:	e007      	b.n	8007aea <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f042 0201 	orr.w	r2, r2, #1
 8007ae8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007aea:	2300      	movs	r3, #0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3710      	adds	r7, #16
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	40010000 	.word	0x40010000
 8007af8:	40000400 	.word	0x40000400
 8007afc:	40000800 	.word	0x40000800
 8007b00:	40000c00 	.word	0x40000c00
 8007b04:	40014000 	.word	0x40014000

08007b08 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d101      	bne.n	8007b1a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e041      	b.n	8007b9e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d106      	bne.n	8007b34 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f839 	bl	8007ba6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2202      	movs	r2, #2
 8007b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	3304      	adds	r3, #4
 8007b44:	4619      	mov	r1, r3
 8007b46:	4610      	mov	r0, r2
 8007b48:	f000 fcca 	bl	80084e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3708      	adds	r7, #8
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007ba6:	b480      	push	{r7}
 8007ba8:	b083      	sub	sp, #12
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007bae:	bf00      	nop
 8007bb0:	370c      	adds	r7, #12
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr
	...

08007bbc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d104      	bne.n	8007bda <HAL_TIM_IC_Start_IT+0x1e>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	e013      	b.n	8007c02 <HAL_TIM_IC_Start_IT+0x46>
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	2b04      	cmp	r3, #4
 8007bde:	d104      	bne.n	8007bea <HAL_TIM_IC_Start_IT+0x2e>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	e00b      	b.n	8007c02 <HAL_TIM_IC_Start_IT+0x46>
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	2b08      	cmp	r3, #8
 8007bee:	d104      	bne.n	8007bfa <HAL_TIM_IC_Start_IT+0x3e>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	e003      	b.n	8007c02 <HAL_TIM_IC_Start_IT+0x46>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d104      	bne.n	8007c14 <HAL_TIM_IC_Start_IT+0x58>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	e013      	b.n	8007c3c <HAL_TIM_IC_Start_IT+0x80>
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	2b04      	cmp	r3, #4
 8007c18:	d104      	bne.n	8007c24 <HAL_TIM_IC_Start_IT+0x68>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	e00b      	b.n	8007c3c <HAL_TIM_IC_Start_IT+0x80>
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	2b08      	cmp	r3, #8
 8007c28:	d104      	bne.n	8007c34 <HAL_TIM_IC_Start_IT+0x78>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	e003      	b.n	8007c3c <HAL_TIM_IC_Start_IT+0x80>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c3e:	7bbb      	ldrb	r3, [r7, #14]
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d102      	bne.n	8007c4a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007c44:	7b7b      	ldrb	r3, [r7, #13]
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d001      	beq.n	8007c4e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e0c2      	b.n	8007dd4 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d104      	bne.n	8007c5e <HAL_TIM_IC_Start_IT+0xa2>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2202      	movs	r2, #2
 8007c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c5c:	e013      	b.n	8007c86 <HAL_TIM_IC_Start_IT+0xca>
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	2b04      	cmp	r3, #4
 8007c62:	d104      	bne.n	8007c6e <HAL_TIM_IC_Start_IT+0xb2>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2202      	movs	r2, #2
 8007c68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c6c:	e00b      	b.n	8007c86 <HAL_TIM_IC_Start_IT+0xca>
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	2b08      	cmp	r3, #8
 8007c72:	d104      	bne.n	8007c7e <HAL_TIM_IC_Start_IT+0xc2>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2202      	movs	r2, #2
 8007c78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c7c:	e003      	b.n	8007c86 <HAL_TIM_IC_Start_IT+0xca>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2202      	movs	r2, #2
 8007c82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d104      	bne.n	8007c96 <HAL_TIM_IC_Start_IT+0xda>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2202      	movs	r2, #2
 8007c90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c94:	e013      	b.n	8007cbe <HAL_TIM_IC_Start_IT+0x102>
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	2b04      	cmp	r3, #4
 8007c9a:	d104      	bne.n	8007ca6 <HAL_TIM_IC_Start_IT+0xea>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2202      	movs	r2, #2
 8007ca0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007ca4:	e00b      	b.n	8007cbe <HAL_TIM_IC_Start_IT+0x102>
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	2b08      	cmp	r3, #8
 8007caa:	d104      	bne.n	8007cb6 <HAL_TIM_IC_Start_IT+0xfa>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2202      	movs	r2, #2
 8007cb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007cb4:	e003      	b.n	8007cbe <HAL_TIM_IC_Start_IT+0x102>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2202      	movs	r2, #2
 8007cba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	2b0c      	cmp	r3, #12
 8007cc2:	d841      	bhi.n	8007d48 <HAL_TIM_IC_Start_IT+0x18c>
 8007cc4:	a201      	add	r2, pc, #4	@ (adr r2, 8007ccc <HAL_TIM_IC_Start_IT+0x110>)
 8007cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cca:	bf00      	nop
 8007ccc:	08007d01 	.word	0x08007d01
 8007cd0:	08007d49 	.word	0x08007d49
 8007cd4:	08007d49 	.word	0x08007d49
 8007cd8:	08007d49 	.word	0x08007d49
 8007cdc:	08007d13 	.word	0x08007d13
 8007ce0:	08007d49 	.word	0x08007d49
 8007ce4:	08007d49 	.word	0x08007d49
 8007ce8:	08007d49 	.word	0x08007d49
 8007cec:	08007d25 	.word	0x08007d25
 8007cf0:	08007d49 	.word	0x08007d49
 8007cf4:	08007d49 	.word	0x08007d49
 8007cf8:	08007d49 	.word	0x08007d49
 8007cfc:	08007d37 	.word	0x08007d37
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	68da      	ldr	r2, [r3, #12]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f042 0202 	orr.w	r2, r2, #2
 8007d0e:	60da      	str	r2, [r3, #12]
      break;
 8007d10:	e01d      	b.n	8007d4e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	68da      	ldr	r2, [r3, #12]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f042 0204 	orr.w	r2, r2, #4
 8007d20:	60da      	str	r2, [r3, #12]
      break;
 8007d22:	e014      	b.n	8007d4e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	68da      	ldr	r2, [r3, #12]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f042 0208 	orr.w	r2, r2, #8
 8007d32:	60da      	str	r2, [r3, #12]
      break;
 8007d34:	e00b      	b.n	8007d4e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	68da      	ldr	r2, [r3, #12]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f042 0210 	orr.w	r2, r2, #16
 8007d44:	60da      	str	r2, [r3, #12]
      break;
 8007d46:	e002      	b.n	8007d4e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8007d4c:	bf00      	nop
  }

  if (status == HAL_OK)
 8007d4e:	7bfb      	ldrb	r3, [r7, #15]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d13e      	bne.n	8007dd2 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	6839      	ldr	r1, [r7, #0]
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f000 ff8f 	bl	8008c80 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a1d      	ldr	r2, [pc, #116]	@ (8007ddc <HAL_TIM_IC_Start_IT+0x220>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d018      	beq.n	8007d9e <HAL_TIM_IC_Start_IT+0x1e2>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d74:	d013      	beq.n	8007d9e <HAL_TIM_IC_Start_IT+0x1e2>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a19      	ldr	r2, [pc, #100]	@ (8007de0 <HAL_TIM_IC_Start_IT+0x224>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d00e      	beq.n	8007d9e <HAL_TIM_IC_Start_IT+0x1e2>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a17      	ldr	r2, [pc, #92]	@ (8007de4 <HAL_TIM_IC_Start_IT+0x228>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d009      	beq.n	8007d9e <HAL_TIM_IC_Start_IT+0x1e2>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a16      	ldr	r2, [pc, #88]	@ (8007de8 <HAL_TIM_IC_Start_IT+0x22c>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d004      	beq.n	8007d9e <HAL_TIM_IC_Start_IT+0x1e2>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a14      	ldr	r2, [pc, #80]	@ (8007dec <HAL_TIM_IC_Start_IT+0x230>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d111      	bne.n	8007dc2 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	f003 0307 	and.w	r3, r3, #7
 8007da8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	2b06      	cmp	r3, #6
 8007dae:	d010      	beq.n	8007dd2 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f042 0201 	orr.w	r2, r2, #1
 8007dbe:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dc0:	e007      	b.n	8007dd2 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f042 0201 	orr.w	r2, r2, #1
 8007dd0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3710      	adds	r7, #16
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}
 8007ddc:	40010000 	.word	0x40010000
 8007de0:	40000400 	.word	0x40000400
 8007de4:	40000800 	.word	0x40000800
 8007de8:	40000c00 	.word	0x40000c00
 8007dec:	40014000 	.word	0x40014000

08007df0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	f003 0302 	and.w	r3, r3, #2
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d020      	beq.n	8007e54 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f003 0302 	and.w	r3, r3, #2
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d01b      	beq.n	8007e54 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f06f 0202 	mvn.w	r2, #2
 8007e24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	699b      	ldr	r3, [r3, #24]
 8007e32:	f003 0303 	and.w	r3, r3, #3
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d003      	beq.n	8007e42 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f7fb ff1e 	bl	8003c7c <HAL_TIM_IC_CaptureCallback>
 8007e40:	e005      	b.n	8007e4e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 fb2e 	bl	80084a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 fb35 	bl	80084b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	f003 0304 	and.w	r3, r3, #4
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d020      	beq.n	8007ea0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f003 0304 	and.w	r3, r3, #4
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d01b      	beq.n	8007ea0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f06f 0204 	mvn.w	r2, #4
 8007e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2202      	movs	r2, #2
 8007e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	699b      	ldr	r3, [r3, #24]
 8007e7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d003      	beq.n	8007e8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f7fb fef8 	bl	8003c7c <HAL_TIM_IC_CaptureCallback>
 8007e8c:	e005      	b.n	8007e9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 fb08 	bl	80084a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 fb0f 	bl	80084b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	f003 0308 	and.w	r3, r3, #8
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d020      	beq.n	8007eec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f003 0308 	and.w	r3, r3, #8
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d01b      	beq.n	8007eec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f06f 0208 	mvn.w	r2, #8
 8007ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2204      	movs	r2, #4
 8007ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	69db      	ldr	r3, [r3, #28]
 8007eca:	f003 0303 	and.w	r3, r3, #3
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d003      	beq.n	8007eda <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f7fb fed2 	bl	8003c7c <HAL_TIM_IC_CaptureCallback>
 8007ed8:	e005      	b.n	8007ee6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 fae2 	bl	80084a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 fae9 	bl	80084b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	f003 0310 	and.w	r3, r3, #16
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d020      	beq.n	8007f38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f003 0310 	and.w	r3, r3, #16
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d01b      	beq.n	8007f38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f06f 0210 	mvn.w	r2, #16
 8007f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2208      	movs	r2, #8
 8007f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	69db      	ldr	r3, [r3, #28]
 8007f16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d003      	beq.n	8007f26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f7fb feac 	bl	8003c7c <HAL_TIM_IC_CaptureCallback>
 8007f24:	e005      	b.n	8007f32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 fabc 	bl	80084a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 fac3 	bl	80084b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	f003 0301 	and.w	r3, r3, #1
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d00c      	beq.n	8007f5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f003 0301 	and.w	r3, r3, #1
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d007      	beq.n	8007f5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f06f 0201 	mvn.w	r2, #1
 8007f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f7fb fd5e 	bl	8003a18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d00c      	beq.n	8007f80 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d007      	beq.n	8007f80 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 ff1e 	bl	8008dbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00c      	beq.n	8007fa4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d007      	beq.n	8007fa4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 fa94 	bl	80084cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	f003 0320 	and.w	r3, r3, #32
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00c      	beq.n	8007fc8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f003 0320 	and.w	r3, r3, #32
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d007      	beq.n	8007fc8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f06f 0220 	mvn.w	r2, #32
 8007fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 fef0 	bl	8008da8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007fc8:	bf00      	nop
 8007fca:	3710      	adds	r7, #16
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b086      	sub	sp, #24
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d101      	bne.n	8007fee <HAL_TIM_IC_ConfigChannel+0x1e>
 8007fea:	2302      	movs	r3, #2
 8007fec:	e088      	b.n	8008100 <HAL_TIM_IC_ConfigChannel+0x130>
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d11b      	bne.n	8008034 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800800c:	f000 fc80 	bl	8008910 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	699a      	ldr	r2, [r3, #24]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f022 020c 	bic.w	r2, r2, #12
 800801e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	6999      	ldr	r1, [r3, #24]
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	689a      	ldr	r2, [r3, #8]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	430a      	orrs	r2, r1
 8008030:	619a      	str	r2, [r3, #24]
 8008032:	e060      	b.n	80080f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2b04      	cmp	r3, #4
 8008038:	d11c      	bne.n	8008074 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800804a:	f000 fcf8 	bl	8008a3e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	699a      	ldr	r2, [r3, #24]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800805c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	6999      	ldr	r1, [r3, #24]
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	021a      	lsls	r2, r3, #8
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	430a      	orrs	r2, r1
 8008070:	619a      	str	r2, [r3, #24]
 8008072:	e040      	b.n	80080f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2b08      	cmp	r3, #8
 8008078:	d11b      	bne.n	80080b2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800808a:	f000 fd45 	bl	8008b18 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	69da      	ldr	r2, [r3, #28]
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f022 020c 	bic.w	r2, r2, #12
 800809c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	69d9      	ldr	r1, [r3, #28]
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	689a      	ldr	r2, [r3, #8]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	430a      	orrs	r2, r1
 80080ae:	61da      	str	r2, [r3, #28]
 80080b0:	e021      	b.n	80080f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2b0c      	cmp	r3, #12
 80080b6:	d11c      	bne.n	80080f2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80080c8:	f000 fd62 	bl	8008b90 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	69da      	ldr	r2, [r3, #28]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80080da:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	69d9      	ldr	r1, [r3, #28]
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	021a      	lsls	r2, r3, #8
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	430a      	orrs	r2, r1
 80080ee:	61da      	str	r2, [r3, #28]
 80080f0:	e001      	b.n	80080f6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2200      	movs	r2, #0
 80080fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80080fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008100:	4618      	mov	r0, r3
 8008102:	3718      	adds	r7, #24
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b086      	sub	sp, #24
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008114:	2300      	movs	r3, #0
 8008116:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800811e:	2b01      	cmp	r3, #1
 8008120:	d101      	bne.n	8008126 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008122:	2302      	movs	r3, #2
 8008124:	e0ae      	b.n	8008284 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2201      	movs	r2, #1
 800812a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2b0c      	cmp	r3, #12
 8008132:	f200 809f 	bhi.w	8008274 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008136:	a201      	add	r2, pc, #4	@ (adr r2, 800813c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813c:	08008171 	.word	0x08008171
 8008140:	08008275 	.word	0x08008275
 8008144:	08008275 	.word	0x08008275
 8008148:	08008275 	.word	0x08008275
 800814c:	080081b1 	.word	0x080081b1
 8008150:	08008275 	.word	0x08008275
 8008154:	08008275 	.word	0x08008275
 8008158:	08008275 	.word	0x08008275
 800815c:	080081f3 	.word	0x080081f3
 8008160:	08008275 	.word	0x08008275
 8008164:	08008275 	.word	0x08008275
 8008168:	08008275 	.word	0x08008275
 800816c:	08008233 	.word	0x08008233
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	68b9      	ldr	r1, [r7, #8]
 8008176:	4618      	mov	r0, r3
 8008178:	f000 fa3e 	bl	80085f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	699a      	ldr	r2, [r3, #24]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f042 0208 	orr.w	r2, r2, #8
 800818a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	699a      	ldr	r2, [r3, #24]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f022 0204 	bic.w	r2, r2, #4
 800819a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	6999      	ldr	r1, [r3, #24]
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	691a      	ldr	r2, [r3, #16]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	430a      	orrs	r2, r1
 80081ac:	619a      	str	r2, [r3, #24]
      break;
 80081ae:	e064      	b.n	800827a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	68b9      	ldr	r1, [r7, #8]
 80081b6:	4618      	mov	r0, r3
 80081b8:	f000 fa84 	bl	80086c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	699a      	ldr	r2, [r3, #24]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80081ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	699a      	ldr	r2, [r3, #24]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80081da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	6999      	ldr	r1, [r3, #24]
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	691b      	ldr	r3, [r3, #16]
 80081e6:	021a      	lsls	r2, r3, #8
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	430a      	orrs	r2, r1
 80081ee:	619a      	str	r2, [r3, #24]
      break;
 80081f0:	e043      	b.n	800827a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	68b9      	ldr	r1, [r7, #8]
 80081f8:	4618      	mov	r0, r3
 80081fa:	f000 facf 	bl	800879c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	69da      	ldr	r2, [r3, #28]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f042 0208 	orr.w	r2, r2, #8
 800820c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	69da      	ldr	r2, [r3, #28]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f022 0204 	bic.w	r2, r2, #4
 800821c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	69d9      	ldr	r1, [r3, #28]
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	691a      	ldr	r2, [r3, #16]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	430a      	orrs	r2, r1
 800822e:	61da      	str	r2, [r3, #28]
      break;
 8008230:	e023      	b.n	800827a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	68b9      	ldr	r1, [r7, #8]
 8008238:	4618      	mov	r0, r3
 800823a:	f000 fb19 	bl	8008870 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	69da      	ldr	r2, [r3, #28]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800824c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	69da      	ldr	r2, [r3, #28]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800825c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	69d9      	ldr	r1, [r3, #28]
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	691b      	ldr	r3, [r3, #16]
 8008268:	021a      	lsls	r2, r3, #8
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	430a      	orrs	r2, r1
 8008270:	61da      	str	r2, [r3, #28]
      break;
 8008272:	e002      	b.n	800827a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008274:	2301      	movs	r3, #1
 8008276:	75fb      	strb	r3, [r7, #23]
      break;
 8008278:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2200      	movs	r2, #0
 800827e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008282:	7dfb      	ldrb	r3, [r7, #23]
}
 8008284:	4618      	mov	r0, r3
 8008286:	3718      	adds	r7, #24
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008296:	2300      	movs	r3, #0
 8008298:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d101      	bne.n	80082a8 <HAL_TIM_ConfigClockSource+0x1c>
 80082a4:	2302      	movs	r3, #2
 80082a6:	e0b4      	b.n	8008412 <HAL_TIM_ConfigClockSource+0x186>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2202      	movs	r2, #2
 80082b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80082c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80082ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	68ba      	ldr	r2, [r7, #8]
 80082d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082e0:	d03e      	beq.n	8008360 <HAL_TIM_ConfigClockSource+0xd4>
 80082e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082e6:	f200 8087 	bhi.w	80083f8 <HAL_TIM_ConfigClockSource+0x16c>
 80082ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082ee:	f000 8086 	beq.w	80083fe <HAL_TIM_ConfigClockSource+0x172>
 80082f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082f6:	d87f      	bhi.n	80083f8 <HAL_TIM_ConfigClockSource+0x16c>
 80082f8:	2b70      	cmp	r3, #112	@ 0x70
 80082fa:	d01a      	beq.n	8008332 <HAL_TIM_ConfigClockSource+0xa6>
 80082fc:	2b70      	cmp	r3, #112	@ 0x70
 80082fe:	d87b      	bhi.n	80083f8 <HAL_TIM_ConfigClockSource+0x16c>
 8008300:	2b60      	cmp	r3, #96	@ 0x60
 8008302:	d050      	beq.n	80083a6 <HAL_TIM_ConfigClockSource+0x11a>
 8008304:	2b60      	cmp	r3, #96	@ 0x60
 8008306:	d877      	bhi.n	80083f8 <HAL_TIM_ConfigClockSource+0x16c>
 8008308:	2b50      	cmp	r3, #80	@ 0x50
 800830a:	d03c      	beq.n	8008386 <HAL_TIM_ConfigClockSource+0xfa>
 800830c:	2b50      	cmp	r3, #80	@ 0x50
 800830e:	d873      	bhi.n	80083f8 <HAL_TIM_ConfigClockSource+0x16c>
 8008310:	2b40      	cmp	r3, #64	@ 0x40
 8008312:	d058      	beq.n	80083c6 <HAL_TIM_ConfigClockSource+0x13a>
 8008314:	2b40      	cmp	r3, #64	@ 0x40
 8008316:	d86f      	bhi.n	80083f8 <HAL_TIM_ConfigClockSource+0x16c>
 8008318:	2b30      	cmp	r3, #48	@ 0x30
 800831a:	d064      	beq.n	80083e6 <HAL_TIM_ConfigClockSource+0x15a>
 800831c:	2b30      	cmp	r3, #48	@ 0x30
 800831e:	d86b      	bhi.n	80083f8 <HAL_TIM_ConfigClockSource+0x16c>
 8008320:	2b20      	cmp	r3, #32
 8008322:	d060      	beq.n	80083e6 <HAL_TIM_ConfigClockSource+0x15a>
 8008324:	2b20      	cmp	r3, #32
 8008326:	d867      	bhi.n	80083f8 <HAL_TIM_ConfigClockSource+0x16c>
 8008328:	2b00      	cmp	r3, #0
 800832a:	d05c      	beq.n	80083e6 <HAL_TIM_ConfigClockSource+0x15a>
 800832c:	2b10      	cmp	r3, #16
 800832e:	d05a      	beq.n	80083e6 <HAL_TIM_ConfigClockSource+0x15a>
 8008330:	e062      	b.n	80083f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008342:	f000 fc7d 	bl	8008c40 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008354:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	68ba      	ldr	r2, [r7, #8]
 800835c:	609a      	str	r2, [r3, #8]
      break;
 800835e:	e04f      	b.n	8008400 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008370:	f000 fc66 	bl	8008c40 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	689a      	ldr	r2, [r3, #8]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008382:	609a      	str	r2, [r3, #8]
      break;
 8008384:	e03c      	b.n	8008400 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008392:	461a      	mov	r2, r3
 8008394:	f000 fb24 	bl	80089e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2150      	movs	r1, #80	@ 0x50
 800839e:	4618      	mov	r0, r3
 80083a0:	f000 fc33 	bl	8008c0a <TIM_ITRx_SetConfig>
      break;
 80083a4:	e02c      	b.n	8008400 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80083b2:	461a      	mov	r2, r3
 80083b4:	f000 fb80 	bl	8008ab8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2160      	movs	r1, #96	@ 0x60
 80083be:	4618      	mov	r0, r3
 80083c0:	f000 fc23 	bl	8008c0a <TIM_ITRx_SetConfig>
      break;
 80083c4:	e01c      	b.n	8008400 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80083d2:	461a      	mov	r2, r3
 80083d4:	f000 fb04 	bl	80089e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2140      	movs	r1, #64	@ 0x40
 80083de:	4618      	mov	r0, r3
 80083e0:	f000 fc13 	bl	8008c0a <TIM_ITRx_SetConfig>
      break;
 80083e4:	e00c      	b.n	8008400 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4619      	mov	r1, r3
 80083f0:	4610      	mov	r0, r2
 80083f2:	f000 fc0a 	bl	8008c0a <TIM_ITRx_SetConfig>
      break;
 80083f6:	e003      	b.n	8008400 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80083f8:	2301      	movs	r3, #1
 80083fa:	73fb      	strb	r3, [r7, #15]
      break;
 80083fc:	e000      	b.n	8008400 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80083fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2201      	movs	r2, #1
 8008404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008410:	7bfb      	ldrb	r3, [r7, #15]
}
 8008412:	4618      	mov	r0, r3
 8008414:	3710      	adds	r7, #16
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
	...

0800841c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800841c:	b480      	push	{r7}
 800841e:	b085      	sub	sp, #20
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008426:	2300      	movs	r3, #0
 8008428:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	2b0c      	cmp	r3, #12
 800842e:	d831      	bhi.n	8008494 <HAL_TIM_ReadCapturedValue+0x78>
 8008430:	a201      	add	r2, pc, #4	@ (adr r2, 8008438 <HAL_TIM_ReadCapturedValue+0x1c>)
 8008432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008436:	bf00      	nop
 8008438:	0800846d 	.word	0x0800846d
 800843c:	08008495 	.word	0x08008495
 8008440:	08008495 	.word	0x08008495
 8008444:	08008495 	.word	0x08008495
 8008448:	08008477 	.word	0x08008477
 800844c:	08008495 	.word	0x08008495
 8008450:	08008495 	.word	0x08008495
 8008454:	08008495 	.word	0x08008495
 8008458:	08008481 	.word	0x08008481
 800845c:	08008495 	.word	0x08008495
 8008460:	08008495 	.word	0x08008495
 8008464:	08008495 	.word	0x08008495
 8008468:	0800848b 	.word	0x0800848b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008472:	60fb      	str	r3, [r7, #12]

      break;
 8008474:	e00f      	b.n	8008496 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800847c:	60fb      	str	r3, [r7, #12]

      break;
 800847e:	e00a      	b.n	8008496 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008486:	60fb      	str	r3, [r7, #12]

      break;
 8008488:	e005      	b.n	8008496 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008490:	60fb      	str	r3, [r7, #12]

      break;
 8008492:	e000      	b.n	8008496 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008494:	bf00      	nop
  }

  return tmpreg;
 8008496:	68fb      	ldr	r3, [r7, #12]
}
 8008498:	4618      	mov	r0, r3
 800849a:	3714      	adds	r7, #20
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80084ac:	bf00      	nop
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80084c0:	bf00      	nop
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80084d4:	bf00      	nop
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4a3a      	ldr	r2, [pc, #232]	@ (80085dc <TIM_Base_SetConfig+0xfc>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d00f      	beq.n	8008518 <TIM_Base_SetConfig+0x38>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084fe:	d00b      	beq.n	8008518 <TIM_Base_SetConfig+0x38>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4a37      	ldr	r2, [pc, #220]	@ (80085e0 <TIM_Base_SetConfig+0x100>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d007      	beq.n	8008518 <TIM_Base_SetConfig+0x38>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	4a36      	ldr	r2, [pc, #216]	@ (80085e4 <TIM_Base_SetConfig+0x104>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d003      	beq.n	8008518 <TIM_Base_SetConfig+0x38>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	4a35      	ldr	r2, [pc, #212]	@ (80085e8 <TIM_Base_SetConfig+0x108>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d108      	bne.n	800852a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800851e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	68fa      	ldr	r2, [r7, #12]
 8008526:	4313      	orrs	r3, r2
 8008528:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	4a2b      	ldr	r2, [pc, #172]	@ (80085dc <TIM_Base_SetConfig+0xfc>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d01b      	beq.n	800856a <TIM_Base_SetConfig+0x8a>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008538:	d017      	beq.n	800856a <TIM_Base_SetConfig+0x8a>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4a28      	ldr	r2, [pc, #160]	@ (80085e0 <TIM_Base_SetConfig+0x100>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d013      	beq.n	800856a <TIM_Base_SetConfig+0x8a>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	4a27      	ldr	r2, [pc, #156]	@ (80085e4 <TIM_Base_SetConfig+0x104>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d00f      	beq.n	800856a <TIM_Base_SetConfig+0x8a>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4a26      	ldr	r2, [pc, #152]	@ (80085e8 <TIM_Base_SetConfig+0x108>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d00b      	beq.n	800856a <TIM_Base_SetConfig+0x8a>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4a25      	ldr	r2, [pc, #148]	@ (80085ec <TIM_Base_SetConfig+0x10c>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d007      	beq.n	800856a <TIM_Base_SetConfig+0x8a>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	4a24      	ldr	r2, [pc, #144]	@ (80085f0 <TIM_Base_SetConfig+0x110>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d003      	beq.n	800856a <TIM_Base_SetConfig+0x8a>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a23      	ldr	r2, [pc, #140]	@ (80085f4 <TIM_Base_SetConfig+0x114>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d108      	bne.n	800857c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008570:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	4313      	orrs	r3, r2
 800857a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	695b      	ldr	r3, [r3, #20]
 8008586:	4313      	orrs	r3, r2
 8008588:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	68fa      	ldr	r2, [r7, #12]
 800858e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	689a      	ldr	r2, [r3, #8]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	4a0e      	ldr	r2, [pc, #56]	@ (80085dc <TIM_Base_SetConfig+0xfc>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d103      	bne.n	80085b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	691a      	ldr	r2, [r3, #16]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2201      	movs	r2, #1
 80085b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	691b      	ldr	r3, [r3, #16]
 80085ba:	f003 0301 	and.w	r3, r3, #1
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d105      	bne.n	80085ce <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	f023 0201 	bic.w	r2, r3, #1
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	611a      	str	r2, [r3, #16]
  }
}
 80085ce:	bf00      	nop
 80085d0:	3714      	adds	r7, #20
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr
 80085da:	bf00      	nop
 80085dc:	40010000 	.word	0x40010000
 80085e0:	40000400 	.word	0x40000400
 80085e4:	40000800 	.word	0x40000800
 80085e8:	40000c00 	.word	0x40000c00
 80085ec:	40014000 	.word	0x40014000
 80085f0:	40014400 	.word	0x40014400
 80085f4:	40014800 	.word	0x40014800

080085f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b087      	sub	sp, #28
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6a1b      	ldr	r3, [r3, #32]
 8008606:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6a1b      	ldr	r3, [r3, #32]
 800860c:	f023 0201 	bic.w	r2, r3, #1
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	699b      	ldr	r3, [r3, #24]
 800861e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f023 0303 	bic.w	r3, r3, #3
 800862e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	68fa      	ldr	r2, [r7, #12]
 8008636:	4313      	orrs	r3, r2
 8008638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	f023 0302 	bic.w	r3, r3, #2
 8008640:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	689b      	ldr	r3, [r3, #8]
 8008646:	697a      	ldr	r2, [r7, #20]
 8008648:	4313      	orrs	r3, r2
 800864a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	4a1c      	ldr	r2, [pc, #112]	@ (80086c0 <TIM_OC1_SetConfig+0xc8>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d10c      	bne.n	800866e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	f023 0308 	bic.w	r3, r3, #8
 800865a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	68db      	ldr	r3, [r3, #12]
 8008660:	697a      	ldr	r2, [r7, #20]
 8008662:	4313      	orrs	r3, r2
 8008664:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	f023 0304 	bic.w	r3, r3, #4
 800866c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4a13      	ldr	r2, [pc, #76]	@ (80086c0 <TIM_OC1_SetConfig+0xc8>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d111      	bne.n	800869a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800867c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008684:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	695b      	ldr	r3, [r3, #20]
 800868a:	693a      	ldr	r2, [r7, #16]
 800868c:	4313      	orrs	r3, r2
 800868e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	699b      	ldr	r3, [r3, #24]
 8008694:	693a      	ldr	r2, [r7, #16]
 8008696:	4313      	orrs	r3, r2
 8008698:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	693a      	ldr	r2, [r7, #16]
 800869e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	68fa      	ldr	r2, [r7, #12]
 80086a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	685a      	ldr	r2, [r3, #4]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	697a      	ldr	r2, [r7, #20]
 80086b2:	621a      	str	r2, [r3, #32]
}
 80086b4:	bf00      	nop
 80086b6:	371c      	adds	r7, #28
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr
 80086c0:	40010000 	.word	0x40010000

080086c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b087      	sub	sp, #28
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6a1b      	ldr	r3, [r3, #32]
 80086d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6a1b      	ldr	r3, [r3, #32]
 80086d8:	f023 0210 	bic.w	r2, r3, #16
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	699b      	ldr	r3, [r3, #24]
 80086ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	021b      	lsls	r3, r3, #8
 8008702:	68fa      	ldr	r2, [r7, #12]
 8008704:	4313      	orrs	r3, r2
 8008706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	f023 0320 	bic.w	r3, r3, #32
 800870e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	011b      	lsls	r3, r3, #4
 8008716:	697a      	ldr	r2, [r7, #20]
 8008718:	4313      	orrs	r3, r2
 800871a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	4a1e      	ldr	r2, [pc, #120]	@ (8008798 <TIM_OC2_SetConfig+0xd4>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d10d      	bne.n	8008740 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800872a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	011b      	lsls	r3, r3, #4
 8008732:	697a      	ldr	r2, [r7, #20]
 8008734:	4313      	orrs	r3, r2
 8008736:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800873e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	4a15      	ldr	r2, [pc, #84]	@ (8008798 <TIM_OC2_SetConfig+0xd4>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d113      	bne.n	8008770 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800874e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008756:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	695b      	ldr	r3, [r3, #20]
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	693a      	ldr	r2, [r7, #16]
 8008760:	4313      	orrs	r3, r2
 8008762:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	699b      	ldr	r3, [r3, #24]
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	693a      	ldr	r2, [r7, #16]
 800876c:	4313      	orrs	r3, r2
 800876e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	693a      	ldr	r2, [r7, #16]
 8008774:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	68fa      	ldr	r2, [r7, #12]
 800877a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	685a      	ldr	r2, [r3, #4]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	697a      	ldr	r2, [r7, #20]
 8008788:	621a      	str	r2, [r3, #32]
}
 800878a:	bf00      	nop
 800878c:	371c      	adds	r7, #28
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr
 8008796:	bf00      	nop
 8008798:	40010000 	.word	0x40010000

0800879c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800879c:	b480      	push	{r7}
 800879e:	b087      	sub	sp, #28
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6a1b      	ldr	r3, [r3, #32]
 80087aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6a1b      	ldr	r3, [r3, #32]
 80087b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	69db      	ldr	r3, [r3, #28]
 80087c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f023 0303 	bic.w	r3, r3, #3
 80087d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	68fa      	ldr	r2, [r7, #12]
 80087da:	4313      	orrs	r3, r2
 80087dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80087e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	689b      	ldr	r3, [r3, #8]
 80087ea:	021b      	lsls	r3, r3, #8
 80087ec:	697a      	ldr	r2, [r7, #20]
 80087ee:	4313      	orrs	r3, r2
 80087f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4a1d      	ldr	r2, [pc, #116]	@ (800886c <TIM_OC3_SetConfig+0xd0>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d10d      	bne.n	8008816 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008800:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	68db      	ldr	r3, [r3, #12]
 8008806:	021b      	lsls	r3, r3, #8
 8008808:	697a      	ldr	r2, [r7, #20]
 800880a:	4313      	orrs	r3, r2
 800880c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008814:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	4a14      	ldr	r2, [pc, #80]	@ (800886c <TIM_OC3_SetConfig+0xd0>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d113      	bne.n	8008846 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008824:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800882c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	695b      	ldr	r3, [r3, #20]
 8008832:	011b      	lsls	r3, r3, #4
 8008834:	693a      	ldr	r2, [r7, #16]
 8008836:	4313      	orrs	r3, r2
 8008838:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	699b      	ldr	r3, [r3, #24]
 800883e:	011b      	lsls	r3, r3, #4
 8008840:	693a      	ldr	r2, [r7, #16]
 8008842:	4313      	orrs	r3, r2
 8008844:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	693a      	ldr	r2, [r7, #16]
 800884a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	68fa      	ldr	r2, [r7, #12]
 8008850:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	685a      	ldr	r2, [r3, #4]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	697a      	ldr	r2, [r7, #20]
 800885e:	621a      	str	r2, [r3, #32]
}
 8008860:	bf00      	nop
 8008862:	371c      	adds	r7, #28
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr
 800886c:	40010000 	.word	0x40010000

08008870 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008870:	b480      	push	{r7}
 8008872:	b087      	sub	sp, #28
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6a1b      	ldr	r3, [r3, #32]
 800887e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6a1b      	ldr	r3, [r3, #32]
 8008884:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	69db      	ldr	r3, [r3, #28]
 8008896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800889e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80088a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	021b      	lsls	r3, r3, #8
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	4313      	orrs	r3, r2
 80088b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80088ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	689b      	ldr	r3, [r3, #8]
 80088c0:	031b      	lsls	r3, r3, #12
 80088c2:	693a      	ldr	r2, [r7, #16]
 80088c4:	4313      	orrs	r3, r2
 80088c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	4a10      	ldr	r2, [pc, #64]	@ (800890c <TIM_OC4_SetConfig+0x9c>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d109      	bne.n	80088e4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80088d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	695b      	ldr	r3, [r3, #20]
 80088dc:	019b      	lsls	r3, r3, #6
 80088de:	697a      	ldr	r2, [r7, #20]
 80088e0:	4313      	orrs	r3, r2
 80088e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	697a      	ldr	r2, [r7, #20]
 80088e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	68fa      	ldr	r2, [r7, #12]
 80088ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	685a      	ldr	r2, [r3, #4]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	693a      	ldr	r2, [r7, #16]
 80088fc:	621a      	str	r2, [r3, #32]
}
 80088fe:	bf00      	nop
 8008900:	371c      	adds	r7, #28
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr
 800890a:	bf00      	nop
 800890c:	40010000 	.word	0x40010000

08008910 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008910:	b480      	push	{r7}
 8008912:	b087      	sub	sp, #28
 8008914:	af00      	add	r7, sp, #0
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	60b9      	str	r1, [r7, #8]
 800891a:	607a      	str	r2, [r7, #4]
 800891c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	6a1b      	ldr	r3, [r3, #32]
 8008922:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	6a1b      	ldr	r3, [r3, #32]
 8008928:	f023 0201 	bic.w	r2, r3, #1
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	699b      	ldr	r3, [r3, #24]
 8008934:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	4a24      	ldr	r2, [pc, #144]	@ (80089cc <TIM_TI1_SetConfig+0xbc>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d013      	beq.n	8008966 <TIM_TI1_SetConfig+0x56>
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008944:	d00f      	beq.n	8008966 <TIM_TI1_SetConfig+0x56>
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	4a21      	ldr	r2, [pc, #132]	@ (80089d0 <TIM_TI1_SetConfig+0xc0>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d00b      	beq.n	8008966 <TIM_TI1_SetConfig+0x56>
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	4a20      	ldr	r2, [pc, #128]	@ (80089d4 <TIM_TI1_SetConfig+0xc4>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d007      	beq.n	8008966 <TIM_TI1_SetConfig+0x56>
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	4a1f      	ldr	r2, [pc, #124]	@ (80089d8 <TIM_TI1_SetConfig+0xc8>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d003      	beq.n	8008966 <TIM_TI1_SetConfig+0x56>
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	4a1e      	ldr	r2, [pc, #120]	@ (80089dc <TIM_TI1_SetConfig+0xcc>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d101      	bne.n	800896a <TIM_TI1_SetConfig+0x5a>
 8008966:	2301      	movs	r3, #1
 8008968:	e000      	b.n	800896c <TIM_TI1_SetConfig+0x5c>
 800896a:	2300      	movs	r3, #0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d008      	beq.n	8008982 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	f023 0303 	bic.w	r3, r3, #3
 8008976:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008978:	697a      	ldr	r2, [r7, #20]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4313      	orrs	r3, r2
 800897e:	617b      	str	r3, [r7, #20]
 8008980:	e003      	b.n	800898a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	f043 0301 	orr.w	r3, r3, #1
 8008988:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008990:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	011b      	lsls	r3, r3, #4
 8008996:	b2db      	uxtb	r3, r3
 8008998:	697a      	ldr	r2, [r7, #20]
 800899a:	4313      	orrs	r3, r2
 800899c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	f023 030a 	bic.w	r3, r3, #10
 80089a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	f003 030a 	and.w	r3, r3, #10
 80089ac:	693a      	ldr	r2, [r7, #16]
 80089ae:	4313      	orrs	r3, r2
 80089b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	697a      	ldr	r2, [r7, #20]
 80089b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	693a      	ldr	r2, [r7, #16]
 80089bc:	621a      	str	r2, [r3, #32]
}
 80089be:	bf00      	nop
 80089c0:	371c      	adds	r7, #28
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr
 80089ca:	bf00      	nop
 80089cc:	40010000 	.word	0x40010000
 80089d0:	40000400 	.word	0x40000400
 80089d4:	40000800 	.word	0x40000800
 80089d8:	40000c00 	.word	0x40000c00
 80089dc:	40014000 	.word	0x40014000

080089e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b087      	sub	sp, #28
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	6a1b      	ldr	r3, [r3, #32]
 80089f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	6a1b      	ldr	r3, [r3, #32]
 80089f6:	f023 0201 	bic.w	r2, r3, #1
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	699b      	ldr	r3, [r3, #24]
 8008a02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008a0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	011b      	lsls	r3, r3, #4
 8008a10:	693a      	ldr	r2, [r7, #16]
 8008a12:	4313      	orrs	r3, r2
 8008a14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	f023 030a 	bic.w	r3, r3, #10
 8008a1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008a1e:	697a      	ldr	r2, [r7, #20]
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	693a      	ldr	r2, [r7, #16]
 8008a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	697a      	ldr	r2, [r7, #20]
 8008a30:	621a      	str	r2, [r3, #32]
}
 8008a32:	bf00      	nop
 8008a34:	371c      	adds	r7, #28
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr

08008a3e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008a3e:	b480      	push	{r7}
 8008a40:	b087      	sub	sp, #28
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	60f8      	str	r0, [r7, #12]
 8008a46:	60b9      	str	r1, [r7, #8]
 8008a48:	607a      	str	r2, [r7, #4]
 8008a4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	6a1b      	ldr	r3, [r3, #32]
 8008a50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	6a1b      	ldr	r3, [r3, #32]
 8008a56:	f023 0210 	bic.w	r2, r3, #16
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	699b      	ldr	r3, [r3, #24]
 8008a62:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	021b      	lsls	r3, r3, #8
 8008a70:	693a      	ldr	r2, [r7, #16]
 8008a72:	4313      	orrs	r3, r2
 8008a74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008a7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	031b      	lsls	r3, r3, #12
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	693a      	ldr	r2, [r7, #16]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008a90:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	011b      	lsls	r3, r3, #4
 8008a96:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8008a9a:	697a      	ldr	r2, [r7, #20]
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	693a      	ldr	r2, [r7, #16]
 8008aa4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	697a      	ldr	r2, [r7, #20]
 8008aaa:	621a      	str	r2, [r3, #32]
}
 8008aac:	bf00      	nop
 8008aae:	371c      	adds	r7, #28
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b087      	sub	sp, #28
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	6a1b      	ldr	r3, [r3, #32]
 8008ac8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6a1b      	ldr	r3, [r3, #32]
 8008ace:	f023 0210 	bic.w	r2, r3, #16
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	699b      	ldr	r3, [r3, #24]
 8008ada:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008ae2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	031b      	lsls	r3, r3, #12
 8008ae8:	693a      	ldr	r2, [r7, #16]
 8008aea:	4313      	orrs	r3, r2
 8008aec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008af4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	011b      	lsls	r3, r3, #4
 8008afa:	697a      	ldr	r2, [r7, #20]
 8008afc:	4313      	orrs	r3, r2
 8008afe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	693a      	ldr	r2, [r7, #16]
 8008b04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	697a      	ldr	r2, [r7, #20]
 8008b0a:	621a      	str	r2, [r3, #32]
}
 8008b0c:	bf00      	nop
 8008b0e:	371c      	adds	r7, #28
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b087      	sub	sp, #28
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	60f8      	str	r0, [r7, #12]
 8008b20:	60b9      	str	r1, [r7, #8]
 8008b22:	607a      	str	r2, [r7, #4]
 8008b24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	6a1b      	ldr	r3, [r3, #32]
 8008b2a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	6a1b      	ldr	r3, [r3, #32]
 8008b30:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	69db      	ldr	r3, [r3, #28]
 8008b3c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	f023 0303 	bic.w	r3, r3, #3
 8008b44:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8008b46:	693a      	ldr	r2, [r7, #16]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008b54:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	011b      	lsls	r3, r3, #4
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	693a      	ldr	r2, [r7, #16]
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8008b68:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	021b      	lsls	r3, r3, #8
 8008b6e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8008b72:	697a      	ldr	r2, [r7, #20]
 8008b74:	4313      	orrs	r3, r2
 8008b76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	693a      	ldr	r2, [r7, #16]
 8008b7c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	697a      	ldr	r2, [r7, #20]
 8008b82:	621a      	str	r2, [r3, #32]
}
 8008b84:	bf00      	nop
 8008b86:	371c      	adds	r7, #28
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr

08008b90 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b087      	sub	sp, #28
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	60b9      	str	r1, [r7, #8]
 8008b9a:	607a      	str	r2, [r7, #4]
 8008b9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	6a1b      	ldr	r3, [r3, #32]
 8008ba2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	6a1b      	ldr	r3, [r3, #32]
 8008ba8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	69db      	ldr	r3, [r3, #28]
 8008bb4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008bbc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	021b      	lsls	r3, r3, #8
 8008bc2:	693a      	ldr	r2, [r7, #16]
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008bce:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	031b      	lsls	r3, r3, #12
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	693a      	ldr	r2, [r7, #16]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8008be2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	031b      	lsls	r3, r3, #12
 8008be8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8008bec:	697a      	ldr	r2, [r7, #20]
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	693a      	ldr	r2, [r7, #16]
 8008bf6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	697a      	ldr	r2, [r7, #20]
 8008bfc:	621a      	str	r2, [r3, #32]
}
 8008bfe:	bf00      	nop
 8008c00:	371c      	adds	r7, #28
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr

08008c0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c0a:	b480      	push	{r7}
 8008c0c:	b085      	sub	sp, #20
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	6078      	str	r0, [r7, #4]
 8008c12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c22:	683a      	ldr	r2, [r7, #0]
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	f043 0307 	orr.w	r3, r3, #7
 8008c2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	68fa      	ldr	r2, [r7, #12]
 8008c32:	609a      	str	r2, [r3, #8]
}
 8008c34:	bf00      	nop
 8008c36:	3714      	adds	r7, #20
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr

08008c40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b087      	sub	sp, #28
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	60f8      	str	r0, [r7, #12]
 8008c48:	60b9      	str	r1, [r7, #8]
 8008c4a:	607a      	str	r2, [r7, #4]
 8008c4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008c5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	021a      	lsls	r2, r3, #8
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	431a      	orrs	r2, r3
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	4313      	orrs	r3, r2
 8008c68:	697a      	ldr	r2, [r7, #20]
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	697a      	ldr	r2, [r7, #20]
 8008c72:	609a      	str	r2, [r3, #8]
}
 8008c74:	bf00      	nop
 8008c76:	371c      	adds	r7, #28
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b087      	sub	sp, #28
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	f003 031f 	and.w	r3, r3, #31
 8008c92:	2201      	movs	r2, #1
 8008c94:	fa02 f303 	lsl.w	r3, r2, r3
 8008c98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	6a1a      	ldr	r2, [r3, #32]
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	43db      	mvns	r3, r3
 8008ca2:	401a      	ands	r2, r3
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	6a1a      	ldr	r2, [r3, #32]
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	f003 031f 	and.w	r3, r3, #31
 8008cb2:	6879      	ldr	r1, [r7, #4]
 8008cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8008cb8:	431a      	orrs	r2, r3
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	621a      	str	r2, [r3, #32]
}
 8008cbe:	bf00      	nop
 8008cc0:	371c      	adds	r7, #28
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr
	...

08008ccc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b085      	sub	sp, #20
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d101      	bne.n	8008ce4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ce0:	2302      	movs	r3, #2
 8008ce2:	e050      	b.n	8008d86 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2202      	movs	r2, #2
 8008cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	68fa      	ldr	r2, [r7, #12]
 8008d12:	4313      	orrs	r3, r2
 8008d14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	68fa      	ldr	r2, [r7, #12]
 8008d1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a1c      	ldr	r2, [pc, #112]	@ (8008d94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d018      	beq.n	8008d5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d30:	d013      	beq.n	8008d5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a18      	ldr	r2, [pc, #96]	@ (8008d98 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d00e      	beq.n	8008d5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a16      	ldr	r2, [pc, #88]	@ (8008d9c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d009      	beq.n	8008d5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a15      	ldr	r2, [pc, #84]	@ (8008da0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d004      	beq.n	8008d5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a13      	ldr	r2, [pc, #76]	@ (8008da4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d10c      	bne.n	8008d74 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	68ba      	ldr	r2, [r7, #8]
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	68ba      	ldr	r2, [r7, #8]
 8008d72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2201      	movs	r2, #1
 8008d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008d84:	2300      	movs	r3, #0
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3714      	adds	r7, #20
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr
 8008d92:	bf00      	nop
 8008d94:	40010000 	.word	0x40010000
 8008d98:	40000400 	.word	0x40000400
 8008d9c:	40000800 	.word	0x40000800
 8008da0:	40000c00 	.word	0x40000c00
 8008da4:	40014000 	.word	0x40014000

08008da8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008db0:	bf00      	nop
 8008db2:	370c      	adds	r7, #12
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr

08008dbc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008dc4:	bf00      	nop
 8008dc6:	370c      	adds	r7, #12
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d101      	bne.n	8008de2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008dde:	2301      	movs	r3, #1
 8008de0:	e042      	b.n	8008e68 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008de8:	b2db      	uxtb	r3, r3
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d106      	bne.n	8008dfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2200      	movs	r2, #0
 8008df2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f7fb fc10 	bl	800461c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2224      	movs	r2, #36	@ 0x24
 8008e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	68da      	ldr	r2, [r3, #12]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008e12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 fb83 	bl	8009520 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	691a      	ldr	r2, [r3, #16]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008e28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	695a      	ldr	r2, [r3, #20]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008e38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	68da      	ldr	r2, [r3, #12]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008e48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2220      	movs	r2, #32
 8008e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2220      	movs	r2, #32
 8008e5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008e66:	2300      	movs	r3, #0
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3708      	adds	r7, #8
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b08a      	sub	sp, #40	@ 0x28
 8008e74:	af02      	add	r7, sp, #8
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	603b      	str	r3, [r7, #0]
 8008e7c:	4613      	mov	r3, r2
 8008e7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008e80:	2300      	movs	r3, #0
 8008e82:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	2b20      	cmp	r3, #32
 8008e8e:	d175      	bne.n	8008f7c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d002      	beq.n	8008e9c <HAL_UART_Transmit+0x2c>
 8008e96:	88fb      	ldrh	r3, [r7, #6]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d101      	bne.n	8008ea0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	e06e      	b.n	8008f7e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2221      	movs	r2, #33	@ 0x21
 8008eaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008eae:	f7fb fc91 	bl	80047d4 <HAL_GetTick>
 8008eb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	88fa      	ldrh	r2, [r7, #6]
 8008eb8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	88fa      	ldrh	r2, [r7, #6]
 8008ebe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ec8:	d108      	bne.n	8008edc <HAL_UART_Transmit+0x6c>
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	691b      	ldr	r3, [r3, #16]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d104      	bne.n	8008edc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	61bb      	str	r3, [r7, #24]
 8008eda:	e003      	b.n	8008ee4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008ee4:	e02e      	b.n	8008f44 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	9300      	str	r3, [sp, #0]
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	2200      	movs	r2, #0
 8008eee:	2180      	movs	r1, #128	@ 0x80
 8008ef0:	68f8      	ldr	r0, [r7, #12]
 8008ef2:	f000 f995 	bl	8009220 <UART_WaitOnFlagUntilTimeout>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d005      	beq.n	8008f08 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2220      	movs	r2, #32
 8008f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008f04:	2303      	movs	r3, #3
 8008f06:	e03a      	b.n	8008f7e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008f08:	69fb      	ldr	r3, [r7, #28]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d10b      	bne.n	8008f26 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008f0e:	69bb      	ldr	r3, [r7, #24]
 8008f10:	881b      	ldrh	r3, [r3, #0]
 8008f12:	461a      	mov	r2, r3
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008f1e:	69bb      	ldr	r3, [r7, #24]
 8008f20:	3302      	adds	r3, #2
 8008f22:	61bb      	str	r3, [r7, #24]
 8008f24:	e007      	b.n	8008f36 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008f26:	69fb      	ldr	r3, [r7, #28]
 8008f28:	781a      	ldrb	r2, [r3, #0]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008f30:	69fb      	ldr	r3, [r7, #28]
 8008f32:	3301      	adds	r3, #1
 8008f34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	b29a      	uxth	r2, r3
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d1cb      	bne.n	8008ee6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	9300      	str	r3, [sp, #0]
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	2200      	movs	r2, #0
 8008f56:	2140      	movs	r1, #64	@ 0x40
 8008f58:	68f8      	ldr	r0, [r7, #12]
 8008f5a:	f000 f961 	bl	8009220 <UART_WaitOnFlagUntilTimeout>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d005      	beq.n	8008f70 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2220      	movs	r2, #32
 8008f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008f6c:	2303      	movs	r3, #3
 8008f6e:	e006      	b.n	8008f7e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2220      	movs	r2, #32
 8008f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	e000      	b.n	8008f7e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008f7c:	2302      	movs	r3, #2
  }
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3720      	adds	r7, #32
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b084      	sub	sp, #16
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	60f8      	str	r0, [r7, #12]
 8008f8e:	60b9      	str	r1, [r7, #8]
 8008f90:	4613      	mov	r3, r2
 8008f92:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008f9a:	b2db      	uxtb	r3, r3
 8008f9c:	2b20      	cmp	r3, #32
 8008f9e:	d112      	bne.n	8008fc6 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d002      	beq.n	8008fac <HAL_UART_Receive_DMA+0x26>
 8008fa6:	88fb      	ldrh	r3, [r7, #6]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d101      	bne.n	8008fb0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008fac:	2301      	movs	r3, #1
 8008fae:	e00b      	b.n	8008fc8 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008fb6:	88fb      	ldrh	r3, [r7, #6]
 8008fb8:	461a      	mov	r2, r3
 8008fba:	68b9      	ldr	r1, [r7, #8]
 8008fbc:	68f8      	ldr	r0, [r7, #12]
 8008fbe:	f000 f989 	bl	80092d4 <UART_Start_Receive_DMA>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	e000      	b.n	8008fc8 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008fc6:	2302      	movs	r3, #2
  }
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3710      	adds	r7, #16
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b083      	sub	sp, #12
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008fd8:	bf00      	nop
 8008fda:	370c      	adds	r7, #12
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008fec:	bf00      	nop
 8008fee:	370c      	adds	r7, #12
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009000:	bf00      	nop
 8009002:	370c      	adds	r7, #12
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr

0800900c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800900c:	b480      	push	{r7}
 800900e:	b083      	sub	sp, #12
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	460b      	mov	r3, r1
 8009016:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009018:	bf00      	nop
 800901a:	370c      	adds	r7, #12
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr

08009024 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b09c      	sub	sp, #112	@ 0x70
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009030:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800903c:	2b00      	cmp	r3, #0
 800903e:	d172      	bne.n	8009126 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009040:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009042:	2200      	movs	r2, #0
 8009044:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009046:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	330c      	adds	r3, #12
 800904c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800904e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009050:	e853 3f00 	ldrex	r3, [r3]
 8009054:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009056:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009058:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800905c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800905e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	330c      	adds	r3, #12
 8009064:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009066:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009068:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800906a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800906c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800906e:	e841 2300 	strex	r3, r2, [r1]
 8009072:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009074:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009076:	2b00      	cmp	r3, #0
 8009078:	d1e5      	bne.n	8009046 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800907a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	3314      	adds	r3, #20
 8009080:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009084:	e853 3f00 	ldrex	r3, [r3]
 8009088:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800908a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800908c:	f023 0301 	bic.w	r3, r3, #1
 8009090:	667b      	str	r3, [r7, #100]	@ 0x64
 8009092:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	3314      	adds	r3, #20
 8009098:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800909a:	647a      	str	r2, [r7, #68]	@ 0x44
 800909c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80090a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80090a2:	e841 2300 	strex	r3, r2, [r1]
 80090a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80090a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d1e5      	bne.n	800907a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	3314      	adds	r3, #20
 80090b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b8:	e853 3f00 	ldrex	r3, [r3]
 80090bc:	623b      	str	r3, [r7, #32]
   return(result);
 80090be:	6a3b      	ldr	r3, [r7, #32]
 80090c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80090c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	3314      	adds	r3, #20
 80090cc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80090ce:	633a      	str	r2, [r7, #48]	@ 0x30
 80090d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80090d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090d6:	e841 2300 	strex	r3, r2, [r1]
 80090da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80090dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d1e5      	bne.n	80090ae <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80090e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090e4:	2220      	movs	r2, #32
 80090e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d119      	bne.n	8009126 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	330c      	adds	r3, #12
 80090f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	e853 3f00 	ldrex	r3, [r3]
 8009100:	60fb      	str	r3, [r7, #12]
   return(result);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f023 0310 	bic.w	r3, r3, #16
 8009108:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800910a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	330c      	adds	r3, #12
 8009110:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009112:	61fa      	str	r2, [r7, #28]
 8009114:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009116:	69b9      	ldr	r1, [r7, #24]
 8009118:	69fa      	ldr	r2, [r7, #28]
 800911a:	e841 2300 	strex	r3, r2, [r1]
 800911e:	617b      	str	r3, [r7, #20]
   return(result);
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d1e5      	bne.n	80090f2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009126:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009128:	2200      	movs	r2, #0
 800912a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800912c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800912e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009130:	2b01      	cmp	r3, #1
 8009132:	d106      	bne.n	8009142 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009134:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009136:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009138:	4619      	mov	r1, r3
 800913a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800913c:	f7ff ff66 	bl	800900c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009140:	e002      	b.n	8009148 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009142:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009144:	f7ff ff44 	bl	8008fd0 <HAL_UART_RxCpltCallback>
}
 8009148:	bf00      	nop
 800914a:	3770      	adds	r7, #112	@ 0x70
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800915c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2201      	movs	r2, #1
 8009162:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009168:	2b01      	cmp	r3, #1
 800916a:	d108      	bne.n	800917e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009170:	085b      	lsrs	r3, r3, #1
 8009172:	b29b      	uxth	r3, r3
 8009174:	4619      	mov	r1, r3
 8009176:	68f8      	ldr	r0, [r7, #12]
 8009178:	f7ff ff48 	bl	800900c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800917c:	e002      	b.n	8009184 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800917e:	68f8      	ldr	r0, [r7, #12]
 8009180:	f7ff ff30 	bl	8008fe4 <HAL_UART_RxHalfCpltCallback>
}
 8009184:	bf00      	nop
 8009186:	3710      	adds	r7, #16
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009194:	2300      	movs	r3, #0
 8009196:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800919c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	695b      	ldr	r3, [r3, #20]
 80091a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091a8:	2b80      	cmp	r3, #128	@ 0x80
 80091aa:	bf0c      	ite	eq
 80091ac:	2301      	moveq	r3, #1
 80091ae:	2300      	movne	r3, #0
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80091ba:	b2db      	uxtb	r3, r3
 80091bc:	2b21      	cmp	r3, #33	@ 0x21
 80091be:	d108      	bne.n	80091d2 <UART_DMAError+0x46>
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d005      	beq.n	80091d2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	2200      	movs	r2, #0
 80091ca:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80091cc:	68b8      	ldr	r0, [r7, #8]
 80091ce:	f000 f91b 	bl	8009408 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	695b      	ldr	r3, [r3, #20]
 80091d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091dc:	2b40      	cmp	r3, #64	@ 0x40
 80091de:	bf0c      	ite	eq
 80091e0:	2301      	moveq	r3, #1
 80091e2:	2300      	movne	r3, #0
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	2b22      	cmp	r3, #34	@ 0x22
 80091f2:	d108      	bne.n	8009206 <UART_DMAError+0x7a>
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d005      	beq.n	8009206 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	2200      	movs	r2, #0
 80091fe:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8009200:	68b8      	ldr	r0, [r7, #8]
 8009202:	f000 f929 	bl	8009458 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800920a:	f043 0210 	orr.w	r2, r3, #16
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009212:	68b8      	ldr	r0, [r7, #8]
 8009214:	f7ff fef0 	bl	8008ff8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009218:	bf00      	nop
 800921a:	3710      	adds	r7, #16
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b086      	sub	sp, #24
 8009224:	af00      	add	r7, sp, #0
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	603b      	str	r3, [r7, #0]
 800922c:	4613      	mov	r3, r2
 800922e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009230:	e03b      	b.n	80092aa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009232:	6a3b      	ldr	r3, [r7, #32]
 8009234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009238:	d037      	beq.n	80092aa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800923a:	f7fb facb 	bl	80047d4 <HAL_GetTick>
 800923e:	4602      	mov	r2, r0
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	1ad3      	subs	r3, r2, r3
 8009244:	6a3a      	ldr	r2, [r7, #32]
 8009246:	429a      	cmp	r2, r3
 8009248:	d302      	bcc.n	8009250 <UART_WaitOnFlagUntilTimeout+0x30>
 800924a:	6a3b      	ldr	r3, [r7, #32]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d101      	bne.n	8009254 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009250:	2303      	movs	r3, #3
 8009252:	e03a      	b.n	80092ca <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	68db      	ldr	r3, [r3, #12]
 800925a:	f003 0304 	and.w	r3, r3, #4
 800925e:	2b00      	cmp	r3, #0
 8009260:	d023      	beq.n	80092aa <UART_WaitOnFlagUntilTimeout+0x8a>
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	2b80      	cmp	r3, #128	@ 0x80
 8009266:	d020      	beq.n	80092aa <UART_WaitOnFlagUntilTimeout+0x8a>
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	2b40      	cmp	r3, #64	@ 0x40
 800926c:	d01d      	beq.n	80092aa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f003 0308 	and.w	r3, r3, #8
 8009278:	2b08      	cmp	r3, #8
 800927a:	d116      	bne.n	80092aa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800927c:	2300      	movs	r3, #0
 800927e:	617b      	str	r3, [r7, #20]
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	617b      	str	r3, [r7, #20]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	617b      	str	r3, [r7, #20]
 8009290:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009292:	68f8      	ldr	r0, [r7, #12]
 8009294:	f000 f8e0 	bl	8009458 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2208      	movs	r2, #8
 800929c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2200      	movs	r2, #0
 80092a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80092a6:	2301      	movs	r3, #1
 80092a8:	e00f      	b.n	80092ca <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	4013      	ands	r3, r2
 80092b4:	68ba      	ldr	r2, [r7, #8]
 80092b6:	429a      	cmp	r2, r3
 80092b8:	bf0c      	ite	eq
 80092ba:	2301      	moveq	r3, #1
 80092bc:	2300      	movne	r3, #0
 80092be:	b2db      	uxtb	r3, r3
 80092c0:	461a      	mov	r2, r3
 80092c2:	79fb      	ldrb	r3, [r7, #7]
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d0b4      	beq.n	8009232 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80092c8:	2300      	movs	r3, #0
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3718      	adds	r7, #24
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
	...

080092d4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b098      	sub	sp, #96	@ 0x60
 80092d8:	af00      	add	r7, sp, #0
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	60b9      	str	r1, [r7, #8]
 80092de:	4613      	mov	r3, r2
 80092e0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80092e2:	68ba      	ldr	r2, [r7, #8]
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	88fa      	ldrh	r2, [r7, #6]
 80092ec:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2200      	movs	r2, #0
 80092f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2222      	movs	r2, #34	@ 0x22
 80092f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009300:	4a3e      	ldr	r2, [pc, #248]	@ (80093fc <UART_Start_Receive_DMA+0x128>)
 8009302:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009308:	4a3d      	ldr	r2, [pc, #244]	@ (8009400 <UART_Start_Receive_DMA+0x12c>)
 800930a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009310:	4a3c      	ldr	r2, [pc, #240]	@ (8009404 <UART_Start_Receive_DMA+0x130>)
 8009312:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009318:	2200      	movs	r2, #0
 800931a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800931c:	f107 0308 	add.w	r3, r7, #8
 8009320:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	3304      	adds	r3, #4
 800932c:	4619      	mov	r1, r3
 800932e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009330:	681a      	ldr	r2, [r3, #0]
 8009332:	88fb      	ldrh	r3, [r7, #6]
 8009334:	f7fb ffdc 	bl	80052f0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009338:	2300      	movs	r3, #0
 800933a:	613b      	str	r3, [r7, #16]
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	613b      	str	r3, [r7, #16]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	685b      	ldr	r3, [r3, #4]
 800934a:	613b      	str	r3, [r7, #16]
 800934c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	691b      	ldr	r3, [r3, #16]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d019      	beq.n	800938a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	330c      	adds	r3, #12
 800935c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800935e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009360:	e853 3f00 	ldrex	r3, [r3]
 8009364:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009368:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800936c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	330c      	adds	r3, #12
 8009374:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009376:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8009378:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800937a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800937c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800937e:	e841 2300 	strex	r3, r2, [r1]
 8009382:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009384:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009386:	2b00      	cmp	r3, #0
 8009388:	d1e5      	bne.n	8009356 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	3314      	adds	r3, #20
 8009390:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009394:	e853 3f00 	ldrex	r3, [r3]
 8009398:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800939a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800939c:	f043 0301 	orr.w	r3, r3, #1
 80093a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	3314      	adds	r3, #20
 80093a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80093aa:	63ba      	str	r2, [r7, #56]	@ 0x38
 80093ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ae:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80093b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80093b2:	e841 2300 	strex	r3, r2, [r1]
 80093b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80093b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d1e5      	bne.n	800938a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	3314      	adds	r3, #20
 80093c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c6:	69bb      	ldr	r3, [r7, #24]
 80093c8:	e853 3f00 	ldrex	r3, [r3]
 80093cc:	617b      	str	r3, [r7, #20]
   return(result);
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093d4:	653b      	str	r3, [r7, #80]	@ 0x50
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	3314      	adds	r3, #20
 80093dc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80093de:	627a      	str	r2, [r7, #36]	@ 0x24
 80093e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e2:	6a39      	ldr	r1, [r7, #32]
 80093e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093e6:	e841 2300 	strex	r3, r2, [r1]
 80093ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d1e5      	bne.n	80093be <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80093f2:	2300      	movs	r3, #0
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3760      	adds	r7, #96	@ 0x60
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}
 80093fc:	08009025 	.word	0x08009025
 8009400:	08009151 	.word	0x08009151
 8009404:	0800918d 	.word	0x0800918d

08009408 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009408:	b480      	push	{r7}
 800940a:	b089      	sub	sp, #36	@ 0x24
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	330c      	adds	r3, #12
 8009416:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	e853 3f00 	ldrex	r3, [r3]
 800941e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009426:	61fb      	str	r3, [r7, #28]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	330c      	adds	r3, #12
 800942e:	69fa      	ldr	r2, [r7, #28]
 8009430:	61ba      	str	r2, [r7, #24]
 8009432:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009434:	6979      	ldr	r1, [r7, #20]
 8009436:	69ba      	ldr	r2, [r7, #24]
 8009438:	e841 2300 	strex	r3, r2, [r1]
 800943c:	613b      	str	r3, [r7, #16]
   return(result);
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d1e5      	bne.n	8009410 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2220      	movs	r2, #32
 8009448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800944c:	bf00      	nop
 800944e:	3724      	adds	r7, #36	@ 0x24
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr

08009458 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009458:	b480      	push	{r7}
 800945a:	b095      	sub	sp, #84	@ 0x54
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	330c      	adds	r3, #12
 8009466:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800946a:	e853 3f00 	ldrex	r3, [r3]
 800946e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009472:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009476:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	330c      	adds	r3, #12
 800947e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009480:	643a      	str	r2, [r7, #64]	@ 0x40
 8009482:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009484:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009486:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009488:	e841 2300 	strex	r3, r2, [r1]
 800948c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800948e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009490:	2b00      	cmp	r3, #0
 8009492:	d1e5      	bne.n	8009460 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	3314      	adds	r3, #20
 800949a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800949c:	6a3b      	ldr	r3, [r7, #32]
 800949e:	e853 3f00 	ldrex	r3, [r3]
 80094a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80094a4:	69fb      	ldr	r3, [r7, #28]
 80094a6:	f023 0301 	bic.w	r3, r3, #1
 80094aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	3314      	adds	r3, #20
 80094b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80094b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80094b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80094ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094bc:	e841 2300 	strex	r3, r2, [r1]
 80094c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80094c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d1e5      	bne.n	8009494 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d119      	bne.n	8009504 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	330c      	adds	r3, #12
 80094d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	e853 3f00 	ldrex	r3, [r3]
 80094de:	60bb      	str	r3, [r7, #8]
   return(result);
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	f023 0310 	bic.w	r3, r3, #16
 80094e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	330c      	adds	r3, #12
 80094ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094f0:	61ba      	str	r2, [r7, #24]
 80094f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f4:	6979      	ldr	r1, [r7, #20]
 80094f6:	69ba      	ldr	r2, [r7, #24]
 80094f8:	e841 2300 	strex	r3, r2, [r1]
 80094fc:	613b      	str	r3, [r7, #16]
   return(result);
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d1e5      	bne.n	80094d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2220      	movs	r2, #32
 8009508:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2200      	movs	r2, #0
 8009510:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009512:	bf00      	nop
 8009514:	3754      	adds	r7, #84	@ 0x54
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr
	...

08009520 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009524:	b0c0      	sub	sp, #256	@ 0x100
 8009526:	af00      	add	r7, sp, #0
 8009528:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800952c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	691b      	ldr	r3, [r3, #16]
 8009534:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800953c:	68d9      	ldr	r1, [r3, #12]
 800953e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	ea40 0301 	orr.w	r3, r0, r1
 8009548:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800954a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800954e:	689a      	ldr	r2, [r3, #8]
 8009550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009554:	691b      	ldr	r3, [r3, #16]
 8009556:	431a      	orrs	r2, r3
 8009558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800955c:	695b      	ldr	r3, [r3, #20]
 800955e:	431a      	orrs	r2, r3
 8009560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009564:	69db      	ldr	r3, [r3, #28]
 8009566:	4313      	orrs	r3, r2
 8009568:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800956c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	68db      	ldr	r3, [r3, #12]
 8009574:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009578:	f021 010c 	bic.w	r1, r1, #12
 800957c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009586:	430b      	orrs	r3, r1
 8009588:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800958a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	695b      	ldr	r3, [r3, #20]
 8009592:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800959a:	6999      	ldr	r1, [r3, #24]
 800959c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095a0:	681a      	ldr	r2, [r3, #0]
 80095a2:	ea40 0301 	orr.w	r3, r0, r1
 80095a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80095a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	4b8f      	ldr	r3, [pc, #572]	@ (80097ec <UART_SetConfig+0x2cc>)
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d005      	beq.n	80095c0 <UART_SetConfig+0xa0>
 80095b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	4b8d      	ldr	r3, [pc, #564]	@ (80097f0 <UART_SetConfig+0x2d0>)
 80095bc:	429a      	cmp	r2, r3
 80095be:	d104      	bne.n	80095ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80095c0:	f7fe f8aa 	bl	8007718 <HAL_RCC_GetPCLK2Freq>
 80095c4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80095c8:	e003      	b.n	80095d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80095ca:	f7fe f891 	bl	80076f0 <HAL_RCC_GetPCLK1Freq>
 80095ce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095d6:	69db      	ldr	r3, [r3, #28]
 80095d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80095dc:	f040 810c 	bne.w	80097f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80095e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80095e4:	2200      	movs	r2, #0
 80095e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80095ea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80095ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80095f2:	4622      	mov	r2, r4
 80095f4:	462b      	mov	r3, r5
 80095f6:	1891      	adds	r1, r2, r2
 80095f8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80095fa:	415b      	adcs	r3, r3
 80095fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80095fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009602:	4621      	mov	r1, r4
 8009604:	eb12 0801 	adds.w	r8, r2, r1
 8009608:	4629      	mov	r1, r5
 800960a:	eb43 0901 	adc.w	r9, r3, r1
 800960e:	f04f 0200 	mov.w	r2, #0
 8009612:	f04f 0300 	mov.w	r3, #0
 8009616:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800961a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800961e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009622:	4690      	mov	r8, r2
 8009624:	4699      	mov	r9, r3
 8009626:	4623      	mov	r3, r4
 8009628:	eb18 0303 	adds.w	r3, r8, r3
 800962c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009630:	462b      	mov	r3, r5
 8009632:	eb49 0303 	adc.w	r3, r9, r3
 8009636:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800963a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	2200      	movs	r2, #0
 8009642:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009646:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800964a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800964e:	460b      	mov	r3, r1
 8009650:	18db      	adds	r3, r3, r3
 8009652:	653b      	str	r3, [r7, #80]	@ 0x50
 8009654:	4613      	mov	r3, r2
 8009656:	eb42 0303 	adc.w	r3, r2, r3
 800965a:	657b      	str	r3, [r7, #84]	@ 0x54
 800965c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009660:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009664:	f7f7 fb18 	bl	8000c98 <__aeabi_uldivmod>
 8009668:	4602      	mov	r2, r0
 800966a:	460b      	mov	r3, r1
 800966c:	4b61      	ldr	r3, [pc, #388]	@ (80097f4 <UART_SetConfig+0x2d4>)
 800966e:	fba3 2302 	umull	r2, r3, r3, r2
 8009672:	095b      	lsrs	r3, r3, #5
 8009674:	011c      	lsls	r4, r3, #4
 8009676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800967a:	2200      	movs	r2, #0
 800967c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009680:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009684:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009688:	4642      	mov	r2, r8
 800968a:	464b      	mov	r3, r9
 800968c:	1891      	adds	r1, r2, r2
 800968e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009690:	415b      	adcs	r3, r3
 8009692:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009694:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009698:	4641      	mov	r1, r8
 800969a:	eb12 0a01 	adds.w	sl, r2, r1
 800969e:	4649      	mov	r1, r9
 80096a0:	eb43 0b01 	adc.w	fp, r3, r1
 80096a4:	f04f 0200 	mov.w	r2, #0
 80096a8:	f04f 0300 	mov.w	r3, #0
 80096ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80096b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80096b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80096b8:	4692      	mov	sl, r2
 80096ba:	469b      	mov	fp, r3
 80096bc:	4643      	mov	r3, r8
 80096be:	eb1a 0303 	adds.w	r3, sl, r3
 80096c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80096c6:	464b      	mov	r3, r9
 80096c8:	eb4b 0303 	adc.w	r3, fp, r3
 80096cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80096d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80096dc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80096e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80096e4:	460b      	mov	r3, r1
 80096e6:	18db      	adds	r3, r3, r3
 80096e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80096ea:	4613      	mov	r3, r2
 80096ec:	eb42 0303 	adc.w	r3, r2, r3
 80096f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80096f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80096f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80096fa:	f7f7 facd 	bl	8000c98 <__aeabi_uldivmod>
 80096fe:	4602      	mov	r2, r0
 8009700:	460b      	mov	r3, r1
 8009702:	4611      	mov	r1, r2
 8009704:	4b3b      	ldr	r3, [pc, #236]	@ (80097f4 <UART_SetConfig+0x2d4>)
 8009706:	fba3 2301 	umull	r2, r3, r3, r1
 800970a:	095b      	lsrs	r3, r3, #5
 800970c:	2264      	movs	r2, #100	@ 0x64
 800970e:	fb02 f303 	mul.w	r3, r2, r3
 8009712:	1acb      	subs	r3, r1, r3
 8009714:	00db      	lsls	r3, r3, #3
 8009716:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800971a:	4b36      	ldr	r3, [pc, #216]	@ (80097f4 <UART_SetConfig+0x2d4>)
 800971c:	fba3 2302 	umull	r2, r3, r3, r2
 8009720:	095b      	lsrs	r3, r3, #5
 8009722:	005b      	lsls	r3, r3, #1
 8009724:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009728:	441c      	add	r4, r3
 800972a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800972e:	2200      	movs	r2, #0
 8009730:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009734:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009738:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800973c:	4642      	mov	r2, r8
 800973e:	464b      	mov	r3, r9
 8009740:	1891      	adds	r1, r2, r2
 8009742:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009744:	415b      	adcs	r3, r3
 8009746:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009748:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800974c:	4641      	mov	r1, r8
 800974e:	1851      	adds	r1, r2, r1
 8009750:	6339      	str	r1, [r7, #48]	@ 0x30
 8009752:	4649      	mov	r1, r9
 8009754:	414b      	adcs	r3, r1
 8009756:	637b      	str	r3, [r7, #52]	@ 0x34
 8009758:	f04f 0200 	mov.w	r2, #0
 800975c:	f04f 0300 	mov.w	r3, #0
 8009760:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009764:	4659      	mov	r1, fp
 8009766:	00cb      	lsls	r3, r1, #3
 8009768:	4651      	mov	r1, sl
 800976a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800976e:	4651      	mov	r1, sl
 8009770:	00ca      	lsls	r2, r1, #3
 8009772:	4610      	mov	r0, r2
 8009774:	4619      	mov	r1, r3
 8009776:	4603      	mov	r3, r0
 8009778:	4642      	mov	r2, r8
 800977a:	189b      	adds	r3, r3, r2
 800977c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009780:	464b      	mov	r3, r9
 8009782:	460a      	mov	r2, r1
 8009784:	eb42 0303 	adc.w	r3, r2, r3
 8009788:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800978c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	2200      	movs	r2, #0
 8009794:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009798:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800979c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80097a0:	460b      	mov	r3, r1
 80097a2:	18db      	adds	r3, r3, r3
 80097a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80097a6:	4613      	mov	r3, r2
 80097a8:	eb42 0303 	adc.w	r3, r2, r3
 80097ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80097ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80097b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80097b6:	f7f7 fa6f 	bl	8000c98 <__aeabi_uldivmod>
 80097ba:	4602      	mov	r2, r0
 80097bc:	460b      	mov	r3, r1
 80097be:	4b0d      	ldr	r3, [pc, #52]	@ (80097f4 <UART_SetConfig+0x2d4>)
 80097c0:	fba3 1302 	umull	r1, r3, r3, r2
 80097c4:	095b      	lsrs	r3, r3, #5
 80097c6:	2164      	movs	r1, #100	@ 0x64
 80097c8:	fb01 f303 	mul.w	r3, r1, r3
 80097cc:	1ad3      	subs	r3, r2, r3
 80097ce:	00db      	lsls	r3, r3, #3
 80097d0:	3332      	adds	r3, #50	@ 0x32
 80097d2:	4a08      	ldr	r2, [pc, #32]	@ (80097f4 <UART_SetConfig+0x2d4>)
 80097d4:	fba2 2303 	umull	r2, r3, r2, r3
 80097d8:	095b      	lsrs	r3, r3, #5
 80097da:	f003 0207 	and.w	r2, r3, #7
 80097de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4422      	add	r2, r4
 80097e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80097e8:	e106      	b.n	80099f8 <UART_SetConfig+0x4d8>
 80097ea:	bf00      	nop
 80097ec:	40011000 	.word	0x40011000
 80097f0:	40011400 	.word	0x40011400
 80097f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80097f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80097fc:	2200      	movs	r2, #0
 80097fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009802:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009806:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800980a:	4642      	mov	r2, r8
 800980c:	464b      	mov	r3, r9
 800980e:	1891      	adds	r1, r2, r2
 8009810:	6239      	str	r1, [r7, #32]
 8009812:	415b      	adcs	r3, r3
 8009814:	627b      	str	r3, [r7, #36]	@ 0x24
 8009816:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800981a:	4641      	mov	r1, r8
 800981c:	1854      	adds	r4, r2, r1
 800981e:	4649      	mov	r1, r9
 8009820:	eb43 0501 	adc.w	r5, r3, r1
 8009824:	f04f 0200 	mov.w	r2, #0
 8009828:	f04f 0300 	mov.w	r3, #0
 800982c:	00eb      	lsls	r3, r5, #3
 800982e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009832:	00e2      	lsls	r2, r4, #3
 8009834:	4614      	mov	r4, r2
 8009836:	461d      	mov	r5, r3
 8009838:	4643      	mov	r3, r8
 800983a:	18e3      	adds	r3, r4, r3
 800983c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009840:	464b      	mov	r3, r9
 8009842:	eb45 0303 	adc.w	r3, r5, r3
 8009846:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800984a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800984e:	685b      	ldr	r3, [r3, #4]
 8009850:	2200      	movs	r2, #0
 8009852:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009856:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800985a:	f04f 0200 	mov.w	r2, #0
 800985e:	f04f 0300 	mov.w	r3, #0
 8009862:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009866:	4629      	mov	r1, r5
 8009868:	008b      	lsls	r3, r1, #2
 800986a:	4621      	mov	r1, r4
 800986c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009870:	4621      	mov	r1, r4
 8009872:	008a      	lsls	r2, r1, #2
 8009874:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009878:	f7f7 fa0e 	bl	8000c98 <__aeabi_uldivmod>
 800987c:	4602      	mov	r2, r0
 800987e:	460b      	mov	r3, r1
 8009880:	4b60      	ldr	r3, [pc, #384]	@ (8009a04 <UART_SetConfig+0x4e4>)
 8009882:	fba3 2302 	umull	r2, r3, r3, r2
 8009886:	095b      	lsrs	r3, r3, #5
 8009888:	011c      	lsls	r4, r3, #4
 800988a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800988e:	2200      	movs	r2, #0
 8009890:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009894:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009898:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800989c:	4642      	mov	r2, r8
 800989e:	464b      	mov	r3, r9
 80098a0:	1891      	adds	r1, r2, r2
 80098a2:	61b9      	str	r1, [r7, #24]
 80098a4:	415b      	adcs	r3, r3
 80098a6:	61fb      	str	r3, [r7, #28]
 80098a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80098ac:	4641      	mov	r1, r8
 80098ae:	1851      	adds	r1, r2, r1
 80098b0:	6139      	str	r1, [r7, #16]
 80098b2:	4649      	mov	r1, r9
 80098b4:	414b      	adcs	r3, r1
 80098b6:	617b      	str	r3, [r7, #20]
 80098b8:	f04f 0200 	mov.w	r2, #0
 80098bc:	f04f 0300 	mov.w	r3, #0
 80098c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80098c4:	4659      	mov	r1, fp
 80098c6:	00cb      	lsls	r3, r1, #3
 80098c8:	4651      	mov	r1, sl
 80098ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80098ce:	4651      	mov	r1, sl
 80098d0:	00ca      	lsls	r2, r1, #3
 80098d2:	4610      	mov	r0, r2
 80098d4:	4619      	mov	r1, r3
 80098d6:	4603      	mov	r3, r0
 80098d8:	4642      	mov	r2, r8
 80098da:	189b      	adds	r3, r3, r2
 80098dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80098e0:	464b      	mov	r3, r9
 80098e2:	460a      	mov	r2, r1
 80098e4:	eb42 0303 	adc.w	r3, r2, r3
 80098e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80098ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	2200      	movs	r2, #0
 80098f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80098f6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80098f8:	f04f 0200 	mov.w	r2, #0
 80098fc:	f04f 0300 	mov.w	r3, #0
 8009900:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009904:	4649      	mov	r1, r9
 8009906:	008b      	lsls	r3, r1, #2
 8009908:	4641      	mov	r1, r8
 800990a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800990e:	4641      	mov	r1, r8
 8009910:	008a      	lsls	r2, r1, #2
 8009912:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009916:	f7f7 f9bf 	bl	8000c98 <__aeabi_uldivmod>
 800991a:	4602      	mov	r2, r0
 800991c:	460b      	mov	r3, r1
 800991e:	4611      	mov	r1, r2
 8009920:	4b38      	ldr	r3, [pc, #224]	@ (8009a04 <UART_SetConfig+0x4e4>)
 8009922:	fba3 2301 	umull	r2, r3, r3, r1
 8009926:	095b      	lsrs	r3, r3, #5
 8009928:	2264      	movs	r2, #100	@ 0x64
 800992a:	fb02 f303 	mul.w	r3, r2, r3
 800992e:	1acb      	subs	r3, r1, r3
 8009930:	011b      	lsls	r3, r3, #4
 8009932:	3332      	adds	r3, #50	@ 0x32
 8009934:	4a33      	ldr	r2, [pc, #204]	@ (8009a04 <UART_SetConfig+0x4e4>)
 8009936:	fba2 2303 	umull	r2, r3, r2, r3
 800993a:	095b      	lsrs	r3, r3, #5
 800993c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009940:	441c      	add	r4, r3
 8009942:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009946:	2200      	movs	r2, #0
 8009948:	673b      	str	r3, [r7, #112]	@ 0x70
 800994a:	677a      	str	r2, [r7, #116]	@ 0x74
 800994c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009950:	4642      	mov	r2, r8
 8009952:	464b      	mov	r3, r9
 8009954:	1891      	adds	r1, r2, r2
 8009956:	60b9      	str	r1, [r7, #8]
 8009958:	415b      	adcs	r3, r3
 800995a:	60fb      	str	r3, [r7, #12]
 800995c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009960:	4641      	mov	r1, r8
 8009962:	1851      	adds	r1, r2, r1
 8009964:	6039      	str	r1, [r7, #0]
 8009966:	4649      	mov	r1, r9
 8009968:	414b      	adcs	r3, r1
 800996a:	607b      	str	r3, [r7, #4]
 800996c:	f04f 0200 	mov.w	r2, #0
 8009970:	f04f 0300 	mov.w	r3, #0
 8009974:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009978:	4659      	mov	r1, fp
 800997a:	00cb      	lsls	r3, r1, #3
 800997c:	4651      	mov	r1, sl
 800997e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009982:	4651      	mov	r1, sl
 8009984:	00ca      	lsls	r2, r1, #3
 8009986:	4610      	mov	r0, r2
 8009988:	4619      	mov	r1, r3
 800998a:	4603      	mov	r3, r0
 800998c:	4642      	mov	r2, r8
 800998e:	189b      	adds	r3, r3, r2
 8009990:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009992:	464b      	mov	r3, r9
 8009994:	460a      	mov	r2, r1
 8009996:	eb42 0303 	adc.w	r3, r2, r3
 800999a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800999c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	2200      	movs	r2, #0
 80099a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80099a6:	667a      	str	r2, [r7, #100]	@ 0x64
 80099a8:	f04f 0200 	mov.w	r2, #0
 80099ac:	f04f 0300 	mov.w	r3, #0
 80099b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80099b4:	4649      	mov	r1, r9
 80099b6:	008b      	lsls	r3, r1, #2
 80099b8:	4641      	mov	r1, r8
 80099ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80099be:	4641      	mov	r1, r8
 80099c0:	008a      	lsls	r2, r1, #2
 80099c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80099c6:	f7f7 f967 	bl	8000c98 <__aeabi_uldivmod>
 80099ca:	4602      	mov	r2, r0
 80099cc:	460b      	mov	r3, r1
 80099ce:	4b0d      	ldr	r3, [pc, #52]	@ (8009a04 <UART_SetConfig+0x4e4>)
 80099d0:	fba3 1302 	umull	r1, r3, r3, r2
 80099d4:	095b      	lsrs	r3, r3, #5
 80099d6:	2164      	movs	r1, #100	@ 0x64
 80099d8:	fb01 f303 	mul.w	r3, r1, r3
 80099dc:	1ad3      	subs	r3, r2, r3
 80099de:	011b      	lsls	r3, r3, #4
 80099e0:	3332      	adds	r3, #50	@ 0x32
 80099e2:	4a08      	ldr	r2, [pc, #32]	@ (8009a04 <UART_SetConfig+0x4e4>)
 80099e4:	fba2 2303 	umull	r2, r3, r2, r3
 80099e8:	095b      	lsrs	r3, r3, #5
 80099ea:	f003 020f 	and.w	r2, r3, #15
 80099ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4422      	add	r2, r4
 80099f6:	609a      	str	r2, [r3, #8]
}
 80099f8:	bf00      	nop
 80099fa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80099fe:	46bd      	mov	sp, r7
 8009a00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a04:	51eb851f 	.word	0x51eb851f

08009a08 <__NVIC_SetPriority>:
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b083      	sub	sp, #12
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	4603      	mov	r3, r0
 8009a10:	6039      	str	r1, [r7, #0]
 8009a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	db0a      	blt.n	8009a32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	b2da      	uxtb	r2, r3
 8009a20:	490c      	ldr	r1, [pc, #48]	@ (8009a54 <__NVIC_SetPriority+0x4c>)
 8009a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a26:	0112      	lsls	r2, r2, #4
 8009a28:	b2d2      	uxtb	r2, r2
 8009a2a:	440b      	add	r3, r1
 8009a2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009a30:	e00a      	b.n	8009a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	b2da      	uxtb	r2, r3
 8009a36:	4908      	ldr	r1, [pc, #32]	@ (8009a58 <__NVIC_SetPriority+0x50>)
 8009a38:	79fb      	ldrb	r3, [r7, #7]
 8009a3a:	f003 030f 	and.w	r3, r3, #15
 8009a3e:	3b04      	subs	r3, #4
 8009a40:	0112      	lsls	r2, r2, #4
 8009a42:	b2d2      	uxtb	r2, r2
 8009a44:	440b      	add	r3, r1
 8009a46:	761a      	strb	r2, [r3, #24]
}
 8009a48:	bf00      	nop
 8009a4a:	370c      	adds	r7, #12
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr
 8009a54:	e000e100 	.word	0xe000e100
 8009a58:	e000ed00 	.word	0xe000ed00

08009a5c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009a60:	4b05      	ldr	r3, [pc, #20]	@ (8009a78 <SysTick_Handler+0x1c>)
 8009a62:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009a64:	f002 f86c 	bl	800bb40 <xTaskGetSchedulerState>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d001      	beq.n	8009a72 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009a6e:	f002 fe63 	bl	800c738 <xPortSysTickHandler>
  }
}
 8009a72:	bf00      	nop
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	e000e010 	.word	0xe000e010

08009a7c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009a80:	2100      	movs	r1, #0
 8009a82:	f06f 0004 	mvn.w	r0, #4
 8009a86:	f7ff ffbf 	bl	8009a08 <__NVIC_SetPriority>
#endif
}
 8009a8a:	bf00      	nop
 8009a8c:	bd80      	pop	{r7, pc}
	...

08009a90 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009a90:	b480      	push	{r7}
 8009a92:	b083      	sub	sp, #12
 8009a94:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a96:	f3ef 8305 	mrs	r3, IPSR
 8009a9a:	603b      	str	r3, [r7, #0]
  return(result);
 8009a9c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d003      	beq.n	8009aaa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009aa2:	f06f 0305 	mvn.w	r3, #5
 8009aa6:	607b      	str	r3, [r7, #4]
 8009aa8:	e00c      	b.n	8009ac4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8009ad4 <osKernelInitialize+0x44>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d105      	bne.n	8009abe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009ab2:	4b08      	ldr	r3, [pc, #32]	@ (8009ad4 <osKernelInitialize+0x44>)
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	607b      	str	r3, [r7, #4]
 8009abc:	e002      	b.n	8009ac4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009abe:	f04f 33ff 	mov.w	r3, #4294967295
 8009ac2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009ac4:	687b      	ldr	r3, [r7, #4]
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	370c      	adds	r7, #12
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr
 8009ad2:	bf00      	nop
 8009ad4:	20000724 	.word	0x20000724

08009ad8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b082      	sub	sp, #8
 8009adc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ade:	f3ef 8305 	mrs	r3, IPSR
 8009ae2:	603b      	str	r3, [r7, #0]
  return(result);
 8009ae4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d003      	beq.n	8009af2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009aea:	f06f 0305 	mvn.w	r3, #5
 8009aee:	607b      	str	r3, [r7, #4]
 8009af0:	e010      	b.n	8009b14 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009af2:	4b0b      	ldr	r3, [pc, #44]	@ (8009b20 <osKernelStart+0x48>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d109      	bne.n	8009b0e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009afa:	f7ff ffbf 	bl	8009a7c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009afe:	4b08      	ldr	r3, [pc, #32]	@ (8009b20 <osKernelStart+0x48>)
 8009b00:	2202      	movs	r2, #2
 8009b02:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009b04:	f001 fae4 	bl	800b0d0 <vTaskStartScheduler>
      stat = osOK;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	607b      	str	r3, [r7, #4]
 8009b0c:	e002      	b.n	8009b14 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8009b12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009b14:	687b      	ldr	r3, [r7, #4]
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3708      	adds	r7, #8
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	bf00      	nop
 8009b20:	20000724 	.word	0x20000724

08009b24 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b08e      	sub	sp, #56	@ 0x38
 8009b28:	af04      	add	r7, sp, #16
 8009b2a:	60f8      	str	r0, [r7, #12]
 8009b2c:	60b9      	str	r1, [r7, #8]
 8009b2e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009b30:	2300      	movs	r3, #0
 8009b32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b34:	f3ef 8305 	mrs	r3, IPSR
 8009b38:	617b      	str	r3, [r7, #20]
  return(result);
 8009b3a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d17e      	bne.n	8009c3e <osThreadNew+0x11a>
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d07b      	beq.n	8009c3e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009b46:	2380      	movs	r3, #128	@ 0x80
 8009b48:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009b4a:	2318      	movs	r3, #24
 8009b4c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009b52:	f04f 33ff 	mov.w	r3, #4294967295
 8009b56:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d045      	beq.n	8009bea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d002      	beq.n	8009b6c <osThreadNew+0x48>
        name = attr->name;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	699b      	ldr	r3, [r3, #24]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d002      	beq.n	8009b7a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	699b      	ldr	r3, [r3, #24]
 8009b78:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009b7a:	69fb      	ldr	r3, [r7, #28]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d008      	beq.n	8009b92 <osThreadNew+0x6e>
 8009b80:	69fb      	ldr	r3, [r7, #28]
 8009b82:	2b38      	cmp	r3, #56	@ 0x38
 8009b84:	d805      	bhi.n	8009b92 <osThreadNew+0x6e>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	685b      	ldr	r3, [r3, #4]
 8009b8a:	f003 0301 	and.w	r3, r3, #1
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d001      	beq.n	8009b96 <osThreadNew+0x72>
        return (NULL);
 8009b92:	2300      	movs	r3, #0
 8009b94:	e054      	b.n	8009c40 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	695b      	ldr	r3, [r3, #20]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d003      	beq.n	8009ba6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	695b      	ldr	r3, [r3, #20]
 8009ba2:	089b      	lsrs	r3, r3, #2
 8009ba4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	689b      	ldr	r3, [r3, #8]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d00e      	beq.n	8009bcc <osThreadNew+0xa8>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	68db      	ldr	r3, [r3, #12]
 8009bb2:	2baf      	cmp	r3, #175	@ 0xaf
 8009bb4:	d90a      	bls.n	8009bcc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d006      	beq.n	8009bcc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	695b      	ldr	r3, [r3, #20]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d002      	beq.n	8009bcc <osThreadNew+0xa8>
        mem = 1;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	61bb      	str	r3, [r7, #24]
 8009bca:	e010      	b.n	8009bee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d10c      	bne.n	8009bee <osThreadNew+0xca>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	68db      	ldr	r3, [r3, #12]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d108      	bne.n	8009bee <osThreadNew+0xca>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	691b      	ldr	r3, [r3, #16]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d104      	bne.n	8009bee <osThreadNew+0xca>
          mem = 0;
 8009be4:	2300      	movs	r3, #0
 8009be6:	61bb      	str	r3, [r7, #24]
 8009be8:	e001      	b.n	8009bee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009bea:	2300      	movs	r3, #0
 8009bec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009bee:	69bb      	ldr	r3, [r7, #24]
 8009bf0:	2b01      	cmp	r3, #1
 8009bf2:	d110      	bne.n	8009c16 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009bfc:	9202      	str	r2, [sp, #8]
 8009bfe:	9301      	str	r3, [sp, #4]
 8009c00:	69fb      	ldr	r3, [r7, #28]
 8009c02:	9300      	str	r3, [sp, #0]
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	6a3a      	ldr	r2, [r7, #32]
 8009c08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009c0a:	68f8      	ldr	r0, [r7, #12]
 8009c0c:	f001 f866 	bl	800acdc <xTaskCreateStatic>
 8009c10:	4603      	mov	r3, r0
 8009c12:	613b      	str	r3, [r7, #16]
 8009c14:	e013      	b.n	8009c3e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009c16:	69bb      	ldr	r3, [r7, #24]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d110      	bne.n	8009c3e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009c1c:	6a3b      	ldr	r3, [r7, #32]
 8009c1e:	b29a      	uxth	r2, r3
 8009c20:	f107 0310 	add.w	r3, r7, #16
 8009c24:	9301      	str	r3, [sp, #4]
 8009c26:	69fb      	ldr	r3, [r7, #28]
 8009c28:	9300      	str	r3, [sp, #0]
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009c2e:	68f8      	ldr	r0, [r7, #12]
 8009c30:	f001 f8b4 	bl	800ad9c <xTaskCreate>
 8009c34:	4603      	mov	r3, r0
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d001      	beq.n	8009c3e <osThreadNew+0x11a>
            hTask = NULL;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009c3e:	693b      	ldr	r3, [r7, #16]
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3728      	adds	r7, #40	@ 0x28
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b084      	sub	sp, #16
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c50:	f3ef 8305 	mrs	r3, IPSR
 8009c54:	60bb      	str	r3, [r7, #8]
  return(result);
 8009c56:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d003      	beq.n	8009c64 <osDelay+0x1c>
    stat = osErrorISR;
 8009c5c:	f06f 0305 	mvn.w	r3, #5
 8009c60:	60fb      	str	r3, [r7, #12]
 8009c62:	e007      	b.n	8009c74 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009c64:	2300      	movs	r3, #0
 8009c66:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d002      	beq.n	8009c74 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f001 f9f8 	bl	800b064 <vTaskDelay>
    }
  }

  return (stat);
 8009c74:	68fb      	ldr	r3, [r7, #12]
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3710      	adds	r7, #16
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}

08009c7e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009c7e:	b580      	push	{r7, lr}
 8009c80:	b08a      	sub	sp, #40	@ 0x28
 8009c82:	af02      	add	r7, sp, #8
 8009c84:	60f8      	str	r0, [r7, #12]
 8009c86:	60b9      	str	r1, [r7, #8]
 8009c88:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c8e:	f3ef 8305 	mrs	r3, IPSR
 8009c92:	613b      	str	r3, [r7, #16]
  return(result);
 8009c94:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d15f      	bne.n	8009d5a <osMessageQueueNew+0xdc>
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d05c      	beq.n	8009d5a <osMessageQueueNew+0xdc>
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d059      	beq.n	8009d5a <osMessageQueueNew+0xdc>
    mem = -1;
 8009ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8009caa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d029      	beq.n	8009d06 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	689b      	ldr	r3, [r3, #8]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d012      	beq.n	8009ce0 <osMessageQueueNew+0x62>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	68db      	ldr	r3, [r3, #12]
 8009cbe:	2b4f      	cmp	r3, #79	@ 0x4f
 8009cc0:	d90e      	bls.n	8009ce0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00a      	beq.n	8009ce0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	695a      	ldr	r2, [r3, #20]
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	68b9      	ldr	r1, [r7, #8]
 8009cd2:	fb01 f303 	mul.w	r3, r1, r3
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d302      	bcc.n	8009ce0 <osMessageQueueNew+0x62>
        mem = 1;
 8009cda:	2301      	movs	r3, #1
 8009cdc:	61bb      	str	r3, [r7, #24]
 8009cde:	e014      	b.n	8009d0a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	689b      	ldr	r3, [r3, #8]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d110      	bne.n	8009d0a <osMessageQueueNew+0x8c>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	68db      	ldr	r3, [r3, #12]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d10c      	bne.n	8009d0a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d108      	bne.n	8009d0a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	695b      	ldr	r3, [r3, #20]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d104      	bne.n	8009d0a <osMessageQueueNew+0x8c>
          mem = 0;
 8009d00:	2300      	movs	r3, #0
 8009d02:	61bb      	str	r3, [r7, #24]
 8009d04:	e001      	b.n	8009d0a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009d06:	2300      	movs	r3, #0
 8009d08:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009d0a:	69bb      	ldr	r3, [r7, #24]
 8009d0c:	2b01      	cmp	r3, #1
 8009d0e:	d10b      	bne.n	8009d28 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	691a      	ldr	r2, [r3, #16]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	689b      	ldr	r3, [r3, #8]
 8009d18:	2100      	movs	r1, #0
 8009d1a:	9100      	str	r1, [sp, #0]
 8009d1c:	68b9      	ldr	r1, [r7, #8]
 8009d1e:	68f8      	ldr	r0, [r7, #12]
 8009d20:	f000 fa50 	bl	800a1c4 <xQueueGenericCreateStatic>
 8009d24:	61f8      	str	r0, [r7, #28]
 8009d26:	e008      	b.n	8009d3a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009d28:	69bb      	ldr	r3, [r7, #24]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d105      	bne.n	8009d3a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009d2e:	2200      	movs	r2, #0
 8009d30:	68b9      	ldr	r1, [r7, #8]
 8009d32:	68f8      	ldr	r0, [r7, #12]
 8009d34:	f000 fac3 	bl	800a2be <xQueueGenericCreate>
 8009d38:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009d3a:	69fb      	ldr	r3, [r7, #28]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d00c      	beq.n	8009d5a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d003      	beq.n	8009d4e <osMessageQueueNew+0xd0>
        name = attr->name;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	617b      	str	r3, [r7, #20]
 8009d4c:	e001      	b.n	8009d52 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009d52:	6979      	ldr	r1, [r7, #20]
 8009d54:	69f8      	ldr	r0, [r7, #28]
 8009d56:	f000 ff63 	bl	800ac20 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009d5a:	69fb      	ldr	r3, [r7, #28]
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3720      	adds	r7, #32
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b088      	sub	sp, #32
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	60f8      	str	r0, [r7, #12]
 8009d6c:	60b9      	str	r1, [r7, #8]
 8009d6e:	603b      	str	r3, [r7, #0]
 8009d70:	4613      	mov	r3, r2
 8009d72:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d7c:	f3ef 8305 	mrs	r3, IPSR
 8009d80:	617b      	str	r3, [r7, #20]
  return(result);
 8009d82:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d028      	beq.n	8009dda <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009d88:	69bb      	ldr	r3, [r7, #24]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d005      	beq.n	8009d9a <osMessageQueuePut+0x36>
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d002      	beq.n	8009d9a <osMessageQueuePut+0x36>
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d003      	beq.n	8009da2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009d9a:	f06f 0303 	mvn.w	r3, #3
 8009d9e:	61fb      	str	r3, [r7, #28]
 8009da0:	e038      	b.n	8009e14 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8009da2:	2300      	movs	r3, #0
 8009da4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009da6:	f107 0210 	add.w	r2, r7, #16
 8009daa:	2300      	movs	r3, #0
 8009dac:	68b9      	ldr	r1, [r7, #8]
 8009dae:	69b8      	ldr	r0, [r7, #24]
 8009db0:	f000 fbe6 	bl	800a580 <xQueueGenericSendFromISR>
 8009db4:	4603      	mov	r3, r0
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	d003      	beq.n	8009dc2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009dba:	f06f 0302 	mvn.w	r3, #2
 8009dbe:	61fb      	str	r3, [r7, #28]
 8009dc0:	e028      	b.n	8009e14 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d025      	beq.n	8009e14 <osMessageQueuePut+0xb0>
 8009dc8:	4b15      	ldr	r3, [pc, #84]	@ (8009e20 <osMessageQueuePut+0xbc>)
 8009dca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009dce:	601a      	str	r2, [r3, #0]
 8009dd0:	f3bf 8f4f 	dsb	sy
 8009dd4:	f3bf 8f6f 	isb	sy
 8009dd8:	e01c      	b.n	8009e14 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009dda:	69bb      	ldr	r3, [r7, #24]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d002      	beq.n	8009de6 <osMessageQueuePut+0x82>
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d103      	bne.n	8009dee <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009de6:	f06f 0303 	mvn.w	r3, #3
 8009dea:	61fb      	str	r3, [r7, #28]
 8009dec:	e012      	b.n	8009e14 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009dee:	2300      	movs	r3, #0
 8009df0:	683a      	ldr	r2, [r7, #0]
 8009df2:	68b9      	ldr	r1, [r7, #8]
 8009df4:	69b8      	ldr	r0, [r7, #24]
 8009df6:	f000 fac1 	bl	800a37c <xQueueGenericSend>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d009      	beq.n	8009e14 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d003      	beq.n	8009e0e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009e06:	f06f 0301 	mvn.w	r3, #1
 8009e0a:	61fb      	str	r3, [r7, #28]
 8009e0c:	e002      	b.n	8009e14 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8009e0e:	f06f 0302 	mvn.w	r3, #2
 8009e12:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009e14:	69fb      	ldr	r3, [r7, #28]
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3720      	adds	r7, #32
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}
 8009e1e:	bf00      	nop
 8009e20:	e000ed04 	.word	0xe000ed04

08009e24 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b088      	sub	sp, #32
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	60f8      	str	r0, [r7, #12]
 8009e2c:	60b9      	str	r1, [r7, #8]
 8009e2e:	607a      	str	r2, [r7, #4]
 8009e30:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009e36:	2300      	movs	r3, #0
 8009e38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e3a:	f3ef 8305 	mrs	r3, IPSR
 8009e3e:	617b      	str	r3, [r7, #20]
  return(result);
 8009e40:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d028      	beq.n	8009e98 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009e46:	69bb      	ldr	r3, [r7, #24]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d005      	beq.n	8009e58 <osMessageQueueGet+0x34>
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d002      	beq.n	8009e58 <osMessageQueueGet+0x34>
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d003      	beq.n	8009e60 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009e58:	f06f 0303 	mvn.w	r3, #3
 8009e5c:	61fb      	str	r3, [r7, #28]
 8009e5e:	e037      	b.n	8009ed0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009e60:	2300      	movs	r3, #0
 8009e62:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009e64:	f107 0310 	add.w	r3, r7, #16
 8009e68:	461a      	mov	r2, r3
 8009e6a:	68b9      	ldr	r1, [r7, #8]
 8009e6c:	69b8      	ldr	r0, [r7, #24]
 8009e6e:	f000 fd07 	bl	800a880 <xQueueReceiveFromISR>
 8009e72:	4603      	mov	r3, r0
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	d003      	beq.n	8009e80 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009e78:	f06f 0302 	mvn.w	r3, #2
 8009e7c:	61fb      	str	r3, [r7, #28]
 8009e7e:	e027      	b.n	8009ed0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d024      	beq.n	8009ed0 <osMessageQueueGet+0xac>
 8009e86:	4b15      	ldr	r3, [pc, #84]	@ (8009edc <osMessageQueueGet+0xb8>)
 8009e88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e8c:	601a      	str	r2, [r3, #0]
 8009e8e:	f3bf 8f4f 	dsb	sy
 8009e92:	f3bf 8f6f 	isb	sy
 8009e96:	e01b      	b.n	8009ed0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009e98:	69bb      	ldr	r3, [r7, #24]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d002      	beq.n	8009ea4 <osMessageQueueGet+0x80>
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d103      	bne.n	8009eac <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009ea4:	f06f 0303 	mvn.w	r3, #3
 8009ea8:	61fb      	str	r3, [r7, #28]
 8009eaa:	e011      	b.n	8009ed0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009eac:	683a      	ldr	r2, [r7, #0]
 8009eae:	68b9      	ldr	r1, [r7, #8]
 8009eb0:	69b8      	ldr	r0, [r7, #24]
 8009eb2:	f000 fc03 	bl	800a6bc <xQueueReceive>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d009      	beq.n	8009ed0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d003      	beq.n	8009eca <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009ec2:	f06f 0301 	mvn.w	r3, #1
 8009ec6:	61fb      	str	r3, [r7, #28]
 8009ec8:	e002      	b.n	8009ed0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009eca:	f06f 0302 	mvn.w	r3, #2
 8009ece:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009ed0:	69fb      	ldr	r3, [r7, #28]
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3720      	adds	r7, #32
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
 8009eda:	bf00      	nop
 8009edc:	e000ed04 	.word	0xe000ed04

08009ee0 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b086      	sub	sp, #24
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d102      	bne.n	8009ef8 <osMessageQueueGetCount+0x18>
    count = 0U;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	617b      	str	r3, [r7, #20]
 8009ef6:	e00e      	b.n	8009f16 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ef8:	f3ef 8305 	mrs	r3, IPSR
 8009efc:	60fb      	str	r3, [r7, #12]
  return(result);
 8009efe:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d004      	beq.n	8009f0e <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8009f04:	6938      	ldr	r0, [r7, #16]
 8009f06:	f000 fd5c 	bl	800a9c2 <uxQueueMessagesWaitingFromISR>
 8009f0a:	6178      	str	r0, [r7, #20]
 8009f0c:	e003      	b.n	8009f16 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8009f0e:	6938      	ldr	r0, [r7, #16]
 8009f10:	f000 fd38 	bl	800a984 <uxQueueMessagesWaiting>
 8009f14:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8009f16:	697b      	ldr	r3, [r7, #20]
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3718      	adds	r7, #24
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009f20:	b480      	push	{r7}
 8009f22:	b085      	sub	sp, #20
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	60b9      	str	r1, [r7, #8]
 8009f2a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	4a07      	ldr	r2, [pc, #28]	@ (8009f4c <vApplicationGetIdleTaskMemory+0x2c>)
 8009f30:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	4a06      	ldr	r2, [pc, #24]	@ (8009f50 <vApplicationGetIdleTaskMemory+0x30>)
 8009f36:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2280      	movs	r2, #128	@ 0x80
 8009f3c:	601a      	str	r2, [r3, #0]
}
 8009f3e:	bf00      	nop
 8009f40:	3714      	adds	r7, #20
 8009f42:	46bd      	mov	sp, r7
 8009f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f48:	4770      	bx	lr
 8009f4a:	bf00      	nop
 8009f4c:	20000728 	.word	0x20000728
 8009f50:	200007d8 	.word	0x200007d8

08009f54 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009f54:	b480      	push	{r7}
 8009f56:	b085      	sub	sp, #20
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	60f8      	str	r0, [r7, #12]
 8009f5c:	60b9      	str	r1, [r7, #8]
 8009f5e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	4a07      	ldr	r2, [pc, #28]	@ (8009f80 <vApplicationGetTimerTaskMemory+0x2c>)
 8009f64:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	4a06      	ldr	r2, [pc, #24]	@ (8009f84 <vApplicationGetTimerTaskMemory+0x30>)
 8009f6a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009f72:	601a      	str	r2, [r3, #0]
}
 8009f74:	bf00      	nop
 8009f76:	3714      	adds	r7, #20
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr
 8009f80:	200009d8 	.word	0x200009d8
 8009f84:	20000a88 	.word	0x20000a88

08009f88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b083      	sub	sp, #12
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f103 0208 	add.w	r2, r3, #8
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8009fa0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f103 0208 	add.w	r2, r3, #8
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f103 0208 	add.w	r2, r3, #8
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009fbc:	bf00      	nop
 8009fbe:	370c      	adds	r7, #12
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr

08009fc8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b083      	sub	sp, #12
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009fd6:	bf00      	nop
 8009fd8:	370c      	adds	r7, #12
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe0:	4770      	bx	lr

08009fe2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009fe2:	b480      	push	{r7}
 8009fe4:	b085      	sub	sp, #20
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	6078      	str	r0, [r7, #4]
 8009fea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	68fa      	ldr	r2, [r7, #12]
 8009ff6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	689a      	ldr	r2, [r3, #8]
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	683a      	ldr	r2, [r7, #0]
 800a006:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	683a      	ldr	r2, [r7, #0]
 800a00c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	1c5a      	adds	r2, r3, #1
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	601a      	str	r2, [r3, #0]
}
 800a01e:	bf00      	nop
 800a020:	3714      	adds	r7, #20
 800a022:	46bd      	mov	sp, r7
 800a024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a028:	4770      	bx	lr

0800a02a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a02a:	b480      	push	{r7}
 800a02c:	b085      	sub	sp, #20
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
 800a032:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a040:	d103      	bne.n	800a04a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	691b      	ldr	r3, [r3, #16]
 800a046:	60fb      	str	r3, [r7, #12]
 800a048:	e00c      	b.n	800a064 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	3308      	adds	r3, #8
 800a04e:	60fb      	str	r3, [r7, #12]
 800a050:	e002      	b.n	800a058 <vListInsert+0x2e>
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	60fb      	str	r3, [r7, #12]
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	68ba      	ldr	r2, [r7, #8]
 800a060:	429a      	cmp	r2, r3
 800a062:	d2f6      	bcs.n	800a052 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	685a      	ldr	r2, [r3, #4]
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	683a      	ldr	r2, [r7, #0]
 800a072:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	68fa      	ldr	r2, [r7, #12]
 800a078:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	683a      	ldr	r2, [r7, #0]
 800a07e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	687a      	ldr	r2, [r7, #4]
 800a084:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	1c5a      	adds	r2, r3, #1
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	601a      	str	r2, [r3, #0]
}
 800a090:	bf00      	nop
 800a092:	3714      	adds	r7, #20
 800a094:	46bd      	mov	sp, r7
 800a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09a:	4770      	bx	lr

0800a09c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a09c:	b480      	push	{r7}
 800a09e:	b085      	sub	sp, #20
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	691b      	ldr	r3, [r3, #16]
 800a0a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	687a      	ldr	r2, [r7, #4]
 800a0b0:	6892      	ldr	r2, [r2, #8]
 800a0b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	689b      	ldr	r3, [r3, #8]
 800a0b8:	687a      	ldr	r2, [r7, #4]
 800a0ba:	6852      	ldr	r2, [r2, #4]
 800a0bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d103      	bne.n	800a0d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	689a      	ldr	r2, [r3, #8]
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	1e5a      	subs	r2, r3, #1
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3714      	adds	r7, #20
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr

0800a0f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b084      	sub	sp, #16
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d10b      	bne.n	800a11c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a108:	f383 8811 	msr	BASEPRI, r3
 800a10c:	f3bf 8f6f 	isb	sy
 800a110:	f3bf 8f4f 	dsb	sy
 800a114:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a116:	bf00      	nop
 800a118:	bf00      	nop
 800a11a:	e7fd      	b.n	800a118 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a11c:	f002 fa7c 	bl	800c618 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a128:	68f9      	ldr	r1, [r7, #12]
 800a12a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a12c:	fb01 f303 	mul.w	r3, r1, r3
 800a130:	441a      	add	r2, r3
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2200      	movs	r2, #0
 800a13a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681a      	ldr	r2, [r3, #0]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a14c:	3b01      	subs	r3, #1
 800a14e:	68f9      	ldr	r1, [r7, #12]
 800a150:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a152:	fb01 f303 	mul.w	r3, r1, r3
 800a156:	441a      	add	r2, r3
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	22ff      	movs	r2, #255	@ 0xff
 800a160:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	22ff      	movs	r2, #255	@ 0xff
 800a168:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d114      	bne.n	800a19c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	691b      	ldr	r3, [r3, #16]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d01a      	beq.n	800a1b0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	3310      	adds	r3, #16
 800a17e:	4618      	mov	r0, r3
 800a180:	f001 fac0 	bl	800b704 <xTaskRemoveFromEventList>
 800a184:	4603      	mov	r3, r0
 800a186:	2b00      	cmp	r3, #0
 800a188:	d012      	beq.n	800a1b0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a18a:	4b0d      	ldr	r3, [pc, #52]	@ (800a1c0 <xQueueGenericReset+0xd0>)
 800a18c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a190:	601a      	str	r2, [r3, #0]
 800a192:	f3bf 8f4f 	dsb	sy
 800a196:	f3bf 8f6f 	isb	sy
 800a19a:	e009      	b.n	800a1b0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	3310      	adds	r3, #16
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f7ff fef1 	bl	8009f88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	3324      	adds	r3, #36	@ 0x24
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f7ff feec 	bl	8009f88 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a1b0:	f002 fa64 	bl	800c67c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a1b4:	2301      	movs	r3, #1
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3710      	adds	r7, #16
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	e000ed04 	.word	0xe000ed04

0800a1c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b08e      	sub	sp, #56	@ 0x38
 800a1c8:	af02      	add	r7, sp, #8
 800a1ca:	60f8      	str	r0, [r7, #12]
 800a1cc:	60b9      	str	r1, [r7, #8]
 800a1ce:	607a      	str	r2, [r7, #4]
 800a1d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d10b      	bne.n	800a1f0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a1d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1dc:	f383 8811 	msr	BASEPRI, r3
 800a1e0:	f3bf 8f6f 	isb	sy
 800a1e4:	f3bf 8f4f 	dsb	sy
 800a1e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a1ea:	bf00      	nop
 800a1ec:	bf00      	nop
 800a1ee:	e7fd      	b.n	800a1ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d10b      	bne.n	800a20e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1fa:	f383 8811 	msr	BASEPRI, r3
 800a1fe:	f3bf 8f6f 	isb	sy
 800a202:	f3bf 8f4f 	dsb	sy
 800a206:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a208:	bf00      	nop
 800a20a:	bf00      	nop
 800a20c:	e7fd      	b.n	800a20a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d002      	beq.n	800a21a <xQueueGenericCreateStatic+0x56>
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d001      	beq.n	800a21e <xQueueGenericCreateStatic+0x5a>
 800a21a:	2301      	movs	r3, #1
 800a21c:	e000      	b.n	800a220 <xQueueGenericCreateStatic+0x5c>
 800a21e:	2300      	movs	r3, #0
 800a220:	2b00      	cmp	r3, #0
 800a222:	d10b      	bne.n	800a23c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a228:	f383 8811 	msr	BASEPRI, r3
 800a22c:	f3bf 8f6f 	isb	sy
 800a230:	f3bf 8f4f 	dsb	sy
 800a234:	623b      	str	r3, [r7, #32]
}
 800a236:	bf00      	nop
 800a238:	bf00      	nop
 800a23a:	e7fd      	b.n	800a238 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d102      	bne.n	800a248 <xQueueGenericCreateStatic+0x84>
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d101      	bne.n	800a24c <xQueueGenericCreateStatic+0x88>
 800a248:	2301      	movs	r3, #1
 800a24a:	e000      	b.n	800a24e <xQueueGenericCreateStatic+0x8a>
 800a24c:	2300      	movs	r3, #0
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d10b      	bne.n	800a26a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a256:	f383 8811 	msr	BASEPRI, r3
 800a25a:	f3bf 8f6f 	isb	sy
 800a25e:	f3bf 8f4f 	dsb	sy
 800a262:	61fb      	str	r3, [r7, #28]
}
 800a264:	bf00      	nop
 800a266:	bf00      	nop
 800a268:	e7fd      	b.n	800a266 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a26a:	2350      	movs	r3, #80	@ 0x50
 800a26c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	2b50      	cmp	r3, #80	@ 0x50
 800a272:	d00b      	beq.n	800a28c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a278:	f383 8811 	msr	BASEPRI, r3
 800a27c:	f3bf 8f6f 	isb	sy
 800a280:	f3bf 8f4f 	dsb	sy
 800a284:	61bb      	str	r3, [r7, #24]
}
 800a286:	bf00      	nop
 800a288:	bf00      	nop
 800a28a:	e7fd      	b.n	800a288 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a28c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a294:	2b00      	cmp	r3, #0
 800a296:	d00d      	beq.n	800a2b4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a29a:	2201      	movs	r2, #1
 800a29c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a2a0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a2a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2a6:	9300      	str	r3, [sp, #0]
 800a2a8:	4613      	mov	r3, r2
 800a2aa:	687a      	ldr	r2, [r7, #4]
 800a2ac:	68b9      	ldr	r1, [r7, #8]
 800a2ae:	68f8      	ldr	r0, [r7, #12]
 800a2b0:	f000 f840 	bl	800a334 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a2b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3730      	adds	r7, #48	@ 0x30
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}

0800a2be <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a2be:	b580      	push	{r7, lr}
 800a2c0:	b08a      	sub	sp, #40	@ 0x28
 800a2c2:	af02      	add	r7, sp, #8
 800a2c4:	60f8      	str	r0, [r7, #12]
 800a2c6:	60b9      	str	r1, [r7, #8]
 800a2c8:	4613      	mov	r3, r2
 800a2ca:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d10b      	bne.n	800a2ea <xQueueGenericCreate+0x2c>
	__asm volatile
 800a2d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2d6:	f383 8811 	msr	BASEPRI, r3
 800a2da:	f3bf 8f6f 	isb	sy
 800a2de:	f3bf 8f4f 	dsb	sy
 800a2e2:	613b      	str	r3, [r7, #16]
}
 800a2e4:	bf00      	nop
 800a2e6:	bf00      	nop
 800a2e8:	e7fd      	b.n	800a2e6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	68ba      	ldr	r2, [r7, #8]
 800a2ee:	fb02 f303 	mul.w	r3, r2, r3
 800a2f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a2f4:	69fb      	ldr	r3, [r7, #28]
 800a2f6:	3350      	adds	r3, #80	@ 0x50
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f002 fb93 	bl	800ca24 <pvPortMalloc>
 800a2fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a300:	69bb      	ldr	r3, [r7, #24]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d011      	beq.n	800a32a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a306:	69bb      	ldr	r3, [r7, #24]
 800a308:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	3350      	adds	r3, #80	@ 0x50
 800a30e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a310:	69bb      	ldr	r3, [r7, #24]
 800a312:	2200      	movs	r2, #0
 800a314:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a318:	79fa      	ldrb	r2, [r7, #7]
 800a31a:	69bb      	ldr	r3, [r7, #24]
 800a31c:	9300      	str	r3, [sp, #0]
 800a31e:	4613      	mov	r3, r2
 800a320:	697a      	ldr	r2, [r7, #20]
 800a322:	68b9      	ldr	r1, [r7, #8]
 800a324:	68f8      	ldr	r0, [r7, #12]
 800a326:	f000 f805 	bl	800a334 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a32a:	69bb      	ldr	r3, [r7, #24]
	}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3720      	adds	r7, #32
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b084      	sub	sp, #16
 800a338:	af00      	add	r7, sp, #0
 800a33a:	60f8      	str	r0, [r7, #12]
 800a33c:	60b9      	str	r1, [r7, #8]
 800a33e:	607a      	str	r2, [r7, #4]
 800a340:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d103      	bne.n	800a350 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a348:	69bb      	ldr	r3, [r7, #24]
 800a34a:	69ba      	ldr	r2, [r7, #24]
 800a34c:	601a      	str	r2, [r3, #0]
 800a34e:	e002      	b.n	800a356 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a350:	69bb      	ldr	r3, [r7, #24]
 800a352:	687a      	ldr	r2, [r7, #4]
 800a354:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a356:	69bb      	ldr	r3, [r7, #24]
 800a358:	68fa      	ldr	r2, [r7, #12]
 800a35a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a35c:	69bb      	ldr	r3, [r7, #24]
 800a35e:	68ba      	ldr	r2, [r7, #8]
 800a360:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a362:	2101      	movs	r1, #1
 800a364:	69b8      	ldr	r0, [r7, #24]
 800a366:	f7ff fec3 	bl	800a0f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a36a:	69bb      	ldr	r3, [r7, #24]
 800a36c:	78fa      	ldrb	r2, [r7, #3]
 800a36e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a372:	bf00      	nop
 800a374:	3710      	adds	r7, #16
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}
	...

0800a37c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b08e      	sub	sp, #56	@ 0x38
 800a380:	af00      	add	r7, sp, #0
 800a382:	60f8      	str	r0, [r7, #12]
 800a384:	60b9      	str	r1, [r7, #8]
 800a386:	607a      	str	r2, [r7, #4]
 800a388:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a38a:	2300      	movs	r3, #0
 800a38c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a394:	2b00      	cmp	r3, #0
 800a396:	d10b      	bne.n	800a3b0 <xQueueGenericSend+0x34>
	__asm volatile
 800a398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a39c:	f383 8811 	msr	BASEPRI, r3
 800a3a0:	f3bf 8f6f 	isb	sy
 800a3a4:	f3bf 8f4f 	dsb	sy
 800a3a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a3aa:	bf00      	nop
 800a3ac:	bf00      	nop
 800a3ae:	e7fd      	b.n	800a3ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d103      	bne.n	800a3be <xQueueGenericSend+0x42>
 800a3b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d101      	bne.n	800a3c2 <xQueueGenericSend+0x46>
 800a3be:	2301      	movs	r3, #1
 800a3c0:	e000      	b.n	800a3c4 <xQueueGenericSend+0x48>
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d10b      	bne.n	800a3e0 <xQueueGenericSend+0x64>
	__asm volatile
 800a3c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3cc:	f383 8811 	msr	BASEPRI, r3
 800a3d0:	f3bf 8f6f 	isb	sy
 800a3d4:	f3bf 8f4f 	dsb	sy
 800a3d8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a3da:	bf00      	nop
 800a3dc:	bf00      	nop
 800a3de:	e7fd      	b.n	800a3dc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	2b02      	cmp	r3, #2
 800a3e4:	d103      	bne.n	800a3ee <xQueueGenericSend+0x72>
 800a3e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3ea:	2b01      	cmp	r3, #1
 800a3ec:	d101      	bne.n	800a3f2 <xQueueGenericSend+0x76>
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	e000      	b.n	800a3f4 <xQueueGenericSend+0x78>
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d10b      	bne.n	800a410 <xQueueGenericSend+0x94>
	__asm volatile
 800a3f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3fc:	f383 8811 	msr	BASEPRI, r3
 800a400:	f3bf 8f6f 	isb	sy
 800a404:	f3bf 8f4f 	dsb	sy
 800a408:	623b      	str	r3, [r7, #32]
}
 800a40a:	bf00      	nop
 800a40c:	bf00      	nop
 800a40e:	e7fd      	b.n	800a40c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a410:	f001 fb96 	bl	800bb40 <xTaskGetSchedulerState>
 800a414:	4603      	mov	r3, r0
 800a416:	2b00      	cmp	r3, #0
 800a418:	d102      	bne.n	800a420 <xQueueGenericSend+0xa4>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d101      	bne.n	800a424 <xQueueGenericSend+0xa8>
 800a420:	2301      	movs	r3, #1
 800a422:	e000      	b.n	800a426 <xQueueGenericSend+0xaa>
 800a424:	2300      	movs	r3, #0
 800a426:	2b00      	cmp	r3, #0
 800a428:	d10b      	bne.n	800a442 <xQueueGenericSend+0xc6>
	__asm volatile
 800a42a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a42e:	f383 8811 	msr	BASEPRI, r3
 800a432:	f3bf 8f6f 	isb	sy
 800a436:	f3bf 8f4f 	dsb	sy
 800a43a:	61fb      	str	r3, [r7, #28]
}
 800a43c:	bf00      	nop
 800a43e:	bf00      	nop
 800a440:	e7fd      	b.n	800a43e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a442:	f002 f8e9 	bl	800c618 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a448:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a44a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a44c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a44e:	429a      	cmp	r2, r3
 800a450:	d302      	bcc.n	800a458 <xQueueGenericSend+0xdc>
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	2b02      	cmp	r3, #2
 800a456:	d129      	bne.n	800a4ac <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a458:	683a      	ldr	r2, [r7, #0]
 800a45a:	68b9      	ldr	r1, [r7, #8]
 800a45c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a45e:	f000 facf 	bl	800aa00 <prvCopyDataToQueue>
 800a462:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d010      	beq.n	800a48e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a46c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a46e:	3324      	adds	r3, #36	@ 0x24
 800a470:	4618      	mov	r0, r3
 800a472:	f001 f947 	bl	800b704 <xTaskRemoveFromEventList>
 800a476:	4603      	mov	r3, r0
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d013      	beq.n	800a4a4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a47c:	4b3f      	ldr	r3, [pc, #252]	@ (800a57c <xQueueGenericSend+0x200>)
 800a47e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a482:	601a      	str	r2, [r3, #0]
 800a484:	f3bf 8f4f 	dsb	sy
 800a488:	f3bf 8f6f 	isb	sy
 800a48c:	e00a      	b.n	800a4a4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a48e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a490:	2b00      	cmp	r3, #0
 800a492:	d007      	beq.n	800a4a4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a494:	4b39      	ldr	r3, [pc, #228]	@ (800a57c <xQueueGenericSend+0x200>)
 800a496:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a49a:	601a      	str	r2, [r3, #0]
 800a49c:	f3bf 8f4f 	dsb	sy
 800a4a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a4a4:	f002 f8ea 	bl	800c67c <vPortExitCritical>
				return pdPASS;
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	e063      	b.n	800a574 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d103      	bne.n	800a4ba <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a4b2:	f002 f8e3 	bl	800c67c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	e05c      	b.n	800a574 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a4ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d106      	bne.n	800a4ce <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a4c0:	f107 0314 	add.w	r3, r7, #20
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f001 f983 	bl	800b7d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a4ce:	f002 f8d5 	bl	800c67c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a4d2:	f000 fe6f 	bl	800b1b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a4d6:	f002 f89f 	bl	800c618 <vPortEnterCritical>
 800a4da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a4e0:	b25b      	sxtb	r3, r3
 800a4e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4e6:	d103      	bne.n	800a4f0 <xQueueGenericSend+0x174>
 800a4e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a4f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a4f6:	b25b      	sxtb	r3, r3
 800a4f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4fc:	d103      	bne.n	800a506 <xQueueGenericSend+0x18a>
 800a4fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a500:	2200      	movs	r2, #0
 800a502:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a506:	f002 f8b9 	bl	800c67c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a50a:	1d3a      	adds	r2, r7, #4
 800a50c:	f107 0314 	add.w	r3, r7, #20
 800a510:	4611      	mov	r1, r2
 800a512:	4618      	mov	r0, r3
 800a514:	f001 f972 	bl	800b7fc <xTaskCheckForTimeOut>
 800a518:	4603      	mov	r3, r0
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d124      	bne.n	800a568 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a51e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a520:	f000 fb66 	bl	800abf0 <prvIsQueueFull>
 800a524:	4603      	mov	r3, r0
 800a526:	2b00      	cmp	r3, #0
 800a528:	d018      	beq.n	800a55c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a52a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a52c:	3310      	adds	r3, #16
 800a52e:	687a      	ldr	r2, [r7, #4]
 800a530:	4611      	mov	r1, r2
 800a532:	4618      	mov	r0, r3
 800a534:	f001 f894 	bl	800b660 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a538:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a53a:	f000 faf1 	bl	800ab20 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a53e:	f000 fe7f 	bl	800b240 <xTaskResumeAll>
 800a542:	4603      	mov	r3, r0
 800a544:	2b00      	cmp	r3, #0
 800a546:	f47f af7c 	bne.w	800a442 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a54a:	4b0c      	ldr	r3, [pc, #48]	@ (800a57c <xQueueGenericSend+0x200>)
 800a54c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a550:	601a      	str	r2, [r3, #0]
 800a552:	f3bf 8f4f 	dsb	sy
 800a556:	f3bf 8f6f 	isb	sy
 800a55a:	e772      	b.n	800a442 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a55c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a55e:	f000 fadf 	bl	800ab20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a562:	f000 fe6d 	bl	800b240 <xTaskResumeAll>
 800a566:	e76c      	b.n	800a442 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a568:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a56a:	f000 fad9 	bl	800ab20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a56e:	f000 fe67 	bl	800b240 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a572:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a574:	4618      	mov	r0, r3
 800a576:	3738      	adds	r7, #56	@ 0x38
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}
 800a57c:	e000ed04 	.word	0xe000ed04

0800a580 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b090      	sub	sp, #64	@ 0x40
 800a584:	af00      	add	r7, sp, #0
 800a586:	60f8      	str	r0, [r7, #12]
 800a588:	60b9      	str	r1, [r7, #8]
 800a58a:	607a      	str	r2, [r7, #4]
 800a58c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a594:	2b00      	cmp	r3, #0
 800a596:	d10b      	bne.n	800a5b0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a59c:	f383 8811 	msr	BASEPRI, r3
 800a5a0:	f3bf 8f6f 	isb	sy
 800a5a4:	f3bf 8f4f 	dsb	sy
 800a5a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a5aa:	bf00      	nop
 800a5ac:	bf00      	nop
 800a5ae:	e7fd      	b.n	800a5ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d103      	bne.n	800a5be <xQueueGenericSendFromISR+0x3e>
 800a5b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d101      	bne.n	800a5c2 <xQueueGenericSendFromISR+0x42>
 800a5be:	2301      	movs	r3, #1
 800a5c0:	e000      	b.n	800a5c4 <xQueueGenericSendFromISR+0x44>
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d10b      	bne.n	800a5e0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a5c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5cc:	f383 8811 	msr	BASEPRI, r3
 800a5d0:	f3bf 8f6f 	isb	sy
 800a5d4:	f3bf 8f4f 	dsb	sy
 800a5d8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a5da:	bf00      	nop
 800a5dc:	bf00      	nop
 800a5de:	e7fd      	b.n	800a5dc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	2b02      	cmp	r3, #2
 800a5e4:	d103      	bne.n	800a5ee <xQueueGenericSendFromISR+0x6e>
 800a5e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5ea:	2b01      	cmp	r3, #1
 800a5ec:	d101      	bne.n	800a5f2 <xQueueGenericSendFromISR+0x72>
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	e000      	b.n	800a5f4 <xQueueGenericSendFromISR+0x74>
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d10b      	bne.n	800a610 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a5f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5fc:	f383 8811 	msr	BASEPRI, r3
 800a600:	f3bf 8f6f 	isb	sy
 800a604:	f3bf 8f4f 	dsb	sy
 800a608:	623b      	str	r3, [r7, #32]
}
 800a60a:	bf00      	nop
 800a60c:	bf00      	nop
 800a60e:	e7fd      	b.n	800a60c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a610:	f002 f9c6 	bl	800c9a0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a614:	f3ef 8211 	mrs	r2, BASEPRI
 800a618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a61c:	f383 8811 	msr	BASEPRI, r3
 800a620:	f3bf 8f6f 	isb	sy
 800a624:	f3bf 8f4f 	dsb	sy
 800a628:	61fa      	str	r2, [r7, #28]
 800a62a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a62c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a62e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a632:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a636:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a638:	429a      	cmp	r2, r3
 800a63a:	d302      	bcc.n	800a642 <xQueueGenericSendFromISR+0xc2>
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	2b02      	cmp	r3, #2
 800a640:	d12f      	bne.n	800a6a2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a644:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a648:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a64c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a64e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a650:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a652:	683a      	ldr	r2, [r7, #0]
 800a654:	68b9      	ldr	r1, [r7, #8]
 800a656:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a658:	f000 f9d2 	bl	800aa00 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a65c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a660:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a664:	d112      	bne.n	800a68c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d016      	beq.n	800a69c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a66e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a670:	3324      	adds	r3, #36	@ 0x24
 800a672:	4618      	mov	r0, r3
 800a674:	f001 f846 	bl	800b704 <xTaskRemoveFromEventList>
 800a678:	4603      	mov	r3, r0
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d00e      	beq.n	800a69c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d00b      	beq.n	800a69c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2201      	movs	r2, #1
 800a688:	601a      	str	r2, [r3, #0]
 800a68a:	e007      	b.n	800a69c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a68c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a690:	3301      	adds	r3, #1
 800a692:	b2db      	uxtb	r3, r3
 800a694:	b25a      	sxtb	r2, r3
 800a696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a698:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a69c:	2301      	movs	r3, #1
 800a69e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a6a0:	e001      	b.n	800a6a6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6a8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a6b0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a6b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3740      	adds	r7, #64	@ 0x40
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b08c      	sub	sp, #48	@ 0x30
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	60f8      	str	r0, [r7, #12]
 800a6c4:	60b9      	str	r1, [r7, #8]
 800a6c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a6d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d10b      	bne.n	800a6ee <xQueueReceive+0x32>
	__asm volatile
 800a6d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6da:	f383 8811 	msr	BASEPRI, r3
 800a6de:	f3bf 8f6f 	isb	sy
 800a6e2:	f3bf 8f4f 	dsb	sy
 800a6e6:	623b      	str	r3, [r7, #32]
}
 800a6e8:	bf00      	nop
 800a6ea:	bf00      	nop
 800a6ec:	e7fd      	b.n	800a6ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d103      	bne.n	800a6fc <xQueueReceive+0x40>
 800a6f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d101      	bne.n	800a700 <xQueueReceive+0x44>
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	e000      	b.n	800a702 <xQueueReceive+0x46>
 800a700:	2300      	movs	r3, #0
 800a702:	2b00      	cmp	r3, #0
 800a704:	d10b      	bne.n	800a71e <xQueueReceive+0x62>
	__asm volatile
 800a706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a70a:	f383 8811 	msr	BASEPRI, r3
 800a70e:	f3bf 8f6f 	isb	sy
 800a712:	f3bf 8f4f 	dsb	sy
 800a716:	61fb      	str	r3, [r7, #28]
}
 800a718:	bf00      	nop
 800a71a:	bf00      	nop
 800a71c:	e7fd      	b.n	800a71a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a71e:	f001 fa0f 	bl	800bb40 <xTaskGetSchedulerState>
 800a722:	4603      	mov	r3, r0
 800a724:	2b00      	cmp	r3, #0
 800a726:	d102      	bne.n	800a72e <xQueueReceive+0x72>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d101      	bne.n	800a732 <xQueueReceive+0x76>
 800a72e:	2301      	movs	r3, #1
 800a730:	e000      	b.n	800a734 <xQueueReceive+0x78>
 800a732:	2300      	movs	r3, #0
 800a734:	2b00      	cmp	r3, #0
 800a736:	d10b      	bne.n	800a750 <xQueueReceive+0x94>
	__asm volatile
 800a738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a73c:	f383 8811 	msr	BASEPRI, r3
 800a740:	f3bf 8f6f 	isb	sy
 800a744:	f3bf 8f4f 	dsb	sy
 800a748:	61bb      	str	r3, [r7, #24]
}
 800a74a:	bf00      	nop
 800a74c:	bf00      	nop
 800a74e:	e7fd      	b.n	800a74c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a750:	f001 ff62 	bl	800c618 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a758:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a75a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d01f      	beq.n	800a7a0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a760:	68b9      	ldr	r1, [r7, #8]
 800a762:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a764:	f000 f9b6 	bl	800aad4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a76a:	1e5a      	subs	r2, r3, #1
 800a76c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a76e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a772:	691b      	ldr	r3, [r3, #16]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d00f      	beq.n	800a798 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a77a:	3310      	adds	r3, #16
 800a77c:	4618      	mov	r0, r3
 800a77e:	f000 ffc1 	bl	800b704 <xTaskRemoveFromEventList>
 800a782:	4603      	mov	r3, r0
 800a784:	2b00      	cmp	r3, #0
 800a786:	d007      	beq.n	800a798 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a788:	4b3c      	ldr	r3, [pc, #240]	@ (800a87c <xQueueReceive+0x1c0>)
 800a78a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a78e:	601a      	str	r2, [r3, #0]
 800a790:	f3bf 8f4f 	dsb	sy
 800a794:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a798:	f001 ff70 	bl	800c67c <vPortExitCritical>
				return pdPASS;
 800a79c:	2301      	movs	r3, #1
 800a79e:	e069      	b.n	800a874 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d103      	bne.n	800a7ae <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a7a6:	f001 ff69 	bl	800c67c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	e062      	b.n	800a874 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a7ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d106      	bne.n	800a7c2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a7b4:	f107 0310 	add.w	r3, r7, #16
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f001 f809 	bl	800b7d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a7be:	2301      	movs	r3, #1
 800a7c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a7c2:	f001 ff5b 	bl	800c67c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a7c6:	f000 fcf5 	bl	800b1b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a7ca:	f001 ff25 	bl	800c618 <vPortEnterCritical>
 800a7ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a7d4:	b25b      	sxtb	r3, r3
 800a7d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7da:	d103      	bne.n	800a7e4 <xQueueReceive+0x128>
 800a7dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7de:	2200      	movs	r2, #0
 800a7e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a7e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a7ea:	b25b      	sxtb	r3, r3
 800a7ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7f0:	d103      	bne.n	800a7fa <xQueueReceive+0x13e>
 800a7f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a7fa:	f001 ff3f 	bl	800c67c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a7fe:	1d3a      	adds	r2, r7, #4
 800a800:	f107 0310 	add.w	r3, r7, #16
 800a804:	4611      	mov	r1, r2
 800a806:	4618      	mov	r0, r3
 800a808:	f000 fff8 	bl	800b7fc <xTaskCheckForTimeOut>
 800a80c:	4603      	mov	r3, r0
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d123      	bne.n	800a85a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a812:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a814:	f000 f9d6 	bl	800abc4 <prvIsQueueEmpty>
 800a818:	4603      	mov	r3, r0
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d017      	beq.n	800a84e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a81e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a820:	3324      	adds	r3, #36	@ 0x24
 800a822:	687a      	ldr	r2, [r7, #4]
 800a824:	4611      	mov	r1, r2
 800a826:	4618      	mov	r0, r3
 800a828:	f000 ff1a 	bl	800b660 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a82c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a82e:	f000 f977 	bl	800ab20 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a832:	f000 fd05 	bl	800b240 <xTaskResumeAll>
 800a836:	4603      	mov	r3, r0
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d189      	bne.n	800a750 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a83c:	4b0f      	ldr	r3, [pc, #60]	@ (800a87c <xQueueReceive+0x1c0>)
 800a83e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a842:	601a      	str	r2, [r3, #0]
 800a844:	f3bf 8f4f 	dsb	sy
 800a848:	f3bf 8f6f 	isb	sy
 800a84c:	e780      	b.n	800a750 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a84e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a850:	f000 f966 	bl	800ab20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a854:	f000 fcf4 	bl	800b240 <xTaskResumeAll>
 800a858:	e77a      	b.n	800a750 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a85a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a85c:	f000 f960 	bl	800ab20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a860:	f000 fcee 	bl	800b240 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a864:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a866:	f000 f9ad 	bl	800abc4 <prvIsQueueEmpty>
 800a86a:	4603      	mov	r3, r0
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	f43f af6f 	beq.w	800a750 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a872:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a874:	4618      	mov	r0, r3
 800a876:	3730      	adds	r7, #48	@ 0x30
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}
 800a87c:	e000ed04 	.word	0xe000ed04

0800a880 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b08e      	sub	sp, #56	@ 0x38
 800a884:	af00      	add	r7, sp, #0
 800a886:	60f8      	str	r0, [r7, #12]
 800a888:	60b9      	str	r1, [r7, #8]
 800a88a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a892:	2b00      	cmp	r3, #0
 800a894:	d10b      	bne.n	800a8ae <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800a896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a89a:	f383 8811 	msr	BASEPRI, r3
 800a89e:	f3bf 8f6f 	isb	sy
 800a8a2:	f3bf 8f4f 	dsb	sy
 800a8a6:	623b      	str	r3, [r7, #32]
}
 800a8a8:	bf00      	nop
 800a8aa:	bf00      	nop
 800a8ac:	e7fd      	b.n	800a8aa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d103      	bne.n	800a8bc <xQueueReceiveFromISR+0x3c>
 800a8b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d101      	bne.n	800a8c0 <xQueueReceiveFromISR+0x40>
 800a8bc:	2301      	movs	r3, #1
 800a8be:	e000      	b.n	800a8c2 <xQueueReceiveFromISR+0x42>
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d10b      	bne.n	800a8de <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800a8c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8ca:	f383 8811 	msr	BASEPRI, r3
 800a8ce:	f3bf 8f6f 	isb	sy
 800a8d2:	f3bf 8f4f 	dsb	sy
 800a8d6:	61fb      	str	r3, [r7, #28]
}
 800a8d8:	bf00      	nop
 800a8da:	bf00      	nop
 800a8dc:	e7fd      	b.n	800a8da <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a8de:	f002 f85f 	bl	800c9a0 <vPortValidateInterruptPriority>
	__asm volatile
 800a8e2:	f3ef 8211 	mrs	r2, BASEPRI
 800a8e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8ea:	f383 8811 	msr	BASEPRI, r3
 800a8ee:	f3bf 8f6f 	isb	sy
 800a8f2:	f3bf 8f4f 	dsb	sy
 800a8f6:	61ba      	str	r2, [r7, #24]
 800a8f8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a8fa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a8fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a8fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a902:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a906:	2b00      	cmp	r3, #0
 800a908:	d02f      	beq.n	800a96a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a90a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a90c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a910:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a914:	68b9      	ldr	r1, [r7, #8]
 800a916:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a918:	f000 f8dc 	bl	800aad4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a91c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a91e:	1e5a      	subs	r2, r3, #1
 800a920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a922:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a924:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a92c:	d112      	bne.n	800a954 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a92e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a930:	691b      	ldr	r3, [r3, #16]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d016      	beq.n	800a964 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a938:	3310      	adds	r3, #16
 800a93a:	4618      	mov	r0, r3
 800a93c:	f000 fee2 	bl	800b704 <xTaskRemoveFromEventList>
 800a940:	4603      	mov	r3, r0
 800a942:	2b00      	cmp	r3, #0
 800a944:	d00e      	beq.n	800a964 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d00b      	beq.n	800a964 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2201      	movs	r2, #1
 800a950:	601a      	str	r2, [r3, #0]
 800a952:	e007      	b.n	800a964 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a954:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a958:	3301      	adds	r3, #1
 800a95a:	b2db      	uxtb	r3, r3
 800a95c:	b25a      	sxtb	r2, r3
 800a95e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a960:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800a964:	2301      	movs	r3, #1
 800a966:	637b      	str	r3, [r7, #52]	@ 0x34
 800a968:	e001      	b.n	800a96e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800a96a:	2300      	movs	r3, #0
 800a96c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a96e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a970:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	f383 8811 	msr	BASEPRI, r3
}
 800a978:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a97a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3738      	adds	r7, #56	@ 0x38
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}

0800a984 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b084      	sub	sp, #16
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d10b      	bne.n	800a9aa <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800a992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a996:	f383 8811 	msr	BASEPRI, r3
 800a99a:	f3bf 8f6f 	isb	sy
 800a99e:	f3bf 8f4f 	dsb	sy
 800a9a2:	60bb      	str	r3, [r7, #8]
}
 800a9a4:	bf00      	nop
 800a9a6:	bf00      	nop
 800a9a8:	e7fd      	b.n	800a9a6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800a9aa:	f001 fe35 	bl	800c618 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9b2:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800a9b4:	f001 fe62 	bl	800c67c <vPortExitCritical>

	return uxReturn;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	3710      	adds	r7, #16
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}

0800a9c2 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800a9c2:	b480      	push	{r7}
 800a9c4:	b087      	sub	sp, #28
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d10b      	bne.n	800a9ec <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 800a9d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9d8:	f383 8811 	msr	BASEPRI, r3
 800a9dc:	f3bf 8f6f 	isb	sy
 800a9e0:	f3bf 8f4f 	dsb	sy
 800a9e4:	60fb      	str	r3, [r7, #12]
}
 800a9e6:	bf00      	nop
 800a9e8:	bf00      	nop
 800a9ea:	e7fd      	b.n	800a9e8 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9f0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800a9f2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	371c      	adds	r7, #28
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr

0800aa00 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b086      	sub	sp, #24
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	60f8      	str	r0, [r7, #12]
 800aa08:	60b9      	str	r1, [r7, #8]
 800aa0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa14:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d10d      	bne.n	800aa3a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d14d      	bne.n	800aac2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	689b      	ldr	r3, [r3, #8]
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f001 f8a6 	bl	800bb7c <xTaskPriorityDisinherit>
 800aa30:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2200      	movs	r2, #0
 800aa36:	609a      	str	r2, [r3, #8]
 800aa38:	e043      	b.n	800aac2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d119      	bne.n	800aa74 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	6858      	ldr	r0, [r3, #4]
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa48:	461a      	mov	r2, r3
 800aa4a:	68b9      	ldr	r1, [r7, #8]
 800aa4c:	f004 f8a3 	bl	800eb96 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	685a      	ldr	r2, [r3, #4]
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa58:	441a      	add	r2, r3
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	685a      	ldr	r2, [r3, #4]
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	689b      	ldr	r3, [r3, #8]
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d32b      	bcc.n	800aac2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681a      	ldr	r2, [r3, #0]
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	605a      	str	r2, [r3, #4]
 800aa72:	e026      	b.n	800aac2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	68d8      	ldr	r0, [r3, #12]
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa7c:	461a      	mov	r2, r3
 800aa7e:	68b9      	ldr	r1, [r7, #8]
 800aa80:	f004 f889 	bl	800eb96 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	68da      	ldr	r2, [r3, #12]
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa8c:	425b      	negs	r3, r3
 800aa8e:	441a      	add	r2, r3
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	68da      	ldr	r2, [r3, #12]
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	d207      	bcs.n	800aab0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	689a      	ldr	r2, [r3, #8]
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaa8:	425b      	negs	r3, r3
 800aaaa:	441a      	add	r2, r3
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2b02      	cmp	r3, #2
 800aab4:	d105      	bne.n	800aac2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d002      	beq.n	800aac2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	3b01      	subs	r3, #1
 800aac0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	1c5a      	adds	r2, r3, #1
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800aaca:	697b      	ldr	r3, [r7, #20]
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3718      	adds	r7, #24
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b082      	sub	sp, #8
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d018      	beq.n	800ab18 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	68da      	ldr	r2, [r3, #12]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaee:	441a      	add	r2, r3
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	68da      	ldr	r2, [r3, #12]
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	689b      	ldr	r3, [r3, #8]
 800aafc:	429a      	cmp	r2, r3
 800aafe:	d303      	bcc.n	800ab08 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681a      	ldr	r2, [r3, #0]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	68d9      	ldr	r1, [r3, #12]
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab10:	461a      	mov	r2, r3
 800ab12:	6838      	ldr	r0, [r7, #0]
 800ab14:	f004 f83f 	bl	800eb96 <memcpy>
	}
}
 800ab18:	bf00      	nop
 800ab1a:	3708      	adds	r7, #8
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}

0800ab20 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b084      	sub	sp, #16
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ab28:	f001 fd76 	bl	800c618 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ab32:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ab34:	e011      	b.n	800ab5a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d012      	beq.n	800ab64 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	3324      	adds	r3, #36	@ 0x24
 800ab42:	4618      	mov	r0, r3
 800ab44:	f000 fdde 	bl	800b704 <xTaskRemoveFromEventList>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d001      	beq.n	800ab52 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ab4e:	f000 feb9 	bl	800b8c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ab52:	7bfb      	ldrb	r3, [r7, #15]
 800ab54:	3b01      	subs	r3, #1
 800ab56:	b2db      	uxtb	r3, r3
 800ab58:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ab5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	dce9      	bgt.n	800ab36 <prvUnlockQueue+0x16>
 800ab62:	e000      	b.n	800ab66 <prvUnlockQueue+0x46>
					break;
 800ab64:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	22ff      	movs	r2, #255	@ 0xff
 800ab6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ab6e:	f001 fd85 	bl	800c67c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ab72:	f001 fd51 	bl	800c618 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ab7c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ab7e:	e011      	b.n	800aba4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	691b      	ldr	r3, [r3, #16]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d012      	beq.n	800abae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	3310      	adds	r3, #16
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f000 fdb9 	bl	800b704 <xTaskRemoveFromEventList>
 800ab92:	4603      	mov	r3, r0
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d001      	beq.n	800ab9c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ab98:	f000 fe94 	bl	800b8c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ab9c:	7bbb      	ldrb	r3, [r7, #14]
 800ab9e:	3b01      	subs	r3, #1
 800aba0:	b2db      	uxtb	r3, r3
 800aba2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aba4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	dce9      	bgt.n	800ab80 <prvUnlockQueue+0x60>
 800abac:	e000      	b.n	800abb0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800abae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	22ff      	movs	r2, #255	@ 0xff
 800abb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800abb8:	f001 fd60 	bl	800c67c <vPortExitCritical>
}
 800abbc:	bf00      	nop
 800abbe:	3710      	adds	r7, #16
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}

0800abc4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b084      	sub	sp, #16
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800abcc:	f001 fd24 	bl	800c618 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d102      	bne.n	800abde <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800abd8:	2301      	movs	r3, #1
 800abda:	60fb      	str	r3, [r7, #12]
 800abdc:	e001      	b.n	800abe2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800abde:	2300      	movs	r3, #0
 800abe0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800abe2:	f001 fd4b 	bl	800c67c <vPortExitCritical>

	return xReturn;
 800abe6:	68fb      	ldr	r3, [r7, #12]
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3710      	adds	r7, #16
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b084      	sub	sp, #16
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800abf8:	f001 fd0e 	bl	800c618 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d102      	bne.n	800ac0e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ac08:	2301      	movs	r3, #1
 800ac0a:	60fb      	str	r3, [r7, #12]
 800ac0c:	e001      	b.n	800ac12 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ac12:	f001 fd33 	bl	800c67c <vPortExitCritical>

	return xReturn;
 800ac16:	68fb      	ldr	r3, [r7, #12]
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3710      	adds	r7, #16
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ac20:	b480      	push	{r7}
 800ac22:	b085      	sub	sp, #20
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	60fb      	str	r3, [r7, #12]
 800ac2e:	e014      	b.n	800ac5a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ac30:	4a0f      	ldr	r2, [pc, #60]	@ (800ac70 <vQueueAddToRegistry+0x50>)
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d10b      	bne.n	800ac54 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ac3c:	490c      	ldr	r1, [pc, #48]	@ (800ac70 <vQueueAddToRegistry+0x50>)
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	683a      	ldr	r2, [r7, #0]
 800ac42:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ac46:	4a0a      	ldr	r2, [pc, #40]	@ (800ac70 <vQueueAddToRegistry+0x50>)
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	00db      	lsls	r3, r3, #3
 800ac4c:	4413      	add	r3, r2
 800ac4e:	687a      	ldr	r2, [r7, #4]
 800ac50:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ac52:	e006      	b.n	800ac62 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	3301      	adds	r3, #1
 800ac58:	60fb      	str	r3, [r7, #12]
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2b0f      	cmp	r3, #15
 800ac5e:	d9e7      	bls.n	800ac30 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ac60:	bf00      	nop
 800ac62:	bf00      	nop
 800ac64:	3714      	adds	r7, #20
 800ac66:	46bd      	mov	sp, r7
 800ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6c:	4770      	bx	lr
 800ac6e:	bf00      	nop
 800ac70:	20000e88 	.word	0x20000e88

0800ac74 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b086      	sub	sp, #24
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	60f8      	str	r0, [r7, #12]
 800ac7c:	60b9      	str	r1, [r7, #8]
 800ac7e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ac84:	f001 fcc8 	bl	800c618 <vPortEnterCritical>
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ac8e:	b25b      	sxtb	r3, r3
 800ac90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac94:	d103      	bne.n	800ac9e <vQueueWaitForMessageRestricted+0x2a>
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aca4:	b25b      	sxtb	r3, r3
 800aca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acaa:	d103      	bne.n	800acb4 <vQueueWaitForMessageRestricted+0x40>
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	2200      	movs	r2, #0
 800acb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800acb4:	f001 fce2 	bl	800c67c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d106      	bne.n	800acce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	3324      	adds	r3, #36	@ 0x24
 800acc4:	687a      	ldr	r2, [r7, #4]
 800acc6:	68b9      	ldr	r1, [r7, #8]
 800acc8:	4618      	mov	r0, r3
 800acca:	f000 fcef 	bl	800b6ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800acce:	6978      	ldr	r0, [r7, #20]
 800acd0:	f7ff ff26 	bl	800ab20 <prvUnlockQueue>
	}
 800acd4:	bf00      	nop
 800acd6:	3718      	adds	r7, #24
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}

0800acdc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b08e      	sub	sp, #56	@ 0x38
 800ace0:	af04      	add	r7, sp, #16
 800ace2:	60f8      	str	r0, [r7, #12]
 800ace4:	60b9      	str	r1, [r7, #8]
 800ace6:	607a      	str	r2, [r7, #4]
 800ace8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800acea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acec:	2b00      	cmp	r3, #0
 800acee:	d10b      	bne.n	800ad08 <xTaskCreateStatic+0x2c>
	__asm volatile
 800acf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acf4:	f383 8811 	msr	BASEPRI, r3
 800acf8:	f3bf 8f6f 	isb	sy
 800acfc:	f3bf 8f4f 	dsb	sy
 800ad00:	623b      	str	r3, [r7, #32]
}
 800ad02:	bf00      	nop
 800ad04:	bf00      	nop
 800ad06:	e7fd      	b.n	800ad04 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ad08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d10b      	bne.n	800ad26 <xTaskCreateStatic+0x4a>
	__asm volatile
 800ad0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad12:	f383 8811 	msr	BASEPRI, r3
 800ad16:	f3bf 8f6f 	isb	sy
 800ad1a:	f3bf 8f4f 	dsb	sy
 800ad1e:	61fb      	str	r3, [r7, #28]
}
 800ad20:	bf00      	nop
 800ad22:	bf00      	nop
 800ad24:	e7fd      	b.n	800ad22 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ad26:	23b0      	movs	r3, #176	@ 0xb0
 800ad28:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	2bb0      	cmp	r3, #176	@ 0xb0
 800ad2e:	d00b      	beq.n	800ad48 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ad30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad34:	f383 8811 	msr	BASEPRI, r3
 800ad38:	f3bf 8f6f 	isb	sy
 800ad3c:	f3bf 8f4f 	dsb	sy
 800ad40:	61bb      	str	r3, [r7, #24]
}
 800ad42:	bf00      	nop
 800ad44:	bf00      	nop
 800ad46:	e7fd      	b.n	800ad44 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ad48:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ad4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d01e      	beq.n	800ad8e <xTaskCreateStatic+0xb2>
 800ad50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d01b      	beq.n	800ad8e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ad56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad58:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ad5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ad5e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ad60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad62:	2202      	movs	r2, #2
 800ad64:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ad68:	2300      	movs	r3, #0
 800ad6a:	9303      	str	r3, [sp, #12]
 800ad6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad6e:	9302      	str	r3, [sp, #8]
 800ad70:	f107 0314 	add.w	r3, r7, #20
 800ad74:	9301      	str	r3, [sp, #4]
 800ad76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad78:	9300      	str	r3, [sp, #0]
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	687a      	ldr	r2, [r7, #4]
 800ad7e:	68b9      	ldr	r1, [r7, #8]
 800ad80:	68f8      	ldr	r0, [r7, #12]
 800ad82:	f000 f851 	bl	800ae28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ad86:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ad88:	f000 f8fc 	bl	800af84 <prvAddNewTaskToReadyList>
 800ad8c:	e001      	b.n	800ad92 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ad92:	697b      	ldr	r3, [r7, #20]
	}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3728      	adds	r7, #40	@ 0x28
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b08c      	sub	sp, #48	@ 0x30
 800ada0:	af04      	add	r7, sp, #16
 800ada2:	60f8      	str	r0, [r7, #12]
 800ada4:	60b9      	str	r1, [r7, #8]
 800ada6:	603b      	str	r3, [r7, #0]
 800ada8:	4613      	mov	r3, r2
 800adaa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800adac:	88fb      	ldrh	r3, [r7, #6]
 800adae:	009b      	lsls	r3, r3, #2
 800adb0:	4618      	mov	r0, r3
 800adb2:	f001 fe37 	bl	800ca24 <pvPortMalloc>
 800adb6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d00e      	beq.n	800addc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800adbe:	20b0      	movs	r0, #176	@ 0xb0
 800adc0:	f001 fe30 	bl	800ca24 <pvPortMalloc>
 800adc4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800adc6:	69fb      	ldr	r3, [r7, #28]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d003      	beq.n	800add4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800adcc:	69fb      	ldr	r3, [r7, #28]
 800adce:	697a      	ldr	r2, [r7, #20]
 800add0:	631a      	str	r2, [r3, #48]	@ 0x30
 800add2:	e005      	b.n	800ade0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800add4:	6978      	ldr	r0, [r7, #20]
 800add6:	f001 fef3 	bl	800cbc0 <vPortFree>
 800adda:	e001      	b.n	800ade0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800addc:	2300      	movs	r3, #0
 800adde:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ade0:	69fb      	ldr	r3, [r7, #28]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d017      	beq.n	800ae16 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ade6:	69fb      	ldr	r3, [r7, #28]
 800ade8:	2200      	movs	r2, #0
 800adea:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800adee:	88fa      	ldrh	r2, [r7, #6]
 800adf0:	2300      	movs	r3, #0
 800adf2:	9303      	str	r3, [sp, #12]
 800adf4:	69fb      	ldr	r3, [r7, #28]
 800adf6:	9302      	str	r3, [sp, #8]
 800adf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adfa:	9301      	str	r3, [sp, #4]
 800adfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adfe:	9300      	str	r3, [sp, #0]
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	68b9      	ldr	r1, [r7, #8]
 800ae04:	68f8      	ldr	r0, [r7, #12]
 800ae06:	f000 f80f 	bl	800ae28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae0a:	69f8      	ldr	r0, [r7, #28]
 800ae0c:	f000 f8ba 	bl	800af84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ae10:	2301      	movs	r3, #1
 800ae12:	61bb      	str	r3, [r7, #24]
 800ae14:	e002      	b.n	800ae1c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ae16:	f04f 33ff 	mov.w	r3, #4294967295
 800ae1a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ae1c:	69bb      	ldr	r3, [r7, #24]
	}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3720      	adds	r7, #32
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
	...

0800ae28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b088      	sub	sp, #32
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	60f8      	str	r0, [r7, #12]
 800ae30:	60b9      	str	r1, [r7, #8]
 800ae32:	607a      	str	r2, [r7, #4]
 800ae34:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ae36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae38:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	009b      	lsls	r3, r3, #2
 800ae3e:	461a      	mov	r2, r3
 800ae40:	21a5      	movs	r1, #165	@ 0xa5
 800ae42:	f003 fdb8 	bl	800e9b6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ae46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ae50:	3b01      	subs	r3, #1
 800ae52:	009b      	lsls	r3, r3, #2
 800ae54:	4413      	add	r3, r2
 800ae56:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ae58:	69bb      	ldr	r3, [r7, #24]
 800ae5a:	f023 0307 	bic.w	r3, r3, #7
 800ae5e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ae60:	69bb      	ldr	r3, [r7, #24]
 800ae62:	f003 0307 	and.w	r3, r3, #7
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d00b      	beq.n	800ae82 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ae6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae6e:	f383 8811 	msr	BASEPRI, r3
 800ae72:	f3bf 8f6f 	isb	sy
 800ae76:	f3bf 8f4f 	dsb	sy
 800ae7a:	617b      	str	r3, [r7, #20]
}
 800ae7c:	bf00      	nop
 800ae7e:	bf00      	nop
 800ae80:	e7fd      	b.n	800ae7e <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800ae82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae84:	69ba      	ldr	r2, [r7, #24]
 800ae86:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d01f      	beq.n	800aece <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae8e:	2300      	movs	r3, #0
 800ae90:	61fb      	str	r3, [r7, #28]
 800ae92:	e012      	b.n	800aeba <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ae94:	68ba      	ldr	r2, [r7, #8]
 800ae96:	69fb      	ldr	r3, [r7, #28]
 800ae98:	4413      	add	r3, r2
 800ae9a:	7819      	ldrb	r1, [r3, #0]
 800ae9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae9e:	69fb      	ldr	r3, [r7, #28]
 800aea0:	4413      	add	r3, r2
 800aea2:	3334      	adds	r3, #52	@ 0x34
 800aea4:	460a      	mov	r2, r1
 800aea6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aea8:	68ba      	ldr	r2, [r7, #8]
 800aeaa:	69fb      	ldr	r3, [r7, #28]
 800aeac:	4413      	add	r3, r2
 800aeae:	781b      	ldrb	r3, [r3, #0]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d006      	beq.n	800aec2 <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aeb4:	69fb      	ldr	r3, [r7, #28]
 800aeb6:	3301      	adds	r3, #1
 800aeb8:	61fb      	str	r3, [r7, #28]
 800aeba:	69fb      	ldr	r3, [r7, #28]
 800aebc:	2b0f      	cmp	r3, #15
 800aebe:	d9e9      	bls.n	800ae94 <prvInitialiseNewTask+0x6c>
 800aec0:	e000      	b.n	800aec4 <prvInitialiseNewTask+0x9c>
			{
				break;
 800aec2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aec6:	2200      	movs	r2, #0
 800aec8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800aecc:	e003      	b.n	800aed6 <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aed0:	2200      	movs	r2, #0
 800aed2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aed8:	2b37      	cmp	r3, #55	@ 0x37
 800aeda:	d901      	bls.n	800aee0 <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aedc:	2337      	movs	r3, #55	@ 0x37
 800aede:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aee2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aee4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aee8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aeea:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800aeec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeee:	2200      	movs	r2, #0
 800aef0:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aef4:	3304      	adds	r3, #4
 800aef6:	4618      	mov	r0, r3
 800aef8:	f7ff f866 	bl	8009fc8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aefc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aefe:	3318      	adds	r3, #24
 800af00:	4618      	mov	r0, r3
 800af02:	f7ff f861 	bl	8009fc8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800af06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af0e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800af12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800af16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af1a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800af1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af1e:	2200      	movs	r2, #0
 800af20:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800af22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af24:	2200      	movs	r2, #0
 800af26:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800af2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af2c:	2200      	movs	r2, #0
 800af2e:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800af32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af34:	335c      	adds	r3, #92	@ 0x5c
 800af36:	224c      	movs	r2, #76	@ 0x4c
 800af38:	2100      	movs	r1, #0
 800af3a:	4618      	mov	r0, r3
 800af3c:	f003 fd3b 	bl	800e9b6 <memset>
 800af40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af42:	4a0d      	ldr	r2, [pc, #52]	@ (800af78 <prvInitialiseNewTask+0x150>)
 800af44:	661a      	str	r2, [r3, #96]	@ 0x60
 800af46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af48:	4a0c      	ldr	r2, [pc, #48]	@ (800af7c <prvInitialiseNewTask+0x154>)
 800af4a:	665a      	str	r2, [r3, #100]	@ 0x64
 800af4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af4e:	4a0c      	ldr	r2, [pc, #48]	@ (800af80 <prvInitialiseNewTask+0x158>)
 800af50:	669a      	str	r2, [r3, #104]	@ 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800af52:	683a      	ldr	r2, [r7, #0]
 800af54:	68f9      	ldr	r1, [r7, #12]
 800af56:	69b8      	ldr	r0, [r7, #24]
 800af58:	f001 fa2e 	bl	800c3b8 <pxPortInitialiseStack>
 800af5c:	4602      	mov	r2, r0
 800af5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af60:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800af62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af64:	2b00      	cmp	r3, #0
 800af66:	d002      	beq.n	800af6e <prvInitialiseNewTask+0x146>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800af68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af6e:	bf00      	nop
 800af70:	3720      	adds	r7, #32
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
 800af76:	bf00      	nop
 800af78:	20005170 	.word	0x20005170
 800af7c:	200051d8 	.word	0x200051d8
 800af80:	20005240 	.word	0x20005240

0800af84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b082      	sub	sp, #8
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800af8c:	f001 fb44 	bl	800c618 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800af90:	4b2d      	ldr	r3, [pc, #180]	@ (800b048 <prvAddNewTaskToReadyList+0xc4>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	3301      	adds	r3, #1
 800af96:	4a2c      	ldr	r2, [pc, #176]	@ (800b048 <prvAddNewTaskToReadyList+0xc4>)
 800af98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800af9a:	4b2c      	ldr	r3, [pc, #176]	@ (800b04c <prvAddNewTaskToReadyList+0xc8>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d109      	bne.n	800afb6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800afa2:	4a2a      	ldr	r2, [pc, #168]	@ (800b04c <prvAddNewTaskToReadyList+0xc8>)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800afa8:	4b27      	ldr	r3, [pc, #156]	@ (800b048 <prvAddNewTaskToReadyList+0xc4>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	2b01      	cmp	r3, #1
 800afae:	d110      	bne.n	800afd2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800afb0:	f000 fd02 	bl	800b9b8 <prvInitialiseTaskLists>
 800afb4:	e00d      	b.n	800afd2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800afb6:	4b26      	ldr	r3, [pc, #152]	@ (800b050 <prvAddNewTaskToReadyList+0xcc>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d109      	bne.n	800afd2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800afbe:	4b23      	ldr	r3, [pc, #140]	@ (800b04c <prvAddNewTaskToReadyList+0xc8>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afc8:	429a      	cmp	r2, r3
 800afca:	d802      	bhi.n	800afd2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800afcc:	4a1f      	ldr	r2, [pc, #124]	@ (800b04c <prvAddNewTaskToReadyList+0xc8>)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800afd2:	4b20      	ldr	r3, [pc, #128]	@ (800b054 <prvAddNewTaskToReadyList+0xd0>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	3301      	adds	r3, #1
 800afd8:	4a1e      	ldr	r2, [pc, #120]	@ (800b054 <prvAddNewTaskToReadyList+0xd0>)
 800afda:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800afdc:	4b1d      	ldr	r3, [pc, #116]	@ (800b054 <prvAddNewTaskToReadyList+0xd0>)
 800afde:	681a      	ldr	r2, [r3, #0]
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afe8:	4b1b      	ldr	r3, [pc, #108]	@ (800b058 <prvAddNewTaskToReadyList+0xd4>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	429a      	cmp	r2, r3
 800afee:	d903      	bls.n	800aff8 <prvAddNewTaskToReadyList+0x74>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aff4:	4a18      	ldr	r2, [pc, #96]	@ (800b058 <prvAddNewTaskToReadyList+0xd4>)
 800aff6:	6013      	str	r3, [r2, #0]
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800affc:	4613      	mov	r3, r2
 800affe:	009b      	lsls	r3, r3, #2
 800b000:	4413      	add	r3, r2
 800b002:	009b      	lsls	r3, r3, #2
 800b004:	4a15      	ldr	r2, [pc, #84]	@ (800b05c <prvAddNewTaskToReadyList+0xd8>)
 800b006:	441a      	add	r2, r3
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	3304      	adds	r3, #4
 800b00c:	4619      	mov	r1, r3
 800b00e:	4610      	mov	r0, r2
 800b010:	f7fe ffe7 	bl	8009fe2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b014:	f001 fb32 	bl	800c67c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b018:	4b0d      	ldr	r3, [pc, #52]	@ (800b050 <prvAddNewTaskToReadyList+0xcc>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d00e      	beq.n	800b03e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b020:	4b0a      	ldr	r3, [pc, #40]	@ (800b04c <prvAddNewTaskToReadyList+0xc8>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b02a:	429a      	cmp	r2, r3
 800b02c:	d207      	bcs.n	800b03e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b02e:	4b0c      	ldr	r3, [pc, #48]	@ (800b060 <prvAddNewTaskToReadyList+0xdc>)
 800b030:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b034:	601a      	str	r2, [r3, #0]
 800b036:	f3bf 8f4f 	dsb	sy
 800b03a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b03e:	bf00      	nop
 800b040:	3708      	adds	r7, #8
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
 800b046:	bf00      	nop
 800b048:	200013dc 	.word	0x200013dc
 800b04c:	20000f08 	.word	0x20000f08
 800b050:	200013e8 	.word	0x200013e8
 800b054:	200013f8 	.word	0x200013f8
 800b058:	200013e4 	.word	0x200013e4
 800b05c:	20000f0c 	.word	0x20000f0c
 800b060:	e000ed04 	.word	0xe000ed04

0800b064 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b06c:	2300      	movs	r3, #0
 800b06e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d018      	beq.n	800b0a8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b076:	4b14      	ldr	r3, [pc, #80]	@ (800b0c8 <vTaskDelay+0x64>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d00b      	beq.n	800b096 <vTaskDelay+0x32>
	__asm volatile
 800b07e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b082:	f383 8811 	msr	BASEPRI, r3
 800b086:	f3bf 8f6f 	isb	sy
 800b08a:	f3bf 8f4f 	dsb	sy
 800b08e:	60bb      	str	r3, [r7, #8]
}
 800b090:	bf00      	nop
 800b092:	bf00      	nop
 800b094:	e7fd      	b.n	800b092 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b096:	f000 f88d 	bl	800b1b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b09a:	2100      	movs	r1, #0
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f000 fddd 	bl	800bc5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b0a2:	f000 f8cd 	bl	800b240 <xTaskResumeAll>
 800b0a6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d107      	bne.n	800b0be <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b0ae:	4b07      	ldr	r3, [pc, #28]	@ (800b0cc <vTaskDelay+0x68>)
 800b0b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0b4:	601a      	str	r2, [r3, #0]
 800b0b6:	f3bf 8f4f 	dsb	sy
 800b0ba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b0be:	bf00      	nop
 800b0c0:	3710      	adds	r7, #16
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}
 800b0c6:	bf00      	nop
 800b0c8:	20001404 	.word	0x20001404
 800b0cc:	e000ed04 	.word	0xe000ed04

0800b0d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b08a      	sub	sp, #40	@ 0x28
 800b0d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b0de:	463a      	mov	r2, r7
 800b0e0:	1d39      	adds	r1, r7, #4
 800b0e2:	f107 0308 	add.w	r3, r7, #8
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f7fe ff1a 	bl	8009f20 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b0ec:	6839      	ldr	r1, [r7, #0]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	68ba      	ldr	r2, [r7, #8]
 800b0f2:	9202      	str	r2, [sp, #8]
 800b0f4:	9301      	str	r3, [sp, #4]
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	9300      	str	r3, [sp, #0]
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	460a      	mov	r2, r1
 800b0fe:	4925      	ldr	r1, [pc, #148]	@ (800b194 <vTaskStartScheduler+0xc4>)
 800b100:	4825      	ldr	r0, [pc, #148]	@ (800b198 <vTaskStartScheduler+0xc8>)
 800b102:	f7ff fdeb 	bl	800acdc <xTaskCreateStatic>
 800b106:	4603      	mov	r3, r0
 800b108:	4a24      	ldr	r2, [pc, #144]	@ (800b19c <vTaskStartScheduler+0xcc>)
 800b10a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b10c:	4b23      	ldr	r3, [pc, #140]	@ (800b19c <vTaskStartScheduler+0xcc>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d002      	beq.n	800b11a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b114:	2301      	movs	r3, #1
 800b116:	617b      	str	r3, [r7, #20]
 800b118:	e001      	b.n	800b11e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b11a:	2300      	movs	r3, #0
 800b11c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	2b01      	cmp	r3, #1
 800b122:	d102      	bne.n	800b12a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b124:	f000 fdee 	bl	800bd04 <xTimerCreateTimerTask>
 800b128:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	2b01      	cmp	r3, #1
 800b12e:	d11d      	bne.n	800b16c <vTaskStartScheduler+0x9c>
	__asm volatile
 800b130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b134:	f383 8811 	msr	BASEPRI, r3
 800b138:	f3bf 8f6f 	isb	sy
 800b13c:	f3bf 8f4f 	dsb	sy
 800b140:	613b      	str	r3, [r7, #16]
}
 800b142:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b144:	4b16      	ldr	r3, [pc, #88]	@ (800b1a0 <vTaskStartScheduler+0xd0>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	335c      	adds	r3, #92	@ 0x5c
 800b14a:	4a16      	ldr	r2, [pc, #88]	@ (800b1a4 <vTaskStartScheduler+0xd4>)
 800b14c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b14e:	4b16      	ldr	r3, [pc, #88]	@ (800b1a8 <vTaskStartScheduler+0xd8>)
 800b150:	f04f 32ff 	mov.w	r2, #4294967295
 800b154:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b156:	4b15      	ldr	r3, [pc, #84]	@ (800b1ac <vTaskStartScheduler+0xdc>)
 800b158:	2201      	movs	r2, #1
 800b15a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b15c:	4b14      	ldr	r3, [pc, #80]	@ (800b1b0 <vTaskStartScheduler+0xe0>)
 800b15e:	2200      	movs	r2, #0
 800b160:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800b162:	f7f8 f9c1 	bl	80034e8 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b166:	f001 f9b3 	bl	800c4d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b16a:	e00f      	b.n	800b18c <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b172:	d10b      	bne.n	800b18c <vTaskStartScheduler+0xbc>
	__asm volatile
 800b174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b178:	f383 8811 	msr	BASEPRI, r3
 800b17c:	f3bf 8f6f 	isb	sy
 800b180:	f3bf 8f4f 	dsb	sy
 800b184:	60fb      	str	r3, [r7, #12]
}
 800b186:	bf00      	nop
 800b188:	bf00      	nop
 800b18a:	e7fd      	b.n	800b188 <vTaskStartScheduler+0xb8>
}
 800b18c:	bf00      	nop
 800b18e:	3718      	adds	r7, #24
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}
 800b194:	08011738 	.word	0x08011738
 800b198:	0800b8dd 	.word	0x0800b8dd
 800b19c:	20001400 	.word	0x20001400
 800b1a0:	20000f08 	.word	0x20000f08
 800b1a4:	20000268 	.word	0x20000268
 800b1a8:	200013fc 	.word	0x200013fc
 800b1ac:	200013e8 	.word	0x200013e8
 800b1b0:	200013e0 	.word	0x200013e0

0800b1b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b1b8:	4b04      	ldr	r3, [pc, #16]	@ (800b1cc <vTaskSuspendAll+0x18>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	3301      	adds	r3, #1
 800b1be:	4a03      	ldr	r2, [pc, #12]	@ (800b1cc <vTaskSuspendAll+0x18>)
 800b1c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b1c2:	bf00      	nop
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr
 800b1cc:	20001404 	.word	0x20001404

0800b1d0 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b083      	sub	sp, #12
 800b1d4:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800b1da:	4b14      	ldr	r3, [pc, #80]	@ (800b22c <prvGetExpectedIdleTime+0x5c>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d001      	beq.n	800b1e6 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800b1e6:	4b12      	ldr	r3, [pc, #72]	@ (800b230 <prvGetExpectedIdleTime+0x60>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d002      	beq.n	800b1f6 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	607b      	str	r3, [r7, #4]
 800b1f4:	e012      	b.n	800b21c <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800b1f6:	4b0f      	ldr	r3, [pc, #60]	@ (800b234 <prvGetExpectedIdleTime+0x64>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	2b01      	cmp	r3, #1
 800b1fc:	d902      	bls.n	800b204 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800b1fe:	2300      	movs	r3, #0
 800b200:	607b      	str	r3, [r7, #4]
 800b202:	e00b      	b.n	800b21c <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d002      	beq.n	800b210 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800b20a:	2300      	movs	r3, #0
 800b20c:	607b      	str	r3, [r7, #4]
 800b20e:	e005      	b.n	800b21c <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800b210:	4b09      	ldr	r3, [pc, #36]	@ (800b238 <prvGetExpectedIdleTime+0x68>)
 800b212:	681a      	ldr	r2, [r3, #0]
 800b214:	4b09      	ldr	r3, [pc, #36]	@ (800b23c <prvGetExpectedIdleTime+0x6c>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	1ad3      	subs	r3, r2, r3
 800b21a:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800b21c:	687b      	ldr	r3, [r7, #4]
	}
 800b21e:	4618      	mov	r0, r3
 800b220:	370c      	adds	r7, #12
 800b222:	46bd      	mov	sp, r7
 800b224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b228:	4770      	bx	lr
 800b22a:	bf00      	nop
 800b22c:	200013e4 	.word	0x200013e4
 800b230:	20000f08 	.word	0x20000f08
 800b234:	20000f0c 	.word	0x20000f0c
 800b238:	200013fc 	.word	0x200013fc
 800b23c:	200013e0 	.word	0x200013e0

0800b240 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b084      	sub	sp, #16
 800b244:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b246:	2300      	movs	r3, #0
 800b248:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b24a:	2300      	movs	r3, #0
 800b24c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b24e:	4b42      	ldr	r3, [pc, #264]	@ (800b358 <xTaskResumeAll+0x118>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d10b      	bne.n	800b26e <xTaskResumeAll+0x2e>
	__asm volatile
 800b256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b25a:	f383 8811 	msr	BASEPRI, r3
 800b25e:	f3bf 8f6f 	isb	sy
 800b262:	f3bf 8f4f 	dsb	sy
 800b266:	603b      	str	r3, [r7, #0]
}
 800b268:	bf00      	nop
 800b26a:	bf00      	nop
 800b26c:	e7fd      	b.n	800b26a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b26e:	f001 f9d3 	bl	800c618 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b272:	4b39      	ldr	r3, [pc, #228]	@ (800b358 <xTaskResumeAll+0x118>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	3b01      	subs	r3, #1
 800b278:	4a37      	ldr	r2, [pc, #220]	@ (800b358 <xTaskResumeAll+0x118>)
 800b27a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b27c:	4b36      	ldr	r3, [pc, #216]	@ (800b358 <xTaskResumeAll+0x118>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d162      	bne.n	800b34a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b284:	4b35      	ldr	r3, [pc, #212]	@ (800b35c <xTaskResumeAll+0x11c>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d05e      	beq.n	800b34a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b28c:	e02f      	b.n	800b2ee <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b28e:	4b34      	ldr	r3, [pc, #208]	@ (800b360 <xTaskResumeAll+0x120>)
 800b290:	68db      	ldr	r3, [r3, #12]
 800b292:	68db      	ldr	r3, [r3, #12]
 800b294:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	3318      	adds	r3, #24
 800b29a:	4618      	mov	r0, r3
 800b29c:	f7fe fefe 	bl	800a09c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	3304      	adds	r3, #4
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f7fe fef9 	bl	800a09c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2ae:	4b2d      	ldr	r3, [pc, #180]	@ (800b364 <xTaskResumeAll+0x124>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	429a      	cmp	r2, r3
 800b2b4:	d903      	bls.n	800b2be <xTaskResumeAll+0x7e>
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2ba:	4a2a      	ldr	r2, [pc, #168]	@ (800b364 <xTaskResumeAll+0x124>)
 800b2bc:	6013      	str	r3, [r2, #0]
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2c2:	4613      	mov	r3, r2
 800b2c4:	009b      	lsls	r3, r3, #2
 800b2c6:	4413      	add	r3, r2
 800b2c8:	009b      	lsls	r3, r3, #2
 800b2ca:	4a27      	ldr	r2, [pc, #156]	@ (800b368 <xTaskResumeAll+0x128>)
 800b2cc:	441a      	add	r2, r3
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	3304      	adds	r3, #4
 800b2d2:	4619      	mov	r1, r3
 800b2d4:	4610      	mov	r0, r2
 800b2d6:	f7fe fe84 	bl	8009fe2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2de:	4b23      	ldr	r3, [pc, #140]	@ (800b36c <xTaskResumeAll+0x12c>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d302      	bcc.n	800b2ee <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b2e8:	4b21      	ldr	r3, [pc, #132]	@ (800b370 <xTaskResumeAll+0x130>)
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b2ee:	4b1c      	ldr	r3, [pc, #112]	@ (800b360 <xTaskResumeAll+0x120>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d1cb      	bne.n	800b28e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d001      	beq.n	800b300 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b2fc:	f000 fc00 	bl	800bb00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b300:	4b1c      	ldr	r3, [pc, #112]	@ (800b374 <xTaskResumeAll+0x134>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d010      	beq.n	800b32e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b30c:	f000 f86e 	bl	800b3ec <xTaskIncrementTick>
 800b310:	4603      	mov	r3, r0
 800b312:	2b00      	cmp	r3, #0
 800b314:	d002      	beq.n	800b31c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b316:	4b16      	ldr	r3, [pc, #88]	@ (800b370 <xTaskResumeAll+0x130>)
 800b318:	2201      	movs	r2, #1
 800b31a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	3b01      	subs	r3, #1
 800b320:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d1f1      	bne.n	800b30c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b328:	4b12      	ldr	r3, [pc, #72]	@ (800b374 <xTaskResumeAll+0x134>)
 800b32a:	2200      	movs	r2, #0
 800b32c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b32e:	4b10      	ldr	r3, [pc, #64]	@ (800b370 <xTaskResumeAll+0x130>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d009      	beq.n	800b34a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b336:	2301      	movs	r3, #1
 800b338:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b33a:	4b0f      	ldr	r3, [pc, #60]	@ (800b378 <xTaskResumeAll+0x138>)
 800b33c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b340:	601a      	str	r2, [r3, #0]
 800b342:	f3bf 8f4f 	dsb	sy
 800b346:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b34a:	f001 f997 	bl	800c67c <vPortExitCritical>

	return xAlreadyYielded;
 800b34e:	68bb      	ldr	r3, [r7, #8]
}
 800b350:	4618      	mov	r0, r3
 800b352:	3710      	adds	r7, #16
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}
 800b358:	20001404 	.word	0x20001404
 800b35c:	200013dc 	.word	0x200013dc
 800b360:	2000139c 	.word	0x2000139c
 800b364:	200013e4 	.word	0x200013e4
 800b368:	20000f0c 	.word	0x20000f0c
 800b36c:	20000f08 	.word	0x20000f08
 800b370:	200013f0 	.word	0x200013f0
 800b374:	200013ec 	.word	0x200013ec
 800b378:	e000ed04 	.word	0xe000ed04

0800b37c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b37c:	b480      	push	{r7}
 800b37e:	b083      	sub	sp, #12
 800b380:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b382:	4b05      	ldr	r3, [pc, #20]	@ (800b398 <xTaskGetTickCount+0x1c>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b388:	687b      	ldr	r3, [r7, #4]
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	370c      	adds	r7, #12
 800b38e:	46bd      	mov	sp, r7
 800b390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b394:	4770      	bx	lr
 800b396:	bf00      	nop
 800b398:	200013e0 	.word	0x200013e0

0800b39c <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 800b39c:	b480      	push	{r7}
 800b39e:	b085      	sub	sp, #20
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800b3a4:	4b0f      	ldr	r3, [pc, #60]	@ (800b3e4 <vTaskStepTick+0x48>)
 800b3a6:	681a      	ldr	r2, [r3, #0]
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	441a      	add	r2, r3
 800b3ac:	4b0e      	ldr	r3, [pc, #56]	@ (800b3e8 <vTaskStepTick+0x4c>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	d90b      	bls.n	800b3cc <vTaskStepTick+0x30>
	__asm volatile
 800b3b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3b8:	f383 8811 	msr	BASEPRI, r3
 800b3bc:	f3bf 8f6f 	isb	sy
 800b3c0:	f3bf 8f4f 	dsb	sy
 800b3c4:	60fb      	str	r3, [r7, #12]
}
 800b3c6:	bf00      	nop
 800b3c8:	bf00      	nop
 800b3ca:	e7fd      	b.n	800b3c8 <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 800b3cc:	4b05      	ldr	r3, [pc, #20]	@ (800b3e4 <vTaskStepTick+0x48>)
 800b3ce:	681a      	ldr	r2, [r3, #0]
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	4413      	add	r3, r2
 800b3d4:	4a03      	ldr	r2, [pc, #12]	@ (800b3e4 <vTaskStepTick+0x48>)
 800b3d6:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 800b3d8:	bf00      	nop
 800b3da:	3714      	adds	r7, #20
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e2:	4770      	bx	lr
 800b3e4:	200013e0 	.word	0x200013e0
 800b3e8:	200013fc 	.word	0x200013fc

0800b3ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b086      	sub	sp, #24
 800b3f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3f6:	4b4f      	ldr	r3, [pc, #316]	@ (800b534 <xTaskIncrementTick+0x148>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	f040 8090 	bne.w	800b520 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b400:	4b4d      	ldr	r3, [pc, #308]	@ (800b538 <xTaskIncrementTick+0x14c>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	3301      	adds	r3, #1
 800b406:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b408:	4a4b      	ldr	r2, [pc, #300]	@ (800b538 <xTaskIncrementTick+0x14c>)
 800b40a:	693b      	ldr	r3, [r7, #16]
 800b40c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d121      	bne.n	800b458 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b414:	4b49      	ldr	r3, [pc, #292]	@ (800b53c <xTaskIncrementTick+0x150>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d00b      	beq.n	800b436 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b41e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b422:	f383 8811 	msr	BASEPRI, r3
 800b426:	f3bf 8f6f 	isb	sy
 800b42a:	f3bf 8f4f 	dsb	sy
 800b42e:	603b      	str	r3, [r7, #0]
}
 800b430:	bf00      	nop
 800b432:	bf00      	nop
 800b434:	e7fd      	b.n	800b432 <xTaskIncrementTick+0x46>
 800b436:	4b41      	ldr	r3, [pc, #260]	@ (800b53c <xTaskIncrementTick+0x150>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	60fb      	str	r3, [r7, #12]
 800b43c:	4b40      	ldr	r3, [pc, #256]	@ (800b540 <xTaskIncrementTick+0x154>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4a3e      	ldr	r2, [pc, #248]	@ (800b53c <xTaskIncrementTick+0x150>)
 800b442:	6013      	str	r3, [r2, #0]
 800b444:	4a3e      	ldr	r2, [pc, #248]	@ (800b540 <xTaskIncrementTick+0x154>)
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	6013      	str	r3, [r2, #0]
 800b44a:	4b3e      	ldr	r3, [pc, #248]	@ (800b544 <xTaskIncrementTick+0x158>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	3301      	adds	r3, #1
 800b450:	4a3c      	ldr	r2, [pc, #240]	@ (800b544 <xTaskIncrementTick+0x158>)
 800b452:	6013      	str	r3, [r2, #0]
 800b454:	f000 fb54 	bl	800bb00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b458:	4b3b      	ldr	r3, [pc, #236]	@ (800b548 <xTaskIncrementTick+0x15c>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	693a      	ldr	r2, [r7, #16]
 800b45e:	429a      	cmp	r2, r3
 800b460:	d349      	bcc.n	800b4f6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b462:	4b36      	ldr	r3, [pc, #216]	@ (800b53c <xTaskIncrementTick+0x150>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d104      	bne.n	800b476 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b46c:	4b36      	ldr	r3, [pc, #216]	@ (800b548 <xTaskIncrementTick+0x15c>)
 800b46e:	f04f 32ff 	mov.w	r2, #4294967295
 800b472:	601a      	str	r2, [r3, #0]
					break;
 800b474:	e03f      	b.n	800b4f6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b476:	4b31      	ldr	r3, [pc, #196]	@ (800b53c <xTaskIncrementTick+0x150>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	68db      	ldr	r3, [r3, #12]
 800b47c:	68db      	ldr	r3, [r3, #12]
 800b47e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	685b      	ldr	r3, [r3, #4]
 800b484:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b486:	693a      	ldr	r2, [r7, #16]
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	429a      	cmp	r2, r3
 800b48c:	d203      	bcs.n	800b496 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b48e:	4a2e      	ldr	r2, [pc, #184]	@ (800b548 <xTaskIncrementTick+0x15c>)
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b494:	e02f      	b.n	800b4f6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	3304      	adds	r3, #4
 800b49a:	4618      	mov	r0, r3
 800b49c:	f7fe fdfe 	bl	800a09c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d004      	beq.n	800b4b2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	3318      	adds	r3, #24
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f7fe fdf5 	bl	800a09c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4b6:	4b25      	ldr	r3, [pc, #148]	@ (800b54c <xTaskIncrementTick+0x160>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d903      	bls.n	800b4c6 <xTaskIncrementTick+0xda>
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4c2:	4a22      	ldr	r2, [pc, #136]	@ (800b54c <xTaskIncrementTick+0x160>)
 800b4c4:	6013      	str	r3, [r2, #0]
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4ca:	4613      	mov	r3, r2
 800b4cc:	009b      	lsls	r3, r3, #2
 800b4ce:	4413      	add	r3, r2
 800b4d0:	009b      	lsls	r3, r3, #2
 800b4d2:	4a1f      	ldr	r2, [pc, #124]	@ (800b550 <xTaskIncrementTick+0x164>)
 800b4d4:	441a      	add	r2, r3
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	3304      	adds	r3, #4
 800b4da:	4619      	mov	r1, r3
 800b4dc:	4610      	mov	r0, r2
 800b4de:	f7fe fd80 	bl	8009fe2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4e6:	4b1b      	ldr	r3, [pc, #108]	@ (800b554 <xTaskIncrementTick+0x168>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4ec:	429a      	cmp	r2, r3
 800b4ee:	d3b8      	bcc.n	800b462 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4f4:	e7b5      	b.n	800b462 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b4f6:	4b17      	ldr	r3, [pc, #92]	@ (800b554 <xTaskIncrementTick+0x168>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4fc:	4914      	ldr	r1, [pc, #80]	@ (800b550 <xTaskIncrementTick+0x164>)
 800b4fe:	4613      	mov	r3, r2
 800b500:	009b      	lsls	r3, r3, #2
 800b502:	4413      	add	r3, r2
 800b504:	009b      	lsls	r3, r3, #2
 800b506:	440b      	add	r3, r1
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	2b01      	cmp	r3, #1
 800b50c:	d901      	bls.n	800b512 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b50e:	2301      	movs	r3, #1
 800b510:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b512:	4b11      	ldr	r3, [pc, #68]	@ (800b558 <xTaskIncrementTick+0x16c>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d007      	beq.n	800b52a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b51a:	2301      	movs	r3, #1
 800b51c:	617b      	str	r3, [r7, #20]
 800b51e:	e004      	b.n	800b52a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b520:	4b0e      	ldr	r3, [pc, #56]	@ (800b55c <xTaskIncrementTick+0x170>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	3301      	adds	r3, #1
 800b526:	4a0d      	ldr	r2, [pc, #52]	@ (800b55c <xTaskIncrementTick+0x170>)
 800b528:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b52a:	697b      	ldr	r3, [r7, #20]
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	3718      	adds	r7, #24
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}
 800b534:	20001404 	.word	0x20001404
 800b538:	200013e0 	.word	0x200013e0
 800b53c:	20001394 	.word	0x20001394
 800b540:	20001398 	.word	0x20001398
 800b544:	200013f4 	.word	0x200013f4
 800b548:	200013fc 	.word	0x200013fc
 800b54c:	200013e4 	.word	0x200013e4
 800b550:	20000f0c 	.word	0x20000f0c
 800b554:	20000f08 	.word	0x20000f08
 800b558:	200013f0 	.word	0x200013f0
 800b55c:	200013ec 	.word	0x200013ec

0800b560 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b084      	sub	sp, #16
 800b564:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b566:	4b36      	ldr	r3, [pc, #216]	@ (800b640 <vTaskSwitchContext+0xe0>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d003      	beq.n	800b576 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b56e:	4b35      	ldr	r3, [pc, #212]	@ (800b644 <vTaskSwitchContext+0xe4>)
 800b570:	2201      	movs	r2, #1
 800b572:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b574:	e060      	b.n	800b638 <vTaskSwitchContext+0xd8>
		xYieldPending = pdFALSE;
 800b576:	4b33      	ldr	r3, [pc, #204]	@ (800b644 <vTaskSwitchContext+0xe4>)
 800b578:	2200      	movs	r2, #0
 800b57a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800b57c:	f7f7 ffd0 	bl	8003520 <getRunTimeCounterValue>
 800b580:	4603      	mov	r3, r0
 800b582:	4a31      	ldr	r2, [pc, #196]	@ (800b648 <vTaskSwitchContext+0xe8>)
 800b584:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800b586:	4b30      	ldr	r3, [pc, #192]	@ (800b648 <vTaskSwitchContext+0xe8>)
 800b588:	681a      	ldr	r2, [r3, #0]
 800b58a:	4b30      	ldr	r3, [pc, #192]	@ (800b64c <vTaskSwitchContext+0xec>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	429a      	cmp	r2, r3
 800b590:	d909      	bls.n	800b5a6 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800b592:	4b2f      	ldr	r3, [pc, #188]	@ (800b650 <vTaskSwitchContext+0xf0>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800b598:	4a2b      	ldr	r2, [pc, #172]	@ (800b648 <vTaskSwitchContext+0xe8>)
 800b59a:	6810      	ldr	r0, [r2, #0]
 800b59c:	4a2b      	ldr	r2, [pc, #172]	@ (800b64c <vTaskSwitchContext+0xec>)
 800b59e:	6812      	ldr	r2, [r2, #0]
 800b5a0:	1a82      	subs	r2, r0, r2
 800b5a2:	440a      	add	r2, r1
 800b5a4:	659a      	str	r2, [r3, #88]	@ 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800b5a6:	4b28      	ldr	r3, [pc, #160]	@ (800b648 <vTaskSwitchContext+0xe8>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	4a28      	ldr	r2, [pc, #160]	@ (800b64c <vTaskSwitchContext+0xec>)
 800b5ac:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5ae:	4b29      	ldr	r3, [pc, #164]	@ (800b654 <vTaskSwitchContext+0xf4>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	60fb      	str	r3, [r7, #12]
 800b5b4:	e011      	b.n	800b5da <vTaskSwitchContext+0x7a>
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d10b      	bne.n	800b5d4 <vTaskSwitchContext+0x74>
	__asm volatile
 800b5bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5c0:	f383 8811 	msr	BASEPRI, r3
 800b5c4:	f3bf 8f6f 	isb	sy
 800b5c8:	f3bf 8f4f 	dsb	sy
 800b5cc:	607b      	str	r3, [r7, #4]
}
 800b5ce:	bf00      	nop
 800b5d0:	bf00      	nop
 800b5d2:	e7fd      	b.n	800b5d0 <vTaskSwitchContext+0x70>
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	3b01      	subs	r3, #1
 800b5d8:	60fb      	str	r3, [r7, #12]
 800b5da:	491f      	ldr	r1, [pc, #124]	@ (800b658 <vTaskSwitchContext+0xf8>)
 800b5dc:	68fa      	ldr	r2, [r7, #12]
 800b5de:	4613      	mov	r3, r2
 800b5e0:	009b      	lsls	r3, r3, #2
 800b5e2:	4413      	add	r3, r2
 800b5e4:	009b      	lsls	r3, r3, #2
 800b5e6:	440b      	add	r3, r1
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d0e3      	beq.n	800b5b6 <vTaskSwitchContext+0x56>
 800b5ee:	68fa      	ldr	r2, [r7, #12]
 800b5f0:	4613      	mov	r3, r2
 800b5f2:	009b      	lsls	r3, r3, #2
 800b5f4:	4413      	add	r3, r2
 800b5f6:	009b      	lsls	r3, r3, #2
 800b5f8:	4a17      	ldr	r2, [pc, #92]	@ (800b658 <vTaskSwitchContext+0xf8>)
 800b5fa:	4413      	add	r3, r2
 800b5fc:	60bb      	str	r3, [r7, #8]
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	685b      	ldr	r3, [r3, #4]
 800b602:	685a      	ldr	r2, [r3, #4]
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	605a      	str	r2, [r3, #4]
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	685a      	ldr	r2, [r3, #4]
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	3308      	adds	r3, #8
 800b610:	429a      	cmp	r2, r3
 800b612:	d104      	bne.n	800b61e <vTaskSwitchContext+0xbe>
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	685b      	ldr	r3, [r3, #4]
 800b618:	685a      	ldr	r2, [r3, #4]
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	605a      	str	r2, [r3, #4]
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	685b      	ldr	r3, [r3, #4]
 800b622:	68db      	ldr	r3, [r3, #12]
 800b624:	4a0a      	ldr	r2, [pc, #40]	@ (800b650 <vTaskSwitchContext+0xf0>)
 800b626:	6013      	str	r3, [r2, #0]
 800b628:	4a0a      	ldr	r2, [pc, #40]	@ (800b654 <vTaskSwitchContext+0xf4>)
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b62e:	4b08      	ldr	r3, [pc, #32]	@ (800b650 <vTaskSwitchContext+0xf0>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	335c      	adds	r3, #92	@ 0x5c
 800b634:	4a09      	ldr	r2, [pc, #36]	@ (800b65c <vTaskSwitchContext+0xfc>)
 800b636:	6013      	str	r3, [r2, #0]
}
 800b638:	bf00      	nop
 800b63a:	3710      	adds	r7, #16
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}
 800b640:	20001404 	.word	0x20001404
 800b644:	200013f0 	.word	0x200013f0
 800b648:	2000140c 	.word	0x2000140c
 800b64c:	20001408 	.word	0x20001408
 800b650:	20000f08 	.word	0x20000f08
 800b654:	200013e4 	.word	0x200013e4
 800b658:	20000f0c 	.word	0x20000f0c
 800b65c:	20000268 	.word	0x20000268

0800b660 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b084      	sub	sp, #16
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d10b      	bne.n	800b688 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b674:	f383 8811 	msr	BASEPRI, r3
 800b678:	f3bf 8f6f 	isb	sy
 800b67c:	f3bf 8f4f 	dsb	sy
 800b680:	60fb      	str	r3, [r7, #12]
}
 800b682:	bf00      	nop
 800b684:	bf00      	nop
 800b686:	e7fd      	b.n	800b684 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b688:	4b07      	ldr	r3, [pc, #28]	@ (800b6a8 <vTaskPlaceOnEventList+0x48>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	3318      	adds	r3, #24
 800b68e:	4619      	mov	r1, r3
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f7fe fcca 	bl	800a02a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b696:	2101      	movs	r1, #1
 800b698:	6838      	ldr	r0, [r7, #0]
 800b69a:	f000 fadf 	bl	800bc5c <prvAddCurrentTaskToDelayedList>
}
 800b69e:	bf00      	nop
 800b6a0:	3710      	adds	r7, #16
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}
 800b6a6:	bf00      	nop
 800b6a8:	20000f08 	.word	0x20000f08

0800b6ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b086      	sub	sp, #24
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	60f8      	str	r0, [r7, #12]
 800b6b4:	60b9      	str	r1, [r7, #8]
 800b6b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d10b      	bne.n	800b6d6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b6be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6c2:	f383 8811 	msr	BASEPRI, r3
 800b6c6:	f3bf 8f6f 	isb	sy
 800b6ca:	f3bf 8f4f 	dsb	sy
 800b6ce:	617b      	str	r3, [r7, #20]
}
 800b6d0:	bf00      	nop
 800b6d2:	bf00      	nop
 800b6d4:	e7fd      	b.n	800b6d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b6d6:	4b0a      	ldr	r3, [pc, #40]	@ (800b700 <vTaskPlaceOnEventListRestricted+0x54>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	3318      	adds	r3, #24
 800b6dc:	4619      	mov	r1, r3
 800b6de:	68f8      	ldr	r0, [r7, #12]
 800b6e0:	f7fe fc7f 	bl	8009fe2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d002      	beq.n	800b6f0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b6ea:	f04f 33ff 	mov.w	r3, #4294967295
 800b6ee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b6f0:	6879      	ldr	r1, [r7, #4]
 800b6f2:	68b8      	ldr	r0, [r7, #8]
 800b6f4:	f000 fab2 	bl	800bc5c <prvAddCurrentTaskToDelayedList>
	}
 800b6f8:	bf00      	nop
 800b6fa:	3718      	adds	r7, #24
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}
 800b700:	20000f08 	.word	0x20000f08

0800b704 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b086      	sub	sp, #24
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	68db      	ldr	r3, [r3, #12]
 800b710:	68db      	ldr	r3, [r3, #12]
 800b712:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b714:	693b      	ldr	r3, [r7, #16]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d10b      	bne.n	800b732 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b71a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b71e:	f383 8811 	msr	BASEPRI, r3
 800b722:	f3bf 8f6f 	isb	sy
 800b726:	f3bf 8f4f 	dsb	sy
 800b72a:	60fb      	str	r3, [r7, #12]
}
 800b72c:	bf00      	nop
 800b72e:	bf00      	nop
 800b730:	e7fd      	b.n	800b72e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	3318      	adds	r3, #24
 800b736:	4618      	mov	r0, r3
 800b738:	f7fe fcb0 	bl	800a09c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b73c:	4b1e      	ldr	r3, [pc, #120]	@ (800b7b8 <xTaskRemoveFromEventList+0xb4>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d11f      	bne.n	800b784 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	3304      	adds	r3, #4
 800b748:	4618      	mov	r0, r3
 800b74a:	f7fe fca7 	bl	800a09c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b752:	4b1a      	ldr	r3, [pc, #104]	@ (800b7bc <xTaskRemoveFromEventList+0xb8>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	429a      	cmp	r2, r3
 800b758:	d903      	bls.n	800b762 <xTaskRemoveFromEventList+0x5e>
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b75e:	4a17      	ldr	r2, [pc, #92]	@ (800b7bc <xTaskRemoveFromEventList+0xb8>)
 800b760:	6013      	str	r3, [r2, #0]
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b766:	4613      	mov	r3, r2
 800b768:	009b      	lsls	r3, r3, #2
 800b76a:	4413      	add	r3, r2
 800b76c:	009b      	lsls	r3, r3, #2
 800b76e:	4a14      	ldr	r2, [pc, #80]	@ (800b7c0 <xTaskRemoveFromEventList+0xbc>)
 800b770:	441a      	add	r2, r3
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	3304      	adds	r3, #4
 800b776:	4619      	mov	r1, r3
 800b778:	4610      	mov	r0, r2
 800b77a:	f7fe fc32 	bl	8009fe2 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800b77e:	f000 f9bf 	bl	800bb00 <prvResetNextTaskUnblockTime>
 800b782:	e005      	b.n	800b790 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	3318      	adds	r3, #24
 800b788:	4619      	mov	r1, r3
 800b78a:	480e      	ldr	r0, [pc, #56]	@ (800b7c4 <xTaskRemoveFromEventList+0xc0>)
 800b78c:	f7fe fc29 	bl	8009fe2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b794:	4b0c      	ldr	r3, [pc, #48]	@ (800b7c8 <xTaskRemoveFromEventList+0xc4>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b79a:	429a      	cmp	r2, r3
 800b79c:	d905      	bls.n	800b7aa <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b79e:	2301      	movs	r3, #1
 800b7a0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b7a2:	4b0a      	ldr	r3, [pc, #40]	@ (800b7cc <xTaskRemoveFromEventList+0xc8>)
 800b7a4:	2201      	movs	r2, #1
 800b7a6:	601a      	str	r2, [r3, #0]
 800b7a8:	e001      	b.n	800b7ae <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b7ae:	697b      	ldr	r3, [r7, #20]
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	3718      	adds	r7, #24
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}
 800b7b8:	20001404 	.word	0x20001404
 800b7bc:	200013e4 	.word	0x200013e4
 800b7c0:	20000f0c 	.word	0x20000f0c
 800b7c4:	2000139c 	.word	0x2000139c
 800b7c8:	20000f08 	.word	0x20000f08
 800b7cc:	200013f0 	.word	0x200013f0

0800b7d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b083      	sub	sp, #12
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b7d8:	4b06      	ldr	r3, [pc, #24]	@ (800b7f4 <vTaskInternalSetTimeOutState+0x24>)
 800b7da:	681a      	ldr	r2, [r3, #0]
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b7e0:	4b05      	ldr	r3, [pc, #20]	@ (800b7f8 <vTaskInternalSetTimeOutState+0x28>)
 800b7e2:	681a      	ldr	r2, [r3, #0]
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	605a      	str	r2, [r3, #4]
}
 800b7e8:	bf00      	nop
 800b7ea:	370c      	adds	r7, #12
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f2:	4770      	bx	lr
 800b7f4:	200013f4 	.word	0x200013f4
 800b7f8:	200013e0 	.word	0x200013e0

0800b7fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b088      	sub	sp, #32
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d10b      	bne.n	800b824 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b80c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b810:	f383 8811 	msr	BASEPRI, r3
 800b814:	f3bf 8f6f 	isb	sy
 800b818:	f3bf 8f4f 	dsb	sy
 800b81c:	613b      	str	r3, [r7, #16]
}
 800b81e:	bf00      	nop
 800b820:	bf00      	nop
 800b822:	e7fd      	b.n	800b820 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d10b      	bne.n	800b842 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b82a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b82e:	f383 8811 	msr	BASEPRI, r3
 800b832:	f3bf 8f6f 	isb	sy
 800b836:	f3bf 8f4f 	dsb	sy
 800b83a:	60fb      	str	r3, [r7, #12]
}
 800b83c:	bf00      	nop
 800b83e:	bf00      	nop
 800b840:	e7fd      	b.n	800b83e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b842:	f000 fee9 	bl	800c618 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b846:	4b1d      	ldr	r3, [pc, #116]	@ (800b8bc <xTaskCheckForTimeOut+0xc0>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	685b      	ldr	r3, [r3, #4]
 800b850:	69ba      	ldr	r2, [r7, #24]
 800b852:	1ad3      	subs	r3, r2, r3
 800b854:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b85e:	d102      	bne.n	800b866 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b860:	2300      	movs	r3, #0
 800b862:	61fb      	str	r3, [r7, #28]
 800b864:	e023      	b.n	800b8ae <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681a      	ldr	r2, [r3, #0]
 800b86a:	4b15      	ldr	r3, [pc, #84]	@ (800b8c0 <xTaskCheckForTimeOut+0xc4>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	429a      	cmp	r2, r3
 800b870:	d007      	beq.n	800b882 <xTaskCheckForTimeOut+0x86>
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	685b      	ldr	r3, [r3, #4]
 800b876:	69ba      	ldr	r2, [r7, #24]
 800b878:	429a      	cmp	r2, r3
 800b87a:	d302      	bcc.n	800b882 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b87c:	2301      	movs	r3, #1
 800b87e:	61fb      	str	r3, [r7, #28]
 800b880:	e015      	b.n	800b8ae <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	697a      	ldr	r2, [r7, #20]
 800b888:	429a      	cmp	r2, r3
 800b88a:	d20b      	bcs.n	800b8a4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	681a      	ldr	r2, [r3, #0]
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	1ad2      	subs	r2, r2, r3
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f7ff ff99 	bl	800b7d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	61fb      	str	r3, [r7, #28]
 800b8a2:	e004      	b.n	800b8ae <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b8ae:	f000 fee5 	bl	800c67c <vPortExitCritical>

	return xReturn;
 800b8b2:	69fb      	ldr	r3, [r7, #28]
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3720      	adds	r7, #32
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}
 800b8bc:	200013e0 	.word	0x200013e0
 800b8c0:	200013f4 	.word	0x200013f4

0800b8c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b8c8:	4b03      	ldr	r3, [pc, #12]	@ (800b8d8 <vTaskMissedYield+0x14>)
 800b8ca:	2201      	movs	r2, #1
 800b8cc:	601a      	str	r2, [r3, #0]
}
 800b8ce:	bf00      	nop
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d6:	4770      	bx	lr
 800b8d8:	200013f0 	.word	0x200013f0

0800b8dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b084      	sub	sp, #16
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b8e4:	f000 f8a8 	bl	800ba38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b8e8:	4b18      	ldr	r3, [pc, #96]	@ (800b94c <prvIdleTask+0x70>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	2b01      	cmp	r3, #1
 800b8ee:	d907      	bls.n	800b900 <prvIdleTask+0x24>
			{
				taskYIELD();
 800b8f0:	4b17      	ldr	r3, [pc, #92]	@ (800b950 <prvIdleTask+0x74>)
 800b8f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b8f6:	601a      	str	r2, [r3, #0]
 800b8f8:	f3bf 8f4f 	dsb	sy
 800b8fc:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800b900:	f7ff fc66 	bl	800b1d0 <prvGetExpectedIdleTime>
 800b904:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	2b01      	cmp	r3, #1
 800b90a:	d9eb      	bls.n	800b8e4 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800b90c:	f7ff fc52 	bl	800b1b4 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800b910:	4b10      	ldr	r3, [pc, #64]	@ (800b954 <prvIdleTask+0x78>)
 800b912:	681a      	ldr	r2, [r3, #0]
 800b914:	4b10      	ldr	r3, [pc, #64]	@ (800b958 <prvIdleTask+0x7c>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	429a      	cmp	r2, r3
 800b91a:	d20b      	bcs.n	800b934 <prvIdleTask+0x58>
	__asm volatile
 800b91c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b920:	f383 8811 	msr	BASEPRI, r3
 800b924:	f3bf 8f6f 	isb	sy
 800b928:	f3bf 8f4f 	dsb	sy
 800b92c:	60bb      	str	r3, [r7, #8]
}
 800b92e:	bf00      	nop
 800b930:	bf00      	nop
 800b932:	e7fd      	b.n	800b930 <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800b934:	f7ff fc4c 	bl	800b1d0 <prvGetExpectedIdleTime>
 800b938:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	2b01      	cmp	r3, #1
 800b93e:	d902      	bls.n	800b946 <prvIdleTask+0x6a>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800b940:	68f8      	ldr	r0, [r7, #12]
 800b942:	f000 ff1b 	bl	800c77c <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800b946:	f7ff fc7b 	bl	800b240 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800b94a:	e7cb      	b.n	800b8e4 <prvIdleTask+0x8>
 800b94c:	20000f0c 	.word	0x20000f0c
 800b950:	e000ed04 	.word	0xe000ed04
 800b954:	200013fc 	.word	0x200013fc
 800b958:	200013e0 	.word	0x200013e0

0800b95c <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 800b95c:	b480      	push	{r7}
 800b95e:	b083      	sub	sp, #12
 800b960:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 800b962:	2301      	movs	r3, #1
 800b964:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 800b966:	2301      	movs	r3, #1
 800b968:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800b96a:	4b0f      	ldr	r3, [pc, #60]	@ (800b9a8 <eTaskConfirmSleepModeStatus+0x4c>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d002      	beq.n	800b978 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800b972:	2300      	movs	r3, #0
 800b974:	71fb      	strb	r3, [r7, #7]
 800b976:	e010      	b.n	800b99a <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 800b978:	4b0c      	ldr	r3, [pc, #48]	@ (800b9ac <eTaskConfirmSleepModeStatus+0x50>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d002      	beq.n	800b986 <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800b980:	2300      	movs	r3, #0
 800b982:	71fb      	strb	r3, [r7, #7]
 800b984:	e009      	b.n	800b99a <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800b986:	4b0a      	ldr	r3, [pc, #40]	@ (800b9b0 <eTaskConfirmSleepModeStatus+0x54>)
 800b988:	681a      	ldr	r2, [r3, #0]
 800b98a:	4b0a      	ldr	r3, [pc, #40]	@ (800b9b4 <eTaskConfirmSleepModeStatus+0x58>)
 800b98c:	6819      	ldr	r1, [r3, #0]
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	1acb      	subs	r3, r1, r3
 800b992:	429a      	cmp	r2, r3
 800b994:	d101      	bne.n	800b99a <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 800b996:	2302      	movs	r3, #2
 800b998:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 800b99a:	79fb      	ldrb	r3, [r7, #7]
	}
 800b99c:	4618      	mov	r0, r3
 800b99e:	370c      	adds	r7, #12
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a6:	4770      	bx	lr
 800b9a8:	2000139c 	.word	0x2000139c
 800b9ac:	200013f0 	.word	0x200013f0
 800b9b0:	200013c8 	.word	0x200013c8
 800b9b4:	200013dc 	.word	0x200013dc

0800b9b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b082      	sub	sp, #8
 800b9bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b9be:	2300      	movs	r3, #0
 800b9c0:	607b      	str	r3, [r7, #4]
 800b9c2:	e00c      	b.n	800b9de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b9c4:	687a      	ldr	r2, [r7, #4]
 800b9c6:	4613      	mov	r3, r2
 800b9c8:	009b      	lsls	r3, r3, #2
 800b9ca:	4413      	add	r3, r2
 800b9cc:	009b      	lsls	r3, r3, #2
 800b9ce:	4a12      	ldr	r2, [pc, #72]	@ (800ba18 <prvInitialiseTaskLists+0x60>)
 800b9d0:	4413      	add	r3, r2
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f7fe fad8 	bl	8009f88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	3301      	adds	r3, #1
 800b9dc:	607b      	str	r3, [r7, #4]
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2b37      	cmp	r3, #55	@ 0x37
 800b9e2:	d9ef      	bls.n	800b9c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b9e4:	480d      	ldr	r0, [pc, #52]	@ (800ba1c <prvInitialiseTaskLists+0x64>)
 800b9e6:	f7fe facf 	bl	8009f88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b9ea:	480d      	ldr	r0, [pc, #52]	@ (800ba20 <prvInitialiseTaskLists+0x68>)
 800b9ec:	f7fe facc 	bl	8009f88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b9f0:	480c      	ldr	r0, [pc, #48]	@ (800ba24 <prvInitialiseTaskLists+0x6c>)
 800b9f2:	f7fe fac9 	bl	8009f88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b9f6:	480c      	ldr	r0, [pc, #48]	@ (800ba28 <prvInitialiseTaskLists+0x70>)
 800b9f8:	f7fe fac6 	bl	8009f88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b9fc:	480b      	ldr	r0, [pc, #44]	@ (800ba2c <prvInitialiseTaskLists+0x74>)
 800b9fe:	f7fe fac3 	bl	8009f88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ba02:	4b0b      	ldr	r3, [pc, #44]	@ (800ba30 <prvInitialiseTaskLists+0x78>)
 800ba04:	4a05      	ldr	r2, [pc, #20]	@ (800ba1c <prvInitialiseTaskLists+0x64>)
 800ba06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ba08:	4b0a      	ldr	r3, [pc, #40]	@ (800ba34 <prvInitialiseTaskLists+0x7c>)
 800ba0a:	4a05      	ldr	r2, [pc, #20]	@ (800ba20 <prvInitialiseTaskLists+0x68>)
 800ba0c:	601a      	str	r2, [r3, #0]
}
 800ba0e:	bf00      	nop
 800ba10:	3708      	adds	r7, #8
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bd80      	pop	{r7, pc}
 800ba16:	bf00      	nop
 800ba18:	20000f0c 	.word	0x20000f0c
 800ba1c:	2000136c 	.word	0x2000136c
 800ba20:	20001380 	.word	0x20001380
 800ba24:	2000139c 	.word	0x2000139c
 800ba28:	200013b0 	.word	0x200013b0
 800ba2c:	200013c8 	.word	0x200013c8
 800ba30:	20001394 	.word	0x20001394
 800ba34:	20001398 	.word	0x20001398

0800ba38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b082      	sub	sp, #8
 800ba3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba3e:	e019      	b.n	800ba74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ba40:	f000 fdea 	bl	800c618 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba44:	4b10      	ldr	r3, [pc, #64]	@ (800ba88 <prvCheckTasksWaitingTermination+0x50>)
 800ba46:	68db      	ldr	r3, [r3, #12]
 800ba48:	68db      	ldr	r3, [r3, #12]
 800ba4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	3304      	adds	r3, #4
 800ba50:	4618      	mov	r0, r3
 800ba52:	f7fe fb23 	bl	800a09c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ba56:	4b0d      	ldr	r3, [pc, #52]	@ (800ba8c <prvCheckTasksWaitingTermination+0x54>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	3b01      	subs	r3, #1
 800ba5c:	4a0b      	ldr	r2, [pc, #44]	@ (800ba8c <prvCheckTasksWaitingTermination+0x54>)
 800ba5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ba60:	4b0b      	ldr	r3, [pc, #44]	@ (800ba90 <prvCheckTasksWaitingTermination+0x58>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	3b01      	subs	r3, #1
 800ba66:	4a0a      	ldr	r2, [pc, #40]	@ (800ba90 <prvCheckTasksWaitingTermination+0x58>)
 800ba68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ba6a:	f000 fe07 	bl	800c67c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f000 f810 	bl	800ba94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba74:	4b06      	ldr	r3, [pc, #24]	@ (800ba90 <prvCheckTasksWaitingTermination+0x58>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d1e1      	bne.n	800ba40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ba7c:	bf00      	nop
 800ba7e:	bf00      	nop
 800ba80:	3708      	adds	r7, #8
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}
 800ba86:	bf00      	nop
 800ba88:	200013b0 	.word	0x200013b0
 800ba8c:	200013dc 	.word	0x200013dc
 800ba90:	200013c4 	.word	0x200013c4

0800ba94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b084      	sub	sp, #16
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	335c      	adds	r3, #92	@ 0x5c
 800baa0:	4618      	mov	r0, r3
 800baa2:	f002 ffb7 	bl	800ea14 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800baac:	2b00      	cmp	r3, #0
 800baae:	d108      	bne.n	800bac2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bab4:	4618      	mov	r0, r3
 800bab6:	f001 f883 	bl	800cbc0 <vPortFree>
				vPortFree( pxTCB );
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f001 f880 	bl	800cbc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bac0:	e019      	b.n	800baf6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800bac8:	2b01      	cmp	r3, #1
 800baca:	d103      	bne.n	800bad4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f001 f877 	bl	800cbc0 <vPortFree>
	}
 800bad2:	e010      	b.n	800baf6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800bada:	2b02      	cmp	r3, #2
 800badc:	d00b      	beq.n	800baf6 <prvDeleteTCB+0x62>
	__asm volatile
 800bade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bae2:	f383 8811 	msr	BASEPRI, r3
 800bae6:	f3bf 8f6f 	isb	sy
 800baea:	f3bf 8f4f 	dsb	sy
 800baee:	60fb      	str	r3, [r7, #12]
}
 800baf0:	bf00      	nop
 800baf2:	bf00      	nop
 800baf4:	e7fd      	b.n	800baf2 <prvDeleteTCB+0x5e>
	}
 800baf6:	bf00      	nop
 800baf8:	3710      	adds	r7, #16
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
	...

0800bb00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bb00:	b480      	push	{r7}
 800bb02:	b083      	sub	sp, #12
 800bb04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb06:	4b0c      	ldr	r3, [pc, #48]	@ (800bb38 <prvResetNextTaskUnblockTime+0x38>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d104      	bne.n	800bb1a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bb10:	4b0a      	ldr	r3, [pc, #40]	@ (800bb3c <prvResetNextTaskUnblockTime+0x3c>)
 800bb12:	f04f 32ff 	mov.w	r2, #4294967295
 800bb16:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bb18:	e008      	b.n	800bb2c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb1a:	4b07      	ldr	r3, [pc, #28]	@ (800bb38 <prvResetNextTaskUnblockTime+0x38>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	68db      	ldr	r3, [r3, #12]
 800bb20:	68db      	ldr	r3, [r3, #12]
 800bb22:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	685b      	ldr	r3, [r3, #4]
 800bb28:	4a04      	ldr	r2, [pc, #16]	@ (800bb3c <prvResetNextTaskUnblockTime+0x3c>)
 800bb2a:	6013      	str	r3, [r2, #0]
}
 800bb2c:	bf00      	nop
 800bb2e:	370c      	adds	r7, #12
 800bb30:	46bd      	mov	sp, r7
 800bb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb36:	4770      	bx	lr
 800bb38:	20001394 	.word	0x20001394
 800bb3c:	200013fc 	.word	0x200013fc

0800bb40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bb40:	b480      	push	{r7}
 800bb42:	b083      	sub	sp, #12
 800bb44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bb46:	4b0b      	ldr	r3, [pc, #44]	@ (800bb74 <xTaskGetSchedulerState+0x34>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d102      	bne.n	800bb54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bb4e:	2301      	movs	r3, #1
 800bb50:	607b      	str	r3, [r7, #4]
 800bb52:	e008      	b.n	800bb66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb54:	4b08      	ldr	r3, [pc, #32]	@ (800bb78 <xTaskGetSchedulerState+0x38>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d102      	bne.n	800bb62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bb5c:	2302      	movs	r3, #2
 800bb5e:	607b      	str	r3, [r7, #4]
 800bb60:	e001      	b.n	800bb66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bb62:	2300      	movs	r3, #0
 800bb64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bb66:	687b      	ldr	r3, [r7, #4]
	}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	370c      	adds	r7, #12
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb72:	4770      	bx	lr
 800bb74:	200013e8 	.word	0x200013e8
 800bb78:	20001404 	.word	0x20001404

0800bb7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b086      	sub	sp, #24
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d058      	beq.n	800bc44 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bb92:	4b2f      	ldr	r3, [pc, #188]	@ (800bc50 <xTaskPriorityDisinherit+0xd4>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	693a      	ldr	r2, [r7, #16]
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d00b      	beq.n	800bbb4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800bb9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bba0:	f383 8811 	msr	BASEPRI, r3
 800bba4:	f3bf 8f6f 	isb	sy
 800bba8:	f3bf 8f4f 	dsb	sy
 800bbac:	60fb      	str	r3, [r7, #12]
}
 800bbae:	bf00      	nop
 800bbb0:	bf00      	nop
 800bbb2:	e7fd      	b.n	800bbb0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d10b      	bne.n	800bbd4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800bbbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbc0:	f383 8811 	msr	BASEPRI, r3
 800bbc4:	f3bf 8f6f 	isb	sy
 800bbc8:	f3bf 8f4f 	dsb	sy
 800bbcc:	60bb      	str	r3, [r7, #8]
}
 800bbce:	bf00      	nop
 800bbd0:	bf00      	nop
 800bbd2:	e7fd      	b.n	800bbd0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bbd8:	1e5a      	subs	r2, r3, #1
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	655a      	str	r2, [r3, #84]	@ 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bbe6:	429a      	cmp	r2, r3
 800bbe8:	d02c      	beq.n	800bc44 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bbea:	693b      	ldr	r3, [r7, #16]
 800bbec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d128      	bne.n	800bc44 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	3304      	adds	r3, #4
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f7fe fa50 	bl	800a09c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bc00:	693b      	ldr	r3, [r7, #16]
 800bc02:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc08:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc14:	4b0f      	ldr	r3, [pc, #60]	@ (800bc54 <xTaskPriorityDisinherit+0xd8>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d903      	bls.n	800bc24 <xTaskPriorityDisinherit+0xa8>
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc20:	4a0c      	ldr	r2, [pc, #48]	@ (800bc54 <xTaskPriorityDisinherit+0xd8>)
 800bc22:	6013      	str	r3, [r2, #0]
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc28:	4613      	mov	r3, r2
 800bc2a:	009b      	lsls	r3, r3, #2
 800bc2c:	4413      	add	r3, r2
 800bc2e:	009b      	lsls	r3, r3, #2
 800bc30:	4a09      	ldr	r2, [pc, #36]	@ (800bc58 <xTaskPriorityDisinherit+0xdc>)
 800bc32:	441a      	add	r2, r3
 800bc34:	693b      	ldr	r3, [r7, #16]
 800bc36:	3304      	adds	r3, #4
 800bc38:	4619      	mov	r1, r3
 800bc3a:	4610      	mov	r0, r2
 800bc3c:	f7fe f9d1 	bl	8009fe2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bc40:	2301      	movs	r3, #1
 800bc42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bc44:	697b      	ldr	r3, [r7, #20]
	}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3718      	adds	r7, #24
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}
 800bc4e:	bf00      	nop
 800bc50:	20000f08 	.word	0x20000f08
 800bc54:	200013e4 	.word	0x200013e4
 800bc58:	20000f0c 	.word	0x20000f0c

0800bc5c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b084      	sub	sp, #16
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
 800bc64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bc66:	4b21      	ldr	r3, [pc, #132]	@ (800bcec <prvAddCurrentTaskToDelayedList+0x90>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc6c:	4b20      	ldr	r3, [pc, #128]	@ (800bcf0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	3304      	adds	r3, #4
 800bc72:	4618      	mov	r0, r3
 800bc74:	f7fe fa12 	bl	800a09c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc7e:	d10a      	bne.n	800bc96 <prvAddCurrentTaskToDelayedList+0x3a>
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d007      	beq.n	800bc96 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc86:	4b1a      	ldr	r3, [pc, #104]	@ (800bcf0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	3304      	adds	r3, #4
 800bc8c:	4619      	mov	r1, r3
 800bc8e:	4819      	ldr	r0, [pc, #100]	@ (800bcf4 <prvAddCurrentTaskToDelayedList+0x98>)
 800bc90:	f7fe f9a7 	bl	8009fe2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bc94:	e026      	b.n	800bce4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bc96:	68fa      	ldr	r2, [r7, #12]
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	4413      	add	r3, r2
 800bc9c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bc9e:	4b14      	ldr	r3, [pc, #80]	@ (800bcf0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	68ba      	ldr	r2, [r7, #8]
 800bca4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bca6:	68ba      	ldr	r2, [r7, #8]
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d209      	bcs.n	800bcc2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bcae:	4b12      	ldr	r3, [pc, #72]	@ (800bcf8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bcb0:	681a      	ldr	r2, [r3, #0]
 800bcb2:	4b0f      	ldr	r3, [pc, #60]	@ (800bcf0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	3304      	adds	r3, #4
 800bcb8:	4619      	mov	r1, r3
 800bcba:	4610      	mov	r0, r2
 800bcbc:	f7fe f9b5 	bl	800a02a <vListInsert>
}
 800bcc0:	e010      	b.n	800bce4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bcc2:	4b0e      	ldr	r3, [pc, #56]	@ (800bcfc <prvAddCurrentTaskToDelayedList+0xa0>)
 800bcc4:	681a      	ldr	r2, [r3, #0]
 800bcc6:	4b0a      	ldr	r3, [pc, #40]	@ (800bcf0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	3304      	adds	r3, #4
 800bccc:	4619      	mov	r1, r3
 800bcce:	4610      	mov	r0, r2
 800bcd0:	f7fe f9ab 	bl	800a02a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bcd4:	4b0a      	ldr	r3, [pc, #40]	@ (800bd00 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	68ba      	ldr	r2, [r7, #8]
 800bcda:	429a      	cmp	r2, r3
 800bcdc:	d202      	bcs.n	800bce4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bcde:	4a08      	ldr	r2, [pc, #32]	@ (800bd00 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	6013      	str	r3, [r2, #0]
}
 800bce4:	bf00      	nop
 800bce6:	3710      	adds	r7, #16
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}
 800bcec:	200013e0 	.word	0x200013e0
 800bcf0:	20000f08 	.word	0x20000f08
 800bcf4:	200013c8 	.word	0x200013c8
 800bcf8:	20001398 	.word	0x20001398
 800bcfc:	20001394 	.word	0x20001394
 800bd00:	200013fc 	.word	0x200013fc

0800bd04 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b08a      	sub	sp, #40	@ 0x28
 800bd08:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bd0e:	f000 fb13 	bl	800c338 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bd12:	4b1d      	ldr	r3, [pc, #116]	@ (800bd88 <xTimerCreateTimerTask+0x84>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d021      	beq.n	800bd5e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bd22:	1d3a      	adds	r2, r7, #4
 800bd24:	f107 0108 	add.w	r1, r7, #8
 800bd28:	f107 030c 	add.w	r3, r7, #12
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f7fe f911 	bl	8009f54 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bd32:	6879      	ldr	r1, [r7, #4]
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	68fa      	ldr	r2, [r7, #12]
 800bd38:	9202      	str	r2, [sp, #8]
 800bd3a:	9301      	str	r3, [sp, #4]
 800bd3c:	2302      	movs	r3, #2
 800bd3e:	9300      	str	r3, [sp, #0]
 800bd40:	2300      	movs	r3, #0
 800bd42:	460a      	mov	r2, r1
 800bd44:	4911      	ldr	r1, [pc, #68]	@ (800bd8c <xTimerCreateTimerTask+0x88>)
 800bd46:	4812      	ldr	r0, [pc, #72]	@ (800bd90 <xTimerCreateTimerTask+0x8c>)
 800bd48:	f7fe ffc8 	bl	800acdc <xTaskCreateStatic>
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	4a11      	ldr	r2, [pc, #68]	@ (800bd94 <xTimerCreateTimerTask+0x90>)
 800bd50:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bd52:	4b10      	ldr	r3, [pc, #64]	@ (800bd94 <xTimerCreateTimerTask+0x90>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d001      	beq.n	800bd5e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bd5e:	697b      	ldr	r3, [r7, #20]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d10b      	bne.n	800bd7c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800bd64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd68:	f383 8811 	msr	BASEPRI, r3
 800bd6c:	f3bf 8f6f 	isb	sy
 800bd70:	f3bf 8f4f 	dsb	sy
 800bd74:	613b      	str	r3, [r7, #16]
}
 800bd76:	bf00      	nop
 800bd78:	bf00      	nop
 800bd7a:	e7fd      	b.n	800bd78 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bd7c:	697b      	ldr	r3, [r7, #20]
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	3718      	adds	r7, #24
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}
 800bd86:	bf00      	nop
 800bd88:	20001440 	.word	0x20001440
 800bd8c:	08011768 	.word	0x08011768
 800bd90:	0800bed1 	.word	0x0800bed1
 800bd94:	20001444 	.word	0x20001444

0800bd98 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b08a      	sub	sp, #40	@ 0x28
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	60f8      	str	r0, [r7, #12]
 800bda0:	60b9      	str	r1, [r7, #8]
 800bda2:	607a      	str	r2, [r7, #4]
 800bda4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bda6:	2300      	movs	r3, #0
 800bda8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d10b      	bne.n	800bdc8 <xTimerGenericCommand+0x30>
	__asm volatile
 800bdb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdb4:	f383 8811 	msr	BASEPRI, r3
 800bdb8:	f3bf 8f6f 	isb	sy
 800bdbc:	f3bf 8f4f 	dsb	sy
 800bdc0:	623b      	str	r3, [r7, #32]
}
 800bdc2:	bf00      	nop
 800bdc4:	bf00      	nop
 800bdc6:	e7fd      	b.n	800bdc4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bdc8:	4b19      	ldr	r3, [pc, #100]	@ (800be30 <xTimerGenericCommand+0x98>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d02a      	beq.n	800be26 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	2b05      	cmp	r3, #5
 800bde0:	dc18      	bgt.n	800be14 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bde2:	f7ff fead 	bl	800bb40 <xTaskGetSchedulerState>
 800bde6:	4603      	mov	r3, r0
 800bde8:	2b02      	cmp	r3, #2
 800bdea:	d109      	bne.n	800be00 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bdec:	4b10      	ldr	r3, [pc, #64]	@ (800be30 <xTimerGenericCommand+0x98>)
 800bdee:	6818      	ldr	r0, [r3, #0]
 800bdf0:	f107 0110 	add.w	r1, r7, #16
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bdf8:	f7fe fac0 	bl	800a37c <xQueueGenericSend>
 800bdfc:	6278      	str	r0, [r7, #36]	@ 0x24
 800bdfe:	e012      	b.n	800be26 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800be00:	4b0b      	ldr	r3, [pc, #44]	@ (800be30 <xTimerGenericCommand+0x98>)
 800be02:	6818      	ldr	r0, [r3, #0]
 800be04:	f107 0110 	add.w	r1, r7, #16
 800be08:	2300      	movs	r3, #0
 800be0a:	2200      	movs	r2, #0
 800be0c:	f7fe fab6 	bl	800a37c <xQueueGenericSend>
 800be10:	6278      	str	r0, [r7, #36]	@ 0x24
 800be12:	e008      	b.n	800be26 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800be14:	4b06      	ldr	r3, [pc, #24]	@ (800be30 <xTimerGenericCommand+0x98>)
 800be16:	6818      	ldr	r0, [r3, #0]
 800be18:	f107 0110 	add.w	r1, r7, #16
 800be1c:	2300      	movs	r3, #0
 800be1e:	683a      	ldr	r2, [r7, #0]
 800be20:	f7fe fbae 	bl	800a580 <xQueueGenericSendFromISR>
 800be24:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800be26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800be28:	4618      	mov	r0, r3
 800be2a:	3728      	adds	r7, #40	@ 0x28
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}
 800be30:	20001440 	.word	0x20001440

0800be34 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b088      	sub	sp, #32
 800be38:	af02      	add	r7, sp, #8
 800be3a:	6078      	str	r0, [r7, #4]
 800be3c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be3e:	4b23      	ldr	r3, [pc, #140]	@ (800becc <prvProcessExpiredTimer+0x98>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	68db      	ldr	r3, [r3, #12]
 800be44:	68db      	ldr	r3, [r3, #12]
 800be46:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	3304      	adds	r3, #4
 800be4c:	4618      	mov	r0, r3
 800be4e:	f7fe f925 	bl	800a09c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800be58:	f003 0304 	and.w	r3, r3, #4
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d023      	beq.n	800bea8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800be60:	697b      	ldr	r3, [r7, #20]
 800be62:	699a      	ldr	r2, [r3, #24]
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	18d1      	adds	r1, r2, r3
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	683a      	ldr	r2, [r7, #0]
 800be6c:	6978      	ldr	r0, [r7, #20]
 800be6e:	f000 f8d5 	bl	800c01c <prvInsertTimerInActiveList>
 800be72:	4603      	mov	r3, r0
 800be74:	2b00      	cmp	r3, #0
 800be76:	d020      	beq.n	800beba <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800be78:	2300      	movs	r3, #0
 800be7a:	9300      	str	r3, [sp, #0]
 800be7c:	2300      	movs	r3, #0
 800be7e:	687a      	ldr	r2, [r7, #4]
 800be80:	2100      	movs	r1, #0
 800be82:	6978      	ldr	r0, [r7, #20]
 800be84:	f7ff ff88 	bl	800bd98 <xTimerGenericCommand>
 800be88:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d114      	bne.n	800beba <prvProcessExpiredTimer+0x86>
	__asm volatile
 800be90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be94:	f383 8811 	msr	BASEPRI, r3
 800be98:	f3bf 8f6f 	isb	sy
 800be9c:	f3bf 8f4f 	dsb	sy
 800bea0:	60fb      	str	r3, [r7, #12]
}
 800bea2:	bf00      	nop
 800bea4:	bf00      	nop
 800bea6:	e7fd      	b.n	800bea4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bea8:	697b      	ldr	r3, [r7, #20]
 800beaa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800beae:	f023 0301 	bic.w	r3, r3, #1
 800beb2:	b2da      	uxtb	r2, r3
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800beba:	697b      	ldr	r3, [r7, #20]
 800bebc:	6a1b      	ldr	r3, [r3, #32]
 800bebe:	6978      	ldr	r0, [r7, #20]
 800bec0:	4798      	blx	r3
}
 800bec2:	bf00      	nop
 800bec4:	3718      	adds	r7, #24
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}
 800beca:	bf00      	nop
 800becc:	20001438 	.word	0x20001438

0800bed0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b084      	sub	sp, #16
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bed8:	f107 0308 	add.w	r3, r7, #8
 800bedc:	4618      	mov	r0, r3
 800bede:	f000 f859 	bl	800bf94 <prvGetNextExpireTime>
 800bee2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	4619      	mov	r1, r3
 800bee8:	68f8      	ldr	r0, [r7, #12]
 800beea:	f000 f805 	bl	800bef8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800beee:	f000 f8d7 	bl	800c0a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bef2:	bf00      	nop
 800bef4:	e7f0      	b.n	800bed8 <prvTimerTask+0x8>
	...

0800bef8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b084      	sub	sp, #16
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
 800bf00:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bf02:	f7ff f957 	bl	800b1b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bf06:	f107 0308 	add.w	r3, r7, #8
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f000 f866 	bl	800bfdc <prvSampleTimeNow>
 800bf10:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d130      	bne.n	800bf7a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d10a      	bne.n	800bf34 <prvProcessTimerOrBlockTask+0x3c>
 800bf1e:	687a      	ldr	r2, [r7, #4]
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	429a      	cmp	r2, r3
 800bf24:	d806      	bhi.n	800bf34 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bf26:	f7ff f98b 	bl	800b240 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bf2a:	68f9      	ldr	r1, [r7, #12]
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f7ff ff81 	bl	800be34 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bf32:	e024      	b.n	800bf7e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d008      	beq.n	800bf4c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bf3a:	4b13      	ldr	r3, [pc, #76]	@ (800bf88 <prvProcessTimerOrBlockTask+0x90>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d101      	bne.n	800bf48 <prvProcessTimerOrBlockTask+0x50>
 800bf44:	2301      	movs	r3, #1
 800bf46:	e000      	b.n	800bf4a <prvProcessTimerOrBlockTask+0x52>
 800bf48:	2300      	movs	r3, #0
 800bf4a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bf4c:	4b0f      	ldr	r3, [pc, #60]	@ (800bf8c <prvProcessTimerOrBlockTask+0x94>)
 800bf4e:	6818      	ldr	r0, [r3, #0]
 800bf50:	687a      	ldr	r2, [r7, #4]
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	1ad3      	subs	r3, r2, r3
 800bf56:	683a      	ldr	r2, [r7, #0]
 800bf58:	4619      	mov	r1, r3
 800bf5a:	f7fe fe8b 	bl	800ac74 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bf5e:	f7ff f96f 	bl	800b240 <xTaskResumeAll>
 800bf62:	4603      	mov	r3, r0
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d10a      	bne.n	800bf7e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bf68:	4b09      	ldr	r3, [pc, #36]	@ (800bf90 <prvProcessTimerOrBlockTask+0x98>)
 800bf6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf6e:	601a      	str	r2, [r3, #0]
 800bf70:	f3bf 8f4f 	dsb	sy
 800bf74:	f3bf 8f6f 	isb	sy
}
 800bf78:	e001      	b.n	800bf7e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bf7a:	f7ff f961 	bl	800b240 <xTaskResumeAll>
}
 800bf7e:	bf00      	nop
 800bf80:	3710      	adds	r7, #16
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}
 800bf86:	bf00      	nop
 800bf88:	2000143c 	.word	0x2000143c
 800bf8c:	20001440 	.word	0x20001440
 800bf90:	e000ed04 	.word	0xe000ed04

0800bf94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bf94:	b480      	push	{r7}
 800bf96:	b085      	sub	sp, #20
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bf9c:	4b0e      	ldr	r3, [pc, #56]	@ (800bfd8 <prvGetNextExpireTime+0x44>)
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d101      	bne.n	800bfaa <prvGetNextExpireTime+0x16>
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	e000      	b.n	800bfac <prvGetNextExpireTime+0x18>
 800bfaa:	2200      	movs	r2, #0
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d105      	bne.n	800bfc4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bfb8:	4b07      	ldr	r3, [pc, #28]	@ (800bfd8 <prvGetNextExpireTime+0x44>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	68db      	ldr	r3, [r3, #12]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	60fb      	str	r3, [r7, #12]
 800bfc2:	e001      	b.n	800bfc8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3714      	adds	r7, #20
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd4:	4770      	bx	lr
 800bfd6:	bf00      	nop
 800bfd8:	20001438 	.word	0x20001438

0800bfdc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b084      	sub	sp, #16
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bfe4:	f7ff f9ca 	bl	800b37c <xTaskGetTickCount>
 800bfe8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bfea:	4b0b      	ldr	r3, [pc, #44]	@ (800c018 <prvSampleTimeNow+0x3c>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	68fa      	ldr	r2, [r7, #12]
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d205      	bcs.n	800c000 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bff4:	f000 f93a 	bl	800c26c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2201      	movs	r2, #1
 800bffc:	601a      	str	r2, [r3, #0]
 800bffe:	e002      	b.n	800c006 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2200      	movs	r2, #0
 800c004:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c006:	4a04      	ldr	r2, [pc, #16]	@ (800c018 <prvSampleTimeNow+0x3c>)
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c00c:	68fb      	ldr	r3, [r7, #12]
}
 800c00e:	4618      	mov	r0, r3
 800c010:	3710      	adds	r7, #16
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}
 800c016:	bf00      	nop
 800c018:	20001448 	.word	0x20001448

0800c01c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b086      	sub	sp, #24
 800c020:	af00      	add	r7, sp, #0
 800c022:	60f8      	str	r0, [r7, #12]
 800c024:	60b9      	str	r1, [r7, #8]
 800c026:	607a      	str	r2, [r7, #4]
 800c028:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c02a:	2300      	movs	r3, #0
 800c02c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	68ba      	ldr	r2, [r7, #8]
 800c032:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	68fa      	ldr	r2, [r7, #12]
 800c038:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c03a:	68ba      	ldr	r2, [r7, #8]
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	429a      	cmp	r2, r3
 800c040:	d812      	bhi.n	800c068 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c042:	687a      	ldr	r2, [r7, #4]
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	1ad2      	subs	r2, r2, r3
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	699b      	ldr	r3, [r3, #24]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d302      	bcc.n	800c056 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c050:	2301      	movs	r3, #1
 800c052:	617b      	str	r3, [r7, #20]
 800c054:	e01b      	b.n	800c08e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c056:	4b10      	ldr	r3, [pc, #64]	@ (800c098 <prvInsertTimerInActiveList+0x7c>)
 800c058:	681a      	ldr	r2, [r3, #0]
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	3304      	adds	r3, #4
 800c05e:	4619      	mov	r1, r3
 800c060:	4610      	mov	r0, r2
 800c062:	f7fd ffe2 	bl	800a02a <vListInsert>
 800c066:	e012      	b.n	800c08e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c068:	687a      	ldr	r2, [r7, #4]
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	429a      	cmp	r2, r3
 800c06e:	d206      	bcs.n	800c07e <prvInsertTimerInActiveList+0x62>
 800c070:	68ba      	ldr	r2, [r7, #8]
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	429a      	cmp	r2, r3
 800c076:	d302      	bcc.n	800c07e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c078:	2301      	movs	r3, #1
 800c07a:	617b      	str	r3, [r7, #20]
 800c07c:	e007      	b.n	800c08e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c07e:	4b07      	ldr	r3, [pc, #28]	@ (800c09c <prvInsertTimerInActiveList+0x80>)
 800c080:	681a      	ldr	r2, [r3, #0]
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	3304      	adds	r3, #4
 800c086:	4619      	mov	r1, r3
 800c088:	4610      	mov	r0, r2
 800c08a:	f7fd ffce 	bl	800a02a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c08e:	697b      	ldr	r3, [r7, #20]
}
 800c090:	4618      	mov	r0, r3
 800c092:	3718      	adds	r7, #24
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}
 800c098:	2000143c 	.word	0x2000143c
 800c09c:	20001438 	.word	0x20001438

0800c0a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b08e      	sub	sp, #56	@ 0x38
 800c0a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c0a6:	e0ce      	b.n	800c246 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	da19      	bge.n	800c0e2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c0ae:	1d3b      	adds	r3, r7, #4
 800c0b0:	3304      	adds	r3, #4
 800c0b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c0b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d10b      	bne.n	800c0d2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c0ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0be:	f383 8811 	msr	BASEPRI, r3
 800c0c2:	f3bf 8f6f 	isb	sy
 800c0c6:	f3bf 8f4f 	dsb	sy
 800c0ca:	61fb      	str	r3, [r7, #28]
}
 800c0cc:	bf00      	nop
 800c0ce:	bf00      	nop
 800c0d0:	e7fd      	b.n	800c0ce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c0d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c0d8:	6850      	ldr	r0, [r2, #4]
 800c0da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c0dc:	6892      	ldr	r2, [r2, #8]
 800c0de:	4611      	mov	r1, r2
 800c0e0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	f2c0 80ae 	blt.w	800c246 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c0ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0f0:	695b      	ldr	r3, [r3, #20]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d004      	beq.n	800c100 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c0f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0f8:	3304      	adds	r3, #4
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	f7fd ffce 	bl	800a09c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c100:	463b      	mov	r3, r7
 800c102:	4618      	mov	r0, r3
 800c104:	f7ff ff6a 	bl	800bfdc <prvSampleTimeNow>
 800c108:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2b09      	cmp	r3, #9
 800c10e:	f200 8097 	bhi.w	800c240 <prvProcessReceivedCommands+0x1a0>
 800c112:	a201      	add	r2, pc, #4	@ (adr r2, 800c118 <prvProcessReceivedCommands+0x78>)
 800c114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c118:	0800c141 	.word	0x0800c141
 800c11c:	0800c141 	.word	0x0800c141
 800c120:	0800c141 	.word	0x0800c141
 800c124:	0800c1b7 	.word	0x0800c1b7
 800c128:	0800c1cb 	.word	0x0800c1cb
 800c12c:	0800c217 	.word	0x0800c217
 800c130:	0800c141 	.word	0x0800c141
 800c134:	0800c141 	.word	0x0800c141
 800c138:	0800c1b7 	.word	0x0800c1b7
 800c13c:	0800c1cb 	.word	0x0800c1cb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c142:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c146:	f043 0301 	orr.w	r3, r3, #1
 800c14a:	b2da      	uxtb	r2, r3
 800c14c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c14e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c152:	68ba      	ldr	r2, [r7, #8]
 800c154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c156:	699b      	ldr	r3, [r3, #24]
 800c158:	18d1      	adds	r1, r2, r3
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c15e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c160:	f7ff ff5c 	bl	800c01c <prvInsertTimerInActiveList>
 800c164:	4603      	mov	r3, r0
 800c166:	2b00      	cmp	r3, #0
 800c168:	d06c      	beq.n	800c244 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c16a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c16c:	6a1b      	ldr	r3, [r3, #32]
 800c16e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c170:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c174:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c178:	f003 0304 	and.w	r3, r3, #4
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d061      	beq.n	800c244 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c180:	68ba      	ldr	r2, [r7, #8]
 800c182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c184:	699b      	ldr	r3, [r3, #24]
 800c186:	441a      	add	r2, r3
 800c188:	2300      	movs	r3, #0
 800c18a:	9300      	str	r3, [sp, #0]
 800c18c:	2300      	movs	r3, #0
 800c18e:	2100      	movs	r1, #0
 800c190:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c192:	f7ff fe01 	bl	800bd98 <xTimerGenericCommand>
 800c196:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c198:	6a3b      	ldr	r3, [r7, #32]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d152      	bne.n	800c244 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c19e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1a2:	f383 8811 	msr	BASEPRI, r3
 800c1a6:	f3bf 8f6f 	isb	sy
 800c1aa:	f3bf 8f4f 	dsb	sy
 800c1ae:	61bb      	str	r3, [r7, #24]
}
 800c1b0:	bf00      	nop
 800c1b2:	bf00      	nop
 800c1b4:	e7fd      	b.n	800c1b2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c1b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c1bc:	f023 0301 	bic.w	r3, r3, #1
 800c1c0:	b2da      	uxtb	r2, r3
 800c1c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c1c8:	e03d      	b.n	800c246 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c1ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c1d0:	f043 0301 	orr.w	r3, r3, #1
 800c1d4:	b2da      	uxtb	r2, r3
 800c1d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c1dc:	68ba      	ldr	r2, [r7, #8]
 800c1de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1e0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c1e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1e4:	699b      	ldr	r3, [r3, #24]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d10b      	bne.n	800c202 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c1ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1ee:	f383 8811 	msr	BASEPRI, r3
 800c1f2:	f3bf 8f6f 	isb	sy
 800c1f6:	f3bf 8f4f 	dsb	sy
 800c1fa:	617b      	str	r3, [r7, #20]
}
 800c1fc:	bf00      	nop
 800c1fe:	bf00      	nop
 800c200:	e7fd      	b.n	800c1fe <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c204:	699a      	ldr	r2, [r3, #24]
 800c206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c208:	18d1      	adds	r1, r2, r3
 800c20a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c20c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c20e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c210:	f7ff ff04 	bl	800c01c <prvInsertTimerInActiveList>
					break;
 800c214:	e017      	b.n	800c246 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c218:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c21c:	f003 0302 	and.w	r3, r3, #2
 800c220:	2b00      	cmp	r3, #0
 800c222:	d103      	bne.n	800c22c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c224:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c226:	f000 fccb 	bl	800cbc0 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c22a:	e00c      	b.n	800c246 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c22c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c22e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c232:	f023 0301 	bic.w	r3, r3, #1
 800c236:	b2da      	uxtb	r2, r3
 800c238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c23a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c23e:	e002      	b.n	800c246 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c240:	bf00      	nop
 800c242:	e000      	b.n	800c246 <prvProcessReceivedCommands+0x1a6>
					break;
 800c244:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c246:	4b08      	ldr	r3, [pc, #32]	@ (800c268 <prvProcessReceivedCommands+0x1c8>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	1d39      	adds	r1, r7, #4
 800c24c:	2200      	movs	r2, #0
 800c24e:	4618      	mov	r0, r3
 800c250:	f7fe fa34 	bl	800a6bc <xQueueReceive>
 800c254:	4603      	mov	r3, r0
 800c256:	2b00      	cmp	r3, #0
 800c258:	f47f af26 	bne.w	800c0a8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c25c:	bf00      	nop
 800c25e:	bf00      	nop
 800c260:	3730      	adds	r7, #48	@ 0x30
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
 800c266:	bf00      	nop
 800c268:	20001440 	.word	0x20001440

0800c26c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b088      	sub	sp, #32
 800c270:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c272:	e049      	b.n	800c308 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c274:	4b2e      	ldr	r3, [pc, #184]	@ (800c330 <prvSwitchTimerLists+0xc4>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	68db      	ldr	r3, [r3, #12]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c27e:	4b2c      	ldr	r3, [pc, #176]	@ (800c330 <prvSwitchTimerLists+0xc4>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	68db      	ldr	r3, [r3, #12]
 800c284:	68db      	ldr	r3, [r3, #12]
 800c286:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	3304      	adds	r3, #4
 800c28c:	4618      	mov	r0, r3
 800c28e:	f7fd ff05 	bl	800a09c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	6a1b      	ldr	r3, [r3, #32]
 800c296:	68f8      	ldr	r0, [r7, #12]
 800c298:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c2a0:	f003 0304 	and.w	r3, r3, #4
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d02f      	beq.n	800c308 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	699b      	ldr	r3, [r3, #24]
 800c2ac:	693a      	ldr	r2, [r7, #16]
 800c2ae:	4413      	add	r3, r2
 800c2b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c2b2:	68ba      	ldr	r2, [r7, #8]
 800c2b4:	693b      	ldr	r3, [r7, #16]
 800c2b6:	429a      	cmp	r2, r3
 800c2b8:	d90e      	bls.n	800c2d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	68ba      	ldr	r2, [r7, #8]
 800c2be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	68fa      	ldr	r2, [r7, #12]
 800c2c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c2c6:	4b1a      	ldr	r3, [pc, #104]	@ (800c330 <prvSwitchTimerLists+0xc4>)
 800c2c8:	681a      	ldr	r2, [r3, #0]
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	3304      	adds	r3, #4
 800c2ce:	4619      	mov	r1, r3
 800c2d0:	4610      	mov	r0, r2
 800c2d2:	f7fd feaa 	bl	800a02a <vListInsert>
 800c2d6:	e017      	b.n	800c308 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c2d8:	2300      	movs	r3, #0
 800c2da:	9300      	str	r3, [sp, #0]
 800c2dc:	2300      	movs	r3, #0
 800c2de:	693a      	ldr	r2, [r7, #16]
 800c2e0:	2100      	movs	r1, #0
 800c2e2:	68f8      	ldr	r0, [r7, #12]
 800c2e4:	f7ff fd58 	bl	800bd98 <xTimerGenericCommand>
 800c2e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d10b      	bne.n	800c308 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c2f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2f4:	f383 8811 	msr	BASEPRI, r3
 800c2f8:	f3bf 8f6f 	isb	sy
 800c2fc:	f3bf 8f4f 	dsb	sy
 800c300:	603b      	str	r3, [r7, #0]
}
 800c302:	bf00      	nop
 800c304:	bf00      	nop
 800c306:	e7fd      	b.n	800c304 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c308:	4b09      	ldr	r3, [pc, #36]	@ (800c330 <prvSwitchTimerLists+0xc4>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d1b0      	bne.n	800c274 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c312:	4b07      	ldr	r3, [pc, #28]	@ (800c330 <prvSwitchTimerLists+0xc4>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c318:	4b06      	ldr	r3, [pc, #24]	@ (800c334 <prvSwitchTimerLists+0xc8>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	4a04      	ldr	r2, [pc, #16]	@ (800c330 <prvSwitchTimerLists+0xc4>)
 800c31e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c320:	4a04      	ldr	r2, [pc, #16]	@ (800c334 <prvSwitchTimerLists+0xc8>)
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	6013      	str	r3, [r2, #0]
}
 800c326:	bf00      	nop
 800c328:	3718      	adds	r7, #24
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}
 800c32e:	bf00      	nop
 800c330:	20001438 	.word	0x20001438
 800c334:	2000143c 	.word	0x2000143c

0800c338 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b082      	sub	sp, #8
 800c33c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c33e:	f000 f96b 	bl	800c618 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c342:	4b15      	ldr	r3, [pc, #84]	@ (800c398 <prvCheckForValidListAndQueue+0x60>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d120      	bne.n	800c38c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c34a:	4814      	ldr	r0, [pc, #80]	@ (800c39c <prvCheckForValidListAndQueue+0x64>)
 800c34c:	f7fd fe1c 	bl	8009f88 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c350:	4813      	ldr	r0, [pc, #76]	@ (800c3a0 <prvCheckForValidListAndQueue+0x68>)
 800c352:	f7fd fe19 	bl	8009f88 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c356:	4b13      	ldr	r3, [pc, #76]	@ (800c3a4 <prvCheckForValidListAndQueue+0x6c>)
 800c358:	4a10      	ldr	r2, [pc, #64]	@ (800c39c <prvCheckForValidListAndQueue+0x64>)
 800c35a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c35c:	4b12      	ldr	r3, [pc, #72]	@ (800c3a8 <prvCheckForValidListAndQueue+0x70>)
 800c35e:	4a10      	ldr	r2, [pc, #64]	@ (800c3a0 <prvCheckForValidListAndQueue+0x68>)
 800c360:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c362:	2300      	movs	r3, #0
 800c364:	9300      	str	r3, [sp, #0]
 800c366:	4b11      	ldr	r3, [pc, #68]	@ (800c3ac <prvCheckForValidListAndQueue+0x74>)
 800c368:	4a11      	ldr	r2, [pc, #68]	@ (800c3b0 <prvCheckForValidListAndQueue+0x78>)
 800c36a:	2110      	movs	r1, #16
 800c36c:	200a      	movs	r0, #10
 800c36e:	f7fd ff29 	bl	800a1c4 <xQueueGenericCreateStatic>
 800c372:	4603      	mov	r3, r0
 800c374:	4a08      	ldr	r2, [pc, #32]	@ (800c398 <prvCheckForValidListAndQueue+0x60>)
 800c376:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c378:	4b07      	ldr	r3, [pc, #28]	@ (800c398 <prvCheckForValidListAndQueue+0x60>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d005      	beq.n	800c38c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c380:	4b05      	ldr	r3, [pc, #20]	@ (800c398 <prvCheckForValidListAndQueue+0x60>)
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	490b      	ldr	r1, [pc, #44]	@ (800c3b4 <prvCheckForValidListAndQueue+0x7c>)
 800c386:	4618      	mov	r0, r3
 800c388:	f7fe fc4a 	bl	800ac20 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c38c:	f000 f976 	bl	800c67c <vPortExitCritical>
}
 800c390:	bf00      	nop
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}
 800c396:	bf00      	nop
 800c398:	20001440 	.word	0x20001440
 800c39c:	20001410 	.word	0x20001410
 800c3a0:	20001424 	.word	0x20001424
 800c3a4:	20001438 	.word	0x20001438
 800c3a8:	2000143c 	.word	0x2000143c
 800c3ac:	200014ec 	.word	0x200014ec
 800c3b0:	2000144c 	.word	0x2000144c
 800c3b4:	08011770 	.word	0x08011770

0800c3b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c3b8:	b480      	push	{r7}
 800c3ba:	b085      	sub	sp, #20
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	60f8      	str	r0, [r7, #12]
 800c3c0:	60b9      	str	r1, [r7, #8]
 800c3c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	3b04      	subs	r3, #4
 800c3c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c3d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	3b04      	subs	r3, #4
 800c3d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	f023 0201 	bic.w	r2, r3, #1
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	3b04      	subs	r3, #4
 800c3e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c3e8:	4a0c      	ldr	r2, [pc, #48]	@ (800c41c <pxPortInitialiseStack+0x64>)
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	3b14      	subs	r3, #20
 800c3f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	3b04      	subs	r3, #4
 800c3fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	f06f 0202 	mvn.w	r2, #2
 800c406:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	3b20      	subs	r3, #32
 800c40c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c40e:	68fb      	ldr	r3, [r7, #12]
}
 800c410:	4618      	mov	r0, r3
 800c412:	3714      	adds	r7, #20
 800c414:	46bd      	mov	sp, r7
 800c416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41a:	4770      	bx	lr
 800c41c:	0800c421 	.word	0x0800c421

0800c420 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c420:	b480      	push	{r7}
 800c422:	b085      	sub	sp, #20
 800c424:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c426:	2300      	movs	r3, #0
 800c428:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c42a:	4b13      	ldr	r3, [pc, #76]	@ (800c478 <prvTaskExitError+0x58>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c432:	d00b      	beq.n	800c44c <prvTaskExitError+0x2c>
	__asm volatile
 800c434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c438:	f383 8811 	msr	BASEPRI, r3
 800c43c:	f3bf 8f6f 	isb	sy
 800c440:	f3bf 8f4f 	dsb	sy
 800c444:	60fb      	str	r3, [r7, #12]
}
 800c446:	bf00      	nop
 800c448:	bf00      	nop
 800c44a:	e7fd      	b.n	800c448 <prvTaskExitError+0x28>
	__asm volatile
 800c44c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c450:	f383 8811 	msr	BASEPRI, r3
 800c454:	f3bf 8f6f 	isb	sy
 800c458:	f3bf 8f4f 	dsb	sy
 800c45c:	60bb      	str	r3, [r7, #8]
}
 800c45e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c460:	bf00      	nop
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d0fc      	beq.n	800c462 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c468:	bf00      	nop
 800c46a:	bf00      	nop
 800c46c:	3714      	adds	r7, #20
 800c46e:	46bd      	mov	sp, r7
 800c470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c474:	4770      	bx	lr
 800c476:	bf00      	nop
 800c478:	200000ec 	.word	0x200000ec
 800c47c:	00000000 	.word	0x00000000

0800c480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c480:	4b07      	ldr	r3, [pc, #28]	@ (800c4a0 <pxCurrentTCBConst2>)
 800c482:	6819      	ldr	r1, [r3, #0]
 800c484:	6808      	ldr	r0, [r1, #0]
 800c486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c48a:	f380 8809 	msr	PSP, r0
 800c48e:	f3bf 8f6f 	isb	sy
 800c492:	f04f 0000 	mov.w	r0, #0
 800c496:	f380 8811 	msr	BASEPRI, r0
 800c49a:	4770      	bx	lr
 800c49c:	f3af 8000 	nop.w

0800c4a0 <pxCurrentTCBConst2>:
 800c4a0:	20000f08 	.word	0x20000f08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c4a4:	bf00      	nop
 800c4a6:	bf00      	nop

0800c4a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c4a8:	4808      	ldr	r0, [pc, #32]	@ (800c4cc <prvPortStartFirstTask+0x24>)
 800c4aa:	6800      	ldr	r0, [r0, #0]
 800c4ac:	6800      	ldr	r0, [r0, #0]
 800c4ae:	f380 8808 	msr	MSP, r0
 800c4b2:	f04f 0000 	mov.w	r0, #0
 800c4b6:	f380 8814 	msr	CONTROL, r0
 800c4ba:	b662      	cpsie	i
 800c4bc:	b661      	cpsie	f
 800c4be:	f3bf 8f4f 	dsb	sy
 800c4c2:	f3bf 8f6f 	isb	sy
 800c4c6:	df00      	svc	0
 800c4c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c4ca:	bf00      	nop
 800c4cc:	e000ed08 	.word	0xe000ed08

0800c4d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b086      	sub	sp, #24
 800c4d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c4d6:	4b47      	ldr	r3, [pc, #284]	@ (800c5f4 <xPortStartScheduler+0x124>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	4a47      	ldr	r2, [pc, #284]	@ (800c5f8 <xPortStartScheduler+0x128>)
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d10b      	bne.n	800c4f8 <xPortStartScheduler+0x28>
	__asm volatile
 800c4e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4e4:	f383 8811 	msr	BASEPRI, r3
 800c4e8:	f3bf 8f6f 	isb	sy
 800c4ec:	f3bf 8f4f 	dsb	sy
 800c4f0:	60fb      	str	r3, [r7, #12]
}
 800c4f2:	bf00      	nop
 800c4f4:	bf00      	nop
 800c4f6:	e7fd      	b.n	800c4f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c4f8:	4b3e      	ldr	r3, [pc, #248]	@ (800c5f4 <xPortStartScheduler+0x124>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	4a3f      	ldr	r2, [pc, #252]	@ (800c5fc <xPortStartScheduler+0x12c>)
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d10b      	bne.n	800c51a <xPortStartScheduler+0x4a>
	__asm volatile
 800c502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c506:	f383 8811 	msr	BASEPRI, r3
 800c50a:	f3bf 8f6f 	isb	sy
 800c50e:	f3bf 8f4f 	dsb	sy
 800c512:	613b      	str	r3, [r7, #16]
}
 800c514:	bf00      	nop
 800c516:	bf00      	nop
 800c518:	e7fd      	b.n	800c516 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c51a:	4b39      	ldr	r3, [pc, #228]	@ (800c600 <xPortStartScheduler+0x130>)
 800c51c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	781b      	ldrb	r3, [r3, #0]
 800c522:	b2db      	uxtb	r3, r3
 800c524:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c526:	697b      	ldr	r3, [r7, #20]
 800c528:	22ff      	movs	r2, #255	@ 0xff
 800c52a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c52c:	697b      	ldr	r3, [r7, #20]
 800c52e:	781b      	ldrb	r3, [r3, #0]
 800c530:	b2db      	uxtb	r3, r3
 800c532:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c534:	78fb      	ldrb	r3, [r7, #3]
 800c536:	b2db      	uxtb	r3, r3
 800c538:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c53c:	b2da      	uxtb	r2, r3
 800c53e:	4b31      	ldr	r3, [pc, #196]	@ (800c604 <xPortStartScheduler+0x134>)
 800c540:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c542:	4b31      	ldr	r3, [pc, #196]	@ (800c608 <xPortStartScheduler+0x138>)
 800c544:	2207      	movs	r2, #7
 800c546:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c548:	e009      	b.n	800c55e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c54a:	4b2f      	ldr	r3, [pc, #188]	@ (800c608 <xPortStartScheduler+0x138>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	3b01      	subs	r3, #1
 800c550:	4a2d      	ldr	r2, [pc, #180]	@ (800c608 <xPortStartScheduler+0x138>)
 800c552:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c554:	78fb      	ldrb	r3, [r7, #3]
 800c556:	b2db      	uxtb	r3, r3
 800c558:	005b      	lsls	r3, r3, #1
 800c55a:	b2db      	uxtb	r3, r3
 800c55c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c55e:	78fb      	ldrb	r3, [r7, #3]
 800c560:	b2db      	uxtb	r3, r3
 800c562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c566:	2b80      	cmp	r3, #128	@ 0x80
 800c568:	d0ef      	beq.n	800c54a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c56a:	4b27      	ldr	r3, [pc, #156]	@ (800c608 <xPortStartScheduler+0x138>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	f1c3 0307 	rsb	r3, r3, #7
 800c572:	2b04      	cmp	r3, #4
 800c574:	d00b      	beq.n	800c58e <xPortStartScheduler+0xbe>
	__asm volatile
 800c576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c57a:	f383 8811 	msr	BASEPRI, r3
 800c57e:	f3bf 8f6f 	isb	sy
 800c582:	f3bf 8f4f 	dsb	sy
 800c586:	60bb      	str	r3, [r7, #8]
}
 800c588:	bf00      	nop
 800c58a:	bf00      	nop
 800c58c:	e7fd      	b.n	800c58a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c58e:	4b1e      	ldr	r3, [pc, #120]	@ (800c608 <xPortStartScheduler+0x138>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	021b      	lsls	r3, r3, #8
 800c594:	4a1c      	ldr	r2, [pc, #112]	@ (800c608 <xPortStartScheduler+0x138>)
 800c596:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c598:	4b1b      	ldr	r3, [pc, #108]	@ (800c608 <xPortStartScheduler+0x138>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c5a0:	4a19      	ldr	r2, [pc, #100]	@ (800c608 <xPortStartScheduler+0x138>)
 800c5a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	b2da      	uxtb	r2, r3
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c5ac:	4b17      	ldr	r3, [pc, #92]	@ (800c60c <xPortStartScheduler+0x13c>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	4a16      	ldr	r2, [pc, #88]	@ (800c60c <xPortStartScheduler+0x13c>)
 800c5b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c5b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c5b8:	4b14      	ldr	r3, [pc, #80]	@ (800c60c <xPortStartScheduler+0x13c>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	4a13      	ldr	r2, [pc, #76]	@ (800c60c <xPortStartScheduler+0x13c>)
 800c5be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c5c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c5c4:	f000 f9a6 	bl	800c914 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c5c8:	4b11      	ldr	r3, [pc, #68]	@ (800c610 <xPortStartScheduler+0x140>)
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c5ce:	f000 f9dd 	bl	800c98c <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c5d2:	4b10      	ldr	r3, [pc, #64]	@ (800c614 <xPortStartScheduler+0x144>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	4a0f      	ldr	r2, [pc, #60]	@ (800c614 <xPortStartScheduler+0x144>)
 800c5d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c5dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c5de:	f7ff ff63 	bl	800c4a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c5e2:	f7fe ffbd 	bl	800b560 <vTaskSwitchContext>
	prvTaskExitError();
 800c5e6:	f7ff ff1b 	bl	800c420 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c5ea:	2300      	movs	r3, #0
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3718      	adds	r7, #24
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}
 800c5f4:	e000ed00 	.word	0xe000ed00
 800c5f8:	410fc271 	.word	0x410fc271
 800c5fc:	410fc270 	.word	0x410fc270
 800c600:	e000e400 	.word	0xe000e400
 800c604:	20001548 	.word	0x20001548
 800c608:	2000154c 	.word	0x2000154c
 800c60c:	e000ed20 	.word	0xe000ed20
 800c610:	200000ec 	.word	0x200000ec
 800c614:	e000ef34 	.word	0xe000ef34

0800c618 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c618:	b480      	push	{r7}
 800c61a:	b083      	sub	sp, #12
 800c61c:	af00      	add	r7, sp, #0
	__asm volatile
 800c61e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c622:	f383 8811 	msr	BASEPRI, r3
 800c626:	f3bf 8f6f 	isb	sy
 800c62a:	f3bf 8f4f 	dsb	sy
 800c62e:	607b      	str	r3, [r7, #4]
}
 800c630:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c632:	4b10      	ldr	r3, [pc, #64]	@ (800c674 <vPortEnterCritical+0x5c>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	3301      	adds	r3, #1
 800c638:	4a0e      	ldr	r2, [pc, #56]	@ (800c674 <vPortEnterCritical+0x5c>)
 800c63a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c63c:	4b0d      	ldr	r3, [pc, #52]	@ (800c674 <vPortEnterCritical+0x5c>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	2b01      	cmp	r3, #1
 800c642:	d110      	bne.n	800c666 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c644:	4b0c      	ldr	r3, [pc, #48]	@ (800c678 <vPortEnterCritical+0x60>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	b2db      	uxtb	r3, r3
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d00b      	beq.n	800c666 <vPortEnterCritical+0x4e>
	__asm volatile
 800c64e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c652:	f383 8811 	msr	BASEPRI, r3
 800c656:	f3bf 8f6f 	isb	sy
 800c65a:	f3bf 8f4f 	dsb	sy
 800c65e:	603b      	str	r3, [r7, #0]
}
 800c660:	bf00      	nop
 800c662:	bf00      	nop
 800c664:	e7fd      	b.n	800c662 <vPortEnterCritical+0x4a>
	}
}
 800c666:	bf00      	nop
 800c668:	370c      	adds	r7, #12
 800c66a:	46bd      	mov	sp, r7
 800c66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c670:	4770      	bx	lr
 800c672:	bf00      	nop
 800c674:	200000ec 	.word	0x200000ec
 800c678:	e000ed04 	.word	0xe000ed04

0800c67c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c67c:	b480      	push	{r7}
 800c67e:	b083      	sub	sp, #12
 800c680:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c682:	4b12      	ldr	r3, [pc, #72]	@ (800c6cc <vPortExitCritical+0x50>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d10b      	bne.n	800c6a2 <vPortExitCritical+0x26>
	__asm volatile
 800c68a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c68e:	f383 8811 	msr	BASEPRI, r3
 800c692:	f3bf 8f6f 	isb	sy
 800c696:	f3bf 8f4f 	dsb	sy
 800c69a:	607b      	str	r3, [r7, #4]
}
 800c69c:	bf00      	nop
 800c69e:	bf00      	nop
 800c6a0:	e7fd      	b.n	800c69e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c6a2:	4b0a      	ldr	r3, [pc, #40]	@ (800c6cc <vPortExitCritical+0x50>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	3b01      	subs	r3, #1
 800c6a8:	4a08      	ldr	r2, [pc, #32]	@ (800c6cc <vPortExitCritical+0x50>)
 800c6aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c6ac:	4b07      	ldr	r3, [pc, #28]	@ (800c6cc <vPortExitCritical+0x50>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d105      	bne.n	800c6c0 <vPortExitCritical+0x44>
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	f383 8811 	msr	BASEPRI, r3
}
 800c6be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c6c0:	bf00      	nop
 800c6c2:	370c      	adds	r7, #12
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ca:	4770      	bx	lr
 800c6cc:	200000ec 	.word	0x200000ec

0800c6d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c6d0:	f3ef 8009 	mrs	r0, PSP
 800c6d4:	f3bf 8f6f 	isb	sy
 800c6d8:	4b15      	ldr	r3, [pc, #84]	@ (800c730 <pxCurrentTCBConst>)
 800c6da:	681a      	ldr	r2, [r3, #0]
 800c6dc:	f01e 0f10 	tst.w	lr, #16
 800c6e0:	bf08      	it	eq
 800c6e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c6e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ea:	6010      	str	r0, [r2, #0]
 800c6ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c6f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c6f4:	f380 8811 	msr	BASEPRI, r0
 800c6f8:	f3bf 8f4f 	dsb	sy
 800c6fc:	f3bf 8f6f 	isb	sy
 800c700:	f7fe ff2e 	bl	800b560 <vTaskSwitchContext>
 800c704:	f04f 0000 	mov.w	r0, #0
 800c708:	f380 8811 	msr	BASEPRI, r0
 800c70c:	bc09      	pop	{r0, r3}
 800c70e:	6819      	ldr	r1, [r3, #0]
 800c710:	6808      	ldr	r0, [r1, #0]
 800c712:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c716:	f01e 0f10 	tst.w	lr, #16
 800c71a:	bf08      	it	eq
 800c71c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c720:	f380 8809 	msr	PSP, r0
 800c724:	f3bf 8f6f 	isb	sy
 800c728:	4770      	bx	lr
 800c72a:	bf00      	nop
 800c72c:	f3af 8000 	nop.w

0800c730 <pxCurrentTCBConst>:
 800c730:	20000f08 	.word	0x20000f08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c734:	bf00      	nop
 800c736:	bf00      	nop

0800c738 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b082      	sub	sp, #8
 800c73c:	af00      	add	r7, sp, #0
	__asm volatile
 800c73e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c742:	f383 8811 	msr	BASEPRI, r3
 800c746:	f3bf 8f6f 	isb	sy
 800c74a:	f3bf 8f4f 	dsb	sy
 800c74e:	607b      	str	r3, [r7, #4]
}
 800c750:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c752:	f7fe fe4b 	bl	800b3ec <xTaskIncrementTick>
 800c756:	4603      	mov	r3, r0
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d003      	beq.n	800c764 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c75c:	4b06      	ldr	r3, [pc, #24]	@ (800c778 <xPortSysTickHandler+0x40>)
 800c75e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c762:	601a      	str	r2, [r3, #0]
 800c764:	2300      	movs	r3, #0
 800c766:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	f383 8811 	msr	BASEPRI, r3
}
 800c76e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c770:	bf00      	nop
 800c772:	3708      	adds	r7, #8
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}
 800c778:	e000ed04 	.word	0xe000ed04

0800c77c <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b088      	sub	sp, #32
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 800c784:	4b5d      	ldr	r3, [pc, #372]	@ (800c8fc <vPortSuppressTicksAndSleep+0x180>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	687a      	ldr	r2, [r7, #4]
 800c78a:	429a      	cmp	r2, r3
 800c78c:	d902      	bls.n	800c794 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800c78e:	4b5b      	ldr	r3, [pc, #364]	@ (800c8fc <vPortSuppressTicksAndSleep+0x180>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800c794:	4b5a      	ldr	r3, [pc, #360]	@ (800c900 <vPortSuppressTicksAndSleep+0x184>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	4a59      	ldr	r2, [pc, #356]	@ (800c900 <vPortSuppressTicksAndSleep+0x184>)
 800c79a:	f023 0301 	bic.w	r3, r3, #1
 800c79e:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800c7a0:	4b58      	ldr	r3, [pc, #352]	@ (800c904 <vPortSuppressTicksAndSleep+0x188>)
 800c7a2:	681a      	ldr	r2, [r3, #0]
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	3b01      	subs	r3, #1
 800c7a8:	4957      	ldr	r1, [pc, #348]	@ (800c908 <vPortSuppressTicksAndSleep+0x18c>)
 800c7aa:	6809      	ldr	r1, [r1, #0]
 800c7ac:	fb01 f303 	mul.w	r3, r1, r3
 800c7b0:	4413      	add	r3, r2
 800c7b2:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 800c7b4:	4b55      	ldr	r3, [pc, #340]	@ (800c90c <vPortSuppressTicksAndSleep+0x190>)
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	69fa      	ldr	r2, [r7, #28]
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	d904      	bls.n	800c7c8 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800c7be:	4b53      	ldr	r3, [pc, #332]	@ (800c90c <vPortSuppressTicksAndSleep+0x190>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	69fa      	ldr	r2, [r7, #28]
 800c7c4:	1ad3      	subs	r3, r2, r3
 800c7c6:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 800c7c8:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800c7ca:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800c7ce:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800c7d2:	f7ff f8c3 	bl	800b95c <eTaskConfirmSleepModeStatus>
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d110      	bne.n	800c7fe <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800c7dc:	4b49      	ldr	r3, [pc, #292]	@ (800c904 <vPortSuppressTicksAndSleep+0x188>)
 800c7de:	4a4c      	ldr	r2, [pc, #304]	@ (800c910 <vPortSuppressTicksAndSleep+0x194>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800c7e4:	4b46      	ldr	r3, [pc, #280]	@ (800c900 <vPortSuppressTicksAndSleep+0x184>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	4a45      	ldr	r2, [pc, #276]	@ (800c900 <vPortSuppressTicksAndSleep+0x184>)
 800c7ea:	f043 0301 	orr.w	r3, r3, #1
 800c7ee:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800c7f0:	4b45      	ldr	r3, [pc, #276]	@ (800c908 <vPortSuppressTicksAndSleep+0x18c>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	4a46      	ldr	r2, [pc, #280]	@ (800c910 <vPortSuppressTicksAndSleep+0x194>)
 800c7f6:	3b01      	subs	r3, #1
 800c7f8:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800c7fa:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800c7fc:	e079      	b.n	800c8f2 <vPortSuppressTicksAndSleep+0x176>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800c7fe:	4a44      	ldr	r2, [pc, #272]	@ (800c910 <vPortSuppressTicksAndSleep+0x194>)
 800c800:	69fb      	ldr	r3, [r7, #28]
 800c802:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c804:	4b3f      	ldr	r3, [pc, #252]	@ (800c904 <vPortSuppressTicksAndSleep+0x188>)
 800c806:	2200      	movs	r2, #0
 800c808:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800c80a:	4b3d      	ldr	r3, [pc, #244]	@ (800c900 <vPortSuppressTicksAndSleep+0x184>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	4a3c      	ldr	r2, [pc, #240]	@ (800c900 <vPortSuppressTicksAndSleep+0x184>)
 800c810:	f043 0301 	orr.w	r3, r3, #1
 800c814:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	613b      	str	r3, [r7, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 800c81a:	2300      	movs	r3, #0
 800c81c:	613b      	str	r3, [r7, #16]
 800c81e:	6938      	ldr	r0, [r7, #16]
 800c820:	f7f6 fe8a 	bl	8003538 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 800c824:	693b      	ldr	r3, [r7, #16]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d004      	beq.n	800c834 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 800c82a:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 800c82e:	bf30      	wfi
				__asm volatile( "isb" );
 800c830:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f7f6 fe89 	bl	800354c <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800c83a:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800c83c:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800c840:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 800c844:	b672      	cpsid	i
			__asm volatile( "dsb" );
 800c846:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800c84a:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800c84e:	4b2c      	ldr	r3, [pc, #176]	@ (800c900 <vPortSuppressTicksAndSleep+0x184>)
 800c850:	2206      	movs	r2, #6
 800c852:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800c854:	4b2a      	ldr	r3, [pc, #168]	@ (800c900 <vPortSuppressTicksAndSleep+0x184>)
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d01d      	beq.n	800c89c <vPortSuppressTicksAndSleep+0x120>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800c860:	4b29      	ldr	r3, [pc, #164]	@ (800c908 <vPortSuppressTicksAndSleep+0x18c>)
 800c862:	681a      	ldr	r2, [r3, #0]
 800c864:	4b27      	ldr	r3, [pc, #156]	@ (800c904 <vPortSuppressTicksAndSleep+0x188>)
 800c866:	6819      	ldr	r1, [r3, #0]
 800c868:	69fb      	ldr	r3, [r7, #28]
 800c86a:	1acb      	subs	r3, r1, r3
 800c86c:	4413      	add	r3, r2
 800c86e:	3b01      	subs	r3, #1
 800c870:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800c872:	4b26      	ldr	r3, [pc, #152]	@ (800c90c <vPortSuppressTicksAndSleep+0x190>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	697a      	ldr	r2, [r7, #20]
 800c878:	429a      	cmp	r2, r3
 800c87a:	d304      	bcc.n	800c886 <vPortSuppressTicksAndSleep+0x10a>
 800c87c:	4b22      	ldr	r3, [pc, #136]	@ (800c908 <vPortSuppressTicksAndSleep+0x18c>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	697a      	ldr	r2, [r7, #20]
 800c882:	429a      	cmp	r2, r3
 800c884:	d903      	bls.n	800c88e <vPortSuppressTicksAndSleep+0x112>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 800c886:	4b20      	ldr	r3, [pc, #128]	@ (800c908 <vPortSuppressTicksAndSleep+0x18c>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	3b01      	subs	r3, #1
 800c88c:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800c88e:	4a20      	ldr	r2, [pc, #128]	@ (800c910 <vPortSuppressTicksAndSleep+0x194>)
 800c890:	697b      	ldr	r3, [r7, #20]
 800c892:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	3b01      	subs	r3, #1
 800c898:	61bb      	str	r3, [r7, #24]
 800c89a:	e018      	b.n	800c8ce <vPortSuppressTicksAndSleep+0x152>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800c89c:	4b1a      	ldr	r3, [pc, #104]	@ (800c908 <vPortSuppressTicksAndSleep+0x18c>)
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	687a      	ldr	r2, [r7, #4]
 800c8a2:	fb03 f202 	mul.w	r2, r3, r2
 800c8a6:	4b17      	ldr	r3, [pc, #92]	@ (800c904 <vPortSuppressTicksAndSleep+0x188>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	1ad3      	subs	r3, r2, r3
 800c8ac:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800c8ae:	4b16      	ldr	r3, [pc, #88]	@ (800c908 <vPortSuppressTicksAndSleep+0x18c>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	68fa      	ldr	r2, [r7, #12]
 800c8b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8b8:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800c8ba:	69bb      	ldr	r3, [r7, #24]
 800c8bc:	3301      	adds	r3, #1
 800c8be:	4a12      	ldr	r2, [pc, #72]	@ (800c908 <vPortSuppressTicksAndSleep+0x18c>)
 800c8c0:	6812      	ldr	r2, [r2, #0]
 800c8c2:	fb03 f202 	mul.w	r2, r3, r2
 800c8c6:	4912      	ldr	r1, [pc, #72]	@ (800c910 <vPortSuppressTicksAndSleep+0x194>)
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	1ad3      	subs	r3, r2, r3
 800c8cc:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c8ce:	4b0d      	ldr	r3, [pc, #52]	@ (800c904 <vPortSuppressTicksAndSleep+0x188>)
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800c8d4:	4b0a      	ldr	r3, [pc, #40]	@ (800c900 <vPortSuppressTicksAndSleep+0x184>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	4a09      	ldr	r2, [pc, #36]	@ (800c900 <vPortSuppressTicksAndSleep+0x184>)
 800c8da:	f043 0301 	orr.w	r3, r3, #1
 800c8de:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 800c8e0:	69b8      	ldr	r0, [r7, #24]
 800c8e2:	f7fe fd5b 	bl	800b39c <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800c8e6:	4b08      	ldr	r3, [pc, #32]	@ (800c908 <vPortSuppressTicksAndSleep+0x18c>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	4a09      	ldr	r2, [pc, #36]	@ (800c910 <vPortSuppressTicksAndSleep+0x194>)
 800c8ec:	3b01      	subs	r3, #1
 800c8ee:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 800c8f0:	b662      	cpsie	i
	}
 800c8f2:	bf00      	nop
 800c8f4:	3720      	adds	r7, #32
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}
 800c8fa:	bf00      	nop
 800c8fc:	20001540 	.word	0x20001540
 800c900:	e000e010 	.word	0xe000e010
 800c904:	e000e018 	.word	0xe000e018
 800c908:	2000153c 	.word	0x2000153c
 800c90c:	20001544 	.word	0x20001544
 800c910:	e000e014 	.word	0xe000e014

0800c914 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c914:	b480      	push	{r7}
 800c916:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800c918:	4b14      	ldr	r3, [pc, #80]	@ (800c96c <vPortSetupTimerInterrupt+0x58>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	4a14      	ldr	r2, [pc, #80]	@ (800c970 <vPortSetupTimerInterrupt+0x5c>)
 800c91e:	fba2 2303 	umull	r2, r3, r2, r3
 800c922:	099b      	lsrs	r3, r3, #6
 800c924:	4a13      	ldr	r2, [pc, #76]	@ (800c974 <vPortSetupTimerInterrupt+0x60>)
 800c926:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800c928:	4b12      	ldr	r3, [pc, #72]	@ (800c974 <vPortSetupTimerInterrupt+0x60>)
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800c930:	fbb2 f3f3 	udiv	r3, r2, r3
 800c934:	4a10      	ldr	r2, [pc, #64]	@ (800c978 <vPortSetupTimerInterrupt+0x64>)
 800c936:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800c938:	4b10      	ldr	r3, [pc, #64]	@ (800c97c <vPortSetupTimerInterrupt+0x68>)
 800c93a:	222d      	movs	r2, #45	@ 0x2d
 800c93c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c93e:	4b10      	ldr	r3, [pc, #64]	@ (800c980 <vPortSetupTimerInterrupt+0x6c>)
 800c940:	2200      	movs	r2, #0
 800c942:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c944:	4b0f      	ldr	r3, [pc, #60]	@ (800c984 <vPortSetupTimerInterrupt+0x70>)
 800c946:	2200      	movs	r2, #0
 800c948:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c94a:	4b08      	ldr	r3, [pc, #32]	@ (800c96c <vPortSetupTimerInterrupt+0x58>)
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	4a08      	ldr	r2, [pc, #32]	@ (800c970 <vPortSetupTimerInterrupt+0x5c>)
 800c950:	fba2 2303 	umull	r2, r3, r2, r3
 800c954:	099b      	lsrs	r3, r3, #6
 800c956:	4a0c      	ldr	r2, [pc, #48]	@ (800c988 <vPortSetupTimerInterrupt+0x74>)
 800c958:	3b01      	subs	r3, #1
 800c95a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c95c:	4b08      	ldr	r3, [pc, #32]	@ (800c980 <vPortSetupTimerInterrupt+0x6c>)
 800c95e:	2207      	movs	r2, #7
 800c960:	601a      	str	r2, [r3, #0]
}
 800c962:	bf00      	nop
 800c964:	46bd      	mov	sp, r7
 800c966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96a:	4770      	bx	lr
 800c96c:	200000e0 	.word	0x200000e0
 800c970:	10624dd3 	.word	0x10624dd3
 800c974:	2000153c 	.word	0x2000153c
 800c978:	20001540 	.word	0x20001540
 800c97c:	20001544 	.word	0x20001544
 800c980:	e000e010 	.word	0xe000e010
 800c984:	e000e018 	.word	0xe000e018
 800c988:	e000e014 	.word	0xe000e014

0800c98c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c98c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c99c <vPortEnableVFP+0x10>
 800c990:	6801      	ldr	r1, [r0, #0]
 800c992:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c996:	6001      	str	r1, [r0, #0]
 800c998:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c99a:	bf00      	nop
 800c99c:	e000ed88 	.word	0xe000ed88

0800c9a0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c9a0:	b480      	push	{r7}
 800c9a2:	b085      	sub	sp, #20
 800c9a4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c9a6:	f3ef 8305 	mrs	r3, IPSR
 800c9aa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	2b0f      	cmp	r3, #15
 800c9b0:	d915      	bls.n	800c9de <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c9b2:	4a18      	ldr	r2, [pc, #96]	@ (800ca14 <vPortValidateInterruptPriority+0x74>)
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	4413      	add	r3, r2
 800c9b8:	781b      	ldrb	r3, [r3, #0]
 800c9ba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c9bc:	4b16      	ldr	r3, [pc, #88]	@ (800ca18 <vPortValidateInterruptPriority+0x78>)
 800c9be:	781b      	ldrb	r3, [r3, #0]
 800c9c0:	7afa      	ldrb	r2, [r7, #11]
 800c9c2:	429a      	cmp	r2, r3
 800c9c4:	d20b      	bcs.n	800c9de <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c9c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9ca:	f383 8811 	msr	BASEPRI, r3
 800c9ce:	f3bf 8f6f 	isb	sy
 800c9d2:	f3bf 8f4f 	dsb	sy
 800c9d6:	607b      	str	r3, [r7, #4]
}
 800c9d8:	bf00      	nop
 800c9da:	bf00      	nop
 800c9dc:	e7fd      	b.n	800c9da <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c9de:	4b0f      	ldr	r3, [pc, #60]	@ (800ca1c <vPortValidateInterruptPriority+0x7c>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c9e6:	4b0e      	ldr	r3, [pc, #56]	@ (800ca20 <vPortValidateInterruptPriority+0x80>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	d90b      	bls.n	800ca06 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c9ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9f2:	f383 8811 	msr	BASEPRI, r3
 800c9f6:	f3bf 8f6f 	isb	sy
 800c9fa:	f3bf 8f4f 	dsb	sy
 800c9fe:	603b      	str	r3, [r7, #0]
}
 800ca00:	bf00      	nop
 800ca02:	bf00      	nop
 800ca04:	e7fd      	b.n	800ca02 <vPortValidateInterruptPriority+0x62>
	}
 800ca06:	bf00      	nop
 800ca08:	3714      	adds	r7, #20
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca10:	4770      	bx	lr
 800ca12:	bf00      	nop
 800ca14:	e000e3f0 	.word	0xe000e3f0
 800ca18:	20001548 	.word	0x20001548
 800ca1c:	e000ed0c 	.word	0xe000ed0c
 800ca20:	2000154c 	.word	0x2000154c

0800ca24 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b08a      	sub	sp, #40	@ 0x28
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ca30:	f7fe fbc0 	bl	800b1b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ca34:	4b5c      	ldr	r3, [pc, #368]	@ (800cba8 <pvPortMalloc+0x184>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d101      	bne.n	800ca40 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ca3c:	f000 f924 	bl	800cc88 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ca40:	4b5a      	ldr	r3, [pc, #360]	@ (800cbac <pvPortMalloc+0x188>)
 800ca42:	681a      	ldr	r2, [r3, #0]
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	4013      	ands	r3, r2
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	f040 8095 	bne.w	800cb78 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d01e      	beq.n	800ca92 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ca54:	2208      	movs	r2, #8
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	4413      	add	r3, r2
 800ca5a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f003 0307 	and.w	r3, r3, #7
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d015      	beq.n	800ca92 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f023 0307 	bic.w	r3, r3, #7
 800ca6c:	3308      	adds	r3, #8
 800ca6e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f003 0307 	and.w	r3, r3, #7
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d00b      	beq.n	800ca92 <pvPortMalloc+0x6e>
	__asm volatile
 800ca7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca7e:	f383 8811 	msr	BASEPRI, r3
 800ca82:	f3bf 8f6f 	isb	sy
 800ca86:	f3bf 8f4f 	dsb	sy
 800ca8a:	617b      	str	r3, [r7, #20]
}
 800ca8c:	bf00      	nop
 800ca8e:	bf00      	nop
 800ca90:	e7fd      	b.n	800ca8e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d06f      	beq.n	800cb78 <pvPortMalloc+0x154>
 800ca98:	4b45      	ldr	r3, [pc, #276]	@ (800cbb0 <pvPortMalloc+0x18c>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	687a      	ldr	r2, [r7, #4]
 800ca9e:	429a      	cmp	r2, r3
 800caa0:	d86a      	bhi.n	800cb78 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800caa2:	4b44      	ldr	r3, [pc, #272]	@ (800cbb4 <pvPortMalloc+0x190>)
 800caa4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800caa6:	4b43      	ldr	r3, [pc, #268]	@ (800cbb4 <pvPortMalloc+0x190>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800caac:	e004      	b.n	800cab8 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800caae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cab0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caba:	685b      	ldr	r3, [r3, #4]
 800cabc:	687a      	ldr	r2, [r7, #4]
 800cabe:	429a      	cmp	r2, r3
 800cac0:	d903      	bls.n	800caca <pvPortMalloc+0xa6>
 800cac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d1f1      	bne.n	800caae <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800caca:	4b37      	ldr	r3, [pc, #220]	@ (800cba8 <pvPortMalloc+0x184>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cad0:	429a      	cmp	r2, r3
 800cad2:	d051      	beq.n	800cb78 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cad4:	6a3b      	ldr	r3, [r7, #32]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	2208      	movs	r2, #8
 800cada:	4413      	add	r3, r2
 800cadc:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cae0:	681a      	ldr	r2, [r3, #0]
 800cae2:	6a3b      	ldr	r3, [r7, #32]
 800cae4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cae8:	685a      	ldr	r2, [r3, #4]
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	1ad2      	subs	r2, r2, r3
 800caee:	2308      	movs	r3, #8
 800caf0:	005b      	lsls	r3, r3, #1
 800caf2:	429a      	cmp	r2, r3
 800caf4:	d920      	bls.n	800cb38 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800caf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	4413      	add	r3, r2
 800cafc:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cafe:	69bb      	ldr	r3, [r7, #24]
 800cb00:	f003 0307 	and.w	r3, r3, #7
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d00b      	beq.n	800cb20 <pvPortMalloc+0xfc>
	__asm volatile
 800cb08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb0c:	f383 8811 	msr	BASEPRI, r3
 800cb10:	f3bf 8f6f 	isb	sy
 800cb14:	f3bf 8f4f 	dsb	sy
 800cb18:	613b      	str	r3, [r7, #16]
}
 800cb1a:	bf00      	nop
 800cb1c:	bf00      	nop
 800cb1e:	e7fd      	b.n	800cb1c <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cb20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb22:	685a      	ldr	r2, [r3, #4]
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	1ad2      	subs	r2, r2, r3
 800cb28:	69bb      	ldr	r3, [r7, #24]
 800cb2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cb2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb2e:	687a      	ldr	r2, [r7, #4]
 800cb30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cb32:	69b8      	ldr	r0, [r7, #24]
 800cb34:	f000 f90a 	bl	800cd4c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cb38:	4b1d      	ldr	r3, [pc, #116]	@ (800cbb0 <pvPortMalloc+0x18c>)
 800cb3a:	681a      	ldr	r2, [r3, #0]
 800cb3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb3e:	685b      	ldr	r3, [r3, #4]
 800cb40:	1ad3      	subs	r3, r2, r3
 800cb42:	4a1b      	ldr	r2, [pc, #108]	@ (800cbb0 <pvPortMalloc+0x18c>)
 800cb44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cb46:	4b1a      	ldr	r3, [pc, #104]	@ (800cbb0 <pvPortMalloc+0x18c>)
 800cb48:	681a      	ldr	r2, [r3, #0]
 800cb4a:	4b1b      	ldr	r3, [pc, #108]	@ (800cbb8 <pvPortMalloc+0x194>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	429a      	cmp	r2, r3
 800cb50:	d203      	bcs.n	800cb5a <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cb52:	4b17      	ldr	r3, [pc, #92]	@ (800cbb0 <pvPortMalloc+0x18c>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	4a18      	ldr	r2, [pc, #96]	@ (800cbb8 <pvPortMalloc+0x194>)
 800cb58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cb5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb5c:	685a      	ldr	r2, [r3, #4]
 800cb5e:	4b13      	ldr	r3, [pc, #76]	@ (800cbac <pvPortMalloc+0x188>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	431a      	orrs	r2, r3
 800cb64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cb68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cb6e:	4b13      	ldr	r3, [pc, #76]	@ (800cbbc <pvPortMalloc+0x198>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	3301      	adds	r3, #1
 800cb74:	4a11      	ldr	r2, [pc, #68]	@ (800cbbc <pvPortMalloc+0x198>)
 800cb76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cb78:	f7fe fb62 	bl	800b240 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb7c:	69fb      	ldr	r3, [r7, #28]
 800cb7e:	f003 0307 	and.w	r3, r3, #7
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d00b      	beq.n	800cb9e <pvPortMalloc+0x17a>
	__asm volatile
 800cb86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb8a:	f383 8811 	msr	BASEPRI, r3
 800cb8e:	f3bf 8f6f 	isb	sy
 800cb92:	f3bf 8f4f 	dsb	sy
 800cb96:	60fb      	str	r3, [r7, #12]
}
 800cb98:	bf00      	nop
 800cb9a:	bf00      	nop
 800cb9c:	e7fd      	b.n	800cb9a <pvPortMalloc+0x176>
	return pvReturn;
 800cb9e:	69fb      	ldr	r3, [r7, #28]
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	3728      	adds	r7, #40	@ 0x28
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}
 800cba8:	20005158 	.word	0x20005158
 800cbac:	2000516c 	.word	0x2000516c
 800cbb0:	2000515c 	.word	0x2000515c
 800cbb4:	20005150 	.word	0x20005150
 800cbb8:	20005160 	.word	0x20005160
 800cbbc:	20005164 	.word	0x20005164

0800cbc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b086      	sub	sp, #24
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d04f      	beq.n	800cc72 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cbd2:	2308      	movs	r3, #8
 800cbd4:	425b      	negs	r3, r3
 800cbd6:	697a      	ldr	r2, [r7, #20]
 800cbd8:	4413      	add	r3, r2
 800cbda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cbdc:	697b      	ldr	r3, [r7, #20]
 800cbde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cbe0:	693b      	ldr	r3, [r7, #16]
 800cbe2:	685a      	ldr	r2, [r3, #4]
 800cbe4:	4b25      	ldr	r3, [pc, #148]	@ (800cc7c <vPortFree+0xbc>)
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	4013      	ands	r3, r2
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d10b      	bne.n	800cc06 <vPortFree+0x46>
	__asm volatile
 800cbee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbf2:	f383 8811 	msr	BASEPRI, r3
 800cbf6:	f3bf 8f6f 	isb	sy
 800cbfa:	f3bf 8f4f 	dsb	sy
 800cbfe:	60fb      	str	r3, [r7, #12]
}
 800cc00:	bf00      	nop
 800cc02:	bf00      	nop
 800cc04:	e7fd      	b.n	800cc02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cc06:	693b      	ldr	r3, [r7, #16]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d00b      	beq.n	800cc26 <vPortFree+0x66>
	__asm volatile
 800cc0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc12:	f383 8811 	msr	BASEPRI, r3
 800cc16:	f3bf 8f6f 	isb	sy
 800cc1a:	f3bf 8f4f 	dsb	sy
 800cc1e:	60bb      	str	r3, [r7, #8]
}
 800cc20:	bf00      	nop
 800cc22:	bf00      	nop
 800cc24:	e7fd      	b.n	800cc22 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cc26:	693b      	ldr	r3, [r7, #16]
 800cc28:	685a      	ldr	r2, [r3, #4]
 800cc2a:	4b14      	ldr	r3, [pc, #80]	@ (800cc7c <vPortFree+0xbc>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	4013      	ands	r3, r2
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d01e      	beq.n	800cc72 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cc34:	693b      	ldr	r3, [r7, #16]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d11a      	bne.n	800cc72 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cc3c:	693b      	ldr	r3, [r7, #16]
 800cc3e:	685a      	ldr	r2, [r3, #4]
 800cc40:	4b0e      	ldr	r3, [pc, #56]	@ (800cc7c <vPortFree+0xbc>)
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	43db      	mvns	r3, r3
 800cc46:	401a      	ands	r2, r3
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cc4c:	f7fe fab2 	bl	800b1b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cc50:	693b      	ldr	r3, [r7, #16]
 800cc52:	685a      	ldr	r2, [r3, #4]
 800cc54:	4b0a      	ldr	r3, [pc, #40]	@ (800cc80 <vPortFree+0xc0>)
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	4413      	add	r3, r2
 800cc5a:	4a09      	ldr	r2, [pc, #36]	@ (800cc80 <vPortFree+0xc0>)
 800cc5c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cc5e:	6938      	ldr	r0, [r7, #16]
 800cc60:	f000 f874 	bl	800cd4c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cc64:	4b07      	ldr	r3, [pc, #28]	@ (800cc84 <vPortFree+0xc4>)
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	3301      	adds	r3, #1
 800cc6a:	4a06      	ldr	r2, [pc, #24]	@ (800cc84 <vPortFree+0xc4>)
 800cc6c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cc6e:	f7fe fae7 	bl	800b240 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cc72:	bf00      	nop
 800cc74:	3718      	adds	r7, #24
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}
 800cc7a:	bf00      	nop
 800cc7c:	2000516c 	.word	0x2000516c
 800cc80:	2000515c 	.word	0x2000515c
 800cc84:	20005168 	.word	0x20005168

0800cc88 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cc88:	b480      	push	{r7}
 800cc8a:	b085      	sub	sp, #20
 800cc8c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cc8e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800cc92:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cc94:	4b27      	ldr	r3, [pc, #156]	@ (800cd34 <prvHeapInit+0xac>)
 800cc96:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	f003 0307 	and.w	r3, r3, #7
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d00c      	beq.n	800ccbc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	3307      	adds	r3, #7
 800cca6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	f023 0307 	bic.w	r3, r3, #7
 800ccae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ccb0:	68ba      	ldr	r2, [r7, #8]
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	1ad3      	subs	r3, r2, r3
 800ccb6:	4a1f      	ldr	r2, [pc, #124]	@ (800cd34 <prvHeapInit+0xac>)
 800ccb8:	4413      	add	r3, r2
 800ccba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ccc0:	4a1d      	ldr	r2, [pc, #116]	@ (800cd38 <prvHeapInit+0xb0>)
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ccc6:	4b1c      	ldr	r3, [pc, #112]	@ (800cd38 <prvHeapInit+0xb0>)
 800ccc8:	2200      	movs	r2, #0
 800ccca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	68ba      	ldr	r2, [r7, #8]
 800ccd0:	4413      	add	r3, r2
 800ccd2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ccd4:	2208      	movs	r2, #8
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	1a9b      	subs	r3, r3, r2
 800ccda:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	f023 0307 	bic.w	r3, r3, #7
 800cce2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	4a15      	ldr	r2, [pc, #84]	@ (800cd3c <prvHeapInit+0xb4>)
 800cce8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ccea:	4b14      	ldr	r3, [pc, #80]	@ (800cd3c <prvHeapInit+0xb4>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	2200      	movs	r2, #0
 800ccf0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ccf2:	4b12      	ldr	r3, [pc, #72]	@ (800cd3c <prvHeapInit+0xb4>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	68fa      	ldr	r2, [r7, #12]
 800cd02:	1ad2      	subs	r2, r2, r3
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cd08:	4b0c      	ldr	r3, [pc, #48]	@ (800cd3c <prvHeapInit+0xb4>)
 800cd0a:	681a      	ldr	r2, [r3, #0]
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	685b      	ldr	r3, [r3, #4]
 800cd14:	4a0a      	ldr	r2, [pc, #40]	@ (800cd40 <prvHeapInit+0xb8>)
 800cd16:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	685b      	ldr	r3, [r3, #4]
 800cd1c:	4a09      	ldr	r2, [pc, #36]	@ (800cd44 <prvHeapInit+0xbc>)
 800cd1e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cd20:	4b09      	ldr	r3, [pc, #36]	@ (800cd48 <prvHeapInit+0xc0>)
 800cd22:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800cd26:	601a      	str	r2, [r3, #0]
}
 800cd28:	bf00      	nop
 800cd2a:	3714      	adds	r7, #20
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd32:	4770      	bx	lr
 800cd34:	20001550 	.word	0x20001550
 800cd38:	20005150 	.word	0x20005150
 800cd3c:	20005158 	.word	0x20005158
 800cd40:	20005160 	.word	0x20005160
 800cd44:	2000515c 	.word	0x2000515c
 800cd48:	2000516c 	.word	0x2000516c

0800cd4c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cd4c:	b480      	push	{r7}
 800cd4e:	b085      	sub	sp, #20
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cd54:	4b28      	ldr	r3, [pc, #160]	@ (800cdf8 <prvInsertBlockIntoFreeList+0xac>)
 800cd56:	60fb      	str	r3, [r7, #12]
 800cd58:	e002      	b.n	800cd60 <prvInsertBlockIntoFreeList+0x14>
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	60fb      	str	r3, [r7, #12]
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	687a      	ldr	r2, [r7, #4]
 800cd66:	429a      	cmp	r2, r3
 800cd68:	d8f7      	bhi.n	800cd5a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	685b      	ldr	r3, [r3, #4]
 800cd72:	68ba      	ldr	r2, [r7, #8]
 800cd74:	4413      	add	r3, r2
 800cd76:	687a      	ldr	r2, [r7, #4]
 800cd78:	429a      	cmp	r2, r3
 800cd7a:	d108      	bne.n	800cd8e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	685a      	ldr	r2, [r3, #4]
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	685b      	ldr	r3, [r3, #4]
 800cd84:	441a      	add	r2, r3
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	685b      	ldr	r3, [r3, #4]
 800cd96:	68ba      	ldr	r2, [r7, #8]
 800cd98:	441a      	add	r2, r3
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	429a      	cmp	r2, r3
 800cda0:	d118      	bne.n	800cdd4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	681a      	ldr	r2, [r3, #0]
 800cda6:	4b15      	ldr	r3, [pc, #84]	@ (800cdfc <prvInsertBlockIntoFreeList+0xb0>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	429a      	cmp	r2, r3
 800cdac:	d00d      	beq.n	800cdca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	685a      	ldr	r2, [r3, #4]
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	685b      	ldr	r3, [r3, #4]
 800cdb8:	441a      	add	r2, r3
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	681a      	ldr	r2, [r3, #0]
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	601a      	str	r2, [r3, #0]
 800cdc8:	e008      	b.n	800cddc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cdca:	4b0c      	ldr	r3, [pc, #48]	@ (800cdfc <prvInsertBlockIntoFreeList+0xb0>)
 800cdcc:	681a      	ldr	r2, [r3, #0]
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	601a      	str	r2, [r3, #0]
 800cdd2:	e003      	b.n	800cddc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	681a      	ldr	r2, [r3, #0]
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cddc:	68fa      	ldr	r2, [r7, #12]
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	429a      	cmp	r2, r3
 800cde2:	d002      	beq.n	800cdea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	687a      	ldr	r2, [r7, #4]
 800cde8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cdea:	bf00      	nop
 800cdec:	3714      	adds	r7, #20
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf4:	4770      	bx	lr
 800cdf6:	bf00      	nop
 800cdf8:	20005150 	.word	0x20005150
 800cdfc:	20005158 	.word	0x20005158

0800ce00 <atof>:
 800ce00:	2100      	movs	r1, #0
 800ce02:	f000 be0b 	b.w	800da1c <strtod>

0800ce06 <sulp>:
 800ce06:	b570      	push	{r4, r5, r6, lr}
 800ce08:	4604      	mov	r4, r0
 800ce0a:	460d      	mov	r5, r1
 800ce0c:	ec45 4b10 	vmov	d0, r4, r5
 800ce10:	4616      	mov	r6, r2
 800ce12:	f003 fcf1 	bl	80107f8 <__ulp>
 800ce16:	ec51 0b10 	vmov	r0, r1, d0
 800ce1a:	b17e      	cbz	r6, 800ce3c <sulp+0x36>
 800ce1c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ce20:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	dd09      	ble.n	800ce3c <sulp+0x36>
 800ce28:	051b      	lsls	r3, r3, #20
 800ce2a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ce2e:	2400      	movs	r4, #0
 800ce30:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ce34:	4622      	mov	r2, r4
 800ce36:	462b      	mov	r3, r5
 800ce38:	f7f3 fbe6 	bl	8000608 <__aeabi_dmul>
 800ce3c:	ec41 0b10 	vmov	d0, r0, r1
 800ce40:	bd70      	pop	{r4, r5, r6, pc}
 800ce42:	0000      	movs	r0, r0
 800ce44:	0000      	movs	r0, r0
	...

0800ce48 <_strtod_l>:
 800ce48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce4c:	b09f      	sub	sp, #124	@ 0x7c
 800ce4e:	460c      	mov	r4, r1
 800ce50:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ce52:	2200      	movs	r2, #0
 800ce54:	921a      	str	r2, [sp, #104]	@ 0x68
 800ce56:	9005      	str	r0, [sp, #20]
 800ce58:	f04f 0a00 	mov.w	sl, #0
 800ce5c:	f04f 0b00 	mov.w	fp, #0
 800ce60:	460a      	mov	r2, r1
 800ce62:	9219      	str	r2, [sp, #100]	@ 0x64
 800ce64:	7811      	ldrb	r1, [r2, #0]
 800ce66:	292b      	cmp	r1, #43	@ 0x2b
 800ce68:	d04a      	beq.n	800cf00 <_strtod_l+0xb8>
 800ce6a:	d838      	bhi.n	800cede <_strtod_l+0x96>
 800ce6c:	290d      	cmp	r1, #13
 800ce6e:	d832      	bhi.n	800ced6 <_strtod_l+0x8e>
 800ce70:	2908      	cmp	r1, #8
 800ce72:	d832      	bhi.n	800ceda <_strtod_l+0x92>
 800ce74:	2900      	cmp	r1, #0
 800ce76:	d03b      	beq.n	800cef0 <_strtod_l+0xa8>
 800ce78:	2200      	movs	r2, #0
 800ce7a:	920e      	str	r2, [sp, #56]	@ 0x38
 800ce7c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ce7e:	782a      	ldrb	r2, [r5, #0]
 800ce80:	2a30      	cmp	r2, #48	@ 0x30
 800ce82:	f040 80b2 	bne.w	800cfea <_strtod_l+0x1a2>
 800ce86:	786a      	ldrb	r2, [r5, #1]
 800ce88:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ce8c:	2a58      	cmp	r2, #88	@ 0x58
 800ce8e:	d16e      	bne.n	800cf6e <_strtod_l+0x126>
 800ce90:	9302      	str	r3, [sp, #8]
 800ce92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce94:	9301      	str	r3, [sp, #4]
 800ce96:	ab1a      	add	r3, sp, #104	@ 0x68
 800ce98:	9300      	str	r3, [sp, #0]
 800ce9a:	4a8f      	ldr	r2, [pc, #572]	@ (800d0d8 <_strtod_l+0x290>)
 800ce9c:	9805      	ldr	r0, [sp, #20]
 800ce9e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800cea0:	a919      	add	r1, sp, #100	@ 0x64
 800cea2:	f002 fda3 	bl	800f9ec <__gethex>
 800cea6:	f010 060f 	ands.w	r6, r0, #15
 800ceaa:	4604      	mov	r4, r0
 800ceac:	d005      	beq.n	800ceba <_strtod_l+0x72>
 800ceae:	2e06      	cmp	r6, #6
 800ceb0:	d128      	bne.n	800cf04 <_strtod_l+0xbc>
 800ceb2:	3501      	adds	r5, #1
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	9519      	str	r5, [sp, #100]	@ 0x64
 800ceb8:	930e      	str	r3, [sp, #56]	@ 0x38
 800ceba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	f040 858e 	bne.w	800d9de <_strtod_l+0xb96>
 800cec2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cec4:	b1cb      	cbz	r3, 800cefa <_strtod_l+0xb2>
 800cec6:	4652      	mov	r2, sl
 800cec8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800cecc:	ec43 2b10 	vmov	d0, r2, r3
 800ced0:	b01f      	add	sp, #124	@ 0x7c
 800ced2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ced6:	2920      	cmp	r1, #32
 800ced8:	d1ce      	bne.n	800ce78 <_strtod_l+0x30>
 800ceda:	3201      	adds	r2, #1
 800cedc:	e7c1      	b.n	800ce62 <_strtod_l+0x1a>
 800cede:	292d      	cmp	r1, #45	@ 0x2d
 800cee0:	d1ca      	bne.n	800ce78 <_strtod_l+0x30>
 800cee2:	2101      	movs	r1, #1
 800cee4:	910e      	str	r1, [sp, #56]	@ 0x38
 800cee6:	1c51      	adds	r1, r2, #1
 800cee8:	9119      	str	r1, [sp, #100]	@ 0x64
 800ceea:	7852      	ldrb	r2, [r2, #1]
 800ceec:	2a00      	cmp	r2, #0
 800ceee:	d1c5      	bne.n	800ce7c <_strtod_l+0x34>
 800cef0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cef2:	9419      	str	r4, [sp, #100]	@ 0x64
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	f040 8570 	bne.w	800d9da <_strtod_l+0xb92>
 800cefa:	4652      	mov	r2, sl
 800cefc:	465b      	mov	r3, fp
 800cefe:	e7e5      	b.n	800cecc <_strtod_l+0x84>
 800cf00:	2100      	movs	r1, #0
 800cf02:	e7ef      	b.n	800cee4 <_strtod_l+0x9c>
 800cf04:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cf06:	b13a      	cbz	r2, 800cf18 <_strtod_l+0xd0>
 800cf08:	2135      	movs	r1, #53	@ 0x35
 800cf0a:	a81c      	add	r0, sp, #112	@ 0x70
 800cf0c:	f003 fd6e 	bl	80109ec <__copybits>
 800cf10:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cf12:	9805      	ldr	r0, [sp, #20]
 800cf14:	f003 f944 	bl	80101a0 <_Bfree>
 800cf18:	3e01      	subs	r6, #1
 800cf1a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800cf1c:	2e04      	cmp	r6, #4
 800cf1e:	d806      	bhi.n	800cf2e <_strtod_l+0xe6>
 800cf20:	e8df f006 	tbb	[pc, r6]
 800cf24:	201d0314 	.word	0x201d0314
 800cf28:	14          	.byte	0x14
 800cf29:	00          	.byte	0x00
 800cf2a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800cf2e:	05e1      	lsls	r1, r4, #23
 800cf30:	bf48      	it	mi
 800cf32:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800cf36:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cf3a:	0d1b      	lsrs	r3, r3, #20
 800cf3c:	051b      	lsls	r3, r3, #20
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d1bb      	bne.n	800ceba <_strtod_l+0x72>
 800cf42:	f001 fdfb 	bl	800eb3c <__errno>
 800cf46:	2322      	movs	r3, #34	@ 0x22
 800cf48:	6003      	str	r3, [r0, #0]
 800cf4a:	e7b6      	b.n	800ceba <_strtod_l+0x72>
 800cf4c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800cf50:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800cf54:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800cf58:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cf5c:	e7e7      	b.n	800cf2e <_strtod_l+0xe6>
 800cf5e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800d0e0 <_strtod_l+0x298>
 800cf62:	e7e4      	b.n	800cf2e <_strtod_l+0xe6>
 800cf64:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800cf68:	f04f 3aff 	mov.w	sl, #4294967295
 800cf6c:	e7df      	b.n	800cf2e <_strtod_l+0xe6>
 800cf6e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cf70:	1c5a      	adds	r2, r3, #1
 800cf72:	9219      	str	r2, [sp, #100]	@ 0x64
 800cf74:	785b      	ldrb	r3, [r3, #1]
 800cf76:	2b30      	cmp	r3, #48	@ 0x30
 800cf78:	d0f9      	beq.n	800cf6e <_strtod_l+0x126>
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d09d      	beq.n	800ceba <_strtod_l+0x72>
 800cf7e:	2301      	movs	r3, #1
 800cf80:	2700      	movs	r7, #0
 800cf82:	9308      	str	r3, [sp, #32]
 800cf84:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cf86:	930c      	str	r3, [sp, #48]	@ 0x30
 800cf88:	970b      	str	r7, [sp, #44]	@ 0x2c
 800cf8a:	46b9      	mov	r9, r7
 800cf8c:	220a      	movs	r2, #10
 800cf8e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800cf90:	7805      	ldrb	r5, [r0, #0]
 800cf92:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800cf96:	b2d9      	uxtb	r1, r3
 800cf98:	2909      	cmp	r1, #9
 800cf9a:	d928      	bls.n	800cfee <_strtod_l+0x1a6>
 800cf9c:	494f      	ldr	r1, [pc, #316]	@ (800d0dc <_strtod_l+0x294>)
 800cf9e:	2201      	movs	r2, #1
 800cfa0:	f001 fd11 	bl	800e9c6 <strncmp>
 800cfa4:	2800      	cmp	r0, #0
 800cfa6:	d032      	beq.n	800d00e <_strtod_l+0x1c6>
 800cfa8:	2000      	movs	r0, #0
 800cfaa:	462a      	mov	r2, r5
 800cfac:	900a      	str	r0, [sp, #40]	@ 0x28
 800cfae:	464d      	mov	r5, r9
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	2a65      	cmp	r2, #101	@ 0x65
 800cfb4:	d001      	beq.n	800cfba <_strtod_l+0x172>
 800cfb6:	2a45      	cmp	r2, #69	@ 0x45
 800cfb8:	d114      	bne.n	800cfe4 <_strtod_l+0x19c>
 800cfba:	b91d      	cbnz	r5, 800cfc4 <_strtod_l+0x17c>
 800cfbc:	9a08      	ldr	r2, [sp, #32]
 800cfbe:	4302      	orrs	r2, r0
 800cfc0:	d096      	beq.n	800cef0 <_strtod_l+0xa8>
 800cfc2:	2500      	movs	r5, #0
 800cfc4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800cfc6:	1c62      	adds	r2, r4, #1
 800cfc8:	9219      	str	r2, [sp, #100]	@ 0x64
 800cfca:	7862      	ldrb	r2, [r4, #1]
 800cfcc:	2a2b      	cmp	r2, #43	@ 0x2b
 800cfce:	d07a      	beq.n	800d0c6 <_strtod_l+0x27e>
 800cfd0:	2a2d      	cmp	r2, #45	@ 0x2d
 800cfd2:	d07e      	beq.n	800d0d2 <_strtod_l+0x28a>
 800cfd4:	f04f 0c00 	mov.w	ip, #0
 800cfd8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800cfdc:	2909      	cmp	r1, #9
 800cfde:	f240 8085 	bls.w	800d0ec <_strtod_l+0x2a4>
 800cfe2:	9419      	str	r4, [sp, #100]	@ 0x64
 800cfe4:	f04f 0800 	mov.w	r8, #0
 800cfe8:	e0a5      	b.n	800d136 <_strtod_l+0x2ee>
 800cfea:	2300      	movs	r3, #0
 800cfec:	e7c8      	b.n	800cf80 <_strtod_l+0x138>
 800cfee:	f1b9 0f08 	cmp.w	r9, #8
 800cff2:	bfd8      	it	le
 800cff4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800cff6:	f100 0001 	add.w	r0, r0, #1
 800cffa:	bfda      	itte	le
 800cffc:	fb02 3301 	mlale	r3, r2, r1, r3
 800d000:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800d002:	fb02 3707 	mlagt	r7, r2, r7, r3
 800d006:	f109 0901 	add.w	r9, r9, #1
 800d00a:	9019      	str	r0, [sp, #100]	@ 0x64
 800d00c:	e7bf      	b.n	800cf8e <_strtod_l+0x146>
 800d00e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d010:	1c5a      	adds	r2, r3, #1
 800d012:	9219      	str	r2, [sp, #100]	@ 0x64
 800d014:	785a      	ldrb	r2, [r3, #1]
 800d016:	f1b9 0f00 	cmp.w	r9, #0
 800d01a:	d03b      	beq.n	800d094 <_strtod_l+0x24c>
 800d01c:	900a      	str	r0, [sp, #40]	@ 0x28
 800d01e:	464d      	mov	r5, r9
 800d020:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d024:	2b09      	cmp	r3, #9
 800d026:	d912      	bls.n	800d04e <_strtod_l+0x206>
 800d028:	2301      	movs	r3, #1
 800d02a:	e7c2      	b.n	800cfb2 <_strtod_l+0x16a>
 800d02c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d02e:	1c5a      	adds	r2, r3, #1
 800d030:	9219      	str	r2, [sp, #100]	@ 0x64
 800d032:	785a      	ldrb	r2, [r3, #1]
 800d034:	3001      	adds	r0, #1
 800d036:	2a30      	cmp	r2, #48	@ 0x30
 800d038:	d0f8      	beq.n	800d02c <_strtod_l+0x1e4>
 800d03a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d03e:	2b08      	cmp	r3, #8
 800d040:	f200 84d2 	bhi.w	800d9e8 <_strtod_l+0xba0>
 800d044:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d046:	900a      	str	r0, [sp, #40]	@ 0x28
 800d048:	2000      	movs	r0, #0
 800d04a:	930c      	str	r3, [sp, #48]	@ 0x30
 800d04c:	4605      	mov	r5, r0
 800d04e:	3a30      	subs	r2, #48	@ 0x30
 800d050:	f100 0301 	add.w	r3, r0, #1
 800d054:	d018      	beq.n	800d088 <_strtod_l+0x240>
 800d056:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d058:	4419      	add	r1, r3
 800d05a:	910a      	str	r1, [sp, #40]	@ 0x28
 800d05c:	462e      	mov	r6, r5
 800d05e:	f04f 0e0a 	mov.w	lr, #10
 800d062:	1c71      	adds	r1, r6, #1
 800d064:	eba1 0c05 	sub.w	ip, r1, r5
 800d068:	4563      	cmp	r3, ip
 800d06a:	dc15      	bgt.n	800d098 <_strtod_l+0x250>
 800d06c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800d070:	182b      	adds	r3, r5, r0
 800d072:	2b08      	cmp	r3, #8
 800d074:	f105 0501 	add.w	r5, r5, #1
 800d078:	4405      	add	r5, r0
 800d07a:	dc1a      	bgt.n	800d0b2 <_strtod_l+0x26a>
 800d07c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d07e:	230a      	movs	r3, #10
 800d080:	fb03 2301 	mla	r3, r3, r1, r2
 800d084:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d086:	2300      	movs	r3, #0
 800d088:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d08a:	1c51      	adds	r1, r2, #1
 800d08c:	9119      	str	r1, [sp, #100]	@ 0x64
 800d08e:	7852      	ldrb	r2, [r2, #1]
 800d090:	4618      	mov	r0, r3
 800d092:	e7c5      	b.n	800d020 <_strtod_l+0x1d8>
 800d094:	4648      	mov	r0, r9
 800d096:	e7ce      	b.n	800d036 <_strtod_l+0x1ee>
 800d098:	2e08      	cmp	r6, #8
 800d09a:	dc05      	bgt.n	800d0a8 <_strtod_l+0x260>
 800d09c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d09e:	fb0e f606 	mul.w	r6, lr, r6
 800d0a2:	960b      	str	r6, [sp, #44]	@ 0x2c
 800d0a4:	460e      	mov	r6, r1
 800d0a6:	e7dc      	b.n	800d062 <_strtod_l+0x21a>
 800d0a8:	2910      	cmp	r1, #16
 800d0aa:	bfd8      	it	le
 800d0ac:	fb0e f707 	mulle.w	r7, lr, r7
 800d0b0:	e7f8      	b.n	800d0a4 <_strtod_l+0x25c>
 800d0b2:	2b0f      	cmp	r3, #15
 800d0b4:	bfdc      	itt	le
 800d0b6:	230a      	movle	r3, #10
 800d0b8:	fb03 2707 	mlale	r7, r3, r7, r2
 800d0bc:	e7e3      	b.n	800d086 <_strtod_l+0x23e>
 800d0be:	2300      	movs	r3, #0
 800d0c0:	930a      	str	r3, [sp, #40]	@ 0x28
 800d0c2:	2301      	movs	r3, #1
 800d0c4:	e77a      	b.n	800cfbc <_strtod_l+0x174>
 800d0c6:	f04f 0c00 	mov.w	ip, #0
 800d0ca:	1ca2      	adds	r2, r4, #2
 800d0cc:	9219      	str	r2, [sp, #100]	@ 0x64
 800d0ce:	78a2      	ldrb	r2, [r4, #2]
 800d0d0:	e782      	b.n	800cfd8 <_strtod_l+0x190>
 800d0d2:	f04f 0c01 	mov.w	ip, #1
 800d0d6:	e7f8      	b.n	800d0ca <_strtod_l+0x282>
 800d0d8:	08011a98 	.word	0x08011a98
 800d0dc:	080118ac 	.word	0x080118ac
 800d0e0:	7ff00000 	.word	0x7ff00000
 800d0e4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d0e6:	1c51      	adds	r1, r2, #1
 800d0e8:	9119      	str	r1, [sp, #100]	@ 0x64
 800d0ea:	7852      	ldrb	r2, [r2, #1]
 800d0ec:	2a30      	cmp	r2, #48	@ 0x30
 800d0ee:	d0f9      	beq.n	800d0e4 <_strtod_l+0x29c>
 800d0f0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d0f4:	2908      	cmp	r1, #8
 800d0f6:	f63f af75 	bhi.w	800cfe4 <_strtod_l+0x19c>
 800d0fa:	3a30      	subs	r2, #48	@ 0x30
 800d0fc:	9209      	str	r2, [sp, #36]	@ 0x24
 800d0fe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d100:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d102:	f04f 080a 	mov.w	r8, #10
 800d106:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d108:	1c56      	adds	r6, r2, #1
 800d10a:	9619      	str	r6, [sp, #100]	@ 0x64
 800d10c:	7852      	ldrb	r2, [r2, #1]
 800d10e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d112:	f1be 0f09 	cmp.w	lr, #9
 800d116:	d939      	bls.n	800d18c <_strtod_l+0x344>
 800d118:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d11a:	1a76      	subs	r6, r6, r1
 800d11c:	2e08      	cmp	r6, #8
 800d11e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d122:	dc03      	bgt.n	800d12c <_strtod_l+0x2e4>
 800d124:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d126:	4588      	cmp	r8, r1
 800d128:	bfa8      	it	ge
 800d12a:	4688      	movge	r8, r1
 800d12c:	f1bc 0f00 	cmp.w	ip, #0
 800d130:	d001      	beq.n	800d136 <_strtod_l+0x2ee>
 800d132:	f1c8 0800 	rsb	r8, r8, #0
 800d136:	2d00      	cmp	r5, #0
 800d138:	d14e      	bne.n	800d1d8 <_strtod_l+0x390>
 800d13a:	9908      	ldr	r1, [sp, #32]
 800d13c:	4308      	orrs	r0, r1
 800d13e:	f47f aebc 	bne.w	800ceba <_strtod_l+0x72>
 800d142:	2b00      	cmp	r3, #0
 800d144:	f47f aed4 	bne.w	800cef0 <_strtod_l+0xa8>
 800d148:	2a69      	cmp	r2, #105	@ 0x69
 800d14a:	d028      	beq.n	800d19e <_strtod_l+0x356>
 800d14c:	dc25      	bgt.n	800d19a <_strtod_l+0x352>
 800d14e:	2a49      	cmp	r2, #73	@ 0x49
 800d150:	d025      	beq.n	800d19e <_strtod_l+0x356>
 800d152:	2a4e      	cmp	r2, #78	@ 0x4e
 800d154:	f47f aecc 	bne.w	800cef0 <_strtod_l+0xa8>
 800d158:	499a      	ldr	r1, [pc, #616]	@ (800d3c4 <_strtod_l+0x57c>)
 800d15a:	a819      	add	r0, sp, #100	@ 0x64
 800d15c:	f002 fe68 	bl	800fe30 <__match>
 800d160:	2800      	cmp	r0, #0
 800d162:	f43f aec5 	beq.w	800cef0 <_strtod_l+0xa8>
 800d166:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d168:	781b      	ldrb	r3, [r3, #0]
 800d16a:	2b28      	cmp	r3, #40	@ 0x28
 800d16c:	d12e      	bne.n	800d1cc <_strtod_l+0x384>
 800d16e:	4996      	ldr	r1, [pc, #600]	@ (800d3c8 <_strtod_l+0x580>)
 800d170:	aa1c      	add	r2, sp, #112	@ 0x70
 800d172:	a819      	add	r0, sp, #100	@ 0x64
 800d174:	f002 fe70 	bl	800fe58 <__hexnan>
 800d178:	2805      	cmp	r0, #5
 800d17a:	d127      	bne.n	800d1cc <_strtod_l+0x384>
 800d17c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d17e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d182:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d186:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d18a:	e696      	b.n	800ceba <_strtod_l+0x72>
 800d18c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d18e:	fb08 2101 	mla	r1, r8, r1, r2
 800d192:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d196:	9209      	str	r2, [sp, #36]	@ 0x24
 800d198:	e7b5      	b.n	800d106 <_strtod_l+0x2be>
 800d19a:	2a6e      	cmp	r2, #110	@ 0x6e
 800d19c:	e7da      	b.n	800d154 <_strtod_l+0x30c>
 800d19e:	498b      	ldr	r1, [pc, #556]	@ (800d3cc <_strtod_l+0x584>)
 800d1a0:	a819      	add	r0, sp, #100	@ 0x64
 800d1a2:	f002 fe45 	bl	800fe30 <__match>
 800d1a6:	2800      	cmp	r0, #0
 800d1a8:	f43f aea2 	beq.w	800cef0 <_strtod_l+0xa8>
 800d1ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d1ae:	4988      	ldr	r1, [pc, #544]	@ (800d3d0 <_strtod_l+0x588>)
 800d1b0:	3b01      	subs	r3, #1
 800d1b2:	a819      	add	r0, sp, #100	@ 0x64
 800d1b4:	9319      	str	r3, [sp, #100]	@ 0x64
 800d1b6:	f002 fe3b 	bl	800fe30 <__match>
 800d1ba:	b910      	cbnz	r0, 800d1c2 <_strtod_l+0x37a>
 800d1bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d1be:	3301      	adds	r3, #1
 800d1c0:	9319      	str	r3, [sp, #100]	@ 0x64
 800d1c2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800d3e0 <_strtod_l+0x598>
 800d1c6:	f04f 0a00 	mov.w	sl, #0
 800d1ca:	e676      	b.n	800ceba <_strtod_l+0x72>
 800d1cc:	4881      	ldr	r0, [pc, #516]	@ (800d3d4 <_strtod_l+0x58c>)
 800d1ce:	f001 fcf3 	bl	800ebb8 <nan>
 800d1d2:	ec5b ab10 	vmov	sl, fp, d0
 800d1d6:	e670      	b.n	800ceba <_strtod_l+0x72>
 800d1d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d1da:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800d1dc:	eba8 0303 	sub.w	r3, r8, r3
 800d1e0:	f1b9 0f00 	cmp.w	r9, #0
 800d1e4:	bf08      	it	eq
 800d1e6:	46a9      	moveq	r9, r5
 800d1e8:	2d10      	cmp	r5, #16
 800d1ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1ec:	462c      	mov	r4, r5
 800d1ee:	bfa8      	it	ge
 800d1f0:	2410      	movge	r4, #16
 800d1f2:	f7f3 f98f 	bl	8000514 <__aeabi_ui2d>
 800d1f6:	2d09      	cmp	r5, #9
 800d1f8:	4682      	mov	sl, r0
 800d1fa:	468b      	mov	fp, r1
 800d1fc:	dc13      	bgt.n	800d226 <_strtod_l+0x3de>
 800d1fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d200:	2b00      	cmp	r3, #0
 800d202:	f43f ae5a 	beq.w	800ceba <_strtod_l+0x72>
 800d206:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d208:	dd78      	ble.n	800d2fc <_strtod_l+0x4b4>
 800d20a:	2b16      	cmp	r3, #22
 800d20c:	dc5f      	bgt.n	800d2ce <_strtod_l+0x486>
 800d20e:	4972      	ldr	r1, [pc, #456]	@ (800d3d8 <_strtod_l+0x590>)
 800d210:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d214:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d218:	4652      	mov	r2, sl
 800d21a:	465b      	mov	r3, fp
 800d21c:	f7f3 f9f4 	bl	8000608 <__aeabi_dmul>
 800d220:	4682      	mov	sl, r0
 800d222:	468b      	mov	fp, r1
 800d224:	e649      	b.n	800ceba <_strtod_l+0x72>
 800d226:	4b6c      	ldr	r3, [pc, #432]	@ (800d3d8 <_strtod_l+0x590>)
 800d228:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d22c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d230:	f7f3 f9ea 	bl	8000608 <__aeabi_dmul>
 800d234:	4682      	mov	sl, r0
 800d236:	4638      	mov	r0, r7
 800d238:	468b      	mov	fp, r1
 800d23a:	f7f3 f96b 	bl	8000514 <__aeabi_ui2d>
 800d23e:	4602      	mov	r2, r0
 800d240:	460b      	mov	r3, r1
 800d242:	4650      	mov	r0, sl
 800d244:	4659      	mov	r1, fp
 800d246:	f7f3 f829 	bl	800029c <__adddf3>
 800d24a:	2d0f      	cmp	r5, #15
 800d24c:	4682      	mov	sl, r0
 800d24e:	468b      	mov	fp, r1
 800d250:	ddd5      	ble.n	800d1fe <_strtod_l+0x3b6>
 800d252:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d254:	1b2c      	subs	r4, r5, r4
 800d256:	441c      	add	r4, r3
 800d258:	2c00      	cmp	r4, #0
 800d25a:	f340 8093 	ble.w	800d384 <_strtod_l+0x53c>
 800d25e:	f014 030f 	ands.w	r3, r4, #15
 800d262:	d00a      	beq.n	800d27a <_strtod_l+0x432>
 800d264:	495c      	ldr	r1, [pc, #368]	@ (800d3d8 <_strtod_l+0x590>)
 800d266:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d26a:	4652      	mov	r2, sl
 800d26c:	465b      	mov	r3, fp
 800d26e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d272:	f7f3 f9c9 	bl	8000608 <__aeabi_dmul>
 800d276:	4682      	mov	sl, r0
 800d278:	468b      	mov	fp, r1
 800d27a:	f034 040f 	bics.w	r4, r4, #15
 800d27e:	d073      	beq.n	800d368 <_strtod_l+0x520>
 800d280:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d284:	dd49      	ble.n	800d31a <_strtod_l+0x4d2>
 800d286:	2400      	movs	r4, #0
 800d288:	46a0      	mov	r8, r4
 800d28a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d28c:	46a1      	mov	r9, r4
 800d28e:	9a05      	ldr	r2, [sp, #20]
 800d290:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800d3e0 <_strtod_l+0x598>
 800d294:	2322      	movs	r3, #34	@ 0x22
 800d296:	6013      	str	r3, [r2, #0]
 800d298:	f04f 0a00 	mov.w	sl, #0
 800d29c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	f43f ae0b 	beq.w	800ceba <_strtod_l+0x72>
 800d2a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d2a6:	9805      	ldr	r0, [sp, #20]
 800d2a8:	f002 ff7a 	bl	80101a0 <_Bfree>
 800d2ac:	9805      	ldr	r0, [sp, #20]
 800d2ae:	4649      	mov	r1, r9
 800d2b0:	f002 ff76 	bl	80101a0 <_Bfree>
 800d2b4:	9805      	ldr	r0, [sp, #20]
 800d2b6:	4641      	mov	r1, r8
 800d2b8:	f002 ff72 	bl	80101a0 <_Bfree>
 800d2bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d2be:	9805      	ldr	r0, [sp, #20]
 800d2c0:	f002 ff6e 	bl	80101a0 <_Bfree>
 800d2c4:	9805      	ldr	r0, [sp, #20]
 800d2c6:	4621      	mov	r1, r4
 800d2c8:	f002 ff6a 	bl	80101a0 <_Bfree>
 800d2cc:	e5f5      	b.n	800ceba <_strtod_l+0x72>
 800d2ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d2d0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d2d4:	4293      	cmp	r3, r2
 800d2d6:	dbbc      	blt.n	800d252 <_strtod_l+0x40a>
 800d2d8:	4c3f      	ldr	r4, [pc, #252]	@ (800d3d8 <_strtod_l+0x590>)
 800d2da:	f1c5 050f 	rsb	r5, r5, #15
 800d2de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d2e2:	4652      	mov	r2, sl
 800d2e4:	465b      	mov	r3, fp
 800d2e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2ea:	f7f3 f98d 	bl	8000608 <__aeabi_dmul>
 800d2ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2f0:	1b5d      	subs	r5, r3, r5
 800d2f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d2f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d2fa:	e78f      	b.n	800d21c <_strtod_l+0x3d4>
 800d2fc:	3316      	adds	r3, #22
 800d2fe:	dba8      	blt.n	800d252 <_strtod_l+0x40a>
 800d300:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d302:	eba3 0808 	sub.w	r8, r3, r8
 800d306:	4b34      	ldr	r3, [pc, #208]	@ (800d3d8 <_strtod_l+0x590>)
 800d308:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d30c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d310:	4650      	mov	r0, sl
 800d312:	4659      	mov	r1, fp
 800d314:	f7f3 faa2 	bl	800085c <__aeabi_ddiv>
 800d318:	e782      	b.n	800d220 <_strtod_l+0x3d8>
 800d31a:	2300      	movs	r3, #0
 800d31c:	4f2f      	ldr	r7, [pc, #188]	@ (800d3dc <_strtod_l+0x594>)
 800d31e:	1124      	asrs	r4, r4, #4
 800d320:	4650      	mov	r0, sl
 800d322:	4659      	mov	r1, fp
 800d324:	461e      	mov	r6, r3
 800d326:	2c01      	cmp	r4, #1
 800d328:	dc21      	bgt.n	800d36e <_strtod_l+0x526>
 800d32a:	b10b      	cbz	r3, 800d330 <_strtod_l+0x4e8>
 800d32c:	4682      	mov	sl, r0
 800d32e:	468b      	mov	fp, r1
 800d330:	492a      	ldr	r1, [pc, #168]	@ (800d3dc <_strtod_l+0x594>)
 800d332:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d336:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d33a:	4652      	mov	r2, sl
 800d33c:	465b      	mov	r3, fp
 800d33e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d342:	f7f3 f961 	bl	8000608 <__aeabi_dmul>
 800d346:	4b26      	ldr	r3, [pc, #152]	@ (800d3e0 <_strtod_l+0x598>)
 800d348:	460a      	mov	r2, r1
 800d34a:	400b      	ands	r3, r1
 800d34c:	4925      	ldr	r1, [pc, #148]	@ (800d3e4 <_strtod_l+0x59c>)
 800d34e:	428b      	cmp	r3, r1
 800d350:	4682      	mov	sl, r0
 800d352:	d898      	bhi.n	800d286 <_strtod_l+0x43e>
 800d354:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d358:	428b      	cmp	r3, r1
 800d35a:	bf86      	itte	hi
 800d35c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800d3e8 <_strtod_l+0x5a0>
 800d360:	f04f 3aff 	movhi.w	sl, #4294967295
 800d364:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d368:	2300      	movs	r3, #0
 800d36a:	9308      	str	r3, [sp, #32]
 800d36c:	e076      	b.n	800d45c <_strtod_l+0x614>
 800d36e:	07e2      	lsls	r2, r4, #31
 800d370:	d504      	bpl.n	800d37c <_strtod_l+0x534>
 800d372:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d376:	f7f3 f947 	bl	8000608 <__aeabi_dmul>
 800d37a:	2301      	movs	r3, #1
 800d37c:	3601      	adds	r6, #1
 800d37e:	1064      	asrs	r4, r4, #1
 800d380:	3708      	adds	r7, #8
 800d382:	e7d0      	b.n	800d326 <_strtod_l+0x4de>
 800d384:	d0f0      	beq.n	800d368 <_strtod_l+0x520>
 800d386:	4264      	negs	r4, r4
 800d388:	f014 020f 	ands.w	r2, r4, #15
 800d38c:	d00a      	beq.n	800d3a4 <_strtod_l+0x55c>
 800d38e:	4b12      	ldr	r3, [pc, #72]	@ (800d3d8 <_strtod_l+0x590>)
 800d390:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d394:	4650      	mov	r0, sl
 800d396:	4659      	mov	r1, fp
 800d398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d39c:	f7f3 fa5e 	bl	800085c <__aeabi_ddiv>
 800d3a0:	4682      	mov	sl, r0
 800d3a2:	468b      	mov	fp, r1
 800d3a4:	1124      	asrs	r4, r4, #4
 800d3a6:	d0df      	beq.n	800d368 <_strtod_l+0x520>
 800d3a8:	2c1f      	cmp	r4, #31
 800d3aa:	dd1f      	ble.n	800d3ec <_strtod_l+0x5a4>
 800d3ac:	2400      	movs	r4, #0
 800d3ae:	46a0      	mov	r8, r4
 800d3b0:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d3b2:	46a1      	mov	r9, r4
 800d3b4:	9a05      	ldr	r2, [sp, #20]
 800d3b6:	2322      	movs	r3, #34	@ 0x22
 800d3b8:	f04f 0a00 	mov.w	sl, #0
 800d3bc:	f04f 0b00 	mov.w	fp, #0
 800d3c0:	6013      	str	r3, [r2, #0]
 800d3c2:	e76b      	b.n	800d29c <_strtod_l+0x454>
 800d3c4:	080118bb 	.word	0x080118bb
 800d3c8:	08011a84 	.word	0x08011a84
 800d3cc:	080118b3 	.word	0x080118b3
 800d3d0:	080118f2 	.word	0x080118f2
 800d3d4:	08011a81 	.word	0x08011a81
 800d3d8:	08011b10 	.word	0x08011b10
 800d3dc:	08011ae8 	.word	0x08011ae8
 800d3e0:	7ff00000 	.word	0x7ff00000
 800d3e4:	7ca00000 	.word	0x7ca00000
 800d3e8:	7fefffff 	.word	0x7fefffff
 800d3ec:	f014 0310 	ands.w	r3, r4, #16
 800d3f0:	bf18      	it	ne
 800d3f2:	236a      	movne	r3, #106	@ 0x6a
 800d3f4:	4ea9      	ldr	r6, [pc, #676]	@ (800d69c <_strtod_l+0x854>)
 800d3f6:	9308      	str	r3, [sp, #32]
 800d3f8:	4650      	mov	r0, sl
 800d3fa:	4659      	mov	r1, fp
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	07e7      	lsls	r7, r4, #31
 800d400:	d504      	bpl.n	800d40c <_strtod_l+0x5c4>
 800d402:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d406:	f7f3 f8ff 	bl	8000608 <__aeabi_dmul>
 800d40a:	2301      	movs	r3, #1
 800d40c:	1064      	asrs	r4, r4, #1
 800d40e:	f106 0608 	add.w	r6, r6, #8
 800d412:	d1f4      	bne.n	800d3fe <_strtod_l+0x5b6>
 800d414:	b10b      	cbz	r3, 800d41a <_strtod_l+0x5d2>
 800d416:	4682      	mov	sl, r0
 800d418:	468b      	mov	fp, r1
 800d41a:	9b08      	ldr	r3, [sp, #32]
 800d41c:	b1b3      	cbz	r3, 800d44c <_strtod_l+0x604>
 800d41e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d422:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d426:	2b00      	cmp	r3, #0
 800d428:	4659      	mov	r1, fp
 800d42a:	dd0f      	ble.n	800d44c <_strtod_l+0x604>
 800d42c:	2b1f      	cmp	r3, #31
 800d42e:	dd56      	ble.n	800d4de <_strtod_l+0x696>
 800d430:	2b34      	cmp	r3, #52	@ 0x34
 800d432:	bfde      	ittt	le
 800d434:	f04f 33ff 	movle.w	r3, #4294967295
 800d438:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d43c:	4093      	lslle	r3, r2
 800d43e:	f04f 0a00 	mov.w	sl, #0
 800d442:	bfcc      	ite	gt
 800d444:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d448:	ea03 0b01 	andle.w	fp, r3, r1
 800d44c:	2200      	movs	r2, #0
 800d44e:	2300      	movs	r3, #0
 800d450:	4650      	mov	r0, sl
 800d452:	4659      	mov	r1, fp
 800d454:	f7f3 fb40 	bl	8000ad8 <__aeabi_dcmpeq>
 800d458:	2800      	cmp	r0, #0
 800d45a:	d1a7      	bne.n	800d3ac <_strtod_l+0x564>
 800d45c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d45e:	9300      	str	r3, [sp, #0]
 800d460:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d462:	9805      	ldr	r0, [sp, #20]
 800d464:	462b      	mov	r3, r5
 800d466:	464a      	mov	r2, r9
 800d468:	f002 ff02 	bl	8010270 <__s2b>
 800d46c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800d46e:	2800      	cmp	r0, #0
 800d470:	f43f af09 	beq.w	800d286 <_strtod_l+0x43e>
 800d474:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d476:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d478:	2a00      	cmp	r2, #0
 800d47a:	eba3 0308 	sub.w	r3, r3, r8
 800d47e:	bfa8      	it	ge
 800d480:	2300      	movge	r3, #0
 800d482:	9312      	str	r3, [sp, #72]	@ 0x48
 800d484:	2400      	movs	r4, #0
 800d486:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d48a:	9316      	str	r3, [sp, #88]	@ 0x58
 800d48c:	46a0      	mov	r8, r4
 800d48e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d490:	9805      	ldr	r0, [sp, #20]
 800d492:	6859      	ldr	r1, [r3, #4]
 800d494:	f002 fe44 	bl	8010120 <_Balloc>
 800d498:	4681      	mov	r9, r0
 800d49a:	2800      	cmp	r0, #0
 800d49c:	f43f aef7 	beq.w	800d28e <_strtod_l+0x446>
 800d4a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d4a2:	691a      	ldr	r2, [r3, #16]
 800d4a4:	3202      	adds	r2, #2
 800d4a6:	f103 010c 	add.w	r1, r3, #12
 800d4aa:	0092      	lsls	r2, r2, #2
 800d4ac:	300c      	adds	r0, #12
 800d4ae:	f001 fb72 	bl	800eb96 <memcpy>
 800d4b2:	ec4b ab10 	vmov	d0, sl, fp
 800d4b6:	9805      	ldr	r0, [sp, #20]
 800d4b8:	aa1c      	add	r2, sp, #112	@ 0x70
 800d4ba:	a91b      	add	r1, sp, #108	@ 0x6c
 800d4bc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d4c0:	f003 fa0a 	bl	80108d8 <__d2b>
 800d4c4:	901a      	str	r0, [sp, #104]	@ 0x68
 800d4c6:	2800      	cmp	r0, #0
 800d4c8:	f43f aee1 	beq.w	800d28e <_strtod_l+0x446>
 800d4cc:	9805      	ldr	r0, [sp, #20]
 800d4ce:	2101      	movs	r1, #1
 800d4d0:	f002 ff64 	bl	801039c <__i2b>
 800d4d4:	4680      	mov	r8, r0
 800d4d6:	b948      	cbnz	r0, 800d4ec <_strtod_l+0x6a4>
 800d4d8:	f04f 0800 	mov.w	r8, #0
 800d4dc:	e6d7      	b.n	800d28e <_strtod_l+0x446>
 800d4de:	f04f 32ff 	mov.w	r2, #4294967295
 800d4e2:	fa02 f303 	lsl.w	r3, r2, r3
 800d4e6:	ea03 0a0a 	and.w	sl, r3, sl
 800d4ea:	e7af      	b.n	800d44c <_strtod_l+0x604>
 800d4ec:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d4ee:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d4f0:	2d00      	cmp	r5, #0
 800d4f2:	bfab      	itete	ge
 800d4f4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d4f6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d4f8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d4fa:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d4fc:	bfac      	ite	ge
 800d4fe:	18ef      	addge	r7, r5, r3
 800d500:	1b5e      	sublt	r6, r3, r5
 800d502:	9b08      	ldr	r3, [sp, #32]
 800d504:	1aed      	subs	r5, r5, r3
 800d506:	4415      	add	r5, r2
 800d508:	4b65      	ldr	r3, [pc, #404]	@ (800d6a0 <_strtod_l+0x858>)
 800d50a:	3d01      	subs	r5, #1
 800d50c:	429d      	cmp	r5, r3
 800d50e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d512:	da50      	bge.n	800d5b6 <_strtod_l+0x76e>
 800d514:	1b5b      	subs	r3, r3, r5
 800d516:	2b1f      	cmp	r3, #31
 800d518:	eba2 0203 	sub.w	r2, r2, r3
 800d51c:	f04f 0101 	mov.w	r1, #1
 800d520:	dc3d      	bgt.n	800d59e <_strtod_l+0x756>
 800d522:	fa01 f303 	lsl.w	r3, r1, r3
 800d526:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d528:	2300      	movs	r3, #0
 800d52a:	9310      	str	r3, [sp, #64]	@ 0x40
 800d52c:	18bd      	adds	r5, r7, r2
 800d52e:	9b08      	ldr	r3, [sp, #32]
 800d530:	42af      	cmp	r7, r5
 800d532:	4416      	add	r6, r2
 800d534:	441e      	add	r6, r3
 800d536:	463b      	mov	r3, r7
 800d538:	bfa8      	it	ge
 800d53a:	462b      	movge	r3, r5
 800d53c:	42b3      	cmp	r3, r6
 800d53e:	bfa8      	it	ge
 800d540:	4633      	movge	r3, r6
 800d542:	2b00      	cmp	r3, #0
 800d544:	bfc2      	ittt	gt
 800d546:	1aed      	subgt	r5, r5, r3
 800d548:	1af6      	subgt	r6, r6, r3
 800d54a:	1aff      	subgt	r7, r7, r3
 800d54c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d54e:	2b00      	cmp	r3, #0
 800d550:	dd16      	ble.n	800d580 <_strtod_l+0x738>
 800d552:	4641      	mov	r1, r8
 800d554:	9805      	ldr	r0, [sp, #20]
 800d556:	461a      	mov	r2, r3
 800d558:	f002 ffd8 	bl	801050c <__pow5mult>
 800d55c:	4680      	mov	r8, r0
 800d55e:	2800      	cmp	r0, #0
 800d560:	d0ba      	beq.n	800d4d8 <_strtod_l+0x690>
 800d562:	4601      	mov	r1, r0
 800d564:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d566:	9805      	ldr	r0, [sp, #20]
 800d568:	f002 ff2e 	bl	80103c8 <__multiply>
 800d56c:	900a      	str	r0, [sp, #40]	@ 0x28
 800d56e:	2800      	cmp	r0, #0
 800d570:	f43f ae8d 	beq.w	800d28e <_strtod_l+0x446>
 800d574:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d576:	9805      	ldr	r0, [sp, #20]
 800d578:	f002 fe12 	bl	80101a0 <_Bfree>
 800d57c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d57e:	931a      	str	r3, [sp, #104]	@ 0x68
 800d580:	2d00      	cmp	r5, #0
 800d582:	dc1d      	bgt.n	800d5c0 <_strtod_l+0x778>
 800d584:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d586:	2b00      	cmp	r3, #0
 800d588:	dd23      	ble.n	800d5d2 <_strtod_l+0x78a>
 800d58a:	4649      	mov	r1, r9
 800d58c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d58e:	9805      	ldr	r0, [sp, #20]
 800d590:	f002 ffbc 	bl	801050c <__pow5mult>
 800d594:	4681      	mov	r9, r0
 800d596:	b9e0      	cbnz	r0, 800d5d2 <_strtod_l+0x78a>
 800d598:	f04f 0900 	mov.w	r9, #0
 800d59c:	e677      	b.n	800d28e <_strtod_l+0x446>
 800d59e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d5a2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d5a6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d5aa:	35e2      	adds	r5, #226	@ 0xe2
 800d5ac:	fa01 f305 	lsl.w	r3, r1, r5
 800d5b0:	9310      	str	r3, [sp, #64]	@ 0x40
 800d5b2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d5b4:	e7ba      	b.n	800d52c <_strtod_l+0x6e4>
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	9310      	str	r3, [sp, #64]	@ 0x40
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d5be:	e7b5      	b.n	800d52c <_strtod_l+0x6e4>
 800d5c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d5c2:	9805      	ldr	r0, [sp, #20]
 800d5c4:	462a      	mov	r2, r5
 800d5c6:	f002 fffb 	bl	80105c0 <__lshift>
 800d5ca:	901a      	str	r0, [sp, #104]	@ 0x68
 800d5cc:	2800      	cmp	r0, #0
 800d5ce:	d1d9      	bne.n	800d584 <_strtod_l+0x73c>
 800d5d0:	e65d      	b.n	800d28e <_strtod_l+0x446>
 800d5d2:	2e00      	cmp	r6, #0
 800d5d4:	dd07      	ble.n	800d5e6 <_strtod_l+0x79e>
 800d5d6:	4649      	mov	r1, r9
 800d5d8:	9805      	ldr	r0, [sp, #20]
 800d5da:	4632      	mov	r2, r6
 800d5dc:	f002 fff0 	bl	80105c0 <__lshift>
 800d5e0:	4681      	mov	r9, r0
 800d5e2:	2800      	cmp	r0, #0
 800d5e4:	d0d8      	beq.n	800d598 <_strtod_l+0x750>
 800d5e6:	2f00      	cmp	r7, #0
 800d5e8:	dd08      	ble.n	800d5fc <_strtod_l+0x7b4>
 800d5ea:	4641      	mov	r1, r8
 800d5ec:	9805      	ldr	r0, [sp, #20]
 800d5ee:	463a      	mov	r2, r7
 800d5f0:	f002 ffe6 	bl	80105c0 <__lshift>
 800d5f4:	4680      	mov	r8, r0
 800d5f6:	2800      	cmp	r0, #0
 800d5f8:	f43f ae49 	beq.w	800d28e <_strtod_l+0x446>
 800d5fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d5fe:	9805      	ldr	r0, [sp, #20]
 800d600:	464a      	mov	r2, r9
 800d602:	f003 f865 	bl	80106d0 <__mdiff>
 800d606:	4604      	mov	r4, r0
 800d608:	2800      	cmp	r0, #0
 800d60a:	f43f ae40 	beq.w	800d28e <_strtod_l+0x446>
 800d60e:	68c3      	ldr	r3, [r0, #12]
 800d610:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d612:	2300      	movs	r3, #0
 800d614:	60c3      	str	r3, [r0, #12]
 800d616:	4641      	mov	r1, r8
 800d618:	f003 f83e 	bl	8010698 <__mcmp>
 800d61c:	2800      	cmp	r0, #0
 800d61e:	da45      	bge.n	800d6ac <_strtod_l+0x864>
 800d620:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d622:	ea53 030a 	orrs.w	r3, r3, sl
 800d626:	d16b      	bne.n	800d700 <_strtod_l+0x8b8>
 800d628:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d167      	bne.n	800d700 <_strtod_l+0x8b8>
 800d630:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d634:	0d1b      	lsrs	r3, r3, #20
 800d636:	051b      	lsls	r3, r3, #20
 800d638:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d63c:	d960      	bls.n	800d700 <_strtod_l+0x8b8>
 800d63e:	6963      	ldr	r3, [r4, #20]
 800d640:	b913      	cbnz	r3, 800d648 <_strtod_l+0x800>
 800d642:	6923      	ldr	r3, [r4, #16]
 800d644:	2b01      	cmp	r3, #1
 800d646:	dd5b      	ble.n	800d700 <_strtod_l+0x8b8>
 800d648:	4621      	mov	r1, r4
 800d64a:	2201      	movs	r2, #1
 800d64c:	9805      	ldr	r0, [sp, #20]
 800d64e:	f002 ffb7 	bl	80105c0 <__lshift>
 800d652:	4641      	mov	r1, r8
 800d654:	4604      	mov	r4, r0
 800d656:	f003 f81f 	bl	8010698 <__mcmp>
 800d65a:	2800      	cmp	r0, #0
 800d65c:	dd50      	ble.n	800d700 <_strtod_l+0x8b8>
 800d65e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d662:	9a08      	ldr	r2, [sp, #32]
 800d664:	0d1b      	lsrs	r3, r3, #20
 800d666:	051b      	lsls	r3, r3, #20
 800d668:	2a00      	cmp	r2, #0
 800d66a:	d06a      	beq.n	800d742 <_strtod_l+0x8fa>
 800d66c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d670:	d867      	bhi.n	800d742 <_strtod_l+0x8fa>
 800d672:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d676:	f67f ae9d 	bls.w	800d3b4 <_strtod_l+0x56c>
 800d67a:	4b0a      	ldr	r3, [pc, #40]	@ (800d6a4 <_strtod_l+0x85c>)
 800d67c:	4650      	mov	r0, sl
 800d67e:	4659      	mov	r1, fp
 800d680:	2200      	movs	r2, #0
 800d682:	f7f2 ffc1 	bl	8000608 <__aeabi_dmul>
 800d686:	4b08      	ldr	r3, [pc, #32]	@ (800d6a8 <_strtod_l+0x860>)
 800d688:	400b      	ands	r3, r1
 800d68a:	4682      	mov	sl, r0
 800d68c:	468b      	mov	fp, r1
 800d68e:	2b00      	cmp	r3, #0
 800d690:	f47f ae08 	bne.w	800d2a4 <_strtod_l+0x45c>
 800d694:	9a05      	ldr	r2, [sp, #20]
 800d696:	2322      	movs	r3, #34	@ 0x22
 800d698:	6013      	str	r3, [r2, #0]
 800d69a:	e603      	b.n	800d2a4 <_strtod_l+0x45c>
 800d69c:	08011ab0 	.word	0x08011ab0
 800d6a0:	fffffc02 	.word	0xfffffc02
 800d6a4:	39500000 	.word	0x39500000
 800d6a8:	7ff00000 	.word	0x7ff00000
 800d6ac:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800d6b0:	d165      	bne.n	800d77e <_strtod_l+0x936>
 800d6b2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d6b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d6b8:	b35a      	cbz	r2, 800d712 <_strtod_l+0x8ca>
 800d6ba:	4a9f      	ldr	r2, [pc, #636]	@ (800d938 <_strtod_l+0xaf0>)
 800d6bc:	4293      	cmp	r3, r2
 800d6be:	d12b      	bne.n	800d718 <_strtod_l+0x8d0>
 800d6c0:	9b08      	ldr	r3, [sp, #32]
 800d6c2:	4651      	mov	r1, sl
 800d6c4:	b303      	cbz	r3, 800d708 <_strtod_l+0x8c0>
 800d6c6:	4b9d      	ldr	r3, [pc, #628]	@ (800d93c <_strtod_l+0xaf4>)
 800d6c8:	465a      	mov	r2, fp
 800d6ca:	4013      	ands	r3, r2
 800d6cc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d6d0:	f04f 32ff 	mov.w	r2, #4294967295
 800d6d4:	d81b      	bhi.n	800d70e <_strtod_l+0x8c6>
 800d6d6:	0d1b      	lsrs	r3, r3, #20
 800d6d8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d6dc:	fa02 f303 	lsl.w	r3, r2, r3
 800d6e0:	4299      	cmp	r1, r3
 800d6e2:	d119      	bne.n	800d718 <_strtod_l+0x8d0>
 800d6e4:	4b96      	ldr	r3, [pc, #600]	@ (800d940 <_strtod_l+0xaf8>)
 800d6e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d6e8:	429a      	cmp	r2, r3
 800d6ea:	d102      	bne.n	800d6f2 <_strtod_l+0x8aa>
 800d6ec:	3101      	adds	r1, #1
 800d6ee:	f43f adce 	beq.w	800d28e <_strtod_l+0x446>
 800d6f2:	4b92      	ldr	r3, [pc, #584]	@ (800d93c <_strtod_l+0xaf4>)
 800d6f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d6f6:	401a      	ands	r2, r3
 800d6f8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d6fc:	f04f 0a00 	mov.w	sl, #0
 800d700:	9b08      	ldr	r3, [sp, #32]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d1b9      	bne.n	800d67a <_strtod_l+0x832>
 800d706:	e5cd      	b.n	800d2a4 <_strtod_l+0x45c>
 800d708:	f04f 33ff 	mov.w	r3, #4294967295
 800d70c:	e7e8      	b.n	800d6e0 <_strtod_l+0x898>
 800d70e:	4613      	mov	r3, r2
 800d710:	e7e6      	b.n	800d6e0 <_strtod_l+0x898>
 800d712:	ea53 030a 	orrs.w	r3, r3, sl
 800d716:	d0a2      	beq.n	800d65e <_strtod_l+0x816>
 800d718:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d71a:	b1db      	cbz	r3, 800d754 <_strtod_l+0x90c>
 800d71c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d71e:	4213      	tst	r3, r2
 800d720:	d0ee      	beq.n	800d700 <_strtod_l+0x8b8>
 800d722:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d724:	9a08      	ldr	r2, [sp, #32]
 800d726:	4650      	mov	r0, sl
 800d728:	4659      	mov	r1, fp
 800d72a:	b1bb      	cbz	r3, 800d75c <_strtod_l+0x914>
 800d72c:	f7ff fb6b 	bl	800ce06 <sulp>
 800d730:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d734:	ec53 2b10 	vmov	r2, r3, d0
 800d738:	f7f2 fdb0 	bl	800029c <__adddf3>
 800d73c:	4682      	mov	sl, r0
 800d73e:	468b      	mov	fp, r1
 800d740:	e7de      	b.n	800d700 <_strtod_l+0x8b8>
 800d742:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d746:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d74a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d74e:	f04f 3aff 	mov.w	sl, #4294967295
 800d752:	e7d5      	b.n	800d700 <_strtod_l+0x8b8>
 800d754:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d756:	ea13 0f0a 	tst.w	r3, sl
 800d75a:	e7e1      	b.n	800d720 <_strtod_l+0x8d8>
 800d75c:	f7ff fb53 	bl	800ce06 <sulp>
 800d760:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d764:	ec53 2b10 	vmov	r2, r3, d0
 800d768:	f7f2 fd96 	bl	8000298 <__aeabi_dsub>
 800d76c:	2200      	movs	r2, #0
 800d76e:	2300      	movs	r3, #0
 800d770:	4682      	mov	sl, r0
 800d772:	468b      	mov	fp, r1
 800d774:	f7f3 f9b0 	bl	8000ad8 <__aeabi_dcmpeq>
 800d778:	2800      	cmp	r0, #0
 800d77a:	d0c1      	beq.n	800d700 <_strtod_l+0x8b8>
 800d77c:	e61a      	b.n	800d3b4 <_strtod_l+0x56c>
 800d77e:	4641      	mov	r1, r8
 800d780:	4620      	mov	r0, r4
 800d782:	f003 f901 	bl	8010988 <__ratio>
 800d786:	ec57 6b10 	vmov	r6, r7, d0
 800d78a:	2200      	movs	r2, #0
 800d78c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d790:	4630      	mov	r0, r6
 800d792:	4639      	mov	r1, r7
 800d794:	f7f3 f9b4 	bl	8000b00 <__aeabi_dcmple>
 800d798:	2800      	cmp	r0, #0
 800d79a:	d06f      	beq.n	800d87c <_strtod_l+0xa34>
 800d79c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d17a      	bne.n	800d898 <_strtod_l+0xa50>
 800d7a2:	f1ba 0f00 	cmp.w	sl, #0
 800d7a6:	d158      	bne.n	800d85a <_strtod_l+0xa12>
 800d7a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d7aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d15a      	bne.n	800d868 <_strtod_l+0xa20>
 800d7b2:	4b64      	ldr	r3, [pc, #400]	@ (800d944 <_strtod_l+0xafc>)
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	4630      	mov	r0, r6
 800d7b8:	4639      	mov	r1, r7
 800d7ba:	f7f3 f997 	bl	8000aec <__aeabi_dcmplt>
 800d7be:	2800      	cmp	r0, #0
 800d7c0:	d159      	bne.n	800d876 <_strtod_l+0xa2e>
 800d7c2:	4630      	mov	r0, r6
 800d7c4:	4639      	mov	r1, r7
 800d7c6:	4b60      	ldr	r3, [pc, #384]	@ (800d948 <_strtod_l+0xb00>)
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	f7f2 ff1d 	bl	8000608 <__aeabi_dmul>
 800d7ce:	4606      	mov	r6, r0
 800d7d0:	460f      	mov	r7, r1
 800d7d2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d7d6:	9606      	str	r6, [sp, #24]
 800d7d8:	9307      	str	r3, [sp, #28]
 800d7da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d7de:	4d57      	ldr	r5, [pc, #348]	@ (800d93c <_strtod_l+0xaf4>)
 800d7e0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d7e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d7e6:	401d      	ands	r5, r3
 800d7e8:	4b58      	ldr	r3, [pc, #352]	@ (800d94c <_strtod_l+0xb04>)
 800d7ea:	429d      	cmp	r5, r3
 800d7ec:	f040 80b2 	bne.w	800d954 <_strtod_l+0xb0c>
 800d7f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d7f2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d7f6:	ec4b ab10 	vmov	d0, sl, fp
 800d7fa:	f002 fffd 	bl	80107f8 <__ulp>
 800d7fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d802:	ec51 0b10 	vmov	r0, r1, d0
 800d806:	f7f2 feff 	bl	8000608 <__aeabi_dmul>
 800d80a:	4652      	mov	r2, sl
 800d80c:	465b      	mov	r3, fp
 800d80e:	f7f2 fd45 	bl	800029c <__adddf3>
 800d812:	460b      	mov	r3, r1
 800d814:	4949      	ldr	r1, [pc, #292]	@ (800d93c <_strtod_l+0xaf4>)
 800d816:	4a4e      	ldr	r2, [pc, #312]	@ (800d950 <_strtod_l+0xb08>)
 800d818:	4019      	ands	r1, r3
 800d81a:	4291      	cmp	r1, r2
 800d81c:	4682      	mov	sl, r0
 800d81e:	d942      	bls.n	800d8a6 <_strtod_l+0xa5e>
 800d820:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d822:	4b47      	ldr	r3, [pc, #284]	@ (800d940 <_strtod_l+0xaf8>)
 800d824:	429a      	cmp	r2, r3
 800d826:	d103      	bne.n	800d830 <_strtod_l+0x9e8>
 800d828:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d82a:	3301      	adds	r3, #1
 800d82c:	f43f ad2f 	beq.w	800d28e <_strtod_l+0x446>
 800d830:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d940 <_strtod_l+0xaf8>
 800d834:	f04f 3aff 	mov.w	sl, #4294967295
 800d838:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d83a:	9805      	ldr	r0, [sp, #20]
 800d83c:	f002 fcb0 	bl	80101a0 <_Bfree>
 800d840:	9805      	ldr	r0, [sp, #20]
 800d842:	4649      	mov	r1, r9
 800d844:	f002 fcac 	bl	80101a0 <_Bfree>
 800d848:	9805      	ldr	r0, [sp, #20]
 800d84a:	4641      	mov	r1, r8
 800d84c:	f002 fca8 	bl	80101a0 <_Bfree>
 800d850:	9805      	ldr	r0, [sp, #20]
 800d852:	4621      	mov	r1, r4
 800d854:	f002 fca4 	bl	80101a0 <_Bfree>
 800d858:	e619      	b.n	800d48e <_strtod_l+0x646>
 800d85a:	f1ba 0f01 	cmp.w	sl, #1
 800d85e:	d103      	bne.n	800d868 <_strtod_l+0xa20>
 800d860:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d862:	2b00      	cmp	r3, #0
 800d864:	f43f ada6 	beq.w	800d3b4 <_strtod_l+0x56c>
 800d868:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d918 <_strtod_l+0xad0>
 800d86c:	4f35      	ldr	r7, [pc, #212]	@ (800d944 <_strtod_l+0xafc>)
 800d86e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d872:	2600      	movs	r6, #0
 800d874:	e7b1      	b.n	800d7da <_strtod_l+0x992>
 800d876:	4f34      	ldr	r7, [pc, #208]	@ (800d948 <_strtod_l+0xb00>)
 800d878:	2600      	movs	r6, #0
 800d87a:	e7aa      	b.n	800d7d2 <_strtod_l+0x98a>
 800d87c:	4b32      	ldr	r3, [pc, #200]	@ (800d948 <_strtod_l+0xb00>)
 800d87e:	4630      	mov	r0, r6
 800d880:	4639      	mov	r1, r7
 800d882:	2200      	movs	r2, #0
 800d884:	f7f2 fec0 	bl	8000608 <__aeabi_dmul>
 800d888:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d88a:	4606      	mov	r6, r0
 800d88c:	460f      	mov	r7, r1
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d09f      	beq.n	800d7d2 <_strtod_l+0x98a>
 800d892:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d896:	e7a0      	b.n	800d7da <_strtod_l+0x992>
 800d898:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d920 <_strtod_l+0xad8>
 800d89c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d8a0:	ec57 6b17 	vmov	r6, r7, d7
 800d8a4:	e799      	b.n	800d7da <_strtod_l+0x992>
 800d8a6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d8aa:	9b08      	ldr	r3, [sp, #32]
 800d8ac:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d1c1      	bne.n	800d838 <_strtod_l+0x9f0>
 800d8b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d8b8:	0d1b      	lsrs	r3, r3, #20
 800d8ba:	051b      	lsls	r3, r3, #20
 800d8bc:	429d      	cmp	r5, r3
 800d8be:	d1bb      	bne.n	800d838 <_strtod_l+0x9f0>
 800d8c0:	4630      	mov	r0, r6
 800d8c2:	4639      	mov	r1, r7
 800d8c4:	f7f3 fa00 	bl	8000cc8 <__aeabi_d2lz>
 800d8c8:	f7f2 fe70 	bl	80005ac <__aeabi_l2d>
 800d8cc:	4602      	mov	r2, r0
 800d8ce:	460b      	mov	r3, r1
 800d8d0:	4630      	mov	r0, r6
 800d8d2:	4639      	mov	r1, r7
 800d8d4:	f7f2 fce0 	bl	8000298 <__aeabi_dsub>
 800d8d8:	460b      	mov	r3, r1
 800d8da:	4602      	mov	r2, r0
 800d8dc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d8e0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d8e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d8e6:	ea46 060a 	orr.w	r6, r6, sl
 800d8ea:	431e      	orrs	r6, r3
 800d8ec:	d06f      	beq.n	800d9ce <_strtod_l+0xb86>
 800d8ee:	a30e      	add	r3, pc, #56	@ (adr r3, 800d928 <_strtod_l+0xae0>)
 800d8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f4:	f7f3 f8fa 	bl	8000aec <__aeabi_dcmplt>
 800d8f8:	2800      	cmp	r0, #0
 800d8fa:	f47f acd3 	bne.w	800d2a4 <_strtod_l+0x45c>
 800d8fe:	a30c      	add	r3, pc, #48	@ (adr r3, 800d930 <_strtod_l+0xae8>)
 800d900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d904:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d908:	f7f3 f90e 	bl	8000b28 <__aeabi_dcmpgt>
 800d90c:	2800      	cmp	r0, #0
 800d90e:	d093      	beq.n	800d838 <_strtod_l+0x9f0>
 800d910:	e4c8      	b.n	800d2a4 <_strtod_l+0x45c>
 800d912:	bf00      	nop
 800d914:	f3af 8000 	nop.w
 800d918:	00000000 	.word	0x00000000
 800d91c:	bff00000 	.word	0xbff00000
 800d920:	00000000 	.word	0x00000000
 800d924:	3ff00000 	.word	0x3ff00000
 800d928:	94a03595 	.word	0x94a03595
 800d92c:	3fdfffff 	.word	0x3fdfffff
 800d930:	35afe535 	.word	0x35afe535
 800d934:	3fe00000 	.word	0x3fe00000
 800d938:	000fffff 	.word	0x000fffff
 800d93c:	7ff00000 	.word	0x7ff00000
 800d940:	7fefffff 	.word	0x7fefffff
 800d944:	3ff00000 	.word	0x3ff00000
 800d948:	3fe00000 	.word	0x3fe00000
 800d94c:	7fe00000 	.word	0x7fe00000
 800d950:	7c9fffff 	.word	0x7c9fffff
 800d954:	9b08      	ldr	r3, [sp, #32]
 800d956:	b323      	cbz	r3, 800d9a2 <_strtod_l+0xb5a>
 800d958:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d95c:	d821      	bhi.n	800d9a2 <_strtod_l+0xb5a>
 800d95e:	a328      	add	r3, pc, #160	@ (adr r3, 800da00 <_strtod_l+0xbb8>)
 800d960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d964:	4630      	mov	r0, r6
 800d966:	4639      	mov	r1, r7
 800d968:	f7f3 f8ca 	bl	8000b00 <__aeabi_dcmple>
 800d96c:	b1a0      	cbz	r0, 800d998 <_strtod_l+0xb50>
 800d96e:	4639      	mov	r1, r7
 800d970:	4630      	mov	r0, r6
 800d972:	f7f3 f921 	bl	8000bb8 <__aeabi_d2uiz>
 800d976:	2801      	cmp	r0, #1
 800d978:	bf38      	it	cc
 800d97a:	2001      	movcc	r0, #1
 800d97c:	f7f2 fdca 	bl	8000514 <__aeabi_ui2d>
 800d980:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d982:	4606      	mov	r6, r0
 800d984:	460f      	mov	r7, r1
 800d986:	b9fb      	cbnz	r3, 800d9c8 <_strtod_l+0xb80>
 800d988:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d98c:	9014      	str	r0, [sp, #80]	@ 0x50
 800d98e:	9315      	str	r3, [sp, #84]	@ 0x54
 800d990:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d994:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d998:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d99a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d99e:	1b5b      	subs	r3, r3, r5
 800d9a0:	9311      	str	r3, [sp, #68]	@ 0x44
 800d9a2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d9a6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d9aa:	f002 ff25 	bl	80107f8 <__ulp>
 800d9ae:	4650      	mov	r0, sl
 800d9b0:	ec53 2b10 	vmov	r2, r3, d0
 800d9b4:	4659      	mov	r1, fp
 800d9b6:	f7f2 fe27 	bl	8000608 <__aeabi_dmul>
 800d9ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d9be:	f7f2 fc6d 	bl	800029c <__adddf3>
 800d9c2:	4682      	mov	sl, r0
 800d9c4:	468b      	mov	fp, r1
 800d9c6:	e770      	b.n	800d8aa <_strtod_l+0xa62>
 800d9c8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d9cc:	e7e0      	b.n	800d990 <_strtod_l+0xb48>
 800d9ce:	a30e      	add	r3, pc, #56	@ (adr r3, 800da08 <_strtod_l+0xbc0>)
 800d9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9d4:	f7f3 f88a 	bl	8000aec <__aeabi_dcmplt>
 800d9d8:	e798      	b.n	800d90c <_strtod_l+0xac4>
 800d9da:	2300      	movs	r3, #0
 800d9dc:	930e      	str	r3, [sp, #56]	@ 0x38
 800d9de:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d9e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d9e2:	6013      	str	r3, [r2, #0]
 800d9e4:	f7ff ba6d 	b.w	800cec2 <_strtod_l+0x7a>
 800d9e8:	2a65      	cmp	r2, #101	@ 0x65
 800d9ea:	f43f ab68 	beq.w	800d0be <_strtod_l+0x276>
 800d9ee:	2a45      	cmp	r2, #69	@ 0x45
 800d9f0:	f43f ab65 	beq.w	800d0be <_strtod_l+0x276>
 800d9f4:	2301      	movs	r3, #1
 800d9f6:	f7ff bba0 	b.w	800d13a <_strtod_l+0x2f2>
 800d9fa:	bf00      	nop
 800d9fc:	f3af 8000 	nop.w
 800da00:	ffc00000 	.word	0xffc00000
 800da04:	41dfffff 	.word	0x41dfffff
 800da08:	94a03595 	.word	0x94a03595
 800da0c:	3fcfffff 	.word	0x3fcfffff

0800da10 <_strtod_r>:
 800da10:	4b01      	ldr	r3, [pc, #4]	@ (800da18 <_strtod_r+0x8>)
 800da12:	f7ff ba19 	b.w	800ce48 <_strtod_l>
 800da16:	bf00      	nop
 800da18:	200000fc 	.word	0x200000fc

0800da1c <strtod>:
 800da1c:	460a      	mov	r2, r1
 800da1e:	4601      	mov	r1, r0
 800da20:	4802      	ldr	r0, [pc, #8]	@ (800da2c <strtod+0x10>)
 800da22:	4b03      	ldr	r3, [pc, #12]	@ (800da30 <strtod+0x14>)
 800da24:	6800      	ldr	r0, [r0, #0]
 800da26:	f7ff ba0f 	b.w	800ce48 <_strtod_l>
 800da2a:	bf00      	nop
 800da2c:	20000268 	.word	0x20000268
 800da30:	200000fc 	.word	0x200000fc

0800da34 <__cvt>:
 800da34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da38:	ec57 6b10 	vmov	r6, r7, d0
 800da3c:	2f00      	cmp	r7, #0
 800da3e:	460c      	mov	r4, r1
 800da40:	4619      	mov	r1, r3
 800da42:	463b      	mov	r3, r7
 800da44:	bfbb      	ittet	lt
 800da46:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800da4a:	461f      	movlt	r7, r3
 800da4c:	2300      	movge	r3, #0
 800da4e:	232d      	movlt	r3, #45	@ 0x2d
 800da50:	700b      	strb	r3, [r1, #0]
 800da52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800da54:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800da58:	4691      	mov	r9, r2
 800da5a:	f023 0820 	bic.w	r8, r3, #32
 800da5e:	bfbc      	itt	lt
 800da60:	4632      	movlt	r2, r6
 800da62:	4616      	movlt	r6, r2
 800da64:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800da68:	d005      	beq.n	800da76 <__cvt+0x42>
 800da6a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800da6e:	d100      	bne.n	800da72 <__cvt+0x3e>
 800da70:	3401      	adds	r4, #1
 800da72:	2102      	movs	r1, #2
 800da74:	e000      	b.n	800da78 <__cvt+0x44>
 800da76:	2103      	movs	r1, #3
 800da78:	ab03      	add	r3, sp, #12
 800da7a:	9301      	str	r3, [sp, #4]
 800da7c:	ab02      	add	r3, sp, #8
 800da7e:	9300      	str	r3, [sp, #0]
 800da80:	ec47 6b10 	vmov	d0, r6, r7
 800da84:	4653      	mov	r3, sl
 800da86:	4622      	mov	r2, r4
 800da88:	f001 f92e 	bl	800ece8 <_dtoa_r>
 800da8c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800da90:	4605      	mov	r5, r0
 800da92:	d119      	bne.n	800dac8 <__cvt+0x94>
 800da94:	f019 0f01 	tst.w	r9, #1
 800da98:	d00e      	beq.n	800dab8 <__cvt+0x84>
 800da9a:	eb00 0904 	add.w	r9, r0, r4
 800da9e:	2200      	movs	r2, #0
 800daa0:	2300      	movs	r3, #0
 800daa2:	4630      	mov	r0, r6
 800daa4:	4639      	mov	r1, r7
 800daa6:	f7f3 f817 	bl	8000ad8 <__aeabi_dcmpeq>
 800daaa:	b108      	cbz	r0, 800dab0 <__cvt+0x7c>
 800daac:	f8cd 900c 	str.w	r9, [sp, #12]
 800dab0:	2230      	movs	r2, #48	@ 0x30
 800dab2:	9b03      	ldr	r3, [sp, #12]
 800dab4:	454b      	cmp	r3, r9
 800dab6:	d31e      	bcc.n	800daf6 <__cvt+0xc2>
 800dab8:	9b03      	ldr	r3, [sp, #12]
 800daba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dabc:	1b5b      	subs	r3, r3, r5
 800dabe:	4628      	mov	r0, r5
 800dac0:	6013      	str	r3, [r2, #0]
 800dac2:	b004      	add	sp, #16
 800dac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dac8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800dacc:	eb00 0904 	add.w	r9, r0, r4
 800dad0:	d1e5      	bne.n	800da9e <__cvt+0x6a>
 800dad2:	7803      	ldrb	r3, [r0, #0]
 800dad4:	2b30      	cmp	r3, #48	@ 0x30
 800dad6:	d10a      	bne.n	800daee <__cvt+0xba>
 800dad8:	2200      	movs	r2, #0
 800dada:	2300      	movs	r3, #0
 800dadc:	4630      	mov	r0, r6
 800dade:	4639      	mov	r1, r7
 800dae0:	f7f2 fffa 	bl	8000ad8 <__aeabi_dcmpeq>
 800dae4:	b918      	cbnz	r0, 800daee <__cvt+0xba>
 800dae6:	f1c4 0401 	rsb	r4, r4, #1
 800daea:	f8ca 4000 	str.w	r4, [sl]
 800daee:	f8da 3000 	ldr.w	r3, [sl]
 800daf2:	4499      	add	r9, r3
 800daf4:	e7d3      	b.n	800da9e <__cvt+0x6a>
 800daf6:	1c59      	adds	r1, r3, #1
 800daf8:	9103      	str	r1, [sp, #12]
 800dafa:	701a      	strb	r2, [r3, #0]
 800dafc:	e7d9      	b.n	800dab2 <__cvt+0x7e>

0800dafe <__exponent>:
 800dafe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800db00:	2900      	cmp	r1, #0
 800db02:	bfba      	itte	lt
 800db04:	4249      	neglt	r1, r1
 800db06:	232d      	movlt	r3, #45	@ 0x2d
 800db08:	232b      	movge	r3, #43	@ 0x2b
 800db0a:	2909      	cmp	r1, #9
 800db0c:	7002      	strb	r2, [r0, #0]
 800db0e:	7043      	strb	r3, [r0, #1]
 800db10:	dd29      	ble.n	800db66 <__exponent+0x68>
 800db12:	f10d 0307 	add.w	r3, sp, #7
 800db16:	461d      	mov	r5, r3
 800db18:	270a      	movs	r7, #10
 800db1a:	461a      	mov	r2, r3
 800db1c:	fbb1 f6f7 	udiv	r6, r1, r7
 800db20:	fb07 1416 	mls	r4, r7, r6, r1
 800db24:	3430      	adds	r4, #48	@ 0x30
 800db26:	f802 4c01 	strb.w	r4, [r2, #-1]
 800db2a:	460c      	mov	r4, r1
 800db2c:	2c63      	cmp	r4, #99	@ 0x63
 800db2e:	f103 33ff 	add.w	r3, r3, #4294967295
 800db32:	4631      	mov	r1, r6
 800db34:	dcf1      	bgt.n	800db1a <__exponent+0x1c>
 800db36:	3130      	adds	r1, #48	@ 0x30
 800db38:	1e94      	subs	r4, r2, #2
 800db3a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800db3e:	1c41      	adds	r1, r0, #1
 800db40:	4623      	mov	r3, r4
 800db42:	42ab      	cmp	r3, r5
 800db44:	d30a      	bcc.n	800db5c <__exponent+0x5e>
 800db46:	f10d 0309 	add.w	r3, sp, #9
 800db4a:	1a9b      	subs	r3, r3, r2
 800db4c:	42ac      	cmp	r4, r5
 800db4e:	bf88      	it	hi
 800db50:	2300      	movhi	r3, #0
 800db52:	3302      	adds	r3, #2
 800db54:	4403      	add	r3, r0
 800db56:	1a18      	subs	r0, r3, r0
 800db58:	b003      	add	sp, #12
 800db5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db5c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800db60:	f801 6f01 	strb.w	r6, [r1, #1]!
 800db64:	e7ed      	b.n	800db42 <__exponent+0x44>
 800db66:	2330      	movs	r3, #48	@ 0x30
 800db68:	3130      	adds	r1, #48	@ 0x30
 800db6a:	7083      	strb	r3, [r0, #2]
 800db6c:	70c1      	strb	r1, [r0, #3]
 800db6e:	1d03      	adds	r3, r0, #4
 800db70:	e7f1      	b.n	800db56 <__exponent+0x58>
	...

0800db74 <_printf_float>:
 800db74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db78:	b08d      	sub	sp, #52	@ 0x34
 800db7a:	460c      	mov	r4, r1
 800db7c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800db80:	4616      	mov	r6, r2
 800db82:	461f      	mov	r7, r3
 800db84:	4605      	mov	r5, r0
 800db86:	f000 ff31 	bl	800e9ec <_localeconv_r>
 800db8a:	6803      	ldr	r3, [r0, #0]
 800db8c:	9304      	str	r3, [sp, #16]
 800db8e:	4618      	mov	r0, r3
 800db90:	f7f2 fb76 	bl	8000280 <strlen>
 800db94:	2300      	movs	r3, #0
 800db96:	930a      	str	r3, [sp, #40]	@ 0x28
 800db98:	f8d8 3000 	ldr.w	r3, [r8]
 800db9c:	9005      	str	r0, [sp, #20]
 800db9e:	3307      	adds	r3, #7
 800dba0:	f023 0307 	bic.w	r3, r3, #7
 800dba4:	f103 0208 	add.w	r2, r3, #8
 800dba8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800dbac:	f8d4 b000 	ldr.w	fp, [r4]
 800dbb0:	f8c8 2000 	str.w	r2, [r8]
 800dbb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dbb8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800dbbc:	9307      	str	r3, [sp, #28]
 800dbbe:	f8cd 8018 	str.w	r8, [sp, #24]
 800dbc2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800dbc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dbca:	4b9c      	ldr	r3, [pc, #624]	@ (800de3c <_printf_float+0x2c8>)
 800dbcc:	f04f 32ff 	mov.w	r2, #4294967295
 800dbd0:	f7f2 ffb4 	bl	8000b3c <__aeabi_dcmpun>
 800dbd4:	bb70      	cbnz	r0, 800dc34 <_printf_float+0xc0>
 800dbd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dbda:	4b98      	ldr	r3, [pc, #608]	@ (800de3c <_printf_float+0x2c8>)
 800dbdc:	f04f 32ff 	mov.w	r2, #4294967295
 800dbe0:	f7f2 ff8e 	bl	8000b00 <__aeabi_dcmple>
 800dbe4:	bb30      	cbnz	r0, 800dc34 <_printf_float+0xc0>
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	2300      	movs	r3, #0
 800dbea:	4640      	mov	r0, r8
 800dbec:	4649      	mov	r1, r9
 800dbee:	f7f2 ff7d 	bl	8000aec <__aeabi_dcmplt>
 800dbf2:	b110      	cbz	r0, 800dbfa <_printf_float+0x86>
 800dbf4:	232d      	movs	r3, #45	@ 0x2d
 800dbf6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dbfa:	4a91      	ldr	r2, [pc, #580]	@ (800de40 <_printf_float+0x2cc>)
 800dbfc:	4b91      	ldr	r3, [pc, #580]	@ (800de44 <_printf_float+0x2d0>)
 800dbfe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800dc02:	bf8c      	ite	hi
 800dc04:	4690      	movhi	r8, r2
 800dc06:	4698      	movls	r8, r3
 800dc08:	2303      	movs	r3, #3
 800dc0a:	6123      	str	r3, [r4, #16]
 800dc0c:	f02b 0304 	bic.w	r3, fp, #4
 800dc10:	6023      	str	r3, [r4, #0]
 800dc12:	f04f 0900 	mov.w	r9, #0
 800dc16:	9700      	str	r7, [sp, #0]
 800dc18:	4633      	mov	r3, r6
 800dc1a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800dc1c:	4621      	mov	r1, r4
 800dc1e:	4628      	mov	r0, r5
 800dc20:	f000 f9d2 	bl	800dfc8 <_printf_common>
 800dc24:	3001      	adds	r0, #1
 800dc26:	f040 808d 	bne.w	800dd44 <_printf_float+0x1d0>
 800dc2a:	f04f 30ff 	mov.w	r0, #4294967295
 800dc2e:	b00d      	add	sp, #52	@ 0x34
 800dc30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc34:	4642      	mov	r2, r8
 800dc36:	464b      	mov	r3, r9
 800dc38:	4640      	mov	r0, r8
 800dc3a:	4649      	mov	r1, r9
 800dc3c:	f7f2 ff7e 	bl	8000b3c <__aeabi_dcmpun>
 800dc40:	b140      	cbz	r0, 800dc54 <_printf_float+0xe0>
 800dc42:	464b      	mov	r3, r9
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	bfbc      	itt	lt
 800dc48:	232d      	movlt	r3, #45	@ 0x2d
 800dc4a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800dc4e:	4a7e      	ldr	r2, [pc, #504]	@ (800de48 <_printf_float+0x2d4>)
 800dc50:	4b7e      	ldr	r3, [pc, #504]	@ (800de4c <_printf_float+0x2d8>)
 800dc52:	e7d4      	b.n	800dbfe <_printf_float+0x8a>
 800dc54:	6863      	ldr	r3, [r4, #4]
 800dc56:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800dc5a:	9206      	str	r2, [sp, #24]
 800dc5c:	1c5a      	adds	r2, r3, #1
 800dc5e:	d13b      	bne.n	800dcd8 <_printf_float+0x164>
 800dc60:	2306      	movs	r3, #6
 800dc62:	6063      	str	r3, [r4, #4]
 800dc64:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800dc68:	2300      	movs	r3, #0
 800dc6a:	6022      	str	r2, [r4, #0]
 800dc6c:	9303      	str	r3, [sp, #12]
 800dc6e:	ab0a      	add	r3, sp, #40	@ 0x28
 800dc70:	e9cd a301 	strd	sl, r3, [sp, #4]
 800dc74:	ab09      	add	r3, sp, #36	@ 0x24
 800dc76:	9300      	str	r3, [sp, #0]
 800dc78:	6861      	ldr	r1, [r4, #4]
 800dc7a:	ec49 8b10 	vmov	d0, r8, r9
 800dc7e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800dc82:	4628      	mov	r0, r5
 800dc84:	f7ff fed6 	bl	800da34 <__cvt>
 800dc88:	9b06      	ldr	r3, [sp, #24]
 800dc8a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dc8c:	2b47      	cmp	r3, #71	@ 0x47
 800dc8e:	4680      	mov	r8, r0
 800dc90:	d129      	bne.n	800dce6 <_printf_float+0x172>
 800dc92:	1cc8      	adds	r0, r1, #3
 800dc94:	db02      	blt.n	800dc9c <_printf_float+0x128>
 800dc96:	6863      	ldr	r3, [r4, #4]
 800dc98:	4299      	cmp	r1, r3
 800dc9a:	dd41      	ble.n	800dd20 <_printf_float+0x1ac>
 800dc9c:	f1aa 0a02 	sub.w	sl, sl, #2
 800dca0:	fa5f fa8a 	uxtb.w	sl, sl
 800dca4:	3901      	subs	r1, #1
 800dca6:	4652      	mov	r2, sl
 800dca8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800dcac:	9109      	str	r1, [sp, #36]	@ 0x24
 800dcae:	f7ff ff26 	bl	800dafe <__exponent>
 800dcb2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dcb4:	1813      	adds	r3, r2, r0
 800dcb6:	2a01      	cmp	r2, #1
 800dcb8:	4681      	mov	r9, r0
 800dcba:	6123      	str	r3, [r4, #16]
 800dcbc:	dc02      	bgt.n	800dcc4 <_printf_float+0x150>
 800dcbe:	6822      	ldr	r2, [r4, #0]
 800dcc0:	07d2      	lsls	r2, r2, #31
 800dcc2:	d501      	bpl.n	800dcc8 <_printf_float+0x154>
 800dcc4:	3301      	adds	r3, #1
 800dcc6:	6123      	str	r3, [r4, #16]
 800dcc8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d0a2      	beq.n	800dc16 <_printf_float+0xa2>
 800dcd0:	232d      	movs	r3, #45	@ 0x2d
 800dcd2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dcd6:	e79e      	b.n	800dc16 <_printf_float+0xa2>
 800dcd8:	9a06      	ldr	r2, [sp, #24]
 800dcda:	2a47      	cmp	r2, #71	@ 0x47
 800dcdc:	d1c2      	bne.n	800dc64 <_printf_float+0xf0>
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d1c0      	bne.n	800dc64 <_printf_float+0xf0>
 800dce2:	2301      	movs	r3, #1
 800dce4:	e7bd      	b.n	800dc62 <_printf_float+0xee>
 800dce6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800dcea:	d9db      	bls.n	800dca4 <_printf_float+0x130>
 800dcec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800dcf0:	d118      	bne.n	800dd24 <_printf_float+0x1b0>
 800dcf2:	2900      	cmp	r1, #0
 800dcf4:	6863      	ldr	r3, [r4, #4]
 800dcf6:	dd0b      	ble.n	800dd10 <_printf_float+0x19c>
 800dcf8:	6121      	str	r1, [r4, #16]
 800dcfa:	b913      	cbnz	r3, 800dd02 <_printf_float+0x18e>
 800dcfc:	6822      	ldr	r2, [r4, #0]
 800dcfe:	07d0      	lsls	r0, r2, #31
 800dd00:	d502      	bpl.n	800dd08 <_printf_float+0x194>
 800dd02:	3301      	adds	r3, #1
 800dd04:	440b      	add	r3, r1
 800dd06:	6123      	str	r3, [r4, #16]
 800dd08:	65a1      	str	r1, [r4, #88]	@ 0x58
 800dd0a:	f04f 0900 	mov.w	r9, #0
 800dd0e:	e7db      	b.n	800dcc8 <_printf_float+0x154>
 800dd10:	b913      	cbnz	r3, 800dd18 <_printf_float+0x1a4>
 800dd12:	6822      	ldr	r2, [r4, #0]
 800dd14:	07d2      	lsls	r2, r2, #31
 800dd16:	d501      	bpl.n	800dd1c <_printf_float+0x1a8>
 800dd18:	3302      	adds	r3, #2
 800dd1a:	e7f4      	b.n	800dd06 <_printf_float+0x192>
 800dd1c:	2301      	movs	r3, #1
 800dd1e:	e7f2      	b.n	800dd06 <_printf_float+0x192>
 800dd20:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800dd24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd26:	4299      	cmp	r1, r3
 800dd28:	db05      	blt.n	800dd36 <_printf_float+0x1c2>
 800dd2a:	6823      	ldr	r3, [r4, #0]
 800dd2c:	6121      	str	r1, [r4, #16]
 800dd2e:	07d8      	lsls	r0, r3, #31
 800dd30:	d5ea      	bpl.n	800dd08 <_printf_float+0x194>
 800dd32:	1c4b      	adds	r3, r1, #1
 800dd34:	e7e7      	b.n	800dd06 <_printf_float+0x192>
 800dd36:	2900      	cmp	r1, #0
 800dd38:	bfd4      	ite	le
 800dd3a:	f1c1 0202 	rsble	r2, r1, #2
 800dd3e:	2201      	movgt	r2, #1
 800dd40:	4413      	add	r3, r2
 800dd42:	e7e0      	b.n	800dd06 <_printf_float+0x192>
 800dd44:	6823      	ldr	r3, [r4, #0]
 800dd46:	055a      	lsls	r2, r3, #21
 800dd48:	d407      	bmi.n	800dd5a <_printf_float+0x1e6>
 800dd4a:	6923      	ldr	r3, [r4, #16]
 800dd4c:	4642      	mov	r2, r8
 800dd4e:	4631      	mov	r1, r6
 800dd50:	4628      	mov	r0, r5
 800dd52:	47b8      	blx	r7
 800dd54:	3001      	adds	r0, #1
 800dd56:	d12b      	bne.n	800ddb0 <_printf_float+0x23c>
 800dd58:	e767      	b.n	800dc2a <_printf_float+0xb6>
 800dd5a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800dd5e:	f240 80dd 	bls.w	800df1c <_printf_float+0x3a8>
 800dd62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800dd66:	2200      	movs	r2, #0
 800dd68:	2300      	movs	r3, #0
 800dd6a:	f7f2 feb5 	bl	8000ad8 <__aeabi_dcmpeq>
 800dd6e:	2800      	cmp	r0, #0
 800dd70:	d033      	beq.n	800ddda <_printf_float+0x266>
 800dd72:	4a37      	ldr	r2, [pc, #220]	@ (800de50 <_printf_float+0x2dc>)
 800dd74:	2301      	movs	r3, #1
 800dd76:	4631      	mov	r1, r6
 800dd78:	4628      	mov	r0, r5
 800dd7a:	47b8      	blx	r7
 800dd7c:	3001      	adds	r0, #1
 800dd7e:	f43f af54 	beq.w	800dc2a <_printf_float+0xb6>
 800dd82:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800dd86:	4543      	cmp	r3, r8
 800dd88:	db02      	blt.n	800dd90 <_printf_float+0x21c>
 800dd8a:	6823      	ldr	r3, [r4, #0]
 800dd8c:	07d8      	lsls	r0, r3, #31
 800dd8e:	d50f      	bpl.n	800ddb0 <_printf_float+0x23c>
 800dd90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dd94:	4631      	mov	r1, r6
 800dd96:	4628      	mov	r0, r5
 800dd98:	47b8      	blx	r7
 800dd9a:	3001      	adds	r0, #1
 800dd9c:	f43f af45 	beq.w	800dc2a <_printf_float+0xb6>
 800dda0:	f04f 0900 	mov.w	r9, #0
 800dda4:	f108 38ff 	add.w	r8, r8, #4294967295
 800dda8:	f104 0a1a 	add.w	sl, r4, #26
 800ddac:	45c8      	cmp	r8, r9
 800ddae:	dc09      	bgt.n	800ddc4 <_printf_float+0x250>
 800ddb0:	6823      	ldr	r3, [r4, #0]
 800ddb2:	079b      	lsls	r3, r3, #30
 800ddb4:	f100 8103 	bmi.w	800dfbe <_printf_float+0x44a>
 800ddb8:	68e0      	ldr	r0, [r4, #12]
 800ddba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ddbc:	4298      	cmp	r0, r3
 800ddbe:	bfb8      	it	lt
 800ddc0:	4618      	movlt	r0, r3
 800ddc2:	e734      	b.n	800dc2e <_printf_float+0xba>
 800ddc4:	2301      	movs	r3, #1
 800ddc6:	4652      	mov	r2, sl
 800ddc8:	4631      	mov	r1, r6
 800ddca:	4628      	mov	r0, r5
 800ddcc:	47b8      	blx	r7
 800ddce:	3001      	adds	r0, #1
 800ddd0:	f43f af2b 	beq.w	800dc2a <_printf_float+0xb6>
 800ddd4:	f109 0901 	add.w	r9, r9, #1
 800ddd8:	e7e8      	b.n	800ddac <_printf_float+0x238>
 800ddda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	dc39      	bgt.n	800de54 <_printf_float+0x2e0>
 800dde0:	4a1b      	ldr	r2, [pc, #108]	@ (800de50 <_printf_float+0x2dc>)
 800dde2:	2301      	movs	r3, #1
 800dde4:	4631      	mov	r1, r6
 800dde6:	4628      	mov	r0, r5
 800dde8:	47b8      	blx	r7
 800ddea:	3001      	adds	r0, #1
 800ddec:	f43f af1d 	beq.w	800dc2a <_printf_float+0xb6>
 800ddf0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ddf4:	ea59 0303 	orrs.w	r3, r9, r3
 800ddf8:	d102      	bne.n	800de00 <_printf_float+0x28c>
 800ddfa:	6823      	ldr	r3, [r4, #0]
 800ddfc:	07d9      	lsls	r1, r3, #31
 800ddfe:	d5d7      	bpl.n	800ddb0 <_printf_float+0x23c>
 800de00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800de04:	4631      	mov	r1, r6
 800de06:	4628      	mov	r0, r5
 800de08:	47b8      	blx	r7
 800de0a:	3001      	adds	r0, #1
 800de0c:	f43f af0d 	beq.w	800dc2a <_printf_float+0xb6>
 800de10:	f04f 0a00 	mov.w	sl, #0
 800de14:	f104 0b1a 	add.w	fp, r4, #26
 800de18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de1a:	425b      	negs	r3, r3
 800de1c:	4553      	cmp	r3, sl
 800de1e:	dc01      	bgt.n	800de24 <_printf_float+0x2b0>
 800de20:	464b      	mov	r3, r9
 800de22:	e793      	b.n	800dd4c <_printf_float+0x1d8>
 800de24:	2301      	movs	r3, #1
 800de26:	465a      	mov	r2, fp
 800de28:	4631      	mov	r1, r6
 800de2a:	4628      	mov	r0, r5
 800de2c:	47b8      	blx	r7
 800de2e:	3001      	adds	r0, #1
 800de30:	f43f aefb 	beq.w	800dc2a <_printf_float+0xb6>
 800de34:	f10a 0a01 	add.w	sl, sl, #1
 800de38:	e7ee      	b.n	800de18 <_printf_float+0x2a4>
 800de3a:	bf00      	nop
 800de3c:	7fefffff 	.word	0x7fefffff
 800de40:	080118b2 	.word	0x080118b2
 800de44:	080118ae 	.word	0x080118ae
 800de48:	080118ba 	.word	0x080118ba
 800de4c:	080118b6 	.word	0x080118b6
 800de50:	080118be 	.word	0x080118be
 800de54:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800de56:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800de5a:	4553      	cmp	r3, sl
 800de5c:	bfa8      	it	ge
 800de5e:	4653      	movge	r3, sl
 800de60:	2b00      	cmp	r3, #0
 800de62:	4699      	mov	r9, r3
 800de64:	dc36      	bgt.n	800ded4 <_printf_float+0x360>
 800de66:	f04f 0b00 	mov.w	fp, #0
 800de6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800de6e:	f104 021a 	add.w	r2, r4, #26
 800de72:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800de74:	9306      	str	r3, [sp, #24]
 800de76:	eba3 0309 	sub.w	r3, r3, r9
 800de7a:	455b      	cmp	r3, fp
 800de7c:	dc31      	bgt.n	800dee2 <_printf_float+0x36e>
 800de7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de80:	459a      	cmp	sl, r3
 800de82:	dc3a      	bgt.n	800defa <_printf_float+0x386>
 800de84:	6823      	ldr	r3, [r4, #0]
 800de86:	07da      	lsls	r2, r3, #31
 800de88:	d437      	bmi.n	800defa <_printf_float+0x386>
 800de8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de8c:	ebaa 0903 	sub.w	r9, sl, r3
 800de90:	9b06      	ldr	r3, [sp, #24]
 800de92:	ebaa 0303 	sub.w	r3, sl, r3
 800de96:	4599      	cmp	r9, r3
 800de98:	bfa8      	it	ge
 800de9a:	4699      	movge	r9, r3
 800de9c:	f1b9 0f00 	cmp.w	r9, #0
 800dea0:	dc33      	bgt.n	800df0a <_printf_float+0x396>
 800dea2:	f04f 0800 	mov.w	r8, #0
 800dea6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800deaa:	f104 0b1a 	add.w	fp, r4, #26
 800deae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800deb0:	ebaa 0303 	sub.w	r3, sl, r3
 800deb4:	eba3 0309 	sub.w	r3, r3, r9
 800deb8:	4543      	cmp	r3, r8
 800deba:	f77f af79 	ble.w	800ddb0 <_printf_float+0x23c>
 800debe:	2301      	movs	r3, #1
 800dec0:	465a      	mov	r2, fp
 800dec2:	4631      	mov	r1, r6
 800dec4:	4628      	mov	r0, r5
 800dec6:	47b8      	blx	r7
 800dec8:	3001      	adds	r0, #1
 800deca:	f43f aeae 	beq.w	800dc2a <_printf_float+0xb6>
 800dece:	f108 0801 	add.w	r8, r8, #1
 800ded2:	e7ec      	b.n	800deae <_printf_float+0x33a>
 800ded4:	4642      	mov	r2, r8
 800ded6:	4631      	mov	r1, r6
 800ded8:	4628      	mov	r0, r5
 800deda:	47b8      	blx	r7
 800dedc:	3001      	adds	r0, #1
 800dede:	d1c2      	bne.n	800de66 <_printf_float+0x2f2>
 800dee0:	e6a3      	b.n	800dc2a <_printf_float+0xb6>
 800dee2:	2301      	movs	r3, #1
 800dee4:	4631      	mov	r1, r6
 800dee6:	4628      	mov	r0, r5
 800dee8:	9206      	str	r2, [sp, #24]
 800deea:	47b8      	blx	r7
 800deec:	3001      	adds	r0, #1
 800deee:	f43f ae9c 	beq.w	800dc2a <_printf_float+0xb6>
 800def2:	9a06      	ldr	r2, [sp, #24]
 800def4:	f10b 0b01 	add.w	fp, fp, #1
 800def8:	e7bb      	b.n	800de72 <_printf_float+0x2fe>
 800defa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800defe:	4631      	mov	r1, r6
 800df00:	4628      	mov	r0, r5
 800df02:	47b8      	blx	r7
 800df04:	3001      	adds	r0, #1
 800df06:	d1c0      	bne.n	800de8a <_printf_float+0x316>
 800df08:	e68f      	b.n	800dc2a <_printf_float+0xb6>
 800df0a:	9a06      	ldr	r2, [sp, #24]
 800df0c:	464b      	mov	r3, r9
 800df0e:	4442      	add	r2, r8
 800df10:	4631      	mov	r1, r6
 800df12:	4628      	mov	r0, r5
 800df14:	47b8      	blx	r7
 800df16:	3001      	adds	r0, #1
 800df18:	d1c3      	bne.n	800dea2 <_printf_float+0x32e>
 800df1a:	e686      	b.n	800dc2a <_printf_float+0xb6>
 800df1c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800df20:	f1ba 0f01 	cmp.w	sl, #1
 800df24:	dc01      	bgt.n	800df2a <_printf_float+0x3b6>
 800df26:	07db      	lsls	r3, r3, #31
 800df28:	d536      	bpl.n	800df98 <_printf_float+0x424>
 800df2a:	2301      	movs	r3, #1
 800df2c:	4642      	mov	r2, r8
 800df2e:	4631      	mov	r1, r6
 800df30:	4628      	mov	r0, r5
 800df32:	47b8      	blx	r7
 800df34:	3001      	adds	r0, #1
 800df36:	f43f ae78 	beq.w	800dc2a <_printf_float+0xb6>
 800df3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df3e:	4631      	mov	r1, r6
 800df40:	4628      	mov	r0, r5
 800df42:	47b8      	blx	r7
 800df44:	3001      	adds	r0, #1
 800df46:	f43f ae70 	beq.w	800dc2a <_printf_float+0xb6>
 800df4a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800df4e:	2200      	movs	r2, #0
 800df50:	2300      	movs	r3, #0
 800df52:	f10a 3aff 	add.w	sl, sl, #4294967295
 800df56:	f7f2 fdbf 	bl	8000ad8 <__aeabi_dcmpeq>
 800df5a:	b9c0      	cbnz	r0, 800df8e <_printf_float+0x41a>
 800df5c:	4653      	mov	r3, sl
 800df5e:	f108 0201 	add.w	r2, r8, #1
 800df62:	4631      	mov	r1, r6
 800df64:	4628      	mov	r0, r5
 800df66:	47b8      	blx	r7
 800df68:	3001      	adds	r0, #1
 800df6a:	d10c      	bne.n	800df86 <_printf_float+0x412>
 800df6c:	e65d      	b.n	800dc2a <_printf_float+0xb6>
 800df6e:	2301      	movs	r3, #1
 800df70:	465a      	mov	r2, fp
 800df72:	4631      	mov	r1, r6
 800df74:	4628      	mov	r0, r5
 800df76:	47b8      	blx	r7
 800df78:	3001      	adds	r0, #1
 800df7a:	f43f ae56 	beq.w	800dc2a <_printf_float+0xb6>
 800df7e:	f108 0801 	add.w	r8, r8, #1
 800df82:	45d0      	cmp	r8, sl
 800df84:	dbf3      	blt.n	800df6e <_printf_float+0x3fa>
 800df86:	464b      	mov	r3, r9
 800df88:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800df8c:	e6df      	b.n	800dd4e <_printf_float+0x1da>
 800df8e:	f04f 0800 	mov.w	r8, #0
 800df92:	f104 0b1a 	add.w	fp, r4, #26
 800df96:	e7f4      	b.n	800df82 <_printf_float+0x40e>
 800df98:	2301      	movs	r3, #1
 800df9a:	4642      	mov	r2, r8
 800df9c:	e7e1      	b.n	800df62 <_printf_float+0x3ee>
 800df9e:	2301      	movs	r3, #1
 800dfa0:	464a      	mov	r2, r9
 800dfa2:	4631      	mov	r1, r6
 800dfa4:	4628      	mov	r0, r5
 800dfa6:	47b8      	blx	r7
 800dfa8:	3001      	adds	r0, #1
 800dfaa:	f43f ae3e 	beq.w	800dc2a <_printf_float+0xb6>
 800dfae:	f108 0801 	add.w	r8, r8, #1
 800dfb2:	68e3      	ldr	r3, [r4, #12]
 800dfb4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dfb6:	1a5b      	subs	r3, r3, r1
 800dfb8:	4543      	cmp	r3, r8
 800dfba:	dcf0      	bgt.n	800df9e <_printf_float+0x42a>
 800dfbc:	e6fc      	b.n	800ddb8 <_printf_float+0x244>
 800dfbe:	f04f 0800 	mov.w	r8, #0
 800dfc2:	f104 0919 	add.w	r9, r4, #25
 800dfc6:	e7f4      	b.n	800dfb2 <_printf_float+0x43e>

0800dfc8 <_printf_common>:
 800dfc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfcc:	4616      	mov	r6, r2
 800dfce:	4698      	mov	r8, r3
 800dfd0:	688a      	ldr	r2, [r1, #8]
 800dfd2:	690b      	ldr	r3, [r1, #16]
 800dfd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dfd8:	4293      	cmp	r3, r2
 800dfda:	bfb8      	it	lt
 800dfdc:	4613      	movlt	r3, r2
 800dfde:	6033      	str	r3, [r6, #0]
 800dfe0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dfe4:	4607      	mov	r7, r0
 800dfe6:	460c      	mov	r4, r1
 800dfe8:	b10a      	cbz	r2, 800dfee <_printf_common+0x26>
 800dfea:	3301      	adds	r3, #1
 800dfec:	6033      	str	r3, [r6, #0]
 800dfee:	6823      	ldr	r3, [r4, #0]
 800dff0:	0699      	lsls	r1, r3, #26
 800dff2:	bf42      	ittt	mi
 800dff4:	6833      	ldrmi	r3, [r6, #0]
 800dff6:	3302      	addmi	r3, #2
 800dff8:	6033      	strmi	r3, [r6, #0]
 800dffa:	6825      	ldr	r5, [r4, #0]
 800dffc:	f015 0506 	ands.w	r5, r5, #6
 800e000:	d106      	bne.n	800e010 <_printf_common+0x48>
 800e002:	f104 0a19 	add.w	sl, r4, #25
 800e006:	68e3      	ldr	r3, [r4, #12]
 800e008:	6832      	ldr	r2, [r6, #0]
 800e00a:	1a9b      	subs	r3, r3, r2
 800e00c:	42ab      	cmp	r3, r5
 800e00e:	dc26      	bgt.n	800e05e <_printf_common+0x96>
 800e010:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e014:	6822      	ldr	r2, [r4, #0]
 800e016:	3b00      	subs	r3, #0
 800e018:	bf18      	it	ne
 800e01a:	2301      	movne	r3, #1
 800e01c:	0692      	lsls	r2, r2, #26
 800e01e:	d42b      	bmi.n	800e078 <_printf_common+0xb0>
 800e020:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e024:	4641      	mov	r1, r8
 800e026:	4638      	mov	r0, r7
 800e028:	47c8      	blx	r9
 800e02a:	3001      	adds	r0, #1
 800e02c:	d01e      	beq.n	800e06c <_printf_common+0xa4>
 800e02e:	6823      	ldr	r3, [r4, #0]
 800e030:	6922      	ldr	r2, [r4, #16]
 800e032:	f003 0306 	and.w	r3, r3, #6
 800e036:	2b04      	cmp	r3, #4
 800e038:	bf02      	ittt	eq
 800e03a:	68e5      	ldreq	r5, [r4, #12]
 800e03c:	6833      	ldreq	r3, [r6, #0]
 800e03e:	1aed      	subeq	r5, r5, r3
 800e040:	68a3      	ldr	r3, [r4, #8]
 800e042:	bf0c      	ite	eq
 800e044:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e048:	2500      	movne	r5, #0
 800e04a:	4293      	cmp	r3, r2
 800e04c:	bfc4      	itt	gt
 800e04e:	1a9b      	subgt	r3, r3, r2
 800e050:	18ed      	addgt	r5, r5, r3
 800e052:	2600      	movs	r6, #0
 800e054:	341a      	adds	r4, #26
 800e056:	42b5      	cmp	r5, r6
 800e058:	d11a      	bne.n	800e090 <_printf_common+0xc8>
 800e05a:	2000      	movs	r0, #0
 800e05c:	e008      	b.n	800e070 <_printf_common+0xa8>
 800e05e:	2301      	movs	r3, #1
 800e060:	4652      	mov	r2, sl
 800e062:	4641      	mov	r1, r8
 800e064:	4638      	mov	r0, r7
 800e066:	47c8      	blx	r9
 800e068:	3001      	adds	r0, #1
 800e06a:	d103      	bne.n	800e074 <_printf_common+0xac>
 800e06c:	f04f 30ff 	mov.w	r0, #4294967295
 800e070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e074:	3501      	adds	r5, #1
 800e076:	e7c6      	b.n	800e006 <_printf_common+0x3e>
 800e078:	18e1      	adds	r1, r4, r3
 800e07a:	1c5a      	adds	r2, r3, #1
 800e07c:	2030      	movs	r0, #48	@ 0x30
 800e07e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e082:	4422      	add	r2, r4
 800e084:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e088:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e08c:	3302      	adds	r3, #2
 800e08e:	e7c7      	b.n	800e020 <_printf_common+0x58>
 800e090:	2301      	movs	r3, #1
 800e092:	4622      	mov	r2, r4
 800e094:	4641      	mov	r1, r8
 800e096:	4638      	mov	r0, r7
 800e098:	47c8      	blx	r9
 800e09a:	3001      	adds	r0, #1
 800e09c:	d0e6      	beq.n	800e06c <_printf_common+0xa4>
 800e09e:	3601      	adds	r6, #1
 800e0a0:	e7d9      	b.n	800e056 <_printf_common+0x8e>
	...

0800e0a4 <_printf_i>:
 800e0a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e0a8:	7e0f      	ldrb	r7, [r1, #24]
 800e0aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e0ac:	2f78      	cmp	r7, #120	@ 0x78
 800e0ae:	4691      	mov	r9, r2
 800e0b0:	4680      	mov	r8, r0
 800e0b2:	460c      	mov	r4, r1
 800e0b4:	469a      	mov	sl, r3
 800e0b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e0ba:	d807      	bhi.n	800e0cc <_printf_i+0x28>
 800e0bc:	2f62      	cmp	r7, #98	@ 0x62
 800e0be:	d80a      	bhi.n	800e0d6 <_printf_i+0x32>
 800e0c0:	2f00      	cmp	r7, #0
 800e0c2:	f000 80d1 	beq.w	800e268 <_printf_i+0x1c4>
 800e0c6:	2f58      	cmp	r7, #88	@ 0x58
 800e0c8:	f000 80b8 	beq.w	800e23c <_printf_i+0x198>
 800e0cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e0d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e0d4:	e03a      	b.n	800e14c <_printf_i+0xa8>
 800e0d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e0da:	2b15      	cmp	r3, #21
 800e0dc:	d8f6      	bhi.n	800e0cc <_printf_i+0x28>
 800e0de:	a101      	add	r1, pc, #4	@ (adr r1, 800e0e4 <_printf_i+0x40>)
 800e0e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e0e4:	0800e13d 	.word	0x0800e13d
 800e0e8:	0800e151 	.word	0x0800e151
 800e0ec:	0800e0cd 	.word	0x0800e0cd
 800e0f0:	0800e0cd 	.word	0x0800e0cd
 800e0f4:	0800e0cd 	.word	0x0800e0cd
 800e0f8:	0800e0cd 	.word	0x0800e0cd
 800e0fc:	0800e151 	.word	0x0800e151
 800e100:	0800e0cd 	.word	0x0800e0cd
 800e104:	0800e0cd 	.word	0x0800e0cd
 800e108:	0800e0cd 	.word	0x0800e0cd
 800e10c:	0800e0cd 	.word	0x0800e0cd
 800e110:	0800e24f 	.word	0x0800e24f
 800e114:	0800e17b 	.word	0x0800e17b
 800e118:	0800e209 	.word	0x0800e209
 800e11c:	0800e0cd 	.word	0x0800e0cd
 800e120:	0800e0cd 	.word	0x0800e0cd
 800e124:	0800e271 	.word	0x0800e271
 800e128:	0800e0cd 	.word	0x0800e0cd
 800e12c:	0800e17b 	.word	0x0800e17b
 800e130:	0800e0cd 	.word	0x0800e0cd
 800e134:	0800e0cd 	.word	0x0800e0cd
 800e138:	0800e211 	.word	0x0800e211
 800e13c:	6833      	ldr	r3, [r6, #0]
 800e13e:	1d1a      	adds	r2, r3, #4
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	6032      	str	r2, [r6, #0]
 800e144:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e148:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e14c:	2301      	movs	r3, #1
 800e14e:	e09c      	b.n	800e28a <_printf_i+0x1e6>
 800e150:	6833      	ldr	r3, [r6, #0]
 800e152:	6820      	ldr	r0, [r4, #0]
 800e154:	1d19      	adds	r1, r3, #4
 800e156:	6031      	str	r1, [r6, #0]
 800e158:	0606      	lsls	r6, r0, #24
 800e15a:	d501      	bpl.n	800e160 <_printf_i+0xbc>
 800e15c:	681d      	ldr	r5, [r3, #0]
 800e15e:	e003      	b.n	800e168 <_printf_i+0xc4>
 800e160:	0645      	lsls	r5, r0, #25
 800e162:	d5fb      	bpl.n	800e15c <_printf_i+0xb8>
 800e164:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e168:	2d00      	cmp	r5, #0
 800e16a:	da03      	bge.n	800e174 <_printf_i+0xd0>
 800e16c:	232d      	movs	r3, #45	@ 0x2d
 800e16e:	426d      	negs	r5, r5
 800e170:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e174:	4858      	ldr	r0, [pc, #352]	@ (800e2d8 <_printf_i+0x234>)
 800e176:	230a      	movs	r3, #10
 800e178:	e011      	b.n	800e19e <_printf_i+0xfa>
 800e17a:	6821      	ldr	r1, [r4, #0]
 800e17c:	6833      	ldr	r3, [r6, #0]
 800e17e:	0608      	lsls	r0, r1, #24
 800e180:	f853 5b04 	ldr.w	r5, [r3], #4
 800e184:	d402      	bmi.n	800e18c <_printf_i+0xe8>
 800e186:	0649      	lsls	r1, r1, #25
 800e188:	bf48      	it	mi
 800e18a:	b2ad      	uxthmi	r5, r5
 800e18c:	2f6f      	cmp	r7, #111	@ 0x6f
 800e18e:	4852      	ldr	r0, [pc, #328]	@ (800e2d8 <_printf_i+0x234>)
 800e190:	6033      	str	r3, [r6, #0]
 800e192:	bf14      	ite	ne
 800e194:	230a      	movne	r3, #10
 800e196:	2308      	moveq	r3, #8
 800e198:	2100      	movs	r1, #0
 800e19a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e19e:	6866      	ldr	r6, [r4, #4]
 800e1a0:	60a6      	str	r6, [r4, #8]
 800e1a2:	2e00      	cmp	r6, #0
 800e1a4:	db05      	blt.n	800e1b2 <_printf_i+0x10e>
 800e1a6:	6821      	ldr	r1, [r4, #0]
 800e1a8:	432e      	orrs	r6, r5
 800e1aa:	f021 0104 	bic.w	r1, r1, #4
 800e1ae:	6021      	str	r1, [r4, #0]
 800e1b0:	d04b      	beq.n	800e24a <_printf_i+0x1a6>
 800e1b2:	4616      	mov	r6, r2
 800e1b4:	fbb5 f1f3 	udiv	r1, r5, r3
 800e1b8:	fb03 5711 	mls	r7, r3, r1, r5
 800e1bc:	5dc7      	ldrb	r7, [r0, r7]
 800e1be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e1c2:	462f      	mov	r7, r5
 800e1c4:	42bb      	cmp	r3, r7
 800e1c6:	460d      	mov	r5, r1
 800e1c8:	d9f4      	bls.n	800e1b4 <_printf_i+0x110>
 800e1ca:	2b08      	cmp	r3, #8
 800e1cc:	d10b      	bne.n	800e1e6 <_printf_i+0x142>
 800e1ce:	6823      	ldr	r3, [r4, #0]
 800e1d0:	07df      	lsls	r7, r3, #31
 800e1d2:	d508      	bpl.n	800e1e6 <_printf_i+0x142>
 800e1d4:	6923      	ldr	r3, [r4, #16]
 800e1d6:	6861      	ldr	r1, [r4, #4]
 800e1d8:	4299      	cmp	r1, r3
 800e1da:	bfde      	ittt	le
 800e1dc:	2330      	movle	r3, #48	@ 0x30
 800e1de:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e1e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e1e6:	1b92      	subs	r2, r2, r6
 800e1e8:	6122      	str	r2, [r4, #16]
 800e1ea:	f8cd a000 	str.w	sl, [sp]
 800e1ee:	464b      	mov	r3, r9
 800e1f0:	aa03      	add	r2, sp, #12
 800e1f2:	4621      	mov	r1, r4
 800e1f4:	4640      	mov	r0, r8
 800e1f6:	f7ff fee7 	bl	800dfc8 <_printf_common>
 800e1fa:	3001      	adds	r0, #1
 800e1fc:	d14a      	bne.n	800e294 <_printf_i+0x1f0>
 800e1fe:	f04f 30ff 	mov.w	r0, #4294967295
 800e202:	b004      	add	sp, #16
 800e204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e208:	6823      	ldr	r3, [r4, #0]
 800e20a:	f043 0320 	orr.w	r3, r3, #32
 800e20e:	6023      	str	r3, [r4, #0]
 800e210:	4832      	ldr	r0, [pc, #200]	@ (800e2dc <_printf_i+0x238>)
 800e212:	2778      	movs	r7, #120	@ 0x78
 800e214:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e218:	6823      	ldr	r3, [r4, #0]
 800e21a:	6831      	ldr	r1, [r6, #0]
 800e21c:	061f      	lsls	r7, r3, #24
 800e21e:	f851 5b04 	ldr.w	r5, [r1], #4
 800e222:	d402      	bmi.n	800e22a <_printf_i+0x186>
 800e224:	065f      	lsls	r7, r3, #25
 800e226:	bf48      	it	mi
 800e228:	b2ad      	uxthmi	r5, r5
 800e22a:	6031      	str	r1, [r6, #0]
 800e22c:	07d9      	lsls	r1, r3, #31
 800e22e:	bf44      	itt	mi
 800e230:	f043 0320 	orrmi.w	r3, r3, #32
 800e234:	6023      	strmi	r3, [r4, #0]
 800e236:	b11d      	cbz	r5, 800e240 <_printf_i+0x19c>
 800e238:	2310      	movs	r3, #16
 800e23a:	e7ad      	b.n	800e198 <_printf_i+0xf4>
 800e23c:	4826      	ldr	r0, [pc, #152]	@ (800e2d8 <_printf_i+0x234>)
 800e23e:	e7e9      	b.n	800e214 <_printf_i+0x170>
 800e240:	6823      	ldr	r3, [r4, #0]
 800e242:	f023 0320 	bic.w	r3, r3, #32
 800e246:	6023      	str	r3, [r4, #0]
 800e248:	e7f6      	b.n	800e238 <_printf_i+0x194>
 800e24a:	4616      	mov	r6, r2
 800e24c:	e7bd      	b.n	800e1ca <_printf_i+0x126>
 800e24e:	6833      	ldr	r3, [r6, #0]
 800e250:	6825      	ldr	r5, [r4, #0]
 800e252:	6961      	ldr	r1, [r4, #20]
 800e254:	1d18      	adds	r0, r3, #4
 800e256:	6030      	str	r0, [r6, #0]
 800e258:	062e      	lsls	r6, r5, #24
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	d501      	bpl.n	800e262 <_printf_i+0x1be>
 800e25e:	6019      	str	r1, [r3, #0]
 800e260:	e002      	b.n	800e268 <_printf_i+0x1c4>
 800e262:	0668      	lsls	r0, r5, #25
 800e264:	d5fb      	bpl.n	800e25e <_printf_i+0x1ba>
 800e266:	8019      	strh	r1, [r3, #0]
 800e268:	2300      	movs	r3, #0
 800e26a:	6123      	str	r3, [r4, #16]
 800e26c:	4616      	mov	r6, r2
 800e26e:	e7bc      	b.n	800e1ea <_printf_i+0x146>
 800e270:	6833      	ldr	r3, [r6, #0]
 800e272:	1d1a      	adds	r2, r3, #4
 800e274:	6032      	str	r2, [r6, #0]
 800e276:	681e      	ldr	r6, [r3, #0]
 800e278:	6862      	ldr	r2, [r4, #4]
 800e27a:	2100      	movs	r1, #0
 800e27c:	4630      	mov	r0, r6
 800e27e:	f7f1 ffaf 	bl	80001e0 <memchr>
 800e282:	b108      	cbz	r0, 800e288 <_printf_i+0x1e4>
 800e284:	1b80      	subs	r0, r0, r6
 800e286:	6060      	str	r0, [r4, #4]
 800e288:	6863      	ldr	r3, [r4, #4]
 800e28a:	6123      	str	r3, [r4, #16]
 800e28c:	2300      	movs	r3, #0
 800e28e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e292:	e7aa      	b.n	800e1ea <_printf_i+0x146>
 800e294:	6923      	ldr	r3, [r4, #16]
 800e296:	4632      	mov	r2, r6
 800e298:	4649      	mov	r1, r9
 800e29a:	4640      	mov	r0, r8
 800e29c:	47d0      	blx	sl
 800e29e:	3001      	adds	r0, #1
 800e2a0:	d0ad      	beq.n	800e1fe <_printf_i+0x15a>
 800e2a2:	6823      	ldr	r3, [r4, #0]
 800e2a4:	079b      	lsls	r3, r3, #30
 800e2a6:	d413      	bmi.n	800e2d0 <_printf_i+0x22c>
 800e2a8:	68e0      	ldr	r0, [r4, #12]
 800e2aa:	9b03      	ldr	r3, [sp, #12]
 800e2ac:	4298      	cmp	r0, r3
 800e2ae:	bfb8      	it	lt
 800e2b0:	4618      	movlt	r0, r3
 800e2b2:	e7a6      	b.n	800e202 <_printf_i+0x15e>
 800e2b4:	2301      	movs	r3, #1
 800e2b6:	4632      	mov	r2, r6
 800e2b8:	4649      	mov	r1, r9
 800e2ba:	4640      	mov	r0, r8
 800e2bc:	47d0      	blx	sl
 800e2be:	3001      	adds	r0, #1
 800e2c0:	d09d      	beq.n	800e1fe <_printf_i+0x15a>
 800e2c2:	3501      	adds	r5, #1
 800e2c4:	68e3      	ldr	r3, [r4, #12]
 800e2c6:	9903      	ldr	r1, [sp, #12]
 800e2c8:	1a5b      	subs	r3, r3, r1
 800e2ca:	42ab      	cmp	r3, r5
 800e2cc:	dcf2      	bgt.n	800e2b4 <_printf_i+0x210>
 800e2ce:	e7eb      	b.n	800e2a8 <_printf_i+0x204>
 800e2d0:	2500      	movs	r5, #0
 800e2d2:	f104 0619 	add.w	r6, r4, #25
 800e2d6:	e7f5      	b.n	800e2c4 <_printf_i+0x220>
 800e2d8:	080118c0 	.word	0x080118c0
 800e2dc:	080118d1 	.word	0x080118d1

0800e2e0 <_scanf_float>:
 800e2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2e4:	b087      	sub	sp, #28
 800e2e6:	4691      	mov	r9, r2
 800e2e8:	9303      	str	r3, [sp, #12]
 800e2ea:	688b      	ldr	r3, [r1, #8]
 800e2ec:	1e5a      	subs	r2, r3, #1
 800e2ee:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e2f2:	bf81      	itttt	hi
 800e2f4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e2f8:	eb03 0b05 	addhi.w	fp, r3, r5
 800e2fc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e300:	608b      	strhi	r3, [r1, #8]
 800e302:	680b      	ldr	r3, [r1, #0]
 800e304:	460a      	mov	r2, r1
 800e306:	f04f 0500 	mov.w	r5, #0
 800e30a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800e30e:	f842 3b1c 	str.w	r3, [r2], #28
 800e312:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e316:	4680      	mov	r8, r0
 800e318:	460c      	mov	r4, r1
 800e31a:	bf98      	it	ls
 800e31c:	f04f 0b00 	movls.w	fp, #0
 800e320:	9201      	str	r2, [sp, #4]
 800e322:	4616      	mov	r6, r2
 800e324:	46aa      	mov	sl, r5
 800e326:	462f      	mov	r7, r5
 800e328:	9502      	str	r5, [sp, #8]
 800e32a:	68a2      	ldr	r2, [r4, #8]
 800e32c:	b15a      	cbz	r2, 800e346 <_scanf_float+0x66>
 800e32e:	f8d9 3000 	ldr.w	r3, [r9]
 800e332:	781b      	ldrb	r3, [r3, #0]
 800e334:	2b4e      	cmp	r3, #78	@ 0x4e
 800e336:	d863      	bhi.n	800e400 <_scanf_float+0x120>
 800e338:	2b40      	cmp	r3, #64	@ 0x40
 800e33a:	d83b      	bhi.n	800e3b4 <_scanf_float+0xd4>
 800e33c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800e340:	b2c8      	uxtb	r0, r1
 800e342:	280e      	cmp	r0, #14
 800e344:	d939      	bls.n	800e3ba <_scanf_float+0xda>
 800e346:	b11f      	cbz	r7, 800e350 <_scanf_float+0x70>
 800e348:	6823      	ldr	r3, [r4, #0]
 800e34a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e34e:	6023      	str	r3, [r4, #0]
 800e350:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e354:	f1ba 0f01 	cmp.w	sl, #1
 800e358:	f200 8114 	bhi.w	800e584 <_scanf_float+0x2a4>
 800e35c:	9b01      	ldr	r3, [sp, #4]
 800e35e:	429e      	cmp	r6, r3
 800e360:	f200 8105 	bhi.w	800e56e <_scanf_float+0x28e>
 800e364:	2001      	movs	r0, #1
 800e366:	b007      	add	sp, #28
 800e368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e36c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800e370:	2a0d      	cmp	r2, #13
 800e372:	d8e8      	bhi.n	800e346 <_scanf_float+0x66>
 800e374:	a101      	add	r1, pc, #4	@ (adr r1, 800e37c <_scanf_float+0x9c>)
 800e376:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e37a:	bf00      	nop
 800e37c:	0800e4c5 	.word	0x0800e4c5
 800e380:	0800e347 	.word	0x0800e347
 800e384:	0800e347 	.word	0x0800e347
 800e388:	0800e347 	.word	0x0800e347
 800e38c:	0800e521 	.word	0x0800e521
 800e390:	0800e4fb 	.word	0x0800e4fb
 800e394:	0800e347 	.word	0x0800e347
 800e398:	0800e347 	.word	0x0800e347
 800e39c:	0800e4d3 	.word	0x0800e4d3
 800e3a0:	0800e347 	.word	0x0800e347
 800e3a4:	0800e347 	.word	0x0800e347
 800e3a8:	0800e347 	.word	0x0800e347
 800e3ac:	0800e347 	.word	0x0800e347
 800e3b0:	0800e48f 	.word	0x0800e48f
 800e3b4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800e3b8:	e7da      	b.n	800e370 <_scanf_float+0x90>
 800e3ba:	290e      	cmp	r1, #14
 800e3bc:	d8c3      	bhi.n	800e346 <_scanf_float+0x66>
 800e3be:	a001      	add	r0, pc, #4	@ (adr r0, 800e3c4 <_scanf_float+0xe4>)
 800e3c0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e3c4:	0800e47f 	.word	0x0800e47f
 800e3c8:	0800e347 	.word	0x0800e347
 800e3cc:	0800e47f 	.word	0x0800e47f
 800e3d0:	0800e50f 	.word	0x0800e50f
 800e3d4:	0800e347 	.word	0x0800e347
 800e3d8:	0800e421 	.word	0x0800e421
 800e3dc:	0800e465 	.word	0x0800e465
 800e3e0:	0800e465 	.word	0x0800e465
 800e3e4:	0800e465 	.word	0x0800e465
 800e3e8:	0800e465 	.word	0x0800e465
 800e3ec:	0800e465 	.word	0x0800e465
 800e3f0:	0800e465 	.word	0x0800e465
 800e3f4:	0800e465 	.word	0x0800e465
 800e3f8:	0800e465 	.word	0x0800e465
 800e3fc:	0800e465 	.word	0x0800e465
 800e400:	2b6e      	cmp	r3, #110	@ 0x6e
 800e402:	d809      	bhi.n	800e418 <_scanf_float+0x138>
 800e404:	2b60      	cmp	r3, #96	@ 0x60
 800e406:	d8b1      	bhi.n	800e36c <_scanf_float+0x8c>
 800e408:	2b54      	cmp	r3, #84	@ 0x54
 800e40a:	d07b      	beq.n	800e504 <_scanf_float+0x224>
 800e40c:	2b59      	cmp	r3, #89	@ 0x59
 800e40e:	d19a      	bne.n	800e346 <_scanf_float+0x66>
 800e410:	2d07      	cmp	r5, #7
 800e412:	d198      	bne.n	800e346 <_scanf_float+0x66>
 800e414:	2508      	movs	r5, #8
 800e416:	e02f      	b.n	800e478 <_scanf_float+0x198>
 800e418:	2b74      	cmp	r3, #116	@ 0x74
 800e41a:	d073      	beq.n	800e504 <_scanf_float+0x224>
 800e41c:	2b79      	cmp	r3, #121	@ 0x79
 800e41e:	e7f6      	b.n	800e40e <_scanf_float+0x12e>
 800e420:	6821      	ldr	r1, [r4, #0]
 800e422:	05c8      	lsls	r0, r1, #23
 800e424:	d51e      	bpl.n	800e464 <_scanf_float+0x184>
 800e426:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800e42a:	6021      	str	r1, [r4, #0]
 800e42c:	3701      	adds	r7, #1
 800e42e:	f1bb 0f00 	cmp.w	fp, #0
 800e432:	d003      	beq.n	800e43c <_scanf_float+0x15c>
 800e434:	3201      	adds	r2, #1
 800e436:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e43a:	60a2      	str	r2, [r4, #8]
 800e43c:	68a3      	ldr	r3, [r4, #8]
 800e43e:	3b01      	subs	r3, #1
 800e440:	60a3      	str	r3, [r4, #8]
 800e442:	6923      	ldr	r3, [r4, #16]
 800e444:	3301      	adds	r3, #1
 800e446:	6123      	str	r3, [r4, #16]
 800e448:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e44c:	3b01      	subs	r3, #1
 800e44e:	2b00      	cmp	r3, #0
 800e450:	f8c9 3004 	str.w	r3, [r9, #4]
 800e454:	f340 8082 	ble.w	800e55c <_scanf_float+0x27c>
 800e458:	f8d9 3000 	ldr.w	r3, [r9]
 800e45c:	3301      	adds	r3, #1
 800e45e:	f8c9 3000 	str.w	r3, [r9]
 800e462:	e762      	b.n	800e32a <_scanf_float+0x4a>
 800e464:	eb1a 0105 	adds.w	r1, sl, r5
 800e468:	f47f af6d 	bne.w	800e346 <_scanf_float+0x66>
 800e46c:	6822      	ldr	r2, [r4, #0]
 800e46e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800e472:	6022      	str	r2, [r4, #0]
 800e474:	460d      	mov	r5, r1
 800e476:	468a      	mov	sl, r1
 800e478:	f806 3b01 	strb.w	r3, [r6], #1
 800e47c:	e7de      	b.n	800e43c <_scanf_float+0x15c>
 800e47e:	6822      	ldr	r2, [r4, #0]
 800e480:	0610      	lsls	r0, r2, #24
 800e482:	f57f af60 	bpl.w	800e346 <_scanf_float+0x66>
 800e486:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e48a:	6022      	str	r2, [r4, #0]
 800e48c:	e7f4      	b.n	800e478 <_scanf_float+0x198>
 800e48e:	f1ba 0f00 	cmp.w	sl, #0
 800e492:	d10c      	bne.n	800e4ae <_scanf_float+0x1ce>
 800e494:	b977      	cbnz	r7, 800e4b4 <_scanf_float+0x1d4>
 800e496:	6822      	ldr	r2, [r4, #0]
 800e498:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e49c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e4a0:	d108      	bne.n	800e4b4 <_scanf_float+0x1d4>
 800e4a2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e4a6:	6022      	str	r2, [r4, #0]
 800e4a8:	f04f 0a01 	mov.w	sl, #1
 800e4ac:	e7e4      	b.n	800e478 <_scanf_float+0x198>
 800e4ae:	f1ba 0f02 	cmp.w	sl, #2
 800e4b2:	d050      	beq.n	800e556 <_scanf_float+0x276>
 800e4b4:	2d01      	cmp	r5, #1
 800e4b6:	d002      	beq.n	800e4be <_scanf_float+0x1de>
 800e4b8:	2d04      	cmp	r5, #4
 800e4ba:	f47f af44 	bne.w	800e346 <_scanf_float+0x66>
 800e4be:	3501      	adds	r5, #1
 800e4c0:	b2ed      	uxtb	r5, r5
 800e4c2:	e7d9      	b.n	800e478 <_scanf_float+0x198>
 800e4c4:	f1ba 0f01 	cmp.w	sl, #1
 800e4c8:	f47f af3d 	bne.w	800e346 <_scanf_float+0x66>
 800e4cc:	f04f 0a02 	mov.w	sl, #2
 800e4d0:	e7d2      	b.n	800e478 <_scanf_float+0x198>
 800e4d2:	b975      	cbnz	r5, 800e4f2 <_scanf_float+0x212>
 800e4d4:	2f00      	cmp	r7, #0
 800e4d6:	f47f af37 	bne.w	800e348 <_scanf_float+0x68>
 800e4da:	6822      	ldr	r2, [r4, #0]
 800e4dc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e4e0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e4e4:	f040 8103 	bne.w	800e6ee <_scanf_float+0x40e>
 800e4e8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e4ec:	6022      	str	r2, [r4, #0]
 800e4ee:	2501      	movs	r5, #1
 800e4f0:	e7c2      	b.n	800e478 <_scanf_float+0x198>
 800e4f2:	2d03      	cmp	r5, #3
 800e4f4:	d0e3      	beq.n	800e4be <_scanf_float+0x1de>
 800e4f6:	2d05      	cmp	r5, #5
 800e4f8:	e7df      	b.n	800e4ba <_scanf_float+0x1da>
 800e4fa:	2d02      	cmp	r5, #2
 800e4fc:	f47f af23 	bne.w	800e346 <_scanf_float+0x66>
 800e500:	2503      	movs	r5, #3
 800e502:	e7b9      	b.n	800e478 <_scanf_float+0x198>
 800e504:	2d06      	cmp	r5, #6
 800e506:	f47f af1e 	bne.w	800e346 <_scanf_float+0x66>
 800e50a:	2507      	movs	r5, #7
 800e50c:	e7b4      	b.n	800e478 <_scanf_float+0x198>
 800e50e:	6822      	ldr	r2, [r4, #0]
 800e510:	0591      	lsls	r1, r2, #22
 800e512:	f57f af18 	bpl.w	800e346 <_scanf_float+0x66>
 800e516:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800e51a:	6022      	str	r2, [r4, #0]
 800e51c:	9702      	str	r7, [sp, #8]
 800e51e:	e7ab      	b.n	800e478 <_scanf_float+0x198>
 800e520:	6822      	ldr	r2, [r4, #0]
 800e522:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800e526:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800e52a:	d005      	beq.n	800e538 <_scanf_float+0x258>
 800e52c:	0550      	lsls	r0, r2, #21
 800e52e:	f57f af0a 	bpl.w	800e346 <_scanf_float+0x66>
 800e532:	2f00      	cmp	r7, #0
 800e534:	f000 80db 	beq.w	800e6ee <_scanf_float+0x40e>
 800e538:	0591      	lsls	r1, r2, #22
 800e53a:	bf58      	it	pl
 800e53c:	9902      	ldrpl	r1, [sp, #8]
 800e53e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e542:	bf58      	it	pl
 800e544:	1a79      	subpl	r1, r7, r1
 800e546:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800e54a:	bf58      	it	pl
 800e54c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e550:	6022      	str	r2, [r4, #0]
 800e552:	2700      	movs	r7, #0
 800e554:	e790      	b.n	800e478 <_scanf_float+0x198>
 800e556:	f04f 0a03 	mov.w	sl, #3
 800e55a:	e78d      	b.n	800e478 <_scanf_float+0x198>
 800e55c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e560:	4649      	mov	r1, r9
 800e562:	4640      	mov	r0, r8
 800e564:	4798      	blx	r3
 800e566:	2800      	cmp	r0, #0
 800e568:	f43f aedf 	beq.w	800e32a <_scanf_float+0x4a>
 800e56c:	e6eb      	b.n	800e346 <_scanf_float+0x66>
 800e56e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e572:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e576:	464a      	mov	r2, r9
 800e578:	4640      	mov	r0, r8
 800e57a:	4798      	blx	r3
 800e57c:	6923      	ldr	r3, [r4, #16]
 800e57e:	3b01      	subs	r3, #1
 800e580:	6123      	str	r3, [r4, #16]
 800e582:	e6eb      	b.n	800e35c <_scanf_float+0x7c>
 800e584:	1e6b      	subs	r3, r5, #1
 800e586:	2b06      	cmp	r3, #6
 800e588:	d824      	bhi.n	800e5d4 <_scanf_float+0x2f4>
 800e58a:	2d02      	cmp	r5, #2
 800e58c:	d836      	bhi.n	800e5fc <_scanf_float+0x31c>
 800e58e:	9b01      	ldr	r3, [sp, #4]
 800e590:	429e      	cmp	r6, r3
 800e592:	f67f aee7 	bls.w	800e364 <_scanf_float+0x84>
 800e596:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e59a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e59e:	464a      	mov	r2, r9
 800e5a0:	4640      	mov	r0, r8
 800e5a2:	4798      	blx	r3
 800e5a4:	6923      	ldr	r3, [r4, #16]
 800e5a6:	3b01      	subs	r3, #1
 800e5a8:	6123      	str	r3, [r4, #16]
 800e5aa:	e7f0      	b.n	800e58e <_scanf_float+0x2ae>
 800e5ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e5b0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800e5b4:	464a      	mov	r2, r9
 800e5b6:	4640      	mov	r0, r8
 800e5b8:	4798      	blx	r3
 800e5ba:	6923      	ldr	r3, [r4, #16]
 800e5bc:	3b01      	subs	r3, #1
 800e5be:	6123      	str	r3, [r4, #16]
 800e5c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e5c4:	fa5f fa8a 	uxtb.w	sl, sl
 800e5c8:	f1ba 0f02 	cmp.w	sl, #2
 800e5cc:	d1ee      	bne.n	800e5ac <_scanf_float+0x2cc>
 800e5ce:	3d03      	subs	r5, #3
 800e5d0:	b2ed      	uxtb	r5, r5
 800e5d2:	1b76      	subs	r6, r6, r5
 800e5d4:	6823      	ldr	r3, [r4, #0]
 800e5d6:	05da      	lsls	r2, r3, #23
 800e5d8:	d530      	bpl.n	800e63c <_scanf_float+0x35c>
 800e5da:	055b      	lsls	r3, r3, #21
 800e5dc:	d511      	bpl.n	800e602 <_scanf_float+0x322>
 800e5de:	9b01      	ldr	r3, [sp, #4]
 800e5e0:	429e      	cmp	r6, r3
 800e5e2:	f67f aebf 	bls.w	800e364 <_scanf_float+0x84>
 800e5e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e5ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e5ee:	464a      	mov	r2, r9
 800e5f0:	4640      	mov	r0, r8
 800e5f2:	4798      	blx	r3
 800e5f4:	6923      	ldr	r3, [r4, #16]
 800e5f6:	3b01      	subs	r3, #1
 800e5f8:	6123      	str	r3, [r4, #16]
 800e5fa:	e7f0      	b.n	800e5de <_scanf_float+0x2fe>
 800e5fc:	46aa      	mov	sl, r5
 800e5fe:	46b3      	mov	fp, r6
 800e600:	e7de      	b.n	800e5c0 <_scanf_float+0x2e0>
 800e602:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e606:	6923      	ldr	r3, [r4, #16]
 800e608:	2965      	cmp	r1, #101	@ 0x65
 800e60a:	f103 33ff 	add.w	r3, r3, #4294967295
 800e60e:	f106 35ff 	add.w	r5, r6, #4294967295
 800e612:	6123      	str	r3, [r4, #16]
 800e614:	d00c      	beq.n	800e630 <_scanf_float+0x350>
 800e616:	2945      	cmp	r1, #69	@ 0x45
 800e618:	d00a      	beq.n	800e630 <_scanf_float+0x350>
 800e61a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e61e:	464a      	mov	r2, r9
 800e620:	4640      	mov	r0, r8
 800e622:	4798      	blx	r3
 800e624:	6923      	ldr	r3, [r4, #16]
 800e626:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e62a:	3b01      	subs	r3, #1
 800e62c:	1eb5      	subs	r5, r6, #2
 800e62e:	6123      	str	r3, [r4, #16]
 800e630:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e634:	464a      	mov	r2, r9
 800e636:	4640      	mov	r0, r8
 800e638:	4798      	blx	r3
 800e63a:	462e      	mov	r6, r5
 800e63c:	6822      	ldr	r2, [r4, #0]
 800e63e:	f012 0210 	ands.w	r2, r2, #16
 800e642:	d001      	beq.n	800e648 <_scanf_float+0x368>
 800e644:	2000      	movs	r0, #0
 800e646:	e68e      	b.n	800e366 <_scanf_float+0x86>
 800e648:	7032      	strb	r2, [r6, #0]
 800e64a:	6823      	ldr	r3, [r4, #0]
 800e64c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e650:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e654:	d125      	bne.n	800e6a2 <_scanf_float+0x3c2>
 800e656:	9b02      	ldr	r3, [sp, #8]
 800e658:	429f      	cmp	r7, r3
 800e65a:	d00a      	beq.n	800e672 <_scanf_float+0x392>
 800e65c:	1bda      	subs	r2, r3, r7
 800e65e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800e662:	429e      	cmp	r6, r3
 800e664:	bf28      	it	cs
 800e666:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800e66a:	4922      	ldr	r1, [pc, #136]	@ (800e6f4 <_scanf_float+0x414>)
 800e66c:	4630      	mov	r0, r6
 800e66e:	f000 f93d 	bl	800e8ec <siprintf>
 800e672:	9901      	ldr	r1, [sp, #4]
 800e674:	2200      	movs	r2, #0
 800e676:	4640      	mov	r0, r8
 800e678:	f7ff f9ca 	bl	800da10 <_strtod_r>
 800e67c:	9b03      	ldr	r3, [sp, #12]
 800e67e:	6821      	ldr	r1, [r4, #0]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	f011 0f02 	tst.w	r1, #2
 800e686:	ec57 6b10 	vmov	r6, r7, d0
 800e68a:	f103 0204 	add.w	r2, r3, #4
 800e68e:	d015      	beq.n	800e6bc <_scanf_float+0x3dc>
 800e690:	9903      	ldr	r1, [sp, #12]
 800e692:	600a      	str	r2, [r1, #0]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	e9c3 6700 	strd	r6, r7, [r3]
 800e69a:	68e3      	ldr	r3, [r4, #12]
 800e69c:	3301      	adds	r3, #1
 800e69e:	60e3      	str	r3, [r4, #12]
 800e6a0:	e7d0      	b.n	800e644 <_scanf_float+0x364>
 800e6a2:	9b04      	ldr	r3, [sp, #16]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d0e4      	beq.n	800e672 <_scanf_float+0x392>
 800e6a8:	9905      	ldr	r1, [sp, #20]
 800e6aa:	230a      	movs	r3, #10
 800e6ac:	3101      	adds	r1, #1
 800e6ae:	4640      	mov	r0, r8
 800e6b0:	f002 fa5a 	bl	8010b68 <_strtol_r>
 800e6b4:	9b04      	ldr	r3, [sp, #16]
 800e6b6:	9e05      	ldr	r6, [sp, #20]
 800e6b8:	1ac2      	subs	r2, r0, r3
 800e6ba:	e7d0      	b.n	800e65e <_scanf_float+0x37e>
 800e6bc:	f011 0f04 	tst.w	r1, #4
 800e6c0:	9903      	ldr	r1, [sp, #12]
 800e6c2:	600a      	str	r2, [r1, #0]
 800e6c4:	d1e6      	bne.n	800e694 <_scanf_float+0x3b4>
 800e6c6:	681d      	ldr	r5, [r3, #0]
 800e6c8:	4632      	mov	r2, r6
 800e6ca:	463b      	mov	r3, r7
 800e6cc:	4630      	mov	r0, r6
 800e6ce:	4639      	mov	r1, r7
 800e6d0:	f7f2 fa34 	bl	8000b3c <__aeabi_dcmpun>
 800e6d4:	b128      	cbz	r0, 800e6e2 <_scanf_float+0x402>
 800e6d6:	4808      	ldr	r0, [pc, #32]	@ (800e6f8 <_scanf_float+0x418>)
 800e6d8:	f000 fa76 	bl	800ebc8 <nanf>
 800e6dc:	ed85 0a00 	vstr	s0, [r5]
 800e6e0:	e7db      	b.n	800e69a <_scanf_float+0x3ba>
 800e6e2:	4630      	mov	r0, r6
 800e6e4:	4639      	mov	r1, r7
 800e6e6:	f7f2 fa87 	bl	8000bf8 <__aeabi_d2f>
 800e6ea:	6028      	str	r0, [r5, #0]
 800e6ec:	e7d5      	b.n	800e69a <_scanf_float+0x3ba>
 800e6ee:	2700      	movs	r7, #0
 800e6f0:	e62e      	b.n	800e350 <_scanf_float+0x70>
 800e6f2:	bf00      	nop
 800e6f4:	080118e2 	.word	0x080118e2
 800e6f8:	08011a81 	.word	0x08011a81

0800e6fc <std>:
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	b510      	push	{r4, lr}
 800e700:	4604      	mov	r4, r0
 800e702:	e9c0 3300 	strd	r3, r3, [r0]
 800e706:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e70a:	6083      	str	r3, [r0, #8]
 800e70c:	8181      	strh	r1, [r0, #12]
 800e70e:	6643      	str	r3, [r0, #100]	@ 0x64
 800e710:	81c2      	strh	r2, [r0, #14]
 800e712:	6183      	str	r3, [r0, #24]
 800e714:	4619      	mov	r1, r3
 800e716:	2208      	movs	r2, #8
 800e718:	305c      	adds	r0, #92	@ 0x5c
 800e71a:	f000 f94c 	bl	800e9b6 <memset>
 800e71e:	4b0d      	ldr	r3, [pc, #52]	@ (800e754 <std+0x58>)
 800e720:	6263      	str	r3, [r4, #36]	@ 0x24
 800e722:	4b0d      	ldr	r3, [pc, #52]	@ (800e758 <std+0x5c>)
 800e724:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e726:	4b0d      	ldr	r3, [pc, #52]	@ (800e75c <std+0x60>)
 800e728:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e72a:	4b0d      	ldr	r3, [pc, #52]	@ (800e760 <std+0x64>)
 800e72c:	6323      	str	r3, [r4, #48]	@ 0x30
 800e72e:	4b0d      	ldr	r3, [pc, #52]	@ (800e764 <std+0x68>)
 800e730:	6224      	str	r4, [r4, #32]
 800e732:	429c      	cmp	r4, r3
 800e734:	d006      	beq.n	800e744 <std+0x48>
 800e736:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e73a:	4294      	cmp	r4, r2
 800e73c:	d002      	beq.n	800e744 <std+0x48>
 800e73e:	33d0      	adds	r3, #208	@ 0xd0
 800e740:	429c      	cmp	r4, r3
 800e742:	d105      	bne.n	800e750 <std+0x54>
 800e744:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e74c:	f000 ba20 	b.w	800eb90 <__retarget_lock_init_recursive>
 800e750:	bd10      	pop	{r4, pc}
 800e752:	bf00      	nop
 800e754:	0800e931 	.word	0x0800e931
 800e758:	0800e953 	.word	0x0800e953
 800e75c:	0800e98b 	.word	0x0800e98b
 800e760:	0800e9af 	.word	0x0800e9af
 800e764:	20005170 	.word	0x20005170

0800e768 <stdio_exit_handler>:
 800e768:	4a02      	ldr	r2, [pc, #8]	@ (800e774 <stdio_exit_handler+0xc>)
 800e76a:	4903      	ldr	r1, [pc, #12]	@ (800e778 <stdio_exit_handler+0x10>)
 800e76c:	4803      	ldr	r0, [pc, #12]	@ (800e77c <stdio_exit_handler+0x14>)
 800e76e:	f000 b869 	b.w	800e844 <_fwalk_sglue>
 800e772:	bf00      	nop
 800e774:	200000f0 	.word	0x200000f0
 800e778:	08010f3d 	.word	0x08010f3d
 800e77c:	2000026c 	.word	0x2000026c

0800e780 <cleanup_stdio>:
 800e780:	6841      	ldr	r1, [r0, #4]
 800e782:	4b0c      	ldr	r3, [pc, #48]	@ (800e7b4 <cleanup_stdio+0x34>)
 800e784:	4299      	cmp	r1, r3
 800e786:	b510      	push	{r4, lr}
 800e788:	4604      	mov	r4, r0
 800e78a:	d001      	beq.n	800e790 <cleanup_stdio+0x10>
 800e78c:	f002 fbd6 	bl	8010f3c <_fflush_r>
 800e790:	68a1      	ldr	r1, [r4, #8]
 800e792:	4b09      	ldr	r3, [pc, #36]	@ (800e7b8 <cleanup_stdio+0x38>)
 800e794:	4299      	cmp	r1, r3
 800e796:	d002      	beq.n	800e79e <cleanup_stdio+0x1e>
 800e798:	4620      	mov	r0, r4
 800e79a:	f002 fbcf 	bl	8010f3c <_fflush_r>
 800e79e:	68e1      	ldr	r1, [r4, #12]
 800e7a0:	4b06      	ldr	r3, [pc, #24]	@ (800e7bc <cleanup_stdio+0x3c>)
 800e7a2:	4299      	cmp	r1, r3
 800e7a4:	d004      	beq.n	800e7b0 <cleanup_stdio+0x30>
 800e7a6:	4620      	mov	r0, r4
 800e7a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e7ac:	f002 bbc6 	b.w	8010f3c <_fflush_r>
 800e7b0:	bd10      	pop	{r4, pc}
 800e7b2:	bf00      	nop
 800e7b4:	20005170 	.word	0x20005170
 800e7b8:	200051d8 	.word	0x200051d8
 800e7bc:	20005240 	.word	0x20005240

0800e7c0 <global_stdio_init.part.0>:
 800e7c0:	b510      	push	{r4, lr}
 800e7c2:	4b0b      	ldr	r3, [pc, #44]	@ (800e7f0 <global_stdio_init.part.0+0x30>)
 800e7c4:	4c0b      	ldr	r4, [pc, #44]	@ (800e7f4 <global_stdio_init.part.0+0x34>)
 800e7c6:	4a0c      	ldr	r2, [pc, #48]	@ (800e7f8 <global_stdio_init.part.0+0x38>)
 800e7c8:	601a      	str	r2, [r3, #0]
 800e7ca:	4620      	mov	r0, r4
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	2104      	movs	r1, #4
 800e7d0:	f7ff ff94 	bl	800e6fc <std>
 800e7d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e7d8:	2201      	movs	r2, #1
 800e7da:	2109      	movs	r1, #9
 800e7dc:	f7ff ff8e 	bl	800e6fc <std>
 800e7e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e7e4:	2202      	movs	r2, #2
 800e7e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e7ea:	2112      	movs	r1, #18
 800e7ec:	f7ff bf86 	b.w	800e6fc <std>
 800e7f0:	200052a8 	.word	0x200052a8
 800e7f4:	20005170 	.word	0x20005170
 800e7f8:	0800e769 	.word	0x0800e769

0800e7fc <__sfp_lock_acquire>:
 800e7fc:	4801      	ldr	r0, [pc, #4]	@ (800e804 <__sfp_lock_acquire+0x8>)
 800e7fe:	f000 b9c8 	b.w	800eb92 <__retarget_lock_acquire_recursive>
 800e802:	bf00      	nop
 800e804:	200052b1 	.word	0x200052b1

0800e808 <__sfp_lock_release>:
 800e808:	4801      	ldr	r0, [pc, #4]	@ (800e810 <__sfp_lock_release+0x8>)
 800e80a:	f000 b9c3 	b.w	800eb94 <__retarget_lock_release_recursive>
 800e80e:	bf00      	nop
 800e810:	200052b1 	.word	0x200052b1

0800e814 <__sinit>:
 800e814:	b510      	push	{r4, lr}
 800e816:	4604      	mov	r4, r0
 800e818:	f7ff fff0 	bl	800e7fc <__sfp_lock_acquire>
 800e81c:	6a23      	ldr	r3, [r4, #32]
 800e81e:	b11b      	cbz	r3, 800e828 <__sinit+0x14>
 800e820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e824:	f7ff bff0 	b.w	800e808 <__sfp_lock_release>
 800e828:	4b04      	ldr	r3, [pc, #16]	@ (800e83c <__sinit+0x28>)
 800e82a:	6223      	str	r3, [r4, #32]
 800e82c:	4b04      	ldr	r3, [pc, #16]	@ (800e840 <__sinit+0x2c>)
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d1f5      	bne.n	800e820 <__sinit+0xc>
 800e834:	f7ff ffc4 	bl	800e7c0 <global_stdio_init.part.0>
 800e838:	e7f2      	b.n	800e820 <__sinit+0xc>
 800e83a:	bf00      	nop
 800e83c:	0800e781 	.word	0x0800e781
 800e840:	200052a8 	.word	0x200052a8

0800e844 <_fwalk_sglue>:
 800e844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e848:	4607      	mov	r7, r0
 800e84a:	4688      	mov	r8, r1
 800e84c:	4614      	mov	r4, r2
 800e84e:	2600      	movs	r6, #0
 800e850:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e854:	f1b9 0901 	subs.w	r9, r9, #1
 800e858:	d505      	bpl.n	800e866 <_fwalk_sglue+0x22>
 800e85a:	6824      	ldr	r4, [r4, #0]
 800e85c:	2c00      	cmp	r4, #0
 800e85e:	d1f7      	bne.n	800e850 <_fwalk_sglue+0xc>
 800e860:	4630      	mov	r0, r6
 800e862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e866:	89ab      	ldrh	r3, [r5, #12]
 800e868:	2b01      	cmp	r3, #1
 800e86a:	d907      	bls.n	800e87c <_fwalk_sglue+0x38>
 800e86c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e870:	3301      	adds	r3, #1
 800e872:	d003      	beq.n	800e87c <_fwalk_sglue+0x38>
 800e874:	4629      	mov	r1, r5
 800e876:	4638      	mov	r0, r7
 800e878:	47c0      	blx	r8
 800e87a:	4306      	orrs	r6, r0
 800e87c:	3568      	adds	r5, #104	@ 0x68
 800e87e:	e7e9      	b.n	800e854 <_fwalk_sglue+0x10>

0800e880 <sniprintf>:
 800e880:	b40c      	push	{r2, r3}
 800e882:	b530      	push	{r4, r5, lr}
 800e884:	4b18      	ldr	r3, [pc, #96]	@ (800e8e8 <sniprintf+0x68>)
 800e886:	1e0c      	subs	r4, r1, #0
 800e888:	681d      	ldr	r5, [r3, #0]
 800e88a:	b09d      	sub	sp, #116	@ 0x74
 800e88c:	da08      	bge.n	800e8a0 <sniprintf+0x20>
 800e88e:	238b      	movs	r3, #139	@ 0x8b
 800e890:	602b      	str	r3, [r5, #0]
 800e892:	f04f 30ff 	mov.w	r0, #4294967295
 800e896:	b01d      	add	sp, #116	@ 0x74
 800e898:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e89c:	b002      	add	sp, #8
 800e89e:	4770      	bx	lr
 800e8a0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800e8a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e8a8:	f04f 0300 	mov.w	r3, #0
 800e8ac:	931b      	str	r3, [sp, #108]	@ 0x6c
 800e8ae:	bf14      	ite	ne
 800e8b0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e8b4:	4623      	moveq	r3, r4
 800e8b6:	9304      	str	r3, [sp, #16]
 800e8b8:	9307      	str	r3, [sp, #28]
 800e8ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e8be:	9002      	str	r0, [sp, #8]
 800e8c0:	9006      	str	r0, [sp, #24]
 800e8c2:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e8c6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e8c8:	ab21      	add	r3, sp, #132	@ 0x84
 800e8ca:	a902      	add	r1, sp, #8
 800e8cc:	4628      	mov	r0, r5
 800e8ce:	9301      	str	r3, [sp, #4]
 800e8d0:	f002 f9b4 	bl	8010c3c <_svfiprintf_r>
 800e8d4:	1c43      	adds	r3, r0, #1
 800e8d6:	bfbc      	itt	lt
 800e8d8:	238b      	movlt	r3, #139	@ 0x8b
 800e8da:	602b      	strlt	r3, [r5, #0]
 800e8dc:	2c00      	cmp	r4, #0
 800e8de:	d0da      	beq.n	800e896 <sniprintf+0x16>
 800e8e0:	9b02      	ldr	r3, [sp, #8]
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	701a      	strb	r2, [r3, #0]
 800e8e6:	e7d6      	b.n	800e896 <sniprintf+0x16>
 800e8e8:	20000268 	.word	0x20000268

0800e8ec <siprintf>:
 800e8ec:	b40e      	push	{r1, r2, r3}
 800e8ee:	b510      	push	{r4, lr}
 800e8f0:	b09d      	sub	sp, #116	@ 0x74
 800e8f2:	ab1f      	add	r3, sp, #124	@ 0x7c
 800e8f4:	9002      	str	r0, [sp, #8]
 800e8f6:	9006      	str	r0, [sp, #24]
 800e8f8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e8fc:	480a      	ldr	r0, [pc, #40]	@ (800e928 <siprintf+0x3c>)
 800e8fe:	9107      	str	r1, [sp, #28]
 800e900:	9104      	str	r1, [sp, #16]
 800e902:	490a      	ldr	r1, [pc, #40]	@ (800e92c <siprintf+0x40>)
 800e904:	f853 2b04 	ldr.w	r2, [r3], #4
 800e908:	9105      	str	r1, [sp, #20]
 800e90a:	2400      	movs	r4, #0
 800e90c:	a902      	add	r1, sp, #8
 800e90e:	6800      	ldr	r0, [r0, #0]
 800e910:	9301      	str	r3, [sp, #4]
 800e912:	941b      	str	r4, [sp, #108]	@ 0x6c
 800e914:	f002 f992 	bl	8010c3c <_svfiprintf_r>
 800e918:	9b02      	ldr	r3, [sp, #8]
 800e91a:	701c      	strb	r4, [r3, #0]
 800e91c:	b01d      	add	sp, #116	@ 0x74
 800e91e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e922:	b003      	add	sp, #12
 800e924:	4770      	bx	lr
 800e926:	bf00      	nop
 800e928:	20000268 	.word	0x20000268
 800e92c:	ffff0208 	.word	0xffff0208

0800e930 <__sread>:
 800e930:	b510      	push	{r4, lr}
 800e932:	460c      	mov	r4, r1
 800e934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e938:	f000 f8dc 	bl	800eaf4 <_read_r>
 800e93c:	2800      	cmp	r0, #0
 800e93e:	bfab      	itete	ge
 800e940:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e942:	89a3      	ldrhlt	r3, [r4, #12]
 800e944:	181b      	addge	r3, r3, r0
 800e946:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e94a:	bfac      	ite	ge
 800e94c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e94e:	81a3      	strhlt	r3, [r4, #12]
 800e950:	bd10      	pop	{r4, pc}

0800e952 <__swrite>:
 800e952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e956:	461f      	mov	r7, r3
 800e958:	898b      	ldrh	r3, [r1, #12]
 800e95a:	05db      	lsls	r3, r3, #23
 800e95c:	4605      	mov	r5, r0
 800e95e:	460c      	mov	r4, r1
 800e960:	4616      	mov	r6, r2
 800e962:	d505      	bpl.n	800e970 <__swrite+0x1e>
 800e964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e968:	2302      	movs	r3, #2
 800e96a:	2200      	movs	r2, #0
 800e96c:	f000 f8b0 	bl	800ead0 <_lseek_r>
 800e970:	89a3      	ldrh	r3, [r4, #12]
 800e972:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e976:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e97a:	81a3      	strh	r3, [r4, #12]
 800e97c:	4632      	mov	r2, r6
 800e97e:	463b      	mov	r3, r7
 800e980:	4628      	mov	r0, r5
 800e982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e986:	f000 b8c7 	b.w	800eb18 <_write_r>

0800e98a <__sseek>:
 800e98a:	b510      	push	{r4, lr}
 800e98c:	460c      	mov	r4, r1
 800e98e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e992:	f000 f89d 	bl	800ead0 <_lseek_r>
 800e996:	1c43      	adds	r3, r0, #1
 800e998:	89a3      	ldrh	r3, [r4, #12]
 800e99a:	bf15      	itete	ne
 800e99c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e99e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e9a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e9a6:	81a3      	strheq	r3, [r4, #12]
 800e9a8:	bf18      	it	ne
 800e9aa:	81a3      	strhne	r3, [r4, #12]
 800e9ac:	bd10      	pop	{r4, pc}

0800e9ae <__sclose>:
 800e9ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9b2:	f000 b81f 	b.w	800e9f4 <_close_r>

0800e9b6 <memset>:
 800e9b6:	4402      	add	r2, r0
 800e9b8:	4603      	mov	r3, r0
 800e9ba:	4293      	cmp	r3, r2
 800e9bc:	d100      	bne.n	800e9c0 <memset+0xa>
 800e9be:	4770      	bx	lr
 800e9c0:	f803 1b01 	strb.w	r1, [r3], #1
 800e9c4:	e7f9      	b.n	800e9ba <memset+0x4>

0800e9c6 <strncmp>:
 800e9c6:	b510      	push	{r4, lr}
 800e9c8:	b16a      	cbz	r2, 800e9e6 <strncmp+0x20>
 800e9ca:	3901      	subs	r1, #1
 800e9cc:	1884      	adds	r4, r0, r2
 800e9ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e9d2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e9d6:	429a      	cmp	r2, r3
 800e9d8:	d103      	bne.n	800e9e2 <strncmp+0x1c>
 800e9da:	42a0      	cmp	r0, r4
 800e9dc:	d001      	beq.n	800e9e2 <strncmp+0x1c>
 800e9de:	2a00      	cmp	r2, #0
 800e9e0:	d1f5      	bne.n	800e9ce <strncmp+0x8>
 800e9e2:	1ad0      	subs	r0, r2, r3
 800e9e4:	bd10      	pop	{r4, pc}
 800e9e6:	4610      	mov	r0, r2
 800e9e8:	e7fc      	b.n	800e9e4 <strncmp+0x1e>
	...

0800e9ec <_localeconv_r>:
 800e9ec:	4800      	ldr	r0, [pc, #0]	@ (800e9f0 <_localeconv_r+0x4>)
 800e9ee:	4770      	bx	lr
 800e9f0:	200001ec 	.word	0x200001ec

0800e9f4 <_close_r>:
 800e9f4:	b538      	push	{r3, r4, r5, lr}
 800e9f6:	4d06      	ldr	r5, [pc, #24]	@ (800ea10 <_close_r+0x1c>)
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	4604      	mov	r4, r0
 800e9fc:	4608      	mov	r0, r1
 800e9fe:	602b      	str	r3, [r5, #0]
 800ea00:	f7f5 fb4e 	bl	80040a0 <_close>
 800ea04:	1c43      	adds	r3, r0, #1
 800ea06:	d102      	bne.n	800ea0e <_close_r+0x1a>
 800ea08:	682b      	ldr	r3, [r5, #0]
 800ea0a:	b103      	cbz	r3, 800ea0e <_close_r+0x1a>
 800ea0c:	6023      	str	r3, [r4, #0]
 800ea0e:	bd38      	pop	{r3, r4, r5, pc}
 800ea10:	200052ac 	.word	0x200052ac

0800ea14 <_reclaim_reent>:
 800ea14:	4b2d      	ldr	r3, [pc, #180]	@ (800eacc <_reclaim_reent+0xb8>)
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	4283      	cmp	r3, r0
 800ea1a:	b570      	push	{r4, r5, r6, lr}
 800ea1c:	4604      	mov	r4, r0
 800ea1e:	d053      	beq.n	800eac8 <_reclaim_reent+0xb4>
 800ea20:	69c3      	ldr	r3, [r0, #28]
 800ea22:	b31b      	cbz	r3, 800ea6c <_reclaim_reent+0x58>
 800ea24:	68db      	ldr	r3, [r3, #12]
 800ea26:	b163      	cbz	r3, 800ea42 <_reclaim_reent+0x2e>
 800ea28:	2500      	movs	r5, #0
 800ea2a:	69e3      	ldr	r3, [r4, #28]
 800ea2c:	68db      	ldr	r3, [r3, #12]
 800ea2e:	5959      	ldr	r1, [r3, r5]
 800ea30:	b9b1      	cbnz	r1, 800ea60 <_reclaim_reent+0x4c>
 800ea32:	3504      	adds	r5, #4
 800ea34:	2d80      	cmp	r5, #128	@ 0x80
 800ea36:	d1f8      	bne.n	800ea2a <_reclaim_reent+0x16>
 800ea38:	69e3      	ldr	r3, [r4, #28]
 800ea3a:	4620      	mov	r0, r4
 800ea3c:	68d9      	ldr	r1, [r3, #12]
 800ea3e:	f000 ff23 	bl	800f888 <_free_r>
 800ea42:	69e3      	ldr	r3, [r4, #28]
 800ea44:	6819      	ldr	r1, [r3, #0]
 800ea46:	b111      	cbz	r1, 800ea4e <_reclaim_reent+0x3a>
 800ea48:	4620      	mov	r0, r4
 800ea4a:	f000 ff1d 	bl	800f888 <_free_r>
 800ea4e:	69e3      	ldr	r3, [r4, #28]
 800ea50:	689d      	ldr	r5, [r3, #8]
 800ea52:	b15d      	cbz	r5, 800ea6c <_reclaim_reent+0x58>
 800ea54:	4629      	mov	r1, r5
 800ea56:	4620      	mov	r0, r4
 800ea58:	682d      	ldr	r5, [r5, #0]
 800ea5a:	f000 ff15 	bl	800f888 <_free_r>
 800ea5e:	e7f8      	b.n	800ea52 <_reclaim_reent+0x3e>
 800ea60:	680e      	ldr	r6, [r1, #0]
 800ea62:	4620      	mov	r0, r4
 800ea64:	f000 ff10 	bl	800f888 <_free_r>
 800ea68:	4631      	mov	r1, r6
 800ea6a:	e7e1      	b.n	800ea30 <_reclaim_reent+0x1c>
 800ea6c:	6961      	ldr	r1, [r4, #20]
 800ea6e:	b111      	cbz	r1, 800ea76 <_reclaim_reent+0x62>
 800ea70:	4620      	mov	r0, r4
 800ea72:	f000 ff09 	bl	800f888 <_free_r>
 800ea76:	69e1      	ldr	r1, [r4, #28]
 800ea78:	b111      	cbz	r1, 800ea80 <_reclaim_reent+0x6c>
 800ea7a:	4620      	mov	r0, r4
 800ea7c:	f000 ff04 	bl	800f888 <_free_r>
 800ea80:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ea82:	b111      	cbz	r1, 800ea8a <_reclaim_reent+0x76>
 800ea84:	4620      	mov	r0, r4
 800ea86:	f000 feff 	bl	800f888 <_free_r>
 800ea8a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ea8c:	b111      	cbz	r1, 800ea94 <_reclaim_reent+0x80>
 800ea8e:	4620      	mov	r0, r4
 800ea90:	f000 fefa 	bl	800f888 <_free_r>
 800ea94:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ea96:	b111      	cbz	r1, 800ea9e <_reclaim_reent+0x8a>
 800ea98:	4620      	mov	r0, r4
 800ea9a:	f000 fef5 	bl	800f888 <_free_r>
 800ea9e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800eaa0:	b111      	cbz	r1, 800eaa8 <_reclaim_reent+0x94>
 800eaa2:	4620      	mov	r0, r4
 800eaa4:	f000 fef0 	bl	800f888 <_free_r>
 800eaa8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800eaaa:	b111      	cbz	r1, 800eab2 <_reclaim_reent+0x9e>
 800eaac:	4620      	mov	r0, r4
 800eaae:	f000 feeb 	bl	800f888 <_free_r>
 800eab2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800eab4:	b111      	cbz	r1, 800eabc <_reclaim_reent+0xa8>
 800eab6:	4620      	mov	r0, r4
 800eab8:	f000 fee6 	bl	800f888 <_free_r>
 800eabc:	6a23      	ldr	r3, [r4, #32]
 800eabe:	b11b      	cbz	r3, 800eac8 <_reclaim_reent+0xb4>
 800eac0:	4620      	mov	r0, r4
 800eac2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eac6:	4718      	bx	r3
 800eac8:	bd70      	pop	{r4, r5, r6, pc}
 800eaca:	bf00      	nop
 800eacc:	20000268 	.word	0x20000268

0800ead0 <_lseek_r>:
 800ead0:	b538      	push	{r3, r4, r5, lr}
 800ead2:	4d07      	ldr	r5, [pc, #28]	@ (800eaf0 <_lseek_r+0x20>)
 800ead4:	4604      	mov	r4, r0
 800ead6:	4608      	mov	r0, r1
 800ead8:	4611      	mov	r1, r2
 800eada:	2200      	movs	r2, #0
 800eadc:	602a      	str	r2, [r5, #0]
 800eade:	461a      	mov	r2, r3
 800eae0:	f7f5 fb05 	bl	80040ee <_lseek>
 800eae4:	1c43      	adds	r3, r0, #1
 800eae6:	d102      	bne.n	800eaee <_lseek_r+0x1e>
 800eae8:	682b      	ldr	r3, [r5, #0]
 800eaea:	b103      	cbz	r3, 800eaee <_lseek_r+0x1e>
 800eaec:	6023      	str	r3, [r4, #0]
 800eaee:	bd38      	pop	{r3, r4, r5, pc}
 800eaf0:	200052ac 	.word	0x200052ac

0800eaf4 <_read_r>:
 800eaf4:	b538      	push	{r3, r4, r5, lr}
 800eaf6:	4d07      	ldr	r5, [pc, #28]	@ (800eb14 <_read_r+0x20>)
 800eaf8:	4604      	mov	r4, r0
 800eafa:	4608      	mov	r0, r1
 800eafc:	4611      	mov	r1, r2
 800eafe:	2200      	movs	r2, #0
 800eb00:	602a      	str	r2, [r5, #0]
 800eb02:	461a      	mov	r2, r3
 800eb04:	f7f5 fa93 	bl	800402e <_read>
 800eb08:	1c43      	adds	r3, r0, #1
 800eb0a:	d102      	bne.n	800eb12 <_read_r+0x1e>
 800eb0c:	682b      	ldr	r3, [r5, #0]
 800eb0e:	b103      	cbz	r3, 800eb12 <_read_r+0x1e>
 800eb10:	6023      	str	r3, [r4, #0]
 800eb12:	bd38      	pop	{r3, r4, r5, pc}
 800eb14:	200052ac 	.word	0x200052ac

0800eb18 <_write_r>:
 800eb18:	b538      	push	{r3, r4, r5, lr}
 800eb1a:	4d07      	ldr	r5, [pc, #28]	@ (800eb38 <_write_r+0x20>)
 800eb1c:	4604      	mov	r4, r0
 800eb1e:	4608      	mov	r0, r1
 800eb20:	4611      	mov	r1, r2
 800eb22:	2200      	movs	r2, #0
 800eb24:	602a      	str	r2, [r5, #0]
 800eb26:	461a      	mov	r2, r3
 800eb28:	f7f5 fa9e 	bl	8004068 <_write>
 800eb2c:	1c43      	adds	r3, r0, #1
 800eb2e:	d102      	bne.n	800eb36 <_write_r+0x1e>
 800eb30:	682b      	ldr	r3, [r5, #0]
 800eb32:	b103      	cbz	r3, 800eb36 <_write_r+0x1e>
 800eb34:	6023      	str	r3, [r4, #0]
 800eb36:	bd38      	pop	{r3, r4, r5, pc}
 800eb38:	200052ac 	.word	0x200052ac

0800eb3c <__errno>:
 800eb3c:	4b01      	ldr	r3, [pc, #4]	@ (800eb44 <__errno+0x8>)
 800eb3e:	6818      	ldr	r0, [r3, #0]
 800eb40:	4770      	bx	lr
 800eb42:	bf00      	nop
 800eb44:	20000268 	.word	0x20000268

0800eb48 <__libc_init_array>:
 800eb48:	b570      	push	{r4, r5, r6, lr}
 800eb4a:	4d0d      	ldr	r5, [pc, #52]	@ (800eb80 <__libc_init_array+0x38>)
 800eb4c:	4c0d      	ldr	r4, [pc, #52]	@ (800eb84 <__libc_init_array+0x3c>)
 800eb4e:	1b64      	subs	r4, r4, r5
 800eb50:	10a4      	asrs	r4, r4, #2
 800eb52:	2600      	movs	r6, #0
 800eb54:	42a6      	cmp	r6, r4
 800eb56:	d109      	bne.n	800eb6c <__libc_init_array+0x24>
 800eb58:	4d0b      	ldr	r5, [pc, #44]	@ (800eb88 <__libc_init_array+0x40>)
 800eb5a:	4c0c      	ldr	r4, [pc, #48]	@ (800eb8c <__libc_init_array+0x44>)
 800eb5c:	f002 fd5e 	bl	801161c <_init>
 800eb60:	1b64      	subs	r4, r4, r5
 800eb62:	10a4      	asrs	r4, r4, #2
 800eb64:	2600      	movs	r6, #0
 800eb66:	42a6      	cmp	r6, r4
 800eb68:	d105      	bne.n	800eb76 <__libc_init_array+0x2e>
 800eb6a:	bd70      	pop	{r4, r5, r6, pc}
 800eb6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb70:	4798      	blx	r3
 800eb72:	3601      	adds	r6, #1
 800eb74:	e7ee      	b.n	800eb54 <__libc_init_array+0xc>
 800eb76:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb7a:	4798      	blx	r3
 800eb7c:	3601      	adds	r6, #1
 800eb7e:	e7f2      	b.n	800eb66 <__libc_init_array+0x1e>
 800eb80:	08011ce4 	.word	0x08011ce4
 800eb84:	08011ce4 	.word	0x08011ce4
 800eb88:	08011ce4 	.word	0x08011ce4
 800eb8c:	08011ce8 	.word	0x08011ce8

0800eb90 <__retarget_lock_init_recursive>:
 800eb90:	4770      	bx	lr

0800eb92 <__retarget_lock_acquire_recursive>:
 800eb92:	4770      	bx	lr

0800eb94 <__retarget_lock_release_recursive>:
 800eb94:	4770      	bx	lr

0800eb96 <memcpy>:
 800eb96:	440a      	add	r2, r1
 800eb98:	4291      	cmp	r1, r2
 800eb9a:	f100 33ff 	add.w	r3, r0, #4294967295
 800eb9e:	d100      	bne.n	800eba2 <memcpy+0xc>
 800eba0:	4770      	bx	lr
 800eba2:	b510      	push	{r4, lr}
 800eba4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eba8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ebac:	4291      	cmp	r1, r2
 800ebae:	d1f9      	bne.n	800eba4 <memcpy+0xe>
 800ebb0:	bd10      	pop	{r4, pc}
 800ebb2:	0000      	movs	r0, r0
 800ebb4:	0000      	movs	r0, r0
	...

0800ebb8 <nan>:
 800ebb8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ebc0 <nan+0x8>
 800ebbc:	4770      	bx	lr
 800ebbe:	bf00      	nop
 800ebc0:	00000000 	.word	0x00000000
 800ebc4:	7ff80000 	.word	0x7ff80000

0800ebc8 <nanf>:
 800ebc8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ebd0 <nanf+0x8>
 800ebcc:	4770      	bx	lr
 800ebce:	bf00      	nop
 800ebd0:	7fc00000 	.word	0x7fc00000

0800ebd4 <quorem>:
 800ebd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebd8:	6903      	ldr	r3, [r0, #16]
 800ebda:	690c      	ldr	r4, [r1, #16]
 800ebdc:	42a3      	cmp	r3, r4
 800ebde:	4607      	mov	r7, r0
 800ebe0:	db7e      	blt.n	800ece0 <quorem+0x10c>
 800ebe2:	3c01      	subs	r4, #1
 800ebe4:	f101 0814 	add.w	r8, r1, #20
 800ebe8:	00a3      	lsls	r3, r4, #2
 800ebea:	f100 0514 	add.w	r5, r0, #20
 800ebee:	9300      	str	r3, [sp, #0]
 800ebf0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ebf4:	9301      	str	r3, [sp, #4]
 800ebf6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ebfa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ebfe:	3301      	adds	r3, #1
 800ec00:	429a      	cmp	r2, r3
 800ec02:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ec06:	fbb2 f6f3 	udiv	r6, r2, r3
 800ec0a:	d32e      	bcc.n	800ec6a <quorem+0x96>
 800ec0c:	f04f 0a00 	mov.w	sl, #0
 800ec10:	46c4      	mov	ip, r8
 800ec12:	46ae      	mov	lr, r5
 800ec14:	46d3      	mov	fp, sl
 800ec16:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ec1a:	b298      	uxth	r0, r3
 800ec1c:	fb06 a000 	mla	r0, r6, r0, sl
 800ec20:	0c02      	lsrs	r2, r0, #16
 800ec22:	0c1b      	lsrs	r3, r3, #16
 800ec24:	fb06 2303 	mla	r3, r6, r3, r2
 800ec28:	f8de 2000 	ldr.w	r2, [lr]
 800ec2c:	b280      	uxth	r0, r0
 800ec2e:	b292      	uxth	r2, r2
 800ec30:	1a12      	subs	r2, r2, r0
 800ec32:	445a      	add	r2, fp
 800ec34:	f8de 0000 	ldr.w	r0, [lr]
 800ec38:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ec3c:	b29b      	uxth	r3, r3
 800ec3e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ec42:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ec46:	b292      	uxth	r2, r2
 800ec48:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ec4c:	45e1      	cmp	r9, ip
 800ec4e:	f84e 2b04 	str.w	r2, [lr], #4
 800ec52:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ec56:	d2de      	bcs.n	800ec16 <quorem+0x42>
 800ec58:	9b00      	ldr	r3, [sp, #0]
 800ec5a:	58eb      	ldr	r3, [r5, r3]
 800ec5c:	b92b      	cbnz	r3, 800ec6a <quorem+0x96>
 800ec5e:	9b01      	ldr	r3, [sp, #4]
 800ec60:	3b04      	subs	r3, #4
 800ec62:	429d      	cmp	r5, r3
 800ec64:	461a      	mov	r2, r3
 800ec66:	d32f      	bcc.n	800ecc8 <quorem+0xf4>
 800ec68:	613c      	str	r4, [r7, #16]
 800ec6a:	4638      	mov	r0, r7
 800ec6c:	f001 fd14 	bl	8010698 <__mcmp>
 800ec70:	2800      	cmp	r0, #0
 800ec72:	db25      	blt.n	800ecc0 <quorem+0xec>
 800ec74:	4629      	mov	r1, r5
 800ec76:	2000      	movs	r0, #0
 800ec78:	f858 2b04 	ldr.w	r2, [r8], #4
 800ec7c:	f8d1 c000 	ldr.w	ip, [r1]
 800ec80:	fa1f fe82 	uxth.w	lr, r2
 800ec84:	fa1f f38c 	uxth.w	r3, ip
 800ec88:	eba3 030e 	sub.w	r3, r3, lr
 800ec8c:	4403      	add	r3, r0
 800ec8e:	0c12      	lsrs	r2, r2, #16
 800ec90:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ec94:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ec98:	b29b      	uxth	r3, r3
 800ec9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ec9e:	45c1      	cmp	r9, r8
 800eca0:	f841 3b04 	str.w	r3, [r1], #4
 800eca4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800eca8:	d2e6      	bcs.n	800ec78 <quorem+0xa4>
 800ecaa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ecae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ecb2:	b922      	cbnz	r2, 800ecbe <quorem+0xea>
 800ecb4:	3b04      	subs	r3, #4
 800ecb6:	429d      	cmp	r5, r3
 800ecb8:	461a      	mov	r2, r3
 800ecba:	d30b      	bcc.n	800ecd4 <quorem+0x100>
 800ecbc:	613c      	str	r4, [r7, #16]
 800ecbe:	3601      	adds	r6, #1
 800ecc0:	4630      	mov	r0, r6
 800ecc2:	b003      	add	sp, #12
 800ecc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecc8:	6812      	ldr	r2, [r2, #0]
 800ecca:	3b04      	subs	r3, #4
 800eccc:	2a00      	cmp	r2, #0
 800ecce:	d1cb      	bne.n	800ec68 <quorem+0x94>
 800ecd0:	3c01      	subs	r4, #1
 800ecd2:	e7c6      	b.n	800ec62 <quorem+0x8e>
 800ecd4:	6812      	ldr	r2, [r2, #0]
 800ecd6:	3b04      	subs	r3, #4
 800ecd8:	2a00      	cmp	r2, #0
 800ecda:	d1ef      	bne.n	800ecbc <quorem+0xe8>
 800ecdc:	3c01      	subs	r4, #1
 800ecde:	e7ea      	b.n	800ecb6 <quorem+0xe2>
 800ece0:	2000      	movs	r0, #0
 800ece2:	e7ee      	b.n	800ecc2 <quorem+0xee>
 800ece4:	0000      	movs	r0, r0
	...

0800ece8 <_dtoa_r>:
 800ece8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecec:	69c7      	ldr	r7, [r0, #28]
 800ecee:	b097      	sub	sp, #92	@ 0x5c
 800ecf0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ecf4:	ec55 4b10 	vmov	r4, r5, d0
 800ecf8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800ecfa:	9107      	str	r1, [sp, #28]
 800ecfc:	4681      	mov	r9, r0
 800ecfe:	920c      	str	r2, [sp, #48]	@ 0x30
 800ed00:	9311      	str	r3, [sp, #68]	@ 0x44
 800ed02:	b97f      	cbnz	r7, 800ed24 <_dtoa_r+0x3c>
 800ed04:	2010      	movs	r0, #16
 800ed06:	f001 f943 	bl	800ff90 <malloc>
 800ed0a:	4602      	mov	r2, r0
 800ed0c:	f8c9 001c 	str.w	r0, [r9, #28]
 800ed10:	b920      	cbnz	r0, 800ed1c <_dtoa_r+0x34>
 800ed12:	4ba9      	ldr	r3, [pc, #676]	@ (800efb8 <_dtoa_r+0x2d0>)
 800ed14:	21ef      	movs	r1, #239	@ 0xef
 800ed16:	48a9      	ldr	r0, [pc, #676]	@ (800efbc <_dtoa_r+0x2d4>)
 800ed18:	f002 f962 	bl	8010fe0 <__assert_func>
 800ed1c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ed20:	6007      	str	r7, [r0, #0]
 800ed22:	60c7      	str	r7, [r0, #12]
 800ed24:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ed28:	6819      	ldr	r1, [r3, #0]
 800ed2a:	b159      	cbz	r1, 800ed44 <_dtoa_r+0x5c>
 800ed2c:	685a      	ldr	r2, [r3, #4]
 800ed2e:	604a      	str	r2, [r1, #4]
 800ed30:	2301      	movs	r3, #1
 800ed32:	4093      	lsls	r3, r2
 800ed34:	608b      	str	r3, [r1, #8]
 800ed36:	4648      	mov	r0, r9
 800ed38:	f001 fa32 	bl	80101a0 <_Bfree>
 800ed3c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ed40:	2200      	movs	r2, #0
 800ed42:	601a      	str	r2, [r3, #0]
 800ed44:	1e2b      	subs	r3, r5, #0
 800ed46:	bfb9      	ittee	lt
 800ed48:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ed4c:	9305      	strlt	r3, [sp, #20]
 800ed4e:	2300      	movge	r3, #0
 800ed50:	6033      	strge	r3, [r6, #0]
 800ed52:	9f05      	ldr	r7, [sp, #20]
 800ed54:	4b9a      	ldr	r3, [pc, #616]	@ (800efc0 <_dtoa_r+0x2d8>)
 800ed56:	bfbc      	itt	lt
 800ed58:	2201      	movlt	r2, #1
 800ed5a:	6032      	strlt	r2, [r6, #0]
 800ed5c:	43bb      	bics	r3, r7
 800ed5e:	d112      	bne.n	800ed86 <_dtoa_r+0x9e>
 800ed60:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ed62:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ed66:	6013      	str	r3, [r2, #0]
 800ed68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ed6c:	4323      	orrs	r3, r4
 800ed6e:	f000 855a 	beq.w	800f826 <_dtoa_r+0xb3e>
 800ed72:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ed74:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800efd4 <_dtoa_r+0x2ec>
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	f000 855c 	beq.w	800f836 <_dtoa_r+0xb4e>
 800ed7e:	f10a 0303 	add.w	r3, sl, #3
 800ed82:	f000 bd56 	b.w	800f832 <_dtoa_r+0xb4a>
 800ed86:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	ec51 0b17 	vmov	r0, r1, d7
 800ed90:	2300      	movs	r3, #0
 800ed92:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800ed96:	f7f1 fe9f 	bl	8000ad8 <__aeabi_dcmpeq>
 800ed9a:	4680      	mov	r8, r0
 800ed9c:	b158      	cbz	r0, 800edb6 <_dtoa_r+0xce>
 800ed9e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800eda0:	2301      	movs	r3, #1
 800eda2:	6013      	str	r3, [r2, #0]
 800eda4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800eda6:	b113      	cbz	r3, 800edae <_dtoa_r+0xc6>
 800eda8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800edaa:	4b86      	ldr	r3, [pc, #536]	@ (800efc4 <_dtoa_r+0x2dc>)
 800edac:	6013      	str	r3, [r2, #0]
 800edae:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800efd8 <_dtoa_r+0x2f0>
 800edb2:	f000 bd40 	b.w	800f836 <_dtoa_r+0xb4e>
 800edb6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800edba:	aa14      	add	r2, sp, #80	@ 0x50
 800edbc:	a915      	add	r1, sp, #84	@ 0x54
 800edbe:	4648      	mov	r0, r9
 800edc0:	f001 fd8a 	bl	80108d8 <__d2b>
 800edc4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800edc8:	9002      	str	r0, [sp, #8]
 800edca:	2e00      	cmp	r6, #0
 800edcc:	d078      	beq.n	800eec0 <_dtoa_r+0x1d8>
 800edce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800edd0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800edd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800edd8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800eddc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ede0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ede4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ede8:	4619      	mov	r1, r3
 800edea:	2200      	movs	r2, #0
 800edec:	4b76      	ldr	r3, [pc, #472]	@ (800efc8 <_dtoa_r+0x2e0>)
 800edee:	f7f1 fa53 	bl	8000298 <__aeabi_dsub>
 800edf2:	a36b      	add	r3, pc, #428	@ (adr r3, 800efa0 <_dtoa_r+0x2b8>)
 800edf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edf8:	f7f1 fc06 	bl	8000608 <__aeabi_dmul>
 800edfc:	a36a      	add	r3, pc, #424	@ (adr r3, 800efa8 <_dtoa_r+0x2c0>)
 800edfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee02:	f7f1 fa4b 	bl	800029c <__adddf3>
 800ee06:	4604      	mov	r4, r0
 800ee08:	4630      	mov	r0, r6
 800ee0a:	460d      	mov	r5, r1
 800ee0c:	f7f1 fb92 	bl	8000534 <__aeabi_i2d>
 800ee10:	a367      	add	r3, pc, #412	@ (adr r3, 800efb0 <_dtoa_r+0x2c8>)
 800ee12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee16:	f7f1 fbf7 	bl	8000608 <__aeabi_dmul>
 800ee1a:	4602      	mov	r2, r0
 800ee1c:	460b      	mov	r3, r1
 800ee1e:	4620      	mov	r0, r4
 800ee20:	4629      	mov	r1, r5
 800ee22:	f7f1 fa3b 	bl	800029c <__adddf3>
 800ee26:	4604      	mov	r4, r0
 800ee28:	460d      	mov	r5, r1
 800ee2a:	f7f1 fe9d 	bl	8000b68 <__aeabi_d2iz>
 800ee2e:	2200      	movs	r2, #0
 800ee30:	4607      	mov	r7, r0
 800ee32:	2300      	movs	r3, #0
 800ee34:	4620      	mov	r0, r4
 800ee36:	4629      	mov	r1, r5
 800ee38:	f7f1 fe58 	bl	8000aec <__aeabi_dcmplt>
 800ee3c:	b140      	cbz	r0, 800ee50 <_dtoa_r+0x168>
 800ee3e:	4638      	mov	r0, r7
 800ee40:	f7f1 fb78 	bl	8000534 <__aeabi_i2d>
 800ee44:	4622      	mov	r2, r4
 800ee46:	462b      	mov	r3, r5
 800ee48:	f7f1 fe46 	bl	8000ad8 <__aeabi_dcmpeq>
 800ee4c:	b900      	cbnz	r0, 800ee50 <_dtoa_r+0x168>
 800ee4e:	3f01      	subs	r7, #1
 800ee50:	2f16      	cmp	r7, #22
 800ee52:	d852      	bhi.n	800eefa <_dtoa_r+0x212>
 800ee54:	4b5d      	ldr	r3, [pc, #372]	@ (800efcc <_dtoa_r+0x2e4>)
 800ee56:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ee5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ee62:	f7f1 fe43 	bl	8000aec <__aeabi_dcmplt>
 800ee66:	2800      	cmp	r0, #0
 800ee68:	d049      	beq.n	800eefe <_dtoa_r+0x216>
 800ee6a:	3f01      	subs	r7, #1
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ee70:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ee72:	1b9b      	subs	r3, r3, r6
 800ee74:	1e5a      	subs	r2, r3, #1
 800ee76:	bf45      	ittet	mi
 800ee78:	f1c3 0301 	rsbmi	r3, r3, #1
 800ee7c:	9300      	strmi	r3, [sp, #0]
 800ee7e:	2300      	movpl	r3, #0
 800ee80:	2300      	movmi	r3, #0
 800ee82:	9206      	str	r2, [sp, #24]
 800ee84:	bf54      	ite	pl
 800ee86:	9300      	strpl	r3, [sp, #0]
 800ee88:	9306      	strmi	r3, [sp, #24]
 800ee8a:	2f00      	cmp	r7, #0
 800ee8c:	db39      	blt.n	800ef02 <_dtoa_r+0x21a>
 800ee8e:	9b06      	ldr	r3, [sp, #24]
 800ee90:	970d      	str	r7, [sp, #52]	@ 0x34
 800ee92:	443b      	add	r3, r7
 800ee94:	9306      	str	r3, [sp, #24]
 800ee96:	2300      	movs	r3, #0
 800ee98:	9308      	str	r3, [sp, #32]
 800ee9a:	9b07      	ldr	r3, [sp, #28]
 800ee9c:	2b09      	cmp	r3, #9
 800ee9e:	d863      	bhi.n	800ef68 <_dtoa_r+0x280>
 800eea0:	2b05      	cmp	r3, #5
 800eea2:	bfc4      	itt	gt
 800eea4:	3b04      	subgt	r3, #4
 800eea6:	9307      	strgt	r3, [sp, #28]
 800eea8:	9b07      	ldr	r3, [sp, #28]
 800eeaa:	f1a3 0302 	sub.w	r3, r3, #2
 800eeae:	bfcc      	ite	gt
 800eeb0:	2400      	movgt	r4, #0
 800eeb2:	2401      	movle	r4, #1
 800eeb4:	2b03      	cmp	r3, #3
 800eeb6:	d863      	bhi.n	800ef80 <_dtoa_r+0x298>
 800eeb8:	e8df f003 	tbb	[pc, r3]
 800eebc:	2b375452 	.word	0x2b375452
 800eec0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800eec4:	441e      	add	r6, r3
 800eec6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800eeca:	2b20      	cmp	r3, #32
 800eecc:	bfc1      	itttt	gt
 800eece:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800eed2:	409f      	lslgt	r7, r3
 800eed4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800eed8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800eedc:	bfd6      	itet	le
 800eede:	f1c3 0320 	rsble	r3, r3, #32
 800eee2:	ea47 0003 	orrgt.w	r0, r7, r3
 800eee6:	fa04 f003 	lslle.w	r0, r4, r3
 800eeea:	f7f1 fb13 	bl	8000514 <__aeabi_ui2d>
 800eeee:	2201      	movs	r2, #1
 800eef0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800eef4:	3e01      	subs	r6, #1
 800eef6:	9212      	str	r2, [sp, #72]	@ 0x48
 800eef8:	e776      	b.n	800ede8 <_dtoa_r+0x100>
 800eefa:	2301      	movs	r3, #1
 800eefc:	e7b7      	b.n	800ee6e <_dtoa_r+0x186>
 800eefe:	9010      	str	r0, [sp, #64]	@ 0x40
 800ef00:	e7b6      	b.n	800ee70 <_dtoa_r+0x188>
 800ef02:	9b00      	ldr	r3, [sp, #0]
 800ef04:	1bdb      	subs	r3, r3, r7
 800ef06:	9300      	str	r3, [sp, #0]
 800ef08:	427b      	negs	r3, r7
 800ef0a:	9308      	str	r3, [sp, #32]
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	930d      	str	r3, [sp, #52]	@ 0x34
 800ef10:	e7c3      	b.n	800ee9a <_dtoa_r+0x1b2>
 800ef12:	2301      	movs	r3, #1
 800ef14:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ef18:	eb07 0b03 	add.w	fp, r7, r3
 800ef1c:	f10b 0301 	add.w	r3, fp, #1
 800ef20:	2b01      	cmp	r3, #1
 800ef22:	9303      	str	r3, [sp, #12]
 800ef24:	bfb8      	it	lt
 800ef26:	2301      	movlt	r3, #1
 800ef28:	e006      	b.n	800ef38 <_dtoa_r+0x250>
 800ef2a:	2301      	movs	r3, #1
 800ef2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	dd28      	ble.n	800ef86 <_dtoa_r+0x29e>
 800ef34:	469b      	mov	fp, r3
 800ef36:	9303      	str	r3, [sp, #12]
 800ef38:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800ef3c:	2100      	movs	r1, #0
 800ef3e:	2204      	movs	r2, #4
 800ef40:	f102 0514 	add.w	r5, r2, #20
 800ef44:	429d      	cmp	r5, r3
 800ef46:	d926      	bls.n	800ef96 <_dtoa_r+0x2ae>
 800ef48:	6041      	str	r1, [r0, #4]
 800ef4a:	4648      	mov	r0, r9
 800ef4c:	f001 f8e8 	bl	8010120 <_Balloc>
 800ef50:	4682      	mov	sl, r0
 800ef52:	2800      	cmp	r0, #0
 800ef54:	d142      	bne.n	800efdc <_dtoa_r+0x2f4>
 800ef56:	4b1e      	ldr	r3, [pc, #120]	@ (800efd0 <_dtoa_r+0x2e8>)
 800ef58:	4602      	mov	r2, r0
 800ef5a:	f240 11af 	movw	r1, #431	@ 0x1af
 800ef5e:	e6da      	b.n	800ed16 <_dtoa_r+0x2e>
 800ef60:	2300      	movs	r3, #0
 800ef62:	e7e3      	b.n	800ef2c <_dtoa_r+0x244>
 800ef64:	2300      	movs	r3, #0
 800ef66:	e7d5      	b.n	800ef14 <_dtoa_r+0x22c>
 800ef68:	2401      	movs	r4, #1
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	9307      	str	r3, [sp, #28]
 800ef6e:	9409      	str	r4, [sp, #36]	@ 0x24
 800ef70:	f04f 3bff 	mov.w	fp, #4294967295
 800ef74:	2200      	movs	r2, #0
 800ef76:	f8cd b00c 	str.w	fp, [sp, #12]
 800ef7a:	2312      	movs	r3, #18
 800ef7c:	920c      	str	r2, [sp, #48]	@ 0x30
 800ef7e:	e7db      	b.n	800ef38 <_dtoa_r+0x250>
 800ef80:	2301      	movs	r3, #1
 800ef82:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef84:	e7f4      	b.n	800ef70 <_dtoa_r+0x288>
 800ef86:	f04f 0b01 	mov.w	fp, #1
 800ef8a:	f8cd b00c 	str.w	fp, [sp, #12]
 800ef8e:	465b      	mov	r3, fp
 800ef90:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800ef94:	e7d0      	b.n	800ef38 <_dtoa_r+0x250>
 800ef96:	3101      	adds	r1, #1
 800ef98:	0052      	lsls	r2, r2, #1
 800ef9a:	e7d1      	b.n	800ef40 <_dtoa_r+0x258>
 800ef9c:	f3af 8000 	nop.w
 800efa0:	636f4361 	.word	0x636f4361
 800efa4:	3fd287a7 	.word	0x3fd287a7
 800efa8:	8b60c8b3 	.word	0x8b60c8b3
 800efac:	3fc68a28 	.word	0x3fc68a28
 800efb0:	509f79fb 	.word	0x509f79fb
 800efb4:	3fd34413 	.word	0x3fd34413
 800efb8:	080118fc 	.word	0x080118fc
 800efbc:	08011913 	.word	0x08011913
 800efc0:	7ff00000 	.word	0x7ff00000
 800efc4:	080118bf 	.word	0x080118bf
 800efc8:	3ff80000 	.word	0x3ff80000
 800efcc:	08011b10 	.word	0x08011b10
 800efd0:	0801196b 	.word	0x0801196b
 800efd4:	080118f8 	.word	0x080118f8
 800efd8:	080118be 	.word	0x080118be
 800efdc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800efe0:	6018      	str	r0, [r3, #0]
 800efe2:	9b03      	ldr	r3, [sp, #12]
 800efe4:	2b0e      	cmp	r3, #14
 800efe6:	f200 80a1 	bhi.w	800f12c <_dtoa_r+0x444>
 800efea:	2c00      	cmp	r4, #0
 800efec:	f000 809e 	beq.w	800f12c <_dtoa_r+0x444>
 800eff0:	2f00      	cmp	r7, #0
 800eff2:	dd33      	ble.n	800f05c <_dtoa_r+0x374>
 800eff4:	4b9c      	ldr	r3, [pc, #624]	@ (800f268 <_dtoa_r+0x580>)
 800eff6:	f007 020f 	and.w	r2, r7, #15
 800effa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800effe:	ed93 7b00 	vldr	d7, [r3]
 800f002:	05f8      	lsls	r0, r7, #23
 800f004:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800f008:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f00c:	d516      	bpl.n	800f03c <_dtoa_r+0x354>
 800f00e:	4b97      	ldr	r3, [pc, #604]	@ (800f26c <_dtoa_r+0x584>)
 800f010:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f014:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f018:	f7f1 fc20 	bl	800085c <__aeabi_ddiv>
 800f01c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f020:	f004 040f 	and.w	r4, r4, #15
 800f024:	2603      	movs	r6, #3
 800f026:	4d91      	ldr	r5, [pc, #580]	@ (800f26c <_dtoa_r+0x584>)
 800f028:	b954      	cbnz	r4, 800f040 <_dtoa_r+0x358>
 800f02a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f02e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f032:	f7f1 fc13 	bl	800085c <__aeabi_ddiv>
 800f036:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f03a:	e028      	b.n	800f08e <_dtoa_r+0x3a6>
 800f03c:	2602      	movs	r6, #2
 800f03e:	e7f2      	b.n	800f026 <_dtoa_r+0x33e>
 800f040:	07e1      	lsls	r1, r4, #31
 800f042:	d508      	bpl.n	800f056 <_dtoa_r+0x36e>
 800f044:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f048:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f04c:	f7f1 fadc 	bl	8000608 <__aeabi_dmul>
 800f050:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f054:	3601      	adds	r6, #1
 800f056:	1064      	asrs	r4, r4, #1
 800f058:	3508      	adds	r5, #8
 800f05a:	e7e5      	b.n	800f028 <_dtoa_r+0x340>
 800f05c:	f000 80af 	beq.w	800f1be <_dtoa_r+0x4d6>
 800f060:	427c      	negs	r4, r7
 800f062:	4b81      	ldr	r3, [pc, #516]	@ (800f268 <_dtoa_r+0x580>)
 800f064:	4d81      	ldr	r5, [pc, #516]	@ (800f26c <_dtoa_r+0x584>)
 800f066:	f004 020f 	and.w	r2, r4, #15
 800f06a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f072:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f076:	f7f1 fac7 	bl	8000608 <__aeabi_dmul>
 800f07a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f07e:	1124      	asrs	r4, r4, #4
 800f080:	2300      	movs	r3, #0
 800f082:	2602      	movs	r6, #2
 800f084:	2c00      	cmp	r4, #0
 800f086:	f040 808f 	bne.w	800f1a8 <_dtoa_r+0x4c0>
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d1d3      	bne.n	800f036 <_dtoa_r+0x34e>
 800f08e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f090:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800f094:	2b00      	cmp	r3, #0
 800f096:	f000 8094 	beq.w	800f1c2 <_dtoa_r+0x4da>
 800f09a:	4b75      	ldr	r3, [pc, #468]	@ (800f270 <_dtoa_r+0x588>)
 800f09c:	2200      	movs	r2, #0
 800f09e:	4620      	mov	r0, r4
 800f0a0:	4629      	mov	r1, r5
 800f0a2:	f7f1 fd23 	bl	8000aec <__aeabi_dcmplt>
 800f0a6:	2800      	cmp	r0, #0
 800f0a8:	f000 808b 	beq.w	800f1c2 <_dtoa_r+0x4da>
 800f0ac:	9b03      	ldr	r3, [sp, #12]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	f000 8087 	beq.w	800f1c2 <_dtoa_r+0x4da>
 800f0b4:	f1bb 0f00 	cmp.w	fp, #0
 800f0b8:	dd34      	ble.n	800f124 <_dtoa_r+0x43c>
 800f0ba:	4620      	mov	r0, r4
 800f0bc:	4b6d      	ldr	r3, [pc, #436]	@ (800f274 <_dtoa_r+0x58c>)
 800f0be:	2200      	movs	r2, #0
 800f0c0:	4629      	mov	r1, r5
 800f0c2:	f7f1 faa1 	bl	8000608 <__aeabi_dmul>
 800f0c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f0ca:	f107 38ff 	add.w	r8, r7, #4294967295
 800f0ce:	3601      	adds	r6, #1
 800f0d0:	465c      	mov	r4, fp
 800f0d2:	4630      	mov	r0, r6
 800f0d4:	f7f1 fa2e 	bl	8000534 <__aeabi_i2d>
 800f0d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f0dc:	f7f1 fa94 	bl	8000608 <__aeabi_dmul>
 800f0e0:	4b65      	ldr	r3, [pc, #404]	@ (800f278 <_dtoa_r+0x590>)
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	f7f1 f8da 	bl	800029c <__adddf3>
 800f0e8:	4605      	mov	r5, r0
 800f0ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f0ee:	2c00      	cmp	r4, #0
 800f0f0:	d16a      	bne.n	800f1c8 <_dtoa_r+0x4e0>
 800f0f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f0f6:	4b61      	ldr	r3, [pc, #388]	@ (800f27c <_dtoa_r+0x594>)
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	f7f1 f8cd 	bl	8000298 <__aeabi_dsub>
 800f0fe:	4602      	mov	r2, r0
 800f100:	460b      	mov	r3, r1
 800f102:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f106:	462a      	mov	r2, r5
 800f108:	4633      	mov	r3, r6
 800f10a:	f7f1 fd0d 	bl	8000b28 <__aeabi_dcmpgt>
 800f10e:	2800      	cmp	r0, #0
 800f110:	f040 8298 	bne.w	800f644 <_dtoa_r+0x95c>
 800f114:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f118:	462a      	mov	r2, r5
 800f11a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f11e:	f7f1 fce5 	bl	8000aec <__aeabi_dcmplt>
 800f122:	bb38      	cbnz	r0, 800f174 <_dtoa_r+0x48c>
 800f124:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800f128:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800f12c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f12e:	2b00      	cmp	r3, #0
 800f130:	f2c0 8157 	blt.w	800f3e2 <_dtoa_r+0x6fa>
 800f134:	2f0e      	cmp	r7, #14
 800f136:	f300 8154 	bgt.w	800f3e2 <_dtoa_r+0x6fa>
 800f13a:	4b4b      	ldr	r3, [pc, #300]	@ (800f268 <_dtoa_r+0x580>)
 800f13c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f140:	ed93 7b00 	vldr	d7, [r3]
 800f144:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f146:	2b00      	cmp	r3, #0
 800f148:	ed8d 7b00 	vstr	d7, [sp]
 800f14c:	f280 80e5 	bge.w	800f31a <_dtoa_r+0x632>
 800f150:	9b03      	ldr	r3, [sp, #12]
 800f152:	2b00      	cmp	r3, #0
 800f154:	f300 80e1 	bgt.w	800f31a <_dtoa_r+0x632>
 800f158:	d10c      	bne.n	800f174 <_dtoa_r+0x48c>
 800f15a:	4b48      	ldr	r3, [pc, #288]	@ (800f27c <_dtoa_r+0x594>)
 800f15c:	2200      	movs	r2, #0
 800f15e:	ec51 0b17 	vmov	r0, r1, d7
 800f162:	f7f1 fa51 	bl	8000608 <__aeabi_dmul>
 800f166:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f16a:	f7f1 fcd3 	bl	8000b14 <__aeabi_dcmpge>
 800f16e:	2800      	cmp	r0, #0
 800f170:	f000 8266 	beq.w	800f640 <_dtoa_r+0x958>
 800f174:	2400      	movs	r4, #0
 800f176:	4625      	mov	r5, r4
 800f178:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f17a:	4656      	mov	r6, sl
 800f17c:	ea6f 0803 	mvn.w	r8, r3
 800f180:	2700      	movs	r7, #0
 800f182:	4621      	mov	r1, r4
 800f184:	4648      	mov	r0, r9
 800f186:	f001 f80b 	bl	80101a0 <_Bfree>
 800f18a:	2d00      	cmp	r5, #0
 800f18c:	f000 80bd 	beq.w	800f30a <_dtoa_r+0x622>
 800f190:	b12f      	cbz	r7, 800f19e <_dtoa_r+0x4b6>
 800f192:	42af      	cmp	r7, r5
 800f194:	d003      	beq.n	800f19e <_dtoa_r+0x4b6>
 800f196:	4639      	mov	r1, r7
 800f198:	4648      	mov	r0, r9
 800f19a:	f001 f801 	bl	80101a0 <_Bfree>
 800f19e:	4629      	mov	r1, r5
 800f1a0:	4648      	mov	r0, r9
 800f1a2:	f000 fffd 	bl	80101a0 <_Bfree>
 800f1a6:	e0b0      	b.n	800f30a <_dtoa_r+0x622>
 800f1a8:	07e2      	lsls	r2, r4, #31
 800f1aa:	d505      	bpl.n	800f1b8 <_dtoa_r+0x4d0>
 800f1ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f1b0:	f7f1 fa2a 	bl	8000608 <__aeabi_dmul>
 800f1b4:	3601      	adds	r6, #1
 800f1b6:	2301      	movs	r3, #1
 800f1b8:	1064      	asrs	r4, r4, #1
 800f1ba:	3508      	adds	r5, #8
 800f1bc:	e762      	b.n	800f084 <_dtoa_r+0x39c>
 800f1be:	2602      	movs	r6, #2
 800f1c0:	e765      	b.n	800f08e <_dtoa_r+0x3a6>
 800f1c2:	9c03      	ldr	r4, [sp, #12]
 800f1c4:	46b8      	mov	r8, r7
 800f1c6:	e784      	b.n	800f0d2 <_dtoa_r+0x3ea>
 800f1c8:	4b27      	ldr	r3, [pc, #156]	@ (800f268 <_dtoa_r+0x580>)
 800f1ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f1cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f1d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f1d4:	4454      	add	r4, sl
 800f1d6:	2900      	cmp	r1, #0
 800f1d8:	d054      	beq.n	800f284 <_dtoa_r+0x59c>
 800f1da:	4929      	ldr	r1, [pc, #164]	@ (800f280 <_dtoa_r+0x598>)
 800f1dc:	2000      	movs	r0, #0
 800f1de:	f7f1 fb3d 	bl	800085c <__aeabi_ddiv>
 800f1e2:	4633      	mov	r3, r6
 800f1e4:	462a      	mov	r2, r5
 800f1e6:	f7f1 f857 	bl	8000298 <__aeabi_dsub>
 800f1ea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f1ee:	4656      	mov	r6, sl
 800f1f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f1f4:	f7f1 fcb8 	bl	8000b68 <__aeabi_d2iz>
 800f1f8:	4605      	mov	r5, r0
 800f1fa:	f7f1 f99b 	bl	8000534 <__aeabi_i2d>
 800f1fe:	4602      	mov	r2, r0
 800f200:	460b      	mov	r3, r1
 800f202:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f206:	f7f1 f847 	bl	8000298 <__aeabi_dsub>
 800f20a:	3530      	adds	r5, #48	@ 0x30
 800f20c:	4602      	mov	r2, r0
 800f20e:	460b      	mov	r3, r1
 800f210:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f214:	f806 5b01 	strb.w	r5, [r6], #1
 800f218:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f21c:	f7f1 fc66 	bl	8000aec <__aeabi_dcmplt>
 800f220:	2800      	cmp	r0, #0
 800f222:	d172      	bne.n	800f30a <_dtoa_r+0x622>
 800f224:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f228:	4911      	ldr	r1, [pc, #68]	@ (800f270 <_dtoa_r+0x588>)
 800f22a:	2000      	movs	r0, #0
 800f22c:	f7f1 f834 	bl	8000298 <__aeabi_dsub>
 800f230:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f234:	f7f1 fc5a 	bl	8000aec <__aeabi_dcmplt>
 800f238:	2800      	cmp	r0, #0
 800f23a:	f040 80b4 	bne.w	800f3a6 <_dtoa_r+0x6be>
 800f23e:	42a6      	cmp	r6, r4
 800f240:	f43f af70 	beq.w	800f124 <_dtoa_r+0x43c>
 800f244:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f248:	4b0a      	ldr	r3, [pc, #40]	@ (800f274 <_dtoa_r+0x58c>)
 800f24a:	2200      	movs	r2, #0
 800f24c:	f7f1 f9dc 	bl	8000608 <__aeabi_dmul>
 800f250:	4b08      	ldr	r3, [pc, #32]	@ (800f274 <_dtoa_r+0x58c>)
 800f252:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f256:	2200      	movs	r2, #0
 800f258:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f25c:	f7f1 f9d4 	bl	8000608 <__aeabi_dmul>
 800f260:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f264:	e7c4      	b.n	800f1f0 <_dtoa_r+0x508>
 800f266:	bf00      	nop
 800f268:	08011b10 	.word	0x08011b10
 800f26c:	08011ae8 	.word	0x08011ae8
 800f270:	3ff00000 	.word	0x3ff00000
 800f274:	40240000 	.word	0x40240000
 800f278:	401c0000 	.word	0x401c0000
 800f27c:	40140000 	.word	0x40140000
 800f280:	3fe00000 	.word	0x3fe00000
 800f284:	4631      	mov	r1, r6
 800f286:	4628      	mov	r0, r5
 800f288:	f7f1 f9be 	bl	8000608 <__aeabi_dmul>
 800f28c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f290:	9413      	str	r4, [sp, #76]	@ 0x4c
 800f292:	4656      	mov	r6, sl
 800f294:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f298:	f7f1 fc66 	bl	8000b68 <__aeabi_d2iz>
 800f29c:	4605      	mov	r5, r0
 800f29e:	f7f1 f949 	bl	8000534 <__aeabi_i2d>
 800f2a2:	4602      	mov	r2, r0
 800f2a4:	460b      	mov	r3, r1
 800f2a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f2aa:	f7f0 fff5 	bl	8000298 <__aeabi_dsub>
 800f2ae:	3530      	adds	r5, #48	@ 0x30
 800f2b0:	f806 5b01 	strb.w	r5, [r6], #1
 800f2b4:	4602      	mov	r2, r0
 800f2b6:	460b      	mov	r3, r1
 800f2b8:	42a6      	cmp	r6, r4
 800f2ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f2be:	f04f 0200 	mov.w	r2, #0
 800f2c2:	d124      	bne.n	800f30e <_dtoa_r+0x626>
 800f2c4:	4baf      	ldr	r3, [pc, #700]	@ (800f584 <_dtoa_r+0x89c>)
 800f2c6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f2ca:	f7f0 ffe7 	bl	800029c <__adddf3>
 800f2ce:	4602      	mov	r2, r0
 800f2d0:	460b      	mov	r3, r1
 800f2d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f2d6:	f7f1 fc27 	bl	8000b28 <__aeabi_dcmpgt>
 800f2da:	2800      	cmp	r0, #0
 800f2dc:	d163      	bne.n	800f3a6 <_dtoa_r+0x6be>
 800f2de:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f2e2:	49a8      	ldr	r1, [pc, #672]	@ (800f584 <_dtoa_r+0x89c>)
 800f2e4:	2000      	movs	r0, #0
 800f2e6:	f7f0 ffd7 	bl	8000298 <__aeabi_dsub>
 800f2ea:	4602      	mov	r2, r0
 800f2ec:	460b      	mov	r3, r1
 800f2ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f2f2:	f7f1 fbfb 	bl	8000aec <__aeabi_dcmplt>
 800f2f6:	2800      	cmp	r0, #0
 800f2f8:	f43f af14 	beq.w	800f124 <_dtoa_r+0x43c>
 800f2fc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800f2fe:	1e73      	subs	r3, r6, #1
 800f300:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f302:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f306:	2b30      	cmp	r3, #48	@ 0x30
 800f308:	d0f8      	beq.n	800f2fc <_dtoa_r+0x614>
 800f30a:	4647      	mov	r7, r8
 800f30c:	e03b      	b.n	800f386 <_dtoa_r+0x69e>
 800f30e:	4b9e      	ldr	r3, [pc, #632]	@ (800f588 <_dtoa_r+0x8a0>)
 800f310:	f7f1 f97a 	bl	8000608 <__aeabi_dmul>
 800f314:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f318:	e7bc      	b.n	800f294 <_dtoa_r+0x5ac>
 800f31a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800f31e:	4656      	mov	r6, sl
 800f320:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f324:	4620      	mov	r0, r4
 800f326:	4629      	mov	r1, r5
 800f328:	f7f1 fa98 	bl	800085c <__aeabi_ddiv>
 800f32c:	f7f1 fc1c 	bl	8000b68 <__aeabi_d2iz>
 800f330:	4680      	mov	r8, r0
 800f332:	f7f1 f8ff 	bl	8000534 <__aeabi_i2d>
 800f336:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f33a:	f7f1 f965 	bl	8000608 <__aeabi_dmul>
 800f33e:	4602      	mov	r2, r0
 800f340:	460b      	mov	r3, r1
 800f342:	4620      	mov	r0, r4
 800f344:	4629      	mov	r1, r5
 800f346:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f34a:	f7f0 ffa5 	bl	8000298 <__aeabi_dsub>
 800f34e:	f806 4b01 	strb.w	r4, [r6], #1
 800f352:	9d03      	ldr	r5, [sp, #12]
 800f354:	eba6 040a 	sub.w	r4, r6, sl
 800f358:	42a5      	cmp	r5, r4
 800f35a:	4602      	mov	r2, r0
 800f35c:	460b      	mov	r3, r1
 800f35e:	d133      	bne.n	800f3c8 <_dtoa_r+0x6e0>
 800f360:	f7f0 ff9c 	bl	800029c <__adddf3>
 800f364:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f368:	4604      	mov	r4, r0
 800f36a:	460d      	mov	r5, r1
 800f36c:	f7f1 fbdc 	bl	8000b28 <__aeabi_dcmpgt>
 800f370:	b9c0      	cbnz	r0, 800f3a4 <_dtoa_r+0x6bc>
 800f372:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f376:	4620      	mov	r0, r4
 800f378:	4629      	mov	r1, r5
 800f37a:	f7f1 fbad 	bl	8000ad8 <__aeabi_dcmpeq>
 800f37e:	b110      	cbz	r0, 800f386 <_dtoa_r+0x69e>
 800f380:	f018 0f01 	tst.w	r8, #1
 800f384:	d10e      	bne.n	800f3a4 <_dtoa_r+0x6bc>
 800f386:	9902      	ldr	r1, [sp, #8]
 800f388:	4648      	mov	r0, r9
 800f38a:	f000 ff09 	bl	80101a0 <_Bfree>
 800f38e:	2300      	movs	r3, #0
 800f390:	7033      	strb	r3, [r6, #0]
 800f392:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f394:	3701      	adds	r7, #1
 800f396:	601f      	str	r7, [r3, #0]
 800f398:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	f000 824b 	beq.w	800f836 <_dtoa_r+0xb4e>
 800f3a0:	601e      	str	r6, [r3, #0]
 800f3a2:	e248      	b.n	800f836 <_dtoa_r+0xb4e>
 800f3a4:	46b8      	mov	r8, r7
 800f3a6:	4633      	mov	r3, r6
 800f3a8:	461e      	mov	r6, r3
 800f3aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f3ae:	2a39      	cmp	r2, #57	@ 0x39
 800f3b0:	d106      	bne.n	800f3c0 <_dtoa_r+0x6d8>
 800f3b2:	459a      	cmp	sl, r3
 800f3b4:	d1f8      	bne.n	800f3a8 <_dtoa_r+0x6c0>
 800f3b6:	2230      	movs	r2, #48	@ 0x30
 800f3b8:	f108 0801 	add.w	r8, r8, #1
 800f3bc:	f88a 2000 	strb.w	r2, [sl]
 800f3c0:	781a      	ldrb	r2, [r3, #0]
 800f3c2:	3201      	adds	r2, #1
 800f3c4:	701a      	strb	r2, [r3, #0]
 800f3c6:	e7a0      	b.n	800f30a <_dtoa_r+0x622>
 800f3c8:	4b6f      	ldr	r3, [pc, #444]	@ (800f588 <_dtoa_r+0x8a0>)
 800f3ca:	2200      	movs	r2, #0
 800f3cc:	f7f1 f91c 	bl	8000608 <__aeabi_dmul>
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	4604      	mov	r4, r0
 800f3d6:	460d      	mov	r5, r1
 800f3d8:	f7f1 fb7e 	bl	8000ad8 <__aeabi_dcmpeq>
 800f3dc:	2800      	cmp	r0, #0
 800f3de:	d09f      	beq.n	800f320 <_dtoa_r+0x638>
 800f3e0:	e7d1      	b.n	800f386 <_dtoa_r+0x69e>
 800f3e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f3e4:	2a00      	cmp	r2, #0
 800f3e6:	f000 80ea 	beq.w	800f5be <_dtoa_r+0x8d6>
 800f3ea:	9a07      	ldr	r2, [sp, #28]
 800f3ec:	2a01      	cmp	r2, #1
 800f3ee:	f300 80cd 	bgt.w	800f58c <_dtoa_r+0x8a4>
 800f3f2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f3f4:	2a00      	cmp	r2, #0
 800f3f6:	f000 80c1 	beq.w	800f57c <_dtoa_r+0x894>
 800f3fa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f3fe:	9c08      	ldr	r4, [sp, #32]
 800f400:	9e00      	ldr	r6, [sp, #0]
 800f402:	9a00      	ldr	r2, [sp, #0]
 800f404:	441a      	add	r2, r3
 800f406:	9200      	str	r2, [sp, #0]
 800f408:	9a06      	ldr	r2, [sp, #24]
 800f40a:	2101      	movs	r1, #1
 800f40c:	441a      	add	r2, r3
 800f40e:	4648      	mov	r0, r9
 800f410:	9206      	str	r2, [sp, #24]
 800f412:	f000 ffc3 	bl	801039c <__i2b>
 800f416:	4605      	mov	r5, r0
 800f418:	b166      	cbz	r6, 800f434 <_dtoa_r+0x74c>
 800f41a:	9b06      	ldr	r3, [sp, #24]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	dd09      	ble.n	800f434 <_dtoa_r+0x74c>
 800f420:	42b3      	cmp	r3, r6
 800f422:	9a00      	ldr	r2, [sp, #0]
 800f424:	bfa8      	it	ge
 800f426:	4633      	movge	r3, r6
 800f428:	1ad2      	subs	r2, r2, r3
 800f42a:	9200      	str	r2, [sp, #0]
 800f42c:	9a06      	ldr	r2, [sp, #24]
 800f42e:	1af6      	subs	r6, r6, r3
 800f430:	1ad3      	subs	r3, r2, r3
 800f432:	9306      	str	r3, [sp, #24]
 800f434:	9b08      	ldr	r3, [sp, #32]
 800f436:	b30b      	cbz	r3, 800f47c <_dtoa_r+0x794>
 800f438:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	f000 80c6 	beq.w	800f5cc <_dtoa_r+0x8e4>
 800f440:	2c00      	cmp	r4, #0
 800f442:	f000 80c0 	beq.w	800f5c6 <_dtoa_r+0x8de>
 800f446:	4629      	mov	r1, r5
 800f448:	4622      	mov	r2, r4
 800f44a:	4648      	mov	r0, r9
 800f44c:	f001 f85e 	bl	801050c <__pow5mult>
 800f450:	9a02      	ldr	r2, [sp, #8]
 800f452:	4601      	mov	r1, r0
 800f454:	4605      	mov	r5, r0
 800f456:	4648      	mov	r0, r9
 800f458:	f000 ffb6 	bl	80103c8 <__multiply>
 800f45c:	9902      	ldr	r1, [sp, #8]
 800f45e:	4680      	mov	r8, r0
 800f460:	4648      	mov	r0, r9
 800f462:	f000 fe9d 	bl	80101a0 <_Bfree>
 800f466:	9b08      	ldr	r3, [sp, #32]
 800f468:	1b1b      	subs	r3, r3, r4
 800f46a:	9308      	str	r3, [sp, #32]
 800f46c:	f000 80b1 	beq.w	800f5d2 <_dtoa_r+0x8ea>
 800f470:	9a08      	ldr	r2, [sp, #32]
 800f472:	4641      	mov	r1, r8
 800f474:	4648      	mov	r0, r9
 800f476:	f001 f849 	bl	801050c <__pow5mult>
 800f47a:	9002      	str	r0, [sp, #8]
 800f47c:	2101      	movs	r1, #1
 800f47e:	4648      	mov	r0, r9
 800f480:	f000 ff8c 	bl	801039c <__i2b>
 800f484:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f486:	4604      	mov	r4, r0
 800f488:	2b00      	cmp	r3, #0
 800f48a:	f000 81d8 	beq.w	800f83e <_dtoa_r+0xb56>
 800f48e:	461a      	mov	r2, r3
 800f490:	4601      	mov	r1, r0
 800f492:	4648      	mov	r0, r9
 800f494:	f001 f83a 	bl	801050c <__pow5mult>
 800f498:	9b07      	ldr	r3, [sp, #28]
 800f49a:	2b01      	cmp	r3, #1
 800f49c:	4604      	mov	r4, r0
 800f49e:	f300 809f 	bgt.w	800f5e0 <_dtoa_r+0x8f8>
 800f4a2:	9b04      	ldr	r3, [sp, #16]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	f040 8097 	bne.w	800f5d8 <_dtoa_r+0x8f0>
 800f4aa:	9b05      	ldr	r3, [sp, #20]
 800f4ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	f040 8093 	bne.w	800f5dc <_dtoa_r+0x8f4>
 800f4b6:	9b05      	ldr	r3, [sp, #20]
 800f4b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f4bc:	0d1b      	lsrs	r3, r3, #20
 800f4be:	051b      	lsls	r3, r3, #20
 800f4c0:	b133      	cbz	r3, 800f4d0 <_dtoa_r+0x7e8>
 800f4c2:	9b00      	ldr	r3, [sp, #0]
 800f4c4:	3301      	adds	r3, #1
 800f4c6:	9300      	str	r3, [sp, #0]
 800f4c8:	9b06      	ldr	r3, [sp, #24]
 800f4ca:	3301      	adds	r3, #1
 800f4cc:	9306      	str	r3, [sp, #24]
 800f4ce:	2301      	movs	r3, #1
 800f4d0:	9308      	str	r3, [sp, #32]
 800f4d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	f000 81b8 	beq.w	800f84a <_dtoa_r+0xb62>
 800f4da:	6923      	ldr	r3, [r4, #16]
 800f4dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f4e0:	6918      	ldr	r0, [r3, #16]
 800f4e2:	f000 ff0f 	bl	8010304 <__hi0bits>
 800f4e6:	f1c0 0020 	rsb	r0, r0, #32
 800f4ea:	9b06      	ldr	r3, [sp, #24]
 800f4ec:	4418      	add	r0, r3
 800f4ee:	f010 001f 	ands.w	r0, r0, #31
 800f4f2:	f000 8082 	beq.w	800f5fa <_dtoa_r+0x912>
 800f4f6:	f1c0 0320 	rsb	r3, r0, #32
 800f4fa:	2b04      	cmp	r3, #4
 800f4fc:	dd73      	ble.n	800f5e6 <_dtoa_r+0x8fe>
 800f4fe:	9b00      	ldr	r3, [sp, #0]
 800f500:	f1c0 001c 	rsb	r0, r0, #28
 800f504:	4403      	add	r3, r0
 800f506:	9300      	str	r3, [sp, #0]
 800f508:	9b06      	ldr	r3, [sp, #24]
 800f50a:	4403      	add	r3, r0
 800f50c:	4406      	add	r6, r0
 800f50e:	9306      	str	r3, [sp, #24]
 800f510:	9b00      	ldr	r3, [sp, #0]
 800f512:	2b00      	cmp	r3, #0
 800f514:	dd05      	ble.n	800f522 <_dtoa_r+0x83a>
 800f516:	9902      	ldr	r1, [sp, #8]
 800f518:	461a      	mov	r2, r3
 800f51a:	4648      	mov	r0, r9
 800f51c:	f001 f850 	bl	80105c0 <__lshift>
 800f520:	9002      	str	r0, [sp, #8]
 800f522:	9b06      	ldr	r3, [sp, #24]
 800f524:	2b00      	cmp	r3, #0
 800f526:	dd05      	ble.n	800f534 <_dtoa_r+0x84c>
 800f528:	4621      	mov	r1, r4
 800f52a:	461a      	mov	r2, r3
 800f52c:	4648      	mov	r0, r9
 800f52e:	f001 f847 	bl	80105c0 <__lshift>
 800f532:	4604      	mov	r4, r0
 800f534:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f536:	2b00      	cmp	r3, #0
 800f538:	d061      	beq.n	800f5fe <_dtoa_r+0x916>
 800f53a:	9802      	ldr	r0, [sp, #8]
 800f53c:	4621      	mov	r1, r4
 800f53e:	f001 f8ab 	bl	8010698 <__mcmp>
 800f542:	2800      	cmp	r0, #0
 800f544:	da5b      	bge.n	800f5fe <_dtoa_r+0x916>
 800f546:	2300      	movs	r3, #0
 800f548:	9902      	ldr	r1, [sp, #8]
 800f54a:	220a      	movs	r2, #10
 800f54c:	4648      	mov	r0, r9
 800f54e:	f000 fe49 	bl	80101e4 <__multadd>
 800f552:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f554:	9002      	str	r0, [sp, #8]
 800f556:	f107 38ff 	add.w	r8, r7, #4294967295
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	f000 8177 	beq.w	800f84e <_dtoa_r+0xb66>
 800f560:	4629      	mov	r1, r5
 800f562:	2300      	movs	r3, #0
 800f564:	220a      	movs	r2, #10
 800f566:	4648      	mov	r0, r9
 800f568:	f000 fe3c 	bl	80101e4 <__multadd>
 800f56c:	f1bb 0f00 	cmp.w	fp, #0
 800f570:	4605      	mov	r5, r0
 800f572:	dc6f      	bgt.n	800f654 <_dtoa_r+0x96c>
 800f574:	9b07      	ldr	r3, [sp, #28]
 800f576:	2b02      	cmp	r3, #2
 800f578:	dc49      	bgt.n	800f60e <_dtoa_r+0x926>
 800f57a:	e06b      	b.n	800f654 <_dtoa_r+0x96c>
 800f57c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f57e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f582:	e73c      	b.n	800f3fe <_dtoa_r+0x716>
 800f584:	3fe00000 	.word	0x3fe00000
 800f588:	40240000 	.word	0x40240000
 800f58c:	9b03      	ldr	r3, [sp, #12]
 800f58e:	1e5c      	subs	r4, r3, #1
 800f590:	9b08      	ldr	r3, [sp, #32]
 800f592:	42a3      	cmp	r3, r4
 800f594:	db09      	blt.n	800f5aa <_dtoa_r+0x8c2>
 800f596:	1b1c      	subs	r4, r3, r4
 800f598:	9b03      	ldr	r3, [sp, #12]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	f6bf af30 	bge.w	800f400 <_dtoa_r+0x718>
 800f5a0:	9b00      	ldr	r3, [sp, #0]
 800f5a2:	9a03      	ldr	r2, [sp, #12]
 800f5a4:	1a9e      	subs	r6, r3, r2
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	e72b      	b.n	800f402 <_dtoa_r+0x71a>
 800f5aa:	9b08      	ldr	r3, [sp, #32]
 800f5ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f5ae:	9408      	str	r4, [sp, #32]
 800f5b0:	1ae3      	subs	r3, r4, r3
 800f5b2:	441a      	add	r2, r3
 800f5b4:	9e00      	ldr	r6, [sp, #0]
 800f5b6:	9b03      	ldr	r3, [sp, #12]
 800f5b8:	920d      	str	r2, [sp, #52]	@ 0x34
 800f5ba:	2400      	movs	r4, #0
 800f5bc:	e721      	b.n	800f402 <_dtoa_r+0x71a>
 800f5be:	9c08      	ldr	r4, [sp, #32]
 800f5c0:	9e00      	ldr	r6, [sp, #0]
 800f5c2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800f5c4:	e728      	b.n	800f418 <_dtoa_r+0x730>
 800f5c6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800f5ca:	e751      	b.n	800f470 <_dtoa_r+0x788>
 800f5cc:	9a08      	ldr	r2, [sp, #32]
 800f5ce:	9902      	ldr	r1, [sp, #8]
 800f5d0:	e750      	b.n	800f474 <_dtoa_r+0x78c>
 800f5d2:	f8cd 8008 	str.w	r8, [sp, #8]
 800f5d6:	e751      	b.n	800f47c <_dtoa_r+0x794>
 800f5d8:	2300      	movs	r3, #0
 800f5da:	e779      	b.n	800f4d0 <_dtoa_r+0x7e8>
 800f5dc:	9b04      	ldr	r3, [sp, #16]
 800f5de:	e777      	b.n	800f4d0 <_dtoa_r+0x7e8>
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	9308      	str	r3, [sp, #32]
 800f5e4:	e779      	b.n	800f4da <_dtoa_r+0x7f2>
 800f5e6:	d093      	beq.n	800f510 <_dtoa_r+0x828>
 800f5e8:	9a00      	ldr	r2, [sp, #0]
 800f5ea:	331c      	adds	r3, #28
 800f5ec:	441a      	add	r2, r3
 800f5ee:	9200      	str	r2, [sp, #0]
 800f5f0:	9a06      	ldr	r2, [sp, #24]
 800f5f2:	441a      	add	r2, r3
 800f5f4:	441e      	add	r6, r3
 800f5f6:	9206      	str	r2, [sp, #24]
 800f5f8:	e78a      	b.n	800f510 <_dtoa_r+0x828>
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	e7f4      	b.n	800f5e8 <_dtoa_r+0x900>
 800f5fe:	9b03      	ldr	r3, [sp, #12]
 800f600:	2b00      	cmp	r3, #0
 800f602:	46b8      	mov	r8, r7
 800f604:	dc20      	bgt.n	800f648 <_dtoa_r+0x960>
 800f606:	469b      	mov	fp, r3
 800f608:	9b07      	ldr	r3, [sp, #28]
 800f60a:	2b02      	cmp	r3, #2
 800f60c:	dd1e      	ble.n	800f64c <_dtoa_r+0x964>
 800f60e:	f1bb 0f00 	cmp.w	fp, #0
 800f612:	f47f adb1 	bne.w	800f178 <_dtoa_r+0x490>
 800f616:	4621      	mov	r1, r4
 800f618:	465b      	mov	r3, fp
 800f61a:	2205      	movs	r2, #5
 800f61c:	4648      	mov	r0, r9
 800f61e:	f000 fde1 	bl	80101e4 <__multadd>
 800f622:	4601      	mov	r1, r0
 800f624:	4604      	mov	r4, r0
 800f626:	9802      	ldr	r0, [sp, #8]
 800f628:	f001 f836 	bl	8010698 <__mcmp>
 800f62c:	2800      	cmp	r0, #0
 800f62e:	f77f ada3 	ble.w	800f178 <_dtoa_r+0x490>
 800f632:	4656      	mov	r6, sl
 800f634:	2331      	movs	r3, #49	@ 0x31
 800f636:	f806 3b01 	strb.w	r3, [r6], #1
 800f63a:	f108 0801 	add.w	r8, r8, #1
 800f63e:	e59f      	b.n	800f180 <_dtoa_r+0x498>
 800f640:	9c03      	ldr	r4, [sp, #12]
 800f642:	46b8      	mov	r8, r7
 800f644:	4625      	mov	r5, r4
 800f646:	e7f4      	b.n	800f632 <_dtoa_r+0x94a>
 800f648:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800f64c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f64e:	2b00      	cmp	r3, #0
 800f650:	f000 8101 	beq.w	800f856 <_dtoa_r+0xb6e>
 800f654:	2e00      	cmp	r6, #0
 800f656:	dd05      	ble.n	800f664 <_dtoa_r+0x97c>
 800f658:	4629      	mov	r1, r5
 800f65a:	4632      	mov	r2, r6
 800f65c:	4648      	mov	r0, r9
 800f65e:	f000 ffaf 	bl	80105c0 <__lshift>
 800f662:	4605      	mov	r5, r0
 800f664:	9b08      	ldr	r3, [sp, #32]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d05c      	beq.n	800f724 <_dtoa_r+0xa3c>
 800f66a:	6869      	ldr	r1, [r5, #4]
 800f66c:	4648      	mov	r0, r9
 800f66e:	f000 fd57 	bl	8010120 <_Balloc>
 800f672:	4606      	mov	r6, r0
 800f674:	b928      	cbnz	r0, 800f682 <_dtoa_r+0x99a>
 800f676:	4b82      	ldr	r3, [pc, #520]	@ (800f880 <_dtoa_r+0xb98>)
 800f678:	4602      	mov	r2, r0
 800f67a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f67e:	f7ff bb4a 	b.w	800ed16 <_dtoa_r+0x2e>
 800f682:	692a      	ldr	r2, [r5, #16]
 800f684:	3202      	adds	r2, #2
 800f686:	0092      	lsls	r2, r2, #2
 800f688:	f105 010c 	add.w	r1, r5, #12
 800f68c:	300c      	adds	r0, #12
 800f68e:	f7ff fa82 	bl	800eb96 <memcpy>
 800f692:	2201      	movs	r2, #1
 800f694:	4631      	mov	r1, r6
 800f696:	4648      	mov	r0, r9
 800f698:	f000 ff92 	bl	80105c0 <__lshift>
 800f69c:	f10a 0301 	add.w	r3, sl, #1
 800f6a0:	9300      	str	r3, [sp, #0]
 800f6a2:	eb0a 030b 	add.w	r3, sl, fp
 800f6a6:	9308      	str	r3, [sp, #32]
 800f6a8:	9b04      	ldr	r3, [sp, #16]
 800f6aa:	f003 0301 	and.w	r3, r3, #1
 800f6ae:	462f      	mov	r7, r5
 800f6b0:	9306      	str	r3, [sp, #24]
 800f6b2:	4605      	mov	r5, r0
 800f6b4:	9b00      	ldr	r3, [sp, #0]
 800f6b6:	9802      	ldr	r0, [sp, #8]
 800f6b8:	4621      	mov	r1, r4
 800f6ba:	f103 3bff 	add.w	fp, r3, #4294967295
 800f6be:	f7ff fa89 	bl	800ebd4 <quorem>
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	3330      	adds	r3, #48	@ 0x30
 800f6c6:	9003      	str	r0, [sp, #12]
 800f6c8:	4639      	mov	r1, r7
 800f6ca:	9802      	ldr	r0, [sp, #8]
 800f6cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f6ce:	f000 ffe3 	bl	8010698 <__mcmp>
 800f6d2:	462a      	mov	r2, r5
 800f6d4:	9004      	str	r0, [sp, #16]
 800f6d6:	4621      	mov	r1, r4
 800f6d8:	4648      	mov	r0, r9
 800f6da:	f000 fff9 	bl	80106d0 <__mdiff>
 800f6de:	68c2      	ldr	r2, [r0, #12]
 800f6e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f6e2:	4606      	mov	r6, r0
 800f6e4:	bb02      	cbnz	r2, 800f728 <_dtoa_r+0xa40>
 800f6e6:	4601      	mov	r1, r0
 800f6e8:	9802      	ldr	r0, [sp, #8]
 800f6ea:	f000 ffd5 	bl	8010698 <__mcmp>
 800f6ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f6f0:	4602      	mov	r2, r0
 800f6f2:	4631      	mov	r1, r6
 800f6f4:	4648      	mov	r0, r9
 800f6f6:	920c      	str	r2, [sp, #48]	@ 0x30
 800f6f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800f6fa:	f000 fd51 	bl	80101a0 <_Bfree>
 800f6fe:	9b07      	ldr	r3, [sp, #28]
 800f700:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f702:	9e00      	ldr	r6, [sp, #0]
 800f704:	ea42 0103 	orr.w	r1, r2, r3
 800f708:	9b06      	ldr	r3, [sp, #24]
 800f70a:	4319      	orrs	r1, r3
 800f70c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f70e:	d10d      	bne.n	800f72c <_dtoa_r+0xa44>
 800f710:	2b39      	cmp	r3, #57	@ 0x39
 800f712:	d027      	beq.n	800f764 <_dtoa_r+0xa7c>
 800f714:	9a04      	ldr	r2, [sp, #16]
 800f716:	2a00      	cmp	r2, #0
 800f718:	dd01      	ble.n	800f71e <_dtoa_r+0xa36>
 800f71a:	9b03      	ldr	r3, [sp, #12]
 800f71c:	3331      	adds	r3, #49	@ 0x31
 800f71e:	f88b 3000 	strb.w	r3, [fp]
 800f722:	e52e      	b.n	800f182 <_dtoa_r+0x49a>
 800f724:	4628      	mov	r0, r5
 800f726:	e7b9      	b.n	800f69c <_dtoa_r+0x9b4>
 800f728:	2201      	movs	r2, #1
 800f72a:	e7e2      	b.n	800f6f2 <_dtoa_r+0xa0a>
 800f72c:	9904      	ldr	r1, [sp, #16]
 800f72e:	2900      	cmp	r1, #0
 800f730:	db04      	blt.n	800f73c <_dtoa_r+0xa54>
 800f732:	9807      	ldr	r0, [sp, #28]
 800f734:	4301      	orrs	r1, r0
 800f736:	9806      	ldr	r0, [sp, #24]
 800f738:	4301      	orrs	r1, r0
 800f73a:	d120      	bne.n	800f77e <_dtoa_r+0xa96>
 800f73c:	2a00      	cmp	r2, #0
 800f73e:	ddee      	ble.n	800f71e <_dtoa_r+0xa36>
 800f740:	9902      	ldr	r1, [sp, #8]
 800f742:	9300      	str	r3, [sp, #0]
 800f744:	2201      	movs	r2, #1
 800f746:	4648      	mov	r0, r9
 800f748:	f000 ff3a 	bl	80105c0 <__lshift>
 800f74c:	4621      	mov	r1, r4
 800f74e:	9002      	str	r0, [sp, #8]
 800f750:	f000 ffa2 	bl	8010698 <__mcmp>
 800f754:	2800      	cmp	r0, #0
 800f756:	9b00      	ldr	r3, [sp, #0]
 800f758:	dc02      	bgt.n	800f760 <_dtoa_r+0xa78>
 800f75a:	d1e0      	bne.n	800f71e <_dtoa_r+0xa36>
 800f75c:	07da      	lsls	r2, r3, #31
 800f75e:	d5de      	bpl.n	800f71e <_dtoa_r+0xa36>
 800f760:	2b39      	cmp	r3, #57	@ 0x39
 800f762:	d1da      	bne.n	800f71a <_dtoa_r+0xa32>
 800f764:	2339      	movs	r3, #57	@ 0x39
 800f766:	f88b 3000 	strb.w	r3, [fp]
 800f76a:	4633      	mov	r3, r6
 800f76c:	461e      	mov	r6, r3
 800f76e:	3b01      	subs	r3, #1
 800f770:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f774:	2a39      	cmp	r2, #57	@ 0x39
 800f776:	d04e      	beq.n	800f816 <_dtoa_r+0xb2e>
 800f778:	3201      	adds	r2, #1
 800f77a:	701a      	strb	r2, [r3, #0]
 800f77c:	e501      	b.n	800f182 <_dtoa_r+0x49a>
 800f77e:	2a00      	cmp	r2, #0
 800f780:	dd03      	ble.n	800f78a <_dtoa_r+0xaa2>
 800f782:	2b39      	cmp	r3, #57	@ 0x39
 800f784:	d0ee      	beq.n	800f764 <_dtoa_r+0xa7c>
 800f786:	3301      	adds	r3, #1
 800f788:	e7c9      	b.n	800f71e <_dtoa_r+0xa36>
 800f78a:	9a00      	ldr	r2, [sp, #0]
 800f78c:	9908      	ldr	r1, [sp, #32]
 800f78e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f792:	428a      	cmp	r2, r1
 800f794:	d028      	beq.n	800f7e8 <_dtoa_r+0xb00>
 800f796:	9902      	ldr	r1, [sp, #8]
 800f798:	2300      	movs	r3, #0
 800f79a:	220a      	movs	r2, #10
 800f79c:	4648      	mov	r0, r9
 800f79e:	f000 fd21 	bl	80101e4 <__multadd>
 800f7a2:	42af      	cmp	r7, r5
 800f7a4:	9002      	str	r0, [sp, #8]
 800f7a6:	f04f 0300 	mov.w	r3, #0
 800f7aa:	f04f 020a 	mov.w	r2, #10
 800f7ae:	4639      	mov	r1, r7
 800f7b0:	4648      	mov	r0, r9
 800f7b2:	d107      	bne.n	800f7c4 <_dtoa_r+0xadc>
 800f7b4:	f000 fd16 	bl	80101e4 <__multadd>
 800f7b8:	4607      	mov	r7, r0
 800f7ba:	4605      	mov	r5, r0
 800f7bc:	9b00      	ldr	r3, [sp, #0]
 800f7be:	3301      	adds	r3, #1
 800f7c0:	9300      	str	r3, [sp, #0]
 800f7c2:	e777      	b.n	800f6b4 <_dtoa_r+0x9cc>
 800f7c4:	f000 fd0e 	bl	80101e4 <__multadd>
 800f7c8:	4629      	mov	r1, r5
 800f7ca:	4607      	mov	r7, r0
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	220a      	movs	r2, #10
 800f7d0:	4648      	mov	r0, r9
 800f7d2:	f000 fd07 	bl	80101e4 <__multadd>
 800f7d6:	4605      	mov	r5, r0
 800f7d8:	e7f0      	b.n	800f7bc <_dtoa_r+0xad4>
 800f7da:	f1bb 0f00 	cmp.w	fp, #0
 800f7de:	bfcc      	ite	gt
 800f7e0:	465e      	movgt	r6, fp
 800f7e2:	2601      	movle	r6, #1
 800f7e4:	4456      	add	r6, sl
 800f7e6:	2700      	movs	r7, #0
 800f7e8:	9902      	ldr	r1, [sp, #8]
 800f7ea:	9300      	str	r3, [sp, #0]
 800f7ec:	2201      	movs	r2, #1
 800f7ee:	4648      	mov	r0, r9
 800f7f0:	f000 fee6 	bl	80105c0 <__lshift>
 800f7f4:	4621      	mov	r1, r4
 800f7f6:	9002      	str	r0, [sp, #8]
 800f7f8:	f000 ff4e 	bl	8010698 <__mcmp>
 800f7fc:	2800      	cmp	r0, #0
 800f7fe:	dcb4      	bgt.n	800f76a <_dtoa_r+0xa82>
 800f800:	d102      	bne.n	800f808 <_dtoa_r+0xb20>
 800f802:	9b00      	ldr	r3, [sp, #0]
 800f804:	07db      	lsls	r3, r3, #31
 800f806:	d4b0      	bmi.n	800f76a <_dtoa_r+0xa82>
 800f808:	4633      	mov	r3, r6
 800f80a:	461e      	mov	r6, r3
 800f80c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f810:	2a30      	cmp	r2, #48	@ 0x30
 800f812:	d0fa      	beq.n	800f80a <_dtoa_r+0xb22>
 800f814:	e4b5      	b.n	800f182 <_dtoa_r+0x49a>
 800f816:	459a      	cmp	sl, r3
 800f818:	d1a8      	bne.n	800f76c <_dtoa_r+0xa84>
 800f81a:	2331      	movs	r3, #49	@ 0x31
 800f81c:	f108 0801 	add.w	r8, r8, #1
 800f820:	f88a 3000 	strb.w	r3, [sl]
 800f824:	e4ad      	b.n	800f182 <_dtoa_r+0x49a>
 800f826:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f828:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800f884 <_dtoa_r+0xb9c>
 800f82c:	b11b      	cbz	r3, 800f836 <_dtoa_r+0xb4e>
 800f82e:	f10a 0308 	add.w	r3, sl, #8
 800f832:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800f834:	6013      	str	r3, [r2, #0]
 800f836:	4650      	mov	r0, sl
 800f838:	b017      	add	sp, #92	@ 0x5c
 800f83a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f83e:	9b07      	ldr	r3, [sp, #28]
 800f840:	2b01      	cmp	r3, #1
 800f842:	f77f ae2e 	ble.w	800f4a2 <_dtoa_r+0x7ba>
 800f846:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f848:	9308      	str	r3, [sp, #32]
 800f84a:	2001      	movs	r0, #1
 800f84c:	e64d      	b.n	800f4ea <_dtoa_r+0x802>
 800f84e:	f1bb 0f00 	cmp.w	fp, #0
 800f852:	f77f aed9 	ble.w	800f608 <_dtoa_r+0x920>
 800f856:	4656      	mov	r6, sl
 800f858:	9802      	ldr	r0, [sp, #8]
 800f85a:	4621      	mov	r1, r4
 800f85c:	f7ff f9ba 	bl	800ebd4 <quorem>
 800f860:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800f864:	f806 3b01 	strb.w	r3, [r6], #1
 800f868:	eba6 020a 	sub.w	r2, r6, sl
 800f86c:	4593      	cmp	fp, r2
 800f86e:	ddb4      	ble.n	800f7da <_dtoa_r+0xaf2>
 800f870:	9902      	ldr	r1, [sp, #8]
 800f872:	2300      	movs	r3, #0
 800f874:	220a      	movs	r2, #10
 800f876:	4648      	mov	r0, r9
 800f878:	f000 fcb4 	bl	80101e4 <__multadd>
 800f87c:	9002      	str	r0, [sp, #8]
 800f87e:	e7eb      	b.n	800f858 <_dtoa_r+0xb70>
 800f880:	0801196b 	.word	0x0801196b
 800f884:	080118ef 	.word	0x080118ef

0800f888 <_free_r>:
 800f888:	b538      	push	{r3, r4, r5, lr}
 800f88a:	4605      	mov	r5, r0
 800f88c:	2900      	cmp	r1, #0
 800f88e:	d041      	beq.n	800f914 <_free_r+0x8c>
 800f890:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f894:	1f0c      	subs	r4, r1, #4
 800f896:	2b00      	cmp	r3, #0
 800f898:	bfb8      	it	lt
 800f89a:	18e4      	addlt	r4, r4, r3
 800f89c:	f000 fc34 	bl	8010108 <__malloc_lock>
 800f8a0:	4a1d      	ldr	r2, [pc, #116]	@ (800f918 <_free_r+0x90>)
 800f8a2:	6813      	ldr	r3, [r2, #0]
 800f8a4:	b933      	cbnz	r3, 800f8b4 <_free_r+0x2c>
 800f8a6:	6063      	str	r3, [r4, #4]
 800f8a8:	6014      	str	r4, [r2, #0]
 800f8aa:	4628      	mov	r0, r5
 800f8ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f8b0:	f000 bc30 	b.w	8010114 <__malloc_unlock>
 800f8b4:	42a3      	cmp	r3, r4
 800f8b6:	d908      	bls.n	800f8ca <_free_r+0x42>
 800f8b8:	6820      	ldr	r0, [r4, #0]
 800f8ba:	1821      	adds	r1, r4, r0
 800f8bc:	428b      	cmp	r3, r1
 800f8be:	bf01      	itttt	eq
 800f8c0:	6819      	ldreq	r1, [r3, #0]
 800f8c2:	685b      	ldreq	r3, [r3, #4]
 800f8c4:	1809      	addeq	r1, r1, r0
 800f8c6:	6021      	streq	r1, [r4, #0]
 800f8c8:	e7ed      	b.n	800f8a6 <_free_r+0x1e>
 800f8ca:	461a      	mov	r2, r3
 800f8cc:	685b      	ldr	r3, [r3, #4]
 800f8ce:	b10b      	cbz	r3, 800f8d4 <_free_r+0x4c>
 800f8d0:	42a3      	cmp	r3, r4
 800f8d2:	d9fa      	bls.n	800f8ca <_free_r+0x42>
 800f8d4:	6811      	ldr	r1, [r2, #0]
 800f8d6:	1850      	adds	r0, r2, r1
 800f8d8:	42a0      	cmp	r0, r4
 800f8da:	d10b      	bne.n	800f8f4 <_free_r+0x6c>
 800f8dc:	6820      	ldr	r0, [r4, #0]
 800f8de:	4401      	add	r1, r0
 800f8e0:	1850      	adds	r0, r2, r1
 800f8e2:	4283      	cmp	r3, r0
 800f8e4:	6011      	str	r1, [r2, #0]
 800f8e6:	d1e0      	bne.n	800f8aa <_free_r+0x22>
 800f8e8:	6818      	ldr	r0, [r3, #0]
 800f8ea:	685b      	ldr	r3, [r3, #4]
 800f8ec:	6053      	str	r3, [r2, #4]
 800f8ee:	4408      	add	r0, r1
 800f8f0:	6010      	str	r0, [r2, #0]
 800f8f2:	e7da      	b.n	800f8aa <_free_r+0x22>
 800f8f4:	d902      	bls.n	800f8fc <_free_r+0x74>
 800f8f6:	230c      	movs	r3, #12
 800f8f8:	602b      	str	r3, [r5, #0]
 800f8fa:	e7d6      	b.n	800f8aa <_free_r+0x22>
 800f8fc:	6820      	ldr	r0, [r4, #0]
 800f8fe:	1821      	adds	r1, r4, r0
 800f900:	428b      	cmp	r3, r1
 800f902:	bf04      	itt	eq
 800f904:	6819      	ldreq	r1, [r3, #0]
 800f906:	685b      	ldreq	r3, [r3, #4]
 800f908:	6063      	str	r3, [r4, #4]
 800f90a:	bf04      	itt	eq
 800f90c:	1809      	addeq	r1, r1, r0
 800f90e:	6021      	streq	r1, [r4, #0]
 800f910:	6054      	str	r4, [r2, #4]
 800f912:	e7ca      	b.n	800f8aa <_free_r+0x22>
 800f914:	bd38      	pop	{r3, r4, r5, pc}
 800f916:	bf00      	nop
 800f918:	200052b8 	.word	0x200052b8

0800f91c <rshift>:
 800f91c:	6903      	ldr	r3, [r0, #16]
 800f91e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f922:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f926:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f92a:	f100 0414 	add.w	r4, r0, #20
 800f92e:	dd45      	ble.n	800f9bc <rshift+0xa0>
 800f930:	f011 011f 	ands.w	r1, r1, #31
 800f934:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f938:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f93c:	d10c      	bne.n	800f958 <rshift+0x3c>
 800f93e:	f100 0710 	add.w	r7, r0, #16
 800f942:	4629      	mov	r1, r5
 800f944:	42b1      	cmp	r1, r6
 800f946:	d334      	bcc.n	800f9b2 <rshift+0x96>
 800f948:	1a9b      	subs	r3, r3, r2
 800f94a:	009b      	lsls	r3, r3, #2
 800f94c:	1eea      	subs	r2, r5, #3
 800f94e:	4296      	cmp	r6, r2
 800f950:	bf38      	it	cc
 800f952:	2300      	movcc	r3, #0
 800f954:	4423      	add	r3, r4
 800f956:	e015      	b.n	800f984 <rshift+0x68>
 800f958:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f95c:	f1c1 0820 	rsb	r8, r1, #32
 800f960:	40cf      	lsrs	r7, r1
 800f962:	f105 0e04 	add.w	lr, r5, #4
 800f966:	46a1      	mov	r9, r4
 800f968:	4576      	cmp	r6, lr
 800f96a:	46f4      	mov	ip, lr
 800f96c:	d815      	bhi.n	800f99a <rshift+0x7e>
 800f96e:	1a9a      	subs	r2, r3, r2
 800f970:	0092      	lsls	r2, r2, #2
 800f972:	3a04      	subs	r2, #4
 800f974:	3501      	adds	r5, #1
 800f976:	42ae      	cmp	r6, r5
 800f978:	bf38      	it	cc
 800f97a:	2200      	movcc	r2, #0
 800f97c:	18a3      	adds	r3, r4, r2
 800f97e:	50a7      	str	r7, [r4, r2]
 800f980:	b107      	cbz	r7, 800f984 <rshift+0x68>
 800f982:	3304      	adds	r3, #4
 800f984:	1b1a      	subs	r2, r3, r4
 800f986:	42a3      	cmp	r3, r4
 800f988:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f98c:	bf08      	it	eq
 800f98e:	2300      	moveq	r3, #0
 800f990:	6102      	str	r2, [r0, #16]
 800f992:	bf08      	it	eq
 800f994:	6143      	streq	r3, [r0, #20]
 800f996:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f99a:	f8dc c000 	ldr.w	ip, [ip]
 800f99e:	fa0c fc08 	lsl.w	ip, ip, r8
 800f9a2:	ea4c 0707 	orr.w	r7, ip, r7
 800f9a6:	f849 7b04 	str.w	r7, [r9], #4
 800f9aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f9ae:	40cf      	lsrs	r7, r1
 800f9b0:	e7da      	b.n	800f968 <rshift+0x4c>
 800f9b2:	f851 cb04 	ldr.w	ip, [r1], #4
 800f9b6:	f847 cf04 	str.w	ip, [r7, #4]!
 800f9ba:	e7c3      	b.n	800f944 <rshift+0x28>
 800f9bc:	4623      	mov	r3, r4
 800f9be:	e7e1      	b.n	800f984 <rshift+0x68>

0800f9c0 <__hexdig_fun>:
 800f9c0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800f9c4:	2b09      	cmp	r3, #9
 800f9c6:	d802      	bhi.n	800f9ce <__hexdig_fun+0xe>
 800f9c8:	3820      	subs	r0, #32
 800f9ca:	b2c0      	uxtb	r0, r0
 800f9cc:	4770      	bx	lr
 800f9ce:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800f9d2:	2b05      	cmp	r3, #5
 800f9d4:	d801      	bhi.n	800f9da <__hexdig_fun+0x1a>
 800f9d6:	3847      	subs	r0, #71	@ 0x47
 800f9d8:	e7f7      	b.n	800f9ca <__hexdig_fun+0xa>
 800f9da:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800f9de:	2b05      	cmp	r3, #5
 800f9e0:	d801      	bhi.n	800f9e6 <__hexdig_fun+0x26>
 800f9e2:	3827      	subs	r0, #39	@ 0x27
 800f9e4:	e7f1      	b.n	800f9ca <__hexdig_fun+0xa>
 800f9e6:	2000      	movs	r0, #0
 800f9e8:	4770      	bx	lr
	...

0800f9ec <__gethex>:
 800f9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9f0:	b085      	sub	sp, #20
 800f9f2:	468a      	mov	sl, r1
 800f9f4:	9302      	str	r3, [sp, #8]
 800f9f6:	680b      	ldr	r3, [r1, #0]
 800f9f8:	9001      	str	r0, [sp, #4]
 800f9fa:	4690      	mov	r8, r2
 800f9fc:	1c9c      	adds	r4, r3, #2
 800f9fe:	46a1      	mov	r9, r4
 800fa00:	f814 0b01 	ldrb.w	r0, [r4], #1
 800fa04:	2830      	cmp	r0, #48	@ 0x30
 800fa06:	d0fa      	beq.n	800f9fe <__gethex+0x12>
 800fa08:	eba9 0303 	sub.w	r3, r9, r3
 800fa0c:	f1a3 0b02 	sub.w	fp, r3, #2
 800fa10:	f7ff ffd6 	bl	800f9c0 <__hexdig_fun>
 800fa14:	4605      	mov	r5, r0
 800fa16:	2800      	cmp	r0, #0
 800fa18:	d168      	bne.n	800faec <__gethex+0x100>
 800fa1a:	49a0      	ldr	r1, [pc, #640]	@ (800fc9c <__gethex+0x2b0>)
 800fa1c:	2201      	movs	r2, #1
 800fa1e:	4648      	mov	r0, r9
 800fa20:	f7fe ffd1 	bl	800e9c6 <strncmp>
 800fa24:	4607      	mov	r7, r0
 800fa26:	2800      	cmp	r0, #0
 800fa28:	d167      	bne.n	800fafa <__gethex+0x10e>
 800fa2a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800fa2e:	4626      	mov	r6, r4
 800fa30:	f7ff ffc6 	bl	800f9c0 <__hexdig_fun>
 800fa34:	2800      	cmp	r0, #0
 800fa36:	d062      	beq.n	800fafe <__gethex+0x112>
 800fa38:	4623      	mov	r3, r4
 800fa3a:	7818      	ldrb	r0, [r3, #0]
 800fa3c:	2830      	cmp	r0, #48	@ 0x30
 800fa3e:	4699      	mov	r9, r3
 800fa40:	f103 0301 	add.w	r3, r3, #1
 800fa44:	d0f9      	beq.n	800fa3a <__gethex+0x4e>
 800fa46:	f7ff ffbb 	bl	800f9c0 <__hexdig_fun>
 800fa4a:	fab0 f580 	clz	r5, r0
 800fa4e:	096d      	lsrs	r5, r5, #5
 800fa50:	f04f 0b01 	mov.w	fp, #1
 800fa54:	464a      	mov	r2, r9
 800fa56:	4616      	mov	r6, r2
 800fa58:	3201      	adds	r2, #1
 800fa5a:	7830      	ldrb	r0, [r6, #0]
 800fa5c:	f7ff ffb0 	bl	800f9c0 <__hexdig_fun>
 800fa60:	2800      	cmp	r0, #0
 800fa62:	d1f8      	bne.n	800fa56 <__gethex+0x6a>
 800fa64:	498d      	ldr	r1, [pc, #564]	@ (800fc9c <__gethex+0x2b0>)
 800fa66:	2201      	movs	r2, #1
 800fa68:	4630      	mov	r0, r6
 800fa6a:	f7fe ffac 	bl	800e9c6 <strncmp>
 800fa6e:	2800      	cmp	r0, #0
 800fa70:	d13f      	bne.n	800faf2 <__gethex+0x106>
 800fa72:	b944      	cbnz	r4, 800fa86 <__gethex+0x9a>
 800fa74:	1c74      	adds	r4, r6, #1
 800fa76:	4622      	mov	r2, r4
 800fa78:	4616      	mov	r6, r2
 800fa7a:	3201      	adds	r2, #1
 800fa7c:	7830      	ldrb	r0, [r6, #0]
 800fa7e:	f7ff ff9f 	bl	800f9c0 <__hexdig_fun>
 800fa82:	2800      	cmp	r0, #0
 800fa84:	d1f8      	bne.n	800fa78 <__gethex+0x8c>
 800fa86:	1ba4      	subs	r4, r4, r6
 800fa88:	00a7      	lsls	r7, r4, #2
 800fa8a:	7833      	ldrb	r3, [r6, #0]
 800fa8c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800fa90:	2b50      	cmp	r3, #80	@ 0x50
 800fa92:	d13e      	bne.n	800fb12 <__gethex+0x126>
 800fa94:	7873      	ldrb	r3, [r6, #1]
 800fa96:	2b2b      	cmp	r3, #43	@ 0x2b
 800fa98:	d033      	beq.n	800fb02 <__gethex+0x116>
 800fa9a:	2b2d      	cmp	r3, #45	@ 0x2d
 800fa9c:	d034      	beq.n	800fb08 <__gethex+0x11c>
 800fa9e:	1c71      	adds	r1, r6, #1
 800faa0:	2400      	movs	r4, #0
 800faa2:	7808      	ldrb	r0, [r1, #0]
 800faa4:	f7ff ff8c 	bl	800f9c0 <__hexdig_fun>
 800faa8:	1e43      	subs	r3, r0, #1
 800faaa:	b2db      	uxtb	r3, r3
 800faac:	2b18      	cmp	r3, #24
 800faae:	d830      	bhi.n	800fb12 <__gethex+0x126>
 800fab0:	f1a0 0210 	sub.w	r2, r0, #16
 800fab4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fab8:	f7ff ff82 	bl	800f9c0 <__hexdig_fun>
 800fabc:	f100 3cff 	add.w	ip, r0, #4294967295
 800fac0:	fa5f fc8c 	uxtb.w	ip, ip
 800fac4:	f1bc 0f18 	cmp.w	ip, #24
 800fac8:	f04f 030a 	mov.w	r3, #10
 800facc:	d91e      	bls.n	800fb0c <__gethex+0x120>
 800face:	b104      	cbz	r4, 800fad2 <__gethex+0xe6>
 800fad0:	4252      	negs	r2, r2
 800fad2:	4417      	add	r7, r2
 800fad4:	f8ca 1000 	str.w	r1, [sl]
 800fad8:	b1ed      	cbz	r5, 800fb16 <__gethex+0x12a>
 800fada:	f1bb 0f00 	cmp.w	fp, #0
 800fade:	bf0c      	ite	eq
 800fae0:	2506      	moveq	r5, #6
 800fae2:	2500      	movne	r5, #0
 800fae4:	4628      	mov	r0, r5
 800fae6:	b005      	add	sp, #20
 800fae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faec:	2500      	movs	r5, #0
 800faee:	462c      	mov	r4, r5
 800faf0:	e7b0      	b.n	800fa54 <__gethex+0x68>
 800faf2:	2c00      	cmp	r4, #0
 800faf4:	d1c7      	bne.n	800fa86 <__gethex+0x9a>
 800faf6:	4627      	mov	r7, r4
 800faf8:	e7c7      	b.n	800fa8a <__gethex+0x9e>
 800fafa:	464e      	mov	r6, r9
 800fafc:	462f      	mov	r7, r5
 800fafe:	2501      	movs	r5, #1
 800fb00:	e7c3      	b.n	800fa8a <__gethex+0x9e>
 800fb02:	2400      	movs	r4, #0
 800fb04:	1cb1      	adds	r1, r6, #2
 800fb06:	e7cc      	b.n	800faa2 <__gethex+0xb6>
 800fb08:	2401      	movs	r4, #1
 800fb0a:	e7fb      	b.n	800fb04 <__gethex+0x118>
 800fb0c:	fb03 0002 	mla	r0, r3, r2, r0
 800fb10:	e7ce      	b.n	800fab0 <__gethex+0xc4>
 800fb12:	4631      	mov	r1, r6
 800fb14:	e7de      	b.n	800fad4 <__gethex+0xe8>
 800fb16:	eba6 0309 	sub.w	r3, r6, r9
 800fb1a:	3b01      	subs	r3, #1
 800fb1c:	4629      	mov	r1, r5
 800fb1e:	2b07      	cmp	r3, #7
 800fb20:	dc0a      	bgt.n	800fb38 <__gethex+0x14c>
 800fb22:	9801      	ldr	r0, [sp, #4]
 800fb24:	f000 fafc 	bl	8010120 <_Balloc>
 800fb28:	4604      	mov	r4, r0
 800fb2a:	b940      	cbnz	r0, 800fb3e <__gethex+0x152>
 800fb2c:	4b5c      	ldr	r3, [pc, #368]	@ (800fca0 <__gethex+0x2b4>)
 800fb2e:	4602      	mov	r2, r0
 800fb30:	21e4      	movs	r1, #228	@ 0xe4
 800fb32:	485c      	ldr	r0, [pc, #368]	@ (800fca4 <__gethex+0x2b8>)
 800fb34:	f001 fa54 	bl	8010fe0 <__assert_func>
 800fb38:	3101      	adds	r1, #1
 800fb3a:	105b      	asrs	r3, r3, #1
 800fb3c:	e7ef      	b.n	800fb1e <__gethex+0x132>
 800fb3e:	f100 0a14 	add.w	sl, r0, #20
 800fb42:	2300      	movs	r3, #0
 800fb44:	4655      	mov	r5, sl
 800fb46:	469b      	mov	fp, r3
 800fb48:	45b1      	cmp	r9, r6
 800fb4a:	d337      	bcc.n	800fbbc <__gethex+0x1d0>
 800fb4c:	f845 bb04 	str.w	fp, [r5], #4
 800fb50:	eba5 050a 	sub.w	r5, r5, sl
 800fb54:	10ad      	asrs	r5, r5, #2
 800fb56:	6125      	str	r5, [r4, #16]
 800fb58:	4658      	mov	r0, fp
 800fb5a:	f000 fbd3 	bl	8010304 <__hi0bits>
 800fb5e:	016d      	lsls	r5, r5, #5
 800fb60:	f8d8 6000 	ldr.w	r6, [r8]
 800fb64:	1a2d      	subs	r5, r5, r0
 800fb66:	42b5      	cmp	r5, r6
 800fb68:	dd54      	ble.n	800fc14 <__gethex+0x228>
 800fb6a:	1bad      	subs	r5, r5, r6
 800fb6c:	4629      	mov	r1, r5
 800fb6e:	4620      	mov	r0, r4
 800fb70:	f000 ff5f 	bl	8010a32 <__any_on>
 800fb74:	4681      	mov	r9, r0
 800fb76:	b178      	cbz	r0, 800fb98 <__gethex+0x1ac>
 800fb78:	1e6b      	subs	r3, r5, #1
 800fb7a:	1159      	asrs	r1, r3, #5
 800fb7c:	f003 021f 	and.w	r2, r3, #31
 800fb80:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800fb84:	f04f 0901 	mov.w	r9, #1
 800fb88:	fa09 f202 	lsl.w	r2, r9, r2
 800fb8c:	420a      	tst	r2, r1
 800fb8e:	d003      	beq.n	800fb98 <__gethex+0x1ac>
 800fb90:	454b      	cmp	r3, r9
 800fb92:	dc36      	bgt.n	800fc02 <__gethex+0x216>
 800fb94:	f04f 0902 	mov.w	r9, #2
 800fb98:	4629      	mov	r1, r5
 800fb9a:	4620      	mov	r0, r4
 800fb9c:	f7ff febe 	bl	800f91c <rshift>
 800fba0:	442f      	add	r7, r5
 800fba2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fba6:	42bb      	cmp	r3, r7
 800fba8:	da42      	bge.n	800fc30 <__gethex+0x244>
 800fbaa:	9801      	ldr	r0, [sp, #4]
 800fbac:	4621      	mov	r1, r4
 800fbae:	f000 faf7 	bl	80101a0 <_Bfree>
 800fbb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	6013      	str	r3, [r2, #0]
 800fbb8:	25a3      	movs	r5, #163	@ 0xa3
 800fbba:	e793      	b.n	800fae4 <__gethex+0xf8>
 800fbbc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800fbc0:	2a2e      	cmp	r2, #46	@ 0x2e
 800fbc2:	d012      	beq.n	800fbea <__gethex+0x1fe>
 800fbc4:	2b20      	cmp	r3, #32
 800fbc6:	d104      	bne.n	800fbd2 <__gethex+0x1e6>
 800fbc8:	f845 bb04 	str.w	fp, [r5], #4
 800fbcc:	f04f 0b00 	mov.w	fp, #0
 800fbd0:	465b      	mov	r3, fp
 800fbd2:	7830      	ldrb	r0, [r6, #0]
 800fbd4:	9303      	str	r3, [sp, #12]
 800fbd6:	f7ff fef3 	bl	800f9c0 <__hexdig_fun>
 800fbda:	9b03      	ldr	r3, [sp, #12]
 800fbdc:	f000 000f 	and.w	r0, r0, #15
 800fbe0:	4098      	lsls	r0, r3
 800fbe2:	ea4b 0b00 	orr.w	fp, fp, r0
 800fbe6:	3304      	adds	r3, #4
 800fbe8:	e7ae      	b.n	800fb48 <__gethex+0x15c>
 800fbea:	45b1      	cmp	r9, r6
 800fbec:	d8ea      	bhi.n	800fbc4 <__gethex+0x1d8>
 800fbee:	492b      	ldr	r1, [pc, #172]	@ (800fc9c <__gethex+0x2b0>)
 800fbf0:	9303      	str	r3, [sp, #12]
 800fbf2:	2201      	movs	r2, #1
 800fbf4:	4630      	mov	r0, r6
 800fbf6:	f7fe fee6 	bl	800e9c6 <strncmp>
 800fbfa:	9b03      	ldr	r3, [sp, #12]
 800fbfc:	2800      	cmp	r0, #0
 800fbfe:	d1e1      	bne.n	800fbc4 <__gethex+0x1d8>
 800fc00:	e7a2      	b.n	800fb48 <__gethex+0x15c>
 800fc02:	1ea9      	subs	r1, r5, #2
 800fc04:	4620      	mov	r0, r4
 800fc06:	f000 ff14 	bl	8010a32 <__any_on>
 800fc0a:	2800      	cmp	r0, #0
 800fc0c:	d0c2      	beq.n	800fb94 <__gethex+0x1a8>
 800fc0e:	f04f 0903 	mov.w	r9, #3
 800fc12:	e7c1      	b.n	800fb98 <__gethex+0x1ac>
 800fc14:	da09      	bge.n	800fc2a <__gethex+0x23e>
 800fc16:	1b75      	subs	r5, r6, r5
 800fc18:	4621      	mov	r1, r4
 800fc1a:	9801      	ldr	r0, [sp, #4]
 800fc1c:	462a      	mov	r2, r5
 800fc1e:	f000 fccf 	bl	80105c0 <__lshift>
 800fc22:	1b7f      	subs	r7, r7, r5
 800fc24:	4604      	mov	r4, r0
 800fc26:	f100 0a14 	add.w	sl, r0, #20
 800fc2a:	f04f 0900 	mov.w	r9, #0
 800fc2e:	e7b8      	b.n	800fba2 <__gethex+0x1b6>
 800fc30:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fc34:	42bd      	cmp	r5, r7
 800fc36:	dd6f      	ble.n	800fd18 <__gethex+0x32c>
 800fc38:	1bed      	subs	r5, r5, r7
 800fc3a:	42ae      	cmp	r6, r5
 800fc3c:	dc34      	bgt.n	800fca8 <__gethex+0x2bc>
 800fc3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fc42:	2b02      	cmp	r3, #2
 800fc44:	d022      	beq.n	800fc8c <__gethex+0x2a0>
 800fc46:	2b03      	cmp	r3, #3
 800fc48:	d024      	beq.n	800fc94 <__gethex+0x2a8>
 800fc4a:	2b01      	cmp	r3, #1
 800fc4c:	d115      	bne.n	800fc7a <__gethex+0x28e>
 800fc4e:	42ae      	cmp	r6, r5
 800fc50:	d113      	bne.n	800fc7a <__gethex+0x28e>
 800fc52:	2e01      	cmp	r6, #1
 800fc54:	d10b      	bne.n	800fc6e <__gethex+0x282>
 800fc56:	9a02      	ldr	r2, [sp, #8]
 800fc58:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fc5c:	6013      	str	r3, [r2, #0]
 800fc5e:	2301      	movs	r3, #1
 800fc60:	6123      	str	r3, [r4, #16]
 800fc62:	f8ca 3000 	str.w	r3, [sl]
 800fc66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fc68:	2562      	movs	r5, #98	@ 0x62
 800fc6a:	601c      	str	r4, [r3, #0]
 800fc6c:	e73a      	b.n	800fae4 <__gethex+0xf8>
 800fc6e:	1e71      	subs	r1, r6, #1
 800fc70:	4620      	mov	r0, r4
 800fc72:	f000 fede 	bl	8010a32 <__any_on>
 800fc76:	2800      	cmp	r0, #0
 800fc78:	d1ed      	bne.n	800fc56 <__gethex+0x26a>
 800fc7a:	9801      	ldr	r0, [sp, #4]
 800fc7c:	4621      	mov	r1, r4
 800fc7e:	f000 fa8f 	bl	80101a0 <_Bfree>
 800fc82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fc84:	2300      	movs	r3, #0
 800fc86:	6013      	str	r3, [r2, #0]
 800fc88:	2550      	movs	r5, #80	@ 0x50
 800fc8a:	e72b      	b.n	800fae4 <__gethex+0xf8>
 800fc8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d1f3      	bne.n	800fc7a <__gethex+0x28e>
 800fc92:	e7e0      	b.n	800fc56 <__gethex+0x26a>
 800fc94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d1dd      	bne.n	800fc56 <__gethex+0x26a>
 800fc9a:	e7ee      	b.n	800fc7a <__gethex+0x28e>
 800fc9c:	080118ac 	.word	0x080118ac
 800fca0:	0801196b 	.word	0x0801196b
 800fca4:	0801197c 	.word	0x0801197c
 800fca8:	1e6f      	subs	r7, r5, #1
 800fcaa:	f1b9 0f00 	cmp.w	r9, #0
 800fcae:	d130      	bne.n	800fd12 <__gethex+0x326>
 800fcb0:	b127      	cbz	r7, 800fcbc <__gethex+0x2d0>
 800fcb2:	4639      	mov	r1, r7
 800fcb4:	4620      	mov	r0, r4
 800fcb6:	f000 febc 	bl	8010a32 <__any_on>
 800fcba:	4681      	mov	r9, r0
 800fcbc:	117a      	asrs	r2, r7, #5
 800fcbe:	2301      	movs	r3, #1
 800fcc0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800fcc4:	f007 071f 	and.w	r7, r7, #31
 800fcc8:	40bb      	lsls	r3, r7
 800fcca:	4213      	tst	r3, r2
 800fccc:	4629      	mov	r1, r5
 800fcce:	4620      	mov	r0, r4
 800fcd0:	bf18      	it	ne
 800fcd2:	f049 0902 	orrne.w	r9, r9, #2
 800fcd6:	f7ff fe21 	bl	800f91c <rshift>
 800fcda:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800fcde:	1b76      	subs	r6, r6, r5
 800fce0:	2502      	movs	r5, #2
 800fce2:	f1b9 0f00 	cmp.w	r9, #0
 800fce6:	d047      	beq.n	800fd78 <__gethex+0x38c>
 800fce8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fcec:	2b02      	cmp	r3, #2
 800fcee:	d015      	beq.n	800fd1c <__gethex+0x330>
 800fcf0:	2b03      	cmp	r3, #3
 800fcf2:	d017      	beq.n	800fd24 <__gethex+0x338>
 800fcf4:	2b01      	cmp	r3, #1
 800fcf6:	d109      	bne.n	800fd0c <__gethex+0x320>
 800fcf8:	f019 0f02 	tst.w	r9, #2
 800fcfc:	d006      	beq.n	800fd0c <__gethex+0x320>
 800fcfe:	f8da 3000 	ldr.w	r3, [sl]
 800fd02:	ea49 0903 	orr.w	r9, r9, r3
 800fd06:	f019 0f01 	tst.w	r9, #1
 800fd0a:	d10e      	bne.n	800fd2a <__gethex+0x33e>
 800fd0c:	f045 0510 	orr.w	r5, r5, #16
 800fd10:	e032      	b.n	800fd78 <__gethex+0x38c>
 800fd12:	f04f 0901 	mov.w	r9, #1
 800fd16:	e7d1      	b.n	800fcbc <__gethex+0x2d0>
 800fd18:	2501      	movs	r5, #1
 800fd1a:	e7e2      	b.n	800fce2 <__gethex+0x2f6>
 800fd1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd1e:	f1c3 0301 	rsb	r3, r3, #1
 800fd22:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fd24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d0f0      	beq.n	800fd0c <__gethex+0x320>
 800fd2a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fd2e:	f104 0314 	add.w	r3, r4, #20
 800fd32:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fd36:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800fd3a:	f04f 0c00 	mov.w	ip, #0
 800fd3e:	4618      	mov	r0, r3
 800fd40:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd44:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fd48:	d01b      	beq.n	800fd82 <__gethex+0x396>
 800fd4a:	3201      	adds	r2, #1
 800fd4c:	6002      	str	r2, [r0, #0]
 800fd4e:	2d02      	cmp	r5, #2
 800fd50:	f104 0314 	add.w	r3, r4, #20
 800fd54:	d13c      	bne.n	800fdd0 <__gethex+0x3e4>
 800fd56:	f8d8 2000 	ldr.w	r2, [r8]
 800fd5a:	3a01      	subs	r2, #1
 800fd5c:	42b2      	cmp	r2, r6
 800fd5e:	d109      	bne.n	800fd74 <__gethex+0x388>
 800fd60:	1171      	asrs	r1, r6, #5
 800fd62:	2201      	movs	r2, #1
 800fd64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fd68:	f006 061f 	and.w	r6, r6, #31
 800fd6c:	fa02 f606 	lsl.w	r6, r2, r6
 800fd70:	421e      	tst	r6, r3
 800fd72:	d13a      	bne.n	800fdea <__gethex+0x3fe>
 800fd74:	f045 0520 	orr.w	r5, r5, #32
 800fd78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fd7a:	601c      	str	r4, [r3, #0]
 800fd7c:	9b02      	ldr	r3, [sp, #8]
 800fd7e:	601f      	str	r7, [r3, #0]
 800fd80:	e6b0      	b.n	800fae4 <__gethex+0xf8>
 800fd82:	4299      	cmp	r1, r3
 800fd84:	f843 cc04 	str.w	ip, [r3, #-4]
 800fd88:	d8d9      	bhi.n	800fd3e <__gethex+0x352>
 800fd8a:	68a3      	ldr	r3, [r4, #8]
 800fd8c:	459b      	cmp	fp, r3
 800fd8e:	db17      	blt.n	800fdc0 <__gethex+0x3d4>
 800fd90:	6861      	ldr	r1, [r4, #4]
 800fd92:	9801      	ldr	r0, [sp, #4]
 800fd94:	3101      	adds	r1, #1
 800fd96:	f000 f9c3 	bl	8010120 <_Balloc>
 800fd9a:	4681      	mov	r9, r0
 800fd9c:	b918      	cbnz	r0, 800fda6 <__gethex+0x3ba>
 800fd9e:	4b1a      	ldr	r3, [pc, #104]	@ (800fe08 <__gethex+0x41c>)
 800fda0:	4602      	mov	r2, r0
 800fda2:	2184      	movs	r1, #132	@ 0x84
 800fda4:	e6c5      	b.n	800fb32 <__gethex+0x146>
 800fda6:	6922      	ldr	r2, [r4, #16]
 800fda8:	3202      	adds	r2, #2
 800fdaa:	f104 010c 	add.w	r1, r4, #12
 800fdae:	0092      	lsls	r2, r2, #2
 800fdb0:	300c      	adds	r0, #12
 800fdb2:	f7fe fef0 	bl	800eb96 <memcpy>
 800fdb6:	4621      	mov	r1, r4
 800fdb8:	9801      	ldr	r0, [sp, #4]
 800fdba:	f000 f9f1 	bl	80101a0 <_Bfree>
 800fdbe:	464c      	mov	r4, r9
 800fdc0:	6923      	ldr	r3, [r4, #16]
 800fdc2:	1c5a      	adds	r2, r3, #1
 800fdc4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fdc8:	6122      	str	r2, [r4, #16]
 800fdca:	2201      	movs	r2, #1
 800fdcc:	615a      	str	r2, [r3, #20]
 800fdce:	e7be      	b.n	800fd4e <__gethex+0x362>
 800fdd0:	6922      	ldr	r2, [r4, #16]
 800fdd2:	455a      	cmp	r2, fp
 800fdd4:	dd0b      	ble.n	800fdee <__gethex+0x402>
 800fdd6:	2101      	movs	r1, #1
 800fdd8:	4620      	mov	r0, r4
 800fdda:	f7ff fd9f 	bl	800f91c <rshift>
 800fdde:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fde2:	3701      	adds	r7, #1
 800fde4:	42bb      	cmp	r3, r7
 800fde6:	f6ff aee0 	blt.w	800fbaa <__gethex+0x1be>
 800fdea:	2501      	movs	r5, #1
 800fdec:	e7c2      	b.n	800fd74 <__gethex+0x388>
 800fdee:	f016 061f 	ands.w	r6, r6, #31
 800fdf2:	d0fa      	beq.n	800fdea <__gethex+0x3fe>
 800fdf4:	4453      	add	r3, sl
 800fdf6:	f1c6 0620 	rsb	r6, r6, #32
 800fdfa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800fdfe:	f000 fa81 	bl	8010304 <__hi0bits>
 800fe02:	42b0      	cmp	r0, r6
 800fe04:	dbe7      	blt.n	800fdd6 <__gethex+0x3ea>
 800fe06:	e7f0      	b.n	800fdea <__gethex+0x3fe>
 800fe08:	0801196b 	.word	0x0801196b

0800fe0c <L_shift>:
 800fe0c:	f1c2 0208 	rsb	r2, r2, #8
 800fe10:	0092      	lsls	r2, r2, #2
 800fe12:	b570      	push	{r4, r5, r6, lr}
 800fe14:	f1c2 0620 	rsb	r6, r2, #32
 800fe18:	6843      	ldr	r3, [r0, #4]
 800fe1a:	6804      	ldr	r4, [r0, #0]
 800fe1c:	fa03 f506 	lsl.w	r5, r3, r6
 800fe20:	432c      	orrs	r4, r5
 800fe22:	40d3      	lsrs	r3, r2
 800fe24:	6004      	str	r4, [r0, #0]
 800fe26:	f840 3f04 	str.w	r3, [r0, #4]!
 800fe2a:	4288      	cmp	r0, r1
 800fe2c:	d3f4      	bcc.n	800fe18 <L_shift+0xc>
 800fe2e:	bd70      	pop	{r4, r5, r6, pc}

0800fe30 <__match>:
 800fe30:	b530      	push	{r4, r5, lr}
 800fe32:	6803      	ldr	r3, [r0, #0]
 800fe34:	3301      	adds	r3, #1
 800fe36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fe3a:	b914      	cbnz	r4, 800fe42 <__match+0x12>
 800fe3c:	6003      	str	r3, [r0, #0]
 800fe3e:	2001      	movs	r0, #1
 800fe40:	bd30      	pop	{r4, r5, pc}
 800fe42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe46:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800fe4a:	2d19      	cmp	r5, #25
 800fe4c:	bf98      	it	ls
 800fe4e:	3220      	addls	r2, #32
 800fe50:	42a2      	cmp	r2, r4
 800fe52:	d0f0      	beq.n	800fe36 <__match+0x6>
 800fe54:	2000      	movs	r0, #0
 800fe56:	e7f3      	b.n	800fe40 <__match+0x10>

0800fe58 <__hexnan>:
 800fe58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe5c:	680b      	ldr	r3, [r1, #0]
 800fe5e:	6801      	ldr	r1, [r0, #0]
 800fe60:	115e      	asrs	r6, r3, #5
 800fe62:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fe66:	f013 031f 	ands.w	r3, r3, #31
 800fe6a:	b087      	sub	sp, #28
 800fe6c:	bf18      	it	ne
 800fe6e:	3604      	addne	r6, #4
 800fe70:	2500      	movs	r5, #0
 800fe72:	1f37      	subs	r7, r6, #4
 800fe74:	4682      	mov	sl, r0
 800fe76:	4690      	mov	r8, r2
 800fe78:	9301      	str	r3, [sp, #4]
 800fe7a:	f846 5c04 	str.w	r5, [r6, #-4]
 800fe7e:	46b9      	mov	r9, r7
 800fe80:	463c      	mov	r4, r7
 800fe82:	9502      	str	r5, [sp, #8]
 800fe84:	46ab      	mov	fp, r5
 800fe86:	784a      	ldrb	r2, [r1, #1]
 800fe88:	1c4b      	adds	r3, r1, #1
 800fe8a:	9303      	str	r3, [sp, #12]
 800fe8c:	b342      	cbz	r2, 800fee0 <__hexnan+0x88>
 800fe8e:	4610      	mov	r0, r2
 800fe90:	9105      	str	r1, [sp, #20]
 800fe92:	9204      	str	r2, [sp, #16]
 800fe94:	f7ff fd94 	bl	800f9c0 <__hexdig_fun>
 800fe98:	2800      	cmp	r0, #0
 800fe9a:	d151      	bne.n	800ff40 <__hexnan+0xe8>
 800fe9c:	9a04      	ldr	r2, [sp, #16]
 800fe9e:	9905      	ldr	r1, [sp, #20]
 800fea0:	2a20      	cmp	r2, #32
 800fea2:	d818      	bhi.n	800fed6 <__hexnan+0x7e>
 800fea4:	9b02      	ldr	r3, [sp, #8]
 800fea6:	459b      	cmp	fp, r3
 800fea8:	dd13      	ble.n	800fed2 <__hexnan+0x7a>
 800feaa:	454c      	cmp	r4, r9
 800feac:	d206      	bcs.n	800febc <__hexnan+0x64>
 800feae:	2d07      	cmp	r5, #7
 800feb0:	dc04      	bgt.n	800febc <__hexnan+0x64>
 800feb2:	462a      	mov	r2, r5
 800feb4:	4649      	mov	r1, r9
 800feb6:	4620      	mov	r0, r4
 800feb8:	f7ff ffa8 	bl	800fe0c <L_shift>
 800febc:	4544      	cmp	r4, r8
 800febe:	d952      	bls.n	800ff66 <__hexnan+0x10e>
 800fec0:	2300      	movs	r3, #0
 800fec2:	f1a4 0904 	sub.w	r9, r4, #4
 800fec6:	f844 3c04 	str.w	r3, [r4, #-4]
 800feca:	f8cd b008 	str.w	fp, [sp, #8]
 800fece:	464c      	mov	r4, r9
 800fed0:	461d      	mov	r5, r3
 800fed2:	9903      	ldr	r1, [sp, #12]
 800fed4:	e7d7      	b.n	800fe86 <__hexnan+0x2e>
 800fed6:	2a29      	cmp	r2, #41	@ 0x29
 800fed8:	d157      	bne.n	800ff8a <__hexnan+0x132>
 800feda:	3102      	adds	r1, #2
 800fedc:	f8ca 1000 	str.w	r1, [sl]
 800fee0:	f1bb 0f00 	cmp.w	fp, #0
 800fee4:	d051      	beq.n	800ff8a <__hexnan+0x132>
 800fee6:	454c      	cmp	r4, r9
 800fee8:	d206      	bcs.n	800fef8 <__hexnan+0xa0>
 800feea:	2d07      	cmp	r5, #7
 800feec:	dc04      	bgt.n	800fef8 <__hexnan+0xa0>
 800feee:	462a      	mov	r2, r5
 800fef0:	4649      	mov	r1, r9
 800fef2:	4620      	mov	r0, r4
 800fef4:	f7ff ff8a 	bl	800fe0c <L_shift>
 800fef8:	4544      	cmp	r4, r8
 800fefa:	d936      	bls.n	800ff6a <__hexnan+0x112>
 800fefc:	f1a8 0204 	sub.w	r2, r8, #4
 800ff00:	4623      	mov	r3, r4
 800ff02:	f853 1b04 	ldr.w	r1, [r3], #4
 800ff06:	f842 1f04 	str.w	r1, [r2, #4]!
 800ff0a:	429f      	cmp	r7, r3
 800ff0c:	d2f9      	bcs.n	800ff02 <__hexnan+0xaa>
 800ff0e:	1b3b      	subs	r3, r7, r4
 800ff10:	f023 0303 	bic.w	r3, r3, #3
 800ff14:	3304      	adds	r3, #4
 800ff16:	3401      	adds	r4, #1
 800ff18:	3e03      	subs	r6, #3
 800ff1a:	42b4      	cmp	r4, r6
 800ff1c:	bf88      	it	hi
 800ff1e:	2304      	movhi	r3, #4
 800ff20:	4443      	add	r3, r8
 800ff22:	2200      	movs	r2, #0
 800ff24:	f843 2b04 	str.w	r2, [r3], #4
 800ff28:	429f      	cmp	r7, r3
 800ff2a:	d2fb      	bcs.n	800ff24 <__hexnan+0xcc>
 800ff2c:	683b      	ldr	r3, [r7, #0]
 800ff2e:	b91b      	cbnz	r3, 800ff38 <__hexnan+0xe0>
 800ff30:	4547      	cmp	r7, r8
 800ff32:	d128      	bne.n	800ff86 <__hexnan+0x12e>
 800ff34:	2301      	movs	r3, #1
 800ff36:	603b      	str	r3, [r7, #0]
 800ff38:	2005      	movs	r0, #5
 800ff3a:	b007      	add	sp, #28
 800ff3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff40:	3501      	adds	r5, #1
 800ff42:	2d08      	cmp	r5, #8
 800ff44:	f10b 0b01 	add.w	fp, fp, #1
 800ff48:	dd06      	ble.n	800ff58 <__hexnan+0x100>
 800ff4a:	4544      	cmp	r4, r8
 800ff4c:	d9c1      	bls.n	800fed2 <__hexnan+0x7a>
 800ff4e:	2300      	movs	r3, #0
 800ff50:	f844 3c04 	str.w	r3, [r4, #-4]
 800ff54:	2501      	movs	r5, #1
 800ff56:	3c04      	subs	r4, #4
 800ff58:	6822      	ldr	r2, [r4, #0]
 800ff5a:	f000 000f 	and.w	r0, r0, #15
 800ff5e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ff62:	6020      	str	r0, [r4, #0]
 800ff64:	e7b5      	b.n	800fed2 <__hexnan+0x7a>
 800ff66:	2508      	movs	r5, #8
 800ff68:	e7b3      	b.n	800fed2 <__hexnan+0x7a>
 800ff6a:	9b01      	ldr	r3, [sp, #4]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d0dd      	beq.n	800ff2c <__hexnan+0xd4>
 800ff70:	f1c3 0320 	rsb	r3, r3, #32
 800ff74:	f04f 32ff 	mov.w	r2, #4294967295
 800ff78:	40da      	lsrs	r2, r3
 800ff7a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ff7e:	4013      	ands	r3, r2
 800ff80:	f846 3c04 	str.w	r3, [r6, #-4]
 800ff84:	e7d2      	b.n	800ff2c <__hexnan+0xd4>
 800ff86:	3f04      	subs	r7, #4
 800ff88:	e7d0      	b.n	800ff2c <__hexnan+0xd4>
 800ff8a:	2004      	movs	r0, #4
 800ff8c:	e7d5      	b.n	800ff3a <__hexnan+0xe2>
	...

0800ff90 <malloc>:
 800ff90:	4b02      	ldr	r3, [pc, #8]	@ (800ff9c <malloc+0xc>)
 800ff92:	4601      	mov	r1, r0
 800ff94:	6818      	ldr	r0, [r3, #0]
 800ff96:	f000 b825 	b.w	800ffe4 <_malloc_r>
 800ff9a:	bf00      	nop
 800ff9c:	20000268 	.word	0x20000268

0800ffa0 <sbrk_aligned>:
 800ffa0:	b570      	push	{r4, r5, r6, lr}
 800ffa2:	4e0f      	ldr	r6, [pc, #60]	@ (800ffe0 <sbrk_aligned+0x40>)
 800ffa4:	460c      	mov	r4, r1
 800ffa6:	6831      	ldr	r1, [r6, #0]
 800ffa8:	4605      	mov	r5, r0
 800ffaa:	b911      	cbnz	r1, 800ffb2 <sbrk_aligned+0x12>
 800ffac:	f001 f808 	bl	8010fc0 <_sbrk_r>
 800ffb0:	6030      	str	r0, [r6, #0]
 800ffb2:	4621      	mov	r1, r4
 800ffb4:	4628      	mov	r0, r5
 800ffb6:	f001 f803 	bl	8010fc0 <_sbrk_r>
 800ffba:	1c43      	adds	r3, r0, #1
 800ffbc:	d103      	bne.n	800ffc6 <sbrk_aligned+0x26>
 800ffbe:	f04f 34ff 	mov.w	r4, #4294967295
 800ffc2:	4620      	mov	r0, r4
 800ffc4:	bd70      	pop	{r4, r5, r6, pc}
 800ffc6:	1cc4      	adds	r4, r0, #3
 800ffc8:	f024 0403 	bic.w	r4, r4, #3
 800ffcc:	42a0      	cmp	r0, r4
 800ffce:	d0f8      	beq.n	800ffc2 <sbrk_aligned+0x22>
 800ffd0:	1a21      	subs	r1, r4, r0
 800ffd2:	4628      	mov	r0, r5
 800ffd4:	f000 fff4 	bl	8010fc0 <_sbrk_r>
 800ffd8:	3001      	adds	r0, #1
 800ffda:	d1f2      	bne.n	800ffc2 <sbrk_aligned+0x22>
 800ffdc:	e7ef      	b.n	800ffbe <sbrk_aligned+0x1e>
 800ffde:	bf00      	nop
 800ffe0:	200052b4 	.word	0x200052b4

0800ffe4 <_malloc_r>:
 800ffe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ffe8:	1ccd      	adds	r5, r1, #3
 800ffea:	f025 0503 	bic.w	r5, r5, #3
 800ffee:	3508      	adds	r5, #8
 800fff0:	2d0c      	cmp	r5, #12
 800fff2:	bf38      	it	cc
 800fff4:	250c      	movcc	r5, #12
 800fff6:	2d00      	cmp	r5, #0
 800fff8:	4606      	mov	r6, r0
 800fffa:	db01      	blt.n	8010000 <_malloc_r+0x1c>
 800fffc:	42a9      	cmp	r1, r5
 800fffe:	d904      	bls.n	801000a <_malloc_r+0x26>
 8010000:	230c      	movs	r3, #12
 8010002:	6033      	str	r3, [r6, #0]
 8010004:	2000      	movs	r0, #0
 8010006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801000a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80100e0 <_malloc_r+0xfc>
 801000e:	f000 f87b 	bl	8010108 <__malloc_lock>
 8010012:	f8d8 3000 	ldr.w	r3, [r8]
 8010016:	461c      	mov	r4, r3
 8010018:	bb44      	cbnz	r4, 801006c <_malloc_r+0x88>
 801001a:	4629      	mov	r1, r5
 801001c:	4630      	mov	r0, r6
 801001e:	f7ff ffbf 	bl	800ffa0 <sbrk_aligned>
 8010022:	1c43      	adds	r3, r0, #1
 8010024:	4604      	mov	r4, r0
 8010026:	d158      	bne.n	80100da <_malloc_r+0xf6>
 8010028:	f8d8 4000 	ldr.w	r4, [r8]
 801002c:	4627      	mov	r7, r4
 801002e:	2f00      	cmp	r7, #0
 8010030:	d143      	bne.n	80100ba <_malloc_r+0xd6>
 8010032:	2c00      	cmp	r4, #0
 8010034:	d04b      	beq.n	80100ce <_malloc_r+0xea>
 8010036:	6823      	ldr	r3, [r4, #0]
 8010038:	4639      	mov	r1, r7
 801003a:	4630      	mov	r0, r6
 801003c:	eb04 0903 	add.w	r9, r4, r3
 8010040:	f000 ffbe 	bl	8010fc0 <_sbrk_r>
 8010044:	4581      	cmp	r9, r0
 8010046:	d142      	bne.n	80100ce <_malloc_r+0xea>
 8010048:	6821      	ldr	r1, [r4, #0]
 801004a:	1a6d      	subs	r5, r5, r1
 801004c:	4629      	mov	r1, r5
 801004e:	4630      	mov	r0, r6
 8010050:	f7ff ffa6 	bl	800ffa0 <sbrk_aligned>
 8010054:	3001      	adds	r0, #1
 8010056:	d03a      	beq.n	80100ce <_malloc_r+0xea>
 8010058:	6823      	ldr	r3, [r4, #0]
 801005a:	442b      	add	r3, r5
 801005c:	6023      	str	r3, [r4, #0]
 801005e:	f8d8 3000 	ldr.w	r3, [r8]
 8010062:	685a      	ldr	r2, [r3, #4]
 8010064:	bb62      	cbnz	r2, 80100c0 <_malloc_r+0xdc>
 8010066:	f8c8 7000 	str.w	r7, [r8]
 801006a:	e00f      	b.n	801008c <_malloc_r+0xa8>
 801006c:	6822      	ldr	r2, [r4, #0]
 801006e:	1b52      	subs	r2, r2, r5
 8010070:	d420      	bmi.n	80100b4 <_malloc_r+0xd0>
 8010072:	2a0b      	cmp	r2, #11
 8010074:	d917      	bls.n	80100a6 <_malloc_r+0xc2>
 8010076:	1961      	adds	r1, r4, r5
 8010078:	42a3      	cmp	r3, r4
 801007a:	6025      	str	r5, [r4, #0]
 801007c:	bf18      	it	ne
 801007e:	6059      	strne	r1, [r3, #4]
 8010080:	6863      	ldr	r3, [r4, #4]
 8010082:	bf08      	it	eq
 8010084:	f8c8 1000 	streq.w	r1, [r8]
 8010088:	5162      	str	r2, [r4, r5]
 801008a:	604b      	str	r3, [r1, #4]
 801008c:	4630      	mov	r0, r6
 801008e:	f000 f841 	bl	8010114 <__malloc_unlock>
 8010092:	f104 000b 	add.w	r0, r4, #11
 8010096:	1d23      	adds	r3, r4, #4
 8010098:	f020 0007 	bic.w	r0, r0, #7
 801009c:	1ac2      	subs	r2, r0, r3
 801009e:	bf1c      	itt	ne
 80100a0:	1a1b      	subne	r3, r3, r0
 80100a2:	50a3      	strne	r3, [r4, r2]
 80100a4:	e7af      	b.n	8010006 <_malloc_r+0x22>
 80100a6:	6862      	ldr	r2, [r4, #4]
 80100a8:	42a3      	cmp	r3, r4
 80100aa:	bf0c      	ite	eq
 80100ac:	f8c8 2000 	streq.w	r2, [r8]
 80100b0:	605a      	strne	r2, [r3, #4]
 80100b2:	e7eb      	b.n	801008c <_malloc_r+0xa8>
 80100b4:	4623      	mov	r3, r4
 80100b6:	6864      	ldr	r4, [r4, #4]
 80100b8:	e7ae      	b.n	8010018 <_malloc_r+0x34>
 80100ba:	463c      	mov	r4, r7
 80100bc:	687f      	ldr	r7, [r7, #4]
 80100be:	e7b6      	b.n	801002e <_malloc_r+0x4a>
 80100c0:	461a      	mov	r2, r3
 80100c2:	685b      	ldr	r3, [r3, #4]
 80100c4:	42a3      	cmp	r3, r4
 80100c6:	d1fb      	bne.n	80100c0 <_malloc_r+0xdc>
 80100c8:	2300      	movs	r3, #0
 80100ca:	6053      	str	r3, [r2, #4]
 80100cc:	e7de      	b.n	801008c <_malloc_r+0xa8>
 80100ce:	230c      	movs	r3, #12
 80100d0:	6033      	str	r3, [r6, #0]
 80100d2:	4630      	mov	r0, r6
 80100d4:	f000 f81e 	bl	8010114 <__malloc_unlock>
 80100d8:	e794      	b.n	8010004 <_malloc_r+0x20>
 80100da:	6005      	str	r5, [r0, #0]
 80100dc:	e7d6      	b.n	801008c <_malloc_r+0xa8>
 80100de:	bf00      	nop
 80100e0:	200052b8 	.word	0x200052b8

080100e4 <__ascii_mbtowc>:
 80100e4:	b082      	sub	sp, #8
 80100e6:	b901      	cbnz	r1, 80100ea <__ascii_mbtowc+0x6>
 80100e8:	a901      	add	r1, sp, #4
 80100ea:	b142      	cbz	r2, 80100fe <__ascii_mbtowc+0x1a>
 80100ec:	b14b      	cbz	r3, 8010102 <__ascii_mbtowc+0x1e>
 80100ee:	7813      	ldrb	r3, [r2, #0]
 80100f0:	600b      	str	r3, [r1, #0]
 80100f2:	7812      	ldrb	r2, [r2, #0]
 80100f4:	1e10      	subs	r0, r2, #0
 80100f6:	bf18      	it	ne
 80100f8:	2001      	movne	r0, #1
 80100fa:	b002      	add	sp, #8
 80100fc:	4770      	bx	lr
 80100fe:	4610      	mov	r0, r2
 8010100:	e7fb      	b.n	80100fa <__ascii_mbtowc+0x16>
 8010102:	f06f 0001 	mvn.w	r0, #1
 8010106:	e7f8      	b.n	80100fa <__ascii_mbtowc+0x16>

08010108 <__malloc_lock>:
 8010108:	4801      	ldr	r0, [pc, #4]	@ (8010110 <__malloc_lock+0x8>)
 801010a:	f7fe bd42 	b.w	800eb92 <__retarget_lock_acquire_recursive>
 801010e:	bf00      	nop
 8010110:	200052b0 	.word	0x200052b0

08010114 <__malloc_unlock>:
 8010114:	4801      	ldr	r0, [pc, #4]	@ (801011c <__malloc_unlock+0x8>)
 8010116:	f7fe bd3d 	b.w	800eb94 <__retarget_lock_release_recursive>
 801011a:	bf00      	nop
 801011c:	200052b0 	.word	0x200052b0

08010120 <_Balloc>:
 8010120:	b570      	push	{r4, r5, r6, lr}
 8010122:	69c6      	ldr	r6, [r0, #28]
 8010124:	4604      	mov	r4, r0
 8010126:	460d      	mov	r5, r1
 8010128:	b976      	cbnz	r6, 8010148 <_Balloc+0x28>
 801012a:	2010      	movs	r0, #16
 801012c:	f7ff ff30 	bl	800ff90 <malloc>
 8010130:	4602      	mov	r2, r0
 8010132:	61e0      	str	r0, [r4, #28]
 8010134:	b920      	cbnz	r0, 8010140 <_Balloc+0x20>
 8010136:	4b18      	ldr	r3, [pc, #96]	@ (8010198 <_Balloc+0x78>)
 8010138:	4818      	ldr	r0, [pc, #96]	@ (801019c <_Balloc+0x7c>)
 801013a:	216b      	movs	r1, #107	@ 0x6b
 801013c:	f000 ff50 	bl	8010fe0 <__assert_func>
 8010140:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010144:	6006      	str	r6, [r0, #0]
 8010146:	60c6      	str	r6, [r0, #12]
 8010148:	69e6      	ldr	r6, [r4, #28]
 801014a:	68f3      	ldr	r3, [r6, #12]
 801014c:	b183      	cbz	r3, 8010170 <_Balloc+0x50>
 801014e:	69e3      	ldr	r3, [r4, #28]
 8010150:	68db      	ldr	r3, [r3, #12]
 8010152:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010156:	b9b8      	cbnz	r0, 8010188 <_Balloc+0x68>
 8010158:	2101      	movs	r1, #1
 801015a:	fa01 f605 	lsl.w	r6, r1, r5
 801015e:	1d72      	adds	r2, r6, #5
 8010160:	0092      	lsls	r2, r2, #2
 8010162:	4620      	mov	r0, r4
 8010164:	f000 ff5a 	bl	801101c <_calloc_r>
 8010168:	b160      	cbz	r0, 8010184 <_Balloc+0x64>
 801016a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801016e:	e00e      	b.n	801018e <_Balloc+0x6e>
 8010170:	2221      	movs	r2, #33	@ 0x21
 8010172:	2104      	movs	r1, #4
 8010174:	4620      	mov	r0, r4
 8010176:	f000 ff51 	bl	801101c <_calloc_r>
 801017a:	69e3      	ldr	r3, [r4, #28]
 801017c:	60f0      	str	r0, [r6, #12]
 801017e:	68db      	ldr	r3, [r3, #12]
 8010180:	2b00      	cmp	r3, #0
 8010182:	d1e4      	bne.n	801014e <_Balloc+0x2e>
 8010184:	2000      	movs	r0, #0
 8010186:	bd70      	pop	{r4, r5, r6, pc}
 8010188:	6802      	ldr	r2, [r0, #0]
 801018a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801018e:	2300      	movs	r3, #0
 8010190:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010194:	e7f7      	b.n	8010186 <_Balloc+0x66>
 8010196:	bf00      	nop
 8010198:	080118fc 	.word	0x080118fc
 801019c:	080119dc 	.word	0x080119dc

080101a0 <_Bfree>:
 80101a0:	b570      	push	{r4, r5, r6, lr}
 80101a2:	69c6      	ldr	r6, [r0, #28]
 80101a4:	4605      	mov	r5, r0
 80101a6:	460c      	mov	r4, r1
 80101a8:	b976      	cbnz	r6, 80101c8 <_Bfree+0x28>
 80101aa:	2010      	movs	r0, #16
 80101ac:	f7ff fef0 	bl	800ff90 <malloc>
 80101b0:	4602      	mov	r2, r0
 80101b2:	61e8      	str	r0, [r5, #28]
 80101b4:	b920      	cbnz	r0, 80101c0 <_Bfree+0x20>
 80101b6:	4b09      	ldr	r3, [pc, #36]	@ (80101dc <_Bfree+0x3c>)
 80101b8:	4809      	ldr	r0, [pc, #36]	@ (80101e0 <_Bfree+0x40>)
 80101ba:	218f      	movs	r1, #143	@ 0x8f
 80101bc:	f000 ff10 	bl	8010fe0 <__assert_func>
 80101c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80101c4:	6006      	str	r6, [r0, #0]
 80101c6:	60c6      	str	r6, [r0, #12]
 80101c8:	b13c      	cbz	r4, 80101da <_Bfree+0x3a>
 80101ca:	69eb      	ldr	r3, [r5, #28]
 80101cc:	6862      	ldr	r2, [r4, #4]
 80101ce:	68db      	ldr	r3, [r3, #12]
 80101d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80101d4:	6021      	str	r1, [r4, #0]
 80101d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80101da:	bd70      	pop	{r4, r5, r6, pc}
 80101dc:	080118fc 	.word	0x080118fc
 80101e0:	080119dc 	.word	0x080119dc

080101e4 <__multadd>:
 80101e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101e8:	690d      	ldr	r5, [r1, #16]
 80101ea:	4607      	mov	r7, r0
 80101ec:	460c      	mov	r4, r1
 80101ee:	461e      	mov	r6, r3
 80101f0:	f101 0c14 	add.w	ip, r1, #20
 80101f4:	2000      	movs	r0, #0
 80101f6:	f8dc 3000 	ldr.w	r3, [ip]
 80101fa:	b299      	uxth	r1, r3
 80101fc:	fb02 6101 	mla	r1, r2, r1, r6
 8010200:	0c1e      	lsrs	r6, r3, #16
 8010202:	0c0b      	lsrs	r3, r1, #16
 8010204:	fb02 3306 	mla	r3, r2, r6, r3
 8010208:	b289      	uxth	r1, r1
 801020a:	3001      	adds	r0, #1
 801020c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010210:	4285      	cmp	r5, r0
 8010212:	f84c 1b04 	str.w	r1, [ip], #4
 8010216:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801021a:	dcec      	bgt.n	80101f6 <__multadd+0x12>
 801021c:	b30e      	cbz	r6, 8010262 <__multadd+0x7e>
 801021e:	68a3      	ldr	r3, [r4, #8]
 8010220:	42ab      	cmp	r3, r5
 8010222:	dc19      	bgt.n	8010258 <__multadd+0x74>
 8010224:	6861      	ldr	r1, [r4, #4]
 8010226:	4638      	mov	r0, r7
 8010228:	3101      	adds	r1, #1
 801022a:	f7ff ff79 	bl	8010120 <_Balloc>
 801022e:	4680      	mov	r8, r0
 8010230:	b928      	cbnz	r0, 801023e <__multadd+0x5a>
 8010232:	4602      	mov	r2, r0
 8010234:	4b0c      	ldr	r3, [pc, #48]	@ (8010268 <__multadd+0x84>)
 8010236:	480d      	ldr	r0, [pc, #52]	@ (801026c <__multadd+0x88>)
 8010238:	21ba      	movs	r1, #186	@ 0xba
 801023a:	f000 fed1 	bl	8010fe0 <__assert_func>
 801023e:	6922      	ldr	r2, [r4, #16]
 8010240:	3202      	adds	r2, #2
 8010242:	f104 010c 	add.w	r1, r4, #12
 8010246:	0092      	lsls	r2, r2, #2
 8010248:	300c      	adds	r0, #12
 801024a:	f7fe fca4 	bl	800eb96 <memcpy>
 801024e:	4621      	mov	r1, r4
 8010250:	4638      	mov	r0, r7
 8010252:	f7ff ffa5 	bl	80101a0 <_Bfree>
 8010256:	4644      	mov	r4, r8
 8010258:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801025c:	3501      	adds	r5, #1
 801025e:	615e      	str	r6, [r3, #20]
 8010260:	6125      	str	r5, [r4, #16]
 8010262:	4620      	mov	r0, r4
 8010264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010268:	0801196b 	.word	0x0801196b
 801026c:	080119dc 	.word	0x080119dc

08010270 <__s2b>:
 8010270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010274:	460c      	mov	r4, r1
 8010276:	4615      	mov	r5, r2
 8010278:	461f      	mov	r7, r3
 801027a:	2209      	movs	r2, #9
 801027c:	3308      	adds	r3, #8
 801027e:	4606      	mov	r6, r0
 8010280:	fb93 f3f2 	sdiv	r3, r3, r2
 8010284:	2100      	movs	r1, #0
 8010286:	2201      	movs	r2, #1
 8010288:	429a      	cmp	r2, r3
 801028a:	db09      	blt.n	80102a0 <__s2b+0x30>
 801028c:	4630      	mov	r0, r6
 801028e:	f7ff ff47 	bl	8010120 <_Balloc>
 8010292:	b940      	cbnz	r0, 80102a6 <__s2b+0x36>
 8010294:	4602      	mov	r2, r0
 8010296:	4b19      	ldr	r3, [pc, #100]	@ (80102fc <__s2b+0x8c>)
 8010298:	4819      	ldr	r0, [pc, #100]	@ (8010300 <__s2b+0x90>)
 801029a:	21d3      	movs	r1, #211	@ 0xd3
 801029c:	f000 fea0 	bl	8010fe0 <__assert_func>
 80102a0:	0052      	lsls	r2, r2, #1
 80102a2:	3101      	adds	r1, #1
 80102a4:	e7f0      	b.n	8010288 <__s2b+0x18>
 80102a6:	9b08      	ldr	r3, [sp, #32]
 80102a8:	6143      	str	r3, [r0, #20]
 80102aa:	2d09      	cmp	r5, #9
 80102ac:	f04f 0301 	mov.w	r3, #1
 80102b0:	6103      	str	r3, [r0, #16]
 80102b2:	dd16      	ble.n	80102e2 <__s2b+0x72>
 80102b4:	f104 0909 	add.w	r9, r4, #9
 80102b8:	46c8      	mov	r8, r9
 80102ba:	442c      	add	r4, r5
 80102bc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80102c0:	4601      	mov	r1, r0
 80102c2:	3b30      	subs	r3, #48	@ 0x30
 80102c4:	220a      	movs	r2, #10
 80102c6:	4630      	mov	r0, r6
 80102c8:	f7ff ff8c 	bl	80101e4 <__multadd>
 80102cc:	45a0      	cmp	r8, r4
 80102ce:	d1f5      	bne.n	80102bc <__s2b+0x4c>
 80102d0:	f1a5 0408 	sub.w	r4, r5, #8
 80102d4:	444c      	add	r4, r9
 80102d6:	1b2d      	subs	r5, r5, r4
 80102d8:	1963      	adds	r3, r4, r5
 80102da:	42bb      	cmp	r3, r7
 80102dc:	db04      	blt.n	80102e8 <__s2b+0x78>
 80102de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102e2:	340a      	adds	r4, #10
 80102e4:	2509      	movs	r5, #9
 80102e6:	e7f6      	b.n	80102d6 <__s2b+0x66>
 80102e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80102ec:	4601      	mov	r1, r0
 80102ee:	3b30      	subs	r3, #48	@ 0x30
 80102f0:	220a      	movs	r2, #10
 80102f2:	4630      	mov	r0, r6
 80102f4:	f7ff ff76 	bl	80101e4 <__multadd>
 80102f8:	e7ee      	b.n	80102d8 <__s2b+0x68>
 80102fa:	bf00      	nop
 80102fc:	0801196b 	.word	0x0801196b
 8010300:	080119dc 	.word	0x080119dc

08010304 <__hi0bits>:
 8010304:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010308:	4603      	mov	r3, r0
 801030a:	bf36      	itet	cc
 801030c:	0403      	lslcc	r3, r0, #16
 801030e:	2000      	movcs	r0, #0
 8010310:	2010      	movcc	r0, #16
 8010312:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010316:	bf3c      	itt	cc
 8010318:	021b      	lslcc	r3, r3, #8
 801031a:	3008      	addcc	r0, #8
 801031c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010320:	bf3c      	itt	cc
 8010322:	011b      	lslcc	r3, r3, #4
 8010324:	3004      	addcc	r0, #4
 8010326:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801032a:	bf3c      	itt	cc
 801032c:	009b      	lslcc	r3, r3, #2
 801032e:	3002      	addcc	r0, #2
 8010330:	2b00      	cmp	r3, #0
 8010332:	db05      	blt.n	8010340 <__hi0bits+0x3c>
 8010334:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010338:	f100 0001 	add.w	r0, r0, #1
 801033c:	bf08      	it	eq
 801033e:	2020      	moveq	r0, #32
 8010340:	4770      	bx	lr

08010342 <__lo0bits>:
 8010342:	6803      	ldr	r3, [r0, #0]
 8010344:	4602      	mov	r2, r0
 8010346:	f013 0007 	ands.w	r0, r3, #7
 801034a:	d00b      	beq.n	8010364 <__lo0bits+0x22>
 801034c:	07d9      	lsls	r1, r3, #31
 801034e:	d421      	bmi.n	8010394 <__lo0bits+0x52>
 8010350:	0798      	lsls	r0, r3, #30
 8010352:	bf49      	itett	mi
 8010354:	085b      	lsrmi	r3, r3, #1
 8010356:	089b      	lsrpl	r3, r3, #2
 8010358:	2001      	movmi	r0, #1
 801035a:	6013      	strmi	r3, [r2, #0]
 801035c:	bf5c      	itt	pl
 801035e:	6013      	strpl	r3, [r2, #0]
 8010360:	2002      	movpl	r0, #2
 8010362:	4770      	bx	lr
 8010364:	b299      	uxth	r1, r3
 8010366:	b909      	cbnz	r1, 801036c <__lo0bits+0x2a>
 8010368:	0c1b      	lsrs	r3, r3, #16
 801036a:	2010      	movs	r0, #16
 801036c:	b2d9      	uxtb	r1, r3
 801036e:	b909      	cbnz	r1, 8010374 <__lo0bits+0x32>
 8010370:	3008      	adds	r0, #8
 8010372:	0a1b      	lsrs	r3, r3, #8
 8010374:	0719      	lsls	r1, r3, #28
 8010376:	bf04      	itt	eq
 8010378:	091b      	lsreq	r3, r3, #4
 801037a:	3004      	addeq	r0, #4
 801037c:	0799      	lsls	r1, r3, #30
 801037e:	bf04      	itt	eq
 8010380:	089b      	lsreq	r3, r3, #2
 8010382:	3002      	addeq	r0, #2
 8010384:	07d9      	lsls	r1, r3, #31
 8010386:	d403      	bmi.n	8010390 <__lo0bits+0x4e>
 8010388:	085b      	lsrs	r3, r3, #1
 801038a:	f100 0001 	add.w	r0, r0, #1
 801038e:	d003      	beq.n	8010398 <__lo0bits+0x56>
 8010390:	6013      	str	r3, [r2, #0]
 8010392:	4770      	bx	lr
 8010394:	2000      	movs	r0, #0
 8010396:	4770      	bx	lr
 8010398:	2020      	movs	r0, #32
 801039a:	4770      	bx	lr

0801039c <__i2b>:
 801039c:	b510      	push	{r4, lr}
 801039e:	460c      	mov	r4, r1
 80103a0:	2101      	movs	r1, #1
 80103a2:	f7ff febd 	bl	8010120 <_Balloc>
 80103a6:	4602      	mov	r2, r0
 80103a8:	b928      	cbnz	r0, 80103b6 <__i2b+0x1a>
 80103aa:	4b05      	ldr	r3, [pc, #20]	@ (80103c0 <__i2b+0x24>)
 80103ac:	4805      	ldr	r0, [pc, #20]	@ (80103c4 <__i2b+0x28>)
 80103ae:	f240 1145 	movw	r1, #325	@ 0x145
 80103b2:	f000 fe15 	bl	8010fe0 <__assert_func>
 80103b6:	2301      	movs	r3, #1
 80103b8:	6144      	str	r4, [r0, #20]
 80103ba:	6103      	str	r3, [r0, #16]
 80103bc:	bd10      	pop	{r4, pc}
 80103be:	bf00      	nop
 80103c0:	0801196b 	.word	0x0801196b
 80103c4:	080119dc 	.word	0x080119dc

080103c8 <__multiply>:
 80103c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103cc:	4617      	mov	r7, r2
 80103ce:	690a      	ldr	r2, [r1, #16]
 80103d0:	693b      	ldr	r3, [r7, #16]
 80103d2:	429a      	cmp	r2, r3
 80103d4:	bfa8      	it	ge
 80103d6:	463b      	movge	r3, r7
 80103d8:	4689      	mov	r9, r1
 80103da:	bfa4      	itt	ge
 80103dc:	460f      	movge	r7, r1
 80103de:	4699      	movge	r9, r3
 80103e0:	693d      	ldr	r5, [r7, #16]
 80103e2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80103e6:	68bb      	ldr	r3, [r7, #8]
 80103e8:	6879      	ldr	r1, [r7, #4]
 80103ea:	eb05 060a 	add.w	r6, r5, sl
 80103ee:	42b3      	cmp	r3, r6
 80103f0:	b085      	sub	sp, #20
 80103f2:	bfb8      	it	lt
 80103f4:	3101      	addlt	r1, #1
 80103f6:	f7ff fe93 	bl	8010120 <_Balloc>
 80103fa:	b930      	cbnz	r0, 801040a <__multiply+0x42>
 80103fc:	4602      	mov	r2, r0
 80103fe:	4b41      	ldr	r3, [pc, #260]	@ (8010504 <__multiply+0x13c>)
 8010400:	4841      	ldr	r0, [pc, #260]	@ (8010508 <__multiply+0x140>)
 8010402:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010406:	f000 fdeb 	bl	8010fe0 <__assert_func>
 801040a:	f100 0414 	add.w	r4, r0, #20
 801040e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8010412:	4623      	mov	r3, r4
 8010414:	2200      	movs	r2, #0
 8010416:	4573      	cmp	r3, lr
 8010418:	d320      	bcc.n	801045c <__multiply+0x94>
 801041a:	f107 0814 	add.w	r8, r7, #20
 801041e:	f109 0114 	add.w	r1, r9, #20
 8010422:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8010426:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801042a:	9302      	str	r3, [sp, #8]
 801042c:	1beb      	subs	r3, r5, r7
 801042e:	3b15      	subs	r3, #21
 8010430:	f023 0303 	bic.w	r3, r3, #3
 8010434:	3304      	adds	r3, #4
 8010436:	3715      	adds	r7, #21
 8010438:	42bd      	cmp	r5, r7
 801043a:	bf38      	it	cc
 801043c:	2304      	movcc	r3, #4
 801043e:	9301      	str	r3, [sp, #4]
 8010440:	9b02      	ldr	r3, [sp, #8]
 8010442:	9103      	str	r1, [sp, #12]
 8010444:	428b      	cmp	r3, r1
 8010446:	d80c      	bhi.n	8010462 <__multiply+0x9a>
 8010448:	2e00      	cmp	r6, #0
 801044a:	dd03      	ble.n	8010454 <__multiply+0x8c>
 801044c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8010450:	2b00      	cmp	r3, #0
 8010452:	d055      	beq.n	8010500 <__multiply+0x138>
 8010454:	6106      	str	r6, [r0, #16]
 8010456:	b005      	add	sp, #20
 8010458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801045c:	f843 2b04 	str.w	r2, [r3], #4
 8010460:	e7d9      	b.n	8010416 <__multiply+0x4e>
 8010462:	f8b1 a000 	ldrh.w	sl, [r1]
 8010466:	f1ba 0f00 	cmp.w	sl, #0
 801046a:	d01f      	beq.n	80104ac <__multiply+0xe4>
 801046c:	46c4      	mov	ip, r8
 801046e:	46a1      	mov	r9, r4
 8010470:	2700      	movs	r7, #0
 8010472:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010476:	f8d9 3000 	ldr.w	r3, [r9]
 801047a:	fa1f fb82 	uxth.w	fp, r2
 801047e:	b29b      	uxth	r3, r3
 8010480:	fb0a 330b 	mla	r3, sl, fp, r3
 8010484:	443b      	add	r3, r7
 8010486:	f8d9 7000 	ldr.w	r7, [r9]
 801048a:	0c12      	lsrs	r2, r2, #16
 801048c:	0c3f      	lsrs	r7, r7, #16
 801048e:	fb0a 7202 	mla	r2, sl, r2, r7
 8010492:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8010496:	b29b      	uxth	r3, r3
 8010498:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801049c:	4565      	cmp	r5, ip
 801049e:	f849 3b04 	str.w	r3, [r9], #4
 80104a2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80104a6:	d8e4      	bhi.n	8010472 <__multiply+0xaa>
 80104a8:	9b01      	ldr	r3, [sp, #4]
 80104aa:	50e7      	str	r7, [r4, r3]
 80104ac:	9b03      	ldr	r3, [sp, #12]
 80104ae:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80104b2:	3104      	adds	r1, #4
 80104b4:	f1b9 0f00 	cmp.w	r9, #0
 80104b8:	d020      	beq.n	80104fc <__multiply+0x134>
 80104ba:	6823      	ldr	r3, [r4, #0]
 80104bc:	4647      	mov	r7, r8
 80104be:	46a4      	mov	ip, r4
 80104c0:	f04f 0a00 	mov.w	sl, #0
 80104c4:	f8b7 b000 	ldrh.w	fp, [r7]
 80104c8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80104cc:	fb09 220b 	mla	r2, r9, fp, r2
 80104d0:	4452      	add	r2, sl
 80104d2:	b29b      	uxth	r3, r3
 80104d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80104d8:	f84c 3b04 	str.w	r3, [ip], #4
 80104dc:	f857 3b04 	ldr.w	r3, [r7], #4
 80104e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80104e4:	f8bc 3000 	ldrh.w	r3, [ip]
 80104e8:	fb09 330a 	mla	r3, r9, sl, r3
 80104ec:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80104f0:	42bd      	cmp	r5, r7
 80104f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80104f6:	d8e5      	bhi.n	80104c4 <__multiply+0xfc>
 80104f8:	9a01      	ldr	r2, [sp, #4]
 80104fa:	50a3      	str	r3, [r4, r2]
 80104fc:	3404      	adds	r4, #4
 80104fe:	e79f      	b.n	8010440 <__multiply+0x78>
 8010500:	3e01      	subs	r6, #1
 8010502:	e7a1      	b.n	8010448 <__multiply+0x80>
 8010504:	0801196b 	.word	0x0801196b
 8010508:	080119dc 	.word	0x080119dc

0801050c <__pow5mult>:
 801050c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010510:	4615      	mov	r5, r2
 8010512:	f012 0203 	ands.w	r2, r2, #3
 8010516:	4607      	mov	r7, r0
 8010518:	460e      	mov	r6, r1
 801051a:	d007      	beq.n	801052c <__pow5mult+0x20>
 801051c:	4c25      	ldr	r4, [pc, #148]	@ (80105b4 <__pow5mult+0xa8>)
 801051e:	3a01      	subs	r2, #1
 8010520:	2300      	movs	r3, #0
 8010522:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010526:	f7ff fe5d 	bl	80101e4 <__multadd>
 801052a:	4606      	mov	r6, r0
 801052c:	10ad      	asrs	r5, r5, #2
 801052e:	d03d      	beq.n	80105ac <__pow5mult+0xa0>
 8010530:	69fc      	ldr	r4, [r7, #28]
 8010532:	b97c      	cbnz	r4, 8010554 <__pow5mult+0x48>
 8010534:	2010      	movs	r0, #16
 8010536:	f7ff fd2b 	bl	800ff90 <malloc>
 801053a:	4602      	mov	r2, r0
 801053c:	61f8      	str	r0, [r7, #28]
 801053e:	b928      	cbnz	r0, 801054c <__pow5mult+0x40>
 8010540:	4b1d      	ldr	r3, [pc, #116]	@ (80105b8 <__pow5mult+0xac>)
 8010542:	481e      	ldr	r0, [pc, #120]	@ (80105bc <__pow5mult+0xb0>)
 8010544:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010548:	f000 fd4a 	bl	8010fe0 <__assert_func>
 801054c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010550:	6004      	str	r4, [r0, #0]
 8010552:	60c4      	str	r4, [r0, #12]
 8010554:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010558:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801055c:	b94c      	cbnz	r4, 8010572 <__pow5mult+0x66>
 801055e:	f240 2171 	movw	r1, #625	@ 0x271
 8010562:	4638      	mov	r0, r7
 8010564:	f7ff ff1a 	bl	801039c <__i2b>
 8010568:	2300      	movs	r3, #0
 801056a:	f8c8 0008 	str.w	r0, [r8, #8]
 801056e:	4604      	mov	r4, r0
 8010570:	6003      	str	r3, [r0, #0]
 8010572:	f04f 0900 	mov.w	r9, #0
 8010576:	07eb      	lsls	r3, r5, #31
 8010578:	d50a      	bpl.n	8010590 <__pow5mult+0x84>
 801057a:	4631      	mov	r1, r6
 801057c:	4622      	mov	r2, r4
 801057e:	4638      	mov	r0, r7
 8010580:	f7ff ff22 	bl	80103c8 <__multiply>
 8010584:	4631      	mov	r1, r6
 8010586:	4680      	mov	r8, r0
 8010588:	4638      	mov	r0, r7
 801058a:	f7ff fe09 	bl	80101a0 <_Bfree>
 801058e:	4646      	mov	r6, r8
 8010590:	106d      	asrs	r5, r5, #1
 8010592:	d00b      	beq.n	80105ac <__pow5mult+0xa0>
 8010594:	6820      	ldr	r0, [r4, #0]
 8010596:	b938      	cbnz	r0, 80105a8 <__pow5mult+0x9c>
 8010598:	4622      	mov	r2, r4
 801059a:	4621      	mov	r1, r4
 801059c:	4638      	mov	r0, r7
 801059e:	f7ff ff13 	bl	80103c8 <__multiply>
 80105a2:	6020      	str	r0, [r4, #0]
 80105a4:	f8c0 9000 	str.w	r9, [r0]
 80105a8:	4604      	mov	r4, r0
 80105aa:	e7e4      	b.n	8010576 <__pow5mult+0x6a>
 80105ac:	4630      	mov	r0, r6
 80105ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105b2:	bf00      	nop
 80105b4:	08011ad8 	.word	0x08011ad8
 80105b8:	080118fc 	.word	0x080118fc
 80105bc:	080119dc 	.word	0x080119dc

080105c0 <__lshift>:
 80105c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105c4:	460c      	mov	r4, r1
 80105c6:	6849      	ldr	r1, [r1, #4]
 80105c8:	6923      	ldr	r3, [r4, #16]
 80105ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80105ce:	68a3      	ldr	r3, [r4, #8]
 80105d0:	4607      	mov	r7, r0
 80105d2:	4691      	mov	r9, r2
 80105d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80105d8:	f108 0601 	add.w	r6, r8, #1
 80105dc:	42b3      	cmp	r3, r6
 80105de:	db0b      	blt.n	80105f8 <__lshift+0x38>
 80105e0:	4638      	mov	r0, r7
 80105e2:	f7ff fd9d 	bl	8010120 <_Balloc>
 80105e6:	4605      	mov	r5, r0
 80105e8:	b948      	cbnz	r0, 80105fe <__lshift+0x3e>
 80105ea:	4602      	mov	r2, r0
 80105ec:	4b28      	ldr	r3, [pc, #160]	@ (8010690 <__lshift+0xd0>)
 80105ee:	4829      	ldr	r0, [pc, #164]	@ (8010694 <__lshift+0xd4>)
 80105f0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80105f4:	f000 fcf4 	bl	8010fe0 <__assert_func>
 80105f8:	3101      	adds	r1, #1
 80105fa:	005b      	lsls	r3, r3, #1
 80105fc:	e7ee      	b.n	80105dc <__lshift+0x1c>
 80105fe:	2300      	movs	r3, #0
 8010600:	f100 0114 	add.w	r1, r0, #20
 8010604:	f100 0210 	add.w	r2, r0, #16
 8010608:	4618      	mov	r0, r3
 801060a:	4553      	cmp	r3, sl
 801060c:	db33      	blt.n	8010676 <__lshift+0xb6>
 801060e:	6920      	ldr	r0, [r4, #16]
 8010610:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010614:	f104 0314 	add.w	r3, r4, #20
 8010618:	f019 091f 	ands.w	r9, r9, #31
 801061c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010620:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010624:	d02b      	beq.n	801067e <__lshift+0xbe>
 8010626:	f1c9 0e20 	rsb	lr, r9, #32
 801062a:	468a      	mov	sl, r1
 801062c:	2200      	movs	r2, #0
 801062e:	6818      	ldr	r0, [r3, #0]
 8010630:	fa00 f009 	lsl.w	r0, r0, r9
 8010634:	4310      	orrs	r0, r2
 8010636:	f84a 0b04 	str.w	r0, [sl], #4
 801063a:	f853 2b04 	ldr.w	r2, [r3], #4
 801063e:	459c      	cmp	ip, r3
 8010640:	fa22 f20e 	lsr.w	r2, r2, lr
 8010644:	d8f3      	bhi.n	801062e <__lshift+0x6e>
 8010646:	ebac 0304 	sub.w	r3, ip, r4
 801064a:	3b15      	subs	r3, #21
 801064c:	f023 0303 	bic.w	r3, r3, #3
 8010650:	3304      	adds	r3, #4
 8010652:	f104 0015 	add.w	r0, r4, #21
 8010656:	4560      	cmp	r0, ip
 8010658:	bf88      	it	hi
 801065a:	2304      	movhi	r3, #4
 801065c:	50ca      	str	r2, [r1, r3]
 801065e:	b10a      	cbz	r2, 8010664 <__lshift+0xa4>
 8010660:	f108 0602 	add.w	r6, r8, #2
 8010664:	3e01      	subs	r6, #1
 8010666:	4638      	mov	r0, r7
 8010668:	612e      	str	r6, [r5, #16]
 801066a:	4621      	mov	r1, r4
 801066c:	f7ff fd98 	bl	80101a0 <_Bfree>
 8010670:	4628      	mov	r0, r5
 8010672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010676:	f842 0f04 	str.w	r0, [r2, #4]!
 801067a:	3301      	adds	r3, #1
 801067c:	e7c5      	b.n	801060a <__lshift+0x4a>
 801067e:	3904      	subs	r1, #4
 8010680:	f853 2b04 	ldr.w	r2, [r3], #4
 8010684:	f841 2f04 	str.w	r2, [r1, #4]!
 8010688:	459c      	cmp	ip, r3
 801068a:	d8f9      	bhi.n	8010680 <__lshift+0xc0>
 801068c:	e7ea      	b.n	8010664 <__lshift+0xa4>
 801068e:	bf00      	nop
 8010690:	0801196b 	.word	0x0801196b
 8010694:	080119dc 	.word	0x080119dc

08010698 <__mcmp>:
 8010698:	690a      	ldr	r2, [r1, #16]
 801069a:	4603      	mov	r3, r0
 801069c:	6900      	ldr	r0, [r0, #16]
 801069e:	1a80      	subs	r0, r0, r2
 80106a0:	b530      	push	{r4, r5, lr}
 80106a2:	d10e      	bne.n	80106c2 <__mcmp+0x2a>
 80106a4:	3314      	adds	r3, #20
 80106a6:	3114      	adds	r1, #20
 80106a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80106ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80106b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80106b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80106b8:	4295      	cmp	r5, r2
 80106ba:	d003      	beq.n	80106c4 <__mcmp+0x2c>
 80106bc:	d205      	bcs.n	80106ca <__mcmp+0x32>
 80106be:	f04f 30ff 	mov.w	r0, #4294967295
 80106c2:	bd30      	pop	{r4, r5, pc}
 80106c4:	42a3      	cmp	r3, r4
 80106c6:	d3f3      	bcc.n	80106b0 <__mcmp+0x18>
 80106c8:	e7fb      	b.n	80106c2 <__mcmp+0x2a>
 80106ca:	2001      	movs	r0, #1
 80106cc:	e7f9      	b.n	80106c2 <__mcmp+0x2a>
	...

080106d0 <__mdiff>:
 80106d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106d4:	4689      	mov	r9, r1
 80106d6:	4606      	mov	r6, r0
 80106d8:	4611      	mov	r1, r2
 80106da:	4648      	mov	r0, r9
 80106dc:	4614      	mov	r4, r2
 80106de:	f7ff ffdb 	bl	8010698 <__mcmp>
 80106e2:	1e05      	subs	r5, r0, #0
 80106e4:	d112      	bne.n	801070c <__mdiff+0x3c>
 80106e6:	4629      	mov	r1, r5
 80106e8:	4630      	mov	r0, r6
 80106ea:	f7ff fd19 	bl	8010120 <_Balloc>
 80106ee:	4602      	mov	r2, r0
 80106f0:	b928      	cbnz	r0, 80106fe <__mdiff+0x2e>
 80106f2:	4b3f      	ldr	r3, [pc, #252]	@ (80107f0 <__mdiff+0x120>)
 80106f4:	f240 2137 	movw	r1, #567	@ 0x237
 80106f8:	483e      	ldr	r0, [pc, #248]	@ (80107f4 <__mdiff+0x124>)
 80106fa:	f000 fc71 	bl	8010fe0 <__assert_func>
 80106fe:	2301      	movs	r3, #1
 8010700:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010704:	4610      	mov	r0, r2
 8010706:	b003      	add	sp, #12
 8010708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801070c:	bfbc      	itt	lt
 801070e:	464b      	movlt	r3, r9
 8010710:	46a1      	movlt	r9, r4
 8010712:	4630      	mov	r0, r6
 8010714:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010718:	bfba      	itte	lt
 801071a:	461c      	movlt	r4, r3
 801071c:	2501      	movlt	r5, #1
 801071e:	2500      	movge	r5, #0
 8010720:	f7ff fcfe 	bl	8010120 <_Balloc>
 8010724:	4602      	mov	r2, r0
 8010726:	b918      	cbnz	r0, 8010730 <__mdiff+0x60>
 8010728:	4b31      	ldr	r3, [pc, #196]	@ (80107f0 <__mdiff+0x120>)
 801072a:	f240 2145 	movw	r1, #581	@ 0x245
 801072e:	e7e3      	b.n	80106f8 <__mdiff+0x28>
 8010730:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010734:	6926      	ldr	r6, [r4, #16]
 8010736:	60c5      	str	r5, [r0, #12]
 8010738:	f109 0310 	add.w	r3, r9, #16
 801073c:	f109 0514 	add.w	r5, r9, #20
 8010740:	f104 0e14 	add.w	lr, r4, #20
 8010744:	f100 0b14 	add.w	fp, r0, #20
 8010748:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801074c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010750:	9301      	str	r3, [sp, #4]
 8010752:	46d9      	mov	r9, fp
 8010754:	f04f 0c00 	mov.w	ip, #0
 8010758:	9b01      	ldr	r3, [sp, #4]
 801075a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801075e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010762:	9301      	str	r3, [sp, #4]
 8010764:	fa1f f38a 	uxth.w	r3, sl
 8010768:	4619      	mov	r1, r3
 801076a:	b283      	uxth	r3, r0
 801076c:	1acb      	subs	r3, r1, r3
 801076e:	0c00      	lsrs	r0, r0, #16
 8010770:	4463      	add	r3, ip
 8010772:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010776:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801077a:	b29b      	uxth	r3, r3
 801077c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010780:	4576      	cmp	r6, lr
 8010782:	f849 3b04 	str.w	r3, [r9], #4
 8010786:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801078a:	d8e5      	bhi.n	8010758 <__mdiff+0x88>
 801078c:	1b33      	subs	r3, r6, r4
 801078e:	3b15      	subs	r3, #21
 8010790:	f023 0303 	bic.w	r3, r3, #3
 8010794:	3415      	adds	r4, #21
 8010796:	3304      	adds	r3, #4
 8010798:	42a6      	cmp	r6, r4
 801079a:	bf38      	it	cc
 801079c:	2304      	movcc	r3, #4
 801079e:	441d      	add	r5, r3
 80107a0:	445b      	add	r3, fp
 80107a2:	461e      	mov	r6, r3
 80107a4:	462c      	mov	r4, r5
 80107a6:	4544      	cmp	r4, r8
 80107a8:	d30e      	bcc.n	80107c8 <__mdiff+0xf8>
 80107aa:	f108 0103 	add.w	r1, r8, #3
 80107ae:	1b49      	subs	r1, r1, r5
 80107b0:	f021 0103 	bic.w	r1, r1, #3
 80107b4:	3d03      	subs	r5, #3
 80107b6:	45a8      	cmp	r8, r5
 80107b8:	bf38      	it	cc
 80107ba:	2100      	movcc	r1, #0
 80107bc:	440b      	add	r3, r1
 80107be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80107c2:	b191      	cbz	r1, 80107ea <__mdiff+0x11a>
 80107c4:	6117      	str	r7, [r2, #16]
 80107c6:	e79d      	b.n	8010704 <__mdiff+0x34>
 80107c8:	f854 1b04 	ldr.w	r1, [r4], #4
 80107cc:	46e6      	mov	lr, ip
 80107ce:	0c08      	lsrs	r0, r1, #16
 80107d0:	fa1c fc81 	uxtah	ip, ip, r1
 80107d4:	4471      	add	r1, lr
 80107d6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80107da:	b289      	uxth	r1, r1
 80107dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80107e0:	f846 1b04 	str.w	r1, [r6], #4
 80107e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80107e8:	e7dd      	b.n	80107a6 <__mdiff+0xd6>
 80107ea:	3f01      	subs	r7, #1
 80107ec:	e7e7      	b.n	80107be <__mdiff+0xee>
 80107ee:	bf00      	nop
 80107f0:	0801196b 	.word	0x0801196b
 80107f4:	080119dc 	.word	0x080119dc

080107f8 <__ulp>:
 80107f8:	b082      	sub	sp, #8
 80107fa:	ed8d 0b00 	vstr	d0, [sp]
 80107fe:	9a01      	ldr	r2, [sp, #4]
 8010800:	4b0f      	ldr	r3, [pc, #60]	@ (8010840 <__ulp+0x48>)
 8010802:	4013      	ands	r3, r2
 8010804:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8010808:	2b00      	cmp	r3, #0
 801080a:	dc08      	bgt.n	801081e <__ulp+0x26>
 801080c:	425b      	negs	r3, r3
 801080e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8010812:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010816:	da04      	bge.n	8010822 <__ulp+0x2a>
 8010818:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801081c:	4113      	asrs	r3, r2
 801081e:	2200      	movs	r2, #0
 8010820:	e008      	b.n	8010834 <__ulp+0x3c>
 8010822:	f1a2 0314 	sub.w	r3, r2, #20
 8010826:	2b1e      	cmp	r3, #30
 8010828:	bfda      	itte	le
 801082a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801082e:	40da      	lsrle	r2, r3
 8010830:	2201      	movgt	r2, #1
 8010832:	2300      	movs	r3, #0
 8010834:	4619      	mov	r1, r3
 8010836:	4610      	mov	r0, r2
 8010838:	ec41 0b10 	vmov	d0, r0, r1
 801083c:	b002      	add	sp, #8
 801083e:	4770      	bx	lr
 8010840:	7ff00000 	.word	0x7ff00000

08010844 <__b2d>:
 8010844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010848:	6906      	ldr	r6, [r0, #16]
 801084a:	f100 0814 	add.w	r8, r0, #20
 801084e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010852:	1f37      	subs	r7, r6, #4
 8010854:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010858:	4610      	mov	r0, r2
 801085a:	f7ff fd53 	bl	8010304 <__hi0bits>
 801085e:	f1c0 0320 	rsb	r3, r0, #32
 8010862:	280a      	cmp	r0, #10
 8010864:	600b      	str	r3, [r1, #0]
 8010866:	491b      	ldr	r1, [pc, #108]	@ (80108d4 <__b2d+0x90>)
 8010868:	dc15      	bgt.n	8010896 <__b2d+0x52>
 801086a:	f1c0 0c0b 	rsb	ip, r0, #11
 801086e:	fa22 f30c 	lsr.w	r3, r2, ip
 8010872:	45b8      	cmp	r8, r7
 8010874:	ea43 0501 	orr.w	r5, r3, r1
 8010878:	bf34      	ite	cc
 801087a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801087e:	2300      	movcs	r3, #0
 8010880:	3015      	adds	r0, #21
 8010882:	fa02 f000 	lsl.w	r0, r2, r0
 8010886:	fa23 f30c 	lsr.w	r3, r3, ip
 801088a:	4303      	orrs	r3, r0
 801088c:	461c      	mov	r4, r3
 801088e:	ec45 4b10 	vmov	d0, r4, r5
 8010892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010896:	45b8      	cmp	r8, r7
 8010898:	bf3a      	itte	cc
 801089a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801089e:	f1a6 0708 	subcc.w	r7, r6, #8
 80108a2:	2300      	movcs	r3, #0
 80108a4:	380b      	subs	r0, #11
 80108a6:	d012      	beq.n	80108ce <__b2d+0x8a>
 80108a8:	f1c0 0120 	rsb	r1, r0, #32
 80108ac:	fa23 f401 	lsr.w	r4, r3, r1
 80108b0:	4082      	lsls	r2, r0
 80108b2:	4322      	orrs	r2, r4
 80108b4:	4547      	cmp	r7, r8
 80108b6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80108ba:	bf8c      	ite	hi
 80108bc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80108c0:	2200      	movls	r2, #0
 80108c2:	4083      	lsls	r3, r0
 80108c4:	40ca      	lsrs	r2, r1
 80108c6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80108ca:	4313      	orrs	r3, r2
 80108cc:	e7de      	b.n	801088c <__b2d+0x48>
 80108ce:	ea42 0501 	orr.w	r5, r2, r1
 80108d2:	e7db      	b.n	801088c <__b2d+0x48>
 80108d4:	3ff00000 	.word	0x3ff00000

080108d8 <__d2b>:
 80108d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80108dc:	460f      	mov	r7, r1
 80108de:	2101      	movs	r1, #1
 80108e0:	ec59 8b10 	vmov	r8, r9, d0
 80108e4:	4616      	mov	r6, r2
 80108e6:	f7ff fc1b 	bl	8010120 <_Balloc>
 80108ea:	4604      	mov	r4, r0
 80108ec:	b930      	cbnz	r0, 80108fc <__d2b+0x24>
 80108ee:	4602      	mov	r2, r0
 80108f0:	4b23      	ldr	r3, [pc, #140]	@ (8010980 <__d2b+0xa8>)
 80108f2:	4824      	ldr	r0, [pc, #144]	@ (8010984 <__d2b+0xac>)
 80108f4:	f240 310f 	movw	r1, #783	@ 0x30f
 80108f8:	f000 fb72 	bl	8010fe0 <__assert_func>
 80108fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010900:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010904:	b10d      	cbz	r5, 801090a <__d2b+0x32>
 8010906:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801090a:	9301      	str	r3, [sp, #4]
 801090c:	f1b8 0300 	subs.w	r3, r8, #0
 8010910:	d023      	beq.n	801095a <__d2b+0x82>
 8010912:	4668      	mov	r0, sp
 8010914:	9300      	str	r3, [sp, #0]
 8010916:	f7ff fd14 	bl	8010342 <__lo0bits>
 801091a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801091e:	b1d0      	cbz	r0, 8010956 <__d2b+0x7e>
 8010920:	f1c0 0320 	rsb	r3, r0, #32
 8010924:	fa02 f303 	lsl.w	r3, r2, r3
 8010928:	430b      	orrs	r3, r1
 801092a:	40c2      	lsrs	r2, r0
 801092c:	6163      	str	r3, [r4, #20]
 801092e:	9201      	str	r2, [sp, #4]
 8010930:	9b01      	ldr	r3, [sp, #4]
 8010932:	61a3      	str	r3, [r4, #24]
 8010934:	2b00      	cmp	r3, #0
 8010936:	bf0c      	ite	eq
 8010938:	2201      	moveq	r2, #1
 801093a:	2202      	movne	r2, #2
 801093c:	6122      	str	r2, [r4, #16]
 801093e:	b1a5      	cbz	r5, 801096a <__d2b+0x92>
 8010940:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010944:	4405      	add	r5, r0
 8010946:	603d      	str	r5, [r7, #0]
 8010948:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801094c:	6030      	str	r0, [r6, #0]
 801094e:	4620      	mov	r0, r4
 8010950:	b003      	add	sp, #12
 8010952:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010956:	6161      	str	r1, [r4, #20]
 8010958:	e7ea      	b.n	8010930 <__d2b+0x58>
 801095a:	a801      	add	r0, sp, #4
 801095c:	f7ff fcf1 	bl	8010342 <__lo0bits>
 8010960:	9b01      	ldr	r3, [sp, #4]
 8010962:	6163      	str	r3, [r4, #20]
 8010964:	3020      	adds	r0, #32
 8010966:	2201      	movs	r2, #1
 8010968:	e7e8      	b.n	801093c <__d2b+0x64>
 801096a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801096e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010972:	6038      	str	r0, [r7, #0]
 8010974:	6918      	ldr	r0, [r3, #16]
 8010976:	f7ff fcc5 	bl	8010304 <__hi0bits>
 801097a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801097e:	e7e5      	b.n	801094c <__d2b+0x74>
 8010980:	0801196b 	.word	0x0801196b
 8010984:	080119dc 	.word	0x080119dc

08010988 <__ratio>:
 8010988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801098c:	b085      	sub	sp, #20
 801098e:	e9cd 1000 	strd	r1, r0, [sp]
 8010992:	a902      	add	r1, sp, #8
 8010994:	f7ff ff56 	bl	8010844 <__b2d>
 8010998:	9800      	ldr	r0, [sp, #0]
 801099a:	a903      	add	r1, sp, #12
 801099c:	ec55 4b10 	vmov	r4, r5, d0
 80109a0:	f7ff ff50 	bl	8010844 <__b2d>
 80109a4:	9b01      	ldr	r3, [sp, #4]
 80109a6:	6919      	ldr	r1, [r3, #16]
 80109a8:	9b00      	ldr	r3, [sp, #0]
 80109aa:	691b      	ldr	r3, [r3, #16]
 80109ac:	1ac9      	subs	r1, r1, r3
 80109ae:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80109b2:	1a9b      	subs	r3, r3, r2
 80109b4:	ec5b ab10 	vmov	sl, fp, d0
 80109b8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80109bc:	2b00      	cmp	r3, #0
 80109be:	bfce      	itee	gt
 80109c0:	462a      	movgt	r2, r5
 80109c2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80109c6:	465a      	movle	r2, fp
 80109c8:	462f      	mov	r7, r5
 80109ca:	46d9      	mov	r9, fp
 80109cc:	bfcc      	ite	gt
 80109ce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80109d2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80109d6:	464b      	mov	r3, r9
 80109d8:	4652      	mov	r2, sl
 80109da:	4620      	mov	r0, r4
 80109dc:	4639      	mov	r1, r7
 80109de:	f7ef ff3d 	bl	800085c <__aeabi_ddiv>
 80109e2:	ec41 0b10 	vmov	d0, r0, r1
 80109e6:	b005      	add	sp, #20
 80109e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080109ec <__copybits>:
 80109ec:	3901      	subs	r1, #1
 80109ee:	b570      	push	{r4, r5, r6, lr}
 80109f0:	1149      	asrs	r1, r1, #5
 80109f2:	6914      	ldr	r4, [r2, #16]
 80109f4:	3101      	adds	r1, #1
 80109f6:	f102 0314 	add.w	r3, r2, #20
 80109fa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80109fe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010a02:	1f05      	subs	r5, r0, #4
 8010a04:	42a3      	cmp	r3, r4
 8010a06:	d30c      	bcc.n	8010a22 <__copybits+0x36>
 8010a08:	1aa3      	subs	r3, r4, r2
 8010a0a:	3b11      	subs	r3, #17
 8010a0c:	f023 0303 	bic.w	r3, r3, #3
 8010a10:	3211      	adds	r2, #17
 8010a12:	42a2      	cmp	r2, r4
 8010a14:	bf88      	it	hi
 8010a16:	2300      	movhi	r3, #0
 8010a18:	4418      	add	r0, r3
 8010a1a:	2300      	movs	r3, #0
 8010a1c:	4288      	cmp	r0, r1
 8010a1e:	d305      	bcc.n	8010a2c <__copybits+0x40>
 8010a20:	bd70      	pop	{r4, r5, r6, pc}
 8010a22:	f853 6b04 	ldr.w	r6, [r3], #4
 8010a26:	f845 6f04 	str.w	r6, [r5, #4]!
 8010a2a:	e7eb      	b.n	8010a04 <__copybits+0x18>
 8010a2c:	f840 3b04 	str.w	r3, [r0], #4
 8010a30:	e7f4      	b.n	8010a1c <__copybits+0x30>

08010a32 <__any_on>:
 8010a32:	f100 0214 	add.w	r2, r0, #20
 8010a36:	6900      	ldr	r0, [r0, #16]
 8010a38:	114b      	asrs	r3, r1, #5
 8010a3a:	4298      	cmp	r0, r3
 8010a3c:	b510      	push	{r4, lr}
 8010a3e:	db11      	blt.n	8010a64 <__any_on+0x32>
 8010a40:	dd0a      	ble.n	8010a58 <__any_on+0x26>
 8010a42:	f011 011f 	ands.w	r1, r1, #31
 8010a46:	d007      	beq.n	8010a58 <__any_on+0x26>
 8010a48:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010a4c:	fa24 f001 	lsr.w	r0, r4, r1
 8010a50:	fa00 f101 	lsl.w	r1, r0, r1
 8010a54:	428c      	cmp	r4, r1
 8010a56:	d10b      	bne.n	8010a70 <__any_on+0x3e>
 8010a58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010a5c:	4293      	cmp	r3, r2
 8010a5e:	d803      	bhi.n	8010a68 <__any_on+0x36>
 8010a60:	2000      	movs	r0, #0
 8010a62:	bd10      	pop	{r4, pc}
 8010a64:	4603      	mov	r3, r0
 8010a66:	e7f7      	b.n	8010a58 <__any_on+0x26>
 8010a68:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010a6c:	2900      	cmp	r1, #0
 8010a6e:	d0f5      	beq.n	8010a5c <__any_on+0x2a>
 8010a70:	2001      	movs	r0, #1
 8010a72:	e7f6      	b.n	8010a62 <__any_on+0x30>

08010a74 <_strtol_l.isra.0>:
 8010a74:	2b24      	cmp	r3, #36	@ 0x24
 8010a76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a7a:	4686      	mov	lr, r0
 8010a7c:	4690      	mov	r8, r2
 8010a7e:	d801      	bhi.n	8010a84 <_strtol_l.isra.0+0x10>
 8010a80:	2b01      	cmp	r3, #1
 8010a82:	d106      	bne.n	8010a92 <_strtol_l.isra.0+0x1e>
 8010a84:	f7fe f85a 	bl	800eb3c <__errno>
 8010a88:	2316      	movs	r3, #22
 8010a8a:	6003      	str	r3, [r0, #0]
 8010a8c:	2000      	movs	r0, #0
 8010a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a92:	4834      	ldr	r0, [pc, #208]	@ (8010b64 <_strtol_l.isra.0+0xf0>)
 8010a94:	460d      	mov	r5, r1
 8010a96:	462a      	mov	r2, r5
 8010a98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010a9c:	5d06      	ldrb	r6, [r0, r4]
 8010a9e:	f016 0608 	ands.w	r6, r6, #8
 8010aa2:	d1f8      	bne.n	8010a96 <_strtol_l.isra.0+0x22>
 8010aa4:	2c2d      	cmp	r4, #45	@ 0x2d
 8010aa6:	d110      	bne.n	8010aca <_strtol_l.isra.0+0x56>
 8010aa8:	782c      	ldrb	r4, [r5, #0]
 8010aaa:	2601      	movs	r6, #1
 8010aac:	1c95      	adds	r5, r2, #2
 8010aae:	f033 0210 	bics.w	r2, r3, #16
 8010ab2:	d115      	bne.n	8010ae0 <_strtol_l.isra.0+0x6c>
 8010ab4:	2c30      	cmp	r4, #48	@ 0x30
 8010ab6:	d10d      	bne.n	8010ad4 <_strtol_l.isra.0+0x60>
 8010ab8:	782a      	ldrb	r2, [r5, #0]
 8010aba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010abe:	2a58      	cmp	r2, #88	@ 0x58
 8010ac0:	d108      	bne.n	8010ad4 <_strtol_l.isra.0+0x60>
 8010ac2:	786c      	ldrb	r4, [r5, #1]
 8010ac4:	3502      	adds	r5, #2
 8010ac6:	2310      	movs	r3, #16
 8010ac8:	e00a      	b.n	8010ae0 <_strtol_l.isra.0+0x6c>
 8010aca:	2c2b      	cmp	r4, #43	@ 0x2b
 8010acc:	bf04      	itt	eq
 8010ace:	782c      	ldrbeq	r4, [r5, #0]
 8010ad0:	1c95      	addeq	r5, r2, #2
 8010ad2:	e7ec      	b.n	8010aae <_strtol_l.isra.0+0x3a>
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d1f6      	bne.n	8010ac6 <_strtol_l.isra.0+0x52>
 8010ad8:	2c30      	cmp	r4, #48	@ 0x30
 8010ada:	bf14      	ite	ne
 8010adc:	230a      	movne	r3, #10
 8010ade:	2308      	moveq	r3, #8
 8010ae0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8010ae4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010ae8:	2200      	movs	r2, #0
 8010aea:	fbbc f9f3 	udiv	r9, ip, r3
 8010aee:	4610      	mov	r0, r2
 8010af0:	fb03 ca19 	mls	sl, r3, r9, ip
 8010af4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8010af8:	2f09      	cmp	r7, #9
 8010afa:	d80f      	bhi.n	8010b1c <_strtol_l.isra.0+0xa8>
 8010afc:	463c      	mov	r4, r7
 8010afe:	42a3      	cmp	r3, r4
 8010b00:	dd1b      	ble.n	8010b3a <_strtol_l.isra.0+0xc6>
 8010b02:	1c57      	adds	r7, r2, #1
 8010b04:	d007      	beq.n	8010b16 <_strtol_l.isra.0+0xa2>
 8010b06:	4581      	cmp	r9, r0
 8010b08:	d314      	bcc.n	8010b34 <_strtol_l.isra.0+0xc0>
 8010b0a:	d101      	bne.n	8010b10 <_strtol_l.isra.0+0x9c>
 8010b0c:	45a2      	cmp	sl, r4
 8010b0e:	db11      	blt.n	8010b34 <_strtol_l.isra.0+0xc0>
 8010b10:	fb00 4003 	mla	r0, r0, r3, r4
 8010b14:	2201      	movs	r2, #1
 8010b16:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010b1a:	e7eb      	b.n	8010af4 <_strtol_l.isra.0+0x80>
 8010b1c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010b20:	2f19      	cmp	r7, #25
 8010b22:	d801      	bhi.n	8010b28 <_strtol_l.isra.0+0xb4>
 8010b24:	3c37      	subs	r4, #55	@ 0x37
 8010b26:	e7ea      	b.n	8010afe <_strtol_l.isra.0+0x8a>
 8010b28:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8010b2c:	2f19      	cmp	r7, #25
 8010b2e:	d804      	bhi.n	8010b3a <_strtol_l.isra.0+0xc6>
 8010b30:	3c57      	subs	r4, #87	@ 0x57
 8010b32:	e7e4      	b.n	8010afe <_strtol_l.isra.0+0x8a>
 8010b34:	f04f 32ff 	mov.w	r2, #4294967295
 8010b38:	e7ed      	b.n	8010b16 <_strtol_l.isra.0+0xa2>
 8010b3a:	1c53      	adds	r3, r2, #1
 8010b3c:	d108      	bne.n	8010b50 <_strtol_l.isra.0+0xdc>
 8010b3e:	2322      	movs	r3, #34	@ 0x22
 8010b40:	f8ce 3000 	str.w	r3, [lr]
 8010b44:	4660      	mov	r0, ip
 8010b46:	f1b8 0f00 	cmp.w	r8, #0
 8010b4a:	d0a0      	beq.n	8010a8e <_strtol_l.isra.0+0x1a>
 8010b4c:	1e69      	subs	r1, r5, #1
 8010b4e:	e006      	b.n	8010b5e <_strtol_l.isra.0+0xea>
 8010b50:	b106      	cbz	r6, 8010b54 <_strtol_l.isra.0+0xe0>
 8010b52:	4240      	negs	r0, r0
 8010b54:	f1b8 0f00 	cmp.w	r8, #0
 8010b58:	d099      	beq.n	8010a8e <_strtol_l.isra.0+0x1a>
 8010b5a:	2a00      	cmp	r2, #0
 8010b5c:	d1f6      	bne.n	8010b4c <_strtol_l.isra.0+0xd8>
 8010b5e:	f8c8 1000 	str.w	r1, [r8]
 8010b62:	e794      	b.n	8010a8e <_strtol_l.isra.0+0x1a>
 8010b64:	08011bd9 	.word	0x08011bd9

08010b68 <_strtol_r>:
 8010b68:	f7ff bf84 	b.w	8010a74 <_strtol_l.isra.0>

08010b6c <__ascii_wctomb>:
 8010b6c:	4603      	mov	r3, r0
 8010b6e:	4608      	mov	r0, r1
 8010b70:	b141      	cbz	r1, 8010b84 <__ascii_wctomb+0x18>
 8010b72:	2aff      	cmp	r2, #255	@ 0xff
 8010b74:	d904      	bls.n	8010b80 <__ascii_wctomb+0x14>
 8010b76:	228a      	movs	r2, #138	@ 0x8a
 8010b78:	601a      	str	r2, [r3, #0]
 8010b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8010b7e:	4770      	bx	lr
 8010b80:	700a      	strb	r2, [r1, #0]
 8010b82:	2001      	movs	r0, #1
 8010b84:	4770      	bx	lr

08010b86 <__ssputs_r>:
 8010b86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b8a:	688e      	ldr	r6, [r1, #8]
 8010b8c:	461f      	mov	r7, r3
 8010b8e:	42be      	cmp	r6, r7
 8010b90:	680b      	ldr	r3, [r1, #0]
 8010b92:	4682      	mov	sl, r0
 8010b94:	460c      	mov	r4, r1
 8010b96:	4690      	mov	r8, r2
 8010b98:	d82d      	bhi.n	8010bf6 <__ssputs_r+0x70>
 8010b9a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010b9e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010ba2:	d026      	beq.n	8010bf2 <__ssputs_r+0x6c>
 8010ba4:	6965      	ldr	r5, [r4, #20]
 8010ba6:	6909      	ldr	r1, [r1, #16]
 8010ba8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010bac:	eba3 0901 	sub.w	r9, r3, r1
 8010bb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010bb4:	1c7b      	adds	r3, r7, #1
 8010bb6:	444b      	add	r3, r9
 8010bb8:	106d      	asrs	r5, r5, #1
 8010bba:	429d      	cmp	r5, r3
 8010bbc:	bf38      	it	cc
 8010bbe:	461d      	movcc	r5, r3
 8010bc0:	0553      	lsls	r3, r2, #21
 8010bc2:	d527      	bpl.n	8010c14 <__ssputs_r+0x8e>
 8010bc4:	4629      	mov	r1, r5
 8010bc6:	f7ff fa0d 	bl	800ffe4 <_malloc_r>
 8010bca:	4606      	mov	r6, r0
 8010bcc:	b360      	cbz	r0, 8010c28 <__ssputs_r+0xa2>
 8010bce:	6921      	ldr	r1, [r4, #16]
 8010bd0:	464a      	mov	r2, r9
 8010bd2:	f7fd ffe0 	bl	800eb96 <memcpy>
 8010bd6:	89a3      	ldrh	r3, [r4, #12]
 8010bd8:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010bdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010be0:	81a3      	strh	r3, [r4, #12]
 8010be2:	6126      	str	r6, [r4, #16]
 8010be4:	6165      	str	r5, [r4, #20]
 8010be6:	444e      	add	r6, r9
 8010be8:	eba5 0509 	sub.w	r5, r5, r9
 8010bec:	6026      	str	r6, [r4, #0]
 8010bee:	60a5      	str	r5, [r4, #8]
 8010bf0:	463e      	mov	r6, r7
 8010bf2:	42be      	cmp	r6, r7
 8010bf4:	d900      	bls.n	8010bf8 <__ssputs_r+0x72>
 8010bf6:	463e      	mov	r6, r7
 8010bf8:	6820      	ldr	r0, [r4, #0]
 8010bfa:	4632      	mov	r2, r6
 8010bfc:	4641      	mov	r1, r8
 8010bfe:	f000 f9c5 	bl	8010f8c <memmove>
 8010c02:	68a3      	ldr	r3, [r4, #8]
 8010c04:	1b9b      	subs	r3, r3, r6
 8010c06:	60a3      	str	r3, [r4, #8]
 8010c08:	6823      	ldr	r3, [r4, #0]
 8010c0a:	4433      	add	r3, r6
 8010c0c:	6023      	str	r3, [r4, #0]
 8010c0e:	2000      	movs	r0, #0
 8010c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c14:	462a      	mov	r2, r5
 8010c16:	f000 fa15 	bl	8011044 <_realloc_r>
 8010c1a:	4606      	mov	r6, r0
 8010c1c:	2800      	cmp	r0, #0
 8010c1e:	d1e0      	bne.n	8010be2 <__ssputs_r+0x5c>
 8010c20:	6921      	ldr	r1, [r4, #16]
 8010c22:	4650      	mov	r0, sl
 8010c24:	f7fe fe30 	bl	800f888 <_free_r>
 8010c28:	230c      	movs	r3, #12
 8010c2a:	f8ca 3000 	str.w	r3, [sl]
 8010c2e:	89a3      	ldrh	r3, [r4, #12]
 8010c30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c34:	81a3      	strh	r3, [r4, #12]
 8010c36:	f04f 30ff 	mov.w	r0, #4294967295
 8010c3a:	e7e9      	b.n	8010c10 <__ssputs_r+0x8a>

08010c3c <_svfiprintf_r>:
 8010c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c40:	4698      	mov	r8, r3
 8010c42:	898b      	ldrh	r3, [r1, #12]
 8010c44:	061b      	lsls	r3, r3, #24
 8010c46:	b09d      	sub	sp, #116	@ 0x74
 8010c48:	4607      	mov	r7, r0
 8010c4a:	460d      	mov	r5, r1
 8010c4c:	4614      	mov	r4, r2
 8010c4e:	d510      	bpl.n	8010c72 <_svfiprintf_r+0x36>
 8010c50:	690b      	ldr	r3, [r1, #16]
 8010c52:	b973      	cbnz	r3, 8010c72 <_svfiprintf_r+0x36>
 8010c54:	2140      	movs	r1, #64	@ 0x40
 8010c56:	f7ff f9c5 	bl	800ffe4 <_malloc_r>
 8010c5a:	6028      	str	r0, [r5, #0]
 8010c5c:	6128      	str	r0, [r5, #16]
 8010c5e:	b930      	cbnz	r0, 8010c6e <_svfiprintf_r+0x32>
 8010c60:	230c      	movs	r3, #12
 8010c62:	603b      	str	r3, [r7, #0]
 8010c64:	f04f 30ff 	mov.w	r0, #4294967295
 8010c68:	b01d      	add	sp, #116	@ 0x74
 8010c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c6e:	2340      	movs	r3, #64	@ 0x40
 8010c70:	616b      	str	r3, [r5, #20]
 8010c72:	2300      	movs	r3, #0
 8010c74:	9309      	str	r3, [sp, #36]	@ 0x24
 8010c76:	2320      	movs	r3, #32
 8010c78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010c7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010c80:	2330      	movs	r3, #48	@ 0x30
 8010c82:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010e20 <_svfiprintf_r+0x1e4>
 8010c86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010c8a:	f04f 0901 	mov.w	r9, #1
 8010c8e:	4623      	mov	r3, r4
 8010c90:	469a      	mov	sl, r3
 8010c92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c96:	b10a      	cbz	r2, 8010c9c <_svfiprintf_r+0x60>
 8010c98:	2a25      	cmp	r2, #37	@ 0x25
 8010c9a:	d1f9      	bne.n	8010c90 <_svfiprintf_r+0x54>
 8010c9c:	ebba 0b04 	subs.w	fp, sl, r4
 8010ca0:	d00b      	beq.n	8010cba <_svfiprintf_r+0x7e>
 8010ca2:	465b      	mov	r3, fp
 8010ca4:	4622      	mov	r2, r4
 8010ca6:	4629      	mov	r1, r5
 8010ca8:	4638      	mov	r0, r7
 8010caa:	f7ff ff6c 	bl	8010b86 <__ssputs_r>
 8010cae:	3001      	adds	r0, #1
 8010cb0:	f000 80a7 	beq.w	8010e02 <_svfiprintf_r+0x1c6>
 8010cb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010cb6:	445a      	add	r2, fp
 8010cb8:	9209      	str	r2, [sp, #36]	@ 0x24
 8010cba:	f89a 3000 	ldrb.w	r3, [sl]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	f000 809f 	beq.w	8010e02 <_svfiprintf_r+0x1c6>
 8010cc4:	2300      	movs	r3, #0
 8010cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8010cca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010cce:	f10a 0a01 	add.w	sl, sl, #1
 8010cd2:	9304      	str	r3, [sp, #16]
 8010cd4:	9307      	str	r3, [sp, #28]
 8010cd6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010cda:	931a      	str	r3, [sp, #104]	@ 0x68
 8010cdc:	4654      	mov	r4, sl
 8010cde:	2205      	movs	r2, #5
 8010ce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ce4:	484e      	ldr	r0, [pc, #312]	@ (8010e20 <_svfiprintf_r+0x1e4>)
 8010ce6:	f7ef fa7b 	bl	80001e0 <memchr>
 8010cea:	9a04      	ldr	r2, [sp, #16]
 8010cec:	b9d8      	cbnz	r0, 8010d26 <_svfiprintf_r+0xea>
 8010cee:	06d0      	lsls	r0, r2, #27
 8010cf0:	bf44      	itt	mi
 8010cf2:	2320      	movmi	r3, #32
 8010cf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010cf8:	0711      	lsls	r1, r2, #28
 8010cfa:	bf44      	itt	mi
 8010cfc:	232b      	movmi	r3, #43	@ 0x2b
 8010cfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010d02:	f89a 3000 	ldrb.w	r3, [sl]
 8010d06:	2b2a      	cmp	r3, #42	@ 0x2a
 8010d08:	d015      	beq.n	8010d36 <_svfiprintf_r+0xfa>
 8010d0a:	9a07      	ldr	r2, [sp, #28]
 8010d0c:	4654      	mov	r4, sl
 8010d0e:	2000      	movs	r0, #0
 8010d10:	f04f 0c0a 	mov.w	ip, #10
 8010d14:	4621      	mov	r1, r4
 8010d16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d1a:	3b30      	subs	r3, #48	@ 0x30
 8010d1c:	2b09      	cmp	r3, #9
 8010d1e:	d94b      	bls.n	8010db8 <_svfiprintf_r+0x17c>
 8010d20:	b1b0      	cbz	r0, 8010d50 <_svfiprintf_r+0x114>
 8010d22:	9207      	str	r2, [sp, #28]
 8010d24:	e014      	b.n	8010d50 <_svfiprintf_r+0x114>
 8010d26:	eba0 0308 	sub.w	r3, r0, r8
 8010d2a:	fa09 f303 	lsl.w	r3, r9, r3
 8010d2e:	4313      	orrs	r3, r2
 8010d30:	9304      	str	r3, [sp, #16]
 8010d32:	46a2      	mov	sl, r4
 8010d34:	e7d2      	b.n	8010cdc <_svfiprintf_r+0xa0>
 8010d36:	9b03      	ldr	r3, [sp, #12]
 8010d38:	1d19      	adds	r1, r3, #4
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	9103      	str	r1, [sp, #12]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	bfbb      	ittet	lt
 8010d42:	425b      	neglt	r3, r3
 8010d44:	f042 0202 	orrlt.w	r2, r2, #2
 8010d48:	9307      	strge	r3, [sp, #28]
 8010d4a:	9307      	strlt	r3, [sp, #28]
 8010d4c:	bfb8      	it	lt
 8010d4e:	9204      	strlt	r2, [sp, #16]
 8010d50:	7823      	ldrb	r3, [r4, #0]
 8010d52:	2b2e      	cmp	r3, #46	@ 0x2e
 8010d54:	d10a      	bne.n	8010d6c <_svfiprintf_r+0x130>
 8010d56:	7863      	ldrb	r3, [r4, #1]
 8010d58:	2b2a      	cmp	r3, #42	@ 0x2a
 8010d5a:	d132      	bne.n	8010dc2 <_svfiprintf_r+0x186>
 8010d5c:	9b03      	ldr	r3, [sp, #12]
 8010d5e:	1d1a      	adds	r2, r3, #4
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	9203      	str	r2, [sp, #12]
 8010d64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010d68:	3402      	adds	r4, #2
 8010d6a:	9305      	str	r3, [sp, #20]
 8010d6c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010e30 <_svfiprintf_r+0x1f4>
 8010d70:	7821      	ldrb	r1, [r4, #0]
 8010d72:	2203      	movs	r2, #3
 8010d74:	4650      	mov	r0, sl
 8010d76:	f7ef fa33 	bl	80001e0 <memchr>
 8010d7a:	b138      	cbz	r0, 8010d8c <_svfiprintf_r+0x150>
 8010d7c:	9b04      	ldr	r3, [sp, #16]
 8010d7e:	eba0 000a 	sub.w	r0, r0, sl
 8010d82:	2240      	movs	r2, #64	@ 0x40
 8010d84:	4082      	lsls	r2, r0
 8010d86:	4313      	orrs	r3, r2
 8010d88:	3401      	adds	r4, #1
 8010d8a:	9304      	str	r3, [sp, #16]
 8010d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d90:	4824      	ldr	r0, [pc, #144]	@ (8010e24 <_svfiprintf_r+0x1e8>)
 8010d92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010d96:	2206      	movs	r2, #6
 8010d98:	f7ef fa22 	bl	80001e0 <memchr>
 8010d9c:	2800      	cmp	r0, #0
 8010d9e:	d036      	beq.n	8010e0e <_svfiprintf_r+0x1d2>
 8010da0:	4b21      	ldr	r3, [pc, #132]	@ (8010e28 <_svfiprintf_r+0x1ec>)
 8010da2:	bb1b      	cbnz	r3, 8010dec <_svfiprintf_r+0x1b0>
 8010da4:	9b03      	ldr	r3, [sp, #12]
 8010da6:	3307      	adds	r3, #7
 8010da8:	f023 0307 	bic.w	r3, r3, #7
 8010dac:	3308      	adds	r3, #8
 8010dae:	9303      	str	r3, [sp, #12]
 8010db0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010db2:	4433      	add	r3, r6
 8010db4:	9309      	str	r3, [sp, #36]	@ 0x24
 8010db6:	e76a      	b.n	8010c8e <_svfiprintf_r+0x52>
 8010db8:	fb0c 3202 	mla	r2, ip, r2, r3
 8010dbc:	460c      	mov	r4, r1
 8010dbe:	2001      	movs	r0, #1
 8010dc0:	e7a8      	b.n	8010d14 <_svfiprintf_r+0xd8>
 8010dc2:	2300      	movs	r3, #0
 8010dc4:	3401      	adds	r4, #1
 8010dc6:	9305      	str	r3, [sp, #20]
 8010dc8:	4619      	mov	r1, r3
 8010dca:	f04f 0c0a 	mov.w	ip, #10
 8010dce:	4620      	mov	r0, r4
 8010dd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010dd4:	3a30      	subs	r2, #48	@ 0x30
 8010dd6:	2a09      	cmp	r2, #9
 8010dd8:	d903      	bls.n	8010de2 <_svfiprintf_r+0x1a6>
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d0c6      	beq.n	8010d6c <_svfiprintf_r+0x130>
 8010dde:	9105      	str	r1, [sp, #20]
 8010de0:	e7c4      	b.n	8010d6c <_svfiprintf_r+0x130>
 8010de2:	fb0c 2101 	mla	r1, ip, r1, r2
 8010de6:	4604      	mov	r4, r0
 8010de8:	2301      	movs	r3, #1
 8010dea:	e7f0      	b.n	8010dce <_svfiprintf_r+0x192>
 8010dec:	ab03      	add	r3, sp, #12
 8010dee:	9300      	str	r3, [sp, #0]
 8010df0:	462a      	mov	r2, r5
 8010df2:	4b0e      	ldr	r3, [pc, #56]	@ (8010e2c <_svfiprintf_r+0x1f0>)
 8010df4:	a904      	add	r1, sp, #16
 8010df6:	4638      	mov	r0, r7
 8010df8:	f7fc febc 	bl	800db74 <_printf_float>
 8010dfc:	1c42      	adds	r2, r0, #1
 8010dfe:	4606      	mov	r6, r0
 8010e00:	d1d6      	bne.n	8010db0 <_svfiprintf_r+0x174>
 8010e02:	89ab      	ldrh	r3, [r5, #12]
 8010e04:	065b      	lsls	r3, r3, #25
 8010e06:	f53f af2d 	bmi.w	8010c64 <_svfiprintf_r+0x28>
 8010e0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010e0c:	e72c      	b.n	8010c68 <_svfiprintf_r+0x2c>
 8010e0e:	ab03      	add	r3, sp, #12
 8010e10:	9300      	str	r3, [sp, #0]
 8010e12:	462a      	mov	r2, r5
 8010e14:	4b05      	ldr	r3, [pc, #20]	@ (8010e2c <_svfiprintf_r+0x1f0>)
 8010e16:	a904      	add	r1, sp, #16
 8010e18:	4638      	mov	r0, r7
 8010e1a:	f7fd f943 	bl	800e0a4 <_printf_i>
 8010e1e:	e7ed      	b.n	8010dfc <_svfiprintf_r+0x1c0>
 8010e20:	08011a35 	.word	0x08011a35
 8010e24:	08011a3f 	.word	0x08011a3f
 8010e28:	0800db75 	.word	0x0800db75
 8010e2c:	08010b87 	.word	0x08010b87
 8010e30:	08011a3b 	.word	0x08011a3b

08010e34 <__sflush_r>:
 8010e34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e3c:	0716      	lsls	r6, r2, #28
 8010e3e:	4605      	mov	r5, r0
 8010e40:	460c      	mov	r4, r1
 8010e42:	d454      	bmi.n	8010eee <__sflush_r+0xba>
 8010e44:	684b      	ldr	r3, [r1, #4]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	dc02      	bgt.n	8010e50 <__sflush_r+0x1c>
 8010e4a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	dd48      	ble.n	8010ee2 <__sflush_r+0xae>
 8010e50:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010e52:	2e00      	cmp	r6, #0
 8010e54:	d045      	beq.n	8010ee2 <__sflush_r+0xae>
 8010e56:	2300      	movs	r3, #0
 8010e58:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010e5c:	682f      	ldr	r7, [r5, #0]
 8010e5e:	6a21      	ldr	r1, [r4, #32]
 8010e60:	602b      	str	r3, [r5, #0]
 8010e62:	d030      	beq.n	8010ec6 <__sflush_r+0x92>
 8010e64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010e66:	89a3      	ldrh	r3, [r4, #12]
 8010e68:	0759      	lsls	r1, r3, #29
 8010e6a:	d505      	bpl.n	8010e78 <__sflush_r+0x44>
 8010e6c:	6863      	ldr	r3, [r4, #4]
 8010e6e:	1ad2      	subs	r2, r2, r3
 8010e70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010e72:	b10b      	cbz	r3, 8010e78 <__sflush_r+0x44>
 8010e74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010e76:	1ad2      	subs	r2, r2, r3
 8010e78:	2300      	movs	r3, #0
 8010e7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010e7c:	6a21      	ldr	r1, [r4, #32]
 8010e7e:	4628      	mov	r0, r5
 8010e80:	47b0      	blx	r6
 8010e82:	1c43      	adds	r3, r0, #1
 8010e84:	89a3      	ldrh	r3, [r4, #12]
 8010e86:	d106      	bne.n	8010e96 <__sflush_r+0x62>
 8010e88:	6829      	ldr	r1, [r5, #0]
 8010e8a:	291d      	cmp	r1, #29
 8010e8c:	d82b      	bhi.n	8010ee6 <__sflush_r+0xb2>
 8010e8e:	4a2a      	ldr	r2, [pc, #168]	@ (8010f38 <__sflush_r+0x104>)
 8010e90:	40ca      	lsrs	r2, r1
 8010e92:	07d6      	lsls	r6, r2, #31
 8010e94:	d527      	bpl.n	8010ee6 <__sflush_r+0xb2>
 8010e96:	2200      	movs	r2, #0
 8010e98:	6062      	str	r2, [r4, #4]
 8010e9a:	04d9      	lsls	r1, r3, #19
 8010e9c:	6922      	ldr	r2, [r4, #16]
 8010e9e:	6022      	str	r2, [r4, #0]
 8010ea0:	d504      	bpl.n	8010eac <__sflush_r+0x78>
 8010ea2:	1c42      	adds	r2, r0, #1
 8010ea4:	d101      	bne.n	8010eaa <__sflush_r+0x76>
 8010ea6:	682b      	ldr	r3, [r5, #0]
 8010ea8:	b903      	cbnz	r3, 8010eac <__sflush_r+0x78>
 8010eaa:	6560      	str	r0, [r4, #84]	@ 0x54
 8010eac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010eae:	602f      	str	r7, [r5, #0]
 8010eb0:	b1b9      	cbz	r1, 8010ee2 <__sflush_r+0xae>
 8010eb2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010eb6:	4299      	cmp	r1, r3
 8010eb8:	d002      	beq.n	8010ec0 <__sflush_r+0x8c>
 8010eba:	4628      	mov	r0, r5
 8010ebc:	f7fe fce4 	bl	800f888 <_free_r>
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	6363      	str	r3, [r4, #52]	@ 0x34
 8010ec4:	e00d      	b.n	8010ee2 <__sflush_r+0xae>
 8010ec6:	2301      	movs	r3, #1
 8010ec8:	4628      	mov	r0, r5
 8010eca:	47b0      	blx	r6
 8010ecc:	4602      	mov	r2, r0
 8010ece:	1c50      	adds	r0, r2, #1
 8010ed0:	d1c9      	bne.n	8010e66 <__sflush_r+0x32>
 8010ed2:	682b      	ldr	r3, [r5, #0]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d0c6      	beq.n	8010e66 <__sflush_r+0x32>
 8010ed8:	2b1d      	cmp	r3, #29
 8010eda:	d001      	beq.n	8010ee0 <__sflush_r+0xac>
 8010edc:	2b16      	cmp	r3, #22
 8010ede:	d11e      	bne.n	8010f1e <__sflush_r+0xea>
 8010ee0:	602f      	str	r7, [r5, #0]
 8010ee2:	2000      	movs	r0, #0
 8010ee4:	e022      	b.n	8010f2c <__sflush_r+0xf8>
 8010ee6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010eea:	b21b      	sxth	r3, r3
 8010eec:	e01b      	b.n	8010f26 <__sflush_r+0xf2>
 8010eee:	690f      	ldr	r7, [r1, #16]
 8010ef0:	2f00      	cmp	r7, #0
 8010ef2:	d0f6      	beq.n	8010ee2 <__sflush_r+0xae>
 8010ef4:	0793      	lsls	r3, r2, #30
 8010ef6:	680e      	ldr	r6, [r1, #0]
 8010ef8:	bf08      	it	eq
 8010efa:	694b      	ldreq	r3, [r1, #20]
 8010efc:	600f      	str	r7, [r1, #0]
 8010efe:	bf18      	it	ne
 8010f00:	2300      	movne	r3, #0
 8010f02:	eba6 0807 	sub.w	r8, r6, r7
 8010f06:	608b      	str	r3, [r1, #8]
 8010f08:	f1b8 0f00 	cmp.w	r8, #0
 8010f0c:	dde9      	ble.n	8010ee2 <__sflush_r+0xae>
 8010f0e:	6a21      	ldr	r1, [r4, #32]
 8010f10:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010f12:	4643      	mov	r3, r8
 8010f14:	463a      	mov	r2, r7
 8010f16:	4628      	mov	r0, r5
 8010f18:	47b0      	blx	r6
 8010f1a:	2800      	cmp	r0, #0
 8010f1c:	dc08      	bgt.n	8010f30 <__sflush_r+0xfc>
 8010f1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010f26:	81a3      	strh	r3, [r4, #12]
 8010f28:	f04f 30ff 	mov.w	r0, #4294967295
 8010f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f30:	4407      	add	r7, r0
 8010f32:	eba8 0800 	sub.w	r8, r8, r0
 8010f36:	e7e7      	b.n	8010f08 <__sflush_r+0xd4>
 8010f38:	20400001 	.word	0x20400001

08010f3c <_fflush_r>:
 8010f3c:	b538      	push	{r3, r4, r5, lr}
 8010f3e:	690b      	ldr	r3, [r1, #16]
 8010f40:	4605      	mov	r5, r0
 8010f42:	460c      	mov	r4, r1
 8010f44:	b913      	cbnz	r3, 8010f4c <_fflush_r+0x10>
 8010f46:	2500      	movs	r5, #0
 8010f48:	4628      	mov	r0, r5
 8010f4a:	bd38      	pop	{r3, r4, r5, pc}
 8010f4c:	b118      	cbz	r0, 8010f56 <_fflush_r+0x1a>
 8010f4e:	6a03      	ldr	r3, [r0, #32]
 8010f50:	b90b      	cbnz	r3, 8010f56 <_fflush_r+0x1a>
 8010f52:	f7fd fc5f 	bl	800e814 <__sinit>
 8010f56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d0f3      	beq.n	8010f46 <_fflush_r+0xa>
 8010f5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010f60:	07d0      	lsls	r0, r2, #31
 8010f62:	d404      	bmi.n	8010f6e <_fflush_r+0x32>
 8010f64:	0599      	lsls	r1, r3, #22
 8010f66:	d402      	bmi.n	8010f6e <_fflush_r+0x32>
 8010f68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010f6a:	f7fd fe12 	bl	800eb92 <__retarget_lock_acquire_recursive>
 8010f6e:	4628      	mov	r0, r5
 8010f70:	4621      	mov	r1, r4
 8010f72:	f7ff ff5f 	bl	8010e34 <__sflush_r>
 8010f76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010f78:	07da      	lsls	r2, r3, #31
 8010f7a:	4605      	mov	r5, r0
 8010f7c:	d4e4      	bmi.n	8010f48 <_fflush_r+0xc>
 8010f7e:	89a3      	ldrh	r3, [r4, #12]
 8010f80:	059b      	lsls	r3, r3, #22
 8010f82:	d4e1      	bmi.n	8010f48 <_fflush_r+0xc>
 8010f84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010f86:	f7fd fe05 	bl	800eb94 <__retarget_lock_release_recursive>
 8010f8a:	e7dd      	b.n	8010f48 <_fflush_r+0xc>

08010f8c <memmove>:
 8010f8c:	4288      	cmp	r0, r1
 8010f8e:	b510      	push	{r4, lr}
 8010f90:	eb01 0402 	add.w	r4, r1, r2
 8010f94:	d902      	bls.n	8010f9c <memmove+0x10>
 8010f96:	4284      	cmp	r4, r0
 8010f98:	4623      	mov	r3, r4
 8010f9a:	d807      	bhi.n	8010fac <memmove+0x20>
 8010f9c:	1e43      	subs	r3, r0, #1
 8010f9e:	42a1      	cmp	r1, r4
 8010fa0:	d008      	beq.n	8010fb4 <memmove+0x28>
 8010fa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010fa6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010faa:	e7f8      	b.n	8010f9e <memmove+0x12>
 8010fac:	4402      	add	r2, r0
 8010fae:	4601      	mov	r1, r0
 8010fb0:	428a      	cmp	r2, r1
 8010fb2:	d100      	bne.n	8010fb6 <memmove+0x2a>
 8010fb4:	bd10      	pop	{r4, pc}
 8010fb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010fba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010fbe:	e7f7      	b.n	8010fb0 <memmove+0x24>

08010fc0 <_sbrk_r>:
 8010fc0:	b538      	push	{r3, r4, r5, lr}
 8010fc2:	4d06      	ldr	r5, [pc, #24]	@ (8010fdc <_sbrk_r+0x1c>)
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	4604      	mov	r4, r0
 8010fc8:	4608      	mov	r0, r1
 8010fca:	602b      	str	r3, [r5, #0]
 8010fcc:	f7f3 f89c 	bl	8004108 <_sbrk>
 8010fd0:	1c43      	adds	r3, r0, #1
 8010fd2:	d102      	bne.n	8010fda <_sbrk_r+0x1a>
 8010fd4:	682b      	ldr	r3, [r5, #0]
 8010fd6:	b103      	cbz	r3, 8010fda <_sbrk_r+0x1a>
 8010fd8:	6023      	str	r3, [r4, #0]
 8010fda:	bd38      	pop	{r3, r4, r5, pc}
 8010fdc:	200052ac 	.word	0x200052ac

08010fe0 <__assert_func>:
 8010fe0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010fe2:	4614      	mov	r4, r2
 8010fe4:	461a      	mov	r2, r3
 8010fe6:	4b09      	ldr	r3, [pc, #36]	@ (801100c <__assert_func+0x2c>)
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	4605      	mov	r5, r0
 8010fec:	68d8      	ldr	r0, [r3, #12]
 8010fee:	b14c      	cbz	r4, 8011004 <__assert_func+0x24>
 8010ff0:	4b07      	ldr	r3, [pc, #28]	@ (8011010 <__assert_func+0x30>)
 8010ff2:	9100      	str	r1, [sp, #0]
 8010ff4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010ff8:	4906      	ldr	r1, [pc, #24]	@ (8011014 <__assert_func+0x34>)
 8010ffa:	462b      	mov	r3, r5
 8010ffc:	f000 f850 	bl	80110a0 <fiprintf>
 8011000:	f000 f860 	bl	80110c4 <abort>
 8011004:	4b04      	ldr	r3, [pc, #16]	@ (8011018 <__assert_func+0x38>)
 8011006:	461c      	mov	r4, r3
 8011008:	e7f3      	b.n	8010ff2 <__assert_func+0x12>
 801100a:	bf00      	nop
 801100c:	20000268 	.word	0x20000268
 8011010:	08011a46 	.word	0x08011a46
 8011014:	08011a53 	.word	0x08011a53
 8011018:	08011a81 	.word	0x08011a81

0801101c <_calloc_r>:
 801101c:	b570      	push	{r4, r5, r6, lr}
 801101e:	fba1 5402 	umull	r5, r4, r1, r2
 8011022:	b934      	cbnz	r4, 8011032 <_calloc_r+0x16>
 8011024:	4629      	mov	r1, r5
 8011026:	f7fe ffdd 	bl	800ffe4 <_malloc_r>
 801102a:	4606      	mov	r6, r0
 801102c:	b928      	cbnz	r0, 801103a <_calloc_r+0x1e>
 801102e:	4630      	mov	r0, r6
 8011030:	bd70      	pop	{r4, r5, r6, pc}
 8011032:	220c      	movs	r2, #12
 8011034:	6002      	str	r2, [r0, #0]
 8011036:	2600      	movs	r6, #0
 8011038:	e7f9      	b.n	801102e <_calloc_r+0x12>
 801103a:	462a      	mov	r2, r5
 801103c:	4621      	mov	r1, r4
 801103e:	f7fd fcba 	bl	800e9b6 <memset>
 8011042:	e7f4      	b.n	801102e <_calloc_r+0x12>

08011044 <_realloc_r>:
 8011044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011048:	4607      	mov	r7, r0
 801104a:	4614      	mov	r4, r2
 801104c:	460d      	mov	r5, r1
 801104e:	b921      	cbnz	r1, 801105a <_realloc_r+0x16>
 8011050:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011054:	4611      	mov	r1, r2
 8011056:	f7fe bfc5 	b.w	800ffe4 <_malloc_r>
 801105a:	b92a      	cbnz	r2, 8011068 <_realloc_r+0x24>
 801105c:	f7fe fc14 	bl	800f888 <_free_r>
 8011060:	4625      	mov	r5, r4
 8011062:	4628      	mov	r0, r5
 8011064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011068:	f000 f833 	bl	80110d2 <_malloc_usable_size_r>
 801106c:	4284      	cmp	r4, r0
 801106e:	4606      	mov	r6, r0
 8011070:	d802      	bhi.n	8011078 <_realloc_r+0x34>
 8011072:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011076:	d8f4      	bhi.n	8011062 <_realloc_r+0x1e>
 8011078:	4621      	mov	r1, r4
 801107a:	4638      	mov	r0, r7
 801107c:	f7fe ffb2 	bl	800ffe4 <_malloc_r>
 8011080:	4680      	mov	r8, r0
 8011082:	b908      	cbnz	r0, 8011088 <_realloc_r+0x44>
 8011084:	4645      	mov	r5, r8
 8011086:	e7ec      	b.n	8011062 <_realloc_r+0x1e>
 8011088:	42b4      	cmp	r4, r6
 801108a:	4622      	mov	r2, r4
 801108c:	4629      	mov	r1, r5
 801108e:	bf28      	it	cs
 8011090:	4632      	movcs	r2, r6
 8011092:	f7fd fd80 	bl	800eb96 <memcpy>
 8011096:	4629      	mov	r1, r5
 8011098:	4638      	mov	r0, r7
 801109a:	f7fe fbf5 	bl	800f888 <_free_r>
 801109e:	e7f1      	b.n	8011084 <_realloc_r+0x40>

080110a0 <fiprintf>:
 80110a0:	b40e      	push	{r1, r2, r3}
 80110a2:	b503      	push	{r0, r1, lr}
 80110a4:	4601      	mov	r1, r0
 80110a6:	ab03      	add	r3, sp, #12
 80110a8:	4805      	ldr	r0, [pc, #20]	@ (80110c0 <fiprintf+0x20>)
 80110aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80110ae:	6800      	ldr	r0, [r0, #0]
 80110b0:	9301      	str	r3, [sp, #4]
 80110b2:	f000 f83f 	bl	8011134 <_vfiprintf_r>
 80110b6:	b002      	add	sp, #8
 80110b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80110bc:	b003      	add	sp, #12
 80110be:	4770      	bx	lr
 80110c0:	20000268 	.word	0x20000268

080110c4 <abort>:
 80110c4:	b508      	push	{r3, lr}
 80110c6:	2006      	movs	r0, #6
 80110c8:	f000 fa08 	bl	80114dc <raise>
 80110cc:	2001      	movs	r0, #1
 80110ce:	f7f2 ffa3 	bl	8004018 <_exit>

080110d2 <_malloc_usable_size_r>:
 80110d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80110d6:	1f18      	subs	r0, r3, #4
 80110d8:	2b00      	cmp	r3, #0
 80110da:	bfbc      	itt	lt
 80110dc:	580b      	ldrlt	r3, [r1, r0]
 80110de:	18c0      	addlt	r0, r0, r3
 80110e0:	4770      	bx	lr

080110e2 <__sfputc_r>:
 80110e2:	6893      	ldr	r3, [r2, #8]
 80110e4:	3b01      	subs	r3, #1
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	b410      	push	{r4}
 80110ea:	6093      	str	r3, [r2, #8]
 80110ec:	da08      	bge.n	8011100 <__sfputc_r+0x1e>
 80110ee:	6994      	ldr	r4, [r2, #24]
 80110f0:	42a3      	cmp	r3, r4
 80110f2:	db01      	blt.n	80110f8 <__sfputc_r+0x16>
 80110f4:	290a      	cmp	r1, #10
 80110f6:	d103      	bne.n	8011100 <__sfputc_r+0x1e>
 80110f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80110fc:	f000 b932 	b.w	8011364 <__swbuf_r>
 8011100:	6813      	ldr	r3, [r2, #0]
 8011102:	1c58      	adds	r0, r3, #1
 8011104:	6010      	str	r0, [r2, #0]
 8011106:	7019      	strb	r1, [r3, #0]
 8011108:	4608      	mov	r0, r1
 801110a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801110e:	4770      	bx	lr

08011110 <__sfputs_r>:
 8011110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011112:	4606      	mov	r6, r0
 8011114:	460f      	mov	r7, r1
 8011116:	4614      	mov	r4, r2
 8011118:	18d5      	adds	r5, r2, r3
 801111a:	42ac      	cmp	r4, r5
 801111c:	d101      	bne.n	8011122 <__sfputs_r+0x12>
 801111e:	2000      	movs	r0, #0
 8011120:	e007      	b.n	8011132 <__sfputs_r+0x22>
 8011122:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011126:	463a      	mov	r2, r7
 8011128:	4630      	mov	r0, r6
 801112a:	f7ff ffda 	bl	80110e2 <__sfputc_r>
 801112e:	1c43      	adds	r3, r0, #1
 8011130:	d1f3      	bne.n	801111a <__sfputs_r+0xa>
 8011132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011134 <_vfiprintf_r>:
 8011134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011138:	460d      	mov	r5, r1
 801113a:	b09d      	sub	sp, #116	@ 0x74
 801113c:	4614      	mov	r4, r2
 801113e:	4698      	mov	r8, r3
 8011140:	4606      	mov	r6, r0
 8011142:	b118      	cbz	r0, 801114c <_vfiprintf_r+0x18>
 8011144:	6a03      	ldr	r3, [r0, #32]
 8011146:	b90b      	cbnz	r3, 801114c <_vfiprintf_r+0x18>
 8011148:	f7fd fb64 	bl	800e814 <__sinit>
 801114c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801114e:	07d9      	lsls	r1, r3, #31
 8011150:	d405      	bmi.n	801115e <_vfiprintf_r+0x2a>
 8011152:	89ab      	ldrh	r3, [r5, #12]
 8011154:	059a      	lsls	r2, r3, #22
 8011156:	d402      	bmi.n	801115e <_vfiprintf_r+0x2a>
 8011158:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801115a:	f7fd fd1a 	bl	800eb92 <__retarget_lock_acquire_recursive>
 801115e:	89ab      	ldrh	r3, [r5, #12]
 8011160:	071b      	lsls	r3, r3, #28
 8011162:	d501      	bpl.n	8011168 <_vfiprintf_r+0x34>
 8011164:	692b      	ldr	r3, [r5, #16]
 8011166:	b99b      	cbnz	r3, 8011190 <_vfiprintf_r+0x5c>
 8011168:	4629      	mov	r1, r5
 801116a:	4630      	mov	r0, r6
 801116c:	f000 f938 	bl	80113e0 <__swsetup_r>
 8011170:	b170      	cbz	r0, 8011190 <_vfiprintf_r+0x5c>
 8011172:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011174:	07dc      	lsls	r4, r3, #31
 8011176:	d504      	bpl.n	8011182 <_vfiprintf_r+0x4e>
 8011178:	f04f 30ff 	mov.w	r0, #4294967295
 801117c:	b01d      	add	sp, #116	@ 0x74
 801117e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011182:	89ab      	ldrh	r3, [r5, #12]
 8011184:	0598      	lsls	r0, r3, #22
 8011186:	d4f7      	bmi.n	8011178 <_vfiprintf_r+0x44>
 8011188:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801118a:	f7fd fd03 	bl	800eb94 <__retarget_lock_release_recursive>
 801118e:	e7f3      	b.n	8011178 <_vfiprintf_r+0x44>
 8011190:	2300      	movs	r3, #0
 8011192:	9309      	str	r3, [sp, #36]	@ 0x24
 8011194:	2320      	movs	r3, #32
 8011196:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801119a:	f8cd 800c 	str.w	r8, [sp, #12]
 801119e:	2330      	movs	r3, #48	@ 0x30
 80111a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011350 <_vfiprintf_r+0x21c>
 80111a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80111a8:	f04f 0901 	mov.w	r9, #1
 80111ac:	4623      	mov	r3, r4
 80111ae:	469a      	mov	sl, r3
 80111b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80111b4:	b10a      	cbz	r2, 80111ba <_vfiprintf_r+0x86>
 80111b6:	2a25      	cmp	r2, #37	@ 0x25
 80111b8:	d1f9      	bne.n	80111ae <_vfiprintf_r+0x7a>
 80111ba:	ebba 0b04 	subs.w	fp, sl, r4
 80111be:	d00b      	beq.n	80111d8 <_vfiprintf_r+0xa4>
 80111c0:	465b      	mov	r3, fp
 80111c2:	4622      	mov	r2, r4
 80111c4:	4629      	mov	r1, r5
 80111c6:	4630      	mov	r0, r6
 80111c8:	f7ff ffa2 	bl	8011110 <__sfputs_r>
 80111cc:	3001      	adds	r0, #1
 80111ce:	f000 80a7 	beq.w	8011320 <_vfiprintf_r+0x1ec>
 80111d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80111d4:	445a      	add	r2, fp
 80111d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80111d8:	f89a 3000 	ldrb.w	r3, [sl]
 80111dc:	2b00      	cmp	r3, #0
 80111de:	f000 809f 	beq.w	8011320 <_vfiprintf_r+0x1ec>
 80111e2:	2300      	movs	r3, #0
 80111e4:	f04f 32ff 	mov.w	r2, #4294967295
 80111e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80111ec:	f10a 0a01 	add.w	sl, sl, #1
 80111f0:	9304      	str	r3, [sp, #16]
 80111f2:	9307      	str	r3, [sp, #28]
 80111f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80111f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80111fa:	4654      	mov	r4, sl
 80111fc:	2205      	movs	r2, #5
 80111fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011202:	4853      	ldr	r0, [pc, #332]	@ (8011350 <_vfiprintf_r+0x21c>)
 8011204:	f7ee ffec 	bl	80001e0 <memchr>
 8011208:	9a04      	ldr	r2, [sp, #16]
 801120a:	b9d8      	cbnz	r0, 8011244 <_vfiprintf_r+0x110>
 801120c:	06d1      	lsls	r1, r2, #27
 801120e:	bf44      	itt	mi
 8011210:	2320      	movmi	r3, #32
 8011212:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011216:	0713      	lsls	r3, r2, #28
 8011218:	bf44      	itt	mi
 801121a:	232b      	movmi	r3, #43	@ 0x2b
 801121c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011220:	f89a 3000 	ldrb.w	r3, [sl]
 8011224:	2b2a      	cmp	r3, #42	@ 0x2a
 8011226:	d015      	beq.n	8011254 <_vfiprintf_r+0x120>
 8011228:	9a07      	ldr	r2, [sp, #28]
 801122a:	4654      	mov	r4, sl
 801122c:	2000      	movs	r0, #0
 801122e:	f04f 0c0a 	mov.w	ip, #10
 8011232:	4621      	mov	r1, r4
 8011234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011238:	3b30      	subs	r3, #48	@ 0x30
 801123a:	2b09      	cmp	r3, #9
 801123c:	d94b      	bls.n	80112d6 <_vfiprintf_r+0x1a2>
 801123e:	b1b0      	cbz	r0, 801126e <_vfiprintf_r+0x13a>
 8011240:	9207      	str	r2, [sp, #28]
 8011242:	e014      	b.n	801126e <_vfiprintf_r+0x13a>
 8011244:	eba0 0308 	sub.w	r3, r0, r8
 8011248:	fa09 f303 	lsl.w	r3, r9, r3
 801124c:	4313      	orrs	r3, r2
 801124e:	9304      	str	r3, [sp, #16]
 8011250:	46a2      	mov	sl, r4
 8011252:	e7d2      	b.n	80111fa <_vfiprintf_r+0xc6>
 8011254:	9b03      	ldr	r3, [sp, #12]
 8011256:	1d19      	adds	r1, r3, #4
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	9103      	str	r1, [sp, #12]
 801125c:	2b00      	cmp	r3, #0
 801125e:	bfbb      	ittet	lt
 8011260:	425b      	neglt	r3, r3
 8011262:	f042 0202 	orrlt.w	r2, r2, #2
 8011266:	9307      	strge	r3, [sp, #28]
 8011268:	9307      	strlt	r3, [sp, #28]
 801126a:	bfb8      	it	lt
 801126c:	9204      	strlt	r2, [sp, #16]
 801126e:	7823      	ldrb	r3, [r4, #0]
 8011270:	2b2e      	cmp	r3, #46	@ 0x2e
 8011272:	d10a      	bne.n	801128a <_vfiprintf_r+0x156>
 8011274:	7863      	ldrb	r3, [r4, #1]
 8011276:	2b2a      	cmp	r3, #42	@ 0x2a
 8011278:	d132      	bne.n	80112e0 <_vfiprintf_r+0x1ac>
 801127a:	9b03      	ldr	r3, [sp, #12]
 801127c:	1d1a      	adds	r2, r3, #4
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	9203      	str	r2, [sp, #12]
 8011282:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011286:	3402      	adds	r4, #2
 8011288:	9305      	str	r3, [sp, #20]
 801128a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011360 <_vfiprintf_r+0x22c>
 801128e:	7821      	ldrb	r1, [r4, #0]
 8011290:	2203      	movs	r2, #3
 8011292:	4650      	mov	r0, sl
 8011294:	f7ee ffa4 	bl	80001e0 <memchr>
 8011298:	b138      	cbz	r0, 80112aa <_vfiprintf_r+0x176>
 801129a:	9b04      	ldr	r3, [sp, #16]
 801129c:	eba0 000a 	sub.w	r0, r0, sl
 80112a0:	2240      	movs	r2, #64	@ 0x40
 80112a2:	4082      	lsls	r2, r0
 80112a4:	4313      	orrs	r3, r2
 80112a6:	3401      	adds	r4, #1
 80112a8:	9304      	str	r3, [sp, #16]
 80112aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112ae:	4829      	ldr	r0, [pc, #164]	@ (8011354 <_vfiprintf_r+0x220>)
 80112b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80112b4:	2206      	movs	r2, #6
 80112b6:	f7ee ff93 	bl	80001e0 <memchr>
 80112ba:	2800      	cmp	r0, #0
 80112bc:	d03f      	beq.n	801133e <_vfiprintf_r+0x20a>
 80112be:	4b26      	ldr	r3, [pc, #152]	@ (8011358 <_vfiprintf_r+0x224>)
 80112c0:	bb1b      	cbnz	r3, 801130a <_vfiprintf_r+0x1d6>
 80112c2:	9b03      	ldr	r3, [sp, #12]
 80112c4:	3307      	adds	r3, #7
 80112c6:	f023 0307 	bic.w	r3, r3, #7
 80112ca:	3308      	adds	r3, #8
 80112cc:	9303      	str	r3, [sp, #12]
 80112ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112d0:	443b      	add	r3, r7
 80112d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80112d4:	e76a      	b.n	80111ac <_vfiprintf_r+0x78>
 80112d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80112da:	460c      	mov	r4, r1
 80112dc:	2001      	movs	r0, #1
 80112de:	e7a8      	b.n	8011232 <_vfiprintf_r+0xfe>
 80112e0:	2300      	movs	r3, #0
 80112e2:	3401      	adds	r4, #1
 80112e4:	9305      	str	r3, [sp, #20]
 80112e6:	4619      	mov	r1, r3
 80112e8:	f04f 0c0a 	mov.w	ip, #10
 80112ec:	4620      	mov	r0, r4
 80112ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80112f2:	3a30      	subs	r2, #48	@ 0x30
 80112f4:	2a09      	cmp	r2, #9
 80112f6:	d903      	bls.n	8011300 <_vfiprintf_r+0x1cc>
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d0c6      	beq.n	801128a <_vfiprintf_r+0x156>
 80112fc:	9105      	str	r1, [sp, #20]
 80112fe:	e7c4      	b.n	801128a <_vfiprintf_r+0x156>
 8011300:	fb0c 2101 	mla	r1, ip, r1, r2
 8011304:	4604      	mov	r4, r0
 8011306:	2301      	movs	r3, #1
 8011308:	e7f0      	b.n	80112ec <_vfiprintf_r+0x1b8>
 801130a:	ab03      	add	r3, sp, #12
 801130c:	9300      	str	r3, [sp, #0]
 801130e:	462a      	mov	r2, r5
 8011310:	4b12      	ldr	r3, [pc, #72]	@ (801135c <_vfiprintf_r+0x228>)
 8011312:	a904      	add	r1, sp, #16
 8011314:	4630      	mov	r0, r6
 8011316:	f7fc fc2d 	bl	800db74 <_printf_float>
 801131a:	4607      	mov	r7, r0
 801131c:	1c78      	adds	r0, r7, #1
 801131e:	d1d6      	bne.n	80112ce <_vfiprintf_r+0x19a>
 8011320:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011322:	07d9      	lsls	r1, r3, #31
 8011324:	d405      	bmi.n	8011332 <_vfiprintf_r+0x1fe>
 8011326:	89ab      	ldrh	r3, [r5, #12]
 8011328:	059a      	lsls	r2, r3, #22
 801132a:	d402      	bmi.n	8011332 <_vfiprintf_r+0x1fe>
 801132c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801132e:	f7fd fc31 	bl	800eb94 <__retarget_lock_release_recursive>
 8011332:	89ab      	ldrh	r3, [r5, #12]
 8011334:	065b      	lsls	r3, r3, #25
 8011336:	f53f af1f 	bmi.w	8011178 <_vfiprintf_r+0x44>
 801133a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801133c:	e71e      	b.n	801117c <_vfiprintf_r+0x48>
 801133e:	ab03      	add	r3, sp, #12
 8011340:	9300      	str	r3, [sp, #0]
 8011342:	462a      	mov	r2, r5
 8011344:	4b05      	ldr	r3, [pc, #20]	@ (801135c <_vfiprintf_r+0x228>)
 8011346:	a904      	add	r1, sp, #16
 8011348:	4630      	mov	r0, r6
 801134a:	f7fc feab 	bl	800e0a4 <_printf_i>
 801134e:	e7e4      	b.n	801131a <_vfiprintf_r+0x1e6>
 8011350:	08011a35 	.word	0x08011a35
 8011354:	08011a3f 	.word	0x08011a3f
 8011358:	0800db75 	.word	0x0800db75
 801135c:	08011111 	.word	0x08011111
 8011360:	08011a3b 	.word	0x08011a3b

08011364 <__swbuf_r>:
 8011364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011366:	460e      	mov	r6, r1
 8011368:	4614      	mov	r4, r2
 801136a:	4605      	mov	r5, r0
 801136c:	b118      	cbz	r0, 8011376 <__swbuf_r+0x12>
 801136e:	6a03      	ldr	r3, [r0, #32]
 8011370:	b90b      	cbnz	r3, 8011376 <__swbuf_r+0x12>
 8011372:	f7fd fa4f 	bl	800e814 <__sinit>
 8011376:	69a3      	ldr	r3, [r4, #24]
 8011378:	60a3      	str	r3, [r4, #8]
 801137a:	89a3      	ldrh	r3, [r4, #12]
 801137c:	071a      	lsls	r2, r3, #28
 801137e:	d501      	bpl.n	8011384 <__swbuf_r+0x20>
 8011380:	6923      	ldr	r3, [r4, #16]
 8011382:	b943      	cbnz	r3, 8011396 <__swbuf_r+0x32>
 8011384:	4621      	mov	r1, r4
 8011386:	4628      	mov	r0, r5
 8011388:	f000 f82a 	bl	80113e0 <__swsetup_r>
 801138c:	b118      	cbz	r0, 8011396 <__swbuf_r+0x32>
 801138e:	f04f 37ff 	mov.w	r7, #4294967295
 8011392:	4638      	mov	r0, r7
 8011394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011396:	6823      	ldr	r3, [r4, #0]
 8011398:	6922      	ldr	r2, [r4, #16]
 801139a:	1a98      	subs	r0, r3, r2
 801139c:	6963      	ldr	r3, [r4, #20]
 801139e:	b2f6      	uxtb	r6, r6
 80113a0:	4283      	cmp	r3, r0
 80113a2:	4637      	mov	r7, r6
 80113a4:	dc05      	bgt.n	80113b2 <__swbuf_r+0x4e>
 80113a6:	4621      	mov	r1, r4
 80113a8:	4628      	mov	r0, r5
 80113aa:	f7ff fdc7 	bl	8010f3c <_fflush_r>
 80113ae:	2800      	cmp	r0, #0
 80113b0:	d1ed      	bne.n	801138e <__swbuf_r+0x2a>
 80113b2:	68a3      	ldr	r3, [r4, #8]
 80113b4:	3b01      	subs	r3, #1
 80113b6:	60a3      	str	r3, [r4, #8]
 80113b8:	6823      	ldr	r3, [r4, #0]
 80113ba:	1c5a      	adds	r2, r3, #1
 80113bc:	6022      	str	r2, [r4, #0]
 80113be:	701e      	strb	r6, [r3, #0]
 80113c0:	6962      	ldr	r2, [r4, #20]
 80113c2:	1c43      	adds	r3, r0, #1
 80113c4:	429a      	cmp	r2, r3
 80113c6:	d004      	beq.n	80113d2 <__swbuf_r+0x6e>
 80113c8:	89a3      	ldrh	r3, [r4, #12]
 80113ca:	07db      	lsls	r3, r3, #31
 80113cc:	d5e1      	bpl.n	8011392 <__swbuf_r+0x2e>
 80113ce:	2e0a      	cmp	r6, #10
 80113d0:	d1df      	bne.n	8011392 <__swbuf_r+0x2e>
 80113d2:	4621      	mov	r1, r4
 80113d4:	4628      	mov	r0, r5
 80113d6:	f7ff fdb1 	bl	8010f3c <_fflush_r>
 80113da:	2800      	cmp	r0, #0
 80113dc:	d0d9      	beq.n	8011392 <__swbuf_r+0x2e>
 80113de:	e7d6      	b.n	801138e <__swbuf_r+0x2a>

080113e0 <__swsetup_r>:
 80113e0:	b538      	push	{r3, r4, r5, lr}
 80113e2:	4b29      	ldr	r3, [pc, #164]	@ (8011488 <__swsetup_r+0xa8>)
 80113e4:	4605      	mov	r5, r0
 80113e6:	6818      	ldr	r0, [r3, #0]
 80113e8:	460c      	mov	r4, r1
 80113ea:	b118      	cbz	r0, 80113f4 <__swsetup_r+0x14>
 80113ec:	6a03      	ldr	r3, [r0, #32]
 80113ee:	b90b      	cbnz	r3, 80113f4 <__swsetup_r+0x14>
 80113f0:	f7fd fa10 	bl	800e814 <__sinit>
 80113f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113f8:	0719      	lsls	r1, r3, #28
 80113fa:	d422      	bmi.n	8011442 <__swsetup_r+0x62>
 80113fc:	06da      	lsls	r2, r3, #27
 80113fe:	d407      	bmi.n	8011410 <__swsetup_r+0x30>
 8011400:	2209      	movs	r2, #9
 8011402:	602a      	str	r2, [r5, #0]
 8011404:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011408:	81a3      	strh	r3, [r4, #12]
 801140a:	f04f 30ff 	mov.w	r0, #4294967295
 801140e:	e033      	b.n	8011478 <__swsetup_r+0x98>
 8011410:	0758      	lsls	r0, r3, #29
 8011412:	d512      	bpl.n	801143a <__swsetup_r+0x5a>
 8011414:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011416:	b141      	cbz	r1, 801142a <__swsetup_r+0x4a>
 8011418:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801141c:	4299      	cmp	r1, r3
 801141e:	d002      	beq.n	8011426 <__swsetup_r+0x46>
 8011420:	4628      	mov	r0, r5
 8011422:	f7fe fa31 	bl	800f888 <_free_r>
 8011426:	2300      	movs	r3, #0
 8011428:	6363      	str	r3, [r4, #52]	@ 0x34
 801142a:	89a3      	ldrh	r3, [r4, #12]
 801142c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011430:	81a3      	strh	r3, [r4, #12]
 8011432:	2300      	movs	r3, #0
 8011434:	6063      	str	r3, [r4, #4]
 8011436:	6923      	ldr	r3, [r4, #16]
 8011438:	6023      	str	r3, [r4, #0]
 801143a:	89a3      	ldrh	r3, [r4, #12]
 801143c:	f043 0308 	orr.w	r3, r3, #8
 8011440:	81a3      	strh	r3, [r4, #12]
 8011442:	6923      	ldr	r3, [r4, #16]
 8011444:	b94b      	cbnz	r3, 801145a <__swsetup_r+0x7a>
 8011446:	89a3      	ldrh	r3, [r4, #12]
 8011448:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801144c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011450:	d003      	beq.n	801145a <__swsetup_r+0x7a>
 8011452:	4621      	mov	r1, r4
 8011454:	4628      	mov	r0, r5
 8011456:	f000 f883 	bl	8011560 <__smakebuf_r>
 801145a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801145e:	f013 0201 	ands.w	r2, r3, #1
 8011462:	d00a      	beq.n	801147a <__swsetup_r+0x9a>
 8011464:	2200      	movs	r2, #0
 8011466:	60a2      	str	r2, [r4, #8]
 8011468:	6962      	ldr	r2, [r4, #20]
 801146a:	4252      	negs	r2, r2
 801146c:	61a2      	str	r2, [r4, #24]
 801146e:	6922      	ldr	r2, [r4, #16]
 8011470:	b942      	cbnz	r2, 8011484 <__swsetup_r+0xa4>
 8011472:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011476:	d1c5      	bne.n	8011404 <__swsetup_r+0x24>
 8011478:	bd38      	pop	{r3, r4, r5, pc}
 801147a:	0799      	lsls	r1, r3, #30
 801147c:	bf58      	it	pl
 801147e:	6962      	ldrpl	r2, [r4, #20]
 8011480:	60a2      	str	r2, [r4, #8]
 8011482:	e7f4      	b.n	801146e <__swsetup_r+0x8e>
 8011484:	2000      	movs	r0, #0
 8011486:	e7f7      	b.n	8011478 <__swsetup_r+0x98>
 8011488:	20000268 	.word	0x20000268

0801148c <_raise_r>:
 801148c:	291f      	cmp	r1, #31
 801148e:	b538      	push	{r3, r4, r5, lr}
 8011490:	4605      	mov	r5, r0
 8011492:	460c      	mov	r4, r1
 8011494:	d904      	bls.n	80114a0 <_raise_r+0x14>
 8011496:	2316      	movs	r3, #22
 8011498:	6003      	str	r3, [r0, #0]
 801149a:	f04f 30ff 	mov.w	r0, #4294967295
 801149e:	bd38      	pop	{r3, r4, r5, pc}
 80114a0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80114a2:	b112      	cbz	r2, 80114aa <_raise_r+0x1e>
 80114a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80114a8:	b94b      	cbnz	r3, 80114be <_raise_r+0x32>
 80114aa:	4628      	mov	r0, r5
 80114ac:	f000 f830 	bl	8011510 <_getpid_r>
 80114b0:	4622      	mov	r2, r4
 80114b2:	4601      	mov	r1, r0
 80114b4:	4628      	mov	r0, r5
 80114b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80114ba:	f000 b817 	b.w	80114ec <_kill_r>
 80114be:	2b01      	cmp	r3, #1
 80114c0:	d00a      	beq.n	80114d8 <_raise_r+0x4c>
 80114c2:	1c59      	adds	r1, r3, #1
 80114c4:	d103      	bne.n	80114ce <_raise_r+0x42>
 80114c6:	2316      	movs	r3, #22
 80114c8:	6003      	str	r3, [r0, #0]
 80114ca:	2001      	movs	r0, #1
 80114cc:	e7e7      	b.n	801149e <_raise_r+0x12>
 80114ce:	2100      	movs	r1, #0
 80114d0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80114d4:	4620      	mov	r0, r4
 80114d6:	4798      	blx	r3
 80114d8:	2000      	movs	r0, #0
 80114da:	e7e0      	b.n	801149e <_raise_r+0x12>

080114dc <raise>:
 80114dc:	4b02      	ldr	r3, [pc, #8]	@ (80114e8 <raise+0xc>)
 80114de:	4601      	mov	r1, r0
 80114e0:	6818      	ldr	r0, [r3, #0]
 80114e2:	f7ff bfd3 	b.w	801148c <_raise_r>
 80114e6:	bf00      	nop
 80114e8:	20000268 	.word	0x20000268

080114ec <_kill_r>:
 80114ec:	b538      	push	{r3, r4, r5, lr}
 80114ee:	4d07      	ldr	r5, [pc, #28]	@ (801150c <_kill_r+0x20>)
 80114f0:	2300      	movs	r3, #0
 80114f2:	4604      	mov	r4, r0
 80114f4:	4608      	mov	r0, r1
 80114f6:	4611      	mov	r1, r2
 80114f8:	602b      	str	r3, [r5, #0]
 80114fa:	f7f2 fd7d 	bl	8003ff8 <_kill>
 80114fe:	1c43      	adds	r3, r0, #1
 8011500:	d102      	bne.n	8011508 <_kill_r+0x1c>
 8011502:	682b      	ldr	r3, [r5, #0]
 8011504:	b103      	cbz	r3, 8011508 <_kill_r+0x1c>
 8011506:	6023      	str	r3, [r4, #0]
 8011508:	bd38      	pop	{r3, r4, r5, pc}
 801150a:	bf00      	nop
 801150c:	200052ac 	.word	0x200052ac

08011510 <_getpid_r>:
 8011510:	f7f2 bd6a 	b.w	8003fe8 <_getpid>

08011514 <__swhatbuf_r>:
 8011514:	b570      	push	{r4, r5, r6, lr}
 8011516:	460c      	mov	r4, r1
 8011518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801151c:	2900      	cmp	r1, #0
 801151e:	b096      	sub	sp, #88	@ 0x58
 8011520:	4615      	mov	r5, r2
 8011522:	461e      	mov	r6, r3
 8011524:	da0d      	bge.n	8011542 <__swhatbuf_r+0x2e>
 8011526:	89a3      	ldrh	r3, [r4, #12]
 8011528:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801152c:	f04f 0100 	mov.w	r1, #0
 8011530:	bf14      	ite	ne
 8011532:	2340      	movne	r3, #64	@ 0x40
 8011534:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011538:	2000      	movs	r0, #0
 801153a:	6031      	str	r1, [r6, #0]
 801153c:	602b      	str	r3, [r5, #0]
 801153e:	b016      	add	sp, #88	@ 0x58
 8011540:	bd70      	pop	{r4, r5, r6, pc}
 8011542:	466a      	mov	r2, sp
 8011544:	f000 f848 	bl	80115d8 <_fstat_r>
 8011548:	2800      	cmp	r0, #0
 801154a:	dbec      	blt.n	8011526 <__swhatbuf_r+0x12>
 801154c:	9901      	ldr	r1, [sp, #4]
 801154e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011552:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011556:	4259      	negs	r1, r3
 8011558:	4159      	adcs	r1, r3
 801155a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801155e:	e7eb      	b.n	8011538 <__swhatbuf_r+0x24>

08011560 <__smakebuf_r>:
 8011560:	898b      	ldrh	r3, [r1, #12]
 8011562:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011564:	079d      	lsls	r5, r3, #30
 8011566:	4606      	mov	r6, r0
 8011568:	460c      	mov	r4, r1
 801156a:	d507      	bpl.n	801157c <__smakebuf_r+0x1c>
 801156c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011570:	6023      	str	r3, [r4, #0]
 8011572:	6123      	str	r3, [r4, #16]
 8011574:	2301      	movs	r3, #1
 8011576:	6163      	str	r3, [r4, #20]
 8011578:	b003      	add	sp, #12
 801157a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801157c:	ab01      	add	r3, sp, #4
 801157e:	466a      	mov	r2, sp
 8011580:	f7ff ffc8 	bl	8011514 <__swhatbuf_r>
 8011584:	9f00      	ldr	r7, [sp, #0]
 8011586:	4605      	mov	r5, r0
 8011588:	4639      	mov	r1, r7
 801158a:	4630      	mov	r0, r6
 801158c:	f7fe fd2a 	bl	800ffe4 <_malloc_r>
 8011590:	b948      	cbnz	r0, 80115a6 <__smakebuf_r+0x46>
 8011592:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011596:	059a      	lsls	r2, r3, #22
 8011598:	d4ee      	bmi.n	8011578 <__smakebuf_r+0x18>
 801159a:	f023 0303 	bic.w	r3, r3, #3
 801159e:	f043 0302 	orr.w	r3, r3, #2
 80115a2:	81a3      	strh	r3, [r4, #12]
 80115a4:	e7e2      	b.n	801156c <__smakebuf_r+0xc>
 80115a6:	89a3      	ldrh	r3, [r4, #12]
 80115a8:	6020      	str	r0, [r4, #0]
 80115aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80115ae:	81a3      	strh	r3, [r4, #12]
 80115b0:	9b01      	ldr	r3, [sp, #4]
 80115b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80115b6:	b15b      	cbz	r3, 80115d0 <__smakebuf_r+0x70>
 80115b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80115bc:	4630      	mov	r0, r6
 80115be:	f000 f81d 	bl	80115fc <_isatty_r>
 80115c2:	b128      	cbz	r0, 80115d0 <__smakebuf_r+0x70>
 80115c4:	89a3      	ldrh	r3, [r4, #12]
 80115c6:	f023 0303 	bic.w	r3, r3, #3
 80115ca:	f043 0301 	orr.w	r3, r3, #1
 80115ce:	81a3      	strh	r3, [r4, #12]
 80115d0:	89a3      	ldrh	r3, [r4, #12]
 80115d2:	431d      	orrs	r5, r3
 80115d4:	81a5      	strh	r5, [r4, #12]
 80115d6:	e7cf      	b.n	8011578 <__smakebuf_r+0x18>

080115d8 <_fstat_r>:
 80115d8:	b538      	push	{r3, r4, r5, lr}
 80115da:	4d07      	ldr	r5, [pc, #28]	@ (80115f8 <_fstat_r+0x20>)
 80115dc:	2300      	movs	r3, #0
 80115de:	4604      	mov	r4, r0
 80115e0:	4608      	mov	r0, r1
 80115e2:	4611      	mov	r1, r2
 80115e4:	602b      	str	r3, [r5, #0]
 80115e6:	f7f2 fd67 	bl	80040b8 <_fstat>
 80115ea:	1c43      	adds	r3, r0, #1
 80115ec:	d102      	bne.n	80115f4 <_fstat_r+0x1c>
 80115ee:	682b      	ldr	r3, [r5, #0]
 80115f0:	b103      	cbz	r3, 80115f4 <_fstat_r+0x1c>
 80115f2:	6023      	str	r3, [r4, #0]
 80115f4:	bd38      	pop	{r3, r4, r5, pc}
 80115f6:	bf00      	nop
 80115f8:	200052ac 	.word	0x200052ac

080115fc <_isatty_r>:
 80115fc:	b538      	push	{r3, r4, r5, lr}
 80115fe:	4d06      	ldr	r5, [pc, #24]	@ (8011618 <_isatty_r+0x1c>)
 8011600:	2300      	movs	r3, #0
 8011602:	4604      	mov	r4, r0
 8011604:	4608      	mov	r0, r1
 8011606:	602b      	str	r3, [r5, #0]
 8011608:	f7f2 fd66 	bl	80040d8 <_isatty>
 801160c:	1c43      	adds	r3, r0, #1
 801160e:	d102      	bne.n	8011616 <_isatty_r+0x1a>
 8011610:	682b      	ldr	r3, [r5, #0]
 8011612:	b103      	cbz	r3, 8011616 <_isatty_r+0x1a>
 8011614:	6023      	str	r3, [r4, #0]
 8011616:	bd38      	pop	{r3, r4, r5, pc}
 8011618:	200052ac 	.word	0x200052ac

0801161c <_init>:
 801161c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801161e:	bf00      	nop
 8011620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011622:	bc08      	pop	{r3}
 8011624:	469e      	mov	lr, r3
 8011626:	4770      	bx	lr

08011628 <_fini>:
 8011628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801162a:	bf00      	nop
 801162c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801162e:	bc08      	pop	{r3}
 8011630:	469e      	mov	lr, r3
 8011632:	4770      	bx	lr
