
RCSailingEEBE_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011a84  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006cc  08011c28  08011c28  00012c28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080122f4  080122f4  000142c8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080122f4  080122f4  000132f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080122fc  080122fc  000142c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080122fc  080122fc  000132fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012300  08012300  00013300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c8  20000000  08012304  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005038  200002c8  080125cc  000142c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005300  080125cc  00014300  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000142c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000247fc  00000000  00000000  000142f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005339  00000000  00000000  00038af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d40  00000000  00000000  0003de30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016b2  00000000  00000000  0003fb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dc65  00000000  00000000  00041222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000251ce  00000000  00000000  0005ee87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aaed6  00000000  00000000  00084055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012ef2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008fe0  00000000  00000000  0012ef70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00137f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c8 	.word	0x200002c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011c0c 	.word	0x08011c0c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002cc 	.word	0x200002cc
 80001dc:	08011c0c 	.word	0x08011c0c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9be 	b.w	800102c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	468e      	mov	lr, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	4688      	mov	r8, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d962      	bls.n	8000e10 <__udivmoddi4+0xdc>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	b14e      	cbz	r6, 8000d64 <__udivmoddi4+0x30>
 8000d50:	f1c6 0320 	rsb	r3, r6, #32
 8000d54:	fa01 f806 	lsl.w	r8, r1, r6
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	40b7      	lsls	r7, r6
 8000d5e:	ea43 0808 	orr.w	r8, r3, r8
 8000d62:	40b4      	lsls	r4, r6
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d88:	f080 80ea 	bcs.w	8000f60 <__udivmoddi4+0x22c>
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f240 80e7 	bls.w	8000f60 <__udivmoddi4+0x22c>
 8000d92:	3902      	subs	r1, #2
 8000d94:	443b      	add	r3, r7
 8000d96:	1a9a      	subs	r2, r3, r2
 8000d98:	b2a3      	uxth	r3, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000daa:	459c      	cmp	ip, r3
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0x8e>
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db4:	f080 80d6 	bcs.w	8000f64 <__udivmoddi4+0x230>
 8000db8:	459c      	cmp	ip, r3
 8000dba:	f240 80d3 	bls.w	8000f64 <__udivmoddi4+0x230>
 8000dbe:	443b      	add	r3, r7
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc6:	eba3 030c 	sub.w	r3, r3, ip
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40f3      	lsrs	r3, r6
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xb6>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb0>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x14c>
 8000df2:	4573      	cmp	r3, lr
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xc8>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 8105 	bhi.w	8001006 <__udivmoddi4+0x2d2>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	4690      	mov	r8, r2
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e5      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e0e:	e7e2      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f000 8090 	beq.w	8000f36 <__udivmoddi4+0x202>
 8000e16:	fab2 f682 	clz	r6, r2
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	f040 80a4 	bne.w	8000f68 <__udivmoddi4+0x234>
 8000e20:	1a8a      	subs	r2, r1, r2
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	b280      	uxth	r0, r0
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x11e>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e48:	d202      	bcs.n	8000e50 <__udivmoddi4+0x11c>
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	f200 80e0 	bhi.w	8001010 <__udivmoddi4+0x2dc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e60:	fb02 f404 	mul.w	r4, r2, r4
 8000e64:	429c      	cmp	r4, r3
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x144>
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x142>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f200 80ca 	bhi.w	800100a <__udivmoddi4+0x2d6>
 8000e76:	4602      	mov	r2, r0
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e90:	fa20 f306 	lsr.w	r3, r0, r6
 8000e94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	fa1f fc87 	uxth.w	ip, r7
 8000ea6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000eb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x1a0>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ec6:	f080 809c 	bcs.w	8001002 <__udivmoddi4+0x2ce>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f240 8099 	bls.w	8001002 <__udivmoddi4+0x2ce>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	eba4 040e 	sub.w	r4, r4, lr
 8000ed8:	fa1f fe83 	uxth.w	lr, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ee8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eec:	45a4      	cmp	ip, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1ce>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ef6:	f080 8082 	bcs.w	8000ffe <__udivmoddi4+0x2ca>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d97f      	bls.n	8000ffe <__udivmoddi4+0x2ca>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f06:	eba4 040c 	sub.w	r4, r4, ip
 8000f0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f0e:	4564      	cmp	r4, ip
 8000f10:	4673      	mov	r3, lr
 8000f12:	46e1      	mov	r9, ip
 8000f14:	d362      	bcc.n	8000fdc <__udivmoddi4+0x2a8>
 8000f16:	d05f      	beq.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x1fe>
 8000f1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	fa22 f301 	lsr.w	r3, r2, r1
 8000f2a:	431e      	orrs	r6, r3
 8000f2c:	40cc      	lsrs	r4, r1
 8000f2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f32:	2100      	movs	r1, #0
 8000f34:	e74f      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000f36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f3a:	0c01      	lsrs	r1, r0, #16
 8000f3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f40:	b280      	uxth	r0, r0
 8000f42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f46:	463b      	mov	r3, r7
 8000f48:	4638      	mov	r0, r7
 8000f4a:	463c      	mov	r4, r7
 8000f4c:	46b8      	mov	r8, r7
 8000f4e:	46be      	mov	lr, r7
 8000f50:	2620      	movs	r6, #32
 8000f52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f56:	eba2 0208 	sub.w	r2, r2, r8
 8000f5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f5e:	e766      	b.n	8000e2e <__udivmoddi4+0xfa>
 8000f60:	4601      	mov	r1, r0
 8000f62:	e718      	b.n	8000d96 <__udivmoddi4+0x62>
 8000f64:	4610      	mov	r0, r2
 8000f66:	e72c      	b.n	8000dc2 <__udivmoddi4+0x8e>
 8000f68:	f1c6 0220 	rsb	r2, r6, #32
 8000f6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f70:	40b7      	lsls	r7, r6
 8000f72:	40b1      	lsls	r1, r6
 8000f74:	fa20 f202 	lsr.w	r2, r0, r2
 8000f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f82:	b2bc      	uxth	r4, r7
 8000f84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8e:	fb08 f904 	mul.w	r9, r8, r4
 8000f92:	40b0      	lsls	r0, r6
 8000f94:	4589      	cmp	r9, r1
 8000f96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	d93e      	bls.n	800101c <__udivmoddi4+0x2e8>
 8000f9e:	1879      	adds	r1, r7, r1
 8000fa0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fa4:	d201      	bcs.n	8000faa <__udivmoddi4+0x276>
 8000fa6:	4589      	cmp	r9, r1
 8000fa8:	d81f      	bhi.n	8000fea <__udivmoddi4+0x2b6>
 8000faa:	eba1 0109 	sub.w	r1, r1, r9
 8000fae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb2:	fb09 f804 	mul.w	r8, r9, r4
 8000fb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d229      	bcs.n	8001018 <__udivmoddi4+0x2e4>
 8000fc4:	18ba      	adds	r2, r7, r2
 8000fc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fca:	d2c4      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fcc:	4542      	cmp	r2, r8
 8000fce:	d2c2      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd4:	443a      	add	r2, r7
 8000fd6:	e7be      	b.n	8000f56 <__udivmoddi4+0x222>
 8000fd8:	45f0      	cmp	r8, lr
 8000fda:	d29d      	bcs.n	8000f18 <__udivmoddi4+0x1e4>
 8000fdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fe0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	46e1      	mov	r9, ip
 8000fe8:	e796      	b.n	8000f18 <__udivmoddi4+0x1e4>
 8000fea:	eba7 0909 	sub.w	r9, r7, r9
 8000fee:	4449      	add	r1, r9
 8000ff0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	e7db      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000ffe:	4673      	mov	r3, lr
 8001000:	e77f      	b.n	8000f02 <__udivmoddi4+0x1ce>
 8001002:	4650      	mov	r0, sl
 8001004:	e766      	b.n	8000ed4 <__udivmoddi4+0x1a0>
 8001006:	4608      	mov	r0, r1
 8001008:	e6fd      	b.n	8000e06 <__udivmoddi4+0xd2>
 800100a:	443b      	add	r3, r7
 800100c:	3a02      	subs	r2, #2
 800100e:	e733      	b.n	8000e78 <__udivmoddi4+0x144>
 8001010:	f1ac 0c02 	sub.w	ip, ip, #2
 8001014:	443b      	add	r3, r7
 8001016:	e71c      	b.n	8000e52 <__udivmoddi4+0x11e>
 8001018:	4649      	mov	r1, r9
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x222>
 800101c:	eba1 0109 	sub.w	r1, r1, r9
 8001020:	46c4      	mov	ip, r8
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fb09 f804 	mul.w	r8, r9, r4
 800102a:	e7c4      	b.n	8000fb6 <__udivmoddi4+0x282>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <adc_read>:

float extra2Gain = 1.0f;
float extra2Offset = 0.0f;
AdcData_t adcDataSent;

void adc_read(void) {
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
    // Start ADC conversion using DMA
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_raw_readings, 4);
 8001034:	2204      	movs	r2, #4
 8001036:	492e      	ldr	r1, [pc, #184]	@ (80010f0 <adc_read+0xc0>)
 8001038:	482e      	ldr	r0, [pc, #184]	@ (80010f4 <adc_read+0xc4>)
 800103a:	f003 ff13 	bl	8004e64 <HAL_ADC_Start_DMA>

    // Create a struct to hold the processed ADC data
    adcDataSent.windDirection = ((float)adc_raw_readings[0] * windDirectionGain) - windDirectionOffset;
 800103e:	4b2c      	ldr	r3, [pc, #176]	@ (80010f0 <adc_read+0xc0>)
 8001040:	881b      	ldrh	r3, [r3, #0]
 8001042:	b29b      	uxth	r3, r3
 8001044:	ee07 3a90 	vmov	s15, r3
 8001048:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800104c:	4b2a      	ldr	r3, [pc, #168]	@ (80010f8 <adc_read+0xc8>)
 800104e:	edd3 7a00 	vldr	s15, [r3]
 8001052:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001056:	4b29      	ldr	r3, [pc, #164]	@ (80010fc <adc_read+0xcc>)
 8001058:	edd3 7a00 	vldr	s15, [r3]
 800105c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001060:	4b27      	ldr	r3, [pc, #156]	@ (8001100 <adc_read+0xd0>)
 8001062:	edc3 7a00 	vstr	s15, [r3]
    adcDataSent.batteryVoltage = ((float)adc_raw_readings[1] * batteryVoltageGain) - batteryVoltageOffset;
 8001066:	4b22      	ldr	r3, [pc, #136]	@ (80010f0 <adc_read+0xc0>)
 8001068:	885b      	ldrh	r3, [r3, #2]
 800106a:	b29b      	uxth	r3, r3
 800106c:	ee07 3a90 	vmov	s15, r3
 8001070:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001074:	4b23      	ldr	r3, [pc, #140]	@ (8001104 <adc_read+0xd4>)
 8001076:	edd3 7a00 	vldr	s15, [r3]
 800107a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800107e:	4b22      	ldr	r3, [pc, #136]	@ (8001108 <adc_read+0xd8>)
 8001080:	edd3 7a00 	vldr	s15, [r3]
 8001084:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001088:	4b1d      	ldr	r3, [pc, #116]	@ (8001100 <adc_read+0xd0>)
 800108a:	edc3 7a01 	vstr	s15, [r3, #4]
    adcDataSent.extra1 = ((float)adc_raw_readings[2] * extra1Gain) - extra1Offset;
 800108e:	4b18      	ldr	r3, [pc, #96]	@ (80010f0 <adc_read+0xc0>)
 8001090:	889b      	ldrh	r3, [r3, #4]
 8001092:	b29b      	uxth	r3, r3
 8001094:	ee07 3a90 	vmov	s15, r3
 8001098:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800109c:	4b1b      	ldr	r3, [pc, #108]	@ (800110c <adc_read+0xdc>)
 800109e:	edd3 7a00 	vldr	s15, [r3]
 80010a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001110 <adc_read+0xe0>)
 80010a8:	edd3 7a00 	vldr	s15, [r3]
 80010ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010b0:	4b13      	ldr	r3, [pc, #76]	@ (8001100 <adc_read+0xd0>)
 80010b2:	edc3 7a02 	vstr	s15, [r3, #8]
    adcDataSent.extra2 = ((float)adc_raw_readings[3] * extra2Gain) - extra2Offset;
 80010b6:	4b0e      	ldr	r3, [pc, #56]	@ (80010f0 <adc_read+0xc0>)
 80010b8:	88db      	ldrh	r3, [r3, #6]
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	ee07 3a90 	vmov	s15, r3
 80010c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010c4:	4b13      	ldr	r3, [pc, #76]	@ (8001114 <adc_read+0xe4>)
 80010c6:	edd3 7a00 	vldr	s15, [r3]
 80010ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010ce:	4b12      	ldr	r3, [pc, #72]	@ (8001118 <adc_read+0xe8>)
 80010d0:	edd3 7a00 	vldr	s15, [r3]
 80010d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010d8:	4b09      	ldr	r3, [pc, #36]	@ (8001100 <adc_read+0xd0>)
 80010da:	edc3 7a03 	vstr	s15, [r3, #12]

    // Send the struct to the ADC queue, overwriting previous value if full
    osMessageQueuePut(adcQueueHandle, &adcDataSent, 0, 0);
 80010de:	4b0f      	ldr	r3, [pc, #60]	@ (800111c <adc_read+0xec>)
 80010e0:	6818      	ldr	r0, [r3, #0]
 80010e2:	2300      	movs	r3, #0
 80010e4:	2200      	movs	r2, #0
 80010e6:	4906      	ldr	r1, [pc, #24]	@ (8001100 <adc_read+0xd0>)
 80010e8:	f009 f934 	bl	800a354 <osMessageQueuePut>
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	200002e4 	.word	0x200002e4
 80010f4:	2000044c 	.word	0x2000044c
 80010f8:	20000000 	.word	0x20000000
 80010fc:	200002ec 	.word	0x200002ec
 8001100:	200002fc 	.word	0x200002fc
 8001104:	20000004 	.word	0x20000004
 8001108:	200002f0 	.word	0x200002f0
 800110c:	20000008 	.word	0x20000008
 8001110:	200002f4 	.word	0x200002f4
 8001114:	2000000c 	.word	0x2000000c
 8001118:	200002f8 	.word	0x200002f8
 800111c:	20000520 	.word	0x20000520

08001120 <map_float>:
static float get_radio_ch2(void);
static float get_radio_ch3(void);
static float get_radio_ch4(void);

/* Simple linear mapping helper function */
static float map_float(float x, float in_min, float in_max, float out_min, float out_max) {
 8001120:	b480      	push	{r7}
 8001122:	b087      	sub	sp, #28
 8001124:	af00      	add	r7, sp, #0
 8001126:	ed87 0a05 	vstr	s0, [r7, #20]
 800112a:	edc7 0a04 	vstr	s1, [r7, #16]
 800112e:	ed87 1a03 	vstr	s2, [r7, #12]
 8001132:	edc7 1a02 	vstr	s3, [r7, #8]
 8001136:	ed87 2a01 	vstr	s4, [r7, #4]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800113a:	ed97 7a05 	vldr	s14, [r7, #20]
 800113e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001142:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001146:	edd7 6a01 	vldr	s13, [r7, #4]
 800114a:	edd7 7a02 	vldr	s15, [r7, #8]
 800114e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001152:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001156:	ed97 7a03 	vldr	s14, [r7, #12]
 800115a:	edd7 7a04 	vldr	s15, [r7, #16]
 800115e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001166:	edd7 7a02 	vldr	s15, [r7, #8]
 800116a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800116e:	eeb0 0a67 	vmov.f32	s0, s15
 8001172:	371c      	adds	r7, #28
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <map_radio_to_mech_rudder>:

/*
 * New mapping functions: convert normalized radio value (0.0 to 1.0) to a mechanical angle.
 * This lets you define the full range of motion in mechanical degrees.
 */
static float map_radio_to_mech_rudder(float radio_val) {
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	ed87 0a01 	vstr	s0, [r7, #4]
    return ((radio_val * (RUDDER_MECH_MAX - RUDDER_MECH_MIN)) + RUDDER_MECH_MIN);
 8001186:	edd7 7a01 	vldr	s15, [r7, #4]
 800118a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80011a8 <map_radio_to_mech_rudder+0x2c>
 800118e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001192:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001196:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800119a:	eeb0 0a67 	vmov.f32	s0, s15
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	43200000 	.word	0x43200000

080011ac <map_radio_to_mech_trim>:

static float map_radio_to_mech_trim(float radio_val) {
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	ed87 0a01 	vstr	s0, [r7, #4]
    return ((radio_val * (TRIM_MECH_MAX - TRIM_MECH_MIN)) + TRIM_MECH_MIN);
 80011b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80011ba:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80011d8 <map_radio_to_mech_trim+0x2c>
 80011be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011c2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80011c6:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 80011ca:	eeb0 0a67 	vmov.f32	s0, s15
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	43200000 	.word	0x43200000

080011dc <map_radio_to_mech_twist>:

static float map_radio_to_mech_twist(float radio_val) {
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	ed87 0a01 	vstr	s0, [r7, #4]
    return ((radio_val * (TWIST_MECH_MAX - TWIST_MECH_MIN)) + TWIST_MECH_MIN);
 80011e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80011ea:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001208 <map_radio_to_mech_twist+0x2c>
 80011ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011f2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80011f6:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 80011fa:	eeb0 0a67 	vmov.f32	s0, s15
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	43200000 	.word	0x43200000

0800120c <map_radio_to_mech_extra>:

static float map_radio_to_mech_extra(float radio_val) {
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	ed87 0a01 	vstr	s0, [r7, #4]
    return ((radio_val * (EXTRA_MECH_MAX - EXTRA_MECH_MIN)) + EXTRA_MECH_MIN);
 8001216:	edd7 7a01 	vldr	s15, [r7, #4]
 800121a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001238 <map_radio_to_mech_extra+0x2c>
 800121e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001222:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001226:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800122a:	eeb0 0a67 	vmov.f32	s0, s15
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	43200000 	.word	0x43200000

0800123c <mech_to_servo_rudder>:
/*
 * Conversion functions: convert a mechanical angle to a servo angle.
 * You can tweak these functions (or even make them non-linear) so that each control
 * surface can have its own mapping from mechanical to servo “angle.”
 */
static float mech_to_servo_rudder(float mech_angle) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	ed87 0a01 	vstr	s0, [r7, #4]
    return map_float(mech_angle, RUDDER_MECH_MIN, RUDDER_MECH_MAX, RUDDER_SERVO_MIN_ANGLE, RUDDER_SERVO_MAX_ANGLE);
 8001246:	ed9f 2a09 	vldr	s4, [pc, #36]	@ 800126c <mech_to_servo_rudder+0x30>
 800124a:	eef2 1a04 	vmov.f32	s3, #36	@ 0x41200000  10.0
 800124e:	ed9f 1a07 	vldr	s2, [pc, #28]	@ 800126c <mech_to_servo_rudder+0x30>
 8001252:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8001256:	ed97 0a01 	vldr	s0, [r7, #4]
 800125a:	f7ff ff61 	bl	8001120 <map_float>
 800125e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001262:	eeb0 0a67 	vmov.f32	s0, s15
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	432a0000 	.word	0x432a0000

08001270 <mech_to_servo_trim>:

static float mech_to_servo_trim(float mech_angle) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	ed87 0a01 	vstr	s0, [r7, #4]
    return map_float(mech_angle, TRIM_MECH_MIN, TRIM_MECH_MAX, TRIM_SERVO_MIN_ANGLE, TRIM_SERVO_MAX_ANGLE);
 800127a:	ed9f 2a09 	vldr	s4, [pc, #36]	@ 80012a0 <mech_to_servo_trim+0x30>
 800127e:	eef2 1a04 	vmov.f32	s3, #36	@ 0x41200000  10.0
 8001282:	ed9f 1a07 	vldr	s2, [pc, #28]	@ 80012a0 <mech_to_servo_trim+0x30>
 8001286:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 800128a:	ed97 0a01 	vldr	s0, [r7, #4]
 800128e:	f7ff ff47 	bl	8001120 <map_float>
 8001292:	eef0 7a40 	vmov.f32	s15, s0
}
 8001296:	eeb0 0a67 	vmov.f32	s0, s15
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	432a0000 	.word	0x432a0000

080012a4 <mech_to_servo_twist>:

static float mech_to_servo_twist(float mech_angle) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	ed87 0a01 	vstr	s0, [r7, #4]
    return map_float(mech_angle, TWIST_MECH_MIN, TWIST_MECH_MAX, TWIST_SERVO_MIN_ANGLE, TWIST_SERVO_MAX_ANGLE);
 80012ae:	ed9f 2a09 	vldr	s4, [pc, #36]	@ 80012d4 <mech_to_servo_twist+0x30>
 80012b2:	eef2 1a04 	vmov.f32	s3, #36	@ 0x41200000  10.0
 80012b6:	ed9f 1a07 	vldr	s2, [pc, #28]	@ 80012d4 <mech_to_servo_twist+0x30>
 80012ba:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 80012be:	ed97 0a01 	vldr	s0, [r7, #4]
 80012c2:	f7ff ff2d 	bl	8001120 <map_float>
 80012c6:	eef0 7a40 	vmov.f32	s15, s0
}
 80012ca:	eeb0 0a67 	vmov.f32	s0, s15
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	432a0000 	.word	0x432a0000

080012d8 <mech_to_servo_extra>:

static float mech_to_servo_extra(float mech_angle) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	ed87 0a01 	vstr	s0, [r7, #4]
    return map_float(mech_angle, EXTRA_MECH_MIN, EXTRA_MECH_MAX, EXTRA_SERVO_MIN_ANGLE, EXTRA_SERVO_MAX_ANGLE);
 80012e2:	ed9f 2a09 	vldr	s4, [pc, #36]	@ 8001308 <mech_to_servo_extra+0x30>
 80012e6:	eef2 1a04 	vmov.f32	s3, #36	@ 0x41200000  10.0
 80012ea:	ed9f 1a07 	vldr	s2, [pc, #28]	@ 8001308 <mech_to_servo_extra+0x30>
 80012ee:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 80012f2:	ed97 0a01 	vldr	s0, [r7, #4]
 80012f6:	f7ff ff13 	bl	8001120 <map_float>
 80012fa:	eef0 7a40 	vmov.f32	s15, s0
}
 80012fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	432a0000 	.word	0x432a0000

0800130c <servo_angle_to_pulse>:

/*
 * Common helper: convert a servo angle to a pulse value.
 * The conversion uses the defined pulse range and timer parameters.
 */
static uint32_t servo_angle_to_pulse(float servo_angle, float servo_min_angle, float servo_max_angle) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	ed87 0a03 	vstr	s0, [r7, #12]
 8001316:	edc7 0a02 	vstr	s1, [r7, #8]
 800131a:	ed87 1a01 	vstr	s2, [r7, #4]
    float pulse_ms = map_float(servo_angle, servo_min_angle, servo_max_angle, SERVO_PULSE_MIN_MS, SERVO_PULSE_MAX_MS);
 800131e:	ed9f 2a12 	vldr	s4, [pc, #72]	@ 8001368 <servo_angle_to_pulse+0x5c>
 8001322:	eddf 1a12 	vldr	s3, [pc, #72]	@ 800136c <servo_angle_to_pulse+0x60>
 8001326:	ed97 1a01 	vldr	s2, [r7, #4]
 800132a:	edd7 0a02 	vldr	s1, [r7, #8]
 800132e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001332:	f7ff fef5 	bl	8001120 <map_float>
 8001336:	ed87 0a05 	vstr	s0, [r7, #20]
    float compare_val = pulse_ms * TIMER_PERIOD / TIMER_FREQ;
 800133a:	edd7 7a05 	vldr	s15, [r7, #20]
 800133e:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8001370 <servo_angle_to_pulse+0x64>
 8001342:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001346:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 800134a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800134e:	edc7 7a04 	vstr	s15, [r7, #16]
    return (uint32_t) compare_val;
 8001352:	edd7 7a04 	vldr	s15, [r7, #16]
 8001356:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800135a:	ee17 3a90 	vmov	r3, s15
}
 800135e:	4618      	mov	r0, r3
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	4019999a 	.word	0x4019999a
 800136c:	3f19999a 	.word	0x3f19999a
 8001370:	476a5f00 	.word	0x476a5f00

08001374 <set_rudder>:

/*------------------------------------------------*/
/* Servo Command Wrappers for Automatic Control   */
/* (Each function now accepts a mechanical angle.)  */
/*------------------------------------------------*/
static void set_rudder(float mech_angle) {
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	ed87 0a01 	vstr	s0, [r7, #4]
    float servo_angle = mech_to_servo_rudder(mech_angle);
 800137e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001382:	f7ff ff5b 	bl	800123c <mech_to_servo_rudder>
 8001386:	ed87 0a03 	vstr	s0, [r7, #12]
    uint32_t pulse = servo_angle_to_pulse(servo_angle, RUDDER_SERVO_MIN_ANGLE, RUDDER_SERVO_MAX_ANGLE);
 800138a:	ed9f 1a08 	vldr	s2, [pc, #32]	@ 80013ac <set_rudder+0x38>
 800138e:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8001392:	ed97 0a03 	vldr	s0, [r7, #12]
 8001396:	f7ff ffb9 	bl	800130c <servo_angle_to_pulse>
 800139a:	60b8      	str	r0, [r7, #8]
    __HAL_TIM_SET_COMPARE(&htim4, RUDDER_CHANNEL, pulse);
 800139c:	4b04      	ldr	r3, [pc, #16]	@ (80013b0 <set_rudder+0x3c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	68ba      	ldr	r2, [r7, #8]
 80013a2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80013a4:	bf00      	nop
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	432a0000 	.word	0x432a0000
 80013b0:	2000062c 	.word	0x2000062c

080013b4 <set_trim>:

static void set_trim(float mech_angle) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	ed87 0a01 	vstr	s0, [r7, #4]
    float servo_angle = mech_to_servo_trim(mech_angle);
 80013be:	ed97 0a01 	vldr	s0, [r7, #4]
 80013c2:	f7ff ff55 	bl	8001270 <mech_to_servo_trim>
 80013c6:	ed87 0a03 	vstr	s0, [r7, #12]
    uint32_t pulse = servo_angle_to_pulse(servo_angle, TRIM_SERVO_MIN_ANGLE, TRIM_SERVO_MAX_ANGLE);
 80013ca:	ed9f 1a08 	vldr	s2, [pc, #32]	@ 80013ec <set_trim+0x38>
 80013ce:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 80013d2:	ed97 0a03 	vldr	s0, [r7, #12]
 80013d6:	f7ff ff99 	bl	800130c <servo_angle_to_pulse>
 80013da:	60b8      	str	r0, [r7, #8]
    __HAL_TIM_SET_COMPARE(&htim4, TRIM_CHANNEL, pulse);
 80013dc:	4b04      	ldr	r3, [pc, #16]	@ (80013f0 <set_trim+0x3c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	68ba      	ldr	r2, [r7, #8]
 80013e2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80013e4:	bf00      	nop
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	432a0000 	.word	0x432a0000
 80013f0:	2000062c 	.word	0x2000062c

080013f4 <set_twist>:

static void set_twist(float mech_angle) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	ed87 0a01 	vstr	s0, [r7, #4]
    float servo_angle = mech_to_servo_twist(mech_angle);
 80013fe:	ed97 0a01 	vldr	s0, [r7, #4]
 8001402:	f7ff ff4f 	bl	80012a4 <mech_to_servo_twist>
 8001406:	ed87 0a03 	vstr	s0, [r7, #12]
    uint32_t pulse = servo_angle_to_pulse(servo_angle, TWIST_SERVO_MIN_ANGLE, TWIST_SERVO_MAX_ANGLE);
 800140a:	ed9f 1a08 	vldr	s2, [pc, #32]	@ 800142c <set_twist+0x38>
 800140e:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8001412:	ed97 0a03 	vldr	s0, [r7, #12]
 8001416:	f7ff ff79 	bl	800130c <servo_angle_to_pulse>
 800141a:	60b8      	str	r0, [r7, #8]
    __HAL_TIM_SET_COMPARE(&htim4, TWIST_CHANNEL, pulse);
 800141c:	4b04      	ldr	r3, [pc, #16]	@ (8001430 <set_twist+0x3c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	68ba      	ldr	r2, [r7, #8]
 8001422:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001424:	bf00      	nop
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	432a0000 	.word	0x432a0000
 8001430:	2000062c 	.word	0x2000062c

08001434 <set_extra>:

static void set_extra(float mech_angle) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	ed87 0a01 	vstr	s0, [r7, #4]
    float servo_angle = mech_to_servo_extra(mech_angle);
 800143e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001442:	f7ff ff49 	bl	80012d8 <mech_to_servo_extra>
 8001446:	ed87 0a03 	vstr	s0, [r7, #12]
    uint32_t pulse = servo_angle_to_pulse(servo_angle, EXTRA_SERVO_MIN_ANGLE, EXTRA_SERVO_MAX_ANGLE);
 800144a:	ed9f 1a08 	vldr	s2, [pc, #32]	@ 800146c <set_extra+0x38>
 800144e:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8001452:	ed97 0a03 	vldr	s0, [r7, #12]
 8001456:	f7ff ff59 	bl	800130c <servo_angle_to_pulse>
 800145a:	60b8      	str	r0, [r7, #8]
    __HAL_TIM_SET_COMPARE(&htim4, EXTRA_CHANNEL, pulse);
 800145c:	4b04      	ldr	r3, [pc, #16]	@ (8001470 <set_extra+0x3c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	68ba      	ldr	r2, [r7, #8]
 8001462:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001464:	bf00      	nop
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	432a0000 	.word	0x432a0000
 8001470:	2000062c 	.word	0x2000062c

08001474 <roll_control>:
float Ts = 0.01F;   // Sampling time in seconds



// Simple PI controller with anti-windup
float roll_control(void) {
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
    // Desired roll angle (setpoint)
    const float desired_roll_angle = 0.0F;
 800147a:	f04f 0300 	mov.w	r3, #0
 800147e:	60bb      	str	r3, [r7, #8]

    // Calculate error between desired and current roll
    float roll_error = desired_roll_angle - imu.roll;
 8001480:	4b2d      	ldr	r3, [pc, #180]	@ (8001538 <roll_control+0xc4>)
 8001482:	edd3 7a00 	vldr	s15, [r3]
 8001486:	ed97 7a02 	vldr	s14, [r7, #8]
 800148a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800148e:	edc7 7a01 	vstr	s15, [r7, #4]

    // Static integrator state persists between calls
    static float integrator_state = 0.0F;

    // Compute unsaturated twist output using current error and integrator
    float unsaturated_twist = Kp * roll_error + integrator_state;
 8001492:	4b2a      	ldr	r3, [pc, #168]	@ (800153c <roll_control+0xc8>)
 8001494:	ed93 7a00 	vldr	s14, [r3]
 8001498:	edd7 7a01 	vldr	s15, [r7, #4]
 800149c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014a0:	4b27      	ldr	r3, [pc, #156]	@ (8001540 <roll_control+0xcc>)
 80014a2:	edd3 7a00 	vldr	s15, [r3]
 80014a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014aa:	edc7 7a00 	vstr	s15, [r7]

    // Apply saturation limits to prevent excessive twist
    float twist_output = unsaturated_twist;
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	60fb      	str	r3, [r7, #12]
    if (unsaturated_twist > TWIST_MECH_MAX) {
 80014b2:	edd7 7a00 	vldr	s15, [r7]
 80014b6:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001544 <roll_control+0xd0>
 80014ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c2:	dd02      	ble.n	80014ca <roll_control+0x56>
        twist_output = TWIST_MECH_MAX;
 80014c4:	4b20      	ldr	r3, [pc, #128]	@ (8001548 <roll_control+0xd4>)
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	e00a      	b.n	80014e0 <roll_control+0x6c>
    } else if (unsaturated_twist < TWIST_MECH_MIN) {
 80014ca:	edd7 7a00 	vldr	s15, [r7]
 80014ce:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80014d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014da:	d501      	bpl.n	80014e0 <roll_control+0x6c>
        twist_output = TWIST_MECH_MIN;
 80014dc:	4b1b      	ldr	r3, [pc, #108]	@ (800154c <roll_control+0xd8>)
 80014de:	60fb      	str	r3, [r7, #12]
    }

    // Anti-windup integration update using Euler integration:
    // New integrator state = old state + Ki*Ts*(error + (sat - unsat)*Kaw)
    integrator_state += Ki * Ts * (roll_error + (twist_output - unsaturated_twist) * Kaw);
 80014e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001550 <roll_control+0xdc>)
 80014e2:	ed93 7a00 	vldr	s14, [r3]
 80014e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001554 <roll_control+0xe0>)
 80014e8:	edd3 7a00 	vldr	s15, [r3]
 80014ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014f0:	edd7 6a03 	vldr	s13, [r7, #12]
 80014f4:	edd7 7a00 	vldr	s15, [r7]
 80014f8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80014fc:	4b16      	ldr	r3, [pc, #88]	@ (8001558 <roll_control+0xe4>)
 80014fe:	edd3 7a00 	vldr	s15, [r3]
 8001502:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001506:	edd7 7a01 	vldr	s15, [r7, #4]
 800150a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800150e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001512:	4b0b      	ldr	r3, [pc, #44]	@ (8001540 <roll_control+0xcc>)
 8001514:	edd3 7a00 	vldr	s15, [r3]
 8001518:	ee77 7a27 	vadd.f32	s15, s14, s15
 800151c:	4b08      	ldr	r3, [pc, #32]	@ (8001540 <roll_control+0xcc>)
 800151e:	edc3 7a00 	vstr	s15, [r3]

    // Return the saturated twist angle output
    return twist_output;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	ee07 3a90 	vmov	s15, r3
}
 8001528:	eeb0 0a67 	vmov.f32	s0, s15
 800152c:	3714      	adds	r7, #20
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	2000030c 	.word	0x2000030c
 800153c:	20000010 	.word	0x20000010
 8001540:	20000348 	.word	0x20000348
 8001544:	432a0000 	.word	0x432a0000
 8001548:	432a0000 	.word	0x432a0000
 800154c:	41200000 	.word	0x41200000
 8001550:	20000014 	.word	0x20000014
 8001554:	2000001c 	.word	0x2000001c
 8001558:	20000018 	.word	0x20000018

0800155c <handleDirectInputMode>:

/*------------------------------------------------*/
/* Direct Input Mode: Map radio directly to mechanical angles */
/* and then command each servo via the conversion chain         */
/*------------------------------------------------*/
static void handleDirectInputMode(void) {
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
    float rudder_mech = map_radio_to_mech_rudder(get_radio_ch1());
 8001562:	f000 f923 	bl	80017ac <get_radio_ch1>
 8001566:	eef0 7a40 	vmov.f32	s15, s0
 800156a:	eeb0 0a67 	vmov.f32	s0, s15
 800156e:	f7ff fe05 	bl	800117c <map_radio_to_mech_rudder>
 8001572:	ed87 0a03 	vstr	s0, [r7, #12]
    float trim_mech   = map_radio_to_mech_trim(get_radio_ch2());
 8001576:	f000 f949 	bl	800180c <get_radio_ch2>
 800157a:	eef0 7a40 	vmov.f32	s15, s0
 800157e:	eeb0 0a67 	vmov.f32	s0, s15
 8001582:	f7ff fe13 	bl	80011ac <map_radio_to_mech_trim>
 8001586:	ed87 0a02 	vstr	s0, [r7, #8]
    float twist_mech  = map_radio_to_mech_twist(get_radio_ch3());
 800158a:	f000 f96f 	bl	800186c <get_radio_ch3>
 800158e:	eef0 7a40 	vmov.f32	s15, s0
 8001592:	eeb0 0a67 	vmov.f32	s0, s15
 8001596:	f7ff fe21 	bl	80011dc <map_radio_to_mech_twist>
 800159a:	ed87 0a01 	vstr	s0, [r7, #4]
    float extra_mech  = map_radio_to_mech_extra(get_radio_ch4());
 800159e:	f000 f995 	bl	80018cc <get_radio_ch4>
 80015a2:	eef0 7a40 	vmov.f32	s15, s0
 80015a6:	eeb0 0a67 	vmov.f32	s0, s15
 80015aa:	f7ff fe2f 	bl	800120c <map_radio_to_mech_extra>
 80015ae:	ed87 0a00 	vstr	s0, [r7]

    set_rudder(rudder_mech);
 80015b2:	ed97 0a03 	vldr	s0, [r7, #12]
 80015b6:	f7ff fedd 	bl	8001374 <set_rudder>
    set_trim(trim_mech);
 80015ba:	ed97 0a02 	vldr	s0, [r7, #8]
 80015be:	f7ff fef9 	bl	80013b4 <set_trim>
    set_twist(twist_mech);
 80015c2:	ed97 0a01 	vldr	s0, [r7, #4]
 80015c6:	f7ff ff15 	bl	80013f4 <set_twist>
    set_extra(extra_mech);
 80015ca:	ed97 0a00 	vldr	s0, [r7]
 80015ce:	f7ff ff31 	bl	8001434 <set_extra>
}
 80015d2:	bf00      	nop
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <autoControlMode1>:


static void autoControlMode1(void) {
 80015da:	b580      	push	{r7, lr}
 80015dc:	ed2d 8b02 	vpush	{d8}
 80015e0:	b084      	sub	sp, #16
 80015e2:	af00      	add	r7, sp, #0

    /*
     * For the rudder, we average radio channels 2 and 4 (each normalized from calibration)
     * then map that percentage to a mechanical angle.
     */
    rudder_mech = map_radio_to_mech_rudder((get_radio_ch2() + get_radio_ch4()) * 0.5F);
 80015e4:	f000 f912 	bl	800180c <get_radio_ch2>
 80015e8:	eeb0 8a40 	vmov.f32	s16, s0
 80015ec:	f000 f96e 	bl	80018cc <get_radio_ch4>
 80015f0:	eef0 7a40 	vmov.f32	s15, s0
 80015f4:	ee78 7a27 	vadd.f32	s15, s16, s15
 80015f8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80015fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001600:	eeb0 0a67 	vmov.f32	s0, s15
 8001604:	f7ff fdba 	bl	800117c <map_radio_to_mech_rudder>
 8001608:	ed87 0a03 	vstr	s0, [r7, #12]
    set_rudder(rudder_mech);
 800160c:	ed97 0a03 	vldr	s0, [r7, #12]
 8001610:	f7ff feb0 	bl	8001374 <set_rudder>

    twist_mech = roll_control();
 8001614:	f7ff ff2e 	bl	8001474 <roll_control>
 8001618:	ed87 0a02 	vstr	s0, [r7, #8]
    set_twist(twist_mech);
 800161c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001620:	f7ff fee8 	bl	80013f4 <set_twist>

    /* For trim, directly map radio channel 1 to mechanical angle */
    trim_mech = map_radio_to_mech_trim(get_radio_ch1());
 8001624:	f000 f8c2 	bl	80017ac <get_radio_ch1>
 8001628:	eef0 7a40 	vmov.f32	s15, s0
 800162c:	eeb0 0a67 	vmov.f32	s0, s15
 8001630:	f7ff fdbc 	bl	80011ac <map_radio_to_mech_trim>
 8001634:	ed87 0a01 	vstr	s0, [r7, #4]
    set_trim(trim_mech);
 8001638:	ed97 0a01 	vldr	s0, [r7, #4]
 800163c:	f7ff feba 	bl	80013b4 <set_trim>
}
 8001640:	bf00      	nop
 8001642:	3710      	adds	r7, #16
 8001644:	46bd      	mov	sp, r7
 8001646:	ecbd 8b02 	vpop	{d8}
 800164a:	bd80      	pop	{r7, pc}

0800164c <autoControlMode2>:

/* Auto Control Mode 2 */
static void autoControlMode2(void) {
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
    // Insert alternative control strategy here
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <autoControlMode3>:

/* Auto Control Mode 3 */
static void autoControlMode3(void) {
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0
    // Insert alternative control strategy here
}
 800165e:	bf00      	nop
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <autoControlMode4>:

/* Auto Control Mode 4 */
static void autoControlMode4(void) {
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
    // Insert alternative control strategy here
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
	...

08001678 <handleAutoControlMode>:

/* Dispatcher for automatic control modes */
static void handleAutoControlMode(ControlMode_t mode) {
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	71fb      	strb	r3, [r7, #7]
    switch (mode) {
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	3b01      	subs	r3, #1
 8001688:	2b03      	cmp	r3, #3
 800168a:	d817      	bhi.n	80016bc <handleAutoControlMode+0x44>
 800168c:	a201      	add	r2, pc, #4	@ (adr r2, 8001694 <handleAutoControlMode+0x1c>)
 800168e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001692:	bf00      	nop
 8001694:	080016a5 	.word	0x080016a5
 8001698:	080016ab 	.word	0x080016ab
 800169c:	080016b1 	.word	0x080016b1
 80016a0:	080016b7 	.word	0x080016b7
        case MODE_AUTO_1:
            autoControlMode1();
 80016a4:	f7ff ff99 	bl	80015da <autoControlMode1>
            break;
 80016a8:	e009      	b.n	80016be <handleAutoControlMode+0x46>
        case MODE_AUTO_2:
            autoControlMode2();
 80016aa:	f7ff ffcf 	bl	800164c <autoControlMode2>
            break;
 80016ae:	e006      	b.n	80016be <handleAutoControlMode+0x46>
        case MODE_AUTO_3:
            autoControlMode3();
 80016b0:	f7ff ffd3 	bl	800165a <autoControlMode3>
            break;
 80016b4:	e003      	b.n	80016be <handleAutoControlMode+0x46>
        case MODE_AUTO_4:
            autoControlMode4();
 80016b6:	f7ff ffd7 	bl	8001668 <autoControlMode4>
            break;
 80016ba:	e000      	b.n	80016be <handleAutoControlMode+0x46>
        default:
            // Unknown mode: do nothing (or implement safe behavior)
            break;
 80016bc:	bf00      	nop
    }
}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop

080016c8 <control>:

/* Forward declarations for calibration and direct input routines */
static void handleCalibrationMode(void);
static void handleDirectInputMode(void);

void control(void) {
 80016c8:	b5b0      	push	{r4, r5, r7, lr}
 80016ca:	b090      	sub	sp, #64	@ 0x40
 80016cc:	af00      	add	r7, sp, #0
    TelemetryData_t receivedTelemetryData;
    RadioData_t newRadioData;
    ImuData_t newImuData;

    /* Update control mode from telemetry queue (non-blocking) */
    if (osMessageQueueGet(telemetryQueueHandle, &receivedTelemetryData, NULL, 0) == osOK) {
 80016ce:	4b31      	ldr	r3, [pc, #196]	@ (8001794 <control+0xcc>)
 80016d0:	6818      	ldr	r0, [r3, #0]
 80016d2:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80016d6:	2300      	movs	r3, #0
 80016d8:	2200      	movs	r2, #0
 80016da:	f008 fe9b 	bl	800a414 <osMessageQueueGet>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d103      	bne.n	80016ec <control+0x24>
        currentMode = receivedTelemetryData.mode;
 80016e4:	f997 203c 	ldrsb.w	r2, [r7, #60]	@ 0x3c
 80016e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001798 <control+0xd0>)
 80016ea:	701a      	strb	r2, [r3, #0]
    }

    /* Update radio data (non-blocking) */
    if (osMessageQueueGet(radioQueueHandle, &newRadioData, NULL, 0) == osOK) {
 80016ec:	4b2b      	ldr	r3, [pc, #172]	@ (800179c <control+0xd4>)
 80016ee:	6818      	ldr	r0, [r3, #0]
 80016f0:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80016f4:	2300      	movs	r3, #0
 80016f6:	2200      	movs	r2, #0
 80016f8:	f008 fe8c 	bl	800a414 <osMessageQueueGet>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d107      	bne.n	8001712 <control+0x4a>
        radioDataReceived = newRadioData;
 8001702:	4b27      	ldr	r3, [pc, #156]	@ (80017a0 <control+0xd8>)
 8001704:	461a      	mov	r2, r3
 8001706:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800170a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800170e:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    /* Update IMU data (non-blocking) */
    if (osMessageQueueGetCount(imuQueueHandle) > 0 && is_imu_initialized()) {
 8001712:	4b24      	ldr	r3, [pc, #144]	@ (80017a4 <control+0xdc>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f008 feda 	bl	800a4d0 <osMessageQueueGetCount>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d019      	beq.n	8001756 <control+0x8e>
 8001722:	f000 fa07 	bl	8001b34 <is_imu_initialized>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d014      	beq.n	8001756 <control+0x8e>
        if (osMessageQueueGet(imuQueueHandle, &newImuData, NULL, 0) == osOK) {
 800172c:	4b1d      	ldr	r3, [pc, #116]	@ (80017a4 <control+0xdc>)
 800172e:	6818      	ldr	r0, [r3, #0]
 8001730:	1d39      	adds	r1, r7, #4
 8001732:	2300      	movs	r3, #0
 8001734:	2200      	movs	r2, #0
 8001736:	f008 fe6d 	bl	800a414 <osMessageQueueGet>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d10a      	bne.n	8001756 <control+0x8e>
            imu = newImuData;
 8001740:	4b19      	ldr	r3, [pc, #100]	@ (80017a8 <control+0xe0>)
 8001742:	461d      	mov	r5, r3
 8001744:	1d3c      	adds	r4, r7, #4
 8001746:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001748:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800174a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800174c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800174e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001752:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
        }
    }

    /* Dispatch based on current control mode */
    switch (currentMode) {
 8001756:	4b10      	ldr	r3, [pc, #64]	@ (8001798 <control+0xd0>)
 8001758:	f993 3000 	ldrsb.w	r3, [r3]
 800175c:	2b04      	cmp	r3, #4
 800175e:	dc14      	bgt.n	800178a <control+0xc2>
 8001760:	2b00      	cmp	r3, #0
 8001762:	dc0b      	bgt.n	800177c <control+0xb4>
 8001764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001768:	d002      	beq.n	8001770 <control+0xa8>
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <control+0xae>
        case MODE_AUTO_4:
            handleAutoControlMode(currentMode);
            break;
        default:
            // Unknown mode: safely handle if necessary
            break;
 800176e:	e00c      	b.n	800178a <control+0xc2>
            handleCalibrationMode();
 8001770:	f000 f8dc 	bl	800192c <handleCalibrationMode>
            break;
 8001774:	e00a      	b.n	800178c <control+0xc4>
            handleDirectInputMode();
 8001776:	f7ff fef1 	bl	800155c <handleDirectInputMode>
            break;
 800177a:	e007      	b.n	800178c <control+0xc4>
            handleAutoControlMode(currentMode);
 800177c:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <control+0xd0>)
 800177e:	f993 3000 	ldrsb.w	r3, [r3]
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff ff78 	bl	8001678 <handleAutoControlMode>
            break;
 8001788:	e000      	b.n	800178c <control+0xc4>
            break;
 800178a:	bf00      	nop
    }
}
 800178c:	bf00      	nop
 800178e:	3740      	adds	r7, #64	@ 0x40
 8001790:	46bd      	mov	sp, r7
 8001792:	bdb0      	pop	{r4, r5, r7, pc}
 8001794:	2000052c 	.word	0x2000052c
 8001798:	20000344 	.word	0x20000344
 800179c:	2000051c 	.word	0x2000051c
 80017a0:	2000033c 	.word	0x2000033c
 80017a4:	20000524 	.word	0x20000524
 80017a8:	2000030c 	.word	0x2000030c

080017ac <get_radio_ch1>:
#define MIN_VALID_PULSE_US 100  // Only consider pulse widths >100 µs as valid

/*------------------------------------------------*/
/*  Radio Input Helpers (calibrated and normalized) */
/*------------------------------------------------*/
static float get_radio_ch1(void) {
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
    if (mappingBoundaries.ch1_max <= mappingBoundaries.ch1_min)
 80017b0:	4b13      	ldr	r3, [pc, #76]	@ (8001800 <get_radio_ch1+0x54>)
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	4b12      	ldr	r3, [pc, #72]	@ (8001800 <get_radio_ch1+0x54>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d802      	bhi.n	80017c2 <get_radio_ch1+0x16>
        return 0.0F;
 80017bc:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8001804 <get_radio_ch1+0x58>
 80017c0:	e015      	b.n	80017ee <get_radio_ch1+0x42>
    return (float)(radioDataReceived.ch1 - mappingBoundaries.ch1_min) /
 80017c2:	4b11      	ldr	r3, [pc, #68]	@ (8001808 <get_radio_ch1+0x5c>)
 80017c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c8:	461a      	mov	r2, r3
 80017ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001800 <get_radio_ch1+0x54>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	ee07 3a90 	vmov	s15, r3
 80017d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
           (float)(mappingBoundaries.ch1_max - mappingBoundaries.ch1_min);
 80017d8:	4b09      	ldr	r3, [pc, #36]	@ (8001800 <get_radio_ch1+0x54>)
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	4b08      	ldr	r3, [pc, #32]	@ (8001800 <get_radio_ch1+0x54>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	ee07 3a90 	vmov	s15, r3
 80017e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
    return (float)(radioDataReceived.ch1 - mappingBoundaries.ch1_min) /
 80017ea:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 80017ee:	eef0 7a66 	vmov.f32	s15, s13
 80017f2:	eeb0 0a67 	vmov.f32	s0, s15
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	20000020 	.word	0x20000020
 8001804:	00000000 	.word	0x00000000
 8001808:	2000033c 	.word	0x2000033c

0800180c <get_radio_ch2>:
static float get_radio_ch2(void) {
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
    if (mappingBoundaries.ch2_max <= mappingBoundaries.ch2_min)
 8001810:	4b13      	ldr	r3, [pc, #76]	@ (8001860 <get_radio_ch2+0x54>)
 8001812:	68da      	ldr	r2, [r3, #12]
 8001814:	4b12      	ldr	r3, [pc, #72]	@ (8001860 <get_radio_ch2+0x54>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	429a      	cmp	r2, r3
 800181a:	d802      	bhi.n	8001822 <get_radio_ch2+0x16>
        return 0.0F;
 800181c:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8001864 <get_radio_ch2+0x58>
 8001820:	e015      	b.n	800184e <get_radio_ch2+0x42>
    return (float)(radioDataReceived.ch2 - mappingBoundaries.ch2_min) /
 8001822:	4b11      	ldr	r3, [pc, #68]	@ (8001868 <get_radio_ch2+0x5c>)
 8001824:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001828:	461a      	mov	r2, r3
 800182a:	4b0d      	ldr	r3, [pc, #52]	@ (8001860 <get_radio_ch2+0x54>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	ee07 3a90 	vmov	s15, r3
 8001834:	eeb8 7a67 	vcvt.f32.u32	s14, s15
           (float)(mappingBoundaries.ch2_max - mappingBoundaries.ch2_min);
 8001838:	4b09      	ldr	r3, [pc, #36]	@ (8001860 <get_radio_ch2+0x54>)
 800183a:	68da      	ldr	r2, [r3, #12]
 800183c:	4b08      	ldr	r3, [pc, #32]	@ (8001860 <get_radio_ch2+0x54>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	ee07 3a90 	vmov	s15, r3
 8001846:	eef8 7a67 	vcvt.f32.u32	s15, s15
    return (float)(radioDataReceived.ch2 - mappingBoundaries.ch2_min) /
 800184a:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 800184e:	eef0 7a66 	vmov.f32	s15, s13
 8001852:	eeb0 0a67 	vmov.f32	s0, s15
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	20000020 	.word	0x20000020
 8001864:	00000000 	.word	0x00000000
 8001868:	2000033c 	.word	0x2000033c

0800186c <get_radio_ch3>:
static float get_radio_ch3(void) {
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
    if (mappingBoundaries.ch3_max <= mappingBoundaries.ch3_min)
 8001870:	4b13      	ldr	r3, [pc, #76]	@ (80018c0 <get_radio_ch3+0x54>)
 8001872:	695a      	ldr	r2, [r3, #20]
 8001874:	4b12      	ldr	r3, [pc, #72]	@ (80018c0 <get_radio_ch3+0x54>)
 8001876:	691b      	ldr	r3, [r3, #16]
 8001878:	429a      	cmp	r2, r3
 800187a:	d802      	bhi.n	8001882 <get_radio_ch3+0x16>
        return 0.0F;
 800187c:	eddf 6a11 	vldr	s13, [pc, #68]	@ 80018c4 <get_radio_ch3+0x58>
 8001880:	e015      	b.n	80018ae <get_radio_ch3+0x42>
    return (float)(radioDataReceived.ch3 - mappingBoundaries.ch3_min) /
 8001882:	4b11      	ldr	r3, [pc, #68]	@ (80018c8 <get_radio_ch3+0x5c>)
 8001884:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001888:	461a      	mov	r2, r3
 800188a:	4b0d      	ldr	r3, [pc, #52]	@ (80018c0 <get_radio_ch3+0x54>)
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	ee07 3a90 	vmov	s15, r3
 8001894:	eeb8 7a67 	vcvt.f32.u32	s14, s15
           (float)(mappingBoundaries.ch3_max - mappingBoundaries.ch3_min);
 8001898:	4b09      	ldr	r3, [pc, #36]	@ (80018c0 <get_radio_ch3+0x54>)
 800189a:	695a      	ldr	r2, [r3, #20]
 800189c:	4b08      	ldr	r3, [pc, #32]	@ (80018c0 <get_radio_ch3+0x54>)
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	ee07 3a90 	vmov	s15, r3
 80018a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
    return (float)(radioDataReceived.ch3 - mappingBoundaries.ch3_min) /
 80018aa:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 80018ae:	eef0 7a66 	vmov.f32	s15, s13
 80018b2:	eeb0 0a67 	vmov.f32	s0, s15
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20000020 	.word	0x20000020
 80018c4:	00000000 	.word	0x00000000
 80018c8:	2000033c 	.word	0x2000033c

080018cc <get_radio_ch4>:
static float get_radio_ch4(void) {
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
    if (mappingBoundaries.ch4_max <= mappingBoundaries.ch4_min)
 80018d0:	4b13      	ldr	r3, [pc, #76]	@ (8001920 <get_radio_ch4+0x54>)
 80018d2:	69da      	ldr	r2, [r3, #28]
 80018d4:	4b12      	ldr	r3, [pc, #72]	@ (8001920 <get_radio_ch4+0x54>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d802      	bhi.n	80018e2 <get_radio_ch4+0x16>
        return 0.0F;
 80018dc:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8001924 <get_radio_ch4+0x58>
 80018e0:	e015      	b.n	800190e <get_radio_ch4+0x42>
    return (float)(radioDataReceived.ch4 - mappingBoundaries.ch4_min) /
 80018e2:	4b11      	ldr	r3, [pc, #68]	@ (8001928 <get_radio_ch4+0x5c>)
 80018e4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80018e8:	461a      	mov	r2, r3
 80018ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001920 <get_radio_ch4+0x54>)
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	ee07 3a90 	vmov	s15, r3
 80018f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
           (float)(mappingBoundaries.ch4_max - mappingBoundaries.ch4_min);
 80018f8:	4b09      	ldr	r3, [pc, #36]	@ (8001920 <get_radio_ch4+0x54>)
 80018fa:	69da      	ldr	r2, [r3, #28]
 80018fc:	4b08      	ldr	r3, [pc, #32]	@ (8001920 <get_radio_ch4+0x54>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	ee07 3a90 	vmov	s15, r3
 8001906:	eef8 7a67 	vcvt.f32.u32	s15, s15
    return (float)(radioDataReceived.ch4 - mappingBoundaries.ch4_min) /
 800190a:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 800190e:	eef0 7a66 	vmov.f32	s15, s13
 8001912:	eeb0 0a67 	vmov.f32	s0, s15
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	20000020 	.word	0x20000020
 8001924:	00000000 	.word	0x00000000
 8001928:	2000033c 	.word	0x2000033c

0800192c <handleCalibrationMode>:

/*------------------------------------------------*/
/* Calibration Mode: Update channel boundaries    */
/*------------------------------------------------*/
static void handleCalibrationMode(void) {
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
    if (radioDataReceived.ch1 < mappingBoundaries.ch1_min && radioDataReceived.ch1 > MIN_VALID_PULSE_US)
 8001930:	4b44      	ldr	r3, [pc, #272]	@ (8001a44 <handleCalibrationMode+0x118>)
 8001932:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001936:	461a      	mov	r2, r3
 8001938:	4b43      	ldr	r3, [pc, #268]	@ (8001a48 <handleCalibrationMode+0x11c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	429a      	cmp	r2, r3
 800193e:	d20a      	bcs.n	8001956 <handleCalibrationMode+0x2a>
 8001940:	4b40      	ldr	r3, [pc, #256]	@ (8001a44 <handleCalibrationMode+0x118>)
 8001942:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001946:	2b64      	cmp	r3, #100	@ 0x64
 8001948:	dd05      	ble.n	8001956 <handleCalibrationMode+0x2a>
        mappingBoundaries.ch1_min = radioDataReceived.ch1;
 800194a:	4b3e      	ldr	r3, [pc, #248]	@ (8001a44 <handleCalibrationMode+0x118>)
 800194c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001950:	461a      	mov	r2, r3
 8001952:	4b3d      	ldr	r3, [pc, #244]	@ (8001a48 <handleCalibrationMode+0x11c>)
 8001954:	601a      	str	r2, [r3, #0]
    if (radioDataReceived.ch1 > mappingBoundaries.ch1_max)
 8001956:	4b3b      	ldr	r3, [pc, #236]	@ (8001a44 <handleCalibrationMode+0x118>)
 8001958:	f9b3 3000 	ldrsh.w	r3, [r3]
 800195c:	461a      	mov	r2, r3
 800195e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a48 <handleCalibrationMode+0x11c>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	429a      	cmp	r2, r3
 8001964:	d905      	bls.n	8001972 <handleCalibrationMode+0x46>
        mappingBoundaries.ch1_max = radioDataReceived.ch1;
 8001966:	4b37      	ldr	r3, [pc, #220]	@ (8001a44 <handleCalibrationMode+0x118>)
 8001968:	f9b3 3000 	ldrsh.w	r3, [r3]
 800196c:	461a      	mov	r2, r3
 800196e:	4b36      	ldr	r3, [pc, #216]	@ (8001a48 <handleCalibrationMode+0x11c>)
 8001970:	605a      	str	r2, [r3, #4]

    if (radioDataReceived.ch2 < mappingBoundaries.ch2_min && radioDataReceived.ch2 > MIN_VALID_PULSE_US)
 8001972:	4b34      	ldr	r3, [pc, #208]	@ (8001a44 <handleCalibrationMode+0x118>)
 8001974:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001978:	461a      	mov	r2, r3
 800197a:	4b33      	ldr	r3, [pc, #204]	@ (8001a48 <handleCalibrationMode+0x11c>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	429a      	cmp	r2, r3
 8001980:	d20a      	bcs.n	8001998 <handleCalibrationMode+0x6c>
 8001982:	4b30      	ldr	r3, [pc, #192]	@ (8001a44 <handleCalibrationMode+0x118>)
 8001984:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001988:	2b64      	cmp	r3, #100	@ 0x64
 800198a:	dd05      	ble.n	8001998 <handleCalibrationMode+0x6c>
        mappingBoundaries.ch2_min = radioDataReceived.ch2;
 800198c:	4b2d      	ldr	r3, [pc, #180]	@ (8001a44 <handleCalibrationMode+0x118>)
 800198e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001992:	461a      	mov	r2, r3
 8001994:	4b2c      	ldr	r3, [pc, #176]	@ (8001a48 <handleCalibrationMode+0x11c>)
 8001996:	609a      	str	r2, [r3, #8]
    if (radioDataReceived.ch2 > mappingBoundaries.ch2_max)
 8001998:	4b2a      	ldr	r3, [pc, #168]	@ (8001a44 <handleCalibrationMode+0x118>)
 800199a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800199e:	461a      	mov	r2, r3
 80019a0:	4b29      	ldr	r3, [pc, #164]	@ (8001a48 <handleCalibrationMode+0x11c>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d905      	bls.n	80019b4 <handleCalibrationMode+0x88>
        mappingBoundaries.ch2_max = radioDataReceived.ch2;
 80019a8:	4b26      	ldr	r3, [pc, #152]	@ (8001a44 <handleCalibrationMode+0x118>)
 80019aa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80019ae:	461a      	mov	r2, r3
 80019b0:	4b25      	ldr	r3, [pc, #148]	@ (8001a48 <handleCalibrationMode+0x11c>)
 80019b2:	60da      	str	r2, [r3, #12]

    if (radioDataReceived.ch3 < mappingBoundaries.ch3_min && radioDataReceived.ch3 > MIN_VALID_PULSE_US)
 80019b4:	4b23      	ldr	r3, [pc, #140]	@ (8001a44 <handleCalibrationMode+0x118>)
 80019b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019ba:	461a      	mov	r2, r3
 80019bc:	4b22      	ldr	r3, [pc, #136]	@ (8001a48 <handleCalibrationMode+0x11c>)
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d20a      	bcs.n	80019da <handleCalibrationMode+0xae>
 80019c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a44 <handleCalibrationMode+0x118>)
 80019c6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019ca:	2b64      	cmp	r3, #100	@ 0x64
 80019cc:	dd05      	ble.n	80019da <handleCalibrationMode+0xae>
        mappingBoundaries.ch3_min = radioDataReceived.ch3;
 80019ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001a44 <handleCalibrationMode+0x118>)
 80019d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019d4:	461a      	mov	r2, r3
 80019d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a48 <handleCalibrationMode+0x11c>)
 80019d8:	611a      	str	r2, [r3, #16]
    if (radioDataReceived.ch3 > mappingBoundaries.ch3_max)
 80019da:	4b1a      	ldr	r3, [pc, #104]	@ (8001a44 <handleCalibrationMode+0x118>)
 80019dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019e0:	461a      	mov	r2, r3
 80019e2:	4b19      	ldr	r3, [pc, #100]	@ (8001a48 <handleCalibrationMode+0x11c>)
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d905      	bls.n	80019f6 <handleCalibrationMode+0xca>
        mappingBoundaries.ch3_max = radioDataReceived.ch3;
 80019ea:	4b16      	ldr	r3, [pc, #88]	@ (8001a44 <handleCalibrationMode+0x118>)
 80019ec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019f0:	461a      	mov	r2, r3
 80019f2:	4b15      	ldr	r3, [pc, #84]	@ (8001a48 <handleCalibrationMode+0x11c>)
 80019f4:	615a      	str	r2, [r3, #20]

    if (radioDataReceived.ch4 < mappingBoundaries.ch4_min && radioDataReceived.ch4 > MIN_VALID_PULSE_US)
 80019f6:	4b13      	ldr	r3, [pc, #76]	@ (8001a44 <handleCalibrationMode+0x118>)
 80019f8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80019fc:	461a      	mov	r2, r3
 80019fe:	4b12      	ldr	r3, [pc, #72]	@ (8001a48 <handleCalibrationMode+0x11c>)
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d20a      	bcs.n	8001a1c <handleCalibrationMode+0xf0>
 8001a06:	4b0f      	ldr	r3, [pc, #60]	@ (8001a44 <handleCalibrationMode+0x118>)
 8001a08:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001a0c:	2b64      	cmp	r3, #100	@ 0x64
 8001a0e:	dd05      	ble.n	8001a1c <handleCalibrationMode+0xf0>
        mappingBoundaries.ch4_min = radioDataReceived.ch4;
 8001a10:	4b0c      	ldr	r3, [pc, #48]	@ (8001a44 <handleCalibrationMode+0x118>)
 8001a12:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001a16:	461a      	mov	r2, r3
 8001a18:	4b0b      	ldr	r3, [pc, #44]	@ (8001a48 <handleCalibrationMode+0x11c>)
 8001a1a:	619a      	str	r2, [r3, #24]
    if (radioDataReceived.ch4 > mappingBoundaries.ch4_max)
 8001a1c:	4b09      	ldr	r3, [pc, #36]	@ (8001a44 <handleCalibrationMode+0x118>)
 8001a1e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001a22:	461a      	mov	r2, r3
 8001a24:	4b08      	ldr	r3, [pc, #32]	@ (8001a48 <handleCalibrationMode+0x11c>)
 8001a26:	69db      	ldr	r3, [r3, #28]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d905      	bls.n	8001a38 <handleCalibrationMode+0x10c>
        mappingBoundaries.ch4_max = radioDataReceived.ch4;
 8001a2c:	4b05      	ldr	r3, [pc, #20]	@ (8001a44 <handleCalibrationMode+0x118>)
 8001a2e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001a32:	461a      	mov	r2, r3
 8001a34:	4b04      	ldr	r3, [pc, #16]	@ (8001a48 <handleCalibrationMode+0x11c>)
 8001a36:	61da      	str	r2, [r3, #28]
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	2000033c 	.word	0x2000033c
 8001a48:	20000020 	.word	0x20000020

08001a4c <imu_read>:
ImuData_t imuDataSent= {0};

int initialized = 0;
enum _error_bno imu_error;

void imu_read(void) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08c      	sub	sp, #48	@ 0x30
 8001a50:	af00      	add	r7, sp, #0

    if (!initialized) {
 8001a52:	4b33      	ldr	r3, [pc, #204]	@ (8001b20 <imu_read+0xd4>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d110      	bne.n	8001a7c <imu_read+0x30>
    	osDelay(10);
 8001a5a:	200a      	movs	r0, #10
 8001a5c:	f008 fbec 	bl	800a238 <osDelay>
        // Initialize the sensor
        imu_error = bno055_init(&bno);
 8001a60:	4830      	ldr	r0, [pc, #192]	@ (8001b24 <imu_read+0xd8>)
 8001a62:	f000 fbd9 	bl	8002218 <bno055_init>
 8001a66:	4603      	mov	r3, r0
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4b2f      	ldr	r3, [pc, #188]	@ (8001b28 <imu_read+0xdc>)
 8001a6c:	701a      	strb	r2, [r3, #0]
        if (imu_error == BNO_OK) { initialized = 1;}
 8001a6e:	4b2e      	ldr	r3, [pc, #184]	@ (8001b28 <imu_read+0xdc>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d102      	bne.n	8001a7c <imu_read+0x30>
 8001a76:	4b2a      	ldr	r3, [pc, #168]	@ (8001b20 <imu_read+0xd4>)
 8001a78:	2201      	movs	r2, #1
 8001a7a:	601a      	str	r2, [r3, #0]
    }


    // Fetch accelerometer data (X, Y, Z)
    bno055_vec3_t accelData;
    if (bno055_acc(&bno, &accelData) == BNO_OK) {
 8001a7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a80:	4619      	mov	r1, r3
 8001a82:	4828      	ldr	r0, [pc, #160]	@ (8001b24 <imu_read+0xd8>)
 8001a84:	f000 fde0 	bl	8002648 <bno055_acc>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d108      	bne.n	8001aa0 <imu_read+0x54>
    	imuDataSent.accelX = accelData.x;
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a90:	4a26      	ldr	r2, [pc, #152]	@ (8001b2c <imu_read+0xe0>)
 8001a92:	60d3      	str	r3, [r2, #12]
    	imuDataSent.accelY = accelData.y;
 8001a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a96:	4a25      	ldr	r2, [pc, #148]	@ (8001b2c <imu_read+0xe0>)
 8001a98:	6113      	str	r3, [r2, #16]
    	imuDataSent.accelZ = accelData.z;
 8001a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a9c:	4a23      	ldr	r2, [pc, #140]	@ (8001b2c <imu_read+0xe0>)
 8001a9e:	6153      	str	r3, [r2, #20]
    }

    // Fetch gyroscope data (X, Y, Z)
    bno055_vec3_t gyroData;
    if (bno055_gyro(&bno, &gyroData) == BNO_OK) {
 8001aa0:	f107 0318 	add.w	r3, r7, #24
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	481f      	ldr	r0, [pc, #124]	@ (8001b24 <imu_read+0xd8>)
 8001aa8:	f001 f81e 	bl	8002ae8 <bno055_gyro>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d108      	bne.n	8001ac4 <imu_read+0x78>
    	imuDataSent.gyroX = gyroData.x;
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	4a1d      	ldr	r2, [pc, #116]	@ (8001b2c <imu_read+0xe0>)
 8001ab6:	6193      	str	r3, [r2, #24]
    	imuDataSent.gyroY = gyroData.y;
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	4a1c      	ldr	r2, [pc, #112]	@ (8001b2c <imu_read+0xe0>)
 8001abc:	61d3      	str	r3, [r2, #28]
    	imuDataSent.gyroZ = gyroData.z;
 8001abe:	6a3b      	ldr	r3, [r7, #32]
 8001ac0:	4a1a      	ldr	r2, [pc, #104]	@ (8001b2c <imu_read+0xe0>)
 8001ac2:	6213      	str	r3, [r2, #32]
    }

    // Fetch magnetometer data (X, Y, Z)
    bno055_vec3_t magData;
    if (bno055_mag(&bno, &magData) == BNO_OK) {
 8001ac4:	f107 030c 	add.w	r3, r7, #12
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4816      	ldr	r0, [pc, #88]	@ (8001b24 <imu_read+0xd8>)
 8001acc:	f001 f919 	bl	8002d02 <bno055_mag>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d108      	bne.n	8001ae8 <imu_read+0x9c>
    	imuDataSent.magX = magData.x;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	4a14      	ldr	r2, [pc, #80]	@ (8001b2c <imu_read+0xe0>)
 8001ada:	6253      	str	r3, [r2, #36]	@ 0x24
    	imuDataSent.magY = magData.y;
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	4a13      	ldr	r2, [pc, #76]	@ (8001b2c <imu_read+0xe0>)
 8001ae0:	6293      	str	r3, [r2, #40]	@ 0x28
    	imuDataSent.magZ = magData.z;
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	4a11      	ldr	r2, [pc, #68]	@ (8001b2c <imu_read+0xe0>)
 8001ae6:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    // Fetch Euler angles (Roll, Pitch, Yaw)
    bno055_euler_t eulerData;
    if (bno055_euler(&bno, &eulerData) == BNO_OK) {
 8001ae8:	463b      	mov	r3, r7
 8001aea:	4619      	mov	r1, r3
 8001aec:	480d      	ldr	r0, [pc, #52]	@ (8001b24 <imu_read+0xd8>)
 8001aee:	f001 fb59 	bl	80031a4 <bno055_euler>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d108      	bne.n	8001b0a <imu_read+0xbe>
    	imuDataSent.roll = eulerData.roll;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	4a0c      	ldr	r2, [pc, #48]	@ (8001b2c <imu_read+0xe0>)
 8001afc:	6013      	str	r3, [r2, #0]
    	imuDataSent.pitch = eulerData.pitch;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a0a      	ldr	r2, [pc, #40]	@ (8001b2c <imu_read+0xe0>)
 8001b02:	6053      	str	r3, [r2, #4]
    	imuDataSent.yaw = eulerData.yaw;
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	4a09      	ldr	r2, [pc, #36]	@ (8001b2c <imu_read+0xe0>)
 8001b08:	6093      	str	r3, [r2, #8]
    }

    // Post the sensor data to the message queue.
    osMessageQueuePut(imuQueueHandle, &imuDataSent, 0, 0);
 8001b0a:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <imu_read+0xe4>)
 8001b0c:	6818      	ldr	r0, [r3, #0]
 8001b0e:	2300      	movs	r3, #0
 8001b10:	2200      	movs	r2, #0
 8001b12:	4906      	ldr	r1, [pc, #24]	@ (8001b2c <imu_read+0xe0>)
 8001b14:	f008 fc1e 	bl	800a354 <osMessageQueuePut>
}
 8001b18:	bf00      	nop
 8001b1a:	3730      	adds	r7, #48	@ 0x30
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	2000037c 	.word	0x2000037c
 8001b24:	20000040 	.word	0x20000040
 8001b28:	20000380 	.word	0x20000380
 8001b2c:	2000034c 	.word	0x2000034c
 8001b30:	20000524 	.word	0x20000524

08001b34 <is_imu_initialized>:

int is_imu_initialized(void){
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
    return initialized;
 8001b38:	4b03      	ldr	r3, [pc, #12]	@ (8001b48 <is_imu_initialized+0x14>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	2000037c 	.word	0x2000037c

08001b4c <telemetry_transmit>:
/**
 * @brief Transmits a telemetry value with a given key.
 *
 * The message is formatted as "KEY:VALUE\r\n".
 */
static void telemetry_transmit(const char *key, float value) {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af02      	add	r7, sp, #8
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	ed87 0a00 	vstr	s0, [r7]
    snprintf(uartTxBuffer, sizeof(uartTxBuffer), "%s:%.2f\r\n", key, value);
 8001b58:	6838      	ldr	r0, [r7, #0]
 8001b5a:	f7fe fcfd 	bl	8000558 <__aeabi_f2d>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	e9cd 2300 	strd	r2, r3, [sp]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a09      	ldr	r2, [pc, #36]	@ (8001b90 <telemetry_transmit+0x44>)
 8001b6a:	2110      	movs	r1, #16
 8001b6c:	4809      	ldr	r0, [pc, #36]	@ (8001b94 <telemetry_transmit+0x48>)
 8001b6e:	f00d f97f 	bl	800ee70 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)uartTxBuffer, strlen(uartTxBuffer), 1);
 8001b72:	4808      	ldr	r0, [pc, #32]	@ (8001b94 <telemetry_transmit+0x48>)
 8001b74:	f7fe fb84 	bl	8000280 <strlen>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	4905      	ldr	r1, [pc, #20]	@ (8001b94 <telemetry_transmit+0x48>)
 8001b80:	4805      	ldr	r0, [pc, #20]	@ (8001b98 <telemetry_transmit+0x4c>)
 8001b82:	f007 fc6d 	bl	8009460 <HAL_UART_Transmit>
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	08011c28 	.word	0x08011c28
 8001b94:	200003f4 	.word	0x200003f4
 8001b98:	200006bc 	.word	0x200006bc

08001b9c <telemetry_start_rx_dma>:
 * @brief Starts UART RX in DMA mode using a circular buffer.
 *
 * Only the pointer to the buffer is passed so that the DMA hardware
 * writes directly into uartRxBuffer.
 */
static void telemetry_start_rx_dma(void) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
    HAL_UART_Receive_DMA(&huart1, (uint8_t *)uartRxBuffer, RX_BUFFER_SIZE);
 8001ba0:	2210      	movs	r2, #16
 8001ba2:	4903      	ldr	r1, [pc, #12]	@ (8001bb0 <telemetry_start_rx_dma+0x14>)
 8001ba4:	4803      	ldr	r0, [pc, #12]	@ (8001bb4 <telemetry_start_rx_dma+0x18>)
 8001ba6:	f007 fce6 	bl	8009576 <HAL_UART_Receive_DMA>
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	200003e4 	.word	0x200003e4
 8001bb4:	200006bc 	.word	0x200006bc

08001bb8 <telemetry_receive>:

// Define a sufficiently large temporary buffer for complete messages.
#define TEMP_BUFFER_SIZE 64

bool telemetry_receive(const char *key, float *value) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
    static uint16_t tempIndex = 0;

    // Determine the current index in the DMA circular buffer.
    // RX_BUFFER_SIZE is defined in the file as 16.
    // __HAL_DMA_GET_COUNTER returns the number of bytes remaining.
    uint16_t dma_remaining = __HAL_DMA_GET_COUNTER(huart1.hdmarx);
 8001bc2:	4b3d      	ldr	r3, [pc, #244]	@ (8001cb8 <telemetry_receive+0x100>)
 8001bc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	82fb      	strh	r3, [r7, #22]
    uint16_t current_index = RX_BUFFER_SIZE - dma_remaining;
 8001bcc:	8afb      	ldrh	r3, [r7, #22]
 8001bce:	f1c3 0310 	rsb	r3, r3, #16
 8001bd2:	82bb      	strh	r3, [r7, #20]

    // Process all new characters in the circular buffer
    while (last_read_index != current_index) {
 8001bd4:	e066      	b.n	8001ca4 <telemetry_receive+0xec>
        char ch = uartRxBuffer[last_read_index];
 8001bd6:	4b39      	ldr	r3, [pc, #228]	@ (8001cbc <telemetry_receive+0x104>)
 8001bd8:	881b      	ldrh	r3, [r3, #0]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	4b38      	ldr	r3, [pc, #224]	@ (8001cc0 <telemetry_receive+0x108>)
 8001bde:	5c9b      	ldrb	r3, [r3, r2]
 8001be0:	74fb      	strb	r3, [r7, #19]
        // Update the read pointer, wrapping around if necessary.
        last_read_index = (last_read_index + 1) % RX_BUFFER_SIZE;
 8001be2:	4b36      	ldr	r3, [pc, #216]	@ (8001cbc <telemetry_receive+0x104>)
 8001be4:	881b      	ldrh	r3, [r3, #0]
 8001be6:	3301      	adds	r3, #1
 8001be8:	425a      	negs	r2, r3
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	f002 020f 	and.w	r2, r2, #15
 8001bf2:	bf58      	it	pl
 8001bf4:	4253      	negpl	r3, r2
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	4b30      	ldr	r3, [pc, #192]	@ (8001cbc <telemetry_receive+0x104>)
 8001bfa:	801a      	strh	r2, [r3, #0]

        // Append the character to the temporary buffer if space is available.
        if (tempIndex < TEMP_BUFFER_SIZE - 1) {
 8001bfc:	4b31      	ldr	r3, [pc, #196]	@ (8001cc4 <telemetry_receive+0x10c>)
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	2b3e      	cmp	r3, #62	@ 0x3e
 8001c02:	d80a      	bhi.n	8001c1a <telemetry_receive+0x62>
            tempBuffer[tempIndex++] = ch;
 8001c04:	4b2f      	ldr	r3, [pc, #188]	@ (8001cc4 <telemetry_receive+0x10c>)
 8001c06:	881b      	ldrh	r3, [r3, #0]
 8001c08:	1c5a      	adds	r2, r3, #1
 8001c0a:	b291      	uxth	r1, r2
 8001c0c:	4a2d      	ldr	r2, [pc, #180]	@ (8001cc4 <telemetry_receive+0x10c>)
 8001c0e:	8011      	strh	r1, [r2, #0]
 8001c10:	4619      	mov	r1, r3
 8001c12:	4a2d      	ldr	r2, [pc, #180]	@ (8001cc8 <telemetry_receive+0x110>)
 8001c14:	7cfb      	ldrb	r3, [r7, #19]
 8001c16:	5453      	strb	r3, [r2, r1]
 8001c18:	e002      	b.n	8001c20 <telemetry_receive+0x68>
        } else {
            // Overflow protection: reset temp buffer if it gets too full.
            tempIndex = 0;
 8001c1a:	4b2a      	ldr	r3, [pc, #168]	@ (8001cc4 <telemetry_receive+0x10c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	801a      	strh	r2, [r3, #0]
        }

        // Check if the last two characters form the "\r\n" delimiter.
        if (tempIndex >= 2 &&
 8001c20:	4b28      	ldr	r3, [pc, #160]	@ (8001cc4 <telemetry_receive+0x10c>)
 8001c22:	881b      	ldrh	r3, [r3, #0]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d93d      	bls.n	8001ca4 <telemetry_receive+0xec>
            tempBuffer[tempIndex - 2] == '\r' &&
 8001c28:	4b26      	ldr	r3, [pc, #152]	@ (8001cc4 <telemetry_receive+0x10c>)
 8001c2a:	881b      	ldrh	r3, [r3, #0]
 8001c2c:	3b02      	subs	r3, #2
 8001c2e:	4a26      	ldr	r2, [pc, #152]	@ (8001cc8 <telemetry_receive+0x110>)
 8001c30:	5cd3      	ldrb	r3, [r2, r3]
        if (tempIndex >= 2 &&
 8001c32:	2b0d      	cmp	r3, #13
 8001c34:	d136      	bne.n	8001ca4 <telemetry_receive+0xec>
            tempBuffer[tempIndex - 1] == '\n') {
 8001c36:	4b23      	ldr	r3, [pc, #140]	@ (8001cc4 <telemetry_receive+0x10c>)
 8001c38:	881b      	ldrh	r3, [r3, #0]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	4a22      	ldr	r2, [pc, #136]	@ (8001cc8 <telemetry_receive+0x110>)
 8001c3e:	5cd3      	ldrb	r3, [r2, r3]
            tempBuffer[tempIndex - 2] == '\r' &&
 8001c40:	2b0a      	cmp	r3, #10
 8001c42:	d12f      	bne.n	8001ca4 <telemetry_receive+0xec>

            // Null-terminate the message (overwrite '\r' with '\0').
            tempBuffer[tempIndex - 2] = '\0';
 8001c44:	4b1f      	ldr	r3, [pc, #124]	@ (8001cc4 <telemetry_receive+0x10c>)
 8001c46:	881b      	ldrh	r3, [r3, #0]
 8001c48:	3b02      	subs	r3, #2
 8001c4a:	4a1f      	ldr	r2, [pc, #124]	@ (8001cc8 <telemetry_receive+0x110>)
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	54d1      	strb	r1, [r2, r3]

            // Check if the message starts with the given key followed by a colon.
            size_t keyLen = strlen(key);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7fe fb15 	bl	8000280 <strlen>
 8001c56:	60f8      	str	r0, [r7, #12]
            if (strncmp(tempBuffer, key, keyLen) == 0 && tempBuffer[keyLen] == ':') {
 8001c58:	68fa      	ldr	r2, [r7, #12]
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	481a      	ldr	r0, [pc, #104]	@ (8001cc8 <telemetry_receive+0x110>)
 8001c5e:	f00d f9aa 	bl	800efb6 <strncmp>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d11a      	bne.n	8001c9e <telemetry_receive+0xe6>
 8001c68:	4a17      	ldr	r2, [pc, #92]	@ (8001cc8 <telemetry_receive+0x110>)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b3a      	cmp	r3, #58	@ 0x3a
 8001c72:	d114      	bne.n	8001c9e <telemetry_receive+0xe6>
                // Convert the string after the colon to a float.
                *value = (float)atof(&tempBuffer[keyLen + 1]);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	3301      	adds	r3, #1
 8001c78:	4a13      	ldr	r2, [pc, #76]	@ (8001cc8 <telemetry_receive+0x110>)
 8001c7a:	4413      	add	r3, r2
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f00b fbb7 	bl	800d3f0 <atof>
 8001c82:	ec53 2b10 	vmov	r2, r3, d0
 8001c86:	4610      	mov	r0, r2
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f7fe ffb5 	bl	8000bf8 <__aeabi_d2f>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	601a      	str	r2, [r3, #0]
                // Reset the temporary buffer for the next message.
                tempIndex = 0;
 8001c94:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc4 <telemetry_receive+0x10c>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	801a      	strh	r2, [r3, #0]
                return true;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e008      	b.n	8001cb0 <telemetry_receive+0xf8>
            }
            // Message was complete but did not match the key.
            // Clear the temp buffer and continue processing.
            tempIndex = 0;
 8001c9e:	4b09      	ldr	r3, [pc, #36]	@ (8001cc4 <telemetry_receive+0x10c>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	801a      	strh	r2, [r3, #0]
    while (last_read_index != current_index) {
 8001ca4:	4b05      	ldr	r3, [pc, #20]	@ (8001cbc <telemetry_receive+0x104>)
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	8aba      	ldrh	r2, [r7, #20]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d193      	bne.n	8001bd6 <telemetry_receive+0x1e>
        }
    }

    // No complete message with the requested key was received.
    return false;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3718      	adds	r7, #24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	200006bc 	.word	0x200006bc
 8001cbc:	20000408 	.word	0x20000408
 8001cc0:	200003e4 	.word	0x200003e4
 8001cc4:	2000040a 	.word	0x2000040a
 8001cc8:	2000040c 	.word	0x2000040c

08001ccc <telemetry>:

int telemetry_initialized = 0;

void telemetry(void) {
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
    if (!telemetry_initialized) {
 8001cd2:	4baf      	ldr	r3, [pc, #700]	@ (8001f90 <telemetry+0x2c4>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d104      	bne.n	8001ce4 <telemetry+0x18>

    	// Start RX DMA (assumes this only needs to be done once)
    	telemetry_start_rx_dma();
 8001cda:	f7ff ff5f 	bl	8001b9c <telemetry_start_rx_dma>
    	telemetry_initialized = 1;
 8001cde:	4bac      	ldr	r3, [pc, #688]	@ (8001f90 <telemetry+0x2c4>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]
    }

	// Send a simple "OK" heartbeat
	snprintf(uartTxBuffer, sizeof(uartTxBuffer), "OK\r\n");
 8001ce4:	4aab      	ldr	r2, [pc, #684]	@ (8001f94 <telemetry+0x2c8>)
 8001ce6:	2110      	movs	r1, #16
 8001ce8:	48ab      	ldr	r0, [pc, #684]	@ (8001f98 <telemetry+0x2cc>)
 8001cea:	f00d f8c1 	bl	800ee70 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)uartTxBuffer, strlen(uartTxBuffer), HAL_MAX_DELAY);
 8001cee:	48aa      	ldr	r0, [pc, #680]	@ (8001f98 <telemetry+0x2cc>)
 8001cf0:	f7fe fac6 	bl	8000280 <strlen>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cfc:	49a6      	ldr	r1, [pc, #664]	@ (8001f98 <telemetry+0x2cc>)
 8001cfe:	48a7      	ldr	r0, [pc, #668]	@ (8001f9c <telemetry+0x2d0>)
 8001d00:	f007 fbae 	bl	8009460 <HAL_UART_Transmit>

	// Transmit ADC data if available.
	if (osMessageQueueGetCount(adcQueueHandle) > 0) {
 8001d04:	4ba6      	ldr	r3, [pc, #664]	@ (8001fa0 <telemetry+0x2d4>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f008 fbe1 	bl	800a4d0 <osMessageQueueGetCount>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d027      	beq.n	8001d64 <telemetry+0x98>
		osMessageQueueGet(adcQueueHandle, (void *)&adcDataReceived, NULL, osWaitForever);
 8001d14:	4ba2      	ldr	r3, [pc, #648]	@ (8001fa0 <telemetry+0x2d4>)
 8001d16:	6818      	ldr	r0, [r3, #0]
 8001d18:	f04f 33ff 	mov.w	r3, #4294967295
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	49a1      	ldr	r1, [pc, #644]	@ (8001fa4 <telemetry+0x2d8>)
 8001d20:	f008 fb78 	bl	800a414 <osMessageQueueGet>
		telemetry_transmit("DIR", adcDataReceived.windDirection);
 8001d24:	4b9f      	ldr	r3, [pc, #636]	@ (8001fa4 <telemetry+0x2d8>)
 8001d26:	edd3 7a00 	vldr	s15, [r3]
 8001d2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d2e:	489e      	ldr	r0, [pc, #632]	@ (8001fa8 <telemetry+0x2dc>)
 8001d30:	f7ff ff0c 	bl	8001b4c <telemetry_transmit>
		telemetry_transmit("BAT", adcDataReceived.batteryVoltage);
 8001d34:	4b9b      	ldr	r3, [pc, #620]	@ (8001fa4 <telemetry+0x2d8>)
 8001d36:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d3a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d3e:	489b      	ldr	r0, [pc, #620]	@ (8001fac <telemetry+0x2e0>)
 8001d40:	f7ff ff04 	bl	8001b4c <telemetry_transmit>
		telemetry_transmit("EX1", adcDataReceived.extra1);
 8001d44:	4b97      	ldr	r3, [pc, #604]	@ (8001fa4 <telemetry+0x2d8>)
 8001d46:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d4a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d4e:	4898      	ldr	r0, [pc, #608]	@ (8001fb0 <telemetry+0x2e4>)
 8001d50:	f7ff fefc 	bl	8001b4c <telemetry_transmit>
		telemetry_transmit("EX2", adcDataReceived.extra2);
 8001d54:	4b93      	ldr	r3, [pc, #588]	@ (8001fa4 <telemetry+0x2d8>)
 8001d56:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d5a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d5e:	4895      	ldr	r0, [pc, #596]	@ (8001fb4 <telemetry+0x2e8>)
 8001d60:	f7ff fef4 	bl	8001b4c <telemetry_transmit>
	}

	// Transmit IMU data if available and initialized.
	if (osMessageQueueGetCount(imuQueueHandle) > 0 && is_imu_initialized()) {
 8001d64:	4b94      	ldr	r3, [pc, #592]	@ (8001fb8 <telemetry+0x2ec>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f008 fbb1 	bl	800a4d0 <osMessageQueueGetCount>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d06c      	beq.n	8001e4e <telemetry+0x182>
 8001d74:	f7ff fede 	bl	8001b34 <is_imu_initialized>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d067      	beq.n	8001e4e <telemetry+0x182>
		osMessageQueueGet(imuQueueHandle, (void *)&imuDataReceived, NULL, osWaitForever);
 8001d7e:	4b8e      	ldr	r3, [pc, #568]	@ (8001fb8 <telemetry+0x2ec>)
 8001d80:	6818      	ldr	r0, [r3, #0]
 8001d82:	f04f 33ff 	mov.w	r3, #4294967295
 8001d86:	2200      	movs	r2, #0
 8001d88:	498c      	ldr	r1, [pc, #560]	@ (8001fbc <telemetry+0x2f0>)
 8001d8a:	f008 fb43 	bl	800a414 <osMessageQueueGet>
		telemetry_transmit("ROL", imuDataReceived.roll);
 8001d8e:	4b8b      	ldr	r3, [pc, #556]	@ (8001fbc <telemetry+0x2f0>)
 8001d90:	edd3 7a00 	vldr	s15, [r3]
 8001d94:	eeb0 0a67 	vmov.f32	s0, s15
 8001d98:	4889      	ldr	r0, [pc, #548]	@ (8001fc0 <telemetry+0x2f4>)
 8001d9a:	f7ff fed7 	bl	8001b4c <telemetry_transmit>
		telemetry_transmit("PIT", imuDataReceived.pitch);
 8001d9e:	4b87      	ldr	r3, [pc, #540]	@ (8001fbc <telemetry+0x2f0>)
 8001da0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001da4:	eeb0 0a67 	vmov.f32	s0, s15
 8001da8:	4886      	ldr	r0, [pc, #536]	@ (8001fc4 <telemetry+0x2f8>)
 8001daa:	f7ff fecf 	bl	8001b4c <telemetry_transmit>
		telemetry_transmit("YAW", imuDataReceived.yaw);
 8001dae:	4b83      	ldr	r3, [pc, #524]	@ (8001fbc <telemetry+0x2f0>)
 8001db0:	edd3 7a02 	vldr	s15, [r3, #8]
 8001db4:	eeb0 0a67 	vmov.f32	s0, s15
 8001db8:	4883      	ldr	r0, [pc, #524]	@ (8001fc8 <telemetry+0x2fc>)
 8001dba:	f7ff fec7 	bl	8001b4c <telemetry_transmit>
		telemetry_transmit("ACX", imuDataReceived.accelX);
 8001dbe:	4b7f      	ldr	r3, [pc, #508]	@ (8001fbc <telemetry+0x2f0>)
 8001dc0:	edd3 7a03 	vldr	s15, [r3, #12]
 8001dc4:	eeb0 0a67 	vmov.f32	s0, s15
 8001dc8:	4880      	ldr	r0, [pc, #512]	@ (8001fcc <telemetry+0x300>)
 8001dca:	f7ff febf 	bl	8001b4c <telemetry_transmit>
		telemetry_transmit("ACY", imuDataReceived.accelY);
 8001dce:	4b7b      	ldr	r3, [pc, #492]	@ (8001fbc <telemetry+0x2f0>)
 8001dd0:	edd3 7a04 	vldr	s15, [r3, #16]
 8001dd4:	eeb0 0a67 	vmov.f32	s0, s15
 8001dd8:	487d      	ldr	r0, [pc, #500]	@ (8001fd0 <telemetry+0x304>)
 8001dda:	f7ff feb7 	bl	8001b4c <telemetry_transmit>
		telemetry_transmit("ACZ", imuDataReceived.accelZ);
 8001dde:	4b77      	ldr	r3, [pc, #476]	@ (8001fbc <telemetry+0x2f0>)
 8001de0:	edd3 7a05 	vldr	s15, [r3, #20]
 8001de4:	eeb0 0a67 	vmov.f32	s0, s15
 8001de8:	487a      	ldr	r0, [pc, #488]	@ (8001fd4 <telemetry+0x308>)
 8001dea:	f7ff feaf 	bl	8001b4c <telemetry_transmit>
		telemetry_transmit("GYX", imuDataReceived.gyroX);
 8001dee:	4b73      	ldr	r3, [pc, #460]	@ (8001fbc <telemetry+0x2f0>)
 8001df0:	edd3 7a06 	vldr	s15, [r3, #24]
 8001df4:	eeb0 0a67 	vmov.f32	s0, s15
 8001df8:	4877      	ldr	r0, [pc, #476]	@ (8001fd8 <telemetry+0x30c>)
 8001dfa:	f7ff fea7 	bl	8001b4c <telemetry_transmit>
		telemetry_transmit("GYY", imuDataReceived.gyroY);
 8001dfe:	4b6f      	ldr	r3, [pc, #444]	@ (8001fbc <telemetry+0x2f0>)
 8001e00:	edd3 7a07 	vldr	s15, [r3, #28]
 8001e04:	eeb0 0a67 	vmov.f32	s0, s15
 8001e08:	4874      	ldr	r0, [pc, #464]	@ (8001fdc <telemetry+0x310>)
 8001e0a:	f7ff fe9f 	bl	8001b4c <telemetry_transmit>
		telemetry_transmit("GYZ", imuDataReceived.gyroZ);
 8001e0e:	4b6b      	ldr	r3, [pc, #428]	@ (8001fbc <telemetry+0x2f0>)
 8001e10:	edd3 7a08 	vldr	s15, [r3, #32]
 8001e14:	eeb0 0a67 	vmov.f32	s0, s15
 8001e18:	4871      	ldr	r0, [pc, #452]	@ (8001fe0 <telemetry+0x314>)
 8001e1a:	f7ff fe97 	bl	8001b4c <telemetry_transmit>
		telemetry_transmit("MGX", imuDataReceived.magX);
 8001e1e:	4b67      	ldr	r3, [pc, #412]	@ (8001fbc <telemetry+0x2f0>)
 8001e20:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001e24:	eeb0 0a67 	vmov.f32	s0, s15
 8001e28:	486e      	ldr	r0, [pc, #440]	@ (8001fe4 <telemetry+0x318>)
 8001e2a:	f7ff fe8f 	bl	8001b4c <telemetry_transmit>
		telemetry_transmit("MGY", imuDataReceived.magY);
 8001e2e:	4b63      	ldr	r3, [pc, #396]	@ (8001fbc <telemetry+0x2f0>)
 8001e30:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001e34:	eeb0 0a67 	vmov.f32	s0, s15
 8001e38:	486b      	ldr	r0, [pc, #428]	@ (8001fe8 <telemetry+0x31c>)
 8001e3a:	f7ff fe87 	bl	8001b4c <telemetry_transmit>
		telemetry_transmit("MGZ", imuDataReceived.magZ);
 8001e3e:	4b5f      	ldr	r3, [pc, #380]	@ (8001fbc <telemetry+0x2f0>)
 8001e40:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001e44:	eeb0 0a67 	vmov.f32	s0, s15
 8001e48:	4868      	ldr	r0, [pc, #416]	@ (8001fec <telemetry+0x320>)
 8001e4a:	f7ff fe7f 	bl	8001b4c <telemetry_transmit>
	}

	// Transmit Radio data if available.
	if (osMessageQueueGetCount(radioQueueHandle) > 0) {
 8001e4e:	4b68      	ldr	r3, [pc, #416]	@ (8001ff0 <telemetry+0x324>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f008 fb3c 	bl	800a4d0 <osMessageQueueGetCount>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d037      	beq.n	8001ece <telemetry+0x202>
		osMessageQueueGet(radioQueueHandle, (void *)&radioDataReceived, NULL, osWaitForever);
 8001e5e:	4b64      	ldr	r3, [pc, #400]	@ (8001ff0 <telemetry+0x324>)
 8001e60:	6818      	ldr	r0, [r3, #0]
 8001e62:	f04f 33ff 	mov.w	r3, #4294967295
 8001e66:	2200      	movs	r2, #0
 8001e68:	4962      	ldr	r1, [pc, #392]	@ (8001ff4 <telemetry+0x328>)
 8001e6a:	f008 fad3 	bl	800a414 <osMessageQueueGet>
		telemetry_transmit("RW1", (float)radioDataReceived.ch1);
 8001e6e:	4b61      	ldr	r3, [pc, #388]	@ (8001ff4 <telemetry+0x328>)
 8001e70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e74:	ee07 3a90 	vmov	s15, r3
 8001e78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e7c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e80:	485d      	ldr	r0, [pc, #372]	@ (8001ff8 <telemetry+0x32c>)
 8001e82:	f7ff fe63 	bl	8001b4c <telemetry_transmit>
		telemetry_transmit("RW2", (float)radioDataReceived.ch2);
 8001e86:	4b5b      	ldr	r3, [pc, #364]	@ (8001ff4 <telemetry+0x328>)
 8001e88:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e8c:	ee07 3a90 	vmov	s15, r3
 8001e90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e94:	eeb0 0a67 	vmov.f32	s0, s15
 8001e98:	4858      	ldr	r0, [pc, #352]	@ (8001ffc <telemetry+0x330>)
 8001e9a:	f7ff fe57 	bl	8001b4c <telemetry_transmit>
		telemetry_transmit("RW3", (float)radioDataReceived.ch3);
 8001e9e:	4b55      	ldr	r3, [pc, #340]	@ (8001ff4 <telemetry+0x328>)
 8001ea0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ea4:	ee07 3a90 	vmov	s15, r3
 8001ea8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eac:	eeb0 0a67 	vmov.f32	s0, s15
 8001eb0:	4853      	ldr	r0, [pc, #332]	@ (8002000 <telemetry+0x334>)
 8001eb2:	f7ff fe4b 	bl	8001b4c <telemetry_transmit>
		telemetry_transmit("RW4", (float)radioDataReceived.ch4);
 8001eb6:	4b4f      	ldr	r3, [pc, #316]	@ (8001ff4 <telemetry+0x328>)
 8001eb8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001ebc:	ee07 3a90 	vmov	s15, r3
 8001ec0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ec4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ec8:	484e      	ldr	r0, [pc, #312]	@ (8002004 <telemetry+0x338>)
 8001eca:	f7ff fe3f 	bl	8001b4c <telemetry_transmit>
	}

	// Transmit Control data if available.
	if (osMessageQueueGetCount(controlQueueHandle) > 0) {
 8001ece:	4b4e      	ldr	r3, [pc, #312]	@ (8002008 <telemetry+0x33c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f008 fafc 	bl	800a4d0 <osMessageQueueGetCount>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d037      	beq.n	8001f4e <telemetry+0x282>
		osMessageQueueGet(controlQueueHandle, (void *)&controlDataReceived, NULL, osWaitForever);
 8001ede:	4b4a      	ldr	r3, [pc, #296]	@ (8002008 <telemetry+0x33c>)
 8001ee0:	6818      	ldr	r0, [r3, #0]
 8001ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	4948      	ldr	r1, [pc, #288]	@ (800200c <telemetry+0x340>)
 8001eea:	f008 fa93 	bl	800a414 <osMessageQueueGet>
		telemetry_transmit("CT1", (float)controlDataReceived.ctrl1);
 8001eee:	4b47      	ldr	r3, [pc, #284]	@ (800200c <telemetry+0x340>)
 8001ef0:	edd3 7a00 	vldr	s15, [r3]
 8001ef4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ef8:	4845      	ldr	r0, [pc, #276]	@ (8002010 <telemetry+0x344>)
 8001efa:	f7ff fe27 	bl	8001b4c <telemetry_transmit>
		telemetry_transmit("CT2", (float)controlDataReceived.ctrl2);
 8001efe:	4b43      	ldr	r3, [pc, #268]	@ (800200c <telemetry+0x340>)
 8001f00:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f04:	eeb0 0a67 	vmov.f32	s0, s15
 8001f08:	4842      	ldr	r0, [pc, #264]	@ (8002014 <telemetry+0x348>)
 8001f0a:	f7ff fe1f 	bl	8001b4c <telemetry_transmit>
		telemetry_transmit("CT3", (float)controlDataReceived.ctrl3);
 8001f0e:	4b3f      	ldr	r3, [pc, #252]	@ (800200c <telemetry+0x340>)
 8001f10:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f14:	eeb0 0a67 	vmov.f32	s0, s15
 8001f18:	483f      	ldr	r0, [pc, #252]	@ (8002018 <telemetry+0x34c>)
 8001f1a:	f7ff fe17 	bl	8001b4c <telemetry_transmit>
		telemetry_transmit("CT4", (float)controlDataReceived.ctrl4);
 8001f1e:	4b3b      	ldr	r3, [pc, #236]	@ (800200c <telemetry+0x340>)
 8001f20:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f24:	eeb0 0a67 	vmov.f32	s0, s15
 8001f28:	483c      	ldr	r0, [pc, #240]	@ (800201c <telemetry+0x350>)
 8001f2a:	f7ff fe0f 	bl	8001b4c <telemetry_transmit>
		telemetry_transmit("CT5", (float)controlDataReceived.ctrl5);
 8001f2e:	4b37      	ldr	r3, [pc, #220]	@ (800200c <telemetry+0x340>)
 8001f30:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f34:	eeb0 0a67 	vmov.f32	s0, s15
 8001f38:	4839      	ldr	r0, [pc, #228]	@ (8002020 <telemetry+0x354>)
 8001f3a:	f7ff fe07 	bl	8001b4c <telemetry_transmit>
		telemetry_transmit("CT6", (float)controlDataReceived.ctrl6);
 8001f3e:	4b33      	ldr	r3, [pc, #204]	@ (800200c <telemetry+0x340>)
 8001f40:	edd3 7a05 	vldr	s15, [r3, #20]
 8001f44:	eeb0 0a67 	vmov.f32	s0, s15
 8001f48:	4836      	ldr	r0, [pc, #216]	@ (8002024 <telemetry+0x358>)
 8001f4a:	f7ff fdff 	bl	8001b4c <telemetry_transmit>
	}

    float modeValue = 0.0f;
 8001f4e:	f04f 0300 	mov.w	r3, #0
 8001f52:	60fb      	str	r3, [r7, #12]
    if (telemetry_receive("MOD", &modeValue)) {
 8001f54:	f107 030c 	add.w	r3, r7, #12
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4833      	ldr	r0, [pc, #204]	@ (8002028 <telemetry+0x35c>)
 8001f5c:	f7ff fe2c 	bl	8001bb8 <telemetry_receive>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d010      	beq.n	8001f88 <telemetry+0x2bc>
        // Create a TelemetryData_t structure and assign the received value.
        TelemetryData_t telemetryData;
        telemetryData.mode = (ControlMode_t)(int)modeValue;
 8001f66:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f6e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001f72:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001f76:	723b      	strb	r3, [r7, #8]

        // Send the telemetry data over the telemetry queue.
        osMessageQueuePut(telemetryQueueHandle, (void *)&telemetryData, 0, 0);
 8001f78:	4b2c      	ldr	r3, [pc, #176]	@ (800202c <telemetry+0x360>)
 8001f7a:	6818      	ldr	r0, [r3, #0]
 8001f7c:	f107 0108 	add.w	r1, r7, #8
 8001f80:	2300      	movs	r3, #0
 8001f82:	2200      	movs	r2, #0
 8001f84:	f008 f9e6 	bl	800a354 <osMessageQueuePut>
    }
}
 8001f88:	bf00      	nop
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	20000404 	.word	0x20000404
 8001f94:	08011c34 	.word	0x08011c34
 8001f98:	200003f4 	.word	0x200003f4
 8001f9c:	200006bc 	.word	0x200006bc
 8001fa0:	20000520 	.word	0x20000520
 8001fa4:	20000384 	.word	0x20000384
 8001fa8:	08011c3c 	.word	0x08011c3c
 8001fac:	08011c40 	.word	0x08011c40
 8001fb0:	08011c44 	.word	0x08011c44
 8001fb4:	08011c48 	.word	0x08011c48
 8001fb8:	20000524 	.word	0x20000524
 8001fbc:	20000394 	.word	0x20000394
 8001fc0:	08011c4c 	.word	0x08011c4c
 8001fc4:	08011c50 	.word	0x08011c50
 8001fc8:	08011c54 	.word	0x08011c54
 8001fcc:	08011c58 	.word	0x08011c58
 8001fd0:	08011c5c 	.word	0x08011c5c
 8001fd4:	08011c60 	.word	0x08011c60
 8001fd8:	08011c64 	.word	0x08011c64
 8001fdc:	08011c68 	.word	0x08011c68
 8001fe0:	08011c6c 	.word	0x08011c6c
 8001fe4:	08011c70 	.word	0x08011c70
 8001fe8:	08011c74 	.word	0x08011c74
 8001fec:	08011c78 	.word	0x08011c78
 8001ff0:	2000051c 	.word	0x2000051c
 8001ff4:	200003c4 	.word	0x200003c4
 8001ff8:	08011c7c 	.word	0x08011c7c
 8001ffc:	08011c80 	.word	0x08011c80
 8002000:	08011c84 	.word	0x08011c84
 8002004:	08011c88 	.word	0x08011c88
 8002008:	20000528 	.word	0x20000528
 800200c:	200003cc 	.word	0x200003cc
 8002010:	08011c8c 	.word	0x08011c8c
 8002014:	08011c90 	.word	0x08011c90
 8002018:	08011c94 	.word	0x08011c94
 800201c:	08011c98 	.word	0x08011c98
 8002020:	08011c9c 	.word	0x08011c9c
 8002024:	08011ca0 	.word	0x08011ca0
 8002028:	08011ca4 	.word	0x08011ca4
 800202c:	2000052c 	.word	0x2000052c

08002030 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002036:	463b      	mov	r3, r7
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002042:	4b36      	ldr	r3, [pc, #216]	@ (800211c <MX_ADC1_Init+0xec>)
 8002044:	4a36      	ldr	r2, [pc, #216]	@ (8002120 <MX_ADC1_Init+0xf0>)
 8002046:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002048:	4b34      	ldr	r3, [pc, #208]	@ (800211c <MX_ADC1_Init+0xec>)
 800204a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800204e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002050:	4b32      	ldr	r3, [pc, #200]	@ (800211c <MX_ADC1_Init+0xec>)
 8002052:	2200      	movs	r2, #0
 8002054:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002056:	4b31      	ldr	r3, [pc, #196]	@ (800211c <MX_ADC1_Init+0xec>)
 8002058:	2201      	movs	r2, #1
 800205a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800205c:	4b2f      	ldr	r3, [pc, #188]	@ (800211c <MX_ADC1_Init+0xec>)
 800205e:	2200      	movs	r2, #0
 8002060:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002062:	4b2e      	ldr	r3, [pc, #184]	@ (800211c <MX_ADC1_Init+0xec>)
 8002064:	2200      	movs	r2, #0
 8002066:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800206a:	4b2c      	ldr	r3, [pc, #176]	@ (800211c <MX_ADC1_Init+0xec>)
 800206c:	2200      	movs	r2, #0
 800206e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002070:	4b2a      	ldr	r3, [pc, #168]	@ (800211c <MX_ADC1_Init+0xec>)
 8002072:	4a2c      	ldr	r2, [pc, #176]	@ (8002124 <MX_ADC1_Init+0xf4>)
 8002074:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002076:	4b29      	ldr	r3, [pc, #164]	@ (800211c <MX_ADC1_Init+0xec>)
 8002078:	2200      	movs	r2, #0
 800207a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800207c:	4b27      	ldr	r3, [pc, #156]	@ (800211c <MX_ADC1_Init+0xec>)
 800207e:	2204      	movs	r2, #4
 8002080:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002082:	4b26      	ldr	r3, [pc, #152]	@ (800211c <MX_ADC1_Init+0xec>)
 8002084:	2201      	movs	r2, #1
 8002086:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800208a:	4b24      	ldr	r3, [pc, #144]	@ (800211c <MX_ADC1_Init+0xec>)
 800208c:	2200      	movs	r2, #0
 800208e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002090:	4822      	ldr	r0, [pc, #136]	@ (800211c <MX_ADC1_Init+0xec>)
 8002092:	f002 fea3 	bl	8004ddc <HAL_ADC_Init>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800209c:	f001 ffc6 	bl	800402c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80020a0:	2301      	movs	r3, #1
 80020a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80020a4:	2301      	movs	r3, #1
 80020a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80020a8:	2300      	movs	r3, #0
 80020aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020ac:	463b      	mov	r3, r7
 80020ae:	4619      	mov	r1, r3
 80020b0:	481a      	ldr	r0, [pc, #104]	@ (800211c <MX_ADC1_Init+0xec>)
 80020b2:	f002 ffe5 	bl	8005080 <HAL_ADC_ConfigChannel>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80020bc:	f001 ffb6 	bl	800402c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80020c0:	2302      	movs	r3, #2
 80020c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80020c4:	2302      	movs	r3, #2
 80020c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020c8:	463b      	mov	r3, r7
 80020ca:	4619      	mov	r1, r3
 80020cc:	4813      	ldr	r0, [pc, #76]	@ (800211c <MX_ADC1_Init+0xec>)
 80020ce:	f002 ffd7 	bl	8005080 <HAL_ADC_ConfigChannel>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80020d8:	f001 ffa8 	bl	800402c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80020dc:	2303      	movs	r3, #3
 80020de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80020e0:	2303      	movs	r3, #3
 80020e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020e4:	463b      	mov	r3, r7
 80020e6:	4619      	mov	r1, r3
 80020e8:	480c      	ldr	r0, [pc, #48]	@ (800211c <MX_ADC1_Init+0xec>)
 80020ea:	f002 ffc9 	bl	8005080 <HAL_ADC_ConfigChannel>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80020f4:	f001 ff9a 	bl	800402c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80020f8:	2304      	movs	r3, #4
 80020fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80020fc:	2304      	movs	r3, #4
 80020fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002100:	463b      	mov	r3, r7
 8002102:	4619      	mov	r1, r3
 8002104:	4805      	ldr	r0, [pc, #20]	@ (800211c <MX_ADC1_Init+0xec>)
 8002106:	f002 ffbb 	bl	8005080 <HAL_ADC_ConfigChannel>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002110:	f001 ff8c 	bl	800402c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002114:	bf00      	nop
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	2000044c 	.word	0x2000044c
 8002120:	40012000 	.word	0x40012000
 8002124:	0f000001 	.word	0x0f000001

08002128 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08a      	sub	sp, #40	@ 0x28
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002130:	f107 0314 	add.w	r3, r7, #20
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	60da      	str	r2, [r3, #12]
 800213e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a2f      	ldr	r2, [pc, #188]	@ (8002204 <HAL_ADC_MspInit+0xdc>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d157      	bne.n	80021fa <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	4b2e      	ldr	r3, [pc, #184]	@ (8002208 <HAL_ADC_MspInit+0xe0>)
 8002150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002152:	4a2d      	ldr	r2, [pc, #180]	@ (8002208 <HAL_ADC_MspInit+0xe0>)
 8002154:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002158:	6453      	str	r3, [r2, #68]	@ 0x44
 800215a:	4b2b      	ldr	r3, [pc, #172]	@ (8002208 <HAL_ADC_MspInit+0xe0>)
 800215c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800215e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002162:	613b      	str	r3, [r7, #16]
 8002164:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	4b27      	ldr	r3, [pc, #156]	@ (8002208 <HAL_ADC_MspInit+0xe0>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216e:	4a26      	ldr	r2, [pc, #152]	@ (8002208 <HAL_ADC_MspInit+0xe0>)
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	6313      	str	r3, [r2, #48]	@ 0x30
 8002176:	4b24      	ldr	r3, [pc, #144]	@ (8002208 <HAL_ADC_MspInit+0xe0>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ANALOG1_Pin|ANALOG2_Pin|ANALOG3_Pin|ANALOG4_Pin;
 8002182:	231e      	movs	r3, #30
 8002184:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002186:	2303      	movs	r3, #3
 8002188:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218a:	2300      	movs	r3, #0
 800218c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800218e:	f107 0314 	add.w	r3, r7, #20
 8002192:	4619      	mov	r1, r3
 8002194:	481d      	ldr	r0, [pc, #116]	@ (800220c <HAL_ADC_MspInit+0xe4>)
 8002196:	f003 fe65 	bl	8005e64 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800219a:	4b1d      	ldr	r3, [pc, #116]	@ (8002210 <HAL_ADC_MspInit+0xe8>)
 800219c:	4a1d      	ldr	r2, [pc, #116]	@ (8002214 <HAL_ADC_MspInit+0xec>)
 800219e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80021a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002210 <HAL_ADC_MspInit+0xe8>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002210 <HAL_ADC_MspInit+0xe8>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80021ac:	4b18      	ldr	r3, [pc, #96]	@ (8002210 <HAL_ADC_MspInit+0xe8>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80021b2:	4b17      	ldr	r3, [pc, #92]	@ (8002210 <HAL_ADC_MspInit+0xe8>)
 80021b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021b8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021ba:	4b15      	ldr	r3, [pc, #84]	@ (8002210 <HAL_ADC_MspInit+0xe8>)
 80021bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80021c0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021c2:	4b13      	ldr	r3, [pc, #76]	@ (8002210 <HAL_ADC_MspInit+0xe8>)
 80021c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021c8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80021ca:	4b11      	ldr	r3, [pc, #68]	@ (8002210 <HAL_ADC_MspInit+0xe8>)
 80021cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021d0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80021d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002210 <HAL_ADC_MspInit+0xe8>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002210 <HAL_ADC_MspInit+0xe8>)
 80021da:	2200      	movs	r2, #0
 80021dc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80021de:	480c      	ldr	r0, [pc, #48]	@ (8002210 <HAL_ADC_MspInit+0xe8>)
 80021e0:	f003 fad0 	bl	8005784 <HAL_DMA_Init>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80021ea:	f001 ff1f 	bl	800402c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a07      	ldr	r2, [pc, #28]	@ (8002210 <HAL_ADC_MspInit+0xe8>)
 80021f2:	639a      	str	r2, [r3, #56]	@ 0x38
 80021f4:	4a06      	ldr	r2, [pc, #24]	@ (8002210 <HAL_ADC_MspInit+0xe8>)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80021fa:	bf00      	nop
 80021fc:	3728      	adds	r7, #40	@ 0x28
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40012000 	.word	0x40012000
 8002208:	40023800 	.word	0x40023800
 800220c:	40020000 	.word	0x40020000
 8002210:	20000494 	.word	0x20000494
 8002214:	40026410 	.word	0x40026410

08002218 <bno055_init>:
 *
 *  Return:
 *  > `bool`: `true` if none of the init steps fail, `false` else
 * ---------------------------------------------------------------
 */
error_bno bno055_init(bno055_t* imu) {
 8002218:	b590      	push	{r4, r7, lr}
 800221a:	b0af      	sub	sp, #188	@ 0xbc
 800221c:	af2a      	add	r7, sp, #168	@ 0xa8
 800221e:	6078      	str	r0, [r7, #4]
    u8 id = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	73bb      	strb	r3, [r7, #14]
    error_bno err;

    imu->addr = (imu->addr << 1);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	799b      	ldrb	r3, [r3, #6]
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	b2da      	uxtb	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	719a      	strb	r2, [r3, #6]
    err = bno055_read_regs(*imu, BNO_CHIP_ID, &id, 1);
 8002230:	687c      	ldr	r4, [r7, #4]
 8002232:	2301      	movs	r3, #1
 8002234:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002236:	f107 030e 	add.w	r3, r7, #14
 800223a:	9328      	str	r3, [sp, #160]	@ 0xa0
 800223c:	2300      	movs	r3, #0
 800223e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002240:	4668      	mov	r0, sp
 8002242:	f104 0310 	add.w	r3, r4, #16
 8002246:	229c      	movs	r2, #156	@ 0x9c
 8002248:	4619      	mov	r1, r3
 800224a:	f00c ff9c 	bl	800f186 <memcpy>
 800224e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002252:	f001 fb6a 	bl	800392a <bno055_read_regs>
 8002256:	4603      	mov	r3, r0
 8002258:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 800225a:	7bfb      	ldrb	r3, [r7, #15]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <bno055_init+0x4c>
        return err;
 8002260:	7bfb      	ldrb	r3, [r7, #15]
 8002262:	e0b6      	b.n	80023d2 <bno055_init+0x1ba>
    }
    if (id != BNO_DEF_CHIP_ID) {
 8002264:	7bbb      	ldrb	r3, [r7, #14]
 8002266:	2ba0      	cmp	r3, #160	@ 0xa0
 8002268:	d001      	beq.n	800226e <bno055_init+0x56>
        return BNO_ERR_WRONG_CHIP_ID;
 800226a:	2306      	movs	r3, #6
 800226c:	e0b1      	b.n	80023d2 <bno055_init+0x1ba>
    }
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 800226e:	2100      	movs	r1, #0
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f001 fa90 	bl	8003796 <bno055_set_opmode>
 8002276:	4603      	mov	r3, r0
 8002278:	73fb      	strb	r3, [r7, #15]
 800227a:	7bfb      	ldrb	r3, [r7, #15]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <bno055_init+0x6c>
        return err;
 8002280:	7bfb      	ldrb	r3, [r7, #15]
 8002282:	e0a6      	b.n	80023d2 <bno055_init+0x1ba>
    }
    osDelay(2);
 8002284:	2002      	movs	r0, #2
 8002286:	f007 ffd7 	bl	800a238 <osDelay>
    bno055_reset(imu);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f001 fb07 	bl	800389e <bno055_reset>
    osDelay(5000);
 8002290:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002294:	f007 ffd0 	bl	800a238 <osDelay>
    if ((err = bno055_set_pwr_mode(imu, BNO_PWR_NORMAL)) != BNO_OK) {
 8002298:	2100      	movs	r1, #0
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f001 faa2 	bl	80037e4 <bno055_set_pwr_mode>
 80022a0:	4603      	mov	r3, r0
 80022a2:	73fb      	strb	r3, [r7, #15]
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <bno055_init+0x96>
        return err;
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
 80022ac:	e091      	b.n	80023d2 <bno055_init+0x1ba>
    }
    osDelay(10);
 80022ae:	200a      	movs	r0, #10
 80022b0:	f007 ffc2 	bl	800a238 <osDelay>
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 80022b4:	2100      	movs	r1, #0
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f001 fb9b 	bl	80039f2 <bno055_set_page>
 80022bc:	4603      	mov	r3, r0
 80022be:	73fb      	strb	r3, [r7, #15]
 80022c0:	7bfb      	ldrb	r3, [r7, #15]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <bno055_init+0xb2>
        return err;
 80022c6:	7bfb      	ldrb	r3, [r7, #15]
 80022c8:	e083      	b.n	80023d2 <bno055_init+0x1ba>
    }
    osDelay(BNO_CONFIG_TIME_DELAY + 5);
 80022ca:	200c      	movs	r0, #12
 80022cc:	f007 ffb4 	bl	800a238 <osDelay>
    bno055_on(imu);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f001 fb07 	bl	80038e4 <bno055_on>
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	791b      	ldrb	r3, [r3, #4]
 80022da:	4619      	mov	r1, r3
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f001 fa5a 	bl	8003796 <bno055_set_opmode>
 80022e2:	4603      	mov	r3, r0
 80022e4:	73fb      	strb	r3, [r7, #15]
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <bno055_init+0xd8>
        return err;
 80022ec:	7bfb      	ldrb	r3, [r7, #15]
 80022ee:	e070      	b.n	80023d2 <bno055_init+0x1ba>
    }
    osDelay(BNO_ANY_TIME_DELAY + 5);
 80022f0:	2018      	movs	r0, #24
 80022f2:	f007 ffa1 	bl	800a238 <osDelay>

    imu->temperature = &bno055_temperature;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a38      	ldr	r2, [pc, #224]	@ (80023dc <bno055_init+0x1c4>)
 80022fa:	625a      	str	r2, [r3, #36]	@ 0x24
    imu->acc_x = &bno055_acc_x;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a38      	ldr	r2, [pc, #224]	@ (80023e0 <bno055_init+0x1c8>)
 8002300:	629a      	str	r2, [r3, #40]	@ 0x28
    imu->acc_y = &bno055_acc_y;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a37      	ldr	r2, [pc, #220]	@ (80023e4 <bno055_init+0x1cc>)
 8002306:	62da      	str	r2, [r3, #44]	@ 0x2c
    imu->acc_z = &bno055_acc_z;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a37      	ldr	r2, [pc, #220]	@ (80023e8 <bno055_init+0x1d0>)
 800230c:	631a      	str	r2, [r3, #48]	@ 0x30
    imu->acc = &bno055_acc;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a36      	ldr	r2, [pc, #216]	@ (80023ec <bno055_init+0x1d4>)
 8002312:	635a      	str	r2, [r3, #52]	@ 0x34
    imu->linear_acc_x = &bno055_linear_acc_x;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a36      	ldr	r2, [pc, #216]	@ (80023f0 <bno055_init+0x1d8>)
 8002318:	639a      	str	r2, [r3, #56]	@ 0x38
    imu->linear_acc_y = &bno055_linear_acc_y;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a35      	ldr	r2, [pc, #212]	@ (80023f4 <bno055_init+0x1dc>)
 800231e:	63da      	str	r2, [r3, #60]	@ 0x3c
    imu->linear_acc_z = &bno055_linear_acc_z;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a35      	ldr	r2, [pc, #212]	@ (80023f8 <bno055_init+0x1e0>)
 8002324:	641a      	str	r2, [r3, #64]	@ 0x40
    imu->linear_acc = &bno055_linear_acc;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a34      	ldr	r2, [pc, #208]	@ (80023fc <bno055_init+0x1e4>)
 800232a:	645a      	str	r2, [r3, #68]	@ 0x44
    imu->gyro_x = &bno055_gyro_x;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a34      	ldr	r2, [pc, #208]	@ (8002400 <bno055_init+0x1e8>)
 8002330:	649a      	str	r2, [r3, #72]	@ 0x48
    imu->gyro_y = &bno055_gyro_y;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a33      	ldr	r2, [pc, #204]	@ (8002404 <bno055_init+0x1ec>)
 8002336:	64da      	str	r2, [r3, #76]	@ 0x4c
    imu->gyro_z = &bno055_gyro_z;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a33      	ldr	r2, [pc, #204]	@ (8002408 <bno055_init+0x1f0>)
 800233c:	651a      	str	r2, [r3, #80]	@ 0x50
    imu->gyro = &bno055_gyro;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a32      	ldr	r2, [pc, #200]	@ (800240c <bno055_init+0x1f4>)
 8002342:	655a      	str	r2, [r3, #84]	@ 0x54
    imu->mag_x = &bno055_mag_x;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a32      	ldr	r2, [pc, #200]	@ (8002410 <bno055_init+0x1f8>)
 8002348:	659a      	str	r2, [r3, #88]	@ 0x58
    imu->mag_y = &bno055_mag_y;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a31      	ldr	r2, [pc, #196]	@ (8002414 <bno055_init+0x1fc>)
 800234e:	65da      	str	r2, [r3, #92]	@ 0x5c
    imu->mag_z = &bno055_mag_z;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a31      	ldr	r2, [pc, #196]	@ (8002418 <bno055_init+0x200>)
 8002354:	661a      	str	r2, [r3, #96]	@ 0x60
    imu->mag = &bno055_mag;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a30      	ldr	r2, [pc, #192]	@ (800241c <bno055_init+0x204>)
 800235a:	665a      	str	r2, [r3, #100]	@ 0x64
    imu->gravity_x = &bno055_gravity_x;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a30      	ldr	r2, [pc, #192]	@ (8002420 <bno055_init+0x208>)
 8002360:	669a      	str	r2, [r3, #104]	@ 0x68
    imu->gravity_y = &bno055_gravity_y;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a2f      	ldr	r2, [pc, #188]	@ (8002424 <bno055_init+0x20c>)
 8002366:	66da      	str	r2, [r3, #108]	@ 0x6c
    imu->gravity_z = &bno055_gravity_z;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a2f      	ldr	r2, [pc, #188]	@ (8002428 <bno055_init+0x210>)
 800236c:	671a      	str	r2, [r3, #112]	@ 0x70
    imu->gravity = &bno055_gravity;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a2e      	ldr	r2, [pc, #184]	@ (800242c <bno055_init+0x214>)
 8002372:	675a      	str	r2, [r3, #116]	@ 0x74
    imu->euler_yaw = &bno055_euler_yaw;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a2e      	ldr	r2, [pc, #184]	@ (8002430 <bno055_init+0x218>)
 8002378:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    imu->euler_roll = &bno055_euler_roll;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a2d      	ldr	r2, [pc, #180]	@ (8002434 <bno055_init+0x21c>)
 8002380:	679a      	str	r2, [r3, #120]	@ 0x78
    imu->euler_pitch = &bno055_euler_pitch;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a2c      	ldr	r2, [pc, #176]	@ (8002438 <bno055_init+0x220>)
 8002386:	67da      	str	r2, [r3, #124]	@ 0x7c
    imu->euler = &bno055_euler;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a2c      	ldr	r2, [pc, #176]	@ (800243c <bno055_init+0x224>)
 800238c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    imu->quaternion_w = &bno055_quaternion_w;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a2b      	ldr	r2, [pc, #172]	@ (8002440 <bno055_init+0x228>)
 8002394:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    imu->quaternion_x = &bno055_quaternion_x;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a2a      	ldr	r2, [pc, #168]	@ (8002444 <bno055_init+0x22c>)
 800239c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    imu->quaternion_y = &bno055_quaternion_y;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a29      	ldr	r2, [pc, #164]	@ (8002448 <bno055_init+0x230>)
 80023a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    imu->quaternion_z = &bno055_quaternion_z;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a28      	ldr	r2, [pc, #160]	@ (800244c <bno055_init+0x234>)
 80023ac:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    imu->quaternion = &bno055_quaternion;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a27      	ldr	r2, [pc, #156]	@ (8002450 <bno055_init+0x238>)
 80023b4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

    imu->acc_config = &bno055_acc_conf;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a26      	ldr	r2, [pc, #152]	@ (8002454 <bno055_init+0x23c>)
 80023bc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    imu->gyr_config = &bno055_gyr_conf;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a25      	ldr	r2, [pc, #148]	@ (8002458 <bno055_init+0x240>)
 80023c4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    imu->mag_config = &bno055_mag_conf;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a24      	ldr	r2, [pc, #144]	@ (800245c <bno055_init+0x244>)
 80023cc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
    return BNO_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd90      	pop	{r4, r7, pc}
 80023da:	bf00      	nop
 80023dc:	08002461 	.word	0x08002461
 80023e0:	080024c9 	.word	0x080024c9
 80023e4:	08002549 	.word	0x08002549
 80023e8:	080025c9 	.word	0x080025c9
 80023ec:	08002649 	.word	0x08002649
 80023f0:	08002719 	.word	0x08002719
 80023f4:	08002799 	.word	0x08002799
 80023f8:	08002819 	.word	0x08002819
 80023fc:	08002899 	.word	0x08002899
 8002400:	08002969 	.word	0x08002969
 8002404:	080029e9 	.word	0x080029e9
 8002408:	08002a69 	.word	0x08002a69
 800240c:	08002ae9 	.word	0x08002ae9
 8002410:	08002bb9 	.word	0x08002bb9
 8002414:	08002c27 	.word	0x08002c27
 8002418:	08002c95 	.word	0x08002c95
 800241c:	08002d03 	.word	0x08002d03
 8002420:	08002dbd 	.word	0x08002dbd
 8002424:	08002e41 	.word	0x08002e41
 8002428:	08002ec5 	.word	0x08002ec5
 800242c:	08002f49 	.word	0x08002f49
 8002430:	08003019 	.word	0x08003019
 8002434:	0800309d 	.word	0x0800309d
 8002438:	08003121 	.word	0x08003121
 800243c:	080031a5 	.word	0x080031a5
 8002440:	08003275 	.word	0x08003275
 8002444:	080032e9 	.word	0x080032e9
 8002448:	0800335d 	.word	0x0800335d
 800244c:	080033d1 	.word	0x080033d1
 8002450:	08003445 	.word	0x08003445
 8002454:	08003529 	.word	0x08003529
 8002458:	080035f9 	.word	0x080035f9
 800245c:	080036c7 	.word	0x080036c7

08002460 <bno055_temperature>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, `BNO_ERR_X` else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_temperature(bno055_t* imu, s8* buf) {
 8002460:	b590      	push	{r4, r7, lr}
 8002462:	b0af      	sub	sp, #188	@ 0xbc
 8002464:	af2a      	add	r7, sp, #168	@ 0xa8
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data = 0;
 800246a:	2300      	movs	r3, #0
 800246c:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_read_regs(*imu, BNO_TEMP, &data, 1)) != BNO_OK) {
 800246e:	687c      	ldr	r4, [r7, #4]
 8002470:	2301      	movs	r3, #1
 8002472:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002474:	f107 030e 	add.w	r3, r7, #14
 8002478:	9328      	str	r3, [sp, #160]	@ 0xa0
 800247a:	2334      	movs	r3, #52	@ 0x34
 800247c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800247e:	4668      	mov	r0, sp
 8002480:	f104 0310 	add.w	r3, r4, #16
 8002484:	229c      	movs	r2, #156	@ 0x9c
 8002486:	4619      	mov	r1, r3
 8002488:	f00c fe7d 	bl	800f186 <memcpy>
 800248c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002490:	f001 fa4b 	bl	800392a <bno055_read_regs>
 8002494:	4603      	mov	r3, r0
 8002496:	73fb      	strb	r3, [r7, #15]
 8002498:	7bfb      	ldrb	r3, [r7, #15]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <bno055_temperature+0x42>
        return err;
 800249e:	7bfb      	ldrb	r3, [r7, #15]
 80024a0:	e00d      	b.n	80024be <bno055_temperature+0x5e>
    }
    *buf = (imu->_temp_unit) ? data * 2 : data;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	7bdb      	ldrb	r3, [r3, #15]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d004      	beq.n	80024b4 <bno055_temperature+0x54>
 80024aa:	7bbb      	ldrb	r3, [r7, #14]
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	b25b      	sxtb	r3, r3
 80024b2:	e001      	b.n	80024b8 <bno055_temperature+0x58>
 80024b4:	7bbb      	ldrb	r3, [r7, #14]
 80024b6:	b25b      	sxtb	r3, r3
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	7013      	strb	r3, [r2, #0]
    return BNO_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3714      	adds	r7, #20
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd90      	pop	{r4, r7, pc}
	...

080024c8 <bno055_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_x(bno055_t* imu, f32* buf) {
 80024c8:	b590      	push	{r4, r7, lr}
 80024ca:	b0af      	sub	sp, #188	@ 0xbc
 80024cc:	af2a      	add	r7, sp, #168	@ 0xa8
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 2)) != BNO_OK) {
 80024d2:	687c      	ldr	r4, [r7, #4]
 80024d4:	2302      	movs	r3, #2
 80024d6:	9329      	str	r3, [sp, #164]	@ 0xa4
 80024d8:	f107 030c 	add.w	r3, r7, #12
 80024dc:	9328      	str	r3, [sp, #160]	@ 0xa0
 80024de:	2308      	movs	r3, #8
 80024e0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80024e2:	4668      	mov	r0, sp
 80024e4:	f104 0310 	add.w	r3, r4, #16
 80024e8:	229c      	movs	r2, #156	@ 0x9c
 80024ea:	4619      	mov	r1, r3
 80024ec:	f00c fe4b 	bl	800f186 <memcpy>
 80024f0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80024f4:	f001 fa19 	bl	800392a <bno055_read_regs>
 80024f8:	4603      	mov	r3, r0
 80024fa:	73fb      	strb	r3, [r7, #15]
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <bno055_acc_x+0x3e>
        return err;
 8002502:	7bfb      	ldrb	r3, [r7, #15]
 8002504:	e01a      	b.n	800253c <bno055_acc_x+0x74>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8002506:	7b7b      	ldrb	r3, [r7, #13]
 8002508:	b21b      	sxth	r3, r3
 800250a:	021b      	lsls	r3, r3, #8
 800250c:	b21a      	sxth	r2, r3
 800250e:	7b3b      	ldrb	r3, [r7, #12]
 8002510:	b21b      	sxth	r3, r3
 8002512:	4313      	orrs	r3, r2
 8002514:	b21b      	sxth	r3, r3
 8002516:	ee07 3a90 	vmov	s15, r3
 800251a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8002522:	2b00      	cmp	r3, #0
 8002524:	d102      	bne.n	800252c <bno055_acc_x+0x64>
 8002526:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002544 <bno055_acc_x+0x7c>
 800252a:	e001      	b.n	8002530 <bno055_acc_x+0x68>
 800252c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8002530:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800253a:	2300      	movs	r3, #0
};
 800253c:	4618      	mov	r0, r3
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	bd90      	pop	{r4, r7, pc}
 8002544:	42c80000 	.word	0x42c80000

08002548 <bno055_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_y(bno055_t* imu, f32* buf) {
 8002548:	b590      	push	{r4, r7, lr}
 800254a:	b0af      	sub	sp, #188	@ 0xbc
 800254c:	af2a      	add	r7, sp, #168	@ 0xa8
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8002552:	687c      	ldr	r4, [r7, #4]
 8002554:	2302      	movs	r3, #2
 8002556:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002558:	f107 030c 	add.w	r3, r7, #12
 800255c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800255e:	230a      	movs	r3, #10
 8002560:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002562:	4668      	mov	r0, sp
 8002564:	f104 0310 	add.w	r3, r4, #16
 8002568:	229c      	movs	r2, #156	@ 0x9c
 800256a:	4619      	mov	r1, r3
 800256c:	f00c fe0b 	bl	800f186 <memcpy>
 8002570:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002574:	f001 f9d9 	bl	800392a <bno055_read_regs>
 8002578:	4603      	mov	r3, r0
 800257a:	73fb      	strb	r3, [r7, #15]
 800257c:	7bfb      	ldrb	r3, [r7, #15]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <bno055_acc_y+0x3e>
        return err;
 8002582:	7bfb      	ldrb	r3, [r7, #15]
 8002584:	e01a      	b.n	80025bc <bno055_acc_y+0x74>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8002586:	7b7b      	ldrb	r3, [r7, #13]
 8002588:	b21b      	sxth	r3, r3
 800258a:	021b      	lsls	r3, r3, #8
 800258c:	b21a      	sxth	r2, r3
 800258e:	7b3b      	ldrb	r3, [r7, #12]
 8002590:	b21b      	sxth	r3, r3
 8002592:	4313      	orrs	r3, r2
 8002594:	b21b      	sxth	r3, r3
 8002596:	ee07 3a90 	vmov	s15, r3
 800259a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d102      	bne.n	80025ac <bno055_acc_y+0x64>
 80025a6:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80025c4 <bno055_acc_y+0x7c>
 80025aa:	e001      	b.n	80025b0 <bno055_acc_y+0x68>
 80025ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 80025b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80025ba:	2300      	movs	r3, #0
};
 80025bc:	4618      	mov	r0, r3
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd90      	pop	{r4, r7, pc}
 80025c4:	42c80000 	.word	0x42c80000

080025c8 <bno055_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc_z(bno055_t* imu, f32* buf) {
 80025c8:	b590      	push	{r4, r7, lr}
 80025ca:	b0af      	sub	sp, #188	@ 0xbc
 80025cc:	af2a      	add	r7, sp, #168	@ 0xa8
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_Z_LSB, data, 2)) != BNO_OK) {
 80025d2:	687c      	ldr	r4, [r7, #4]
 80025d4:	2302      	movs	r3, #2
 80025d6:	9329      	str	r3, [sp, #164]	@ 0xa4
 80025d8:	f107 030c 	add.w	r3, r7, #12
 80025dc:	9328      	str	r3, [sp, #160]	@ 0xa0
 80025de:	230c      	movs	r3, #12
 80025e0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80025e2:	4668      	mov	r0, sp
 80025e4:	f104 0310 	add.w	r3, r4, #16
 80025e8:	229c      	movs	r2, #156	@ 0x9c
 80025ea:	4619      	mov	r1, r3
 80025ec:	f00c fdcb 	bl	800f186 <memcpy>
 80025f0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80025f4:	f001 f999 	bl	800392a <bno055_read_regs>
 80025f8:	4603      	mov	r3, r0
 80025fa:	73fb      	strb	r3, [r7, #15]
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <bno055_acc_z+0x3e>
        return err;
 8002602:	7bfb      	ldrb	r3, [r7, #15]
 8002604:	e01a      	b.n	800263c <bno055_acc_z+0x74>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8002606:	7b7b      	ldrb	r3, [r7, #13]
 8002608:	b21b      	sxth	r3, r3
 800260a:	021b      	lsls	r3, r3, #8
 800260c:	b21a      	sxth	r2, r3
 800260e:	7b3b      	ldrb	r3, [r7, #12]
 8002610:	b21b      	sxth	r3, r3
 8002612:	4313      	orrs	r3, r2
 8002614:	b21b      	sxth	r3, r3
 8002616:	ee07 3a90 	vmov	s15, r3
 800261a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8002622:	2b00      	cmp	r3, #0
 8002624:	d102      	bne.n	800262c <bno055_acc_z+0x64>
 8002626:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002644 <bno055_acc_z+0x7c>
 800262a:	e001      	b.n	8002630 <bno055_acc_z+0x68>
 800262c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8002630:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800263a:	2300      	movs	r3, #0
};
 800263c:	4618      	mov	r0, r3
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	bd90      	pop	{r4, r7, pc}
 8002644:	42c80000 	.word	0x42c80000

08002648 <bno055_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 8002648:	b590      	push	{r4, r7, lr}
 800264a:	b0b1      	sub	sp, #196	@ 0xc4
 800264c:	af2a      	add	r7, sp, #168	@ 0xa8
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_ACC_DATA_X_LSB, data, 6)) != BNO_OK) {
 8002652:	687c      	ldr	r4, [r7, #4]
 8002654:	2306      	movs	r3, #6
 8002656:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002658:	f107 0308 	add.w	r3, r7, #8
 800265c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800265e:	2308      	movs	r3, #8
 8002660:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002662:	4668      	mov	r0, sp
 8002664:	f104 0310 	add.w	r3, r4, #16
 8002668:	229c      	movs	r2, #156	@ 0x9c
 800266a:	4619      	mov	r1, r3
 800266c:	f00c fd8b 	bl	800f186 <memcpy>
 8002670:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002674:	f001 f959 	bl	800392a <bno055_read_regs>
 8002678:	4603      	mov	r3, r0
 800267a:	75fb      	strb	r3, [r7, #23]
 800267c:	7dfb      	ldrb	r3, [r7, #23]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <bno055_acc+0x3e>
        return err;
 8002682:	7dfb      	ldrb	r3, [r7, #23]
 8002684:	e042      	b.n	800270c <bno055_acc+0xc4>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <bno055_acc+0x4a>
 800268e:	4b21      	ldr	r3, [pc, #132]	@ (8002714 <bno055_acc+0xcc>)
 8002690:	e001      	b.n	8002696 <bno055_acc+0x4e>
 8002692:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8002696:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8002698:	7a7b      	ldrb	r3, [r7, #9]
 800269a:	b21b      	sxth	r3, r3
 800269c:	021b      	lsls	r3, r3, #8
 800269e:	b21a      	sxth	r2, r3
 80026a0:	7a3b      	ldrb	r3, [r7, #8]
 80026a2:	b21b      	sxth	r3, r3
 80026a4:	4313      	orrs	r3, r2
 80026a6:	b21b      	sxth	r3, r3
 80026a8:	ee07 3a90 	vmov	s15, r3
 80026ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80026b0:	ed97 7a04 	vldr	s14, [r7, #16]
 80026b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 80026be:	7afb      	ldrb	r3, [r7, #11]
 80026c0:	b21b      	sxth	r3, r3
 80026c2:	021b      	lsls	r3, r3, #8
 80026c4:	b21a      	sxth	r2, r3
 80026c6:	7abb      	ldrb	r3, [r7, #10]
 80026c8:	b21b      	sxth	r3, r3
 80026ca:	4313      	orrs	r3, r2
 80026cc:	b21b      	sxth	r3, r3
 80026ce:	ee07 3a90 	vmov	s15, r3
 80026d2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80026d6:	ed97 7a04 	vldr	s14, [r7, #16]
 80026da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 80026e4:	7b7b      	ldrb	r3, [r7, #13]
 80026e6:	b21b      	sxth	r3, r3
 80026e8:	021b      	lsls	r3, r3, #8
 80026ea:	b21a      	sxth	r2, r3
 80026ec:	7b3b      	ldrb	r3, [r7, #12]
 80026ee:	b21b      	sxth	r3, r3
 80026f0:	4313      	orrs	r3, r2
 80026f2:	b21b      	sxth	r3, r3
 80026f4:	ee07 3a90 	vmov	s15, r3
 80026f8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80026fc:	ed97 7a04 	vldr	s14, [r7, #16]
 8002700:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 800270a:	2300      	movs	r3, #0
};
 800270c:	4618      	mov	r0, r3
 800270e:	371c      	adds	r7, #28
 8002710:	46bd      	mov	sp, r7
 8002712:	bd90      	pop	{r4, r7, pc}
 8002714:	42c80000 	.word	0x42c80000

08002718 <bno055_linear_acc_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_x(bno055_t* imu, f32* buf) {
 8002718:	b590      	push	{r4, r7, lr}
 800271a:	b0af      	sub	sp, #188	@ 0xbc
 800271c:	af2a      	add	r7, sp, #168	@ 0xa8
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 2)) != BNO_OK) {
 8002722:	687c      	ldr	r4, [r7, #4]
 8002724:	2302      	movs	r3, #2
 8002726:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002728:	f107 030c 	add.w	r3, r7, #12
 800272c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800272e:	2328      	movs	r3, #40	@ 0x28
 8002730:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002732:	4668      	mov	r0, sp
 8002734:	f104 0310 	add.w	r3, r4, #16
 8002738:	229c      	movs	r2, #156	@ 0x9c
 800273a:	4619      	mov	r1, r3
 800273c:	f00c fd23 	bl	800f186 <memcpy>
 8002740:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002744:	f001 f8f1 	bl	800392a <bno055_read_regs>
 8002748:	4603      	mov	r3, r0
 800274a:	73fb      	strb	r3, [r7, #15]
 800274c:	7bfb      	ldrb	r3, [r7, #15]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <bno055_linear_acc_x+0x3e>
        return err;
 8002752:	7bfb      	ldrb	r3, [r7, #15]
 8002754:	e01a      	b.n	800278c <bno055_linear_acc_x+0x74>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8002756:	7b7b      	ldrb	r3, [r7, #13]
 8002758:	b21b      	sxth	r3, r3
 800275a:	021b      	lsls	r3, r3, #8
 800275c:	b21a      	sxth	r2, r3
 800275e:	7b3b      	ldrb	r3, [r7, #12]
 8002760:	b21b      	sxth	r3, r3
 8002762:	4313      	orrs	r3, r2
 8002764:	b21b      	sxth	r3, r3
 8002766:	ee07 3a90 	vmov	s15, r3
 800276a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8002772:	2b00      	cmp	r3, #0
 8002774:	d102      	bne.n	800277c <bno055_linear_acc_x+0x64>
 8002776:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002794 <bno055_linear_acc_x+0x7c>
 800277a:	e001      	b.n	8002780 <bno055_linear_acc_x+0x68>
 800277c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8002780:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800278a:	2300      	movs	r3, #0
};
 800278c:	4618      	mov	r0, r3
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	bd90      	pop	{r4, r7, pc}
 8002794:	42c80000 	.word	0x42c80000

08002798 <bno055_linear_acc_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_y(bno055_t* imu, f32* buf) {
 8002798:	b590      	push	{r4, r7, lr}
 800279a:	b0af      	sub	sp, #188	@ 0xbc
 800279c:	af2a      	add	r7, sp, #168	@ 0xa8
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80027a2:	687c      	ldr	r4, [r7, #4]
 80027a4:	2302      	movs	r3, #2
 80027a6:	9329      	str	r3, [sp, #164]	@ 0xa4
 80027a8:	f107 030c 	add.w	r3, r7, #12
 80027ac:	9328      	str	r3, [sp, #160]	@ 0xa0
 80027ae:	232a      	movs	r3, #42	@ 0x2a
 80027b0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80027b2:	4668      	mov	r0, sp
 80027b4:	f104 0310 	add.w	r3, r4, #16
 80027b8:	229c      	movs	r2, #156	@ 0x9c
 80027ba:	4619      	mov	r1, r3
 80027bc:	f00c fce3 	bl	800f186 <memcpy>
 80027c0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80027c4:	f001 f8b1 	bl	800392a <bno055_read_regs>
 80027c8:	4603      	mov	r3, r0
 80027ca:	73fb      	strb	r3, [r7, #15]
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <bno055_linear_acc_y+0x3e>
        return err;
 80027d2:	7bfb      	ldrb	r3, [r7, #15]
 80027d4:	e01a      	b.n	800280c <bno055_linear_acc_y+0x74>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80027d6:	7b7b      	ldrb	r3, [r7, #13]
 80027d8:	b21b      	sxth	r3, r3
 80027da:	021b      	lsls	r3, r3, #8
 80027dc:	b21a      	sxth	r2, r3
 80027de:	7b3b      	ldrb	r3, [r7, #12]
 80027e0:	b21b      	sxth	r3, r3
 80027e2:	4313      	orrs	r3, r2
 80027e4:	b21b      	sxth	r3, r3
 80027e6:	ee07 3a90 	vmov	s15, r3
 80027ea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d102      	bne.n	80027fc <bno055_linear_acc_y+0x64>
 80027f6:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002814 <bno055_linear_acc_y+0x7c>
 80027fa:	e001      	b.n	8002800 <bno055_linear_acc_y+0x68>
 80027fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8002800:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800280a:	2300      	movs	r3, #0
};
 800280c:	4618      	mov	r0, r3
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	bd90      	pop	{r4, r7, pc}
 8002814:	42c80000 	.word	0x42c80000

08002818 <bno055_linear_acc_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc_z(bno055_t* imu, f32* buf) {
 8002818:	b590      	push	{r4, r7, lr}
 800281a:	b0af      	sub	sp, #188	@ 0xbc
 800281c:	af2a      	add	r7, sp, #168	@ 0xa8
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8002822:	687c      	ldr	r4, [r7, #4]
 8002824:	2302      	movs	r3, #2
 8002826:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002828:	f107 030c 	add.w	r3, r7, #12
 800282c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800282e:	232c      	movs	r3, #44	@ 0x2c
 8002830:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002832:	4668      	mov	r0, sp
 8002834:	f104 0310 	add.w	r3, r4, #16
 8002838:	229c      	movs	r2, #156	@ 0x9c
 800283a:	4619      	mov	r1, r3
 800283c:	f00c fca3 	bl	800f186 <memcpy>
 8002840:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002844:	f001 f871 	bl	800392a <bno055_read_regs>
 8002848:	4603      	mov	r3, r0
 800284a:	73fb      	strb	r3, [r7, #15]
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <bno055_linear_acc_z+0x3e>
        return err;
 8002852:	7bfb      	ldrb	r3, [r7, #15]
 8002854:	e01a      	b.n	800288c <bno055_linear_acc_z+0x74>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8002856:	7b7b      	ldrb	r3, [r7, #13]
 8002858:	b21b      	sxth	r3, r3
 800285a:	021b      	lsls	r3, r3, #8
 800285c:	b21a      	sxth	r2, r3
 800285e:	7b3b      	ldrb	r3, [r7, #12]
 8002860:	b21b      	sxth	r3, r3
 8002862:	4313      	orrs	r3, r2
 8002864:	b21b      	sxth	r3, r3
 8002866:	ee07 3a90 	vmov	s15, r3
 800286a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	7b9b      	ldrb	r3, [r3, #14]
                                                     : BNO_ACC_SCALE_MG);
 8002872:	2b00      	cmp	r3, #0
 8002874:	d102      	bne.n	800287c <bno055_linear_acc_z+0x64>
 8002876:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002894 <bno055_linear_acc_z+0x7c>
 800287a:	e001      	b.n	8002880 <bno055_linear_acc_z+0x68>
 800287c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
    *buf = (s16)((data[1] << 8) | data[0]) /
 8002880:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800288a:	2300      	movs	r3, #0
};
 800288c:	4618      	mov	r0, r3
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	bd90      	pop	{r4, r7, pc}
 8002894:	42c80000 	.word	0x42c80000

08002898 <bno055_linear_acc>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_linear_acc(bno055_t* imu, bno055_vec3_t* xyz) {
 8002898:	b590      	push	{r4, r7, lr}
 800289a:	b0b1      	sub	sp, #196	@ 0xc4
 800289c:	af2a      	add	r7, sp, #168	@ 0xa8
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_LIA_DATA_X_LSB, data, 6)) != BNO_OK) {
 80028a2:	687c      	ldr	r4, [r7, #4]
 80028a4:	2306      	movs	r3, #6
 80028a6:	9329      	str	r3, [sp, #164]	@ 0xa4
 80028a8:	f107 0308 	add.w	r3, r7, #8
 80028ac:	9328      	str	r3, [sp, #160]	@ 0xa0
 80028ae:	2328      	movs	r3, #40	@ 0x28
 80028b0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80028b2:	4668      	mov	r0, sp
 80028b4:	f104 0310 	add.w	r3, r4, #16
 80028b8:	229c      	movs	r2, #156	@ 0x9c
 80028ba:	4619      	mov	r1, r3
 80028bc:	f00c fc63 	bl	800f186 <memcpy>
 80028c0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80028c4:	f001 f831 	bl	800392a <bno055_read_regs>
 80028c8:	4603      	mov	r3, r0
 80028ca:	75fb      	strb	r3, [r7, #23]
 80028cc:	7dfb      	ldrb	r3, [r7, #23]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <bno055_linear_acc+0x3e>
        return err;
 80028d2:	7dfb      	ldrb	r3, [r7, #23]
 80028d4:	e042      	b.n	800295c <bno055_linear_acc+0xc4>
    }
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	7b9b      	ldrb	r3, [r3, #14]
                                                           : BNO_ACC_SCALE_MG;
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <bno055_linear_acc+0x4a>
 80028de:	4b21      	ldr	r3, [pc, #132]	@ (8002964 <bno055_linear_acc+0xcc>)
 80028e0:	e001      	b.n	80028e6 <bno055_linear_acc+0x4e>
 80028e2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    float scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 80028e6:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 80028e8:	7a7b      	ldrb	r3, [r7, #9]
 80028ea:	b21b      	sxth	r3, r3
 80028ec:	021b      	lsls	r3, r3, #8
 80028ee:	b21a      	sxth	r2, r3
 80028f0:	7a3b      	ldrb	r3, [r7, #8]
 80028f2:	b21b      	sxth	r3, r3
 80028f4:	4313      	orrs	r3, r2
 80028f6:	b21b      	sxth	r3, r3
 80028f8:	ee07 3a90 	vmov	s15, r3
 80028fc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002900:	ed97 7a04 	vldr	s14, [r7, #16]
 8002904:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 800290e:	7afb      	ldrb	r3, [r7, #11]
 8002910:	b21b      	sxth	r3, r3
 8002912:	021b      	lsls	r3, r3, #8
 8002914:	b21a      	sxth	r2, r3
 8002916:	7abb      	ldrb	r3, [r7, #10]
 8002918:	b21b      	sxth	r3, r3
 800291a:	4313      	orrs	r3, r2
 800291c:	b21b      	sxth	r3, r3
 800291e:	ee07 3a90 	vmov	s15, r3
 8002922:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002926:	ed97 7a04 	vldr	s14, [r7, #16]
 800292a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8002934:	7b7b      	ldrb	r3, [r7, #13]
 8002936:	b21b      	sxth	r3, r3
 8002938:	021b      	lsls	r3, r3, #8
 800293a:	b21a      	sxth	r2, r3
 800293c:	7b3b      	ldrb	r3, [r7, #12]
 800293e:	b21b      	sxth	r3, r3
 8002940:	4313      	orrs	r3, r2
 8002942:	b21b      	sxth	r3, r3
 8002944:	ee07 3a90 	vmov	s15, r3
 8002948:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800294c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002950:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 800295a:	2300      	movs	r3, #0
};
 800295c:	4618      	mov	r0, r3
 800295e:	371c      	adds	r7, #28
 8002960:	46bd      	mov	sp, r7
 8002962:	bd90      	pop	{r4, r7, pc}
 8002964:	42c80000 	.word	0x42c80000

08002968 <bno055_gyro_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_x(bno055_t* imu, f32* buf) {
 8002968:	b590      	push	{r4, r7, lr}
 800296a:	b0af      	sub	sp, #188	@ 0xbc
 800296c:	af2a      	add	r7, sp, #168	@ 0xa8
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 2)) != BNO_OK) {
 8002972:	687c      	ldr	r4, [r7, #4]
 8002974:	2302      	movs	r3, #2
 8002976:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002978:	f107 030c 	add.w	r3, r7, #12
 800297c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800297e:	2314      	movs	r3, #20
 8002980:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002982:	4668      	mov	r0, sp
 8002984:	f104 0310 	add.w	r3, r4, #16
 8002988:	229c      	movs	r2, #156	@ 0x9c
 800298a:	4619      	mov	r1, r3
 800298c:	f00c fbfb 	bl	800f186 <memcpy>
 8002990:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002994:	f000 ffc9 	bl	800392a <bno055_read_regs>
 8002998:	4603      	mov	r3, r0
 800299a:	73fb      	strb	r3, [r7, #15]
 800299c:	7bfb      	ldrb	r3, [r7, #15]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <bno055_gyro_x+0x3e>
        return err;
 80029a2:	7bfb      	ldrb	r3, [r7, #15]
 80029a4:	e01a      	b.n	80029dc <bno055_gyro_x+0x74>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 80029a6:	7b7b      	ldrb	r3, [r7, #13]
 80029a8:	b21b      	sxth	r3, r3
 80029aa:	021b      	lsls	r3, r3, #8
 80029ac:	b21a      	sxth	r2, r3
 80029ae:	7b3b      	ldrb	r3, [r7, #12]
 80029b0:	b21b      	sxth	r3, r3
 80029b2:	4313      	orrs	r3, r2
 80029b4:	b21b      	sxth	r3, r3
 80029b6:	ee07 3a90 	vmov	s15, r3
 80029ba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d102      	bne.n	80029cc <bno055_gyro_x+0x64>
 80029c6:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 80029ca:	e001      	b.n	80029d0 <bno055_gyro_x+0x68>
 80029cc:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80029e4 <bno055_gyro_x+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 80029d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80029da:	2300      	movs	r3, #0
};
 80029dc:	4618      	mov	r0, r3
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd90      	pop	{r4, r7, pc}
 80029e4:	44610000 	.word	0x44610000

080029e8 <bno055_gyro_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_y(bno055_t* imu, f32* buf) {
 80029e8:	b590      	push	{r4, r7, lr}
 80029ea:	b0af      	sub	sp, #188	@ 0xbc
 80029ec:	af2a      	add	r7, sp, #168	@ 0xa8
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Y_LSB, data, 2)) != BNO_OK) {
 80029f2:	687c      	ldr	r4, [r7, #4]
 80029f4:	2302      	movs	r3, #2
 80029f6:	9329      	str	r3, [sp, #164]	@ 0xa4
 80029f8:	f107 030c 	add.w	r3, r7, #12
 80029fc:	9328      	str	r3, [sp, #160]	@ 0xa0
 80029fe:	2316      	movs	r3, #22
 8002a00:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002a02:	4668      	mov	r0, sp
 8002a04:	f104 0310 	add.w	r3, r4, #16
 8002a08:	229c      	movs	r2, #156	@ 0x9c
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	f00c fbbb 	bl	800f186 <memcpy>
 8002a10:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002a14:	f000 ff89 	bl	800392a <bno055_read_regs>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	73fb      	strb	r3, [r7, #15]
 8002a1c:	7bfb      	ldrb	r3, [r7, #15]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <bno055_gyro_y+0x3e>
        return err;
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
 8002a24:	e01a      	b.n	8002a5c <bno055_gyro_y+0x74>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8002a26:	7b7b      	ldrb	r3, [r7, #13]
 8002a28:	b21b      	sxth	r3, r3
 8002a2a:	021b      	lsls	r3, r3, #8
 8002a2c:	b21a      	sxth	r2, r3
 8002a2e:	7b3b      	ldrb	r3, [r7, #12]
 8002a30:	b21b      	sxth	r3, r3
 8002a32:	4313      	orrs	r3, r2
 8002a34:	b21b      	sxth	r3, r3
 8002a36:	ee07 3a90 	vmov	s15, r3
 8002a3a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d102      	bne.n	8002a4c <bno055_gyro_y+0x64>
 8002a46:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8002a4a:	e001      	b.n	8002a50 <bno055_gyro_y+0x68>
 8002a4c:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002a64 <bno055_gyro_y+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 8002a50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002a5a:	2300      	movs	r3, #0
};
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3714      	adds	r7, #20
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd90      	pop	{r4, r7, pc}
 8002a64:	44610000 	.word	0x44610000

08002a68 <bno055_gyro_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro_z(bno055_t* imu, f32* buf) {
 8002a68:	b590      	push	{r4, r7, lr}
 8002a6a:	b0af      	sub	sp, #188	@ 0xbc
 8002a6c:	af2a      	add	r7, sp, #168	@ 0xa8
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8002a72:	687c      	ldr	r4, [r7, #4]
 8002a74:	2302      	movs	r3, #2
 8002a76:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002a78:	f107 030c 	add.w	r3, r7, #12
 8002a7c:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002a7e:	2318      	movs	r3, #24
 8002a80:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002a82:	4668      	mov	r0, sp
 8002a84:	f104 0310 	add.w	r3, r4, #16
 8002a88:	229c      	movs	r2, #156	@ 0x9c
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	f00c fb7b 	bl	800f186 <memcpy>
 8002a90:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002a94:	f000 ff49 	bl	800392a <bno055_read_regs>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	73fb      	strb	r3, [r7, #15]
 8002a9c:	7bfb      	ldrb	r3, [r7, #15]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <bno055_gyro_z+0x3e>
        return err;
 8002aa2:	7bfb      	ldrb	r3, [r7, #15]
 8002aa4:	e01a      	b.n	8002adc <bno055_gyro_z+0x74>
    }

    *buf = (s16)((data[1] << 8) | data[0]) /
 8002aa6:	7b7b      	ldrb	r3, [r7, #13]
 8002aa8:	b21b      	sxth	r3, r3
 8002aaa:	021b      	lsls	r3, r3, #8
 8002aac:	b21a      	sxth	r2, r3
 8002aae:	7b3b      	ldrb	r3, [r7, #12]
 8002ab0:	b21b      	sxth	r3, r3
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	b21b      	sxth	r3, r3
 8002ab6:	ee07 3a90 	vmov	s15, r3
 8002aba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
           ((imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	7c1b      	ldrb	r3, [r3, #16]
                                                 : BNO_GYR_SCALE_RPS);
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d102      	bne.n	8002acc <bno055_gyro_z+0x64>
 8002ac6:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8002aca:	e001      	b.n	8002ad0 <bno055_gyro_z+0x68>
 8002acc:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002ae4 <bno055_gyro_z+0x7c>
    *buf = (s16)((data[1] << 8) | data[0]) /
 8002ad0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002ada:	2300      	movs	r3, #0
};
 8002adc:	4618      	mov	r0, r3
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd90      	pop	{r4, r7, pc}
 8002ae4:	44610000 	.word	0x44610000

08002ae8 <bno055_gyro>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gyro(bno055_t* imu, bno055_vec3_t* xyz) {
 8002ae8:	b590      	push	{r4, r7, lr}
 8002aea:	b0b1      	sub	sp, #196	@ 0xc4
 8002aec:	af2a      	add	r7, sp, #168	@ 0xa8
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GYR_DATA_X_LSB, data, 6)) != BNO_OK) {
 8002af2:	687c      	ldr	r4, [r7, #4]
 8002af4:	2306      	movs	r3, #6
 8002af6:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002af8:	f107 0308 	add.w	r3, r7, #8
 8002afc:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002afe:	2314      	movs	r3, #20
 8002b00:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002b02:	4668      	mov	r0, sp
 8002b04:	f104 0310 	add.w	r3, r4, #16
 8002b08:	229c      	movs	r2, #156	@ 0x9c
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	f00c fb3b 	bl	800f186 <memcpy>
 8002b10:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002b14:	f000 ff09 	bl	800392a <bno055_read_regs>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	75fb      	strb	r3, [r7, #23]
 8002b1c:	7dfb      	ldrb	r3, [r7, #23]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <bno055_gyro+0x3e>
        return err;
 8002b22:	7dfb      	ldrb	r3, [r7, #23]
 8002b24:	e042      	b.n	8002bac <bno055_gyro+0xc4>
    }

    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	7c1b      	ldrb	r3, [r3, #16]
                                                     : BNO_GYR_SCALE_RPS;
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d102      	bne.n	8002b34 <bno055_gyro+0x4c>
 8002b2e:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8002b32:	e000      	b.n	8002b36 <bno055_gyro+0x4e>
 8002b34:	4b1f      	ldr	r3, [pc, #124]	@ (8002bb4 <bno055_gyro+0xcc>)
    f32 scale = (imu->_gyr_unit == BNO_GYR_UNIT_DPS) ? BNO_GYR_SCALE_DPS
 8002b36:	613b      	str	r3, [r7, #16]
    xyz->x = (s16)((data[1] << 8) | data[0]) / scale;
 8002b38:	7a7b      	ldrb	r3, [r7, #9]
 8002b3a:	b21b      	sxth	r3, r3
 8002b3c:	021b      	lsls	r3, r3, #8
 8002b3e:	b21a      	sxth	r2, r3
 8002b40:	7a3b      	ldrb	r3, [r7, #8]
 8002b42:	b21b      	sxth	r3, r3
 8002b44:	4313      	orrs	r3, r2
 8002b46:	b21b      	sxth	r3, r3
 8002b48:	ee07 3a90 	vmov	s15, r3
 8002b4c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002b50:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / scale;
 8002b5e:	7afb      	ldrb	r3, [r7, #11]
 8002b60:	b21b      	sxth	r3, r3
 8002b62:	021b      	lsls	r3, r3, #8
 8002b64:	b21a      	sxth	r2, r3
 8002b66:	7abb      	ldrb	r3, [r7, #10]
 8002b68:	b21b      	sxth	r3, r3
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	b21b      	sxth	r3, r3
 8002b6e:	ee07 3a90 	vmov	s15, r3
 8002b72:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002b76:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / scale;
 8002b84:	7b7b      	ldrb	r3, [r7, #13]
 8002b86:	b21b      	sxth	r3, r3
 8002b88:	021b      	lsls	r3, r3, #8
 8002b8a:	b21a      	sxth	r2, r3
 8002b8c:	7b3b      	ldrb	r3, [r7, #12]
 8002b8e:	b21b      	sxth	r3, r3
 8002b90:	4313      	orrs	r3, r2
 8002b92:	b21b      	sxth	r3, r3
 8002b94:	ee07 3a90 	vmov	s15, r3
 8002b98:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002b9c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002ba0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	371c      	adds	r7, #28
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd90      	pop	{r4, r7, pc}
 8002bb4:	44610000 	.word	0x44610000

08002bb8 <bno055_mag_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_x(bno055_t* imu, f32* buf) {
 8002bb8:	b590      	push	{r4, r7, lr}
 8002bba:	b0af      	sub	sp, #188	@ 0xbc
 8002bbc:	af2a      	add	r7, sp, #168	@ 0xa8
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 2)) != BNO_OK) {
 8002bc2:	687c      	ldr	r4, [r7, #4]
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002bc8:	f107 030c 	add.w	r3, r7, #12
 8002bcc:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002bce:	230e      	movs	r3, #14
 8002bd0:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002bd2:	4668      	mov	r0, sp
 8002bd4:	f104 0310 	add.w	r3, r4, #16
 8002bd8:	229c      	movs	r2, #156	@ 0x9c
 8002bda:	4619      	mov	r1, r3
 8002bdc:	f00c fad3 	bl	800f186 <memcpy>
 8002be0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002be4:	f000 fea1 	bl	800392a <bno055_read_regs>
 8002be8:	4603      	mov	r3, r0
 8002bea:	73fb      	strb	r3, [r7, #15]
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <bno055_mag_x+0x3e>
        return err;
 8002bf2:	7bfb      	ldrb	r3, [r7, #15]
 8002bf4:	e013      	b.n	8002c1e <bno055_mag_x+0x66>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8002bf6:	7b7b      	ldrb	r3, [r7, #13]
 8002bf8:	b21b      	sxth	r3, r3
 8002bfa:	021b      	lsls	r3, r3, #8
 8002bfc:	b21a      	sxth	r2, r3
 8002bfe:	7b3b      	ldrb	r3, [r7, #12]
 8002c00:	b21b      	sxth	r3, r3
 8002c02:	4313      	orrs	r3, r2
 8002c04:	b21b      	sxth	r3, r3
 8002c06:	ee07 3a90 	vmov	s15, r3
 8002c0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c0e:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8002c12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd90      	pop	{r4, r7, pc}

08002c26 <bno055_mag_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_y(bno055_t* imu, f32* buf) {
 8002c26:	b590      	push	{r4, r7, lr}
 8002c28:	b0af      	sub	sp, #188	@ 0xbc
 8002c2a:	af2a      	add	r7, sp, #168	@ 0xa8
 8002c2c:	6078      	str	r0, [r7, #4]
 8002c2e:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8002c30:	687c      	ldr	r4, [r7, #4]
 8002c32:	2302      	movs	r3, #2
 8002c34:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002c36:	f107 030c 	add.w	r3, r7, #12
 8002c3a:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002c3c:	2310      	movs	r3, #16
 8002c3e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002c40:	4668      	mov	r0, sp
 8002c42:	f104 0310 	add.w	r3, r4, #16
 8002c46:	229c      	movs	r2, #156	@ 0x9c
 8002c48:	4619      	mov	r1, r3
 8002c4a:	f00c fa9c 	bl	800f186 <memcpy>
 8002c4e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002c52:	f000 fe6a 	bl	800392a <bno055_read_regs>
 8002c56:	4603      	mov	r3, r0
 8002c58:	73fb      	strb	r3, [r7, #15]
 8002c5a:	7bfb      	ldrb	r3, [r7, #15]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <bno055_mag_y+0x3e>
        return err;
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
 8002c62:	e013      	b.n	8002c8c <bno055_mag_y+0x66>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8002c64:	7b7b      	ldrb	r3, [r7, #13]
 8002c66:	b21b      	sxth	r3, r3
 8002c68:	021b      	lsls	r3, r3, #8
 8002c6a:	b21a      	sxth	r2, r3
 8002c6c:	7b3b      	ldrb	r3, [r7, #12]
 8002c6e:	b21b      	sxth	r3, r3
 8002c70:	4313      	orrs	r3, r2
 8002c72:	b21b      	sxth	r3, r3
 8002c74:	ee07 3a90 	vmov	s15, r3
 8002c78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c7c:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8002c80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3714      	adds	r7, #20
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd90      	pop	{r4, r7, pc}

08002c94 <bno055_mag_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag_z(bno055_t* imu, f32* buf) {
 8002c94:	b590      	push	{r4, r7, lr}
 8002c96:	b0af      	sub	sp, #188	@ 0xbc
 8002c98:	af2a      	add	r7, sp, #168	@ 0xa8
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8002c9e:	687c      	ldr	r4, [r7, #4]
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002ca4:	f107 030c 	add.w	r3, r7, #12
 8002ca8:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002caa:	2312      	movs	r3, #18
 8002cac:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002cae:	4668      	mov	r0, sp
 8002cb0:	f104 0310 	add.w	r3, r4, #16
 8002cb4:	229c      	movs	r2, #156	@ 0x9c
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	f00c fa65 	bl	800f186 <memcpy>
 8002cbc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002cc0:	f000 fe33 	bl	800392a <bno055_read_regs>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	73fb      	strb	r3, [r7, #15]
 8002cc8:	7bfb      	ldrb	r3, [r7, #15]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <bno055_mag_z+0x3e>
        return err;
 8002cce:	7bfb      	ldrb	r3, [r7, #15]
 8002cd0:	e013      	b.n	8002cfa <bno055_mag_z+0x66>
    }

    *buf = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8002cd2:	7b7b      	ldrb	r3, [r7, #13]
 8002cd4:	b21b      	sxth	r3, r3
 8002cd6:	021b      	lsls	r3, r3, #8
 8002cd8:	b21a      	sxth	r2, r3
 8002cda:	7b3b      	ldrb	r3, [r7, #12]
 8002cdc:	b21b      	sxth	r3, r3
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	b21b      	sxth	r3, r3
 8002ce2:	ee07 3a90 	vmov	s15, r3
 8002ce6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cea:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8002cee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3714      	adds	r7, #20
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd90      	pop	{r4, r7, pc}

08002d02 <bno055_mag>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_mag(bno055_t* imu, bno055_vec3_t* xyz) {
 8002d02:	b590      	push	{r4, r7, lr}
 8002d04:	b0af      	sub	sp, #188	@ 0xbc
 8002d06:	af2a      	add	r7, sp, #168	@ 0xa8
 8002d08:	6078      	str	r0, [r7, #4]
 8002d0a:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_MAG_DATA_X_LSB, data, 6)) != BNO_OK) {
 8002d0c:	687c      	ldr	r4, [r7, #4]
 8002d0e:	2306      	movs	r3, #6
 8002d10:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002d12:	f107 0308 	add.w	r3, r7, #8
 8002d16:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002d18:	230e      	movs	r3, #14
 8002d1a:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002d1c:	4668      	mov	r0, sp
 8002d1e:	f104 0310 	add.w	r3, r4, #16
 8002d22:	229c      	movs	r2, #156	@ 0x9c
 8002d24:	4619      	mov	r1, r3
 8002d26:	f00c fa2e 	bl	800f186 <memcpy>
 8002d2a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002d2e:	f000 fdfc 	bl	800392a <bno055_read_regs>
 8002d32:	4603      	mov	r3, r0
 8002d34:	73fb      	strb	r3, [r7, #15]
 8002d36:	7bfb      	ldrb	r3, [r7, #15]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <bno055_mag+0x3e>
        return err;
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
 8002d3e:	e039      	b.n	8002db4 <bno055_mag+0xb2>
    }

    xyz->x = (s16)((data[1] << 8) | data[0]) / BNO_MAG_SCALE;
 8002d40:	7a7b      	ldrb	r3, [r7, #9]
 8002d42:	b21b      	sxth	r3, r3
 8002d44:	021b      	lsls	r3, r3, #8
 8002d46:	b21a      	sxth	r2, r3
 8002d48:	7a3b      	ldrb	r3, [r7, #8]
 8002d4a:	b21b      	sxth	r3, r3
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	b21b      	sxth	r3, r3
 8002d50:	ee07 3a90 	vmov	s15, r3
 8002d54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d58:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8002d5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	edc3 7a00 	vstr	s15, [r3]
    xyz->y = (s16)((data[3] << 8) | data[2]) / BNO_MAG_SCALE;
 8002d66:	7afb      	ldrb	r3, [r7, #11]
 8002d68:	b21b      	sxth	r3, r3
 8002d6a:	021b      	lsls	r3, r3, #8
 8002d6c:	b21a      	sxth	r2, r3
 8002d6e:	7abb      	ldrb	r3, [r7, #10]
 8002d70:	b21b      	sxth	r3, r3
 8002d72:	4313      	orrs	r3, r2
 8002d74:	b21b      	sxth	r3, r3
 8002d76:	ee07 3a90 	vmov	s15, r3
 8002d7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d7e:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8002d82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	edc3 7a01 	vstr	s15, [r3, #4]
    xyz->z = (s16)((data[5] << 8) | data[4]) / BNO_MAG_SCALE;
 8002d8c:	7b7b      	ldrb	r3, [r7, #13]
 8002d8e:	b21b      	sxth	r3, r3
 8002d90:	021b      	lsls	r3, r3, #8
 8002d92:	b21a      	sxth	r2, r3
 8002d94:	7b3b      	ldrb	r3, [r7, #12]
 8002d96:	b21b      	sxth	r3, r3
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	b21b      	sxth	r3, r3
 8002d9c:	ee07 3a90 	vmov	s15, r3
 8002da0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002da4:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8002da8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	edc3 7a02 	vstr	s15, [r3, #8]

    return BNO_OK;
 8002db2:	2300      	movs	r3, #0
};
 8002db4:	4618      	mov	r0, r3
 8002db6:	3714      	adds	r7, #20
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd90      	pop	{r4, r7, pc}

08002dbc <bno055_gravity_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_x(bno055_t* imu, f32* buf) {
 8002dbc:	b590      	push	{r4, r7, lr}
 8002dbe:	b0b1      	sub	sp, #196	@ 0xc4
 8002dc0:	af2a      	add	r7, sp, #168	@ 0xa8
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 2)) != BNO_OK) {
 8002dc6:	687c      	ldr	r4, [r7, #4]
 8002dc8:	2302      	movs	r3, #2
 8002dca:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002dcc:	f107 030c 	add.w	r3, r7, #12
 8002dd0:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002dd2:	232e      	movs	r3, #46	@ 0x2e
 8002dd4:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002dd6:	4668      	mov	r0, sp
 8002dd8:	f104 0310 	add.w	r3, r4, #16
 8002ddc:	229c      	movs	r2, #156	@ 0x9c
 8002dde:	4619      	mov	r1, r3
 8002de0:	f00c f9d1 	bl	800f186 <memcpy>
 8002de4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002de8:	f000 fd9f 	bl	800392a <bno055_read_regs>
 8002dec:	4603      	mov	r3, r0
 8002dee:	75fb      	strb	r3, [r7, #23]
 8002df0:	7dfb      	ldrb	r3, [r7, #23]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <bno055_gravity_x+0x3e>
        return err;
 8002df6:	7dfb      	ldrb	r3, [r7, #23]
 8002df8:	e01c      	b.n	8002e34 <bno055_gravity_x+0x78>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <bno055_gravity_x+0x4a>
 8002e02:	4b0e      	ldr	r3, [pc, #56]	@ (8002e3c <bno055_gravity_x+0x80>)
 8002e04:	e001      	b.n	8002e0a <bno055_gravity_x+0x4e>
 8002e06:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8002e0a:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8002e0c:	7b7b      	ldrb	r3, [r7, #13]
 8002e0e:	b21b      	sxth	r3, r3
 8002e10:	021b      	lsls	r3, r3, #8
 8002e12:	b21a      	sxth	r2, r3
 8002e14:	7b3b      	ldrb	r3, [r7, #12]
 8002e16:	b21b      	sxth	r3, r3
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	b21b      	sxth	r3, r3
 8002e1c:	ee07 3a90 	vmov	s15, r3
 8002e20:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002e24:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	371c      	adds	r7, #28
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd90      	pop	{r4, r7, pc}
 8002e3c:	42c80000 	.word	0x42c80000

08002e40 <bno055_gravity_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_y(bno055_t* imu, f32* buf) {
 8002e40:	b590      	push	{r4, r7, lr}
 8002e42:	b0b1      	sub	sp, #196	@ 0xc4
 8002e44:	af2a      	add	r7, sp, #168	@ 0xa8
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8002e4a:	687c      	ldr	r4, [r7, #4]
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002e50:	f107 030c 	add.w	r3, r7, #12
 8002e54:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002e56:	2330      	movs	r3, #48	@ 0x30
 8002e58:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002e5a:	4668      	mov	r0, sp
 8002e5c:	f104 0310 	add.w	r3, r4, #16
 8002e60:	229c      	movs	r2, #156	@ 0x9c
 8002e62:	4619      	mov	r1, r3
 8002e64:	f00c f98f 	bl	800f186 <memcpy>
 8002e68:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002e6c:	f000 fd5d 	bl	800392a <bno055_read_regs>
 8002e70:	4603      	mov	r3, r0
 8002e72:	75fb      	strb	r3, [r7, #23]
 8002e74:	7dfb      	ldrb	r3, [r7, #23]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <bno055_gravity_y+0x3e>
        return err;
 8002e7a:	7dfb      	ldrb	r3, [r7, #23]
 8002e7c:	e01c      	b.n	8002eb8 <bno055_gravity_y+0x78>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <bno055_gravity_y+0x4a>
 8002e86:	4b0e      	ldr	r3, [pc, #56]	@ (8002ec0 <bno055_gravity_y+0x80>)
 8002e88:	e001      	b.n	8002e8e <bno055_gravity_y+0x4e>
 8002e8a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8002e8e:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8002e90:	7b7b      	ldrb	r3, [r7, #13]
 8002e92:	b21b      	sxth	r3, r3
 8002e94:	021b      	lsls	r3, r3, #8
 8002e96:	b21a      	sxth	r2, r3
 8002e98:	7b3b      	ldrb	r3, [r7, #12]
 8002e9a:	b21b      	sxth	r3, r3
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	b21b      	sxth	r3, r3
 8002ea0:	ee07 3a90 	vmov	s15, r3
 8002ea4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002ea8:	ed97 7a04 	vldr	s14, [r7, #16]
 8002eac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	371c      	adds	r7, #28
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd90      	pop	{r4, r7, pc}
 8002ec0:	42c80000 	.word	0x42c80000

08002ec4 <bno055_gravity_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity_z(bno055_t* imu, f32* buf) {
 8002ec4:	b590      	push	{r4, r7, lr}
 8002ec6:	b0b1      	sub	sp, #196	@ 0xc4
 8002ec8:	af2a      	add	r7, sp, #168	@ 0xa8
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_Z_LSB, data, 2)) != BNO_OK) {
 8002ece:	687c      	ldr	r4, [r7, #4]
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002ed4:	f107 030c 	add.w	r3, r7, #12
 8002ed8:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002eda:	2332      	movs	r3, #50	@ 0x32
 8002edc:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002ede:	4668      	mov	r0, sp
 8002ee0:	f104 0310 	add.w	r3, r4, #16
 8002ee4:	229c      	movs	r2, #156	@ 0x9c
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	f00c f94d 	bl	800f186 <memcpy>
 8002eec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002ef0:	f000 fd1b 	bl	800392a <bno055_read_regs>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	75fb      	strb	r3, [r7, #23]
 8002ef8:	7dfb      	ldrb	r3, [r7, #23]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <bno055_gravity_z+0x3e>
        return err;
 8002efe:	7dfb      	ldrb	r3, [r7, #23]
 8002f00:	e01c      	b.n	8002f3c <bno055_gravity_z+0x78>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <bno055_gravity_z+0x4a>
 8002f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002f44 <bno055_gravity_z+0x80>)
 8002f0c:	e001      	b.n	8002f12 <bno055_gravity_z+0x4e>
 8002f0e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8002f12:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8002f14:	7b7b      	ldrb	r3, [r7, #13]
 8002f16:	b21b      	sxth	r3, r3
 8002f18:	021b      	lsls	r3, r3, #8
 8002f1a:	b21a      	sxth	r2, r3
 8002f1c:	7b3b      	ldrb	r3, [r7, #12]
 8002f1e:	b21b      	sxth	r3, r3
 8002f20:	4313      	orrs	r3, r2
 8002f22:	b21b      	sxth	r3, r3
 8002f24:	ee07 3a90 	vmov	s15, r3
 8002f28:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002f2c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	371c      	adds	r7, #28
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd90      	pop	{r4, r7, pc}
 8002f44:	42c80000 	.word	0x42c80000

08002f48 <bno055_gravity>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_gravity(bno055_t* imu, bno055_vec3_t* buf) {
 8002f48:	b590      	push	{r4, r7, lr}
 8002f4a:	b0b1      	sub	sp, #196	@ 0xc4
 8002f4c:	af2a      	add	r7, sp, #168	@ 0xa8
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_GRV_DATA_X_LSB, data, 6)) != BNO_OK) {
 8002f52:	687c      	ldr	r4, [r7, #4]
 8002f54:	2306      	movs	r3, #6
 8002f56:	9329      	str	r3, [sp, #164]	@ 0xa4
 8002f58:	f107 0308 	add.w	r3, r7, #8
 8002f5c:	9328      	str	r3, [sp, #160]	@ 0xa0
 8002f5e:	232e      	movs	r3, #46	@ 0x2e
 8002f60:	9327      	str	r3, [sp, #156]	@ 0x9c
 8002f62:	4668      	mov	r0, sp
 8002f64:	f104 0310 	add.w	r3, r4, #16
 8002f68:	229c      	movs	r2, #156	@ 0x9c
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	f00c f90b 	bl	800f186 <memcpy>
 8002f70:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002f74:	f000 fcd9 	bl	800392a <bno055_read_regs>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	75fb      	strb	r3, [r7, #23]
 8002f7c:	7dfb      	ldrb	r3, [r7, #23]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <bno055_gravity+0x3e>
        return err;
 8002f82:	7dfb      	ldrb	r3, [r7, #23]
 8002f84:	e042      	b.n	800300c <bno055_gravity+0xc4>
    }
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	7b9b      	ldrb	r3, [r3, #14]
                                                         : BNO_ACC_SCALE_MG;
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <bno055_gravity+0x4a>
 8002f8e:	4b21      	ldr	r3, [pc, #132]	@ (8003014 <bno055_gravity+0xcc>)
 8002f90:	e001      	b.n	8002f96 <bno055_gravity+0x4e>
 8002f92:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
    f32 scale = (imu->_acc_unit == BNO_ACC_UNITSEL_M_S2) ? BNO_ACC_SCALE_M_2
 8002f96:	613b      	str	r3, [r7, #16]
    buf->x = (s16)((data[1] << 8) | data[0]) / scale;
 8002f98:	7a7b      	ldrb	r3, [r7, #9]
 8002f9a:	b21b      	sxth	r3, r3
 8002f9c:	021b      	lsls	r3, r3, #8
 8002f9e:	b21a      	sxth	r2, r3
 8002fa0:	7a3b      	ldrb	r3, [r7, #8]
 8002fa2:	b21b      	sxth	r3, r3
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	b21b      	sxth	r3, r3
 8002fa8:	ee07 3a90 	vmov	s15, r3
 8002fac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002fb0:	ed97 7a04 	vldr	s14, [r7, #16]
 8002fb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	edc3 7a00 	vstr	s15, [r3]
    buf->y = (s16)((data[3] << 8) | data[2]) / scale;
 8002fbe:	7afb      	ldrb	r3, [r7, #11]
 8002fc0:	b21b      	sxth	r3, r3
 8002fc2:	021b      	lsls	r3, r3, #8
 8002fc4:	b21a      	sxth	r2, r3
 8002fc6:	7abb      	ldrb	r3, [r7, #10]
 8002fc8:	b21b      	sxth	r3, r3
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	b21b      	sxth	r3, r3
 8002fce:	ee07 3a90 	vmov	s15, r3
 8002fd2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002fd6:	ed97 7a04 	vldr	s14, [r7, #16]
 8002fda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	edc3 7a01 	vstr	s15, [r3, #4]
    buf->x = (s16)((data[5] << 8) | data[4]) / scale;
 8002fe4:	7b7b      	ldrb	r3, [r7, #13]
 8002fe6:	b21b      	sxth	r3, r3
 8002fe8:	021b      	lsls	r3, r3, #8
 8002fea:	b21a      	sxth	r2, r3
 8002fec:	7b3b      	ldrb	r3, [r7, #12]
 8002fee:	b21b      	sxth	r3, r3
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	b21b      	sxth	r3, r3
 8002ff4:	ee07 3a90 	vmov	s15, r3
 8002ff8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002ffc:	ed97 7a04 	vldr	s14, [r7, #16]
 8003000:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	371c      	adds	r7, #28
 8003010:	46bd      	mov	sp, r7
 8003012:	bd90      	pop	{r4, r7, pc}
 8003014:	42c80000 	.word	0x42c80000

08003018 <bno055_euler_yaw>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_yaw(bno055_t* imu, f32* buf) {
 8003018:	b590      	push	{r4, r7, lr}
 800301a:	b0b1      	sub	sp, #196	@ 0xc4
 800301c:	af2a      	add	r7, sp, #168	@ 0xa8
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 2)) !=
 8003022:	687c      	ldr	r4, [r7, #4]
 8003024:	2302      	movs	r3, #2
 8003026:	9329      	str	r3, [sp, #164]	@ 0xa4
 8003028:	f107 030c 	add.w	r3, r7, #12
 800302c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800302e:	231a      	movs	r3, #26
 8003030:	9327      	str	r3, [sp, #156]	@ 0x9c
 8003032:	4668      	mov	r0, sp
 8003034:	f104 0310 	add.w	r3, r4, #16
 8003038:	229c      	movs	r2, #156	@ 0x9c
 800303a:	4619      	mov	r1, r3
 800303c:	f00c f8a3 	bl	800f186 <memcpy>
 8003040:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003044:	f000 fc71 	bl	800392a <bno055_read_regs>
 8003048:	4603      	mov	r3, r0
 800304a:	75fb      	strb	r3, [r7, #23]
 800304c:	7dfb      	ldrb	r3, [r7, #23]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <bno055_euler_yaw+0x3e>
        BNO_OK) {
        return err;
 8003052:	7dfb      	ldrb	r3, [r7, #23]
 8003054:	e01c      	b.n	8003090 <bno055_euler_yaw+0x78>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 800305a:	2b00      	cmp	r3, #0
 800305c:	d102      	bne.n	8003064 <bno055_euler_yaw+0x4c>
 800305e:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8003062:	e000      	b.n	8003066 <bno055_euler_yaw+0x4e>
 8003064:	4b0c      	ldr	r3, [pc, #48]	@ (8003098 <bno055_euler_yaw+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 8003066:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8003068:	7b7b      	ldrb	r3, [r7, #13]
 800306a:	b21b      	sxth	r3, r3
 800306c:	021b      	lsls	r3, r3, #8
 800306e:	b21a      	sxth	r2, r3
 8003070:	7b3b      	ldrb	r3, [r7, #12]
 8003072:	b21b      	sxth	r3, r3
 8003074:	4313      	orrs	r3, r2
 8003076:	b21b      	sxth	r3, r3
 8003078:	ee07 3a90 	vmov	s15, r3
 800307c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003080:	ed97 7a04 	vldr	s14, [r7, #16]
 8003084:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	371c      	adds	r7, #28
 8003094:	46bd      	mov	sp, r7
 8003096:	bd90      	pop	{r4, r7, pc}
 8003098:	44610000 	.word	0x44610000

0800309c <bno055_euler_roll>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_roll(bno055_t* imu, f32* buf) {
 800309c:	b590      	push	{r4, r7, lr}
 800309e:	b0b1      	sub	sp, #196	@ 0xc4
 80030a0:	af2a      	add	r7, sp, #168	@ 0xa8
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_ROLL_LSB, data, 2)) != BNO_OK) {
 80030a6:	687c      	ldr	r4, [r7, #4]
 80030a8:	2302      	movs	r3, #2
 80030aa:	9329      	str	r3, [sp, #164]	@ 0xa4
 80030ac:	f107 030c 	add.w	r3, r7, #12
 80030b0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80030b2:	231c      	movs	r3, #28
 80030b4:	9327      	str	r3, [sp, #156]	@ 0x9c
 80030b6:	4668      	mov	r0, sp
 80030b8:	f104 0310 	add.w	r3, r4, #16
 80030bc:	229c      	movs	r2, #156	@ 0x9c
 80030be:	4619      	mov	r1, r3
 80030c0:	f00c f861 	bl	800f186 <memcpy>
 80030c4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80030c8:	f000 fc2f 	bl	800392a <bno055_read_regs>
 80030cc:	4603      	mov	r3, r0
 80030ce:	75fb      	strb	r3, [r7, #23]
 80030d0:	7dfb      	ldrb	r3, [r7, #23]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <bno055_euler_roll+0x3e>
        return err;
 80030d6:	7dfb      	ldrb	r3, [r7, #23]
 80030d8:	e01c      	b.n	8003114 <bno055_euler_roll+0x78>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d102      	bne.n	80030e8 <bno055_euler_roll+0x4c>
 80030e2:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80030e6:	e000      	b.n	80030ea <bno055_euler_roll+0x4e>
 80030e8:	4b0c      	ldr	r3, [pc, #48]	@ (800311c <bno055_euler_roll+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 80030ea:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 80030ec:	7b7b      	ldrb	r3, [r7, #13]
 80030ee:	b21b      	sxth	r3, r3
 80030f0:	021b      	lsls	r3, r3, #8
 80030f2:	b21a      	sxth	r2, r3
 80030f4:	7b3b      	ldrb	r3, [r7, #12]
 80030f6:	b21b      	sxth	r3, r3
 80030f8:	4313      	orrs	r3, r2
 80030fa:	b21b      	sxth	r3, r3
 80030fc:	ee07 3a90 	vmov	s15, r3
 8003100:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003104:	ed97 7a04 	vldr	s14, [r7, #16]
 8003108:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	371c      	adds	r7, #28
 8003118:	46bd      	mov	sp, r7
 800311a:	bd90      	pop	{r4, r7, pc}
 800311c:	44610000 	.word	0x44610000

08003120 <bno055_euler_pitch>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler_pitch(bno055_t* imu, f32* buf) {
 8003120:	b590      	push	{r4, r7, lr}
 8003122:	b0b1      	sub	sp, #196	@ 0xc4
 8003124:	af2a      	add	r7, sp, #168	@ 0xa8
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_EUL_PITCH_LSB, data, 2)) != BNO_OK) {
 800312a:	687c      	ldr	r4, [r7, #4]
 800312c:	2302      	movs	r3, #2
 800312e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8003130:	f107 030c 	add.w	r3, r7, #12
 8003134:	9328      	str	r3, [sp, #160]	@ 0xa0
 8003136:	231e      	movs	r3, #30
 8003138:	9327      	str	r3, [sp, #156]	@ 0x9c
 800313a:	4668      	mov	r0, sp
 800313c:	f104 0310 	add.w	r3, r4, #16
 8003140:	229c      	movs	r2, #156	@ 0x9c
 8003142:	4619      	mov	r1, r3
 8003144:	f00c f81f 	bl	800f186 <memcpy>
 8003148:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800314c:	f000 fbed 	bl	800392a <bno055_read_regs>
 8003150:	4603      	mov	r3, r0
 8003152:	75fb      	strb	r3, [r7, #23]
 8003154:	7dfb      	ldrb	r3, [r7, #23]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <bno055_euler_pitch+0x3e>
        return err;
 800315a:	7dfb      	ldrb	r3, [r7, #23]
 800315c:	e01c      	b.n	8003198 <bno055_euler_pitch+0x78>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 8003162:	2b00      	cmp	r3, #0
 8003164:	d102      	bne.n	800316c <bno055_euler_pitch+0x4c>
 8003166:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 800316a:	e000      	b.n	800316e <bno055_euler_pitch+0x4e>
 800316c:	4b0c      	ldr	r3, [pc, #48]	@ (80031a0 <bno055_euler_pitch+0x80>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 800316e:	613b      	str	r3, [r7, #16]
    *buf = (s16)((data[1] << 8) | data[0]) / scale;
 8003170:	7b7b      	ldrb	r3, [r7, #13]
 8003172:	b21b      	sxth	r3, r3
 8003174:	021b      	lsls	r3, r3, #8
 8003176:	b21a      	sxth	r2, r3
 8003178:	7b3b      	ldrb	r3, [r7, #12]
 800317a:	b21b      	sxth	r3, r3
 800317c:	4313      	orrs	r3, r2
 800317e:	b21b      	sxth	r3, r3
 8003180:	ee07 3a90 	vmov	s15, r3
 8003184:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003188:	ed97 7a04 	vldr	s14, [r7, #16]
 800318c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	371c      	adds	r7, #28
 800319c:	46bd      	mov	sp, r7
 800319e:	bd90      	pop	{r4, r7, pc}
 80031a0:	44610000 	.word	0x44610000

080031a4 <bno055_euler>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_euler(bno055_t* imu, bno055_euler_t* buf) {
 80031a4:	b590      	push	{r4, r7, lr}
 80031a6:	b0b1      	sub	sp, #196	@ 0xc4
 80031a8:	af2a      	add	r7, sp, #168	@ 0xa8
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[6];
    if ((err = bno055_read_regs(*imu, BNO_EUL_HEADING_LSB, data, 6)) !=
 80031ae:	687c      	ldr	r4, [r7, #4]
 80031b0:	2306      	movs	r3, #6
 80031b2:	9329      	str	r3, [sp, #164]	@ 0xa4
 80031b4:	f107 0308 	add.w	r3, r7, #8
 80031b8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80031ba:	231a      	movs	r3, #26
 80031bc:	9327      	str	r3, [sp, #156]	@ 0x9c
 80031be:	4668      	mov	r0, sp
 80031c0:	f104 0310 	add.w	r3, r4, #16
 80031c4:	229c      	movs	r2, #156	@ 0x9c
 80031c6:	4619      	mov	r1, r3
 80031c8:	f00b ffdd 	bl	800f186 <memcpy>
 80031cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80031d0:	f000 fbab 	bl	800392a <bno055_read_regs>
 80031d4:	4603      	mov	r3, r0
 80031d6:	75fb      	strb	r3, [r7, #23]
 80031d8:	7dfb      	ldrb	r3, [r7, #23]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <bno055_euler+0x3e>
        BNO_OK) {
        return err;
 80031de:	7dfb      	ldrb	r3, [r7, #23]
 80031e0:	e042      	b.n	8003268 <bno055_euler+0xc4>
    }
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	7c5b      	ldrb	r3, [r3, #17]
                                                     : BNO_EUL_SCALE_RAD;
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d102      	bne.n	80031f0 <bno055_euler+0x4c>
 80031ea:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80031ee:	e000      	b.n	80031f2 <bno055_euler+0x4e>
 80031f0:	4b1f      	ldr	r3, [pc, #124]	@ (8003270 <bno055_euler+0xcc>)
    f32 scale = (imu->_eul_unit == BNO_EUL_UNIT_DEG) ? BNO_EUL_SCALE_DEG
 80031f2:	613b      	str	r3, [r7, #16]
    buf->yaw = (s16)((data[1] << 8) | data[0]) / scale;
 80031f4:	7a7b      	ldrb	r3, [r7, #9]
 80031f6:	b21b      	sxth	r3, r3
 80031f8:	021b      	lsls	r3, r3, #8
 80031fa:	b21a      	sxth	r2, r3
 80031fc:	7a3b      	ldrb	r3, [r7, #8]
 80031fe:	b21b      	sxth	r3, r3
 8003200:	4313      	orrs	r3, r2
 8003202:	b21b      	sxth	r3, r3
 8003204:	ee07 3a90 	vmov	s15, r3
 8003208:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800320c:	ed97 7a04 	vldr	s14, [r7, #16]
 8003210:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	edc3 7a02 	vstr	s15, [r3, #8]
    buf->roll = (s16)((data[3] << 8) | data[2]) / scale;
 800321a:	7afb      	ldrb	r3, [r7, #11]
 800321c:	b21b      	sxth	r3, r3
 800321e:	021b      	lsls	r3, r3, #8
 8003220:	b21a      	sxth	r2, r3
 8003222:	7abb      	ldrb	r3, [r7, #10]
 8003224:	b21b      	sxth	r3, r3
 8003226:	4313      	orrs	r3, r2
 8003228:	b21b      	sxth	r3, r3
 800322a:	ee07 3a90 	vmov	s15, r3
 800322e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003232:	ed97 7a04 	vldr	s14, [r7, #16]
 8003236:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	edc3 7a00 	vstr	s15, [r3]
    buf->pitch = (s16)((data[5] << 8) | data[4]) / scale;
 8003240:	7b7b      	ldrb	r3, [r7, #13]
 8003242:	b21b      	sxth	r3, r3
 8003244:	021b      	lsls	r3, r3, #8
 8003246:	b21a      	sxth	r2, r3
 8003248:	7b3b      	ldrb	r3, [r7, #12]
 800324a:	b21b      	sxth	r3, r3
 800324c:	4313      	orrs	r3, r2
 800324e:	b21b      	sxth	r3, r3
 8003250:	ee07 3a90 	vmov	s15, r3
 8003254:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003258:	ed97 7a04 	vldr	s14, [r7, #16]
 800325c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	edc3 7a01 	vstr	s15, [r3, #4]
    return BNO_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	371c      	adds	r7, #28
 800326c:	46bd      	mov	sp, r7
 800326e:	bd90      	pop	{r4, r7, pc}
 8003270:	44610000 	.word	0x44610000

08003274 <bno055_quaternion_w>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_w(bno055_t* imu, f32* buf) {
 8003274:	b590      	push	{r4, r7, lr}
 8003276:	b0af      	sub	sp, #188	@ 0xbc
 8003278:	af2a      	add	r7, sp, #168	@ 0xa8
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 2)) != BNO_OK) {
 800327e:	687c      	ldr	r4, [r7, #4]
 8003280:	2302      	movs	r3, #2
 8003282:	9329      	str	r3, [sp, #164]	@ 0xa4
 8003284:	f107 030c 	add.w	r3, r7, #12
 8003288:	9328      	str	r3, [sp, #160]	@ 0xa0
 800328a:	2320      	movs	r3, #32
 800328c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800328e:	4668      	mov	r0, sp
 8003290:	f104 0310 	add.w	r3, r4, #16
 8003294:	229c      	movs	r2, #156	@ 0x9c
 8003296:	4619      	mov	r1, r3
 8003298:	f00b ff75 	bl	800f186 <memcpy>
 800329c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80032a0:	f000 fb43 	bl	800392a <bno055_read_regs>
 80032a4:	4603      	mov	r3, r0
 80032a6:	73fb      	strb	r3, [r7, #15]
 80032a8:	7bfb      	ldrb	r3, [r7, #15]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <bno055_quaternion_w+0x3e>
        return err;
 80032ae:	7bfb      	ldrb	r3, [r7, #15]
 80032b0:	e013      	b.n	80032da <bno055_quaternion_w+0x66>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 80032b2:	7b7b      	ldrb	r3, [r7, #13]
 80032b4:	b21b      	sxth	r3, r3
 80032b6:	021b      	lsls	r3, r3, #8
 80032b8:	b21a      	sxth	r2, r3
 80032ba:	7b3b      	ldrb	r3, [r7, #12]
 80032bc:	b21b      	sxth	r3, r3
 80032be:	4313      	orrs	r3, r2
 80032c0:	b21b      	sxth	r3, r3
 80032c2:	ee07 3a90 	vmov	s15, r3
 80032c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032ca:	eddf 6a06 	vldr	s13, [pc, #24]	@ 80032e4 <bno055_quaternion_w+0x70>
 80032ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3714      	adds	r7, #20
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd90      	pop	{r4, r7, pc}
 80032e2:	bf00      	nop
 80032e4:	46800000 	.word	0x46800000

080032e8 <bno055_quaternion_x>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_x(bno055_t* imu, f32* buf) {
 80032e8:	b590      	push	{r4, r7, lr}
 80032ea:	b0af      	sub	sp, #188	@ 0xbc
 80032ec:	af2a      	add	r7, sp, #168	@ 0xa8
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_X_LSB, data, 2)) != BNO_OK) {
 80032f2:	687c      	ldr	r4, [r7, #4]
 80032f4:	2302      	movs	r3, #2
 80032f6:	9329      	str	r3, [sp, #164]	@ 0xa4
 80032f8:	f107 030c 	add.w	r3, r7, #12
 80032fc:	9328      	str	r3, [sp, #160]	@ 0xa0
 80032fe:	2322      	movs	r3, #34	@ 0x22
 8003300:	9327      	str	r3, [sp, #156]	@ 0x9c
 8003302:	4668      	mov	r0, sp
 8003304:	f104 0310 	add.w	r3, r4, #16
 8003308:	229c      	movs	r2, #156	@ 0x9c
 800330a:	4619      	mov	r1, r3
 800330c:	f00b ff3b 	bl	800f186 <memcpy>
 8003310:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003314:	f000 fb09 	bl	800392a <bno055_read_regs>
 8003318:	4603      	mov	r3, r0
 800331a:	73fb      	strb	r3, [r7, #15]
 800331c:	7bfb      	ldrb	r3, [r7, #15]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <bno055_quaternion_x+0x3e>
        return err;
 8003322:	7bfb      	ldrb	r3, [r7, #15]
 8003324:	e013      	b.n	800334e <bno055_quaternion_x+0x66>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8003326:	7b7b      	ldrb	r3, [r7, #13]
 8003328:	b21b      	sxth	r3, r3
 800332a:	021b      	lsls	r3, r3, #8
 800332c:	b21a      	sxth	r2, r3
 800332e:	7b3b      	ldrb	r3, [r7, #12]
 8003330:	b21b      	sxth	r3, r3
 8003332:	4313      	orrs	r3, r2
 8003334:	b21b      	sxth	r3, r3
 8003336:	ee07 3a90 	vmov	s15, r3
 800333a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800333e:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8003358 <bno055_quaternion_x+0x70>
 8003342:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	bd90      	pop	{r4, r7, pc}
 8003356:	bf00      	nop
 8003358:	46800000 	.word	0x46800000

0800335c <bno055_quaternion_y>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_y(bno055_t* imu, f32* buf) {
 800335c:	b590      	push	{r4, r7, lr}
 800335e:	b0af      	sub	sp, #188	@ 0xbc
 8003360:	af2a      	add	r7, sp, #168	@ 0xa8
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Y_LSB, data, 2)) != BNO_OK) {
 8003366:	687c      	ldr	r4, [r7, #4]
 8003368:	2302      	movs	r3, #2
 800336a:	9329      	str	r3, [sp, #164]	@ 0xa4
 800336c:	f107 030c 	add.w	r3, r7, #12
 8003370:	9328      	str	r3, [sp, #160]	@ 0xa0
 8003372:	2324      	movs	r3, #36	@ 0x24
 8003374:	9327      	str	r3, [sp, #156]	@ 0x9c
 8003376:	4668      	mov	r0, sp
 8003378:	f104 0310 	add.w	r3, r4, #16
 800337c:	229c      	movs	r2, #156	@ 0x9c
 800337e:	4619      	mov	r1, r3
 8003380:	f00b ff01 	bl	800f186 <memcpy>
 8003384:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003388:	f000 facf 	bl	800392a <bno055_read_regs>
 800338c:	4603      	mov	r3, r0
 800338e:	73fb      	strb	r3, [r7, #15]
 8003390:	7bfb      	ldrb	r3, [r7, #15]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <bno055_quaternion_y+0x3e>
        return err;
 8003396:	7bfb      	ldrb	r3, [r7, #15]
 8003398:	e013      	b.n	80033c2 <bno055_quaternion_y+0x66>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 800339a:	7b7b      	ldrb	r3, [r7, #13]
 800339c:	b21b      	sxth	r3, r3
 800339e:	021b      	lsls	r3, r3, #8
 80033a0:	b21a      	sxth	r2, r3
 80033a2:	7b3b      	ldrb	r3, [r7, #12]
 80033a4:	b21b      	sxth	r3, r3
 80033a6:	4313      	orrs	r3, r2
 80033a8:	b21b      	sxth	r3, r3
 80033aa:	ee07 3a90 	vmov	s15, r3
 80033ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033b2:	eddf 6a06 	vldr	s13, [pc, #24]	@ 80033cc <bno055_quaternion_y+0x70>
 80033b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3714      	adds	r7, #20
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd90      	pop	{r4, r7, pc}
 80033ca:	bf00      	nop
 80033cc:	46800000 	.word	0x46800000

080033d0 <bno055_quaternion_z>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion_z(bno055_t* imu, f32* buf) {
 80033d0:	b590      	push	{r4, r7, lr}
 80033d2:	b0af      	sub	sp, #188	@ 0xbc
 80033d4:	af2a      	add	r7, sp, #168	@ 0xa8
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[2];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_Z_LSB, data, 2)) != BNO_OK) {
 80033da:	687c      	ldr	r4, [r7, #4]
 80033dc:	2302      	movs	r3, #2
 80033de:	9329      	str	r3, [sp, #164]	@ 0xa4
 80033e0:	f107 030c 	add.w	r3, r7, #12
 80033e4:	9328      	str	r3, [sp, #160]	@ 0xa0
 80033e6:	2326      	movs	r3, #38	@ 0x26
 80033e8:	9327      	str	r3, [sp, #156]	@ 0x9c
 80033ea:	4668      	mov	r0, sp
 80033ec:	f104 0310 	add.w	r3, r4, #16
 80033f0:	229c      	movs	r2, #156	@ 0x9c
 80033f2:	4619      	mov	r1, r3
 80033f4:	f00b fec7 	bl	800f186 <memcpy>
 80033f8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80033fc:	f000 fa95 	bl	800392a <bno055_read_regs>
 8003400:	4603      	mov	r3, r0
 8003402:	73fb      	strb	r3, [r7, #15]
 8003404:	7bfb      	ldrb	r3, [r7, #15]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <bno055_quaternion_z+0x3e>
        return err;
 800340a:	7bfb      	ldrb	r3, [r7, #15]
 800340c:	e013      	b.n	8003436 <bno055_quaternion_z+0x66>
    }
    *buf = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 800340e:	7b7b      	ldrb	r3, [r7, #13]
 8003410:	b21b      	sxth	r3, r3
 8003412:	021b      	lsls	r3, r3, #8
 8003414:	b21a      	sxth	r2, r3
 8003416:	7b3b      	ldrb	r3, [r7, #12]
 8003418:	b21b      	sxth	r3, r3
 800341a:	4313      	orrs	r3, r2
 800341c:	b21b      	sxth	r3, r3
 800341e:	ee07 3a90 	vmov	s15, r3
 8003422:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003426:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8003440 <bno055_quaternion_z+0x70>
 800342a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	edc3 7a00 	vstr	s15, [r3]
    return BNO_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	bd90      	pop	{r4, r7, pc}
 800343e:	bf00      	nop
 8003440:	46800000 	.word	0x46800000

08003444 <bno055_quaternion>:
 *
 * Return:
 *     > `error_bno`: `BNO_OK` on success, errorcode else.
 * ----------------------------------------------------------------------
 */
error_bno bno055_quaternion(bno055_t* imu, bno055_vec4_t* buf) {
 8003444:	b590      	push	{r4, r7, lr}
 8003446:	b0b1      	sub	sp, #196	@ 0xc4
 8003448:	af2a      	add	r7, sp, #168	@ 0xa8
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    u8 data[8];
    if ((err = bno055_read_regs(*imu, BNO_QUA_DATA_W_LSB, data, 8)) != BNO_OK) {
 800344e:	687c      	ldr	r4, [r7, #4]
 8003450:	2308      	movs	r3, #8
 8003452:	9329      	str	r3, [sp, #164]	@ 0xa4
 8003454:	f107 030c 	add.w	r3, r7, #12
 8003458:	9328      	str	r3, [sp, #160]	@ 0xa0
 800345a:	2320      	movs	r3, #32
 800345c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800345e:	4668      	mov	r0, sp
 8003460:	f104 0310 	add.w	r3, r4, #16
 8003464:	229c      	movs	r2, #156	@ 0x9c
 8003466:	4619      	mov	r1, r3
 8003468:	f00b fe8d 	bl	800f186 <memcpy>
 800346c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003470:	f000 fa5b 	bl	800392a <bno055_read_regs>
 8003474:	4603      	mov	r3, r0
 8003476:	75fb      	strb	r3, [r7, #23]
 8003478:	7dfb      	ldrb	r3, [r7, #23]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <bno055_quaternion+0x3e>
        return err;
 800347e:	7dfb      	ldrb	r3, [r7, #23]
 8003480:	e04c      	b.n	800351c <bno055_quaternion+0xd8>
    }
    buf->w = (s16)((data[1] << 8) | data[0]) / (f32)BNO_QUA_SCALE;
 8003482:	7b7b      	ldrb	r3, [r7, #13]
 8003484:	b21b      	sxth	r3, r3
 8003486:	021b      	lsls	r3, r3, #8
 8003488:	b21a      	sxth	r2, r3
 800348a:	7b3b      	ldrb	r3, [r7, #12]
 800348c:	b21b      	sxth	r3, r3
 800348e:	4313      	orrs	r3, r2
 8003490:	b21b      	sxth	r3, r3
 8003492:	ee07 3a90 	vmov	s15, r3
 8003496:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800349a:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8003524 <bno055_quaternion+0xe0>
 800349e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	edc3 7a03 	vstr	s15, [r3, #12]
    buf->x = (s16)((data[3] << 8) | data[2]) / (f32)BNO_QUA_SCALE;
 80034a8:	7bfb      	ldrb	r3, [r7, #15]
 80034aa:	b21b      	sxth	r3, r3
 80034ac:	021b      	lsls	r3, r3, #8
 80034ae:	b21a      	sxth	r2, r3
 80034b0:	7bbb      	ldrb	r3, [r7, #14]
 80034b2:	b21b      	sxth	r3, r3
 80034b4:	4313      	orrs	r3, r2
 80034b6:	b21b      	sxth	r3, r3
 80034b8:	ee07 3a90 	vmov	s15, r3
 80034bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80034c0:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8003524 <bno055_quaternion+0xe0>
 80034c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	edc3 7a00 	vstr	s15, [r3]
    buf->y = (s16)((data[5] << 8) | data[4]) / (f32)BNO_QUA_SCALE;
 80034ce:	7c7b      	ldrb	r3, [r7, #17]
 80034d0:	b21b      	sxth	r3, r3
 80034d2:	021b      	lsls	r3, r3, #8
 80034d4:	b21a      	sxth	r2, r3
 80034d6:	7c3b      	ldrb	r3, [r7, #16]
 80034d8:	b21b      	sxth	r3, r3
 80034da:	4313      	orrs	r3, r2
 80034dc:	b21b      	sxth	r3, r3
 80034de:	ee07 3a90 	vmov	s15, r3
 80034e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80034e6:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8003524 <bno055_quaternion+0xe0>
 80034ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	edc3 7a01 	vstr	s15, [r3, #4]
    buf->z = (s16)((data[7] << 8) | data[6]) / (f32)BNO_QUA_SCALE;
 80034f4:	7cfb      	ldrb	r3, [r7, #19]
 80034f6:	b21b      	sxth	r3, r3
 80034f8:	021b      	lsls	r3, r3, #8
 80034fa:	b21a      	sxth	r2, r3
 80034fc:	7cbb      	ldrb	r3, [r7, #18]
 80034fe:	b21b      	sxth	r3, r3
 8003500:	4313      	orrs	r3, r2
 8003502:	b21b      	sxth	r3, r3
 8003504:	ee07 3a90 	vmov	s15, r3
 8003508:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800350c:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8003524 <bno055_quaternion+0xe0>
 8003510:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	edc3 7a02 	vstr	s15, [r3, #8]
    return BNO_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	371c      	adds	r7, #28
 8003520:	46bd      	mov	sp, r7
 8003522:	bd90      	pop	{r4, r7, pc}
 8003524:	46800000 	.word	0x46800000

08003528 <bno055_acc_conf>:

error_bno bno055_acc_conf(bno055_t* bno, const bno055_acc_range_t range,
                          const bno055_acc_band_t bandwidth,
                          const bno055_acc_mode_t mode) {
 8003528:	b590      	push	{r4, r7, lr}
 800352a:	b0af      	sub	sp, #188	@ 0xbc
 800352c:	af2a      	add	r7, sp, #168	@ 0xa8
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	4608      	mov	r0, r1
 8003532:	4611      	mov	r1, r2
 8003534:	461a      	mov	r2, r3
 8003536:	4603      	mov	r3, r0
 8003538:	70fb      	strb	r3, [r7, #3]
 800353a:	460b      	mov	r3, r1
 800353c:	70bb      	strb	r3, [r7, #2]
 800353e:	4613      	mov	r3, r2
 8003540:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 8003542:	2101      	movs	r1, #1
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 fa54 	bl	80039f2 <bno055_set_page>
 800354a:	4603      	mov	r3, r0
 800354c:	73fb      	strb	r3, [r7, #15]
 800354e:	7bfb      	ldrb	r3, [r7, #15]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <bno055_acc_conf+0x30>
        return err;
 8003554:	7bfb      	ldrb	r3, [r7, #15]
 8003556:	e04b      	b.n	80035f0 <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8003558:	2100      	movs	r1, #0
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f91b 	bl	8003796 <bno055_set_opmode>
 8003560:	4603      	mov	r3, r0
 8003562:	73fb      	strb	r3, [r7, #15]
 8003564:	7bfb      	ldrb	r3, [r7, #15]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <bno055_acc_conf+0x46>
        return err;
 800356a:	7bfb      	ldrb	r3, [r7, #15]
 800356c:	e040      	b.n	80035f0 <bno055_acc_conf+0xc8>
    }
    osDelay(BNO_CONFIG_TIME_DELAY + 5);
 800356e:	200c      	movs	r0, #12
 8003570:	f006 fe62 	bl	800a238 <osDelay>
    u8 config = range | bandwidth | mode;
 8003574:	78fa      	ldrb	r2, [r7, #3]
 8003576:	78bb      	ldrb	r3, [r7, #2]
 8003578:	4313      	orrs	r3, r2
 800357a:	b2da      	uxtb	r2, r3
 800357c:	787b      	ldrb	r3, [r7, #1]
 800357e:	4313      	orrs	r3, r2
 8003580:	b2db      	uxtb	r3, r3
 8003582:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_ACC_CONFIG, &config, 1)) != BNO_OK) {
 8003584:	687c      	ldr	r4, [r7, #4]
 8003586:	2301      	movs	r3, #1
 8003588:	9329      	str	r3, [sp, #164]	@ 0xa4
 800358a:	f107 030e 	add.w	r3, r7, #14
 800358e:	9328      	str	r3, [sp, #160]	@ 0xa0
 8003590:	2308      	movs	r3, #8
 8003592:	9327      	str	r3, [sp, #156]	@ 0x9c
 8003594:	4668      	mov	r0, sp
 8003596:	f104 0310 	add.w	r3, r4, #16
 800359a:	229c      	movs	r2, #156	@ 0x9c
 800359c:	4619      	mov	r1, r3
 800359e:	f00b fdf2 	bl	800f186 <memcpy>
 80035a2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80035a6:	f000 f9f6 	bl	8003996 <bno055_write_regs>
 80035aa:	4603      	mov	r3, r0
 80035ac:	73fb      	strb	r3, [r7, #15]
 80035ae:	7bfb      	ldrb	r3, [r7, #15]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <bno055_acc_conf+0x90>
        return err;
 80035b4:	7bfb      	ldrb	r3, [r7, #15]
 80035b6:	e01b      	b.n	80035f0 <bno055_acc_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	791b      	ldrb	r3, [r3, #4]
 80035bc:	4619      	mov	r1, r3
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f8e9 	bl	8003796 <bno055_set_opmode>
 80035c4:	4603      	mov	r3, r0
 80035c6:	73fb      	strb	r3, [r7, #15]
 80035c8:	7bfb      	ldrb	r3, [r7, #15]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <bno055_acc_conf+0xaa>
        return err;
 80035ce:	7bfb      	ldrb	r3, [r7, #15]
 80035d0:	e00e      	b.n	80035f0 <bno055_acc_conf+0xc8>
    }
    osDelay(BNO_ANY_TIME_DELAY + 5);
 80035d2:	2018      	movs	r0, #24
 80035d4:	f006 fe30 	bl	800a238 <osDelay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 80035d8:	2100      	movs	r1, #0
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 fa09 	bl	80039f2 <bno055_set_page>
 80035e0:	4603      	mov	r3, r0
 80035e2:	73fb      	strb	r3, [r7, #15]
 80035e4:	7bfb      	ldrb	r3, [r7, #15]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <bno055_acc_conf+0xc6>
        return err;
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
 80035ec:	e000      	b.n	80035f0 <bno055_acc_conf+0xc8>
    }
    return BNO_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3714      	adds	r7, #20
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd90      	pop	{r4, r7, pc}

080035f8 <bno055_gyr_conf>:

error_bno bno055_gyr_conf(bno055_t* bno, const bno055_gyr_range_t range,
                          const bno055_gyr_band_t bandwidth,
                          const bno055_gyr_mode_t mode) {
 80035f8:	b590      	push	{r4, r7, lr}
 80035fa:	b0af      	sub	sp, #188	@ 0xbc
 80035fc:	af2a      	add	r7, sp, #168	@ 0xa8
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	4608      	mov	r0, r1
 8003602:	4611      	mov	r1, r2
 8003604:	461a      	mov	r2, r3
 8003606:	4603      	mov	r3, r0
 8003608:	70fb      	strb	r3, [r7, #3]
 800360a:	460b      	mov	r3, r1
 800360c:	70bb      	strb	r3, [r7, #2]
 800360e:	4613      	mov	r3, r2
 8003610:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 8003612:	2101      	movs	r1, #1
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 f9ec 	bl	80039f2 <bno055_set_page>
 800361a:	4603      	mov	r3, r0
 800361c:	73fb      	strb	r3, [r7, #15]
 800361e:	7bfb      	ldrb	r3, [r7, #15]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <bno055_gyr_conf+0x30>
        return err;
 8003624:	7bfb      	ldrb	r3, [r7, #15]
 8003626:	e04a      	b.n	80036be <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 8003628:	2100      	movs	r1, #0
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f8b3 	bl	8003796 <bno055_set_opmode>
 8003630:	4603      	mov	r3, r0
 8003632:	73fb      	strb	r3, [r7, #15]
 8003634:	7bfb      	ldrb	r3, [r7, #15]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <bno055_gyr_conf+0x46>
        return err;
 800363a:	7bfb      	ldrb	r3, [r7, #15]
 800363c:	e03f      	b.n	80036be <bno055_gyr_conf+0xc6>
    }
    osDelay(BNO_CONFIG_TIME_DELAY + 5);
 800363e:	200c      	movs	r0, #12
 8003640:	f006 fdfa 	bl	800a238 <osDelay>
    u8 config[2] = {range | bandwidth, mode};
 8003644:	78fa      	ldrb	r2, [r7, #3]
 8003646:	78bb      	ldrb	r3, [r7, #2]
 8003648:	4313      	orrs	r3, r2
 800364a:	b2db      	uxtb	r3, r3
 800364c:	733b      	strb	r3, [r7, #12]
 800364e:	787b      	ldrb	r3, [r7, #1]
 8003650:	737b      	strb	r3, [r7, #13]
    if ((err = bno055_write_regs(*bno, BNO_GYR_CONFIG_0, config, 2)) !=
 8003652:	687c      	ldr	r4, [r7, #4]
 8003654:	2302      	movs	r3, #2
 8003656:	9329      	str	r3, [sp, #164]	@ 0xa4
 8003658:	f107 030c 	add.w	r3, r7, #12
 800365c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800365e:	230a      	movs	r3, #10
 8003660:	9327      	str	r3, [sp, #156]	@ 0x9c
 8003662:	4668      	mov	r0, sp
 8003664:	f104 0310 	add.w	r3, r4, #16
 8003668:	229c      	movs	r2, #156	@ 0x9c
 800366a:	4619      	mov	r1, r3
 800366c:	f00b fd8b 	bl	800f186 <memcpy>
 8003670:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003674:	f000 f98f 	bl	8003996 <bno055_write_regs>
 8003678:	4603      	mov	r3, r0
 800367a:	73fb      	strb	r3, [r7, #15]
 800367c:	7bfb      	ldrb	r3, [r7, #15]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <bno055_gyr_conf+0x8e>
        BNO_OK) {
        return err;
 8003682:	7bfb      	ldrb	r3, [r7, #15]
 8003684:	e01b      	b.n	80036be <bno055_gyr_conf+0xc6>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	791b      	ldrb	r3, [r3, #4]
 800368a:	4619      	mov	r1, r3
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 f882 	bl	8003796 <bno055_set_opmode>
 8003692:	4603      	mov	r3, r0
 8003694:	73fb      	strb	r3, [r7, #15]
 8003696:	7bfb      	ldrb	r3, [r7, #15]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <bno055_gyr_conf+0xa8>
        return err;
 800369c:	7bfb      	ldrb	r3, [r7, #15]
 800369e:	e00e      	b.n	80036be <bno055_gyr_conf+0xc6>
    }
    osDelay(BNO_ANY_TIME_DELAY + 5);
 80036a0:	2018      	movs	r0, #24
 80036a2:	f006 fdc9 	bl	800a238 <osDelay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 80036a6:	2100      	movs	r1, #0
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 f9a2 	bl	80039f2 <bno055_set_page>
 80036ae:	4603      	mov	r3, r0
 80036b0:	73fb      	strb	r3, [r7, #15]
 80036b2:	7bfb      	ldrb	r3, [r7, #15]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <bno055_gyr_conf+0xc4>
        return err;
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
 80036ba:	e000      	b.n	80036be <bno055_gyr_conf+0xc6>
    }
    return BNO_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd90      	pop	{r4, r7, pc}

080036c6 <bno055_mag_conf>:
error_bno bno055_mag_conf(bno055_t* bno, const bno055_mag_rate_t out_rate,
                          const bno055_mag_pwr_t pwr_mode,
                          const bno055_mag_mode_t mode) {
 80036c6:	b590      	push	{r4, r7, lr}
 80036c8:	b0af      	sub	sp, #188	@ 0xbc
 80036ca:	af2a      	add	r7, sp, #168	@ 0xa8
 80036cc:	6078      	str	r0, [r7, #4]
 80036ce:	4608      	mov	r0, r1
 80036d0:	4611      	mov	r1, r2
 80036d2:	461a      	mov	r2, r3
 80036d4:	4603      	mov	r3, r0
 80036d6:	70fb      	strb	r3, [r7, #3]
 80036d8:	460b      	mov	r3, r1
 80036da:	70bb      	strb	r3, [r7, #2]
 80036dc:	4613      	mov	r3, r2
 80036de:	707b      	strb	r3, [r7, #1]
    error_bno err;
    if ((err = bno055_set_page(bno, BNO_PAGE_1)) != BNO_OK) {
 80036e0:	2101      	movs	r1, #1
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f985 	bl	80039f2 <bno055_set_page>
 80036e8:	4603      	mov	r3, r0
 80036ea:	73fb      	strb	r3, [r7, #15]
 80036ec:	7bfb      	ldrb	r3, [r7, #15]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <bno055_mag_conf+0x30>
        return err;
 80036f2:	7bfb      	ldrb	r3, [r7, #15]
 80036f4:	e04b      	b.n	800378e <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, BNO_MODE_CONFIG)) != BNO_OK) {
 80036f6:	2100      	movs	r1, #0
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f84c 	bl	8003796 <bno055_set_opmode>
 80036fe:	4603      	mov	r3, r0
 8003700:	73fb      	strb	r3, [r7, #15]
 8003702:	7bfb      	ldrb	r3, [r7, #15]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <bno055_mag_conf+0x46>
        return err;
 8003708:	7bfb      	ldrb	r3, [r7, #15]
 800370a:	e040      	b.n	800378e <bno055_mag_conf+0xc8>
    }
    osDelay(BNO_CONFIG_TIME_DELAY + 5);
 800370c:	200c      	movs	r0, #12
 800370e:	f006 fd93 	bl	800a238 <osDelay>
    u8 config = out_rate | pwr_mode | mode;
 8003712:	78fa      	ldrb	r2, [r7, #3]
 8003714:	78bb      	ldrb	r3, [r7, #2]
 8003716:	4313      	orrs	r3, r2
 8003718:	b2da      	uxtb	r2, r3
 800371a:	787b      	ldrb	r3, [r7, #1]
 800371c:	4313      	orrs	r3, r2
 800371e:	b2db      	uxtb	r3, r3
 8003720:	73bb      	strb	r3, [r7, #14]
    if ((err = bno055_write_regs(*bno, BNO_MAG_CONFIG, &config, 1)) != BNO_OK) {
 8003722:	687c      	ldr	r4, [r7, #4]
 8003724:	2301      	movs	r3, #1
 8003726:	9329      	str	r3, [sp, #164]	@ 0xa4
 8003728:	f107 030e 	add.w	r3, r7, #14
 800372c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800372e:	2309      	movs	r3, #9
 8003730:	9327      	str	r3, [sp, #156]	@ 0x9c
 8003732:	4668      	mov	r0, sp
 8003734:	f104 0310 	add.w	r3, r4, #16
 8003738:	229c      	movs	r2, #156	@ 0x9c
 800373a:	4619      	mov	r1, r3
 800373c:	f00b fd23 	bl	800f186 <memcpy>
 8003740:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003744:	f000 f927 	bl	8003996 <bno055_write_regs>
 8003748:	4603      	mov	r3, r0
 800374a:	73fb      	strb	r3, [r7, #15]
 800374c:	7bfb      	ldrb	r3, [r7, #15]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <bno055_mag_conf+0x90>
        return err;
 8003752:	7bfb      	ldrb	r3, [r7, #15]
 8003754:	e01b      	b.n	800378e <bno055_mag_conf+0xc8>
    }
    if ((err = bno055_set_opmode(bno, bno->mode)) != BNO_OK) {
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	791b      	ldrb	r3, [r3, #4]
 800375a:	4619      	mov	r1, r3
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 f81a 	bl	8003796 <bno055_set_opmode>
 8003762:	4603      	mov	r3, r0
 8003764:	73fb      	strb	r3, [r7, #15]
 8003766:	7bfb      	ldrb	r3, [r7, #15]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <bno055_mag_conf+0xaa>
        return err;
 800376c:	7bfb      	ldrb	r3, [r7, #15]
 800376e:	e00e      	b.n	800378e <bno055_mag_conf+0xc8>
    }
    osDelay(BNO_ANY_TIME_DELAY + 5);
 8003770:	2018      	movs	r0, #24
 8003772:	f006 fd61 	bl	800a238 <osDelay>
    if ((err = bno055_set_page(bno, BNO_PAGE_0)) != BNO_OK) {
 8003776:	2100      	movs	r1, #0
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 f93a 	bl	80039f2 <bno055_set_page>
 800377e:	4603      	mov	r3, r0
 8003780:	73fb      	strb	r3, [r7, #15]
 8003782:	7bfb      	ldrb	r3, [r7, #15]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d001      	beq.n	800378c <bno055_mag_conf+0xc6>
        return err;
 8003788:	7bfb      	ldrb	r3, [r7, #15]
 800378a:	e000      	b.n	800378e <bno055_mag_conf+0xc8>
    }
    return BNO_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3714      	adds	r7, #20
 8003792:	46bd      	mov	sp, r7
 8003794:	bd90      	pop	{r4, r7, pc}

08003796 <bno055_set_opmode>:

error_bno bno055_set_opmode(bno055_t* imu, const bno055_opmode_t opmode) {
 8003796:	b590      	push	{r4, r7, lr}
 8003798:	b0af      	sub	sp, #188	@ 0xbc
 800379a:	af2a      	add	r7, sp, #168	@ 0xa8
 800379c:	6078      	str	r0, [r7, #4]
 800379e:	460b      	mov	r3, r1
 80037a0:	70fb      	strb	r3, [r7, #3]
#ifdef BNO_AUTO_PAGE_SET
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
        return err;
    }
#endif  // BNO_AUTO_PAGE_SET
    if ((err = bno055_write_regs(*imu, BNO_OPR_MODE, (u8*)&opmode, 1)) !=
 80037a2:	687c      	ldr	r4, [r7, #4]
 80037a4:	2301      	movs	r3, #1
 80037a6:	9329      	str	r3, [sp, #164]	@ 0xa4
 80037a8:	1cfb      	adds	r3, r7, #3
 80037aa:	9328      	str	r3, [sp, #160]	@ 0xa0
 80037ac:	233d      	movs	r3, #61	@ 0x3d
 80037ae:	9327      	str	r3, [sp, #156]	@ 0x9c
 80037b0:	4668      	mov	r0, sp
 80037b2:	f104 0310 	add.w	r3, r4, #16
 80037b6:	229c      	movs	r2, #156	@ 0x9c
 80037b8:	4619      	mov	r1, r3
 80037ba:	f00b fce4 	bl	800f186 <memcpy>
 80037be:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80037c2:	f000 f8e8 	bl	8003996 <bno055_write_regs>
 80037c6:	4603      	mov	r3, r0
 80037c8:	73fb      	strb	r3, [r7, #15]
 80037ca:	7bfb      	ldrb	r3, [r7, #15]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <bno055_set_opmode+0x3e>
        BNO_OK) {
        return err;
 80037d0:	7bfb      	ldrb	r3, [r7, #15]
 80037d2:	e003      	b.n	80037dc <bno055_set_opmode+0x46>
    }
    osDelay(BNO_ANY_TIME_DELAY + 5);
 80037d4:	2018      	movs	r0, #24
 80037d6:	f006 fd2f 	bl	800a238 <osDelay>
    return BNO_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3714      	adds	r7, #20
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd90      	pop	{r4, r7, pc}

080037e4 <bno055_set_pwr_mode>:
        return err;
    }
    return BNO_OK;
}

error_bno bno055_set_pwr_mode(bno055_t* imu, bno055_pwr_t pwr_mode) {
 80037e4:	b590      	push	{r4, r7, lr}
 80037e6:	b0af      	sub	sp, #188	@ 0xbc
 80037e8:	af2a      	add	r7, sp, #168	@ 0xa8
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	460b      	mov	r3, r1
 80037ee:	70fb      	strb	r3, [r7, #3]
    if (imu == NULL) {
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <bno055_set_pwr_mode+0x16>
        return BNO_ERR_NULL_PTR;
 80037f6:	2304      	movs	r3, #4
 80037f8:	e04d      	b.n	8003896 <bno055_set_pwr_mode+0xb2>
    }
    error_bno err;
    if ((err = bno055_set_opmode(imu, BNO_MODE_CONFIG)) != BNO_OK) {
 80037fa:	2100      	movs	r1, #0
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f7ff ffca 	bl	8003796 <bno055_set_opmode>
 8003802:	4603      	mov	r3, r0
 8003804:	73fb      	strb	r3, [r7, #15]
 8003806:	7bfb      	ldrb	r3, [r7, #15]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <bno055_set_pwr_mode+0x2c>
        return err;
 800380c:	7bfb      	ldrb	r3, [r7, #15]
 800380e:	e042      	b.n	8003896 <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 8003810:	2100      	movs	r1, #0
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f8ed 	bl	80039f2 <bno055_set_page>
 8003818:	4603      	mov	r3, r0
 800381a:	73fb      	strb	r3, [r7, #15]
 800381c:	7bfb      	ldrb	r3, [r7, #15]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <bno055_set_pwr_mode+0x42>
        return err;
 8003822:	7bfb      	ldrb	r3, [r7, #15]
 8003824:	e037      	b.n	8003896 <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_write_regs(*imu, BNO_PWR_MODE, (u8*)&pwr_mode, 1)) !=
 8003826:	687c      	ldr	r4, [r7, #4]
 8003828:	2301      	movs	r3, #1
 800382a:	9329      	str	r3, [sp, #164]	@ 0xa4
 800382c:	1cfb      	adds	r3, r7, #3
 800382e:	9328      	str	r3, [sp, #160]	@ 0xa0
 8003830:	233e      	movs	r3, #62	@ 0x3e
 8003832:	9327      	str	r3, [sp, #156]	@ 0x9c
 8003834:	4668      	mov	r0, sp
 8003836:	f104 0310 	add.w	r3, r4, #16
 800383a:	229c      	movs	r2, #156	@ 0x9c
 800383c:	4619      	mov	r1, r3
 800383e:	f00b fca2 	bl	800f186 <memcpy>
 8003842:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003846:	f000 f8a6 	bl	8003996 <bno055_write_regs>
 800384a:	4603      	mov	r3, r0
 800384c:	73fb      	strb	r3, [r7, #15]
 800384e:	7bfb      	ldrb	r3, [r7, #15]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <bno055_set_pwr_mode+0x74>
        BNO_OK) {
        return err;
 8003854:	7bfb      	ldrb	r3, [r7, #15]
 8003856:	e01e      	b.n	8003896 <bno055_set_pwr_mode+0xb2>
    }
    imu->_pwr_mode = pwr_mode;
 8003858:	78fa      	ldrb	r2, [r7, #3]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	731a      	strb	r2, [r3, #12]
    if ((err = bno055_set_page(imu, BNO_PAGE_0)) != BNO_OK) {
 800385e:	2100      	movs	r1, #0
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f8c6 	bl	80039f2 <bno055_set_page>
 8003866:	4603      	mov	r3, r0
 8003868:	73fb      	strb	r3, [r7, #15]
 800386a:	7bfb      	ldrb	r3, [r7, #15]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <bno055_set_pwr_mode+0x90>
        return err;
 8003870:	7bfb      	ldrb	r3, [r7, #15]
 8003872:	e010      	b.n	8003896 <bno055_set_pwr_mode+0xb2>
    }
    if ((err = bno055_set_opmode(imu, imu->mode)) != BNO_OK) {
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	791b      	ldrb	r3, [r3, #4]
 8003878:	4619      	mov	r1, r3
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7ff ff8b 	bl	8003796 <bno055_set_opmode>
 8003880:	4603      	mov	r3, r0
 8003882:	73fb      	strb	r3, [r7, #15]
 8003884:	7bfb      	ldrb	r3, [r7, #15]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <bno055_set_pwr_mode+0xaa>
        return err;
 800388a:	7bfb      	ldrb	r3, [r7, #15]
 800388c:	e003      	b.n	8003896 <bno055_set_pwr_mode+0xb2>
    }
    osDelay(2);
 800388e:	2002      	movs	r0, #2
 8003890:	f006 fcd2 	bl	800a238 <osDelay>
    return BNO_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3714      	adds	r7, #20
 800389a:	46bd      	mov	sp, r7
 800389c:	bd90      	pop	{r4, r7, pc}

0800389e <bno055_reset>:

error_bno bno055_reset(bno055_t* imu) {
 800389e:	b590      	push	{r4, r7, lr}
 80038a0:	b0af      	sub	sp, #188	@ 0xbc
 80038a2:	af2a      	add	r7, sp, #168	@ 0xa8
 80038a4:	6078      	str	r0, [r7, #4]
    u8 data = 0x20U;
 80038a6:	2320      	movs	r3, #32
 80038a8:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 80038aa:	687c      	ldr	r4, [r7, #4]
 80038ac:	2301      	movs	r3, #1
 80038ae:	9329      	str	r3, [sp, #164]	@ 0xa4
 80038b0:	f107 030f 	add.w	r3, r7, #15
 80038b4:	9328      	str	r3, [sp, #160]	@ 0xa0
 80038b6:	233f      	movs	r3, #63	@ 0x3f
 80038b8:	9327      	str	r3, [sp, #156]	@ 0x9c
 80038ba:	4668      	mov	r0, sp
 80038bc:	f104 0310 	add.w	r3, r4, #16
 80038c0:	229c      	movs	r2, #156	@ 0x9c
 80038c2:	4619      	mov	r1, r3
 80038c4:	f00b fc5f 	bl	800f186 <memcpy>
 80038c8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80038cc:	f000 f863 	bl	8003996 <bno055_write_regs>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <bno055_reset+0x3c>
        return BNO_ERR_I2C;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e000      	b.n	80038dc <bno055_reset+0x3e>
    }
    return BNO_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3714      	adds	r7, #20
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd90      	pop	{r4, r7, pc}

080038e4 <bno055_on>:

error_bno bno055_on(bno055_t* imu) {
 80038e4:	b590      	push	{r4, r7, lr}
 80038e6:	b0af      	sub	sp, #188	@ 0xbc
 80038e8:	af2a      	add	r7, sp, #168	@ 0xa8
 80038ea:	6078      	str	r0, [r7, #4]
    u8 data = 0x00U;
 80038ec:	2300      	movs	r3, #0
 80038ee:	73fb      	strb	r3, [r7, #15]
    if (bno055_write_regs(*imu, BNO_SYS_TRIGGER, &data, 1) != BNO_OK) {
 80038f0:	687c      	ldr	r4, [r7, #4]
 80038f2:	2301      	movs	r3, #1
 80038f4:	9329      	str	r3, [sp, #164]	@ 0xa4
 80038f6:	f107 030f 	add.w	r3, r7, #15
 80038fa:	9328      	str	r3, [sp, #160]	@ 0xa0
 80038fc:	233f      	movs	r3, #63	@ 0x3f
 80038fe:	9327      	str	r3, [sp, #156]	@ 0x9c
 8003900:	4668      	mov	r0, sp
 8003902:	f104 0310 	add.w	r3, r4, #16
 8003906:	229c      	movs	r2, #156	@ 0x9c
 8003908:	4619      	mov	r1, r3
 800390a:	f00b fc3c 	bl	800f186 <memcpy>
 800390e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003912:	f000 f840 	bl	8003996 <bno055_write_regs>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <bno055_on+0x3c>
        return BNO_ERR_I2C;
 800391c:	2301      	movs	r3, #1
 800391e:	e000      	b.n	8003922 <bno055_on+0x3e>
    }
    return BNO_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3714      	adds	r7, #20
 8003926:	46bd      	mov	sp, r7
 8003928:	bd90      	pop	{r4, r7, pc}

0800392a <bno055_read_regs>:

error_bno bno055_read_regs(bno055_t imu, u8 addr, uint8_t* buf,
                           uint32_t buf_size) {
 800392a:	b084      	sub	sp, #16
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af02      	add	r7, sp, #8
 8003932:	f107 0c10 	add.w	ip, r7, #16
 8003936:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    // err = HAL_I2C_Mem_Read(imu.i2c, imu.addr, addr, I2C_MEMADD_SIZE_8BIT,
    // buf,
    //                        buf_size, HAL_MAX_DELAY);
    err = HAL_I2C_Master_Transmit(imu.i2c, imu.addr, &addr, 1, HAL_MAX_DELAY);
 800393a:	6938      	ldr	r0, [r7, #16]
 800393c:	7dbb      	ldrb	r3, [r7, #22]
 800393e:	4619      	mov	r1, r3
 8003940:	f107 02bc 	add.w	r2, r7, #188	@ 0xbc
 8003944:	f04f 33ff 	mov.w	r3, #4294967295
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	2301      	movs	r3, #1
 800394c:	f002 fd52 	bl	80063f4 <HAL_I2C_Master_Transmit>
 8003950:	4603      	mov	r3, r0
 8003952:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 8003954:	79fb      	ldrb	r3, [r7, #7]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <bno055_read_regs+0x34>
        return BNO_ERR_I2C;
 800395a:	2301      	movs	r3, #1
 800395c:	e014      	b.n	8003988 <bno055_read_regs+0x5e>
    }
    err =
        HAL_I2C_Master_Receive(imu.i2c, imu.addr, buf, buf_size, HAL_MAX_DELAY);
 800395e:	6938      	ldr	r0, [r7, #16]
 8003960:	7dbb      	ldrb	r3, [r7, #22]
 8003962:	4619      	mov	r1, r3
 8003964:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003968:	b29b      	uxth	r3, r3
 800396a:	f04f 32ff 	mov.w	r2, #4294967295
 800396e:	9200      	str	r2, [sp, #0]
 8003970:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003974:	f002 fe3c 	bl	80065f0 <HAL_I2C_Master_Receive>
 8003978:	4603      	mov	r3, r0
 800397a:	71fb      	strb	r3, [r7, #7]
    if (err != HAL_OK) {
 800397c:	79fb      	ldrb	r3, [r7, #7]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <bno055_read_regs+0x5c>
        return BNO_ERR_I2C;
 8003982:	2301      	movs	r3, #1
 8003984:	e000      	b.n	8003988 <bno055_read_regs+0x5e>
    }
    return BNO_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003992:	b004      	add	sp, #16
 8003994:	4770      	bx	lr

08003996 <bno055_write_regs>:

error_bno bno055_write_regs(bno055_t imu, uint32_t addr, uint8_t* buf,
                            uint32_t buf_size) {
 8003996:	b084      	sub	sp, #16
 8003998:	b5b0      	push	{r4, r5, r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af04      	add	r7, sp, #16
 800399e:	f107 0418 	add.w	r4, r7, #24
 80039a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    HAL_StatusTypeDef err;
    err = HAL_I2C_Mem_Write(imu.i2c, imu.addr, addr, buf_size, buf, buf_size,
 80039a6:	69b8      	ldr	r0, [r7, #24]
 80039a8:	7fbb      	ldrb	r3, [r7, #30]
 80039aa:	461d      	mov	r5, r3
 80039ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80039b6:	b299      	uxth	r1, r3
 80039b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80039bc:	b29b      	uxth	r3, r3
 80039be:	f04f 34ff 	mov.w	r4, #4294967295
 80039c2:	9402      	str	r4, [sp, #8]
 80039c4:	9301      	str	r3, [sp, #4]
 80039c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80039ca:	9300      	str	r3, [sp, #0]
 80039cc:	460b      	mov	r3, r1
 80039ce:	4629      	mov	r1, r5
 80039d0:	f003 f840 	bl	8006a54 <HAL_I2C_Mem_Write>
 80039d4:	4603      	mov	r3, r0
 80039d6:	71fb      	strb	r3, [r7, #7]
                            HAL_MAX_DELAY);
    if (err != HAL_OK) {
 80039d8:	79fb      	ldrb	r3, [r7, #7]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <bno055_write_regs+0x4c>
        return BNO_ERR_I2C;
 80039de:	2301      	movs	r3, #1
 80039e0:	e000      	b.n	80039e4 <bno055_write_regs+0x4e>
    }
    return BNO_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80039ee:	b004      	add	sp, #16
 80039f0:	4770      	bx	lr

080039f2 <bno055_set_page>:

error_bno bno055_set_page(bno055_t* imu, const bno055_page_t page) {
 80039f2:	b590      	push	{r4, r7, lr}
 80039f4:	b0af      	sub	sp, #188	@ 0xbc
 80039f6:	af2a      	add	r7, sp, #168	@ 0xa8
 80039f8:	6078      	str	r0, [r7, #4]
 80039fa:	460b      	mov	r3, r1
 80039fc:	70fb      	strb	r3, [r7, #3]
    if (imu->_page != page) {
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	7b5a      	ldrb	r2, [r3, #13]
 8003a02:	78fb      	ldrb	r3, [r7, #3]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d001      	beq.n	8003a0c <bno055_set_page+0x1a>
        return BNO_OK;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	e024      	b.n	8003a56 <bno055_set_page+0x64>
    }
    if (page > 0x01) {
 8003a0c:	78fb      	ldrb	r3, [r7, #3]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d901      	bls.n	8003a16 <bno055_set_page+0x24>
        return BNO_ERR_PAGE_TOO_HIGH;
 8003a12:	2302      	movs	r3, #2
 8003a14:	e01f      	b.n	8003a56 <bno055_set_page+0x64>
    }
    error_bno err;
    err = bno055_write_regs(*imu, BNO_PAGE_ID, (u8*)&page, 1);
 8003a16:	687c      	ldr	r4, [r7, #4]
 8003a18:	2301      	movs	r3, #1
 8003a1a:	9329      	str	r3, [sp, #164]	@ 0xa4
 8003a1c:	1cfb      	adds	r3, r7, #3
 8003a1e:	9328      	str	r3, [sp, #160]	@ 0xa0
 8003a20:	2307      	movs	r3, #7
 8003a22:	9327      	str	r3, [sp, #156]	@ 0x9c
 8003a24:	4668      	mov	r0, sp
 8003a26:	f104 0310 	add.w	r3, r4, #16
 8003a2a:	229c      	movs	r2, #156	@ 0x9c
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	f00b fbaa 	bl	800f186 <memcpy>
 8003a32:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003a36:	f7ff ffae 	bl	8003996 <bno055_write_regs>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	73fb      	strb	r3, [r7, #15]
    if (err != BNO_OK) {
 8003a3e:	7bfb      	ldrb	r3, [r7, #15]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <bno055_set_page+0x56>
        return err;
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
 8003a46:	e006      	b.n	8003a56 <bno055_set_page+0x64>
    }
    imu->_page = page;
 8003a48:	78fa      	ldrb	r2, [r7, #3]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	735a      	strb	r2, [r3, #13]
    osDelay(2);
 8003a4e:	2002      	movs	r0, #2
 8003a50:	f006 fbf2 	bl	800a238 <osDelay>
    return BNO_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3714      	adds	r7, #20
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd90      	pop	{r4, r7, pc}
	...

08003a60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003a66:	2300      	movs	r3, #0
 8003a68:	607b      	str	r3, [r7, #4]
 8003a6a:	4b10      	ldr	r3, [pc, #64]	@ (8003aac <MX_DMA_Init+0x4c>)
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a6e:	4a0f      	ldr	r2, [pc, #60]	@ (8003aac <MX_DMA_Init+0x4c>)
 8003a70:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a76:	4b0d      	ldr	r3, [pc, #52]	@ (8003aac <MX_DMA_Init+0x4c>)
 8003a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a7e:	607b      	str	r3, [r7, #4]
 8003a80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8003a82:	2200      	movs	r2, #0
 8003a84:	2105      	movs	r1, #5
 8003a86:	2038      	movs	r0, #56	@ 0x38
 8003a88:	f001 fe52 	bl	8005730 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003a8c:	2038      	movs	r0, #56	@ 0x38
 8003a8e:	f001 fe6b 	bl	8005768 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8003a92:	2200      	movs	r2, #0
 8003a94:	2105      	movs	r1, #5
 8003a96:	203a      	movs	r0, #58	@ 0x3a
 8003a98:	f001 fe4a 	bl	8005730 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003a9c:	203a      	movs	r0, #58	@ 0x3a
 8003a9e:	f001 fe63 	bl	8005768 <HAL_NVIC_EnableIRQ>

}
 8003aa2:	bf00      	nop
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	40023800 	.word	0x40023800

08003ab0 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start_IT(&htim11);
 8003ab4:	4809      	ldr	r0, [pc, #36]	@ (8003adc <configureTimerForRunTimeStats+0x2c>)
 8003ab6:	f004 f9bd 	bl	8007e34 <HAL_TIM_Base_Start_IT>
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003aba:	4b09      	ldr	r3, [pc, #36]	@ (8003ae0 <configureTimerForRunTimeStats+0x30>)
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	4a08      	ldr	r2, [pc, #32]	@ (8003ae0 <configureTimerForRunTimeStats+0x30>)
 8003ac0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ac4:	60d3      	str	r3, [r2, #12]

    DWT->CTRL |= 1;
 8003ac6:	4b07      	ldr	r3, [pc, #28]	@ (8003ae4 <configureTimerForRunTimeStats+0x34>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a06      	ldr	r2, [pc, #24]	@ (8003ae4 <configureTimerForRunTimeStats+0x34>)
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	6013      	str	r3, [r2, #0]
    DWT->CYCCNT = 0;
 8003ad2:	4b04      	ldr	r3, [pc, #16]	@ (8003ae4 <configureTimerForRunTimeStats+0x34>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	605a      	str	r2, [r3, #4]
}
 8003ad8:	bf00      	nop
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	20000674 	.word	0x20000674
 8003ae0:	e000edf0 	.word	0xe000edf0
 8003ae4:	e0001000 	.word	0xe0001000

08003ae8 <getRunTimeCounterValue>:

extern volatile unsigned long ulHighFrequencyTimerTicks;
__weak unsigned long getRunTimeCounterValue(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
    return ulHighFrequencyTimerTicks;
 8003aec:	4b03      	ldr	r3, [pc, #12]	@ (8003afc <getRunTimeCounterValue+0x14>)
 8003aee:	681b      	ldr	r3, [r3, #0]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	200005cc 	.word	0x200005cc

08003b00 <PreSleepProcessing>:
/* USER CODE END 1 */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

    // Start all 4 input captures
    HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	4847      	ldr	r0, [pc, #284]	@ (8003c4c <MX_FREERTOS_Init+0x124>)
 8003b30:	f004 fb3c 	bl	80081ac <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8003b34:	2104      	movs	r1, #4
 8003b36:	4845      	ldr	r0, [pc, #276]	@ (8003c4c <MX_FREERTOS_Init+0x124>)
 8003b38:	f004 fb38 	bl	80081ac <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8003b3c:	2108      	movs	r1, #8
 8003b3e:	4843      	ldr	r0, [pc, #268]	@ (8003c4c <MX_FREERTOS_Init+0x124>)
 8003b40:	f004 fb34 	bl	80081ac <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 8003b44:	210c      	movs	r1, #12
 8003b46:	4841      	ldr	r0, [pc, #260]	@ (8003c4c <MX_FREERTOS_Init+0x124>)
 8003b48:	f004 fb30 	bl	80081ac <HAL_TIM_IC_Start_IT>

    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	4840      	ldr	r0, [pc, #256]	@ (8003c50 <MX_FREERTOS_Init+0x128>)
 8003b50:	f004 fa22 	bl	8007f98 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8003b54:	2104      	movs	r1, #4
 8003b56:	483e      	ldr	r0, [pc, #248]	@ (8003c50 <MX_FREERTOS_Init+0x128>)
 8003b58:	f004 fa1e 	bl	8007f98 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8003b5c:	2108      	movs	r1, #8
 8003b5e:	483c      	ldr	r0, [pc, #240]	@ (8003c50 <MX_FREERTOS_Init+0x128>)
 8003b60:	f004 fa1a 	bl	8007f98 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8003b64:	210c      	movs	r1, #12
 8003b66:	483a      	ldr	r0, [pc, #232]	@ (8003c50 <MX_FREERTOS_Init+0x128>)
 8003b68:	f004 fa16 	bl	8007f98 <HAL_TIM_PWM_Start>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of radioQueue */
  radioQueueHandle = osMessageQueueNew (1, sizeof(RadioData_t), &radioQueue_attributes);
 8003b6c:	4a39      	ldr	r2, [pc, #228]	@ (8003c54 <MX_FREERTOS_Init+0x12c>)
 8003b6e:	2108      	movs	r1, #8
 8003b70:	2001      	movs	r0, #1
 8003b72:	f006 fb7c 	bl	800a26e <osMessageQueueNew>
 8003b76:	4603      	mov	r3, r0
 8003b78:	4a37      	ldr	r2, [pc, #220]	@ (8003c58 <MX_FREERTOS_Init+0x130>)
 8003b7a:	6013      	str	r3, [r2, #0]

  /* creation of adcQueue */
  adcQueueHandle = osMessageQueueNew (1, sizeof(AdcData_t), &adcQueue_attributes);
 8003b7c:	4a37      	ldr	r2, [pc, #220]	@ (8003c5c <MX_FREERTOS_Init+0x134>)
 8003b7e:	2110      	movs	r1, #16
 8003b80:	2001      	movs	r0, #1
 8003b82:	f006 fb74 	bl	800a26e <osMessageQueueNew>
 8003b86:	4603      	mov	r3, r0
 8003b88:	4a35      	ldr	r2, [pc, #212]	@ (8003c60 <MX_FREERTOS_Init+0x138>)
 8003b8a:	6013      	str	r3, [r2, #0]

  /* creation of imuQueue */
  imuQueueHandle = osMessageQueueNew (1, sizeof(ImuData_t), &imuQueue_attributes);
 8003b8c:	4a35      	ldr	r2, [pc, #212]	@ (8003c64 <MX_FREERTOS_Init+0x13c>)
 8003b8e:	2130      	movs	r1, #48	@ 0x30
 8003b90:	2001      	movs	r0, #1
 8003b92:	f006 fb6c 	bl	800a26e <osMessageQueueNew>
 8003b96:	4603      	mov	r3, r0
 8003b98:	4a33      	ldr	r2, [pc, #204]	@ (8003c68 <MX_FREERTOS_Init+0x140>)
 8003b9a:	6013      	str	r3, [r2, #0]

  /* creation of controlQueue */
  controlQueueHandle = osMessageQueueNew (1, sizeof(ControlData_t), &controlQueue_attributes);
 8003b9c:	4a33      	ldr	r2, [pc, #204]	@ (8003c6c <MX_FREERTOS_Init+0x144>)
 8003b9e:	2118      	movs	r1, #24
 8003ba0:	2001      	movs	r0, #1
 8003ba2:	f006 fb64 	bl	800a26e <osMessageQueueNew>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	4a31      	ldr	r2, [pc, #196]	@ (8003c70 <MX_FREERTOS_Init+0x148>)
 8003baa:	6013      	str	r3, [r2, #0]

  /* creation of telemetryQueue */
  telemetryQueueHandle = osMessageQueueNew (1, sizeof(TelemetryData_t), &telemetryQueue_attributes);
 8003bac:	4a31      	ldr	r2, [pc, #196]	@ (8003c74 <MX_FREERTOS_Init+0x14c>)
 8003bae:	2101      	movs	r1, #1
 8003bb0:	2001      	movs	r0, #1
 8003bb2:	f006 fb5c 	bl	800a26e <osMessageQueueNew>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	4a2f      	ldr	r2, [pc, #188]	@ (8003c78 <MX_FREERTOS_Init+0x150>)
 8003bba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  // Allowing the kernel-aware debugger to get to know our queues
  vQueueAddToRegistry( radioQueueHandle, "radioQueue" );
 8003bbc:	4b26      	ldr	r3, [pc, #152]	@ (8003c58 <MX_FREERTOS_Init+0x130>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	492e      	ldr	r1, [pc, #184]	@ (8003c7c <MX_FREERTOS_Init+0x154>)
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f007 fb24 	bl	800b210 <vQueueAddToRegistry>
  vQueueAddToRegistry( adcQueueHandle, "adcQueue" );
 8003bc8:	4b25      	ldr	r3, [pc, #148]	@ (8003c60 <MX_FREERTOS_Init+0x138>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	492c      	ldr	r1, [pc, #176]	@ (8003c80 <MX_FREERTOS_Init+0x158>)
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f007 fb1e 	bl	800b210 <vQueueAddToRegistry>
  vQueueAddToRegistry( imuQueueHandle, "imuQueue" );
 8003bd4:	4b24      	ldr	r3, [pc, #144]	@ (8003c68 <MX_FREERTOS_Init+0x140>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	492a      	ldr	r1, [pc, #168]	@ (8003c84 <MX_FREERTOS_Init+0x15c>)
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f007 fb18 	bl	800b210 <vQueueAddToRegistry>
  vQueueAddToRegistry( controlQueueHandle, "controlQueue" );
 8003be0:	4b23      	ldr	r3, [pc, #140]	@ (8003c70 <MX_FREERTOS_Init+0x148>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4928      	ldr	r1, [pc, #160]	@ (8003c88 <MX_FREERTOS_Init+0x160>)
 8003be6:	4618      	mov	r0, r3
 8003be8:	f007 fb12 	bl	800b210 <vQueueAddToRegistry>
  vQueueAddToRegistry( telemetryQueueHandle, "telemetryQueue" );
 8003bec:	4b22      	ldr	r3, [pc, #136]	@ (8003c78 <MX_FREERTOS_Init+0x150>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4926      	ldr	r1, [pc, #152]	@ (8003c8c <MX_FREERTOS_Init+0x164>)
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f007 fb0c 	bl	800b210 <vQueueAddToRegistry>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003bf8:	4a25      	ldr	r2, [pc, #148]	@ (8003c90 <MX_FREERTOS_Init+0x168>)
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	4825      	ldr	r0, [pc, #148]	@ (8003c94 <MX_FREERTOS_Init+0x16c>)
 8003bfe:	f006 fa89 	bl	800a114 <osThreadNew>
 8003c02:	4603      	mov	r3, r0
 8003c04:	4a24      	ldr	r2, [pc, #144]	@ (8003c98 <MX_FREERTOS_Init+0x170>)
 8003c06:	6013      	str	r3, [r2, #0]

  /* creation of control_task */
  control_taskHandle = osThreadNew(_control_task, NULL, &control_task_attributes);
 8003c08:	4a24      	ldr	r2, [pc, #144]	@ (8003c9c <MX_FREERTOS_Init+0x174>)
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	4824      	ldr	r0, [pc, #144]	@ (8003ca0 <MX_FREERTOS_Init+0x178>)
 8003c0e:	f006 fa81 	bl	800a114 <osThreadNew>
 8003c12:	4603      	mov	r3, r0
 8003c14:	4a23      	ldr	r2, [pc, #140]	@ (8003ca4 <MX_FREERTOS_Init+0x17c>)
 8003c16:	6013      	str	r3, [r2, #0]

  /* creation of imu_read_task */
  imu_read_taskHandle = osThreadNew(_imu_read_task, NULL, &imu_read_task_attributes);
 8003c18:	4a23      	ldr	r2, [pc, #140]	@ (8003ca8 <MX_FREERTOS_Init+0x180>)
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	4823      	ldr	r0, [pc, #140]	@ (8003cac <MX_FREERTOS_Init+0x184>)
 8003c1e:	f006 fa79 	bl	800a114 <osThreadNew>
 8003c22:	4603      	mov	r3, r0
 8003c24:	4a22      	ldr	r2, [pc, #136]	@ (8003cb0 <MX_FREERTOS_Init+0x188>)
 8003c26:	6013      	str	r3, [r2, #0]

  /* creation of adc_read_task */
  adc_read_taskHandle = osThreadNew(_adc_read_task, NULL, &adc_read_task_attributes);
 8003c28:	4a22      	ldr	r2, [pc, #136]	@ (8003cb4 <MX_FREERTOS_Init+0x18c>)
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	4822      	ldr	r0, [pc, #136]	@ (8003cb8 <MX_FREERTOS_Init+0x190>)
 8003c2e:	f006 fa71 	bl	800a114 <osThreadNew>
 8003c32:	4603      	mov	r3, r0
 8003c34:	4a21      	ldr	r2, [pc, #132]	@ (8003cbc <MX_FREERTOS_Init+0x194>)
 8003c36:	6013      	str	r3, [r2, #0]

  /* creation of telemetry_task */
  telemetry_taskHandle = osThreadNew(_telemetry_task, NULL, &telemetry_task_attributes);
 8003c38:	4a21      	ldr	r2, [pc, #132]	@ (8003cc0 <MX_FREERTOS_Init+0x198>)
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	4821      	ldr	r0, [pc, #132]	@ (8003cc4 <MX_FREERTOS_Init+0x19c>)
 8003c3e:	f006 fa69 	bl	800a114 <osThreadNew>
 8003c42:	4603      	mov	r3, r0
 8003c44:	4a20      	ldr	r2, [pc, #128]	@ (8003cc8 <MX_FREERTOS_Init+0x1a0>)
 8003c46:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8003c48:	bf00      	nop
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	200005e4 	.word	0x200005e4
 8003c50:	2000062c 	.word	0x2000062c
 8003c54:	08011e2c 	.word	0x08011e2c
 8003c58:	2000051c 	.word	0x2000051c
 8003c5c:	08011e44 	.word	0x08011e44
 8003c60:	20000520 	.word	0x20000520
 8003c64:	08011e5c 	.word	0x08011e5c
 8003c68:	20000524 	.word	0x20000524
 8003c6c:	08011e74 	.word	0x08011e74
 8003c70:	20000528 	.word	0x20000528
 8003c74:	08011e8c 	.word	0x08011e8c
 8003c78:	2000052c 	.word	0x2000052c
 8003c7c:	08011cf4 	.word	0x08011cf4
 8003c80:	08011d00 	.word	0x08011d00
 8003c84:	08011d0c 	.word	0x08011d0c
 8003c88:	08011d18 	.word	0x08011d18
 8003c8c:	08011d28 	.word	0x08011d28
 8003c90:	08011d78 	.word	0x08011d78
 8003c94:	08003ccd 	.word	0x08003ccd
 8003c98:	20000508 	.word	0x20000508
 8003c9c:	08011d9c 	.word	0x08011d9c
 8003ca0:	08003ced 	.word	0x08003ced
 8003ca4:	2000050c 	.word	0x2000050c
 8003ca8:	08011dc0 	.word	0x08011dc0
 8003cac:	08003d11 	.word	0x08003d11
 8003cb0:	20000510 	.word	0x20000510
 8003cb4:	08011de4 	.word	0x08011de4
 8003cb8:	08003d35 	.word	0x08003d35
 8003cbc:	20000514 	.word	0x20000514
 8003cc0:	08011e08 	.word	0x08011e08
 8003cc4:	08003d59 	.word	0x08003d59
 8003cc8:	20000518 	.word	0x20000518

08003ccc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    idle_dummy++; // Keep incrementing the dummy variable
 8003cd4:	4b04      	ldr	r3, [pc, #16]	@ (8003ce8 <StartDefaultTask+0x1c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	4a03      	ldr	r2, [pc, #12]	@ (8003ce8 <StartDefaultTask+0x1c>)
 8003cdc:	6013      	str	r3, [r2, #0]
    osDelay(1); // A small delay to avoid task starvation
 8003cde:	2001      	movs	r0, #1
 8003ce0:	f006 faaa 	bl	800a238 <osDelay>
    idle_dummy++; // Keep incrementing the dummy variable
 8003ce4:	bf00      	nop
 8003ce6:	e7f5      	b.n	8003cd4 <StartDefaultTask+0x8>
 8003ce8:	200004f4 	.word	0x200004f4

08003cec <_control_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header__control_task */
void _control_task(void *argument)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN _control_task */
  for(;;)
  {
    control_dummy++;
 8003cf4:	4b05      	ldr	r3, [pc, #20]	@ (8003d0c <_control_task+0x20>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	4a04      	ldr	r2, [pc, #16]	@ (8003d0c <_control_task+0x20>)
 8003cfc:	6013      	str	r3, [r2, #0]
    control(); // Execute control function
 8003cfe:	f7fd fce3 	bl	80016c8 <control>
    osDelay(CONTROL_DELAY);
 8003d02:	200a      	movs	r0, #10
 8003d04:	f006 fa98 	bl	800a238 <osDelay>
    control_dummy++;
 8003d08:	bf00      	nop
 8003d0a:	e7f3      	b.n	8003cf4 <_control_task+0x8>
 8003d0c:	200004f8 	.word	0x200004f8

08003d10 <_imu_read_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header__imu_read_task */
void _imu_read_task(void *argument)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN _imu_read_task */
  for(;;)
  {
    imu_dummy++;
 8003d18:	4b05      	ldr	r3, [pc, #20]	@ (8003d30 <_imu_read_task+0x20>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	4a04      	ldr	r2, [pc, #16]	@ (8003d30 <_imu_read_task+0x20>)
 8003d20:	6013      	str	r3, [r2, #0]
    imu_read(); // Execute imu read function
 8003d22:	f7fd fe93 	bl	8001a4c <imu_read>
    osDelay(IMU_DELAY);
 8003d26:	200a      	movs	r0, #10
 8003d28:	f006 fa86 	bl	800a238 <osDelay>
    imu_dummy++;
 8003d2c:	bf00      	nop
 8003d2e:	e7f3      	b.n	8003d18 <_imu_read_task+0x8>
 8003d30:	20000500 	.word	0x20000500

08003d34 <_adc_read_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header__adc_read_task */
void _adc_read_task(void *argument)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN _adc_read_task */
  for(;;)
  {
    adc_dummy++;
 8003d3c:	4b05      	ldr	r3, [pc, #20]	@ (8003d54 <_adc_read_task+0x20>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	3301      	adds	r3, #1
 8003d42:	4a04      	ldr	r2, [pc, #16]	@ (8003d54 <_adc_read_task+0x20>)
 8003d44:	6013      	str	r3, [r2, #0]
    adc_read(); // Execute ADC read function
 8003d46:	f7fd f973 	bl	8001030 <adc_read>
    osDelay(ADC_DELAY);
 8003d4a:	200a      	movs	r0, #10
 8003d4c:	f006 fa74 	bl	800a238 <osDelay>
    adc_dummy++;
 8003d50:	bf00      	nop
 8003d52:	e7f3      	b.n	8003d3c <_adc_read_task+0x8>
 8003d54:	20000504 	.word	0x20000504

08003d58 <_telemetry_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header__telemetry_task */
void _telemetry_task(void *argument)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN _telemetry_task */
  for(;;)
  {
    telemetry_dummy++;
 8003d60:	4b05      	ldr	r3, [pc, #20]	@ (8003d78 <_telemetry_task+0x20>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	3301      	adds	r3, #1
 8003d66:	4a04      	ldr	r2, [pc, #16]	@ (8003d78 <_telemetry_task+0x20>)
 8003d68:	6013      	str	r3, [r2, #0]
    telemetry(); // Execute telemetry function
 8003d6a:	f7fd ffaf 	bl	8001ccc <telemetry>
    osDelay(TELEMETRY_DELAY);
 8003d6e:	200a      	movs	r0, #10
 8003d70:	f006 fa62 	bl	800a238 <osDelay>
    telemetry_dummy++;
 8003d74:	bf00      	nop
 8003d76:	e7f3      	b.n	8003d60 <_telemetry_task+0x8>
 8003d78:	200004fc 	.word	0x200004fc

08003d7c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d82:	2300      	movs	r3, #0
 8003d84:	607b      	str	r3, [r7, #4]
 8003d86:	4b10      	ldr	r3, [pc, #64]	@ (8003dc8 <MX_GPIO_Init+0x4c>)
 8003d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d8a:	4a0f      	ldr	r2, [pc, #60]	@ (8003dc8 <MX_GPIO_Init+0x4c>)
 8003d8c:	f043 0301 	orr.w	r3, r3, #1
 8003d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d92:	4b0d      	ldr	r3, [pc, #52]	@ (8003dc8 <MX_GPIO_Init+0x4c>)
 8003d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	607b      	str	r3, [r7, #4]
 8003d9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d9e:	2300      	movs	r3, #0
 8003da0:	603b      	str	r3, [r7, #0]
 8003da2:	4b09      	ldr	r3, [pc, #36]	@ (8003dc8 <MX_GPIO_Init+0x4c>)
 8003da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da6:	4a08      	ldr	r2, [pc, #32]	@ (8003dc8 <MX_GPIO_Init+0x4c>)
 8003da8:	f043 0302 	orr.w	r3, r3, #2
 8003dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dae:	4b06      	ldr	r3, [pc, #24]	@ (8003dc8 <MX_GPIO_Init+0x4c>)
 8003db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	603b      	str	r3, [r7, #0]
 8003db8:	683b      	ldr	r3, [r7, #0]

}
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	40023800 	.word	0x40023800

08003dcc <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003dd0:	4b12      	ldr	r3, [pc, #72]	@ (8003e1c <MX_I2C3_Init+0x50>)
 8003dd2:	4a13      	ldr	r2, [pc, #76]	@ (8003e20 <MX_I2C3_Init+0x54>)
 8003dd4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8003dd6:	4b11      	ldr	r3, [pc, #68]	@ (8003e1c <MX_I2C3_Init+0x50>)
 8003dd8:	4a12      	ldr	r2, [pc, #72]	@ (8003e24 <MX_I2C3_Init+0x58>)
 8003dda:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8003e1c <MX_I2C3_Init+0x50>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003de2:	4b0e      	ldr	r3, [pc, #56]	@ (8003e1c <MX_I2C3_Init+0x50>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003de8:	4b0c      	ldr	r3, [pc, #48]	@ (8003e1c <MX_I2C3_Init+0x50>)
 8003dea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003dee:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003df0:	4b0a      	ldr	r3, [pc, #40]	@ (8003e1c <MX_I2C3_Init+0x50>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003df6:	4b09      	ldr	r3, [pc, #36]	@ (8003e1c <MX_I2C3_Init+0x50>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003dfc:	4b07      	ldr	r3, [pc, #28]	@ (8003e1c <MX_I2C3_Init+0x50>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e02:	4b06      	ldr	r3, [pc, #24]	@ (8003e1c <MX_I2C3_Init+0x50>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003e08:	4804      	ldr	r0, [pc, #16]	@ (8003e1c <MX_I2C3_Init+0x50>)
 8003e0a:	f002 f9af 	bl	800616c <HAL_I2C_Init>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003e14:	f000 f90a 	bl	800402c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003e18:	bf00      	nop
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	20000530 	.word	0x20000530
 8003e20:	40005c00 	.word	0x40005c00
 8003e24:	000186a0 	.word	0x000186a0

08003e28 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b08a      	sub	sp, #40	@ 0x28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e30:	f107 0314 	add.w	r3, r7, #20
 8003e34:	2200      	movs	r2, #0
 8003e36:	601a      	str	r2, [r3, #0]
 8003e38:	605a      	str	r2, [r3, #4]
 8003e3a:	609a      	str	r2, [r3, #8]
 8003e3c:	60da      	str	r2, [r3, #12]
 8003e3e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a28      	ldr	r2, [pc, #160]	@ (8003ee8 <HAL_I2C_MspInit+0xc0>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d14a      	bne.n	8003ee0 <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	613b      	str	r3, [r7, #16]
 8003e4e:	4b27      	ldr	r3, [pc, #156]	@ (8003eec <HAL_I2C_MspInit+0xc4>)
 8003e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e52:	4a26      	ldr	r2, [pc, #152]	@ (8003eec <HAL_I2C_MspInit+0xc4>)
 8003e54:	f043 0301 	orr.w	r3, r3, #1
 8003e58:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e5a:	4b24      	ldr	r3, [pc, #144]	@ (8003eec <HAL_I2C_MspInit+0xc4>)
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	613b      	str	r3, [r7, #16]
 8003e64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e66:	2300      	movs	r3, #0
 8003e68:	60fb      	str	r3, [r7, #12]
 8003e6a:	4b20      	ldr	r3, [pc, #128]	@ (8003eec <HAL_I2C_MspInit+0xc4>)
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6e:	4a1f      	ldr	r2, [pc, #124]	@ (8003eec <HAL_I2C_MspInit+0xc4>)
 8003e70:	f043 0302 	orr.w	r3, r3, #2
 8003e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e76:	4b1d      	ldr	r3, [pc, #116]	@ (8003eec <HAL_I2C_MspInit+0xc4>)
 8003e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	60fb      	str	r3, [r7, #12]
 8003e80:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = IMU_CLK_Pin;
 8003e82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e88:	2312      	movs	r3, #18
 8003e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e90:	2303      	movs	r3, #3
 8003e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003e94:	2304      	movs	r3, #4
 8003e96:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(IMU_CLK_GPIO_Port, &GPIO_InitStruct);
 8003e98:	f107 0314 	add.w	r3, r7, #20
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	4814      	ldr	r0, [pc, #80]	@ (8003ef0 <HAL_I2C_MspInit+0xc8>)
 8003ea0:	f001 ffe0 	bl	8005e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IMU_SDA_Pin;
 8003ea4:	2310      	movs	r3, #16
 8003ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ea8:	2312      	movs	r3, #18
 8003eaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003eac:	2301      	movs	r3, #1
 8003eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8003eb4:	2309      	movs	r3, #9
 8003eb6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(IMU_SDA_GPIO_Port, &GPIO_InitStruct);
 8003eb8:	f107 0314 	add.w	r3, r7, #20
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	480d      	ldr	r0, [pc, #52]	@ (8003ef4 <HAL_I2C_MspInit+0xcc>)
 8003ec0:	f001 ffd0 	bl	8005e64 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	60bb      	str	r3, [r7, #8]
 8003ec8:	4b08      	ldr	r3, [pc, #32]	@ (8003eec <HAL_I2C_MspInit+0xc4>)
 8003eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ecc:	4a07      	ldr	r2, [pc, #28]	@ (8003eec <HAL_I2C_MspInit+0xc4>)
 8003ece:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003ed2:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ed4:	4b05      	ldr	r3, [pc, #20]	@ (8003eec <HAL_I2C_MspInit+0xc4>)
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003edc:	60bb      	str	r3, [r7, #8]
 8003ede:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8003ee0:	bf00      	nop
 8003ee2:	3728      	adds	r7, #40	@ 0x28
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	40005c00 	.word	0x40005c00
 8003eec:	40023800 	.word	0x40023800
 8003ef0:	40020000 	.word	0x40020000
 8003ef4:	40020400 	.word	0x40020400

08003ef8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003efc:	f000 ff2c 	bl	8004d58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f00:	f000 f818 	bl	8003f34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f04:	f7ff ff3a 	bl	8003d7c <MX_GPIO_Init>
  MX_DMA_Init();
 8003f08:	f7ff fdaa 	bl	8003a60 <MX_DMA_Init>
  MX_ADC1_Init();
 8003f0c:	f7fe f890 	bl	8002030 <MX_ADC1_Init>
  MX_TIM3_Init();
 8003f10:	f000 fc3a 	bl	8004788 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003f14:	f000 fcca 	bl	80048ac <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8003f18:	f000 fe4e 	bl	8004bb8 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 8003f1c:	f7ff ff56 	bl	8003dcc <MX_I2C3_Init>
  MX_TIM11_Init();
 8003f20:	f000 fd3e 	bl	80049a0 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003f24:	f006 f8ac 	bl	800a080 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8003f28:	f7ff fdfe 	bl	8003b28 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003f2c:	f006 f8cc 	bl	800a0c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003f30:	bf00      	nop
 8003f32:	e7fd      	b.n	8003f30 <main+0x38>

08003f34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b094      	sub	sp, #80	@ 0x50
 8003f38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f3a:	f107 0320 	add.w	r3, r7, #32
 8003f3e:	2230      	movs	r2, #48	@ 0x30
 8003f40:	2100      	movs	r1, #0
 8003f42:	4618      	mov	r0, r3
 8003f44:	f00b f82f 	bl	800efa6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f48:	f107 030c 	add.w	r3, r7, #12
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	605a      	str	r2, [r3, #4]
 8003f52:	609a      	str	r2, [r3, #8]
 8003f54:	60da      	str	r2, [r3, #12]
 8003f56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f58:	2300      	movs	r3, #0
 8003f5a:	60bb      	str	r3, [r7, #8]
 8003f5c:	4b28      	ldr	r3, [pc, #160]	@ (8004000 <SystemClock_Config+0xcc>)
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f60:	4a27      	ldr	r2, [pc, #156]	@ (8004000 <SystemClock_Config+0xcc>)
 8003f62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f66:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f68:	4b25      	ldr	r3, [pc, #148]	@ (8004000 <SystemClock_Config+0xcc>)
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f70:	60bb      	str	r3, [r7, #8]
 8003f72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f74:	2300      	movs	r3, #0
 8003f76:	607b      	str	r3, [r7, #4]
 8003f78:	4b22      	ldr	r3, [pc, #136]	@ (8004004 <SystemClock_Config+0xd0>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003f80:	4a20      	ldr	r2, [pc, #128]	@ (8004004 <SystemClock_Config+0xd0>)
 8003f82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f86:	6013      	str	r3, [r2, #0]
 8003f88:	4b1e      	ldr	r3, [pc, #120]	@ (8004004 <SystemClock_Config+0xd0>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003f90:	607b      	str	r3, [r7, #4]
 8003f92:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003f94:	2302      	movs	r3, #2
 8003f96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003f9c:	2310      	movs	r3, #16
 8003f9e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003fa8:	2308      	movs	r3, #8
 8003faa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8003fac:	2354      	movs	r3, #84	@ 0x54
 8003fae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003fb4:	2304      	movs	r3, #4
 8003fb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003fb8:	f107 0320 	add.w	r3, r7, #32
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f003 fa5f 	bl	8007480 <HAL_RCC_OscConfig>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003fc8:	f000 f830 	bl	800402c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003fcc:	230f      	movs	r3, #15
 8003fce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003fd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003fdc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003fe2:	f107 030c 	add.w	r3, r7, #12
 8003fe6:	2102      	movs	r1, #2
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f003 fcc1 	bl	8007970 <HAL_RCC_ClockConfig>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d001      	beq.n	8003ff8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003ff4:	f000 f81a 	bl	800402c <Error_Handler>
  }
}
 8003ff8:	bf00      	nop
 8003ffa:	3750      	adds	r7, #80	@ 0x50
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	40023800 	.word	0x40023800
 8004004:	40007000 	.word	0x40007000

08004008 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a04      	ldr	r2, [pc, #16]	@ (8004028 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d101      	bne.n	800401e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800401a:	f000 febf 	bl	8004d9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800401e:	bf00      	nop
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	40014400 	.word	0x40014400

0800402c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004030:	b672      	cpsid	i
}
 8004032:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004034:	bf00      	nop
 8004036:	e7fd      	b.n	8004034 <Error_Handler+0x8>

08004038 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800403e:	2300      	movs	r3, #0
 8004040:	607b      	str	r3, [r7, #4]
 8004042:	4b12      	ldr	r3, [pc, #72]	@ (800408c <HAL_MspInit+0x54>)
 8004044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004046:	4a11      	ldr	r2, [pc, #68]	@ (800408c <HAL_MspInit+0x54>)
 8004048:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800404c:	6453      	str	r3, [r2, #68]	@ 0x44
 800404e:	4b0f      	ldr	r3, [pc, #60]	@ (800408c <HAL_MspInit+0x54>)
 8004050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004052:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004056:	607b      	str	r3, [r7, #4]
 8004058:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800405a:	2300      	movs	r3, #0
 800405c:	603b      	str	r3, [r7, #0]
 800405e:	4b0b      	ldr	r3, [pc, #44]	@ (800408c <HAL_MspInit+0x54>)
 8004060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004062:	4a0a      	ldr	r2, [pc, #40]	@ (800408c <HAL_MspInit+0x54>)
 8004064:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004068:	6413      	str	r3, [r2, #64]	@ 0x40
 800406a:	4b08      	ldr	r3, [pc, #32]	@ (800408c <HAL_MspInit+0x54>)
 800406c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004072:	603b      	str	r3, [r7, #0]
 8004074:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004076:	2200      	movs	r2, #0
 8004078:	210f      	movs	r1, #15
 800407a:	f06f 0001 	mvn.w	r0, #1
 800407e:	f001 fb57 	bl	8005730 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004082:	bf00      	nop
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	40023800 	.word	0x40023800

08004090 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b08c      	sub	sp, #48	@ 0x30
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8004098:	2300      	movs	r3, #0
 800409a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800409c:	2300      	movs	r3, #0
 800409e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80040a0:	2300      	movs	r3, #0
 80040a2:	60bb      	str	r3, [r7, #8]
 80040a4:	4b2e      	ldr	r3, [pc, #184]	@ (8004160 <HAL_InitTick+0xd0>)
 80040a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040a8:	4a2d      	ldr	r2, [pc, #180]	@ (8004160 <HAL_InitTick+0xd0>)
 80040aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040ae:	6453      	str	r3, [r2, #68]	@ 0x44
 80040b0:	4b2b      	ldr	r3, [pc, #172]	@ (8004160 <HAL_InitTick+0xd0>)
 80040b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040b8:	60bb      	str	r3, [r7, #8]
 80040ba:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80040bc:	f107 020c 	add.w	r2, r7, #12
 80040c0:	f107 0310 	add.w	r3, r7, #16
 80040c4:	4611      	mov	r1, r2
 80040c6:	4618      	mov	r0, r3
 80040c8:	f003 fe32 	bl	8007d30 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80040cc:	f003 fe1c 	bl	8007d08 <HAL_RCC_GetPCLK2Freq>
 80040d0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80040d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040d4:	4a23      	ldr	r2, [pc, #140]	@ (8004164 <HAL_InitTick+0xd4>)
 80040d6:	fba2 2303 	umull	r2, r3, r2, r3
 80040da:	0c9b      	lsrs	r3, r3, #18
 80040dc:	3b01      	subs	r3, #1
 80040de:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80040e0:	4b21      	ldr	r3, [pc, #132]	@ (8004168 <HAL_InitTick+0xd8>)
 80040e2:	4a22      	ldr	r2, [pc, #136]	@ (800416c <HAL_InitTick+0xdc>)
 80040e4:	601a      	str	r2, [r3, #0]
   * Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 80040e6:	4b20      	ldr	r3, [pc, #128]	@ (8004168 <HAL_InitTick+0xd8>)
 80040e8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80040ec:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80040ee:	4a1e      	ldr	r2, [pc, #120]	@ (8004168 <HAL_InitTick+0xd8>)
 80040f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f2:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 80040f4:	4b1c      	ldr	r3, [pc, #112]	@ (8004168 <HAL_InitTick+0xd8>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040fa:	4b1b      	ldr	r3, [pc, #108]	@ (8004168 <HAL_InitTick+0xd8>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004100:	4b19      	ldr	r3, [pc, #100]	@ (8004168 <HAL_InitTick+0xd8>)
 8004102:	2200      	movs	r2, #0
 8004104:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8004106:	4818      	ldr	r0, [pc, #96]	@ (8004168 <HAL_InitTick+0xd8>)
 8004108:	f003 fe44 	bl	8007d94 <HAL_TIM_Base_Init>
 800410c:	4603      	mov	r3, r0
 800410e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8004112:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004116:	2b00      	cmp	r3, #0
 8004118:	d11b      	bne.n	8004152 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 800411a:	4813      	ldr	r0, [pc, #76]	@ (8004168 <HAL_InitTick+0xd8>)
 800411c:	f003 fe8a 	bl	8007e34 <HAL_TIM_Base_Start_IT>
 8004120:	4603      	mov	r3, r0
 8004122:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8004126:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800412a:	2b00      	cmp	r3, #0
 800412c:	d111      	bne.n	8004152 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800412e:	2019      	movs	r0, #25
 8004130:	f001 fb1a 	bl	8005768 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b0f      	cmp	r3, #15
 8004138:	d808      	bhi.n	800414c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800413a:	2200      	movs	r2, #0
 800413c:	6879      	ldr	r1, [r7, #4]
 800413e:	2019      	movs	r0, #25
 8004140:	f001 faf6 	bl	8005730 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004144:	4a0a      	ldr	r2, [pc, #40]	@ (8004170 <HAL_InitTick+0xe0>)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6013      	str	r3, [r2, #0]
 800414a:	e002      	b.n	8004152 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8004152:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8004156:	4618      	mov	r0, r3
 8004158:	3730      	adds	r7, #48	@ 0x30
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	40023800 	.word	0x40023800
 8004164:	431bde83 	.word	0x431bde83
 8004168:	20000584 	.word	0x20000584
 800416c:	40014400 	.word	0x40014400
 8004170:	200000f4 	.word	0x200000f4

08004174 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004174:	b480      	push	{r7}
 8004176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004178:	bf00      	nop
 800417a:	e7fd      	b.n	8004178 <NMI_Handler+0x4>

0800417c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004180:	bf00      	nop
 8004182:	e7fd      	b.n	8004180 <HardFault_Handler+0x4>

08004184 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004188:	bf00      	nop
 800418a:	e7fd      	b.n	8004188 <MemManage_Handler+0x4>

0800418c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004190:	bf00      	nop
 8004192:	e7fd      	b.n	8004190 <BusFault_Handler+0x4>

08004194 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004198:	bf00      	nop
 800419a:	e7fd      	b.n	8004198 <UsageFault_Handler+0x4>

0800419c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041a0:	bf00      	nop
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
	...

080041ac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80041b0:	4802      	ldr	r0, [pc, #8]	@ (80041bc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80041b2:	f004 f915 	bl	80083e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80041b6:	bf00      	nop
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	20000584 	.word	0x20000584

080041c0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80041c4:	4804      	ldr	r0, [pc, #16]	@ (80041d8 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80041c6:	f004 f90b 	bl	80083e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */
  ulHighFrequencyTimerTicks++;
 80041ca:	4b04      	ldr	r3, [pc, #16]	@ (80041dc <TIM1_TRG_COM_TIM11_IRQHandler+0x1c>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	3301      	adds	r3, #1
 80041d0:	4a02      	ldr	r2, [pc, #8]	@ (80041dc <TIM1_TRG_COM_TIM11_IRQHandler+0x1c>)
 80041d2:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80041d4:	bf00      	nop
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	20000674 	.word	0x20000674
 80041dc:	200005cc 	.word	0x200005cc

080041e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80041e4:	4802      	ldr	r0, [pc, #8]	@ (80041f0 <TIM3_IRQHandler+0x10>)
 80041e6:	f004 f8fb 	bl	80083e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80041ea:	bf00      	nop
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	200005e4 	.word	0x200005e4

080041f4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80041f8:	4802      	ldr	r0, [pc, #8]	@ (8004204 <DMA2_Stream0_IRQHandler+0x10>)
 80041fa:	f001 fbc9 	bl	8005990 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80041fe:	bf00      	nop
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	20000494 	.word	0x20000494

08004208 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800420c:	4802      	ldr	r0, [pc, #8]	@ (8004218 <DMA2_Stream2_IRQHandler+0x10>)
 800420e:	f001 fbbf 	bl	8005990 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004212:	bf00      	nop
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	20000704 	.word	0x20000704

0800421c <SendRadioData>:
volatile int16_t pulseWidth_CH4 = 0;


/* Helper function to send updated data to the queue */
static void SendRadioData(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
    RadioData_t radioData;
    radioData.ch1 = pulseWidth_CH1;
 8004222:	4b0d      	ldr	r3, [pc, #52]	@ (8004258 <SendRadioData+0x3c>)
 8004224:	881b      	ldrh	r3, [r3, #0]
 8004226:	b21b      	sxth	r3, r3
 8004228:	803b      	strh	r3, [r7, #0]
    radioData.ch2 = pulseWidth_CH2;
 800422a:	4b0c      	ldr	r3, [pc, #48]	@ (800425c <SendRadioData+0x40>)
 800422c:	881b      	ldrh	r3, [r3, #0]
 800422e:	b21b      	sxth	r3, r3
 8004230:	807b      	strh	r3, [r7, #2]
    radioData.ch3 = pulseWidth_CH3;
 8004232:	4b0b      	ldr	r3, [pc, #44]	@ (8004260 <SendRadioData+0x44>)
 8004234:	881b      	ldrh	r3, [r3, #0]
 8004236:	b21b      	sxth	r3, r3
 8004238:	80bb      	strh	r3, [r7, #4]
    radioData.ch4 = pulseWidth_CH4;
 800423a:	4b0a      	ldr	r3, [pc, #40]	@ (8004264 <SendRadioData+0x48>)
 800423c:	881b      	ldrh	r3, [r3, #0]
 800423e:	b21b      	sxth	r3, r3
 8004240:	80fb      	strh	r3, [r7, #6]
    /* Non-blocking put into the queue */
    osMessageQueuePut(radioQueueHandle, &radioData, 0, 0);
 8004242:	4b09      	ldr	r3, [pc, #36]	@ (8004268 <SendRadioData+0x4c>)
 8004244:	6818      	ldr	r0, [r3, #0]
 8004246:	4639      	mov	r1, r7
 8004248:	2300      	movs	r3, #0
 800424a:	2200      	movs	r2, #0
 800424c:	f006 f882 	bl	800a354 <osMessageQueuePut>
}
 8004250:	bf00      	nop
 8004252:	3708      	adds	r7, #8
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	200005d2 	.word	0x200005d2
 800425c:	200005d6 	.word	0x200005d6
 8004260:	200005da 	.word	0x200005da
 8004264:	200005de 	.word	0x200005de
 8004268:	2000051c 	.word	0x2000051c

0800426c <HAL_TIM_IC_CaptureCallback>:

/* Input capture callback handling all four channels */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a82      	ldr	r2, [pc, #520]	@ (8004484 <HAL_TIM_IC_CaptureCallback+0x218>)
 800427a:	4293      	cmp	r3, r2
 800427c:	f040 819c 	bne.w	80045b8 <HAL_TIM_IC_CaptureCallback+0x34c>
    {
        if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	7f1b      	ldrb	r3, [r3, #28]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d15d      	bne.n	8004344 <HAL_TIM_IC_CaptureCallback+0xd8>
        {
            if (ic1_rising)
 8004288:	4b7f      	ldr	r3, [pc, #508]	@ (8004488 <HAL_TIM_IC_CaptureCallback+0x21c>)
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d01b      	beq.n	80042ca <HAL_TIM_IC_CaptureCallback+0x5e>
            {
                /* Capture rising edge time for CH1 */
                ic1_rising_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8004292:	2100      	movs	r1, #0
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f004 fbb9 	bl	8008a0c <HAL_TIM_ReadCapturedValue>
 800429a:	4603      	mov	r3, r0
 800429c:	b21a      	sxth	r2, r3
 800429e:	4b7b      	ldr	r3, [pc, #492]	@ (800448c <HAL_TIM_IC_CaptureCallback+0x220>)
 80042a0:	801a      	strh	r2, [r3, #0]
                ic1_rising = 0;
 80042a2:	4b79      	ldr	r3, [pc, #484]	@ (8004488 <HAL_TIM_IC_CaptureCallback+0x21c>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	701a      	strb	r2, [r3, #0]
                /* Switch polarity to falling edge */
                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	6a1a      	ldr	r2, [r3, #32]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f022 020a 	bic.w	r2, r2, #10
 80042b6:	621a      	str	r2, [r3, #32]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6a1a      	ldr	r2, [r3, #32]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f042 0202 	orr.w	r2, r2, #2
 80042c6:	621a      	str	r2, [r3, #32]
                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
                SendRadioData();
            }
        }
    }
}
 80042c8:	e176      	b.n	80045b8 <HAL_TIM_IC_CaptureCallback+0x34c>
                int16_t falling_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80042ca:	2100      	movs	r1, #0
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f004 fb9d 	bl	8008a0c <HAL_TIM_ReadCapturedValue>
 80042d2:	4603      	mov	r3, r0
 80042d4:	813b      	strh	r3, [r7, #8]
                if (falling_val >= ic1_rising_val)
 80042d6:	4b6d      	ldr	r3, [pc, #436]	@ (800448c <HAL_TIM_IC_CaptureCallback+0x220>)
 80042d8:	881b      	ldrh	r3, [r3, #0]
 80042da:	b21b      	sxth	r3, r3
 80042dc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	db0a      	blt.n	80042fa <HAL_TIM_IC_CaptureCallback+0x8e>
                    pulseWidth_CH1 = falling_val - ic1_rising_val;
 80042e4:	893a      	ldrh	r2, [r7, #8]
 80042e6:	4b69      	ldr	r3, [pc, #420]	@ (800448c <HAL_TIM_IC_CaptureCallback+0x220>)
 80042e8:	881b      	ldrh	r3, [r3, #0]
 80042ea:	b21b      	sxth	r3, r3
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	b21a      	sxth	r2, r3
 80042f4:	4b66      	ldr	r3, [pc, #408]	@ (8004490 <HAL_TIM_IC_CaptureCallback+0x224>)
 80042f6:	801a      	strh	r2, [r3, #0]
 80042f8:	e010      	b.n	800431c <HAL_TIM_IC_CaptureCallback+0xb0>
                    pulseWidth_CH1 = (htim->Init.Period - ic1_rising_val) + falling_val + 1;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	b29a      	uxth	r2, r3
 8004300:	4b62      	ldr	r3, [pc, #392]	@ (800448c <HAL_TIM_IC_CaptureCallback+0x220>)
 8004302:	881b      	ldrh	r3, [r3, #0]
 8004304:	b21b      	sxth	r3, r3
 8004306:	b29b      	uxth	r3, r3
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	b29a      	uxth	r2, r3
 800430c:	893b      	ldrh	r3, [r7, #8]
 800430e:	4413      	add	r3, r2
 8004310:	b29b      	uxth	r3, r3
 8004312:	3301      	adds	r3, #1
 8004314:	b29b      	uxth	r3, r3
 8004316:	b21a      	sxth	r2, r3
 8004318:	4b5d      	ldr	r3, [pc, #372]	@ (8004490 <HAL_TIM_IC_CaptureCallback+0x224>)
 800431a:	801a      	strh	r2, [r3, #0]
                ic1_rising = 1;
 800431c:	4b5a      	ldr	r3, [pc, #360]	@ (8004488 <HAL_TIM_IC_CaptureCallback+0x21c>)
 800431e:	2201      	movs	r2, #1
 8004320:	701a      	strb	r2, [r3, #0]
                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	6a1a      	ldr	r2, [r3, #32]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f022 020a 	bic.w	r2, r2, #10
 8004330:	621a      	str	r2, [r3, #32]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6a12      	ldr	r2, [r2, #32]
 800433c:	621a      	str	r2, [r3, #32]
                SendRadioData();
 800433e:	f7ff ff6d 	bl	800421c <SendRadioData>
}
 8004342:	e139      	b.n	80045b8 <HAL_TIM_IC_CaptureCallback+0x34c>
        else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	7f1b      	ldrb	r3, [r3, #28]
 8004348:	2b02      	cmp	r3, #2
 800434a:	d15d      	bne.n	8004408 <HAL_TIM_IC_CaptureCallback+0x19c>
            if (ic2_rising)
 800434c:	4b51      	ldr	r3, [pc, #324]	@ (8004494 <HAL_TIM_IC_CaptureCallback+0x228>)
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d01b      	beq.n	800438e <HAL_TIM_IC_CaptureCallback+0x122>
                ic2_rising_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8004356:	2104      	movs	r1, #4
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f004 fb57 	bl	8008a0c <HAL_TIM_ReadCapturedValue>
 800435e:	4603      	mov	r3, r0
 8004360:	b21a      	sxth	r2, r3
 8004362:	4b4d      	ldr	r3, [pc, #308]	@ (8004498 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8004364:	801a      	strh	r2, [r3, #0]
                ic2_rising = 0;
 8004366:	4b4b      	ldr	r3, [pc, #300]	@ (8004494 <HAL_TIM_IC_CaptureCallback+0x228>)
 8004368:	2200      	movs	r2, #0
 800436a:	701a      	strb	r2, [r3, #0]
                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6a1a      	ldr	r2, [r3, #32]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800437a:	621a      	str	r2, [r3, #32]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6a1a      	ldr	r2, [r3, #32]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f042 0220 	orr.w	r2, r2, #32
 800438a:	621a      	str	r2, [r3, #32]
}
 800438c:	e114      	b.n	80045b8 <HAL_TIM_IC_CaptureCallback+0x34c>
                int16_t falling_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800438e:	2104      	movs	r1, #4
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f004 fb3b 	bl	8008a0c <HAL_TIM_ReadCapturedValue>
 8004396:	4603      	mov	r3, r0
 8004398:	817b      	strh	r3, [r7, #10]
                if (falling_val >= ic2_rising_val)
 800439a:	4b3f      	ldr	r3, [pc, #252]	@ (8004498 <HAL_TIM_IC_CaptureCallback+0x22c>)
 800439c:	881b      	ldrh	r3, [r3, #0]
 800439e:	b21b      	sxth	r3, r3
 80043a0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	db0a      	blt.n	80043be <HAL_TIM_IC_CaptureCallback+0x152>
                    pulseWidth_CH2 = falling_val - ic2_rising_val;
 80043a8:	897a      	ldrh	r2, [r7, #10]
 80043aa:	4b3b      	ldr	r3, [pc, #236]	@ (8004498 <HAL_TIM_IC_CaptureCallback+0x22c>)
 80043ac:	881b      	ldrh	r3, [r3, #0]
 80043ae:	b21b      	sxth	r3, r3
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	b21a      	sxth	r2, r3
 80043b8:	4b38      	ldr	r3, [pc, #224]	@ (800449c <HAL_TIM_IC_CaptureCallback+0x230>)
 80043ba:	801a      	strh	r2, [r3, #0]
 80043bc:	e010      	b.n	80043e0 <HAL_TIM_IC_CaptureCallback+0x174>
                    pulseWidth_CH2 = (htim->Init.Period - ic2_rising_val) + falling_val + 1;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	4b34      	ldr	r3, [pc, #208]	@ (8004498 <HAL_TIM_IC_CaptureCallback+0x22c>)
 80043c6:	881b      	ldrh	r3, [r3, #0]
 80043c8:	b21b      	sxth	r3, r3
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	897b      	ldrh	r3, [r7, #10]
 80043d2:	4413      	add	r3, r2
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	3301      	adds	r3, #1
 80043d8:	b29b      	uxth	r3, r3
 80043da:	b21a      	sxth	r2, r3
 80043dc:	4b2f      	ldr	r3, [pc, #188]	@ (800449c <HAL_TIM_IC_CaptureCallback+0x230>)
 80043de:	801a      	strh	r2, [r3, #0]
                ic2_rising = 1;
 80043e0:	4b2c      	ldr	r3, [pc, #176]	@ (8004494 <HAL_TIM_IC_CaptureCallback+0x228>)
 80043e2:	2201      	movs	r2, #1
 80043e4:	701a      	strb	r2, [r3, #0]
                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6a1a      	ldr	r2, [r3, #32]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80043f4:	621a      	str	r2, [r3, #32]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	6a12      	ldr	r2, [r2, #32]
 8004400:	621a      	str	r2, [r3, #32]
                SendRadioData();
 8004402:	f7ff ff0b 	bl	800421c <SendRadioData>
}
 8004406:	e0d7      	b.n	80045b8 <HAL_TIM_IC_CaptureCallback+0x34c>
        else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	7f1b      	ldrb	r3, [r3, #28]
 800440c:	2b04      	cmp	r3, #4
 800440e:	d172      	bne.n	80044f6 <HAL_TIM_IC_CaptureCallback+0x28a>
            if (ic3_rising)
 8004410:	4b23      	ldr	r3, [pc, #140]	@ (80044a0 <HAL_TIM_IC_CaptureCallback+0x234>)
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d01b      	beq.n	8004452 <HAL_TIM_IC_CaptureCallback+0x1e6>
                ic3_rising_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 800441a:	2108      	movs	r1, #8
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f004 faf5 	bl	8008a0c <HAL_TIM_ReadCapturedValue>
 8004422:	4603      	mov	r3, r0
 8004424:	b21a      	sxth	r2, r3
 8004426:	4b1f      	ldr	r3, [pc, #124]	@ (80044a4 <HAL_TIM_IC_CaptureCallback+0x238>)
 8004428:	801a      	strh	r2, [r3, #0]
                ic3_rising = 0;
 800442a:	4b1d      	ldr	r3, [pc, #116]	@ (80044a0 <HAL_TIM_IC_CaptureCallback+0x234>)
 800442c:	2200      	movs	r2, #0
 800442e:	701a      	strb	r2, [r3, #0]
                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6a1a      	ldr	r2, [r3, #32]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 800443e:	621a      	str	r2, [r3, #32]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6a1a      	ldr	r2, [r3, #32]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800444e:	621a      	str	r2, [r3, #32]
}
 8004450:	e0b2      	b.n	80045b8 <HAL_TIM_IC_CaptureCallback+0x34c>
                int16_t falling_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8004452:	2108      	movs	r1, #8
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f004 fad9 	bl	8008a0c <HAL_TIM_ReadCapturedValue>
 800445a:	4603      	mov	r3, r0
 800445c:	81bb      	strh	r3, [r7, #12]
                if (falling_val >= ic3_rising_val)
 800445e:	4b11      	ldr	r3, [pc, #68]	@ (80044a4 <HAL_TIM_IC_CaptureCallback+0x238>)
 8004460:	881b      	ldrh	r3, [r3, #0]
 8004462:	b21b      	sxth	r3, r3
 8004464:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004468:	429a      	cmp	r2, r3
 800446a:	db1f      	blt.n	80044ac <HAL_TIM_IC_CaptureCallback+0x240>
                    pulseWidth_CH3 = falling_val - ic3_rising_val;
 800446c:	89ba      	ldrh	r2, [r7, #12]
 800446e:	4b0d      	ldr	r3, [pc, #52]	@ (80044a4 <HAL_TIM_IC_CaptureCallback+0x238>)
 8004470:	881b      	ldrh	r3, [r3, #0]
 8004472:	b21b      	sxth	r3, r3
 8004474:	b29b      	uxth	r3, r3
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	b29b      	uxth	r3, r3
 800447a:	b21a      	sxth	r2, r3
 800447c:	4b0a      	ldr	r3, [pc, #40]	@ (80044a8 <HAL_TIM_IC_CaptureCallback+0x23c>)
 800447e:	801a      	strh	r2, [r3, #0]
 8004480:	e025      	b.n	80044ce <HAL_TIM_IC_CaptureCallback+0x262>
 8004482:	bf00      	nop
 8004484:	40000400 	.word	0x40000400
 8004488:	200000ec 	.word	0x200000ec
 800448c:	200005d0 	.word	0x200005d0
 8004490:	200005d2 	.word	0x200005d2
 8004494:	200000ed 	.word	0x200000ed
 8004498:	200005d4 	.word	0x200005d4
 800449c:	200005d6 	.word	0x200005d6
 80044a0:	200000ee 	.word	0x200000ee
 80044a4:	200005d8 	.word	0x200005d8
 80044a8:	200005da 	.word	0x200005da
                    pulseWidth_CH3 = (htim->Init.Period - ic3_rising_val) + falling_val + 1;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	4b43      	ldr	r3, [pc, #268]	@ (80045c0 <HAL_TIM_IC_CaptureCallback+0x354>)
 80044b4:	881b      	ldrh	r3, [r3, #0]
 80044b6:	b21b      	sxth	r3, r3
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	b29a      	uxth	r2, r3
 80044be:	89bb      	ldrh	r3, [r7, #12]
 80044c0:	4413      	add	r3, r2
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	3301      	adds	r3, #1
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	b21a      	sxth	r2, r3
 80044ca:	4b3e      	ldr	r3, [pc, #248]	@ (80045c4 <HAL_TIM_IC_CaptureCallback+0x358>)
 80044cc:	801a      	strh	r2, [r3, #0]
                ic3_rising = 1;
 80044ce:	4b3e      	ldr	r3, [pc, #248]	@ (80045c8 <HAL_TIM_IC_CaptureCallback+0x35c>)
 80044d0:	2201      	movs	r2, #1
 80044d2:	701a      	strb	r2, [r3, #0]
                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6a1a      	ldr	r2, [r3, #32]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 80044e2:	621a      	str	r2, [r3, #32]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6a12      	ldr	r2, [r2, #32]
 80044ee:	621a      	str	r2, [r3, #32]
                SendRadioData();
 80044f0:	f7ff fe94 	bl	800421c <SendRadioData>
}
 80044f4:	e060      	b.n	80045b8 <HAL_TIM_IC_CaptureCallback+0x34c>
        else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	7f1b      	ldrb	r3, [r3, #28]
 80044fa:	2b08      	cmp	r3, #8
 80044fc:	d15c      	bne.n	80045b8 <HAL_TIM_IC_CaptureCallback+0x34c>
            if (ic4_rising)
 80044fe:	4b33      	ldr	r3, [pc, #204]	@ (80045cc <HAL_TIM_IC_CaptureCallback+0x360>)
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b00      	cmp	r3, #0
 8004506:	d01b      	beq.n	8004540 <HAL_TIM_IC_CaptureCallback+0x2d4>
                ic4_rising_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8004508:	210c      	movs	r1, #12
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f004 fa7e 	bl	8008a0c <HAL_TIM_ReadCapturedValue>
 8004510:	4603      	mov	r3, r0
 8004512:	b21a      	sxth	r2, r3
 8004514:	4b2e      	ldr	r3, [pc, #184]	@ (80045d0 <HAL_TIM_IC_CaptureCallback+0x364>)
 8004516:	801a      	strh	r2, [r3, #0]
                ic4_rising = 0;
 8004518:	4b2c      	ldr	r3, [pc, #176]	@ (80045cc <HAL_TIM_IC_CaptureCallback+0x360>)
 800451a:	2200      	movs	r2, #0
 800451c:	701a      	strb	r2, [r3, #0]
                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_FALLING);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	6a1a      	ldr	r2, [r3, #32]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 800452c:	621a      	str	r2, [r3, #32]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6a1a      	ldr	r2, [r3, #32]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800453c:	621a      	str	r2, [r3, #32]
}
 800453e:	e03b      	b.n	80045b8 <HAL_TIM_IC_CaptureCallback+0x34c>
                int16_t falling_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8004540:	210c      	movs	r1, #12
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f004 fa62 	bl	8008a0c <HAL_TIM_ReadCapturedValue>
 8004548:	4603      	mov	r3, r0
 800454a:	81fb      	strh	r3, [r7, #14]
                if (falling_val >= ic4_rising_val)
 800454c:	4b20      	ldr	r3, [pc, #128]	@ (80045d0 <HAL_TIM_IC_CaptureCallback+0x364>)
 800454e:	881b      	ldrh	r3, [r3, #0]
 8004550:	b21b      	sxth	r3, r3
 8004552:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004556:	429a      	cmp	r2, r3
 8004558:	db0a      	blt.n	8004570 <HAL_TIM_IC_CaptureCallback+0x304>
                    pulseWidth_CH4 = falling_val - ic4_rising_val;
 800455a:	89fa      	ldrh	r2, [r7, #14]
 800455c:	4b1c      	ldr	r3, [pc, #112]	@ (80045d0 <HAL_TIM_IC_CaptureCallback+0x364>)
 800455e:	881b      	ldrh	r3, [r3, #0]
 8004560:	b21b      	sxth	r3, r3
 8004562:	b29b      	uxth	r3, r3
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	b29b      	uxth	r3, r3
 8004568:	b21a      	sxth	r2, r3
 800456a:	4b1a      	ldr	r3, [pc, #104]	@ (80045d4 <HAL_TIM_IC_CaptureCallback+0x368>)
 800456c:	801a      	strh	r2, [r3, #0]
 800456e:	e010      	b.n	8004592 <HAL_TIM_IC_CaptureCallback+0x326>
                    pulseWidth_CH4 = (htim->Init.Period - ic4_rising_val) + falling_val + 1;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	b29a      	uxth	r2, r3
 8004576:	4b16      	ldr	r3, [pc, #88]	@ (80045d0 <HAL_TIM_IC_CaptureCallback+0x364>)
 8004578:	881b      	ldrh	r3, [r3, #0]
 800457a:	b21b      	sxth	r3, r3
 800457c:	b29b      	uxth	r3, r3
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	b29a      	uxth	r2, r3
 8004582:	89fb      	ldrh	r3, [r7, #14]
 8004584:	4413      	add	r3, r2
 8004586:	b29b      	uxth	r3, r3
 8004588:	3301      	adds	r3, #1
 800458a:	b29b      	uxth	r3, r3
 800458c:	b21a      	sxth	r2, r3
 800458e:	4b11      	ldr	r3, [pc, #68]	@ (80045d4 <HAL_TIM_IC_CaptureCallback+0x368>)
 8004590:	801a      	strh	r2, [r3, #0]
                ic4_rising = 1;
 8004592:	4b0e      	ldr	r3, [pc, #56]	@ (80045cc <HAL_TIM_IC_CaptureCallback+0x360>)
 8004594:	2201      	movs	r2, #1
 8004596:	701a      	strb	r2, [r3, #0]
                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6a1a      	ldr	r2, [r3, #32]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 80045a6:	621a      	str	r2, [r3, #32]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6a12      	ldr	r2, [r2, #32]
 80045b2:	621a      	str	r2, [r3, #32]
                SendRadioData();
 80045b4:	f7ff fe32 	bl	800421c <SendRadioData>
}
 80045b8:	bf00      	nop
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	200005d8 	.word	0x200005d8
 80045c4:	200005da 	.word	0x200005da
 80045c8:	200000ee 	.word	0x200000ee
 80045cc:	200000ef 	.word	0x200000ef
 80045d0:	200005dc 	.word	0x200005dc
 80045d4:	200005de 	.word	0x200005de

080045d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80045d8:	b480      	push	{r7}
 80045da:	af00      	add	r7, sp, #0
  return 1;
 80045dc:	2301      	movs	r3, #1
}
 80045de:	4618      	mov	r0, r3
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <_kill>:

int _kill(int pid, int sig)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80045f2:	f00a fd9b 	bl	800f12c <__errno>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2216      	movs	r2, #22
 80045fa:	601a      	str	r2, [r3, #0]
  return -1;
 80045fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004600:	4618      	mov	r0, r3
 8004602:	3708      	adds	r7, #8
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <_exit>:

void _exit (int status)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004610:	f04f 31ff 	mov.w	r1, #4294967295
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f7ff ffe7 	bl	80045e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800461a:	bf00      	nop
 800461c:	e7fd      	b.n	800461a <_exit+0x12>

0800461e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b086      	sub	sp, #24
 8004622:	af00      	add	r7, sp, #0
 8004624:	60f8      	str	r0, [r7, #12]
 8004626:	60b9      	str	r1, [r7, #8]
 8004628:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800462a:	2300      	movs	r3, #0
 800462c:	617b      	str	r3, [r7, #20]
 800462e:	e00a      	b.n	8004646 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004630:	f3af 8000 	nop.w
 8004634:	4601      	mov	r1, r0
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	1c5a      	adds	r2, r3, #1
 800463a:	60ba      	str	r2, [r7, #8]
 800463c:	b2ca      	uxtb	r2, r1
 800463e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	3301      	adds	r3, #1
 8004644:	617b      	str	r3, [r7, #20]
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	429a      	cmp	r2, r3
 800464c:	dbf0      	blt.n	8004630 <_read+0x12>
  }

  return len;
 800464e:	687b      	ldr	r3, [r7, #4]
}
 8004650:	4618      	mov	r0, r3
 8004652:	3718      	adds	r7, #24
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004664:	2300      	movs	r3, #0
 8004666:	617b      	str	r3, [r7, #20]
 8004668:	e009      	b.n	800467e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	1c5a      	adds	r2, r3, #1
 800466e:	60ba      	str	r2, [r7, #8]
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	4618      	mov	r0, r3
 8004674:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	3301      	adds	r3, #1
 800467c:	617b      	str	r3, [r7, #20]
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	429a      	cmp	r2, r3
 8004684:	dbf1      	blt.n	800466a <_write+0x12>
  }
  return len;
 8004686:	687b      	ldr	r3, [r7, #4]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3718      	adds	r7, #24
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <_close>:

int _close(int file)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004698:	f04f 33ff 	mov.w	r3, #4294967295
}
 800469c:	4618      	mov	r0, r3
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80046b8:	605a      	str	r2, [r3, #4]
  return 0;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <_isatty>:

int _isatty(int file)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80046d0:	2301      	movs	r3, #1
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80046de:	b480      	push	{r7}
 80046e0:	b085      	sub	sp, #20
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	60f8      	str	r0, [r7, #12]
 80046e6:	60b9      	str	r1, [r7, #8]
 80046e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3714      	adds	r7, #20
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004700:	4a14      	ldr	r2, [pc, #80]	@ (8004754 <_sbrk+0x5c>)
 8004702:	4b15      	ldr	r3, [pc, #84]	@ (8004758 <_sbrk+0x60>)
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800470c:	4b13      	ldr	r3, [pc, #76]	@ (800475c <_sbrk+0x64>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d102      	bne.n	800471a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004714:	4b11      	ldr	r3, [pc, #68]	@ (800475c <_sbrk+0x64>)
 8004716:	4a12      	ldr	r2, [pc, #72]	@ (8004760 <_sbrk+0x68>)
 8004718:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800471a:	4b10      	ldr	r3, [pc, #64]	@ (800475c <_sbrk+0x64>)
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4413      	add	r3, r2
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	429a      	cmp	r2, r3
 8004726:	d207      	bcs.n	8004738 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004728:	f00a fd00 	bl	800f12c <__errno>
 800472c:	4603      	mov	r3, r0
 800472e:	220c      	movs	r2, #12
 8004730:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004732:	f04f 33ff 	mov.w	r3, #4294967295
 8004736:	e009      	b.n	800474c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004738:	4b08      	ldr	r3, [pc, #32]	@ (800475c <_sbrk+0x64>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800473e:	4b07      	ldr	r3, [pc, #28]	@ (800475c <_sbrk+0x64>)
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4413      	add	r3, r2
 8004746:	4a05      	ldr	r2, [pc, #20]	@ (800475c <_sbrk+0x64>)
 8004748:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800474a:	68fb      	ldr	r3, [r7, #12]
}
 800474c:	4618      	mov	r0, r3
 800474e:	3718      	adds	r7, #24
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	20010000 	.word	0x20010000
 8004758:	00000400 	.word	0x00000400
 800475c:	200005e0 	.word	0x200005e0
 8004760:	20005300 	.word	0x20005300

08004764 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004768:	4b06      	ldr	r3, [pc, #24]	@ (8004784 <SystemInit+0x20>)
 800476a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800476e:	4a05      	ldr	r2, [pc, #20]	@ (8004784 <SystemInit+0x20>)
 8004770:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004774:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004778:	bf00      	nop
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	e000ed00 	.word	0xe000ed00

08004788 <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b08a      	sub	sp, #40	@ 0x28
 800478c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800478e:	f107 0318 	add.w	r3, r7, #24
 8004792:	2200      	movs	r2, #0
 8004794:	601a      	str	r2, [r3, #0]
 8004796:	605a      	str	r2, [r3, #4]
 8004798:	609a      	str	r2, [r3, #8]
 800479a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800479c:	f107 0310 	add.w	r3, r7, #16
 80047a0:	2200      	movs	r2, #0
 80047a2:	601a      	str	r2, [r3, #0]
 80047a4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80047a6:	463b      	mov	r3, r7
 80047a8:	2200      	movs	r2, #0
 80047aa:	601a      	str	r2, [r3, #0]
 80047ac:	605a      	str	r2, [r3, #4]
 80047ae:	609a      	str	r2, [r3, #8]
 80047b0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80047b2:	4b3c      	ldr	r3, [pc, #240]	@ (80048a4 <MX_TIM3_Init+0x11c>)
 80047b4:	4a3c      	ldr	r2, [pc, #240]	@ (80048a8 <MX_TIM3_Init+0x120>)
 80047b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 80047b8:	4b3a      	ldr	r3, [pc, #232]	@ (80048a4 <MX_TIM3_Init+0x11c>)
 80047ba:	2254      	movs	r2, #84	@ 0x54
 80047bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047be:	4b39      	ldr	r3, [pc, #228]	@ (80048a4 <MX_TIM3_Init+0x11c>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80047c4:	4b37      	ldr	r3, [pc, #220]	@ (80048a4 <MX_TIM3_Init+0x11c>)
 80047c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80047ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047cc:	4b35      	ldr	r3, [pc, #212]	@ (80048a4 <MX_TIM3_Init+0x11c>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047d2:	4b34      	ldr	r3, [pc, #208]	@ (80048a4 <MX_TIM3_Init+0x11c>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80047d8:	4832      	ldr	r0, [pc, #200]	@ (80048a4 <MX_TIM3_Init+0x11c>)
 80047da:	f003 fadb 	bl	8007d94 <HAL_TIM_Base_Init>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d001      	beq.n	80047e8 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80047e4:	f7ff fc22 	bl	800402c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80047e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80047ec:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80047ee:	f107 0318 	add.w	r3, r7, #24
 80047f2:	4619      	mov	r1, r3
 80047f4:	482b      	ldr	r0, [pc, #172]	@ (80048a4 <MX_TIM3_Init+0x11c>)
 80047f6:	f004 f841 	bl	800887c <HAL_TIM_ConfigClockSource>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d001      	beq.n	8004804 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8004800:	f7ff fc14 	bl	800402c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8004804:	4827      	ldr	r0, [pc, #156]	@ (80048a4 <MX_TIM3_Init+0x11c>)
 8004806:	f003 fc77 	bl	80080f8 <HAL_TIM_IC_Init>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8004810:	f7ff fc0c 	bl	800402c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004814:	2300      	movs	r3, #0
 8004816:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004818:	2300      	movs	r3, #0
 800481a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800481c:	f107 0310 	add.w	r3, r7, #16
 8004820:	4619      	mov	r1, r3
 8004822:	4820      	ldr	r0, [pc, #128]	@ (80048a4 <MX_TIM3_Init+0x11c>)
 8004824:	f004 fd4a 	bl	80092bc <HAL_TIMEx_MasterConfigSynchronization>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800482e:	f7ff fbfd 	bl	800402c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8004832:	230a      	movs	r3, #10
 8004834:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004836:	2301      	movs	r3, #1
 8004838:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800483a:	2300      	movs	r3, #0
 800483c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800483e:	2300      	movs	r3, #0
 8004840:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004842:	463b      	mov	r3, r7
 8004844:	2200      	movs	r2, #0
 8004846:	4619      	mov	r1, r3
 8004848:	4816      	ldr	r0, [pc, #88]	@ (80048a4 <MX_TIM3_Init+0x11c>)
 800484a:	f003 feb9 	bl	80085c0 <HAL_TIM_IC_ConfigChannel>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d001      	beq.n	8004858 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8004854:	f7ff fbea 	bl	800402c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8004858:	463b      	mov	r3, r7
 800485a:	2204      	movs	r2, #4
 800485c:	4619      	mov	r1, r3
 800485e:	4811      	ldr	r0, [pc, #68]	@ (80048a4 <MX_TIM3_Init+0x11c>)
 8004860:	f003 feae 	bl	80085c0 <HAL_TIM_IC_ConfigChannel>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 800486a:	f7ff fbdf 	bl	800402c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800486e:	463b      	mov	r3, r7
 8004870:	2208      	movs	r2, #8
 8004872:	4619      	mov	r1, r3
 8004874:	480b      	ldr	r0, [pc, #44]	@ (80048a4 <MX_TIM3_Init+0x11c>)
 8004876:	f003 fea3 	bl	80085c0 <HAL_TIM_IC_ConfigChannel>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <MX_TIM3_Init+0xfc>
  {
    Error_Handler();
 8004880:	f7ff fbd4 	bl	800402c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8004884:	463b      	mov	r3, r7
 8004886:	220c      	movs	r2, #12
 8004888:	4619      	mov	r1, r3
 800488a:	4806      	ldr	r0, [pc, #24]	@ (80048a4 <MX_TIM3_Init+0x11c>)
 800488c:	f003 fe98 	bl	80085c0 <HAL_TIM_IC_ConfigChannel>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d001      	beq.n	800489a <MX_TIM3_Init+0x112>
  {
    Error_Handler();
 8004896:	f7ff fbc9 	bl	800402c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800489a:	bf00      	nop
 800489c:	3728      	adds	r7, #40	@ 0x28
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	200005e4 	.word	0x200005e4
 80048a8:	40000400 	.word	0x40000400

080048ac <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b08a      	sub	sp, #40	@ 0x28
 80048b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048b2:	f107 0320 	add.w	r3, r7, #32
 80048b6:	2200      	movs	r2, #0
 80048b8:	601a      	str	r2, [r3, #0]
 80048ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80048bc:	1d3b      	adds	r3, r7, #4
 80048be:	2200      	movs	r2, #0
 80048c0:	601a      	str	r2, [r3, #0]
 80048c2:	605a      	str	r2, [r3, #4]
 80048c4:	609a      	str	r2, [r3, #8]
 80048c6:	60da      	str	r2, [r3, #12]
 80048c8:	611a      	str	r2, [r3, #16]
 80048ca:	615a      	str	r2, [r3, #20]
 80048cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80048ce:	4b32      	ldr	r3, [pc, #200]	@ (8004998 <MX_TIM4_Init+0xec>)
 80048d0:	4a32      	ldr	r2, [pc, #200]	@ (800499c <MX_TIM4_Init+0xf0>)
 80048d2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 27;
 80048d4:	4b30      	ldr	r3, [pc, #192]	@ (8004998 <MX_TIM4_Init+0xec>)
 80048d6:	221b      	movs	r2, #27
 80048d8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048da:	4b2f      	ldr	r3, [pc, #188]	@ (8004998 <MX_TIM4_Init+0xec>)
 80048dc:	2200      	movs	r2, #0
 80048de:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 80048e0:	4b2d      	ldr	r3, [pc, #180]	@ (8004998 <MX_TIM4_Init+0xec>)
 80048e2:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80048e6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048e8:	4b2b      	ldr	r3, [pc, #172]	@ (8004998 <MX_TIM4_Init+0xec>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80048ee:	4b2a      	ldr	r3, [pc, #168]	@ (8004998 <MX_TIM4_Init+0xec>)
 80048f0:	2280      	movs	r2, #128	@ 0x80
 80048f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80048f4:	4828      	ldr	r0, [pc, #160]	@ (8004998 <MX_TIM4_Init+0xec>)
 80048f6:	f003 faff 	bl	8007ef8 <HAL_TIM_PWM_Init>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d001      	beq.n	8004904 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8004900:	f7ff fb94 	bl	800402c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004904:	2300      	movs	r3, #0
 8004906:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004908:	2300      	movs	r3, #0
 800490a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800490c:	f107 0320 	add.w	r3, r7, #32
 8004910:	4619      	mov	r1, r3
 8004912:	4821      	ldr	r0, [pc, #132]	@ (8004998 <MX_TIM4_Init+0xec>)
 8004914:	f004 fcd2 	bl	80092bc <HAL_TIMEx_MasterConfigSynchronization>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d001      	beq.n	8004922 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800491e:	f7ff fb85 	bl	800402c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004922:	2360      	movs	r3, #96	@ 0x60
 8004924:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004926:	2300      	movs	r3, #0
 8004928:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800492a:	2300      	movs	r3, #0
 800492c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800492e:	2300      	movs	r3, #0
 8004930:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004932:	1d3b      	adds	r3, r7, #4
 8004934:	2200      	movs	r2, #0
 8004936:	4619      	mov	r1, r3
 8004938:	4817      	ldr	r0, [pc, #92]	@ (8004998 <MX_TIM4_Init+0xec>)
 800493a:	f003 fedd 	bl	80086f8 <HAL_TIM_PWM_ConfigChannel>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d001      	beq.n	8004948 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8004944:	f7ff fb72 	bl	800402c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004948:	1d3b      	adds	r3, r7, #4
 800494a:	2204      	movs	r2, #4
 800494c:	4619      	mov	r1, r3
 800494e:	4812      	ldr	r0, [pc, #72]	@ (8004998 <MX_TIM4_Init+0xec>)
 8004950:	f003 fed2 	bl	80086f8 <HAL_TIM_PWM_ConfigChannel>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800495a:	f7ff fb67 	bl	800402c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800495e:	1d3b      	adds	r3, r7, #4
 8004960:	2208      	movs	r2, #8
 8004962:	4619      	mov	r1, r3
 8004964:	480c      	ldr	r0, [pc, #48]	@ (8004998 <MX_TIM4_Init+0xec>)
 8004966:	f003 fec7 	bl	80086f8 <HAL_TIM_PWM_ConfigChannel>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d001      	beq.n	8004974 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8004970:	f7ff fb5c 	bl	800402c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004974:	1d3b      	adds	r3, r7, #4
 8004976:	220c      	movs	r2, #12
 8004978:	4619      	mov	r1, r3
 800497a:	4807      	ldr	r0, [pc, #28]	@ (8004998 <MX_TIM4_Init+0xec>)
 800497c:	f003 febc 	bl	80086f8 <HAL_TIM_PWM_ConfigChannel>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8004986:	f7ff fb51 	bl	800402c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800498a:	4803      	ldr	r0, [pc, #12]	@ (8004998 <MX_TIM4_Init+0xec>)
 800498c:	f000 f8da 	bl	8004b44 <HAL_TIM_MspPostInit>

}
 8004990:	bf00      	nop
 8004992:	3728      	adds	r7, #40	@ 0x28
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	2000062c 	.word	0x2000062c
 800499c:	40000800 	.word	0x40000800

080049a0 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80049a4:	4b0d      	ldr	r3, [pc, #52]	@ (80049dc <MX_TIM11_Init+0x3c>)
 80049a6:	4a0e      	ldr	r2, [pc, #56]	@ (80049e0 <MX_TIM11_Init+0x40>)
 80049a8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 84;
 80049aa:	4b0c      	ldr	r3, [pc, #48]	@ (80049dc <MX_TIM11_Init+0x3c>)
 80049ac:	2254      	movs	r2, #84	@ 0x54
 80049ae:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049b0:	4b0a      	ldr	r3, [pc, #40]	@ (80049dc <MX_TIM11_Init+0x3c>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 99;
 80049b6:	4b09      	ldr	r3, [pc, #36]	@ (80049dc <MX_TIM11_Init+0x3c>)
 80049b8:	2263      	movs	r2, #99	@ 0x63
 80049ba:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049bc:	4b07      	ldr	r3, [pc, #28]	@ (80049dc <MX_TIM11_Init+0x3c>)
 80049be:	2200      	movs	r2, #0
 80049c0:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80049c2:	4b06      	ldr	r3, [pc, #24]	@ (80049dc <MX_TIM11_Init+0x3c>)
 80049c4:	2280      	movs	r2, #128	@ 0x80
 80049c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80049c8:	4804      	ldr	r0, [pc, #16]	@ (80049dc <MX_TIM11_Init+0x3c>)
 80049ca:	f003 f9e3 	bl	8007d94 <HAL_TIM_Base_Init>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d001      	beq.n	80049d8 <MX_TIM11_Init+0x38>
  {
    Error_Handler();
 80049d4:	f7ff fb2a 	bl	800402c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80049d8:	bf00      	nop
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	20000674 	.word	0x20000674
 80049e0:	40014800 	.word	0x40014800

080049e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b08c      	sub	sp, #48	@ 0x30
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049ec:	f107 031c 	add.w	r3, r7, #28
 80049f0:	2200      	movs	r2, #0
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	605a      	str	r2, [r3, #4]
 80049f6:	609a      	str	r2, [r3, #8]
 80049f8:	60da      	str	r2, [r3, #12]
 80049fa:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a3a      	ldr	r2, [pc, #232]	@ (8004aec <HAL_TIM_Base_MspInit+0x108>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d152      	bne.n	8004aac <HAL_TIM_Base_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004a06:	2300      	movs	r3, #0
 8004a08:	61bb      	str	r3, [r7, #24]
 8004a0a:	4b39      	ldr	r3, [pc, #228]	@ (8004af0 <HAL_TIM_Base_MspInit+0x10c>)
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a0e:	4a38      	ldr	r2, [pc, #224]	@ (8004af0 <HAL_TIM_Base_MspInit+0x10c>)
 8004a10:	f043 0302 	orr.w	r3, r3, #2
 8004a14:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a16:	4b36      	ldr	r3, [pc, #216]	@ (8004af0 <HAL_TIM_Base_MspInit+0x10c>)
 8004a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	61bb      	str	r3, [r7, #24]
 8004a20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a22:	2300      	movs	r3, #0
 8004a24:	617b      	str	r3, [r7, #20]
 8004a26:	4b32      	ldr	r3, [pc, #200]	@ (8004af0 <HAL_TIM_Base_MspInit+0x10c>)
 8004a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a2a:	4a31      	ldr	r2, [pc, #196]	@ (8004af0 <HAL_TIM_Base_MspInit+0x10c>)
 8004a2c:	f043 0301 	orr.w	r3, r3, #1
 8004a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a32:	4b2f      	ldr	r3, [pc, #188]	@ (8004af0 <HAL_TIM_Base_MspInit+0x10c>)
 8004a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	617b      	str	r3, [r7, #20]
 8004a3c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a3e:	2300      	movs	r3, #0
 8004a40:	613b      	str	r3, [r7, #16]
 8004a42:	4b2b      	ldr	r3, [pc, #172]	@ (8004af0 <HAL_TIM_Base_MspInit+0x10c>)
 8004a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a46:	4a2a      	ldr	r2, [pc, #168]	@ (8004af0 <HAL_TIM_Base_MspInit+0x10c>)
 8004a48:	f043 0302 	orr.w	r3, r3, #2
 8004a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a4e:	4b28      	ldr	r3, [pc, #160]	@ (8004af0 <HAL_TIM_Base_MspInit+0x10c>)
 8004a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	613b      	str	r3, [r7, #16]
 8004a58:	693b      	ldr	r3, [r7, #16]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin;
 8004a5a:	23c0      	movs	r3, #192	@ 0xc0
 8004a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a5e:	2302      	movs	r3, #2
 8004a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a62:	2300      	movs	r3, #0
 8004a64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a66:	2300      	movs	r3, #0
 8004a68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a6e:	f107 031c 	add.w	r3, r7, #28
 8004a72:	4619      	mov	r1, r3
 8004a74:	481f      	ldr	r0, [pc, #124]	@ (8004af4 <HAL_TIM_Base_MspInit+0x110>)
 8004a76:	f001 f9f5 	bl	8005e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IN3_Pin|IN4_Pin;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a7e:	2302      	movs	r3, #2
 8004a80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a82:	2300      	movs	r3, #0
 8004a84:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a86:	2300      	movs	r3, #0
 8004a88:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a8e:	f107 031c 	add.w	r3, r7, #28
 8004a92:	4619      	mov	r1, r3
 8004a94:	4818      	ldr	r0, [pc, #96]	@ (8004af8 <HAL_TIM_Base_MspInit+0x114>)
 8004a96:	f001 f9e5 	bl	8005e64 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	2105      	movs	r1, #5
 8004a9e:	201d      	movs	r0, #29
 8004aa0:	f000 fe46 	bl	8005730 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004aa4:	201d      	movs	r0, #29
 8004aa6:	f000 fe5f 	bl	8005768 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8004aaa:	e01a      	b.n	8004ae2 <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM11)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a12      	ldr	r2, [pc, #72]	@ (8004afc <HAL_TIM_Base_MspInit+0x118>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d115      	bne.n	8004ae2 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60fb      	str	r3, [r7, #12]
 8004aba:	4b0d      	ldr	r3, [pc, #52]	@ (8004af0 <HAL_TIM_Base_MspInit+0x10c>)
 8004abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004abe:	4a0c      	ldr	r2, [pc, #48]	@ (8004af0 <HAL_TIM_Base_MspInit+0x10c>)
 8004ac0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ac4:	6453      	str	r3, [r2, #68]	@ 0x44
 8004ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8004af0 <HAL_TIM_Base_MspInit+0x10c>)
 8004ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ace:	60fb      	str	r3, [r7, #12]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	2105      	movs	r1, #5
 8004ad6:	201a      	movs	r0, #26
 8004ad8:	f000 fe2a 	bl	8005730 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004adc:	201a      	movs	r0, #26
 8004ade:	f000 fe43 	bl	8005768 <HAL_NVIC_EnableIRQ>
}
 8004ae2:	bf00      	nop
 8004ae4:	3730      	adds	r7, #48	@ 0x30
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	40000400 	.word	0x40000400
 8004af0:	40023800 	.word	0x40023800
 8004af4:	40020000 	.word	0x40020000
 8004af8:	40020400 	.word	0x40020400
 8004afc:	40014800 	.word	0x40014800

08004b00 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a0b      	ldr	r2, [pc, #44]	@ (8004b3c <HAL_TIM_PWM_MspInit+0x3c>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d10d      	bne.n	8004b2e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004b12:	2300      	movs	r3, #0
 8004b14:	60fb      	str	r3, [r7, #12]
 8004b16:	4b0a      	ldr	r3, [pc, #40]	@ (8004b40 <HAL_TIM_PWM_MspInit+0x40>)
 8004b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1a:	4a09      	ldr	r2, [pc, #36]	@ (8004b40 <HAL_TIM_PWM_MspInit+0x40>)
 8004b1c:	f043 0304 	orr.w	r3, r3, #4
 8004b20:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b22:	4b07      	ldr	r3, [pc, #28]	@ (8004b40 <HAL_TIM_PWM_MspInit+0x40>)
 8004b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b26:	f003 0304 	and.w	r3, r3, #4
 8004b2a:	60fb      	str	r3, [r7, #12]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8004b2e:	bf00      	nop
 8004b30:	3714      	adds	r7, #20
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	40000800 	.word	0x40000800
 8004b40:	40023800 	.word	0x40023800

08004b44 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b088      	sub	sp, #32
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b4c:	f107 030c 	add.w	r3, r7, #12
 8004b50:	2200      	movs	r2, #0
 8004b52:	601a      	str	r2, [r3, #0]
 8004b54:	605a      	str	r2, [r3, #4]
 8004b56:	609a      	str	r2, [r3, #8]
 8004b58:	60da      	str	r2, [r3, #12]
 8004b5a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a12      	ldr	r2, [pc, #72]	@ (8004bac <HAL_TIM_MspPostInit+0x68>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d11e      	bne.n	8004ba4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b66:	2300      	movs	r3, #0
 8004b68:	60bb      	str	r3, [r7, #8]
 8004b6a:	4b11      	ldr	r3, [pc, #68]	@ (8004bb0 <HAL_TIM_MspPostInit+0x6c>)
 8004b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b6e:	4a10      	ldr	r2, [pc, #64]	@ (8004bb0 <HAL_TIM_MspPostInit+0x6c>)
 8004b70:	f043 0302 	orr.w	r3, r3, #2
 8004b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b76:	4b0e      	ldr	r3, [pc, #56]	@ (8004bb0 <HAL_TIM_MspPostInit+0x6c>)
 8004b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	60bb      	str	r3, [r7, #8]
 8004b80:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = OUT1_Pin|OUT2_Pin|OUT3_Pin|OUT4_Pin;
 8004b82:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8004b86:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b88:	2302      	movs	r3, #2
 8004b8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b90:	2303      	movs	r3, #3
 8004b92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004b94:	2302      	movs	r3, #2
 8004b96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b98:	f107 030c 	add.w	r3, r7, #12
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	4805      	ldr	r0, [pc, #20]	@ (8004bb4 <HAL_TIM_MspPostInit+0x70>)
 8004ba0:	f001 f960 	bl	8005e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004ba4:	bf00      	nop
 8004ba6:	3720      	adds	r7, #32
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	40000800 	.word	0x40000800
 8004bb0:	40023800 	.word	0x40023800
 8004bb4:	40020400 	.word	0x40020400

08004bb8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004bbc:	4b11      	ldr	r3, [pc, #68]	@ (8004c04 <MX_USART1_UART_Init+0x4c>)
 8004bbe:	4a12      	ldr	r2, [pc, #72]	@ (8004c08 <MX_USART1_UART_Init+0x50>)
 8004bc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004bc2:	4b10      	ldr	r3, [pc, #64]	@ (8004c04 <MX_USART1_UART_Init+0x4c>)
 8004bc4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004bc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004bca:	4b0e      	ldr	r3, [pc, #56]	@ (8004c04 <MX_USART1_UART_Init+0x4c>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8004c04 <MX_USART1_UART_Init+0x4c>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8004c04 <MX_USART1_UART_Init+0x4c>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004bdc:	4b09      	ldr	r3, [pc, #36]	@ (8004c04 <MX_USART1_UART_Init+0x4c>)
 8004bde:	220c      	movs	r2, #12
 8004be0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004be2:	4b08      	ldr	r3, [pc, #32]	@ (8004c04 <MX_USART1_UART_Init+0x4c>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004be8:	4b06      	ldr	r3, [pc, #24]	@ (8004c04 <MX_USART1_UART_Init+0x4c>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004bee:	4805      	ldr	r0, [pc, #20]	@ (8004c04 <MX_USART1_UART_Init+0x4c>)
 8004bf0:	f004 fbe6 	bl	80093c0 <HAL_UART_Init>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004bfa:	f7ff fa17 	bl	800402c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004bfe:	bf00      	nop
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	200006bc 	.word	0x200006bc
 8004c08:	40011000 	.word	0x40011000

08004c0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b08a      	sub	sp, #40	@ 0x28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c14:	f107 0314 	add.w	r3, r7, #20
 8004c18:	2200      	movs	r2, #0
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	605a      	str	r2, [r3, #4]
 8004c1e:	609a      	str	r2, [r3, #8]
 8004c20:	60da      	str	r2, [r3, #12]
 8004c22:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a31      	ldr	r2, [pc, #196]	@ (8004cf0 <HAL_UART_MspInit+0xe4>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d15b      	bne.n	8004ce6 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004c2e:	2300      	movs	r3, #0
 8004c30:	613b      	str	r3, [r7, #16]
 8004c32:	4b30      	ldr	r3, [pc, #192]	@ (8004cf4 <HAL_UART_MspInit+0xe8>)
 8004c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c36:	4a2f      	ldr	r2, [pc, #188]	@ (8004cf4 <HAL_UART_MspInit+0xe8>)
 8004c38:	f043 0310 	orr.w	r3, r3, #16
 8004c3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004c3e:	4b2d      	ldr	r3, [pc, #180]	@ (8004cf4 <HAL_UART_MspInit+0xe8>)
 8004c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c42:	f003 0310 	and.w	r3, r3, #16
 8004c46:	613b      	str	r3, [r7, #16]
 8004c48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	60fb      	str	r3, [r7, #12]
 8004c4e:	4b29      	ldr	r3, [pc, #164]	@ (8004cf4 <HAL_UART_MspInit+0xe8>)
 8004c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c52:	4a28      	ldr	r2, [pc, #160]	@ (8004cf4 <HAL_UART_MspInit+0xe8>)
 8004c54:	f043 0301 	orr.w	r3, r3, #1
 8004c58:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c5a:	4b26      	ldr	r3, [pc, #152]	@ (8004cf4 <HAL_UART_MspInit+0xe8>)
 8004c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	60fb      	str	r3, [r7, #12]
 8004c64:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TEL_TX_Pin|TEL_RX_Pin;
 8004c66:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004c6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c70:	2300      	movs	r3, #0
 8004c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c74:	2303      	movs	r3, #3
 8004c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004c78:	2307      	movs	r3, #7
 8004c7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c7c:	f107 0314 	add.w	r3, r7, #20
 8004c80:	4619      	mov	r1, r3
 8004c82:	481d      	ldr	r0, [pc, #116]	@ (8004cf8 <HAL_UART_MspInit+0xec>)
 8004c84:	f001 f8ee 	bl	8005e64 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8004c88:	4b1c      	ldr	r3, [pc, #112]	@ (8004cfc <HAL_UART_MspInit+0xf0>)
 8004c8a:	4a1d      	ldr	r2, [pc, #116]	@ (8004d00 <HAL_UART_MspInit+0xf4>)
 8004c8c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8004c8e:	4b1b      	ldr	r3, [pc, #108]	@ (8004cfc <HAL_UART_MspInit+0xf0>)
 8004c90:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004c94:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c96:	4b19      	ldr	r3, [pc, #100]	@ (8004cfc <HAL_UART_MspInit+0xf0>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c9c:	4b17      	ldr	r3, [pc, #92]	@ (8004cfc <HAL_UART_MspInit+0xf0>)
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004ca2:	4b16      	ldr	r3, [pc, #88]	@ (8004cfc <HAL_UART_MspInit+0xf0>)
 8004ca4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004ca8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004caa:	4b14      	ldr	r3, [pc, #80]	@ (8004cfc <HAL_UART_MspInit+0xf0>)
 8004cac:	2200      	movs	r2, #0
 8004cae:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004cb0:	4b12      	ldr	r3, [pc, #72]	@ (8004cfc <HAL_UART_MspInit+0xf0>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004cb6:	4b11      	ldr	r3, [pc, #68]	@ (8004cfc <HAL_UART_MspInit+0xf0>)
 8004cb8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004cbc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8004cfc <HAL_UART_MspInit+0xf0>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004cc4:	4b0d      	ldr	r3, [pc, #52]	@ (8004cfc <HAL_UART_MspInit+0xf0>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004cca:	480c      	ldr	r0, [pc, #48]	@ (8004cfc <HAL_UART_MspInit+0xf0>)
 8004ccc:	f000 fd5a 	bl	8005784 <HAL_DMA_Init>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8004cd6:	f7ff f9a9 	bl	800402c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a07      	ldr	r2, [pc, #28]	@ (8004cfc <HAL_UART_MspInit+0xf0>)
 8004cde:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004ce0:	4a06      	ldr	r2, [pc, #24]	@ (8004cfc <HAL_UART_MspInit+0xf0>)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004ce6:	bf00      	nop
 8004ce8:	3728      	adds	r7, #40	@ 0x28
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	40011000 	.word	0x40011000
 8004cf4:	40023800 	.word	0x40023800
 8004cf8:	40020000 	.word	0x40020000
 8004cfc:	20000704 	.word	0x20000704
 8004d00:	40026440 	.word	0x40026440

08004d04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004d04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004d3c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004d08:	f7ff fd2c 	bl	8004764 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004d0c:	480c      	ldr	r0, [pc, #48]	@ (8004d40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004d0e:	490d      	ldr	r1, [pc, #52]	@ (8004d44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004d10:	4a0d      	ldr	r2, [pc, #52]	@ (8004d48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004d14:	e002      	b.n	8004d1c <LoopCopyDataInit>

08004d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004d1a:	3304      	adds	r3, #4

08004d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004d20:	d3f9      	bcc.n	8004d16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004d22:	4a0a      	ldr	r2, [pc, #40]	@ (8004d4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004d24:	4c0a      	ldr	r4, [pc, #40]	@ (8004d50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004d28:	e001      	b.n	8004d2e <LoopFillZerobss>

08004d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004d2c:	3204      	adds	r2, #4

08004d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004d30:	d3fb      	bcc.n	8004d2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004d32:	f00a fa01 	bl	800f138 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004d36:	f7ff f8df 	bl	8003ef8 <main>
  bx  lr    
 8004d3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004d3c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004d44:	200002c8 	.word	0x200002c8
  ldr r2, =_sidata
 8004d48:	08012304 	.word	0x08012304
  ldr r2, =_sbss
 8004d4c:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 8004d50:	20005300 	.word	0x20005300

08004d54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004d54:	e7fe      	b.n	8004d54 <ADC_IRQHandler>
	...

08004d58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8004d98 <HAL_Init+0x40>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a0d      	ldr	r2, [pc, #52]	@ (8004d98 <HAL_Init+0x40>)
 8004d62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004d66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004d68:	4b0b      	ldr	r3, [pc, #44]	@ (8004d98 <HAL_Init+0x40>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a0a      	ldr	r2, [pc, #40]	@ (8004d98 <HAL_Init+0x40>)
 8004d6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004d72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004d74:	4b08      	ldr	r3, [pc, #32]	@ (8004d98 <HAL_Init+0x40>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a07      	ldr	r2, [pc, #28]	@ (8004d98 <HAL_Init+0x40>)
 8004d7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d80:	2003      	movs	r0, #3
 8004d82:	f000 fcca 	bl	800571a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004d86:	200f      	movs	r0, #15
 8004d88:	f7ff f982 	bl	8004090 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004d8c:	f7ff f954 	bl	8004038 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	40023c00 	.word	0x40023c00

08004d9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004da0:	4b06      	ldr	r3, [pc, #24]	@ (8004dbc <HAL_IncTick+0x20>)
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	461a      	mov	r2, r3
 8004da6:	4b06      	ldr	r3, [pc, #24]	@ (8004dc0 <HAL_IncTick+0x24>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4413      	add	r3, r2
 8004dac:	4a04      	ldr	r2, [pc, #16]	@ (8004dc0 <HAL_IncTick+0x24>)
 8004dae:	6013      	str	r3, [r2, #0]
}
 8004db0:	bf00      	nop
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	200000f8 	.word	0x200000f8
 8004dc0:	20000764 	.word	0x20000764

08004dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8004dc8:	4b03      	ldr	r3, [pc, #12]	@ (8004dd8 <HAL_GetTick+0x14>)
 8004dca:	681b      	ldr	r3, [r3, #0]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	20000764 	.word	0x20000764

08004ddc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004de4:	2300      	movs	r3, #0
 8004de6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e033      	b.n	8004e5a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d109      	bne.n	8004e0e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f7fd f994 	bl	8002128 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e12:	f003 0310 	and.w	r3, r3, #16
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d118      	bne.n	8004e4c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e1e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004e22:	f023 0302 	bic.w	r3, r3, #2
 8004e26:	f043 0202 	orr.w	r2, r3, #2
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 fa48 	bl	80052c4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3e:	f023 0303 	bic.w	r3, r3, #3
 8004e42:	f043 0201 	orr.w	r2, r3, #1
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	641a      	str	r2, [r3, #64]	@ 0x40
 8004e4a:	e001      	b.n	8004e50 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
	...

08004e64 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b086      	sub	sp, #24
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004e70:	2300      	movs	r3, #0
 8004e72:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d101      	bne.n	8004e82 <HAL_ADC_Start_DMA+0x1e>
 8004e7e:	2302      	movs	r3, #2
 8004e80:	e0ce      	b.n	8005020 <HAL_ADC_Start_DMA+0x1bc>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f003 0301 	and.w	r3, r3, #1
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d018      	beq.n	8004eca <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	689a      	ldr	r2, [r3, #8]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f042 0201 	orr.w	r2, r2, #1
 8004ea6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004ea8:	4b5f      	ldr	r3, [pc, #380]	@ (8005028 <HAL_ADC_Start_DMA+0x1c4>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a5f      	ldr	r2, [pc, #380]	@ (800502c <HAL_ADC_Start_DMA+0x1c8>)
 8004eae:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb2:	0c9a      	lsrs	r2, r3, #18
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	005b      	lsls	r3, r3, #1
 8004eb8:	4413      	add	r3, r2
 8004eba:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8004ebc:	e002      	b.n	8004ec4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1f9      	bne.n	8004ebe <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ed4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ed8:	d107      	bne.n	8004eea <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	689a      	ldr	r2, [r3, #8]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ee8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f003 0301 	and.w	r3, r3, #1
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	f040 8086 	bne.w	8005006 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efe:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004f02:	f023 0301 	bic.w	r3, r3, #1
 8004f06:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d007      	beq.n	8004f2c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f20:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004f24:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f38:	d106      	bne.n	8004f48 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f3e:	f023 0206 	bic.w	r2, r3, #6
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	645a      	str	r2, [r3, #68]	@ 0x44
 8004f46:	e002      	b.n	8004f4e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f56:	4b36      	ldr	r3, [pc, #216]	@ (8005030 <HAL_ADC_Start_DMA+0x1cc>)
 8004f58:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f5e:	4a35      	ldr	r2, [pc, #212]	@ (8005034 <HAL_ADC_Start_DMA+0x1d0>)
 8004f60:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f66:	4a34      	ldr	r2, [pc, #208]	@ (8005038 <HAL_ADC_Start_DMA+0x1d4>)
 8004f68:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f6e:	4a33      	ldr	r2, [pc, #204]	@ (800503c <HAL_ADC_Start_DMA+0x1d8>)
 8004f70:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004f7a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8004f8a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	689a      	ldr	r2, [r3, #8]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f9a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	334c      	adds	r3, #76	@ 0x4c
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	68ba      	ldr	r2, [r7, #8]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f000 fc98 	bl	80058e0 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f003 031f 	and.w	r3, r3, #31
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d10f      	bne.n	8004fdc <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d129      	bne.n	800501e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	689a      	ldr	r2, [r3, #8]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004fd8:	609a      	str	r2, [r3, #8]
 8004fda:	e020      	b.n	800501e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a17      	ldr	r2, [pc, #92]	@ (8005040 <HAL_ADC_Start_DMA+0x1dc>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d11b      	bne.n	800501e <HAL_ADC_Start_DMA+0x1ba>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d114      	bne.n	800501e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689a      	ldr	r2, [r3, #8]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005002:	609a      	str	r2, [r3, #8]
 8005004:	e00b      	b.n	800501e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800500a:	f043 0210 	orr.w	r2, r3, #16
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005016:	f043 0201 	orr.w	r2, r3, #1
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3718      	adds	r7, #24
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	200000f0 	.word	0x200000f0
 800502c:	431bde83 	.word	0x431bde83
 8005030:	40012300 	.word	0x40012300
 8005034:	080054bd 	.word	0x080054bd
 8005038:	08005577 	.word	0x08005577
 800503c:	08005593 	.word	0x08005593
 8005040:	40012000 	.word	0x40012000

08005044 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800508a:	2300      	movs	r3, #0
 800508c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005094:	2b01      	cmp	r3, #1
 8005096:	d101      	bne.n	800509c <HAL_ADC_ConfigChannel+0x1c>
 8005098:	2302      	movs	r3, #2
 800509a:	e105      	b.n	80052a8 <HAL_ADC_ConfigChannel+0x228>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2b09      	cmp	r3, #9
 80050aa:	d925      	bls.n	80050f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68d9      	ldr	r1, [r3, #12]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	461a      	mov	r2, r3
 80050ba:	4613      	mov	r3, r2
 80050bc:	005b      	lsls	r3, r3, #1
 80050be:	4413      	add	r3, r2
 80050c0:	3b1e      	subs	r3, #30
 80050c2:	2207      	movs	r2, #7
 80050c4:	fa02 f303 	lsl.w	r3, r2, r3
 80050c8:	43da      	mvns	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	400a      	ands	r2, r1
 80050d0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68d9      	ldr	r1, [r3, #12]
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	689a      	ldr	r2, [r3, #8]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	4618      	mov	r0, r3
 80050e4:	4603      	mov	r3, r0
 80050e6:	005b      	lsls	r3, r3, #1
 80050e8:	4403      	add	r3, r0
 80050ea:	3b1e      	subs	r3, #30
 80050ec:	409a      	lsls	r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	60da      	str	r2, [r3, #12]
 80050f6:	e022      	b.n	800513e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	6919      	ldr	r1, [r3, #16]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	b29b      	uxth	r3, r3
 8005104:	461a      	mov	r2, r3
 8005106:	4613      	mov	r3, r2
 8005108:	005b      	lsls	r3, r3, #1
 800510a:	4413      	add	r3, r2
 800510c:	2207      	movs	r2, #7
 800510e:	fa02 f303 	lsl.w	r3, r2, r3
 8005112:	43da      	mvns	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	400a      	ands	r2, r1
 800511a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	6919      	ldr	r1, [r3, #16]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	689a      	ldr	r2, [r3, #8]
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	b29b      	uxth	r3, r3
 800512c:	4618      	mov	r0, r3
 800512e:	4603      	mov	r3, r0
 8005130:	005b      	lsls	r3, r3, #1
 8005132:	4403      	add	r3, r0
 8005134:	409a      	lsls	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	430a      	orrs	r2, r1
 800513c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	2b06      	cmp	r3, #6
 8005144:	d824      	bhi.n	8005190 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	685a      	ldr	r2, [r3, #4]
 8005150:	4613      	mov	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	3b05      	subs	r3, #5
 8005158:	221f      	movs	r2, #31
 800515a:	fa02 f303 	lsl.w	r3, r2, r3
 800515e:	43da      	mvns	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	400a      	ands	r2, r1
 8005166:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	b29b      	uxth	r3, r3
 8005174:	4618      	mov	r0, r3
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	685a      	ldr	r2, [r3, #4]
 800517a:	4613      	mov	r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	4413      	add	r3, r2
 8005180:	3b05      	subs	r3, #5
 8005182:	fa00 f203 	lsl.w	r2, r0, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	430a      	orrs	r2, r1
 800518c:	635a      	str	r2, [r3, #52]	@ 0x34
 800518e:	e04c      	b.n	800522a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	2b0c      	cmp	r3, #12
 8005196:	d824      	bhi.n	80051e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	4613      	mov	r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	4413      	add	r3, r2
 80051a8:	3b23      	subs	r3, #35	@ 0x23
 80051aa:	221f      	movs	r2, #31
 80051ac:	fa02 f303 	lsl.w	r3, r2, r3
 80051b0:	43da      	mvns	r2, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	400a      	ands	r2, r1
 80051b8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	4618      	mov	r0, r3
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	4613      	mov	r3, r2
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	4413      	add	r3, r2
 80051d2:	3b23      	subs	r3, #35	@ 0x23
 80051d4:	fa00 f203 	lsl.w	r2, r0, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	430a      	orrs	r2, r1
 80051de:	631a      	str	r2, [r3, #48]	@ 0x30
 80051e0:	e023      	b.n	800522a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	4613      	mov	r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	3b41      	subs	r3, #65	@ 0x41
 80051f4:	221f      	movs	r2, #31
 80051f6:	fa02 f303 	lsl.w	r3, r2, r3
 80051fa:	43da      	mvns	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	400a      	ands	r2, r1
 8005202:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	b29b      	uxth	r3, r3
 8005210:	4618      	mov	r0, r3
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	685a      	ldr	r2, [r3, #4]
 8005216:	4613      	mov	r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	4413      	add	r3, r2
 800521c:	3b41      	subs	r3, #65	@ 0x41
 800521e:	fa00 f203 	lsl.w	r2, r0, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	430a      	orrs	r2, r1
 8005228:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800522a:	4b22      	ldr	r3, [pc, #136]	@ (80052b4 <HAL_ADC_ConfigChannel+0x234>)
 800522c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a21      	ldr	r2, [pc, #132]	@ (80052b8 <HAL_ADC_ConfigChannel+0x238>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d109      	bne.n	800524c <HAL_ADC_ConfigChannel+0x1cc>
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2b12      	cmp	r3, #18
 800523e:	d105      	bne.n	800524c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a19      	ldr	r2, [pc, #100]	@ (80052b8 <HAL_ADC_ConfigChannel+0x238>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d123      	bne.n	800529e <HAL_ADC_ConfigChannel+0x21e>
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2b10      	cmp	r3, #16
 800525c:	d003      	beq.n	8005266 <HAL_ADC_ConfigChannel+0x1e6>
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2b11      	cmp	r3, #17
 8005264:	d11b      	bne.n	800529e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2b10      	cmp	r3, #16
 8005278:	d111      	bne.n	800529e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800527a:	4b10      	ldr	r3, [pc, #64]	@ (80052bc <HAL_ADC_ConfigChannel+0x23c>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a10      	ldr	r2, [pc, #64]	@ (80052c0 <HAL_ADC_ConfigChannel+0x240>)
 8005280:	fba2 2303 	umull	r2, r3, r2, r3
 8005284:	0c9a      	lsrs	r2, r3, #18
 8005286:	4613      	mov	r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	4413      	add	r3, r2
 800528c:	005b      	lsls	r3, r3, #1
 800528e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005290:	e002      	b.n	8005298 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	3b01      	subs	r3, #1
 8005296:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1f9      	bne.n	8005292 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3714      	adds	r7, #20
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr
 80052b4:	40012300 	.word	0x40012300
 80052b8:	40012000 	.word	0x40012000
 80052bc:	200000f0 	.word	0x200000f0
 80052c0:	431bde83 	.word	0x431bde83

080052c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80052cc:	4b79      	ldr	r3, [pc, #484]	@ (80054b4 <ADC_Init+0x1f0>)
 80052ce:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	685a      	ldr	r2, [r3, #4]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	431a      	orrs	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	685a      	ldr	r2, [r3, #4]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80052f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	6859      	ldr	r1, [r3, #4]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	021a      	lsls	r2, r3, #8
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	430a      	orrs	r2, r1
 800530c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800531c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	6859      	ldr	r1, [r3, #4]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689a      	ldr	r2, [r3, #8]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	430a      	orrs	r2, r1
 800532e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689a      	ldr	r2, [r3, #8]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800533e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6899      	ldr	r1, [r3, #8]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68da      	ldr	r2, [r3, #12]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	430a      	orrs	r2, r1
 8005350:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005356:	4a58      	ldr	r2, [pc, #352]	@ (80054b8 <ADC_Init+0x1f4>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d022      	beq.n	80053a2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	689a      	ldr	r2, [r3, #8]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800536a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	6899      	ldr	r1, [r3, #8]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	430a      	orrs	r2, r1
 800537c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	689a      	ldr	r2, [r3, #8]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800538c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	6899      	ldr	r1, [r3, #8]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	430a      	orrs	r2, r1
 800539e:	609a      	str	r2, [r3, #8]
 80053a0:	e00f      	b.n	80053c2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80053b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	689a      	ldr	r2, [r3, #8]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80053c0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	689a      	ldr	r2, [r3, #8]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f022 0202 	bic.w	r2, r2, #2
 80053d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	6899      	ldr	r1, [r3, #8]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	7e1b      	ldrb	r3, [r3, #24]
 80053dc:	005a      	lsls	r2, r3, #1
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	430a      	orrs	r2, r1
 80053e4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d01b      	beq.n	8005428 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	685a      	ldr	r2, [r3, #4]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053fe:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	685a      	ldr	r2, [r3, #4]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800540e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6859      	ldr	r1, [r3, #4]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800541a:	3b01      	subs	r3, #1
 800541c:	035a      	lsls	r2, r3, #13
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	430a      	orrs	r2, r1
 8005424:	605a      	str	r2, [r3, #4]
 8005426:	e007      	b.n	8005438 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685a      	ldr	r2, [r3, #4]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005436:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005446:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	69db      	ldr	r3, [r3, #28]
 8005452:	3b01      	subs	r3, #1
 8005454:	051a      	lsls	r2, r3, #20
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	430a      	orrs	r2, r1
 800545c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	689a      	ldr	r2, [r3, #8]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800546c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	6899      	ldr	r1, [r3, #8]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800547a:	025a      	lsls	r2, r3, #9
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	430a      	orrs	r2, r1
 8005482:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	689a      	ldr	r2, [r3, #8]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005492:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6899      	ldr	r1, [r3, #8]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	029a      	lsls	r2, r3, #10
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	430a      	orrs	r2, r1
 80054a6:	609a      	str	r2, [r3, #8]
}
 80054a8:	bf00      	nop
 80054aa:	3714      	adds	r7, #20
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr
 80054b4:	40012300 	.word	0x40012300
 80054b8:	0f000001 	.word	0x0f000001

080054bc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054c8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ce:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d13c      	bne.n	8005550 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054da:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d12b      	bne.n	8005548 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d127      	bne.n	8005548 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054fe:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005502:	2b00      	cmp	r3, #0
 8005504:	d006      	beq.n	8005514 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005510:	2b00      	cmp	r3, #0
 8005512:	d119      	bne.n	8005548 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	685a      	ldr	r2, [r3, #4]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f022 0220 	bic.w	r2, r2, #32
 8005522:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005528:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005534:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d105      	bne.n	8005548 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005540:	f043 0201 	orr.w	r2, r3, #1
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005548:	68f8      	ldr	r0, [r7, #12]
 800554a:	f7ff fd7b 	bl	8005044 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800554e:	e00e      	b.n	800556e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005554:	f003 0310 	and.w	r3, r3, #16
 8005558:	2b00      	cmp	r3, #0
 800555a:	d003      	beq.n	8005564 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f7ff fd85 	bl	800506c <HAL_ADC_ErrorCallback>
}
 8005562:	e004      	b.n	800556e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	4798      	blx	r3
}
 800556e:	bf00      	nop
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}

08005576 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005576:	b580      	push	{r7, lr}
 8005578:	b084      	sub	sp, #16
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005582:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f7ff fd67 	bl	8005058 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800558a:	bf00      	nop
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005592:	b580      	push	{r7, lr}
 8005594:	b084      	sub	sp, #16
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800559e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2240      	movs	r2, #64	@ 0x40
 80055a4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055aa:	f043 0204 	orr.w	r2, r3, #4
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f7ff fd5a 	bl	800506c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80055b8:	bf00      	nop
 80055ba:	3710      	adds	r7, #16
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f003 0307 	and.w	r3, r3, #7
 80055ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80055d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005604 <__NVIC_SetPriorityGrouping+0x44>)
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80055dc:	4013      	ands	r3, r2
 80055de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80055e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80055ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80055f2:	4a04      	ldr	r2, [pc, #16]	@ (8005604 <__NVIC_SetPriorityGrouping+0x44>)
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	60d3      	str	r3, [r2, #12]
}
 80055f8:	bf00      	nop
 80055fa:	3714      	adds	r7, #20
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr
 8005604:	e000ed00 	.word	0xe000ed00

08005608 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005608:	b480      	push	{r7}
 800560a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800560c:	4b04      	ldr	r3, [pc, #16]	@ (8005620 <__NVIC_GetPriorityGrouping+0x18>)
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	0a1b      	lsrs	r3, r3, #8
 8005612:	f003 0307 	and.w	r3, r3, #7
}
 8005616:	4618      	mov	r0, r3
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr
 8005620:	e000ed00 	.word	0xe000ed00

08005624 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	4603      	mov	r3, r0
 800562c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800562e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005632:	2b00      	cmp	r3, #0
 8005634:	db0b      	blt.n	800564e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005636:	79fb      	ldrb	r3, [r7, #7]
 8005638:	f003 021f 	and.w	r2, r3, #31
 800563c:	4907      	ldr	r1, [pc, #28]	@ (800565c <__NVIC_EnableIRQ+0x38>)
 800563e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005642:	095b      	lsrs	r3, r3, #5
 8005644:	2001      	movs	r0, #1
 8005646:	fa00 f202 	lsl.w	r2, r0, r2
 800564a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800564e:	bf00      	nop
 8005650:	370c      	adds	r7, #12
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	e000e100 	.word	0xe000e100

08005660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	4603      	mov	r3, r0
 8005668:	6039      	str	r1, [r7, #0]
 800566a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800566c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005670:	2b00      	cmp	r3, #0
 8005672:	db0a      	blt.n	800568a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	b2da      	uxtb	r2, r3
 8005678:	490c      	ldr	r1, [pc, #48]	@ (80056ac <__NVIC_SetPriority+0x4c>)
 800567a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800567e:	0112      	lsls	r2, r2, #4
 8005680:	b2d2      	uxtb	r2, r2
 8005682:	440b      	add	r3, r1
 8005684:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005688:	e00a      	b.n	80056a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	b2da      	uxtb	r2, r3
 800568e:	4908      	ldr	r1, [pc, #32]	@ (80056b0 <__NVIC_SetPriority+0x50>)
 8005690:	79fb      	ldrb	r3, [r7, #7]
 8005692:	f003 030f 	and.w	r3, r3, #15
 8005696:	3b04      	subs	r3, #4
 8005698:	0112      	lsls	r2, r2, #4
 800569a:	b2d2      	uxtb	r2, r2
 800569c:	440b      	add	r3, r1
 800569e:	761a      	strb	r2, [r3, #24]
}
 80056a0:	bf00      	nop
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr
 80056ac:	e000e100 	.word	0xe000e100
 80056b0:	e000ed00 	.word	0xe000ed00

080056b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b089      	sub	sp, #36	@ 0x24
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f003 0307 	and.w	r3, r3, #7
 80056c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	f1c3 0307 	rsb	r3, r3, #7
 80056ce:	2b04      	cmp	r3, #4
 80056d0:	bf28      	it	cs
 80056d2:	2304      	movcs	r3, #4
 80056d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	3304      	adds	r3, #4
 80056da:	2b06      	cmp	r3, #6
 80056dc:	d902      	bls.n	80056e4 <NVIC_EncodePriority+0x30>
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	3b03      	subs	r3, #3
 80056e2:	e000      	b.n	80056e6 <NVIC_EncodePriority+0x32>
 80056e4:	2300      	movs	r3, #0
 80056e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056e8:	f04f 32ff 	mov.w	r2, #4294967295
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	fa02 f303 	lsl.w	r3, r2, r3
 80056f2:	43da      	mvns	r2, r3
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	401a      	ands	r2, r3
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056fc:	f04f 31ff 	mov.w	r1, #4294967295
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	fa01 f303 	lsl.w	r3, r1, r3
 8005706:	43d9      	mvns	r1, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800570c:	4313      	orrs	r3, r2
         );
}
 800570e:	4618      	mov	r0, r3
 8005710:	3724      	adds	r7, #36	@ 0x24
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr

0800571a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b082      	sub	sp, #8
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7ff ff4c 	bl	80055c0 <__NVIC_SetPriorityGrouping>
}
 8005728:	bf00      	nop
 800572a:	3708      	adds	r7, #8
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005730:	b580      	push	{r7, lr}
 8005732:	b086      	sub	sp, #24
 8005734:	af00      	add	r7, sp, #0
 8005736:	4603      	mov	r3, r0
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
 800573c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800573e:	2300      	movs	r3, #0
 8005740:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005742:	f7ff ff61 	bl	8005608 <__NVIC_GetPriorityGrouping>
 8005746:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	68b9      	ldr	r1, [r7, #8]
 800574c:	6978      	ldr	r0, [r7, #20]
 800574e:	f7ff ffb1 	bl	80056b4 <NVIC_EncodePriority>
 8005752:	4602      	mov	r2, r0
 8005754:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005758:	4611      	mov	r1, r2
 800575a:	4618      	mov	r0, r3
 800575c:	f7ff ff80 	bl	8005660 <__NVIC_SetPriority>
}
 8005760:	bf00      	nop
 8005762:	3718      	adds	r7, #24
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	4603      	mov	r3, r0
 8005770:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005776:	4618      	mov	r0, r3
 8005778:	f7ff ff54 	bl	8005624 <__NVIC_EnableIRQ>
}
 800577c:	bf00      	nop
 800577e:	3708      	adds	r7, #8
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b086      	sub	sp, #24
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800578c:	2300      	movs	r3, #0
 800578e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005790:	f7ff fb18 	bl	8004dc4 <HAL_GetTick>
 8005794:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d101      	bne.n	80057a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e099      	b.n	80058d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2202      	movs	r2, #2
 80057a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f022 0201 	bic.w	r2, r2, #1
 80057be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80057c0:	e00f      	b.n	80057e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80057c2:	f7ff faff 	bl	8004dc4 <HAL_GetTick>
 80057c6:	4602      	mov	r2, r0
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	2b05      	cmp	r3, #5
 80057ce:	d908      	bls.n	80057e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2220      	movs	r2, #32
 80057d4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2203      	movs	r2, #3
 80057da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e078      	b.n	80058d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0301 	and.w	r3, r3, #1
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1e8      	bne.n	80057c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	4b38      	ldr	r3, [pc, #224]	@ (80058dc <HAL_DMA_Init+0x158>)
 80057fc:	4013      	ands	r3, r2
 80057fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685a      	ldr	r2, [r3, #4]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800580e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800581a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005826:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a1b      	ldr	r3, [r3, #32]
 800582c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	4313      	orrs	r3, r2
 8005832:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005838:	2b04      	cmp	r3, #4
 800583a:	d107      	bne.n	800584c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005844:	4313      	orrs	r3, r2
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	4313      	orrs	r3, r2
 800584a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	697a      	ldr	r2, [r7, #20]
 8005852:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	f023 0307 	bic.w	r3, r3, #7
 8005862:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	4313      	orrs	r3, r2
 800586c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005872:	2b04      	cmp	r3, #4
 8005874:	d117      	bne.n	80058a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	4313      	orrs	r3, r2
 800587e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00e      	beq.n	80058a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 fa6f 	bl	8005d6c <DMA_CheckFifoParam>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d008      	beq.n	80058a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2240      	movs	r2, #64	@ 0x40
 8005898:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2201      	movs	r2, #1
 800589e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80058a2:	2301      	movs	r3, #1
 80058a4:	e016      	b.n	80058d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 fa26 	bl	8005d00 <DMA_CalcBaseAndBitshift>
 80058b4:	4603      	mov	r3, r0
 80058b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058bc:	223f      	movs	r2, #63	@ 0x3f
 80058be:	409a      	lsls	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3718      	adds	r7, #24
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	f010803f 	.word	0xf010803f

080058e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
 80058ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058ee:	2300      	movs	r3, #0
 80058f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d101      	bne.n	8005906 <HAL_DMA_Start_IT+0x26>
 8005902:	2302      	movs	r3, #2
 8005904:	e040      	b.n	8005988 <HAL_DMA_Start_IT+0xa8>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2201      	movs	r2, #1
 800590a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b01      	cmp	r3, #1
 8005918:	d12f      	bne.n	800597a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2202      	movs	r2, #2
 800591e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	68b9      	ldr	r1, [r7, #8]
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f000 f9b8 	bl	8005ca4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005938:	223f      	movs	r2, #63	@ 0x3f
 800593a:	409a      	lsls	r2, r3
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f042 0216 	orr.w	r2, r2, #22
 800594e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005954:	2b00      	cmp	r3, #0
 8005956:	d007      	beq.n	8005968 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f042 0208 	orr.w	r2, r2, #8
 8005966:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f042 0201 	orr.w	r2, r2, #1
 8005976:	601a      	str	r2, [r3, #0]
 8005978:	e005      	b.n	8005986 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005982:	2302      	movs	r3, #2
 8005984:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005986:	7dfb      	ldrb	r3, [r7, #23]
}
 8005988:	4618      	mov	r0, r3
 800598a:	3718      	adds	r7, #24
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005998:	2300      	movs	r3, #0
 800599a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800599c:	4b8e      	ldr	r3, [pc, #568]	@ (8005bd8 <HAL_DMA_IRQHandler+0x248>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a8e      	ldr	r2, [pc, #568]	@ (8005bdc <HAL_DMA_IRQHandler+0x24c>)
 80059a2:	fba2 2303 	umull	r2, r3, r2, r3
 80059a6:	0a9b      	lsrs	r3, r3, #10
 80059a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059ba:	2208      	movs	r2, #8
 80059bc:	409a      	lsls	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	4013      	ands	r3, r2
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d01a      	beq.n	80059fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0304 	and.w	r3, r3, #4
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d013      	beq.n	80059fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f022 0204 	bic.w	r2, r2, #4
 80059e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059e8:	2208      	movs	r2, #8
 80059ea:	409a      	lsls	r2, r3
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059f4:	f043 0201 	orr.w	r2, r3, #1
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a00:	2201      	movs	r2, #1
 8005a02:	409a      	lsls	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	4013      	ands	r3, r2
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d012      	beq.n	8005a32 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00b      	beq.n	8005a32 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a1e:	2201      	movs	r2, #1
 8005a20:	409a      	lsls	r2, r3
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a2a:	f043 0202 	orr.w	r2, r3, #2
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a36:	2204      	movs	r2, #4
 8005a38:	409a      	lsls	r2, r3
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d012      	beq.n	8005a68 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0302 	and.w	r3, r3, #2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00b      	beq.n	8005a68 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a54:	2204      	movs	r2, #4
 8005a56:	409a      	lsls	r2, r3
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a60:	f043 0204 	orr.w	r2, r3, #4
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a6c:	2210      	movs	r2, #16
 8005a6e:	409a      	lsls	r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	4013      	ands	r3, r2
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d043      	beq.n	8005b00 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 0308 	and.w	r3, r3, #8
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d03c      	beq.n	8005b00 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a8a:	2210      	movs	r2, #16
 8005a8c:	409a      	lsls	r2, r3
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d018      	beq.n	8005ad2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d108      	bne.n	8005ac0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d024      	beq.n	8005b00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	4798      	blx	r3
 8005abe:	e01f      	b.n	8005b00 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d01b      	beq.n	8005b00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	4798      	blx	r3
 8005ad0:	e016      	b.n	8005b00 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d107      	bne.n	8005af0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f022 0208 	bic.w	r2, r2, #8
 8005aee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d003      	beq.n	8005b00 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b04:	2220      	movs	r2, #32
 8005b06:	409a      	lsls	r2, r3
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f000 808f 	beq.w	8005c30 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0310 	and.w	r3, r3, #16
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f000 8087 	beq.w	8005c30 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b26:	2220      	movs	r2, #32
 8005b28:	409a      	lsls	r2, r3
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b05      	cmp	r3, #5
 8005b38:	d136      	bne.n	8005ba8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f022 0216 	bic.w	r2, r2, #22
 8005b48:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	695a      	ldr	r2, [r3, #20]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b58:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d103      	bne.n	8005b6a <HAL_DMA_IRQHandler+0x1da>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d007      	beq.n	8005b7a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f022 0208 	bic.w	r2, r2, #8
 8005b78:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b7e:	223f      	movs	r2, #63	@ 0x3f
 8005b80:	409a      	lsls	r2, r3
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d07e      	beq.n	8005c9c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	4798      	blx	r3
        }
        return;
 8005ba6:	e079      	b.n	8005c9c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d01d      	beq.n	8005bf2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d10d      	bne.n	8005be0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d031      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	4798      	blx	r3
 8005bd4:	e02c      	b.n	8005c30 <HAL_DMA_IRQHandler+0x2a0>
 8005bd6:	bf00      	nop
 8005bd8:	200000f0 	.word	0x200000f0
 8005bdc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d023      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	4798      	blx	r3
 8005bf0:	e01e      	b.n	8005c30 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d10f      	bne.n	8005c20 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f022 0210 	bic.w	r2, r2, #16
 8005c0e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d003      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d032      	beq.n	8005c9e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d022      	beq.n	8005c8a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2205      	movs	r2, #5
 8005c48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f022 0201 	bic.w	r2, r2, #1
 8005c5a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	60bb      	str	r3, [r7, #8]
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d307      	bcc.n	8005c78 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1f2      	bne.n	8005c5c <HAL_DMA_IRQHandler+0x2cc>
 8005c76:	e000      	b.n	8005c7a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005c78:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d005      	beq.n	8005c9e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	4798      	blx	r3
 8005c9a:	e000      	b.n	8005c9e <HAL_DMA_IRQHandler+0x30e>
        return;
 8005c9c:	bf00      	nop
    }
  }
}
 8005c9e:	3718      	adds	r7, #24
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
 8005cb0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005cc0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	683a      	ldr	r2, [r7, #0]
 8005cc8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	2b40      	cmp	r3, #64	@ 0x40
 8005cd0:	d108      	bne.n	8005ce4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005ce2:	e007      	b.n	8005cf4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68ba      	ldr	r2, [r7, #8]
 8005cea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	60da      	str	r2, [r3, #12]
}
 8005cf4:	bf00      	nop
 8005cf6:	3714      	adds	r7, #20
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b085      	sub	sp, #20
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	3b10      	subs	r3, #16
 8005d10:	4a14      	ldr	r2, [pc, #80]	@ (8005d64 <DMA_CalcBaseAndBitshift+0x64>)
 8005d12:	fba2 2303 	umull	r2, r3, r2, r3
 8005d16:	091b      	lsrs	r3, r3, #4
 8005d18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005d1a:	4a13      	ldr	r2, [pc, #76]	@ (8005d68 <DMA_CalcBaseAndBitshift+0x68>)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	4413      	add	r3, r2
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	461a      	mov	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2b03      	cmp	r3, #3
 8005d2c:	d909      	bls.n	8005d42 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005d36:	f023 0303 	bic.w	r3, r3, #3
 8005d3a:	1d1a      	adds	r2, r3, #4
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	659a      	str	r2, [r3, #88]	@ 0x58
 8005d40:	e007      	b.n	8005d52 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005d4a:	f023 0303 	bic.w	r3, r3, #3
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3714      	adds	r7, #20
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	aaaaaaab 	.word	0xaaaaaaab
 8005d68:	08011ebc 	.word	0x08011ebc

08005d6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d74:	2300      	movs	r3, #0
 8005d76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d11f      	bne.n	8005dc6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	2b03      	cmp	r3, #3
 8005d8a:	d856      	bhi.n	8005e3a <DMA_CheckFifoParam+0xce>
 8005d8c:	a201      	add	r2, pc, #4	@ (adr r2, 8005d94 <DMA_CheckFifoParam+0x28>)
 8005d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d92:	bf00      	nop
 8005d94:	08005da5 	.word	0x08005da5
 8005d98:	08005db7 	.word	0x08005db7
 8005d9c:	08005da5 	.word	0x08005da5
 8005da0:	08005e3b 	.word	0x08005e3b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d046      	beq.n	8005e3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005db4:	e043      	b.n	8005e3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005dbe:	d140      	bne.n	8005e42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005dc4:	e03d      	b.n	8005e42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	699b      	ldr	r3, [r3, #24]
 8005dca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dce:	d121      	bne.n	8005e14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	2b03      	cmp	r3, #3
 8005dd4:	d837      	bhi.n	8005e46 <DMA_CheckFifoParam+0xda>
 8005dd6:	a201      	add	r2, pc, #4	@ (adr r2, 8005ddc <DMA_CheckFifoParam+0x70>)
 8005dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ddc:	08005ded 	.word	0x08005ded
 8005de0:	08005df3 	.word	0x08005df3
 8005de4:	08005ded 	.word	0x08005ded
 8005de8:	08005e05 	.word	0x08005e05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	73fb      	strb	r3, [r7, #15]
      break;
 8005df0:	e030      	b.n	8005e54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005df6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d025      	beq.n	8005e4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e02:	e022      	b.n	8005e4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e08:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005e0c:	d11f      	bne.n	8005e4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005e12:	e01c      	b.n	8005e4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d903      	bls.n	8005e22 <DMA_CheckFifoParam+0xb6>
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	2b03      	cmp	r3, #3
 8005e1e:	d003      	beq.n	8005e28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005e20:	e018      	b.n	8005e54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	73fb      	strb	r3, [r7, #15]
      break;
 8005e26:	e015      	b.n	8005e54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00e      	beq.n	8005e52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	73fb      	strb	r3, [r7, #15]
      break;
 8005e38:	e00b      	b.n	8005e52 <DMA_CheckFifoParam+0xe6>
      break;
 8005e3a:	bf00      	nop
 8005e3c:	e00a      	b.n	8005e54 <DMA_CheckFifoParam+0xe8>
      break;
 8005e3e:	bf00      	nop
 8005e40:	e008      	b.n	8005e54 <DMA_CheckFifoParam+0xe8>
      break;
 8005e42:	bf00      	nop
 8005e44:	e006      	b.n	8005e54 <DMA_CheckFifoParam+0xe8>
      break;
 8005e46:	bf00      	nop
 8005e48:	e004      	b.n	8005e54 <DMA_CheckFifoParam+0xe8>
      break;
 8005e4a:	bf00      	nop
 8005e4c:	e002      	b.n	8005e54 <DMA_CheckFifoParam+0xe8>
      break;   
 8005e4e:	bf00      	nop
 8005e50:	e000      	b.n	8005e54 <DMA_CheckFifoParam+0xe8>
      break;
 8005e52:	bf00      	nop
    }
  } 
  
  return status; 
 8005e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3714      	adds	r7, #20
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop

08005e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b089      	sub	sp, #36	@ 0x24
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005e72:	2300      	movs	r3, #0
 8005e74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005e76:	2300      	movs	r3, #0
 8005e78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	61fb      	str	r3, [r7, #28]
 8005e7e:	e159      	b.n	8006134 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005e80:	2201      	movs	r2, #1
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	fa02 f303 	lsl.w	r3, r2, r3
 8005e88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	4013      	ands	r3, r2
 8005e92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	f040 8148 	bne.w	800612e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f003 0303 	and.w	r3, r3, #3
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d005      	beq.n	8005eb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d130      	bne.n	8005f18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	005b      	lsls	r3, r3, #1
 8005ec0:	2203      	movs	r2, #3
 8005ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec6:	43db      	mvns	r3, r3
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	4013      	ands	r3, r2
 8005ecc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	68da      	ldr	r2, [r3, #12]
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	005b      	lsls	r3, r3, #1
 8005ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eda:	69ba      	ldr	r2, [r7, #24]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	69ba      	ldr	r2, [r7, #24]
 8005ee4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005eec:	2201      	movs	r2, #1
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef4:	43db      	mvns	r3, r3
 8005ef6:	69ba      	ldr	r2, [r7, #24]
 8005ef8:	4013      	ands	r3, r2
 8005efa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	091b      	lsrs	r3, r3, #4
 8005f02:	f003 0201 	and.w	r2, r3, #1
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0c:	69ba      	ldr	r2, [r7, #24]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	69ba      	ldr	r2, [r7, #24]
 8005f16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f003 0303 	and.w	r3, r3, #3
 8005f20:	2b03      	cmp	r3, #3
 8005f22:	d017      	beq.n	8005f54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	005b      	lsls	r3, r3, #1
 8005f2e:	2203      	movs	r2, #3
 8005f30:	fa02 f303 	lsl.w	r3, r2, r3
 8005f34:	43db      	mvns	r3, r3
 8005f36:	69ba      	ldr	r2, [r7, #24]
 8005f38:	4013      	ands	r3, r2
 8005f3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	689a      	ldr	r2, [r3, #8]
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	005b      	lsls	r3, r3, #1
 8005f44:	fa02 f303 	lsl.w	r3, r2, r3
 8005f48:	69ba      	ldr	r2, [r7, #24]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	69ba      	ldr	r2, [r7, #24]
 8005f52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	f003 0303 	and.w	r3, r3, #3
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	d123      	bne.n	8005fa8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	08da      	lsrs	r2, r3, #3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	3208      	adds	r2, #8
 8005f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	f003 0307 	and.w	r3, r3, #7
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	220f      	movs	r2, #15
 8005f78:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7c:	43db      	mvns	r3, r3
 8005f7e:	69ba      	ldr	r2, [r7, #24]
 8005f80:	4013      	ands	r3, r2
 8005f82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	691a      	ldr	r2, [r3, #16]
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	f003 0307 	and.w	r3, r3, #7
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	fa02 f303 	lsl.w	r3, r2, r3
 8005f94:	69ba      	ldr	r2, [r7, #24]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	08da      	lsrs	r2, r3, #3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	3208      	adds	r2, #8
 8005fa2:	69b9      	ldr	r1, [r7, #24]
 8005fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	005b      	lsls	r3, r3, #1
 8005fb2:	2203      	movs	r2, #3
 8005fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb8:	43db      	mvns	r3, r3
 8005fba:	69ba      	ldr	r2, [r7, #24]
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	f003 0203 	and.w	r2, r3, #3
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	005b      	lsls	r3, r3, #1
 8005fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd0:	69ba      	ldr	r2, [r7, #24]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	69ba      	ldr	r2, [r7, #24]
 8005fda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f000 80a2 	beq.w	800612e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fea:	2300      	movs	r3, #0
 8005fec:	60fb      	str	r3, [r7, #12]
 8005fee:	4b57      	ldr	r3, [pc, #348]	@ (800614c <HAL_GPIO_Init+0x2e8>)
 8005ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ff2:	4a56      	ldr	r2, [pc, #344]	@ (800614c <HAL_GPIO_Init+0x2e8>)
 8005ff4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005ff8:	6453      	str	r3, [r2, #68]	@ 0x44
 8005ffa:	4b54      	ldr	r3, [pc, #336]	@ (800614c <HAL_GPIO_Init+0x2e8>)
 8005ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ffe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006002:	60fb      	str	r3, [r7, #12]
 8006004:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006006:	4a52      	ldr	r2, [pc, #328]	@ (8006150 <HAL_GPIO_Init+0x2ec>)
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	089b      	lsrs	r3, r3, #2
 800600c:	3302      	adds	r3, #2
 800600e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006012:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	f003 0303 	and.w	r3, r3, #3
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	220f      	movs	r2, #15
 800601e:	fa02 f303 	lsl.w	r3, r2, r3
 8006022:	43db      	mvns	r3, r3
 8006024:	69ba      	ldr	r2, [r7, #24]
 8006026:	4013      	ands	r3, r2
 8006028:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a49      	ldr	r2, [pc, #292]	@ (8006154 <HAL_GPIO_Init+0x2f0>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d019      	beq.n	8006066 <HAL_GPIO_Init+0x202>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a48      	ldr	r2, [pc, #288]	@ (8006158 <HAL_GPIO_Init+0x2f4>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d013      	beq.n	8006062 <HAL_GPIO_Init+0x1fe>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a47      	ldr	r2, [pc, #284]	@ (800615c <HAL_GPIO_Init+0x2f8>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d00d      	beq.n	800605e <HAL_GPIO_Init+0x1fa>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a46      	ldr	r2, [pc, #280]	@ (8006160 <HAL_GPIO_Init+0x2fc>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d007      	beq.n	800605a <HAL_GPIO_Init+0x1f6>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a45      	ldr	r2, [pc, #276]	@ (8006164 <HAL_GPIO_Init+0x300>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d101      	bne.n	8006056 <HAL_GPIO_Init+0x1f2>
 8006052:	2304      	movs	r3, #4
 8006054:	e008      	b.n	8006068 <HAL_GPIO_Init+0x204>
 8006056:	2307      	movs	r3, #7
 8006058:	e006      	b.n	8006068 <HAL_GPIO_Init+0x204>
 800605a:	2303      	movs	r3, #3
 800605c:	e004      	b.n	8006068 <HAL_GPIO_Init+0x204>
 800605e:	2302      	movs	r3, #2
 8006060:	e002      	b.n	8006068 <HAL_GPIO_Init+0x204>
 8006062:	2301      	movs	r3, #1
 8006064:	e000      	b.n	8006068 <HAL_GPIO_Init+0x204>
 8006066:	2300      	movs	r3, #0
 8006068:	69fa      	ldr	r2, [r7, #28]
 800606a:	f002 0203 	and.w	r2, r2, #3
 800606e:	0092      	lsls	r2, r2, #2
 8006070:	4093      	lsls	r3, r2
 8006072:	69ba      	ldr	r2, [r7, #24]
 8006074:	4313      	orrs	r3, r2
 8006076:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006078:	4935      	ldr	r1, [pc, #212]	@ (8006150 <HAL_GPIO_Init+0x2ec>)
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	089b      	lsrs	r3, r3, #2
 800607e:	3302      	adds	r3, #2
 8006080:	69ba      	ldr	r2, [r7, #24]
 8006082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006086:	4b38      	ldr	r3, [pc, #224]	@ (8006168 <HAL_GPIO_Init+0x304>)
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	43db      	mvns	r3, r3
 8006090:	69ba      	ldr	r2, [r7, #24]
 8006092:	4013      	ands	r3, r2
 8006094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d003      	beq.n	80060aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80060a2:	69ba      	ldr	r2, [r7, #24]
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80060aa:	4a2f      	ldr	r2, [pc, #188]	@ (8006168 <HAL_GPIO_Init+0x304>)
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80060b0:	4b2d      	ldr	r3, [pc, #180]	@ (8006168 <HAL_GPIO_Init+0x304>)
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	43db      	mvns	r3, r3
 80060ba:	69ba      	ldr	r2, [r7, #24]
 80060bc:	4013      	ands	r3, r2
 80060be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d003      	beq.n	80060d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80060cc:	69ba      	ldr	r2, [r7, #24]
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80060d4:	4a24      	ldr	r2, [pc, #144]	@ (8006168 <HAL_GPIO_Init+0x304>)
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80060da:	4b23      	ldr	r3, [pc, #140]	@ (8006168 <HAL_GPIO_Init+0x304>)
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	43db      	mvns	r3, r3
 80060e4:	69ba      	ldr	r2, [r7, #24]
 80060e6:	4013      	ands	r3, r2
 80060e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d003      	beq.n	80060fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80060f6:	69ba      	ldr	r2, [r7, #24]
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80060fe:	4a1a      	ldr	r2, [pc, #104]	@ (8006168 <HAL_GPIO_Init+0x304>)
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006104:	4b18      	ldr	r3, [pc, #96]	@ (8006168 <HAL_GPIO_Init+0x304>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	43db      	mvns	r3, r3
 800610e:	69ba      	ldr	r2, [r7, #24]
 8006110:	4013      	ands	r3, r2
 8006112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800611c:	2b00      	cmp	r3, #0
 800611e:	d003      	beq.n	8006128 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006120:	69ba      	ldr	r2, [r7, #24]
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	4313      	orrs	r3, r2
 8006126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006128:	4a0f      	ldr	r2, [pc, #60]	@ (8006168 <HAL_GPIO_Init+0x304>)
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	3301      	adds	r3, #1
 8006132:	61fb      	str	r3, [r7, #28]
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	2b0f      	cmp	r3, #15
 8006138:	f67f aea2 	bls.w	8005e80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800613c:	bf00      	nop
 800613e:	bf00      	nop
 8006140:	3724      	adds	r7, #36	@ 0x24
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	40023800 	.word	0x40023800
 8006150:	40013800 	.word	0x40013800
 8006154:	40020000 	.word	0x40020000
 8006158:	40020400 	.word	0x40020400
 800615c:	40020800 	.word	0x40020800
 8006160:	40020c00 	.word	0x40020c00
 8006164:	40021000 	.word	0x40021000
 8006168:	40013c00 	.word	0x40013c00

0800616c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d101      	bne.n	800617e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e12b      	b.n	80063d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006184:	b2db      	uxtb	r3, r3
 8006186:	2b00      	cmp	r3, #0
 8006188:	d106      	bne.n	8006198 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f7fd fe48 	bl	8003e28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2224      	movs	r2, #36	@ 0x24
 800619c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f022 0201 	bic.w	r2, r2, #1
 80061ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80061be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80061ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80061d0:	f001 fd86 	bl	8007ce0 <HAL_RCC_GetPCLK1Freq>
 80061d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	4a81      	ldr	r2, [pc, #516]	@ (80063e0 <HAL_I2C_Init+0x274>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d807      	bhi.n	80061f0 <HAL_I2C_Init+0x84>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	4a80      	ldr	r2, [pc, #512]	@ (80063e4 <HAL_I2C_Init+0x278>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	bf94      	ite	ls
 80061e8:	2301      	movls	r3, #1
 80061ea:	2300      	movhi	r3, #0
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	e006      	b.n	80061fe <HAL_I2C_Init+0x92>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	4a7d      	ldr	r2, [pc, #500]	@ (80063e8 <HAL_I2C_Init+0x27c>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	bf94      	ite	ls
 80061f8:	2301      	movls	r3, #1
 80061fa:	2300      	movhi	r3, #0
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d001      	beq.n	8006206 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e0e7      	b.n	80063d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	4a78      	ldr	r2, [pc, #480]	@ (80063ec <HAL_I2C_Init+0x280>)
 800620a:	fba2 2303 	umull	r2, r3, r2, r3
 800620e:	0c9b      	lsrs	r3, r3, #18
 8006210:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68ba      	ldr	r2, [r7, #8]
 8006222:	430a      	orrs	r2, r1
 8006224:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	6a1b      	ldr	r3, [r3, #32]
 800622c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	4a6a      	ldr	r2, [pc, #424]	@ (80063e0 <HAL_I2C_Init+0x274>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d802      	bhi.n	8006240 <HAL_I2C_Init+0xd4>
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	3301      	adds	r3, #1
 800623e:	e009      	b.n	8006254 <HAL_I2C_Init+0xe8>
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006246:	fb02 f303 	mul.w	r3, r2, r3
 800624a:	4a69      	ldr	r2, [pc, #420]	@ (80063f0 <HAL_I2C_Init+0x284>)
 800624c:	fba2 2303 	umull	r2, r3, r2, r3
 8006250:	099b      	lsrs	r3, r3, #6
 8006252:	3301      	adds	r3, #1
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	6812      	ldr	r2, [r2, #0]
 8006258:	430b      	orrs	r3, r1
 800625a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	69db      	ldr	r3, [r3, #28]
 8006262:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006266:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	495c      	ldr	r1, [pc, #368]	@ (80063e0 <HAL_I2C_Init+0x274>)
 8006270:	428b      	cmp	r3, r1
 8006272:	d819      	bhi.n	80062a8 <HAL_I2C_Init+0x13c>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	1e59      	subs	r1, r3, #1
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	005b      	lsls	r3, r3, #1
 800627e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006282:	1c59      	adds	r1, r3, #1
 8006284:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006288:	400b      	ands	r3, r1
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00a      	beq.n	80062a4 <HAL_I2C_Init+0x138>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	1e59      	subs	r1, r3, #1
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	005b      	lsls	r3, r3, #1
 8006298:	fbb1 f3f3 	udiv	r3, r1, r3
 800629c:	3301      	adds	r3, #1
 800629e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062a2:	e051      	b.n	8006348 <HAL_I2C_Init+0x1dc>
 80062a4:	2304      	movs	r3, #4
 80062a6:	e04f      	b.n	8006348 <HAL_I2C_Init+0x1dc>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d111      	bne.n	80062d4 <HAL_I2C_Init+0x168>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	1e58      	subs	r0, r3, #1
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6859      	ldr	r1, [r3, #4]
 80062b8:	460b      	mov	r3, r1
 80062ba:	005b      	lsls	r3, r3, #1
 80062bc:	440b      	add	r3, r1
 80062be:	fbb0 f3f3 	udiv	r3, r0, r3
 80062c2:	3301      	adds	r3, #1
 80062c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	bf0c      	ite	eq
 80062cc:	2301      	moveq	r3, #1
 80062ce:	2300      	movne	r3, #0
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	e012      	b.n	80062fa <HAL_I2C_Init+0x18e>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	1e58      	subs	r0, r3, #1
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6859      	ldr	r1, [r3, #4]
 80062dc:	460b      	mov	r3, r1
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	440b      	add	r3, r1
 80062e2:	0099      	lsls	r1, r3, #2
 80062e4:	440b      	add	r3, r1
 80062e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80062ea:	3301      	adds	r3, #1
 80062ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	bf0c      	ite	eq
 80062f4:	2301      	moveq	r3, #1
 80062f6:	2300      	movne	r3, #0
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d001      	beq.n	8006302 <HAL_I2C_Init+0x196>
 80062fe:	2301      	movs	r3, #1
 8006300:	e022      	b.n	8006348 <HAL_I2C_Init+0x1dc>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d10e      	bne.n	8006328 <HAL_I2C_Init+0x1bc>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	1e58      	subs	r0, r3, #1
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6859      	ldr	r1, [r3, #4]
 8006312:	460b      	mov	r3, r1
 8006314:	005b      	lsls	r3, r3, #1
 8006316:	440b      	add	r3, r1
 8006318:	fbb0 f3f3 	udiv	r3, r0, r3
 800631c:	3301      	adds	r3, #1
 800631e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006322:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006326:	e00f      	b.n	8006348 <HAL_I2C_Init+0x1dc>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	1e58      	subs	r0, r3, #1
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6859      	ldr	r1, [r3, #4]
 8006330:	460b      	mov	r3, r1
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	440b      	add	r3, r1
 8006336:	0099      	lsls	r1, r3, #2
 8006338:	440b      	add	r3, r1
 800633a:	fbb0 f3f3 	udiv	r3, r0, r3
 800633e:	3301      	adds	r3, #1
 8006340:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006344:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006348:	6879      	ldr	r1, [r7, #4]
 800634a:	6809      	ldr	r1, [r1, #0]
 800634c:	4313      	orrs	r3, r2
 800634e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	69da      	ldr	r2, [r3, #28]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a1b      	ldr	r3, [r3, #32]
 8006362:	431a      	orrs	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	430a      	orrs	r2, r1
 800636a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006376:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	6911      	ldr	r1, [r2, #16]
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	68d2      	ldr	r2, [r2, #12]
 8006382:	4311      	orrs	r1, r2
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	6812      	ldr	r2, [r2, #0]
 8006388:	430b      	orrs	r3, r1
 800638a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	695a      	ldr	r2, [r3, #20]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	431a      	orrs	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	430a      	orrs	r2, r1
 80063a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f042 0201 	orr.w	r2, r2, #1
 80063b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2220      	movs	r2, #32
 80063c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	000186a0 	.word	0x000186a0
 80063e4:	001e847f 	.word	0x001e847f
 80063e8:	003d08ff 	.word	0x003d08ff
 80063ec:	431bde83 	.word	0x431bde83
 80063f0:	10624dd3 	.word	0x10624dd3

080063f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b088      	sub	sp, #32
 80063f8:	af02      	add	r7, sp, #8
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	607a      	str	r2, [r7, #4]
 80063fe:	461a      	mov	r2, r3
 8006400:	460b      	mov	r3, r1
 8006402:	817b      	strh	r3, [r7, #10]
 8006404:	4613      	mov	r3, r2
 8006406:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006408:	f7fe fcdc 	bl	8004dc4 <HAL_GetTick>
 800640c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b20      	cmp	r3, #32
 8006418:	f040 80e0 	bne.w	80065dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	2319      	movs	r3, #25
 8006422:	2201      	movs	r2, #1
 8006424:	4970      	ldr	r1, [pc, #448]	@ (80065e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f000 fdf4 	bl	8007014 <I2C_WaitOnFlagUntilTimeout>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d001      	beq.n	8006436 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006432:	2302      	movs	r3, #2
 8006434:	e0d3      	b.n	80065de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800643c:	2b01      	cmp	r3, #1
 800643e:	d101      	bne.n	8006444 <HAL_I2C_Master_Transmit+0x50>
 8006440:	2302      	movs	r3, #2
 8006442:	e0cc      	b.n	80065de <HAL_I2C_Master_Transmit+0x1ea>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	2b01      	cmp	r3, #1
 8006458:	d007      	beq.n	800646a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f042 0201 	orr.w	r2, r2, #1
 8006468:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006478:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2221      	movs	r2, #33	@ 0x21
 800647e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2210      	movs	r2, #16
 8006486:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	893a      	ldrh	r2, [r7, #8]
 800649a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	4a50      	ldr	r2, [pc, #320]	@ (80065ec <HAL_I2C_Master_Transmit+0x1f8>)
 80064aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80064ac:	8979      	ldrh	r1, [r7, #10]
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	6a3a      	ldr	r2, [r7, #32]
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	f000 fbc8 	bl	8006c48 <I2C_MasterRequestWrite>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d001      	beq.n	80064c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e08d      	b.n	80065de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064c2:	2300      	movs	r3, #0
 80064c4:	613b      	str	r3, [r7, #16]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	695b      	ldr	r3, [r3, #20]
 80064cc:	613b      	str	r3, [r7, #16]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	613b      	str	r3, [r7, #16]
 80064d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80064d8:	e066      	b.n	80065a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	6a39      	ldr	r1, [r7, #32]
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f000 feb2 	bl	8007248 <I2C_WaitOnTXEFlagUntilTimeout>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00d      	beq.n	8006506 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ee:	2b04      	cmp	r3, #4
 80064f0:	d107      	bne.n	8006502 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006500:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e06b      	b.n	80065de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800650a:	781a      	ldrb	r2, [r3, #0]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006516:	1c5a      	adds	r2, r3, #1
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006520:	b29b      	uxth	r3, r3
 8006522:	3b01      	subs	r3, #1
 8006524:	b29a      	uxth	r2, r3
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800652e:	3b01      	subs	r3, #1
 8006530:	b29a      	uxth	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	695b      	ldr	r3, [r3, #20]
 800653c:	f003 0304 	and.w	r3, r3, #4
 8006540:	2b04      	cmp	r3, #4
 8006542:	d11b      	bne.n	800657c <HAL_I2C_Master_Transmit+0x188>
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006548:	2b00      	cmp	r3, #0
 800654a:	d017      	beq.n	800657c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006550:	781a      	ldrb	r2, [r3, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800655c:	1c5a      	adds	r2, r3, #1
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006566:	b29b      	uxth	r3, r3
 8006568:	3b01      	subs	r3, #1
 800656a:	b29a      	uxth	r2, r3
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006574:	3b01      	subs	r3, #1
 8006576:	b29a      	uxth	r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	6a39      	ldr	r1, [r7, #32]
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f000 fea9 	bl	80072d8 <I2C_WaitOnBTFFlagUntilTimeout>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00d      	beq.n	80065a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006590:	2b04      	cmp	r3, #4
 8006592:	d107      	bne.n	80065a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	e01a      	b.n	80065de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d194      	bne.n	80064da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2220      	movs	r2, #32
 80065c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80065d8:	2300      	movs	r3, #0
 80065da:	e000      	b.n	80065de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80065dc:	2302      	movs	r3, #2
  }
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3718      	adds	r7, #24
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	00100002 	.word	0x00100002
 80065ec:	ffff0000 	.word	0xffff0000

080065f0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b08c      	sub	sp, #48	@ 0x30
 80065f4:	af02      	add	r7, sp, #8
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	607a      	str	r2, [r7, #4]
 80065fa:	461a      	mov	r2, r3
 80065fc:	460b      	mov	r3, r1
 80065fe:	817b      	strh	r3, [r7, #10]
 8006600:	4613      	mov	r3, r2
 8006602:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006604:	f7fe fbde 	bl	8004dc4 <HAL_GetTick>
 8006608:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006610:	b2db      	uxtb	r3, r3
 8006612:	2b20      	cmp	r3, #32
 8006614:	f040 8217 	bne.w	8006a46 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800661a:	9300      	str	r3, [sp, #0]
 800661c:	2319      	movs	r3, #25
 800661e:	2201      	movs	r2, #1
 8006620:	497c      	ldr	r1, [pc, #496]	@ (8006814 <HAL_I2C_Master_Receive+0x224>)
 8006622:	68f8      	ldr	r0, [r7, #12]
 8006624:	f000 fcf6 	bl	8007014 <I2C_WaitOnFlagUntilTimeout>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d001      	beq.n	8006632 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800662e:	2302      	movs	r3, #2
 8006630:	e20a      	b.n	8006a48 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006638:	2b01      	cmp	r3, #1
 800663a:	d101      	bne.n	8006640 <HAL_I2C_Master_Receive+0x50>
 800663c:	2302      	movs	r3, #2
 800663e:	e203      	b.n	8006a48 <HAL_I2C_Master_Receive+0x458>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 0301 	and.w	r3, r3, #1
 8006652:	2b01      	cmp	r3, #1
 8006654:	d007      	beq.n	8006666 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f042 0201 	orr.w	r2, r2, #1
 8006664:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006674:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2222      	movs	r2, #34	@ 0x22
 800667a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2210      	movs	r2, #16
 8006682:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	893a      	ldrh	r2, [r7, #8]
 8006696:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800669c:	b29a      	uxth	r2, r3
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	4a5c      	ldr	r2, [pc, #368]	@ (8006818 <HAL_I2C_Master_Receive+0x228>)
 80066a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80066a8:	8979      	ldrh	r1, [r7, #10]
 80066aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f000 fb4c 	bl	8006d4c <I2C_MasterRequestRead>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d001      	beq.n	80066be <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e1c4      	b.n	8006a48 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d113      	bne.n	80066ee <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066c6:	2300      	movs	r3, #0
 80066c8:	623b      	str	r3, [r7, #32]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	695b      	ldr	r3, [r3, #20]
 80066d0:	623b      	str	r3, [r7, #32]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	699b      	ldr	r3, [r3, #24]
 80066d8:	623b      	str	r3, [r7, #32]
 80066da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066ea:	601a      	str	r2, [r3, #0]
 80066ec:	e198      	b.n	8006a20 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d11b      	bne.n	800672e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006704:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006706:	2300      	movs	r3, #0
 8006708:	61fb      	str	r3, [r7, #28]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	695b      	ldr	r3, [r3, #20]
 8006710:	61fb      	str	r3, [r7, #28]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	699b      	ldr	r3, [r3, #24]
 8006718:	61fb      	str	r3, [r7, #28]
 800671a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800672a:	601a      	str	r2, [r3, #0]
 800672c:	e178      	b.n	8006a20 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006732:	2b02      	cmp	r3, #2
 8006734:	d11b      	bne.n	800676e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006744:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006754:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006756:	2300      	movs	r3, #0
 8006758:	61bb      	str	r3, [r7, #24]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	695b      	ldr	r3, [r3, #20]
 8006760:	61bb      	str	r3, [r7, #24]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	61bb      	str	r3, [r7, #24]
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	e158      	b.n	8006a20 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800677c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800677e:	2300      	movs	r3, #0
 8006780:	617b      	str	r3, [r7, #20]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	695b      	ldr	r3, [r3, #20]
 8006788:	617b      	str	r3, [r7, #20]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	617b      	str	r3, [r7, #20]
 8006792:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006794:	e144      	b.n	8006a20 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800679a:	2b03      	cmp	r3, #3
 800679c:	f200 80f1 	bhi.w	8006982 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d123      	bne.n	80067f0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f000 fddb 	bl	8007368 <I2C_WaitOnRXNEFlagUntilTimeout>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d001      	beq.n	80067bc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e145      	b.n	8006a48 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	691a      	ldr	r2, [r3, #16]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c6:	b2d2      	uxtb	r2, r2
 80067c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ce:	1c5a      	adds	r2, r3, #1
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067d8:	3b01      	subs	r3, #1
 80067da:	b29a      	uxth	r2, r3
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	3b01      	subs	r3, #1
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80067ee:	e117      	b.n	8006a20 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d14e      	bne.n	8006896 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80067f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067fa:	9300      	str	r3, [sp, #0]
 80067fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fe:	2200      	movs	r2, #0
 8006800:	4906      	ldr	r1, [pc, #24]	@ (800681c <HAL_I2C_Master_Receive+0x22c>)
 8006802:	68f8      	ldr	r0, [r7, #12]
 8006804:	f000 fc06 	bl	8007014 <I2C_WaitOnFlagUntilTimeout>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d008      	beq.n	8006820 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e11a      	b.n	8006a48 <HAL_I2C_Master_Receive+0x458>
 8006812:	bf00      	nop
 8006814:	00100002 	.word	0x00100002
 8006818:	ffff0000 	.word	0xffff0000
 800681c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800682e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	691a      	ldr	r2, [r3, #16]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800683a:	b2d2      	uxtb	r2, r2
 800683c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006842:	1c5a      	adds	r2, r3, #1
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800684c:	3b01      	subs	r3, #1
 800684e:	b29a      	uxth	r2, r3
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006858:	b29b      	uxth	r3, r3
 800685a:	3b01      	subs	r3, #1
 800685c:	b29a      	uxth	r2, r3
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	691a      	ldr	r2, [r3, #16]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800686c:	b2d2      	uxtb	r2, r2
 800686e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006874:	1c5a      	adds	r2, r3, #1
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800687e:	3b01      	subs	r3, #1
 8006880:	b29a      	uxth	r2, r3
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800688a:	b29b      	uxth	r3, r3
 800688c:	3b01      	subs	r3, #1
 800688e:	b29a      	uxth	r2, r3
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006894:	e0c4      	b.n	8006a20 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006898:	9300      	str	r3, [sp, #0]
 800689a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800689c:	2200      	movs	r2, #0
 800689e:	496c      	ldr	r1, [pc, #432]	@ (8006a50 <HAL_I2C_Master_Receive+0x460>)
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f000 fbb7 	bl	8007014 <I2C_WaitOnFlagUntilTimeout>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d001      	beq.n	80068b0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e0cb      	b.n	8006a48 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	691a      	ldr	r2, [r3, #16]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ca:	b2d2      	uxtb	r2, r2
 80068cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068d2:	1c5a      	adds	r2, r3, #1
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068dc:	3b01      	subs	r3, #1
 80068de:	b29a      	uxth	r2, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	3b01      	subs	r3, #1
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80068f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f4:	9300      	str	r3, [sp, #0]
 80068f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f8:	2200      	movs	r2, #0
 80068fa:	4955      	ldr	r1, [pc, #340]	@ (8006a50 <HAL_I2C_Master_Receive+0x460>)
 80068fc:	68f8      	ldr	r0, [r7, #12]
 80068fe:	f000 fb89 	bl	8007014 <I2C_WaitOnFlagUntilTimeout>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d001      	beq.n	800690c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	e09d      	b.n	8006a48 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800691a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	691a      	ldr	r2, [r3, #16]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006926:	b2d2      	uxtb	r2, r2
 8006928:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800692e:	1c5a      	adds	r2, r3, #1
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006938:	3b01      	subs	r3, #1
 800693a:	b29a      	uxth	r2, r3
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006944:	b29b      	uxth	r3, r3
 8006946:	3b01      	subs	r3, #1
 8006948:	b29a      	uxth	r2, r3
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	691a      	ldr	r2, [r3, #16]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006958:	b2d2      	uxtb	r2, r2
 800695a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006960:	1c5a      	adds	r2, r3, #1
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800696a:	3b01      	subs	r3, #1
 800696c:	b29a      	uxth	r2, r3
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006976:	b29b      	uxth	r3, r3
 8006978:	3b01      	subs	r3, #1
 800697a:	b29a      	uxth	r2, r3
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006980:	e04e      	b.n	8006a20 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006982:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006984:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	f000 fcee 	bl	8007368 <I2C_WaitOnRXNEFlagUntilTimeout>
 800698c:	4603      	mov	r3, r0
 800698e:	2b00      	cmp	r3, #0
 8006990:	d001      	beq.n	8006996 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e058      	b.n	8006a48 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	691a      	ldr	r2, [r3, #16]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a0:	b2d2      	uxtb	r2, r2
 80069a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a8:	1c5a      	adds	r2, r3, #1
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069b2:	3b01      	subs	r3, #1
 80069b4:	b29a      	uxth	r2, r3
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069be:	b29b      	uxth	r3, r3
 80069c0:	3b01      	subs	r3, #1
 80069c2:	b29a      	uxth	r2, r3
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	695b      	ldr	r3, [r3, #20]
 80069ce:	f003 0304 	and.w	r3, r3, #4
 80069d2:	2b04      	cmp	r3, #4
 80069d4:	d124      	bne.n	8006a20 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069da:	2b03      	cmp	r3, #3
 80069dc:	d107      	bne.n	80069ee <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80069ec:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	691a      	ldr	r2, [r3, #16]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f8:	b2d2      	uxtb	r2, r2
 80069fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a00:	1c5a      	adds	r2, r3, #1
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a0a:	3b01      	subs	r3, #1
 8006a0c:	b29a      	uxth	r2, r3
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	3b01      	subs	r3, #1
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f47f aeb6 	bne.w	8006796 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2220      	movs	r2, #32
 8006a2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006a42:	2300      	movs	r3, #0
 8006a44:	e000      	b.n	8006a48 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006a46:	2302      	movs	r3, #2
  }
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3728      	adds	r7, #40	@ 0x28
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	00010004 	.word	0x00010004

08006a54 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b088      	sub	sp, #32
 8006a58:	af02      	add	r7, sp, #8
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	4608      	mov	r0, r1
 8006a5e:	4611      	mov	r1, r2
 8006a60:	461a      	mov	r2, r3
 8006a62:	4603      	mov	r3, r0
 8006a64:	817b      	strh	r3, [r7, #10]
 8006a66:	460b      	mov	r3, r1
 8006a68:	813b      	strh	r3, [r7, #8]
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a6e:	f7fe f9a9 	bl	8004dc4 <HAL_GetTick>
 8006a72:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	2b20      	cmp	r3, #32
 8006a7e:	f040 80d9 	bne.w	8006c34 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	9300      	str	r3, [sp, #0]
 8006a86:	2319      	movs	r3, #25
 8006a88:	2201      	movs	r2, #1
 8006a8a:	496d      	ldr	r1, [pc, #436]	@ (8006c40 <HAL_I2C_Mem_Write+0x1ec>)
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f000 fac1 	bl	8007014 <I2C_WaitOnFlagUntilTimeout>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d001      	beq.n	8006a9c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006a98:	2302      	movs	r3, #2
 8006a9a:	e0cc      	b.n	8006c36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d101      	bne.n	8006aaa <HAL_I2C_Mem_Write+0x56>
 8006aa6:	2302      	movs	r3, #2
 8006aa8:	e0c5      	b.n	8006c36 <HAL_I2C_Mem_Write+0x1e2>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0301 	and.w	r3, r3, #1
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d007      	beq.n	8006ad0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f042 0201 	orr.w	r2, r2, #1
 8006ace:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006ade:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2221      	movs	r2, #33	@ 0x21
 8006ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2240      	movs	r2, #64	@ 0x40
 8006aec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6a3a      	ldr	r2, [r7, #32]
 8006afa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006b00:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b06:	b29a      	uxth	r2, r3
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	4a4d      	ldr	r2, [pc, #308]	@ (8006c44 <HAL_I2C_Mem_Write+0x1f0>)
 8006b10:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b12:	88f8      	ldrh	r0, [r7, #6]
 8006b14:	893a      	ldrh	r2, [r7, #8]
 8006b16:	8979      	ldrh	r1, [r7, #10]
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	9301      	str	r3, [sp, #4]
 8006b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b1e:	9300      	str	r3, [sp, #0]
 8006b20:	4603      	mov	r3, r0
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	f000 f9e0 	bl	8006ee8 <I2C_RequestMemoryWrite>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d052      	beq.n	8006bd4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e081      	b.n	8006c36 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	f000 fb86 	bl	8007248 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00d      	beq.n	8006b5e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b46:	2b04      	cmp	r3, #4
 8006b48:	d107      	bne.n	8006b5a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e06b      	b.n	8006c36 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b62:	781a      	ldrb	r2, [r3, #0]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b6e:	1c5a      	adds	r2, r3, #1
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b78:	3b01      	subs	r3, #1
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	3b01      	subs	r3, #1
 8006b88:	b29a      	uxth	r2, r3
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	695b      	ldr	r3, [r3, #20]
 8006b94:	f003 0304 	and.w	r3, r3, #4
 8006b98:	2b04      	cmp	r3, #4
 8006b9a:	d11b      	bne.n	8006bd4 <HAL_I2C_Mem_Write+0x180>
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d017      	beq.n	8006bd4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ba8:	781a      	ldrb	r2, [r3, #0]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bb4:	1c5a      	adds	r2, r3, #1
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1aa      	bne.n	8006b32 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bdc:	697a      	ldr	r2, [r7, #20]
 8006bde:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f000 fb79 	bl	80072d8 <I2C_WaitOnBTFFlagUntilTimeout>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00d      	beq.n	8006c08 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bf0:	2b04      	cmp	r3, #4
 8006bf2:	d107      	bne.n	8006c04 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c02:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e016      	b.n	8006c36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2220      	movs	r2, #32
 8006c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006c30:	2300      	movs	r3, #0
 8006c32:	e000      	b.n	8006c36 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006c34:	2302      	movs	r3, #2
  }
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3718      	adds	r7, #24
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	00100002 	.word	0x00100002
 8006c44:	ffff0000 	.word	0xffff0000

08006c48 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b088      	sub	sp, #32
 8006c4c:	af02      	add	r7, sp, #8
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	607a      	str	r2, [r7, #4]
 8006c52:	603b      	str	r3, [r7, #0]
 8006c54:	460b      	mov	r3, r1
 8006c56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c5c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	2b08      	cmp	r3, #8
 8006c62:	d006      	beq.n	8006c72 <I2C_MasterRequestWrite+0x2a>
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d003      	beq.n	8006c72 <I2C_MasterRequestWrite+0x2a>
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006c70:	d108      	bne.n	8006c84 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c80:	601a      	str	r2, [r3, #0]
 8006c82:	e00b      	b.n	8006c9c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c88:	2b12      	cmp	r3, #18
 8006c8a:	d107      	bne.n	8006c9c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	9300      	str	r3, [sp, #0]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f000 f9b3 	bl	8007014 <I2C_WaitOnFlagUntilTimeout>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d00d      	beq.n	8006cd0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cc2:	d103      	bne.n	8006ccc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006cca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	e035      	b.n	8006d3c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006cd8:	d108      	bne.n	8006cec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006cda:	897b      	ldrh	r3, [r7, #10]
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	461a      	mov	r2, r3
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006ce8:	611a      	str	r2, [r3, #16]
 8006cea:	e01b      	b.n	8006d24 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006cec:	897b      	ldrh	r3, [r7, #10]
 8006cee:	11db      	asrs	r3, r3, #7
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	f003 0306 	and.w	r3, r3, #6
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	f063 030f 	orn	r3, r3, #15
 8006cfc:	b2da      	uxtb	r2, r3
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	490e      	ldr	r1, [pc, #56]	@ (8006d44 <I2C_MasterRequestWrite+0xfc>)
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f000 f9fc 	bl	8007108 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d001      	beq.n	8006d1a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e010      	b.n	8006d3c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006d1a:	897b      	ldrh	r3, [r7, #10]
 8006d1c:	b2da      	uxtb	r2, r3
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	4907      	ldr	r1, [pc, #28]	@ (8006d48 <I2C_MasterRequestWrite+0x100>)
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f000 f9ec 	bl	8007108 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d001      	beq.n	8006d3a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e000      	b.n	8006d3c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3718      	adds	r7, #24
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	00010008 	.word	0x00010008
 8006d48:	00010002 	.word	0x00010002

08006d4c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b088      	sub	sp, #32
 8006d50:	af02      	add	r7, sp, #8
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	607a      	str	r2, [r7, #4]
 8006d56:	603b      	str	r3, [r7, #0]
 8006d58:	460b      	mov	r3, r1
 8006d5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d60:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006d70:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	2b08      	cmp	r3, #8
 8006d76:	d006      	beq.n	8006d86 <I2C_MasterRequestRead+0x3a>
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d003      	beq.n	8006d86 <I2C_MasterRequestRead+0x3a>
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006d84:	d108      	bne.n	8006d98 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d94:	601a      	str	r2, [r3, #0]
 8006d96:	e00b      	b.n	8006db0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d9c:	2b11      	cmp	r3, #17
 8006d9e:	d107      	bne.n	8006db0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006dae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	9300      	str	r3, [sp, #0]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f000 f929 	bl	8007014 <I2C_WaitOnFlagUntilTimeout>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00d      	beq.n	8006de4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006dd6:	d103      	bne.n	8006de0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006dde:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006de0:	2303      	movs	r3, #3
 8006de2:	e079      	b.n	8006ed8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006dec:	d108      	bne.n	8006e00 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006dee:	897b      	ldrh	r3, [r7, #10]
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	f043 0301 	orr.w	r3, r3, #1
 8006df6:	b2da      	uxtb	r2, r3
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	611a      	str	r2, [r3, #16]
 8006dfe:	e05f      	b.n	8006ec0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006e00:	897b      	ldrh	r3, [r7, #10]
 8006e02:	11db      	asrs	r3, r3, #7
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	f003 0306 	and.w	r3, r3, #6
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	f063 030f 	orn	r3, r3, #15
 8006e10:	b2da      	uxtb	r2, r3
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	4930      	ldr	r1, [pc, #192]	@ (8006ee0 <I2C_MasterRequestRead+0x194>)
 8006e1e:	68f8      	ldr	r0, [r7, #12]
 8006e20:	f000 f972 	bl	8007108 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d001      	beq.n	8006e2e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e054      	b.n	8006ed8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006e2e:	897b      	ldrh	r3, [r7, #10]
 8006e30:	b2da      	uxtb	r2, r3
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	4929      	ldr	r1, [pc, #164]	@ (8006ee4 <I2C_MasterRequestRead+0x198>)
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f000 f962 	bl	8007108 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d001      	beq.n	8006e4e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e044      	b.n	8006ed8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e4e:	2300      	movs	r3, #0
 8006e50:	613b      	str	r3, [r7, #16]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	695b      	ldr	r3, [r3, #20]
 8006e58:	613b      	str	r3, [r7, #16]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	699b      	ldr	r3, [r3, #24]
 8006e60:	613b      	str	r3, [r7, #16]
 8006e62:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e72:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	9300      	str	r3, [sp, #0]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f000 f8c7 	bl	8007014 <I2C_WaitOnFlagUntilTimeout>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00d      	beq.n	8006ea8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e9a:	d103      	bne.n	8006ea4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ea2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	e017      	b.n	8006ed8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006ea8:	897b      	ldrh	r3, [r7, #10]
 8006eaa:	11db      	asrs	r3, r3, #7
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	f003 0306 	and.w	r3, r3, #6
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	f063 030e 	orn	r3, r3, #14
 8006eb8:	b2da      	uxtb	r2, r3
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	4907      	ldr	r1, [pc, #28]	@ (8006ee4 <I2C_MasterRequestRead+0x198>)
 8006ec6:	68f8      	ldr	r0, [r7, #12]
 8006ec8:	f000 f91e 	bl	8007108 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d001      	beq.n	8006ed6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e000      	b.n	8006ed8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3718      	adds	r7, #24
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	00010008 	.word	0x00010008
 8006ee4:	00010002 	.word	0x00010002

08006ee8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b088      	sub	sp, #32
 8006eec:	af02      	add	r7, sp, #8
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	4608      	mov	r0, r1
 8006ef2:	4611      	mov	r1, r2
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	817b      	strh	r3, [r7, #10]
 8006efa:	460b      	mov	r3, r1
 8006efc:	813b      	strh	r3, [r7, #8]
 8006efe:	4613      	mov	r3, r2
 8006f00:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f14:	9300      	str	r3, [sp, #0]
 8006f16:	6a3b      	ldr	r3, [r7, #32]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006f1e:	68f8      	ldr	r0, [r7, #12]
 8006f20:	f000 f878 	bl	8007014 <I2C_WaitOnFlagUntilTimeout>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00d      	beq.n	8006f46 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f38:	d103      	bne.n	8006f42 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f40:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006f42:	2303      	movs	r3, #3
 8006f44:	e05f      	b.n	8007006 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006f46:	897b      	ldrh	r3, [r7, #10]
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006f54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f58:	6a3a      	ldr	r2, [r7, #32]
 8006f5a:	492d      	ldr	r1, [pc, #180]	@ (8007010 <I2C_RequestMemoryWrite+0x128>)
 8006f5c:	68f8      	ldr	r0, [r7, #12]
 8006f5e:	f000 f8d3 	bl	8007108 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d001      	beq.n	8006f6c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e04c      	b.n	8007006 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	617b      	str	r3, [r7, #20]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	695b      	ldr	r3, [r3, #20]
 8006f76:	617b      	str	r3, [r7, #20]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	617b      	str	r3, [r7, #20]
 8006f80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f84:	6a39      	ldr	r1, [r7, #32]
 8006f86:	68f8      	ldr	r0, [r7, #12]
 8006f88:	f000 f95e 	bl	8007248 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d00d      	beq.n	8006fae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f96:	2b04      	cmp	r3, #4
 8006f98:	d107      	bne.n	8006faa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006fa8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	e02b      	b.n	8007006 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006fae:	88fb      	ldrh	r3, [r7, #6]
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d105      	bne.n	8006fc0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006fb4:	893b      	ldrh	r3, [r7, #8]
 8006fb6:	b2da      	uxtb	r2, r3
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	611a      	str	r2, [r3, #16]
 8006fbe:	e021      	b.n	8007004 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006fc0:	893b      	ldrh	r3, [r7, #8]
 8006fc2:	0a1b      	lsrs	r3, r3, #8
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	b2da      	uxtb	r2, r3
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fd0:	6a39      	ldr	r1, [r7, #32]
 8006fd2:	68f8      	ldr	r0, [r7, #12]
 8006fd4:	f000 f938 	bl	8007248 <I2C_WaitOnTXEFlagUntilTimeout>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00d      	beq.n	8006ffa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fe2:	2b04      	cmp	r3, #4
 8006fe4:	d107      	bne.n	8006ff6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ff4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e005      	b.n	8007006 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ffa:	893b      	ldrh	r3, [r7, #8]
 8006ffc:	b2da      	uxtb	r2, r3
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3718      	adds	r7, #24
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	00010002 	.word	0x00010002

08007014 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	603b      	str	r3, [r7, #0]
 8007020:	4613      	mov	r3, r2
 8007022:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007024:	e048      	b.n	80070b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800702c:	d044      	beq.n	80070b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800702e:	f7fd fec9 	bl	8004dc4 <HAL_GetTick>
 8007032:	4602      	mov	r2, r0
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	1ad3      	subs	r3, r2, r3
 8007038:	683a      	ldr	r2, [r7, #0]
 800703a:	429a      	cmp	r2, r3
 800703c:	d302      	bcc.n	8007044 <I2C_WaitOnFlagUntilTimeout+0x30>
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d139      	bne.n	80070b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	0c1b      	lsrs	r3, r3, #16
 8007048:	b2db      	uxtb	r3, r3
 800704a:	2b01      	cmp	r3, #1
 800704c:	d10d      	bne.n	800706a <I2C_WaitOnFlagUntilTimeout+0x56>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	695b      	ldr	r3, [r3, #20]
 8007054:	43da      	mvns	r2, r3
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	4013      	ands	r3, r2
 800705a:	b29b      	uxth	r3, r3
 800705c:	2b00      	cmp	r3, #0
 800705e:	bf0c      	ite	eq
 8007060:	2301      	moveq	r3, #1
 8007062:	2300      	movne	r3, #0
 8007064:	b2db      	uxtb	r3, r3
 8007066:	461a      	mov	r2, r3
 8007068:	e00c      	b.n	8007084 <I2C_WaitOnFlagUntilTimeout+0x70>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	699b      	ldr	r3, [r3, #24]
 8007070:	43da      	mvns	r2, r3
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	4013      	ands	r3, r2
 8007076:	b29b      	uxth	r3, r3
 8007078:	2b00      	cmp	r3, #0
 800707a:	bf0c      	ite	eq
 800707c:	2301      	moveq	r3, #1
 800707e:	2300      	movne	r3, #0
 8007080:	b2db      	uxtb	r3, r3
 8007082:	461a      	mov	r2, r3
 8007084:	79fb      	ldrb	r3, [r7, #7]
 8007086:	429a      	cmp	r2, r3
 8007088:	d116      	bne.n	80070b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2200      	movs	r2, #0
 800708e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2220      	movs	r2, #32
 8007094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2200      	movs	r2, #0
 800709c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070a4:	f043 0220 	orr.w	r2, r3, #32
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	e023      	b.n	8007100 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	0c1b      	lsrs	r3, r3, #16
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d10d      	bne.n	80070de <I2C_WaitOnFlagUntilTimeout+0xca>
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	695b      	ldr	r3, [r3, #20]
 80070c8:	43da      	mvns	r2, r3
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	4013      	ands	r3, r2
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	bf0c      	ite	eq
 80070d4:	2301      	moveq	r3, #1
 80070d6:	2300      	movne	r3, #0
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	461a      	mov	r2, r3
 80070dc:	e00c      	b.n	80070f8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	699b      	ldr	r3, [r3, #24]
 80070e4:	43da      	mvns	r2, r3
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	4013      	ands	r3, r2
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	bf0c      	ite	eq
 80070f0:	2301      	moveq	r3, #1
 80070f2:	2300      	movne	r3, #0
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	461a      	mov	r2, r3
 80070f8:	79fb      	ldrb	r3, [r7, #7]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d093      	beq.n	8007026 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	3710      	adds	r7, #16
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]
 8007114:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007116:	e071      	b.n	80071fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	695b      	ldr	r3, [r3, #20]
 800711e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007122:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007126:	d123      	bne.n	8007170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007136:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007140:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2200      	movs	r2, #0
 8007146:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2220      	movs	r2, #32
 800714c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2200      	movs	r2, #0
 8007154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800715c:	f043 0204 	orr.w	r2, r3, #4
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2200      	movs	r2, #0
 8007168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	e067      	b.n	8007240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007176:	d041      	beq.n	80071fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007178:	f7fd fe24 	bl	8004dc4 <HAL_GetTick>
 800717c:	4602      	mov	r2, r0
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	429a      	cmp	r2, r3
 8007186:	d302      	bcc.n	800718e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d136      	bne.n	80071fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	0c1b      	lsrs	r3, r3, #16
 8007192:	b2db      	uxtb	r3, r3
 8007194:	2b01      	cmp	r3, #1
 8007196:	d10c      	bne.n	80071b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	695b      	ldr	r3, [r3, #20]
 800719e:	43da      	mvns	r2, r3
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	4013      	ands	r3, r2
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	bf14      	ite	ne
 80071aa:	2301      	movne	r3, #1
 80071ac:	2300      	moveq	r3, #0
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	e00b      	b.n	80071ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	699b      	ldr	r3, [r3, #24]
 80071b8:	43da      	mvns	r2, r3
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	4013      	ands	r3, r2
 80071be:	b29b      	uxth	r3, r3
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	bf14      	ite	ne
 80071c4:	2301      	movne	r3, #1
 80071c6:	2300      	moveq	r3, #0
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d016      	beq.n	80071fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2200      	movs	r2, #0
 80071d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2220      	movs	r2, #32
 80071d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e8:	f043 0220 	orr.w	r2, r3, #32
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e021      	b.n	8007240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	0c1b      	lsrs	r3, r3, #16
 8007200:	b2db      	uxtb	r3, r3
 8007202:	2b01      	cmp	r3, #1
 8007204:	d10c      	bne.n	8007220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	695b      	ldr	r3, [r3, #20]
 800720c:	43da      	mvns	r2, r3
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	4013      	ands	r3, r2
 8007212:	b29b      	uxth	r3, r3
 8007214:	2b00      	cmp	r3, #0
 8007216:	bf14      	ite	ne
 8007218:	2301      	movne	r3, #1
 800721a:	2300      	moveq	r3, #0
 800721c:	b2db      	uxtb	r3, r3
 800721e:	e00b      	b.n	8007238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	699b      	ldr	r3, [r3, #24]
 8007226:	43da      	mvns	r2, r3
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	4013      	ands	r3, r2
 800722c:	b29b      	uxth	r3, r3
 800722e:	2b00      	cmp	r3, #0
 8007230:	bf14      	ite	ne
 8007232:	2301      	movne	r3, #1
 8007234:	2300      	moveq	r3, #0
 8007236:	b2db      	uxtb	r3, r3
 8007238:	2b00      	cmp	r3, #0
 800723a:	f47f af6d 	bne.w	8007118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800723e:	2300      	movs	r3, #0
}
 8007240:	4618      	mov	r0, r3
 8007242:	3710      	adds	r7, #16
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007254:	e034      	b.n	80072c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	f000 f8e3 	bl	8007422 <I2C_IsAcknowledgeFailed>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d001      	beq.n	8007266 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e034      	b.n	80072d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800726c:	d028      	beq.n	80072c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800726e:	f7fd fda9 	bl	8004dc4 <HAL_GetTick>
 8007272:	4602      	mov	r2, r0
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	68ba      	ldr	r2, [r7, #8]
 800727a:	429a      	cmp	r2, r3
 800727c:	d302      	bcc.n	8007284 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d11d      	bne.n	80072c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	695b      	ldr	r3, [r3, #20]
 800728a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800728e:	2b80      	cmp	r3, #128	@ 0x80
 8007290:	d016      	beq.n	80072c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2200      	movs	r2, #0
 8007296:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2220      	movs	r2, #32
 800729c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ac:	f043 0220 	orr.w	r2, r3, #32
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	e007      	b.n	80072d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	695b      	ldr	r3, [r3, #20]
 80072c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072ca:	2b80      	cmp	r3, #128	@ 0x80
 80072cc:	d1c3      	bne.n	8007256 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80072ce:	2300      	movs	r3, #0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3710      	adds	r7, #16
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80072e4:	e034      	b.n	8007350 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80072e6:	68f8      	ldr	r0, [r7, #12]
 80072e8:	f000 f89b 	bl	8007422 <I2C_IsAcknowledgeFailed>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d001      	beq.n	80072f6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	e034      	b.n	8007360 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072fc:	d028      	beq.n	8007350 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072fe:	f7fd fd61 	bl	8004dc4 <HAL_GetTick>
 8007302:	4602      	mov	r2, r0
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	1ad3      	subs	r3, r2, r3
 8007308:	68ba      	ldr	r2, [r7, #8]
 800730a:	429a      	cmp	r2, r3
 800730c:	d302      	bcc.n	8007314 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d11d      	bne.n	8007350 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	695b      	ldr	r3, [r3, #20]
 800731a:	f003 0304 	and.w	r3, r3, #4
 800731e:	2b04      	cmp	r3, #4
 8007320:	d016      	beq.n	8007350 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2200      	movs	r2, #0
 8007326:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2220      	movs	r2, #32
 800732c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2200      	movs	r2, #0
 8007334:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800733c:	f043 0220 	orr.w	r2, r3, #32
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2200      	movs	r2, #0
 8007348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	e007      	b.n	8007360 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	f003 0304 	and.w	r3, r3, #4
 800735a:	2b04      	cmp	r3, #4
 800735c:	d1c3      	bne.n	80072e6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	3710      	adds	r7, #16
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007374:	e049      	b.n	800740a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	695b      	ldr	r3, [r3, #20]
 800737c:	f003 0310 	and.w	r3, r3, #16
 8007380:	2b10      	cmp	r3, #16
 8007382:	d119      	bne.n	80073b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f06f 0210 	mvn.w	r2, #16
 800738c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2200      	movs	r2, #0
 8007392:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2220      	movs	r2, #32
 8007398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	e030      	b.n	800741a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073b8:	f7fd fd04 	bl	8004dc4 <HAL_GetTick>
 80073bc:	4602      	mov	r2, r0
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	68ba      	ldr	r2, [r7, #8]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d302      	bcc.n	80073ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d11d      	bne.n	800740a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	695b      	ldr	r3, [r3, #20]
 80073d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073d8:	2b40      	cmp	r3, #64	@ 0x40
 80073da:	d016      	beq.n	800740a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2200      	movs	r2, #0
 80073e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2220      	movs	r2, #32
 80073e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073f6:	f043 0220 	orr.w	r2, r3, #32
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e007      	b.n	800741a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	695b      	ldr	r3, [r3, #20]
 8007410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007414:	2b40      	cmp	r3, #64	@ 0x40
 8007416:	d1ae      	bne.n	8007376 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	3710      	adds	r7, #16
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007422:	b480      	push	{r7}
 8007424:	b083      	sub	sp, #12
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	695b      	ldr	r3, [r3, #20]
 8007430:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007434:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007438:	d11b      	bne.n	8007472 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007442:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2220      	movs	r2, #32
 800744e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800745e:	f043 0204 	orr.w	r2, r3, #4
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e000      	b.n	8007474 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007472:	2300      	movs	r3, #0
}
 8007474:	4618      	mov	r0, r3
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b086      	sub	sp, #24
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d101      	bne.n	8007492 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	e267      	b.n	8007962 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 0301 	and.w	r3, r3, #1
 800749a:	2b00      	cmp	r3, #0
 800749c:	d075      	beq.n	800758a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800749e:	4b88      	ldr	r3, [pc, #544]	@ (80076c0 <HAL_RCC_OscConfig+0x240>)
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	f003 030c 	and.w	r3, r3, #12
 80074a6:	2b04      	cmp	r3, #4
 80074a8:	d00c      	beq.n	80074c4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80074aa:	4b85      	ldr	r3, [pc, #532]	@ (80076c0 <HAL_RCC_OscConfig+0x240>)
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80074b2:	2b08      	cmp	r3, #8
 80074b4:	d112      	bne.n	80074dc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80074b6:	4b82      	ldr	r3, [pc, #520]	@ (80076c0 <HAL_RCC_OscConfig+0x240>)
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80074be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80074c2:	d10b      	bne.n	80074dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074c4:	4b7e      	ldr	r3, [pc, #504]	@ (80076c0 <HAL_RCC_OscConfig+0x240>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d05b      	beq.n	8007588 <HAL_RCC_OscConfig+0x108>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d157      	bne.n	8007588 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	e242      	b.n	8007962 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074e4:	d106      	bne.n	80074f4 <HAL_RCC_OscConfig+0x74>
 80074e6:	4b76      	ldr	r3, [pc, #472]	@ (80076c0 <HAL_RCC_OscConfig+0x240>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a75      	ldr	r2, [pc, #468]	@ (80076c0 <HAL_RCC_OscConfig+0x240>)
 80074ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074f0:	6013      	str	r3, [r2, #0]
 80074f2:	e01d      	b.n	8007530 <HAL_RCC_OscConfig+0xb0>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80074fc:	d10c      	bne.n	8007518 <HAL_RCC_OscConfig+0x98>
 80074fe:	4b70      	ldr	r3, [pc, #448]	@ (80076c0 <HAL_RCC_OscConfig+0x240>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a6f      	ldr	r2, [pc, #444]	@ (80076c0 <HAL_RCC_OscConfig+0x240>)
 8007504:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007508:	6013      	str	r3, [r2, #0]
 800750a:	4b6d      	ldr	r3, [pc, #436]	@ (80076c0 <HAL_RCC_OscConfig+0x240>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a6c      	ldr	r2, [pc, #432]	@ (80076c0 <HAL_RCC_OscConfig+0x240>)
 8007510:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007514:	6013      	str	r3, [r2, #0]
 8007516:	e00b      	b.n	8007530 <HAL_RCC_OscConfig+0xb0>
 8007518:	4b69      	ldr	r3, [pc, #420]	@ (80076c0 <HAL_RCC_OscConfig+0x240>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a68      	ldr	r2, [pc, #416]	@ (80076c0 <HAL_RCC_OscConfig+0x240>)
 800751e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007522:	6013      	str	r3, [r2, #0]
 8007524:	4b66      	ldr	r3, [pc, #408]	@ (80076c0 <HAL_RCC_OscConfig+0x240>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a65      	ldr	r2, [pc, #404]	@ (80076c0 <HAL_RCC_OscConfig+0x240>)
 800752a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800752e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d013      	beq.n	8007560 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007538:	f7fd fc44 	bl	8004dc4 <HAL_GetTick>
 800753c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800753e:	e008      	b.n	8007552 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007540:	f7fd fc40 	bl	8004dc4 <HAL_GetTick>
 8007544:	4602      	mov	r2, r0
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	2b64      	cmp	r3, #100	@ 0x64
 800754c:	d901      	bls.n	8007552 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800754e:	2303      	movs	r3, #3
 8007550:	e207      	b.n	8007962 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007552:	4b5b      	ldr	r3, [pc, #364]	@ (80076c0 <HAL_RCC_OscConfig+0x240>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800755a:	2b00      	cmp	r3, #0
 800755c:	d0f0      	beq.n	8007540 <HAL_RCC_OscConfig+0xc0>
 800755e:	e014      	b.n	800758a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007560:	f7fd fc30 	bl	8004dc4 <HAL_GetTick>
 8007564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007566:	e008      	b.n	800757a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007568:	f7fd fc2c 	bl	8004dc4 <HAL_GetTick>
 800756c:	4602      	mov	r2, r0
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	1ad3      	subs	r3, r2, r3
 8007572:	2b64      	cmp	r3, #100	@ 0x64
 8007574:	d901      	bls.n	800757a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007576:	2303      	movs	r3, #3
 8007578:	e1f3      	b.n	8007962 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800757a:	4b51      	ldr	r3, [pc, #324]	@ (80076c0 <HAL_RCC_OscConfig+0x240>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1f0      	bne.n	8007568 <HAL_RCC_OscConfig+0xe8>
 8007586:	e000      	b.n	800758a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007588:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f003 0302 	and.w	r3, r3, #2
 8007592:	2b00      	cmp	r3, #0
 8007594:	d063      	beq.n	800765e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007596:	4b4a      	ldr	r3, [pc, #296]	@ (80076c0 <HAL_RCC_OscConfig+0x240>)
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	f003 030c 	and.w	r3, r3, #12
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00b      	beq.n	80075ba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80075a2:	4b47      	ldr	r3, [pc, #284]	@ (80076c0 <HAL_RCC_OscConfig+0x240>)
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80075aa:	2b08      	cmp	r3, #8
 80075ac:	d11c      	bne.n	80075e8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80075ae:	4b44      	ldr	r3, [pc, #272]	@ (80076c0 <HAL_RCC_OscConfig+0x240>)
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d116      	bne.n	80075e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075ba:	4b41      	ldr	r3, [pc, #260]	@ (80076c0 <HAL_RCC_OscConfig+0x240>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 0302 	and.w	r3, r3, #2
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d005      	beq.n	80075d2 <HAL_RCC_OscConfig+0x152>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d001      	beq.n	80075d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e1c7      	b.n	8007962 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075d2:	4b3b      	ldr	r3, [pc, #236]	@ (80076c0 <HAL_RCC_OscConfig+0x240>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	00db      	lsls	r3, r3, #3
 80075e0:	4937      	ldr	r1, [pc, #220]	@ (80076c0 <HAL_RCC_OscConfig+0x240>)
 80075e2:	4313      	orrs	r3, r2
 80075e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075e6:	e03a      	b.n	800765e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d020      	beq.n	8007632 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80075f0:	4b34      	ldr	r3, [pc, #208]	@ (80076c4 <HAL_RCC_OscConfig+0x244>)
 80075f2:	2201      	movs	r2, #1
 80075f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075f6:	f7fd fbe5 	bl	8004dc4 <HAL_GetTick>
 80075fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075fc:	e008      	b.n	8007610 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075fe:	f7fd fbe1 	bl	8004dc4 <HAL_GetTick>
 8007602:	4602      	mov	r2, r0
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	2b02      	cmp	r3, #2
 800760a:	d901      	bls.n	8007610 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800760c:	2303      	movs	r3, #3
 800760e:	e1a8      	b.n	8007962 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007610:	4b2b      	ldr	r3, [pc, #172]	@ (80076c0 <HAL_RCC_OscConfig+0x240>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 0302 	and.w	r3, r3, #2
 8007618:	2b00      	cmp	r3, #0
 800761a:	d0f0      	beq.n	80075fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800761c:	4b28      	ldr	r3, [pc, #160]	@ (80076c0 <HAL_RCC_OscConfig+0x240>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	00db      	lsls	r3, r3, #3
 800762a:	4925      	ldr	r1, [pc, #148]	@ (80076c0 <HAL_RCC_OscConfig+0x240>)
 800762c:	4313      	orrs	r3, r2
 800762e:	600b      	str	r3, [r1, #0]
 8007630:	e015      	b.n	800765e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007632:	4b24      	ldr	r3, [pc, #144]	@ (80076c4 <HAL_RCC_OscConfig+0x244>)
 8007634:	2200      	movs	r2, #0
 8007636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007638:	f7fd fbc4 	bl	8004dc4 <HAL_GetTick>
 800763c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800763e:	e008      	b.n	8007652 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007640:	f7fd fbc0 	bl	8004dc4 <HAL_GetTick>
 8007644:	4602      	mov	r2, r0
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	1ad3      	subs	r3, r2, r3
 800764a:	2b02      	cmp	r3, #2
 800764c:	d901      	bls.n	8007652 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800764e:	2303      	movs	r3, #3
 8007650:	e187      	b.n	8007962 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007652:	4b1b      	ldr	r3, [pc, #108]	@ (80076c0 <HAL_RCC_OscConfig+0x240>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f003 0302 	and.w	r3, r3, #2
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1f0      	bne.n	8007640 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f003 0308 	and.w	r3, r3, #8
 8007666:	2b00      	cmp	r3, #0
 8007668:	d036      	beq.n	80076d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	695b      	ldr	r3, [r3, #20]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d016      	beq.n	80076a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007672:	4b15      	ldr	r3, [pc, #84]	@ (80076c8 <HAL_RCC_OscConfig+0x248>)
 8007674:	2201      	movs	r2, #1
 8007676:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007678:	f7fd fba4 	bl	8004dc4 <HAL_GetTick>
 800767c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800767e:	e008      	b.n	8007692 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007680:	f7fd fba0 	bl	8004dc4 <HAL_GetTick>
 8007684:	4602      	mov	r2, r0
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	2b02      	cmp	r3, #2
 800768c:	d901      	bls.n	8007692 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800768e:	2303      	movs	r3, #3
 8007690:	e167      	b.n	8007962 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007692:	4b0b      	ldr	r3, [pc, #44]	@ (80076c0 <HAL_RCC_OscConfig+0x240>)
 8007694:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007696:	f003 0302 	and.w	r3, r3, #2
 800769a:	2b00      	cmp	r3, #0
 800769c:	d0f0      	beq.n	8007680 <HAL_RCC_OscConfig+0x200>
 800769e:	e01b      	b.n	80076d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80076a0:	4b09      	ldr	r3, [pc, #36]	@ (80076c8 <HAL_RCC_OscConfig+0x248>)
 80076a2:	2200      	movs	r2, #0
 80076a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076a6:	f7fd fb8d 	bl	8004dc4 <HAL_GetTick>
 80076aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80076ac:	e00e      	b.n	80076cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076ae:	f7fd fb89 	bl	8004dc4 <HAL_GetTick>
 80076b2:	4602      	mov	r2, r0
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	1ad3      	subs	r3, r2, r3
 80076b8:	2b02      	cmp	r3, #2
 80076ba:	d907      	bls.n	80076cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80076bc:	2303      	movs	r3, #3
 80076be:	e150      	b.n	8007962 <HAL_RCC_OscConfig+0x4e2>
 80076c0:	40023800 	.word	0x40023800
 80076c4:	42470000 	.word	0x42470000
 80076c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80076cc:	4b88      	ldr	r3, [pc, #544]	@ (80078f0 <HAL_RCC_OscConfig+0x470>)
 80076ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076d0:	f003 0302 	and.w	r3, r3, #2
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d1ea      	bne.n	80076ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f003 0304 	and.w	r3, r3, #4
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	f000 8097 	beq.w	8007814 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80076e6:	2300      	movs	r3, #0
 80076e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80076ea:	4b81      	ldr	r3, [pc, #516]	@ (80078f0 <HAL_RCC_OscConfig+0x470>)
 80076ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d10f      	bne.n	8007716 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076f6:	2300      	movs	r3, #0
 80076f8:	60bb      	str	r3, [r7, #8]
 80076fa:	4b7d      	ldr	r3, [pc, #500]	@ (80078f0 <HAL_RCC_OscConfig+0x470>)
 80076fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076fe:	4a7c      	ldr	r2, [pc, #496]	@ (80078f0 <HAL_RCC_OscConfig+0x470>)
 8007700:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007704:	6413      	str	r3, [r2, #64]	@ 0x40
 8007706:	4b7a      	ldr	r3, [pc, #488]	@ (80078f0 <HAL_RCC_OscConfig+0x470>)
 8007708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800770a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800770e:	60bb      	str	r3, [r7, #8]
 8007710:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007712:	2301      	movs	r3, #1
 8007714:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007716:	4b77      	ldr	r3, [pc, #476]	@ (80078f4 <HAL_RCC_OscConfig+0x474>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800771e:	2b00      	cmp	r3, #0
 8007720:	d118      	bne.n	8007754 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007722:	4b74      	ldr	r3, [pc, #464]	@ (80078f4 <HAL_RCC_OscConfig+0x474>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a73      	ldr	r2, [pc, #460]	@ (80078f4 <HAL_RCC_OscConfig+0x474>)
 8007728:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800772c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800772e:	f7fd fb49 	bl	8004dc4 <HAL_GetTick>
 8007732:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007734:	e008      	b.n	8007748 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007736:	f7fd fb45 	bl	8004dc4 <HAL_GetTick>
 800773a:	4602      	mov	r2, r0
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	1ad3      	subs	r3, r2, r3
 8007740:	2b02      	cmp	r3, #2
 8007742:	d901      	bls.n	8007748 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007744:	2303      	movs	r3, #3
 8007746:	e10c      	b.n	8007962 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007748:	4b6a      	ldr	r3, [pc, #424]	@ (80078f4 <HAL_RCC_OscConfig+0x474>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007750:	2b00      	cmp	r3, #0
 8007752:	d0f0      	beq.n	8007736 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	2b01      	cmp	r3, #1
 800775a:	d106      	bne.n	800776a <HAL_RCC_OscConfig+0x2ea>
 800775c:	4b64      	ldr	r3, [pc, #400]	@ (80078f0 <HAL_RCC_OscConfig+0x470>)
 800775e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007760:	4a63      	ldr	r2, [pc, #396]	@ (80078f0 <HAL_RCC_OscConfig+0x470>)
 8007762:	f043 0301 	orr.w	r3, r3, #1
 8007766:	6713      	str	r3, [r2, #112]	@ 0x70
 8007768:	e01c      	b.n	80077a4 <HAL_RCC_OscConfig+0x324>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	2b05      	cmp	r3, #5
 8007770:	d10c      	bne.n	800778c <HAL_RCC_OscConfig+0x30c>
 8007772:	4b5f      	ldr	r3, [pc, #380]	@ (80078f0 <HAL_RCC_OscConfig+0x470>)
 8007774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007776:	4a5e      	ldr	r2, [pc, #376]	@ (80078f0 <HAL_RCC_OscConfig+0x470>)
 8007778:	f043 0304 	orr.w	r3, r3, #4
 800777c:	6713      	str	r3, [r2, #112]	@ 0x70
 800777e:	4b5c      	ldr	r3, [pc, #368]	@ (80078f0 <HAL_RCC_OscConfig+0x470>)
 8007780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007782:	4a5b      	ldr	r2, [pc, #364]	@ (80078f0 <HAL_RCC_OscConfig+0x470>)
 8007784:	f043 0301 	orr.w	r3, r3, #1
 8007788:	6713      	str	r3, [r2, #112]	@ 0x70
 800778a:	e00b      	b.n	80077a4 <HAL_RCC_OscConfig+0x324>
 800778c:	4b58      	ldr	r3, [pc, #352]	@ (80078f0 <HAL_RCC_OscConfig+0x470>)
 800778e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007790:	4a57      	ldr	r2, [pc, #348]	@ (80078f0 <HAL_RCC_OscConfig+0x470>)
 8007792:	f023 0301 	bic.w	r3, r3, #1
 8007796:	6713      	str	r3, [r2, #112]	@ 0x70
 8007798:	4b55      	ldr	r3, [pc, #340]	@ (80078f0 <HAL_RCC_OscConfig+0x470>)
 800779a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800779c:	4a54      	ldr	r2, [pc, #336]	@ (80078f0 <HAL_RCC_OscConfig+0x470>)
 800779e:	f023 0304 	bic.w	r3, r3, #4
 80077a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d015      	beq.n	80077d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077ac:	f7fd fb0a 	bl	8004dc4 <HAL_GetTick>
 80077b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077b2:	e00a      	b.n	80077ca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077b4:	f7fd fb06 	bl	8004dc4 <HAL_GetTick>
 80077b8:	4602      	mov	r2, r0
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	1ad3      	subs	r3, r2, r3
 80077be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d901      	bls.n	80077ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80077c6:	2303      	movs	r3, #3
 80077c8:	e0cb      	b.n	8007962 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077ca:	4b49      	ldr	r3, [pc, #292]	@ (80078f0 <HAL_RCC_OscConfig+0x470>)
 80077cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077ce:	f003 0302 	and.w	r3, r3, #2
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d0ee      	beq.n	80077b4 <HAL_RCC_OscConfig+0x334>
 80077d6:	e014      	b.n	8007802 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077d8:	f7fd faf4 	bl	8004dc4 <HAL_GetTick>
 80077dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077de:	e00a      	b.n	80077f6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077e0:	f7fd faf0 	bl	8004dc4 <HAL_GetTick>
 80077e4:	4602      	mov	r2, r0
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d901      	bls.n	80077f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80077f2:	2303      	movs	r3, #3
 80077f4:	e0b5      	b.n	8007962 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077f6:	4b3e      	ldr	r3, [pc, #248]	@ (80078f0 <HAL_RCC_OscConfig+0x470>)
 80077f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077fa:	f003 0302 	and.w	r3, r3, #2
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d1ee      	bne.n	80077e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007802:	7dfb      	ldrb	r3, [r7, #23]
 8007804:	2b01      	cmp	r3, #1
 8007806:	d105      	bne.n	8007814 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007808:	4b39      	ldr	r3, [pc, #228]	@ (80078f0 <HAL_RCC_OscConfig+0x470>)
 800780a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800780c:	4a38      	ldr	r2, [pc, #224]	@ (80078f0 <HAL_RCC_OscConfig+0x470>)
 800780e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007812:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	699b      	ldr	r3, [r3, #24]
 8007818:	2b00      	cmp	r3, #0
 800781a:	f000 80a1 	beq.w	8007960 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800781e:	4b34      	ldr	r3, [pc, #208]	@ (80078f0 <HAL_RCC_OscConfig+0x470>)
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	f003 030c 	and.w	r3, r3, #12
 8007826:	2b08      	cmp	r3, #8
 8007828:	d05c      	beq.n	80078e4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	699b      	ldr	r3, [r3, #24]
 800782e:	2b02      	cmp	r3, #2
 8007830:	d141      	bne.n	80078b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007832:	4b31      	ldr	r3, [pc, #196]	@ (80078f8 <HAL_RCC_OscConfig+0x478>)
 8007834:	2200      	movs	r2, #0
 8007836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007838:	f7fd fac4 	bl	8004dc4 <HAL_GetTick>
 800783c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800783e:	e008      	b.n	8007852 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007840:	f7fd fac0 	bl	8004dc4 <HAL_GetTick>
 8007844:	4602      	mov	r2, r0
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	1ad3      	subs	r3, r2, r3
 800784a:	2b02      	cmp	r3, #2
 800784c:	d901      	bls.n	8007852 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800784e:	2303      	movs	r3, #3
 8007850:	e087      	b.n	8007962 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007852:	4b27      	ldr	r3, [pc, #156]	@ (80078f0 <HAL_RCC_OscConfig+0x470>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1f0      	bne.n	8007840 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	69da      	ldr	r2, [r3, #28]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6a1b      	ldr	r3, [r3, #32]
 8007866:	431a      	orrs	r2, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800786c:	019b      	lsls	r3, r3, #6
 800786e:	431a      	orrs	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007874:	085b      	lsrs	r3, r3, #1
 8007876:	3b01      	subs	r3, #1
 8007878:	041b      	lsls	r3, r3, #16
 800787a:	431a      	orrs	r2, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007880:	061b      	lsls	r3, r3, #24
 8007882:	491b      	ldr	r1, [pc, #108]	@ (80078f0 <HAL_RCC_OscConfig+0x470>)
 8007884:	4313      	orrs	r3, r2
 8007886:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007888:	4b1b      	ldr	r3, [pc, #108]	@ (80078f8 <HAL_RCC_OscConfig+0x478>)
 800788a:	2201      	movs	r2, #1
 800788c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800788e:	f7fd fa99 	bl	8004dc4 <HAL_GetTick>
 8007892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007894:	e008      	b.n	80078a8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007896:	f7fd fa95 	bl	8004dc4 <HAL_GetTick>
 800789a:	4602      	mov	r2, r0
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	1ad3      	subs	r3, r2, r3
 80078a0:	2b02      	cmp	r3, #2
 80078a2:	d901      	bls.n	80078a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80078a4:	2303      	movs	r3, #3
 80078a6:	e05c      	b.n	8007962 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078a8:	4b11      	ldr	r3, [pc, #68]	@ (80078f0 <HAL_RCC_OscConfig+0x470>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d0f0      	beq.n	8007896 <HAL_RCC_OscConfig+0x416>
 80078b4:	e054      	b.n	8007960 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078b6:	4b10      	ldr	r3, [pc, #64]	@ (80078f8 <HAL_RCC_OscConfig+0x478>)
 80078b8:	2200      	movs	r2, #0
 80078ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078bc:	f7fd fa82 	bl	8004dc4 <HAL_GetTick>
 80078c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078c2:	e008      	b.n	80078d6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078c4:	f7fd fa7e 	bl	8004dc4 <HAL_GetTick>
 80078c8:	4602      	mov	r2, r0
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	1ad3      	subs	r3, r2, r3
 80078ce:	2b02      	cmp	r3, #2
 80078d0:	d901      	bls.n	80078d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80078d2:	2303      	movs	r3, #3
 80078d4:	e045      	b.n	8007962 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078d6:	4b06      	ldr	r3, [pc, #24]	@ (80078f0 <HAL_RCC_OscConfig+0x470>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d1f0      	bne.n	80078c4 <HAL_RCC_OscConfig+0x444>
 80078e2:	e03d      	b.n	8007960 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	699b      	ldr	r3, [r3, #24]
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d107      	bne.n	80078fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80078ec:	2301      	movs	r3, #1
 80078ee:	e038      	b.n	8007962 <HAL_RCC_OscConfig+0x4e2>
 80078f0:	40023800 	.word	0x40023800
 80078f4:	40007000 	.word	0x40007000
 80078f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80078fc:	4b1b      	ldr	r3, [pc, #108]	@ (800796c <HAL_RCC_OscConfig+0x4ec>)
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	699b      	ldr	r3, [r3, #24]
 8007906:	2b01      	cmp	r3, #1
 8007908:	d028      	beq.n	800795c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007914:	429a      	cmp	r2, r3
 8007916:	d121      	bne.n	800795c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007922:	429a      	cmp	r2, r3
 8007924:	d11a      	bne.n	800795c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007926:	68fa      	ldr	r2, [r7, #12]
 8007928:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800792c:	4013      	ands	r3, r2
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007932:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007934:	4293      	cmp	r3, r2
 8007936:	d111      	bne.n	800795c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007942:	085b      	lsrs	r3, r3, #1
 8007944:	3b01      	subs	r3, #1
 8007946:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007948:	429a      	cmp	r2, r3
 800794a:	d107      	bne.n	800795c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007956:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007958:	429a      	cmp	r2, r3
 800795a:	d001      	beq.n	8007960 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	e000      	b.n	8007962 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3718      	adds	r7, #24
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	40023800 	.word	0x40023800

08007970 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d101      	bne.n	8007984 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	e0cc      	b.n	8007b1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007984:	4b68      	ldr	r3, [pc, #416]	@ (8007b28 <HAL_RCC_ClockConfig+0x1b8>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 0307 	and.w	r3, r3, #7
 800798c:	683a      	ldr	r2, [r7, #0]
 800798e:	429a      	cmp	r2, r3
 8007990:	d90c      	bls.n	80079ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007992:	4b65      	ldr	r3, [pc, #404]	@ (8007b28 <HAL_RCC_ClockConfig+0x1b8>)
 8007994:	683a      	ldr	r2, [r7, #0]
 8007996:	b2d2      	uxtb	r2, r2
 8007998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800799a:	4b63      	ldr	r3, [pc, #396]	@ (8007b28 <HAL_RCC_ClockConfig+0x1b8>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f003 0307 	and.w	r3, r3, #7
 80079a2:	683a      	ldr	r2, [r7, #0]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d001      	beq.n	80079ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	e0b8      	b.n	8007b1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 0302 	and.w	r3, r3, #2
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d020      	beq.n	80079fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 0304 	and.w	r3, r3, #4
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d005      	beq.n	80079d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80079c4:	4b59      	ldr	r3, [pc, #356]	@ (8007b2c <HAL_RCC_ClockConfig+0x1bc>)
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	4a58      	ldr	r2, [pc, #352]	@ (8007b2c <HAL_RCC_ClockConfig+0x1bc>)
 80079ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80079ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f003 0308 	and.w	r3, r3, #8
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d005      	beq.n	80079e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80079dc:	4b53      	ldr	r3, [pc, #332]	@ (8007b2c <HAL_RCC_ClockConfig+0x1bc>)
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	4a52      	ldr	r2, [pc, #328]	@ (8007b2c <HAL_RCC_ClockConfig+0x1bc>)
 80079e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80079e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079e8:	4b50      	ldr	r3, [pc, #320]	@ (8007b2c <HAL_RCC_ClockConfig+0x1bc>)
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	494d      	ldr	r1, [pc, #308]	@ (8007b2c <HAL_RCC_ClockConfig+0x1bc>)
 80079f6:	4313      	orrs	r3, r2
 80079f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 0301 	and.w	r3, r3, #1
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d044      	beq.n	8007a90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d107      	bne.n	8007a1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a0e:	4b47      	ldr	r3, [pc, #284]	@ (8007b2c <HAL_RCC_ClockConfig+0x1bc>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d119      	bne.n	8007a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e07f      	b.n	8007b1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	d003      	beq.n	8007a2e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a2a:	2b03      	cmp	r3, #3
 8007a2c:	d107      	bne.n	8007a3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a2e:	4b3f      	ldr	r3, [pc, #252]	@ (8007b2c <HAL_RCC_ClockConfig+0x1bc>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d109      	bne.n	8007a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e06f      	b.n	8007b1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a3e:	4b3b      	ldr	r3, [pc, #236]	@ (8007b2c <HAL_RCC_ClockConfig+0x1bc>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f003 0302 	and.w	r3, r3, #2
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d101      	bne.n	8007a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e067      	b.n	8007b1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007a4e:	4b37      	ldr	r3, [pc, #220]	@ (8007b2c <HAL_RCC_ClockConfig+0x1bc>)
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	f023 0203 	bic.w	r2, r3, #3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	4934      	ldr	r1, [pc, #208]	@ (8007b2c <HAL_RCC_ClockConfig+0x1bc>)
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007a60:	f7fd f9b0 	bl	8004dc4 <HAL_GetTick>
 8007a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a66:	e00a      	b.n	8007a7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a68:	f7fd f9ac 	bl	8004dc4 <HAL_GetTick>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	1ad3      	subs	r3, r2, r3
 8007a72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d901      	bls.n	8007a7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007a7a:	2303      	movs	r3, #3
 8007a7c:	e04f      	b.n	8007b1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a7e:	4b2b      	ldr	r3, [pc, #172]	@ (8007b2c <HAL_RCC_ClockConfig+0x1bc>)
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	f003 020c 	and.w	r2, r3, #12
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d1eb      	bne.n	8007a68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007a90:	4b25      	ldr	r3, [pc, #148]	@ (8007b28 <HAL_RCC_ClockConfig+0x1b8>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 0307 	and.w	r3, r3, #7
 8007a98:	683a      	ldr	r2, [r7, #0]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d20c      	bcs.n	8007ab8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a9e:	4b22      	ldr	r3, [pc, #136]	@ (8007b28 <HAL_RCC_ClockConfig+0x1b8>)
 8007aa0:	683a      	ldr	r2, [r7, #0]
 8007aa2:	b2d2      	uxtb	r2, r2
 8007aa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007aa6:	4b20      	ldr	r3, [pc, #128]	@ (8007b28 <HAL_RCC_ClockConfig+0x1b8>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f003 0307 	and.w	r3, r3, #7
 8007aae:	683a      	ldr	r2, [r7, #0]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d001      	beq.n	8007ab8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e032      	b.n	8007b1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f003 0304 	and.w	r3, r3, #4
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d008      	beq.n	8007ad6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ac4:	4b19      	ldr	r3, [pc, #100]	@ (8007b2c <HAL_RCC_ClockConfig+0x1bc>)
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	4916      	ldr	r1, [pc, #88]	@ (8007b2c <HAL_RCC_ClockConfig+0x1bc>)
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f003 0308 	and.w	r3, r3, #8
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d009      	beq.n	8007af6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007ae2:	4b12      	ldr	r3, [pc, #72]	@ (8007b2c <HAL_RCC_ClockConfig+0x1bc>)
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	00db      	lsls	r3, r3, #3
 8007af0:	490e      	ldr	r1, [pc, #56]	@ (8007b2c <HAL_RCC_ClockConfig+0x1bc>)
 8007af2:	4313      	orrs	r3, r2
 8007af4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007af6:	f000 f821 	bl	8007b3c <HAL_RCC_GetSysClockFreq>
 8007afa:	4602      	mov	r2, r0
 8007afc:	4b0b      	ldr	r3, [pc, #44]	@ (8007b2c <HAL_RCC_ClockConfig+0x1bc>)
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	091b      	lsrs	r3, r3, #4
 8007b02:	f003 030f 	and.w	r3, r3, #15
 8007b06:	490a      	ldr	r1, [pc, #40]	@ (8007b30 <HAL_RCC_ClockConfig+0x1c0>)
 8007b08:	5ccb      	ldrb	r3, [r1, r3]
 8007b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8007b0e:	4a09      	ldr	r2, [pc, #36]	@ (8007b34 <HAL_RCC_ClockConfig+0x1c4>)
 8007b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007b12:	4b09      	ldr	r3, [pc, #36]	@ (8007b38 <HAL_RCC_ClockConfig+0x1c8>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7fc faba 	bl	8004090 <HAL_InitTick>

  return HAL_OK;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	40023c00 	.word	0x40023c00
 8007b2c:	40023800 	.word	0x40023800
 8007b30:	08011ea4 	.word	0x08011ea4
 8007b34:	200000f0 	.word	0x200000f0
 8007b38:	200000f4 	.word	0x200000f4

08007b3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b40:	b090      	sub	sp, #64	@ 0x40
 8007b42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007b44:	2300      	movs	r3, #0
 8007b46:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007b50:	2300      	movs	r3, #0
 8007b52:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007b54:	4b59      	ldr	r3, [pc, #356]	@ (8007cbc <HAL_RCC_GetSysClockFreq+0x180>)
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	f003 030c 	and.w	r3, r3, #12
 8007b5c:	2b08      	cmp	r3, #8
 8007b5e:	d00d      	beq.n	8007b7c <HAL_RCC_GetSysClockFreq+0x40>
 8007b60:	2b08      	cmp	r3, #8
 8007b62:	f200 80a1 	bhi.w	8007ca8 <HAL_RCC_GetSysClockFreq+0x16c>
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d002      	beq.n	8007b70 <HAL_RCC_GetSysClockFreq+0x34>
 8007b6a:	2b04      	cmp	r3, #4
 8007b6c:	d003      	beq.n	8007b76 <HAL_RCC_GetSysClockFreq+0x3a>
 8007b6e:	e09b      	b.n	8007ca8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007b70:	4b53      	ldr	r3, [pc, #332]	@ (8007cc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8007b72:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007b74:	e09b      	b.n	8007cae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007b76:	4b53      	ldr	r3, [pc, #332]	@ (8007cc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007b78:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007b7a:	e098      	b.n	8007cae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007b7c:	4b4f      	ldr	r3, [pc, #316]	@ (8007cbc <HAL_RCC_GetSysClockFreq+0x180>)
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b84:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007b86:	4b4d      	ldr	r3, [pc, #308]	@ (8007cbc <HAL_RCC_GetSysClockFreq+0x180>)
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d028      	beq.n	8007be4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b92:	4b4a      	ldr	r3, [pc, #296]	@ (8007cbc <HAL_RCC_GetSysClockFreq+0x180>)
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	099b      	lsrs	r3, r3, #6
 8007b98:	2200      	movs	r2, #0
 8007b9a:	623b      	str	r3, [r7, #32]
 8007b9c:	627a      	str	r2, [r7, #36]	@ 0x24
 8007b9e:	6a3b      	ldr	r3, [r7, #32]
 8007ba0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	4b47      	ldr	r3, [pc, #284]	@ (8007cc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007ba8:	fb03 f201 	mul.w	r2, r3, r1
 8007bac:	2300      	movs	r3, #0
 8007bae:	fb00 f303 	mul.w	r3, r0, r3
 8007bb2:	4413      	add	r3, r2
 8007bb4:	4a43      	ldr	r2, [pc, #268]	@ (8007cc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007bb6:	fba0 1202 	umull	r1, r2, r0, r2
 8007bba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007bbc:	460a      	mov	r2, r1
 8007bbe:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007bc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bc2:	4413      	add	r3, r2
 8007bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007bc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bc8:	2200      	movs	r2, #0
 8007bca:	61bb      	str	r3, [r7, #24]
 8007bcc:	61fa      	str	r2, [r7, #28]
 8007bce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007bd2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007bd6:	f7f9 f85f 	bl	8000c98 <__aeabi_uldivmod>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	460b      	mov	r3, r1
 8007bde:	4613      	mov	r3, r2
 8007be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007be2:	e053      	b.n	8007c8c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007be4:	4b35      	ldr	r3, [pc, #212]	@ (8007cbc <HAL_RCC_GetSysClockFreq+0x180>)
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	099b      	lsrs	r3, r3, #6
 8007bea:	2200      	movs	r2, #0
 8007bec:	613b      	str	r3, [r7, #16]
 8007bee:	617a      	str	r2, [r7, #20]
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007bf6:	f04f 0b00 	mov.w	fp, #0
 8007bfa:	4652      	mov	r2, sl
 8007bfc:	465b      	mov	r3, fp
 8007bfe:	f04f 0000 	mov.w	r0, #0
 8007c02:	f04f 0100 	mov.w	r1, #0
 8007c06:	0159      	lsls	r1, r3, #5
 8007c08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007c0c:	0150      	lsls	r0, r2, #5
 8007c0e:	4602      	mov	r2, r0
 8007c10:	460b      	mov	r3, r1
 8007c12:	ebb2 080a 	subs.w	r8, r2, sl
 8007c16:	eb63 090b 	sbc.w	r9, r3, fp
 8007c1a:	f04f 0200 	mov.w	r2, #0
 8007c1e:	f04f 0300 	mov.w	r3, #0
 8007c22:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007c26:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007c2a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007c2e:	ebb2 0408 	subs.w	r4, r2, r8
 8007c32:	eb63 0509 	sbc.w	r5, r3, r9
 8007c36:	f04f 0200 	mov.w	r2, #0
 8007c3a:	f04f 0300 	mov.w	r3, #0
 8007c3e:	00eb      	lsls	r3, r5, #3
 8007c40:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c44:	00e2      	lsls	r2, r4, #3
 8007c46:	4614      	mov	r4, r2
 8007c48:	461d      	mov	r5, r3
 8007c4a:	eb14 030a 	adds.w	r3, r4, sl
 8007c4e:	603b      	str	r3, [r7, #0]
 8007c50:	eb45 030b 	adc.w	r3, r5, fp
 8007c54:	607b      	str	r3, [r7, #4]
 8007c56:	f04f 0200 	mov.w	r2, #0
 8007c5a:	f04f 0300 	mov.w	r3, #0
 8007c5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007c62:	4629      	mov	r1, r5
 8007c64:	028b      	lsls	r3, r1, #10
 8007c66:	4621      	mov	r1, r4
 8007c68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007c6c:	4621      	mov	r1, r4
 8007c6e:	028a      	lsls	r2, r1, #10
 8007c70:	4610      	mov	r0, r2
 8007c72:	4619      	mov	r1, r3
 8007c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c76:	2200      	movs	r2, #0
 8007c78:	60bb      	str	r3, [r7, #8]
 8007c7a:	60fa      	str	r2, [r7, #12]
 8007c7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c80:	f7f9 f80a 	bl	8000c98 <__aeabi_uldivmod>
 8007c84:	4602      	mov	r2, r0
 8007c86:	460b      	mov	r3, r1
 8007c88:	4613      	mov	r3, r2
 8007c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8007cbc <HAL_RCC_GetSysClockFreq+0x180>)
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	0c1b      	lsrs	r3, r3, #16
 8007c92:	f003 0303 	and.w	r3, r3, #3
 8007c96:	3301      	adds	r3, #1
 8007c98:	005b      	lsls	r3, r3, #1
 8007c9a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007c9c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ca4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007ca6:	e002      	b.n	8007cae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007ca8:	4b05      	ldr	r3, [pc, #20]	@ (8007cc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8007caa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007cac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3740      	adds	r7, #64	@ 0x40
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007cba:	bf00      	nop
 8007cbc:	40023800 	.word	0x40023800
 8007cc0:	00f42400 	.word	0x00f42400
 8007cc4:	017d7840 	.word	0x017d7840

08007cc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ccc:	4b03      	ldr	r3, [pc, #12]	@ (8007cdc <HAL_RCC_GetHCLKFreq+0x14>)
 8007cce:	681b      	ldr	r3, [r3, #0]
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr
 8007cda:	bf00      	nop
 8007cdc:	200000f0 	.word	0x200000f0

08007ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007ce4:	f7ff fff0 	bl	8007cc8 <HAL_RCC_GetHCLKFreq>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	4b05      	ldr	r3, [pc, #20]	@ (8007d00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	0a9b      	lsrs	r3, r3, #10
 8007cf0:	f003 0307 	and.w	r3, r3, #7
 8007cf4:	4903      	ldr	r1, [pc, #12]	@ (8007d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007cf6:	5ccb      	ldrb	r3, [r1, r3]
 8007cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	40023800 	.word	0x40023800
 8007d04:	08011eb4 	.word	0x08011eb4

08007d08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007d0c:	f7ff ffdc 	bl	8007cc8 <HAL_RCC_GetHCLKFreq>
 8007d10:	4602      	mov	r2, r0
 8007d12:	4b05      	ldr	r3, [pc, #20]	@ (8007d28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	0b5b      	lsrs	r3, r3, #13
 8007d18:	f003 0307 	and.w	r3, r3, #7
 8007d1c:	4903      	ldr	r1, [pc, #12]	@ (8007d2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007d1e:	5ccb      	ldrb	r3, [r1, r3]
 8007d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	40023800 	.word	0x40023800
 8007d2c:	08011eb4 	.word	0x08011eb4

08007d30 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	220f      	movs	r2, #15
 8007d3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007d40:	4b12      	ldr	r3, [pc, #72]	@ (8007d8c <HAL_RCC_GetClockConfig+0x5c>)
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	f003 0203 	and.w	r2, r3, #3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8007d8c <HAL_RCC_GetClockConfig+0x5c>)
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007d58:	4b0c      	ldr	r3, [pc, #48]	@ (8007d8c <HAL_RCC_GetClockConfig+0x5c>)
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007d64:	4b09      	ldr	r3, [pc, #36]	@ (8007d8c <HAL_RCC_GetClockConfig+0x5c>)
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	08db      	lsrs	r3, r3, #3
 8007d6a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007d72:	4b07      	ldr	r3, [pc, #28]	@ (8007d90 <HAL_RCC_GetClockConfig+0x60>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f003 0207 	and.w	r2, r3, #7
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	601a      	str	r2, [r3, #0]
}
 8007d7e:	bf00      	nop
 8007d80:	370c      	adds	r7, #12
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	40023800 	.word	0x40023800
 8007d90:	40023c00 	.word	0x40023c00

08007d94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d101      	bne.n	8007da6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	e041      	b.n	8007e2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d106      	bne.n	8007dc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f7fc fe12 	bl	80049e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2202      	movs	r2, #2
 8007dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	3304      	adds	r3, #4
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	4610      	mov	r0, r2
 8007dd4:	f000 fe7c 	bl	8008ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3708      	adds	r7, #8
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
	...

08007e34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b085      	sub	sp, #20
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d001      	beq.n	8007e4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e044      	b.n	8007ed6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2202      	movs	r2, #2
 8007e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	68da      	ldr	r2, [r3, #12]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f042 0201 	orr.w	r2, r2, #1
 8007e62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a1e      	ldr	r2, [pc, #120]	@ (8007ee4 <HAL_TIM_Base_Start_IT+0xb0>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d018      	beq.n	8007ea0 <HAL_TIM_Base_Start_IT+0x6c>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e76:	d013      	beq.n	8007ea0 <HAL_TIM_Base_Start_IT+0x6c>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a1a      	ldr	r2, [pc, #104]	@ (8007ee8 <HAL_TIM_Base_Start_IT+0xb4>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d00e      	beq.n	8007ea0 <HAL_TIM_Base_Start_IT+0x6c>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a19      	ldr	r2, [pc, #100]	@ (8007eec <HAL_TIM_Base_Start_IT+0xb8>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d009      	beq.n	8007ea0 <HAL_TIM_Base_Start_IT+0x6c>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a17      	ldr	r2, [pc, #92]	@ (8007ef0 <HAL_TIM_Base_Start_IT+0xbc>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d004      	beq.n	8007ea0 <HAL_TIM_Base_Start_IT+0x6c>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a16      	ldr	r2, [pc, #88]	@ (8007ef4 <HAL_TIM_Base_Start_IT+0xc0>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d111      	bne.n	8007ec4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	f003 0307 	and.w	r3, r3, #7
 8007eaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2b06      	cmp	r3, #6
 8007eb0:	d010      	beq.n	8007ed4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f042 0201 	orr.w	r2, r2, #1
 8007ec0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ec2:	e007      	b.n	8007ed4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f042 0201 	orr.w	r2, r2, #1
 8007ed2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3714      	adds	r7, #20
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	40010000 	.word	0x40010000
 8007ee8:	40000400 	.word	0x40000400
 8007eec:	40000800 	.word	0x40000800
 8007ef0:	40000c00 	.word	0x40000c00
 8007ef4:	40014000 	.word	0x40014000

08007ef8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d101      	bne.n	8007f0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007f06:	2301      	movs	r3, #1
 8007f08:	e041      	b.n	8007f8e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d106      	bne.n	8007f24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f7fc fdee 	bl	8004b00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2202      	movs	r2, #2
 8007f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	3304      	adds	r3, #4
 8007f34:	4619      	mov	r1, r3
 8007f36:	4610      	mov	r0, r2
 8007f38:	f000 fdca 	bl	8008ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f8c:	2300      	movs	r3, #0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3708      	adds	r7, #8
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
	...

08007f98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d109      	bne.n	8007fbc <HAL_TIM_PWM_Start+0x24>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	bf14      	ite	ne
 8007fb4:	2301      	movne	r3, #1
 8007fb6:	2300      	moveq	r3, #0
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	e022      	b.n	8008002 <HAL_TIM_PWM_Start+0x6a>
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	2b04      	cmp	r3, #4
 8007fc0:	d109      	bne.n	8007fd6 <HAL_TIM_PWM_Start+0x3e>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	bf14      	ite	ne
 8007fce:	2301      	movne	r3, #1
 8007fd0:	2300      	moveq	r3, #0
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	e015      	b.n	8008002 <HAL_TIM_PWM_Start+0x6a>
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	2b08      	cmp	r3, #8
 8007fda:	d109      	bne.n	8007ff0 <HAL_TIM_PWM_Start+0x58>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	bf14      	ite	ne
 8007fe8:	2301      	movne	r3, #1
 8007fea:	2300      	moveq	r3, #0
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	e008      	b.n	8008002 <HAL_TIM_PWM_Start+0x6a>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	bf14      	ite	ne
 8007ffc:	2301      	movne	r3, #1
 8007ffe:	2300      	moveq	r3, #0
 8008000:	b2db      	uxtb	r3, r3
 8008002:	2b00      	cmp	r3, #0
 8008004:	d001      	beq.n	800800a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	e068      	b.n	80080dc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d104      	bne.n	800801a <HAL_TIM_PWM_Start+0x82>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2202      	movs	r2, #2
 8008014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008018:	e013      	b.n	8008042 <HAL_TIM_PWM_Start+0xaa>
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	2b04      	cmp	r3, #4
 800801e:	d104      	bne.n	800802a <HAL_TIM_PWM_Start+0x92>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2202      	movs	r2, #2
 8008024:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008028:	e00b      	b.n	8008042 <HAL_TIM_PWM_Start+0xaa>
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	2b08      	cmp	r3, #8
 800802e:	d104      	bne.n	800803a <HAL_TIM_PWM_Start+0xa2>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2202      	movs	r2, #2
 8008034:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008038:	e003      	b.n	8008042 <HAL_TIM_PWM_Start+0xaa>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2202      	movs	r2, #2
 800803e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	2201      	movs	r2, #1
 8008048:	6839      	ldr	r1, [r7, #0]
 800804a:	4618      	mov	r0, r3
 800804c:	f001 f910 	bl	8009270 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a23      	ldr	r2, [pc, #140]	@ (80080e4 <HAL_TIM_PWM_Start+0x14c>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d107      	bne.n	800806a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008068:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a1d      	ldr	r2, [pc, #116]	@ (80080e4 <HAL_TIM_PWM_Start+0x14c>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d018      	beq.n	80080a6 <HAL_TIM_PWM_Start+0x10e>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800807c:	d013      	beq.n	80080a6 <HAL_TIM_PWM_Start+0x10e>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a19      	ldr	r2, [pc, #100]	@ (80080e8 <HAL_TIM_PWM_Start+0x150>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d00e      	beq.n	80080a6 <HAL_TIM_PWM_Start+0x10e>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a17      	ldr	r2, [pc, #92]	@ (80080ec <HAL_TIM_PWM_Start+0x154>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d009      	beq.n	80080a6 <HAL_TIM_PWM_Start+0x10e>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a16      	ldr	r2, [pc, #88]	@ (80080f0 <HAL_TIM_PWM_Start+0x158>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d004      	beq.n	80080a6 <HAL_TIM_PWM_Start+0x10e>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a14      	ldr	r2, [pc, #80]	@ (80080f4 <HAL_TIM_PWM_Start+0x15c>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d111      	bne.n	80080ca <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	f003 0307 	and.w	r3, r3, #7
 80080b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2b06      	cmp	r3, #6
 80080b6:	d010      	beq.n	80080da <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f042 0201 	orr.w	r2, r2, #1
 80080c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080c8:	e007      	b.n	80080da <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f042 0201 	orr.w	r2, r2, #1
 80080d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3710      	adds	r7, #16
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	40010000 	.word	0x40010000
 80080e8:	40000400 	.word	0x40000400
 80080ec:	40000800 	.word	0x40000800
 80080f0:	40000c00 	.word	0x40000c00
 80080f4:	40014000 	.word	0x40014000

080080f8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d101      	bne.n	800810a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	e041      	b.n	800818e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008110:	b2db      	uxtb	r3, r3
 8008112:	2b00      	cmp	r3, #0
 8008114:	d106      	bne.n	8008124 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2200      	movs	r2, #0
 800811a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 f839 	bl	8008196 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2202      	movs	r2, #2
 8008128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	3304      	adds	r3, #4
 8008134:	4619      	mov	r1, r3
 8008136:	4610      	mov	r0, r2
 8008138:	f000 fcca 	bl	8008ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2201      	movs	r2, #1
 8008140:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2201      	movs	r2, #1
 8008158:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2201      	movs	r2, #1
 8008168:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3708      	adds	r7, #8
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008196:	b480      	push	{r7}
 8008198:	b083      	sub	sp, #12
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800819e:	bf00      	nop
 80081a0:	370c      	adds	r7, #12
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr
	...

080081ac <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081b6:	2300      	movs	r3, #0
 80081b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d104      	bne.n	80081ca <HAL_TIM_IC_Start_IT+0x1e>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	e013      	b.n	80081f2 <HAL_TIM_IC_Start_IT+0x46>
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	2b04      	cmp	r3, #4
 80081ce:	d104      	bne.n	80081da <HAL_TIM_IC_Start_IT+0x2e>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	e00b      	b.n	80081f2 <HAL_TIM_IC_Start_IT+0x46>
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	2b08      	cmp	r3, #8
 80081de:	d104      	bne.n	80081ea <HAL_TIM_IC_Start_IT+0x3e>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	e003      	b.n	80081f2 <HAL_TIM_IC_Start_IT+0x46>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d104      	bne.n	8008204 <HAL_TIM_IC_Start_IT+0x58>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008200:	b2db      	uxtb	r3, r3
 8008202:	e013      	b.n	800822c <HAL_TIM_IC_Start_IT+0x80>
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	2b04      	cmp	r3, #4
 8008208:	d104      	bne.n	8008214 <HAL_TIM_IC_Start_IT+0x68>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008210:	b2db      	uxtb	r3, r3
 8008212:	e00b      	b.n	800822c <HAL_TIM_IC_Start_IT+0x80>
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	2b08      	cmp	r3, #8
 8008218:	d104      	bne.n	8008224 <HAL_TIM_IC_Start_IT+0x78>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008220:	b2db      	uxtb	r3, r3
 8008222:	e003      	b.n	800822c <HAL_TIM_IC_Start_IT+0x80>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800822a:	b2db      	uxtb	r3, r3
 800822c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800822e:	7bbb      	ldrb	r3, [r7, #14]
 8008230:	2b01      	cmp	r3, #1
 8008232:	d102      	bne.n	800823a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008234:	7b7b      	ldrb	r3, [r7, #13]
 8008236:	2b01      	cmp	r3, #1
 8008238:	d001      	beq.n	800823e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	e0c2      	b.n	80083c4 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d104      	bne.n	800824e <HAL_TIM_IC_Start_IT+0xa2>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2202      	movs	r2, #2
 8008248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800824c:	e013      	b.n	8008276 <HAL_TIM_IC_Start_IT+0xca>
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	2b04      	cmp	r3, #4
 8008252:	d104      	bne.n	800825e <HAL_TIM_IC_Start_IT+0xb2>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2202      	movs	r2, #2
 8008258:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800825c:	e00b      	b.n	8008276 <HAL_TIM_IC_Start_IT+0xca>
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	2b08      	cmp	r3, #8
 8008262:	d104      	bne.n	800826e <HAL_TIM_IC_Start_IT+0xc2>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2202      	movs	r2, #2
 8008268:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800826c:	e003      	b.n	8008276 <HAL_TIM_IC_Start_IT+0xca>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2202      	movs	r2, #2
 8008272:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d104      	bne.n	8008286 <HAL_TIM_IC_Start_IT+0xda>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2202      	movs	r2, #2
 8008280:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008284:	e013      	b.n	80082ae <HAL_TIM_IC_Start_IT+0x102>
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	2b04      	cmp	r3, #4
 800828a:	d104      	bne.n	8008296 <HAL_TIM_IC_Start_IT+0xea>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2202      	movs	r2, #2
 8008290:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008294:	e00b      	b.n	80082ae <HAL_TIM_IC_Start_IT+0x102>
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	2b08      	cmp	r3, #8
 800829a:	d104      	bne.n	80082a6 <HAL_TIM_IC_Start_IT+0xfa>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2202      	movs	r2, #2
 80082a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80082a4:	e003      	b.n	80082ae <HAL_TIM_IC_Start_IT+0x102>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2202      	movs	r2, #2
 80082aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	2b0c      	cmp	r3, #12
 80082b2:	d841      	bhi.n	8008338 <HAL_TIM_IC_Start_IT+0x18c>
 80082b4:	a201      	add	r2, pc, #4	@ (adr r2, 80082bc <HAL_TIM_IC_Start_IT+0x110>)
 80082b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ba:	bf00      	nop
 80082bc:	080082f1 	.word	0x080082f1
 80082c0:	08008339 	.word	0x08008339
 80082c4:	08008339 	.word	0x08008339
 80082c8:	08008339 	.word	0x08008339
 80082cc:	08008303 	.word	0x08008303
 80082d0:	08008339 	.word	0x08008339
 80082d4:	08008339 	.word	0x08008339
 80082d8:	08008339 	.word	0x08008339
 80082dc:	08008315 	.word	0x08008315
 80082e0:	08008339 	.word	0x08008339
 80082e4:	08008339 	.word	0x08008339
 80082e8:	08008339 	.word	0x08008339
 80082ec:	08008327 	.word	0x08008327
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	68da      	ldr	r2, [r3, #12]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f042 0202 	orr.w	r2, r2, #2
 80082fe:	60da      	str	r2, [r3, #12]
      break;
 8008300:	e01d      	b.n	800833e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	68da      	ldr	r2, [r3, #12]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f042 0204 	orr.w	r2, r2, #4
 8008310:	60da      	str	r2, [r3, #12]
      break;
 8008312:	e014      	b.n	800833e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	68da      	ldr	r2, [r3, #12]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f042 0208 	orr.w	r2, r2, #8
 8008322:	60da      	str	r2, [r3, #12]
      break;
 8008324:	e00b      	b.n	800833e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	68da      	ldr	r2, [r3, #12]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f042 0210 	orr.w	r2, r2, #16
 8008334:	60da      	str	r2, [r3, #12]
      break;
 8008336:	e002      	b.n	800833e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8008338:	2301      	movs	r3, #1
 800833a:	73fb      	strb	r3, [r7, #15]
      break;
 800833c:	bf00      	nop
  }

  if (status == HAL_OK)
 800833e:	7bfb      	ldrb	r3, [r7, #15]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d13e      	bne.n	80083c2 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2201      	movs	r2, #1
 800834a:	6839      	ldr	r1, [r7, #0]
 800834c:	4618      	mov	r0, r3
 800834e:	f000 ff8f 	bl	8009270 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a1d      	ldr	r2, [pc, #116]	@ (80083cc <HAL_TIM_IC_Start_IT+0x220>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d018      	beq.n	800838e <HAL_TIM_IC_Start_IT+0x1e2>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008364:	d013      	beq.n	800838e <HAL_TIM_IC_Start_IT+0x1e2>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a19      	ldr	r2, [pc, #100]	@ (80083d0 <HAL_TIM_IC_Start_IT+0x224>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d00e      	beq.n	800838e <HAL_TIM_IC_Start_IT+0x1e2>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a17      	ldr	r2, [pc, #92]	@ (80083d4 <HAL_TIM_IC_Start_IT+0x228>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d009      	beq.n	800838e <HAL_TIM_IC_Start_IT+0x1e2>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a16      	ldr	r2, [pc, #88]	@ (80083d8 <HAL_TIM_IC_Start_IT+0x22c>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d004      	beq.n	800838e <HAL_TIM_IC_Start_IT+0x1e2>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a14      	ldr	r2, [pc, #80]	@ (80083dc <HAL_TIM_IC_Start_IT+0x230>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d111      	bne.n	80083b2 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	f003 0307 	and.w	r3, r3, #7
 8008398:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	2b06      	cmp	r3, #6
 800839e:	d010      	beq.n	80083c2 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f042 0201 	orr.w	r2, r2, #1
 80083ae:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083b0:	e007      	b.n	80083c2 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f042 0201 	orr.w	r2, r2, #1
 80083c0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80083c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3710      	adds	r7, #16
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	40010000 	.word	0x40010000
 80083d0:	40000400 	.word	0x40000400
 80083d4:	40000800 	.word	0x40000800
 80083d8:	40000c00 	.word	0x40000c00
 80083dc:	40014000 	.word	0x40014000

080083e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	68db      	ldr	r3, [r3, #12]
 80083ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	f003 0302 	and.w	r3, r3, #2
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d020      	beq.n	8008444 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f003 0302 	and.w	r3, r3, #2
 8008408:	2b00      	cmp	r3, #0
 800840a:	d01b      	beq.n	8008444 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f06f 0202 	mvn.w	r2, #2
 8008414:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2201      	movs	r2, #1
 800841a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	699b      	ldr	r3, [r3, #24]
 8008422:	f003 0303 	and.w	r3, r3, #3
 8008426:	2b00      	cmp	r3, #0
 8008428:	d003      	beq.n	8008432 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f7fb ff1e 	bl	800426c <HAL_TIM_IC_CaptureCallback>
 8008430:	e005      	b.n	800843e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 fb2e 	bl	8008a94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 fb35 	bl	8008aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	f003 0304 	and.w	r3, r3, #4
 800844a:	2b00      	cmp	r3, #0
 800844c:	d020      	beq.n	8008490 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f003 0304 	and.w	r3, r3, #4
 8008454:	2b00      	cmp	r3, #0
 8008456:	d01b      	beq.n	8008490 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f06f 0204 	mvn.w	r2, #4
 8008460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2202      	movs	r2, #2
 8008466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	699b      	ldr	r3, [r3, #24]
 800846e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008472:	2b00      	cmp	r3, #0
 8008474:	d003      	beq.n	800847e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f7fb fef8 	bl	800426c <HAL_TIM_IC_CaptureCallback>
 800847c:	e005      	b.n	800848a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 fb08 	bl	8008a94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 fb0f 	bl	8008aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2200      	movs	r2, #0
 800848e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	f003 0308 	and.w	r3, r3, #8
 8008496:	2b00      	cmp	r3, #0
 8008498:	d020      	beq.n	80084dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f003 0308 	and.w	r3, r3, #8
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d01b      	beq.n	80084dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f06f 0208 	mvn.w	r2, #8
 80084ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2204      	movs	r2, #4
 80084b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	69db      	ldr	r3, [r3, #28]
 80084ba:	f003 0303 	and.w	r3, r3, #3
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d003      	beq.n	80084ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f7fb fed2 	bl	800426c <HAL_TIM_IC_CaptureCallback>
 80084c8:	e005      	b.n	80084d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 fae2 	bl	8008a94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 fae9 	bl	8008aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2200      	movs	r2, #0
 80084da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	f003 0310 	and.w	r3, r3, #16
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d020      	beq.n	8008528 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f003 0310 	and.w	r3, r3, #16
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d01b      	beq.n	8008528 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f06f 0210 	mvn.w	r2, #16
 80084f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2208      	movs	r2, #8
 80084fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	69db      	ldr	r3, [r3, #28]
 8008506:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800850a:	2b00      	cmp	r3, #0
 800850c:	d003      	beq.n	8008516 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f7fb feac 	bl	800426c <HAL_TIM_IC_CaptureCallback>
 8008514:	e005      	b.n	8008522 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 fabc 	bl	8008a94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 fac3 	bl	8008aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	f003 0301 	and.w	r3, r3, #1
 800852e:	2b00      	cmp	r3, #0
 8008530:	d00c      	beq.n	800854c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f003 0301 	and.w	r3, r3, #1
 8008538:	2b00      	cmp	r3, #0
 800853a:	d007      	beq.n	800854c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f06f 0201 	mvn.w	r2, #1
 8008544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f7fb fd5e 	bl	8004008 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008552:	2b00      	cmp	r3, #0
 8008554:	d00c      	beq.n	8008570 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800855c:	2b00      	cmp	r3, #0
 800855e:	d007      	beq.n	8008570 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 ff1e 	bl	80093ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008576:	2b00      	cmp	r3, #0
 8008578:	d00c      	beq.n	8008594 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008580:	2b00      	cmp	r3, #0
 8008582:	d007      	beq.n	8008594 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800858c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 fa94 	bl	8008abc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	f003 0320 	and.w	r3, r3, #32
 800859a:	2b00      	cmp	r3, #0
 800859c:	d00c      	beq.n	80085b8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f003 0320 	and.w	r3, r3, #32
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d007      	beq.n	80085b8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f06f 0220 	mvn.w	r2, #32
 80085b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 fef0 	bl	8009398 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80085b8:	bf00      	nop
 80085ba:	3710      	adds	r7, #16
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b086      	sub	sp, #24
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	60b9      	str	r1, [r7, #8]
 80085ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80085cc:	2300      	movs	r3, #0
 80085ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d101      	bne.n	80085de <HAL_TIM_IC_ConfigChannel+0x1e>
 80085da:	2302      	movs	r3, #2
 80085dc:	e088      	b.n	80086f0 <HAL_TIM_IC_ConfigChannel+0x130>
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2201      	movs	r2, #1
 80085e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d11b      	bne.n	8008624 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80085fc:	f000 fc80 	bl	8008f00 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	699a      	ldr	r2, [r3, #24]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f022 020c 	bic.w	r2, r2, #12
 800860e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	6999      	ldr	r1, [r3, #24]
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	689a      	ldr	r2, [r3, #8]
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	430a      	orrs	r2, r1
 8008620:	619a      	str	r2, [r3, #24]
 8008622:	e060      	b.n	80086e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2b04      	cmp	r3, #4
 8008628:	d11c      	bne.n	8008664 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800863a:	f000 fcf8 	bl	800902e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	699a      	ldr	r2, [r3, #24]
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800864c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	6999      	ldr	r1, [r3, #24]
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	021a      	lsls	r2, r3, #8
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	430a      	orrs	r2, r1
 8008660:	619a      	str	r2, [r3, #24]
 8008662:	e040      	b.n	80086e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2b08      	cmp	r3, #8
 8008668:	d11b      	bne.n	80086a2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800867a:	f000 fd45 	bl	8009108 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	69da      	ldr	r2, [r3, #28]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f022 020c 	bic.w	r2, r2, #12
 800868c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	69d9      	ldr	r1, [r3, #28]
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	689a      	ldr	r2, [r3, #8]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	430a      	orrs	r2, r1
 800869e:	61da      	str	r2, [r3, #28]
 80086a0:	e021      	b.n	80086e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2b0c      	cmp	r3, #12
 80086a6:	d11c      	bne.n	80086e2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80086b8:	f000 fd62 	bl	8009180 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	69da      	ldr	r2, [r3, #28]
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80086ca:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	69d9      	ldr	r1, [r3, #28]
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	021a      	lsls	r2, r3, #8
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	430a      	orrs	r2, r1
 80086de:	61da      	str	r2, [r3, #28]
 80086e0:	e001      	b.n	80086e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80086ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3718      	adds	r7, #24
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b086      	sub	sp, #24
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008704:	2300      	movs	r3, #0
 8008706:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800870e:	2b01      	cmp	r3, #1
 8008710:	d101      	bne.n	8008716 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008712:	2302      	movs	r3, #2
 8008714:	e0ae      	b.n	8008874 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2201      	movs	r2, #1
 800871a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2b0c      	cmp	r3, #12
 8008722:	f200 809f 	bhi.w	8008864 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008726:	a201      	add	r2, pc, #4	@ (adr r2, 800872c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800872c:	08008761 	.word	0x08008761
 8008730:	08008865 	.word	0x08008865
 8008734:	08008865 	.word	0x08008865
 8008738:	08008865 	.word	0x08008865
 800873c:	080087a1 	.word	0x080087a1
 8008740:	08008865 	.word	0x08008865
 8008744:	08008865 	.word	0x08008865
 8008748:	08008865 	.word	0x08008865
 800874c:	080087e3 	.word	0x080087e3
 8008750:	08008865 	.word	0x08008865
 8008754:	08008865 	.word	0x08008865
 8008758:	08008865 	.word	0x08008865
 800875c:	08008823 	.word	0x08008823
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	68b9      	ldr	r1, [r7, #8]
 8008766:	4618      	mov	r0, r3
 8008768:	f000 fa3e 	bl	8008be8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	699a      	ldr	r2, [r3, #24]
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f042 0208 	orr.w	r2, r2, #8
 800877a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	699a      	ldr	r2, [r3, #24]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f022 0204 	bic.w	r2, r2, #4
 800878a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	6999      	ldr	r1, [r3, #24]
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	691a      	ldr	r2, [r3, #16]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	430a      	orrs	r2, r1
 800879c:	619a      	str	r2, [r3, #24]
      break;
 800879e:	e064      	b.n	800886a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	68b9      	ldr	r1, [r7, #8]
 80087a6:	4618      	mov	r0, r3
 80087a8:	f000 fa84 	bl	8008cb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	699a      	ldr	r2, [r3, #24]
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80087ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	699a      	ldr	r2, [r3, #24]
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80087ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	6999      	ldr	r1, [r3, #24]
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	691b      	ldr	r3, [r3, #16]
 80087d6:	021a      	lsls	r2, r3, #8
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	430a      	orrs	r2, r1
 80087de:	619a      	str	r2, [r3, #24]
      break;
 80087e0:	e043      	b.n	800886a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	68b9      	ldr	r1, [r7, #8]
 80087e8:	4618      	mov	r0, r3
 80087ea:	f000 facf 	bl	8008d8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	69da      	ldr	r2, [r3, #28]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f042 0208 	orr.w	r2, r2, #8
 80087fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	69da      	ldr	r2, [r3, #28]
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f022 0204 	bic.w	r2, r2, #4
 800880c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	69d9      	ldr	r1, [r3, #28]
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	691a      	ldr	r2, [r3, #16]
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	430a      	orrs	r2, r1
 800881e:	61da      	str	r2, [r3, #28]
      break;
 8008820:	e023      	b.n	800886a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	68b9      	ldr	r1, [r7, #8]
 8008828:	4618      	mov	r0, r3
 800882a:	f000 fb19 	bl	8008e60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	69da      	ldr	r2, [r3, #28]
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800883c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	69da      	ldr	r2, [r3, #28]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800884c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	69d9      	ldr	r1, [r3, #28]
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	691b      	ldr	r3, [r3, #16]
 8008858:	021a      	lsls	r2, r3, #8
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	430a      	orrs	r2, r1
 8008860:	61da      	str	r2, [r3, #28]
      break;
 8008862:	e002      	b.n	800886a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008864:	2301      	movs	r3, #1
 8008866:	75fb      	strb	r3, [r7, #23]
      break;
 8008868:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2200      	movs	r2, #0
 800886e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008872:	7dfb      	ldrb	r3, [r7, #23]
}
 8008874:	4618      	mov	r0, r3
 8008876:	3718      	adds	r7, #24
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008886:	2300      	movs	r3, #0
 8008888:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008890:	2b01      	cmp	r3, #1
 8008892:	d101      	bne.n	8008898 <HAL_TIM_ConfigClockSource+0x1c>
 8008894:	2302      	movs	r3, #2
 8008896:	e0b4      	b.n	8008a02 <HAL_TIM_ConfigClockSource+0x186>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2202      	movs	r2, #2
 80088a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80088b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80088be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	68ba      	ldr	r2, [r7, #8]
 80088c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088d0:	d03e      	beq.n	8008950 <HAL_TIM_ConfigClockSource+0xd4>
 80088d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088d6:	f200 8087 	bhi.w	80089e8 <HAL_TIM_ConfigClockSource+0x16c>
 80088da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088de:	f000 8086 	beq.w	80089ee <HAL_TIM_ConfigClockSource+0x172>
 80088e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088e6:	d87f      	bhi.n	80089e8 <HAL_TIM_ConfigClockSource+0x16c>
 80088e8:	2b70      	cmp	r3, #112	@ 0x70
 80088ea:	d01a      	beq.n	8008922 <HAL_TIM_ConfigClockSource+0xa6>
 80088ec:	2b70      	cmp	r3, #112	@ 0x70
 80088ee:	d87b      	bhi.n	80089e8 <HAL_TIM_ConfigClockSource+0x16c>
 80088f0:	2b60      	cmp	r3, #96	@ 0x60
 80088f2:	d050      	beq.n	8008996 <HAL_TIM_ConfigClockSource+0x11a>
 80088f4:	2b60      	cmp	r3, #96	@ 0x60
 80088f6:	d877      	bhi.n	80089e8 <HAL_TIM_ConfigClockSource+0x16c>
 80088f8:	2b50      	cmp	r3, #80	@ 0x50
 80088fa:	d03c      	beq.n	8008976 <HAL_TIM_ConfigClockSource+0xfa>
 80088fc:	2b50      	cmp	r3, #80	@ 0x50
 80088fe:	d873      	bhi.n	80089e8 <HAL_TIM_ConfigClockSource+0x16c>
 8008900:	2b40      	cmp	r3, #64	@ 0x40
 8008902:	d058      	beq.n	80089b6 <HAL_TIM_ConfigClockSource+0x13a>
 8008904:	2b40      	cmp	r3, #64	@ 0x40
 8008906:	d86f      	bhi.n	80089e8 <HAL_TIM_ConfigClockSource+0x16c>
 8008908:	2b30      	cmp	r3, #48	@ 0x30
 800890a:	d064      	beq.n	80089d6 <HAL_TIM_ConfigClockSource+0x15a>
 800890c:	2b30      	cmp	r3, #48	@ 0x30
 800890e:	d86b      	bhi.n	80089e8 <HAL_TIM_ConfigClockSource+0x16c>
 8008910:	2b20      	cmp	r3, #32
 8008912:	d060      	beq.n	80089d6 <HAL_TIM_ConfigClockSource+0x15a>
 8008914:	2b20      	cmp	r3, #32
 8008916:	d867      	bhi.n	80089e8 <HAL_TIM_ConfigClockSource+0x16c>
 8008918:	2b00      	cmp	r3, #0
 800891a:	d05c      	beq.n	80089d6 <HAL_TIM_ConfigClockSource+0x15a>
 800891c:	2b10      	cmp	r3, #16
 800891e:	d05a      	beq.n	80089d6 <HAL_TIM_ConfigClockSource+0x15a>
 8008920:	e062      	b.n	80089e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008932:	f000 fc7d 	bl	8009230 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008944:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	68ba      	ldr	r2, [r7, #8]
 800894c:	609a      	str	r2, [r3, #8]
      break;
 800894e:	e04f      	b.n	80089f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008960:	f000 fc66 	bl	8009230 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	689a      	ldr	r2, [r3, #8]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008972:	609a      	str	r2, [r3, #8]
      break;
 8008974:	e03c      	b.n	80089f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008982:	461a      	mov	r2, r3
 8008984:	f000 fb24 	bl	8008fd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	2150      	movs	r1, #80	@ 0x50
 800898e:	4618      	mov	r0, r3
 8008990:	f000 fc33 	bl	80091fa <TIM_ITRx_SetConfig>
      break;
 8008994:	e02c      	b.n	80089f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80089a2:	461a      	mov	r2, r3
 80089a4:	f000 fb80 	bl	80090a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	2160      	movs	r1, #96	@ 0x60
 80089ae:	4618      	mov	r0, r3
 80089b0:	f000 fc23 	bl	80091fa <TIM_ITRx_SetConfig>
      break;
 80089b4:	e01c      	b.n	80089f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80089c2:	461a      	mov	r2, r3
 80089c4:	f000 fb04 	bl	8008fd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	2140      	movs	r1, #64	@ 0x40
 80089ce:	4618      	mov	r0, r3
 80089d0:	f000 fc13 	bl	80091fa <TIM_ITRx_SetConfig>
      break;
 80089d4:	e00c      	b.n	80089f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4619      	mov	r1, r3
 80089e0:	4610      	mov	r0, r2
 80089e2:	f000 fc0a 	bl	80091fa <TIM_ITRx_SetConfig>
      break;
 80089e6:	e003      	b.n	80089f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	73fb      	strb	r3, [r7, #15]
      break;
 80089ec:	e000      	b.n	80089f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80089ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2201      	movs	r2, #1
 80089f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2200      	movs	r2, #0
 80089fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
	...

08008a0c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b085      	sub	sp, #20
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008a16:	2300      	movs	r3, #0
 8008a18:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	2b0c      	cmp	r3, #12
 8008a1e:	d831      	bhi.n	8008a84 <HAL_TIM_ReadCapturedValue+0x78>
 8008a20:	a201      	add	r2, pc, #4	@ (adr r2, 8008a28 <HAL_TIM_ReadCapturedValue+0x1c>)
 8008a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a26:	bf00      	nop
 8008a28:	08008a5d 	.word	0x08008a5d
 8008a2c:	08008a85 	.word	0x08008a85
 8008a30:	08008a85 	.word	0x08008a85
 8008a34:	08008a85 	.word	0x08008a85
 8008a38:	08008a67 	.word	0x08008a67
 8008a3c:	08008a85 	.word	0x08008a85
 8008a40:	08008a85 	.word	0x08008a85
 8008a44:	08008a85 	.word	0x08008a85
 8008a48:	08008a71 	.word	0x08008a71
 8008a4c:	08008a85 	.word	0x08008a85
 8008a50:	08008a85 	.word	0x08008a85
 8008a54:	08008a85 	.word	0x08008a85
 8008a58:	08008a7b 	.word	0x08008a7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a62:	60fb      	str	r3, [r7, #12]

      break;
 8008a64:	e00f      	b.n	8008a86 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a6c:	60fb      	str	r3, [r7, #12]

      break;
 8008a6e:	e00a      	b.n	8008a86 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a76:	60fb      	str	r3, [r7, #12]

      break;
 8008a78:	e005      	b.n	8008a86 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a80:	60fb      	str	r3, [r7, #12]

      break;
 8008a82:	e000      	b.n	8008a86 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008a84:	bf00      	nop
  }

  return tmpreg;
 8008a86:	68fb      	ldr	r3, [r7, #12]
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3714      	adds	r7, #20
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008a9c:	bf00      	nop
 8008a9e:	370c      	adds	r7, #12
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr

08008aa8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008ab0:	bf00      	nop
 8008ab2:	370c      	adds	r7, #12
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr

08008abc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b083      	sub	sp, #12
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008ac4:	bf00      	nop
 8008ac6:	370c      	adds	r7, #12
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr

08008ad0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b085      	sub	sp, #20
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	4a3a      	ldr	r2, [pc, #232]	@ (8008bcc <TIM_Base_SetConfig+0xfc>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d00f      	beq.n	8008b08 <TIM_Base_SetConfig+0x38>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008aee:	d00b      	beq.n	8008b08 <TIM_Base_SetConfig+0x38>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	4a37      	ldr	r2, [pc, #220]	@ (8008bd0 <TIM_Base_SetConfig+0x100>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d007      	beq.n	8008b08 <TIM_Base_SetConfig+0x38>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	4a36      	ldr	r2, [pc, #216]	@ (8008bd4 <TIM_Base_SetConfig+0x104>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d003      	beq.n	8008b08 <TIM_Base_SetConfig+0x38>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	4a35      	ldr	r2, [pc, #212]	@ (8008bd8 <TIM_Base_SetConfig+0x108>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d108      	bne.n	8008b1a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	68fa      	ldr	r2, [r7, #12]
 8008b16:	4313      	orrs	r3, r2
 8008b18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	4a2b      	ldr	r2, [pc, #172]	@ (8008bcc <TIM_Base_SetConfig+0xfc>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d01b      	beq.n	8008b5a <TIM_Base_SetConfig+0x8a>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b28:	d017      	beq.n	8008b5a <TIM_Base_SetConfig+0x8a>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	4a28      	ldr	r2, [pc, #160]	@ (8008bd0 <TIM_Base_SetConfig+0x100>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d013      	beq.n	8008b5a <TIM_Base_SetConfig+0x8a>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	4a27      	ldr	r2, [pc, #156]	@ (8008bd4 <TIM_Base_SetConfig+0x104>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d00f      	beq.n	8008b5a <TIM_Base_SetConfig+0x8a>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	4a26      	ldr	r2, [pc, #152]	@ (8008bd8 <TIM_Base_SetConfig+0x108>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d00b      	beq.n	8008b5a <TIM_Base_SetConfig+0x8a>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	4a25      	ldr	r2, [pc, #148]	@ (8008bdc <TIM_Base_SetConfig+0x10c>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d007      	beq.n	8008b5a <TIM_Base_SetConfig+0x8a>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	4a24      	ldr	r2, [pc, #144]	@ (8008be0 <TIM_Base_SetConfig+0x110>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d003      	beq.n	8008b5a <TIM_Base_SetConfig+0x8a>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	4a23      	ldr	r2, [pc, #140]	@ (8008be4 <TIM_Base_SetConfig+0x114>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d108      	bne.n	8008b6c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	68fa      	ldr	r2, [r7, #12]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	695b      	ldr	r3, [r3, #20]
 8008b76:	4313      	orrs	r3, r2
 8008b78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	689a      	ldr	r2, [r3, #8]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	4a0e      	ldr	r2, [pc, #56]	@ (8008bcc <TIM_Base_SetConfig+0xfc>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d103      	bne.n	8008ba0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	691a      	ldr	r2, [r3, #16]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	691b      	ldr	r3, [r3, #16]
 8008baa:	f003 0301 	and.w	r3, r3, #1
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d105      	bne.n	8008bbe <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	691b      	ldr	r3, [r3, #16]
 8008bb6:	f023 0201 	bic.w	r2, r3, #1
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	611a      	str	r2, [r3, #16]
  }
}
 8008bbe:	bf00      	nop
 8008bc0:	3714      	adds	r7, #20
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr
 8008bca:	bf00      	nop
 8008bcc:	40010000 	.word	0x40010000
 8008bd0:	40000400 	.word	0x40000400
 8008bd4:	40000800 	.word	0x40000800
 8008bd8:	40000c00 	.word	0x40000c00
 8008bdc:	40014000 	.word	0x40014000
 8008be0:	40014400 	.word	0x40014400
 8008be4:	40014800 	.word	0x40014800

08008be8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b087      	sub	sp, #28
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6a1b      	ldr	r3, [r3, #32]
 8008bf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6a1b      	ldr	r3, [r3, #32]
 8008bfc:	f023 0201 	bic.w	r2, r3, #1
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	699b      	ldr	r3, [r3, #24]
 8008c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f023 0303 	bic.w	r3, r3, #3
 8008c1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	68fa      	ldr	r2, [r7, #12]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	f023 0302 	bic.w	r3, r3, #2
 8008c30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	689b      	ldr	r3, [r3, #8]
 8008c36:	697a      	ldr	r2, [r7, #20]
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	4a1c      	ldr	r2, [pc, #112]	@ (8008cb0 <TIM_OC1_SetConfig+0xc8>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d10c      	bne.n	8008c5e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	f023 0308 	bic.w	r3, r3, #8
 8008c4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	68db      	ldr	r3, [r3, #12]
 8008c50:	697a      	ldr	r2, [r7, #20]
 8008c52:	4313      	orrs	r3, r2
 8008c54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	f023 0304 	bic.w	r3, r3, #4
 8008c5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4a13      	ldr	r2, [pc, #76]	@ (8008cb0 <TIM_OC1_SetConfig+0xc8>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d111      	bne.n	8008c8a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008c6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008c74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	695b      	ldr	r3, [r3, #20]
 8008c7a:	693a      	ldr	r2, [r7, #16]
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	699b      	ldr	r3, [r3, #24]
 8008c84:	693a      	ldr	r2, [r7, #16]
 8008c86:	4313      	orrs	r3, r2
 8008c88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	693a      	ldr	r2, [r7, #16]
 8008c8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	68fa      	ldr	r2, [r7, #12]
 8008c94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	685a      	ldr	r2, [r3, #4]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	697a      	ldr	r2, [r7, #20]
 8008ca2:	621a      	str	r2, [r3, #32]
}
 8008ca4:	bf00      	nop
 8008ca6:	371c      	adds	r7, #28
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr
 8008cb0:	40010000 	.word	0x40010000

08008cb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b087      	sub	sp, #28
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6a1b      	ldr	r3, [r3, #32]
 8008cc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6a1b      	ldr	r3, [r3, #32]
 8008cc8:	f023 0210 	bic.w	r2, r3, #16
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	699b      	ldr	r3, [r3, #24]
 8008cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008cea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	021b      	lsls	r3, r3, #8
 8008cf2:	68fa      	ldr	r2, [r7, #12]
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	f023 0320 	bic.w	r3, r3, #32
 8008cfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	011b      	lsls	r3, r3, #4
 8008d06:	697a      	ldr	r2, [r7, #20]
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	4a1e      	ldr	r2, [pc, #120]	@ (8008d88 <TIM_OC2_SetConfig+0xd4>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d10d      	bne.n	8008d30 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	011b      	lsls	r3, r3, #4
 8008d22:	697a      	ldr	r2, [r7, #20]
 8008d24:	4313      	orrs	r3, r2
 8008d26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	4a15      	ldr	r2, [pc, #84]	@ (8008d88 <TIM_OC2_SetConfig+0xd4>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d113      	bne.n	8008d60 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008d3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008d46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	695b      	ldr	r3, [r3, #20]
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	693a      	ldr	r2, [r7, #16]
 8008d50:	4313      	orrs	r3, r2
 8008d52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	699b      	ldr	r3, [r3, #24]
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	693a      	ldr	r2, [r7, #16]
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	693a      	ldr	r2, [r7, #16]
 8008d64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	68fa      	ldr	r2, [r7, #12]
 8008d6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	685a      	ldr	r2, [r3, #4]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	697a      	ldr	r2, [r7, #20]
 8008d78:	621a      	str	r2, [r3, #32]
}
 8008d7a:	bf00      	nop
 8008d7c:	371c      	adds	r7, #28
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr
 8008d86:	bf00      	nop
 8008d88:	40010000 	.word	0x40010000

08008d8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b087      	sub	sp, #28
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6a1b      	ldr	r3, [r3, #32]
 8008d9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6a1b      	ldr	r3, [r3, #32]
 8008da0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	69db      	ldr	r3, [r3, #28]
 8008db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f023 0303 	bic.w	r3, r3, #3
 8008dc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	68fa      	ldr	r2, [r7, #12]
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008dd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	689b      	ldr	r3, [r3, #8]
 8008dda:	021b      	lsls	r3, r3, #8
 8008ddc:	697a      	ldr	r2, [r7, #20]
 8008dde:	4313      	orrs	r3, r2
 8008de0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4a1d      	ldr	r2, [pc, #116]	@ (8008e5c <TIM_OC3_SetConfig+0xd0>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d10d      	bne.n	8008e06 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008df0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	68db      	ldr	r3, [r3, #12]
 8008df6:	021b      	lsls	r3, r3, #8
 8008df8:	697a      	ldr	r2, [r7, #20]
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008e04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	4a14      	ldr	r2, [pc, #80]	@ (8008e5c <TIM_OC3_SetConfig+0xd0>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d113      	bne.n	8008e36 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008e14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008e1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	695b      	ldr	r3, [r3, #20]
 8008e22:	011b      	lsls	r3, r3, #4
 8008e24:	693a      	ldr	r2, [r7, #16]
 8008e26:	4313      	orrs	r3, r2
 8008e28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	699b      	ldr	r3, [r3, #24]
 8008e2e:	011b      	lsls	r3, r3, #4
 8008e30:	693a      	ldr	r2, [r7, #16]
 8008e32:	4313      	orrs	r3, r2
 8008e34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	693a      	ldr	r2, [r7, #16]
 8008e3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	68fa      	ldr	r2, [r7, #12]
 8008e40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	685a      	ldr	r2, [r3, #4]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	697a      	ldr	r2, [r7, #20]
 8008e4e:	621a      	str	r2, [r3, #32]
}
 8008e50:	bf00      	nop
 8008e52:	371c      	adds	r7, #28
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr
 8008e5c:	40010000 	.word	0x40010000

08008e60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b087      	sub	sp, #28
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6a1b      	ldr	r3, [r3, #32]
 8008e6e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6a1b      	ldr	r3, [r3, #32]
 8008e74:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	69db      	ldr	r3, [r3, #28]
 8008e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	021b      	lsls	r3, r3, #8
 8008e9e:	68fa      	ldr	r2, [r7, #12]
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008eaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	689b      	ldr	r3, [r3, #8]
 8008eb0:	031b      	lsls	r3, r3, #12
 8008eb2:	693a      	ldr	r2, [r7, #16]
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	4a10      	ldr	r2, [pc, #64]	@ (8008efc <TIM_OC4_SetConfig+0x9c>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d109      	bne.n	8008ed4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008ec6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	695b      	ldr	r3, [r3, #20]
 8008ecc:	019b      	lsls	r3, r3, #6
 8008ece:	697a      	ldr	r2, [r7, #20]
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	697a      	ldr	r2, [r7, #20]
 8008ed8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	68fa      	ldr	r2, [r7, #12]
 8008ede:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	685a      	ldr	r2, [r3, #4]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	693a      	ldr	r2, [r7, #16]
 8008eec:	621a      	str	r2, [r3, #32]
}
 8008eee:	bf00      	nop
 8008ef0:	371c      	adds	r7, #28
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr
 8008efa:	bf00      	nop
 8008efc:	40010000 	.word	0x40010000

08008f00 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b087      	sub	sp, #28
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	60b9      	str	r1, [r7, #8]
 8008f0a:	607a      	str	r2, [r7, #4]
 8008f0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	6a1b      	ldr	r3, [r3, #32]
 8008f12:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	6a1b      	ldr	r3, [r3, #32]
 8008f18:	f023 0201 	bic.w	r2, r3, #1
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	699b      	ldr	r3, [r3, #24]
 8008f24:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	4a24      	ldr	r2, [pc, #144]	@ (8008fbc <TIM_TI1_SetConfig+0xbc>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d013      	beq.n	8008f56 <TIM_TI1_SetConfig+0x56>
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f34:	d00f      	beq.n	8008f56 <TIM_TI1_SetConfig+0x56>
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	4a21      	ldr	r2, [pc, #132]	@ (8008fc0 <TIM_TI1_SetConfig+0xc0>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d00b      	beq.n	8008f56 <TIM_TI1_SetConfig+0x56>
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	4a20      	ldr	r2, [pc, #128]	@ (8008fc4 <TIM_TI1_SetConfig+0xc4>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d007      	beq.n	8008f56 <TIM_TI1_SetConfig+0x56>
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	4a1f      	ldr	r2, [pc, #124]	@ (8008fc8 <TIM_TI1_SetConfig+0xc8>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d003      	beq.n	8008f56 <TIM_TI1_SetConfig+0x56>
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	4a1e      	ldr	r2, [pc, #120]	@ (8008fcc <TIM_TI1_SetConfig+0xcc>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d101      	bne.n	8008f5a <TIM_TI1_SetConfig+0x5a>
 8008f56:	2301      	movs	r3, #1
 8008f58:	e000      	b.n	8008f5c <TIM_TI1_SetConfig+0x5c>
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d008      	beq.n	8008f72 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	f023 0303 	bic.w	r3, r3, #3
 8008f66:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008f68:	697a      	ldr	r2, [r7, #20]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	617b      	str	r3, [r7, #20]
 8008f70:	e003      	b.n	8008f7a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	f043 0301 	orr.w	r3, r3, #1
 8008f78:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008f80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	011b      	lsls	r3, r3, #4
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	697a      	ldr	r2, [r7, #20]
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	f023 030a 	bic.w	r3, r3, #10
 8008f94:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	f003 030a 	and.w	r3, r3, #10
 8008f9c:	693a      	ldr	r2, [r7, #16]
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	697a      	ldr	r2, [r7, #20]
 8008fa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	693a      	ldr	r2, [r7, #16]
 8008fac:	621a      	str	r2, [r3, #32]
}
 8008fae:	bf00      	nop
 8008fb0:	371c      	adds	r7, #28
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr
 8008fba:	bf00      	nop
 8008fbc:	40010000 	.word	0x40010000
 8008fc0:	40000400 	.word	0x40000400
 8008fc4:	40000800 	.word	0x40000800
 8008fc8:	40000c00 	.word	0x40000c00
 8008fcc:	40014000 	.word	0x40014000

08008fd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b087      	sub	sp, #28
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	60f8      	str	r0, [r7, #12]
 8008fd8:	60b9      	str	r1, [r7, #8]
 8008fda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	6a1b      	ldr	r3, [r3, #32]
 8008fe0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	6a1b      	ldr	r3, [r3, #32]
 8008fe6:	f023 0201 	bic.w	r2, r3, #1
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	699b      	ldr	r3, [r3, #24]
 8008ff2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008ffa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	011b      	lsls	r3, r3, #4
 8009000:	693a      	ldr	r2, [r7, #16]
 8009002:	4313      	orrs	r3, r2
 8009004:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	f023 030a 	bic.w	r3, r3, #10
 800900c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800900e:	697a      	ldr	r2, [r7, #20]
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	4313      	orrs	r3, r2
 8009014:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	693a      	ldr	r2, [r7, #16]
 800901a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	697a      	ldr	r2, [r7, #20]
 8009020:	621a      	str	r2, [r3, #32]
}
 8009022:	bf00      	nop
 8009024:	371c      	adds	r7, #28
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr

0800902e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800902e:	b480      	push	{r7}
 8009030:	b087      	sub	sp, #28
 8009032:	af00      	add	r7, sp, #0
 8009034:	60f8      	str	r0, [r7, #12]
 8009036:	60b9      	str	r1, [r7, #8]
 8009038:	607a      	str	r2, [r7, #4]
 800903a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	6a1b      	ldr	r3, [r3, #32]
 8009040:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	6a1b      	ldr	r3, [r3, #32]
 8009046:	f023 0210 	bic.w	r2, r3, #16
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	699b      	ldr	r3, [r3, #24]
 8009052:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800905a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	021b      	lsls	r3, r3, #8
 8009060:	693a      	ldr	r2, [r7, #16]
 8009062:	4313      	orrs	r3, r2
 8009064:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800906c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	031b      	lsls	r3, r3, #12
 8009072:	b29b      	uxth	r3, r3
 8009074:	693a      	ldr	r2, [r7, #16]
 8009076:	4313      	orrs	r3, r2
 8009078:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009080:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	011b      	lsls	r3, r3, #4
 8009086:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800908a:	697a      	ldr	r2, [r7, #20]
 800908c:	4313      	orrs	r3, r2
 800908e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	693a      	ldr	r2, [r7, #16]
 8009094:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	697a      	ldr	r2, [r7, #20]
 800909a:	621a      	str	r2, [r3, #32]
}
 800909c:	bf00      	nop
 800909e:	371c      	adds	r7, #28
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr

080090a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b087      	sub	sp, #28
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	60f8      	str	r0, [r7, #12]
 80090b0:	60b9      	str	r1, [r7, #8]
 80090b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	6a1b      	ldr	r3, [r3, #32]
 80090b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	6a1b      	ldr	r3, [r3, #32]
 80090be:	f023 0210 	bic.w	r2, r3, #16
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	699b      	ldr	r3, [r3, #24]
 80090ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80090d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	031b      	lsls	r3, r3, #12
 80090d8:	693a      	ldr	r2, [r7, #16]
 80090da:	4313      	orrs	r3, r2
 80090dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80090e4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	011b      	lsls	r3, r3, #4
 80090ea:	697a      	ldr	r2, [r7, #20]
 80090ec:	4313      	orrs	r3, r2
 80090ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	693a      	ldr	r2, [r7, #16]
 80090f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	697a      	ldr	r2, [r7, #20]
 80090fa:	621a      	str	r2, [r3, #32]
}
 80090fc:	bf00      	nop
 80090fe:	371c      	adds	r7, #28
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr

08009108 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009108:	b480      	push	{r7}
 800910a:	b087      	sub	sp, #28
 800910c:	af00      	add	r7, sp, #0
 800910e:	60f8      	str	r0, [r7, #12]
 8009110:	60b9      	str	r1, [r7, #8]
 8009112:	607a      	str	r2, [r7, #4]
 8009114:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	6a1b      	ldr	r3, [r3, #32]
 800911a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	6a1b      	ldr	r3, [r3, #32]
 8009120:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	69db      	ldr	r3, [r3, #28]
 800912c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	f023 0303 	bic.w	r3, r3, #3
 8009134:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8009136:	693a      	ldr	r2, [r7, #16]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	4313      	orrs	r3, r2
 800913c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009144:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	011b      	lsls	r3, r3, #4
 800914a:	b2db      	uxtb	r3, r3
 800914c:	693a      	ldr	r2, [r7, #16]
 800914e:	4313      	orrs	r3, r2
 8009150:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8009158:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	021b      	lsls	r3, r3, #8
 800915e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8009162:	697a      	ldr	r2, [r7, #20]
 8009164:	4313      	orrs	r3, r2
 8009166:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	693a      	ldr	r2, [r7, #16]
 800916c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	697a      	ldr	r2, [r7, #20]
 8009172:	621a      	str	r2, [r3, #32]
}
 8009174:	bf00      	nop
 8009176:	371c      	adds	r7, #28
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr

08009180 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009180:	b480      	push	{r7}
 8009182:	b087      	sub	sp, #28
 8009184:	af00      	add	r7, sp, #0
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	607a      	str	r2, [r7, #4]
 800918c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	6a1b      	ldr	r3, [r3, #32]
 8009192:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	6a1b      	ldr	r3, [r3, #32]
 8009198:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	69db      	ldr	r3, [r3, #28]
 80091a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80091ac:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	021b      	lsls	r3, r3, #8
 80091b2:	693a      	ldr	r2, [r7, #16]
 80091b4:	4313      	orrs	r3, r2
 80091b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80091be:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	031b      	lsls	r3, r3, #12
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	693a      	ldr	r2, [r7, #16]
 80091c8:	4313      	orrs	r3, r2
 80091ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80091d2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	031b      	lsls	r3, r3, #12
 80091d8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80091dc:	697a      	ldr	r2, [r7, #20]
 80091de:	4313      	orrs	r3, r2
 80091e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	693a      	ldr	r2, [r7, #16]
 80091e6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	697a      	ldr	r2, [r7, #20]
 80091ec:	621a      	str	r2, [r3, #32]
}
 80091ee:	bf00      	nop
 80091f0:	371c      	adds	r7, #28
 80091f2:	46bd      	mov	sp, r7
 80091f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f8:	4770      	bx	lr

080091fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80091fa:	b480      	push	{r7}
 80091fc:	b085      	sub	sp, #20
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
 8009202:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009210:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009212:	683a      	ldr	r2, [r7, #0]
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	4313      	orrs	r3, r2
 8009218:	f043 0307 	orr.w	r3, r3, #7
 800921c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	68fa      	ldr	r2, [r7, #12]
 8009222:	609a      	str	r2, [r3, #8]
}
 8009224:	bf00      	nop
 8009226:	3714      	adds	r7, #20
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr

08009230 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009230:	b480      	push	{r7}
 8009232:	b087      	sub	sp, #28
 8009234:	af00      	add	r7, sp, #0
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	607a      	str	r2, [r7, #4]
 800923c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	689b      	ldr	r3, [r3, #8]
 8009242:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800924a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	021a      	lsls	r2, r3, #8
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	431a      	orrs	r2, r3
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	4313      	orrs	r3, r2
 8009258:	697a      	ldr	r2, [r7, #20]
 800925a:	4313      	orrs	r3, r2
 800925c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	697a      	ldr	r2, [r7, #20]
 8009262:	609a      	str	r2, [r3, #8]
}
 8009264:	bf00      	nop
 8009266:	371c      	adds	r7, #28
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr

08009270 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009270:	b480      	push	{r7}
 8009272:	b087      	sub	sp, #28
 8009274:	af00      	add	r7, sp, #0
 8009276:	60f8      	str	r0, [r7, #12]
 8009278:	60b9      	str	r1, [r7, #8]
 800927a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	f003 031f 	and.w	r3, r3, #31
 8009282:	2201      	movs	r2, #1
 8009284:	fa02 f303 	lsl.w	r3, r2, r3
 8009288:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	6a1a      	ldr	r2, [r3, #32]
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	43db      	mvns	r3, r3
 8009292:	401a      	ands	r2, r3
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	6a1a      	ldr	r2, [r3, #32]
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	f003 031f 	and.w	r3, r3, #31
 80092a2:	6879      	ldr	r1, [r7, #4]
 80092a4:	fa01 f303 	lsl.w	r3, r1, r3
 80092a8:	431a      	orrs	r2, r3
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	621a      	str	r2, [r3, #32]
}
 80092ae:	bf00      	nop
 80092b0:	371c      	adds	r7, #28
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr
	...

080092bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80092bc:	b480      	push	{r7}
 80092be:	b085      	sub	sp, #20
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d101      	bne.n	80092d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80092d0:	2302      	movs	r3, #2
 80092d2:	e050      	b.n	8009376 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2201      	movs	r2, #1
 80092d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2202      	movs	r2, #2
 80092e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	68fa      	ldr	r2, [r7, #12]
 8009302:	4313      	orrs	r3, r2
 8009304:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	68fa      	ldr	r2, [r7, #12]
 800930c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4a1c      	ldr	r2, [pc, #112]	@ (8009384 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d018      	beq.n	800934a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009320:	d013      	beq.n	800934a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a18      	ldr	r2, [pc, #96]	@ (8009388 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d00e      	beq.n	800934a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a16      	ldr	r2, [pc, #88]	@ (800938c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d009      	beq.n	800934a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a15      	ldr	r2, [pc, #84]	@ (8009390 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d004      	beq.n	800934a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a13      	ldr	r2, [pc, #76]	@ (8009394 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d10c      	bne.n	8009364 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009350:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	68ba      	ldr	r2, [r7, #8]
 8009358:	4313      	orrs	r3, r2
 800935a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	68ba      	ldr	r2, [r7, #8]
 8009362:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2201      	movs	r2, #1
 8009368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009374:	2300      	movs	r3, #0
}
 8009376:	4618      	mov	r0, r3
 8009378:	3714      	adds	r7, #20
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr
 8009382:	bf00      	nop
 8009384:	40010000 	.word	0x40010000
 8009388:	40000400 	.word	0x40000400
 800938c:	40000800 	.word	0x40000800
 8009390:	40000c00 	.word	0x40000c00
 8009394:	40014000 	.word	0x40014000

08009398 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009398:	b480      	push	{r7}
 800939a:	b083      	sub	sp, #12
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80093a0:	bf00      	nop
 80093a2:	370c      	adds	r7, #12
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr

080093ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b083      	sub	sp, #12
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80093b4:	bf00      	nop
 80093b6:	370c      	adds	r7, #12
 80093b8:	46bd      	mov	sp, r7
 80093ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093be:	4770      	bx	lr

080093c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d101      	bne.n	80093d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80093ce:	2301      	movs	r3, #1
 80093d0:	e042      	b.n	8009458 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d106      	bne.n	80093ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2200      	movs	r2, #0
 80093e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f7fb fc10 	bl	8004c0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2224      	movs	r2, #36	@ 0x24
 80093f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	68da      	ldr	r2, [r3, #12]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009402:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 fb83 	bl	8009b10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	691a      	ldr	r2, [r3, #16]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009418:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	695a      	ldr	r2, [r3, #20]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009428:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	68da      	ldr	r2, [r3, #12]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009438:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2200      	movs	r2, #0
 800943e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2220      	movs	r2, #32
 8009444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2220      	movs	r2, #32
 800944c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009456:	2300      	movs	r3, #0
}
 8009458:	4618      	mov	r0, r3
 800945a:	3708      	adds	r7, #8
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}

08009460 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b08a      	sub	sp, #40	@ 0x28
 8009464:	af02      	add	r7, sp, #8
 8009466:	60f8      	str	r0, [r7, #12]
 8009468:	60b9      	str	r1, [r7, #8]
 800946a:	603b      	str	r3, [r7, #0]
 800946c:	4613      	mov	r3, r2
 800946e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009470:	2300      	movs	r3, #0
 8009472:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800947a:	b2db      	uxtb	r3, r3
 800947c:	2b20      	cmp	r3, #32
 800947e:	d175      	bne.n	800956c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d002      	beq.n	800948c <HAL_UART_Transmit+0x2c>
 8009486:	88fb      	ldrh	r3, [r7, #6]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d101      	bne.n	8009490 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800948c:	2301      	movs	r3, #1
 800948e:	e06e      	b.n	800956e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2200      	movs	r2, #0
 8009494:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2221      	movs	r2, #33	@ 0x21
 800949a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800949e:	f7fb fc91 	bl	8004dc4 <HAL_GetTick>
 80094a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	88fa      	ldrh	r2, [r7, #6]
 80094a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	88fa      	ldrh	r2, [r7, #6]
 80094ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094b8:	d108      	bne.n	80094cc <HAL_UART_Transmit+0x6c>
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	691b      	ldr	r3, [r3, #16]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d104      	bne.n	80094cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80094c2:	2300      	movs	r3, #0
 80094c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	61bb      	str	r3, [r7, #24]
 80094ca:	e003      	b.n	80094d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80094d0:	2300      	movs	r3, #0
 80094d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80094d4:	e02e      	b.n	8009534 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	9300      	str	r3, [sp, #0]
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	2200      	movs	r2, #0
 80094de:	2180      	movs	r1, #128	@ 0x80
 80094e0:	68f8      	ldr	r0, [r7, #12]
 80094e2:	f000 f995 	bl	8009810 <UART_WaitOnFlagUntilTimeout>
 80094e6:	4603      	mov	r3, r0
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d005      	beq.n	80094f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	2220      	movs	r2, #32
 80094f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80094f4:	2303      	movs	r3, #3
 80094f6:	e03a      	b.n	800956e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80094f8:	69fb      	ldr	r3, [r7, #28]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d10b      	bne.n	8009516 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80094fe:	69bb      	ldr	r3, [r7, #24]
 8009500:	881b      	ldrh	r3, [r3, #0]
 8009502:	461a      	mov	r2, r3
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800950c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800950e:	69bb      	ldr	r3, [r7, #24]
 8009510:	3302      	adds	r3, #2
 8009512:	61bb      	str	r3, [r7, #24]
 8009514:	e007      	b.n	8009526 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009516:	69fb      	ldr	r3, [r7, #28]
 8009518:	781a      	ldrb	r2, [r3, #0]
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009520:	69fb      	ldr	r3, [r7, #28]
 8009522:	3301      	adds	r3, #1
 8009524:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800952a:	b29b      	uxth	r3, r3
 800952c:	3b01      	subs	r3, #1
 800952e:	b29a      	uxth	r2, r3
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009538:	b29b      	uxth	r3, r3
 800953a:	2b00      	cmp	r3, #0
 800953c:	d1cb      	bne.n	80094d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	9300      	str	r3, [sp, #0]
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	2200      	movs	r2, #0
 8009546:	2140      	movs	r1, #64	@ 0x40
 8009548:	68f8      	ldr	r0, [r7, #12]
 800954a:	f000 f961 	bl	8009810 <UART_WaitOnFlagUntilTimeout>
 800954e:	4603      	mov	r3, r0
 8009550:	2b00      	cmp	r3, #0
 8009552:	d005      	beq.n	8009560 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2220      	movs	r2, #32
 8009558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800955c:	2303      	movs	r3, #3
 800955e:	e006      	b.n	800956e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2220      	movs	r2, #32
 8009564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009568:	2300      	movs	r3, #0
 800956a:	e000      	b.n	800956e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800956c:	2302      	movs	r3, #2
  }
}
 800956e:	4618      	mov	r0, r3
 8009570:	3720      	adds	r7, #32
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}

08009576 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009576:	b580      	push	{r7, lr}
 8009578:	b084      	sub	sp, #16
 800957a:	af00      	add	r7, sp, #0
 800957c:	60f8      	str	r0, [r7, #12]
 800957e:	60b9      	str	r1, [r7, #8]
 8009580:	4613      	mov	r3, r2
 8009582:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800958a:	b2db      	uxtb	r3, r3
 800958c:	2b20      	cmp	r3, #32
 800958e:	d112      	bne.n	80095b6 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d002      	beq.n	800959c <HAL_UART_Receive_DMA+0x26>
 8009596:	88fb      	ldrh	r3, [r7, #6]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d101      	bne.n	80095a0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800959c:	2301      	movs	r3, #1
 800959e:	e00b      	b.n	80095b8 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2200      	movs	r2, #0
 80095a4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80095a6:	88fb      	ldrh	r3, [r7, #6]
 80095a8:	461a      	mov	r2, r3
 80095aa:	68b9      	ldr	r1, [r7, #8]
 80095ac:	68f8      	ldr	r0, [r7, #12]
 80095ae:	f000 f989 	bl	80098c4 <UART_Start_Receive_DMA>
 80095b2:	4603      	mov	r3, r0
 80095b4:	e000      	b.n	80095b8 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80095b6:	2302      	movs	r3, #2
  }
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3710      	adds	r7, #16
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80095c8:	bf00      	nop
 80095ca:	370c      	adds	r7, #12
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80095dc:	bf00      	nop
 80095de:	370c      	adds	r7, #12
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr

080095e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80095f0:	bf00      	nop
 80095f2:	370c      	adds	r7, #12
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b083      	sub	sp, #12
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	460b      	mov	r3, r1
 8009606:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009608:	bf00      	nop
 800960a:	370c      	adds	r7, #12
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr

08009614 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b09c      	sub	sp, #112	@ 0x70
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009620:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800962c:	2b00      	cmp	r3, #0
 800962e:	d172      	bne.n	8009716 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009630:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009632:	2200      	movs	r2, #0
 8009634:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009636:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	330c      	adds	r3, #12
 800963c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800963e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009640:	e853 3f00 	ldrex	r3, [r3]
 8009644:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009646:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009648:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800964c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800964e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	330c      	adds	r3, #12
 8009654:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009656:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009658:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800965a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800965c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800965e:	e841 2300 	strex	r3, r2, [r1]
 8009662:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009664:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009666:	2b00      	cmp	r3, #0
 8009668:	d1e5      	bne.n	8009636 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800966a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	3314      	adds	r3, #20
 8009670:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009674:	e853 3f00 	ldrex	r3, [r3]
 8009678:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800967a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800967c:	f023 0301 	bic.w	r3, r3, #1
 8009680:	667b      	str	r3, [r7, #100]	@ 0x64
 8009682:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	3314      	adds	r3, #20
 8009688:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800968a:	647a      	str	r2, [r7, #68]	@ 0x44
 800968c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800968e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009690:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009692:	e841 2300 	strex	r3, r2, [r1]
 8009696:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009698:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800969a:	2b00      	cmp	r3, #0
 800969c:	d1e5      	bne.n	800966a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800969e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	3314      	adds	r3, #20
 80096a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a8:	e853 3f00 	ldrex	r3, [r3]
 80096ac:	623b      	str	r3, [r7, #32]
   return(result);
 80096ae:	6a3b      	ldr	r3, [r7, #32]
 80096b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80096b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80096b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	3314      	adds	r3, #20
 80096bc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80096be:	633a      	str	r2, [r7, #48]	@ 0x30
 80096c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80096c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096c6:	e841 2300 	strex	r3, r2, [r1]
 80096ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80096cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d1e5      	bne.n	800969e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80096d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096d4:	2220      	movs	r2, #32
 80096d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096de:	2b01      	cmp	r3, #1
 80096e0:	d119      	bne.n	8009716 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	330c      	adds	r3, #12
 80096e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	e853 3f00 	ldrex	r3, [r3]
 80096f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f023 0310 	bic.w	r3, r3, #16
 80096f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80096fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	330c      	adds	r3, #12
 8009700:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009702:	61fa      	str	r2, [r7, #28]
 8009704:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009706:	69b9      	ldr	r1, [r7, #24]
 8009708:	69fa      	ldr	r2, [r7, #28]
 800970a:	e841 2300 	strex	r3, r2, [r1]
 800970e:	617b      	str	r3, [r7, #20]
   return(result);
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d1e5      	bne.n	80096e2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009716:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009718:	2200      	movs	r2, #0
 800971a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800971c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800971e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009720:	2b01      	cmp	r3, #1
 8009722:	d106      	bne.n	8009732 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009724:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009726:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009728:	4619      	mov	r1, r3
 800972a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800972c:	f7ff ff66 	bl	80095fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009730:	e002      	b.n	8009738 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009732:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009734:	f7ff ff44 	bl	80095c0 <HAL_UART_RxCpltCallback>
}
 8009738:	bf00      	nop
 800973a:	3770      	adds	r7, #112	@ 0x70
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800974c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2201      	movs	r2, #1
 8009752:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009758:	2b01      	cmp	r3, #1
 800975a:	d108      	bne.n	800976e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009760:	085b      	lsrs	r3, r3, #1
 8009762:	b29b      	uxth	r3, r3
 8009764:	4619      	mov	r1, r3
 8009766:	68f8      	ldr	r0, [r7, #12]
 8009768:	f7ff ff48 	bl	80095fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800976c:	e002      	b.n	8009774 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800976e:	68f8      	ldr	r0, [r7, #12]
 8009770:	f7ff ff30 	bl	80095d4 <HAL_UART_RxHalfCpltCallback>
}
 8009774:	bf00      	nop
 8009776:	3710      	adds	r7, #16
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b084      	sub	sp, #16
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009784:	2300      	movs	r3, #0
 8009786:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800978c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	695b      	ldr	r3, [r3, #20]
 8009794:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009798:	2b80      	cmp	r3, #128	@ 0x80
 800979a:	bf0c      	ite	eq
 800979c:	2301      	moveq	r3, #1
 800979e:	2300      	movne	r3, #0
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	2b21      	cmp	r3, #33	@ 0x21
 80097ae:	d108      	bne.n	80097c2 <UART_DMAError+0x46>
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d005      	beq.n	80097c2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	2200      	movs	r2, #0
 80097ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80097bc:	68b8      	ldr	r0, [r7, #8]
 80097be:	f000 f91b 	bl	80099f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	695b      	ldr	r3, [r3, #20]
 80097c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097cc:	2b40      	cmp	r3, #64	@ 0x40
 80097ce:	bf0c      	ite	eq
 80097d0:	2301      	moveq	r3, #1
 80097d2:	2300      	movne	r3, #0
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80097de:	b2db      	uxtb	r3, r3
 80097e0:	2b22      	cmp	r3, #34	@ 0x22
 80097e2:	d108      	bne.n	80097f6 <UART_DMAError+0x7a>
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d005      	beq.n	80097f6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	2200      	movs	r2, #0
 80097ee:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80097f0:	68b8      	ldr	r0, [r7, #8]
 80097f2:	f000 f929 	bl	8009a48 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097fa:	f043 0210 	orr.w	r2, r3, #16
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009802:	68b8      	ldr	r0, [r7, #8]
 8009804:	f7ff fef0 	bl	80095e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009808:	bf00      	nop
 800980a:	3710      	adds	r7, #16
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b086      	sub	sp, #24
 8009814:	af00      	add	r7, sp, #0
 8009816:	60f8      	str	r0, [r7, #12]
 8009818:	60b9      	str	r1, [r7, #8]
 800981a:	603b      	str	r3, [r7, #0]
 800981c:	4613      	mov	r3, r2
 800981e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009820:	e03b      	b.n	800989a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009822:	6a3b      	ldr	r3, [r7, #32]
 8009824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009828:	d037      	beq.n	800989a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800982a:	f7fb facb 	bl	8004dc4 <HAL_GetTick>
 800982e:	4602      	mov	r2, r0
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	1ad3      	subs	r3, r2, r3
 8009834:	6a3a      	ldr	r2, [r7, #32]
 8009836:	429a      	cmp	r2, r3
 8009838:	d302      	bcc.n	8009840 <UART_WaitOnFlagUntilTimeout+0x30>
 800983a:	6a3b      	ldr	r3, [r7, #32]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d101      	bne.n	8009844 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009840:	2303      	movs	r3, #3
 8009842:	e03a      	b.n	80098ba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	68db      	ldr	r3, [r3, #12]
 800984a:	f003 0304 	and.w	r3, r3, #4
 800984e:	2b00      	cmp	r3, #0
 8009850:	d023      	beq.n	800989a <UART_WaitOnFlagUntilTimeout+0x8a>
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	2b80      	cmp	r3, #128	@ 0x80
 8009856:	d020      	beq.n	800989a <UART_WaitOnFlagUntilTimeout+0x8a>
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	2b40      	cmp	r3, #64	@ 0x40
 800985c:	d01d      	beq.n	800989a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f003 0308 	and.w	r3, r3, #8
 8009868:	2b08      	cmp	r3, #8
 800986a:	d116      	bne.n	800989a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800986c:	2300      	movs	r3, #0
 800986e:	617b      	str	r3, [r7, #20]
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	617b      	str	r3, [r7, #20]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	617b      	str	r3, [r7, #20]
 8009880:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009882:	68f8      	ldr	r0, [r7, #12]
 8009884:	f000 f8e0 	bl	8009a48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2208      	movs	r2, #8
 800988c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2200      	movs	r2, #0
 8009892:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009896:	2301      	movs	r3, #1
 8009898:	e00f      	b.n	80098ba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	681a      	ldr	r2, [r3, #0]
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	4013      	ands	r3, r2
 80098a4:	68ba      	ldr	r2, [r7, #8]
 80098a6:	429a      	cmp	r2, r3
 80098a8:	bf0c      	ite	eq
 80098aa:	2301      	moveq	r3, #1
 80098ac:	2300      	movne	r3, #0
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	461a      	mov	r2, r3
 80098b2:	79fb      	ldrb	r3, [r7, #7]
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d0b4      	beq.n	8009822 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80098b8:	2300      	movs	r3, #0
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3718      	adds	r7, #24
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
	...

080098c4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b098      	sub	sp, #96	@ 0x60
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	60f8      	str	r0, [r7, #12]
 80098cc:	60b9      	str	r1, [r7, #8]
 80098ce:	4613      	mov	r3, r2
 80098d0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80098d2:	68ba      	ldr	r2, [r7, #8]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	88fa      	ldrh	r2, [r7, #6]
 80098dc:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2200      	movs	r2, #0
 80098e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2222      	movs	r2, #34	@ 0x22
 80098e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098f0:	4a3e      	ldr	r2, [pc, #248]	@ (80099ec <UART_Start_Receive_DMA+0x128>)
 80098f2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098f8:	4a3d      	ldr	r2, [pc, #244]	@ (80099f0 <UART_Start_Receive_DMA+0x12c>)
 80098fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009900:	4a3c      	ldr	r2, [pc, #240]	@ (80099f4 <UART_Start_Receive_DMA+0x130>)
 8009902:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009908:	2200      	movs	r2, #0
 800990a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800990c:	f107 0308 	add.w	r3, r7, #8
 8009910:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	3304      	adds	r3, #4
 800991c:	4619      	mov	r1, r3
 800991e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009920:	681a      	ldr	r2, [r3, #0]
 8009922:	88fb      	ldrh	r3, [r7, #6]
 8009924:	f7fb ffdc 	bl	80058e0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009928:	2300      	movs	r3, #0
 800992a:	613b      	str	r3, [r7, #16]
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	613b      	str	r3, [r7, #16]
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	613b      	str	r3, [r7, #16]
 800993c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	691b      	ldr	r3, [r3, #16]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d019      	beq.n	800997a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	330c      	adds	r3, #12
 800994c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800994e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009950:	e853 3f00 	ldrex	r3, [r3]
 8009954:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009958:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800995c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	330c      	adds	r3, #12
 8009964:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009966:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8009968:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800996a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800996c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800996e:	e841 2300 	strex	r3, r2, [r1]
 8009972:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009974:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009976:	2b00      	cmp	r3, #0
 8009978:	d1e5      	bne.n	8009946 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	3314      	adds	r3, #20
 8009980:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009984:	e853 3f00 	ldrex	r3, [r3]
 8009988:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800998a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800998c:	f043 0301 	orr.w	r3, r3, #1
 8009990:	657b      	str	r3, [r7, #84]	@ 0x54
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	3314      	adds	r3, #20
 8009998:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800999a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800999c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800999e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80099a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80099a2:	e841 2300 	strex	r3, r2, [r1]
 80099a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80099a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d1e5      	bne.n	800997a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	3314      	adds	r3, #20
 80099b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b6:	69bb      	ldr	r3, [r7, #24]
 80099b8:	e853 3f00 	ldrex	r3, [r3]
 80099bc:	617b      	str	r3, [r7, #20]
   return(result);
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	3314      	adds	r3, #20
 80099cc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80099ce:	627a      	str	r2, [r7, #36]	@ 0x24
 80099d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d2:	6a39      	ldr	r1, [r7, #32]
 80099d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099d6:	e841 2300 	strex	r3, r2, [r1]
 80099da:	61fb      	str	r3, [r7, #28]
   return(result);
 80099dc:	69fb      	ldr	r3, [r7, #28]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d1e5      	bne.n	80099ae <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80099e2:	2300      	movs	r3, #0
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3760      	adds	r7, #96	@ 0x60
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}
 80099ec:	08009615 	.word	0x08009615
 80099f0:	08009741 	.word	0x08009741
 80099f4:	0800977d 	.word	0x0800977d

080099f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b089      	sub	sp, #36	@ 0x24
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	330c      	adds	r3, #12
 8009a06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	e853 3f00 	ldrex	r3, [r3]
 8009a0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009a16:	61fb      	str	r3, [r7, #28]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	330c      	adds	r3, #12
 8009a1e:	69fa      	ldr	r2, [r7, #28]
 8009a20:	61ba      	str	r2, [r7, #24]
 8009a22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a24:	6979      	ldr	r1, [r7, #20]
 8009a26:	69ba      	ldr	r2, [r7, #24]
 8009a28:	e841 2300 	strex	r3, r2, [r1]
 8009a2c:	613b      	str	r3, [r7, #16]
   return(result);
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d1e5      	bne.n	8009a00 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2220      	movs	r2, #32
 8009a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8009a3c:	bf00      	nop
 8009a3e:	3724      	adds	r7, #36	@ 0x24
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr

08009a48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b095      	sub	sp, #84	@ 0x54
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	330c      	adds	r3, #12
 8009a56:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a5a:	e853 3f00 	ldrex	r3, [r3]
 8009a5e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	330c      	adds	r3, #12
 8009a6e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009a70:	643a      	str	r2, [r7, #64]	@ 0x40
 8009a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a74:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009a76:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009a78:	e841 2300 	strex	r3, r2, [r1]
 8009a7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d1e5      	bne.n	8009a50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	3314      	adds	r3, #20
 8009a8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a8c:	6a3b      	ldr	r3, [r7, #32]
 8009a8e:	e853 3f00 	ldrex	r3, [r3]
 8009a92:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a94:	69fb      	ldr	r3, [r7, #28]
 8009a96:	f023 0301 	bic.w	r3, r3, #1
 8009a9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	3314      	adds	r3, #20
 8009aa2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009aa4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009aaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009aac:	e841 2300 	strex	r3, r2, [r1]
 8009ab0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d1e5      	bne.n	8009a84 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d119      	bne.n	8009af4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	330c      	adds	r3, #12
 8009ac6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	e853 3f00 	ldrex	r3, [r3]
 8009ace:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	f023 0310 	bic.w	r3, r3, #16
 8009ad6:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	330c      	adds	r3, #12
 8009ade:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ae0:	61ba      	str	r2, [r7, #24]
 8009ae2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae4:	6979      	ldr	r1, [r7, #20]
 8009ae6:	69ba      	ldr	r2, [r7, #24]
 8009ae8:	e841 2300 	strex	r3, r2, [r1]
 8009aec:	613b      	str	r3, [r7, #16]
   return(result);
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d1e5      	bne.n	8009ac0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2220      	movs	r2, #32
 8009af8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009b02:	bf00      	nop
 8009b04:	3754      	adds	r7, #84	@ 0x54
 8009b06:	46bd      	mov	sp, r7
 8009b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0c:	4770      	bx	lr
	...

08009b10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b14:	b0c0      	sub	sp, #256	@ 0x100
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	691b      	ldr	r3, [r3, #16]
 8009b24:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b2c:	68d9      	ldr	r1, [r3, #12]
 8009b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	ea40 0301 	orr.w	r3, r0, r1
 8009b38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b3e:	689a      	ldr	r2, [r3, #8]
 8009b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b44:	691b      	ldr	r3, [r3, #16]
 8009b46:	431a      	orrs	r2, r3
 8009b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b4c:	695b      	ldr	r3, [r3, #20]
 8009b4e:	431a      	orrs	r2, r3
 8009b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b54:	69db      	ldr	r3, [r3, #28]
 8009b56:	4313      	orrs	r3, r2
 8009b58:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	68db      	ldr	r3, [r3, #12]
 8009b64:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009b68:	f021 010c 	bic.w	r1, r1, #12
 8009b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009b76:	430b      	orrs	r3, r1
 8009b78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	695b      	ldr	r3, [r3, #20]
 8009b82:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b8a:	6999      	ldr	r1, [r3, #24]
 8009b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b90:	681a      	ldr	r2, [r3, #0]
 8009b92:	ea40 0301 	orr.w	r3, r0, r1
 8009b96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b9c:	681a      	ldr	r2, [r3, #0]
 8009b9e:	4b8f      	ldr	r3, [pc, #572]	@ (8009ddc <UART_SetConfig+0x2cc>)
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	d005      	beq.n	8009bb0 <UART_SetConfig+0xa0>
 8009ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	4b8d      	ldr	r3, [pc, #564]	@ (8009de0 <UART_SetConfig+0x2d0>)
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d104      	bne.n	8009bba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009bb0:	f7fe f8aa 	bl	8007d08 <HAL_RCC_GetPCLK2Freq>
 8009bb4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009bb8:	e003      	b.n	8009bc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009bba:	f7fe f891 	bl	8007ce0 <HAL_RCC_GetPCLK1Freq>
 8009bbe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bc6:	69db      	ldr	r3, [r3, #28]
 8009bc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009bcc:	f040 810c 	bne.w	8009de8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009bd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009bda:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009bde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009be2:	4622      	mov	r2, r4
 8009be4:	462b      	mov	r3, r5
 8009be6:	1891      	adds	r1, r2, r2
 8009be8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009bea:	415b      	adcs	r3, r3
 8009bec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009bee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009bf2:	4621      	mov	r1, r4
 8009bf4:	eb12 0801 	adds.w	r8, r2, r1
 8009bf8:	4629      	mov	r1, r5
 8009bfa:	eb43 0901 	adc.w	r9, r3, r1
 8009bfe:	f04f 0200 	mov.w	r2, #0
 8009c02:	f04f 0300 	mov.w	r3, #0
 8009c06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009c0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009c0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009c12:	4690      	mov	r8, r2
 8009c14:	4699      	mov	r9, r3
 8009c16:	4623      	mov	r3, r4
 8009c18:	eb18 0303 	adds.w	r3, r8, r3
 8009c1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009c20:	462b      	mov	r3, r5
 8009c22:	eb49 0303 	adc.w	r3, r9, r3
 8009c26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	2200      	movs	r2, #0
 8009c32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009c36:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009c3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009c3e:	460b      	mov	r3, r1
 8009c40:	18db      	adds	r3, r3, r3
 8009c42:	653b      	str	r3, [r7, #80]	@ 0x50
 8009c44:	4613      	mov	r3, r2
 8009c46:	eb42 0303 	adc.w	r3, r2, r3
 8009c4a:	657b      	str	r3, [r7, #84]	@ 0x54
 8009c4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009c50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009c54:	f7f7 f820 	bl	8000c98 <__aeabi_uldivmod>
 8009c58:	4602      	mov	r2, r0
 8009c5a:	460b      	mov	r3, r1
 8009c5c:	4b61      	ldr	r3, [pc, #388]	@ (8009de4 <UART_SetConfig+0x2d4>)
 8009c5e:	fba3 2302 	umull	r2, r3, r3, r2
 8009c62:	095b      	lsrs	r3, r3, #5
 8009c64:	011c      	lsls	r4, r3, #4
 8009c66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009c70:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009c74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009c78:	4642      	mov	r2, r8
 8009c7a:	464b      	mov	r3, r9
 8009c7c:	1891      	adds	r1, r2, r2
 8009c7e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009c80:	415b      	adcs	r3, r3
 8009c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009c88:	4641      	mov	r1, r8
 8009c8a:	eb12 0a01 	adds.w	sl, r2, r1
 8009c8e:	4649      	mov	r1, r9
 8009c90:	eb43 0b01 	adc.w	fp, r3, r1
 8009c94:	f04f 0200 	mov.w	r2, #0
 8009c98:	f04f 0300 	mov.w	r3, #0
 8009c9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009ca0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009ca4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009ca8:	4692      	mov	sl, r2
 8009caa:	469b      	mov	fp, r3
 8009cac:	4643      	mov	r3, r8
 8009cae:	eb1a 0303 	adds.w	r3, sl, r3
 8009cb2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009cb6:	464b      	mov	r3, r9
 8009cb8:	eb4b 0303 	adc.w	r3, fp, r3
 8009cbc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009ccc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009cd0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009cd4:	460b      	mov	r3, r1
 8009cd6:	18db      	adds	r3, r3, r3
 8009cd8:	643b      	str	r3, [r7, #64]	@ 0x40
 8009cda:	4613      	mov	r3, r2
 8009cdc:	eb42 0303 	adc.w	r3, r2, r3
 8009ce0:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ce2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009ce6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009cea:	f7f6 ffd5 	bl	8000c98 <__aeabi_uldivmod>
 8009cee:	4602      	mov	r2, r0
 8009cf0:	460b      	mov	r3, r1
 8009cf2:	4611      	mov	r1, r2
 8009cf4:	4b3b      	ldr	r3, [pc, #236]	@ (8009de4 <UART_SetConfig+0x2d4>)
 8009cf6:	fba3 2301 	umull	r2, r3, r3, r1
 8009cfa:	095b      	lsrs	r3, r3, #5
 8009cfc:	2264      	movs	r2, #100	@ 0x64
 8009cfe:	fb02 f303 	mul.w	r3, r2, r3
 8009d02:	1acb      	subs	r3, r1, r3
 8009d04:	00db      	lsls	r3, r3, #3
 8009d06:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009d0a:	4b36      	ldr	r3, [pc, #216]	@ (8009de4 <UART_SetConfig+0x2d4>)
 8009d0c:	fba3 2302 	umull	r2, r3, r3, r2
 8009d10:	095b      	lsrs	r3, r3, #5
 8009d12:	005b      	lsls	r3, r3, #1
 8009d14:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009d18:	441c      	add	r4, r3
 8009d1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009d24:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009d28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009d2c:	4642      	mov	r2, r8
 8009d2e:	464b      	mov	r3, r9
 8009d30:	1891      	adds	r1, r2, r2
 8009d32:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009d34:	415b      	adcs	r3, r3
 8009d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009d3c:	4641      	mov	r1, r8
 8009d3e:	1851      	adds	r1, r2, r1
 8009d40:	6339      	str	r1, [r7, #48]	@ 0x30
 8009d42:	4649      	mov	r1, r9
 8009d44:	414b      	adcs	r3, r1
 8009d46:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d48:	f04f 0200 	mov.w	r2, #0
 8009d4c:	f04f 0300 	mov.w	r3, #0
 8009d50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009d54:	4659      	mov	r1, fp
 8009d56:	00cb      	lsls	r3, r1, #3
 8009d58:	4651      	mov	r1, sl
 8009d5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d5e:	4651      	mov	r1, sl
 8009d60:	00ca      	lsls	r2, r1, #3
 8009d62:	4610      	mov	r0, r2
 8009d64:	4619      	mov	r1, r3
 8009d66:	4603      	mov	r3, r0
 8009d68:	4642      	mov	r2, r8
 8009d6a:	189b      	adds	r3, r3, r2
 8009d6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009d70:	464b      	mov	r3, r9
 8009d72:	460a      	mov	r2, r1
 8009d74:	eb42 0303 	adc.w	r3, r2, r3
 8009d78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d80:	685b      	ldr	r3, [r3, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009d88:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009d8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009d90:	460b      	mov	r3, r1
 8009d92:	18db      	adds	r3, r3, r3
 8009d94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009d96:	4613      	mov	r3, r2
 8009d98:	eb42 0303 	adc.w	r3, r2, r3
 8009d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009da2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009da6:	f7f6 ff77 	bl	8000c98 <__aeabi_uldivmod>
 8009daa:	4602      	mov	r2, r0
 8009dac:	460b      	mov	r3, r1
 8009dae:	4b0d      	ldr	r3, [pc, #52]	@ (8009de4 <UART_SetConfig+0x2d4>)
 8009db0:	fba3 1302 	umull	r1, r3, r3, r2
 8009db4:	095b      	lsrs	r3, r3, #5
 8009db6:	2164      	movs	r1, #100	@ 0x64
 8009db8:	fb01 f303 	mul.w	r3, r1, r3
 8009dbc:	1ad3      	subs	r3, r2, r3
 8009dbe:	00db      	lsls	r3, r3, #3
 8009dc0:	3332      	adds	r3, #50	@ 0x32
 8009dc2:	4a08      	ldr	r2, [pc, #32]	@ (8009de4 <UART_SetConfig+0x2d4>)
 8009dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8009dc8:	095b      	lsrs	r3, r3, #5
 8009dca:	f003 0207 	and.w	r2, r3, #7
 8009dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4422      	add	r2, r4
 8009dd6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009dd8:	e106      	b.n	8009fe8 <UART_SetConfig+0x4d8>
 8009dda:	bf00      	nop
 8009ddc:	40011000 	.word	0x40011000
 8009de0:	40011400 	.word	0x40011400
 8009de4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009de8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009dec:	2200      	movs	r2, #0
 8009dee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009df2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009df6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009dfa:	4642      	mov	r2, r8
 8009dfc:	464b      	mov	r3, r9
 8009dfe:	1891      	adds	r1, r2, r2
 8009e00:	6239      	str	r1, [r7, #32]
 8009e02:	415b      	adcs	r3, r3
 8009e04:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009e0a:	4641      	mov	r1, r8
 8009e0c:	1854      	adds	r4, r2, r1
 8009e0e:	4649      	mov	r1, r9
 8009e10:	eb43 0501 	adc.w	r5, r3, r1
 8009e14:	f04f 0200 	mov.w	r2, #0
 8009e18:	f04f 0300 	mov.w	r3, #0
 8009e1c:	00eb      	lsls	r3, r5, #3
 8009e1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009e22:	00e2      	lsls	r2, r4, #3
 8009e24:	4614      	mov	r4, r2
 8009e26:	461d      	mov	r5, r3
 8009e28:	4643      	mov	r3, r8
 8009e2a:	18e3      	adds	r3, r4, r3
 8009e2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009e30:	464b      	mov	r3, r9
 8009e32:	eb45 0303 	adc.w	r3, r5, r3
 8009e36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	2200      	movs	r2, #0
 8009e42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009e46:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009e4a:	f04f 0200 	mov.w	r2, #0
 8009e4e:	f04f 0300 	mov.w	r3, #0
 8009e52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009e56:	4629      	mov	r1, r5
 8009e58:	008b      	lsls	r3, r1, #2
 8009e5a:	4621      	mov	r1, r4
 8009e5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e60:	4621      	mov	r1, r4
 8009e62:	008a      	lsls	r2, r1, #2
 8009e64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009e68:	f7f6 ff16 	bl	8000c98 <__aeabi_uldivmod>
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	460b      	mov	r3, r1
 8009e70:	4b60      	ldr	r3, [pc, #384]	@ (8009ff4 <UART_SetConfig+0x4e4>)
 8009e72:	fba3 2302 	umull	r2, r3, r3, r2
 8009e76:	095b      	lsrs	r3, r3, #5
 8009e78:	011c      	lsls	r4, r3, #4
 8009e7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009e84:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009e88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009e8c:	4642      	mov	r2, r8
 8009e8e:	464b      	mov	r3, r9
 8009e90:	1891      	adds	r1, r2, r2
 8009e92:	61b9      	str	r1, [r7, #24]
 8009e94:	415b      	adcs	r3, r3
 8009e96:	61fb      	str	r3, [r7, #28]
 8009e98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009e9c:	4641      	mov	r1, r8
 8009e9e:	1851      	adds	r1, r2, r1
 8009ea0:	6139      	str	r1, [r7, #16]
 8009ea2:	4649      	mov	r1, r9
 8009ea4:	414b      	adcs	r3, r1
 8009ea6:	617b      	str	r3, [r7, #20]
 8009ea8:	f04f 0200 	mov.w	r2, #0
 8009eac:	f04f 0300 	mov.w	r3, #0
 8009eb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009eb4:	4659      	mov	r1, fp
 8009eb6:	00cb      	lsls	r3, r1, #3
 8009eb8:	4651      	mov	r1, sl
 8009eba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009ebe:	4651      	mov	r1, sl
 8009ec0:	00ca      	lsls	r2, r1, #3
 8009ec2:	4610      	mov	r0, r2
 8009ec4:	4619      	mov	r1, r3
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	4642      	mov	r2, r8
 8009eca:	189b      	adds	r3, r3, r2
 8009ecc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009ed0:	464b      	mov	r3, r9
 8009ed2:	460a      	mov	r2, r1
 8009ed4:	eb42 0303 	adc.w	r3, r2, r3
 8009ed8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009ee6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009ee8:	f04f 0200 	mov.w	r2, #0
 8009eec:	f04f 0300 	mov.w	r3, #0
 8009ef0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009ef4:	4649      	mov	r1, r9
 8009ef6:	008b      	lsls	r3, r1, #2
 8009ef8:	4641      	mov	r1, r8
 8009efa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009efe:	4641      	mov	r1, r8
 8009f00:	008a      	lsls	r2, r1, #2
 8009f02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009f06:	f7f6 fec7 	bl	8000c98 <__aeabi_uldivmod>
 8009f0a:	4602      	mov	r2, r0
 8009f0c:	460b      	mov	r3, r1
 8009f0e:	4611      	mov	r1, r2
 8009f10:	4b38      	ldr	r3, [pc, #224]	@ (8009ff4 <UART_SetConfig+0x4e4>)
 8009f12:	fba3 2301 	umull	r2, r3, r3, r1
 8009f16:	095b      	lsrs	r3, r3, #5
 8009f18:	2264      	movs	r2, #100	@ 0x64
 8009f1a:	fb02 f303 	mul.w	r3, r2, r3
 8009f1e:	1acb      	subs	r3, r1, r3
 8009f20:	011b      	lsls	r3, r3, #4
 8009f22:	3332      	adds	r3, #50	@ 0x32
 8009f24:	4a33      	ldr	r2, [pc, #204]	@ (8009ff4 <UART_SetConfig+0x4e4>)
 8009f26:	fba2 2303 	umull	r2, r3, r2, r3
 8009f2a:	095b      	lsrs	r3, r3, #5
 8009f2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009f30:	441c      	add	r4, r3
 8009f32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009f36:	2200      	movs	r2, #0
 8009f38:	673b      	str	r3, [r7, #112]	@ 0x70
 8009f3a:	677a      	str	r2, [r7, #116]	@ 0x74
 8009f3c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009f40:	4642      	mov	r2, r8
 8009f42:	464b      	mov	r3, r9
 8009f44:	1891      	adds	r1, r2, r2
 8009f46:	60b9      	str	r1, [r7, #8]
 8009f48:	415b      	adcs	r3, r3
 8009f4a:	60fb      	str	r3, [r7, #12]
 8009f4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009f50:	4641      	mov	r1, r8
 8009f52:	1851      	adds	r1, r2, r1
 8009f54:	6039      	str	r1, [r7, #0]
 8009f56:	4649      	mov	r1, r9
 8009f58:	414b      	adcs	r3, r1
 8009f5a:	607b      	str	r3, [r7, #4]
 8009f5c:	f04f 0200 	mov.w	r2, #0
 8009f60:	f04f 0300 	mov.w	r3, #0
 8009f64:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009f68:	4659      	mov	r1, fp
 8009f6a:	00cb      	lsls	r3, r1, #3
 8009f6c:	4651      	mov	r1, sl
 8009f6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f72:	4651      	mov	r1, sl
 8009f74:	00ca      	lsls	r2, r1, #3
 8009f76:	4610      	mov	r0, r2
 8009f78:	4619      	mov	r1, r3
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	4642      	mov	r2, r8
 8009f7e:	189b      	adds	r3, r3, r2
 8009f80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009f82:	464b      	mov	r3, r9
 8009f84:	460a      	mov	r2, r1
 8009f86:	eb42 0303 	adc.w	r3, r2, r3
 8009f8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	2200      	movs	r2, #0
 8009f94:	663b      	str	r3, [r7, #96]	@ 0x60
 8009f96:	667a      	str	r2, [r7, #100]	@ 0x64
 8009f98:	f04f 0200 	mov.w	r2, #0
 8009f9c:	f04f 0300 	mov.w	r3, #0
 8009fa0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009fa4:	4649      	mov	r1, r9
 8009fa6:	008b      	lsls	r3, r1, #2
 8009fa8:	4641      	mov	r1, r8
 8009faa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009fae:	4641      	mov	r1, r8
 8009fb0:	008a      	lsls	r2, r1, #2
 8009fb2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009fb6:	f7f6 fe6f 	bl	8000c98 <__aeabi_uldivmod>
 8009fba:	4602      	mov	r2, r0
 8009fbc:	460b      	mov	r3, r1
 8009fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8009ff4 <UART_SetConfig+0x4e4>)
 8009fc0:	fba3 1302 	umull	r1, r3, r3, r2
 8009fc4:	095b      	lsrs	r3, r3, #5
 8009fc6:	2164      	movs	r1, #100	@ 0x64
 8009fc8:	fb01 f303 	mul.w	r3, r1, r3
 8009fcc:	1ad3      	subs	r3, r2, r3
 8009fce:	011b      	lsls	r3, r3, #4
 8009fd0:	3332      	adds	r3, #50	@ 0x32
 8009fd2:	4a08      	ldr	r2, [pc, #32]	@ (8009ff4 <UART_SetConfig+0x4e4>)
 8009fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8009fd8:	095b      	lsrs	r3, r3, #5
 8009fda:	f003 020f 	and.w	r2, r3, #15
 8009fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4422      	add	r2, r4
 8009fe6:	609a      	str	r2, [r3, #8]
}
 8009fe8:	bf00      	nop
 8009fea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ff4:	51eb851f 	.word	0x51eb851f

08009ff8 <__NVIC_SetPriority>:
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b083      	sub	sp, #12
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	4603      	mov	r3, r0
 800a000:	6039      	str	r1, [r7, #0]
 800a002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	db0a      	blt.n	800a022 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	b2da      	uxtb	r2, r3
 800a010:	490c      	ldr	r1, [pc, #48]	@ (800a044 <__NVIC_SetPriority+0x4c>)
 800a012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a016:	0112      	lsls	r2, r2, #4
 800a018:	b2d2      	uxtb	r2, r2
 800a01a:	440b      	add	r3, r1
 800a01c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a020:	e00a      	b.n	800a038 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	b2da      	uxtb	r2, r3
 800a026:	4908      	ldr	r1, [pc, #32]	@ (800a048 <__NVIC_SetPriority+0x50>)
 800a028:	79fb      	ldrb	r3, [r7, #7]
 800a02a:	f003 030f 	and.w	r3, r3, #15
 800a02e:	3b04      	subs	r3, #4
 800a030:	0112      	lsls	r2, r2, #4
 800a032:	b2d2      	uxtb	r2, r2
 800a034:	440b      	add	r3, r1
 800a036:	761a      	strb	r2, [r3, #24]
}
 800a038:	bf00      	nop
 800a03a:	370c      	adds	r7, #12
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr
 800a044:	e000e100 	.word	0xe000e100
 800a048:	e000ed00 	.word	0xe000ed00

0800a04c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a04c:	b580      	push	{r7, lr}
 800a04e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a050:	4b05      	ldr	r3, [pc, #20]	@ (800a068 <SysTick_Handler+0x1c>)
 800a052:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a054:	f002 f86c 	bl	800c130 <xTaskGetSchedulerState>
 800a058:	4603      	mov	r3, r0
 800a05a:	2b01      	cmp	r3, #1
 800a05c:	d001      	beq.n	800a062 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a05e:	f002 fe63 	bl	800cd28 <xPortSysTickHandler>
  }
}
 800a062:	bf00      	nop
 800a064:	bd80      	pop	{r7, pc}
 800a066:	bf00      	nop
 800a068:	e000e010 	.word	0xe000e010

0800a06c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a06c:	b580      	push	{r7, lr}
 800a06e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a070:	2100      	movs	r1, #0
 800a072:	f06f 0004 	mvn.w	r0, #4
 800a076:	f7ff ffbf 	bl	8009ff8 <__NVIC_SetPriority>
#endif
}
 800a07a:	bf00      	nop
 800a07c:	bd80      	pop	{r7, pc}
	...

0800a080 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a080:	b480      	push	{r7}
 800a082:	b083      	sub	sp, #12
 800a084:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a086:	f3ef 8305 	mrs	r3, IPSR
 800a08a:	603b      	str	r3, [r7, #0]
  return(result);
 800a08c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d003      	beq.n	800a09a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a092:	f06f 0305 	mvn.w	r3, #5
 800a096:	607b      	str	r3, [r7, #4]
 800a098:	e00c      	b.n	800a0b4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a09a:	4b0a      	ldr	r3, [pc, #40]	@ (800a0c4 <osKernelInitialize+0x44>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d105      	bne.n	800a0ae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a0a2:	4b08      	ldr	r3, [pc, #32]	@ (800a0c4 <osKernelInitialize+0x44>)
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	607b      	str	r3, [r7, #4]
 800a0ac:	e002      	b.n	800a0b4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a0ae:	f04f 33ff 	mov.w	r3, #4294967295
 800a0b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a0b4:	687b      	ldr	r3, [r7, #4]
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	370c      	adds	r7, #12
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c0:	4770      	bx	lr
 800a0c2:	bf00      	nop
 800a0c4:	20000768 	.word	0x20000768

0800a0c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0ce:	f3ef 8305 	mrs	r3, IPSR
 800a0d2:	603b      	str	r3, [r7, #0]
  return(result);
 800a0d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d003      	beq.n	800a0e2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a0da:	f06f 0305 	mvn.w	r3, #5
 800a0de:	607b      	str	r3, [r7, #4]
 800a0e0:	e010      	b.n	800a104 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a0e2:	4b0b      	ldr	r3, [pc, #44]	@ (800a110 <osKernelStart+0x48>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	2b01      	cmp	r3, #1
 800a0e8:	d109      	bne.n	800a0fe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a0ea:	f7ff ffbf 	bl	800a06c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a0ee:	4b08      	ldr	r3, [pc, #32]	@ (800a110 <osKernelStart+0x48>)
 800a0f0:	2202      	movs	r2, #2
 800a0f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a0f4:	f001 fae4 	bl	800b6c0 <vTaskStartScheduler>
      stat = osOK;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	607b      	str	r3, [r7, #4]
 800a0fc:	e002      	b.n	800a104 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a0fe:	f04f 33ff 	mov.w	r3, #4294967295
 800a102:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a104:	687b      	ldr	r3, [r7, #4]
}
 800a106:	4618      	mov	r0, r3
 800a108:	3708      	adds	r7, #8
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	bf00      	nop
 800a110:	20000768 	.word	0x20000768

0800a114 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a114:	b580      	push	{r7, lr}
 800a116:	b08e      	sub	sp, #56	@ 0x38
 800a118:	af04      	add	r7, sp, #16
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	60b9      	str	r1, [r7, #8]
 800a11e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a120:	2300      	movs	r3, #0
 800a122:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a124:	f3ef 8305 	mrs	r3, IPSR
 800a128:	617b      	str	r3, [r7, #20]
  return(result);
 800a12a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d17e      	bne.n	800a22e <osThreadNew+0x11a>
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d07b      	beq.n	800a22e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a136:	2380      	movs	r3, #128	@ 0x80
 800a138:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a13a:	2318      	movs	r3, #24
 800a13c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a13e:	2300      	movs	r3, #0
 800a140:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a142:	f04f 33ff 	mov.w	r3, #4294967295
 800a146:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d045      	beq.n	800a1da <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d002      	beq.n	800a15c <osThreadNew+0x48>
        name = attr->name;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	699b      	ldr	r3, [r3, #24]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d002      	beq.n	800a16a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	699b      	ldr	r3, [r3, #24]
 800a168:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a16a:	69fb      	ldr	r3, [r7, #28]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d008      	beq.n	800a182 <osThreadNew+0x6e>
 800a170:	69fb      	ldr	r3, [r7, #28]
 800a172:	2b38      	cmp	r3, #56	@ 0x38
 800a174:	d805      	bhi.n	800a182 <osThreadNew+0x6e>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	f003 0301 	and.w	r3, r3, #1
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d001      	beq.n	800a186 <osThreadNew+0x72>
        return (NULL);
 800a182:	2300      	movs	r3, #0
 800a184:	e054      	b.n	800a230 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	695b      	ldr	r3, [r3, #20]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d003      	beq.n	800a196 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	695b      	ldr	r3, [r3, #20]
 800a192:	089b      	lsrs	r3, r3, #2
 800a194:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	689b      	ldr	r3, [r3, #8]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d00e      	beq.n	800a1bc <osThreadNew+0xa8>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	68db      	ldr	r3, [r3, #12]
 800a1a2:	2baf      	cmp	r3, #175	@ 0xaf
 800a1a4:	d90a      	bls.n	800a1bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d006      	beq.n	800a1bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	695b      	ldr	r3, [r3, #20]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d002      	beq.n	800a1bc <osThreadNew+0xa8>
        mem = 1;
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	61bb      	str	r3, [r7, #24]
 800a1ba:	e010      	b.n	800a1de <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	689b      	ldr	r3, [r3, #8]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d10c      	bne.n	800a1de <osThreadNew+0xca>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	68db      	ldr	r3, [r3, #12]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d108      	bne.n	800a1de <osThreadNew+0xca>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	691b      	ldr	r3, [r3, #16]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d104      	bne.n	800a1de <osThreadNew+0xca>
          mem = 0;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	61bb      	str	r3, [r7, #24]
 800a1d8:	e001      	b.n	800a1de <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a1de:	69bb      	ldr	r3, [r7, #24]
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	d110      	bne.n	800a206 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a1e8:	687a      	ldr	r2, [r7, #4]
 800a1ea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a1ec:	9202      	str	r2, [sp, #8]
 800a1ee:	9301      	str	r3, [sp, #4]
 800a1f0:	69fb      	ldr	r3, [r7, #28]
 800a1f2:	9300      	str	r3, [sp, #0]
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	6a3a      	ldr	r2, [r7, #32]
 800a1f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a1fa:	68f8      	ldr	r0, [r7, #12]
 800a1fc:	f001 f866 	bl	800b2cc <xTaskCreateStatic>
 800a200:	4603      	mov	r3, r0
 800a202:	613b      	str	r3, [r7, #16]
 800a204:	e013      	b.n	800a22e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a206:	69bb      	ldr	r3, [r7, #24]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d110      	bne.n	800a22e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a20c:	6a3b      	ldr	r3, [r7, #32]
 800a20e:	b29a      	uxth	r2, r3
 800a210:	f107 0310 	add.w	r3, r7, #16
 800a214:	9301      	str	r3, [sp, #4]
 800a216:	69fb      	ldr	r3, [r7, #28]
 800a218:	9300      	str	r3, [sp, #0]
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a21e:	68f8      	ldr	r0, [r7, #12]
 800a220:	f001 f8b4 	bl	800b38c <xTaskCreate>
 800a224:	4603      	mov	r3, r0
 800a226:	2b01      	cmp	r3, #1
 800a228:	d001      	beq.n	800a22e <osThreadNew+0x11a>
            hTask = NULL;
 800a22a:	2300      	movs	r3, #0
 800a22c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a22e:	693b      	ldr	r3, [r7, #16]
}
 800a230:	4618      	mov	r0, r3
 800a232:	3728      	adds	r7, #40	@ 0x28
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a238:	b580      	push	{r7, lr}
 800a23a:	b084      	sub	sp, #16
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a240:	f3ef 8305 	mrs	r3, IPSR
 800a244:	60bb      	str	r3, [r7, #8]
  return(result);
 800a246:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d003      	beq.n	800a254 <osDelay+0x1c>
    stat = osErrorISR;
 800a24c:	f06f 0305 	mvn.w	r3, #5
 800a250:	60fb      	str	r3, [r7, #12]
 800a252:	e007      	b.n	800a264 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a254:	2300      	movs	r3, #0
 800a256:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d002      	beq.n	800a264 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f001 f9f8 	bl	800b654 <vTaskDelay>
    }
  }

  return (stat);
 800a264:	68fb      	ldr	r3, [r7, #12]
}
 800a266:	4618      	mov	r0, r3
 800a268:	3710      	adds	r7, #16
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}

0800a26e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a26e:	b580      	push	{r7, lr}
 800a270:	b08a      	sub	sp, #40	@ 0x28
 800a272:	af02      	add	r7, sp, #8
 800a274:	60f8      	str	r0, [r7, #12]
 800a276:	60b9      	str	r1, [r7, #8]
 800a278:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a27a:	2300      	movs	r3, #0
 800a27c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a27e:	f3ef 8305 	mrs	r3, IPSR
 800a282:	613b      	str	r3, [r7, #16]
  return(result);
 800a284:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a286:	2b00      	cmp	r3, #0
 800a288:	d15f      	bne.n	800a34a <osMessageQueueNew+0xdc>
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d05c      	beq.n	800a34a <osMessageQueueNew+0xdc>
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d059      	beq.n	800a34a <osMessageQueueNew+0xdc>
    mem = -1;
 800a296:	f04f 33ff 	mov.w	r3, #4294967295
 800a29a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d029      	beq.n	800a2f6 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	689b      	ldr	r3, [r3, #8]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d012      	beq.n	800a2d0 <osMessageQueueNew+0x62>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	68db      	ldr	r3, [r3, #12]
 800a2ae:	2b4f      	cmp	r3, #79	@ 0x4f
 800a2b0:	d90e      	bls.n	800a2d0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d00a      	beq.n	800a2d0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	695a      	ldr	r2, [r3, #20]
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	68b9      	ldr	r1, [r7, #8]
 800a2c2:	fb01 f303 	mul.w	r3, r1, r3
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d302      	bcc.n	800a2d0 <osMessageQueueNew+0x62>
        mem = 1;
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	61bb      	str	r3, [r7, #24]
 800a2ce:	e014      	b.n	800a2fa <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	689b      	ldr	r3, [r3, #8]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d110      	bne.n	800a2fa <osMessageQueueNew+0x8c>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	68db      	ldr	r3, [r3, #12]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d10c      	bne.n	800a2fa <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d108      	bne.n	800a2fa <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	695b      	ldr	r3, [r3, #20]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d104      	bne.n	800a2fa <osMessageQueueNew+0x8c>
          mem = 0;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	61bb      	str	r3, [r7, #24]
 800a2f4:	e001      	b.n	800a2fa <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a2fa:	69bb      	ldr	r3, [r7, #24]
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	d10b      	bne.n	800a318 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	691a      	ldr	r2, [r3, #16]
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	689b      	ldr	r3, [r3, #8]
 800a308:	2100      	movs	r1, #0
 800a30a:	9100      	str	r1, [sp, #0]
 800a30c:	68b9      	ldr	r1, [r7, #8]
 800a30e:	68f8      	ldr	r0, [r7, #12]
 800a310:	f000 fa50 	bl	800a7b4 <xQueueGenericCreateStatic>
 800a314:	61f8      	str	r0, [r7, #28]
 800a316:	e008      	b.n	800a32a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a318:	69bb      	ldr	r3, [r7, #24]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d105      	bne.n	800a32a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a31e:	2200      	movs	r2, #0
 800a320:	68b9      	ldr	r1, [r7, #8]
 800a322:	68f8      	ldr	r0, [r7, #12]
 800a324:	f000 fac3 	bl	800a8ae <xQueueGenericCreate>
 800a328:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a32a:	69fb      	ldr	r3, [r7, #28]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d00c      	beq.n	800a34a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d003      	beq.n	800a33e <osMessageQueueNew+0xd0>
        name = attr->name;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	617b      	str	r3, [r7, #20]
 800a33c:	e001      	b.n	800a342 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a33e:	2300      	movs	r3, #0
 800a340:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a342:	6979      	ldr	r1, [r7, #20]
 800a344:	69f8      	ldr	r0, [r7, #28]
 800a346:	f000 ff63 	bl	800b210 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a34a:	69fb      	ldr	r3, [r7, #28]
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3720      	adds	r7, #32
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}

0800a354 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a354:	b580      	push	{r7, lr}
 800a356:	b088      	sub	sp, #32
 800a358:	af00      	add	r7, sp, #0
 800a35a:	60f8      	str	r0, [r7, #12]
 800a35c:	60b9      	str	r1, [r7, #8]
 800a35e:	603b      	str	r3, [r7, #0]
 800a360:	4613      	mov	r3, r2
 800a362:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a368:	2300      	movs	r3, #0
 800a36a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a36c:	f3ef 8305 	mrs	r3, IPSR
 800a370:	617b      	str	r3, [r7, #20]
  return(result);
 800a372:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a374:	2b00      	cmp	r3, #0
 800a376:	d028      	beq.n	800a3ca <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a378:	69bb      	ldr	r3, [r7, #24]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d005      	beq.n	800a38a <osMessageQueuePut+0x36>
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d002      	beq.n	800a38a <osMessageQueuePut+0x36>
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d003      	beq.n	800a392 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800a38a:	f06f 0303 	mvn.w	r3, #3
 800a38e:	61fb      	str	r3, [r7, #28]
 800a390:	e038      	b.n	800a404 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800a392:	2300      	movs	r3, #0
 800a394:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a396:	f107 0210 	add.w	r2, r7, #16
 800a39a:	2300      	movs	r3, #0
 800a39c:	68b9      	ldr	r1, [r7, #8]
 800a39e:	69b8      	ldr	r0, [r7, #24]
 800a3a0:	f000 fbe6 	bl	800ab70 <xQueueGenericSendFromISR>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	2b01      	cmp	r3, #1
 800a3a8:	d003      	beq.n	800a3b2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800a3aa:	f06f 0302 	mvn.w	r3, #2
 800a3ae:	61fb      	str	r3, [r7, #28]
 800a3b0:	e028      	b.n	800a404 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d025      	beq.n	800a404 <osMessageQueuePut+0xb0>
 800a3b8:	4b15      	ldr	r3, [pc, #84]	@ (800a410 <osMessageQueuePut+0xbc>)
 800a3ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3be:	601a      	str	r2, [r3, #0]
 800a3c0:	f3bf 8f4f 	dsb	sy
 800a3c4:	f3bf 8f6f 	isb	sy
 800a3c8:	e01c      	b.n	800a404 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a3ca:	69bb      	ldr	r3, [r7, #24]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d002      	beq.n	800a3d6 <osMessageQueuePut+0x82>
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d103      	bne.n	800a3de <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800a3d6:	f06f 0303 	mvn.w	r3, #3
 800a3da:	61fb      	str	r3, [r7, #28]
 800a3dc:	e012      	b.n	800a404 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a3de:	2300      	movs	r3, #0
 800a3e0:	683a      	ldr	r2, [r7, #0]
 800a3e2:	68b9      	ldr	r1, [r7, #8]
 800a3e4:	69b8      	ldr	r0, [r7, #24]
 800a3e6:	f000 fac1 	bl	800a96c <xQueueGenericSend>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	d009      	beq.n	800a404 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d003      	beq.n	800a3fe <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800a3f6:	f06f 0301 	mvn.w	r3, #1
 800a3fa:	61fb      	str	r3, [r7, #28]
 800a3fc:	e002      	b.n	800a404 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800a3fe:	f06f 0302 	mvn.w	r3, #2
 800a402:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a404:	69fb      	ldr	r3, [r7, #28]
}
 800a406:	4618      	mov	r0, r3
 800a408:	3720      	adds	r7, #32
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	e000ed04 	.word	0xe000ed04

0800a414 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a414:	b580      	push	{r7, lr}
 800a416:	b088      	sub	sp, #32
 800a418:	af00      	add	r7, sp, #0
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	60b9      	str	r1, [r7, #8]
 800a41e:	607a      	str	r2, [r7, #4]
 800a420:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a426:	2300      	movs	r3, #0
 800a428:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a42a:	f3ef 8305 	mrs	r3, IPSR
 800a42e:	617b      	str	r3, [r7, #20]
  return(result);
 800a430:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a432:	2b00      	cmp	r3, #0
 800a434:	d028      	beq.n	800a488 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a436:	69bb      	ldr	r3, [r7, #24]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d005      	beq.n	800a448 <osMessageQueueGet+0x34>
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d002      	beq.n	800a448 <osMessageQueueGet+0x34>
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d003      	beq.n	800a450 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800a448:	f06f 0303 	mvn.w	r3, #3
 800a44c:	61fb      	str	r3, [r7, #28]
 800a44e:	e037      	b.n	800a4c0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800a450:	2300      	movs	r3, #0
 800a452:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a454:	f107 0310 	add.w	r3, r7, #16
 800a458:	461a      	mov	r2, r3
 800a45a:	68b9      	ldr	r1, [r7, #8]
 800a45c:	69b8      	ldr	r0, [r7, #24]
 800a45e:	f000 fd07 	bl	800ae70 <xQueueReceiveFromISR>
 800a462:	4603      	mov	r3, r0
 800a464:	2b01      	cmp	r3, #1
 800a466:	d003      	beq.n	800a470 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800a468:	f06f 0302 	mvn.w	r3, #2
 800a46c:	61fb      	str	r3, [r7, #28]
 800a46e:	e027      	b.n	800a4c0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d024      	beq.n	800a4c0 <osMessageQueueGet+0xac>
 800a476:	4b15      	ldr	r3, [pc, #84]	@ (800a4cc <osMessageQueueGet+0xb8>)
 800a478:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a47c:	601a      	str	r2, [r3, #0]
 800a47e:	f3bf 8f4f 	dsb	sy
 800a482:	f3bf 8f6f 	isb	sy
 800a486:	e01b      	b.n	800a4c0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a488:	69bb      	ldr	r3, [r7, #24]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d002      	beq.n	800a494 <osMessageQueueGet+0x80>
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d103      	bne.n	800a49c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800a494:	f06f 0303 	mvn.w	r3, #3
 800a498:	61fb      	str	r3, [r7, #28]
 800a49a:	e011      	b.n	800a4c0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a49c:	683a      	ldr	r2, [r7, #0]
 800a49e:	68b9      	ldr	r1, [r7, #8]
 800a4a0:	69b8      	ldr	r0, [r7, #24]
 800a4a2:	f000 fc03 	bl	800acac <xQueueReceive>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	2b01      	cmp	r3, #1
 800a4aa:	d009      	beq.n	800a4c0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d003      	beq.n	800a4ba <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800a4b2:	f06f 0301 	mvn.w	r3, #1
 800a4b6:	61fb      	str	r3, [r7, #28]
 800a4b8:	e002      	b.n	800a4c0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800a4ba:	f06f 0302 	mvn.w	r3, #2
 800a4be:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a4c0:	69fb      	ldr	r3, [r7, #28]
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3720      	adds	r7, #32
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
 800a4ca:	bf00      	nop
 800a4cc:	e000ed04 	.word	0xe000ed04

0800a4d0 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b086      	sub	sp, #24
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d102      	bne.n	800a4e8 <osMessageQueueGetCount+0x18>
    count = 0U;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	617b      	str	r3, [r7, #20]
 800a4e6:	e00e      	b.n	800a506 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a4e8:	f3ef 8305 	mrs	r3, IPSR
 800a4ec:	60fb      	str	r3, [r7, #12]
  return(result);
 800a4ee:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d004      	beq.n	800a4fe <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800a4f4:	6938      	ldr	r0, [r7, #16]
 800a4f6:	f000 fd5c 	bl	800afb2 <uxQueueMessagesWaitingFromISR>
 800a4fa:	6178      	str	r0, [r7, #20]
 800a4fc:	e003      	b.n	800a506 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800a4fe:	6938      	ldr	r0, [r7, #16]
 800a500:	f000 fd38 	bl	800af74 <uxQueueMessagesWaiting>
 800a504:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800a506:	697b      	ldr	r3, [r7, #20]
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3718      	adds	r7, #24
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}

0800a510 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a510:	b480      	push	{r7}
 800a512:	b085      	sub	sp, #20
 800a514:	af00      	add	r7, sp, #0
 800a516:	60f8      	str	r0, [r7, #12]
 800a518:	60b9      	str	r1, [r7, #8]
 800a51a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	4a07      	ldr	r2, [pc, #28]	@ (800a53c <vApplicationGetIdleTaskMemory+0x2c>)
 800a520:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	4a06      	ldr	r2, [pc, #24]	@ (800a540 <vApplicationGetIdleTaskMemory+0x30>)
 800a526:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2280      	movs	r2, #128	@ 0x80
 800a52c:	601a      	str	r2, [r3, #0]
}
 800a52e:	bf00      	nop
 800a530:	3714      	adds	r7, #20
 800a532:	46bd      	mov	sp, r7
 800a534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a538:	4770      	bx	lr
 800a53a:	bf00      	nop
 800a53c:	2000076c 	.word	0x2000076c
 800a540:	2000081c 	.word	0x2000081c

0800a544 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a544:	b480      	push	{r7}
 800a546:	b085      	sub	sp, #20
 800a548:	af00      	add	r7, sp, #0
 800a54a:	60f8      	str	r0, [r7, #12]
 800a54c:	60b9      	str	r1, [r7, #8]
 800a54e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	4a07      	ldr	r2, [pc, #28]	@ (800a570 <vApplicationGetTimerTaskMemory+0x2c>)
 800a554:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	4a06      	ldr	r2, [pc, #24]	@ (800a574 <vApplicationGetTimerTaskMemory+0x30>)
 800a55a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a562:	601a      	str	r2, [r3, #0]
}
 800a564:	bf00      	nop
 800a566:	3714      	adds	r7, #20
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr
 800a570:	20000a1c 	.word	0x20000a1c
 800a574:	20000acc 	.word	0x20000acc

0800a578 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a578:	b480      	push	{r7}
 800a57a:	b083      	sub	sp, #12
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f103 0208 	add.w	r2, r3, #8
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f04f 32ff 	mov.w	r2, #4294967295
 800a590:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f103 0208 	add.w	r2, r3, #8
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f103 0208 	add.w	r2, r3, #8
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a5ac:	bf00      	nop
 800a5ae:	370c      	adds	r7, #12
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr

0800a5b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b083      	sub	sp, #12
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a5c6:	bf00      	nop
 800a5c8:	370c      	adds	r7, #12
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d0:	4770      	bx	lr

0800a5d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a5d2:	b480      	push	{r7}
 800a5d4:	b085      	sub	sp, #20
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
 800a5da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	68fa      	ldr	r2, [r7, #12]
 800a5e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	689a      	ldr	r2, [r3, #8]
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	689b      	ldr	r3, [r3, #8]
 800a5f4:	683a      	ldr	r2, [r7, #0]
 800a5f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	683a      	ldr	r2, [r7, #0]
 800a5fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	687a      	ldr	r2, [r7, #4]
 800a602:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	1c5a      	adds	r2, r3, #1
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	601a      	str	r2, [r3, #0]
}
 800a60e:	bf00      	nop
 800a610:	3714      	adds	r7, #20
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr

0800a61a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a61a:	b480      	push	{r7}
 800a61c:	b085      	sub	sp, #20
 800a61e:	af00      	add	r7, sp, #0
 800a620:	6078      	str	r0, [r7, #4]
 800a622:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a630:	d103      	bne.n	800a63a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	691b      	ldr	r3, [r3, #16]
 800a636:	60fb      	str	r3, [r7, #12]
 800a638:	e00c      	b.n	800a654 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	3308      	adds	r3, #8
 800a63e:	60fb      	str	r3, [r7, #12]
 800a640:	e002      	b.n	800a648 <vListInsert+0x2e>
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	60fb      	str	r3, [r7, #12]
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	68ba      	ldr	r2, [r7, #8]
 800a650:	429a      	cmp	r2, r3
 800a652:	d2f6      	bcs.n	800a642 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	685a      	ldr	r2, [r3, #4]
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	685b      	ldr	r3, [r3, #4]
 800a660:	683a      	ldr	r2, [r7, #0]
 800a662:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	68fa      	ldr	r2, [r7, #12]
 800a668:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	683a      	ldr	r2, [r7, #0]
 800a66e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	687a      	ldr	r2, [r7, #4]
 800a674:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	1c5a      	adds	r2, r3, #1
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	601a      	str	r2, [r3, #0]
}
 800a680:	bf00      	nop
 800a682:	3714      	adds	r7, #20
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr

0800a68c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a68c:	b480      	push	{r7}
 800a68e:	b085      	sub	sp, #20
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	691b      	ldr	r3, [r3, #16]
 800a698:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	685b      	ldr	r3, [r3, #4]
 800a69e:	687a      	ldr	r2, [r7, #4]
 800a6a0:	6892      	ldr	r2, [r2, #8]
 800a6a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	689b      	ldr	r3, [r3, #8]
 800a6a8:	687a      	ldr	r2, [r7, #4]
 800a6aa:	6852      	ldr	r2, [r2, #4]
 800a6ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	685b      	ldr	r3, [r3, #4]
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d103      	bne.n	800a6c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	689a      	ldr	r2, [r3, #8]
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	1e5a      	subs	r2, r3, #1
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3714      	adds	r7, #20
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr

0800a6e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b084      	sub	sp, #16
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
 800a6e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d10b      	bne.n	800a70c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a6f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6f8:	f383 8811 	msr	BASEPRI, r3
 800a6fc:	f3bf 8f6f 	isb	sy
 800a700:	f3bf 8f4f 	dsb	sy
 800a704:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a706:	bf00      	nop
 800a708:	bf00      	nop
 800a70a:	e7fd      	b.n	800a708 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a70c:	f002 fa7c 	bl	800cc08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681a      	ldr	r2, [r3, #0]
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a718:	68f9      	ldr	r1, [r7, #12]
 800a71a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a71c:	fb01 f303 	mul.w	r3, r1, r3
 800a720:	441a      	add	r2, r3
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2200      	movs	r2, #0
 800a72a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681a      	ldr	r2, [r3, #0]
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681a      	ldr	r2, [r3, #0]
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a73c:	3b01      	subs	r3, #1
 800a73e:	68f9      	ldr	r1, [r7, #12]
 800a740:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a742:	fb01 f303 	mul.w	r3, r1, r3
 800a746:	441a      	add	r2, r3
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	22ff      	movs	r2, #255	@ 0xff
 800a750:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	22ff      	movs	r2, #255	@ 0xff
 800a758:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d114      	bne.n	800a78c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	691b      	ldr	r3, [r3, #16]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d01a      	beq.n	800a7a0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	3310      	adds	r3, #16
 800a76e:	4618      	mov	r0, r3
 800a770:	f001 fac0 	bl	800bcf4 <xTaskRemoveFromEventList>
 800a774:	4603      	mov	r3, r0
 800a776:	2b00      	cmp	r3, #0
 800a778:	d012      	beq.n	800a7a0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a77a:	4b0d      	ldr	r3, [pc, #52]	@ (800a7b0 <xQueueGenericReset+0xd0>)
 800a77c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a780:	601a      	str	r2, [r3, #0]
 800a782:	f3bf 8f4f 	dsb	sy
 800a786:	f3bf 8f6f 	isb	sy
 800a78a:	e009      	b.n	800a7a0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	3310      	adds	r3, #16
 800a790:	4618      	mov	r0, r3
 800a792:	f7ff fef1 	bl	800a578 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	3324      	adds	r3, #36	@ 0x24
 800a79a:	4618      	mov	r0, r3
 800a79c:	f7ff feec 	bl	800a578 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a7a0:	f002 fa64 	bl	800cc6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a7a4:	2301      	movs	r3, #1
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3710      	adds	r7, #16
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	bf00      	nop
 800a7b0:	e000ed04 	.word	0xe000ed04

0800a7b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b08e      	sub	sp, #56	@ 0x38
 800a7b8:	af02      	add	r7, sp, #8
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	60b9      	str	r1, [r7, #8]
 800a7be:	607a      	str	r2, [r7, #4]
 800a7c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d10b      	bne.n	800a7e0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a7c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7cc:	f383 8811 	msr	BASEPRI, r3
 800a7d0:	f3bf 8f6f 	isb	sy
 800a7d4:	f3bf 8f4f 	dsb	sy
 800a7d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a7da:	bf00      	nop
 800a7dc:	bf00      	nop
 800a7de:	e7fd      	b.n	800a7dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d10b      	bne.n	800a7fe <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a7e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7ea:	f383 8811 	msr	BASEPRI, r3
 800a7ee:	f3bf 8f6f 	isb	sy
 800a7f2:	f3bf 8f4f 	dsb	sy
 800a7f6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a7f8:	bf00      	nop
 800a7fa:	bf00      	nop
 800a7fc:	e7fd      	b.n	800a7fa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d002      	beq.n	800a80a <xQueueGenericCreateStatic+0x56>
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d001      	beq.n	800a80e <xQueueGenericCreateStatic+0x5a>
 800a80a:	2301      	movs	r3, #1
 800a80c:	e000      	b.n	800a810 <xQueueGenericCreateStatic+0x5c>
 800a80e:	2300      	movs	r3, #0
 800a810:	2b00      	cmp	r3, #0
 800a812:	d10b      	bne.n	800a82c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a818:	f383 8811 	msr	BASEPRI, r3
 800a81c:	f3bf 8f6f 	isb	sy
 800a820:	f3bf 8f4f 	dsb	sy
 800a824:	623b      	str	r3, [r7, #32]
}
 800a826:	bf00      	nop
 800a828:	bf00      	nop
 800a82a:	e7fd      	b.n	800a828 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d102      	bne.n	800a838 <xQueueGenericCreateStatic+0x84>
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d101      	bne.n	800a83c <xQueueGenericCreateStatic+0x88>
 800a838:	2301      	movs	r3, #1
 800a83a:	e000      	b.n	800a83e <xQueueGenericCreateStatic+0x8a>
 800a83c:	2300      	movs	r3, #0
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d10b      	bne.n	800a85a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a846:	f383 8811 	msr	BASEPRI, r3
 800a84a:	f3bf 8f6f 	isb	sy
 800a84e:	f3bf 8f4f 	dsb	sy
 800a852:	61fb      	str	r3, [r7, #28]
}
 800a854:	bf00      	nop
 800a856:	bf00      	nop
 800a858:	e7fd      	b.n	800a856 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a85a:	2350      	movs	r3, #80	@ 0x50
 800a85c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	2b50      	cmp	r3, #80	@ 0x50
 800a862:	d00b      	beq.n	800a87c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a868:	f383 8811 	msr	BASEPRI, r3
 800a86c:	f3bf 8f6f 	isb	sy
 800a870:	f3bf 8f4f 	dsb	sy
 800a874:	61bb      	str	r3, [r7, #24]
}
 800a876:	bf00      	nop
 800a878:	bf00      	nop
 800a87a:	e7fd      	b.n	800a878 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a87c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a884:	2b00      	cmp	r3, #0
 800a886:	d00d      	beq.n	800a8a4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a88a:	2201      	movs	r2, #1
 800a88c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a890:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a896:	9300      	str	r3, [sp, #0]
 800a898:	4613      	mov	r3, r2
 800a89a:	687a      	ldr	r2, [r7, #4]
 800a89c:	68b9      	ldr	r1, [r7, #8]
 800a89e:	68f8      	ldr	r0, [r7, #12]
 800a8a0:	f000 f840 	bl	800a924 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a8a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3730      	adds	r7, #48	@ 0x30
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}

0800a8ae <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a8ae:	b580      	push	{r7, lr}
 800a8b0:	b08a      	sub	sp, #40	@ 0x28
 800a8b2:	af02      	add	r7, sp, #8
 800a8b4:	60f8      	str	r0, [r7, #12]
 800a8b6:	60b9      	str	r1, [r7, #8]
 800a8b8:	4613      	mov	r3, r2
 800a8ba:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d10b      	bne.n	800a8da <xQueueGenericCreate+0x2c>
	__asm volatile
 800a8c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8c6:	f383 8811 	msr	BASEPRI, r3
 800a8ca:	f3bf 8f6f 	isb	sy
 800a8ce:	f3bf 8f4f 	dsb	sy
 800a8d2:	613b      	str	r3, [r7, #16]
}
 800a8d4:	bf00      	nop
 800a8d6:	bf00      	nop
 800a8d8:	e7fd      	b.n	800a8d6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	68ba      	ldr	r2, [r7, #8]
 800a8de:	fb02 f303 	mul.w	r3, r2, r3
 800a8e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a8e4:	69fb      	ldr	r3, [r7, #28]
 800a8e6:	3350      	adds	r3, #80	@ 0x50
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f002 fb93 	bl	800d014 <pvPortMalloc>
 800a8ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a8f0:	69bb      	ldr	r3, [r7, #24]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d011      	beq.n	800a91a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a8f6:	69bb      	ldr	r3, [r7, #24]
 800a8f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	3350      	adds	r3, #80	@ 0x50
 800a8fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a900:	69bb      	ldr	r3, [r7, #24]
 800a902:	2200      	movs	r2, #0
 800a904:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a908:	79fa      	ldrb	r2, [r7, #7]
 800a90a:	69bb      	ldr	r3, [r7, #24]
 800a90c:	9300      	str	r3, [sp, #0]
 800a90e:	4613      	mov	r3, r2
 800a910:	697a      	ldr	r2, [r7, #20]
 800a912:	68b9      	ldr	r1, [r7, #8]
 800a914:	68f8      	ldr	r0, [r7, #12]
 800a916:	f000 f805 	bl	800a924 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a91a:	69bb      	ldr	r3, [r7, #24]
	}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3720      	adds	r7, #32
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}

0800a924 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b084      	sub	sp, #16
 800a928:	af00      	add	r7, sp, #0
 800a92a:	60f8      	str	r0, [r7, #12]
 800a92c:	60b9      	str	r1, [r7, #8]
 800a92e:	607a      	str	r2, [r7, #4]
 800a930:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d103      	bne.n	800a940 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a938:	69bb      	ldr	r3, [r7, #24]
 800a93a:	69ba      	ldr	r2, [r7, #24]
 800a93c:	601a      	str	r2, [r3, #0]
 800a93e:	e002      	b.n	800a946 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a940:	69bb      	ldr	r3, [r7, #24]
 800a942:	687a      	ldr	r2, [r7, #4]
 800a944:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a946:	69bb      	ldr	r3, [r7, #24]
 800a948:	68fa      	ldr	r2, [r7, #12]
 800a94a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a94c:	69bb      	ldr	r3, [r7, #24]
 800a94e:	68ba      	ldr	r2, [r7, #8]
 800a950:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a952:	2101      	movs	r1, #1
 800a954:	69b8      	ldr	r0, [r7, #24]
 800a956:	f7ff fec3 	bl	800a6e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a95a:	69bb      	ldr	r3, [r7, #24]
 800a95c:	78fa      	ldrb	r2, [r7, #3]
 800a95e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a962:	bf00      	nop
 800a964:	3710      	adds	r7, #16
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}
	...

0800a96c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b08e      	sub	sp, #56	@ 0x38
 800a970:	af00      	add	r7, sp, #0
 800a972:	60f8      	str	r0, [r7, #12]
 800a974:	60b9      	str	r1, [r7, #8]
 800a976:	607a      	str	r2, [r7, #4]
 800a978:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a97a:	2300      	movs	r3, #0
 800a97c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a984:	2b00      	cmp	r3, #0
 800a986:	d10b      	bne.n	800a9a0 <xQueueGenericSend+0x34>
	__asm volatile
 800a988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a98c:	f383 8811 	msr	BASEPRI, r3
 800a990:	f3bf 8f6f 	isb	sy
 800a994:	f3bf 8f4f 	dsb	sy
 800a998:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a99a:	bf00      	nop
 800a99c:	bf00      	nop
 800a99e:	e7fd      	b.n	800a99c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d103      	bne.n	800a9ae <xQueueGenericSend+0x42>
 800a9a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d101      	bne.n	800a9b2 <xQueueGenericSend+0x46>
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	e000      	b.n	800a9b4 <xQueueGenericSend+0x48>
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d10b      	bne.n	800a9d0 <xQueueGenericSend+0x64>
	__asm volatile
 800a9b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9bc:	f383 8811 	msr	BASEPRI, r3
 800a9c0:	f3bf 8f6f 	isb	sy
 800a9c4:	f3bf 8f4f 	dsb	sy
 800a9c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a9ca:	bf00      	nop
 800a9cc:	bf00      	nop
 800a9ce:	e7fd      	b.n	800a9cc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	2b02      	cmp	r3, #2
 800a9d4:	d103      	bne.n	800a9de <xQueueGenericSend+0x72>
 800a9d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9da:	2b01      	cmp	r3, #1
 800a9dc:	d101      	bne.n	800a9e2 <xQueueGenericSend+0x76>
 800a9de:	2301      	movs	r3, #1
 800a9e0:	e000      	b.n	800a9e4 <xQueueGenericSend+0x78>
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d10b      	bne.n	800aa00 <xQueueGenericSend+0x94>
	__asm volatile
 800a9e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9ec:	f383 8811 	msr	BASEPRI, r3
 800a9f0:	f3bf 8f6f 	isb	sy
 800a9f4:	f3bf 8f4f 	dsb	sy
 800a9f8:	623b      	str	r3, [r7, #32]
}
 800a9fa:	bf00      	nop
 800a9fc:	bf00      	nop
 800a9fe:	e7fd      	b.n	800a9fc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aa00:	f001 fb96 	bl	800c130 <xTaskGetSchedulerState>
 800aa04:	4603      	mov	r3, r0
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d102      	bne.n	800aa10 <xQueueGenericSend+0xa4>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d101      	bne.n	800aa14 <xQueueGenericSend+0xa8>
 800aa10:	2301      	movs	r3, #1
 800aa12:	e000      	b.n	800aa16 <xQueueGenericSend+0xaa>
 800aa14:	2300      	movs	r3, #0
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d10b      	bne.n	800aa32 <xQueueGenericSend+0xc6>
	__asm volatile
 800aa1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa1e:	f383 8811 	msr	BASEPRI, r3
 800aa22:	f3bf 8f6f 	isb	sy
 800aa26:	f3bf 8f4f 	dsb	sy
 800aa2a:	61fb      	str	r3, [r7, #28]
}
 800aa2c:	bf00      	nop
 800aa2e:	bf00      	nop
 800aa30:	e7fd      	b.n	800aa2e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aa32:	f002 f8e9 	bl	800cc08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aa36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d302      	bcc.n	800aa48 <xQueueGenericSend+0xdc>
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	2b02      	cmp	r3, #2
 800aa46:	d129      	bne.n	800aa9c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aa48:	683a      	ldr	r2, [r7, #0]
 800aa4a:	68b9      	ldr	r1, [r7, #8]
 800aa4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aa4e:	f000 facf 	bl	800aff0 <prvCopyDataToQueue>
 800aa52:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d010      	beq.n	800aa7e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa5e:	3324      	adds	r3, #36	@ 0x24
 800aa60:	4618      	mov	r0, r3
 800aa62:	f001 f947 	bl	800bcf4 <xTaskRemoveFromEventList>
 800aa66:	4603      	mov	r3, r0
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d013      	beq.n	800aa94 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800aa6c:	4b3f      	ldr	r3, [pc, #252]	@ (800ab6c <xQueueGenericSend+0x200>)
 800aa6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa72:	601a      	str	r2, [r3, #0]
 800aa74:	f3bf 8f4f 	dsb	sy
 800aa78:	f3bf 8f6f 	isb	sy
 800aa7c:	e00a      	b.n	800aa94 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800aa7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d007      	beq.n	800aa94 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800aa84:	4b39      	ldr	r3, [pc, #228]	@ (800ab6c <xQueueGenericSend+0x200>)
 800aa86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa8a:	601a      	str	r2, [r3, #0]
 800aa8c:	f3bf 8f4f 	dsb	sy
 800aa90:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800aa94:	f002 f8ea 	bl	800cc6c <vPortExitCritical>
				return pdPASS;
 800aa98:	2301      	movs	r3, #1
 800aa9a:	e063      	b.n	800ab64 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d103      	bne.n	800aaaa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aaa2:	f002 f8e3 	bl	800cc6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	e05c      	b.n	800ab64 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aaaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d106      	bne.n	800aabe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aab0:	f107 0314 	add.w	r3, r7, #20
 800aab4:	4618      	mov	r0, r3
 800aab6:	f001 f983 	bl	800bdc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aaba:	2301      	movs	r3, #1
 800aabc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aabe:	f002 f8d5 	bl	800cc6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aac2:	f000 fe6f 	bl	800b7a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aac6:	f002 f89f 	bl	800cc08 <vPortEnterCritical>
 800aaca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aacc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aad0:	b25b      	sxtb	r3, r3
 800aad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aad6:	d103      	bne.n	800aae0 <xQueueGenericSend+0x174>
 800aad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aada:	2200      	movs	r2, #0
 800aadc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aae6:	b25b      	sxtb	r3, r3
 800aae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaec:	d103      	bne.n	800aaf6 <xQueueGenericSend+0x18a>
 800aaee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aaf6:	f002 f8b9 	bl	800cc6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aafa:	1d3a      	adds	r2, r7, #4
 800aafc:	f107 0314 	add.w	r3, r7, #20
 800ab00:	4611      	mov	r1, r2
 800ab02:	4618      	mov	r0, r3
 800ab04:	f001 f972 	bl	800bdec <xTaskCheckForTimeOut>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d124      	bne.n	800ab58 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ab0e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab10:	f000 fb66 	bl	800b1e0 <prvIsQueueFull>
 800ab14:	4603      	mov	r3, r0
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d018      	beq.n	800ab4c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ab1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab1c:	3310      	adds	r3, #16
 800ab1e:	687a      	ldr	r2, [r7, #4]
 800ab20:	4611      	mov	r1, r2
 800ab22:	4618      	mov	r0, r3
 800ab24:	f001 f894 	bl	800bc50 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ab28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab2a:	f000 faf1 	bl	800b110 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ab2e:	f000 fe7f 	bl	800b830 <xTaskResumeAll>
 800ab32:	4603      	mov	r3, r0
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	f47f af7c 	bne.w	800aa32 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800ab3a:	4b0c      	ldr	r3, [pc, #48]	@ (800ab6c <xQueueGenericSend+0x200>)
 800ab3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab40:	601a      	str	r2, [r3, #0]
 800ab42:	f3bf 8f4f 	dsb	sy
 800ab46:	f3bf 8f6f 	isb	sy
 800ab4a:	e772      	b.n	800aa32 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ab4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab4e:	f000 fadf 	bl	800b110 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab52:	f000 fe6d 	bl	800b830 <xTaskResumeAll>
 800ab56:	e76c      	b.n	800aa32 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ab58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab5a:	f000 fad9 	bl	800b110 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab5e:	f000 fe67 	bl	800b830 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ab62:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	3738      	adds	r7, #56	@ 0x38
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}
 800ab6c:	e000ed04 	.word	0xe000ed04

0800ab70 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b090      	sub	sp, #64	@ 0x40
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	60f8      	str	r0, [r7, #12]
 800ab78:	60b9      	str	r1, [r7, #8]
 800ab7a:	607a      	str	r2, [r7, #4]
 800ab7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800ab82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d10b      	bne.n	800aba0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800ab88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab8c:	f383 8811 	msr	BASEPRI, r3
 800ab90:	f3bf 8f6f 	isb	sy
 800ab94:	f3bf 8f4f 	dsb	sy
 800ab98:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ab9a:	bf00      	nop
 800ab9c:	bf00      	nop
 800ab9e:	e7fd      	b.n	800ab9c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d103      	bne.n	800abae <xQueueGenericSendFromISR+0x3e>
 800aba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d101      	bne.n	800abb2 <xQueueGenericSendFromISR+0x42>
 800abae:	2301      	movs	r3, #1
 800abb0:	e000      	b.n	800abb4 <xQueueGenericSendFromISR+0x44>
 800abb2:	2300      	movs	r3, #0
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d10b      	bne.n	800abd0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800abb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abbc:	f383 8811 	msr	BASEPRI, r3
 800abc0:	f3bf 8f6f 	isb	sy
 800abc4:	f3bf 8f4f 	dsb	sy
 800abc8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800abca:	bf00      	nop
 800abcc:	bf00      	nop
 800abce:	e7fd      	b.n	800abcc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	2b02      	cmp	r3, #2
 800abd4:	d103      	bne.n	800abde <xQueueGenericSendFromISR+0x6e>
 800abd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abda:	2b01      	cmp	r3, #1
 800abdc:	d101      	bne.n	800abe2 <xQueueGenericSendFromISR+0x72>
 800abde:	2301      	movs	r3, #1
 800abe0:	e000      	b.n	800abe4 <xQueueGenericSendFromISR+0x74>
 800abe2:	2300      	movs	r3, #0
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d10b      	bne.n	800ac00 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800abe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abec:	f383 8811 	msr	BASEPRI, r3
 800abf0:	f3bf 8f6f 	isb	sy
 800abf4:	f3bf 8f4f 	dsb	sy
 800abf8:	623b      	str	r3, [r7, #32]
}
 800abfa:	bf00      	nop
 800abfc:	bf00      	nop
 800abfe:	e7fd      	b.n	800abfc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ac00:	f002 f9c6 	bl	800cf90 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ac04:	f3ef 8211 	mrs	r2, BASEPRI
 800ac08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac0c:	f383 8811 	msr	BASEPRI, r3
 800ac10:	f3bf 8f6f 	isb	sy
 800ac14:	f3bf 8f4f 	dsb	sy
 800ac18:	61fa      	str	r2, [r7, #28]
 800ac1a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ac1c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ac1e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ac20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ac24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	d302      	bcc.n	800ac32 <xQueueGenericSendFromISR+0xc2>
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	2b02      	cmp	r3, #2
 800ac30:	d12f      	bne.n	800ac92 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ac32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac34:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ac38:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac40:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ac42:	683a      	ldr	r2, [r7, #0]
 800ac44:	68b9      	ldr	r1, [r7, #8]
 800ac46:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ac48:	f000 f9d2 	bl	800aff0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ac4c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800ac50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac54:	d112      	bne.n	800ac7c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d016      	beq.n	800ac8c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac60:	3324      	adds	r3, #36	@ 0x24
 800ac62:	4618      	mov	r0, r3
 800ac64:	f001 f846 	bl	800bcf4 <xTaskRemoveFromEventList>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d00e      	beq.n	800ac8c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d00b      	beq.n	800ac8c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2201      	movs	r2, #1
 800ac78:	601a      	str	r2, [r3, #0]
 800ac7a:	e007      	b.n	800ac8c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ac7c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ac80:	3301      	adds	r3, #1
 800ac82:	b2db      	uxtb	r3, r3
 800ac84:	b25a      	sxtb	r2, r3
 800ac86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800ac90:	e001      	b.n	800ac96 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ac92:	2300      	movs	r3, #0
 800ac94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac98:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800aca0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aca2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3740      	adds	r7, #64	@ 0x40
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}

0800acac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b08c      	sub	sp, #48	@ 0x30
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	60f8      	str	r0, [r7, #12]
 800acb4:	60b9      	str	r1, [r7, #8]
 800acb6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800acb8:	2300      	movs	r3, #0
 800acba:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800acc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d10b      	bne.n	800acde <xQueueReceive+0x32>
	__asm volatile
 800acc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acca:	f383 8811 	msr	BASEPRI, r3
 800acce:	f3bf 8f6f 	isb	sy
 800acd2:	f3bf 8f4f 	dsb	sy
 800acd6:	623b      	str	r3, [r7, #32]
}
 800acd8:	bf00      	nop
 800acda:	bf00      	nop
 800acdc:	e7fd      	b.n	800acda <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d103      	bne.n	800acec <xQueueReceive+0x40>
 800ace4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ace6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d101      	bne.n	800acf0 <xQueueReceive+0x44>
 800acec:	2301      	movs	r3, #1
 800acee:	e000      	b.n	800acf2 <xQueueReceive+0x46>
 800acf0:	2300      	movs	r3, #0
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d10b      	bne.n	800ad0e <xQueueReceive+0x62>
	__asm volatile
 800acf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acfa:	f383 8811 	msr	BASEPRI, r3
 800acfe:	f3bf 8f6f 	isb	sy
 800ad02:	f3bf 8f4f 	dsb	sy
 800ad06:	61fb      	str	r3, [r7, #28]
}
 800ad08:	bf00      	nop
 800ad0a:	bf00      	nop
 800ad0c:	e7fd      	b.n	800ad0a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ad0e:	f001 fa0f 	bl	800c130 <xTaskGetSchedulerState>
 800ad12:	4603      	mov	r3, r0
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d102      	bne.n	800ad1e <xQueueReceive+0x72>
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d101      	bne.n	800ad22 <xQueueReceive+0x76>
 800ad1e:	2301      	movs	r3, #1
 800ad20:	e000      	b.n	800ad24 <xQueueReceive+0x78>
 800ad22:	2300      	movs	r3, #0
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d10b      	bne.n	800ad40 <xQueueReceive+0x94>
	__asm volatile
 800ad28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad2c:	f383 8811 	msr	BASEPRI, r3
 800ad30:	f3bf 8f6f 	isb	sy
 800ad34:	f3bf 8f4f 	dsb	sy
 800ad38:	61bb      	str	r3, [r7, #24]
}
 800ad3a:	bf00      	nop
 800ad3c:	bf00      	nop
 800ad3e:	e7fd      	b.n	800ad3c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ad40:	f001 ff62 	bl	800cc08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad48:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ad4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d01f      	beq.n	800ad90 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ad50:	68b9      	ldr	r1, [r7, #8]
 800ad52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad54:	f000 f9b6 	bl	800b0c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ad58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad5a:	1e5a      	subs	r2, r3, #1
 800ad5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad5e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad62:	691b      	ldr	r3, [r3, #16]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d00f      	beq.n	800ad88 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad6a:	3310      	adds	r3, #16
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f000 ffc1 	bl	800bcf4 <xTaskRemoveFromEventList>
 800ad72:	4603      	mov	r3, r0
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d007      	beq.n	800ad88 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ad78:	4b3c      	ldr	r3, [pc, #240]	@ (800ae6c <xQueueReceive+0x1c0>)
 800ad7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad7e:	601a      	str	r2, [r3, #0]
 800ad80:	f3bf 8f4f 	dsb	sy
 800ad84:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ad88:	f001 ff70 	bl	800cc6c <vPortExitCritical>
				return pdPASS;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	e069      	b.n	800ae64 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d103      	bne.n	800ad9e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ad96:	f001 ff69 	bl	800cc6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	e062      	b.n	800ae64 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d106      	bne.n	800adb2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ada4:	f107 0310 	add.w	r3, r7, #16
 800ada8:	4618      	mov	r0, r3
 800adaa:	f001 f809 	bl	800bdc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800adae:	2301      	movs	r3, #1
 800adb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800adb2:	f001 ff5b 	bl	800cc6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800adb6:	f000 fcf5 	bl	800b7a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800adba:	f001 ff25 	bl	800cc08 <vPortEnterCritical>
 800adbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adc0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800adc4:	b25b      	sxtb	r3, r3
 800adc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adca:	d103      	bne.n	800add4 <xQueueReceive+0x128>
 800adcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adce:	2200      	movs	r2, #0
 800add0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800add4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800add6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800adda:	b25b      	sxtb	r3, r3
 800addc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ade0:	d103      	bne.n	800adea <xQueueReceive+0x13e>
 800ade2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ade4:	2200      	movs	r2, #0
 800ade6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800adea:	f001 ff3f 	bl	800cc6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800adee:	1d3a      	adds	r2, r7, #4
 800adf0:	f107 0310 	add.w	r3, r7, #16
 800adf4:	4611      	mov	r1, r2
 800adf6:	4618      	mov	r0, r3
 800adf8:	f000 fff8 	bl	800bdec <xTaskCheckForTimeOut>
 800adfc:	4603      	mov	r3, r0
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d123      	bne.n	800ae4a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae04:	f000 f9d6 	bl	800b1b4 <prvIsQueueEmpty>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d017      	beq.n	800ae3e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ae0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae10:	3324      	adds	r3, #36	@ 0x24
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	4611      	mov	r1, r2
 800ae16:	4618      	mov	r0, r3
 800ae18:	f000 ff1a 	bl	800bc50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ae1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae1e:	f000 f977 	bl	800b110 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ae22:	f000 fd05 	bl	800b830 <xTaskResumeAll>
 800ae26:	4603      	mov	r3, r0
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d189      	bne.n	800ad40 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ae2c:	4b0f      	ldr	r3, [pc, #60]	@ (800ae6c <xQueueReceive+0x1c0>)
 800ae2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae32:	601a      	str	r2, [r3, #0]
 800ae34:	f3bf 8f4f 	dsb	sy
 800ae38:	f3bf 8f6f 	isb	sy
 800ae3c:	e780      	b.n	800ad40 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ae3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae40:	f000 f966 	bl	800b110 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ae44:	f000 fcf4 	bl	800b830 <xTaskResumeAll>
 800ae48:	e77a      	b.n	800ad40 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ae4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae4c:	f000 f960 	bl	800b110 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae50:	f000 fcee 	bl	800b830 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae56:	f000 f9ad 	bl	800b1b4 <prvIsQueueEmpty>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	f43f af6f 	beq.w	800ad40 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ae62:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3730      	adds	r7, #48	@ 0x30
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}
 800ae6c:	e000ed04 	.word	0xe000ed04

0800ae70 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b08e      	sub	sp, #56	@ 0x38
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	60f8      	str	r0, [r7, #12]
 800ae78:	60b9      	str	r1, [r7, #8]
 800ae7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ae80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d10b      	bne.n	800ae9e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800ae86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae8a:	f383 8811 	msr	BASEPRI, r3
 800ae8e:	f3bf 8f6f 	isb	sy
 800ae92:	f3bf 8f4f 	dsb	sy
 800ae96:	623b      	str	r3, [r7, #32]
}
 800ae98:	bf00      	nop
 800ae9a:	bf00      	nop
 800ae9c:	e7fd      	b.n	800ae9a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d103      	bne.n	800aeac <xQueueReceiveFromISR+0x3c>
 800aea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d101      	bne.n	800aeb0 <xQueueReceiveFromISR+0x40>
 800aeac:	2301      	movs	r3, #1
 800aeae:	e000      	b.n	800aeb2 <xQueueReceiveFromISR+0x42>
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d10b      	bne.n	800aece <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800aeb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeba:	f383 8811 	msr	BASEPRI, r3
 800aebe:	f3bf 8f6f 	isb	sy
 800aec2:	f3bf 8f4f 	dsb	sy
 800aec6:	61fb      	str	r3, [r7, #28]
}
 800aec8:	bf00      	nop
 800aeca:	bf00      	nop
 800aecc:	e7fd      	b.n	800aeca <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aece:	f002 f85f 	bl	800cf90 <vPortValidateInterruptPriority>
	__asm volatile
 800aed2:	f3ef 8211 	mrs	r2, BASEPRI
 800aed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeda:	f383 8811 	msr	BASEPRI, r3
 800aede:	f3bf 8f6f 	isb	sy
 800aee2:	f3bf 8f4f 	dsb	sy
 800aee6:	61ba      	str	r2, [r7, #24]
 800aee8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800aeea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aeec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aeee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aef2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d02f      	beq.n	800af5a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800aefa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aefc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800af00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800af04:	68b9      	ldr	r1, [r7, #8]
 800af06:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800af08:	f000 f8dc 	bl	800b0c4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800af0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af0e:	1e5a      	subs	r2, r3, #1
 800af10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af12:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800af14:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800af18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af1c:	d112      	bne.n	800af44 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af20:	691b      	ldr	r3, [r3, #16]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d016      	beq.n	800af54 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af28:	3310      	adds	r3, #16
 800af2a:	4618      	mov	r0, r3
 800af2c:	f000 fee2 	bl	800bcf4 <xTaskRemoveFromEventList>
 800af30:	4603      	mov	r3, r0
 800af32:	2b00      	cmp	r3, #0
 800af34:	d00e      	beq.n	800af54 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d00b      	beq.n	800af54 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2201      	movs	r2, #1
 800af40:	601a      	str	r2, [r3, #0]
 800af42:	e007      	b.n	800af54 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800af44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800af48:	3301      	adds	r3, #1
 800af4a:	b2db      	uxtb	r3, r3
 800af4c:	b25a      	sxtb	r2, r3
 800af4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800af54:	2301      	movs	r3, #1
 800af56:	637b      	str	r3, [r7, #52]	@ 0x34
 800af58:	e001      	b.n	800af5e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800af5a:	2300      	movs	r3, #0
 800af5c:	637b      	str	r3, [r7, #52]	@ 0x34
 800af5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af60:	613b      	str	r3, [r7, #16]
	__asm volatile
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	f383 8811 	msr	BASEPRI, r3
}
 800af68:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800af6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3738      	adds	r7, #56	@ 0x38
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b084      	sub	sp, #16
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d10b      	bne.n	800af9a <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800af82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af86:	f383 8811 	msr	BASEPRI, r3
 800af8a:	f3bf 8f6f 	isb	sy
 800af8e:	f3bf 8f4f 	dsb	sy
 800af92:	60bb      	str	r3, [r7, #8]
}
 800af94:	bf00      	nop
 800af96:	bf00      	nop
 800af98:	e7fd      	b.n	800af96 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800af9a:	f001 fe35 	bl	800cc08 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afa2:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800afa4:	f001 fe62 	bl	800cc6c <vPortExitCritical>

	return uxReturn;
 800afa8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800afaa:	4618      	mov	r0, r3
 800afac:	3710      	adds	r7, #16
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}

0800afb2 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800afb2:	b480      	push	{r7}
 800afb4:	b087      	sub	sp, #28
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d10b      	bne.n	800afdc <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 800afc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afc8:	f383 8811 	msr	BASEPRI, r3
 800afcc:	f3bf 8f6f 	isb	sy
 800afd0:	f3bf 8f4f 	dsb	sy
 800afd4:	60fb      	str	r3, [r7, #12]
}
 800afd6:	bf00      	nop
 800afd8:	bf00      	nop
 800afda:	e7fd      	b.n	800afd8 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afe0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800afe2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800afe4:	4618      	mov	r0, r3
 800afe6:	371c      	adds	r7, #28
 800afe8:	46bd      	mov	sp, r7
 800afea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afee:	4770      	bx	lr

0800aff0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b086      	sub	sp, #24
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	60f8      	str	r0, [r7, #12]
 800aff8:	60b9      	str	r1, [r7, #8]
 800affa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800affc:	2300      	movs	r3, #0
 800affe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b004:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d10d      	bne.n	800b02a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d14d      	bne.n	800b0b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	689b      	ldr	r3, [r3, #8]
 800b01a:	4618      	mov	r0, r3
 800b01c:	f001 f8a6 	bl	800c16c <xTaskPriorityDisinherit>
 800b020:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	2200      	movs	r2, #0
 800b026:	609a      	str	r2, [r3, #8]
 800b028:	e043      	b.n	800b0b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d119      	bne.n	800b064 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	6858      	ldr	r0, [r3, #4]
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b038:	461a      	mov	r2, r3
 800b03a:	68b9      	ldr	r1, [r7, #8]
 800b03c:	f004 f8a3 	bl	800f186 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	685a      	ldr	r2, [r3, #4]
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b048:	441a      	add	r2, r3
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	685a      	ldr	r2, [r3, #4]
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	689b      	ldr	r3, [r3, #8]
 800b056:	429a      	cmp	r2, r3
 800b058:	d32b      	bcc.n	800b0b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	605a      	str	r2, [r3, #4]
 800b062:	e026      	b.n	800b0b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	68d8      	ldr	r0, [r3, #12]
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b06c:	461a      	mov	r2, r3
 800b06e:	68b9      	ldr	r1, [r7, #8]
 800b070:	f004 f889 	bl	800f186 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	68da      	ldr	r2, [r3, #12]
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b07c:	425b      	negs	r3, r3
 800b07e:	441a      	add	r2, r3
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	68da      	ldr	r2, [r3, #12]
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d207      	bcs.n	800b0a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	689a      	ldr	r2, [r3, #8]
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b098:	425b      	negs	r3, r3
 800b09a:	441a      	add	r2, r3
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2b02      	cmp	r3, #2
 800b0a4:	d105      	bne.n	800b0b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d002      	beq.n	800b0b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	3b01      	subs	r3, #1
 800b0b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	1c5a      	adds	r2, r3, #1
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b0ba:	697b      	ldr	r3, [r7, #20]
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3718      	adds	r7, #24
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}

0800b0c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b082      	sub	sp, #8
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
 800b0cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d018      	beq.n	800b108 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	68da      	ldr	r2, [r3, #12]
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0de:	441a      	add	r2, r3
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	68da      	ldr	r2, [r3, #12]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	689b      	ldr	r3, [r3, #8]
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	d303      	bcc.n	800b0f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681a      	ldr	r2, [r3, #0]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	68d9      	ldr	r1, [r3, #12]
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b100:	461a      	mov	r2, r3
 800b102:	6838      	ldr	r0, [r7, #0]
 800b104:	f004 f83f 	bl	800f186 <memcpy>
	}
}
 800b108:	bf00      	nop
 800b10a:	3708      	adds	r7, #8
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}

0800b110 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b084      	sub	sp, #16
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b118:	f001 fd76 	bl	800cc08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b122:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b124:	e011      	b.n	800b14a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d012      	beq.n	800b154 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	3324      	adds	r3, #36	@ 0x24
 800b132:	4618      	mov	r0, r3
 800b134:	f000 fdde 	bl	800bcf4 <xTaskRemoveFromEventList>
 800b138:	4603      	mov	r3, r0
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d001      	beq.n	800b142 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b13e:	f000 feb9 	bl	800beb4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b142:	7bfb      	ldrb	r3, [r7, #15]
 800b144:	3b01      	subs	r3, #1
 800b146:	b2db      	uxtb	r3, r3
 800b148:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b14a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	dce9      	bgt.n	800b126 <prvUnlockQueue+0x16>
 800b152:	e000      	b.n	800b156 <prvUnlockQueue+0x46>
					break;
 800b154:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	22ff      	movs	r2, #255	@ 0xff
 800b15a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b15e:	f001 fd85 	bl	800cc6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b162:	f001 fd51 	bl	800cc08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b16c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b16e:	e011      	b.n	800b194 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	691b      	ldr	r3, [r3, #16]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d012      	beq.n	800b19e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	3310      	adds	r3, #16
 800b17c:	4618      	mov	r0, r3
 800b17e:	f000 fdb9 	bl	800bcf4 <xTaskRemoveFromEventList>
 800b182:	4603      	mov	r3, r0
 800b184:	2b00      	cmp	r3, #0
 800b186:	d001      	beq.n	800b18c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b188:	f000 fe94 	bl	800beb4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b18c:	7bbb      	ldrb	r3, [r7, #14]
 800b18e:	3b01      	subs	r3, #1
 800b190:	b2db      	uxtb	r3, r3
 800b192:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b194:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	dce9      	bgt.n	800b170 <prvUnlockQueue+0x60>
 800b19c:	e000      	b.n	800b1a0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b19e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	22ff      	movs	r2, #255	@ 0xff
 800b1a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b1a8:	f001 fd60 	bl	800cc6c <vPortExitCritical>
}
 800b1ac:	bf00      	nop
 800b1ae:	3710      	adds	r7, #16
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b084      	sub	sp, #16
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b1bc:	f001 fd24 	bl	800cc08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d102      	bne.n	800b1ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	60fb      	str	r3, [r7, #12]
 800b1cc:	e001      	b.n	800b1d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b1d2:	f001 fd4b 	bl	800cc6c <vPortExitCritical>

	return xReturn;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3710      	adds	r7, #16
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}

0800b1e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b084      	sub	sp, #16
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b1e8:	f001 fd0e 	bl	800cc08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	d102      	bne.n	800b1fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	60fb      	str	r3, [r7, #12]
 800b1fc:	e001      	b.n	800b202 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b1fe:	2300      	movs	r3, #0
 800b200:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b202:	f001 fd33 	bl	800cc6c <vPortExitCritical>

	return xReturn;
 800b206:	68fb      	ldr	r3, [r7, #12]
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3710      	adds	r7, #16
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}

0800b210 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b210:	b480      	push	{r7}
 800b212:	b085      	sub	sp, #20
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
 800b218:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b21a:	2300      	movs	r3, #0
 800b21c:	60fb      	str	r3, [r7, #12]
 800b21e:	e014      	b.n	800b24a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b220:	4a0f      	ldr	r2, [pc, #60]	@ (800b260 <vQueueAddToRegistry+0x50>)
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d10b      	bne.n	800b244 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b22c:	490c      	ldr	r1, [pc, #48]	@ (800b260 <vQueueAddToRegistry+0x50>)
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	683a      	ldr	r2, [r7, #0]
 800b232:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b236:	4a0a      	ldr	r2, [pc, #40]	@ (800b260 <vQueueAddToRegistry+0x50>)
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	00db      	lsls	r3, r3, #3
 800b23c:	4413      	add	r3, r2
 800b23e:	687a      	ldr	r2, [r7, #4]
 800b240:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b242:	e006      	b.n	800b252 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	3301      	adds	r3, #1
 800b248:	60fb      	str	r3, [r7, #12]
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	2b0f      	cmp	r3, #15
 800b24e:	d9e7      	bls.n	800b220 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b250:	bf00      	nop
 800b252:	bf00      	nop
 800b254:	3714      	adds	r7, #20
 800b256:	46bd      	mov	sp, r7
 800b258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25c:	4770      	bx	lr
 800b25e:	bf00      	nop
 800b260:	20000ecc 	.word	0x20000ecc

0800b264 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b264:	b580      	push	{r7, lr}
 800b266:	b086      	sub	sp, #24
 800b268:	af00      	add	r7, sp, #0
 800b26a:	60f8      	str	r0, [r7, #12]
 800b26c:	60b9      	str	r1, [r7, #8]
 800b26e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b274:	f001 fcc8 	bl	800cc08 <vPortEnterCritical>
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b27e:	b25b      	sxtb	r3, r3
 800b280:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b284:	d103      	bne.n	800b28e <vQueueWaitForMessageRestricted+0x2a>
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	2200      	movs	r2, #0
 800b28a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b294:	b25b      	sxtb	r3, r3
 800b296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b29a:	d103      	bne.n	800b2a4 <vQueueWaitForMessageRestricted+0x40>
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b2a4:	f001 fce2 	bl	800cc6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d106      	bne.n	800b2be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b2b0:	697b      	ldr	r3, [r7, #20]
 800b2b2:	3324      	adds	r3, #36	@ 0x24
 800b2b4:	687a      	ldr	r2, [r7, #4]
 800b2b6:	68b9      	ldr	r1, [r7, #8]
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f000 fcef 	bl	800bc9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b2be:	6978      	ldr	r0, [r7, #20]
 800b2c0:	f7ff ff26 	bl	800b110 <prvUnlockQueue>
	}
 800b2c4:	bf00      	nop
 800b2c6:	3718      	adds	r7, #24
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}

0800b2cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b08e      	sub	sp, #56	@ 0x38
 800b2d0:	af04      	add	r7, sp, #16
 800b2d2:	60f8      	str	r0, [r7, #12]
 800b2d4:	60b9      	str	r1, [r7, #8]
 800b2d6:	607a      	str	r2, [r7, #4]
 800b2d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b2da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d10b      	bne.n	800b2f8 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b2e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2e4:	f383 8811 	msr	BASEPRI, r3
 800b2e8:	f3bf 8f6f 	isb	sy
 800b2ec:	f3bf 8f4f 	dsb	sy
 800b2f0:	623b      	str	r3, [r7, #32]
}
 800b2f2:	bf00      	nop
 800b2f4:	bf00      	nop
 800b2f6:	e7fd      	b.n	800b2f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b2f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d10b      	bne.n	800b316 <xTaskCreateStatic+0x4a>
	__asm volatile
 800b2fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b302:	f383 8811 	msr	BASEPRI, r3
 800b306:	f3bf 8f6f 	isb	sy
 800b30a:	f3bf 8f4f 	dsb	sy
 800b30e:	61fb      	str	r3, [r7, #28]
}
 800b310:	bf00      	nop
 800b312:	bf00      	nop
 800b314:	e7fd      	b.n	800b312 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b316:	23b0      	movs	r3, #176	@ 0xb0
 800b318:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b31a:	693b      	ldr	r3, [r7, #16]
 800b31c:	2bb0      	cmp	r3, #176	@ 0xb0
 800b31e:	d00b      	beq.n	800b338 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b324:	f383 8811 	msr	BASEPRI, r3
 800b328:	f3bf 8f6f 	isb	sy
 800b32c:	f3bf 8f4f 	dsb	sy
 800b330:	61bb      	str	r3, [r7, #24]
}
 800b332:	bf00      	nop
 800b334:	bf00      	nop
 800b336:	e7fd      	b.n	800b334 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b338:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b33a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d01e      	beq.n	800b37e <xTaskCreateStatic+0xb2>
 800b340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b342:	2b00      	cmp	r3, #0
 800b344:	d01b      	beq.n	800b37e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b348:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b34c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b34e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b352:	2202      	movs	r2, #2
 800b354:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b358:	2300      	movs	r3, #0
 800b35a:	9303      	str	r3, [sp, #12]
 800b35c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b35e:	9302      	str	r3, [sp, #8]
 800b360:	f107 0314 	add.w	r3, r7, #20
 800b364:	9301      	str	r3, [sp, #4]
 800b366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b368:	9300      	str	r3, [sp, #0]
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	687a      	ldr	r2, [r7, #4]
 800b36e:	68b9      	ldr	r1, [r7, #8]
 800b370:	68f8      	ldr	r0, [r7, #12]
 800b372:	f000 f851 	bl	800b418 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b376:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b378:	f000 f8fc 	bl	800b574 <prvAddNewTaskToReadyList>
 800b37c:	e001      	b.n	800b382 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b37e:	2300      	movs	r3, #0
 800b380:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b382:	697b      	ldr	r3, [r7, #20]
	}
 800b384:	4618      	mov	r0, r3
 800b386:	3728      	adds	r7, #40	@ 0x28
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}

0800b38c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b08c      	sub	sp, #48	@ 0x30
 800b390:	af04      	add	r7, sp, #16
 800b392:	60f8      	str	r0, [r7, #12]
 800b394:	60b9      	str	r1, [r7, #8]
 800b396:	603b      	str	r3, [r7, #0]
 800b398:	4613      	mov	r3, r2
 800b39a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b39c:	88fb      	ldrh	r3, [r7, #6]
 800b39e:	009b      	lsls	r3, r3, #2
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f001 fe37 	bl	800d014 <pvPortMalloc>
 800b3a6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d00e      	beq.n	800b3cc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b3ae:	20b0      	movs	r0, #176	@ 0xb0
 800b3b0:	f001 fe30 	bl	800d014 <pvPortMalloc>
 800b3b4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b3b6:	69fb      	ldr	r3, [r7, #28]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d003      	beq.n	800b3c4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b3bc:	69fb      	ldr	r3, [r7, #28]
 800b3be:	697a      	ldr	r2, [r7, #20]
 800b3c0:	631a      	str	r2, [r3, #48]	@ 0x30
 800b3c2:	e005      	b.n	800b3d0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b3c4:	6978      	ldr	r0, [r7, #20]
 800b3c6:	f001 fef3 	bl	800d1b0 <vPortFree>
 800b3ca:	e001      	b.n	800b3d0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b3d0:	69fb      	ldr	r3, [r7, #28]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d017      	beq.n	800b406 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b3d6:	69fb      	ldr	r3, [r7, #28]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b3de:	88fa      	ldrh	r2, [r7, #6]
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	9303      	str	r3, [sp, #12]
 800b3e4:	69fb      	ldr	r3, [r7, #28]
 800b3e6:	9302      	str	r3, [sp, #8]
 800b3e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3ea:	9301      	str	r3, [sp, #4]
 800b3ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3ee:	9300      	str	r3, [sp, #0]
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	68b9      	ldr	r1, [r7, #8]
 800b3f4:	68f8      	ldr	r0, [r7, #12]
 800b3f6:	f000 f80f 	bl	800b418 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b3fa:	69f8      	ldr	r0, [r7, #28]
 800b3fc:	f000 f8ba 	bl	800b574 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b400:	2301      	movs	r3, #1
 800b402:	61bb      	str	r3, [r7, #24]
 800b404:	e002      	b.n	800b40c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b406:	f04f 33ff 	mov.w	r3, #4294967295
 800b40a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b40c:	69bb      	ldr	r3, [r7, #24]
	}
 800b40e:	4618      	mov	r0, r3
 800b410:	3720      	adds	r7, #32
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}
	...

0800b418 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b088      	sub	sp, #32
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	60f8      	str	r0, [r7, #12]
 800b420:	60b9      	str	r1, [r7, #8]
 800b422:	607a      	str	r2, [r7, #4]
 800b424:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b428:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	009b      	lsls	r3, r3, #2
 800b42e:	461a      	mov	r2, r3
 800b430:	21a5      	movs	r1, #165	@ 0xa5
 800b432:	f003 fdb8 	bl	800efa6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b438:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b440:	3b01      	subs	r3, #1
 800b442:	009b      	lsls	r3, r3, #2
 800b444:	4413      	add	r3, r2
 800b446:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b448:	69bb      	ldr	r3, [r7, #24]
 800b44a:	f023 0307 	bic.w	r3, r3, #7
 800b44e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b450:	69bb      	ldr	r3, [r7, #24]
 800b452:	f003 0307 	and.w	r3, r3, #7
 800b456:	2b00      	cmp	r3, #0
 800b458:	d00b      	beq.n	800b472 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b45a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b45e:	f383 8811 	msr	BASEPRI, r3
 800b462:	f3bf 8f6f 	isb	sy
 800b466:	f3bf 8f4f 	dsb	sy
 800b46a:	617b      	str	r3, [r7, #20]
}
 800b46c:	bf00      	nop
 800b46e:	bf00      	nop
 800b470:	e7fd      	b.n	800b46e <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800b472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b474:	69ba      	ldr	r2, [r7, #24]
 800b476:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d01f      	beq.n	800b4be <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b47e:	2300      	movs	r3, #0
 800b480:	61fb      	str	r3, [r7, #28]
 800b482:	e012      	b.n	800b4aa <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b484:	68ba      	ldr	r2, [r7, #8]
 800b486:	69fb      	ldr	r3, [r7, #28]
 800b488:	4413      	add	r3, r2
 800b48a:	7819      	ldrb	r1, [r3, #0]
 800b48c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b48e:	69fb      	ldr	r3, [r7, #28]
 800b490:	4413      	add	r3, r2
 800b492:	3334      	adds	r3, #52	@ 0x34
 800b494:	460a      	mov	r2, r1
 800b496:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b498:	68ba      	ldr	r2, [r7, #8]
 800b49a:	69fb      	ldr	r3, [r7, #28]
 800b49c:	4413      	add	r3, r2
 800b49e:	781b      	ldrb	r3, [r3, #0]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d006      	beq.n	800b4b2 <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b4a4:	69fb      	ldr	r3, [r7, #28]
 800b4a6:	3301      	adds	r3, #1
 800b4a8:	61fb      	str	r3, [r7, #28]
 800b4aa:	69fb      	ldr	r3, [r7, #28]
 800b4ac:	2b0f      	cmp	r3, #15
 800b4ae:	d9e9      	bls.n	800b484 <prvInitialiseNewTask+0x6c>
 800b4b0:	e000      	b.n	800b4b4 <prvInitialiseNewTask+0x9c>
			{
				break;
 800b4b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b4b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b4bc:	e003      	b.n	800b4c6 <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b4be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b4c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4c8:	2b37      	cmp	r3, #55	@ 0x37
 800b4ca:	d901      	bls.n	800b4d0 <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b4cc:	2337      	movs	r3, #55	@ 0x37
 800b4ce:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b4d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b4d4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b4d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b4da:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800b4dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4de:	2200      	movs	r2, #0
 800b4e0:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b4e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4e4:	3304      	adds	r3, #4
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f7ff f866 	bl	800a5b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b4ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ee:	3318      	adds	r3, #24
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f7ff f861 	bl	800a5b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b4f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4fe:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b504:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b508:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b50a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800b50c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b50e:	2200      	movs	r2, #0
 800b510:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b514:	2200      	movs	r2, #0
 800b516:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b51a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b51c:	2200      	movs	r2, #0
 800b51e:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b524:	335c      	adds	r3, #92	@ 0x5c
 800b526:	224c      	movs	r2, #76	@ 0x4c
 800b528:	2100      	movs	r1, #0
 800b52a:	4618      	mov	r0, r3
 800b52c:	f003 fd3b 	bl	800efa6 <memset>
 800b530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b532:	4a0d      	ldr	r2, [pc, #52]	@ (800b568 <prvInitialiseNewTask+0x150>)
 800b534:	661a      	str	r2, [r3, #96]	@ 0x60
 800b536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b538:	4a0c      	ldr	r2, [pc, #48]	@ (800b56c <prvInitialiseNewTask+0x154>)
 800b53a:	665a      	str	r2, [r3, #100]	@ 0x64
 800b53c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b53e:	4a0c      	ldr	r2, [pc, #48]	@ (800b570 <prvInitialiseNewTask+0x158>)
 800b540:	669a      	str	r2, [r3, #104]	@ 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b542:	683a      	ldr	r2, [r7, #0]
 800b544:	68f9      	ldr	r1, [r7, #12]
 800b546:	69b8      	ldr	r0, [r7, #24]
 800b548:	f001 fa2e 	bl	800c9a8 <pxPortInitialiseStack>
 800b54c:	4602      	mov	r2, r0
 800b54e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b550:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b554:	2b00      	cmp	r3, #0
 800b556:	d002      	beq.n	800b55e <prvInitialiseNewTask+0x146>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b55a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b55c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b55e:	bf00      	nop
 800b560:	3720      	adds	r7, #32
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}
 800b566:	bf00      	nop
 800b568:	200051b4 	.word	0x200051b4
 800b56c:	2000521c 	.word	0x2000521c
 800b570:	20005284 	.word	0x20005284

0800b574 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b082      	sub	sp, #8
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b57c:	f001 fb44 	bl	800cc08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b580:	4b2d      	ldr	r3, [pc, #180]	@ (800b638 <prvAddNewTaskToReadyList+0xc4>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	3301      	adds	r3, #1
 800b586:	4a2c      	ldr	r2, [pc, #176]	@ (800b638 <prvAddNewTaskToReadyList+0xc4>)
 800b588:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b58a:	4b2c      	ldr	r3, [pc, #176]	@ (800b63c <prvAddNewTaskToReadyList+0xc8>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d109      	bne.n	800b5a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b592:	4a2a      	ldr	r2, [pc, #168]	@ (800b63c <prvAddNewTaskToReadyList+0xc8>)
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b598:	4b27      	ldr	r3, [pc, #156]	@ (800b638 <prvAddNewTaskToReadyList+0xc4>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	2b01      	cmp	r3, #1
 800b59e:	d110      	bne.n	800b5c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b5a0:	f000 fd02 	bl	800bfa8 <prvInitialiseTaskLists>
 800b5a4:	e00d      	b.n	800b5c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b5a6:	4b26      	ldr	r3, [pc, #152]	@ (800b640 <prvAddNewTaskToReadyList+0xcc>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d109      	bne.n	800b5c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b5ae:	4b23      	ldr	r3, [pc, #140]	@ (800b63c <prvAddNewTaskToReadyList+0xc8>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5b8:	429a      	cmp	r2, r3
 800b5ba:	d802      	bhi.n	800b5c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b5bc:	4a1f      	ldr	r2, [pc, #124]	@ (800b63c <prvAddNewTaskToReadyList+0xc8>)
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b5c2:	4b20      	ldr	r3, [pc, #128]	@ (800b644 <prvAddNewTaskToReadyList+0xd0>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	3301      	adds	r3, #1
 800b5c8:	4a1e      	ldr	r2, [pc, #120]	@ (800b644 <prvAddNewTaskToReadyList+0xd0>)
 800b5ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b5cc:	4b1d      	ldr	r3, [pc, #116]	@ (800b644 <prvAddNewTaskToReadyList+0xd0>)
 800b5ce:	681a      	ldr	r2, [r3, #0]
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5d8:	4b1b      	ldr	r3, [pc, #108]	@ (800b648 <prvAddNewTaskToReadyList+0xd4>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	429a      	cmp	r2, r3
 800b5de:	d903      	bls.n	800b5e8 <prvAddNewTaskToReadyList+0x74>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5e4:	4a18      	ldr	r2, [pc, #96]	@ (800b648 <prvAddNewTaskToReadyList+0xd4>)
 800b5e6:	6013      	str	r3, [r2, #0]
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5ec:	4613      	mov	r3, r2
 800b5ee:	009b      	lsls	r3, r3, #2
 800b5f0:	4413      	add	r3, r2
 800b5f2:	009b      	lsls	r3, r3, #2
 800b5f4:	4a15      	ldr	r2, [pc, #84]	@ (800b64c <prvAddNewTaskToReadyList+0xd8>)
 800b5f6:	441a      	add	r2, r3
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	3304      	adds	r3, #4
 800b5fc:	4619      	mov	r1, r3
 800b5fe:	4610      	mov	r0, r2
 800b600:	f7fe ffe7 	bl	800a5d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b604:	f001 fb32 	bl	800cc6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b608:	4b0d      	ldr	r3, [pc, #52]	@ (800b640 <prvAddNewTaskToReadyList+0xcc>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d00e      	beq.n	800b62e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b610:	4b0a      	ldr	r3, [pc, #40]	@ (800b63c <prvAddNewTaskToReadyList+0xc8>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b61a:	429a      	cmp	r2, r3
 800b61c:	d207      	bcs.n	800b62e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b61e:	4b0c      	ldr	r3, [pc, #48]	@ (800b650 <prvAddNewTaskToReadyList+0xdc>)
 800b620:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b624:	601a      	str	r2, [r3, #0]
 800b626:	f3bf 8f4f 	dsb	sy
 800b62a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b62e:	bf00      	nop
 800b630:	3708      	adds	r7, #8
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}
 800b636:	bf00      	nop
 800b638:	20001420 	.word	0x20001420
 800b63c:	20000f4c 	.word	0x20000f4c
 800b640:	2000142c 	.word	0x2000142c
 800b644:	2000143c 	.word	0x2000143c
 800b648:	20001428 	.word	0x20001428
 800b64c:	20000f50 	.word	0x20000f50
 800b650:	e000ed04 	.word	0xe000ed04

0800b654 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b654:	b580      	push	{r7, lr}
 800b656:	b084      	sub	sp, #16
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b65c:	2300      	movs	r3, #0
 800b65e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d018      	beq.n	800b698 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b666:	4b14      	ldr	r3, [pc, #80]	@ (800b6b8 <vTaskDelay+0x64>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d00b      	beq.n	800b686 <vTaskDelay+0x32>
	__asm volatile
 800b66e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b672:	f383 8811 	msr	BASEPRI, r3
 800b676:	f3bf 8f6f 	isb	sy
 800b67a:	f3bf 8f4f 	dsb	sy
 800b67e:	60bb      	str	r3, [r7, #8]
}
 800b680:	bf00      	nop
 800b682:	bf00      	nop
 800b684:	e7fd      	b.n	800b682 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b686:	f000 f88d 	bl	800b7a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b68a:	2100      	movs	r1, #0
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f000 fddd 	bl	800c24c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b692:	f000 f8cd 	bl	800b830 <xTaskResumeAll>
 800b696:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d107      	bne.n	800b6ae <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b69e:	4b07      	ldr	r3, [pc, #28]	@ (800b6bc <vTaskDelay+0x68>)
 800b6a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b6a4:	601a      	str	r2, [r3, #0]
 800b6a6:	f3bf 8f4f 	dsb	sy
 800b6aa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b6ae:	bf00      	nop
 800b6b0:	3710      	adds	r7, #16
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	bf00      	nop
 800b6b8:	20001448 	.word	0x20001448
 800b6bc:	e000ed04 	.word	0xe000ed04

0800b6c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b08a      	sub	sp, #40	@ 0x28
 800b6c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b6ce:	463a      	mov	r2, r7
 800b6d0:	1d39      	adds	r1, r7, #4
 800b6d2:	f107 0308 	add.w	r3, r7, #8
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f7fe ff1a 	bl	800a510 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b6dc:	6839      	ldr	r1, [r7, #0]
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	68ba      	ldr	r2, [r7, #8]
 800b6e2:	9202      	str	r2, [sp, #8]
 800b6e4:	9301      	str	r3, [sp, #4]
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	9300      	str	r3, [sp, #0]
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	460a      	mov	r2, r1
 800b6ee:	4925      	ldr	r1, [pc, #148]	@ (800b784 <vTaskStartScheduler+0xc4>)
 800b6f0:	4825      	ldr	r0, [pc, #148]	@ (800b788 <vTaskStartScheduler+0xc8>)
 800b6f2:	f7ff fdeb 	bl	800b2cc <xTaskCreateStatic>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	4a24      	ldr	r2, [pc, #144]	@ (800b78c <vTaskStartScheduler+0xcc>)
 800b6fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b6fc:	4b23      	ldr	r3, [pc, #140]	@ (800b78c <vTaskStartScheduler+0xcc>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d002      	beq.n	800b70a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b704:	2301      	movs	r3, #1
 800b706:	617b      	str	r3, [r7, #20]
 800b708:	e001      	b.n	800b70e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b70a:	2300      	movs	r3, #0
 800b70c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	2b01      	cmp	r3, #1
 800b712:	d102      	bne.n	800b71a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b714:	f000 fdee 	bl	800c2f4 <xTimerCreateTimerTask>
 800b718:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	d11d      	bne.n	800b75c <vTaskStartScheduler+0x9c>
	__asm volatile
 800b720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b724:	f383 8811 	msr	BASEPRI, r3
 800b728:	f3bf 8f6f 	isb	sy
 800b72c:	f3bf 8f4f 	dsb	sy
 800b730:	613b      	str	r3, [r7, #16]
}
 800b732:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b734:	4b16      	ldr	r3, [pc, #88]	@ (800b790 <vTaskStartScheduler+0xd0>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	335c      	adds	r3, #92	@ 0x5c
 800b73a:	4a16      	ldr	r2, [pc, #88]	@ (800b794 <vTaskStartScheduler+0xd4>)
 800b73c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b73e:	4b16      	ldr	r3, [pc, #88]	@ (800b798 <vTaskStartScheduler+0xd8>)
 800b740:	f04f 32ff 	mov.w	r2, #4294967295
 800b744:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b746:	4b15      	ldr	r3, [pc, #84]	@ (800b79c <vTaskStartScheduler+0xdc>)
 800b748:	2201      	movs	r2, #1
 800b74a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b74c:	4b14      	ldr	r3, [pc, #80]	@ (800b7a0 <vTaskStartScheduler+0xe0>)
 800b74e:	2200      	movs	r2, #0
 800b750:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800b752:	f7f8 f9ad 	bl	8003ab0 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b756:	f001 f9b3 	bl	800cac0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b75a:	e00f      	b.n	800b77c <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b762:	d10b      	bne.n	800b77c <vTaskStartScheduler+0xbc>
	__asm volatile
 800b764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b768:	f383 8811 	msr	BASEPRI, r3
 800b76c:	f3bf 8f6f 	isb	sy
 800b770:	f3bf 8f4f 	dsb	sy
 800b774:	60fb      	str	r3, [r7, #12]
}
 800b776:	bf00      	nop
 800b778:	bf00      	nop
 800b77a:	e7fd      	b.n	800b778 <vTaskStartScheduler+0xb8>
}
 800b77c:	bf00      	nop
 800b77e:	3718      	adds	r7, #24
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}
 800b784:	08011d38 	.word	0x08011d38
 800b788:	0800becd 	.word	0x0800becd
 800b78c:	20001444 	.word	0x20001444
 800b790:	20000f4c 	.word	0x20000f4c
 800b794:	20000278 	.word	0x20000278
 800b798:	20001440 	.word	0x20001440
 800b79c:	2000142c 	.word	0x2000142c
 800b7a0:	20001424 	.word	0x20001424

0800b7a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b7a8:	4b04      	ldr	r3, [pc, #16]	@ (800b7bc <vTaskSuspendAll+0x18>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	3301      	adds	r3, #1
 800b7ae:	4a03      	ldr	r2, [pc, #12]	@ (800b7bc <vTaskSuspendAll+0x18>)
 800b7b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b7b2:	bf00      	nop
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr
 800b7bc:	20001448 	.word	0x20001448

0800b7c0 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b083      	sub	sp, #12
 800b7c4:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800b7ca:	4b14      	ldr	r3, [pc, #80]	@ (800b81c <prvGetExpectedIdleTime+0x5c>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d001      	beq.n	800b7d6 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800b7d6:	4b12      	ldr	r3, [pc, #72]	@ (800b820 <prvGetExpectedIdleTime+0x60>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d002      	beq.n	800b7e6 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	607b      	str	r3, [r7, #4]
 800b7e4:	e012      	b.n	800b80c <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800b7e6:	4b0f      	ldr	r3, [pc, #60]	@ (800b824 <prvGetExpectedIdleTime+0x64>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	2b01      	cmp	r3, #1
 800b7ec:	d902      	bls.n	800b7f4 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	607b      	str	r3, [r7, #4]
 800b7f2:	e00b      	b.n	800b80c <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d002      	beq.n	800b800 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	607b      	str	r3, [r7, #4]
 800b7fe:	e005      	b.n	800b80c <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800b800:	4b09      	ldr	r3, [pc, #36]	@ (800b828 <prvGetExpectedIdleTime+0x68>)
 800b802:	681a      	ldr	r2, [r3, #0]
 800b804:	4b09      	ldr	r3, [pc, #36]	@ (800b82c <prvGetExpectedIdleTime+0x6c>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	1ad3      	subs	r3, r2, r3
 800b80a:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800b80c:	687b      	ldr	r3, [r7, #4]
	}
 800b80e:	4618      	mov	r0, r3
 800b810:	370c      	adds	r7, #12
 800b812:	46bd      	mov	sp, r7
 800b814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b818:	4770      	bx	lr
 800b81a:	bf00      	nop
 800b81c:	20001428 	.word	0x20001428
 800b820:	20000f4c 	.word	0x20000f4c
 800b824:	20000f50 	.word	0x20000f50
 800b828:	20001440 	.word	0x20001440
 800b82c:	20001424 	.word	0x20001424

0800b830 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b084      	sub	sp, #16
 800b834:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b836:	2300      	movs	r3, #0
 800b838:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b83a:	2300      	movs	r3, #0
 800b83c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b83e:	4b42      	ldr	r3, [pc, #264]	@ (800b948 <xTaskResumeAll+0x118>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d10b      	bne.n	800b85e <xTaskResumeAll+0x2e>
	__asm volatile
 800b846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b84a:	f383 8811 	msr	BASEPRI, r3
 800b84e:	f3bf 8f6f 	isb	sy
 800b852:	f3bf 8f4f 	dsb	sy
 800b856:	603b      	str	r3, [r7, #0]
}
 800b858:	bf00      	nop
 800b85a:	bf00      	nop
 800b85c:	e7fd      	b.n	800b85a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b85e:	f001 f9d3 	bl	800cc08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b862:	4b39      	ldr	r3, [pc, #228]	@ (800b948 <xTaskResumeAll+0x118>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	3b01      	subs	r3, #1
 800b868:	4a37      	ldr	r2, [pc, #220]	@ (800b948 <xTaskResumeAll+0x118>)
 800b86a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b86c:	4b36      	ldr	r3, [pc, #216]	@ (800b948 <xTaskResumeAll+0x118>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d162      	bne.n	800b93a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b874:	4b35      	ldr	r3, [pc, #212]	@ (800b94c <xTaskResumeAll+0x11c>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d05e      	beq.n	800b93a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b87c:	e02f      	b.n	800b8de <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b87e:	4b34      	ldr	r3, [pc, #208]	@ (800b950 <xTaskResumeAll+0x120>)
 800b880:	68db      	ldr	r3, [r3, #12]
 800b882:	68db      	ldr	r3, [r3, #12]
 800b884:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	3318      	adds	r3, #24
 800b88a:	4618      	mov	r0, r3
 800b88c:	f7fe fefe 	bl	800a68c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	3304      	adds	r3, #4
 800b894:	4618      	mov	r0, r3
 800b896:	f7fe fef9 	bl	800a68c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b89e:	4b2d      	ldr	r3, [pc, #180]	@ (800b954 <xTaskResumeAll+0x124>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	429a      	cmp	r2, r3
 800b8a4:	d903      	bls.n	800b8ae <xTaskResumeAll+0x7e>
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8aa:	4a2a      	ldr	r2, [pc, #168]	@ (800b954 <xTaskResumeAll+0x124>)
 800b8ac:	6013      	str	r3, [r2, #0]
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8b2:	4613      	mov	r3, r2
 800b8b4:	009b      	lsls	r3, r3, #2
 800b8b6:	4413      	add	r3, r2
 800b8b8:	009b      	lsls	r3, r3, #2
 800b8ba:	4a27      	ldr	r2, [pc, #156]	@ (800b958 <xTaskResumeAll+0x128>)
 800b8bc:	441a      	add	r2, r3
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	3304      	adds	r3, #4
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	4610      	mov	r0, r2
 800b8c6:	f7fe fe84 	bl	800a5d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8ce:	4b23      	ldr	r3, [pc, #140]	@ (800b95c <xTaskResumeAll+0x12c>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8d4:	429a      	cmp	r2, r3
 800b8d6:	d302      	bcc.n	800b8de <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b8d8:	4b21      	ldr	r3, [pc, #132]	@ (800b960 <xTaskResumeAll+0x130>)
 800b8da:	2201      	movs	r2, #1
 800b8dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b8de:	4b1c      	ldr	r3, [pc, #112]	@ (800b950 <xTaskResumeAll+0x120>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d1cb      	bne.n	800b87e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d001      	beq.n	800b8f0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b8ec:	f000 fc00 	bl	800c0f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b8f0:	4b1c      	ldr	r3, [pc, #112]	@ (800b964 <xTaskResumeAll+0x134>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d010      	beq.n	800b91e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b8fc:	f000 f86e 	bl	800b9dc <xTaskIncrementTick>
 800b900:	4603      	mov	r3, r0
 800b902:	2b00      	cmp	r3, #0
 800b904:	d002      	beq.n	800b90c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b906:	4b16      	ldr	r3, [pc, #88]	@ (800b960 <xTaskResumeAll+0x130>)
 800b908:	2201      	movs	r2, #1
 800b90a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	3b01      	subs	r3, #1
 800b910:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d1f1      	bne.n	800b8fc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b918:	4b12      	ldr	r3, [pc, #72]	@ (800b964 <xTaskResumeAll+0x134>)
 800b91a:	2200      	movs	r2, #0
 800b91c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b91e:	4b10      	ldr	r3, [pc, #64]	@ (800b960 <xTaskResumeAll+0x130>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d009      	beq.n	800b93a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b926:	2301      	movs	r3, #1
 800b928:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b92a:	4b0f      	ldr	r3, [pc, #60]	@ (800b968 <xTaskResumeAll+0x138>)
 800b92c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b930:	601a      	str	r2, [r3, #0]
 800b932:	f3bf 8f4f 	dsb	sy
 800b936:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b93a:	f001 f997 	bl	800cc6c <vPortExitCritical>

	return xAlreadyYielded;
 800b93e:	68bb      	ldr	r3, [r7, #8]
}
 800b940:	4618      	mov	r0, r3
 800b942:	3710      	adds	r7, #16
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}
 800b948:	20001448 	.word	0x20001448
 800b94c:	20001420 	.word	0x20001420
 800b950:	200013e0 	.word	0x200013e0
 800b954:	20001428 	.word	0x20001428
 800b958:	20000f50 	.word	0x20000f50
 800b95c:	20000f4c 	.word	0x20000f4c
 800b960:	20001434 	.word	0x20001434
 800b964:	20001430 	.word	0x20001430
 800b968:	e000ed04 	.word	0xe000ed04

0800b96c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b96c:	b480      	push	{r7}
 800b96e:	b083      	sub	sp, #12
 800b970:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b972:	4b05      	ldr	r3, [pc, #20]	@ (800b988 <xTaskGetTickCount+0x1c>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b978:	687b      	ldr	r3, [r7, #4]
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	370c      	adds	r7, #12
 800b97e:	46bd      	mov	sp, r7
 800b980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b984:	4770      	bx	lr
 800b986:	bf00      	nop
 800b988:	20001424 	.word	0x20001424

0800b98c <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 800b98c:	b480      	push	{r7}
 800b98e:	b085      	sub	sp, #20
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800b994:	4b0f      	ldr	r3, [pc, #60]	@ (800b9d4 <vTaskStepTick+0x48>)
 800b996:	681a      	ldr	r2, [r3, #0]
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	441a      	add	r2, r3
 800b99c:	4b0e      	ldr	r3, [pc, #56]	@ (800b9d8 <vTaskStepTick+0x4c>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	429a      	cmp	r2, r3
 800b9a2:	d90b      	bls.n	800b9bc <vTaskStepTick+0x30>
	__asm volatile
 800b9a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9a8:	f383 8811 	msr	BASEPRI, r3
 800b9ac:	f3bf 8f6f 	isb	sy
 800b9b0:	f3bf 8f4f 	dsb	sy
 800b9b4:	60fb      	str	r3, [r7, #12]
}
 800b9b6:	bf00      	nop
 800b9b8:	bf00      	nop
 800b9ba:	e7fd      	b.n	800b9b8 <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 800b9bc:	4b05      	ldr	r3, [pc, #20]	@ (800b9d4 <vTaskStepTick+0x48>)
 800b9be:	681a      	ldr	r2, [r3, #0]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	4413      	add	r3, r2
 800b9c4:	4a03      	ldr	r2, [pc, #12]	@ (800b9d4 <vTaskStepTick+0x48>)
 800b9c6:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 800b9c8:	bf00      	nop
 800b9ca:	3714      	adds	r7, #20
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr
 800b9d4:	20001424 	.word	0x20001424
 800b9d8:	20001440 	.word	0x20001440

0800b9dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b086      	sub	sp, #24
 800b9e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9e6:	4b4f      	ldr	r3, [pc, #316]	@ (800bb24 <xTaskIncrementTick+0x148>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	f040 8090 	bne.w	800bb10 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b9f0:	4b4d      	ldr	r3, [pc, #308]	@ (800bb28 <xTaskIncrementTick+0x14c>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	3301      	adds	r3, #1
 800b9f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b9f8:	4a4b      	ldr	r2, [pc, #300]	@ (800bb28 <xTaskIncrementTick+0x14c>)
 800b9fa:	693b      	ldr	r3, [r7, #16]
 800b9fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d121      	bne.n	800ba48 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ba04:	4b49      	ldr	r3, [pc, #292]	@ (800bb2c <xTaskIncrementTick+0x150>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d00b      	beq.n	800ba26 <xTaskIncrementTick+0x4a>
	__asm volatile
 800ba0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba12:	f383 8811 	msr	BASEPRI, r3
 800ba16:	f3bf 8f6f 	isb	sy
 800ba1a:	f3bf 8f4f 	dsb	sy
 800ba1e:	603b      	str	r3, [r7, #0]
}
 800ba20:	bf00      	nop
 800ba22:	bf00      	nop
 800ba24:	e7fd      	b.n	800ba22 <xTaskIncrementTick+0x46>
 800ba26:	4b41      	ldr	r3, [pc, #260]	@ (800bb2c <xTaskIncrementTick+0x150>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	60fb      	str	r3, [r7, #12]
 800ba2c:	4b40      	ldr	r3, [pc, #256]	@ (800bb30 <xTaskIncrementTick+0x154>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	4a3e      	ldr	r2, [pc, #248]	@ (800bb2c <xTaskIncrementTick+0x150>)
 800ba32:	6013      	str	r3, [r2, #0]
 800ba34:	4a3e      	ldr	r2, [pc, #248]	@ (800bb30 <xTaskIncrementTick+0x154>)
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	6013      	str	r3, [r2, #0]
 800ba3a:	4b3e      	ldr	r3, [pc, #248]	@ (800bb34 <xTaskIncrementTick+0x158>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	3301      	adds	r3, #1
 800ba40:	4a3c      	ldr	r2, [pc, #240]	@ (800bb34 <xTaskIncrementTick+0x158>)
 800ba42:	6013      	str	r3, [r2, #0]
 800ba44:	f000 fb54 	bl	800c0f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ba48:	4b3b      	ldr	r3, [pc, #236]	@ (800bb38 <xTaskIncrementTick+0x15c>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	693a      	ldr	r2, [r7, #16]
 800ba4e:	429a      	cmp	r2, r3
 800ba50:	d349      	bcc.n	800bae6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba52:	4b36      	ldr	r3, [pc, #216]	@ (800bb2c <xTaskIncrementTick+0x150>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d104      	bne.n	800ba66 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba5c:	4b36      	ldr	r3, [pc, #216]	@ (800bb38 <xTaskIncrementTick+0x15c>)
 800ba5e:	f04f 32ff 	mov.w	r2, #4294967295
 800ba62:	601a      	str	r2, [r3, #0]
					break;
 800ba64:	e03f      	b.n	800bae6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba66:	4b31      	ldr	r3, [pc, #196]	@ (800bb2c <xTaskIncrementTick+0x150>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	68db      	ldr	r3, [r3, #12]
 800ba6c:	68db      	ldr	r3, [r3, #12]
 800ba6e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	685b      	ldr	r3, [r3, #4]
 800ba74:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ba76:	693a      	ldr	r2, [r7, #16]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	429a      	cmp	r2, r3
 800ba7c:	d203      	bcs.n	800ba86 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ba7e:	4a2e      	ldr	r2, [pc, #184]	@ (800bb38 <xTaskIncrementTick+0x15c>)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ba84:	e02f      	b.n	800bae6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	3304      	adds	r3, #4
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f7fe fdfe 	bl	800a68c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d004      	beq.n	800baa2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	3318      	adds	r3, #24
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	f7fe fdf5 	bl	800a68c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800baa6:	4b25      	ldr	r3, [pc, #148]	@ (800bb3c <xTaskIncrementTick+0x160>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	429a      	cmp	r2, r3
 800baac:	d903      	bls.n	800bab6 <xTaskIncrementTick+0xda>
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bab2:	4a22      	ldr	r2, [pc, #136]	@ (800bb3c <xTaskIncrementTick+0x160>)
 800bab4:	6013      	str	r3, [r2, #0]
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800baba:	4613      	mov	r3, r2
 800babc:	009b      	lsls	r3, r3, #2
 800babe:	4413      	add	r3, r2
 800bac0:	009b      	lsls	r3, r3, #2
 800bac2:	4a1f      	ldr	r2, [pc, #124]	@ (800bb40 <xTaskIncrementTick+0x164>)
 800bac4:	441a      	add	r2, r3
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	3304      	adds	r3, #4
 800baca:	4619      	mov	r1, r3
 800bacc:	4610      	mov	r0, r2
 800bace:	f7fe fd80 	bl	800a5d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bad6:	4b1b      	ldr	r3, [pc, #108]	@ (800bb44 <xTaskIncrementTick+0x168>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800badc:	429a      	cmp	r2, r3
 800bade:	d3b8      	bcc.n	800ba52 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800bae0:	2301      	movs	r3, #1
 800bae2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bae4:	e7b5      	b.n	800ba52 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bae6:	4b17      	ldr	r3, [pc, #92]	@ (800bb44 <xTaskIncrementTick+0x168>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800baec:	4914      	ldr	r1, [pc, #80]	@ (800bb40 <xTaskIncrementTick+0x164>)
 800baee:	4613      	mov	r3, r2
 800baf0:	009b      	lsls	r3, r3, #2
 800baf2:	4413      	add	r3, r2
 800baf4:	009b      	lsls	r3, r3, #2
 800baf6:	440b      	add	r3, r1
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	2b01      	cmp	r3, #1
 800bafc:	d901      	bls.n	800bb02 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800bafe:	2301      	movs	r3, #1
 800bb00:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bb02:	4b11      	ldr	r3, [pc, #68]	@ (800bb48 <xTaskIncrementTick+0x16c>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d007      	beq.n	800bb1a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	617b      	str	r3, [r7, #20]
 800bb0e:	e004      	b.n	800bb1a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bb10:	4b0e      	ldr	r3, [pc, #56]	@ (800bb4c <xTaskIncrementTick+0x170>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	3301      	adds	r3, #1
 800bb16:	4a0d      	ldr	r2, [pc, #52]	@ (800bb4c <xTaskIncrementTick+0x170>)
 800bb18:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bb1a:	697b      	ldr	r3, [r7, #20]
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	3718      	adds	r7, #24
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}
 800bb24:	20001448 	.word	0x20001448
 800bb28:	20001424 	.word	0x20001424
 800bb2c:	200013d8 	.word	0x200013d8
 800bb30:	200013dc 	.word	0x200013dc
 800bb34:	20001438 	.word	0x20001438
 800bb38:	20001440 	.word	0x20001440
 800bb3c:	20001428 	.word	0x20001428
 800bb40:	20000f50 	.word	0x20000f50
 800bb44:	20000f4c 	.word	0x20000f4c
 800bb48:	20001434 	.word	0x20001434
 800bb4c:	20001430 	.word	0x20001430

0800bb50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b084      	sub	sp, #16
 800bb54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bb56:	4b36      	ldr	r3, [pc, #216]	@ (800bc30 <vTaskSwitchContext+0xe0>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d003      	beq.n	800bb66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bb5e:	4b35      	ldr	r3, [pc, #212]	@ (800bc34 <vTaskSwitchContext+0xe4>)
 800bb60:	2201      	movs	r2, #1
 800bb62:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bb64:	e060      	b.n	800bc28 <vTaskSwitchContext+0xd8>
		xYieldPending = pdFALSE;
 800bb66:	4b33      	ldr	r3, [pc, #204]	@ (800bc34 <vTaskSwitchContext+0xe4>)
 800bb68:	2200      	movs	r2, #0
 800bb6a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800bb6c:	f7f7 ffbc 	bl	8003ae8 <getRunTimeCounterValue>
 800bb70:	4603      	mov	r3, r0
 800bb72:	4a31      	ldr	r2, [pc, #196]	@ (800bc38 <vTaskSwitchContext+0xe8>)
 800bb74:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800bb76:	4b30      	ldr	r3, [pc, #192]	@ (800bc38 <vTaskSwitchContext+0xe8>)
 800bb78:	681a      	ldr	r2, [r3, #0]
 800bb7a:	4b30      	ldr	r3, [pc, #192]	@ (800bc3c <vTaskSwitchContext+0xec>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	429a      	cmp	r2, r3
 800bb80:	d909      	bls.n	800bb96 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800bb82:	4b2f      	ldr	r3, [pc, #188]	@ (800bc40 <vTaskSwitchContext+0xf0>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800bb88:	4a2b      	ldr	r2, [pc, #172]	@ (800bc38 <vTaskSwitchContext+0xe8>)
 800bb8a:	6810      	ldr	r0, [r2, #0]
 800bb8c:	4a2b      	ldr	r2, [pc, #172]	@ (800bc3c <vTaskSwitchContext+0xec>)
 800bb8e:	6812      	ldr	r2, [r2, #0]
 800bb90:	1a82      	subs	r2, r0, r2
 800bb92:	440a      	add	r2, r1
 800bb94:	659a      	str	r2, [r3, #88]	@ 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800bb96:	4b28      	ldr	r3, [pc, #160]	@ (800bc38 <vTaskSwitchContext+0xe8>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	4a28      	ldr	r2, [pc, #160]	@ (800bc3c <vTaskSwitchContext+0xec>)
 800bb9c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb9e:	4b29      	ldr	r3, [pc, #164]	@ (800bc44 <vTaskSwitchContext+0xf4>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	60fb      	str	r3, [r7, #12]
 800bba4:	e011      	b.n	800bbca <vTaskSwitchContext+0x7a>
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d10b      	bne.n	800bbc4 <vTaskSwitchContext+0x74>
	__asm volatile
 800bbac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbb0:	f383 8811 	msr	BASEPRI, r3
 800bbb4:	f3bf 8f6f 	isb	sy
 800bbb8:	f3bf 8f4f 	dsb	sy
 800bbbc:	607b      	str	r3, [r7, #4]
}
 800bbbe:	bf00      	nop
 800bbc0:	bf00      	nop
 800bbc2:	e7fd      	b.n	800bbc0 <vTaskSwitchContext+0x70>
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	3b01      	subs	r3, #1
 800bbc8:	60fb      	str	r3, [r7, #12]
 800bbca:	491f      	ldr	r1, [pc, #124]	@ (800bc48 <vTaskSwitchContext+0xf8>)
 800bbcc:	68fa      	ldr	r2, [r7, #12]
 800bbce:	4613      	mov	r3, r2
 800bbd0:	009b      	lsls	r3, r3, #2
 800bbd2:	4413      	add	r3, r2
 800bbd4:	009b      	lsls	r3, r3, #2
 800bbd6:	440b      	add	r3, r1
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d0e3      	beq.n	800bba6 <vTaskSwitchContext+0x56>
 800bbde:	68fa      	ldr	r2, [r7, #12]
 800bbe0:	4613      	mov	r3, r2
 800bbe2:	009b      	lsls	r3, r3, #2
 800bbe4:	4413      	add	r3, r2
 800bbe6:	009b      	lsls	r3, r3, #2
 800bbe8:	4a17      	ldr	r2, [pc, #92]	@ (800bc48 <vTaskSwitchContext+0xf8>)
 800bbea:	4413      	add	r3, r2
 800bbec:	60bb      	str	r3, [r7, #8]
 800bbee:	68bb      	ldr	r3, [r7, #8]
 800bbf0:	685b      	ldr	r3, [r3, #4]
 800bbf2:	685a      	ldr	r2, [r3, #4]
 800bbf4:	68bb      	ldr	r3, [r7, #8]
 800bbf6:	605a      	str	r2, [r3, #4]
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	685a      	ldr	r2, [r3, #4]
 800bbfc:	68bb      	ldr	r3, [r7, #8]
 800bbfe:	3308      	adds	r3, #8
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d104      	bne.n	800bc0e <vTaskSwitchContext+0xbe>
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	685a      	ldr	r2, [r3, #4]
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	605a      	str	r2, [r3, #4]
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	685b      	ldr	r3, [r3, #4]
 800bc12:	68db      	ldr	r3, [r3, #12]
 800bc14:	4a0a      	ldr	r2, [pc, #40]	@ (800bc40 <vTaskSwitchContext+0xf0>)
 800bc16:	6013      	str	r3, [r2, #0]
 800bc18:	4a0a      	ldr	r2, [pc, #40]	@ (800bc44 <vTaskSwitchContext+0xf4>)
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bc1e:	4b08      	ldr	r3, [pc, #32]	@ (800bc40 <vTaskSwitchContext+0xf0>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	335c      	adds	r3, #92	@ 0x5c
 800bc24:	4a09      	ldr	r2, [pc, #36]	@ (800bc4c <vTaskSwitchContext+0xfc>)
 800bc26:	6013      	str	r3, [r2, #0]
}
 800bc28:	bf00      	nop
 800bc2a:	3710      	adds	r7, #16
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}
 800bc30:	20001448 	.word	0x20001448
 800bc34:	20001434 	.word	0x20001434
 800bc38:	20001450 	.word	0x20001450
 800bc3c:	2000144c 	.word	0x2000144c
 800bc40:	20000f4c 	.word	0x20000f4c
 800bc44:	20001428 	.word	0x20001428
 800bc48:	20000f50 	.word	0x20000f50
 800bc4c:	20000278 	.word	0x20000278

0800bc50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b084      	sub	sp, #16
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
 800bc58:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d10b      	bne.n	800bc78 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800bc60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc64:	f383 8811 	msr	BASEPRI, r3
 800bc68:	f3bf 8f6f 	isb	sy
 800bc6c:	f3bf 8f4f 	dsb	sy
 800bc70:	60fb      	str	r3, [r7, #12]
}
 800bc72:	bf00      	nop
 800bc74:	bf00      	nop
 800bc76:	e7fd      	b.n	800bc74 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bc78:	4b07      	ldr	r3, [pc, #28]	@ (800bc98 <vTaskPlaceOnEventList+0x48>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	3318      	adds	r3, #24
 800bc7e:	4619      	mov	r1, r3
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f7fe fcca 	bl	800a61a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bc86:	2101      	movs	r1, #1
 800bc88:	6838      	ldr	r0, [r7, #0]
 800bc8a:	f000 fadf 	bl	800c24c <prvAddCurrentTaskToDelayedList>
}
 800bc8e:	bf00      	nop
 800bc90:	3710      	adds	r7, #16
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}
 800bc96:	bf00      	nop
 800bc98:	20000f4c 	.word	0x20000f4c

0800bc9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b086      	sub	sp, #24
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	60f8      	str	r0, [r7, #12]
 800bca4:	60b9      	str	r1, [r7, #8]
 800bca6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d10b      	bne.n	800bcc6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800bcae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcb2:	f383 8811 	msr	BASEPRI, r3
 800bcb6:	f3bf 8f6f 	isb	sy
 800bcba:	f3bf 8f4f 	dsb	sy
 800bcbe:	617b      	str	r3, [r7, #20]
}
 800bcc0:	bf00      	nop
 800bcc2:	bf00      	nop
 800bcc4:	e7fd      	b.n	800bcc2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bcc6:	4b0a      	ldr	r3, [pc, #40]	@ (800bcf0 <vTaskPlaceOnEventListRestricted+0x54>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	3318      	adds	r3, #24
 800bccc:	4619      	mov	r1, r3
 800bcce:	68f8      	ldr	r0, [r7, #12]
 800bcd0:	f7fe fc7f 	bl	800a5d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d002      	beq.n	800bce0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800bcda:	f04f 33ff 	mov.w	r3, #4294967295
 800bcde:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bce0:	6879      	ldr	r1, [r7, #4]
 800bce2:	68b8      	ldr	r0, [r7, #8]
 800bce4:	f000 fab2 	bl	800c24c <prvAddCurrentTaskToDelayedList>
	}
 800bce8:	bf00      	nop
 800bcea:	3718      	adds	r7, #24
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}
 800bcf0:	20000f4c 	.word	0x20000f4c

0800bcf4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b086      	sub	sp, #24
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	68db      	ldr	r3, [r3, #12]
 800bd00:	68db      	ldr	r3, [r3, #12]
 800bd02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bd04:	693b      	ldr	r3, [r7, #16]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d10b      	bne.n	800bd22 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800bd0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd0e:	f383 8811 	msr	BASEPRI, r3
 800bd12:	f3bf 8f6f 	isb	sy
 800bd16:	f3bf 8f4f 	dsb	sy
 800bd1a:	60fb      	str	r3, [r7, #12]
}
 800bd1c:	bf00      	nop
 800bd1e:	bf00      	nop
 800bd20:	e7fd      	b.n	800bd1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	3318      	adds	r3, #24
 800bd26:	4618      	mov	r0, r3
 800bd28:	f7fe fcb0 	bl	800a68c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd2c:	4b1e      	ldr	r3, [pc, #120]	@ (800bda8 <xTaskRemoveFromEventList+0xb4>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d11f      	bne.n	800bd74 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bd34:	693b      	ldr	r3, [r7, #16]
 800bd36:	3304      	adds	r3, #4
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f7fe fca7 	bl	800a68c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd42:	4b1a      	ldr	r3, [pc, #104]	@ (800bdac <xTaskRemoveFromEventList+0xb8>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	429a      	cmp	r2, r3
 800bd48:	d903      	bls.n	800bd52 <xTaskRemoveFromEventList+0x5e>
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd4e:	4a17      	ldr	r2, [pc, #92]	@ (800bdac <xTaskRemoveFromEventList+0xb8>)
 800bd50:	6013      	str	r3, [r2, #0]
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd56:	4613      	mov	r3, r2
 800bd58:	009b      	lsls	r3, r3, #2
 800bd5a:	4413      	add	r3, r2
 800bd5c:	009b      	lsls	r3, r3, #2
 800bd5e:	4a14      	ldr	r2, [pc, #80]	@ (800bdb0 <xTaskRemoveFromEventList+0xbc>)
 800bd60:	441a      	add	r2, r3
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	3304      	adds	r3, #4
 800bd66:	4619      	mov	r1, r3
 800bd68:	4610      	mov	r0, r2
 800bd6a:	f7fe fc32 	bl	800a5d2 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800bd6e:	f000 f9bf 	bl	800c0f0 <prvResetNextTaskUnblockTime>
 800bd72:	e005      	b.n	800bd80 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	3318      	adds	r3, #24
 800bd78:	4619      	mov	r1, r3
 800bd7a:	480e      	ldr	r0, [pc, #56]	@ (800bdb4 <xTaskRemoveFromEventList+0xc0>)
 800bd7c:	f7fe fc29 	bl	800a5d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bd80:	693b      	ldr	r3, [r7, #16]
 800bd82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd84:	4b0c      	ldr	r3, [pc, #48]	@ (800bdb8 <xTaskRemoveFromEventList+0xc4>)
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd8a:	429a      	cmp	r2, r3
 800bd8c:	d905      	bls.n	800bd9a <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bd8e:	2301      	movs	r3, #1
 800bd90:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bd92:	4b0a      	ldr	r3, [pc, #40]	@ (800bdbc <xTaskRemoveFromEventList+0xc8>)
 800bd94:	2201      	movs	r2, #1
 800bd96:	601a      	str	r2, [r3, #0]
 800bd98:	e001      	b.n	800bd9e <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bd9e:	697b      	ldr	r3, [r7, #20]
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3718      	adds	r7, #24
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}
 800bda8:	20001448 	.word	0x20001448
 800bdac:	20001428 	.word	0x20001428
 800bdb0:	20000f50 	.word	0x20000f50
 800bdb4:	200013e0 	.word	0x200013e0
 800bdb8:	20000f4c 	.word	0x20000f4c
 800bdbc:	20001434 	.word	0x20001434

0800bdc0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bdc0:	b480      	push	{r7}
 800bdc2:	b083      	sub	sp, #12
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bdc8:	4b06      	ldr	r3, [pc, #24]	@ (800bde4 <vTaskInternalSetTimeOutState+0x24>)
 800bdca:	681a      	ldr	r2, [r3, #0]
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bdd0:	4b05      	ldr	r3, [pc, #20]	@ (800bde8 <vTaskInternalSetTimeOutState+0x28>)
 800bdd2:	681a      	ldr	r2, [r3, #0]
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	605a      	str	r2, [r3, #4]
}
 800bdd8:	bf00      	nop
 800bdda:	370c      	adds	r7, #12
 800bddc:	46bd      	mov	sp, r7
 800bdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde2:	4770      	bx	lr
 800bde4:	20001438 	.word	0x20001438
 800bde8:	20001424 	.word	0x20001424

0800bdec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b088      	sub	sp, #32
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
 800bdf4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d10b      	bne.n	800be14 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800bdfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be00:	f383 8811 	msr	BASEPRI, r3
 800be04:	f3bf 8f6f 	isb	sy
 800be08:	f3bf 8f4f 	dsb	sy
 800be0c:	613b      	str	r3, [r7, #16]
}
 800be0e:	bf00      	nop
 800be10:	bf00      	nop
 800be12:	e7fd      	b.n	800be10 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d10b      	bne.n	800be32 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800be1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be1e:	f383 8811 	msr	BASEPRI, r3
 800be22:	f3bf 8f6f 	isb	sy
 800be26:	f3bf 8f4f 	dsb	sy
 800be2a:	60fb      	str	r3, [r7, #12]
}
 800be2c:	bf00      	nop
 800be2e:	bf00      	nop
 800be30:	e7fd      	b.n	800be2e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800be32:	f000 fee9 	bl	800cc08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800be36:	4b1d      	ldr	r3, [pc, #116]	@ (800beac <xTaskCheckForTimeOut+0xc0>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	685b      	ldr	r3, [r3, #4]
 800be40:	69ba      	ldr	r2, [r7, #24]
 800be42:	1ad3      	subs	r3, r2, r3
 800be44:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be4e:	d102      	bne.n	800be56 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800be50:	2300      	movs	r3, #0
 800be52:	61fb      	str	r3, [r7, #28]
 800be54:	e023      	b.n	800be9e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681a      	ldr	r2, [r3, #0]
 800be5a:	4b15      	ldr	r3, [pc, #84]	@ (800beb0 <xTaskCheckForTimeOut+0xc4>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	429a      	cmp	r2, r3
 800be60:	d007      	beq.n	800be72 <xTaskCheckForTimeOut+0x86>
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	685b      	ldr	r3, [r3, #4]
 800be66:	69ba      	ldr	r2, [r7, #24]
 800be68:	429a      	cmp	r2, r3
 800be6a:	d302      	bcc.n	800be72 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800be6c:	2301      	movs	r3, #1
 800be6e:	61fb      	str	r3, [r7, #28]
 800be70:	e015      	b.n	800be9e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	697a      	ldr	r2, [r7, #20]
 800be78:	429a      	cmp	r2, r3
 800be7a:	d20b      	bcs.n	800be94 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	681a      	ldr	r2, [r3, #0]
 800be80:	697b      	ldr	r3, [r7, #20]
 800be82:	1ad2      	subs	r2, r2, r3
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f7ff ff99 	bl	800bdc0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800be8e:	2300      	movs	r3, #0
 800be90:	61fb      	str	r3, [r7, #28]
 800be92:	e004      	b.n	800be9e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	2200      	movs	r2, #0
 800be98:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800be9a:	2301      	movs	r3, #1
 800be9c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800be9e:	f000 fee5 	bl	800cc6c <vPortExitCritical>

	return xReturn;
 800bea2:	69fb      	ldr	r3, [r7, #28]
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	3720      	adds	r7, #32
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}
 800beac:	20001424 	.word	0x20001424
 800beb0:	20001438 	.word	0x20001438

0800beb4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800beb4:	b480      	push	{r7}
 800beb6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800beb8:	4b03      	ldr	r3, [pc, #12]	@ (800bec8 <vTaskMissedYield+0x14>)
 800beba:	2201      	movs	r2, #1
 800bebc:	601a      	str	r2, [r3, #0]
}
 800bebe:	bf00      	nop
 800bec0:	46bd      	mov	sp, r7
 800bec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec6:	4770      	bx	lr
 800bec8:	20001434 	.word	0x20001434

0800becc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b084      	sub	sp, #16
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bed4:	f000 f8a8 	bl	800c028 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bed8:	4b18      	ldr	r3, [pc, #96]	@ (800bf3c <prvIdleTask+0x70>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	2b01      	cmp	r3, #1
 800bede:	d907      	bls.n	800bef0 <prvIdleTask+0x24>
			{
				taskYIELD();
 800bee0:	4b17      	ldr	r3, [pc, #92]	@ (800bf40 <prvIdleTask+0x74>)
 800bee2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bee6:	601a      	str	r2, [r3, #0]
 800bee8:	f3bf 8f4f 	dsb	sy
 800beec:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800bef0:	f7ff fc66 	bl	800b7c0 <prvGetExpectedIdleTime>
 800bef4:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	2b01      	cmp	r3, #1
 800befa:	d9eb      	bls.n	800bed4 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800befc:	f7ff fc52 	bl	800b7a4 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800bf00:	4b10      	ldr	r3, [pc, #64]	@ (800bf44 <prvIdleTask+0x78>)
 800bf02:	681a      	ldr	r2, [r3, #0]
 800bf04:	4b10      	ldr	r3, [pc, #64]	@ (800bf48 <prvIdleTask+0x7c>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	d20b      	bcs.n	800bf24 <prvIdleTask+0x58>
	__asm volatile
 800bf0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf10:	f383 8811 	msr	BASEPRI, r3
 800bf14:	f3bf 8f6f 	isb	sy
 800bf18:	f3bf 8f4f 	dsb	sy
 800bf1c:	60bb      	str	r3, [r7, #8]
}
 800bf1e:	bf00      	nop
 800bf20:	bf00      	nop
 800bf22:	e7fd      	b.n	800bf20 <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800bf24:	f7ff fc4c 	bl	800b7c0 <prvGetExpectedIdleTime>
 800bf28:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	2b01      	cmp	r3, #1
 800bf2e:	d902      	bls.n	800bf36 <prvIdleTask+0x6a>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800bf30:	68f8      	ldr	r0, [r7, #12]
 800bf32:	f000 ff1b 	bl	800cd6c <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800bf36:	f7ff fc7b 	bl	800b830 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800bf3a:	e7cb      	b.n	800bed4 <prvIdleTask+0x8>
 800bf3c:	20000f50 	.word	0x20000f50
 800bf40:	e000ed04 	.word	0xe000ed04
 800bf44:	20001440 	.word	0x20001440
 800bf48:	20001424 	.word	0x20001424

0800bf4c <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b083      	sub	sp, #12
 800bf50:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 800bf52:	2301      	movs	r3, #1
 800bf54:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 800bf56:	2301      	movs	r3, #1
 800bf58:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800bf5a:	4b0f      	ldr	r3, [pc, #60]	@ (800bf98 <eTaskConfirmSleepModeStatus+0x4c>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d002      	beq.n	800bf68 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800bf62:	2300      	movs	r3, #0
 800bf64:	71fb      	strb	r3, [r7, #7]
 800bf66:	e010      	b.n	800bf8a <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 800bf68:	4b0c      	ldr	r3, [pc, #48]	@ (800bf9c <eTaskConfirmSleepModeStatus+0x50>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d002      	beq.n	800bf76 <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800bf70:	2300      	movs	r3, #0
 800bf72:	71fb      	strb	r3, [r7, #7]
 800bf74:	e009      	b.n	800bf8a <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800bf76:	4b0a      	ldr	r3, [pc, #40]	@ (800bfa0 <eTaskConfirmSleepModeStatus+0x54>)
 800bf78:	681a      	ldr	r2, [r3, #0]
 800bf7a:	4b0a      	ldr	r3, [pc, #40]	@ (800bfa4 <eTaskConfirmSleepModeStatus+0x58>)
 800bf7c:	6819      	ldr	r1, [r3, #0]
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	1acb      	subs	r3, r1, r3
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d101      	bne.n	800bf8a <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 800bf86:	2302      	movs	r3, #2
 800bf88:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 800bf8a:	79fb      	ldrb	r3, [r7, #7]
	}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	370c      	adds	r7, #12
 800bf90:	46bd      	mov	sp, r7
 800bf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf96:	4770      	bx	lr
 800bf98:	200013e0 	.word	0x200013e0
 800bf9c:	20001434 	.word	0x20001434
 800bfa0:	2000140c 	.word	0x2000140c
 800bfa4:	20001420 	.word	0x20001420

0800bfa8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b082      	sub	sp, #8
 800bfac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bfae:	2300      	movs	r3, #0
 800bfb0:	607b      	str	r3, [r7, #4]
 800bfb2:	e00c      	b.n	800bfce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bfb4:	687a      	ldr	r2, [r7, #4]
 800bfb6:	4613      	mov	r3, r2
 800bfb8:	009b      	lsls	r3, r3, #2
 800bfba:	4413      	add	r3, r2
 800bfbc:	009b      	lsls	r3, r3, #2
 800bfbe:	4a12      	ldr	r2, [pc, #72]	@ (800c008 <prvInitialiseTaskLists+0x60>)
 800bfc0:	4413      	add	r3, r2
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f7fe fad8 	bl	800a578 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	3301      	adds	r3, #1
 800bfcc:	607b      	str	r3, [r7, #4]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2b37      	cmp	r3, #55	@ 0x37
 800bfd2:	d9ef      	bls.n	800bfb4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bfd4:	480d      	ldr	r0, [pc, #52]	@ (800c00c <prvInitialiseTaskLists+0x64>)
 800bfd6:	f7fe facf 	bl	800a578 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bfda:	480d      	ldr	r0, [pc, #52]	@ (800c010 <prvInitialiseTaskLists+0x68>)
 800bfdc:	f7fe facc 	bl	800a578 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bfe0:	480c      	ldr	r0, [pc, #48]	@ (800c014 <prvInitialiseTaskLists+0x6c>)
 800bfe2:	f7fe fac9 	bl	800a578 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bfe6:	480c      	ldr	r0, [pc, #48]	@ (800c018 <prvInitialiseTaskLists+0x70>)
 800bfe8:	f7fe fac6 	bl	800a578 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bfec:	480b      	ldr	r0, [pc, #44]	@ (800c01c <prvInitialiseTaskLists+0x74>)
 800bfee:	f7fe fac3 	bl	800a578 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bff2:	4b0b      	ldr	r3, [pc, #44]	@ (800c020 <prvInitialiseTaskLists+0x78>)
 800bff4:	4a05      	ldr	r2, [pc, #20]	@ (800c00c <prvInitialiseTaskLists+0x64>)
 800bff6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bff8:	4b0a      	ldr	r3, [pc, #40]	@ (800c024 <prvInitialiseTaskLists+0x7c>)
 800bffa:	4a05      	ldr	r2, [pc, #20]	@ (800c010 <prvInitialiseTaskLists+0x68>)
 800bffc:	601a      	str	r2, [r3, #0]
}
 800bffe:	bf00      	nop
 800c000:	3708      	adds	r7, #8
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}
 800c006:	bf00      	nop
 800c008:	20000f50 	.word	0x20000f50
 800c00c:	200013b0 	.word	0x200013b0
 800c010:	200013c4 	.word	0x200013c4
 800c014:	200013e0 	.word	0x200013e0
 800c018:	200013f4 	.word	0x200013f4
 800c01c:	2000140c 	.word	0x2000140c
 800c020:	200013d8 	.word	0x200013d8
 800c024:	200013dc 	.word	0x200013dc

0800c028 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b082      	sub	sp, #8
 800c02c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c02e:	e019      	b.n	800c064 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c030:	f000 fdea 	bl	800cc08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c034:	4b10      	ldr	r3, [pc, #64]	@ (800c078 <prvCheckTasksWaitingTermination+0x50>)
 800c036:	68db      	ldr	r3, [r3, #12]
 800c038:	68db      	ldr	r3, [r3, #12]
 800c03a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	3304      	adds	r3, #4
 800c040:	4618      	mov	r0, r3
 800c042:	f7fe fb23 	bl	800a68c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c046:	4b0d      	ldr	r3, [pc, #52]	@ (800c07c <prvCheckTasksWaitingTermination+0x54>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	3b01      	subs	r3, #1
 800c04c:	4a0b      	ldr	r2, [pc, #44]	@ (800c07c <prvCheckTasksWaitingTermination+0x54>)
 800c04e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c050:	4b0b      	ldr	r3, [pc, #44]	@ (800c080 <prvCheckTasksWaitingTermination+0x58>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	3b01      	subs	r3, #1
 800c056:	4a0a      	ldr	r2, [pc, #40]	@ (800c080 <prvCheckTasksWaitingTermination+0x58>)
 800c058:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c05a:	f000 fe07 	bl	800cc6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f000 f810 	bl	800c084 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c064:	4b06      	ldr	r3, [pc, #24]	@ (800c080 <prvCheckTasksWaitingTermination+0x58>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d1e1      	bne.n	800c030 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c06c:	bf00      	nop
 800c06e:	bf00      	nop
 800c070:	3708      	adds	r7, #8
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
 800c076:	bf00      	nop
 800c078:	200013f4 	.word	0x200013f4
 800c07c:	20001420 	.word	0x20001420
 800c080:	20001408 	.word	0x20001408

0800c084 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c084:	b580      	push	{r7, lr}
 800c086:	b084      	sub	sp, #16
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	335c      	adds	r3, #92	@ 0x5c
 800c090:	4618      	mov	r0, r3
 800c092:	f002 ffb7 	bl	800f004 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d108      	bne.n	800c0b2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f001 f883 	bl	800d1b0 <vPortFree>
				vPortFree( pxTCB );
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f001 f880 	bl	800d1b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c0b0:	e019      	b.n	800c0e6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800c0b8:	2b01      	cmp	r3, #1
 800c0ba:	d103      	bne.n	800c0c4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f001 f877 	bl	800d1b0 <vPortFree>
	}
 800c0c2:	e010      	b.n	800c0e6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800c0ca:	2b02      	cmp	r3, #2
 800c0cc:	d00b      	beq.n	800c0e6 <prvDeleteTCB+0x62>
	__asm volatile
 800c0ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0d2:	f383 8811 	msr	BASEPRI, r3
 800c0d6:	f3bf 8f6f 	isb	sy
 800c0da:	f3bf 8f4f 	dsb	sy
 800c0de:	60fb      	str	r3, [r7, #12]
}
 800c0e0:	bf00      	nop
 800c0e2:	bf00      	nop
 800c0e4:	e7fd      	b.n	800c0e2 <prvDeleteTCB+0x5e>
	}
 800c0e6:	bf00      	nop
 800c0e8:	3710      	adds	r7, #16
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}
	...

0800c0f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	b083      	sub	sp, #12
 800c0f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c0f6:	4b0c      	ldr	r3, [pc, #48]	@ (800c128 <prvResetNextTaskUnblockTime+0x38>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d104      	bne.n	800c10a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c100:	4b0a      	ldr	r3, [pc, #40]	@ (800c12c <prvResetNextTaskUnblockTime+0x3c>)
 800c102:	f04f 32ff 	mov.w	r2, #4294967295
 800c106:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c108:	e008      	b.n	800c11c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c10a:	4b07      	ldr	r3, [pc, #28]	@ (800c128 <prvResetNextTaskUnblockTime+0x38>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	68db      	ldr	r3, [r3, #12]
 800c110:	68db      	ldr	r3, [r3, #12]
 800c112:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	685b      	ldr	r3, [r3, #4]
 800c118:	4a04      	ldr	r2, [pc, #16]	@ (800c12c <prvResetNextTaskUnblockTime+0x3c>)
 800c11a:	6013      	str	r3, [r2, #0]
}
 800c11c:	bf00      	nop
 800c11e:	370c      	adds	r7, #12
 800c120:	46bd      	mov	sp, r7
 800c122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c126:	4770      	bx	lr
 800c128:	200013d8 	.word	0x200013d8
 800c12c:	20001440 	.word	0x20001440

0800c130 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c130:	b480      	push	{r7}
 800c132:	b083      	sub	sp, #12
 800c134:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c136:	4b0b      	ldr	r3, [pc, #44]	@ (800c164 <xTaskGetSchedulerState+0x34>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d102      	bne.n	800c144 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c13e:	2301      	movs	r3, #1
 800c140:	607b      	str	r3, [r7, #4]
 800c142:	e008      	b.n	800c156 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c144:	4b08      	ldr	r3, [pc, #32]	@ (800c168 <xTaskGetSchedulerState+0x38>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d102      	bne.n	800c152 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c14c:	2302      	movs	r3, #2
 800c14e:	607b      	str	r3, [r7, #4]
 800c150:	e001      	b.n	800c156 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c152:	2300      	movs	r3, #0
 800c154:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c156:	687b      	ldr	r3, [r7, #4]
	}
 800c158:	4618      	mov	r0, r3
 800c15a:	370c      	adds	r7, #12
 800c15c:	46bd      	mov	sp, r7
 800c15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c162:	4770      	bx	lr
 800c164:	2000142c 	.word	0x2000142c
 800c168:	20001448 	.word	0x20001448

0800c16c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b086      	sub	sp, #24
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c178:	2300      	movs	r3, #0
 800c17a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d058      	beq.n	800c234 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c182:	4b2f      	ldr	r3, [pc, #188]	@ (800c240 <xTaskPriorityDisinherit+0xd4>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	693a      	ldr	r2, [r7, #16]
 800c188:	429a      	cmp	r2, r3
 800c18a:	d00b      	beq.n	800c1a4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c18c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c190:	f383 8811 	msr	BASEPRI, r3
 800c194:	f3bf 8f6f 	isb	sy
 800c198:	f3bf 8f4f 	dsb	sy
 800c19c:	60fb      	str	r3, [r7, #12]
}
 800c19e:	bf00      	nop
 800c1a0:	bf00      	nop
 800c1a2:	e7fd      	b.n	800c1a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d10b      	bne.n	800c1c4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c1ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1b0:	f383 8811 	msr	BASEPRI, r3
 800c1b4:	f3bf 8f6f 	isb	sy
 800c1b8:	f3bf 8f4f 	dsb	sy
 800c1bc:	60bb      	str	r3, [r7, #8]
}
 800c1be:	bf00      	nop
 800c1c0:	bf00      	nop
 800c1c2:	e7fd      	b.n	800c1c0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1c8:	1e5a      	subs	r2, r3, #1
 800c1ca:	693b      	ldr	r3, [r7, #16]
 800c1cc:	655a      	str	r2, [r3, #84]	@ 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1d2:	693b      	ldr	r3, [r7, #16]
 800c1d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d02c      	beq.n	800c234 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d128      	bne.n	800c234 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	3304      	adds	r3, #4
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f7fe fa50 	bl	800a68c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c1f0:	693b      	ldr	r3, [r7, #16]
 800c1f2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1f8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c1fc:	693b      	ldr	r3, [r7, #16]
 800c1fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c200:	693b      	ldr	r3, [r7, #16]
 800c202:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c204:	4b0f      	ldr	r3, [pc, #60]	@ (800c244 <xTaskPriorityDisinherit+0xd8>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	429a      	cmp	r2, r3
 800c20a:	d903      	bls.n	800c214 <xTaskPriorityDisinherit+0xa8>
 800c20c:	693b      	ldr	r3, [r7, #16]
 800c20e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c210:	4a0c      	ldr	r2, [pc, #48]	@ (800c244 <xTaskPriorityDisinherit+0xd8>)
 800c212:	6013      	str	r3, [r2, #0]
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c218:	4613      	mov	r3, r2
 800c21a:	009b      	lsls	r3, r3, #2
 800c21c:	4413      	add	r3, r2
 800c21e:	009b      	lsls	r3, r3, #2
 800c220:	4a09      	ldr	r2, [pc, #36]	@ (800c248 <xTaskPriorityDisinherit+0xdc>)
 800c222:	441a      	add	r2, r3
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	3304      	adds	r3, #4
 800c228:	4619      	mov	r1, r3
 800c22a:	4610      	mov	r0, r2
 800c22c:	f7fe f9d1 	bl	800a5d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c230:	2301      	movs	r3, #1
 800c232:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c234:	697b      	ldr	r3, [r7, #20]
	}
 800c236:	4618      	mov	r0, r3
 800c238:	3718      	adds	r7, #24
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}
 800c23e:	bf00      	nop
 800c240:	20000f4c 	.word	0x20000f4c
 800c244:	20001428 	.word	0x20001428
 800c248:	20000f50 	.word	0x20000f50

0800c24c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b084      	sub	sp, #16
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c256:	4b21      	ldr	r3, [pc, #132]	@ (800c2dc <prvAddCurrentTaskToDelayedList+0x90>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c25c:	4b20      	ldr	r3, [pc, #128]	@ (800c2e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	3304      	adds	r3, #4
 800c262:	4618      	mov	r0, r3
 800c264:	f7fe fa12 	bl	800a68c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c26e:	d10a      	bne.n	800c286 <prvAddCurrentTaskToDelayedList+0x3a>
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d007      	beq.n	800c286 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c276:	4b1a      	ldr	r3, [pc, #104]	@ (800c2e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	3304      	adds	r3, #4
 800c27c:	4619      	mov	r1, r3
 800c27e:	4819      	ldr	r0, [pc, #100]	@ (800c2e4 <prvAddCurrentTaskToDelayedList+0x98>)
 800c280:	f7fe f9a7 	bl	800a5d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c284:	e026      	b.n	800c2d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c286:	68fa      	ldr	r2, [r7, #12]
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	4413      	add	r3, r2
 800c28c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c28e:	4b14      	ldr	r3, [pc, #80]	@ (800c2e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	68ba      	ldr	r2, [r7, #8]
 800c294:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c296:	68ba      	ldr	r2, [r7, #8]
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d209      	bcs.n	800c2b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c29e:	4b12      	ldr	r3, [pc, #72]	@ (800c2e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c2a0:	681a      	ldr	r2, [r3, #0]
 800c2a2:	4b0f      	ldr	r3, [pc, #60]	@ (800c2e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	3304      	adds	r3, #4
 800c2a8:	4619      	mov	r1, r3
 800c2aa:	4610      	mov	r0, r2
 800c2ac:	f7fe f9b5 	bl	800a61a <vListInsert>
}
 800c2b0:	e010      	b.n	800c2d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2b2:	4b0e      	ldr	r3, [pc, #56]	@ (800c2ec <prvAddCurrentTaskToDelayedList+0xa0>)
 800c2b4:	681a      	ldr	r2, [r3, #0]
 800c2b6:	4b0a      	ldr	r3, [pc, #40]	@ (800c2e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	3304      	adds	r3, #4
 800c2bc:	4619      	mov	r1, r3
 800c2be:	4610      	mov	r0, r2
 800c2c0:	f7fe f9ab 	bl	800a61a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c2c4:	4b0a      	ldr	r3, [pc, #40]	@ (800c2f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	68ba      	ldr	r2, [r7, #8]
 800c2ca:	429a      	cmp	r2, r3
 800c2cc:	d202      	bcs.n	800c2d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c2ce:	4a08      	ldr	r2, [pc, #32]	@ (800c2f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	6013      	str	r3, [r2, #0]
}
 800c2d4:	bf00      	nop
 800c2d6:	3710      	adds	r7, #16
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}
 800c2dc:	20001424 	.word	0x20001424
 800c2e0:	20000f4c 	.word	0x20000f4c
 800c2e4:	2000140c 	.word	0x2000140c
 800c2e8:	200013dc 	.word	0x200013dc
 800c2ec:	200013d8 	.word	0x200013d8
 800c2f0:	20001440 	.word	0x20001440

0800c2f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b08a      	sub	sp, #40	@ 0x28
 800c2f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c2fe:	f000 fb13 	bl	800c928 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c302:	4b1d      	ldr	r3, [pc, #116]	@ (800c378 <xTimerCreateTimerTask+0x84>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d021      	beq.n	800c34e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c30a:	2300      	movs	r3, #0
 800c30c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c30e:	2300      	movs	r3, #0
 800c310:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c312:	1d3a      	adds	r2, r7, #4
 800c314:	f107 0108 	add.w	r1, r7, #8
 800c318:	f107 030c 	add.w	r3, r7, #12
 800c31c:	4618      	mov	r0, r3
 800c31e:	f7fe f911 	bl	800a544 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c322:	6879      	ldr	r1, [r7, #4]
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	68fa      	ldr	r2, [r7, #12]
 800c328:	9202      	str	r2, [sp, #8]
 800c32a:	9301      	str	r3, [sp, #4]
 800c32c:	2302      	movs	r3, #2
 800c32e:	9300      	str	r3, [sp, #0]
 800c330:	2300      	movs	r3, #0
 800c332:	460a      	mov	r2, r1
 800c334:	4911      	ldr	r1, [pc, #68]	@ (800c37c <xTimerCreateTimerTask+0x88>)
 800c336:	4812      	ldr	r0, [pc, #72]	@ (800c380 <xTimerCreateTimerTask+0x8c>)
 800c338:	f7fe ffc8 	bl	800b2cc <xTaskCreateStatic>
 800c33c:	4603      	mov	r3, r0
 800c33e:	4a11      	ldr	r2, [pc, #68]	@ (800c384 <xTimerCreateTimerTask+0x90>)
 800c340:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c342:	4b10      	ldr	r3, [pc, #64]	@ (800c384 <xTimerCreateTimerTask+0x90>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d001      	beq.n	800c34e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c34a:	2301      	movs	r3, #1
 800c34c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d10b      	bne.n	800c36c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c358:	f383 8811 	msr	BASEPRI, r3
 800c35c:	f3bf 8f6f 	isb	sy
 800c360:	f3bf 8f4f 	dsb	sy
 800c364:	613b      	str	r3, [r7, #16]
}
 800c366:	bf00      	nop
 800c368:	bf00      	nop
 800c36a:	e7fd      	b.n	800c368 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c36c:	697b      	ldr	r3, [r7, #20]
}
 800c36e:	4618      	mov	r0, r3
 800c370:	3718      	adds	r7, #24
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}
 800c376:	bf00      	nop
 800c378:	20001484 	.word	0x20001484
 800c37c:	08011d68 	.word	0x08011d68
 800c380:	0800c4c1 	.word	0x0800c4c1
 800c384:	20001488 	.word	0x20001488

0800c388 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b08a      	sub	sp, #40	@ 0x28
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	60f8      	str	r0, [r7, #12]
 800c390:	60b9      	str	r1, [r7, #8]
 800c392:	607a      	str	r2, [r7, #4]
 800c394:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c396:	2300      	movs	r3, #0
 800c398:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d10b      	bne.n	800c3b8 <xTimerGenericCommand+0x30>
	__asm volatile
 800c3a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3a4:	f383 8811 	msr	BASEPRI, r3
 800c3a8:	f3bf 8f6f 	isb	sy
 800c3ac:	f3bf 8f4f 	dsb	sy
 800c3b0:	623b      	str	r3, [r7, #32]
}
 800c3b2:	bf00      	nop
 800c3b4:	bf00      	nop
 800c3b6:	e7fd      	b.n	800c3b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c3b8:	4b19      	ldr	r3, [pc, #100]	@ (800c420 <xTimerGenericCommand+0x98>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d02a      	beq.n	800c416 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	2b05      	cmp	r3, #5
 800c3d0:	dc18      	bgt.n	800c404 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c3d2:	f7ff fead 	bl	800c130 <xTaskGetSchedulerState>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	2b02      	cmp	r3, #2
 800c3da:	d109      	bne.n	800c3f0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c3dc:	4b10      	ldr	r3, [pc, #64]	@ (800c420 <xTimerGenericCommand+0x98>)
 800c3de:	6818      	ldr	r0, [r3, #0]
 800c3e0:	f107 0110 	add.w	r1, r7, #16
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c3e8:	f7fe fac0 	bl	800a96c <xQueueGenericSend>
 800c3ec:	6278      	str	r0, [r7, #36]	@ 0x24
 800c3ee:	e012      	b.n	800c416 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c3f0:	4b0b      	ldr	r3, [pc, #44]	@ (800c420 <xTimerGenericCommand+0x98>)
 800c3f2:	6818      	ldr	r0, [r3, #0]
 800c3f4:	f107 0110 	add.w	r1, r7, #16
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	f7fe fab6 	bl	800a96c <xQueueGenericSend>
 800c400:	6278      	str	r0, [r7, #36]	@ 0x24
 800c402:	e008      	b.n	800c416 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c404:	4b06      	ldr	r3, [pc, #24]	@ (800c420 <xTimerGenericCommand+0x98>)
 800c406:	6818      	ldr	r0, [r3, #0]
 800c408:	f107 0110 	add.w	r1, r7, #16
 800c40c:	2300      	movs	r3, #0
 800c40e:	683a      	ldr	r2, [r7, #0]
 800c410:	f7fe fbae 	bl	800ab70 <xQueueGenericSendFromISR>
 800c414:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c418:	4618      	mov	r0, r3
 800c41a:	3728      	adds	r7, #40	@ 0x28
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}
 800c420:	20001484 	.word	0x20001484

0800c424 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b088      	sub	sp, #32
 800c428:	af02      	add	r7, sp, #8
 800c42a:	6078      	str	r0, [r7, #4]
 800c42c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c42e:	4b23      	ldr	r3, [pc, #140]	@ (800c4bc <prvProcessExpiredTimer+0x98>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	68db      	ldr	r3, [r3, #12]
 800c434:	68db      	ldr	r3, [r3, #12]
 800c436:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	3304      	adds	r3, #4
 800c43c:	4618      	mov	r0, r3
 800c43e:	f7fe f925 	bl	800a68c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c448:	f003 0304 	and.w	r3, r3, #4
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d023      	beq.n	800c498 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c450:	697b      	ldr	r3, [r7, #20]
 800c452:	699a      	ldr	r2, [r3, #24]
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	18d1      	adds	r1, r2, r3
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	683a      	ldr	r2, [r7, #0]
 800c45c:	6978      	ldr	r0, [r7, #20]
 800c45e:	f000 f8d5 	bl	800c60c <prvInsertTimerInActiveList>
 800c462:	4603      	mov	r3, r0
 800c464:	2b00      	cmp	r3, #0
 800c466:	d020      	beq.n	800c4aa <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c468:	2300      	movs	r3, #0
 800c46a:	9300      	str	r3, [sp, #0]
 800c46c:	2300      	movs	r3, #0
 800c46e:	687a      	ldr	r2, [r7, #4]
 800c470:	2100      	movs	r1, #0
 800c472:	6978      	ldr	r0, [r7, #20]
 800c474:	f7ff ff88 	bl	800c388 <xTimerGenericCommand>
 800c478:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d114      	bne.n	800c4aa <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c484:	f383 8811 	msr	BASEPRI, r3
 800c488:	f3bf 8f6f 	isb	sy
 800c48c:	f3bf 8f4f 	dsb	sy
 800c490:	60fb      	str	r3, [r7, #12]
}
 800c492:	bf00      	nop
 800c494:	bf00      	nop
 800c496:	e7fd      	b.n	800c494 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c49e:	f023 0301 	bic.w	r3, r3, #1
 800c4a2:	b2da      	uxtb	r2, r3
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c4aa:	697b      	ldr	r3, [r7, #20]
 800c4ac:	6a1b      	ldr	r3, [r3, #32]
 800c4ae:	6978      	ldr	r0, [r7, #20]
 800c4b0:	4798      	blx	r3
}
 800c4b2:	bf00      	nop
 800c4b4:	3718      	adds	r7, #24
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}
 800c4ba:	bf00      	nop
 800c4bc:	2000147c 	.word	0x2000147c

0800c4c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b084      	sub	sp, #16
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c4c8:	f107 0308 	add.w	r3, r7, #8
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f000 f859 	bl	800c584 <prvGetNextExpireTime>
 800c4d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	68f8      	ldr	r0, [r7, #12]
 800c4da:	f000 f805 	bl	800c4e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c4de:	f000 f8d7 	bl	800c690 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c4e2:	bf00      	nop
 800c4e4:	e7f0      	b.n	800c4c8 <prvTimerTask+0x8>
	...

0800c4e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b084      	sub	sp, #16
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
 800c4f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c4f2:	f7ff f957 	bl	800b7a4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c4f6:	f107 0308 	add.w	r3, r7, #8
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f000 f866 	bl	800c5cc <prvSampleTimeNow>
 800c500:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d130      	bne.n	800c56a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d10a      	bne.n	800c524 <prvProcessTimerOrBlockTask+0x3c>
 800c50e:	687a      	ldr	r2, [r7, #4]
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	429a      	cmp	r2, r3
 800c514:	d806      	bhi.n	800c524 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c516:	f7ff f98b 	bl	800b830 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c51a:	68f9      	ldr	r1, [r7, #12]
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f7ff ff81 	bl	800c424 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c522:	e024      	b.n	800c56e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d008      	beq.n	800c53c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c52a:	4b13      	ldr	r3, [pc, #76]	@ (800c578 <prvProcessTimerOrBlockTask+0x90>)
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d101      	bne.n	800c538 <prvProcessTimerOrBlockTask+0x50>
 800c534:	2301      	movs	r3, #1
 800c536:	e000      	b.n	800c53a <prvProcessTimerOrBlockTask+0x52>
 800c538:	2300      	movs	r3, #0
 800c53a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c53c:	4b0f      	ldr	r3, [pc, #60]	@ (800c57c <prvProcessTimerOrBlockTask+0x94>)
 800c53e:	6818      	ldr	r0, [r3, #0]
 800c540:	687a      	ldr	r2, [r7, #4]
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	1ad3      	subs	r3, r2, r3
 800c546:	683a      	ldr	r2, [r7, #0]
 800c548:	4619      	mov	r1, r3
 800c54a:	f7fe fe8b 	bl	800b264 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c54e:	f7ff f96f 	bl	800b830 <xTaskResumeAll>
 800c552:	4603      	mov	r3, r0
 800c554:	2b00      	cmp	r3, #0
 800c556:	d10a      	bne.n	800c56e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c558:	4b09      	ldr	r3, [pc, #36]	@ (800c580 <prvProcessTimerOrBlockTask+0x98>)
 800c55a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c55e:	601a      	str	r2, [r3, #0]
 800c560:	f3bf 8f4f 	dsb	sy
 800c564:	f3bf 8f6f 	isb	sy
}
 800c568:	e001      	b.n	800c56e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c56a:	f7ff f961 	bl	800b830 <xTaskResumeAll>
}
 800c56e:	bf00      	nop
 800c570:	3710      	adds	r7, #16
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}
 800c576:	bf00      	nop
 800c578:	20001480 	.word	0x20001480
 800c57c:	20001484 	.word	0x20001484
 800c580:	e000ed04 	.word	0xe000ed04

0800c584 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c584:	b480      	push	{r7}
 800c586:	b085      	sub	sp, #20
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c58c:	4b0e      	ldr	r3, [pc, #56]	@ (800c5c8 <prvGetNextExpireTime+0x44>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d101      	bne.n	800c59a <prvGetNextExpireTime+0x16>
 800c596:	2201      	movs	r2, #1
 800c598:	e000      	b.n	800c59c <prvGetNextExpireTime+0x18>
 800c59a:	2200      	movs	r2, #0
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d105      	bne.n	800c5b4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c5a8:	4b07      	ldr	r3, [pc, #28]	@ (800c5c8 <prvGetNextExpireTime+0x44>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	68db      	ldr	r3, [r3, #12]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	60fb      	str	r3, [r7, #12]
 800c5b2:	e001      	b.n	800c5b8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
}
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	3714      	adds	r7, #20
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c4:	4770      	bx	lr
 800c5c6:	bf00      	nop
 800c5c8:	2000147c 	.word	0x2000147c

0800c5cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b084      	sub	sp, #16
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c5d4:	f7ff f9ca 	bl	800b96c <xTaskGetTickCount>
 800c5d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c5da:	4b0b      	ldr	r3, [pc, #44]	@ (800c608 <prvSampleTimeNow+0x3c>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	68fa      	ldr	r2, [r7, #12]
 800c5e0:	429a      	cmp	r2, r3
 800c5e2:	d205      	bcs.n	800c5f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c5e4:	f000 f93a 	bl	800c85c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2201      	movs	r2, #1
 800c5ec:	601a      	str	r2, [r3, #0]
 800c5ee:	e002      	b.n	800c5f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c5f6:	4a04      	ldr	r2, [pc, #16]	@ (800c608 <prvSampleTimeNow+0x3c>)
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	3710      	adds	r7, #16
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}
 800c606:	bf00      	nop
 800c608:	2000148c 	.word	0x2000148c

0800c60c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b086      	sub	sp, #24
 800c610:	af00      	add	r7, sp, #0
 800c612:	60f8      	str	r0, [r7, #12]
 800c614:	60b9      	str	r1, [r7, #8]
 800c616:	607a      	str	r2, [r7, #4]
 800c618:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c61a:	2300      	movs	r3, #0
 800c61c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	68ba      	ldr	r2, [r7, #8]
 800c622:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	68fa      	ldr	r2, [r7, #12]
 800c628:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c62a:	68ba      	ldr	r2, [r7, #8]
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	429a      	cmp	r2, r3
 800c630:	d812      	bhi.n	800c658 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c632:	687a      	ldr	r2, [r7, #4]
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	1ad2      	subs	r2, r2, r3
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	699b      	ldr	r3, [r3, #24]
 800c63c:	429a      	cmp	r2, r3
 800c63e:	d302      	bcc.n	800c646 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c640:	2301      	movs	r3, #1
 800c642:	617b      	str	r3, [r7, #20]
 800c644:	e01b      	b.n	800c67e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c646:	4b10      	ldr	r3, [pc, #64]	@ (800c688 <prvInsertTimerInActiveList+0x7c>)
 800c648:	681a      	ldr	r2, [r3, #0]
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	3304      	adds	r3, #4
 800c64e:	4619      	mov	r1, r3
 800c650:	4610      	mov	r0, r2
 800c652:	f7fd ffe2 	bl	800a61a <vListInsert>
 800c656:	e012      	b.n	800c67e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c658:	687a      	ldr	r2, [r7, #4]
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	429a      	cmp	r2, r3
 800c65e:	d206      	bcs.n	800c66e <prvInsertTimerInActiveList+0x62>
 800c660:	68ba      	ldr	r2, [r7, #8]
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	429a      	cmp	r2, r3
 800c666:	d302      	bcc.n	800c66e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c668:	2301      	movs	r3, #1
 800c66a:	617b      	str	r3, [r7, #20]
 800c66c:	e007      	b.n	800c67e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c66e:	4b07      	ldr	r3, [pc, #28]	@ (800c68c <prvInsertTimerInActiveList+0x80>)
 800c670:	681a      	ldr	r2, [r3, #0]
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	3304      	adds	r3, #4
 800c676:	4619      	mov	r1, r3
 800c678:	4610      	mov	r0, r2
 800c67a:	f7fd ffce 	bl	800a61a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c67e:	697b      	ldr	r3, [r7, #20]
}
 800c680:	4618      	mov	r0, r3
 800c682:	3718      	adds	r7, #24
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}
 800c688:	20001480 	.word	0x20001480
 800c68c:	2000147c 	.word	0x2000147c

0800c690 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b08e      	sub	sp, #56	@ 0x38
 800c694:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c696:	e0ce      	b.n	800c836 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	da19      	bge.n	800c6d2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c69e:	1d3b      	adds	r3, r7, #4
 800c6a0:	3304      	adds	r3, #4
 800c6a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c6a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d10b      	bne.n	800c6c2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c6aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6ae:	f383 8811 	msr	BASEPRI, r3
 800c6b2:	f3bf 8f6f 	isb	sy
 800c6b6:	f3bf 8f4f 	dsb	sy
 800c6ba:	61fb      	str	r3, [r7, #28]
}
 800c6bc:	bf00      	nop
 800c6be:	bf00      	nop
 800c6c0:	e7fd      	b.n	800c6be <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c6c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c6c8:	6850      	ldr	r0, [r2, #4]
 800c6ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c6cc:	6892      	ldr	r2, [r2, #8]
 800c6ce:	4611      	mov	r1, r2
 800c6d0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	f2c0 80ae 	blt.w	800c836 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c6de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6e0:	695b      	ldr	r3, [r3, #20]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d004      	beq.n	800c6f0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c6e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6e8:	3304      	adds	r3, #4
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f7fd ffce 	bl	800a68c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c6f0:	463b      	mov	r3, r7
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f7ff ff6a 	bl	800c5cc <prvSampleTimeNow>
 800c6f8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	2b09      	cmp	r3, #9
 800c6fe:	f200 8097 	bhi.w	800c830 <prvProcessReceivedCommands+0x1a0>
 800c702:	a201      	add	r2, pc, #4	@ (adr r2, 800c708 <prvProcessReceivedCommands+0x78>)
 800c704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c708:	0800c731 	.word	0x0800c731
 800c70c:	0800c731 	.word	0x0800c731
 800c710:	0800c731 	.word	0x0800c731
 800c714:	0800c7a7 	.word	0x0800c7a7
 800c718:	0800c7bb 	.word	0x0800c7bb
 800c71c:	0800c807 	.word	0x0800c807
 800c720:	0800c731 	.word	0x0800c731
 800c724:	0800c731 	.word	0x0800c731
 800c728:	0800c7a7 	.word	0x0800c7a7
 800c72c:	0800c7bb 	.word	0x0800c7bb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c732:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c736:	f043 0301 	orr.w	r3, r3, #1
 800c73a:	b2da      	uxtb	r2, r3
 800c73c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c73e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c742:	68ba      	ldr	r2, [r7, #8]
 800c744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c746:	699b      	ldr	r3, [r3, #24]
 800c748:	18d1      	adds	r1, r2, r3
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c74e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c750:	f7ff ff5c 	bl	800c60c <prvInsertTimerInActiveList>
 800c754:	4603      	mov	r3, r0
 800c756:	2b00      	cmp	r3, #0
 800c758:	d06c      	beq.n	800c834 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c75a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c75c:	6a1b      	ldr	r3, [r3, #32]
 800c75e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c760:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c764:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c768:	f003 0304 	and.w	r3, r3, #4
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d061      	beq.n	800c834 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c770:	68ba      	ldr	r2, [r7, #8]
 800c772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c774:	699b      	ldr	r3, [r3, #24]
 800c776:	441a      	add	r2, r3
 800c778:	2300      	movs	r3, #0
 800c77a:	9300      	str	r3, [sp, #0]
 800c77c:	2300      	movs	r3, #0
 800c77e:	2100      	movs	r1, #0
 800c780:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c782:	f7ff fe01 	bl	800c388 <xTimerGenericCommand>
 800c786:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c788:	6a3b      	ldr	r3, [r7, #32]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d152      	bne.n	800c834 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c78e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c792:	f383 8811 	msr	BASEPRI, r3
 800c796:	f3bf 8f6f 	isb	sy
 800c79a:	f3bf 8f4f 	dsb	sy
 800c79e:	61bb      	str	r3, [r7, #24]
}
 800c7a0:	bf00      	nop
 800c7a2:	bf00      	nop
 800c7a4:	e7fd      	b.n	800c7a2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c7a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c7ac:	f023 0301 	bic.w	r3, r3, #1
 800c7b0:	b2da      	uxtb	r2, r3
 800c7b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7b4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c7b8:	e03d      	b.n	800c836 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c7ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c7c0:	f043 0301 	orr.w	r3, r3, #1
 800c7c4:	b2da      	uxtb	r2, r3
 800c7c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c7cc:	68ba      	ldr	r2, [r7, #8]
 800c7ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7d0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c7d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7d4:	699b      	ldr	r3, [r3, #24]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d10b      	bne.n	800c7f2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c7da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7de:	f383 8811 	msr	BASEPRI, r3
 800c7e2:	f3bf 8f6f 	isb	sy
 800c7e6:	f3bf 8f4f 	dsb	sy
 800c7ea:	617b      	str	r3, [r7, #20]
}
 800c7ec:	bf00      	nop
 800c7ee:	bf00      	nop
 800c7f0:	e7fd      	b.n	800c7ee <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c7f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7f4:	699a      	ldr	r2, [r3, #24]
 800c7f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7f8:	18d1      	adds	r1, r2, r3
 800c7fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c7fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c800:	f7ff ff04 	bl	800c60c <prvInsertTimerInActiveList>
					break;
 800c804:	e017      	b.n	800c836 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c808:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c80c:	f003 0302 	and.w	r3, r3, #2
 800c810:	2b00      	cmp	r3, #0
 800c812:	d103      	bne.n	800c81c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c814:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c816:	f000 fccb 	bl	800d1b0 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c81a:	e00c      	b.n	800c836 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c81c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c81e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c822:	f023 0301 	bic.w	r3, r3, #1
 800c826:	b2da      	uxtb	r2, r3
 800c828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c82a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c82e:	e002      	b.n	800c836 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c830:	bf00      	nop
 800c832:	e000      	b.n	800c836 <prvProcessReceivedCommands+0x1a6>
					break;
 800c834:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c836:	4b08      	ldr	r3, [pc, #32]	@ (800c858 <prvProcessReceivedCommands+0x1c8>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	1d39      	adds	r1, r7, #4
 800c83c:	2200      	movs	r2, #0
 800c83e:	4618      	mov	r0, r3
 800c840:	f7fe fa34 	bl	800acac <xQueueReceive>
 800c844:	4603      	mov	r3, r0
 800c846:	2b00      	cmp	r3, #0
 800c848:	f47f af26 	bne.w	800c698 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c84c:	bf00      	nop
 800c84e:	bf00      	nop
 800c850:	3730      	adds	r7, #48	@ 0x30
 800c852:	46bd      	mov	sp, r7
 800c854:	bd80      	pop	{r7, pc}
 800c856:	bf00      	nop
 800c858:	20001484 	.word	0x20001484

0800c85c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b088      	sub	sp, #32
 800c860:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c862:	e049      	b.n	800c8f8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c864:	4b2e      	ldr	r3, [pc, #184]	@ (800c920 <prvSwitchTimerLists+0xc4>)
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	68db      	ldr	r3, [r3, #12]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c86e:	4b2c      	ldr	r3, [pc, #176]	@ (800c920 <prvSwitchTimerLists+0xc4>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	68db      	ldr	r3, [r3, #12]
 800c874:	68db      	ldr	r3, [r3, #12]
 800c876:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	3304      	adds	r3, #4
 800c87c:	4618      	mov	r0, r3
 800c87e:	f7fd ff05 	bl	800a68c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	6a1b      	ldr	r3, [r3, #32]
 800c886:	68f8      	ldr	r0, [r7, #12]
 800c888:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c890:	f003 0304 	and.w	r3, r3, #4
 800c894:	2b00      	cmp	r3, #0
 800c896:	d02f      	beq.n	800c8f8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	699b      	ldr	r3, [r3, #24]
 800c89c:	693a      	ldr	r2, [r7, #16]
 800c89e:	4413      	add	r3, r2
 800c8a0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c8a2:	68ba      	ldr	r2, [r7, #8]
 800c8a4:	693b      	ldr	r3, [r7, #16]
 800c8a6:	429a      	cmp	r2, r3
 800c8a8:	d90e      	bls.n	800c8c8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	68ba      	ldr	r2, [r7, #8]
 800c8ae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	68fa      	ldr	r2, [r7, #12]
 800c8b4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c8b6:	4b1a      	ldr	r3, [pc, #104]	@ (800c920 <prvSwitchTimerLists+0xc4>)
 800c8b8:	681a      	ldr	r2, [r3, #0]
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	3304      	adds	r3, #4
 800c8be:	4619      	mov	r1, r3
 800c8c0:	4610      	mov	r0, r2
 800c8c2:	f7fd feaa 	bl	800a61a <vListInsert>
 800c8c6:	e017      	b.n	800c8f8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	9300      	str	r3, [sp, #0]
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	693a      	ldr	r2, [r7, #16]
 800c8d0:	2100      	movs	r1, #0
 800c8d2:	68f8      	ldr	r0, [r7, #12]
 800c8d4:	f7ff fd58 	bl	800c388 <xTimerGenericCommand>
 800c8d8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d10b      	bne.n	800c8f8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c8e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8e4:	f383 8811 	msr	BASEPRI, r3
 800c8e8:	f3bf 8f6f 	isb	sy
 800c8ec:	f3bf 8f4f 	dsb	sy
 800c8f0:	603b      	str	r3, [r7, #0]
}
 800c8f2:	bf00      	nop
 800c8f4:	bf00      	nop
 800c8f6:	e7fd      	b.n	800c8f4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c8f8:	4b09      	ldr	r3, [pc, #36]	@ (800c920 <prvSwitchTimerLists+0xc4>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d1b0      	bne.n	800c864 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c902:	4b07      	ldr	r3, [pc, #28]	@ (800c920 <prvSwitchTimerLists+0xc4>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c908:	4b06      	ldr	r3, [pc, #24]	@ (800c924 <prvSwitchTimerLists+0xc8>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	4a04      	ldr	r2, [pc, #16]	@ (800c920 <prvSwitchTimerLists+0xc4>)
 800c90e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c910:	4a04      	ldr	r2, [pc, #16]	@ (800c924 <prvSwitchTimerLists+0xc8>)
 800c912:	697b      	ldr	r3, [r7, #20]
 800c914:	6013      	str	r3, [r2, #0]
}
 800c916:	bf00      	nop
 800c918:	3718      	adds	r7, #24
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}
 800c91e:	bf00      	nop
 800c920:	2000147c 	.word	0x2000147c
 800c924:	20001480 	.word	0x20001480

0800c928 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b082      	sub	sp, #8
 800c92c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c92e:	f000 f96b 	bl	800cc08 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c932:	4b15      	ldr	r3, [pc, #84]	@ (800c988 <prvCheckForValidListAndQueue+0x60>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d120      	bne.n	800c97c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c93a:	4814      	ldr	r0, [pc, #80]	@ (800c98c <prvCheckForValidListAndQueue+0x64>)
 800c93c:	f7fd fe1c 	bl	800a578 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c940:	4813      	ldr	r0, [pc, #76]	@ (800c990 <prvCheckForValidListAndQueue+0x68>)
 800c942:	f7fd fe19 	bl	800a578 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c946:	4b13      	ldr	r3, [pc, #76]	@ (800c994 <prvCheckForValidListAndQueue+0x6c>)
 800c948:	4a10      	ldr	r2, [pc, #64]	@ (800c98c <prvCheckForValidListAndQueue+0x64>)
 800c94a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c94c:	4b12      	ldr	r3, [pc, #72]	@ (800c998 <prvCheckForValidListAndQueue+0x70>)
 800c94e:	4a10      	ldr	r2, [pc, #64]	@ (800c990 <prvCheckForValidListAndQueue+0x68>)
 800c950:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c952:	2300      	movs	r3, #0
 800c954:	9300      	str	r3, [sp, #0]
 800c956:	4b11      	ldr	r3, [pc, #68]	@ (800c99c <prvCheckForValidListAndQueue+0x74>)
 800c958:	4a11      	ldr	r2, [pc, #68]	@ (800c9a0 <prvCheckForValidListAndQueue+0x78>)
 800c95a:	2110      	movs	r1, #16
 800c95c:	200a      	movs	r0, #10
 800c95e:	f7fd ff29 	bl	800a7b4 <xQueueGenericCreateStatic>
 800c962:	4603      	mov	r3, r0
 800c964:	4a08      	ldr	r2, [pc, #32]	@ (800c988 <prvCheckForValidListAndQueue+0x60>)
 800c966:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c968:	4b07      	ldr	r3, [pc, #28]	@ (800c988 <prvCheckForValidListAndQueue+0x60>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d005      	beq.n	800c97c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c970:	4b05      	ldr	r3, [pc, #20]	@ (800c988 <prvCheckForValidListAndQueue+0x60>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	490b      	ldr	r1, [pc, #44]	@ (800c9a4 <prvCheckForValidListAndQueue+0x7c>)
 800c976:	4618      	mov	r0, r3
 800c978:	f7fe fc4a 	bl	800b210 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c97c:	f000 f976 	bl	800cc6c <vPortExitCritical>
}
 800c980:	bf00      	nop
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}
 800c986:	bf00      	nop
 800c988:	20001484 	.word	0x20001484
 800c98c:	20001454 	.word	0x20001454
 800c990:	20001468 	.word	0x20001468
 800c994:	2000147c 	.word	0x2000147c
 800c998:	20001480 	.word	0x20001480
 800c99c:	20001530 	.word	0x20001530
 800c9a0:	20001490 	.word	0x20001490
 800c9a4:	08011d70 	.word	0x08011d70

0800c9a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c9a8:	b480      	push	{r7}
 800c9aa:	b085      	sub	sp, #20
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	60f8      	str	r0, [r7, #12]
 800c9b0:	60b9      	str	r1, [r7, #8]
 800c9b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	3b04      	subs	r3, #4
 800c9b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c9c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	3b04      	subs	r3, #4
 800c9c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	f023 0201 	bic.w	r2, r3, #1
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	3b04      	subs	r3, #4
 800c9d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c9d8:	4a0c      	ldr	r2, [pc, #48]	@ (800ca0c <pxPortInitialiseStack+0x64>)
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	3b14      	subs	r3, #20
 800c9e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c9e4:	687a      	ldr	r2, [r7, #4]
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	3b04      	subs	r3, #4
 800c9ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	f06f 0202 	mvn.w	r2, #2
 800c9f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	3b20      	subs	r3, #32
 800c9fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	3714      	adds	r7, #20
 800ca04:	46bd      	mov	sp, r7
 800ca06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0a:	4770      	bx	lr
 800ca0c:	0800ca11 	.word	0x0800ca11

0800ca10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ca10:	b480      	push	{r7}
 800ca12:	b085      	sub	sp, #20
 800ca14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ca16:	2300      	movs	r3, #0
 800ca18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ca1a:	4b13      	ldr	r3, [pc, #76]	@ (800ca68 <prvTaskExitError+0x58>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca22:	d00b      	beq.n	800ca3c <prvTaskExitError+0x2c>
	__asm volatile
 800ca24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca28:	f383 8811 	msr	BASEPRI, r3
 800ca2c:	f3bf 8f6f 	isb	sy
 800ca30:	f3bf 8f4f 	dsb	sy
 800ca34:	60fb      	str	r3, [r7, #12]
}
 800ca36:	bf00      	nop
 800ca38:	bf00      	nop
 800ca3a:	e7fd      	b.n	800ca38 <prvTaskExitError+0x28>
	__asm volatile
 800ca3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca40:	f383 8811 	msr	BASEPRI, r3
 800ca44:	f3bf 8f6f 	isb	sy
 800ca48:	f3bf 8f4f 	dsb	sy
 800ca4c:	60bb      	str	r3, [r7, #8]
}
 800ca4e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ca50:	bf00      	nop
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d0fc      	beq.n	800ca52 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ca58:	bf00      	nop
 800ca5a:	bf00      	nop
 800ca5c:	3714      	adds	r7, #20
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca64:	4770      	bx	lr
 800ca66:	bf00      	nop
 800ca68:	200000fc 	.word	0x200000fc
 800ca6c:	00000000 	.word	0x00000000

0800ca70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ca70:	4b07      	ldr	r3, [pc, #28]	@ (800ca90 <pxCurrentTCBConst2>)
 800ca72:	6819      	ldr	r1, [r3, #0]
 800ca74:	6808      	ldr	r0, [r1, #0]
 800ca76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca7a:	f380 8809 	msr	PSP, r0
 800ca7e:	f3bf 8f6f 	isb	sy
 800ca82:	f04f 0000 	mov.w	r0, #0
 800ca86:	f380 8811 	msr	BASEPRI, r0
 800ca8a:	4770      	bx	lr
 800ca8c:	f3af 8000 	nop.w

0800ca90 <pxCurrentTCBConst2>:
 800ca90:	20000f4c 	.word	0x20000f4c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ca94:	bf00      	nop
 800ca96:	bf00      	nop

0800ca98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ca98:	4808      	ldr	r0, [pc, #32]	@ (800cabc <prvPortStartFirstTask+0x24>)
 800ca9a:	6800      	ldr	r0, [r0, #0]
 800ca9c:	6800      	ldr	r0, [r0, #0]
 800ca9e:	f380 8808 	msr	MSP, r0
 800caa2:	f04f 0000 	mov.w	r0, #0
 800caa6:	f380 8814 	msr	CONTROL, r0
 800caaa:	b662      	cpsie	i
 800caac:	b661      	cpsie	f
 800caae:	f3bf 8f4f 	dsb	sy
 800cab2:	f3bf 8f6f 	isb	sy
 800cab6:	df00      	svc	0
 800cab8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800caba:	bf00      	nop
 800cabc:	e000ed08 	.word	0xe000ed08

0800cac0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b086      	sub	sp, #24
 800cac4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cac6:	4b47      	ldr	r3, [pc, #284]	@ (800cbe4 <xPortStartScheduler+0x124>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	4a47      	ldr	r2, [pc, #284]	@ (800cbe8 <xPortStartScheduler+0x128>)
 800cacc:	4293      	cmp	r3, r2
 800cace:	d10b      	bne.n	800cae8 <xPortStartScheduler+0x28>
	__asm volatile
 800cad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cad4:	f383 8811 	msr	BASEPRI, r3
 800cad8:	f3bf 8f6f 	isb	sy
 800cadc:	f3bf 8f4f 	dsb	sy
 800cae0:	60fb      	str	r3, [r7, #12]
}
 800cae2:	bf00      	nop
 800cae4:	bf00      	nop
 800cae6:	e7fd      	b.n	800cae4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cae8:	4b3e      	ldr	r3, [pc, #248]	@ (800cbe4 <xPortStartScheduler+0x124>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	4a3f      	ldr	r2, [pc, #252]	@ (800cbec <xPortStartScheduler+0x12c>)
 800caee:	4293      	cmp	r3, r2
 800caf0:	d10b      	bne.n	800cb0a <xPortStartScheduler+0x4a>
	__asm volatile
 800caf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caf6:	f383 8811 	msr	BASEPRI, r3
 800cafa:	f3bf 8f6f 	isb	sy
 800cafe:	f3bf 8f4f 	dsb	sy
 800cb02:	613b      	str	r3, [r7, #16]
}
 800cb04:	bf00      	nop
 800cb06:	bf00      	nop
 800cb08:	e7fd      	b.n	800cb06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cb0a:	4b39      	ldr	r3, [pc, #228]	@ (800cbf0 <xPortStartScheduler+0x130>)
 800cb0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cb0e:	697b      	ldr	r3, [r7, #20]
 800cb10:	781b      	ldrb	r3, [r3, #0]
 800cb12:	b2db      	uxtb	r3, r3
 800cb14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cb16:	697b      	ldr	r3, [r7, #20]
 800cb18:	22ff      	movs	r2, #255	@ 0xff
 800cb1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	781b      	ldrb	r3, [r3, #0]
 800cb20:	b2db      	uxtb	r3, r3
 800cb22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cb24:	78fb      	ldrb	r3, [r7, #3]
 800cb26:	b2db      	uxtb	r3, r3
 800cb28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800cb2c:	b2da      	uxtb	r2, r3
 800cb2e:	4b31      	ldr	r3, [pc, #196]	@ (800cbf4 <xPortStartScheduler+0x134>)
 800cb30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cb32:	4b31      	ldr	r3, [pc, #196]	@ (800cbf8 <xPortStartScheduler+0x138>)
 800cb34:	2207      	movs	r2, #7
 800cb36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cb38:	e009      	b.n	800cb4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800cb3a:	4b2f      	ldr	r3, [pc, #188]	@ (800cbf8 <xPortStartScheduler+0x138>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	3b01      	subs	r3, #1
 800cb40:	4a2d      	ldr	r2, [pc, #180]	@ (800cbf8 <xPortStartScheduler+0x138>)
 800cb42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cb44:	78fb      	ldrb	r3, [r7, #3]
 800cb46:	b2db      	uxtb	r3, r3
 800cb48:	005b      	lsls	r3, r3, #1
 800cb4a:	b2db      	uxtb	r3, r3
 800cb4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cb4e:	78fb      	ldrb	r3, [r7, #3]
 800cb50:	b2db      	uxtb	r3, r3
 800cb52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb56:	2b80      	cmp	r3, #128	@ 0x80
 800cb58:	d0ef      	beq.n	800cb3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cb5a:	4b27      	ldr	r3, [pc, #156]	@ (800cbf8 <xPortStartScheduler+0x138>)
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	f1c3 0307 	rsb	r3, r3, #7
 800cb62:	2b04      	cmp	r3, #4
 800cb64:	d00b      	beq.n	800cb7e <xPortStartScheduler+0xbe>
	__asm volatile
 800cb66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb6a:	f383 8811 	msr	BASEPRI, r3
 800cb6e:	f3bf 8f6f 	isb	sy
 800cb72:	f3bf 8f4f 	dsb	sy
 800cb76:	60bb      	str	r3, [r7, #8]
}
 800cb78:	bf00      	nop
 800cb7a:	bf00      	nop
 800cb7c:	e7fd      	b.n	800cb7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cb7e:	4b1e      	ldr	r3, [pc, #120]	@ (800cbf8 <xPortStartScheduler+0x138>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	021b      	lsls	r3, r3, #8
 800cb84:	4a1c      	ldr	r2, [pc, #112]	@ (800cbf8 <xPortStartScheduler+0x138>)
 800cb86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cb88:	4b1b      	ldr	r3, [pc, #108]	@ (800cbf8 <xPortStartScheduler+0x138>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800cb90:	4a19      	ldr	r2, [pc, #100]	@ (800cbf8 <xPortStartScheduler+0x138>)
 800cb92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	b2da      	uxtb	r2, r3
 800cb98:	697b      	ldr	r3, [r7, #20]
 800cb9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cb9c:	4b17      	ldr	r3, [pc, #92]	@ (800cbfc <xPortStartScheduler+0x13c>)
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	4a16      	ldr	r2, [pc, #88]	@ (800cbfc <xPortStartScheduler+0x13c>)
 800cba2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800cba6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cba8:	4b14      	ldr	r3, [pc, #80]	@ (800cbfc <xPortStartScheduler+0x13c>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	4a13      	ldr	r2, [pc, #76]	@ (800cbfc <xPortStartScheduler+0x13c>)
 800cbae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800cbb2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cbb4:	f000 f9a6 	bl	800cf04 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cbb8:	4b11      	ldr	r3, [pc, #68]	@ (800cc00 <xPortStartScheduler+0x140>)
 800cbba:	2200      	movs	r2, #0
 800cbbc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cbbe:	f000 f9dd 	bl	800cf7c <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cbc2:	4b10      	ldr	r3, [pc, #64]	@ (800cc04 <xPortStartScheduler+0x144>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	4a0f      	ldr	r2, [pc, #60]	@ (800cc04 <xPortStartScheduler+0x144>)
 800cbc8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800cbcc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cbce:	f7ff ff63 	bl	800ca98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cbd2:	f7fe ffbd 	bl	800bb50 <vTaskSwitchContext>
	prvTaskExitError();
 800cbd6:	f7ff ff1b 	bl	800ca10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cbda:	2300      	movs	r3, #0
}
 800cbdc:	4618      	mov	r0, r3
 800cbde:	3718      	adds	r7, #24
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}
 800cbe4:	e000ed00 	.word	0xe000ed00
 800cbe8:	410fc271 	.word	0x410fc271
 800cbec:	410fc270 	.word	0x410fc270
 800cbf0:	e000e400 	.word	0xe000e400
 800cbf4:	2000158c 	.word	0x2000158c
 800cbf8:	20001590 	.word	0x20001590
 800cbfc:	e000ed20 	.word	0xe000ed20
 800cc00:	200000fc 	.word	0x200000fc
 800cc04:	e000ef34 	.word	0xe000ef34

0800cc08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cc08:	b480      	push	{r7}
 800cc0a:	b083      	sub	sp, #12
 800cc0c:	af00      	add	r7, sp, #0
	__asm volatile
 800cc0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc12:	f383 8811 	msr	BASEPRI, r3
 800cc16:	f3bf 8f6f 	isb	sy
 800cc1a:	f3bf 8f4f 	dsb	sy
 800cc1e:	607b      	str	r3, [r7, #4]
}
 800cc20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cc22:	4b10      	ldr	r3, [pc, #64]	@ (800cc64 <vPortEnterCritical+0x5c>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	3301      	adds	r3, #1
 800cc28:	4a0e      	ldr	r2, [pc, #56]	@ (800cc64 <vPortEnterCritical+0x5c>)
 800cc2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cc2c:	4b0d      	ldr	r3, [pc, #52]	@ (800cc64 <vPortEnterCritical+0x5c>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	2b01      	cmp	r3, #1
 800cc32:	d110      	bne.n	800cc56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cc34:	4b0c      	ldr	r3, [pc, #48]	@ (800cc68 <vPortEnterCritical+0x60>)
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	b2db      	uxtb	r3, r3
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d00b      	beq.n	800cc56 <vPortEnterCritical+0x4e>
	__asm volatile
 800cc3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc42:	f383 8811 	msr	BASEPRI, r3
 800cc46:	f3bf 8f6f 	isb	sy
 800cc4a:	f3bf 8f4f 	dsb	sy
 800cc4e:	603b      	str	r3, [r7, #0]
}
 800cc50:	bf00      	nop
 800cc52:	bf00      	nop
 800cc54:	e7fd      	b.n	800cc52 <vPortEnterCritical+0x4a>
	}
}
 800cc56:	bf00      	nop
 800cc58:	370c      	adds	r7, #12
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc60:	4770      	bx	lr
 800cc62:	bf00      	nop
 800cc64:	200000fc 	.word	0x200000fc
 800cc68:	e000ed04 	.word	0xe000ed04

0800cc6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	b083      	sub	sp, #12
 800cc70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cc72:	4b12      	ldr	r3, [pc, #72]	@ (800ccbc <vPortExitCritical+0x50>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d10b      	bne.n	800cc92 <vPortExitCritical+0x26>
	__asm volatile
 800cc7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc7e:	f383 8811 	msr	BASEPRI, r3
 800cc82:	f3bf 8f6f 	isb	sy
 800cc86:	f3bf 8f4f 	dsb	sy
 800cc8a:	607b      	str	r3, [r7, #4]
}
 800cc8c:	bf00      	nop
 800cc8e:	bf00      	nop
 800cc90:	e7fd      	b.n	800cc8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cc92:	4b0a      	ldr	r3, [pc, #40]	@ (800ccbc <vPortExitCritical+0x50>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	3b01      	subs	r3, #1
 800cc98:	4a08      	ldr	r2, [pc, #32]	@ (800ccbc <vPortExitCritical+0x50>)
 800cc9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cc9c:	4b07      	ldr	r3, [pc, #28]	@ (800ccbc <vPortExitCritical+0x50>)
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d105      	bne.n	800ccb0 <vPortExitCritical+0x44>
 800cca4:	2300      	movs	r3, #0
 800cca6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	f383 8811 	msr	BASEPRI, r3
}
 800ccae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ccb0:	bf00      	nop
 800ccb2:	370c      	adds	r7, #12
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccba:	4770      	bx	lr
 800ccbc:	200000fc 	.word	0x200000fc

0800ccc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ccc0:	f3ef 8009 	mrs	r0, PSP
 800ccc4:	f3bf 8f6f 	isb	sy
 800ccc8:	4b15      	ldr	r3, [pc, #84]	@ (800cd20 <pxCurrentTCBConst>)
 800ccca:	681a      	ldr	r2, [r3, #0]
 800cccc:	f01e 0f10 	tst.w	lr, #16
 800ccd0:	bf08      	it	eq
 800ccd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ccd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccda:	6010      	str	r0, [r2, #0]
 800ccdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cce0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800cce4:	f380 8811 	msr	BASEPRI, r0
 800cce8:	f3bf 8f4f 	dsb	sy
 800ccec:	f3bf 8f6f 	isb	sy
 800ccf0:	f7fe ff2e 	bl	800bb50 <vTaskSwitchContext>
 800ccf4:	f04f 0000 	mov.w	r0, #0
 800ccf8:	f380 8811 	msr	BASEPRI, r0
 800ccfc:	bc09      	pop	{r0, r3}
 800ccfe:	6819      	ldr	r1, [r3, #0]
 800cd00:	6808      	ldr	r0, [r1, #0]
 800cd02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd06:	f01e 0f10 	tst.w	lr, #16
 800cd0a:	bf08      	it	eq
 800cd0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cd10:	f380 8809 	msr	PSP, r0
 800cd14:	f3bf 8f6f 	isb	sy
 800cd18:	4770      	bx	lr
 800cd1a:	bf00      	nop
 800cd1c:	f3af 8000 	nop.w

0800cd20 <pxCurrentTCBConst>:
 800cd20:	20000f4c 	.word	0x20000f4c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cd24:	bf00      	nop
 800cd26:	bf00      	nop

0800cd28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b082      	sub	sp, #8
 800cd2c:	af00      	add	r7, sp, #0
	__asm volatile
 800cd2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd32:	f383 8811 	msr	BASEPRI, r3
 800cd36:	f3bf 8f6f 	isb	sy
 800cd3a:	f3bf 8f4f 	dsb	sy
 800cd3e:	607b      	str	r3, [r7, #4]
}
 800cd40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cd42:	f7fe fe4b 	bl	800b9dc <xTaskIncrementTick>
 800cd46:	4603      	mov	r3, r0
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d003      	beq.n	800cd54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cd4c:	4b06      	ldr	r3, [pc, #24]	@ (800cd68 <xPortSysTickHandler+0x40>)
 800cd4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd52:	601a      	str	r2, [r3, #0]
 800cd54:	2300      	movs	r3, #0
 800cd56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	f383 8811 	msr	BASEPRI, r3
}
 800cd5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cd60:	bf00      	nop
 800cd62:	3708      	adds	r7, #8
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd80      	pop	{r7, pc}
 800cd68:	e000ed04 	.word	0xe000ed04

0800cd6c <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b088      	sub	sp, #32
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 800cd74:	4b5d      	ldr	r3, [pc, #372]	@ (800ceec <vPortSuppressTicksAndSleep+0x180>)
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	687a      	ldr	r2, [r7, #4]
 800cd7a:	429a      	cmp	r2, r3
 800cd7c:	d902      	bls.n	800cd84 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800cd7e:	4b5b      	ldr	r3, [pc, #364]	@ (800ceec <vPortSuppressTicksAndSleep+0x180>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800cd84:	4b5a      	ldr	r3, [pc, #360]	@ (800cef0 <vPortSuppressTicksAndSleep+0x184>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	4a59      	ldr	r2, [pc, #356]	@ (800cef0 <vPortSuppressTicksAndSleep+0x184>)
 800cd8a:	f023 0301 	bic.w	r3, r3, #1
 800cd8e:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800cd90:	4b58      	ldr	r3, [pc, #352]	@ (800cef4 <vPortSuppressTicksAndSleep+0x188>)
 800cd92:	681a      	ldr	r2, [r3, #0]
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	3b01      	subs	r3, #1
 800cd98:	4957      	ldr	r1, [pc, #348]	@ (800cef8 <vPortSuppressTicksAndSleep+0x18c>)
 800cd9a:	6809      	ldr	r1, [r1, #0]
 800cd9c:	fb01 f303 	mul.w	r3, r1, r3
 800cda0:	4413      	add	r3, r2
 800cda2:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 800cda4:	4b55      	ldr	r3, [pc, #340]	@ (800cefc <vPortSuppressTicksAndSleep+0x190>)
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	69fa      	ldr	r2, [r7, #28]
 800cdaa:	429a      	cmp	r2, r3
 800cdac:	d904      	bls.n	800cdb8 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800cdae:	4b53      	ldr	r3, [pc, #332]	@ (800cefc <vPortSuppressTicksAndSleep+0x190>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	69fa      	ldr	r2, [r7, #28]
 800cdb4:	1ad3      	subs	r3, r2, r3
 800cdb6:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 800cdb8:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800cdba:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800cdbe:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800cdc2:	f7ff f8c3 	bl	800bf4c <eTaskConfirmSleepModeStatus>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d110      	bne.n	800cdee <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800cdcc:	4b49      	ldr	r3, [pc, #292]	@ (800cef4 <vPortSuppressTicksAndSleep+0x188>)
 800cdce:	4a4c      	ldr	r2, [pc, #304]	@ (800cf00 <vPortSuppressTicksAndSleep+0x194>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800cdd4:	4b46      	ldr	r3, [pc, #280]	@ (800cef0 <vPortSuppressTicksAndSleep+0x184>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	4a45      	ldr	r2, [pc, #276]	@ (800cef0 <vPortSuppressTicksAndSleep+0x184>)
 800cdda:	f043 0301 	orr.w	r3, r3, #1
 800cdde:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800cde0:	4b45      	ldr	r3, [pc, #276]	@ (800cef8 <vPortSuppressTicksAndSleep+0x18c>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	4a46      	ldr	r2, [pc, #280]	@ (800cf00 <vPortSuppressTicksAndSleep+0x194>)
 800cde6:	3b01      	subs	r3, #1
 800cde8:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800cdea:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800cdec:	e079      	b.n	800cee2 <vPortSuppressTicksAndSleep+0x176>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800cdee:	4a44      	ldr	r2, [pc, #272]	@ (800cf00 <vPortSuppressTicksAndSleep+0x194>)
 800cdf0:	69fb      	ldr	r3, [r7, #28]
 800cdf2:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cdf4:	4b3f      	ldr	r3, [pc, #252]	@ (800cef4 <vPortSuppressTicksAndSleep+0x188>)
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800cdfa:	4b3d      	ldr	r3, [pc, #244]	@ (800cef0 <vPortSuppressTicksAndSleep+0x184>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	4a3c      	ldr	r2, [pc, #240]	@ (800cef0 <vPortSuppressTicksAndSleep+0x184>)
 800ce00:	f043 0301 	orr.w	r3, r3, #1
 800ce04:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	613b      	str	r3, [r7, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	613b      	str	r3, [r7, #16]
 800ce0e:	6938      	ldr	r0, [r7, #16]
 800ce10:	f7f6 fe76 	bl	8003b00 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 800ce14:	693b      	ldr	r3, [r7, #16]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d004      	beq.n	800ce24 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 800ce1a:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 800ce1e:	bf30      	wfi
				__asm volatile( "isb" );
 800ce20:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f7f6 fe75 	bl	8003b14 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800ce2a:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800ce2c:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800ce30:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 800ce34:	b672      	cpsid	i
			__asm volatile( "dsb" );
 800ce36:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800ce3a:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800ce3e:	4b2c      	ldr	r3, [pc, #176]	@ (800cef0 <vPortSuppressTicksAndSleep+0x184>)
 800ce40:	2206      	movs	r2, #6
 800ce42:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800ce44:	4b2a      	ldr	r3, [pc, #168]	@ (800cef0 <vPortSuppressTicksAndSleep+0x184>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d01d      	beq.n	800ce8c <vPortSuppressTicksAndSleep+0x120>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800ce50:	4b29      	ldr	r3, [pc, #164]	@ (800cef8 <vPortSuppressTicksAndSleep+0x18c>)
 800ce52:	681a      	ldr	r2, [r3, #0]
 800ce54:	4b27      	ldr	r3, [pc, #156]	@ (800cef4 <vPortSuppressTicksAndSleep+0x188>)
 800ce56:	6819      	ldr	r1, [r3, #0]
 800ce58:	69fb      	ldr	r3, [r7, #28]
 800ce5a:	1acb      	subs	r3, r1, r3
 800ce5c:	4413      	add	r3, r2
 800ce5e:	3b01      	subs	r3, #1
 800ce60:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800ce62:	4b26      	ldr	r3, [pc, #152]	@ (800cefc <vPortSuppressTicksAndSleep+0x190>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	697a      	ldr	r2, [r7, #20]
 800ce68:	429a      	cmp	r2, r3
 800ce6a:	d304      	bcc.n	800ce76 <vPortSuppressTicksAndSleep+0x10a>
 800ce6c:	4b22      	ldr	r3, [pc, #136]	@ (800cef8 <vPortSuppressTicksAndSleep+0x18c>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	697a      	ldr	r2, [r7, #20]
 800ce72:	429a      	cmp	r2, r3
 800ce74:	d903      	bls.n	800ce7e <vPortSuppressTicksAndSleep+0x112>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 800ce76:	4b20      	ldr	r3, [pc, #128]	@ (800cef8 <vPortSuppressTicksAndSleep+0x18c>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	3b01      	subs	r3, #1
 800ce7c:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800ce7e:	4a20      	ldr	r2, [pc, #128]	@ (800cf00 <vPortSuppressTicksAndSleep+0x194>)
 800ce80:	697b      	ldr	r3, [r7, #20]
 800ce82:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	3b01      	subs	r3, #1
 800ce88:	61bb      	str	r3, [r7, #24]
 800ce8a:	e018      	b.n	800cebe <vPortSuppressTicksAndSleep+0x152>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800ce8c:	4b1a      	ldr	r3, [pc, #104]	@ (800cef8 <vPortSuppressTicksAndSleep+0x18c>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	687a      	ldr	r2, [r7, #4]
 800ce92:	fb03 f202 	mul.w	r2, r3, r2
 800ce96:	4b17      	ldr	r3, [pc, #92]	@ (800cef4 <vPortSuppressTicksAndSleep+0x188>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	1ad3      	subs	r3, r2, r3
 800ce9c:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800ce9e:	4b16      	ldr	r3, [pc, #88]	@ (800cef8 <vPortSuppressTicksAndSleep+0x18c>)
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	68fa      	ldr	r2, [r7, #12]
 800cea4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cea8:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800ceaa:	69bb      	ldr	r3, [r7, #24]
 800ceac:	3301      	adds	r3, #1
 800ceae:	4a12      	ldr	r2, [pc, #72]	@ (800cef8 <vPortSuppressTicksAndSleep+0x18c>)
 800ceb0:	6812      	ldr	r2, [r2, #0]
 800ceb2:	fb03 f202 	mul.w	r2, r3, r2
 800ceb6:	4912      	ldr	r1, [pc, #72]	@ (800cf00 <vPortSuppressTicksAndSleep+0x194>)
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	1ad3      	subs	r3, r2, r3
 800cebc:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cebe:	4b0d      	ldr	r3, [pc, #52]	@ (800cef4 <vPortSuppressTicksAndSleep+0x188>)
 800cec0:	2200      	movs	r2, #0
 800cec2:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800cec4:	4b0a      	ldr	r3, [pc, #40]	@ (800cef0 <vPortSuppressTicksAndSleep+0x184>)
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	4a09      	ldr	r2, [pc, #36]	@ (800cef0 <vPortSuppressTicksAndSleep+0x184>)
 800ceca:	f043 0301 	orr.w	r3, r3, #1
 800cece:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 800ced0:	69b8      	ldr	r0, [r7, #24]
 800ced2:	f7fe fd5b 	bl	800b98c <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800ced6:	4b08      	ldr	r3, [pc, #32]	@ (800cef8 <vPortSuppressTicksAndSleep+0x18c>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	4a09      	ldr	r2, [pc, #36]	@ (800cf00 <vPortSuppressTicksAndSleep+0x194>)
 800cedc:	3b01      	subs	r3, #1
 800cede:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 800cee0:	b662      	cpsie	i
	}
 800cee2:	bf00      	nop
 800cee4:	3720      	adds	r7, #32
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}
 800ceea:	bf00      	nop
 800ceec:	20001584 	.word	0x20001584
 800cef0:	e000e010 	.word	0xe000e010
 800cef4:	e000e018 	.word	0xe000e018
 800cef8:	20001580 	.word	0x20001580
 800cefc:	20001588 	.word	0x20001588
 800cf00:	e000e014 	.word	0xe000e014

0800cf04 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cf04:	b480      	push	{r7}
 800cf06:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800cf08:	4b14      	ldr	r3, [pc, #80]	@ (800cf5c <vPortSetupTimerInterrupt+0x58>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	4a14      	ldr	r2, [pc, #80]	@ (800cf60 <vPortSetupTimerInterrupt+0x5c>)
 800cf0e:	fba2 2303 	umull	r2, r3, r2, r3
 800cf12:	099b      	lsrs	r3, r3, #6
 800cf14:	4a13      	ldr	r2, [pc, #76]	@ (800cf64 <vPortSetupTimerInterrupt+0x60>)
 800cf16:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800cf18:	4b12      	ldr	r3, [pc, #72]	@ (800cf64 <vPortSetupTimerInterrupt+0x60>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800cf20:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf24:	4a10      	ldr	r2, [pc, #64]	@ (800cf68 <vPortSetupTimerInterrupt+0x64>)
 800cf26:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800cf28:	4b10      	ldr	r3, [pc, #64]	@ (800cf6c <vPortSetupTimerInterrupt+0x68>)
 800cf2a:	222d      	movs	r2, #45	@ 0x2d
 800cf2c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cf2e:	4b10      	ldr	r3, [pc, #64]	@ (800cf70 <vPortSetupTimerInterrupt+0x6c>)
 800cf30:	2200      	movs	r2, #0
 800cf32:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cf34:	4b0f      	ldr	r3, [pc, #60]	@ (800cf74 <vPortSetupTimerInterrupt+0x70>)
 800cf36:	2200      	movs	r2, #0
 800cf38:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cf3a:	4b08      	ldr	r3, [pc, #32]	@ (800cf5c <vPortSetupTimerInterrupt+0x58>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	4a08      	ldr	r2, [pc, #32]	@ (800cf60 <vPortSetupTimerInterrupt+0x5c>)
 800cf40:	fba2 2303 	umull	r2, r3, r2, r3
 800cf44:	099b      	lsrs	r3, r3, #6
 800cf46:	4a0c      	ldr	r2, [pc, #48]	@ (800cf78 <vPortSetupTimerInterrupt+0x74>)
 800cf48:	3b01      	subs	r3, #1
 800cf4a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cf4c:	4b08      	ldr	r3, [pc, #32]	@ (800cf70 <vPortSetupTimerInterrupt+0x6c>)
 800cf4e:	2207      	movs	r2, #7
 800cf50:	601a      	str	r2, [r3, #0]
}
 800cf52:	bf00      	nop
 800cf54:	46bd      	mov	sp, r7
 800cf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5a:	4770      	bx	lr
 800cf5c:	200000f0 	.word	0x200000f0
 800cf60:	10624dd3 	.word	0x10624dd3
 800cf64:	20001580 	.word	0x20001580
 800cf68:	20001584 	.word	0x20001584
 800cf6c:	20001588 	.word	0x20001588
 800cf70:	e000e010 	.word	0xe000e010
 800cf74:	e000e018 	.word	0xe000e018
 800cf78:	e000e014 	.word	0xe000e014

0800cf7c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cf7c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800cf8c <vPortEnableVFP+0x10>
 800cf80:	6801      	ldr	r1, [r0, #0]
 800cf82:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800cf86:	6001      	str	r1, [r0, #0]
 800cf88:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cf8a:	bf00      	nop
 800cf8c:	e000ed88 	.word	0xe000ed88

0800cf90 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cf90:	b480      	push	{r7}
 800cf92:	b085      	sub	sp, #20
 800cf94:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cf96:	f3ef 8305 	mrs	r3, IPSR
 800cf9a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	2b0f      	cmp	r3, #15
 800cfa0:	d915      	bls.n	800cfce <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cfa2:	4a18      	ldr	r2, [pc, #96]	@ (800d004 <vPortValidateInterruptPriority+0x74>)
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	4413      	add	r3, r2
 800cfa8:	781b      	ldrb	r3, [r3, #0]
 800cfaa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cfac:	4b16      	ldr	r3, [pc, #88]	@ (800d008 <vPortValidateInterruptPriority+0x78>)
 800cfae:	781b      	ldrb	r3, [r3, #0]
 800cfb0:	7afa      	ldrb	r2, [r7, #11]
 800cfb2:	429a      	cmp	r2, r3
 800cfb4:	d20b      	bcs.n	800cfce <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800cfb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfba:	f383 8811 	msr	BASEPRI, r3
 800cfbe:	f3bf 8f6f 	isb	sy
 800cfc2:	f3bf 8f4f 	dsb	sy
 800cfc6:	607b      	str	r3, [r7, #4]
}
 800cfc8:	bf00      	nop
 800cfca:	bf00      	nop
 800cfcc:	e7fd      	b.n	800cfca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cfce:	4b0f      	ldr	r3, [pc, #60]	@ (800d00c <vPortValidateInterruptPriority+0x7c>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800cfd6:	4b0e      	ldr	r3, [pc, #56]	@ (800d010 <vPortValidateInterruptPriority+0x80>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	d90b      	bls.n	800cff6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800cfde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfe2:	f383 8811 	msr	BASEPRI, r3
 800cfe6:	f3bf 8f6f 	isb	sy
 800cfea:	f3bf 8f4f 	dsb	sy
 800cfee:	603b      	str	r3, [r7, #0]
}
 800cff0:	bf00      	nop
 800cff2:	bf00      	nop
 800cff4:	e7fd      	b.n	800cff2 <vPortValidateInterruptPriority+0x62>
	}
 800cff6:	bf00      	nop
 800cff8:	3714      	adds	r7, #20
 800cffa:	46bd      	mov	sp, r7
 800cffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d000:	4770      	bx	lr
 800d002:	bf00      	nop
 800d004:	e000e3f0 	.word	0xe000e3f0
 800d008:	2000158c 	.word	0x2000158c
 800d00c:	e000ed0c 	.word	0xe000ed0c
 800d010:	20001590 	.word	0x20001590

0800d014 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b08a      	sub	sp, #40	@ 0x28
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d01c:	2300      	movs	r3, #0
 800d01e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d020:	f7fe fbc0 	bl	800b7a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d024:	4b5c      	ldr	r3, [pc, #368]	@ (800d198 <pvPortMalloc+0x184>)
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d101      	bne.n	800d030 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d02c:	f000 f924 	bl	800d278 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d030:	4b5a      	ldr	r3, [pc, #360]	@ (800d19c <pvPortMalloc+0x188>)
 800d032:	681a      	ldr	r2, [r3, #0]
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	4013      	ands	r3, r2
 800d038:	2b00      	cmp	r3, #0
 800d03a:	f040 8095 	bne.w	800d168 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d01e      	beq.n	800d082 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d044:	2208      	movs	r2, #8
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	4413      	add	r3, r2
 800d04a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f003 0307 	and.w	r3, r3, #7
 800d052:	2b00      	cmp	r3, #0
 800d054:	d015      	beq.n	800d082 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	f023 0307 	bic.w	r3, r3, #7
 800d05c:	3308      	adds	r3, #8
 800d05e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f003 0307 	and.w	r3, r3, #7
 800d066:	2b00      	cmp	r3, #0
 800d068:	d00b      	beq.n	800d082 <pvPortMalloc+0x6e>
	__asm volatile
 800d06a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d06e:	f383 8811 	msr	BASEPRI, r3
 800d072:	f3bf 8f6f 	isb	sy
 800d076:	f3bf 8f4f 	dsb	sy
 800d07a:	617b      	str	r3, [r7, #20]
}
 800d07c:	bf00      	nop
 800d07e:	bf00      	nop
 800d080:	e7fd      	b.n	800d07e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d06f      	beq.n	800d168 <pvPortMalloc+0x154>
 800d088:	4b45      	ldr	r3, [pc, #276]	@ (800d1a0 <pvPortMalloc+0x18c>)
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	687a      	ldr	r2, [r7, #4]
 800d08e:	429a      	cmp	r2, r3
 800d090:	d86a      	bhi.n	800d168 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d092:	4b44      	ldr	r3, [pc, #272]	@ (800d1a4 <pvPortMalloc+0x190>)
 800d094:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d096:	4b43      	ldr	r3, [pc, #268]	@ (800d1a4 <pvPortMalloc+0x190>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d09c:	e004      	b.n	800d0a8 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d09e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0a0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d0a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d0a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0aa:	685b      	ldr	r3, [r3, #4]
 800d0ac:	687a      	ldr	r2, [r7, #4]
 800d0ae:	429a      	cmp	r2, r3
 800d0b0:	d903      	bls.n	800d0ba <pvPortMalloc+0xa6>
 800d0b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d1f1      	bne.n	800d09e <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d0ba:	4b37      	ldr	r3, [pc, #220]	@ (800d198 <pvPortMalloc+0x184>)
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d0c0:	429a      	cmp	r2, r3
 800d0c2:	d051      	beq.n	800d168 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d0c4:	6a3b      	ldr	r3, [r7, #32]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	2208      	movs	r2, #8
 800d0ca:	4413      	add	r3, r2
 800d0cc:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d0ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0d0:	681a      	ldr	r2, [r3, #0]
 800d0d2:	6a3b      	ldr	r3, [r7, #32]
 800d0d4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d0d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0d8:	685a      	ldr	r2, [r3, #4]
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	1ad2      	subs	r2, r2, r3
 800d0de:	2308      	movs	r3, #8
 800d0e0:	005b      	lsls	r3, r3, #1
 800d0e2:	429a      	cmp	r2, r3
 800d0e4:	d920      	bls.n	800d128 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d0e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	4413      	add	r3, r2
 800d0ec:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d0ee:	69bb      	ldr	r3, [r7, #24]
 800d0f0:	f003 0307 	and.w	r3, r3, #7
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d00b      	beq.n	800d110 <pvPortMalloc+0xfc>
	__asm volatile
 800d0f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0fc:	f383 8811 	msr	BASEPRI, r3
 800d100:	f3bf 8f6f 	isb	sy
 800d104:	f3bf 8f4f 	dsb	sy
 800d108:	613b      	str	r3, [r7, #16]
}
 800d10a:	bf00      	nop
 800d10c:	bf00      	nop
 800d10e:	e7fd      	b.n	800d10c <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d112:	685a      	ldr	r2, [r3, #4]
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	1ad2      	subs	r2, r2, r3
 800d118:	69bb      	ldr	r3, [r7, #24]
 800d11a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d11c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d11e:	687a      	ldr	r2, [r7, #4]
 800d120:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d122:	69b8      	ldr	r0, [r7, #24]
 800d124:	f000 f90a 	bl	800d33c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d128:	4b1d      	ldr	r3, [pc, #116]	@ (800d1a0 <pvPortMalloc+0x18c>)
 800d12a:	681a      	ldr	r2, [r3, #0]
 800d12c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d12e:	685b      	ldr	r3, [r3, #4]
 800d130:	1ad3      	subs	r3, r2, r3
 800d132:	4a1b      	ldr	r2, [pc, #108]	@ (800d1a0 <pvPortMalloc+0x18c>)
 800d134:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d136:	4b1a      	ldr	r3, [pc, #104]	@ (800d1a0 <pvPortMalloc+0x18c>)
 800d138:	681a      	ldr	r2, [r3, #0]
 800d13a:	4b1b      	ldr	r3, [pc, #108]	@ (800d1a8 <pvPortMalloc+0x194>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	429a      	cmp	r2, r3
 800d140:	d203      	bcs.n	800d14a <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d142:	4b17      	ldr	r3, [pc, #92]	@ (800d1a0 <pvPortMalloc+0x18c>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	4a18      	ldr	r2, [pc, #96]	@ (800d1a8 <pvPortMalloc+0x194>)
 800d148:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d14a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d14c:	685a      	ldr	r2, [r3, #4]
 800d14e:	4b13      	ldr	r3, [pc, #76]	@ (800d19c <pvPortMalloc+0x188>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	431a      	orrs	r2, r3
 800d154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d156:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d15a:	2200      	movs	r2, #0
 800d15c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d15e:	4b13      	ldr	r3, [pc, #76]	@ (800d1ac <pvPortMalloc+0x198>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	3301      	adds	r3, #1
 800d164:	4a11      	ldr	r2, [pc, #68]	@ (800d1ac <pvPortMalloc+0x198>)
 800d166:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d168:	f7fe fb62 	bl	800b830 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d16c:	69fb      	ldr	r3, [r7, #28]
 800d16e:	f003 0307 	and.w	r3, r3, #7
 800d172:	2b00      	cmp	r3, #0
 800d174:	d00b      	beq.n	800d18e <pvPortMalloc+0x17a>
	__asm volatile
 800d176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d17a:	f383 8811 	msr	BASEPRI, r3
 800d17e:	f3bf 8f6f 	isb	sy
 800d182:	f3bf 8f4f 	dsb	sy
 800d186:	60fb      	str	r3, [r7, #12]
}
 800d188:	bf00      	nop
 800d18a:	bf00      	nop
 800d18c:	e7fd      	b.n	800d18a <pvPortMalloc+0x176>
	return pvReturn;
 800d18e:	69fb      	ldr	r3, [r7, #28]
}
 800d190:	4618      	mov	r0, r3
 800d192:	3728      	adds	r7, #40	@ 0x28
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}
 800d198:	2000519c 	.word	0x2000519c
 800d19c:	200051b0 	.word	0x200051b0
 800d1a0:	200051a0 	.word	0x200051a0
 800d1a4:	20005194 	.word	0x20005194
 800d1a8:	200051a4 	.word	0x200051a4
 800d1ac:	200051a8 	.word	0x200051a8

0800d1b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b086      	sub	sp, #24
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d04f      	beq.n	800d262 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d1c2:	2308      	movs	r3, #8
 800d1c4:	425b      	negs	r3, r3
 800d1c6:	697a      	ldr	r2, [r7, #20]
 800d1c8:	4413      	add	r3, r2
 800d1ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d1cc:	697b      	ldr	r3, [r7, #20]
 800d1ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d1d0:	693b      	ldr	r3, [r7, #16]
 800d1d2:	685a      	ldr	r2, [r3, #4]
 800d1d4:	4b25      	ldr	r3, [pc, #148]	@ (800d26c <vPortFree+0xbc>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	4013      	ands	r3, r2
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d10b      	bne.n	800d1f6 <vPortFree+0x46>
	__asm volatile
 800d1de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1e2:	f383 8811 	msr	BASEPRI, r3
 800d1e6:	f3bf 8f6f 	isb	sy
 800d1ea:	f3bf 8f4f 	dsb	sy
 800d1ee:	60fb      	str	r3, [r7, #12]
}
 800d1f0:	bf00      	nop
 800d1f2:	bf00      	nop
 800d1f4:	e7fd      	b.n	800d1f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d1f6:	693b      	ldr	r3, [r7, #16]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d00b      	beq.n	800d216 <vPortFree+0x66>
	__asm volatile
 800d1fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d202:	f383 8811 	msr	BASEPRI, r3
 800d206:	f3bf 8f6f 	isb	sy
 800d20a:	f3bf 8f4f 	dsb	sy
 800d20e:	60bb      	str	r3, [r7, #8]
}
 800d210:	bf00      	nop
 800d212:	bf00      	nop
 800d214:	e7fd      	b.n	800d212 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d216:	693b      	ldr	r3, [r7, #16]
 800d218:	685a      	ldr	r2, [r3, #4]
 800d21a:	4b14      	ldr	r3, [pc, #80]	@ (800d26c <vPortFree+0xbc>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	4013      	ands	r3, r2
 800d220:	2b00      	cmp	r3, #0
 800d222:	d01e      	beq.n	800d262 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d224:	693b      	ldr	r3, [r7, #16]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d11a      	bne.n	800d262 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d22c:	693b      	ldr	r3, [r7, #16]
 800d22e:	685a      	ldr	r2, [r3, #4]
 800d230:	4b0e      	ldr	r3, [pc, #56]	@ (800d26c <vPortFree+0xbc>)
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	43db      	mvns	r3, r3
 800d236:	401a      	ands	r2, r3
 800d238:	693b      	ldr	r3, [r7, #16]
 800d23a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d23c:	f7fe fab2 	bl	800b7a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d240:	693b      	ldr	r3, [r7, #16]
 800d242:	685a      	ldr	r2, [r3, #4]
 800d244:	4b0a      	ldr	r3, [pc, #40]	@ (800d270 <vPortFree+0xc0>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	4413      	add	r3, r2
 800d24a:	4a09      	ldr	r2, [pc, #36]	@ (800d270 <vPortFree+0xc0>)
 800d24c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d24e:	6938      	ldr	r0, [r7, #16]
 800d250:	f000 f874 	bl	800d33c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d254:	4b07      	ldr	r3, [pc, #28]	@ (800d274 <vPortFree+0xc4>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	3301      	adds	r3, #1
 800d25a:	4a06      	ldr	r2, [pc, #24]	@ (800d274 <vPortFree+0xc4>)
 800d25c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d25e:	f7fe fae7 	bl	800b830 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d262:	bf00      	nop
 800d264:	3718      	adds	r7, #24
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}
 800d26a:	bf00      	nop
 800d26c:	200051b0 	.word	0x200051b0
 800d270:	200051a0 	.word	0x200051a0
 800d274:	200051ac 	.word	0x200051ac

0800d278 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d278:	b480      	push	{r7}
 800d27a:	b085      	sub	sp, #20
 800d27c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d27e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800d282:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d284:	4b27      	ldr	r3, [pc, #156]	@ (800d324 <prvHeapInit+0xac>)
 800d286:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	f003 0307 	and.w	r3, r3, #7
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d00c      	beq.n	800d2ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	3307      	adds	r3, #7
 800d296:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	f023 0307 	bic.w	r3, r3, #7
 800d29e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d2a0:	68ba      	ldr	r2, [r7, #8]
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	1ad3      	subs	r3, r2, r3
 800d2a6:	4a1f      	ldr	r2, [pc, #124]	@ (800d324 <prvHeapInit+0xac>)
 800d2a8:	4413      	add	r3, r2
 800d2aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d2b0:	4a1d      	ldr	r2, [pc, #116]	@ (800d328 <prvHeapInit+0xb0>)
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d2b6:	4b1c      	ldr	r3, [pc, #112]	@ (800d328 <prvHeapInit+0xb0>)
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	68ba      	ldr	r2, [r7, #8]
 800d2c0:	4413      	add	r3, r2
 800d2c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d2c4:	2208      	movs	r2, #8
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	1a9b      	subs	r3, r3, r2
 800d2ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	f023 0307 	bic.w	r3, r3, #7
 800d2d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	4a15      	ldr	r2, [pc, #84]	@ (800d32c <prvHeapInit+0xb4>)
 800d2d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d2da:	4b14      	ldr	r3, [pc, #80]	@ (800d32c <prvHeapInit+0xb4>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	2200      	movs	r2, #0
 800d2e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d2e2:	4b12      	ldr	r3, [pc, #72]	@ (800d32c <prvHeapInit+0xb4>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	68fa      	ldr	r2, [r7, #12]
 800d2f2:	1ad2      	subs	r2, r2, r3
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d2f8:	4b0c      	ldr	r3, [pc, #48]	@ (800d32c <prvHeapInit+0xb4>)
 800d2fa:	681a      	ldr	r2, [r3, #0]
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	685b      	ldr	r3, [r3, #4]
 800d304:	4a0a      	ldr	r2, [pc, #40]	@ (800d330 <prvHeapInit+0xb8>)
 800d306:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	685b      	ldr	r3, [r3, #4]
 800d30c:	4a09      	ldr	r2, [pc, #36]	@ (800d334 <prvHeapInit+0xbc>)
 800d30e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d310:	4b09      	ldr	r3, [pc, #36]	@ (800d338 <prvHeapInit+0xc0>)
 800d312:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d316:	601a      	str	r2, [r3, #0]
}
 800d318:	bf00      	nop
 800d31a:	3714      	adds	r7, #20
 800d31c:	46bd      	mov	sp, r7
 800d31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d322:	4770      	bx	lr
 800d324:	20001594 	.word	0x20001594
 800d328:	20005194 	.word	0x20005194
 800d32c:	2000519c 	.word	0x2000519c
 800d330:	200051a4 	.word	0x200051a4
 800d334:	200051a0 	.word	0x200051a0
 800d338:	200051b0 	.word	0x200051b0

0800d33c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d33c:	b480      	push	{r7}
 800d33e:	b085      	sub	sp, #20
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d344:	4b28      	ldr	r3, [pc, #160]	@ (800d3e8 <prvInsertBlockIntoFreeList+0xac>)
 800d346:	60fb      	str	r3, [r7, #12]
 800d348:	e002      	b.n	800d350 <prvInsertBlockIntoFreeList+0x14>
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	60fb      	str	r3, [r7, #12]
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	687a      	ldr	r2, [r7, #4]
 800d356:	429a      	cmp	r2, r3
 800d358:	d8f7      	bhi.n	800d34a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	685b      	ldr	r3, [r3, #4]
 800d362:	68ba      	ldr	r2, [r7, #8]
 800d364:	4413      	add	r3, r2
 800d366:	687a      	ldr	r2, [r7, #4]
 800d368:	429a      	cmp	r2, r3
 800d36a:	d108      	bne.n	800d37e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	685a      	ldr	r2, [r3, #4]
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	685b      	ldr	r3, [r3, #4]
 800d374:	441a      	add	r2, r3
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	685b      	ldr	r3, [r3, #4]
 800d386:	68ba      	ldr	r2, [r7, #8]
 800d388:	441a      	add	r2, r3
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	429a      	cmp	r2, r3
 800d390:	d118      	bne.n	800d3c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	681a      	ldr	r2, [r3, #0]
 800d396:	4b15      	ldr	r3, [pc, #84]	@ (800d3ec <prvInsertBlockIntoFreeList+0xb0>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	429a      	cmp	r2, r3
 800d39c:	d00d      	beq.n	800d3ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	685a      	ldr	r2, [r3, #4]
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	685b      	ldr	r3, [r3, #4]
 800d3a8:	441a      	add	r2, r3
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	681a      	ldr	r2, [r3, #0]
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	601a      	str	r2, [r3, #0]
 800d3b8:	e008      	b.n	800d3cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d3ba:	4b0c      	ldr	r3, [pc, #48]	@ (800d3ec <prvInsertBlockIntoFreeList+0xb0>)
 800d3bc:	681a      	ldr	r2, [r3, #0]
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	601a      	str	r2, [r3, #0]
 800d3c2:	e003      	b.n	800d3cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	681a      	ldr	r2, [r3, #0]
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d3cc:	68fa      	ldr	r2, [r7, #12]
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	429a      	cmp	r2, r3
 800d3d2:	d002      	beq.n	800d3da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	687a      	ldr	r2, [r7, #4]
 800d3d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d3da:	bf00      	nop
 800d3dc:	3714      	adds	r7, #20
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e4:	4770      	bx	lr
 800d3e6:	bf00      	nop
 800d3e8:	20005194 	.word	0x20005194
 800d3ec:	2000519c 	.word	0x2000519c

0800d3f0 <atof>:
 800d3f0:	2100      	movs	r1, #0
 800d3f2:	f000 be0b 	b.w	800e00c <strtod>

0800d3f6 <sulp>:
 800d3f6:	b570      	push	{r4, r5, r6, lr}
 800d3f8:	4604      	mov	r4, r0
 800d3fa:	460d      	mov	r5, r1
 800d3fc:	ec45 4b10 	vmov	d0, r4, r5
 800d400:	4616      	mov	r6, r2
 800d402:	f003 fcf1 	bl	8010de8 <__ulp>
 800d406:	ec51 0b10 	vmov	r0, r1, d0
 800d40a:	b17e      	cbz	r6, 800d42c <sulp+0x36>
 800d40c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d410:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d414:	2b00      	cmp	r3, #0
 800d416:	dd09      	ble.n	800d42c <sulp+0x36>
 800d418:	051b      	lsls	r3, r3, #20
 800d41a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d41e:	2400      	movs	r4, #0
 800d420:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d424:	4622      	mov	r2, r4
 800d426:	462b      	mov	r3, r5
 800d428:	f7f3 f8ee 	bl	8000608 <__aeabi_dmul>
 800d42c:	ec41 0b10 	vmov	d0, r0, r1
 800d430:	bd70      	pop	{r4, r5, r6, pc}
 800d432:	0000      	movs	r0, r0
 800d434:	0000      	movs	r0, r0
	...

0800d438 <_strtod_l>:
 800d438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d43c:	b09f      	sub	sp, #124	@ 0x7c
 800d43e:	460c      	mov	r4, r1
 800d440:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d442:	2200      	movs	r2, #0
 800d444:	921a      	str	r2, [sp, #104]	@ 0x68
 800d446:	9005      	str	r0, [sp, #20]
 800d448:	f04f 0a00 	mov.w	sl, #0
 800d44c:	f04f 0b00 	mov.w	fp, #0
 800d450:	460a      	mov	r2, r1
 800d452:	9219      	str	r2, [sp, #100]	@ 0x64
 800d454:	7811      	ldrb	r1, [r2, #0]
 800d456:	292b      	cmp	r1, #43	@ 0x2b
 800d458:	d04a      	beq.n	800d4f0 <_strtod_l+0xb8>
 800d45a:	d838      	bhi.n	800d4ce <_strtod_l+0x96>
 800d45c:	290d      	cmp	r1, #13
 800d45e:	d832      	bhi.n	800d4c6 <_strtod_l+0x8e>
 800d460:	2908      	cmp	r1, #8
 800d462:	d832      	bhi.n	800d4ca <_strtod_l+0x92>
 800d464:	2900      	cmp	r1, #0
 800d466:	d03b      	beq.n	800d4e0 <_strtod_l+0xa8>
 800d468:	2200      	movs	r2, #0
 800d46a:	920e      	str	r2, [sp, #56]	@ 0x38
 800d46c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d46e:	782a      	ldrb	r2, [r5, #0]
 800d470:	2a30      	cmp	r2, #48	@ 0x30
 800d472:	f040 80b2 	bne.w	800d5da <_strtod_l+0x1a2>
 800d476:	786a      	ldrb	r2, [r5, #1]
 800d478:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d47c:	2a58      	cmp	r2, #88	@ 0x58
 800d47e:	d16e      	bne.n	800d55e <_strtod_l+0x126>
 800d480:	9302      	str	r3, [sp, #8]
 800d482:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d484:	9301      	str	r3, [sp, #4]
 800d486:	ab1a      	add	r3, sp, #104	@ 0x68
 800d488:	9300      	str	r3, [sp, #0]
 800d48a:	4a8f      	ldr	r2, [pc, #572]	@ (800d6c8 <_strtod_l+0x290>)
 800d48c:	9805      	ldr	r0, [sp, #20]
 800d48e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d490:	a919      	add	r1, sp, #100	@ 0x64
 800d492:	f002 fda3 	bl	800ffdc <__gethex>
 800d496:	f010 060f 	ands.w	r6, r0, #15
 800d49a:	4604      	mov	r4, r0
 800d49c:	d005      	beq.n	800d4aa <_strtod_l+0x72>
 800d49e:	2e06      	cmp	r6, #6
 800d4a0:	d128      	bne.n	800d4f4 <_strtod_l+0xbc>
 800d4a2:	3501      	adds	r5, #1
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	9519      	str	r5, [sp, #100]	@ 0x64
 800d4a8:	930e      	str	r3, [sp, #56]	@ 0x38
 800d4aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	f040 858e 	bne.w	800dfce <_strtod_l+0xb96>
 800d4b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d4b4:	b1cb      	cbz	r3, 800d4ea <_strtod_l+0xb2>
 800d4b6:	4652      	mov	r2, sl
 800d4b8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d4bc:	ec43 2b10 	vmov	d0, r2, r3
 800d4c0:	b01f      	add	sp, #124	@ 0x7c
 800d4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4c6:	2920      	cmp	r1, #32
 800d4c8:	d1ce      	bne.n	800d468 <_strtod_l+0x30>
 800d4ca:	3201      	adds	r2, #1
 800d4cc:	e7c1      	b.n	800d452 <_strtod_l+0x1a>
 800d4ce:	292d      	cmp	r1, #45	@ 0x2d
 800d4d0:	d1ca      	bne.n	800d468 <_strtod_l+0x30>
 800d4d2:	2101      	movs	r1, #1
 800d4d4:	910e      	str	r1, [sp, #56]	@ 0x38
 800d4d6:	1c51      	adds	r1, r2, #1
 800d4d8:	9119      	str	r1, [sp, #100]	@ 0x64
 800d4da:	7852      	ldrb	r2, [r2, #1]
 800d4dc:	2a00      	cmp	r2, #0
 800d4de:	d1c5      	bne.n	800d46c <_strtod_l+0x34>
 800d4e0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d4e2:	9419      	str	r4, [sp, #100]	@ 0x64
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	f040 8570 	bne.w	800dfca <_strtod_l+0xb92>
 800d4ea:	4652      	mov	r2, sl
 800d4ec:	465b      	mov	r3, fp
 800d4ee:	e7e5      	b.n	800d4bc <_strtod_l+0x84>
 800d4f0:	2100      	movs	r1, #0
 800d4f2:	e7ef      	b.n	800d4d4 <_strtod_l+0x9c>
 800d4f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d4f6:	b13a      	cbz	r2, 800d508 <_strtod_l+0xd0>
 800d4f8:	2135      	movs	r1, #53	@ 0x35
 800d4fa:	a81c      	add	r0, sp, #112	@ 0x70
 800d4fc:	f003 fd6e 	bl	8010fdc <__copybits>
 800d500:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d502:	9805      	ldr	r0, [sp, #20]
 800d504:	f003 f944 	bl	8010790 <_Bfree>
 800d508:	3e01      	subs	r6, #1
 800d50a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d50c:	2e04      	cmp	r6, #4
 800d50e:	d806      	bhi.n	800d51e <_strtod_l+0xe6>
 800d510:	e8df f006 	tbb	[pc, r6]
 800d514:	201d0314 	.word	0x201d0314
 800d518:	14          	.byte	0x14
 800d519:	00          	.byte	0x00
 800d51a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d51e:	05e1      	lsls	r1, r4, #23
 800d520:	bf48      	it	mi
 800d522:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d526:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d52a:	0d1b      	lsrs	r3, r3, #20
 800d52c:	051b      	lsls	r3, r3, #20
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d1bb      	bne.n	800d4aa <_strtod_l+0x72>
 800d532:	f001 fdfb 	bl	800f12c <__errno>
 800d536:	2322      	movs	r3, #34	@ 0x22
 800d538:	6003      	str	r3, [r0, #0]
 800d53a:	e7b6      	b.n	800d4aa <_strtod_l+0x72>
 800d53c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d540:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d544:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d548:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d54c:	e7e7      	b.n	800d51e <_strtod_l+0xe6>
 800d54e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800d6d0 <_strtod_l+0x298>
 800d552:	e7e4      	b.n	800d51e <_strtod_l+0xe6>
 800d554:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d558:	f04f 3aff 	mov.w	sl, #4294967295
 800d55c:	e7df      	b.n	800d51e <_strtod_l+0xe6>
 800d55e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d560:	1c5a      	adds	r2, r3, #1
 800d562:	9219      	str	r2, [sp, #100]	@ 0x64
 800d564:	785b      	ldrb	r3, [r3, #1]
 800d566:	2b30      	cmp	r3, #48	@ 0x30
 800d568:	d0f9      	beq.n	800d55e <_strtod_l+0x126>
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d09d      	beq.n	800d4aa <_strtod_l+0x72>
 800d56e:	2301      	movs	r3, #1
 800d570:	2700      	movs	r7, #0
 800d572:	9308      	str	r3, [sp, #32]
 800d574:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d576:	930c      	str	r3, [sp, #48]	@ 0x30
 800d578:	970b      	str	r7, [sp, #44]	@ 0x2c
 800d57a:	46b9      	mov	r9, r7
 800d57c:	220a      	movs	r2, #10
 800d57e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d580:	7805      	ldrb	r5, [r0, #0]
 800d582:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d586:	b2d9      	uxtb	r1, r3
 800d588:	2909      	cmp	r1, #9
 800d58a:	d928      	bls.n	800d5de <_strtod_l+0x1a6>
 800d58c:	494f      	ldr	r1, [pc, #316]	@ (800d6cc <_strtod_l+0x294>)
 800d58e:	2201      	movs	r2, #1
 800d590:	f001 fd11 	bl	800efb6 <strncmp>
 800d594:	2800      	cmp	r0, #0
 800d596:	d032      	beq.n	800d5fe <_strtod_l+0x1c6>
 800d598:	2000      	movs	r0, #0
 800d59a:	462a      	mov	r2, r5
 800d59c:	900a      	str	r0, [sp, #40]	@ 0x28
 800d59e:	464d      	mov	r5, r9
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	2a65      	cmp	r2, #101	@ 0x65
 800d5a4:	d001      	beq.n	800d5aa <_strtod_l+0x172>
 800d5a6:	2a45      	cmp	r2, #69	@ 0x45
 800d5a8:	d114      	bne.n	800d5d4 <_strtod_l+0x19c>
 800d5aa:	b91d      	cbnz	r5, 800d5b4 <_strtod_l+0x17c>
 800d5ac:	9a08      	ldr	r2, [sp, #32]
 800d5ae:	4302      	orrs	r2, r0
 800d5b0:	d096      	beq.n	800d4e0 <_strtod_l+0xa8>
 800d5b2:	2500      	movs	r5, #0
 800d5b4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d5b6:	1c62      	adds	r2, r4, #1
 800d5b8:	9219      	str	r2, [sp, #100]	@ 0x64
 800d5ba:	7862      	ldrb	r2, [r4, #1]
 800d5bc:	2a2b      	cmp	r2, #43	@ 0x2b
 800d5be:	d07a      	beq.n	800d6b6 <_strtod_l+0x27e>
 800d5c0:	2a2d      	cmp	r2, #45	@ 0x2d
 800d5c2:	d07e      	beq.n	800d6c2 <_strtod_l+0x28a>
 800d5c4:	f04f 0c00 	mov.w	ip, #0
 800d5c8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d5cc:	2909      	cmp	r1, #9
 800d5ce:	f240 8085 	bls.w	800d6dc <_strtod_l+0x2a4>
 800d5d2:	9419      	str	r4, [sp, #100]	@ 0x64
 800d5d4:	f04f 0800 	mov.w	r8, #0
 800d5d8:	e0a5      	b.n	800d726 <_strtod_l+0x2ee>
 800d5da:	2300      	movs	r3, #0
 800d5dc:	e7c8      	b.n	800d570 <_strtod_l+0x138>
 800d5de:	f1b9 0f08 	cmp.w	r9, #8
 800d5e2:	bfd8      	it	le
 800d5e4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800d5e6:	f100 0001 	add.w	r0, r0, #1
 800d5ea:	bfda      	itte	le
 800d5ec:	fb02 3301 	mlale	r3, r2, r1, r3
 800d5f0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800d5f2:	fb02 3707 	mlagt	r7, r2, r7, r3
 800d5f6:	f109 0901 	add.w	r9, r9, #1
 800d5fa:	9019      	str	r0, [sp, #100]	@ 0x64
 800d5fc:	e7bf      	b.n	800d57e <_strtod_l+0x146>
 800d5fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d600:	1c5a      	adds	r2, r3, #1
 800d602:	9219      	str	r2, [sp, #100]	@ 0x64
 800d604:	785a      	ldrb	r2, [r3, #1]
 800d606:	f1b9 0f00 	cmp.w	r9, #0
 800d60a:	d03b      	beq.n	800d684 <_strtod_l+0x24c>
 800d60c:	900a      	str	r0, [sp, #40]	@ 0x28
 800d60e:	464d      	mov	r5, r9
 800d610:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d614:	2b09      	cmp	r3, #9
 800d616:	d912      	bls.n	800d63e <_strtod_l+0x206>
 800d618:	2301      	movs	r3, #1
 800d61a:	e7c2      	b.n	800d5a2 <_strtod_l+0x16a>
 800d61c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d61e:	1c5a      	adds	r2, r3, #1
 800d620:	9219      	str	r2, [sp, #100]	@ 0x64
 800d622:	785a      	ldrb	r2, [r3, #1]
 800d624:	3001      	adds	r0, #1
 800d626:	2a30      	cmp	r2, #48	@ 0x30
 800d628:	d0f8      	beq.n	800d61c <_strtod_l+0x1e4>
 800d62a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d62e:	2b08      	cmp	r3, #8
 800d630:	f200 84d2 	bhi.w	800dfd8 <_strtod_l+0xba0>
 800d634:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d636:	900a      	str	r0, [sp, #40]	@ 0x28
 800d638:	2000      	movs	r0, #0
 800d63a:	930c      	str	r3, [sp, #48]	@ 0x30
 800d63c:	4605      	mov	r5, r0
 800d63e:	3a30      	subs	r2, #48	@ 0x30
 800d640:	f100 0301 	add.w	r3, r0, #1
 800d644:	d018      	beq.n	800d678 <_strtod_l+0x240>
 800d646:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d648:	4419      	add	r1, r3
 800d64a:	910a      	str	r1, [sp, #40]	@ 0x28
 800d64c:	462e      	mov	r6, r5
 800d64e:	f04f 0e0a 	mov.w	lr, #10
 800d652:	1c71      	adds	r1, r6, #1
 800d654:	eba1 0c05 	sub.w	ip, r1, r5
 800d658:	4563      	cmp	r3, ip
 800d65a:	dc15      	bgt.n	800d688 <_strtod_l+0x250>
 800d65c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800d660:	182b      	adds	r3, r5, r0
 800d662:	2b08      	cmp	r3, #8
 800d664:	f105 0501 	add.w	r5, r5, #1
 800d668:	4405      	add	r5, r0
 800d66a:	dc1a      	bgt.n	800d6a2 <_strtod_l+0x26a>
 800d66c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d66e:	230a      	movs	r3, #10
 800d670:	fb03 2301 	mla	r3, r3, r1, r2
 800d674:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d676:	2300      	movs	r3, #0
 800d678:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d67a:	1c51      	adds	r1, r2, #1
 800d67c:	9119      	str	r1, [sp, #100]	@ 0x64
 800d67e:	7852      	ldrb	r2, [r2, #1]
 800d680:	4618      	mov	r0, r3
 800d682:	e7c5      	b.n	800d610 <_strtod_l+0x1d8>
 800d684:	4648      	mov	r0, r9
 800d686:	e7ce      	b.n	800d626 <_strtod_l+0x1ee>
 800d688:	2e08      	cmp	r6, #8
 800d68a:	dc05      	bgt.n	800d698 <_strtod_l+0x260>
 800d68c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d68e:	fb0e f606 	mul.w	r6, lr, r6
 800d692:	960b      	str	r6, [sp, #44]	@ 0x2c
 800d694:	460e      	mov	r6, r1
 800d696:	e7dc      	b.n	800d652 <_strtod_l+0x21a>
 800d698:	2910      	cmp	r1, #16
 800d69a:	bfd8      	it	le
 800d69c:	fb0e f707 	mulle.w	r7, lr, r7
 800d6a0:	e7f8      	b.n	800d694 <_strtod_l+0x25c>
 800d6a2:	2b0f      	cmp	r3, #15
 800d6a4:	bfdc      	itt	le
 800d6a6:	230a      	movle	r3, #10
 800d6a8:	fb03 2707 	mlale	r7, r3, r7, r2
 800d6ac:	e7e3      	b.n	800d676 <_strtod_l+0x23e>
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	930a      	str	r3, [sp, #40]	@ 0x28
 800d6b2:	2301      	movs	r3, #1
 800d6b4:	e77a      	b.n	800d5ac <_strtod_l+0x174>
 800d6b6:	f04f 0c00 	mov.w	ip, #0
 800d6ba:	1ca2      	adds	r2, r4, #2
 800d6bc:	9219      	str	r2, [sp, #100]	@ 0x64
 800d6be:	78a2      	ldrb	r2, [r4, #2]
 800d6c0:	e782      	b.n	800d5c8 <_strtod_l+0x190>
 800d6c2:	f04f 0c01 	mov.w	ip, #1
 800d6c6:	e7f8      	b.n	800d6ba <_strtod_l+0x282>
 800d6c8:	080120b0 	.word	0x080120b0
 800d6cc:	08011ec4 	.word	0x08011ec4
 800d6d0:	7ff00000 	.word	0x7ff00000
 800d6d4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d6d6:	1c51      	adds	r1, r2, #1
 800d6d8:	9119      	str	r1, [sp, #100]	@ 0x64
 800d6da:	7852      	ldrb	r2, [r2, #1]
 800d6dc:	2a30      	cmp	r2, #48	@ 0x30
 800d6de:	d0f9      	beq.n	800d6d4 <_strtod_l+0x29c>
 800d6e0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d6e4:	2908      	cmp	r1, #8
 800d6e6:	f63f af75 	bhi.w	800d5d4 <_strtod_l+0x19c>
 800d6ea:	3a30      	subs	r2, #48	@ 0x30
 800d6ec:	9209      	str	r2, [sp, #36]	@ 0x24
 800d6ee:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d6f0:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d6f2:	f04f 080a 	mov.w	r8, #10
 800d6f6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d6f8:	1c56      	adds	r6, r2, #1
 800d6fa:	9619      	str	r6, [sp, #100]	@ 0x64
 800d6fc:	7852      	ldrb	r2, [r2, #1]
 800d6fe:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d702:	f1be 0f09 	cmp.w	lr, #9
 800d706:	d939      	bls.n	800d77c <_strtod_l+0x344>
 800d708:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d70a:	1a76      	subs	r6, r6, r1
 800d70c:	2e08      	cmp	r6, #8
 800d70e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d712:	dc03      	bgt.n	800d71c <_strtod_l+0x2e4>
 800d714:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d716:	4588      	cmp	r8, r1
 800d718:	bfa8      	it	ge
 800d71a:	4688      	movge	r8, r1
 800d71c:	f1bc 0f00 	cmp.w	ip, #0
 800d720:	d001      	beq.n	800d726 <_strtod_l+0x2ee>
 800d722:	f1c8 0800 	rsb	r8, r8, #0
 800d726:	2d00      	cmp	r5, #0
 800d728:	d14e      	bne.n	800d7c8 <_strtod_l+0x390>
 800d72a:	9908      	ldr	r1, [sp, #32]
 800d72c:	4308      	orrs	r0, r1
 800d72e:	f47f aebc 	bne.w	800d4aa <_strtod_l+0x72>
 800d732:	2b00      	cmp	r3, #0
 800d734:	f47f aed4 	bne.w	800d4e0 <_strtod_l+0xa8>
 800d738:	2a69      	cmp	r2, #105	@ 0x69
 800d73a:	d028      	beq.n	800d78e <_strtod_l+0x356>
 800d73c:	dc25      	bgt.n	800d78a <_strtod_l+0x352>
 800d73e:	2a49      	cmp	r2, #73	@ 0x49
 800d740:	d025      	beq.n	800d78e <_strtod_l+0x356>
 800d742:	2a4e      	cmp	r2, #78	@ 0x4e
 800d744:	f47f aecc 	bne.w	800d4e0 <_strtod_l+0xa8>
 800d748:	499a      	ldr	r1, [pc, #616]	@ (800d9b4 <_strtod_l+0x57c>)
 800d74a:	a819      	add	r0, sp, #100	@ 0x64
 800d74c:	f002 fe68 	bl	8010420 <__match>
 800d750:	2800      	cmp	r0, #0
 800d752:	f43f aec5 	beq.w	800d4e0 <_strtod_l+0xa8>
 800d756:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d758:	781b      	ldrb	r3, [r3, #0]
 800d75a:	2b28      	cmp	r3, #40	@ 0x28
 800d75c:	d12e      	bne.n	800d7bc <_strtod_l+0x384>
 800d75e:	4996      	ldr	r1, [pc, #600]	@ (800d9b8 <_strtod_l+0x580>)
 800d760:	aa1c      	add	r2, sp, #112	@ 0x70
 800d762:	a819      	add	r0, sp, #100	@ 0x64
 800d764:	f002 fe70 	bl	8010448 <__hexnan>
 800d768:	2805      	cmp	r0, #5
 800d76a:	d127      	bne.n	800d7bc <_strtod_l+0x384>
 800d76c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d76e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d772:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d776:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d77a:	e696      	b.n	800d4aa <_strtod_l+0x72>
 800d77c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d77e:	fb08 2101 	mla	r1, r8, r1, r2
 800d782:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d786:	9209      	str	r2, [sp, #36]	@ 0x24
 800d788:	e7b5      	b.n	800d6f6 <_strtod_l+0x2be>
 800d78a:	2a6e      	cmp	r2, #110	@ 0x6e
 800d78c:	e7da      	b.n	800d744 <_strtod_l+0x30c>
 800d78e:	498b      	ldr	r1, [pc, #556]	@ (800d9bc <_strtod_l+0x584>)
 800d790:	a819      	add	r0, sp, #100	@ 0x64
 800d792:	f002 fe45 	bl	8010420 <__match>
 800d796:	2800      	cmp	r0, #0
 800d798:	f43f aea2 	beq.w	800d4e0 <_strtod_l+0xa8>
 800d79c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d79e:	4988      	ldr	r1, [pc, #544]	@ (800d9c0 <_strtod_l+0x588>)
 800d7a0:	3b01      	subs	r3, #1
 800d7a2:	a819      	add	r0, sp, #100	@ 0x64
 800d7a4:	9319      	str	r3, [sp, #100]	@ 0x64
 800d7a6:	f002 fe3b 	bl	8010420 <__match>
 800d7aa:	b910      	cbnz	r0, 800d7b2 <_strtod_l+0x37a>
 800d7ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d7ae:	3301      	adds	r3, #1
 800d7b0:	9319      	str	r3, [sp, #100]	@ 0x64
 800d7b2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800d9d0 <_strtod_l+0x598>
 800d7b6:	f04f 0a00 	mov.w	sl, #0
 800d7ba:	e676      	b.n	800d4aa <_strtod_l+0x72>
 800d7bc:	4881      	ldr	r0, [pc, #516]	@ (800d9c4 <_strtod_l+0x58c>)
 800d7be:	f001 fcf3 	bl	800f1a8 <nan>
 800d7c2:	ec5b ab10 	vmov	sl, fp, d0
 800d7c6:	e670      	b.n	800d4aa <_strtod_l+0x72>
 800d7c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d7ca:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800d7cc:	eba8 0303 	sub.w	r3, r8, r3
 800d7d0:	f1b9 0f00 	cmp.w	r9, #0
 800d7d4:	bf08      	it	eq
 800d7d6:	46a9      	moveq	r9, r5
 800d7d8:	2d10      	cmp	r5, #16
 800d7da:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7dc:	462c      	mov	r4, r5
 800d7de:	bfa8      	it	ge
 800d7e0:	2410      	movge	r4, #16
 800d7e2:	f7f2 fe97 	bl	8000514 <__aeabi_ui2d>
 800d7e6:	2d09      	cmp	r5, #9
 800d7e8:	4682      	mov	sl, r0
 800d7ea:	468b      	mov	fp, r1
 800d7ec:	dc13      	bgt.n	800d816 <_strtod_l+0x3de>
 800d7ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	f43f ae5a 	beq.w	800d4aa <_strtod_l+0x72>
 800d7f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7f8:	dd78      	ble.n	800d8ec <_strtod_l+0x4b4>
 800d7fa:	2b16      	cmp	r3, #22
 800d7fc:	dc5f      	bgt.n	800d8be <_strtod_l+0x486>
 800d7fe:	4972      	ldr	r1, [pc, #456]	@ (800d9c8 <_strtod_l+0x590>)
 800d800:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d804:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d808:	4652      	mov	r2, sl
 800d80a:	465b      	mov	r3, fp
 800d80c:	f7f2 fefc 	bl	8000608 <__aeabi_dmul>
 800d810:	4682      	mov	sl, r0
 800d812:	468b      	mov	fp, r1
 800d814:	e649      	b.n	800d4aa <_strtod_l+0x72>
 800d816:	4b6c      	ldr	r3, [pc, #432]	@ (800d9c8 <_strtod_l+0x590>)
 800d818:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d81c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d820:	f7f2 fef2 	bl	8000608 <__aeabi_dmul>
 800d824:	4682      	mov	sl, r0
 800d826:	4638      	mov	r0, r7
 800d828:	468b      	mov	fp, r1
 800d82a:	f7f2 fe73 	bl	8000514 <__aeabi_ui2d>
 800d82e:	4602      	mov	r2, r0
 800d830:	460b      	mov	r3, r1
 800d832:	4650      	mov	r0, sl
 800d834:	4659      	mov	r1, fp
 800d836:	f7f2 fd31 	bl	800029c <__adddf3>
 800d83a:	2d0f      	cmp	r5, #15
 800d83c:	4682      	mov	sl, r0
 800d83e:	468b      	mov	fp, r1
 800d840:	ddd5      	ble.n	800d7ee <_strtod_l+0x3b6>
 800d842:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d844:	1b2c      	subs	r4, r5, r4
 800d846:	441c      	add	r4, r3
 800d848:	2c00      	cmp	r4, #0
 800d84a:	f340 8093 	ble.w	800d974 <_strtod_l+0x53c>
 800d84e:	f014 030f 	ands.w	r3, r4, #15
 800d852:	d00a      	beq.n	800d86a <_strtod_l+0x432>
 800d854:	495c      	ldr	r1, [pc, #368]	@ (800d9c8 <_strtod_l+0x590>)
 800d856:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d85a:	4652      	mov	r2, sl
 800d85c:	465b      	mov	r3, fp
 800d85e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d862:	f7f2 fed1 	bl	8000608 <__aeabi_dmul>
 800d866:	4682      	mov	sl, r0
 800d868:	468b      	mov	fp, r1
 800d86a:	f034 040f 	bics.w	r4, r4, #15
 800d86e:	d073      	beq.n	800d958 <_strtod_l+0x520>
 800d870:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d874:	dd49      	ble.n	800d90a <_strtod_l+0x4d2>
 800d876:	2400      	movs	r4, #0
 800d878:	46a0      	mov	r8, r4
 800d87a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d87c:	46a1      	mov	r9, r4
 800d87e:	9a05      	ldr	r2, [sp, #20]
 800d880:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800d9d0 <_strtod_l+0x598>
 800d884:	2322      	movs	r3, #34	@ 0x22
 800d886:	6013      	str	r3, [r2, #0]
 800d888:	f04f 0a00 	mov.w	sl, #0
 800d88c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d88e:	2b00      	cmp	r3, #0
 800d890:	f43f ae0b 	beq.w	800d4aa <_strtod_l+0x72>
 800d894:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d896:	9805      	ldr	r0, [sp, #20]
 800d898:	f002 ff7a 	bl	8010790 <_Bfree>
 800d89c:	9805      	ldr	r0, [sp, #20]
 800d89e:	4649      	mov	r1, r9
 800d8a0:	f002 ff76 	bl	8010790 <_Bfree>
 800d8a4:	9805      	ldr	r0, [sp, #20]
 800d8a6:	4641      	mov	r1, r8
 800d8a8:	f002 ff72 	bl	8010790 <_Bfree>
 800d8ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d8ae:	9805      	ldr	r0, [sp, #20]
 800d8b0:	f002 ff6e 	bl	8010790 <_Bfree>
 800d8b4:	9805      	ldr	r0, [sp, #20]
 800d8b6:	4621      	mov	r1, r4
 800d8b8:	f002 ff6a 	bl	8010790 <_Bfree>
 800d8bc:	e5f5      	b.n	800d4aa <_strtod_l+0x72>
 800d8be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d8c0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d8c4:	4293      	cmp	r3, r2
 800d8c6:	dbbc      	blt.n	800d842 <_strtod_l+0x40a>
 800d8c8:	4c3f      	ldr	r4, [pc, #252]	@ (800d9c8 <_strtod_l+0x590>)
 800d8ca:	f1c5 050f 	rsb	r5, r5, #15
 800d8ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d8d2:	4652      	mov	r2, sl
 800d8d4:	465b      	mov	r3, fp
 800d8d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8da:	f7f2 fe95 	bl	8000608 <__aeabi_dmul>
 800d8de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8e0:	1b5d      	subs	r5, r3, r5
 800d8e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d8e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d8ea:	e78f      	b.n	800d80c <_strtod_l+0x3d4>
 800d8ec:	3316      	adds	r3, #22
 800d8ee:	dba8      	blt.n	800d842 <_strtod_l+0x40a>
 800d8f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d8f2:	eba3 0808 	sub.w	r8, r3, r8
 800d8f6:	4b34      	ldr	r3, [pc, #208]	@ (800d9c8 <_strtod_l+0x590>)
 800d8f8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d8fc:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d900:	4650      	mov	r0, sl
 800d902:	4659      	mov	r1, fp
 800d904:	f7f2 ffaa 	bl	800085c <__aeabi_ddiv>
 800d908:	e782      	b.n	800d810 <_strtod_l+0x3d8>
 800d90a:	2300      	movs	r3, #0
 800d90c:	4f2f      	ldr	r7, [pc, #188]	@ (800d9cc <_strtod_l+0x594>)
 800d90e:	1124      	asrs	r4, r4, #4
 800d910:	4650      	mov	r0, sl
 800d912:	4659      	mov	r1, fp
 800d914:	461e      	mov	r6, r3
 800d916:	2c01      	cmp	r4, #1
 800d918:	dc21      	bgt.n	800d95e <_strtod_l+0x526>
 800d91a:	b10b      	cbz	r3, 800d920 <_strtod_l+0x4e8>
 800d91c:	4682      	mov	sl, r0
 800d91e:	468b      	mov	fp, r1
 800d920:	492a      	ldr	r1, [pc, #168]	@ (800d9cc <_strtod_l+0x594>)
 800d922:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d926:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d92a:	4652      	mov	r2, sl
 800d92c:	465b      	mov	r3, fp
 800d92e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d932:	f7f2 fe69 	bl	8000608 <__aeabi_dmul>
 800d936:	4b26      	ldr	r3, [pc, #152]	@ (800d9d0 <_strtod_l+0x598>)
 800d938:	460a      	mov	r2, r1
 800d93a:	400b      	ands	r3, r1
 800d93c:	4925      	ldr	r1, [pc, #148]	@ (800d9d4 <_strtod_l+0x59c>)
 800d93e:	428b      	cmp	r3, r1
 800d940:	4682      	mov	sl, r0
 800d942:	d898      	bhi.n	800d876 <_strtod_l+0x43e>
 800d944:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d948:	428b      	cmp	r3, r1
 800d94a:	bf86      	itte	hi
 800d94c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800d9d8 <_strtod_l+0x5a0>
 800d950:	f04f 3aff 	movhi.w	sl, #4294967295
 800d954:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d958:	2300      	movs	r3, #0
 800d95a:	9308      	str	r3, [sp, #32]
 800d95c:	e076      	b.n	800da4c <_strtod_l+0x614>
 800d95e:	07e2      	lsls	r2, r4, #31
 800d960:	d504      	bpl.n	800d96c <_strtod_l+0x534>
 800d962:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d966:	f7f2 fe4f 	bl	8000608 <__aeabi_dmul>
 800d96a:	2301      	movs	r3, #1
 800d96c:	3601      	adds	r6, #1
 800d96e:	1064      	asrs	r4, r4, #1
 800d970:	3708      	adds	r7, #8
 800d972:	e7d0      	b.n	800d916 <_strtod_l+0x4de>
 800d974:	d0f0      	beq.n	800d958 <_strtod_l+0x520>
 800d976:	4264      	negs	r4, r4
 800d978:	f014 020f 	ands.w	r2, r4, #15
 800d97c:	d00a      	beq.n	800d994 <_strtod_l+0x55c>
 800d97e:	4b12      	ldr	r3, [pc, #72]	@ (800d9c8 <_strtod_l+0x590>)
 800d980:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d984:	4650      	mov	r0, sl
 800d986:	4659      	mov	r1, fp
 800d988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d98c:	f7f2 ff66 	bl	800085c <__aeabi_ddiv>
 800d990:	4682      	mov	sl, r0
 800d992:	468b      	mov	fp, r1
 800d994:	1124      	asrs	r4, r4, #4
 800d996:	d0df      	beq.n	800d958 <_strtod_l+0x520>
 800d998:	2c1f      	cmp	r4, #31
 800d99a:	dd1f      	ble.n	800d9dc <_strtod_l+0x5a4>
 800d99c:	2400      	movs	r4, #0
 800d99e:	46a0      	mov	r8, r4
 800d9a0:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d9a2:	46a1      	mov	r9, r4
 800d9a4:	9a05      	ldr	r2, [sp, #20]
 800d9a6:	2322      	movs	r3, #34	@ 0x22
 800d9a8:	f04f 0a00 	mov.w	sl, #0
 800d9ac:	f04f 0b00 	mov.w	fp, #0
 800d9b0:	6013      	str	r3, [r2, #0]
 800d9b2:	e76b      	b.n	800d88c <_strtod_l+0x454>
 800d9b4:	08011ed3 	.word	0x08011ed3
 800d9b8:	0801209c 	.word	0x0801209c
 800d9bc:	08011ecb 	.word	0x08011ecb
 800d9c0:	08011f0a 	.word	0x08011f0a
 800d9c4:	08012099 	.word	0x08012099
 800d9c8:	08012128 	.word	0x08012128
 800d9cc:	08012100 	.word	0x08012100
 800d9d0:	7ff00000 	.word	0x7ff00000
 800d9d4:	7ca00000 	.word	0x7ca00000
 800d9d8:	7fefffff 	.word	0x7fefffff
 800d9dc:	f014 0310 	ands.w	r3, r4, #16
 800d9e0:	bf18      	it	ne
 800d9e2:	236a      	movne	r3, #106	@ 0x6a
 800d9e4:	4ea9      	ldr	r6, [pc, #676]	@ (800dc8c <_strtod_l+0x854>)
 800d9e6:	9308      	str	r3, [sp, #32]
 800d9e8:	4650      	mov	r0, sl
 800d9ea:	4659      	mov	r1, fp
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	07e7      	lsls	r7, r4, #31
 800d9f0:	d504      	bpl.n	800d9fc <_strtod_l+0x5c4>
 800d9f2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d9f6:	f7f2 fe07 	bl	8000608 <__aeabi_dmul>
 800d9fa:	2301      	movs	r3, #1
 800d9fc:	1064      	asrs	r4, r4, #1
 800d9fe:	f106 0608 	add.w	r6, r6, #8
 800da02:	d1f4      	bne.n	800d9ee <_strtod_l+0x5b6>
 800da04:	b10b      	cbz	r3, 800da0a <_strtod_l+0x5d2>
 800da06:	4682      	mov	sl, r0
 800da08:	468b      	mov	fp, r1
 800da0a:	9b08      	ldr	r3, [sp, #32]
 800da0c:	b1b3      	cbz	r3, 800da3c <_strtod_l+0x604>
 800da0e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800da12:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800da16:	2b00      	cmp	r3, #0
 800da18:	4659      	mov	r1, fp
 800da1a:	dd0f      	ble.n	800da3c <_strtod_l+0x604>
 800da1c:	2b1f      	cmp	r3, #31
 800da1e:	dd56      	ble.n	800dace <_strtod_l+0x696>
 800da20:	2b34      	cmp	r3, #52	@ 0x34
 800da22:	bfde      	ittt	le
 800da24:	f04f 33ff 	movle.w	r3, #4294967295
 800da28:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800da2c:	4093      	lslle	r3, r2
 800da2e:	f04f 0a00 	mov.w	sl, #0
 800da32:	bfcc      	ite	gt
 800da34:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800da38:	ea03 0b01 	andle.w	fp, r3, r1
 800da3c:	2200      	movs	r2, #0
 800da3e:	2300      	movs	r3, #0
 800da40:	4650      	mov	r0, sl
 800da42:	4659      	mov	r1, fp
 800da44:	f7f3 f848 	bl	8000ad8 <__aeabi_dcmpeq>
 800da48:	2800      	cmp	r0, #0
 800da4a:	d1a7      	bne.n	800d99c <_strtod_l+0x564>
 800da4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800da4e:	9300      	str	r3, [sp, #0]
 800da50:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800da52:	9805      	ldr	r0, [sp, #20]
 800da54:	462b      	mov	r3, r5
 800da56:	464a      	mov	r2, r9
 800da58:	f002 ff02 	bl	8010860 <__s2b>
 800da5c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800da5e:	2800      	cmp	r0, #0
 800da60:	f43f af09 	beq.w	800d876 <_strtod_l+0x43e>
 800da64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800da66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da68:	2a00      	cmp	r2, #0
 800da6a:	eba3 0308 	sub.w	r3, r3, r8
 800da6e:	bfa8      	it	ge
 800da70:	2300      	movge	r3, #0
 800da72:	9312      	str	r3, [sp, #72]	@ 0x48
 800da74:	2400      	movs	r4, #0
 800da76:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800da7a:	9316      	str	r3, [sp, #88]	@ 0x58
 800da7c:	46a0      	mov	r8, r4
 800da7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800da80:	9805      	ldr	r0, [sp, #20]
 800da82:	6859      	ldr	r1, [r3, #4]
 800da84:	f002 fe44 	bl	8010710 <_Balloc>
 800da88:	4681      	mov	r9, r0
 800da8a:	2800      	cmp	r0, #0
 800da8c:	f43f aef7 	beq.w	800d87e <_strtod_l+0x446>
 800da90:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800da92:	691a      	ldr	r2, [r3, #16]
 800da94:	3202      	adds	r2, #2
 800da96:	f103 010c 	add.w	r1, r3, #12
 800da9a:	0092      	lsls	r2, r2, #2
 800da9c:	300c      	adds	r0, #12
 800da9e:	f001 fb72 	bl	800f186 <memcpy>
 800daa2:	ec4b ab10 	vmov	d0, sl, fp
 800daa6:	9805      	ldr	r0, [sp, #20]
 800daa8:	aa1c      	add	r2, sp, #112	@ 0x70
 800daaa:	a91b      	add	r1, sp, #108	@ 0x6c
 800daac:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800dab0:	f003 fa0a 	bl	8010ec8 <__d2b>
 800dab4:	901a      	str	r0, [sp, #104]	@ 0x68
 800dab6:	2800      	cmp	r0, #0
 800dab8:	f43f aee1 	beq.w	800d87e <_strtod_l+0x446>
 800dabc:	9805      	ldr	r0, [sp, #20]
 800dabe:	2101      	movs	r1, #1
 800dac0:	f002 ff64 	bl	801098c <__i2b>
 800dac4:	4680      	mov	r8, r0
 800dac6:	b948      	cbnz	r0, 800dadc <_strtod_l+0x6a4>
 800dac8:	f04f 0800 	mov.w	r8, #0
 800dacc:	e6d7      	b.n	800d87e <_strtod_l+0x446>
 800dace:	f04f 32ff 	mov.w	r2, #4294967295
 800dad2:	fa02 f303 	lsl.w	r3, r2, r3
 800dad6:	ea03 0a0a 	and.w	sl, r3, sl
 800dada:	e7af      	b.n	800da3c <_strtod_l+0x604>
 800dadc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800dade:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800dae0:	2d00      	cmp	r5, #0
 800dae2:	bfab      	itete	ge
 800dae4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800dae6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800dae8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800daea:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800daec:	bfac      	ite	ge
 800daee:	18ef      	addge	r7, r5, r3
 800daf0:	1b5e      	sublt	r6, r3, r5
 800daf2:	9b08      	ldr	r3, [sp, #32]
 800daf4:	1aed      	subs	r5, r5, r3
 800daf6:	4415      	add	r5, r2
 800daf8:	4b65      	ldr	r3, [pc, #404]	@ (800dc90 <_strtod_l+0x858>)
 800dafa:	3d01      	subs	r5, #1
 800dafc:	429d      	cmp	r5, r3
 800dafe:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800db02:	da50      	bge.n	800dba6 <_strtod_l+0x76e>
 800db04:	1b5b      	subs	r3, r3, r5
 800db06:	2b1f      	cmp	r3, #31
 800db08:	eba2 0203 	sub.w	r2, r2, r3
 800db0c:	f04f 0101 	mov.w	r1, #1
 800db10:	dc3d      	bgt.n	800db8e <_strtod_l+0x756>
 800db12:	fa01 f303 	lsl.w	r3, r1, r3
 800db16:	9313      	str	r3, [sp, #76]	@ 0x4c
 800db18:	2300      	movs	r3, #0
 800db1a:	9310      	str	r3, [sp, #64]	@ 0x40
 800db1c:	18bd      	adds	r5, r7, r2
 800db1e:	9b08      	ldr	r3, [sp, #32]
 800db20:	42af      	cmp	r7, r5
 800db22:	4416      	add	r6, r2
 800db24:	441e      	add	r6, r3
 800db26:	463b      	mov	r3, r7
 800db28:	bfa8      	it	ge
 800db2a:	462b      	movge	r3, r5
 800db2c:	42b3      	cmp	r3, r6
 800db2e:	bfa8      	it	ge
 800db30:	4633      	movge	r3, r6
 800db32:	2b00      	cmp	r3, #0
 800db34:	bfc2      	ittt	gt
 800db36:	1aed      	subgt	r5, r5, r3
 800db38:	1af6      	subgt	r6, r6, r3
 800db3a:	1aff      	subgt	r7, r7, r3
 800db3c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800db3e:	2b00      	cmp	r3, #0
 800db40:	dd16      	ble.n	800db70 <_strtod_l+0x738>
 800db42:	4641      	mov	r1, r8
 800db44:	9805      	ldr	r0, [sp, #20]
 800db46:	461a      	mov	r2, r3
 800db48:	f002 ffd8 	bl	8010afc <__pow5mult>
 800db4c:	4680      	mov	r8, r0
 800db4e:	2800      	cmp	r0, #0
 800db50:	d0ba      	beq.n	800dac8 <_strtod_l+0x690>
 800db52:	4601      	mov	r1, r0
 800db54:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800db56:	9805      	ldr	r0, [sp, #20]
 800db58:	f002 ff2e 	bl	80109b8 <__multiply>
 800db5c:	900a      	str	r0, [sp, #40]	@ 0x28
 800db5e:	2800      	cmp	r0, #0
 800db60:	f43f ae8d 	beq.w	800d87e <_strtod_l+0x446>
 800db64:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800db66:	9805      	ldr	r0, [sp, #20]
 800db68:	f002 fe12 	bl	8010790 <_Bfree>
 800db6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db6e:	931a      	str	r3, [sp, #104]	@ 0x68
 800db70:	2d00      	cmp	r5, #0
 800db72:	dc1d      	bgt.n	800dbb0 <_strtod_l+0x778>
 800db74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db76:	2b00      	cmp	r3, #0
 800db78:	dd23      	ble.n	800dbc2 <_strtod_l+0x78a>
 800db7a:	4649      	mov	r1, r9
 800db7c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800db7e:	9805      	ldr	r0, [sp, #20]
 800db80:	f002 ffbc 	bl	8010afc <__pow5mult>
 800db84:	4681      	mov	r9, r0
 800db86:	b9e0      	cbnz	r0, 800dbc2 <_strtod_l+0x78a>
 800db88:	f04f 0900 	mov.w	r9, #0
 800db8c:	e677      	b.n	800d87e <_strtod_l+0x446>
 800db8e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800db92:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800db96:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800db9a:	35e2      	adds	r5, #226	@ 0xe2
 800db9c:	fa01 f305 	lsl.w	r3, r1, r5
 800dba0:	9310      	str	r3, [sp, #64]	@ 0x40
 800dba2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800dba4:	e7ba      	b.n	800db1c <_strtod_l+0x6e4>
 800dba6:	2300      	movs	r3, #0
 800dba8:	9310      	str	r3, [sp, #64]	@ 0x40
 800dbaa:	2301      	movs	r3, #1
 800dbac:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dbae:	e7b5      	b.n	800db1c <_strtod_l+0x6e4>
 800dbb0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dbb2:	9805      	ldr	r0, [sp, #20]
 800dbb4:	462a      	mov	r2, r5
 800dbb6:	f002 fffb 	bl	8010bb0 <__lshift>
 800dbba:	901a      	str	r0, [sp, #104]	@ 0x68
 800dbbc:	2800      	cmp	r0, #0
 800dbbe:	d1d9      	bne.n	800db74 <_strtod_l+0x73c>
 800dbc0:	e65d      	b.n	800d87e <_strtod_l+0x446>
 800dbc2:	2e00      	cmp	r6, #0
 800dbc4:	dd07      	ble.n	800dbd6 <_strtod_l+0x79e>
 800dbc6:	4649      	mov	r1, r9
 800dbc8:	9805      	ldr	r0, [sp, #20]
 800dbca:	4632      	mov	r2, r6
 800dbcc:	f002 fff0 	bl	8010bb0 <__lshift>
 800dbd0:	4681      	mov	r9, r0
 800dbd2:	2800      	cmp	r0, #0
 800dbd4:	d0d8      	beq.n	800db88 <_strtod_l+0x750>
 800dbd6:	2f00      	cmp	r7, #0
 800dbd8:	dd08      	ble.n	800dbec <_strtod_l+0x7b4>
 800dbda:	4641      	mov	r1, r8
 800dbdc:	9805      	ldr	r0, [sp, #20]
 800dbde:	463a      	mov	r2, r7
 800dbe0:	f002 ffe6 	bl	8010bb0 <__lshift>
 800dbe4:	4680      	mov	r8, r0
 800dbe6:	2800      	cmp	r0, #0
 800dbe8:	f43f ae49 	beq.w	800d87e <_strtod_l+0x446>
 800dbec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dbee:	9805      	ldr	r0, [sp, #20]
 800dbf0:	464a      	mov	r2, r9
 800dbf2:	f003 f865 	bl	8010cc0 <__mdiff>
 800dbf6:	4604      	mov	r4, r0
 800dbf8:	2800      	cmp	r0, #0
 800dbfa:	f43f ae40 	beq.w	800d87e <_strtod_l+0x446>
 800dbfe:	68c3      	ldr	r3, [r0, #12]
 800dc00:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dc02:	2300      	movs	r3, #0
 800dc04:	60c3      	str	r3, [r0, #12]
 800dc06:	4641      	mov	r1, r8
 800dc08:	f003 f83e 	bl	8010c88 <__mcmp>
 800dc0c:	2800      	cmp	r0, #0
 800dc0e:	da45      	bge.n	800dc9c <_strtod_l+0x864>
 800dc10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc12:	ea53 030a 	orrs.w	r3, r3, sl
 800dc16:	d16b      	bne.n	800dcf0 <_strtod_l+0x8b8>
 800dc18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d167      	bne.n	800dcf0 <_strtod_l+0x8b8>
 800dc20:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dc24:	0d1b      	lsrs	r3, r3, #20
 800dc26:	051b      	lsls	r3, r3, #20
 800dc28:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800dc2c:	d960      	bls.n	800dcf0 <_strtod_l+0x8b8>
 800dc2e:	6963      	ldr	r3, [r4, #20]
 800dc30:	b913      	cbnz	r3, 800dc38 <_strtod_l+0x800>
 800dc32:	6923      	ldr	r3, [r4, #16]
 800dc34:	2b01      	cmp	r3, #1
 800dc36:	dd5b      	ble.n	800dcf0 <_strtod_l+0x8b8>
 800dc38:	4621      	mov	r1, r4
 800dc3a:	2201      	movs	r2, #1
 800dc3c:	9805      	ldr	r0, [sp, #20]
 800dc3e:	f002 ffb7 	bl	8010bb0 <__lshift>
 800dc42:	4641      	mov	r1, r8
 800dc44:	4604      	mov	r4, r0
 800dc46:	f003 f81f 	bl	8010c88 <__mcmp>
 800dc4a:	2800      	cmp	r0, #0
 800dc4c:	dd50      	ble.n	800dcf0 <_strtod_l+0x8b8>
 800dc4e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dc52:	9a08      	ldr	r2, [sp, #32]
 800dc54:	0d1b      	lsrs	r3, r3, #20
 800dc56:	051b      	lsls	r3, r3, #20
 800dc58:	2a00      	cmp	r2, #0
 800dc5a:	d06a      	beq.n	800dd32 <_strtod_l+0x8fa>
 800dc5c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800dc60:	d867      	bhi.n	800dd32 <_strtod_l+0x8fa>
 800dc62:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800dc66:	f67f ae9d 	bls.w	800d9a4 <_strtod_l+0x56c>
 800dc6a:	4b0a      	ldr	r3, [pc, #40]	@ (800dc94 <_strtod_l+0x85c>)
 800dc6c:	4650      	mov	r0, sl
 800dc6e:	4659      	mov	r1, fp
 800dc70:	2200      	movs	r2, #0
 800dc72:	f7f2 fcc9 	bl	8000608 <__aeabi_dmul>
 800dc76:	4b08      	ldr	r3, [pc, #32]	@ (800dc98 <_strtod_l+0x860>)
 800dc78:	400b      	ands	r3, r1
 800dc7a:	4682      	mov	sl, r0
 800dc7c:	468b      	mov	fp, r1
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	f47f ae08 	bne.w	800d894 <_strtod_l+0x45c>
 800dc84:	9a05      	ldr	r2, [sp, #20]
 800dc86:	2322      	movs	r3, #34	@ 0x22
 800dc88:	6013      	str	r3, [r2, #0]
 800dc8a:	e603      	b.n	800d894 <_strtod_l+0x45c>
 800dc8c:	080120c8 	.word	0x080120c8
 800dc90:	fffffc02 	.word	0xfffffc02
 800dc94:	39500000 	.word	0x39500000
 800dc98:	7ff00000 	.word	0x7ff00000
 800dc9c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800dca0:	d165      	bne.n	800dd6e <_strtod_l+0x936>
 800dca2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800dca4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dca8:	b35a      	cbz	r2, 800dd02 <_strtod_l+0x8ca>
 800dcaa:	4a9f      	ldr	r2, [pc, #636]	@ (800df28 <_strtod_l+0xaf0>)
 800dcac:	4293      	cmp	r3, r2
 800dcae:	d12b      	bne.n	800dd08 <_strtod_l+0x8d0>
 800dcb0:	9b08      	ldr	r3, [sp, #32]
 800dcb2:	4651      	mov	r1, sl
 800dcb4:	b303      	cbz	r3, 800dcf8 <_strtod_l+0x8c0>
 800dcb6:	4b9d      	ldr	r3, [pc, #628]	@ (800df2c <_strtod_l+0xaf4>)
 800dcb8:	465a      	mov	r2, fp
 800dcba:	4013      	ands	r3, r2
 800dcbc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800dcc0:	f04f 32ff 	mov.w	r2, #4294967295
 800dcc4:	d81b      	bhi.n	800dcfe <_strtod_l+0x8c6>
 800dcc6:	0d1b      	lsrs	r3, r3, #20
 800dcc8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800dccc:	fa02 f303 	lsl.w	r3, r2, r3
 800dcd0:	4299      	cmp	r1, r3
 800dcd2:	d119      	bne.n	800dd08 <_strtod_l+0x8d0>
 800dcd4:	4b96      	ldr	r3, [pc, #600]	@ (800df30 <_strtod_l+0xaf8>)
 800dcd6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dcd8:	429a      	cmp	r2, r3
 800dcda:	d102      	bne.n	800dce2 <_strtod_l+0x8aa>
 800dcdc:	3101      	adds	r1, #1
 800dcde:	f43f adce 	beq.w	800d87e <_strtod_l+0x446>
 800dce2:	4b92      	ldr	r3, [pc, #584]	@ (800df2c <_strtod_l+0xaf4>)
 800dce4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dce6:	401a      	ands	r2, r3
 800dce8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800dcec:	f04f 0a00 	mov.w	sl, #0
 800dcf0:	9b08      	ldr	r3, [sp, #32]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d1b9      	bne.n	800dc6a <_strtod_l+0x832>
 800dcf6:	e5cd      	b.n	800d894 <_strtod_l+0x45c>
 800dcf8:	f04f 33ff 	mov.w	r3, #4294967295
 800dcfc:	e7e8      	b.n	800dcd0 <_strtod_l+0x898>
 800dcfe:	4613      	mov	r3, r2
 800dd00:	e7e6      	b.n	800dcd0 <_strtod_l+0x898>
 800dd02:	ea53 030a 	orrs.w	r3, r3, sl
 800dd06:	d0a2      	beq.n	800dc4e <_strtod_l+0x816>
 800dd08:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800dd0a:	b1db      	cbz	r3, 800dd44 <_strtod_l+0x90c>
 800dd0c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dd0e:	4213      	tst	r3, r2
 800dd10:	d0ee      	beq.n	800dcf0 <_strtod_l+0x8b8>
 800dd12:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd14:	9a08      	ldr	r2, [sp, #32]
 800dd16:	4650      	mov	r0, sl
 800dd18:	4659      	mov	r1, fp
 800dd1a:	b1bb      	cbz	r3, 800dd4c <_strtod_l+0x914>
 800dd1c:	f7ff fb6b 	bl	800d3f6 <sulp>
 800dd20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dd24:	ec53 2b10 	vmov	r2, r3, d0
 800dd28:	f7f2 fab8 	bl	800029c <__adddf3>
 800dd2c:	4682      	mov	sl, r0
 800dd2e:	468b      	mov	fp, r1
 800dd30:	e7de      	b.n	800dcf0 <_strtod_l+0x8b8>
 800dd32:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800dd36:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800dd3a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800dd3e:	f04f 3aff 	mov.w	sl, #4294967295
 800dd42:	e7d5      	b.n	800dcf0 <_strtod_l+0x8b8>
 800dd44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800dd46:	ea13 0f0a 	tst.w	r3, sl
 800dd4a:	e7e1      	b.n	800dd10 <_strtod_l+0x8d8>
 800dd4c:	f7ff fb53 	bl	800d3f6 <sulp>
 800dd50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dd54:	ec53 2b10 	vmov	r2, r3, d0
 800dd58:	f7f2 fa9e 	bl	8000298 <__aeabi_dsub>
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	2300      	movs	r3, #0
 800dd60:	4682      	mov	sl, r0
 800dd62:	468b      	mov	fp, r1
 800dd64:	f7f2 feb8 	bl	8000ad8 <__aeabi_dcmpeq>
 800dd68:	2800      	cmp	r0, #0
 800dd6a:	d0c1      	beq.n	800dcf0 <_strtod_l+0x8b8>
 800dd6c:	e61a      	b.n	800d9a4 <_strtod_l+0x56c>
 800dd6e:	4641      	mov	r1, r8
 800dd70:	4620      	mov	r0, r4
 800dd72:	f003 f901 	bl	8010f78 <__ratio>
 800dd76:	ec57 6b10 	vmov	r6, r7, d0
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800dd80:	4630      	mov	r0, r6
 800dd82:	4639      	mov	r1, r7
 800dd84:	f7f2 febc 	bl	8000b00 <__aeabi_dcmple>
 800dd88:	2800      	cmp	r0, #0
 800dd8a:	d06f      	beq.n	800de6c <_strtod_l+0xa34>
 800dd8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d17a      	bne.n	800de88 <_strtod_l+0xa50>
 800dd92:	f1ba 0f00 	cmp.w	sl, #0
 800dd96:	d158      	bne.n	800de4a <_strtod_l+0xa12>
 800dd98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d15a      	bne.n	800de58 <_strtod_l+0xa20>
 800dda2:	4b64      	ldr	r3, [pc, #400]	@ (800df34 <_strtod_l+0xafc>)
 800dda4:	2200      	movs	r2, #0
 800dda6:	4630      	mov	r0, r6
 800dda8:	4639      	mov	r1, r7
 800ddaa:	f7f2 fe9f 	bl	8000aec <__aeabi_dcmplt>
 800ddae:	2800      	cmp	r0, #0
 800ddb0:	d159      	bne.n	800de66 <_strtod_l+0xa2e>
 800ddb2:	4630      	mov	r0, r6
 800ddb4:	4639      	mov	r1, r7
 800ddb6:	4b60      	ldr	r3, [pc, #384]	@ (800df38 <_strtod_l+0xb00>)
 800ddb8:	2200      	movs	r2, #0
 800ddba:	f7f2 fc25 	bl	8000608 <__aeabi_dmul>
 800ddbe:	4606      	mov	r6, r0
 800ddc0:	460f      	mov	r7, r1
 800ddc2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ddc6:	9606      	str	r6, [sp, #24]
 800ddc8:	9307      	str	r3, [sp, #28]
 800ddca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ddce:	4d57      	ldr	r5, [pc, #348]	@ (800df2c <_strtod_l+0xaf4>)
 800ddd0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ddd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ddd6:	401d      	ands	r5, r3
 800ddd8:	4b58      	ldr	r3, [pc, #352]	@ (800df3c <_strtod_l+0xb04>)
 800ddda:	429d      	cmp	r5, r3
 800dddc:	f040 80b2 	bne.w	800df44 <_strtod_l+0xb0c>
 800dde0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dde2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800dde6:	ec4b ab10 	vmov	d0, sl, fp
 800ddea:	f002 fffd 	bl	8010de8 <__ulp>
 800ddee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ddf2:	ec51 0b10 	vmov	r0, r1, d0
 800ddf6:	f7f2 fc07 	bl	8000608 <__aeabi_dmul>
 800ddfa:	4652      	mov	r2, sl
 800ddfc:	465b      	mov	r3, fp
 800ddfe:	f7f2 fa4d 	bl	800029c <__adddf3>
 800de02:	460b      	mov	r3, r1
 800de04:	4949      	ldr	r1, [pc, #292]	@ (800df2c <_strtod_l+0xaf4>)
 800de06:	4a4e      	ldr	r2, [pc, #312]	@ (800df40 <_strtod_l+0xb08>)
 800de08:	4019      	ands	r1, r3
 800de0a:	4291      	cmp	r1, r2
 800de0c:	4682      	mov	sl, r0
 800de0e:	d942      	bls.n	800de96 <_strtod_l+0xa5e>
 800de10:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800de12:	4b47      	ldr	r3, [pc, #284]	@ (800df30 <_strtod_l+0xaf8>)
 800de14:	429a      	cmp	r2, r3
 800de16:	d103      	bne.n	800de20 <_strtod_l+0x9e8>
 800de18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800de1a:	3301      	adds	r3, #1
 800de1c:	f43f ad2f 	beq.w	800d87e <_strtod_l+0x446>
 800de20:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800df30 <_strtod_l+0xaf8>
 800de24:	f04f 3aff 	mov.w	sl, #4294967295
 800de28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800de2a:	9805      	ldr	r0, [sp, #20]
 800de2c:	f002 fcb0 	bl	8010790 <_Bfree>
 800de30:	9805      	ldr	r0, [sp, #20]
 800de32:	4649      	mov	r1, r9
 800de34:	f002 fcac 	bl	8010790 <_Bfree>
 800de38:	9805      	ldr	r0, [sp, #20]
 800de3a:	4641      	mov	r1, r8
 800de3c:	f002 fca8 	bl	8010790 <_Bfree>
 800de40:	9805      	ldr	r0, [sp, #20]
 800de42:	4621      	mov	r1, r4
 800de44:	f002 fca4 	bl	8010790 <_Bfree>
 800de48:	e619      	b.n	800da7e <_strtod_l+0x646>
 800de4a:	f1ba 0f01 	cmp.w	sl, #1
 800de4e:	d103      	bne.n	800de58 <_strtod_l+0xa20>
 800de50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de52:	2b00      	cmp	r3, #0
 800de54:	f43f ada6 	beq.w	800d9a4 <_strtod_l+0x56c>
 800de58:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800df08 <_strtod_l+0xad0>
 800de5c:	4f35      	ldr	r7, [pc, #212]	@ (800df34 <_strtod_l+0xafc>)
 800de5e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800de62:	2600      	movs	r6, #0
 800de64:	e7b1      	b.n	800ddca <_strtod_l+0x992>
 800de66:	4f34      	ldr	r7, [pc, #208]	@ (800df38 <_strtod_l+0xb00>)
 800de68:	2600      	movs	r6, #0
 800de6a:	e7aa      	b.n	800ddc2 <_strtod_l+0x98a>
 800de6c:	4b32      	ldr	r3, [pc, #200]	@ (800df38 <_strtod_l+0xb00>)
 800de6e:	4630      	mov	r0, r6
 800de70:	4639      	mov	r1, r7
 800de72:	2200      	movs	r2, #0
 800de74:	f7f2 fbc8 	bl	8000608 <__aeabi_dmul>
 800de78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800de7a:	4606      	mov	r6, r0
 800de7c:	460f      	mov	r7, r1
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d09f      	beq.n	800ddc2 <_strtod_l+0x98a>
 800de82:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800de86:	e7a0      	b.n	800ddca <_strtod_l+0x992>
 800de88:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800df10 <_strtod_l+0xad8>
 800de8c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800de90:	ec57 6b17 	vmov	r6, r7, d7
 800de94:	e799      	b.n	800ddca <_strtod_l+0x992>
 800de96:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800de9a:	9b08      	ldr	r3, [sp, #32]
 800de9c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d1c1      	bne.n	800de28 <_strtod_l+0x9f0>
 800dea4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dea8:	0d1b      	lsrs	r3, r3, #20
 800deaa:	051b      	lsls	r3, r3, #20
 800deac:	429d      	cmp	r5, r3
 800deae:	d1bb      	bne.n	800de28 <_strtod_l+0x9f0>
 800deb0:	4630      	mov	r0, r6
 800deb2:	4639      	mov	r1, r7
 800deb4:	f7f2 ff08 	bl	8000cc8 <__aeabi_d2lz>
 800deb8:	f7f2 fb78 	bl	80005ac <__aeabi_l2d>
 800debc:	4602      	mov	r2, r0
 800debe:	460b      	mov	r3, r1
 800dec0:	4630      	mov	r0, r6
 800dec2:	4639      	mov	r1, r7
 800dec4:	f7f2 f9e8 	bl	8000298 <__aeabi_dsub>
 800dec8:	460b      	mov	r3, r1
 800deca:	4602      	mov	r2, r0
 800decc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ded0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ded4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ded6:	ea46 060a 	orr.w	r6, r6, sl
 800deda:	431e      	orrs	r6, r3
 800dedc:	d06f      	beq.n	800dfbe <_strtod_l+0xb86>
 800dede:	a30e      	add	r3, pc, #56	@ (adr r3, 800df18 <_strtod_l+0xae0>)
 800dee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee4:	f7f2 fe02 	bl	8000aec <__aeabi_dcmplt>
 800dee8:	2800      	cmp	r0, #0
 800deea:	f47f acd3 	bne.w	800d894 <_strtod_l+0x45c>
 800deee:	a30c      	add	r3, pc, #48	@ (adr r3, 800df20 <_strtod_l+0xae8>)
 800def0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800def4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800def8:	f7f2 fe16 	bl	8000b28 <__aeabi_dcmpgt>
 800defc:	2800      	cmp	r0, #0
 800defe:	d093      	beq.n	800de28 <_strtod_l+0x9f0>
 800df00:	e4c8      	b.n	800d894 <_strtod_l+0x45c>
 800df02:	bf00      	nop
 800df04:	f3af 8000 	nop.w
 800df08:	00000000 	.word	0x00000000
 800df0c:	bff00000 	.word	0xbff00000
 800df10:	00000000 	.word	0x00000000
 800df14:	3ff00000 	.word	0x3ff00000
 800df18:	94a03595 	.word	0x94a03595
 800df1c:	3fdfffff 	.word	0x3fdfffff
 800df20:	35afe535 	.word	0x35afe535
 800df24:	3fe00000 	.word	0x3fe00000
 800df28:	000fffff 	.word	0x000fffff
 800df2c:	7ff00000 	.word	0x7ff00000
 800df30:	7fefffff 	.word	0x7fefffff
 800df34:	3ff00000 	.word	0x3ff00000
 800df38:	3fe00000 	.word	0x3fe00000
 800df3c:	7fe00000 	.word	0x7fe00000
 800df40:	7c9fffff 	.word	0x7c9fffff
 800df44:	9b08      	ldr	r3, [sp, #32]
 800df46:	b323      	cbz	r3, 800df92 <_strtod_l+0xb5a>
 800df48:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800df4c:	d821      	bhi.n	800df92 <_strtod_l+0xb5a>
 800df4e:	a328      	add	r3, pc, #160	@ (adr r3, 800dff0 <_strtod_l+0xbb8>)
 800df50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df54:	4630      	mov	r0, r6
 800df56:	4639      	mov	r1, r7
 800df58:	f7f2 fdd2 	bl	8000b00 <__aeabi_dcmple>
 800df5c:	b1a0      	cbz	r0, 800df88 <_strtod_l+0xb50>
 800df5e:	4639      	mov	r1, r7
 800df60:	4630      	mov	r0, r6
 800df62:	f7f2 fe29 	bl	8000bb8 <__aeabi_d2uiz>
 800df66:	2801      	cmp	r0, #1
 800df68:	bf38      	it	cc
 800df6a:	2001      	movcc	r0, #1
 800df6c:	f7f2 fad2 	bl	8000514 <__aeabi_ui2d>
 800df70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df72:	4606      	mov	r6, r0
 800df74:	460f      	mov	r7, r1
 800df76:	b9fb      	cbnz	r3, 800dfb8 <_strtod_l+0xb80>
 800df78:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800df7c:	9014      	str	r0, [sp, #80]	@ 0x50
 800df7e:	9315      	str	r3, [sp, #84]	@ 0x54
 800df80:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800df84:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800df88:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800df8a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800df8e:	1b5b      	subs	r3, r3, r5
 800df90:	9311      	str	r3, [sp, #68]	@ 0x44
 800df92:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800df96:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800df9a:	f002 ff25 	bl	8010de8 <__ulp>
 800df9e:	4650      	mov	r0, sl
 800dfa0:	ec53 2b10 	vmov	r2, r3, d0
 800dfa4:	4659      	mov	r1, fp
 800dfa6:	f7f2 fb2f 	bl	8000608 <__aeabi_dmul>
 800dfaa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800dfae:	f7f2 f975 	bl	800029c <__adddf3>
 800dfb2:	4682      	mov	sl, r0
 800dfb4:	468b      	mov	fp, r1
 800dfb6:	e770      	b.n	800de9a <_strtod_l+0xa62>
 800dfb8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800dfbc:	e7e0      	b.n	800df80 <_strtod_l+0xb48>
 800dfbe:	a30e      	add	r3, pc, #56	@ (adr r3, 800dff8 <_strtod_l+0xbc0>)
 800dfc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfc4:	f7f2 fd92 	bl	8000aec <__aeabi_dcmplt>
 800dfc8:	e798      	b.n	800defc <_strtod_l+0xac4>
 800dfca:	2300      	movs	r3, #0
 800dfcc:	930e      	str	r3, [sp, #56]	@ 0x38
 800dfce:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800dfd0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dfd2:	6013      	str	r3, [r2, #0]
 800dfd4:	f7ff ba6d 	b.w	800d4b2 <_strtod_l+0x7a>
 800dfd8:	2a65      	cmp	r2, #101	@ 0x65
 800dfda:	f43f ab68 	beq.w	800d6ae <_strtod_l+0x276>
 800dfde:	2a45      	cmp	r2, #69	@ 0x45
 800dfe0:	f43f ab65 	beq.w	800d6ae <_strtod_l+0x276>
 800dfe4:	2301      	movs	r3, #1
 800dfe6:	f7ff bba0 	b.w	800d72a <_strtod_l+0x2f2>
 800dfea:	bf00      	nop
 800dfec:	f3af 8000 	nop.w
 800dff0:	ffc00000 	.word	0xffc00000
 800dff4:	41dfffff 	.word	0x41dfffff
 800dff8:	94a03595 	.word	0x94a03595
 800dffc:	3fcfffff 	.word	0x3fcfffff

0800e000 <_strtod_r>:
 800e000:	4b01      	ldr	r3, [pc, #4]	@ (800e008 <_strtod_r+0x8>)
 800e002:	f7ff ba19 	b.w	800d438 <_strtod_l>
 800e006:	bf00      	nop
 800e008:	2000010c 	.word	0x2000010c

0800e00c <strtod>:
 800e00c:	460a      	mov	r2, r1
 800e00e:	4601      	mov	r1, r0
 800e010:	4802      	ldr	r0, [pc, #8]	@ (800e01c <strtod+0x10>)
 800e012:	4b03      	ldr	r3, [pc, #12]	@ (800e020 <strtod+0x14>)
 800e014:	6800      	ldr	r0, [r0, #0]
 800e016:	f7ff ba0f 	b.w	800d438 <_strtod_l>
 800e01a:	bf00      	nop
 800e01c:	20000278 	.word	0x20000278
 800e020:	2000010c 	.word	0x2000010c

0800e024 <__cvt>:
 800e024:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e028:	ec57 6b10 	vmov	r6, r7, d0
 800e02c:	2f00      	cmp	r7, #0
 800e02e:	460c      	mov	r4, r1
 800e030:	4619      	mov	r1, r3
 800e032:	463b      	mov	r3, r7
 800e034:	bfbb      	ittet	lt
 800e036:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e03a:	461f      	movlt	r7, r3
 800e03c:	2300      	movge	r3, #0
 800e03e:	232d      	movlt	r3, #45	@ 0x2d
 800e040:	700b      	strb	r3, [r1, #0]
 800e042:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e044:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e048:	4691      	mov	r9, r2
 800e04a:	f023 0820 	bic.w	r8, r3, #32
 800e04e:	bfbc      	itt	lt
 800e050:	4632      	movlt	r2, r6
 800e052:	4616      	movlt	r6, r2
 800e054:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e058:	d005      	beq.n	800e066 <__cvt+0x42>
 800e05a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e05e:	d100      	bne.n	800e062 <__cvt+0x3e>
 800e060:	3401      	adds	r4, #1
 800e062:	2102      	movs	r1, #2
 800e064:	e000      	b.n	800e068 <__cvt+0x44>
 800e066:	2103      	movs	r1, #3
 800e068:	ab03      	add	r3, sp, #12
 800e06a:	9301      	str	r3, [sp, #4]
 800e06c:	ab02      	add	r3, sp, #8
 800e06e:	9300      	str	r3, [sp, #0]
 800e070:	ec47 6b10 	vmov	d0, r6, r7
 800e074:	4653      	mov	r3, sl
 800e076:	4622      	mov	r2, r4
 800e078:	f001 f92e 	bl	800f2d8 <_dtoa_r>
 800e07c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e080:	4605      	mov	r5, r0
 800e082:	d119      	bne.n	800e0b8 <__cvt+0x94>
 800e084:	f019 0f01 	tst.w	r9, #1
 800e088:	d00e      	beq.n	800e0a8 <__cvt+0x84>
 800e08a:	eb00 0904 	add.w	r9, r0, r4
 800e08e:	2200      	movs	r2, #0
 800e090:	2300      	movs	r3, #0
 800e092:	4630      	mov	r0, r6
 800e094:	4639      	mov	r1, r7
 800e096:	f7f2 fd1f 	bl	8000ad8 <__aeabi_dcmpeq>
 800e09a:	b108      	cbz	r0, 800e0a0 <__cvt+0x7c>
 800e09c:	f8cd 900c 	str.w	r9, [sp, #12]
 800e0a0:	2230      	movs	r2, #48	@ 0x30
 800e0a2:	9b03      	ldr	r3, [sp, #12]
 800e0a4:	454b      	cmp	r3, r9
 800e0a6:	d31e      	bcc.n	800e0e6 <__cvt+0xc2>
 800e0a8:	9b03      	ldr	r3, [sp, #12]
 800e0aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e0ac:	1b5b      	subs	r3, r3, r5
 800e0ae:	4628      	mov	r0, r5
 800e0b0:	6013      	str	r3, [r2, #0]
 800e0b2:	b004      	add	sp, #16
 800e0b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e0bc:	eb00 0904 	add.w	r9, r0, r4
 800e0c0:	d1e5      	bne.n	800e08e <__cvt+0x6a>
 800e0c2:	7803      	ldrb	r3, [r0, #0]
 800e0c4:	2b30      	cmp	r3, #48	@ 0x30
 800e0c6:	d10a      	bne.n	800e0de <__cvt+0xba>
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	4630      	mov	r0, r6
 800e0ce:	4639      	mov	r1, r7
 800e0d0:	f7f2 fd02 	bl	8000ad8 <__aeabi_dcmpeq>
 800e0d4:	b918      	cbnz	r0, 800e0de <__cvt+0xba>
 800e0d6:	f1c4 0401 	rsb	r4, r4, #1
 800e0da:	f8ca 4000 	str.w	r4, [sl]
 800e0de:	f8da 3000 	ldr.w	r3, [sl]
 800e0e2:	4499      	add	r9, r3
 800e0e4:	e7d3      	b.n	800e08e <__cvt+0x6a>
 800e0e6:	1c59      	adds	r1, r3, #1
 800e0e8:	9103      	str	r1, [sp, #12]
 800e0ea:	701a      	strb	r2, [r3, #0]
 800e0ec:	e7d9      	b.n	800e0a2 <__cvt+0x7e>

0800e0ee <__exponent>:
 800e0ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e0f0:	2900      	cmp	r1, #0
 800e0f2:	bfba      	itte	lt
 800e0f4:	4249      	neglt	r1, r1
 800e0f6:	232d      	movlt	r3, #45	@ 0x2d
 800e0f8:	232b      	movge	r3, #43	@ 0x2b
 800e0fa:	2909      	cmp	r1, #9
 800e0fc:	7002      	strb	r2, [r0, #0]
 800e0fe:	7043      	strb	r3, [r0, #1]
 800e100:	dd29      	ble.n	800e156 <__exponent+0x68>
 800e102:	f10d 0307 	add.w	r3, sp, #7
 800e106:	461d      	mov	r5, r3
 800e108:	270a      	movs	r7, #10
 800e10a:	461a      	mov	r2, r3
 800e10c:	fbb1 f6f7 	udiv	r6, r1, r7
 800e110:	fb07 1416 	mls	r4, r7, r6, r1
 800e114:	3430      	adds	r4, #48	@ 0x30
 800e116:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e11a:	460c      	mov	r4, r1
 800e11c:	2c63      	cmp	r4, #99	@ 0x63
 800e11e:	f103 33ff 	add.w	r3, r3, #4294967295
 800e122:	4631      	mov	r1, r6
 800e124:	dcf1      	bgt.n	800e10a <__exponent+0x1c>
 800e126:	3130      	adds	r1, #48	@ 0x30
 800e128:	1e94      	subs	r4, r2, #2
 800e12a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e12e:	1c41      	adds	r1, r0, #1
 800e130:	4623      	mov	r3, r4
 800e132:	42ab      	cmp	r3, r5
 800e134:	d30a      	bcc.n	800e14c <__exponent+0x5e>
 800e136:	f10d 0309 	add.w	r3, sp, #9
 800e13a:	1a9b      	subs	r3, r3, r2
 800e13c:	42ac      	cmp	r4, r5
 800e13e:	bf88      	it	hi
 800e140:	2300      	movhi	r3, #0
 800e142:	3302      	adds	r3, #2
 800e144:	4403      	add	r3, r0
 800e146:	1a18      	subs	r0, r3, r0
 800e148:	b003      	add	sp, #12
 800e14a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e14c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e150:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e154:	e7ed      	b.n	800e132 <__exponent+0x44>
 800e156:	2330      	movs	r3, #48	@ 0x30
 800e158:	3130      	adds	r1, #48	@ 0x30
 800e15a:	7083      	strb	r3, [r0, #2]
 800e15c:	70c1      	strb	r1, [r0, #3]
 800e15e:	1d03      	adds	r3, r0, #4
 800e160:	e7f1      	b.n	800e146 <__exponent+0x58>
	...

0800e164 <_printf_float>:
 800e164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e168:	b08d      	sub	sp, #52	@ 0x34
 800e16a:	460c      	mov	r4, r1
 800e16c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e170:	4616      	mov	r6, r2
 800e172:	461f      	mov	r7, r3
 800e174:	4605      	mov	r5, r0
 800e176:	f000 ff31 	bl	800efdc <_localeconv_r>
 800e17a:	6803      	ldr	r3, [r0, #0]
 800e17c:	9304      	str	r3, [sp, #16]
 800e17e:	4618      	mov	r0, r3
 800e180:	f7f2 f87e 	bl	8000280 <strlen>
 800e184:	2300      	movs	r3, #0
 800e186:	930a      	str	r3, [sp, #40]	@ 0x28
 800e188:	f8d8 3000 	ldr.w	r3, [r8]
 800e18c:	9005      	str	r0, [sp, #20]
 800e18e:	3307      	adds	r3, #7
 800e190:	f023 0307 	bic.w	r3, r3, #7
 800e194:	f103 0208 	add.w	r2, r3, #8
 800e198:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e19c:	f8d4 b000 	ldr.w	fp, [r4]
 800e1a0:	f8c8 2000 	str.w	r2, [r8]
 800e1a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e1a8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e1ac:	9307      	str	r3, [sp, #28]
 800e1ae:	f8cd 8018 	str.w	r8, [sp, #24]
 800e1b2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e1b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e1ba:	4b9c      	ldr	r3, [pc, #624]	@ (800e42c <_printf_float+0x2c8>)
 800e1bc:	f04f 32ff 	mov.w	r2, #4294967295
 800e1c0:	f7f2 fcbc 	bl	8000b3c <__aeabi_dcmpun>
 800e1c4:	bb70      	cbnz	r0, 800e224 <_printf_float+0xc0>
 800e1c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e1ca:	4b98      	ldr	r3, [pc, #608]	@ (800e42c <_printf_float+0x2c8>)
 800e1cc:	f04f 32ff 	mov.w	r2, #4294967295
 800e1d0:	f7f2 fc96 	bl	8000b00 <__aeabi_dcmple>
 800e1d4:	bb30      	cbnz	r0, 800e224 <_printf_float+0xc0>
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	2300      	movs	r3, #0
 800e1da:	4640      	mov	r0, r8
 800e1dc:	4649      	mov	r1, r9
 800e1de:	f7f2 fc85 	bl	8000aec <__aeabi_dcmplt>
 800e1e2:	b110      	cbz	r0, 800e1ea <_printf_float+0x86>
 800e1e4:	232d      	movs	r3, #45	@ 0x2d
 800e1e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e1ea:	4a91      	ldr	r2, [pc, #580]	@ (800e430 <_printf_float+0x2cc>)
 800e1ec:	4b91      	ldr	r3, [pc, #580]	@ (800e434 <_printf_float+0x2d0>)
 800e1ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e1f2:	bf8c      	ite	hi
 800e1f4:	4690      	movhi	r8, r2
 800e1f6:	4698      	movls	r8, r3
 800e1f8:	2303      	movs	r3, #3
 800e1fa:	6123      	str	r3, [r4, #16]
 800e1fc:	f02b 0304 	bic.w	r3, fp, #4
 800e200:	6023      	str	r3, [r4, #0]
 800e202:	f04f 0900 	mov.w	r9, #0
 800e206:	9700      	str	r7, [sp, #0]
 800e208:	4633      	mov	r3, r6
 800e20a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e20c:	4621      	mov	r1, r4
 800e20e:	4628      	mov	r0, r5
 800e210:	f000 f9d2 	bl	800e5b8 <_printf_common>
 800e214:	3001      	adds	r0, #1
 800e216:	f040 808d 	bne.w	800e334 <_printf_float+0x1d0>
 800e21a:	f04f 30ff 	mov.w	r0, #4294967295
 800e21e:	b00d      	add	sp, #52	@ 0x34
 800e220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e224:	4642      	mov	r2, r8
 800e226:	464b      	mov	r3, r9
 800e228:	4640      	mov	r0, r8
 800e22a:	4649      	mov	r1, r9
 800e22c:	f7f2 fc86 	bl	8000b3c <__aeabi_dcmpun>
 800e230:	b140      	cbz	r0, 800e244 <_printf_float+0xe0>
 800e232:	464b      	mov	r3, r9
 800e234:	2b00      	cmp	r3, #0
 800e236:	bfbc      	itt	lt
 800e238:	232d      	movlt	r3, #45	@ 0x2d
 800e23a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e23e:	4a7e      	ldr	r2, [pc, #504]	@ (800e438 <_printf_float+0x2d4>)
 800e240:	4b7e      	ldr	r3, [pc, #504]	@ (800e43c <_printf_float+0x2d8>)
 800e242:	e7d4      	b.n	800e1ee <_printf_float+0x8a>
 800e244:	6863      	ldr	r3, [r4, #4]
 800e246:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e24a:	9206      	str	r2, [sp, #24]
 800e24c:	1c5a      	adds	r2, r3, #1
 800e24e:	d13b      	bne.n	800e2c8 <_printf_float+0x164>
 800e250:	2306      	movs	r3, #6
 800e252:	6063      	str	r3, [r4, #4]
 800e254:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e258:	2300      	movs	r3, #0
 800e25a:	6022      	str	r2, [r4, #0]
 800e25c:	9303      	str	r3, [sp, #12]
 800e25e:	ab0a      	add	r3, sp, #40	@ 0x28
 800e260:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e264:	ab09      	add	r3, sp, #36	@ 0x24
 800e266:	9300      	str	r3, [sp, #0]
 800e268:	6861      	ldr	r1, [r4, #4]
 800e26a:	ec49 8b10 	vmov	d0, r8, r9
 800e26e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e272:	4628      	mov	r0, r5
 800e274:	f7ff fed6 	bl	800e024 <__cvt>
 800e278:	9b06      	ldr	r3, [sp, #24]
 800e27a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e27c:	2b47      	cmp	r3, #71	@ 0x47
 800e27e:	4680      	mov	r8, r0
 800e280:	d129      	bne.n	800e2d6 <_printf_float+0x172>
 800e282:	1cc8      	adds	r0, r1, #3
 800e284:	db02      	blt.n	800e28c <_printf_float+0x128>
 800e286:	6863      	ldr	r3, [r4, #4]
 800e288:	4299      	cmp	r1, r3
 800e28a:	dd41      	ble.n	800e310 <_printf_float+0x1ac>
 800e28c:	f1aa 0a02 	sub.w	sl, sl, #2
 800e290:	fa5f fa8a 	uxtb.w	sl, sl
 800e294:	3901      	subs	r1, #1
 800e296:	4652      	mov	r2, sl
 800e298:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e29c:	9109      	str	r1, [sp, #36]	@ 0x24
 800e29e:	f7ff ff26 	bl	800e0ee <__exponent>
 800e2a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e2a4:	1813      	adds	r3, r2, r0
 800e2a6:	2a01      	cmp	r2, #1
 800e2a8:	4681      	mov	r9, r0
 800e2aa:	6123      	str	r3, [r4, #16]
 800e2ac:	dc02      	bgt.n	800e2b4 <_printf_float+0x150>
 800e2ae:	6822      	ldr	r2, [r4, #0]
 800e2b0:	07d2      	lsls	r2, r2, #31
 800e2b2:	d501      	bpl.n	800e2b8 <_printf_float+0x154>
 800e2b4:	3301      	adds	r3, #1
 800e2b6:	6123      	str	r3, [r4, #16]
 800e2b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d0a2      	beq.n	800e206 <_printf_float+0xa2>
 800e2c0:	232d      	movs	r3, #45	@ 0x2d
 800e2c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e2c6:	e79e      	b.n	800e206 <_printf_float+0xa2>
 800e2c8:	9a06      	ldr	r2, [sp, #24]
 800e2ca:	2a47      	cmp	r2, #71	@ 0x47
 800e2cc:	d1c2      	bne.n	800e254 <_printf_float+0xf0>
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d1c0      	bne.n	800e254 <_printf_float+0xf0>
 800e2d2:	2301      	movs	r3, #1
 800e2d4:	e7bd      	b.n	800e252 <_printf_float+0xee>
 800e2d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e2da:	d9db      	bls.n	800e294 <_printf_float+0x130>
 800e2dc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e2e0:	d118      	bne.n	800e314 <_printf_float+0x1b0>
 800e2e2:	2900      	cmp	r1, #0
 800e2e4:	6863      	ldr	r3, [r4, #4]
 800e2e6:	dd0b      	ble.n	800e300 <_printf_float+0x19c>
 800e2e8:	6121      	str	r1, [r4, #16]
 800e2ea:	b913      	cbnz	r3, 800e2f2 <_printf_float+0x18e>
 800e2ec:	6822      	ldr	r2, [r4, #0]
 800e2ee:	07d0      	lsls	r0, r2, #31
 800e2f0:	d502      	bpl.n	800e2f8 <_printf_float+0x194>
 800e2f2:	3301      	adds	r3, #1
 800e2f4:	440b      	add	r3, r1
 800e2f6:	6123      	str	r3, [r4, #16]
 800e2f8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e2fa:	f04f 0900 	mov.w	r9, #0
 800e2fe:	e7db      	b.n	800e2b8 <_printf_float+0x154>
 800e300:	b913      	cbnz	r3, 800e308 <_printf_float+0x1a4>
 800e302:	6822      	ldr	r2, [r4, #0]
 800e304:	07d2      	lsls	r2, r2, #31
 800e306:	d501      	bpl.n	800e30c <_printf_float+0x1a8>
 800e308:	3302      	adds	r3, #2
 800e30a:	e7f4      	b.n	800e2f6 <_printf_float+0x192>
 800e30c:	2301      	movs	r3, #1
 800e30e:	e7f2      	b.n	800e2f6 <_printf_float+0x192>
 800e310:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e314:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e316:	4299      	cmp	r1, r3
 800e318:	db05      	blt.n	800e326 <_printf_float+0x1c2>
 800e31a:	6823      	ldr	r3, [r4, #0]
 800e31c:	6121      	str	r1, [r4, #16]
 800e31e:	07d8      	lsls	r0, r3, #31
 800e320:	d5ea      	bpl.n	800e2f8 <_printf_float+0x194>
 800e322:	1c4b      	adds	r3, r1, #1
 800e324:	e7e7      	b.n	800e2f6 <_printf_float+0x192>
 800e326:	2900      	cmp	r1, #0
 800e328:	bfd4      	ite	le
 800e32a:	f1c1 0202 	rsble	r2, r1, #2
 800e32e:	2201      	movgt	r2, #1
 800e330:	4413      	add	r3, r2
 800e332:	e7e0      	b.n	800e2f6 <_printf_float+0x192>
 800e334:	6823      	ldr	r3, [r4, #0]
 800e336:	055a      	lsls	r2, r3, #21
 800e338:	d407      	bmi.n	800e34a <_printf_float+0x1e6>
 800e33a:	6923      	ldr	r3, [r4, #16]
 800e33c:	4642      	mov	r2, r8
 800e33e:	4631      	mov	r1, r6
 800e340:	4628      	mov	r0, r5
 800e342:	47b8      	blx	r7
 800e344:	3001      	adds	r0, #1
 800e346:	d12b      	bne.n	800e3a0 <_printf_float+0x23c>
 800e348:	e767      	b.n	800e21a <_printf_float+0xb6>
 800e34a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e34e:	f240 80dd 	bls.w	800e50c <_printf_float+0x3a8>
 800e352:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e356:	2200      	movs	r2, #0
 800e358:	2300      	movs	r3, #0
 800e35a:	f7f2 fbbd 	bl	8000ad8 <__aeabi_dcmpeq>
 800e35e:	2800      	cmp	r0, #0
 800e360:	d033      	beq.n	800e3ca <_printf_float+0x266>
 800e362:	4a37      	ldr	r2, [pc, #220]	@ (800e440 <_printf_float+0x2dc>)
 800e364:	2301      	movs	r3, #1
 800e366:	4631      	mov	r1, r6
 800e368:	4628      	mov	r0, r5
 800e36a:	47b8      	blx	r7
 800e36c:	3001      	adds	r0, #1
 800e36e:	f43f af54 	beq.w	800e21a <_printf_float+0xb6>
 800e372:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e376:	4543      	cmp	r3, r8
 800e378:	db02      	blt.n	800e380 <_printf_float+0x21c>
 800e37a:	6823      	ldr	r3, [r4, #0]
 800e37c:	07d8      	lsls	r0, r3, #31
 800e37e:	d50f      	bpl.n	800e3a0 <_printf_float+0x23c>
 800e380:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e384:	4631      	mov	r1, r6
 800e386:	4628      	mov	r0, r5
 800e388:	47b8      	blx	r7
 800e38a:	3001      	adds	r0, #1
 800e38c:	f43f af45 	beq.w	800e21a <_printf_float+0xb6>
 800e390:	f04f 0900 	mov.w	r9, #0
 800e394:	f108 38ff 	add.w	r8, r8, #4294967295
 800e398:	f104 0a1a 	add.w	sl, r4, #26
 800e39c:	45c8      	cmp	r8, r9
 800e39e:	dc09      	bgt.n	800e3b4 <_printf_float+0x250>
 800e3a0:	6823      	ldr	r3, [r4, #0]
 800e3a2:	079b      	lsls	r3, r3, #30
 800e3a4:	f100 8103 	bmi.w	800e5ae <_printf_float+0x44a>
 800e3a8:	68e0      	ldr	r0, [r4, #12]
 800e3aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e3ac:	4298      	cmp	r0, r3
 800e3ae:	bfb8      	it	lt
 800e3b0:	4618      	movlt	r0, r3
 800e3b2:	e734      	b.n	800e21e <_printf_float+0xba>
 800e3b4:	2301      	movs	r3, #1
 800e3b6:	4652      	mov	r2, sl
 800e3b8:	4631      	mov	r1, r6
 800e3ba:	4628      	mov	r0, r5
 800e3bc:	47b8      	blx	r7
 800e3be:	3001      	adds	r0, #1
 800e3c0:	f43f af2b 	beq.w	800e21a <_printf_float+0xb6>
 800e3c4:	f109 0901 	add.w	r9, r9, #1
 800e3c8:	e7e8      	b.n	800e39c <_printf_float+0x238>
 800e3ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	dc39      	bgt.n	800e444 <_printf_float+0x2e0>
 800e3d0:	4a1b      	ldr	r2, [pc, #108]	@ (800e440 <_printf_float+0x2dc>)
 800e3d2:	2301      	movs	r3, #1
 800e3d4:	4631      	mov	r1, r6
 800e3d6:	4628      	mov	r0, r5
 800e3d8:	47b8      	blx	r7
 800e3da:	3001      	adds	r0, #1
 800e3dc:	f43f af1d 	beq.w	800e21a <_printf_float+0xb6>
 800e3e0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e3e4:	ea59 0303 	orrs.w	r3, r9, r3
 800e3e8:	d102      	bne.n	800e3f0 <_printf_float+0x28c>
 800e3ea:	6823      	ldr	r3, [r4, #0]
 800e3ec:	07d9      	lsls	r1, r3, #31
 800e3ee:	d5d7      	bpl.n	800e3a0 <_printf_float+0x23c>
 800e3f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e3f4:	4631      	mov	r1, r6
 800e3f6:	4628      	mov	r0, r5
 800e3f8:	47b8      	blx	r7
 800e3fa:	3001      	adds	r0, #1
 800e3fc:	f43f af0d 	beq.w	800e21a <_printf_float+0xb6>
 800e400:	f04f 0a00 	mov.w	sl, #0
 800e404:	f104 0b1a 	add.w	fp, r4, #26
 800e408:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e40a:	425b      	negs	r3, r3
 800e40c:	4553      	cmp	r3, sl
 800e40e:	dc01      	bgt.n	800e414 <_printf_float+0x2b0>
 800e410:	464b      	mov	r3, r9
 800e412:	e793      	b.n	800e33c <_printf_float+0x1d8>
 800e414:	2301      	movs	r3, #1
 800e416:	465a      	mov	r2, fp
 800e418:	4631      	mov	r1, r6
 800e41a:	4628      	mov	r0, r5
 800e41c:	47b8      	blx	r7
 800e41e:	3001      	adds	r0, #1
 800e420:	f43f aefb 	beq.w	800e21a <_printf_float+0xb6>
 800e424:	f10a 0a01 	add.w	sl, sl, #1
 800e428:	e7ee      	b.n	800e408 <_printf_float+0x2a4>
 800e42a:	bf00      	nop
 800e42c:	7fefffff 	.word	0x7fefffff
 800e430:	08011eca 	.word	0x08011eca
 800e434:	08011ec6 	.word	0x08011ec6
 800e438:	08011ed2 	.word	0x08011ed2
 800e43c:	08011ece 	.word	0x08011ece
 800e440:	08011ed6 	.word	0x08011ed6
 800e444:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e446:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e44a:	4553      	cmp	r3, sl
 800e44c:	bfa8      	it	ge
 800e44e:	4653      	movge	r3, sl
 800e450:	2b00      	cmp	r3, #0
 800e452:	4699      	mov	r9, r3
 800e454:	dc36      	bgt.n	800e4c4 <_printf_float+0x360>
 800e456:	f04f 0b00 	mov.w	fp, #0
 800e45a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e45e:	f104 021a 	add.w	r2, r4, #26
 800e462:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e464:	9306      	str	r3, [sp, #24]
 800e466:	eba3 0309 	sub.w	r3, r3, r9
 800e46a:	455b      	cmp	r3, fp
 800e46c:	dc31      	bgt.n	800e4d2 <_printf_float+0x36e>
 800e46e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e470:	459a      	cmp	sl, r3
 800e472:	dc3a      	bgt.n	800e4ea <_printf_float+0x386>
 800e474:	6823      	ldr	r3, [r4, #0]
 800e476:	07da      	lsls	r2, r3, #31
 800e478:	d437      	bmi.n	800e4ea <_printf_float+0x386>
 800e47a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e47c:	ebaa 0903 	sub.w	r9, sl, r3
 800e480:	9b06      	ldr	r3, [sp, #24]
 800e482:	ebaa 0303 	sub.w	r3, sl, r3
 800e486:	4599      	cmp	r9, r3
 800e488:	bfa8      	it	ge
 800e48a:	4699      	movge	r9, r3
 800e48c:	f1b9 0f00 	cmp.w	r9, #0
 800e490:	dc33      	bgt.n	800e4fa <_printf_float+0x396>
 800e492:	f04f 0800 	mov.w	r8, #0
 800e496:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e49a:	f104 0b1a 	add.w	fp, r4, #26
 800e49e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4a0:	ebaa 0303 	sub.w	r3, sl, r3
 800e4a4:	eba3 0309 	sub.w	r3, r3, r9
 800e4a8:	4543      	cmp	r3, r8
 800e4aa:	f77f af79 	ble.w	800e3a0 <_printf_float+0x23c>
 800e4ae:	2301      	movs	r3, #1
 800e4b0:	465a      	mov	r2, fp
 800e4b2:	4631      	mov	r1, r6
 800e4b4:	4628      	mov	r0, r5
 800e4b6:	47b8      	blx	r7
 800e4b8:	3001      	adds	r0, #1
 800e4ba:	f43f aeae 	beq.w	800e21a <_printf_float+0xb6>
 800e4be:	f108 0801 	add.w	r8, r8, #1
 800e4c2:	e7ec      	b.n	800e49e <_printf_float+0x33a>
 800e4c4:	4642      	mov	r2, r8
 800e4c6:	4631      	mov	r1, r6
 800e4c8:	4628      	mov	r0, r5
 800e4ca:	47b8      	blx	r7
 800e4cc:	3001      	adds	r0, #1
 800e4ce:	d1c2      	bne.n	800e456 <_printf_float+0x2f2>
 800e4d0:	e6a3      	b.n	800e21a <_printf_float+0xb6>
 800e4d2:	2301      	movs	r3, #1
 800e4d4:	4631      	mov	r1, r6
 800e4d6:	4628      	mov	r0, r5
 800e4d8:	9206      	str	r2, [sp, #24]
 800e4da:	47b8      	blx	r7
 800e4dc:	3001      	adds	r0, #1
 800e4de:	f43f ae9c 	beq.w	800e21a <_printf_float+0xb6>
 800e4e2:	9a06      	ldr	r2, [sp, #24]
 800e4e4:	f10b 0b01 	add.w	fp, fp, #1
 800e4e8:	e7bb      	b.n	800e462 <_printf_float+0x2fe>
 800e4ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e4ee:	4631      	mov	r1, r6
 800e4f0:	4628      	mov	r0, r5
 800e4f2:	47b8      	blx	r7
 800e4f4:	3001      	adds	r0, #1
 800e4f6:	d1c0      	bne.n	800e47a <_printf_float+0x316>
 800e4f8:	e68f      	b.n	800e21a <_printf_float+0xb6>
 800e4fa:	9a06      	ldr	r2, [sp, #24]
 800e4fc:	464b      	mov	r3, r9
 800e4fe:	4442      	add	r2, r8
 800e500:	4631      	mov	r1, r6
 800e502:	4628      	mov	r0, r5
 800e504:	47b8      	blx	r7
 800e506:	3001      	adds	r0, #1
 800e508:	d1c3      	bne.n	800e492 <_printf_float+0x32e>
 800e50a:	e686      	b.n	800e21a <_printf_float+0xb6>
 800e50c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e510:	f1ba 0f01 	cmp.w	sl, #1
 800e514:	dc01      	bgt.n	800e51a <_printf_float+0x3b6>
 800e516:	07db      	lsls	r3, r3, #31
 800e518:	d536      	bpl.n	800e588 <_printf_float+0x424>
 800e51a:	2301      	movs	r3, #1
 800e51c:	4642      	mov	r2, r8
 800e51e:	4631      	mov	r1, r6
 800e520:	4628      	mov	r0, r5
 800e522:	47b8      	blx	r7
 800e524:	3001      	adds	r0, #1
 800e526:	f43f ae78 	beq.w	800e21a <_printf_float+0xb6>
 800e52a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e52e:	4631      	mov	r1, r6
 800e530:	4628      	mov	r0, r5
 800e532:	47b8      	blx	r7
 800e534:	3001      	adds	r0, #1
 800e536:	f43f ae70 	beq.w	800e21a <_printf_float+0xb6>
 800e53a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e53e:	2200      	movs	r2, #0
 800e540:	2300      	movs	r3, #0
 800e542:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e546:	f7f2 fac7 	bl	8000ad8 <__aeabi_dcmpeq>
 800e54a:	b9c0      	cbnz	r0, 800e57e <_printf_float+0x41a>
 800e54c:	4653      	mov	r3, sl
 800e54e:	f108 0201 	add.w	r2, r8, #1
 800e552:	4631      	mov	r1, r6
 800e554:	4628      	mov	r0, r5
 800e556:	47b8      	blx	r7
 800e558:	3001      	adds	r0, #1
 800e55a:	d10c      	bne.n	800e576 <_printf_float+0x412>
 800e55c:	e65d      	b.n	800e21a <_printf_float+0xb6>
 800e55e:	2301      	movs	r3, #1
 800e560:	465a      	mov	r2, fp
 800e562:	4631      	mov	r1, r6
 800e564:	4628      	mov	r0, r5
 800e566:	47b8      	blx	r7
 800e568:	3001      	adds	r0, #1
 800e56a:	f43f ae56 	beq.w	800e21a <_printf_float+0xb6>
 800e56e:	f108 0801 	add.w	r8, r8, #1
 800e572:	45d0      	cmp	r8, sl
 800e574:	dbf3      	blt.n	800e55e <_printf_float+0x3fa>
 800e576:	464b      	mov	r3, r9
 800e578:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e57c:	e6df      	b.n	800e33e <_printf_float+0x1da>
 800e57e:	f04f 0800 	mov.w	r8, #0
 800e582:	f104 0b1a 	add.w	fp, r4, #26
 800e586:	e7f4      	b.n	800e572 <_printf_float+0x40e>
 800e588:	2301      	movs	r3, #1
 800e58a:	4642      	mov	r2, r8
 800e58c:	e7e1      	b.n	800e552 <_printf_float+0x3ee>
 800e58e:	2301      	movs	r3, #1
 800e590:	464a      	mov	r2, r9
 800e592:	4631      	mov	r1, r6
 800e594:	4628      	mov	r0, r5
 800e596:	47b8      	blx	r7
 800e598:	3001      	adds	r0, #1
 800e59a:	f43f ae3e 	beq.w	800e21a <_printf_float+0xb6>
 800e59e:	f108 0801 	add.w	r8, r8, #1
 800e5a2:	68e3      	ldr	r3, [r4, #12]
 800e5a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e5a6:	1a5b      	subs	r3, r3, r1
 800e5a8:	4543      	cmp	r3, r8
 800e5aa:	dcf0      	bgt.n	800e58e <_printf_float+0x42a>
 800e5ac:	e6fc      	b.n	800e3a8 <_printf_float+0x244>
 800e5ae:	f04f 0800 	mov.w	r8, #0
 800e5b2:	f104 0919 	add.w	r9, r4, #25
 800e5b6:	e7f4      	b.n	800e5a2 <_printf_float+0x43e>

0800e5b8 <_printf_common>:
 800e5b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5bc:	4616      	mov	r6, r2
 800e5be:	4698      	mov	r8, r3
 800e5c0:	688a      	ldr	r2, [r1, #8]
 800e5c2:	690b      	ldr	r3, [r1, #16]
 800e5c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e5c8:	4293      	cmp	r3, r2
 800e5ca:	bfb8      	it	lt
 800e5cc:	4613      	movlt	r3, r2
 800e5ce:	6033      	str	r3, [r6, #0]
 800e5d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e5d4:	4607      	mov	r7, r0
 800e5d6:	460c      	mov	r4, r1
 800e5d8:	b10a      	cbz	r2, 800e5de <_printf_common+0x26>
 800e5da:	3301      	adds	r3, #1
 800e5dc:	6033      	str	r3, [r6, #0]
 800e5de:	6823      	ldr	r3, [r4, #0]
 800e5e0:	0699      	lsls	r1, r3, #26
 800e5e2:	bf42      	ittt	mi
 800e5e4:	6833      	ldrmi	r3, [r6, #0]
 800e5e6:	3302      	addmi	r3, #2
 800e5e8:	6033      	strmi	r3, [r6, #0]
 800e5ea:	6825      	ldr	r5, [r4, #0]
 800e5ec:	f015 0506 	ands.w	r5, r5, #6
 800e5f0:	d106      	bne.n	800e600 <_printf_common+0x48>
 800e5f2:	f104 0a19 	add.w	sl, r4, #25
 800e5f6:	68e3      	ldr	r3, [r4, #12]
 800e5f8:	6832      	ldr	r2, [r6, #0]
 800e5fa:	1a9b      	subs	r3, r3, r2
 800e5fc:	42ab      	cmp	r3, r5
 800e5fe:	dc26      	bgt.n	800e64e <_printf_common+0x96>
 800e600:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e604:	6822      	ldr	r2, [r4, #0]
 800e606:	3b00      	subs	r3, #0
 800e608:	bf18      	it	ne
 800e60a:	2301      	movne	r3, #1
 800e60c:	0692      	lsls	r2, r2, #26
 800e60e:	d42b      	bmi.n	800e668 <_printf_common+0xb0>
 800e610:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e614:	4641      	mov	r1, r8
 800e616:	4638      	mov	r0, r7
 800e618:	47c8      	blx	r9
 800e61a:	3001      	adds	r0, #1
 800e61c:	d01e      	beq.n	800e65c <_printf_common+0xa4>
 800e61e:	6823      	ldr	r3, [r4, #0]
 800e620:	6922      	ldr	r2, [r4, #16]
 800e622:	f003 0306 	and.w	r3, r3, #6
 800e626:	2b04      	cmp	r3, #4
 800e628:	bf02      	ittt	eq
 800e62a:	68e5      	ldreq	r5, [r4, #12]
 800e62c:	6833      	ldreq	r3, [r6, #0]
 800e62e:	1aed      	subeq	r5, r5, r3
 800e630:	68a3      	ldr	r3, [r4, #8]
 800e632:	bf0c      	ite	eq
 800e634:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e638:	2500      	movne	r5, #0
 800e63a:	4293      	cmp	r3, r2
 800e63c:	bfc4      	itt	gt
 800e63e:	1a9b      	subgt	r3, r3, r2
 800e640:	18ed      	addgt	r5, r5, r3
 800e642:	2600      	movs	r6, #0
 800e644:	341a      	adds	r4, #26
 800e646:	42b5      	cmp	r5, r6
 800e648:	d11a      	bne.n	800e680 <_printf_common+0xc8>
 800e64a:	2000      	movs	r0, #0
 800e64c:	e008      	b.n	800e660 <_printf_common+0xa8>
 800e64e:	2301      	movs	r3, #1
 800e650:	4652      	mov	r2, sl
 800e652:	4641      	mov	r1, r8
 800e654:	4638      	mov	r0, r7
 800e656:	47c8      	blx	r9
 800e658:	3001      	adds	r0, #1
 800e65a:	d103      	bne.n	800e664 <_printf_common+0xac>
 800e65c:	f04f 30ff 	mov.w	r0, #4294967295
 800e660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e664:	3501      	adds	r5, #1
 800e666:	e7c6      	b.n	800e5f6 <_printf_common+0x3e>
 800e668:	18e1      	adds	r1, r4, r3
 800e66a:	1c5a      	adds	r2, r3, #1
 800e66c:	2030      	movs	r0, #48	@ 0x30
 800e66e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e672:	4422      	add	r2, r4
 800e674:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e678:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e67c:	3302      	adds	r3, #2
 800e67e:	e7c7      	b.n	800e610 <_printf_common+0x58>
 800e680:	2301      	movs	r3, #1
 800e682:	4622      	mov	r2, r4
 800e684:	4641      	mov	r1, r8
 800e686:	4638      	mov	r0, r7
 800e688:	47c8      	blx	r9
 800e68a:	3001      	adds	r0, #1
 800e68c:	d0e6      	beq.n	800e65c <_printf_common+0xa4>
 800e68e:	3601      	adds	r6, #1
 800e690:	e7d9      	b.n	800e646 <_printf_common+0x8e>
	...

0800e694 <_printf_i>:
 800e694:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e698:	7e0f      	ldrb	r7, [r1, #24]
 800e69a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e69c:	2f78      	cmp	r7, #120	@ 0x78
 800e69e:	4691      	mov	r9, r2
 800e6a0:	4680      	mov	r8, r0
 800e6a2:	460c      	mov	r4, r1
 800e6a4:	469a      	mov	sl, r3
 800e6a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e6aa:	d807      	bhi.n	800e6bc <_printf_i+0x28>
 800e6ac:	2f62      	cmp	r7, #98	@ 0x62
 800e6ae:	d80a      	bhi.n	800e6c6 <_printf_i+0x32>
 800e6b0:	2f00      	cmp	r7, #0
 800e6b2:	f000 80d1 	beq.w	800e858 <_printf_i+0x1c4>
 800e6b6:	2f58      	cmp	r7, #88	@ 0x58
 800e6b8:	f000 80b8 	beq.w	800e82c <_printf_i+0x198>
 800e6bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e6c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e6c4:	e03a      	b.n	800e73c <_printf_i+0xa8>
 800e6c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e6ca:	2b15      	cmp	r3, #21
 800e6cc:	d8f6      	bhi.n	800e6bc <_printf_i+0x28>
 800e6ce:	a101      	add	r1, pc, #4	@ (adr r1, 800e6d4 <_printf_i+0x40>)
 800e6d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e6d4:	0800e72d 	.word	0x0800e72d
 800e6d8:	0800e741 	.word	0x0800e741
 800e6dc:	0800e6bd 	.word	0x0800e6bd
 800e6e0:	0800e6bd 	.word	0x0800e6bd
 800e6e4:	0800e6bd 	.word	0x0800e6bd
 800e6e8:	0800e6bd 	.word	0x0800e6bd
 800e6ec:	0800e741 	.word	0x0800e741
 800e6f0:	0800e6bd 	.word	0x0800e6bd
 800e6f4:	0800e6bd 	.word	0x0800e6bd
 800e6f8:	0800e6bd 	.word	0x0800e6bd
 800e6fc:	0800e6bd 	.word	0x0800e6bd
 800e700:	0800e83f 	.word	0x0800e83f
 800e704:	0800e76b 	.word	0x0800e76b
 800e708:	0800e7f9 	.word	0x0800e7f9
 800e70c:	0800e6bd 	.word	0x0800e6bd
 800e710:	0800e6bd 	.word	0x0800e6bd
 800e714:	0800e861 	.word	0x0800e861
 800e718:	0800e6bd 	.word	0x0800e6bd
 800e71c:	0800e76b 	.word	0x0800e76b
 800e720:	0800e6bd 	.word	0x0800e6bd
 800e724:	0800e6bd 	.word	0x0800e6bd
 800e728:	0800e801 	.word	0x0800e801
 800e72c:	6833      	ldr	r3, [r6, #0]
 800e72e:	1d1a      	adds	r2, r3, #4
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	6032      	str	r2, [r6, #0]
 800e734:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e738:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e73c:	2301      	movs	r3, #1
 800e73e:	e09c      	b.n	800e87a <_printf_i+0x1e6>
 800e740:	6833      	ldr	r3, [r6, #0]
 800e742:	6820      	ldr	r0, [r4, #0]
 800e744:	1d19      	adds	r1, r3, #4
 800e746:	6031      	str	r1, [r6, #0]
 800e748:	0606      	lsls	r6, r0, #24
 800e74a:	d501      	bpl.n	800e750 <_printf_i+0xbc>
 800e74c:	681d      	ldr	r5, [r3, #0]
 800e74e:	e003      	b.n	800e758 <_printf_i+0xc4>
 800e750:	0645      	lsls	r5, r0, #25
 800e752:	d5fb      	bpl.n	800e74c <_printf_i+0xb8>
 800e754:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e758:	2d00      	cmp	r5, #0
 800e75a:	da03      	bge.n	800e764 <_printf_i+0xd0>
 800e75c:	232d      	movs	r3, #45	@ 0x2d
 800e75e:	426d      	negs	r5, r5
 800e760:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e764:	4858      	ldr	r0, [pc, #352]	@ (800e8c8 <_printf_i+0x234>)
 800e766:	230a      	movs	r3, #10
 800e768:	e011      	b.n	800e78e <_printf_i+0xfa>
 800e76a:	6821      	ldr	r1, [r4, #0]
 800e76c:	6833      	ldr	r3, [r6, #0]
 800e76e:	0608      	lsls	r0, r1, #24
 800e770:	f853 5b04 	ldr.w	r5, [r3], #4
 800e774:	d402      	bmi.n	800e77c <_printf_i+0xe8>
 800e776:	0649      	lsls	r1, r1, #25
 800e778:	bf48      	it	mi
 800e77a:	b2ad      	uxthmi	r5, r5
 800e77c:	2f6f      	cmp	r7, #111	@ 0x6f
 800e77e:	4852      	ldr	r0, [pc, #328]	@ (800e8c8 <_printf_i+0x234>)
 800e780:	6033      	str	r3, [r6, #0]
 800e782:	bf14      	ite	ne
 800e784:	230a      	movne	r3, #10
 800e786:	2308      	moveq	r3, #8
 800e788:	2100      	movs	r1, #0
 800e78a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e78e:	6866      	ldr	r6, [r4, #4]
 800e790:	60a6      	str	r6, [r4, #8]
 800e792:	2e00      	cmp	r6, #0
 800e794:	db05      	blt.n	800e7a2 <_printf_i+0x10e>
 800e796:	6821      	ldr	r1, [r4, #0]
 800e798:	432e      	orrs	r6, r5
 800e79a:	f021 0104 	bic.w	r1, r1, #4
 800e79e:	6021      	str	r1, [r4, #0]
 800e7a0:	d04b      	beq.n	800e83a <_printf_i+0x1a6>
 800e7a2:	4616      	mov	r6, r2
 800e7a4:	fbb5 f1f3 	udiv	r1, r5, r3
 800e7a8:	fb03 5711 	mls	r7, r3, r1, r5
 800e7ac:	5dc7      	ldrb	r7, [r0, r7]
 800e7ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e7b2:	462f      	mov	r7, r5
 800e7b4:	42bb      	cmp	r3, r7
 800e7b6:	460d      	mov	r5, r1
 800e7b8:	d9f4      	bls.n	800e7a4 <_printf_i+0x110>
 800e7ba:	2b08      	cmp	r3, #8
 800e7bc:	d10b      	bne.n	800e7d6 <_printf_i+0x142>
 800e7be:	6823      	ldr	r3, [r4, #0]
 800e7c0:	07df      	lsls	r7, r3, #31
 800e7c2:	d508      	bpl.n	800e7d6 <_printf_i+0x142>
 800e7c4:	6923      	ldr	r3, [r4, #16]
 800e7c6:	6861      	ldr	r1, [r4, #4]
 800e7c8:	4299      	cmp	r1, r3
 800e7ca:	bfde      	ittt	le
 800e7cc:	2330      	movle	r3, #48	@ 0x30
 800e7ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e7d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e7d6:	1b92      	subs	r2, r2, r6
 800e7d8:	6122      	str	r2, [r4, #16]
 800e7da:	f8cd a000 	str.w	sl, [sp]
 800e7de:	464b      	mov	r3, r9
 800e7e0:	aa03      	add	r2, sp, #12
 800e7e2:	4621      	mov	r1, r4
 800e7e4:	4640      	mov	r0, r8
 800e7e6:	f7ff fee7 	bl	800e5b8 <_printf_common>
 800e7ea:	3001      	adds	r0, #1
 800e7ec:	d14a      	bne.n	800e884 <_printf_i+0x1f0>
 800e7ee:	f04f 30ff 	mov.w	r0, #4294967295
 800e7f2:	b004      	add	sp, #16
 800e7f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7f8:	6823      	ldr	r3, [r4, #0]
 800e7fa:	f043 0320 	orr.w	r3, r3, #32
 800e7fe:	6023      	str	r3, [r4, #0]
 800e800:	4832      	ldr	r0, [pc, #200]	@ (800e8cc <_printf_i+0x238>)
 800e802:	2778      	movs	r7, #120	@ 0x78
 800e804:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e808:	6823      	ldr	r3, [r4, #0]
 800e80a:	6831      	ldr	r1, [r6, #0]
 800e80c:	061f      	lsls	r7, r3, #24
 800e80e:	f851 5b04 	ldr.w	r5, [r1], #4
 800e812:	d402      	bmi.n	800e81a <_printf_i+0x186>
 800e814:	065f      	lsls	r7, r3, #25
 800e816:	bf48      	it	mi
 800e818:	b2ad      	uxthmi	r5, r5
 800e81a:	6031      	str	r1, [r6, #0]
 800e81c:	07d9      	lsls	r1, r3, #31
 800e81e:	bf44      	itt	mi
 800e820:	f043 0320 	orrmi.w	r3, r3, #32
 800e824:	6023      	strmi	r3, [r4, #0]
 800e826:	b11d      	cbz	r5, 800e830 <_printf_i+0x19c>
 800e828:	2310      	movs	r3, #16
 800e82a:	e7ad      	b.n	800e788 <_printf_i+0xf4>
 800e82c:	4826      	ldr	r0, [pc, #152]	@ (800e8c8 <_printf_i+0x234>)
 800e82e:	e7e9      	b.n	800e804 <_printf_i+0x170>
 800e830:	6823      	ldr	r3, [r4, #0]
 800e832:	f023 0320 	bic.w	r3, r3, #32
 800e836:	6023      	str	r3, [r4, #0]
 800e838:	e7f6      	b.n	800e828 <_printf_i+0x194>
 800e83a:	4616      	mov	r6, r2
 800e83c:	e7bd      	b.n	800e7ba <_printf_i+0x126>
 800e83e:	6833      	ldr	r3, [r6, #0]
 800e840:	6825      	ldr	r5, [r4, #0]
 800e842:	6961      	ldr	r1, [r4, #20]
 800e844:	1d18      	adds	r0, r3, #4
 800e846:	6030      	str	r0, [r6, #0]
 800e848:	062e      	lsls	r6, r5, #24
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	d501      	bpl.n	800e852 <_printf_i+0x1be>
 800e84e:	6019      	str	r1, [r3, #0]
 800e850:	e002      	b.n	800e858 <_printf_i+0x1c4>
 800e852:	0668      	lsls	r0, r5, #25
 800e854:	d5fb      	bpl.n	800e84e <_printf_i+0x1ba>
 800e856:	8019      	strh	r1, [r3, #0]
 800e858:	2300      	movs	r3, #0
 800e85a:	6123      	str	r3, [r4, #16]
 800e85c:	4616      	mov	r6, r2
 800e85e:	e7bc      	b.n	800e7da <_printf_i+0x146>
 800e860:	6833      	ldr	r3, [r6, #0]
 800e862:	1d1a      	adds	r2, r3, #4
 800e864:	6032      	str	r2, [r6, #0]
 800e866:	681e      	ldr	r6, [r3, #0]
 800e868:	6862      	ldr	r2, [r4, #4]
 800e86a:	2100      	movs	r1, #0
 800e86c:	4630      	mov	r0, r6
 800e86e:	f7f1 fcb7 	bl	80001e0 <memchr>
 800e872:	b108      	cbz	r0, 800e878 <_printf_i+0x1e4>
 800e874:	1b80      	subs	r0, r0, r6
 800e876:	6060      	str	r0, [r4, #4]
 800e878:	6863      	ldr	r3, [r4, #4]
 800e87a:	6123      	str	r3, [r4, #16]
 800e87c:	2300      	movs	r3, #0
 800e87e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e882:	e7aa      	b.n	800e7da <_printf_i+0x146>
 800e884:	6923      	ldr	r3, [r4, #16]
 800e886:	4632      	mov	r2, r6
 800e888:	4649      	mov	r1, r9
 800e88a:	4640      	mov	r0, r8
 800e88c:	47d0      	blx	sl
 800e88e:	3001      	adds	r0, #1
 800e890:	d0ad      	beq.n	800e7ee <_printf_i+0x15a>
 800e892:	6823      	ldr	r3, [r4, #0]
 800e894:	079b      	lsls	r3, r3, #30
 800e896:	d413      	bmi.n	800e8c0 <_printf_i+0x22c>
 800e898:	68e0      	ldr	r0, [r4, #12]
 800e89a:	9b03      	ldr	r3, [sp, #12]
 800e89c:	4298      	cmp	r0, r3
 800e89e:	bfb8      	it	lt
 800e8a0:	4618      	movlt	r0, r3
 800e8a2:	e7a6      	b.n	800e7f2 <_printf_i+0x15e>
 800e8a4:	2301      	movs	r3, #1
 800e8a6:	4632      	mov	r2, r6
 800e8a8:	4649      	mov	r1, r9
 800e8aa:	4640      	mov	r0, r8
 800e8ac:	47d0      	blx	sl
 800e8ae:	3001      	adds	r0, #1
 800e8b0:	d09d      	beq.n	800e7ee <_printf_i+0x15a>
 800e8b2:	3501      	adds	r5, #1
 800e8b4:	68e3      	ldr	r3, [r4, #12]
 800e8b6:	9903      	ldr	r1, [sp, #12]
 800e8b8:	1a5b      	subs	r3, r3, r1
 800e8ba:	42ab      	cmp	r3, r5
 800e8bc:	dcf2      	bgt.n	800e8a4 <_printf_i+0x210>
 800e8be:	e7eb      	b.n	800e898 <_printf_i+0x204>
 800e8c0:	2500      	movs	r5, #0
 800e8c2:	f104 0619 	add.w	r6, r4, #25
 800e8c6:	e7f5      	b.n	800e8b4 <_printf_i+0x220>
 800e8c8:	08011ed8 	.word	0x08011ed8
 800e8cc:	08011ee9 	.word	0x08011ee9

0800e8d0 <_scanf_float>:
 800e8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8d4:	b087      	sub	sp, #28
 800e8d6:	4691      	mov	r9, r2
 800e8d8:	9303      	str	r3, [sp, #12]
 800e8da:	688b      	ldr	r3, [r1, #8]
 800e8dc:	1e5a      	subs	r2, r3, #1
 800e8de:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e8e2:	bf81      	itttt	hi
 800e8e4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e8e8:	eb03 0b05 	addhi.w	fp, r3, r5
 800e8ec:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e8f0:	608b      	strhi	r3, [r1, #8]
 800e8f2:	680b      	ldr	r3, [r1, #0]
 800e8f4:	460a      	mov	r2, r1
 800e8f6:	f04f 0500 	mov.w	r5, #0
 800e8fa:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800e8fe:	f842 3b1c 	str.w	r3, [r2], #28
 800e902:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e906:	4680      	mov	r8, r0
 800e908:	460c      	mov	r4, r1
 800e90a:	bf98      	it	ls
 800e90c:	f04f 0b00 	movls.w	fp, #0
 800e910:	9201      	str	r2, [sp, #4]
 800e912:	4616      	mov	r6, r2
 800e914:	46aa      	mov	sl, r5
 800e916:	462f      	mov	r7, r5
 800e918:	9502      	str	r5, [sp, #8]
 800e91a:	68a2      	ldr	r2, [r4, #8]
 800e91c:	b15a      	cbz	r2, 800e936 <_scanf_float+0x66>
 800e91e:	f8d9 3000 	ldr.w	r3, [r9]
 800e922:	781b      	ldrb	r3, [r3, #0]
 800e924:	2b4e      	cmp	r3, #78	@ 0x4e
 800e926:	d863      	bhi.n	800e9f0 <_scanf_float+0x120>
 800e928:	2b40      	cmp	r3, #64	@ 0x40
 800e92a:	d83b      	bhi.n	800e9a4 <_scanf_float+0xd4>
 800e92c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800e930:	b2c8      	uxtb	r0, r1
 800e932:	280e      	cmp	r0, #14
 800e934:	d939      	bls.n	800e9aa <_scanf_float+0xda>
 800e936:	b11f      	cbz	r7, 800e940 <_scanf_float+0x70>
 800e938:	6823      	ldr	r3, [r4, #0]
 800e93a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e93e:	6023      	str	r3, [r4, #0]
 800e940:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e944:	f1ba 0f01 	cmp.w	sl, #1
 800e948:	f200 8114 	bhi.w	800eb74 <_scanf_float+0x2a4>
 800e94c:	9b01      	ldr	r3, [sp, #4]
 800e94e:	429e      	cmp	r6, r3
 800e950:	f200 8105 	bhi.w	800eb5e <_scanf_float+0x28e>
 800e954:	2001      	movs	r0, #1
 800e956:	b007      	add	sp, #28
 800e958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e95c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800e960:	2a0d      	cmp	r2, #13
 800e962:	d8e8      	bhi.n	800e936 <_scanf_float+0x66>
 800e964:	a101      	add	r1, pc, #4	@ (adr r1, 800e96c <_scanf_float+0x9c>)
 800e966:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e96a:	bf00      	nop
 800e96c:	0800eab5 	.word	0x0800eab5
 800e970:	0800e937 	.word	0x0800e937
 800e974:	0800e937 	.word	0x0800e937
 800e978:	0800e937 	.word	0x0800e937
 800e97c:	0800eb11 	.word	0x0800eb11
 800e980:	0800eaeb 	.word	0x0800eaeb
 800e984:	0800e937 	.word	0x0800e937
 800e988:	0800e937 	.word	0x0800e937
 800e98c:	0800eac3 	.word	0x0800eac3
 800e990:	0800e937 	.word	0x0800e937
 800e994:	0800e937 	.word	0x0800e937
 800e998:	0800e937 	.word	0x0800e937
 800e99c:	0800e937 	.word	0x0800e937
 800e9a0:	0800ea7f 	.word	0x0800ea7f
 800e9a4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800e9a8:	e7da      	b.n	800e960 <_scanf_float+0x90>
 800e9aa:	290e      	cmp	r1, #14
 800e9ac:	d8c3      	bhi.n	800e936 <_scanf_float+0x66>
 800e9ae:	a001      	add	r0, pc, #4	@ (adr r0, 800e9b4 <_scanf_float+0xe4>)
 800e9b0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e9b4:	0800ea6f 	.word	0x0800ea6f
 800e9b8:	0800e937 	.word	0x0800e937
 800e9bc:	0800ea6f 	.word	0x0800ea6f
 800e9c0:	0800eaff 	.word	0x0800eaff
 800e9c4:	0800e937 	.word	0x0800e937
 800e9c8:	0800ea11 	.word	0x0800ea11
 800e9cc:	0800ea55 	.word	0x0800ea55
 800e9d0:	0800ea55 	.word	0x0800ea55
 800e9d4:	0800ea55 	.word	0x0800ea55
 800e9d8:	0800ea55 	.word	0x0800ea55
 800e9dc:	0800ea55 	.word	0x0800ea55
 800e9e0:	0800ea55 	.word	0x0800ea55
 800e9e4:	0800ea55 	.word	0x0800ea55
 800e9e8:	0800ea55 	.word	0x0800ea55
 800e9ec:	0800ea55 	.word	0x0800ea55
 800e9f0:	2b6e      	cmp	r3, #110	@ 0x6e
 800e9f2:	d809      	bhi.n	800ea08 <_scanf_float+0x138>
 800e9f4:	2b60      	cmp	r3, #96	@ 0x60
 800e9f6:	d8b1      	bhi.n	800e95c <_scanf_float+0x8c>
 800e9f8:	2b54      	cmp	r3, #84	@ 0x54
 800e9fa:	d07b      	beq.n	800eaf4 <_scanf_float+0x224>
 800e9fc:	2b59      	cmp	r3, #89	@ 0x59
 800e9fe:	d19a      	bne.n	800e936 <_scanf_float+0x66>
 800ea00:	2d07      	cmp	r5, #7
 800ea02:	d198      	bne.n	800e936 <_scanf_float+0x66>
 800ea04:	2508      	movs	r5, #8
 800ea06:	e02f      	b.n	800ea68 <_scanf_float+0x198>
 800ea08:	2b74      	cmp	r3, #116	@ 0x74
 800ea0a:	d073      	beq.n	800eaf4 <_scanf_float+0x224>
 800ea0c:	2b79      	cmp	r3, #121	@ 0x79
 800ea0e:	e7f6      	b.n	800e9fe <_scanf_float+0x12e>
 800ea10:	6821      	ldr	r1, [r4, #0]
 800ea12:	05c8      	lsls	r0, r1, #23
 800ea14:	d51e      	bpl.n	800ea54 <_scanf_float+0x184>
 800ea16:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ea1a:	6021      	str	r1, [r4, #0]
 800ea1c:	3701      	adds	r7, #1
 800ea1e:	f1bb 0f00 	cmp.w	fp, #0
 800ea22:	d003      	beq.n	800ea2c <_scanf_float+0x15c>
 800ea24:	3201      	adds	r2, #1
 800ea26:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ea2a:	60a2      	str	r2, [r4, #8]
 800ea2c:	68a3      	ldr	r3, [r4, #8]
 800ea2e:	3b01      	subs	r3, #1
 800ea30:	60a3      	str	r3, [r4, #8]
 800ea32:	6923      	ldr	r3, [r4, #16]
 800ea34:	3301      	adds	r3, #1
 800ea36:	6123      	str	r3, [r4, #16]
 800ea38:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ea3c:	3b01      	subs	r3, #1
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	f8c9 3004 	str.w	r3, [r9, #4]
 800ea44:	f340 8082 	ble.w	800eb4c <_scanf_float+0x27c>
 800ea48:	f8d9 3000 	ldr.w	r3, [r9]
 800ea4c:	3301      	adds	r3, #1
 800ea4e:	f8c9 3000 	str.w	r3, [r9]
 800ea52:	e762      	b.n	800e91a <_scanf_float+0x4a>
 800ea54:	eb1a 0105 	adds.w	r1, sl, r5
 800ea58:	f47f af6d 	bne.w	800e936 <_scanf_float+0x66>
 800ea5c:	6822      	ldr	r2, [r4, #0]
 800ea5e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800ea62:	6022      	str	r2, [r4, #0]
 800ea64:	460d      	mov	r5, r1
 800ea66:	468a      	mov	sl, r1
 800ea68:	f806 3b01 	strb.w	r3, [r6], #1
 800ea6c:	e7de      	b.n	800ea2c <_scanf_float+0x15c>
 800ea6e:	6822      	ldr	r2, [r4, #0]
 800ea70:	0610      	lsls	r0, r2, #24
 800ea72:	f57f af60 	bpl.w	800e936 <_scanf_float+0x66>
 800ea76:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ea7a:	6022      	str	r2, [r4, #0]
 800ea7c:	e7f4      	b.n	800ea68 <_scanf_float+0x198>
 800ea7e:	f1ba 0f00 	cmp.w	sl, #0
 800ea82:	d10c      	bne.n	800ea9e <_scanf_float+0x1ce>
 800ea84:	b977      	cbnz	r7, 800eaa4 <_scanf_float+0x1d4>
 800ea86:	6822      	ldr	r2, [r4, #0]
 800ea88:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ea8c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ea90:	d108      	bne.n	800eaa4 <_scanf_float+0x1d4>
 800ea92:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ea96:	6022      	str	r2, [r4, #0]
 800ea98:	f04f 0a01 	mov.w	sl, #1
 800ea9c:	e7e4      	b.n	800ea68 <_scanf_float+0x198>
 800ea9e:	f1ba 0f02 	cmp.w	sl, #2
 800eaa2:	d050      	beq.n	800eb46 <_scanf_float+0x276>
 800eaa4:	2d01      	cmp	r5, #1
 800eaa6:	d002      	beq.n	800eaae <_scanf_float+0x1de>
 800eaa8:	2d04      	cmp	r5, #4
 800eaaa:	f47f af44 	bne.w	800e936 <_scanf_float+0x66>
 800eaae:	3501      	adds	r5, #1
 800eab0:	b2ed      	uxtb	r5, r5
 800eab2:	e7d9      	b.n	800ea68 <_scanf_float+0x198>
 800eab4:	f1ba 0f01 	cmp.w	sl, #1
 800eab8:	f47f af3d 	bne.w	800e936 <_scanf_float+0x66>
 800eabc:	f04f 0a02 	mov.w	sl, #2
 800eac0:	e7d2      	b.n	800ea68 <_scanf_float+0x198>
 800eac2:	b975      	cbnz	r5, 800eae2 <_scanf_float+0x212>
 800eac4:	2f00      	cmp	r7, #0
 800eac6:	f47f af37 	bne.w	800e938 <_scanf_float+0x68>
 800eaca:	6822      	ldr	r2, [r4, #0]
 800eacc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ead0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ead4:	f040 8103 	bne.w	800ecde <_scanf_float+0x40e>
 800ead8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800eadc:	6022      	str	r2, [r4, #0]
 800eade:	2501      	movs	r5, #1
 800eae0:	e7c2      	b.n	800ea68 <_scanf_float+0x198>
 800eae2:	2d03      	cmp	r5, #3
 800eae4:	d0e3      	beq.n	800eaae <_scanf_float+0x1de>
 800eae6:	2d05      	cmp	r5, #5
 800eae8:	e7df      	b.n	800eaaa <_scanf_float+0x1da>
 800eaea:	2d02      	cmp	r5, #2
 800eaec:	f47f af23 	bne.w	800e936 <_scanf_float+0x66>
 800eaf0:	2503      	movs	r5, #3
 800eaf2:	e7b9      	b.n	800ea68 <_scanf_float+0x198>
 800eaf4:	2d06      	cmp	r5, #6
 800eaf6:	f47f af1e 	bne.w	800e936 <_scanf_float+0x66>
 800eafa:	2507      	movs	r5, #7
 800eafc:	e7b4      	b.n	800ea68 <_scanf_float+0x198>
 800eafe:	6822      	ldr	r2, [r4, #0]
 800eb00:	0591      	lsls	r1, r2, #22
 800eb02:	f57f af18 	bpl.w	800e936 <_scanf_float+0x66>
 800eb06:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800eb0a:	6022      	str	r2, [r4, #0]
 800eb0c:	9702      	str	r7, [sp, #8]
 800eb0e:	e7ab      	b.n	800ea68 <_scanf_float+0x198>
 800eb10:	6822      	ldr	r2, [r4, #0]
 800eb12:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800eb16:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800eb1a:	d005      	beq.n	800eb28 <_scanf_float+0x258>
 800eb1c:	0550      	lsls	r0, r2, #21
 800eb1e:	f57f af0a 	bpl.w	800e936 <_scanf_float+0x66>
 800eb22:	2f00      	cmp	r7, #0
 800eb24:	f000 80db 	beq.w	800ecde <_scanf_float+0x40e>
 800eb28:	0591      	lsls	r1, r2, #22
 800eb2a:	bf58      	it	pl
 800eb2c:	9902      	ldrpl	r1, [sp, #8]
 800eb2e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800eb32:	bf58      	it	pl
 800eb34:	1a79      	subpl	r1, r7, r1
 800eb36:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800eb3a:	bf58      	it	pl
 800eb3c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800eb40:	6022      	str	r2, [r4, #0]
 800eb42:	2700      	movs	r7, #0
 800eb44:	e790      	b.n	800ea68 <_scanf_float+0x198>
 800eb46:	f04f 0a03 	mov.w	sl, #3
 800eb4a:	e78d      	b.n	800ea68 <_scanf_float+0x198>
 800eb4c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800eb50:	4649      	mov	r1, r9
 800eb52:	4640      	mov	r0, r8
 800eb54:	4798      	blx	r3
 800eb56:	2800      	cmp	r0, #0
 800eb58:	f43f aedf 	beq.w	800e91a <_scanf_float+0x4a>
 800eb5c:	e6eb      	b.n	800e936 <_scanf_float+0x66>
 800eb5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800eb62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800eb66:	464a      	mov	r2, r9
 800eb68:	4640      	mov	r0, r8
 800eb6a:	4798      	blx	r3
 800eb6c:	6923      	ldr	r3, [r4, #16]
 800eb6e:	3b01      	subs	r3, #1
 800eb70:	6123      	str	r3, [r4, #16]
 800eb72:	e6eb      	b.n	800e94c <_scanf_float+0x7c>
 800eb74:	1e6b      	subs	r3, r5, #1
 800eb76:	2b06      	cmp	r3, #6
 800eb78:	d824      	bhi.n	800ebc4 <_scanf_float+0x2f4>
 800eb7a:	2d02      	cmp	r5, #2
 800eb7c:	d836      	bhi.n	800ebec <_scanf_float+0x31c>
 800eb7e:	9b01      	ldr	r3, [sp, #4]
 800eb80:	429e      	cmp	r6, r3
 800eb82:	f67f aee7 	bls.w	800e954 <_scanf_float+0x84>
 800eb86:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800eb8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800eb8e:	464a      	mov	r2, r9
 800eb90:	4640      	mov	r0, r8
 800eb92:	4798      	blx	r3
 800eb94:	6923      	ldr	r3, [r4, #16]
 800eb96:	3b01      	subs	r3, #1
 800eb98:	6123      	str	r3, [r4, #16]
 800eb9a:	e7f0      	b.n	800eb7e <_scanf_float+0x2ae>
 800eb9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800eba0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800eba4:	464a      	mov	r2, r9
 800eba6:	4640      	mov	r0, r8
 800eba8:	4798      	blx	r3
 800ebaa:	6923      	ldr	r3, [r4, #16]
 800ebac:	3b01      	subs	r3, #1
 800ebae:	6123      	str	r3, [r4, #16]
 800ebb0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ebb4:	fa5f fa8a 	uxtb.w	sl, sl
 800ebb8:	f1ba 0f02 	cmp.w	sl, #2
 800ebbc:	d1ee      	bne.n	800eb9c <_scanf_float+0x2cc>
 800ebbe:	3d03      	subs	r5, #3
 800ebc0:	b2ed      	uxtb	r5, r5
 800ebc2:	1b76      	subs	r6, r6, r5
 800ebc4:	6823      	ldr	r3, [r4, #0]
 800ebc6:	05da      	lsls	r2, r3, #23
 800ebc8:	d530      	bpl.n	800ec2c <_scanf_float+0x35c>
 800ebca:	055b      	lsls	r3, r3, #21
 800ebcc:	d511      	bpl.n	800ebf2 <_scanf_float+0x322>
 800ebce:	9b01      	ldr	r3, [sp, #4]
 800ebd0:	429e      	cmp	r6, r3
 800ebd2:	f67f aebf 	bls.w	800e954 <_scanf_float+0x84>
 800ebd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ebda:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ebde:	464a      	mov	r2, r9
 800ebe0:	4640      	mov	r0, r8
 800ebe2:	4798      	blx	r3
 800ebe4:	6923      	ldr	r3, [r4, #16]
 800ebe6:	3b01      	subs	r3, #1
 800ebe8:	6123      	str	r3, [r4, #16]
 800ebea:	e7f0      	b.n	800ebce <_scanf_float+0x2fe>
 800ebec:	46aa      	mov	sl, r5
 800ebee:	46b3      	mov	fp, r6
 800ebf0:	e7de      	b.n	800ebb0 <_scanf_float+0x2e0>
 800ebf2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ebf6:	6923      	ldr	r3, [r4, #16]
 800ebf8:	2965      	cmp	r1, #101	@ 0x65
 800ebfa:	f103 33ff 	add.w	r3, r3, #4294967295
 800ebfe:	f106 35ff 	add.w	r5, r6, #4294967295
 800ec02:	6123      	str	r3, [r4, #16]
 800ec04:	d00c      	beq.n	800ec20 <_scanf_float+0x350>
 800ec06:	2945      	cmp	r1, #69	@ 0x45
 800ec08:	d00a      	beq.n	800ec20 <_scanf_float+0x350>
 800ec0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ec0e:	464a      	mov	r2, r9
 800ec10:	4640      	mov	r0, r8
 800ec12:	4798      	blx	r3
 800ec14:	6923      	ldr	r3, [r4, #16]
 800ec16:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ec1a:	3b01      	subs	r3, #1
 800ec1c:	1eb5      	subs	r5, r6, #2
 800ec1e:	6123      	str	r3, [r4, #16]
 800ec20:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ec24:	464a      	mov	r2, r9
 800ec26:	4640      	mov	r0, r8
 800ec28:	4798      	blx	r3
 800ec2a:	462e      	mov	r6, r5
 800ec2c:	6822      	ldr	r2, [r4, #0]
 800ec2e:	f012 0210 	ands.w	r2, r2, #16
 800ec32:	d001      	beq.n	800ec38 <_scanf_float+0x368>
 800ec34:	2000      	movs	r0, #0
 800ec36:	e68e      	b.n	800e956 <_scanf_float+0x86>
 800ec38:	7032      	strb	r2, [r6, #0]
 800ec3a:	6823      	ldr	r3, [r4, #0]
 800ec3c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ec40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ec44:	d125      	bne.n	800ec92 <_scanf_float+0x3c2>
 800ec46:	9b02      	ldr	r3, [sp, #8]
 800ec48:	429f      	cmp	r7, r3
 800ec4a:	d00a      	beq.n	800ec62 <_scanf_float+0x392>
 800ec4c:	1bda      	subs	r2, r3, r7
 800ec4e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ec52:	429e      	cmp	r6, r3
 800ec54:	bf28      	it	cs
 800ec56:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800ec5a:	4922      	ldr	r1, [pc, #136]	@ (800ece4 <_scanf_float+0x414>)
 800ec5c:	4630      	mov	r0, r6
 800ec5e:	f000 f93d 	bl	800eedc <siprintf>
 800ec62:	9901      	ldr	r1, [sp, #4]
 800ec64:	2200      	movs	r2, #0
 800ec66:	4640      	mov	r0, r8
 800ec68:	f7ff f9ca 	bl	800e000 <_strtod_r>
 800ec6c:	9b03      	ldr	r3, [sp, #12]
 800ec6e:	6821      	ldr	r1, [r4, #0]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	f011 0f02 	tst.w	r1, #2
 800ec76:	ec57 6b10 	vmov	r6, r7, d0
 800ec7a:	f103 0204 	add.w	r2, r3, #4
 800ec7e:	d015      	beq.n	800ecac <_scanf_float+0x3dc>
 800ec80:	9903      	ldr	r1, [sp, #12]
 800ec82:	600a      	str	r2, [r1, #0]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	e9c3 6700 	strd	r6, r7, [r3]
 800ec8a:	68e3      	ldr	r3, [r4, #12]
 800ec8c:	3301      	adds	r3, #1
 800ec8e:	60e3      	str	r3, [r4, #12]
 800ec90:	e7d0      	b.n	800ec34 <_scanf_float+0x364>
 800ec92:	9b04      	ldr	r3, [sp, #16]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d0e4      	beq.n	800ec62 <_scanf_float+0x392>
 800ec98:	9905      	ldr	r1, [sp, #20]
 800ec9a:	230a      	movs	r3, #10
 800ec9c:	3101      	adds	r1, #1
 800ec9e:	4640      	mov	r0, r8
 800eca0:	f002 fa5a 	bl	8011158 <_strtol_r>
 800eca4:	9b04      	ldr	r3, [sp, #16]
 800eca6:	9e05      	ldr	r6, [sp, #20]
 800eca8:	1ac2      	subs	r2, r0, r3
 800ecaa:	e7d0      	b.n	800ec4e <_scanf_float+0x37e>
 800ecac:	f011 0f04 	tst.w	r1, #4
 800ecb0:	9903      	ldr	r1, [sp, #12]
 800ecb2:	600a      	str	r2, [r1, #0]
 800ecb4:	d1e6      	bne.n	800ec84 <_scanf_float+0x3b4>
 800ecb6:	681d      	ldr	r5, [r3, #0]
 800ecb8:	4632      	mov	r2, r6
 800ecba:	463b      	mov	r3, r7
 800ecbc:	4630      	mov	r0, r6
 800ecbe:	4639      	mov	r1, r7
 800ecc0:	f7f1 ff3c 	bl	8000b3c <__aeabi_dcmpun>
 800ecc4:	b128      	cbz	r0, 800ecd2 <_scanf_float+0x402>
 800ecc6:	4808      	ldr	r0, [pc, #32]	@ (800ece8 <_scanf_float+0x418>)
 800ecc8:	f000 fa76 	bl	800f1b8 <nanf>
 800eccc:	ed85 0a00 	vstr	s0, [r5]
 800ecd0:	e7db      	b.n	800ec8a <_scanf_float+0x3ba>
 800ecd2:	4630      	mov	r0, r6
 800ecd4:	4639      	mov	r1, r7
 800ecd6:	f7f1 ff8f 	bl	8000bf8 <__aeabi_d2f>
 800ecda:	6028      	str	r0, [r5, #0]
 800ecdc:	e7d5      	b.n	800ec8a <_scanf_float+0x3ba>
 800ecde:	2700      	movs	r7, #0
 800ece0:	e62e      	b.n	800e940 <_scanf_float+0x70>
 800ece2:	bf00      	nop
 800ece4:	08011efa 	.word	0x08011efa
 800ece8:	08012099 	.word	0x08012099

0800ecec <std>:
 800ecec:	2300      	movs	r3, #0
 800ecee:	b510      	push	{r4, lr}
 800ecf0:	4604      	mov	r4, r0
 800ecf2:	e9c0 3300 	strd	r3, r3, [r0]
 800ecf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ecfa:	6083      	str	r3, [r0, #8]
 800ecfc:	8181      	strh	r1, [r0, #12]
 800ecfe:	6643      	str	r3, [r0, #100]	@ 0x64
 800ed00:	81c2      	strh	r2, [r0, #14]
 800ed02:	6183      	str	r3, [r0, #24]
 800ed04:	4619      	mov	r1, r3
 800ed06:	2208      	movs	r2, #8
 800ed08:	305c      	adds	r0, #92	@ 0x5c
 800ed0a:	f000 f94c 	bl	800efa6 <memset>
 800ed0e:	4b0d      	ldr	r3, [pc, #52]	@ (800ed44 <std+0x58>)
 800ed10:	6263      	str	r3, [r4, #36]	@ 0x24
 800ed12:	4b0d      	ldr	r3, [pc, #52]	@ (800ed48 <std+0x5c>)
 800ed14:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ed16:	4b0d      	ldr	r3, [pc, #52]	@ (800ed4c <std+0x60>)
 800ed18:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ed1a:	4b0d      	ldr	r3, [pc, #52]	@ (800ed50 <std+0x64>)
 800ed1c:	6323      	str	r3, [r4, #48]	@ 0x30
 800ed1e:	4b0d      	ldr	r3, [pc, #52]	@ (800ed54 <std+0x68>)
 800ed20:	6224      	str	r4, [r4, #32]
 800ed22:	429c      	cmp	r4, r3
 800ed24:	d006      	beq.n	800ed34 <std+0x48>
 800ed26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ed2a:	4294      	cmp	r4, r2
 800ed2c:	d002      	beq.n	800ed34 <std+0x48>
 800ed2e:	33d0      	adds	r3, #208	@ 0xd0
 800ed30:	429c      	cmp	r4, r3
 800ed32:	d105      	bne.n	800ed40 <std+0x54>
 800ed34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ed38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed3c:	f000 ba20 	b.w	800f180 <__retarget_lock_init_recursive>
 800ed40:	bd10      	pop	{r4, pc}
 800ed42:	bf00      	nop
 800ed44:	0800ef21 	.word	0x0800ef21
 800ed48:	0800ef43 	.word	0x0800ef43
 800ed4c:	0800ef7b 	.word	0x0800ef7b
 800ed50:	0800ef9f 	.word	0x0800ef9f
 800ed54:	200051b4 	.word	0x200051b4

0800ed58 <stdio_exit_handler>:
 800ed58:	4a02      	ldr	r2, [pc, #8]	@ (800ed64 <stdio_exit_handler+0xc>)
 800ed5a:	4903      	ldr	r1, [pc, #12]	@ (800ed68 <stdio_exit_handler+0x10>)
 800ed5c:	4803      	ldr	r0, [pc, #12]	@ (800ed6c <stdio_exit_handler+0x14>)
 800ed5e:	f000 b869 	b.w	800ee34 <_fwalk_sglue>
 800ed62:	bf00      	nop
 800ed64:	20000100 	.word	0x20000100
 800ed68:	0801152d 	.word	0x0801152d
 800ed6c:	2000027c 	.word	0x2000027c

0800ed70 <cleanup_stdio>:
 800ed70:	6841      	ldr	r1, [r0, #4]
 800ed72:	4b0c      	ldr	r3, [pc, #48]	@ (800eda4 <cleanup_stdio+0x34>)
 800ed74:	4299      	cmp	r1, r3
 800ed76:	b510      	push	{r4, lr}
 800ed78:	4604      	mov	r4, r0
 800ed7a:	d001      	beq.n	800ed80 <cleanup_stdio+0x10>
 800ed7c:	f002 fbd6 	bl	801152c <_fflush_r>
 800ed80:	68a1      	ldr	r1, [r4, #8]
 800ed82:	4b09      	ldr	r3, [pc, #36]	@ (800eda8 <cleanup_stdio+0x38>)
 800ed84:	4299      	cmp	r1, r3
 800ed86:	d002      	beq.n	800ed8e <cleanup_stdio+0x1e>
 800ed88:	4620      	mov	r0, r4
 800ed8a:	f002 fbcf 	bl	801152c <_fflush_r>
 800ed8e:	68e1      	ldr	r1, [r4, #12]
 800ed90:	4b06      	ldr	r3, [pc, #24]	@ (800edac <cleanup_stdio+0x3c>)
 800ed92:	4299      	cmp	r1, r3
 800ed94:	d004      	beq.n	800eda0 <cleanup_stdio+0x30>
 800ed96:	4620      	mov	r0, r4
 800ed98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed9c:	f002 bbc6 	b.w	801152c <_fflush_r>
 800eda0:	bd10      	pop	{r4, pc}
 800eda2:	bf00      	nop
 800eda4:	200051b4 	.word	0x200051b4
 800eda8:	2000521c 	.word	0x2000521c
 800edac:	20005284 	.word	0x20005284

0800edb0 <global_stdio_init.part.0>:
 800edb0:	b510      	push	{r4, lr}
 800edb2:	4b0b      	ldr	r3, [pc, #44]	@ (800ede0 <global_stdio_init.part.0+0x30>)
 800edb4:	4c0b      	ldr	r4, [pc, #44]	@ (800ede4 <global_stdio_init.part.0+0x34>)
 800edb6:	4a0c      	ldr	r2, [pc, #48]	@ (800ede8 <global_stdio_init.part.0+0x38>)
 800edb8:	601a      	str	r2, [r3, #0]
 800edba:	4620      	mov	r0, r4
 800edbc:	2200      	movs	r2, #0
 800edbe:	2104      	movs	r1, #4
 800edc0:	f7ff ff94 	bl	800ecec <std>
 800edc4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800edc8:	2201      	movs	r2, #1
 800edca:	2109      	movs	r1, #9
 800edcc:	f7ff ff8e 	bl	800ecec <std>
 800edd0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800edd4:	2202      	movs	r2, #2
 800edd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800edda:	2112      	movs	r1, #18
 800eddc:	f7ff bf86 	b.w	800ecec <std>
 800ede0:	200052ec 	.word	0x200052ec
 800ede4:	200051b4 	.word	0x200051b4
 800ede8:	0800ed59 	.word	0x0800ed59

0800edec <__sfp_lock_acquire>:
 800edec:	4801      	ldr	r0, [pc, #4]	@ (800edf4 <__sfp_lock_acquire+0x8>)
 800edee:	f000 b9c8 	b.w	800f182 <__retarget_lock_acquire_recursive>
 800edf2:	bf00      	nop
 800edf4:	200052f5 	.word	0x200052f5

0800edf8 <__sfp_lock_release>:
 800edf8:	4801      	ldr	r0, [pc, #4]	@ (800ee00 <__sfp_lock_release+0x8>)
 800edfa:	f000 b9c3 	b.w	800f184 <__retarget_lock_release_recursive>
 800edfe:	bf00      	nop
 800ee00:	200052f5 	.word	0x200052f5

0800ee04 <__sinit>:
 800ee04:	b510      	push	{r4, lr}
 800ee06:	4604      	mov	r4, r0
 800ee08:	f7ff fff0 	bl	800edec <__sfp_lock_acquire>
 800ee0c:	6a23      	ldr	r3, [r4, #32]
 800ee0e:	b11b      	cbz	r3, 800ee18 <__sinit+0x14>
 800ee10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee14:	f7ff bff0 	b.w	800edf8 <__sfp_lock_release>
 800ee18:	4b04      	ldr	r3, [pc, #16]	@ (800ee2c <__sinit+0x28>)
 800ee1a:	6223      	str	r3, [r4, #32]
 800ee1c:	4b04      	ldr	r3, [pc, #16]	@ (800ee30 <__sinit+0x2c>)
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d1f5      	bne.n	800ee10 <__sinit+0xc>
 800ee24:	f7ff ffc4 	bl	800edb0 <global_stdio_init.part.0>
 800ee28:	e7f2      	b.n	800ee10 <__sinit+0xc>
 800ee2a:	bf00      	nop
 800ee2c:	0800ed71 	.word	0x0800ed71
 800ee30:	200052ec 	.word	0x200052ec

0800ee34 <_fwalk_sglue>:
 800ee34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee38:	4607      	mov	r7, r0
 800ee3a:	4688      	mov	r8, r1
 800ee3c:	4614      	mov	r4, r2
 800ee3e:	2600      	movs	r6, #0
 800ee40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ee44:	f1b9 0901 	subs.w	r9, r9, #1
 800ee48:	d505      	bpl.n	800ee56 <_fwalk_sglue+0x22>
 800ee4a:	6824      	ldr	r4, [r4, #0]
 800ee4c:	2c00      	cmp	r4, #0
 800ee4e:	d1f7      	bne.n	800ee40 <_fwalk_sglue+0xc>
 800ee50:	4630      	mov	r0, r6
 800ee52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee56:	89ab      	ldrh	r3, [r5, #12]
 800ee58:	2b01      	cmp	r3, #1
 800ee5a:	d907      	bls.n	800ee6c <_fwalk_sglue+0x38>
 800ee5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ee60:	3301      	adds	r3, #1
 800ee62:	d003      	beq.n	800ee6c <_fwalk_sglue+0x38>
 800ee64:	4629      	mov	r1, r5
 800ee66:	4638      	mov	r0, r7
 800ee68:	47c0      	blx	r8
 800ee6a:	4306      	orrs	r6, r0
 800ee6c:	3568      	adds	r5, #104	@ 0x68
 800ee6e:	e7e9      	b.n	800ee44 <_fwalk_sglue+0x10>

0800ee70 <sniprintf>:
 800ee70:	b40c      	push	{r2, r3}
 800ee72:	b530      	push	{r4, r5, lr}
 800ee74:	4b18      	ldr	r3, [pc, #96]	@ (800eed8 <sniprintf+0x68>)
 800ee76:	1e0c      	subs	r4, r1, #0
 800ee78:	681d      	ldr	r5, [r3, #0]
 800ee7a:	b09d      	sub	sp, #116	@ 0x74
 800ee7c:	da08      	bge.n	800ee90 <sniprintf+0x20>
 800ee7e:	238b      	movs	r3, #139	@ 0x8b
 800ee80:	602b      	str	r3, [r5, #0]
 800ee82:	f04f 30ff 	mov.w	r0, #4294967295
 800ee86:	b01d      	add	sp, #116	@ 0x74
 800ee88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ee8c:	b002      	add	sp, #8
 800ee8e:	4770      	bx	lr
 800ee90:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ee94:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ee98:	f04f 0300 	mov.w	r3, #0
 800ee9c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800ee9e:	bf14      	ite	ne
 800eea0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800eea4:	4623      	moveq	r3, r4
 800eea6:	9304      	str	r3, [sp, #16]
 800eea8:	9307      	str	r3, [sp, #28]
 800eeaa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800eeae:	9002      	str	r0, [sp, #8]
 800eeb0:	9006      	str	r0, [sp, #24]
 800eeb2:	f8ad 3016 	strh.w	r3, [sp, #22]
 800eeb6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800eeb8:	ab21      	add	r3, sp, #132	@ 0x84
 800eeba:	a902      	add	r1, sp, #8
 800eebc:	4628      	mov	r0, r5
 800eebe:	9301      	str	r3, [sp, #4]
 800eec0:	f002 f9b4 	bl	801122c <_svfiprintf_r>
 800eec4:	1c43      	adds	r3, r0, #1
 800eec6:	bfbc      	itt	lt
 800eec8:	238b      	movlt	r3, #139	@ 0x8b
 800eeca:	602b      	strlt	r3, [r5, #0]
 800eecc:	2c00      	cmp	r4, #0
 800eece:	d0da      	beq.n	800ee86 <sniprintf+0x16>
 800eed0:	9b02      	ldr	r3, [sp, #8]
 800eed2:	2200      	movs	r2, #0
 800eed4:	701a      	strb	r2, [r3, #0]
 800eed6:	e7d6      	b.n	800ee86 <sniprintf+0x16>
 800eed8:	20000278 	.word	0x20000278

0800eedc <siprintf>:
 800eedc:	b40e      	push	{r1, r2, r3}
 800eede:	b510      	push	{r4, lr}
 800eee0:	b09d      	sub	sp, #116	@ 0x74
 800eee2:	ab1f      	add	r3, sp, #124	@ 0x7c
 800eee4:	9002      	str	r0, [sp, #8]
 800eee6:	9006      	str	r0, [sp, #24]
 800eee8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800eeec:	480a      	ldr	r0, [pc, #40]	@ (800ef18 <siprintf+0x3c>)
 800eeee:	9107      	str	r1, [sp, #28]
 800eef0:	9104      	str	r1, [sp, #16]
 800eef2:	490a      	ldr	r1, [pc, #40]	@ (800ef1c <siprintf+0x40>)
 800eef4:	f853 2b04 	ldr.w	r2, [r3], #4
 800eef8:	9105      	str	r1, [sp, #20]
 800eefa:	2400      	movs	r4, #0
 800eefc:	a902      	add	r1, sp, #8
 800eefe:	6800      	ldr	r0, [r0, #0]
 800ef00:	9301      	str	r3, [sp, #4]
 800ef02:	941b      	str	r4, [sp, #108]	@ 0x6c
 800ef04:	f002 f992 	bl	801122c <_svfiprintf_r>
 800ef08:	9b02      	ldr	r3, [sp, #8]
 800ef0a:	701c      	strb	r4, [r3, #0]
 800ef0c:	b01d      	add	sp, #116	@ 0x74
 800ef0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef12:	b003      	add	sp, #12
 800ef14:	4770      	bx	lr
 800ef16:	bf00      	nop
 800ef18:	20000278 	.word	0x20000278
 800ef1c:	ffff0208 	.word	0xffff0208

0800ef20 <__sread>:
 800ef20:	b510      	push	{r4, lr}
 800ef22:	460c      	mov	r4, r1
 800ef24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef28:	f000 f8dc 	bl	800f0e4 <_read_r>
 800ef2c:	2800      	cmp	r0, #0
 800ef2e:	bfab      	itete	ge
 800ef30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ef32:	89a3      	ldrhlt	r3, [r4, #12]
 800ef34:	181b      	addge	r3, r3, r0
 800ef36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ef3a:	bfac      	ite	ge
 800ef3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ef3e:	81a3      	strhlt	r3, [r4, #12]
 800ef40:	bd10      	pop	{r4, pc}

0800ef42 <__swrite>:
 800ef42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef46:	461f      	mov	r7, r3
 800ef48:	898b      	ldrh	r3, [r1, #12]
 800ef4a:	05db      	lsls	r3, r3, #23
 800ef4c:	4605      	mov	r5, r0
 800ef4e:	460c      	mov	r4, r1
 800ef50:	4616      	mov	r6, r2
 800ef52:	d505      	bpl.n	800ef60 <__swrite+0x1e>
 800ef54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef58:	2302      	movs	r3, #2
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	f000 f8b0 	bl	800f0c0 <_lseek_r>
 800ef60:	89a3      	ldrh	r3, [r4, #12]
 800ef62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ef6a:	81a3      	strh	r3, [r4, #12]
 800ef6c:	4632      	mov	r2, r6
 800ef6e:	463b      	mov	r3, r7
 800ef70:	4628      	mov	r0, r5
 800ef72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef76:	f000 b8c7 	b.w	800f108 <_write_r>

0800ef7a <__sseek>:
 800ef7a:	b510      	push	{r4, lr}
 800ef7c:	460c      	mov	r4, r1
 800ef7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef82:	f000 f89d 	bl	800f0c0 <_lseek_r>
 800ef86:	1c43      	adds	r3, r0, #1
 800ef88:	89a3      	ldrh	r3, [r4, #12]
 800ef8a:	bf15      	itete	ne
 800ef8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ef8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ef92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ef96:	81a3      	strheq	r3, [r4, #12]
 800ef98:	bf18      	it	ne
 800ef9a:	81a3      	strhne	r3, [r4, #12]
 800ef9c:	bd10      	pop	{r4, pc}

0800ef9e <__sclose>:
 800ef9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efa2:	f000 b81f 	b.w	800efe4 <_close_r>

0800efa6 <memset>:
 800efa6:	4402      	add	r2, r0
 800efa8:	4603      	mov	r3, r0
 800efaa:	4293      	cmp	r3, r2
 800efac:	d100      	bne.n	800efb0 <memset+0xa>
 800efae:	4770      	bx	lr
 800efb0:	f803 1b01 	strb.w	r1, [r3], #1
 800efb4:	e7f9      	b.n	800efaa <memset+0x4>

0800efb6 <strncmp>:
 800efb6:	b510      	push	{r4, lr}
 800efb8:	b16a      	cbz	r2, 800efd6 <strncmp+0x20>
 800efba:	3901      	subs	r1, #1
 800efbc:	1884      	adds	r4, r0, r2
 800efbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efc2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800efc6:	429a      	cmp	r2, r3
 800efc8:	d103      	bne.n	800efd2 <strncmp+0x1c>
 800efca:	42a0      	cmp	r0, r4
 800efcc:	d001      	beq.n	800efd2 <strncmp+0x1c>
 800efce:	2a00      	cmp	r2, #0
 800efd0:	d1f5      	bne.n	800efbe <strncmp+0x8>
 800efd2:	1ad0      	subs	r0, r2, r3
 800efd4:	bd10      	pop	{r4, pc}
 800efd6:	4610      	mov	r0, r2
 800efd8:	e7fc      	b.n	800efd4 <strncmp+0x1e>
	...

0800efdc <_localeconv_r>:
 800efdc:	4800      	ldr	r0, [pc, #0]	@ (800efe0 <_localeconv_r+0x4>)
 800efde:	4770      	bx	lr
 800efe0:	200001fc 	.word	0x200001fc

0800efe4 <_close_r>:
 800efe4:	b538      	push	{r3, r4, r5, lr}
 800efe6:	4d06      	ldr	r5, [pc, #24]	@ (800f000 <_close_r+0x1c>)
 800efe8:	2300      	movs	r3, #0
 800efea:	4604      	mov	r4, r0
 800efec:	4608      	mov	r0, r1
 800efee:	602b      	str	r3, [r5, #0]
 800eff0:	f7f5 fb4e 	bl	8004690 <_close>
 800eff4:	1c43      	adds	r3, r0, #1
 800eff6:	d102      	bne.n	800effe <_close_r+0x1a>
 800eff8:	682b      	ldr	r3, [r5, #0]
 800effa:	b103      	cbz	r3, 800effe <_close_r+0x1a>
 800effc:	6023      	str	r3, [r4, #0]
 800effe:	bd38      	pop	{r3, r4, r5, pc}
 800f000:	200052f0 	.word	0x200052f0

0800f004 <_reclaim_reent>:
 800f004:	4b2d      	ldr	r3, [pc, #180]	@ (800f0bc <_reclaim_reent+0xb8>)
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	4283      	cmp	r3, r0
 800f00a:	b570      	push	{r4, r5, r6, lr}
 800f00c:	4604      	mov	r4, r0
 800f00e:	d053      	beq.n	800f0b8 <_reclaim_reent+0xb4>
 800f010:	69c3      	ldr	r3, [r0, #28]
 800f012:	b31b      	cbz	r3, 800f05c <_reclaim_reent+0x58>
 800f014:	68db      	ldr	r3, [r3, #12]
 800f016:	b163      	cbz	r3, 800f032 <_reclaim_reent+0x2e>
 800f018:	2500      	movs	r5, #0
 800f01a:	69e3      	ldr	r3, [r4, #28]
 800f01c:	68db      	ldr	r3, [r3, #12]
 800f01e:	5959      	ldr	r1, [r3, r5]
 800f020:	b9b1      	cbnz	r1, 800f050 <_reclaim_reent+0x4c>
 800f022:	3504      	adds	r5, #4
 800f024:	2d80      	cmp	r5, #128	@ 0x80
 800f026:	d1f8      	bne.n	800f01a <_reclaim_reent+0x16>
 800f028:	69e3      	ldr	r3, [r4, #28]
 800f02a:	4620      	mov	r0, r4
 800f02c:	68d9      	ldr	r1, [r3, #12]
 800f02e:	f000 ff23 	bl	800fe78 <_free_r>
 800f032:	69e3      	ldr	r3, [r4, #28]
 800f034:	6819      	ldr	r1, [r3, #0]
 800f036:	b111      	cbz	r1, 800f03e <_reclaim_reent+0x3a>
 800f038:	4620      	mov	r0, r4
 800f03a:	f000 ff1d 	bl	800fe78 <_free_r>
 800f03e:	69e3      	ldr	r3, [r4, #28]
 800f040:	689d      	ldr	r5, [r3, #8]
 800f042:	b15d      	cbz	r5, 800f05c <_reclaim_reent+0x58>
 800f044:	4629      	mov	r1, r5
 800f046:	4620      	mov	r0, r4
 800f048:	682d      	ldr	r5, [r5, #0]
 800f04a:	f000 ff15 	bl	800fe78 <_free_r>
 800f04e:	e7f8      	b.n	800f042 <_reclaim_reent+0x3e>
 800f050:	680e      	ldr	r6, [r1, #0]
 800f052:	4620      	mov	r0, r4
 800f054:	f000 ff10 	bl	800fe78 <_free_r>
 800f058:	4631      	mov	r1, r6
 800f05a:	e7e1      	b.n	800f020 <_reclaim_reent+0x1c>
 800f05c:	6961      	ldr	r1, [r4, #20]
 800f05e:	b111      	cbz	r1, 800f066 <_reclaim_reent+0x62>
 800f060:	4620      	mov	r0, r4
 800f062:	f000 ff09 	bl	800fe78 <_free_r>
 800f066:	69e1      	ldr	r1, [r4, #28]
 800f068:	b111      	cbz	r1, 800f070 <_reclaim_reent+0x6c>
 800f06a:	4620      	mov	r0, r4
 800f06c:	f000 ff04 	bl	800fe78 <_free_r>
 800f070:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f072:	b111      	cbz	r1, 800f07a <_reclaim_reent+0x76>
 800f074:	4620      	mov	r0, r4
 800f076:	f000 feff 	bl	800fe78 <_free_r>
 800f07a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f07c:	b111      	cbz	r1, 800f084 <_reclaim_reent+0x80>
 800f07e:	4620      	mov	r0, r4
 800f080:	f000 fefa 	bl	800fe78 <_free_r>
 800f084:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800f086:	b111      	cbz	r1, 800f08e <_reclaim_reent+0x8a>
 800f088:	4620      	mov	r0, r4
 800f08a:	f000 fef5 	bl	800fe78 <_free_r>
 800f08e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800f090:	b111      	cbz	r1, 800f098 <_reclaim_reent+0x94>
 800f092:	4620      	mov	r0, r4
 800f094:	f000 fef0 	bl	800fe78 <_free_r>
 800f098:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800f09a:	b111      	cbz	r1, 800f0a2 <_reclaim_reent+0x9e>
 800f09c:	4620      	mov	r0, r4
 800f09e:	f000 feeb 	bl	800fe78 <_free_r>
 800f0a2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f0a4:	b111      	cbz	r1, 800f0ac <_reclaim_reent+0xa8>
 800f0a6:	4620      	mov	r0, r4
 800f0a8:	f000 fee6 	bl	800fe78 <_free_r>
 800f0ac:	6a23      	ldr	r3, [r4, #32]
 800f0ae:	b11b      	cbz	r3, 800f0b8 <_reclaim_reent+0xb4>
 800f0b0:	4620      	mov	r0, r4
 800f0b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f0b6:	4718      	bx	r3
 800f0b8:	bd70      	pop	{r4, r5, r6, pc}
 800f0ba:	bf00      	nop
 800f0bc:	20000278 	.word	0x20000278

0800f0c0 <_lseek_r>:
 800f0c0:	b538      	push	{r3, r4, r5, lr}
 800f0c2:	4d07      	ldr	r5, [pc, #28]	@ (800f0e0 <_lseek_r+0x20>)
 800f0c4:	4604      	mov	r4, r0
 800f0c6:	4608      	mov	r0, r1
 800f0c8:	4611      	mov	r1, r2
 800f0ca:	2200      	movs	r2, #0
 800f0cc:	602a      	str	r2, [r5, #0]
 800f0ce:	461a      	mov	r2, r3
 800f0d0:	f7f5 fb05 	bl	80046de <_lseek>
 800f0d4:	1c43      	adds	r3, r0, #1
 800f0d6:	d102      	bne.n	800f0de <_lseek_r+0x1e>
 800f0d8:	682b      	ldr	r3, [r5, #0]
 800f0da:	b103      	cbz	r3, 800f0de <_lseek_r+0x1e>
 800f0dc:	6023      	str	r3, [r4, #0]
 800f0de:	bd38      	pop	{r3, r4, r5, pc}
 800f0e0:	200052f0 	.word	0x200052f0

0800f0e4 <_read_r>:
 800f0e4:	b538      	push	{r3, r4, r5, lr}
 800f0e6:	4d07      	ldr	r5, [pc, #28]	@ (800f104 <_read_r+0x20>)
 800f0e8:	4604      	mov	r4, r0
 800f0ea:	4608      	mov	r0, r1
 800f0ec:	4611      	mov	r1, r2
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	602a      	str	r2, [r5, #0]
 800f0f2:	461a      	mov	r2, r3
 800f0f4:	f7f5 fa93 	bl	800461e <_read>
 800f0f8:	1c43      	adds	r3, r0, #1
 800f0fa:	d102      	bne.n	800f102 <_read_r+0x1e>
 800f0fc:	682b      	ldr	r3, [r5, #0]
 800f0fe:	b103      	cbz	r3, 800f102 <_read_r+0x1e>
 800f100:	6023      	str	r3, [r4, #0]
 800f102:	bd38      	pop	{r3, r4, r5, pc}
 800f104:	200052f0 	.word	0x200052f0

0800f108 <_write_r>:
 800f108:	b538      	push	{r3, r4, r5, lr}
 800f10a:	4d07      	ldr	r5, [pc, #28]	@ (800f128 <_write_r+0x20>)
 800f10c:	4604      	mov	r4, r0
 800f10e:	4608      	mov	r0, r1
 800f110:	4611      	mov	r1, r2
 800f112:	2200      	movs	r2, #0
 800f114:	602a      	str	r2, [r5, #0]
 800f116:	461a      	mov	r2, r3
 800f118:	f7f5 fa9e 	bl	8004658 <_write>
 800f11c:	1c43      	adds	r3, r0, #1
 800f11e:	d102      	bne.n	800f126 <_write_r+0x1e>
 800f120:	682b      	ldr	r3, [r5, #0]
 800f122:	b103      	cbz	r3, 800f126 <_write_r+0x1e>
 800f124:	6023      	str	r3, [r4, #0]
 800f126:	bd38      	pop	{r3, r4, r5, pc}
 800f128:	200052f0 	.word	0x200052f0

0800f12c <__errno>:
 800f12c:	4b01      	ldr	r3, [pc, #4]	@ (800f134 <__errno+0x8>)
 800f12e:	6818      	ldr	r0, [r3, #0]
 800f130:	4770      	bx	lr
 800f132:	bf00      	nop
 800f134:	20000278 	.word	0x20000278

0800f138 <__libc_init_array>:
 800f138:	b570      	push	{r4, r5, r6, lr}
 800f13a:	4d0d      	ldr	r5, [pc, #52]	@ (800f170 <__libc_init_array+0x38>)
 800f13c:	4c0d      	ldr	r4, [pc, #52]	@ (800f174 <__libc_init_array+0x3c>)
 800f13e:	1b64      	subs	r4, r4, r5
 800f140:	10a4      	asrs	r4, r4, #2
 800f142:	2600      	movs	r6, #0
 800f144:	42a6      	cmp	r6, r4
 800f146:	d109      	bne.n	800f15c <__libc_init_array+0x24>
 800f148:	4d0b      	ldr	r5, [pc, #44]	@ (800f178 <__libc_init_array+0x40>)
 800f14a:	4c0c      	ldr	r4, [pc, #48]	@ (800f17c <__libc_init_array+0x44>)
 800f14c:	f002 fd5e 	bl	8011c0c <_init>
 800f150:	1b64      	subs	r4, r4, r5
 800f152:	10a4      	asrs	r4, r4, #2
 800f154:	2600      	movs	r6, #0
 800f156:	42a6      	cmp	r6, r4
 800f158:	d105      	bne.n	800f166 <__libc_init_array+0x2e>
 800f15a:	bd70      	pop	{r4, r5, r6, pc}
 800f15c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f160:	4798      	blx	r3
 800f162:	3601      	adds	r6, #1
 800f164:	e7ee      	b.n	800f144 <__libc_init_array+0xc>
 800f166:	f855 3b04 	ldr.w	r3, [r5], #4
 800f16a:	4798      	blx	r3
 800f16c:	3601      	adds	r6, #1
 800f16e:	e7f2      	b.n	800f156 <__libc_init_array+0x1e>
 800f170:	080122fc 	.word	0x080122fc
 800f174:	080122fc 	.word	0x080122fc
 800f178:	080122fc 	.word	0x080122fc
 800f17c:	08012300 	.word	0x08012300

0800f180 <__retarget_lock_init_recursive>:
 800f180:	4770      	bx	lr

0800f182 <__retarget_lock_acquire_recursive>:
 800f182:	4770      	bx	lr

0800f184 <__retarget_lock_release_recursive>:
 800f184:	4770      	bx	lr

0800f186 <memcpy>:
 800f186:	440a      	add	r2, r1
 800f188:	4291      	cmp	r1, r2
 800f18a:	f100 33ff 	add.w	r3, r0, #4294967295
 800f18e:	d100      	bne.n	800f192 <memcpy+0xc>
 800f190:	4770      	bx	lr
 800f192:	b510      	push	{r4, lr}
 800f194:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f198:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f19c:	4291      	cmp	r1, r2
 800f19e:	d1f9      	bne.n	800f194 <memcpy+0xe>
 800f1a0:	bd10      	pop	{r4, pc}
 800f1a2:	0000      	movs	r0, r0
 800f1a4:	0000      	movs	r0, r0
	...

0800f1a8 <nan>:
 800f1a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f1b0 <nan+0x8>
 800f1ac:	4770      	bx	lr
 800f1ae:	bf00      	nop
 800f1b0:	00000000 	.word	0x00000000
 800f1b4:	7ff80000 	.word	0x7ff80000

0800f1b8 <nanf>:
 800f1b8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f1c0 <nanf+0x8>
 800f1bc:	4770      	bx	lr
 800f1be:	bf00      	nop
 800f1c0:	7fc00000 	.word	0x7fc00000

0800f1c4 <quorem>:
 800f1c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1c8:	6903      	ldr	r3, [r0, #16]
 800f1ca:	690c      	ldr	r4, [r1, #16]
 800f1cc:	42a3      	cmp	r3, r4
 800f1ce:	4607      	mov	r7, r0
 800f1d0:	db7e      	blt.n	800f2d0 <quorem+0x10c>
 800f1d2:	3c01      	subs	r4, #1
 800f1d4:	f101 0814 	add.w	r8, r1, #20
 800f1d8:	00a3      	lsls	r3, r4, #2
 800f1da:	f100 0514 	add.w	r5, r0, #20
 800f1de:	9300      	str	r3, [sp, #0]
 800f1e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f1e4:	9301      	str	r3, [sp, #4]
 800f1e6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f1ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f1ee:	3301      	adds	r3, #1
 800f1f0:	429a      	cmp	r2, r3
 800f1f2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f1f6:	fbb2 f6f3 	udiv	r6, r2, r3
 800f1fa:	d32e      	bcc.n	800f25a <quorem+0x96>
 800f1fc:	f04f 0a00 	mov.w	sl, #0
 800f200:	46c4      	mov	ip, r8
 800f202:	46ae      	mov	lr, r5
 800f204:	46d3      	mov	fp, sl
 800f206:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f20a:	b298      	uxth	r0, r3
 800f20c:	fb06 a000 	mla	r0, r6, r0, sl
 800f210:	0c02      	lsrs	r2, r0, #16
 800f212:	0c1b      	lsrs	r3, r3, #16
 800f214:	fb06 2303 	mla	r3, r6, r3, r2
 800f218:	f8de 2000 	ldr.w	r2, [lr]
 800f21c:	b280      	uxth	r0, r0
 800f21e:	b292      	uxth	r2, r2
 800f220:	1a12      	subs	r2, r2, r0
 800f222:	445a      	add	r2, fp
 800f224:	f8de 0000 	ldr.w	r0, [lr]
 800f228:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f22c:	b29b      	uxth	r3, r3
 800f22e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f232:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f236:	b292      	uxth	r2, r2
 800f238:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f23c:	45e1      	cmp	r9, ip
 800f23e:	f84e 2b04 	str.w	r2, [lr], #4
 800f242:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f246:	d2de      	bcs.n	800f206 <quorem+0x42>
 800f248:	9b00      	ldr	r3, [sp, #0]
 800f24a:	58eb      	ldr	r3, [r5, r3]
 800f24c:	b92b      	cbnz	r3, 800f25a <quorem+0x96>
 800f24e:	9b01      	ldr	r3, [sp, #4]
 800f250:	3b04      	subs	r3, #4
 800f252:	429d      	cmp	r5, r3
 800f254:	461a      	mov	r2, r3
 800f256:	d32f      	bcc.n	800f2b8 <quorem+0xf4>
 800f258:	613c      	str	r4, [r7, #16]
 800f25a:	4638      	mov	r0, r7
 800f25c:	f001 fd14 	bl	8010c88 <__mcmp>
 800f260:	2800      	cmp	r0, #0
 800f262:	db25      	blt.n	800f2b0 <quorem+0xec>
 800f264:	4629      	mov	r1, r5
 800f266:	2000      	movs	r0, #0
 800f268:	f858 2b04 	ldr.w	r2, [r8], #4
 800f26c:	f8d1 c000 	ldr.w	ip, [r1]
 800f270:	fa1f fe82 	uxth.w	lr, r2
 800f274:	fa1f f38c 	uxth.w	r3, ip
 800f278:	eba3 030e 	sub.w	r3, r3, lr
 800f27c:	4403      	add	r3, r0
 800f27e:	0c12      	lsrs	r2, r2, #16
 800f280:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f284:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f288:	b29b      	uxth	r3, r3
 800f28a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f28e:	45c1      	cmp	r9, r8
 800f290:	f841 3b04 	str.w	r3, [r1], #4
 800f294:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f298:	d2e6      	bcs.n	800f268 <quorem+0xa4>
 800f29a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f29e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f2a2:	b922      	cbnz	r2, 800f2ae <quorem+0xea>
 800f2a4:	3b04      	subs	r3, #4
 800f2a6:	429d      	cmp	r5, r3
 800f2a8:	461a      	mov	r2, r3
 800f2aa:	d30b      	bcc.n	800f2c4 <quorem+0x100>
 800f2ac:	613c      	str	r4, [r7, #16]
 800f2ae:	3601      	adds	r6, #1
 800f2b0:	4630      	mov	r0, r6
 800f2b2:	b003      	add	sp, #12
 800f2b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2b8:	6812      	ldr	r2, [r2, #0]
 800f2ba:	3b04      	subs	r3, #4
 800f2bc:	2a00      	cmp	r2, #0
 800f2be:	d1cb      	bne.n	800f258 <quorem+0x94>
 800f2c0:	3c01      	subs	r4, #1
 800f2c2:	e7c6      	b.n	800f252 <quorem+0x8e>
 800f2c4:	6812      	ldr	r2, [r2, #0]
 800f2c6:	3b04      	subs	r3, #4
 800f2c8:	2a00      	cmp	r2, #0
 800f2ca:	d1ef      	bne.n	800f2ac <quorem+0xe8>
 800f2cc:	3c01      	subs	r4, #1
 800f2ce:	e7ea      	b.n	800f2a6 <quorem+0xe2>
 800f2d0:	2000      	movs	r0, #0
 800f2d2:	e7ee      	b.n	800f2b2 <quorem+0xee>
 800f2d4:	0000      	movs	r0, r0
	...

0800f2d8 <_dtoa_r>:
 800f2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2dc:	69c7      	ldr	r7, [r0, #28]
 800f2de:	b097      	sub	sp, #92	@ 0x5c
 800f2e0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800f2e4:	ec55 4b10 	vmov	r4, r5, d0
 800f2e8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800f2ea:	9107      	str	r1, [sp, #28]
 800f2ec:	4681      	mov	r9, r0
 800f2ee:	920c      	str	r2, [sp, #48]	@ 0x30
 800f2f0:	9311      	str	r3, [sp, #68]	@ 0x44
 800f2f2:	b97f      	cbnz	r7, 800f314 <_dtoa_r+0x3c>
 800f2f4:	2010      	movs	r0, #16
 800f2f6:	f001 f943 	bl	8010580 <malloc>
 800f2fa:	4602      	mov	r2, r0
 800f2fc:	f8c9 001c 	str.w	r0, [r9, #28]
 800f300:	b920      	cbnz	r0, 800f30c <_dtoa_r+0x34>
 800f302:	4ba9      	ldr	r3, [pc, #676]	@ (800f5a8 <_dtoa_r+0x2d0>)
 800f304:	21ef      	movs	r1, #239	@ 0xef
 800f306:	48a9      	ldr	r0, [pc, #676]	@ (800f5ac <_dtoa_r+0x2d4>)
 800f308:	f002 f962 	bl	80115d0 <__assert_func>
 800f30c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f310:	6007      	str	r7, [r0, #0]
 800f312:	60c7      	str	r7, [r0, #12]
 800f314:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f318:	6819      	ldr	r1, [r3, #0]
 800f31a:	b159      	cbz	r1, 800f334 <_dtoa_r+0x5c>
 800f31c:	685a      	ldr	r2, [r3, #4]
 800f31e:	604a      	str	r2, [r1, #4]
 800f320:	2301      	movs	r3, #1
 800f322:	4093      	lsls	r3, r2
 800f324:	608b      	str	r3, [r1, #8]
 800f326:	4648      	mov	r0, r9
 800f328:	f001 fa32 	bl	8010790 <_Bfree>
 800f32c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f330:	2200      	movs	r2, #0
 800f332:	601a      	str	r2, [r3, #0]
 800f334:	1e2b      	subs	r3, r5, #0
 800f336:	bfb9      	ittee	lt
 800f338:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f33c:	9305      	strlt	r3, [sp, #20]
 800f33e:	2300      	movge	r3, #0
 800f340:	6033      	strge	r3, [r6, #0]
 800f342:	9f05      	ldr	r7, [sp, #20]
 800f344:	4b9a      	ldr	r3, [pc, #616]	@ (800f5b0 <_dtoa_r+0x2d8>)
 800f346:	bfbc      	itt	lt
 800f348:	2201      	movlt	r2, #1
 800f34a:	6032      	strlt	r2, [r6, #0]
 800f34c:	43bb      	bics	r3, r7
 800f34e:	d112      	bne.n	800f376 <_dtoa_r+0x9e>
 800f350:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f352:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f356:	6013      	str	r3, [r2, #0]
 800f358:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f35c:	4323      	orrs	r3, r4
 800f35e:	f000 855a 	beq.w	800fe16 <_dtoa_r+0xb3e>
 800f362:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f364:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800f5c4 <_dtoa_r+0x2ec>
 800f368:	2b00      	cmp	r3, #0
 800f36a:	f000 855c 	beq.w	800fe26 <_dtoa_r+0xb4e>
 800f36e:	f10a 0303 	add.w	r3, sl, #3
 800f372:	f000 bd56 	b.w	800fe22 <_dtoa_r+0xb4a>
 800f376:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f37a:	2200      	movs	r2, #0
 800f37c:	ec51 0b17 	vmov	r0, r1, d7
 800f380:	2300      	movs	r3, #0
 800f382:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800f386:	f7f1 fba7 	bl	8000ad8 <__aeabi_dcmpeq>
 800f38a:	4680      	mov	r8, r0
 800f38c:	b158      	cbz	r0, 800f3a6 <_dtoa_r+0xce>
 800f38e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f390:	2301      	movs	r3, #1
 800f392:	6013      	str	r3, [r2, #0]
 800f394:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f396:	b113      	cbz	r3, 800f39e <_dtoa_r+0xc6>
 800f398:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800f39a:	4b86      	ldr	r3, [pc, #536]	@ (800f5b4 <_dtoa_r+0x2dc>)
 800f39c:	6013      	str	r3, [r2, #0]
 800f39e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800f5c8 <_dtoa_r+0x2f0>
 800f3a2:	f000 bd40 	b.w	800fe26 <_dtoa_r+0xb4e>
 800f3a6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800f3aa:	aa14      	add	r2, sp, #80	@ 0x50
 800f3ac:	a915      	add	r1, sp, #84	@ 0x54
 800f3ae:	4648      	mov	r0, r9
 800f3b0:	f001 fd8a 	bl	8010ec8 <__d2b>
 800f3b4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f3b8:	9002      	str	r0, [sp, #8]
 800f3ba:	2e00      	cmp	r6, #0
 800f3bc:	d078      	beq.n	800f4b0 <_dtoa_r+0x1d8>
 800f3be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f3c0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800f3c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f3c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f3cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f3d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f3d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f3d8:	4619      	mov	r1, r3
 800f3da:	2200      	movs	r2, #0
 800f3dc:	4b76      	ldr	r3, [pc, #472]	@ (800f5b8 <_dtoa_r+0x2e0>)
 800f3de:	f7f0 ff5b 	bl	8000298 <__aeabi_dsub>
 800f3e2:	a36b      	add	r3, pc, #428	@ (adr r3, 800f590 <_dtoa_r+0x2b8>)
 800f3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3e8:	f7f1 f90e 	bl	8000608 <__aeabi_dmul>
 800f3ec:	a36a      	add	r3, pc, #424	@ (adr r3, 800f598 <_dtoa_r+0x2c0>)
 800f3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3f2:	f7f0 ff53 	bl	800029c <__adddf3>
 800f3f6:	4604      	mov	r4, r0
 800f3f8:	4630      	mov	r0, r6
 800f3fa:	460d      	mov	r5, r1
 800f3fc:	f7f1 f89a 	bl	8000534 <__aeabi_i2d>
 800f400:	a367      	add	r3, pc, #412	@ (adr r3, 800f5a0 <_dtoa_r+0x2c8>)
 800f402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f406:	f7f1 f8ff 	bl	8000608 <__aeabi_dmul>
 800f40a:	4602      	mov	r2, r0
 800f40c:	460b      	mov	r3, r1
 800f40e:	4620      	mov	r0, r4
 800f410:	4629      	mov	r1, r5
 800f412:	f7f0 ff43 	bl	800029c <__adddf3>
 800f416:	4604      	mov	r4, r0
 800f418:	460d      	mov	r5, r1
 800f41a:	f7f1 fba5 	bl	8000b68 <__aeabi_d2iz>
 800f41e:	2200      	movs	r2, #0
 800f420:	4607      	mov	r7, r0
 800f422:	2300      	movs	r3, #0
 800f424:	4620      	mov	r0, r4
 800f426:	4629      	mov	r1, r5
 800f428:	f7f1 fb60 	bl	8000aec <__aeabi_dcmplt>
 800f42c:	b140      	cbz	r0, 800f440 <_dtoa_r+0x168>
 800f42e:	4638      	mov	r0, r7
 800f430:	f7f1 f880 	bl	8000534 <__aeabi_i2d>
 800f434:	4622      	mov	r2, r4
 800f436:	462b      	mov	r3, r5
 800f438:	f7f1 fb4e 	bl	8000ad8 <__aeabi_dcmpeq>
 800f43c:	b900      	cbnz	r0, 800f440 <_dtoa_r+0x168>
 800f43e:	3f01      	subs	r7, #1
 800f440:	2f16      	cmp	r7, #22
 800f442:	d852      	bhi.n	800f4ea <_dtoa_r+0x212>
 800f444:	4b5d      	ldr	r3, [pc, #372]	@ (800f5bc <_dtoa_r+0x2e4>)
 800f446:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f44e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f452:	f7f1 fb4b 	bl	8000aec <__aeabi_dcmplt>
 800f456:	2800      	cmp	r0, #0
 800f458:	d049      	beq.n	800f4ee <_dtoa_r+0x216>
 800f45a:	3f01      	subs	r7, #1
 800f45c:	2300      	movs	r3, #0
 800f45e:	9310      	str	r3, [sp, #64]	@ 0x40
 800f460:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f462:	1b9b      	subs	r3, r3, r6
 800f464:	1e5a      	subs	r2, r3, #1
 800f466:	bf45      	ittet	mi
 800f468:	f1c3 0301 	rsbmi	r3, r3, #1
 800f46c:	9300      	strmi	r3, [sp, #0]
 800f46e:	2300      	movpl	r3, #0
 800f470:	2300      	movmi	r3, #0
 800f472:	9206      	str	r2, [sp, #24]
 800f474:	bf54      	ite	pl
 800f476:	9300      	strpl	r3, [sp, #0]
 800f478:	9306      	strmi	r3, [sp, #24]
 800f47a:	2f00      	cmp	r7, #0
 800f47c:	db39      	blt.n	800f4f2 <_dtoa_r+0x21a>
 800f47e:	9b06      	ldr	r3, [sp, #24]
 800f480:	970d      	str	r7, [sp, #52]	@ 0x34
 800f482:	443b      	add	r3, r7
 800f484:	9306      	str	r3, [sp, #24]
 800f486:	2300      	movs	r3, #0
 800f488:	9308      	str	r3, [sp, #32]
 800f48a:	9b07      	ldr	r3, [sp, #28]
 800f48c:	2b09      	cmp	r3, #9
 800f48e:	d863      	bhi.n	800f558 <_dtoa_r+0x280>
 800f490:	2b05      	cmp	r3, #5
 800f492:	bfc4      	itt	gt
 800f494:	3b04      	subgt	r3, #4
 800f496:	9307      	strgt	r3, [sp, #28]
 800f498:	9b07      	ldr	r3, [sp, #28]
 800f49a:	f1a3 0302 	sub.w	r3, r3, #2
 800f49e:	bfcc      	ite	gt
 800f4a0:	2400      	movgt	r4, #0
 800f4a2:	2401      	movle	r4, #1
 800f4a4:	2b03      	cmp	r3, #3
 800f4a6:	d863      	bhi.n	800f570 <_dtoa_r+0x298>
 800f4a8:	e8df f003 	tbb	[pc, r3]
 800f4ac:	2b375452 	.word	0x2b375452
 800f4b0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800f4b4:	441e      	add	r6, r3
 800f4b6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f4ba:	2b20      	cmp	r3, #32
 800f4bc:	bfc1      	itttt	gt
 800f4be:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f4c2:	409f      	lslgt	r7, r3
 800f4c4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f4c8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f4cc:	bfd6      	itet	le
 800f4ce:	f1c3 0320 	rsble	r3, r3, #32
 800f4d2:	ea47 0003 	orrgt.w	r0, r7, r3
 800f4d6:	fa04 f003 	lslle.w	r0, r4, r3
 800f4da:	f7f1 f81b 	bl	8000514 <__aeabi_ui2d>
 800f4de:	2201      	movs	r2, #1
 800f4e0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f4e4:	3e01      	subs	r6, #1
 800f4e6:	9212      	str	r2, [sp, #72]	@ 0x48
 800f4e8:	e776      	b.n	800f3d8 <_dtoa_r+0x100>
 800f4ea:	2301      	movs	r3, #1
 800f4ec:	e7b7      	b.n	800f45e <_dtoa_r+0x186>
 800f4ee:	9010      	str	r0, [sp, #64]	@ 0x40
 800f4f0:	e7b6      	b.n	800f460 <_dtoa_r+0x188>
 800f4f2:	9b00      	ldr	r3, [sp, #0]
 800f4f4:	1bdb      	subs	r3, r3, r7
 800f4f6:	9300      	str	r3, [sp, #0]
 800f4f8:	427b      	negs	r3, r7
 800f4fa:	9308      	str	r3, [sp, #32]
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	930d      	str	r3, [sp, #52]	@ 0x34
 800f500:	e7c3      	b.n	800f48a <_dtoa_r+0x1b2>
 800f502:	2301      	movs	r3, #1
 800f504:	9309      	str	r3, [sp, #36]	@ 0x24
 800f506:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f508:	eb07 0b03 	add.w	fp, r7, r3
 800f50c:	f10b 0301 	add.w	r3, fp, #1
 800f510:	2b01      	cmp	r3, #1
 800f512:	9303      	str	r3, [sp, #12]
 800f514:	bfb8      	it	lt
 800f516:	2301      	movlt	r3, #1
 800f518:	e006      	b.n	800f528 <_dtoa_r+0x250>
 800f51a:	2301      	movs	r3, #1
 800f51c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f51e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f520:	2b00      	cmp	r3, #0
 800f522:	dd28      	ble.n	800f576 <_dtoa_r+0x29e>
 800f524:	469b      	mov	fp, r3
 800f526:	9303      	str	r3, [sp, #12]
 800f528:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800f52c:	2100      	movs	r1, #0
 800f52e:	2204      	movs	r2, #4
 800f530:	f102 0514 	add.w	r5, r2, #20
 800f534:	429d      	cmp	r5, r3
 800f536:	d926      	bls.n	800f586 <_dtoa_r+0x2ae>
 800f538:	6041      	str	r1, [r0, #4]
 800f53a:	4648      	mov	r0, r9
 800f53c:	f001 f8e8 	bl	8010710 <_Balloc>
 800f540:	4682      	mov	sl, r0
 800f542:	2800      	cmp	r0, #0
 800f544:	d142      	bne.n	800f5cc <_dtoa_r+0x2f4>
 800f546:	4b1e      	ldr	r3, [pc, #120]	@ (800f5c0 <_dtoa_r+0x2e8>)
 800f548:	4602      	mov	r2, r0
 800f54a:	f240 11af 	movw	r1, #431	@ 0x1af
 800f54e:	e6da      	b.n	800f306 <_dtoa_r+0x2e>
 800f550:	2300      	movs	r3, #0
 800f552:	e7e3      	b.n	800f51c <_dtoa_r+0x244>
 800f554:	2300      	movs	r3, #0
 800f556:	e7d5      	b.n	800f504 <_dtoa_r+0x22c>
 800f558:	2401      	movs	r4, #1
 800f55a:	2300      	movs	r3, #0
 800f55c:	9307      	str	r3, [sp, #28]
 800f55e:	9409      	str	r4, [sp, #36]	@ 0x24
 800f560:	f04f 3bff 	mov.w	fp, #4294967295
 800f564:	2200      	movs	r2, #0
 800f566:	f8cd b00c 	str.w	fp, [sp, #12]
 800f56a:	2312      	movs	r3, #18
 800f56c:	920c      	str	r2, [sp, #48]	@ 0x30
 800f56e:	e7db      	b.n	800f528 <_dtoa_r+0x250>
 800f570:	2301      	movs	r3, #1
 800f572:	9309      	str	r3, [sp, #36]	@ 0x24
 800f574:	e7f4      	b.n	800f560 <_dtoa_r+0x288>
 800f576:	f04f 0b01 	mov.w	fp, #1
 800f57a:	f8cd b00c 	str.w	fp, [sp, #12]
 800f57e:	465b      	mov	r3, fp
 800f580:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800f584:	e7d0      	b.n	800f528 <_dtoa_r+0x250>
 800f586:	3101      	adds	r1, #1
 800f588:	0052      	lsls	r2, r2, #1
 800f58a:	e7d1      	b.n	800f530 <_dtoa_r+0x258>
 800f58c:	f3af 8000 	nop.w
 800f590:	636f4361 	.word	0x636f4361
 800f594:	3fd287a7 	.word	0x3fd287a7
 800f598:	8b60c8b3 	.word	0x8b60c8b3
 800f59c:	3fc68a28 	.word	0x3fc68a28
 800f5a0:	509f79fb 	.word	0x509f79fb
 800f5a4:	3fd34413 	.word	0x3fd34413
 800f5a8:	08011f14 	.word	0x08011f14
 800f5ac:	08011f2b 	.word	0x08011f2b
 800f5b0:	7ff00000 	.word	0x7ff00000
 800f5b4:	08011ed7 	.word	0x08011ed7
 800f5b8:	3ff80000 	.word	0x3ff80000
 800f5bc:	08012128 	.word	0x08012128
 800f5c0:	08011f83 	.word	0x08011f83
 800f5c4:	08011f10 	.word	0x08011f10
 800f5c8:	08011ed6 	.word	0x08011ed6
 800f5cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f5d0:	6018      	str	r0, [r3, #0]
 800f5d2:	9b03      	ldr	r3, [sp, #12]
 800f5d4:	2b0e      	cmp	r3, #14
 800f5d6:	f200 80a1 	bhi.w	800f71c <_dtoa_r+0x444>
 800f5da:	2c00      	cmp	r4, #0
 800f5dc:	f000 809e 	beq.w	800f71c <_dtoa_r+0x444>
 800f5e0:	2f00      	cmp	r7, #0
 800f5e2:	dd33      	ble.n	800f64c <_dtoa_r+0x374>
 800f5e4:	4b9c      	ldr	r3, [pc, #624]	@ (800f858 <_dtoa_r+0x580>)
 800f5e6:	f007 020f 	and.w	r2, r7, #15
 800f5ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f5ee:	ed93 7b00 	vldr	d7, [r3]
 800f5f2:	05f8      	lsls	r0, r7, #23
 800f5f4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800f5f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f5fc:	d516      	bpl.n	800f62c <_dtoa_r+0x354>
 800f5fe:	4b97      	ldr	r3, [pc, #604]	@ (800f85c <_dtoa_r+0x584>)
 800f600:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f604:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f608:	f7f1 f928 	bl	800085c <__aeabi_ddiv>
 800f60c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f610:	f004 040f 	and.w	r4, r4, #15
 800f614:	2603      	movs	r6, #3
 800f616:	4d91      	ldr	r5, [pc, #580]	@ (800f85c <_dtoa_r+0x584>)
 800f618:	b954      	cbnz	r4, 800f630 <_dtoa_r+0x358>
 800f61a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f61e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f622:	f7f1 f91b 	bl	800085c <__aeabi_ddiv>
 800f626:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f62a:	e028      	b.n	800f67e <_dtoa_r+0x3a6>
 800f62c:	2602      	movs	r6, #2
 800f62e:	e7f2      	b.n	800f616 <_dtoa_r+0x33e>
 800f630:	07e1      	lsls	r1, r4, #31
 800f632:	d508      	bpl.n	800f646 <_dtoa_r+0x36e>
 800f634:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f638:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f63c:	f7f0 ffe4 	bl	8000608 <__aeabi_dmul>
 800f640:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f644:	3601      	adds	r6, #1
 800f646:	1064      	asrs	r4, r4, #1
 800f648:	3508      	adds	r5, #8
 800f64a:	e7e5      	b.n	800f618 <_dtoa_r+0x340>
 800f64c:	f000 80af 	beq.w	800f7ae <_dtoa_r+0x4d6>
 800f650:	427c      	negs	r4, r7
 800f652:	4b81      	ldr	r3, [pc, #516]	@ (800f858 <_dtoa_r+0x580>)
 800f654:	4d81      	ldr	r5, [pc, #516]	@ (800f85c <_dtoa_r+0x584>)
 800f656:	f004 020f 	and.w	r2, r4, #15
 800f65a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f662:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f666:	f7f0 ffcf 	bl	8000608 <__aeabi_dmul>
 800f66a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f66e:	1124      	asrs	r4, r4, #4
 800f670:	2300      	movs	r3, #0
 800f672:	2602      	movs	r6, #2
 800f674:	2c00      	cmp	r4, #0
 800f676:	f040 808f 	bne.w	800f798 <_dtoa_r+0x4c0>
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d1d3      	bne.n	800f626 <_dtoa_r+0x34e>
 800f67e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f680:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800f684:	2b00      	cmp	r3, #0
 800f686:	f000 8094 	beq.w	800f7b2 <_dtoa_r+0x4da>
 800f68a:	4b75      	ldr	r3, [pc, #468]	@ (800f860 <_dtoa_r+0x588>)
 800f68c:	2200      	movs	r2, #0
 800f68e:	4620      	mov	r0, r4
 800f690:	4629      	mov	r1, r5
 800f692:	f7f1 fa2b 	bl	8000aec <__aeabi_dcmplt>
 800f696:	2800      	cmp	r0, #0
 800f698:	f000 808b 	beq.w	800f7b2 <_dtoa_r+0x4da>
 800f69c:	9b03      	ldr	r3, [sp, #12]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	f000 8087 	beq.w	800f7b2 <_dtoa_r+0x4da>
 800f6a4:	f1bb 0f00 	cmp.w	fp, #0
 800f6a8:	dd34      	ble.n	800f714 <_dtoa_r+0x43c>
 800f6aa:	4620      	mov	r0, r4
 800f6ac:	4b6d      	ldr	r3, [pc, #436]	@ (800f864 <_dtoa_r+0x58c>)
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	4629      	mov	r1, r5
 800f6b2:	f7f0 ffa9 	bl	8000608 <__aeabi_dmul>
 800f6b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f6ba:	f107 38ff 	add.w	r8, r7, #4294967295
 800f6be:	3601      	adds	r6, #1
 800f6c0:	465c      	mov	r4, fp
 800f6c2:	4630      	mov	r0, r6
 800f6c4:	f7f0 ff36 	bl	8000534 <__aeabi_i2d>
 800f6c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f6cc:	f7f0 ff9c 	bl	8000608 <__aeabi_dmul>
 800f6d0:	4b65      	ldr	r3, [pc, #404]	@ (800f868 <_dtoa_r+0x590>)
 800f6d2:	2200      	movs	r2, #0
 800f6d4:	f7f0 fde2 	bl	800029c <__adddf3>
 800f6d8:	4605      	mov	r5, r0
 800f6da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f6de:	2c00      	cmp	r4, #0
 800f6e0:	d16a      	bne.n	800f7b8 <_dtoa_r+0x4e0>
 800f6e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f6e6:	4b61      	ldr	r3, [pc, #388]	@ (800f86c <_dtoa_r+0x594>)
 800f6e8:	2200      	movs	r2, #0
 800f6ea:	f7f0 fdd5 	bl	8000298 <__aeabi_dsub>
 800f6ee:	4602      	mov	r2, r0
 800f6f0:	460b      	mov	r3, r1
 800f6f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f6f6:	462a      	mov	r2, r5
 800f6f8:	4633      	mov	r3, r6
 800f6fa:	f7f1 fa15 	bl	8000b28 <__aeabi_dcmpgt>
 800f6fe:	2800      	cmp	r0, #0
 800f700:	f040 8298 	bne.w	800fc34 <_dtoa_r+0x95c>
 800f704:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f708:	462a      	mov	r2, r5
 800f70a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f70e:	f7f1 f9ed 	bl	8000aec <__aeabi_dcmplt>
 800f712:	bb38      	cbnz	r0, 800f764 <_dtoa_r+0x48c>
 800f714:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800f718:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800f71c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f71e:	2b00      	cmp	r3, #0
 800f720:	f2c0 8157 	blt.w	800f9d2 <_dtoa_r+0x6fa>
 800f724:	2f0e      	cmp	r7, #14
 800f726:	f300 8154 	bgt.w	800f9d2 <_dtoa_r+0x6fa>
 800f72a:	4b4b      	ldr	r3, [pc, #300]	@ (800f858 <_dtoa_r+0x580>)
 800f72c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f730:	ed93 7b00 	vldr	d7, [r3]
 800f734:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f736:	2b00      	cmp	r3, #0
 800f738:	ed8d 7b00 	vstr	d7, [sp]
 800f73c:	f280 80e5 	bge.w	800f90a <_dtoa_r+0x632>
 800f740:	9b03      	ldr	r3, [sp, #12]
 800f742:	2b00      	cmp	r3, #0
 800f744:	f300 80e1 	bgt.w	800f90a <_dtoa_r+0x632>
 800f748:	d10c      	bne.n	800f764 <_dtoa_r+0x48c>
 800f74a:	4b48      	ldr	r3, [pc, #288]	@ (800f86c <_dtoa_r+0x594>)
 800f74c:	2200      	movs	r2, #0
 800f74e:	ec51 0b17 	vmov	r0, r1, d7
 800f752:	f7f0 ff59 	bl	8000608 <__aeabi_dmul>
 800f756:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f75a:	f7f1 f9db 	bl	8000b14 <__aeabi_dcmpge>
 800f75e:	2800      	cmp	r0, #0
 800f760:	f000 8266 	beq.w	800fc30 <_dtoa_r+0x958>
 800f764:	2400      	movs	r4, #0
 800f766:	4625      	mov	r5, r4
 800f768:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f76a:	4656      	mov	r6, sl
 800f76c:	ea6f 0803 	mvn.w	r8, r3
 800f770:	2700      	movs	r7, #0
 800f772:	4621      	mov	r1, r4
 800f774:	4648      	mov	r0, r9
 800f776:	f001 f80b 	bl	8010790 <_Bfree>
 800f77a:	2d00      	cmp	r5, #0
 800f77c:	f000 80bd 	beq.w	800f8fa <_dtoa_r+0x622>
 800f780:	b12f      	cbz	r7, 800f78e <_dtoa_r+0x4b6>
 800f782:	42af      	cmp	r7, r5
 800f784:	d003      	beq.n	800f78e <_dtoa_r+0x4b6>
 800f786:	4639      	mov	r1, r7
 800f788:	4648      	mov	r0, r9
 800f78a:	f001 f801 	bl	8010790 <_Bfree>
 800f78e:	4629      	mov	r1, r5
 800f790:	4648      	mov	r0, r9
 800f792:	f000 fffd 	bl	8010790 <_Bfree>
 800f796:	e0b0      	b.n	800f8fa <_dtoa_r+0x622>
 800f798:	07e2      	lsls	r2, r4, #31
 800f79a:	d505      	bpl.n	800f7a8 <_dtoa_r+0x4d0>
 800f79c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f7a0:	f7f0 ff32 	bl	8000608 <__aeabi_dmul>
 800f7a4:	3601      	adds	r6, #1
 800f7a6:	2301      	movs	r3, #1
 800f7a8:	1064      	asrs	r4, r4, #1
 800f7aa:	3508      	adds	r5, #8
 800f7ac:	e762      	b.n	800f674 <_dtoa_r+0x39c>
 800f7ae:	2602      	movs	r6, #2
 800f7b0:	e765      	b.n	800f67e <_dtoa_r+0x3a6>
 800f7b2:	9c03      	ldr	r4, [sp, #12]
 800f7b4:	46b8      	mov	r8, r7
 800f7b6:	e784      	b.n	800f6c2 <_dtoa_r+0x3ea>
 800f7b8:	4b27      	ldr	r3, [pc, #156]	@ (800f858 <_dtoa_r+0x580>)
 800f7ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f7bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f7c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f7c4:	4454      	add	r4, sl
 800f7c6:	2900      	cmp	r1, #0
 800f7c8:	d054      	beq.n	800f874 <_dtoa_r+0x59c>
 800f7ca:	4929      	ldr	r1, [pc, #164]	@ (800f870 <_dtoa_r+0x598>)
 800f7cc:	2000      	movs	r0, #0
 800f7ce:	f7f1 f845 	bl	800085c <__aeabi_ddiv>
 800f7d2:	4633      	mov	r3, r6
 800f7d4:	462a      	mov	r2, r5
 800f7d6:	f7f0 fd5f 	bl	8000298 <__aeabi_dsub>
 800f7da:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f7de:	4656      	mov	r6, sl
 800f7e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f7e4:	f7f1 f9c0 	bl	8000b68 <__aeabi_d2iz>
 800f7e8:	4605      	mov	r5, r0
 800f7ea:	f7f0 fea3 	bl	8000534 <__aeabi_i2d>
 800f7ee:	4602      	mov	r2, r0
 800f7f0:	460b      	mov	r3, r1
 800f7f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f7f6:	f7f0 fd4f 	bl	8000298 <__aeabi_dsub>
 800f7fa:	3530      	adds	r5, #48	@ 0x30
 800f7fc:	4602      	mov	r2, r0
 800f7fe:	460b      	mov	r3, r1
 800f800:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f804:	f806 5b01 	strb.w	r5, [r6], #1
 800f808:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f80c:	f7f1 f96e 	bl	8000aec <__aeabi_dcmplt>
 800f810:	2800      	cmp	r0, #0
 800f812:	d172      	bne.n	800f8fa <_dtoa_r+0x622>
 800f814:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f818:	4911      	ldr	r1, [pc, #68]	@ (800f860 <_dtoa_r+0x588>)
 800f81a:	2000      	movs	r0, #0
 800f81c:	f7f0 fd3c 	bl	8000298 <__aeabi_dsub>
 800f820:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f824:	f7f1 f962 	bl	8000aec <__aeabi_dcmplt>
 800f828:	2800      	cmp	r0, #0
 800f82a:	f040 80b4 	bne.w	800f996 <_dtoa_r+0x6be>
 800f82e:	42a6      	cmp	r6, r4
 800f830:	f43f af70 	beq.w	800f714 <_dtoa_r+0x43c>
 800f834:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f838:	4b0a      	ldr	r3, [pc, #40]	@ (800f864 <_dtoa_r+0x58c>)
 800f83a:	2200      	movs	r2, #0
 800f83c:	f7f0 fee4 	bl	8000608 <__aeabi_dmul>
 800f840:	4b08      	ldr	r3, [pc, #32]	@ (800f864 <_dtoa_r+0x58c>)
 800f842:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f846:	2200      	movs	r2, #0
 800f848:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f84c:	f7f0 fedc 	bl	8000608 <__aeabi_dmul>
 800f850:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f854:	e7c4      	b.n	800f7e0 <_dtoa_r+0x508>
 800f856:	bf00      	nop
 800f858:	08012128 	.word	0x08012128
 800f85c:	08012100 	.word	0x08012100
 800f860:	3ff00000 	.word	0x3ff00000
 800f864:	40240000 	.word	0x40240000
 800f868:	401c0000 	.word	0x401c0000
 800f86c:	40140000 	.word	0x40140000
 800f870:	3fe00000 	.word	0x3fe00000
 800f874:	4631      	mov	r1, r6
 800f876:	4628      	mov	r0, r5
 800f878:	f7f0 fec6 	bl	8000608 <__aeabi_dmul>
 800f87c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f880:	9413      	str	r4, [sp, #76]	@ 0x4c
 800f882:	4656      	mov	r6, sl
 800f884:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f888:	f7f1 f96e 	bl	8000b68 <__aeabi_d2iz>
 800f88c:	4605      	mov	r5, r0
 800f88e:	f7f0 fe51 	bl	8000534 <__aeabi_i2d>
 800f892:	4602      	mov	r2, r0
 800f894:	460b      	mov	r3, r1
 800f896:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f89a:	f7f0 fcfd 	bl	8000298 <__aeabi_dsub>
 800f89e:	3530      	adds	r5, #48	@ 0x30
 800f8a0:	f806 5b01 	strb.w	r5, [r6], #1
 800f8a4:	4602      	mov	r2, r0
 800f8a6:	460b      	mov	r3, r1
 800f8a8:	42a6      	cmp	r6, r4
 800f8aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f8ae:	f04f 0200 	mov.w	r2, #0
 800f8b2:	d124      	bne.n	800f8fe <_dtoa_r+0x626>
 800f8b4:	4baf      	ldr	r3, [pc, #700]	@ (800fb74 <_dtoa_r+0x89c>)
 800f8b6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f8ba:	f7f0 fcef 	bl	800029c <__adddf3>
 800f8be:	4602      	mov	r2, r0
 800f8c0:	460b      	mov	r3, r1
 800f8c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f8c6:	f7f1 f92f 	bl	8000b28 <__aeabi_dcmpgt>
 800f8ca:	2800      	cmp	r0, #0
 800f8cc:	d163      	bne.n	800f996 <_dtoa_r+0x6be>
 800f8ce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f8d2:	49a8      	ldr	r1, [pc, #672]	@ (800fb74 <_dtoa_r+0x89c>)
 800f8d4:	2000      	movs	r0, #0
 800f8d6:	f7f0 fcdf 	bl	8000298 <__aeabi_dsub>
 800f8da:	4602      	mov	r2, r0
 800f8dc:	460b      	mov	r3, r1
 800f8de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f8e2:	f7f1 f903 	bl	8000aec <__aeabi_dcmplt>
 800f8e6:	2800      	cmp	r0, #0
 800f8e8:	f43f af14 	beq.w	800f714 <_dtoa_r+0x43c>
 800f8ec:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800f8ee:	1e73      	subs	r3, r6, #1
 800f8f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f8f2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f8f6:	2b30      	cmp	r3, #48	@ 0x30
 800f8f8:	d0f8      	beq.n	800f8ec <_dtoa_r+0x614>
 800f8fa:	4647      	mov	r7, r8
 800f8fc:	e03b      	b.n	800f976 <_dtoa_r+0x69e>
 800f8fe:	4b9e      	ldr	r3, [pc, #632]	@ (800fb78 <_dtoa_r+0x8a0>)
 800f900:	f7f0 fe82 	bl	8000608 <__aeabi_dmul>
 800f904:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f908:	e7bc      	b.n	800f884 <_dtoa_r+0x5ac>
 800f90a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800f90e:	4656      	mov	r6, sl
 800f910:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f914:	4620      	mov	r0, r4
 800f916:	4629      	mov	r1, r5
 800f918:	f7f0 ffa0 	bl	800085c <__aeabi_ddiv>
 800f91c:	f7f1 f924 	bl	8000b68 <__aeabi_d2iz>
 800f920:	4680      	mov	r8, r0
 800f922:	f7f0 fe07 	bl	8000534 <__aeabi_i2d>
 800f926:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f92a:	f7f0 fe6d 	bl	8000608 <__aeabi_dmul>
 800f92e:	4602      	mov	r2, r0
 800f930:	460b      	mov	r3, r1
 800f932:	4620      	mov	r0, r4
 800f934:	4629      	mov	r1, r5
 800f936:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f93a:	f7f0 fcad 	bl	8000298 <__aeabi_dsub>
 800f93e:	f806 4b01 	strb.w	r4, [r6], #1
 800f942:	9d03      	ldr	r5, [sp, #12]
 800f944:	eba6 040a 	sub.w	r4, r6, sl
 800f948:	42a5      	cmp	r5, r4
 800f94a:	4602      	mov	r2, r0
 800f94c:	460b      	mov	r3, r1
 800f94e:	d133      	bne.n	800f9b8 <_dtoa_r+0x6e0>
 800f950:	f7f0 fca4 	bl	800029c <__adddf3>
 800f954:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f958:	4604      	mov	r4, r0
 800f95a:	460d      	mov	r5, r1
 800f95c:	f7f1 f8e4 	bl	8000b28 <__aeabi_dcmpgt>
 800f960:	b9c0      	cbnz	r0, 800f994 <_dtoa_r+0x6bc>
 800f962:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f966:	4620      	mov	r0, r4
 800f968:	4629      	mov	r1, r5
 800f96a:	f7f1 f8b5 	bl	8000ad8 <__aeabi_dcmpeq>
 800f96e:	b110      	cbz	r0, 800f976 <_dtoa_r+0x69e>
 800f970:	f018 0f01 	tst.w	r8, #1
 800f974:	d10e      	bne.n	800f994 <_dtoa_r+0x6bc>
 800f976:	9902      	ldr	r1, [sp, #8]
 800f978:	4648      	mov	r0, r9
 800f97a:	f000 ff09 	bl	8010790 <_Bfree>
 800f97e:	2300      	movs	r3, #0
 800f980:	7033      	strb	r3, [r6, #0]
 800f982:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f984:	3701      	adds	r7, #1
 800f986:	601f      	str	r7, [r3, #0]
 800f988:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	f000 824b 	beq.w	800fe26 <_dtoa_r+0xb4e>
 800f990:	601e      	str	r6, [r3, #0]
 800f992:	e248      	b.n	800fe26 <_dtoa_r+0xb4e>
 800f994:	46b8      	mov	r8, r7
 800f996:	4633      	mov	r3, r6
 800f998:	461e      	mov	r6, r3
 800f99a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f99e:	2a39      	cmp	r2, #57	@ 0x39
 800f9a0:	d106      	bne.n	800f9b0 <_dtoa_r+0x6d8>
 800f9a2:	459a      	cmp	sl, r3
 800f9a4:	d1f8      	bne.n	800f998 <_dtoa_r+0x6c0>
 800f9a6:	2230      	movs	r2, #48	@ 0x30
 800f9a8:	f108 0801 	add.w	r8, r8, #1
 800f9ac:	f88a 2000 	strb.w	r2, [sl]
 800f9b0:	781a      	ldrb	r2, [r3, #0]
 800f9b2:	3201      	adds	r2, #1
 800f9b4:	701a      	strb	r2, [r3, #0]
 800f9b6:	e7a0      	b.n	800f8fa <_dtoa_r+0x622>
 800f9b8:	4b6f      	ldr	r3, [pc, #444]	@ (800fb78 <_dtoa_r+0x8a0>)
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	f7f0 fe24 	bl	8000608 <__aeabi_dmul>
 800f9c0:	2200      	movs	r2, #0
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	4604      	mov	r4, r0
 800f9c6:	460d      	mov	r5, r1
 800f9c8:	f7f1 f886 	bl	8000ad8 <__aeabi_dcmpeq>
 800f9cc:	2800      	cmp	r0, #0
 800f9ce:	d09f      	beq.n	800f910 <_dtoa_r+0x638>
 800f9d0:	e7d1      	b.n	800f976 <_dtoa_r+0x69e>
 800f9d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f9d4:	2a00      	cmp	r2, #0
 800f9d6:	f000 80ea 	beq.w	800fbae <_dtoa_r+0x8d6>
 800f9da:	9a07      	ldr	r2, [sp, #28]
 800f9dc:	2a01      	cmp	r2, #1
 800f9de:	f300 80cd 	bgt.w	800fb7c <_dtoa_r+0x8a4>
 800f9e2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f9e4:	2a00      	cmp	r2, #0
 800f9e6:	f000 80c1 	beq.w	800fb6c <_dtoa_r+0x894>
 800f9ea:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f9ee:	9c08      	ldr	r4, [sp, #32]
 800f9f0:	9e00      	ldr	r6, [sp, #0]
 800f9f2:	9a00      	ldr	r2, [sp, #0]
 800f9f4:	441a      	add	r2, r3
 800f9f6:	9200      	str	r2, [sp, #0]
 800f9f8:	9a06      	ldr	r2, [sp, #24]
 800f9fa:	2101      	movs	r1, #1
 800f9fc:	441a      	add	r2, r3
 800f9fe:	4648      	mov	r0, r9
 800fa00:	9206      	str	r2, [sp, #24]
 800fa02:	f000 ffc3 	bl	801098c <__i2b>
 800fa06:	4605      	mov	r5, r0
 800fa08:	b166      	cbz	r6, 800fa24 <_dtoa_r+0x74c>
 800fa0a:	9b06      	ldr	r3, [sp, #24]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	dd09      	ble.n	800fa24 <_dtoa_r+0x74c>
 800fa10:	42b3      	cmp	r3, r6
 800fa12:	9a00      	ldr	r2, [sp, #0]
 800fa14:	bfa8      	it	ge
 800fa16:	4633      	movge	r3, r6
 800fa18:	1ad2      	subs	r2, r2, r3
 800fa1a:	9200      	str	r2, [sp, #0]
 800fa1c:	9a06      	ldr	r2, [sp, #24]
 800fa1e:	1af6      	subs	r6, r6, r3
 800fa20:	1ad3      	subs	r3, r2, r3
 800fa22:	9306      	str	r3, [sp, #24]
 800fa24:	9b08      	ldr	r3, [sp, #32]
 800fa26:	b30b      	cbz	r3, 800fa6c <_dtoa_r+0x794>
 800fa28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	f000 80c6 	beq.w	800fbbc <_dtoa_r+0x8e4>
 800fa30:	2c00      	cmp	r4, #0
 800fa32:	f000 80c0 	beq.w	800fbb6 <_dtoa_r+0x8de>
 800fa36:	4629      	mov	r1, r5
 800fa38:	4622      	mov	r2, r4
 800fa3a:	4648      	mov	r0, r9
 800fa3c:	f001 f85e 	bl	8010afc <__pow5mult>
 800fa40:	9a02      	ldr	r2, [sp, #8]
 800fa42:	4601      	mov	r1, r0
 800fa44:	4605      	mov	r5, r0
 800fa46:	4648      	mov	r0, r9
 800fa48:	f000 ffb6 	bl	80109b8 <__multiply>
 800fa4c:	9902      	ldr	r1, [sp, #8]
 800fa4e:	4680      	mov	r8, r0
 800fa50:	4648      	mov	r0, r9
 800fa52:	f000 fe9d 	bl	8010790 <_Bfree>
 800fa56:	9b08      	ldr	r3, [sp, #32]
 800fa58:	1b1b      	subs	r3, r3, r4
 800fa5a:	9308      	str	r3, [sp, #32]
 800fa5c:	f000 80b1 	beq.w	800fbc2 <_dtoa_r+0x8ea>
 800fa60:	9a08      	ldr	r2, [sp, #32]
 800fa62:	4641      	mov	r1, r8
 800fa64:	4648      	mov	r0, r9
 800fa66:	f001 f849 	bl	8010afc <__pow5mult>
 800fa6a:	9002      	str	r0, [sp, #8]
 800fa6c:	2101      	movs	r1, #1
 800fa6e:	4648      	mov	r0, r9
 800fa70:	f000 ff8c 	bl	801098c <__i2b>
 800fa74:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fa76:	4604      	mov	r4, r0
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	f000 81d8 	beq.w	800fe2e <_dtoa_r+0xb56>
 800fa7e:	461a      	mov	r2, r3
 800fa80:	4601      	mov	r1, r0
 800fa82:	4648      	mov	r0, r9
 800fa84:	f001 f83a 	bl	8010afc <__pow5mult>
 800fa88:	9b07      	ldr	r3, [sp, #28]
 800fa8a:	2b01      	cmp	r3, #1
 800fa8c:	4604      	mov	r4, r0
 800fa8e:	f300 809f 	bgt.w	800fbd0 <_dtoa_r+0x8f8>
 800fa92:	9b04      	ldr	r3, [sp, #16]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	f040 8097 	bne.w	800fbc8 <_dtoa_r+0x8f0>
 800fa9a:	9b05      	ldr	r3, [sp, #20]
 800fa9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	f040 8093 	bne.w	800fbcc <_dtoa_r+0x8f4>
 800faa6:	9b05      	ldr	r3, [sp, #20]
 800faa8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800faac:	0d1b      	lsrs	r3, r3, #20
 800faae:	051b      	lsls	r3, r3, #20
 800fab0:	b133      	cbz	r3, 800fac0 <_dtoa_r+0x7e8>
 800fab2:	9b00      	ldr	r3, [sp, #0]
 800fab4:	3301      	adds	r3, #1
 800fab6:	9300      	str	r3, [sp, #0]
 800fab8:	9b06      	ldr	r3, [sp, #24]
 800faba:	3301      	adds	r3, #1
 800fabc:	9306      	str	r3, [sp, #24]
 800fabe:	2301      	movs	r3, #1
 800fac0:	9308      	str	r3, [sp, #32]
 800fac2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	f000 81b8 	beq.w	800fe3a <_dtoa_r+0xb62>
 800faca:	6923      	ldr	r3, [r4, #16]
 800facc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fad0:	6918      	ldr	r0, [r3, #16]
 800fad2:	f000 ff0f 	bl	80108f4 <__hi0bits>
 800fad6:	f1c0 0020 	rsb	r0, r0, #32
 800fada:	9b06      	ldr	r3, [sp, #24]
 800fadc:	4418      	add	r0, r3
 800fade:	f010 001f 	ands.w	r0, r0, #31
 800fae2:	f000 8082 	beq.w	800fbea <_dtoa_r+0x912>
 800fae6:	f1c0 0320 	rsb	r3, r0, #32
 800faea:	2b04      	cmp	r3, #4
 800faec:	dd73      	ble.n	800fbd6 <_dtoa_r+0x8fe>
 800faee:	9b00      	ldr	r3, [sp, #0]
 800faf0:	f1c0 001c 	rsb	r0, r0, #28
 800faf4:	4403      	add	r3, r0
 800faf6:	9300      	str	r3, [sp, #0]
 800faf8:	9b06      	ldr	r3, [sp, #24]
 800fafa:	4403      	add	r3, r0
 800fafc:	4406      	add	r6, r0
 800fafe:	9306      	str	r3, [sp, #24]
 800fb00:	9b00      	ldr	r3, [sp, #0]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	dd05      	ble.n	800fb12 <_dtoa_r+0x83a>
 800fb06:	9902      	ldr	r1, [sp, #8]
 800fb08:	461a      	mov	r2, r3
 800fb0a:	4648      	mov	r0, r9
 800fb0c:	f001 f850 	bl	8010bb0 <__lshift>
 800fb10:	9002      	str	r0, [sp, #8]
 800fb12:	9b06      	ldr	r3, [sp, #24]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	dd05      	ble.n	800fb24 <_dtoa_r+0x84c>
 800fb18:	4621      	mov	r1, r4
 800fb1a:	461a      	mov	r2, r3
 800fb1c:	4648      	mov	r0, r9
 800fb1e:	f001 f847 	bl	8010bb0 <__lshift>
 800fb22:	4604      	mov	r4, r0
 800fb24:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d061      	beq.n	800fbee <_dtoa_r+0x916>
 800fb2a:	9802      	ldr	r0, [sp, #8]
 800fb2c:	4621      	mov	r1, r4
 800fb2e:	f001 f8ab 	bl	8010c88 <__mcmp>
 800fb32:	2800      	cmp	r0, #0
 800fb34:	da5b      	bge.n	800fbee <_dtoa_r+0x916>
 800fb36:	2300      	movs	r3, #0
 800fb38:	9902      	ldr	r1, [sp, #8]
 800fb3a:	220a      	movs	r2, #10
 800fb3c:	4648      	mov	r0, r9
 800fb3e:	f000 fe49 	bl	80107d4 <__multadd>
 800fb42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb44:	9002      	str	r0, [sp, #8]
 800fb46:	f107 38ff 	add.w	r8, r7, #4294967295
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	f000 8177 	beq.w	800fe3e <_dtoa_r+0xb66>
 800fb50:	4629      	mov	r1, r5
 800fb52:	2300      	movs	r3, #0
 800fb54:	220a      	movs	r2, #10
 800fb56:	4648      	mov	r0, r9
 800fb58:	f000 fe3c 	bl	80107d4 <__multadd>
 800fb5c:	f1bb 0f00 	cmp.w	fp, #0
 800fb60:	4605      	mov	r5, r0
 800fb62:	dc6f      	bgt.n	800fc44 <_dtoa_r+0x96c>
 800fb64:	9b07      	ldr	r3, [sp, #28]
 800fb66:	2b02      	cmp	r3, #2
 800fb68:	dc49      	bgt.n	800fbfe <_dtoa_r+0x926>
 800fb6a:	e06b      	b.n	800fc44 <_dtoa_r+0x96c>
 800fb6c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800fb6e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800fb72:	e73c      	b.n	800f9ee <_dtoa_r+0x716>
 800fb74:	3fe00000 	.word	0x3fe00000
 800fb78:	40240000 	.word	0x40240000
 800fb7c:	9b03      	ldr	r3, [sp, #12]
 800fb7e:	1e5c      	subs	r4, r3, #1
 800fb80:	9b08      	ldr	r3, [sp, #32]
 800fb82:	42a3      	cmp	r3, r4
 800fb84:	db09      	blt.n	800fb9a <_dtoa_r+0x8c2>
 800fb86:	1b1c      	subs	r4, r3, r4
 800fb88:	9b03      	ldr	r3, [sp, #12]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	f6bf af30 	bge.w	800f9f0 <_dtoa_r+0x718>
 800fb90:	9b00      	ldr	r3, [sp, #0]
 800fb92:	9a03      	ldr	r2, [sp, #12]
 800fb94:	1a9e      	subs	r6, r3, r2
 800fb96:	2300      	movs	r3, #0
 800fb98:	e72b      	b.n	800f9f2 <_dtoa_r+0x71a>
 800fb9a:	9b08      	ldr	r3, [sp, #32]
 800fb9c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fb9e:	9408      	str	r4, [sp, #32]
 800fba0:	1ae3      	subs	r3, r4, r3
 800fba2:	441a      	add	r2, r3
 800fba4:	9e00      	ldr	r6, [sp, #0]
 800fba6:	9b03      	ldr	r3, [sp, #12]
 800fba8:	920d      	str	r2, [sp, #52]	@ 0x34
 800fbaa:	2400      	movs	r4, #0
 800fbac:	e721      	b.n	800f9f2 <_dtoa_r+0x71a>
 800fbae:	9c08      	ldr	r4, [sp, #32]
 800fbb0:	9e00      	ldr	r6, [sp, #0]
 800fbb2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800fbb4:	e728      	b.n	800fa08 <_dtoa_r+0x730>
 800fbb6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800fbba:	e751      	b.n	800fa60 <_dtoa_r+0x788>
 800fbbc:	9a08      	ldr	r2, [sp, #32]
 800fbbe:	9902      	ldr	r1, [sp, #8]
 800fbc0:	e750      	b.n	800fa64 <_dtoa_r+0x78c>
 800fbc2:	f8cd 8008 	str.w	r8, [sp, #8]
 800fbc6:	e751      	b.n	800fa6c <_dtoa_r+0x794>
 800fbc8:	2300      	movs	r3, #0
 800fbca:	e779      	b.n	800fac0 <_dtoa_r+0x7e8>
 800fbcc:	9b04      	ldr	r3, [sp, #16]
 800fbce:	e777      	b.n	800fac0 <_dtoa_r+0x7e8>
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	9308      	str	r3, [sp, #32]
 800fbd4:	e779      	b.n	800faca <_dtoa_r+0x7f2>
 800fbd6:	d093      	beq.n	800fb00 <_dtoa_r+0x828>
 800fbd8:	9a00      	ldr	r2, [sp, #0]
 800fbda:	331c      	adds	r3, #28
 800fbdc:	441a      	add	r2, r3
 800fbde:	9200      	str	r2, [sp, #0]
 800fbe0:	9a06      	ldr	r2, [sp, #24]
 800fbe2:	441a      	add	r2, r3
 800fbe4:	441e      	add	r6, r3
 800fbe6:	9206      	str	r2, [sp, #24]
 800fbe8:	e78a      	b.n	800fb00 <_dtoa_r+0x828>
 800fbea:	4603      	mov	r3, r0
 800fbec:	e7f4      	b.n	800fbd8 <_dtoa_r+0x900>
 800fbee:	9b03      	ldr	r3, [sp, #12]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	46b8      	mov	r8, r7
 800fbf4:	dc20      	bgt.n	800fc38 <_dtoa_r+0x960>
 800fbf6:	469b      	mov	fp, r3
 800fbf8:	9b07      	ldr	r3, [sp, #28]
 800fbfa:	2b02      	cmp	r3, #2
 800fbfc:	dd1e      	ble.n	800fc3c <_dtoa_r+0x964>
 800fbfe:	f1bb 0f00 	cmp.w	fp, #0
 800fc02:	f47f adb1 	bne.w	800f768 <_dtoa_r+0x490>
 800fc06:	4621      	mov	r1, r4
 800fc08:	465b      	mov	r3, fp
 800fc0a:	2205      	movs	r2, #5
 800fc0c:	4648      	mov	r0, r9
 800fc0e:	f000 fde1 	bl	80107d4 <__multadd>
 800fc12:	4601      	mov	r1, r0
 800fc14:	4604      	mov	r4, r0
 800fc16:	9802      	ldr	r0, [sp, #8]
 800fc18:	f001 f836 	bl	8010c88 <__mcmp>
 800fc1c:	2800      	cmp	r0, #0
 800fc1e:	f77f ada3 	ble.w	800f768 <_dtoa_r+0x490>
 800fc22:	4656      	mov	r6, sl
 800fc24:	2331      	movs	r3, #49	@ 0x31
 800fc26:	f806 3b01 	strb.w	r3, [r6], #1
 800fc2a:	f108 0801 	add.w	r8, r8, #1
 800fc2e:	e59f      	b.n	800f770 <_dtoa_r+0x498>
 800fc30:	9c03      	ldr	r4, [sp, #12]
 800fc32:	46b8      	mov	r8, r7
 800fc34:	4625      	mov	r5, r4
 800fc36:	e7f4      	b.n	800fc22 <_dtoa_r+0x94a>
 800fc38:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800fc3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	f000 8101 	beq.w	800fe46 <_dtoa_r+0xb6e>
 800fc44:	2e00      	cmp	r6, #0
 800fc46:	dd05      	ble.n	800fc54 <_dtoa_r+0x97c>
 800fc48:	4629      	mov	r1, r5
 800fc4a:	4632      	mov	r2, r6
 800fc4c:	4648      	mov	r0, r9
 800fc4e:	f000 ffaf 	bl	8010bb0 <__lshift>
 800fc52:	4605      	mov	r5, r0
 800fc54:	9b08      	ldr	r3, [sp, #32]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d05c      	beq.n	800fd14 <_dtoa_r+0xa3c>
 800fc5a:	6869      	ldr	r1, [r5, #4]
 800fc5c:	4648      	mov	r0, r9
 800fc5e:	f000 fd57 	bl	8010710 <_Balloc>
 800fc62:	4606      	mov	r6, r0
 800fc64:	b928      	cbnz	r0, 800fc72 <_dtoa_r+0x99a>
 800fc66:	4b82      	ldr	r3, [pc, #520]	@ (800fe70 <_dtoa_r+0xb98>)
 800fc68:	4602      	mov	r2, r0
 800fc6a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800fc6e:	f7ff bb4a 	b.w	800f306 <_dtoa_r+0x2e>
 800fc72:	692a      	ldr	r2, [r5, #16]
 800fc74:	3202      	adds	r2, #2
 800fc76:	0092      	lsls	r2, r2, #2
 800fc78:	f105 010c 	add.w	r1, r5, #12
 800fc7c:	300c      	adds	r0, #12
 800fc7e:	f7ff fa82 	bl	800f186 <memcpy>
 800fc82:	2201      	movs	r2, #1
 800fc84:	4631      	mov	r1, r6
 800fc86:	4648      	mov	r0, r9
 800fc88:	f000 ff92 	bl	8010bb0 <__lshift>
 800fc8c:	f10a 0301 	add.w	r3, sl, #1
 800fc90:	9300      	str	r3, [sp, #0]
 800fc92:	eb0a 030b 	add.w	r3, sl, fp
 800fc96:	9308      	str	r3, [sp, #32]
 800fc98:	9b04      	ldr	r3, [sp, #16]
 800fc9a:	f003 0301 	and.w	r3, r3, #1
 800fc9e:	462f      	mov	r7, r5
 800fca0:	9306      	str	r3, [sp, #24]
 800fca2:	4605      	mov	r5, r0
 800fca4:	9b00      	ldr	r3, [sp, #0]
 800fca6:	9802      	ldr	r0, [sp, #8]
 800fca8:	4621      	mov	r1, r4
 800fcaa:	f103 3bff 	add.w	fp, r3, #4294967295
 800fcae:	f7ff fa89 	bl	800f1c4 <quorem>
 800fcb2:	4603      	mov	r3, r0
 800fcb4:	3330      	adds	r3, #48	@ 0x30
 800fcb6:	9003      	str	r0, [sp, #12]
 800fcb8:	4639      	mov	r1, r7
 800fcba:	9802      	ldr	r0, [sp, #8]
 800fcbc:	9309      	str	r3, [sp, #36]	@ 0x24
 800fcbe:	f000 ffe3 	bl	8010c88 <__mcmp>
 800fcc2:	462a      	mov	r2, r5
 800fcc4:	9004      	str	r0, [sp, #16]
 800fcc6:	4621      	mov	r1, r4
 800fcc8:	4648      	mov	r0, r9
 800fcca:	f000 fff9 	bl	8010cc0 <__mdiff>
 800fcce:	68c2      	ldr	r2, [r0, #12]
 800fcd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fcd2:	4606      	mov	r6, r0
 800fcd4:	bb02      	cbnz	r2, 800fd18 <_dtoa_r+0xa40>
 800fcd6:	4601      	mov	r1, r0
 800fcd8:	9802      	ldr	r0, [sp, #8]
 800fcda:	f000 ffd5 	bl	8010c88 <__mcmp>
 800fcde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fce0:	4602      	mov	r2, r0
 800fce2:	4631      	mov	r1, r6
 800fce4:	4648      	mov	r0, r9
 800fce6:	920c      	str	r2, [sp, #48]	@ 0x30
 800fce8:	9309      	str	r3, [sp, #36]	@ 0x24
 800fcea:	f000 fd51 	bl	8010790 <_Bfree>
 800fcee:	9b07      	ldr	r3, [sp, #28]
 800fcf0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800fcf2:	9e00      	ldr	r6, [sp, #0]
 800fcf4:	ea42 0103 	orr.w	r1, r2, r3
 800fcf8:	9b06      	ldr	r3, [sp, #24]
 800fcfa:	4319      	orrs	r1, r3
 800fcfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fcfe:	d10d      	bne.n	800fd1c <_dtoa_r+0xa44>
 800fd00:	2b39      	cmp	r3, #57	@ 0x39
 800fd02:	d027      	beq.n	800fd54 <_dtoa_r+0xa7c>
 800fd04:	9a04      	ldr	r2, [sp, #16]
 800fd06:	2a00      	cmp	r2, #0
 800fd08:	dd01      	ble.n	800fd0e <_dtoa_r+0xa36>
 800fd0a:	9b03      	ldr	r3, [sp, #12]
 800fd0c:	3331      	adds	r3, #49	@ 0x31
 800fd0e:	f88b 3000 	strb.w	r3, [fp]
 800fd12:	e52e      	b.n	800f772 <_dtoa_r+0x49a>
 800fd14:	4628      	mov	r0, r5
 800fd16:	e7b9      	b.n	800fc8c <_dtoa_r+0x9b4>
 800fd18:	2201      	movs	r2, #1
 800fd1a:	e7e2      	b.n	800fce2 <_dtoa_r+0xa0a>
 800fd1c:	9904      	ldr	r1, [sp, #16]
 800fd1e:	2900      	cmp	r1, #0
 800fd20:	db04      	blt.n	800fd2c <_dtoa_r+0xa54>
 800fd22:	9807      	ldr	r0, [sp, #28]
 800fd24:	4301      	orrs	r1, r0
 800fd26:	9806      	ldr	r0, [sp, #24]
 800fd28:	4301      	orrs	r1, r0
 800fd2a:	d120      	bne.n	800fd6e <_dtoa_r+0xa96>
 800fd2c:	2a00      	cmp	r2, #0
 800fd2e:	ddee      	ble.n	800fd0e <_dtoa_r+0xa36>
 800fd30:	9902      	ldr	r1, [sp, #8]
 800fd32:	9300      	str	r3, [sp, #0]
 800fd34:	2201      	movs	r2, #1
 800fd36:	4648      	mov	r0, r9
 800fd38:	f000 ff3a 	bl	8010bb0 <__lshift>
 800fd3c:	4621      	mov	r1, r4
 800fd3e:	9002      	str	r0, [sp, #8]
 800fd40:	f000 ffa2 	bl	8010c88 <__mcmp>
 800fd44:	2800      	cmp	r0, #0
 800fd46:	9b00      	ldr	r3, [sp, #0]
 800fd48:	dc02      	bgt.n	800fd50 <_dtoa_r+0xa78>
 800fd4a:	d1e0      	bne.n	800fd0e <_dtoa_r+0xa36>
 800fd4c:	07da      	lsls	r2, r3, #31
 800fd4e:	d5de      	bpl.n	800fd0e <_dtoa_r+0xa36>
 800fd50:	2b39      	cmp	r3, #57	@ 0x39
 800fd52:	d1da      	bne.n	800fd0a <_dtoa_r+0xa32>
 800fd54:	2339      	movs	r3, #57	@ 0x39
 800fd56:	f88b 3000 	strb.w	r3, [fp]
 800fd5a:	4633      	mov	r3, r6
 800fd5c:	461e      	mov	r6, r3
 800fd5e:	3b01      	subs	r3, #1
 800fd60:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fd64:	2a39      	cmp	r2, #57	@ 0x39
 800fd66:	d04e      	beq.n	800fe06 <_dtoa_r+0xb2e>
 800fd68:	3201      	adds	r2, #1
 800fd6a:	701a      	strb	r2, [r3, #0]
 800fd6c:	e501      	b.n	800f772 <_dtoa_r+0x49a>
 800fd6e:	2a00      	cmp	r2, #0
 800fd70:	dd03      	ble.n	800fd7a <_dtoa_r+0xaa2>
 800fd72:	2b39      	cmp	r3, #57	@ 0x39
 800fd74:	d0ee      	beq.n	800fd54 <_dtoa_r+0xa7c>
 800fd76:	3301      	adds	r3, #1
 800fd78:	e7c9      	b.n	800fd0e <_dtoa_r+0xa36>
 800fd7a:	9a00      	ldr	r2, [sp, #0]
 800fd7c:	9908      	ldr	r1, [sp, #32]
 800fd7e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800fd82:	428a      	cmp	r2, r1
 800fd84:	d028      	beq.n	800fdd8 <_dtoa_r+0xb00>
 800fd86:	9902      	ldr	r1, [sp, #8]
 800fd88:	2300      	movs	r3, #0
 800fd8a:	220a      	movs	r2, #10
 800fd8c:	4648      	mov	r0, r9
 800fd8e:	f000 fd21 	bl	80107d4 <__multadd>
 800fd92:	42af      	cmp	r7, r5
 800fd94:	9002      	str	r0, [sp, #8]
 800fd96:	f04f 0300 	mov.w	r3, #0
 800fd9a:	f04f 020a 	mov.w	r2, #10
 800fd9e:	4639      	mov	r1, r7
 800fda0:	4648      	mov	r0, r9
 800fda2:	d107      	bne.n	800fdb4 <_dtoa_r+0xadc>
 800fda4:	f000 fd16 	bl	80107d4 <__multadd>
 800fda8:	4607      	mov	r7, r0
 800fdaa:	4605      	mov	r5, r0
 800fdac:	9b00      	ldr	r3, [sp, #0]
 800fdae:	3301      	adds	r3, #1
 800fdb0:	9300      	str	r3, [sp, #0]
 800fdb2:	e777      	b.n	800fca4 <_dtoa_r+0x9cc>
 800fdb4:	f000 fd0e 	bl	80107d4 <__multadd>
 800fdb8:	4629      	mov	r1, r5
 800fdba:	4607      	mov	r7, r0
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	220a      	movs	r2, #10
 800fdc0:	4648      	mov	r0, r9
 800fdc2:	f000 fd07 	bl	80107d4 <__multadd>
 800fdc6:	4605      	mov	r5, r0
 800fdc8:	e7f0      	b.n	800fdac <_dtoa_r+0xad4>
 800fdca:	f1bb 0f00 	cmp.w	fp, #0
 800fdce:	bfcc      	ite	gt
 800fdd0:	465e      	movgt	r6, fp
 800fdd2:	2601      	movle	r6, #1
 800fdd4:	4456      	add	r6, sl
 800fdd6:	2700      	movs	r7, #0
 800fdd8:	9902      	ldr	r1, [sp, #8]
 800fdda:	9300      	str	r3, [sp, #0]
 800fddc:	2201      	movs	r2, #1
 800fdde:	4648      	mov	r0, r9
 800fde0:	f000 fee6 	bl	8010bb0 <__lshift>
 800fde4:	4621      	mov	r1, r4
 800fde6:	9002      	str	r0, [sp, #8]
 800fde8:	f000 ff4e 	bl	8010c88 <__mcmp>
 800fdec:	2800      	cmp	r0, #0
 800fdee:	dcb4      	bgt.n	800fd5a <_dtoa_r+0xa82>
 800fdf0:	d102      	bne.n	800fdf8 <_dtoa_r+0xb20>
 800fdf2:	9b00      	ldr	r3, [sp, #0]
 800fdf4:	07db      	lsls	r3, r3, #31
 800fdf6:	d4b0      	bmi.n	800fd5a <_dtoa_r+0xa82>
 800fdf8:	4633      	mov	r3, r6
 800fdfa:	461e      	mov	r6, r3
 800fdfc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fe00:	2a30      	cmp	r2, #48	@ 0x30
 800fe02:	d0fa      	beq.n	800fdfa <_dtoa_r+0xb22>
 800fe04:	e4b5      	b.n	800f772 <_dtoa_r+0x49a>
 800fe06:	459a      	cmp	sl, r3
 800fe08:	d1a8      	bne.n	800fd5c <_dtoa_r+0xa84>
 800fe0a:	2331      	movs	r3, #49	@ 0x31
 800fe0c:	f108 0801 	add.w	r8, r8, #1
 800fe10:	f88a 3000 	strb.w	r3, [sl]
 800fe14:	e4ad      	b.n	800f772 <_dtoa_r+0x49a>
 800fe16:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fe18:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800fe74 <_dtoa_r+0xb9c>
 800fe1c:	b11b      	cbz	r3, 800fe26 <_dtoa_r+0xb4e>
 800fe1e:	f10a 0308 	add.w	r3, sl, #8
 800fe22:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800fe24:	6013      	str	r3, [r2, #0]
 800fe26:	4650      	mov	r0, sl
 800fe28:	b017      	add	sp, #92	@ 0x5c
 800fe2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe2e:	9b07      	ldr	r3, [sp, #28]
 800fe30:	2b01      	cmp	r3, #1
 800fe32:	f77f ae2e 	ble.w	800fa92 <_dtoa_r+0x7ba>
 800fe36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fe38:	9308      	str	r3, [sp, #32]
 800fe3a:	2001      	movs	r0, #1
 800fe3c:	e64d      	b.n	800fada <_dtoa_r+0x802>
 800fe3e:	f1bb 0f00 	cmp.w	fp, #0
 800fe42:	f77f aed9 	ble.w	800fbf8 <_dtoa_r+0x920>
 800fe46:	4656      	mov	r6, sl
 800fe48:	9802      	ldr	r0, [sp, #8]
 800fe4a:	4621      	mov	r1, r4
 800fe4c:	f7ff f9ba 	bl	800f1c4 <quorem>
 800fe50:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800fe54:	f806 3b01 	strb.w	r3, [r6], #1
 800fe58:	eba6 020a 	sub.w	r2, r6, sl
 800fe5c:	4593      	cmp	fp, r2
 800fe5e:	ddb4      	ble.n	800fdca <_dtoa_r+0xaf2>
 800fe60:	9902      	ldr	r1, [sp, #8]
 800fe62:	2300      	movs	r3, #0
 800fe64:	220a      	movs	r2, #10
 800fe66:	4648      	mov	r0, r9
 800fe68:	f000 fcb4 	bl	80107d4 <__multadd>
 800fe6c:	9002      	str	r0, [sp, #8]
 800fe6e:	e7eb      	b.n	800fe48 <_dtoa_r+0xb70>
 800fe70:	08011f83 	.word	0x08011f83
 800fe74:	08011f07 	.word	0x08011f07

0800fe78 <_free_r>:
 800fe78:	b538      	push	{r3, r4, r5, lr}
 800fe7a:	4605      	mov	r5, r0
 800fe7c:	2900      	cmp	r1, #0
 800fe7e:	d041      	beq.n	800ff04 <_free_r+0x8c>
 800fe80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe84:	1f0c      	subs	r4, r1, #4
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	bfb8      	it	lt
 800fe8a:	18e4      	addlt	r4, r4, r3
 800fe8c:	f000 fc34 	bl	80106f8 <__malloc_lock>
 800fe90:	4a1d      	ldr	r2, [pc, #116]	@ (800ff08 <_free_r+0x90>)
 800fe92:	6813      	ldr	r3, [r2, #0]
 800fe94:	b933      	cbnz	r3, 800fea4 <_free_r+0x2c>
 800fe96:	6063      	str	r3, [r4, #4]
 800fe98:	6014      	str	r4, [r2, #0]
 800fe9a:	4628      	mov	r0, r5
 800fe9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fea0:	f000 bc30 	b.w	8010704 <__malloc_unlock>
 800fea4:	42a3      	cmp	r3, r4
 800fea6:	d908      	bls.n	800feba <_free_r+0x42>
 800fea8:	6820      	ldr	r0, [r4, #0]
 800feaa:	1821      	adds	r1, r4, r0
 800feac:	428b      	cmp	r3, r1
 800feae:	bf01      	itttt	eq
 800feb0:	6819      	ldreq	r1, [r3, #0]
 800feb2:	685b      	ldreq	r3, [r3, #4]
 800feb4:	1809      	addeq	r1, r1, r0
 800feb6:	6021      	streq	r1, [r4, #0]
 800feb8:	e7ed      	b.n	800fe96 <_free_r+0x1e>
 800feba:	461a      	mov	r2, r3
 800febc:	685b      	ldr	r3, [r3, #4]
 800febe:	b10b      	cbz	r3, 800fec4 <_free_r+0x4c>
 800fec0:	42a3      	cmp	r3, r4
 800fec2:	d9fa      	bls.n	800feba <_free_r+0x42>
 800fec4:	6811      	ldr	r1, [r2, #0]
 800fec6:	1850      	adds	r0, r2, r1
 800fec8:	42a0      	cmp	r0, r4
 800feca:	d10b      	bne.n	800fee4 <_free_r+0x6c>
 800fecc:	6820      	ldr	r0, [r4, #0]
 800fece:	4401      	add	r1, r0
 800fed0:	1850      	adds	r0, r2, r1
 800fed2:	4283      	cmp	r3, r0
 800fed4:	6011      	str	r1, [r2, #0]
 800fed6:	d1e0      	bne.n	800fe9a <_free_r+0x22>
 800fed8:	6818      	ldr	r0, [r3, #0]
 800feda:	685b      	ldr	r3, [r3, #4]
 800fedc:	6053      	str	r3, [r2, #4]
 800fede:	4408      	add	r0, r1
 800fee0:	6010      	str	r0, [r2, #0]
 800fee2:	e7da      	b.n	800fe9a <_free_r+0x22>
 800fee4:	d902      	bls.n	800feec <_free_r+0x74>
 800fee6:	230c      	movs	r3, #12
 800fee8:	602b      	str	r3, [r5, #0]
 800feea:	e7d6      	b.n	800fe9a <_free_r+0x22>
 800feec:	6820      	ldr	r0, [r4, #0]
 800feee:	1821      	adds	r1, r4, r0
 800fef0:	428b      	cmp	r3, r1
 800fef2:	bf04      	itt	eq
 800fef4:	6819      	ldreq	r1, [r3, #0]
 800fef6:	685b      	ldreq	r3, [r3, #4]
 800fef8:	6063      	str	r3, [r4, #4]
 800fefa:	bf04      	itt	eq
 800fefc:	1809      	addeq	r1, r1, r0
 800fefe:	6021      	streq	r1, [r4, #0]
 800ff00:	6054      	str	r4, [r2, #4]
 800ff02:	e7ca      	b.n	800fe9a <_free_r+0x22>
 800ff04:	bd38      	pop	{r3, r4, r5, pc}
 800ff06:	bf00      	nop
 800ff08:	200052fc 	.word	0x200052fc

0800ff0c <rshift>:
 800ff0c:	6903      	ldr	r3, [r0, #16]
 800ff0e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ff12:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ff16:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ff1a:	f100 0414 	add.w	r4, r0, #20
 800ff1e:	dd45      	ble.n	800ffac <rshift+0xa0>
 800ff20:	f011 011f 	ands.w	r1, r1, #31
 800ff24:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ff28:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ff2c:	d10c      	bne.n	800ff48 <rshift+0x3c>
 800ff2e:	f100 0710 	add.w	r7, r0, #16
 800ff32:	4629      	mov	r1, r5
 800ff34:	42b1      	cmp	r1, r6
 800ff36:	d334      	bcc.n	800ffa2 <rshift+0x96>
 800ff38:	1a9b      	subs	r3, r3, r2
 800ff3a:	009b      	lsls	r3, r3, #2
 800ff3c:	1eea      	subs	r2, r5, #3
 800ff3e:	4296      	cmp	r6, r2
 800ff40:	bf38      	it	cc
 800ff42:	2300      	movcc	r3, #0
 800ff44:	4423      	add	r3, r4
 800ff46:	e015      	b.n	800ff74 <rshift+0x68>
 800ff48:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ff4c:	f1c1 0820 	rsb	r8, r1, #32
 800ff50:	40cf      	lsrs	r7, r1
 800ff52:	f105 0e04 	add.w	lr, r5, #4
 800ff56:	46a1      	mov	r9, r4
 800ff58:	4576      	cmp	r6, lr
 800ff5a:	46f4      	mov	ip, lr
 800ff5c:	d815      	bhi.n	800ff8a <rshift+0x7e>
 800ff5e:	1a9a      	subs	r2, r3, r2
 800ff60:	0092      	lsls	r2, r2, #2
 800ff62:	3a04      	subs	r2, #4
 800ff64:	3501      	adds	r5, #1
 800ff66:	42ae      	cmp	r6, r5
 800ff68:	bf38      	it	cc
 800ff6a:	2200      	movcc	r2, #0
 800ff6c:	18a3      	adds	r3, r4, r2
 800ff6e:	50a7      	str	r7, [r4, r2]
 800ff70:	b107      	cbz	r7, 800ff74 <rshift+0x68>
 800ff72:	3304      	adds	r3, #4
 800ff74:	1b1a      	subs	r2, r3, r4
 800ff76:	42a3      	cmp	r3, r4
 800ff78:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ff7c:	bf08      	it	eq
 800ff7e:	2300      	moveq	r3, #0
 800ff80:	6102      	str	r2, [r0, #16]
 800ff82:	bf08      	it	eq
 800ff84:	6143      	streq	r3, [r0, #20]
 800ff86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff8a:	f8dc c000 	ldr.w	ip, [ip]
 800ff8e:	fa0c fc08 	lsl.w	ip, ip, r8
 800ff92:	ea4c 0707 	orr.w	r7, ip, r7
 800ff96:	f849 7b04 	str.w	r7, [r9], #4
 800ff9a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ff9e:	40cf      	lsrs	r7, r1
 800ffa0:	e7da      	b.n	800ff58 <rshift+0x4c>
 800ffa2:	f851 cb04 	ldr.w	ip, [r1], #4
 800ffa6:	f847 cf04 	str.w	ip, [r7, #4]!
 800ffaa:	e7c3      	b.n	800ff34 <rshift+0x28>
 800ffac:	4623      	mov	r3, r4
 800ffae:	e7e1      	b.n	800ff74 <rshift+0x68>

0800ffb0 <__hexdig_fun>:
 800ffb0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ffb4:	2b09      	cmp	r3, #9
 800ffb6:	d802      	bhi.n	800ffbe <__hexdig_fun+0xe>
 800ffb8:	3820      	subs	r0, #32
 800ffba:	b2c0      	uxtb	r0, r0
 800ffbc:	4770      	bx	lr
 800ffbe:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ffc2:	2b05      	cmp	r3, #5
 800ffc4:	d801      	bhi.n	800ffca <__hexdig_fun+0x1a>
 800ffc6:	3847      	subs	r0, #71	@ 0x47
 800ffc8:	e7f7      	b.n	800ffba <__hexdig_fun+0xa>
 800ffca:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ffce:	2b05      	cmp	r3, #5
 800ffd0:	d801      	bhi.n	800ffd6 <__hexdig_fun+0x26>
 800ffd2:	3827      	subs	r0, #39	@ 0x27
 800ffd4:	e7f1      	b.n	800ffba <__hexdig_fun+0xa>
 800ffd6:	2000      	movs	r0, #0
 800ffd8:	4770      	bx	lr
	...

0800ffdc <__gethex>:
 800ffdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffe0:	b085      	sub	sp, #20
 800ffe2:	468a      	mov	sl, r1
 800ffe4:	9302      	str	r3, [sp, #8]
 800ffe6:	680b      	ldr	r3, [r1, #0]
 800ffe8:	9001      	str	r0, [sp, #4]
 800ffea:	4690      	mov	r8, r2
 800ffec:	1c9c      	adds	r4, r3, #2
 800ffee:	46a1      	mov	r9, r4
 800fff0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800fff4:	2830      	cmp	r0, #48	@ 0x30
 800fff6:	d0fa      	beq.n	800ffee <__gethex+0x12>
 800fff8:	eba9 0303 	sub.w	r3, r9, r3
 800fffc:	f1a3 0b02 	sub.w	fp, r3, #2
 8010000:	f7ff ffd6 	bl	800ffb0 <__hexdig_fun>
 8010004:	4605      	mov	r5, r0
 8010006:	2800      	cmp	r0, #0
 8010008:	d168      	bne.n	80100dc <__gethex+0x100>
 801000a:	49a0      	ldr	r1, [pc, #640]	@ (801028c <__gethex+0x2b0>)
 801000c:	2201      	movs	r2, #1
 801000e:	4648      	mov	r0, r9
 8010010:	f7fe ffd1 	bl	800efb6 <strncmp>
 8010014:	4607      	mov	r7, r0
 8010016:	2800      	cmp	r0, #0
 8010018:	d167      	bne.n	80100ea <__gethex+0x10e>
 801001a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801001e:	4626      	mov	r6, r4
 8010020:	f7ff ffc6 	bl	800ffb0 <__hexdig_fun>
 8010024:	2800      	cmp	r0, #0
 8010026:	d062      	beq.n	80100ee <__gethex+0x112>
 8010028:	4623      	mov	r3, r4
 801002a:	7818      	ldrb	r0, [r3, #0]
 801002c:	2830      	cmp	r0, #48	@ 0x30
 801002e:	4699      	mov	r9, r3
 8010030:	f103 0301 	add.w	r3, r3, #1
 8010034:	d0f9      	beq.n	801002a <__gethex+0x4e>
 8010036:	f7ff ffbb 	bl	800ffb0 <__hexdig_fun>
 801003a:	fab0 f580 	clz	r5, r0
 801003e:	096d      	lsrs	r5, r5, #5
 8010040:	f04f 0b01 	mov.w	fp, #1
 8010044:	464a      	mov	r2, r9
 8010046:	4616      	mov	r6, r2
 8010048:	3201      	adds	r2, #1
 801004a:	7830      	ldrb	r0, [r6, #0]
 801004c:	f7ff ffb0 	bl	800ffb0 <__hexdig_fun>
 8010050:	2800      	cmp	r0, #0
 8010052:	d1f8      	bne.n	8010046 <__gethex+0x6a>
 8010054:	498d      	ldr	r1, [pc, #564]	@ (801028c <__gethex+0x2b0>)
 8010056:	2201      	movs	r2, #1
 8010058:	4630      	mov	r0, r6
 801005a:	f7fe ffac 	bl	800efb6 <strncmp>
 801005e:	2800      	cmp	r0, #0
 8010060:	d13f      	bne.n	80100e2 <__gethex+0x106>
 8010062:	b944      	cbnz	r4, 8010076 <__gethex+0x9a>
 8010064:	1c74      	adds	r4, r6, #1
 8010066:	4622      	mov	r2, r4
 8010068:	4616      	mov	r6, r2
 801006a:	3201      	adds	r2, #1
 801006c:	7830      	ldrb	r0, [r6, #0]
 801006e:	f7ff ff9f 	bl	800ffb0 <__hexdig_fun>
 8010072:	2800      	cmp	r0, #0
 8010074:	d1f8      	bne.n	8010068 <__gethex+0x8c>
 8010076:	1ba4      	subs	r4, r4, r6
 8010078:	00a7      	lsls	r7, r4, #2
 801007a:	7833      	ldrb	r3, [r6, #0]
 801007c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010080:	2b50      	cmp	r3, #80	@ 0x50
 8010082:	d13e      	bne.n	8010102 <__gethex+0x126>
 8010084:	7873      	ldrb	r3, [r6, #1]
 8010086:	2b2b      	cmp	r3, #43	@ 0x2b
 8010088:	d033      	beq.n	80100f2 <__gethex+0x116>
 801008a:	2b2d      	cmp	r3, #45	@ 0x2d
 801008c:	d034      	beq.n	80100f8 <__gethex+0x11c>
 801008e:	1c71      	adds	r1, r6, #1
 8010090:	2400      	movs	r4, #0
 8010092:	7808      	ldrb	r0, [r1, #0]
 8010094:	f7ff ff8c 	bl	800ffb0 <__hexdig_fun>
 8010098:	1e43      	subs	r3, r0, #1
 801009a:	b2db      	uxtb	r3, r3
 801009c:	2b18      	cmp	r3, #24
 801009e:	d830      	bhi.n	8010102 <__gethex+0x126>
 80100a0:	f1a0 0210 	sub.w	r2, r0, #16
 80100a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80100a8:	f7ff ff82 	bl	800ffb0 <__hexdig_fun>
 80100ac:	f100 3cff 	add.w	ip, r0, #4294967295
 80100b0:	fa5f fc8c 	uxtb.w	ip, ip
 80100b4:	f1bc 0f18 	cmp.w	ip, #24
 80100b8:	f04f 030a 	mov.w	r3, #10
 80100bc:	d91e      	bls.n	80100fc <__gethex+0x120>
 80100be:	b104      	cbz	r4, 80100c2 <__gethex+0xe6>
 80100c0:	4252      	negs	r2, r2
 80100c2:	4417      	add	r7, r2
 80100c4:	f8ca 1000 	str.w	r1, [sl]
 80100c8:	b1ed      	cbz	r5, 8010106 <__gethex+0x12a>
 80100ca:	f1bb 0f00 	cmp.w	fp, #0
 80100ce:	bf0c      	ite	eq
 80100d0:	2506      	moveq	r5, #6
 80100d2:	2500      	movne	r5, #0
 80100d4:	4628      	mov	r0, r5
 80100d6:	b005      	add	sp, #20
 80100d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100dc:	2500      	movs	r5, #0
 80100de:	462c      	mov	r4, r5
 80100e0:	e7b0      	b.n	8010044 <__gethex+0x68>
 80100e2:	2c00      	cmp	r4, #0
 80100e4:	d1c7      	bne.n	8010076 <__gethex+0x9a>
 80100e6:	4627      	mov	r7, r4
 80100e8:	e7c7      	b.n	801007a <__gethex+0x9e>
 80100ea:	464e      	mov	r6, r9
 80100ec:	462f      	mov	r7, r5
 80100ee:	2501      	movs	r5, #1
 80100f0:	e7c3      	b.n	801007a <__gethex+0x9e>
 80100f2:	2400      	movs	r4, #0
 80100f4:	1cb1      	adds	r1, r6, #2
 80100f6:	e7cc      	b.n	8010092 <__gethex+0xb6>
 80100f8:	2401      	movs	r4, #1
 80100fa:	e7fb      	b.n	80100f4 <__gethex+0x118>
 80100fc:	fb03 0002 	mla	r0, r3, r2, r0
 8010100:	e7ce      	b.n	80100a0 <__gethex+0xc4>
 8010102:	4631      	mov	r1, r6
 8010104:	e7de      	b.n	80100c4 <__gethex+0xe8>
 8010106:	eba6 0309 	sub.w	r3, r6, r9
 801010a:	3b01      	subs	r3, #1
 801010c:	4629      	mov	r1, r5
 801010e:	2b07      	cmp	r3, #7
 8010110:	dc0a      	bgt.n	8010128 <__gethex+0x14c>
 8010112:	9801      	ldr	r0, [sp, #4]
 8010114:	f000 fafc 	bl	8010710 <_Balloc>
 8010118:	4604      	mov	r4, r0
 801011a:	b940      	cbnz	r0, 801012e <__gethex+0x152>
 801011c:	4b5c      	ldr	r3, [pc, #368]	@ (8010290 <__gethex+0x2b4>)
 801011e:	4602      	mov	r2, r0
 8010120:	21e4      	movs	r1, #228	@ 0xe4
 8010122:	485c      	ldr	r0, [pc, #368]	@ (8010294 <__gethex+0x2b8>)
 8010124:	f001 fa54 	bl	80115d0 <__assert_func>
 8010128:	3101      	adds	r1, #1
 801012a:	105b      	asrs	r3, r3, #1
 801012c:	e7ef      	b.n	801010e <__gethex+0x132>
 801012e:	f100 0a14 	add.w	sl, r0, #20
 8010132:	2300      	movs	r3, #0
 8010134:	4655      	mov	r5, sl
 8010136:	469b      	mov	fp, r3
 8010138:	45b1      	cmp	r9, r6
 801013a:	d337      	bcc.n	80101ac <__gethex+0x1d0>
 801013c:	f845 bb04 	str.w	fp, [r5], #4
 8010140:	eba5 050a 	sub.w	r5, r5, sl
 8010144:	10ad      	asrs	r5, r5, #2
 8010146:	6125      	str	r5, [r4, #16]
 8010148:	4658      	mov	r0, fp
 801014a:	f000 fbd3 	bl	80108f4 <__hi0bits>
 801014e:	016d      	lsls	r5, r5, #5
 8010150:	f8d8 6000 	ldr.w	r6, [r8]
 8010154:	1a2d      	subs	r5, r5, r0
 8010156:	42b5      	cmp	r5, r6
 8010158:	dd54      	ble.n	8010204 <__gethex+0x228>
 801015a:	1bad      	subs	r5, r5, r6
 801015c:	4629      	mov	r1, r5
 801015e:	4620      	mov	r0, r4
 8010160:	f000 ff5f 	bl	8011022 <__any_on>
 8010164:	4681      	mov	r9, r0
 8010166:	b178      	cbz	r0, 8010188 <__gethex+0x1ac>
 8010168:	1e6b      	subs	r3, r5, #1
 801016a:	1159      	asrs	r1, r3, #5
 801016c:	f003 021f 	and.w	r2, r3, #31
 8010170:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010174:	f04f 0901 	mov.w	r9, #1
 8010178:	fa09 f202 	lsl.w	r2, r9, r2
 801017c:	420a      	tst	r2, r1
 801017e:	d003      	beq.n	8010188 <__gethex+0x1ac>
 8010180:	454b      	cmp	r3, r9
 8010182:	dc36      	bgt.n	80101f2 <__gethex+0x216>
 8010184:	f04f 0902 	mov.w	r9, #2
 8010188:	4629      	mov	r1, r5
 801018a:	4620      	mov	r0, r4
 801018c:	f7ff febe 	bl	800ff0c <rshift>
 8010190:	442f      	add	r7, r5
 8010192:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010196:	42bb      	cmp	r3, r7
 8010198:	da42      	bge.n	8010220 <__gethex+0x244>
 801019a:	9801      	ldr	r0, [sp, #4]
 801019c:	4621      	mov	r1, r4
 801019e:	f000 faf7 	bl	8010790 <_Bfree>
 80101a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80101a4:	2300      	movs	r3, #0
 80101a6:	6013      	str	r3, [r2, #0]
 80101a8:	25a3      	movs	r5, #163	@ 0xa3
 80101aa:	e793      	b.n	80100d4 <__gethex+0xf8>
 80101ac:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80101b0:	2a2e      	cmp	r2, #46	@ 0x2e
 80101b2:	d012      	beq.n	80101da <__gethex+0x1fe>
 80101b4:	2b20      	cmp	r3, #32
 80101b6:	d104      	bne.n	80101c2 <__gethex+0x1e6>
 80101b8:	f845 bb04 	str.w	fp, [r5], #4
 80101bc:	f04f 0b00 	mov.w	fp, #0
 80101c0:	465b      	mov	r3, fp
 80101c2:	7830      	ldrb	r0, [r6, #0]
 80101c4:	9303      	str	r3, [sp, #12]
 80101c6:	f7ff fef3 	bl	800ffb0 <__hexdig_fun>
 80101ca:	9b03      	ldr	r3, [sp, #12]
 80101cc:	f000 000f 	and.w	r0, r0, #15
 80101d0:	4098      	lsls	r0, r3
 80101d2:	ea4b 0b00 	orr.w	fp, fp, r0
 80101d6:	3304      	adds	r3, #4
 80101d8:	e7ae      	b.n	8010138 <__gethex+0x15c>
 80101da:	45b1      	cmp	r9, r6
 80101dc:	d8ea      	bhi.n	80101b4 <__gethex+0x1d8>
 80101de:	492b      	ldr	r1, [pc, #172]	@ (801028c <__gethex+0x2b0>)
 80101e0:	9303      	str	r3, [sp, #12]
 80101e2:	2201      	movs	r2, #1
 80101e4:	4630      	mov	r0, r6
 80101e6:	f7fe fee6 	bl	800efb6 <strncmp>
 80101ea:	9b03      	ldr	r3, [sp, #12]
 80101ec:	2800      	cmp	r0, #0
 80101ee:	d1e1      	bne.n	80101b4 <__gethex+0x1d8>
 80101f0:	e7a2      	b.n	8010138 <__gethex+0x15c>
 80101f2:	1ea9      	subs	r1, r5, #2
 80101f4:	4620      	mov	r0, r4
 80101f6:	f000 ff14 	bl	8011022 <__any_on>
 80101fa:	2800      	cmp	r0, #0
 80101fc:	d0c2      	beq.n	8010184 <__gethex+0x1a8>
 80101fe:	f04f 0903 	mov.w	r9, #3
 8010202:	e7c1      	b.n	8010188 <__gethex+0x1ac>
 8010204:	da09      	bge.n	801021a <__gethex+0x23e>
 8010206:	1b75      	subs	r5, r6, r5
 8010208:	4621      	mov	r1, r4
 801020a:	9801      	ldr	r0, [sp, #4]
 801020c:	462a      	mov	r2, r5
 801020e:	f000 fccf 	bl	8010bb0 <__lshift>
 8010212:	1b7f      	subs	r7, r7, r5
 8010214:	4604      	mov	r4, r0
 8010216:	f100 0a14 	add.w	sl, r0, #20
 801021a:	f04f 0900 	mov.w	r9, #0
 801021e:	e7b8      	b.n	8010192 <__gethex+0x1b6>
 8010220:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010224:	42bd      	cmp	r5, r7
 8010226:	dd6f      	ble.n	8010308 <__gethex+0x32c>
 8010228:	1bed      	subs	r5, r5, r7
 801022a:	42ae      	cmp	r6, r5
 801022c:	dc34      	bgt.n	8010298 <__gethex+0x2bc>
 801022e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010232:	2b02      	cmp	r3, #2
 8010234:	d022      	beq.n	801027c <__gethex+0x2a0>
 8010236:	2b03      	cmp	r3, #3
 8010238:	d024      	beq.n	8010284 <__gethex+0x2a8>
 801023a:	2b01      	cmp	r3, #1
 801023c:	d115      	bne.n	801026a <__gethex+0x28e>
 801023e:	42ae      	cmp	r6, r5
 8010240:	d113      	bne.n	801026a <__gethex+0x28e>
 8010242:	2e01      	cmp	r6, #1
 8010244:	d10b      	bne.n	801025e <__gethex+0x282>
 8010246:	9a02      	ldr	r2, [sp, #8]
 8010248:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801024c:	6013      	str	r3, [r2, #0]
 801024e:	2301      	movs	r3, #1
 8010250:	6123      	str	r3, [r4, #16]
 8010252:	f8ca 3000 	str.w	r3, [sl]
 8010256:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010258:	2562      	movs	r5, #98	@ 0x62
 801025a:	601c      	str	r4, [r3, #0]
 801025c:	e73a      	b.n	80100d4 <__gethex+0xf8>
 801025e:	1e71      	subs	r1, r6, #1
 8010260:	4620      	mov	r0, r4
 8010262:	f000 fede 	bl	8011022 <__any_on>
 8010266:	2800      	cmp	r0, #0
 8010268:	d1ed      	bne.n	8010246 <__gethex+0x26a>
 801026a:	9801      	ldr	r0, [sp, #4]
 801026c:	4621      	mov	r1, r4
 801026e:	f000 fa8f 	bl	8010790 <_Bfree>
 8010272:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010274:	2300      	movs	r3, #0
 8010276:	6013      	str	r3, [r2, #0]
 8010278:	2550      	movs	r5, #80	@ 0x50
 801027a:	e72b      	b.n	80100d4 <__gethex+0xf8>
 801027c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801027e:	2b00      	cmp	r3, #0
 8010280:	d1f3      	bne.n	801026a <__gethex+0x28e>
 8010282:	e7e0      	b.n	8010246 <__gethex+0x26a>
 8010284:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010286:	2b00      	cmp	r3, #0
 8010288:	d1dd      	bne.n	8010246 <__gethex+0x26a>
 801028a:	e7ee      	b.n	801026a <__gethex+0x28e>
 801028c:	08011ec4 	.word	0x08011ec4
 8010290:	08011f83 	.word	0x08011f83
 8010294:	08011f94 	.word	0x08011f94
 8010298:	1e6f      	subs	r7, r5, #1
 801029a:	f1b9 0f00 	cmp.w	r9, #0
 801029e:	d130      	bne.n	8010302 <__gethex+0x326>
 80102a0:	b127      	cbz	r7, 80102ac <__gethex+0x2d0>
 80102a2:	4639      	mov	r1, r7
 80102a4:	4620      	mov	r0, r4
 80102a6:	f000 febc 	bl	8011022 <__any_on>
 80102aa:	4681      	mov	r9, r0
 80102ac:	117a      	asrs	r2, r7, #5
 80102ae:	2301      	movs	r3, #1
 80102b0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80102b4:	f007 071f 	and.w	r7, r7, #31
 80102b8:	40bb      	lsls	r3, r7
 80102ba:	4213      	tst	r3, r2
 80102bc:	4629      	mov	r1, r5
 80102be:	4620      	mov	r0, r4
 80102c0:	bf18      	it	ne
 80102c2:	f049 0902 	orrne.w	r9, r9, #2
 80102c6:	f7ff fe21 	bl	800ff0c <rshift>
 80102ca:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80102ce:	1b76      	subs	r6, r6, r5
 80102d0:	2502      	movs	r5, #2
 80102d2:	f1b9 0f00 	cmp.w	r9, #0
 80102d6:	d047      	beq.n	8010368 <__gethex+0x38c>
 80102d8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80102dc:	2b02      	cmp	r3, #2
 80102de:	d015      	beq.n	801030c <__gethex+0x330>
 80102e0:	2b03      	cmp	r3, #3
 80102e2:	d017      	beq.n	8010314 <__gethex+0x338>
 80102e4:	2b01      	cmp	r3, #1
 80102e6:	d109      	bne.n	80102fc <__gethex+0x320>
 80102e8:	f019 0f02 	tst.w	r9, #2
 80102ec:	d006      	beq.n	80102fc <__gethex+0x320>
 80102ee:	f8da 3000 	ldr.w	r3, [sl]
 80102f2:	ea49 0903 	orr.w	r9, r9, r3
 80102f6:	f019 0f01 	tst.w	r9, #1
 80102fa:	d10e      	bne.n	801031a <__gethex+0x33e>
 80102fc:	f045 0510 	orr.w	r5, r5, #16
 8010300:	e032      	b.n	8010368 <__gethex+0x38c>
 8010302:	f04f 0901 	mov.w	r9, #1
 8010306:	e7d1      	b.n	80102ac <__gethex+0x2d0>
 8010308:	2501      	movs	r5, #1
 801030a:	e7e2      	b.n	80102d2 <__gethex+0x2f6>
 801030c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801030e:	f1c3 0301 	rsb	r3, r3, #1
 8010312:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010314:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010316:	2b00      	cmp	r3, #0
 8010318:	d0f0      	beq.n	80102fc <__gethex+0x320>
 801031a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801031e:	f104 0314 	add.w	r3, r4, #20
 8010322:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010326:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801032a:	f04f 0c00 	mov.w	ip, #0
 801032e:	4618      	mov	r0, r3
 8010330:	f853 2b04 	ldr.w	r2, [r3], #4
 8010334:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010338:	d01b      	beq.n	8010372 <__gethex+0x396>
 801033a:	3201      	adds	r2, #1
 801033c:	6002      	str	r2, [r0, #0]
 801033e:	2d02      	cmp	r5, #2
 8010340:	f104 0314 	add.w	r3, r4, #20
 8010344:	d13c      	bne.n	80103c0 <__gethex+0x3e4>
 8010346:	f8d8 2000 	ldr.w	r2, [r8]
 801034a:	3a01      	subs	r2, #1
 801034c:	42b2      	cmp	r2, r6
 801034e:	d109      	bne.n	8010364 <__gethex+0x388>
 8010350:	1171      	asrs	r1, r6, #5
 8010352:	2201      	movs	r2, #1
 8010354:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010358:	f006 061f 	and.w	r6, r6, #31
 801035c:	fa02 f606 	lsl.w	r6, r2, r6
 8010360:	421e      	tst	r6, r3
 8010362:	d13a      	bne.n	80103da <__gethex+0x3fe>
 8010364:	f045 0520 	orr.w	r5, r5, #32
 8010368:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801036a:	601c      	str	r4, [r3, #0]
 801036c:	9b02      	ldr	r3, [sp, #8]
 801036e:	601f      	str	r7, [r3, #0]
 8010370:	e6b0      	b.n	80100d4 <__gethex+0xf8>
 8010372:	4299      	cmp	r1, r3
 8010374:	f843 cc04 	str.w	ip, [r3, #-4]
 8010378:	d8d9      	bhi.n	801032e <__gethex+0x352>
 801037a:	68a3      	ldr	r3, [r4, #8]
 801037c:	459b      	cmp	fp, r3
 801037e:	db17      	blt.n	80103b0 <__gethex+0x3d4>
 8010380:	6861      	ldr	r1, [r4, #4]
 8010382:	9801      	ldr	r0, [sp, #4]
 8010384:	3101      	adds	r1, #1
 8010386:	f000 f9c3 	bl	8010710 <_Balloc>
 801038a:	4681      	mov	r9, r0
 801038c:	b918      	cbnz	r0, 8010396 <__gethex+0x3ba>
 801038e:	4b1a      	ldr	r3, [pc, #104]	@ (80103f8 <__gethex+0x41c>)
 8010390:	4602      	mov	r2, r0
 8010392:	2184      	movs	r1, #132	@ 0x84
 8010394:	e6c5      	b.n	8010122 <__gethex+0x146>
 8010396:	6922      	ldr	r2, [r4, #16]
 8010398:	3202      	adds	r2, #2
 801039a:	f104 010c 	add.w	r1, r4, #12
 801039e:	0092      	lsls	r2, r2, #2
 80103a0:	300c      	adds	r0, #12
 80103a2:	f7fe fef0 	bl	800f186 <memcpy>
 80103a6:	4621      	mov	r1, r4
 80103a8:	9801      	ldr	r0, [sp, #4]
 80103aa:	f000 f9f1 	bl	8010790 <_Bfree>
 80103ae:	464c      	mov	r4, r9
 80103b0:	6923      	ldr	r3, [r4, #16]
 80103b2:	1c5a      	adds	r2, r3, #1
 80103b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80103b8:	6122      	str	r2, [r4, #16]
 80103ba:	2201      	movs	r2, #1
 80103bc:	615a      	str	r2, [r3, #20]
 80103be:	e7be      	b.n	801033e <__gethex+0x362>
 80103c0:	6922      	ldr	r2, [r4, #16]
 80103c2:	455a      	cmp	r2, fp
 80103c4:	dd0b      	ble.n	80103de <__gethex+0x402>
 80103c6:	2101      	movs	r1, #1
 80103c8:	4620      	mov	r0, r4
 80103ca:	f7ff fd9f 	bl	800ff0c <rshift>
 80103ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80103d2:	3701      	adds	r7, #1
 80103d4:	42bb      	cmp	r3, r7
 80103d6:	f6ff aee0 	blt.w	801019a <__gethex+0x1be>
 80103da:	2501      	movs	r5, #1
 80103dc:	e7c2      	b.n	8010364 <__gethex+0x388>
 80103de:	f016 061f 	ands.w	r6, r6, #31
 80103e2:	d0fa      	beq.n	80103da <__gethex+0x3fe>
 80103e4:	4453      	add	r3, sl
 80103e6:	f1c6 0620 	rsb	r6, r6, #32
 80103ea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80103ee:	f000 fa81 	bl	80108f4 <__hi0bits>
 80103f2:	42b0      	cmp	r0, r6
 80103f4:	dbe7      	blt.n	80103c6 <__gethex+0x3ea>
 80103f6:	e7f0      	b.n	80103da <__gethex+0x3fe>
 80103f8:	08011f83 	.word	0x08011f83

080103fc <L_shift>:
 80103fc:	f1c2 0208 	rsb	r2, r2, #8
 8010400:	0092      	lsls	r2, r2, #2
 8010402:	b570      	push	{r4, r5, r6, lr}
 8010404:	f1c2 0620 	rsb	r6, r2, #32
 8010408:	6843      	ldr	r3, [r0, #4]
 801040a:	6804      	ldr	r4, [r0, #0]
 801040c:	fa03 f506 	lsl.w	r5, r3, r6
 8010410:	432c      	orrs	r4, r5
 8010412:	40d3      	lsrs	r3, r2
 8010414:	6004      	str	r4, [r0, #0]
 8010416:	f840 3f04 	str.w	r3, [r0, #4]!
 801041a:	4288      	cmp	r0, r1
 801041c:	d3f4      	bcc.n	8010408 <L_shift+0xc>
 801041e:	bd70      	pop	{r4, r5, r6, pc}

08010420 <__match>:
 8010420:	b530      	push	{r4, r5, lr}
 8010422:	6803      	ldr	r3, [r0, #0]
 8010424:	3301      	adds	r3, #1
 8010426:	f811 4b01 	ldrb.w	r4, [r1], #1
 801042a:	b914      	cbnz	r4, 8010432 <__match+0x12>
 801042c:	6003      	str	r3, [r0, #0]
 801042e:	2001      	movs	r0, #1
 8010430:	bd30      	pop	{r4, r5, pc}
 8010432:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010436:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801043a:	2d19      	cmp	r5, #25
 801043c:	bf98      	it	ls
 801043e:	3220      	addls	r2, #32
 8010440:	42a2      	cmp	r2, r4
 8010442:	d0f0      	beq.n	8010426 <__match+0x6>
 8010444:	2000      	movs	r0, #0
 8010446:	e7f3      	b.n	8010430 <__match+0x10>

08010448 <__hexnan>:
 8010448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801044c:	680b      	ldr	r3, [r1, #0]
 801044e:	6801      	ldr	r1, [r0, #0]
 8010450:	115e      	asrs	r6, r3, #5
 8010452:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010456:	f013 031f 	ands.w	r3, r3, #31
 801045a:	b087      	sub	sp, #28
 801045c:	bf18      	it	ne
 801045e:	3604      	addne	r6, #4
 8010460:	2500      	movs	r5, #0
 8010462:	1f37      	subs	r7, r6, #4
 8010464:	4682      	mov	sl, r0
 8010466:	4690      	mov	r8, r2
 8010468:	9301      	str	r3, [sp, #4]
 801046a:	f846 5c04 	str.w	r5, [r6, #-4]
 801046e:	46b9      	mov	r9, r7
 8010470:	463c      	mov	r4, r7
 8010472:	9502      	str	r5, [sp, #8]
 8010474:	46ab      	mov	fp, r5
 8010476:	784a      	ldrb	r2, [r1, #1]
 8010478:	1c4b      	adds	r3, r1, #1
 801047a:	9303      	str	r3, [sp, #12]
 801047c:	b342      	cbz	r2, 80104d0 <__hexnan+0x88>
 801047e:	4610      	mov	r0, r2
 8010480:	9105      	str	r1, [sp, #20]
 8010482:	9204      	str	r2, [sp, #16]
 8010484:	f7ff fd94 	bl	800ffb0 <__hexdig_fun>
 8010488:	2800      	cmp	r0, #0
 801048a:	d151      	bne.n	8010530 <__hexnan+0xe8>
 801048c:	9a04      	ldr	r2, [sp, #16]
 801048e:	9905      	ldr	r1, [sp, #20]
 8010490:	2a20      	cmp	r2, #32
 8010492:	d818      	bhi.n	80104c6 <__hexnan+0x7e>
 8010494:	9b02      	ldr	r3, [sp, #8]
 8010496:	459b      	cmp	fp, r3
 8010498:	dd13      	ble.n	80104c2 <__hexnan+0x7a>
 801049a:	454c      	cmp	r4, r9
 801049c:	d206      	bcs.n	80104ac <__hexnan+0x64>
 801049e:	2d07      	cmp	r5, #7
 80104a0:	dc04      	bgt.n	80104ac <__hexnan+0x64>
 80104a2:	462a      	mov	r2, r5
 80104a4:	4649      	mov	r1, r9
 80104a6:	4620      	mov	r0, r4
 80104a8:	f7ff ffa8 	bl	80103fc <L_shift>
 80104ac:	4544      	cmp	r4, r8
 80104ae:	d952      	bls.n	8010556 <__hexnan+0x10e>
 80104b0:	2300      	movs	r3, #0
 80104b2:	f1a4 0904 	sub.w	r9, r4, #4
 80104b6:	f844 3c04 	str.w	r3, [r4, #-4]
 80104ba:	f8cd b008 	str.w	fp, [sp, #8]
 80104be:	464c      	mov	r4, r9
 80104c0:	461d      	mov	r5, r3
 80104c2:	9903      	ldr	r1, [sp, #12]
 80104c4:	e7d7      	b.n	8010476 <__hexnan+0x2e>
 80104c6:	2a29      	cmp	r2, #41	@ 0x29
 80104c8:	d157      	bne.n	801057a <__hexnan+0x132>
 80104ca:	3102      	adds	r1, #2
 80104cc:	f8ca 1000 	str.w	r1, [sl]
 80104d0:	f1bb 0f00 	cmp.w	fp, #0
 80104d4:	d051      	beq.n	801057a <__hexnan+0x132>
 80104d6:	454c      	cmp	r4, r9
 80104d8:	d206      	bcs.n	80104e8 <__hexnan+0xa0>
 80104da:	2d07      	cmp	r5, #7
 80104dc:	dc04      	bgt.n	80104e8 <__hexnan+0xa0>
 80104de:	462a      	mov	r2, r5
 80104e0:	4649      	mov	r1, r9
 80104e2:	4620      	mov	r0, r4
 80104e4:	f7ff ff8a 	bl	80103fc <L_shift>
 80104e8:	4544      	cmp	r4, r8
 80104ea:	d936      	bls.n	801055a <__hexnan+0x112>
 80104ec:	f1a8 0204 	sub.w	r2, r8, #4
 80104f0:	4623      	mov	r3, r4
 80104f2:	f853 1b04 	ldr.w	r1, [r3], #4
 80104f6:	f842 1f04 	str.w	r1, [r2, #4]!
 80104fa:	429f      	cmp	r7, r3
 80104fc:	d2f9      	bcs.n	80104f2 <__hexnan+0xaa>
 80104fe:	1b3b      	subs	r3, r7, r4
 8010500:	f023 0303 	bic.w	r3, r3, #3
 8010504:	3304      	adds	r3, #4
 8010506:	3401      	adds	r4, #1
 8010508:	3e03      	subs	r6, #3
 801050a:	42b4      	cmp	r4, r6
 801050c:	bf88      	it	hi
 801050e:	2304      	movhi	r3, #4
 8010510:	4443      	add	r3, r8
 8010512:	2200      	movs	r2, #0
 8010514:	f843 2b04 	str.w	r2, [r3], #4
 8010518:	429f      	cmp	r7, r3
 801051a:	d2fb      	bcs.n	8010514 <__hexnan+0xcc>
 801051c:	683b      	ldr	r3, [r7, #0]
 801051e:	b91b      	cbnz	r3, 8010528 <__hexnan+0xe0>
 8010520:	4547      	cmp	r7, r8
 8010522:	d128      	bne.n	8010576 <__hexnan+0x12e>
 8010524:	2301      	movs	r3, #1
 8010526:	603b      	str	r3, [r7, #0]
 8010528:	2005      	movs	r0, #5
 801052a:	b007      	add	sp, #28
 801052c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010530:	3501      	adds	r5, #1
 8010532:	2d08      	cmp	r5, #8
 8010534:	f10b 0b01 	add.w	fp, fp, #1
 8010538:	dd06      	ble.n	8010548 <__hexnan+0x100>
 801053a:	4544      	cmp	r4, r8
 801053c:	d9c1      	bls.n	80104c2 <__hexnan+0x7a>
 801053e:	2300      	movs	r3, #0
 8010540:	f844 3c04 	str.w	r3, [r4, #-4]
 8010544:	2501      	movs	r5, #1
 8010546:	3c04      	subs	r4, #4
 8010548:	6822      	ldr	r2, [r4, #0]
 801054a:	f000 000f 	and.w	r0, r0, #15
 801054e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010552:	6020      	str	r0, [r4, #0]
 8010554:	e7b5      	b.n	80104c2 <__hexnan+0x7a>
 8010556:	2508      	movs	r5, #8
 8010558:	e7b3      	b.n	80104c2 <__hexnan+0x7a>
 801055a:	9b01      	ldr	r3, [sp, #4]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d0dd      	beq.n	801051c <__hexnan+0xd4>
 8010560:	f1c3 0320 	rsb	r3, r3, #32
 8010564:	f04f 32ff 	mov.w	r2, #4294967295
 8010568:	40da      	lsrs	r2, r3
 801056a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801056e:	4013      	ands	r3, r2
 8010570:	f846 3c04 	str.w	r3, [r6, #-4]
 8010574:	e7d2      	b.n	801051c <__hexnan+0xd4>
 8010576:	3f04      	subs	r7, #4
 8010578:	e7d0      	b.n	801051c <__hexnan+0xd4>
 801057a:	2004      	movs	r0, #4
 801057c:	e7d5      	b.n	801052a <__hexnan+0xe2>
	...

08010580 <malloc>:
 8010580:	4b02      	ldr	r3, [pc, #8]	@ (801058c <malloc+0xc>)
 8010582:	4601      	mov	r1, r0
 8010584:	6818      	ldr	r0, [r3, #0]
 8010586:	f000 b825 	b.w	80105d4 <_malloc_r>
 801058a:	bf00      	nop
 801058c:	20000278 	.word	0x20000278

08010590 <sbrk_aligned>:
 8010590:	b570      	push	{r4, r5, r6, lr}
 8010592:	4e0f      	ldr	r6, [pc, #60]	@ (80105d0 <sbrk_aligned+0x40>)
 8010594:	460c      	mov	r4, r1
 8010596:	6831      	ldr	r1, [r6, #0]
 8010598:	4605      	mov	r5, r0
 801059a:	b911      	cbnz	r1, 80105a2 <sbrk_aligned+0x12>
 801059c:	f001 f808 	bl	80115b0 <_sbrk_r>
 80105a0:	6030      	str	r0, [r6, #0]
 80105a2:	4621      	mov	r1, r4
 80105a4:	4628      	mov	r0, r5
 80105a6:	f001 f803 	bl	80115b0 <_sbrk_r>
 80105aa:	1c43      	adds	r3, r0, #1
 80105ac:	d103      	bne.n	80105b6 <sbrk_aligned+0x26>
 80105ae:	f04f 34ff 	mov.w	r4, #4294967295
 80105b2:	4620      	mov	r0, r4
 80105b4:	bd70      	pop	{r4, r5, r6, pc}
 80105b6:	1cc4      	adds	r4, r0, #3
 80105b8:	f024 0403 	bic.w	r4, r4, #3
 80105bc:	42a0      	cmp	r0, r4
 80105be:	d0f8      	beq.n	80105b2 <sbrk_aligned+0x22>
 80105c0:	1a21      	subs	r1, r4, r0
 80105c2:	4628      	mov	r0, r5
 80105c4:	f000 fff4 	bl	80115b0 <_sbrk_r>
 80105c8:	3001      	adds	r0, #1
 80105ca:	d1f2      	bne.n	80105b2 <sbrk_aligned+0x22>
 80105cc:	e7ef      	b.n	80105ae <sbrk_aligned+0x1e>
 80105ce:	bf00      	nop
 80105d0:	200052f8 	.word	0x200052f8

080105d4 <_malloc_r>:
 80105d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105d8:	1ccd      	adds	r5, r1, #3
 80105da:	f025 0503 	bic.w	r5, r5, #3
 80105de:	3508      	adds	r5, #8
 80105e0:	2d0c      	cmp	r5, #12
 80105e2:	bf38      	it	cc
 80105e4:	250c      	movcc	r5, #12
 80105e6:	2d00      	cmp	r5, #0
 80105e8:	4606      	mov	r6, r0
 80105ea:	db01      	blt.n	80105f0 <_malloc_r+0x1c>
 80105ec:	42a9      	cmp	r1, r5
 80105ee:	d904      	bls.n	80105fa <_malloc_r+0x26>
 80105f0:	230c      	movs	r3, #12
 80105f2:	6033      	str	r3, [r6, #0]
 80105f4:	2000      	movs	r0, #0
 80105f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80106d0 <_malloc_r+0xfc>
 80105fe:	f000 f87b 	bl	80106f8 <__malloc_lock>
 8010602:	f8d8 3000 	ldr.w	r3, [r8]
 8010606:	461c      	mov	r4, r3
 8010608:	bb44      	cbnz	r4, 801065c <_malloc_r+0x88>
 801060a:	4629      	mov	r1, r5
 801060c:	4630      	mov	r0, r6
 801060e:	f7ff ffbf 	bl	8010590 <sbrk_aligned>
 8010612:	1c43      	adds	r3, r0, #1
 8010614:	4604      	mov	r4, r0
 8010616:	d158      	bne.n	80106ca <_malloc_r+0xf6>
 8010618:	f8d8 4000 	ldr.w	r4, [r8]
 801061c:	4627      	mov	r7, r4
 801061e:	2f00      	cmp	r7, #0
 8010620:	d143      	bne.n	80106aa <_malloc_r+0xd6>
 8010622:	2c00      	cmp	r4, #0
 8010624:	d04b      	beq.n	80106be <_malloc_r+0xea>
 8010626:	6823      	ldr	r3, [r4, #0]
 8010628:	4639      	mov	r1, r7
 801062a:	4630      	mov	r0, r6
 801062c:	eb04 0903 	add.w	r9, r4, r3
 8010630:	f000 ffbe 	bl	80115b0 <_sbrk_r>
 8010634:	4581      	cmp	r9, r0
 8010636:	d142      	bne.n	80106be <_malloc_r+0xea>
 8010638:	6821      	ldr	r1, [r4, #0]
 801063a:	1a6d      	subs	r5, r5, r1
 801063c:	4629      	mov	r1, r5
 801063e:	4630      	mov	r0, r6
 8010640:	f7ff ffa6 	bl	8010590 <sbrk_aligned>
 8010644:	3001      	adds	r0, #1
 8010646:	d03a      	beq.n	80106be <_malloc_r+0xea>
 8010648:	6823      	ldr	r3, [r4, #0]
 801064a:	442b      	add	r3, r5
 801064c:	6023      	str	r3, [r4, #0]
 801064e:	f8d8 3000 	ldr.w	r3, [r8]
 8010652:	685a      	ldr	r2, [r3, #4]
 8010654:	bb62      	cbnz	r2, 80106b0 <_malloc_r+0xdc>
 8010656:	f8c8 7000 	str.w	r7, [r8]
 801065a:	e00f      	b.n	801067c <_malloc_r+0xa8>
 801065c:	6822      	ldr	r2, [r4, #0]
 801065e:	1b52      	subs	r2, r2, r5
 8010660:	d420      	bmi.n	80106a4 <_malloc_r+0xd0>
 8010662:	2a0b      	cmp	r2, #11
 8010664:	d917      	bls.n	8010696 <_malloc_r+0xc2>
 8010666:	1961      	adds	r1, r4, r5
 8010668:	42a3      	cmp	r3, r4
 801066a:	6025      	str	r5, [r4, #0]
 801066c:	bf18      	it	ne
 801066e:	6059      	strne	r1, [r3, #4]
 8010670:	6863      	ldr	r3, [r4, #4]
 8010672:	bf08      	it	eq
 8010674:	f8c8 1000 	streq.w	r1, [r8]
 8010678:	5162      	str	r2, [r4, r5]
 801067a:	604b      	str	r3, [r1, #4]
 801067c:	4630      	mov	r0, r6
 801067e:	f000 f841 	bl	8010704 <__malloc_unlock>
 8010682:	f104 000b 	add.w	r0, r4, #11
 8010686:	1d23      	adds	r3, r4, #4
 8010688:	f020 0007 	bic.w	r0, r0, #7
 801068c:	1ac2      	subs	r2, r0, r3
 801068e:	bf1c      	itt	ne
 8010690:	1a1b      	subne	r3, r3, r0
 8010692:	50a3      	strne	r3, [r4, r2]
 8010694:	e7af      	b.n	80105f6 <_malloc_r+0x22>
 8010696:	6862      	ldr	r2, [r4, #4]
 8010698:	42a3      	cmp	r3, r4
 801069a:	bf0c      	ite	eq
 801069c:	f8c8 2000 	streq.w	r2, [r8]
 80106a0:	605a      	strne	r2, [r3, #4]
 80106a2:	e7eb      	b.n	801067c <_malloc_r+0xa8>
 80106a4:	4623      	mov	r3, r4
 80106a6:	6864      	ldr	r4, [r4, #4]
 80106a8:	e7ae      	b.n	8010608 <_malloc_r+0x34>
 80106aa:	463c      	mov	r4, r7
 80106ac:	687f      	ldr	r7, [r7, #4]
 80106ae:	e7b6      	b.n	801061e <_malloc_r+0x4a>
 80106b0:	461a      	mov	r2, r3
 80106b2:	685b      	ldr	r3, [r3, #4]
 80106b4:	42a3      	cmp	r3, r4
 80106b6:	d1fb      	bne.n	80106b0 <_malloc_r+0xdc>
 80106b8:	2300      	movs	r3, #0
 80106ba:	6053      	str	r3, [r2, #4]
 80106bc:	e7de      	b.n	801067c <_malloc_r+0xa8>
 80106be:	230c      	movs	r3, #12
 80106c0:	6033      	str	r3, [r6, #0]
 80106c2:	4630      	mov	r0, r6
 80106c4:	f000 f81e 	bl	8010704 <__malloc_unlock>
 80106c8:	e794      	b.n	80105f4 <_malloc_r+0x20>
 80106ca:	6005      	str	r5, [r0, #0]
 80106cc:	e7d6      	b.n	801067c <_malloc_r+0xa8>
 80106ce:	bf00      	nop
 80106d0:	200052fc 	.word	0x200052fc

080106d4 <__ascii_mbtowc>:
 80106d4:	b082      	sub	sp, #8
 80106d6:	b901      	cbnz	r1, 80106da <__ascii_mbtowc+0x6>
 80106d8:	a901      	add	r1, sp, #4
 80106da:	b142      	cbz	r2, 80106ee <__ascii_mbtowc+0x1a>
 80106dc:	b14b      	cbz	r3, 80106f2 <__ascii_mbtowc+0x1e>
 80106de:	7813      	ldrb	r3, [r2, #0]
 80106e0:	600b      	str	r3, [r1, #0]
 80106e2:	7812      	ldrb	r2, [r2, #0]
 80106e4:	1e10      	subs	r0, r2, #0
 80106e6:	bf18      	it	ne
 80106e8:	2001      	movne	r0, #1
 80106ea:	b002      	add	sp, #8
 80106ec:	4770      	bx	lr
 80106ee:	4610      	mov	r0, r2
 80106f0:	e7fb      	b.n	80106ea <__ascii_mbtowc+0x16>
 80106f2:	f06f 0001 	mvn.w	r0, #1
 80106f6:	e7f8      	b.n	80106ea <__ascii_mbtowc+0x16>

080106f8 <__malloc_lock>:
 80106f8:	4801      	ldr	r0, [pc, #4]	@ (8010700 <__malloc_lock+0x8>)
 80106fa:	f7fe bd42 	b.w	800f182 <__retarget_lock_acquire_recursive>
 80106fe:	bf00      	nop
 8010700:	200052f4 	.word	0x200052f4

08010704 <__malloc_unlock>:
 8010704:	4801      	ldr	r0, [pc, #4]	@ (801070c <__malloc_unlock+0x8>)
 8010706:	f7fe bd3d 	b.w	800f184 <__retarget_lock_release_recursive>
 801070a:	bf00      	nop
 801070c:	200052f4 	.word	0x200052f4

08010710 <_Balloc>:
 8010710:	b570      	push	{r4, r5, r6, lr}
 8010712:	69c6      	ldr	r6, [r0, #28]
 8010714:	4604      	mov	r4, r0
 8010716:	460d      	mov	r5, r1
 8010718:	b976      	cbnz	r6, 8010738 <_Balloc+0x28>
 801071a:	2010      	movs	r0, #16
 801071c:	f7ff ff30 	bl	8010580 <malloc>
 8010720:	4602      	mov	r2, r0
 8010722:	61e0      	str	r0, [r4, #28]
 8010724:	b920      	cbnz	r0, 8010730 <_Balloc+0x20>
 8010726:	4b18      	ldr	r3, [pc, #96]	@ (8010788 <_Balloc+0x78>)
 8010728:	4818      	ldr	r0, [pc, #96]	@ (801078c <_Balloc+0x7c>)
 801072a:	216b      	movs	r1, #107	@ 0x6b
 801072c:	f000 ff50 	bl	80115d0 <__assert_func>
 8010730:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010734:	6006      	str	r6, [r0, #0]
 8010736:	60c6      	str	r6, [r0, #12]
 8010738:	69e6      	ldr	r6, [r4, #28]
 801073a:	68f3      	ldr	r3, [r6, #12]
 801073c:	b183      	cbz	r3, 8010760 <_Balloc+0x50>
 801073e:	69e3      	ldr	r3, [r4, #28]
 8010740:	68db      	ldr	r3, [r3, #12]
 8010742:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010746:	b9b8      	cbnz	r0, 8010778 <_Balloc+0x68>
 8010748:	2101      	movs	r1, #1
 801074a:	fa01 f605 	lsl.w	r6, r1, r5
 801074e:	1d72      	adds	r2, r6, #5
 8010750:	0092      	lsls	r2, r2, #2
 8010752:	4620      	mov	r0, r4
 8010754:	f000 ff5a 	bl	801160c <_calloc_r>
 8010758:	b160      	cbz	r0, 8010774 <_Balloc+0x64>
 801075a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801075e:	e00e      	b.n	801077e <_Balloc+0x6e>
 8010760:	2221      	movs	r2, #33	@ 0x21
 8010762:	2104      	movs	r1, #4
 8010764:	4620      	mov	r0, r4
 8010766:	f000 ff51 	bl	801160c <_calloc_r>
 801076a:	69e3      	ldr	r3, [r4, #28]
 801076c:	60f0      	str	r0, [r6, #12]
 801076e:	68db      	ldr	r3, [r3, #12]
 8010770:	2b00      	cmp	r3, #0
 8010772:	d1e4      	bne.n	801073e <_Balloc+0x2e>
 8010774:	2000      	movs	r0, #0
 8010776:	bd70      	pop	{r4, r5, r6, pc}
 8010778:	6802      	ldr	r2, [r0, #0]
 801077a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801077e:	2300      	movs	r3, #0
 8010780:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010784:	e7f7      	b.n	8010776 <_Balloc+0x66>
 8010786:	bf00      	nop
 8010788:	08011f14 	.word	0x08011f14
 801078c:	08011ff4 	.word	0x08011ff4

08010790 <_Bfree>:
 8010790:	b570      	push	{r4, r5, r6, lr}
 8010792:	69c6      	ldr	r6, [r0, #28]
 8010794:	4605      	mov	r5, r0
 8010796:	460c      	mov	r4, r1
 8010798:	b976      	cbnz	r6, 80107b8 <_Bfree+0x28>
 801079a:	2010      	movs	r0, #16
 801079c:	f7ff fef0 	bl	8010580 <malloc>
 80107a0:	4602      	mov	r2, r0
 80107a2:	61e8      	str	r0, [r5, #28]
 80107a4:	b920      	cbnz	r0, 80107b0 <_Bfree+0x20>
 80107a6:	4b09      	ldr	r3, [pc, #36]	@ (80107cc <_Bfree+0x3c>)
 80107a8:	4809      	ldr	r0, [pc, #36]	@ (80107d0 <_Bfree+0x40>)
 80107aa:	218f      	movs	r1, #143	@ 0x8f
 80107ac:	f000 ff10 	bl	80115d0 <__assert_func>
 80107b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80107b4:	6006      	str	r6, [r0, #0]
 80107b6:	60c6      	str	r6, [r0, #12]
 80107b8:	b13c      	cbz	r4, 80107ca <_Bfree+0x3a>
 80107ba:	69eb      	ldr	r3, [r5, #28]
 80107bc:	6862      	ldr	r2, [r4, #4]
 80107be:	68db      	ldr	r3, [r3, #12]
 80107c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80107c4:	6021      	str	r1, [r4, #0]
 80107c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80107ca:	bd70      	pop	{r4, r5, r6, pc}
 80107cc:	08011f14 	.word	0x08011f14
 80107d0:	08011ff4 	.word	0x08011ff4

080107d4 <__multadd>:
 80107d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107d8:	690d      	ldr	r5, [r1, #16]
 80107da:	4607      	mov	r7, r0
 80107dc:	460c      	mov	r4, r1
 80107de:	461e      	mov	r6, r3
 80107e0:	f101 0c14 	add.w	ip, r1, #20
 80107e4:	2000      	movs	r0, #0
 80107e6:	f8dc 3000 	ldr.w	r3, [ip]
 80107ea:	b299      	uxth	r1, r3
 80107ec:	fb02 6101 	mla	r1, r2, r1, r6
 80107f0:	0c1e      	lsrs	r6, r3, #16
 80107f2:	0c0b      	lsrs	r3, r1, #16
 80107f4:	fb02 3306 	mla	r3, r2, r6, r3
 80107f8:	b289      	uxth	r1, r1
 80107fa:	3001      	adds	r0, #1
 80107fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010800:	4285      	cmp	r5, r0
 8010802:	f84c 1b04 	str.w	r1, [ip], #4
 8010806:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801080a:	dcec      	bgt.n	80107e6 <__multadd+0x12>
 801080c:	b30e      	cbz	r6, 8010852 <__multadd+0x7e>
 801080e:	68a3      	ldr	r3, [r4, #8]
 8010810:	42ab      	cmp	r3, r5
 8010812:	dc19      	bgt.n	8010848 <__multadd+0x74>
 8010814:	6861      	ldr	r1, [r4, #4]
 8010816:	4638      	mov	r0, r7
 8010818:	3101      	adds	r1, #1
 801081a:	f7ff ff79 	bl	8010710 <_Balloc>
 801081e:	4680      	mov	r8, r0
 8010820:	b928      	cbnz	r0, 801082e <__multadd+0x5a>
 8010822:	4602      	mov	r2, r0
 8010824:	4b0c      	ldr	r3, [pc, #48]	@ (8010858 <__multadd+0x84>)
 8010826:	480d      	ldr	r0, [pc, #52]	@ (801085c <__multadd+0x88>)
 8010828:	21ba      	movs	r1, #186	@ 0xba
 801082a:	f000 fed1 	bl	80115d0 <__assert_func>
 801082e:	6922      	ldr	r2, [r4, #16]
 8010830:	3202      	adds	r2, #2
 8010832:	f104 010c 	add.w	r1, r4, #12
 8010836:	0092      	lsls	r2, r2, #2
 8010838:	300c      	adds	r0, #12
 801083a:	f7fe fca4 	bl	800f186 <memcpy>
 801083e:	4621      	mov	r1, r4
 8010840:	4638      	mov	r0, r7
 8010842:	f7ff ffa5 	bl	8010790 <_Bfree>
 8010846:	4644      	mov	r4, r8
 8010848:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801084c:	3501      	adds	r5, #1
 801084e:	615e      	str	r6, [r3, #20]
 8010850:	6125      	str	r5, [r4, #16]
 8010852:	4620      	mov	r0, r4
 8010854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010858:	08011f83 	.word	0x08011f83
 801085c:	08011ff4 	.word	0x08011ff4

08010860 <__s2b>:
 8010860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010864:	460c      	mov	r4, r1
 8010866:	4615      	mov	r5, r2
 8010868:	461f      	mov	r7, r3
 801086a:	2209      	movs	r2, #9
 801086c:	3308      	adds	r3, #8
 801086e:	4606      	mov	r6, r0
 8010870:	fb93 f3f2 	sdiv	r3, r3, r2
 8010874:	2100      	movs	r1, #0
 8010876:	2201      	movs	r2, #1
 8010878:	429a      	cmp	r2, r3
 801087a:	db09      	blt.n	8010890 <__s2b+0x30>
 801087c:	4630      	mov	r0, r6
 801087e:	f7ff ff47 	bl	8010710 <_Balloc>
 8010882:	b940      	cbnz	r0, 8010896 <__s2b+0x36>
 8010884:	4602      	mov	r2, r0
 8010886:	4b19      	ldr	r3, [pc, #100]	@ (80108ec <__s2b+0x8c>)
 8010888:	4819      	ldr	r0, [pc, #100]	@ (80108f0 <__s2b+0x90>)
 801088a:	21d3      	movs	r1, #211	@ 0xd3
 801088c:	f000 fea0 	bl	80115d0 <__assert_func>
 8010890:	0052      	lsls	r2, r2, #1
 8010892:	3101      	adds	r1, #1
 8010894:	e7f0      	b.n	8010878 <__s2b+0x18>
 8010896:	9b08      	ldr	r3, [sp, #32]
 8010898:	6143      	str	r3, [r0, #20]
 801089a:	2d09      	cmp	r5, #9
 801089c:	f04f 0301 	mov.w	r3, #1
 80108a0:	6103      	str	r3, [r0, #16]
 80108a2:	dd16      	ble.n	80108d2 <__s2b+0x72>
 80108a4:	f104 0909 	add.w	r9, r4, #9
 80108a8:	46c8      	mov	r8, r9
 80108aa:	442c      	add	r4, r5
 80108ac:	f818 3b01 	ldrb.w	r3, [r8], #1
 80108b0:	4601      	mov	r1, r0
 80108b2:	3b30      	subs	r3, #48	@ 0x30
 80108b4:	220a      	movs	r2, #10
 80108b6:	4630      	mov	r0, r6
 80108b8:	f7ff ff8c 	bl	80107d4 <__multadd>
 80108bc:	45a0      	cmp	r8, r4
 80108be:	d1f5      	bne.n	80108ac <__s2b+0x4c>
 80108c0:	f1a5 0408 	sub.w	r4, r5, #8
 80108c4:	444c      	add	r4, r9
 80108c6:	1b2d      	subs	r5, r5, r4
 80108c8:	1963      	adds	r3, r4, r5
 80108ca:	42bb      	cmp	r3, r7
 80108cc:	db04      	blt.n	80108d8 <__s2b+0x78>
 80108ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80108d2:	340a      	adds	r4, #10
 80108d4:	2509      	movs	r5, #9
 80108d6:	e7f6      	b.n	80108c6 <__s2b+0x66>
 80108d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80108dc:	4601      	mov	r1, r0
 80108de:	3b30      	subs	r3, #48	@ 0x30
 80108e0:	220a      	movs	r2, #10
 80108e2:	4630      	mov	r0, r6
 80108e4:	f7ff ff76 	bl	80107d4 <__multadd>
 80108e8:	e7ee      	b.n	80108c8 <__s2b+0x68>
 80108ea:	bf00      	nop
 80108ec:	08011f83 	.word	0x08011f83
 80108f0:	08011ff4 	.word	0x08011ff4

080108f4 <__hi0bits>:
 80108f4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80108f8:	4603      	mov	r3, r0
 80108fa:	bf36      	itet	cc
 80108fc:	0403      	lslcc	r3, r0, #16
 80108fe:	2000      	movcs	r0, #0
 8010900:	2010      	movcc	r0, #16
 8010902:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010906:	bf3c      	itt	cc
 8010908:	021b      	lslcc	r3, r3, #8
 801090a:	3008      	addcc	r0, #8
 801090c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010910:	bf3c      	itt	cc
 8010912:	011b      	lslcc	r3, r3, #4
 8010914:	3004      	addcc	r0, #4
 8010916:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801091a:	bf3c      	itt	cc
 801091c:	009b      	lslcc	r3, r3, #2
 801091e:	3002      	addcc	r0, #2
 8010920:	2b00      	cmp	r3, #0
 8010922:	db05      	blt.n	8010930 <__hi0bits+0x3c>
 8010924:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010928:	f100 0001 	add.w	r0, r0, #1
 801092c:	bf08      	it	eq
 801092e:	2020      	moveq	r0, #32
 8010930:	4770      	bx	lr

08010932 <__lo0bits>:
 8010932:	6803      	ldr	r3, [r0, #0]
 8010934:	4602      	mov	r2, r0
 8010936:	f013 0007 	ands.w	r0, r3, #7
 801093a:	d00b      	beq.n	8010954 <__lo0bits+0x22>
 801093c:	07d9      	lsls	r1, r3, #31
 801093e:	d421      	bmi.n	8010984 <__lo0bits+0x52>
 8010940:	0798      	lsls	r0, r3, #30
 8010942:	bf49      	itett	mi
 8010944:	085b      	lsrmi	r3, r3, #1
 8010946:	089b      	lsrpl	r3, r3, #2
 8010948:	2001      	movmi	r0, #1
 801094a:	6013      	strmi	r3, [r2, #0]
 801094c:	bf5c      	itt	pl
 801094e:	6013      	strpl	r3, [r2, #0]
 8010950:	2002      	movpl	r0, #2
 8010952:	4770      	bx	lr
 8010954:	b299      	uxth	r1, r3
 8010956:	b909      	cbnz	r1, 801095c <__lo0bits+0x2a>
 8010958:	0c1b      	lsrs	r3, r3, #16
 801095a:	2010      	movs	r0, #16
 801095c:	b2d9      	uxtb	r1, r3
 801095e:	b909      	cbnz	r1, 8010964 <__lo0bits+0x32>
 8010960:	3008      	adds	r0, #8
 8010962:	0a1b      	lsrs	r3, r3, #8
 8010964:	0719      	lsls	r1, r3, #28
 8010966:	bf04      	itt	eq
 8010968:	091b      	lsreq	r3, r3, #4
 801096a:	3004      	addeq	r0, #4
 801096c:	0799      	lsls	r1, r3, #30
 801096e:	bf04      	itt	eq
 8010970:	089b      	lsreq	r3, r3, #2
 8010972:	3002      	addeq	r0, #2
 8010974:	07d9      	lsls	r1, r3, #31
 8010976:	d403      	bmi.n	8010980 <__lo0bits+0x4e>
 8010978:	085b      	lsrs	r3, r3, #1
 801097a:	f100 0001 	add.w	r0, r0, #1
 801097e:	d003      	beq.n	8010988 <__lo0bits+0x56>
 8010980:	6013      	str	r3, [r2, #0]
 8010982:	4770      	bx	lr
 8010984:	2000      	movs	r0, #0
 8010986:	4770      	bx	lr
 8010988:	2020      	movs	r0, #32
 801098a:	4770      	bx	lr

0801098c <__i2b>:
 801098c:	b510      	push	{r4, lr}
 801098e:	460c      	mov	r4, r1
 8010990:	2101      	movs	r1, #1
 8010992:	f7ff febd 	bl	8010710 <_Balloc>
 8010996:	4602      	mov	r2, r0
 8010998:	b928      	cbnz	r0, 80109a6 <__i2b+0x1a>
 801099a:	4b05      	ldr	r3, [pc, #20]	@ (80109b0 <__i2b+0x24>)
 801099c:	4805      	ldr	r0, [pc, #20]	@ (80109b4 <__i2b+0x28>)
 801099e:	f240 1145 	movw	r1, #325	@ 0x145
 80109a2:	f000 fe15 	bl	80115d0 <__assert_func>
 80109a6:	2301      	movs	r3, #1
 80109a8:	6144      	str	r4, [r0, #20]
 80109aa:	6103      	str	r3, [r0, #16]
 80109ac:	bd10      	pop	{r4, pc}
 80109ae:	bf00      	nop
 80109b0:	08011f83 	.word	0x08011f83
 80109b4:	08011ff4 	.word	0x08011ff4

080109b8 <__multiply>:
 80109b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109bc:	4617      	mov	r7, r2
 80109be:	690a      	ldr	r2, [r1, #16]
 80109c0:	693b      	ldr	r3, [r7, #16]
 80109c2:	429a      	cmp	r2, r3
 80109c4:	bfa8      	it	ge
 80109c6:	463b      	movge	r3, r7
 80109c8:	4689      	mov	r9, r1
 80109ca:	bfa4      	itt	ge
 80109cc:	460f      	movge	r7, r1
 80109ce:	4699      	movge	r9, r3
 80109d0:	693d      	ldr	r5, [r7, #16]
 80109d2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80109d6:	68bb      	ldr	r3, [r7, #8]
 80109d8:	6879      	ldr	r1, [r7, #4]
 80109da:	eb05 060a 	add.w	r6, r5, sl
 80109de:	42b3      	cmp	r3, r6
 80109e0:	b085      	sub	sp, #20
 80109e2:	bfb8      	it	lt
 80109e4:	3101      	addlt	r1, #1
 80109e6:	f7ff fe93 	bl	8010710 <_Balloc>
 80109ea:	b930      	cbnz	r0, 80109fa <__multiply+0x42>
 80109ec:	4602      	mov	r2, r0
 80109ee:	4b41      	ldr	r3, [pc, #260]	@ (8010af4 <__multiply+0x13c>)
 80109f0:	4841      	ldr	r0, [pc, #260]	@ (8010af8 <__multiply+0x140>)
 80109f2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80109f6:	f000 fdeb 	bl	80115d0 <__assert_func>
 80109fa:	f100 0414 	add.w	r4, r0, #20
 80109fe:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8010a02:	4623      	mov	r3, r4
 8010a04:	2200      	movs	r2, #0
 8010a06:	4573      	cmp	r3, lr
 8010a08:	d320      	bcc.n	8010a4c <__multiply+0x94>
 8010a0a:	f107 0814 	add.w	r8, r7, #20
 8010a0e:	f109 0114 	add.w	r1, r9, #20
 8010a12:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8010a16:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8010a1a:	9302      	str	r3, [sp, #8]
 8010a1c:	1beb      	subs	r3, r5, r7
 8010a1e:	3b15      	subs	r3, #21
 8010a20:	f023 0303 	bic.w	r3, r3, #3
 8010a24:	3304      	adds	r3, #4
 8010a26:	3715      	adds	r7, #21
 8010a28:	42bd      	cmp	r5, r7
 8010a2a:	bf38      	it	cc
 8010a2c:	2304      	movcc	r3, #4
 8010a2e:	9301      	str	r3, [sp, #4]
 8010a30:	9b02      	ldr	r3, [sp, #8]
 8010a32:	9103      	str	r1, [sp, #12]
 8010a34:	428b      	cmp	r3, r1
 8010a36:	d80c      	bhi.n	8010a52 <__multiply+0x9a>
 8010a38:	2e00      	cmp	r6, #0
 8010a3a:	dd03      	ble.n	8010a44 <__multiply+0x8c>
 8010a3c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d055      	beq.n	8010af0 <__multiply+0x138>
 8010a44:	6106      	str	r6, [r0, #16]
 8010a46:	b005      	add	sp, #20
 8010a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a4c:	f843 2b04 	str.w	r2, [r3], #4
 8010a50:	e7d9      	b.n	8010a06 <__multiply+0x4e>
 8010a52:	f8b1 a000 	ldrh.w	sl, [r1]
 8010a56:	f1ba 0f00 	cmp.w	sl, #0
 8010a5a:	d01f      	beq.n	8010a9c <__multiply+0xe4>
 8010a5c:	46c4      	mov	ip, r8
 8010a5e:	46a1      	mov	r9, r4
 8010a60:	2700      	movs	r7, #0
 8010a62:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010a66:	f8d9 3000 	ldr.w	r3, [r9]
 8010a6a:	fa1f fb82 	uxth.w	fp, r2
 8010a6e:	b29b      	uxth	r3, r3
 8010a70:	fb0a 330b 	mla	r3, sl, fp, r3
 8010a74:	443b      	add	r3, r7
 8010a76:	f8d9 7000 	ldr.w	r7, [r9]
 8010a7a:	0c12      	lsrs	r2, r2, #16
 8010a7c:	0c3f      	lsrs	r7, r7, #16
 8010a7e:	fb0a 7202 	mla	r2, sl, r2, r7
 8010a82:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8010a86:	b29b      	uxth	r3, r3
 8010a88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010a8c:	4565      	cmp	r5, ip
 8010a8e:	f849 3b04 	str.w	r3, [r9], #4
 8010a92:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8010a96:	d8e4      	bhi.n	8010a62 <__multiply+0xaa>
 8010a98:	9b01      	ldr	r3, [sp, #4]
 8010a9a:	50e7      	str	r7, [r4, r3]
 8010a9c:	9b03      	ldr	r3, [sp, #12]
 8010a9e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010aa2:	3104      	adds	r1, #4
 8010aa4:	f1b9 0f00 	cmp.w	r9, #0
 8010aa8:	d020      	beq.n	8010aec <__multiply+0x134>
 8010aaa:	6823      	ldr	r3, [r4, #0]
 8010aac:	4647      	mov	r7, r8
 8010aae:	46a4      	mov	ip, r4
 8010ab0:	f04f 0a00 	mov.w	sl, #0
 8010ab4:	f8b7 b000 	ldrh.w	fp, [r7]
 8010ab8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8010abc:	fb09 220b 	mla	r2, r9, fp, r2
 8010ac0:	4452      	add	r2, sl
 8010ac2:	b29b      	uxth	r3, r3
 8010ac4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010ac8:	f84c 3b04 	str.w	r3, [ip], #4
 8010acc:	f857 3b04 	ldr.w	r3, [r7], #4
 8010ad0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010ad4:	f8bc 3000 	ldrh.w	r3, [ip]
 8010ad8:	fb09 330a 	mla	r3, r9, sl, r3
 8010adc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8010ae0:	42bd      	cmp	r5, r7
 8010ae2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010ae6:	d8e5      	bhi.n	8010ab4 <__multiply+0xfc>
 8010ae8:	9a01      	ldr	r2, [sp, #4]
 8010aea:	50a3      	str	r3, [r4, r2]
 8010aec:	3404      	adds	r4, #4
 8010aee:	e79f      	b.n	8010a30 <__multiply+0x78>
 8010af0:	3e01      	subs	r6, #1
 8010af2:	e7a1      	b.n	8010a38 <__multiply+0x80>
 8010af4:	08011f83 	.word	0x08011f83
 8010af8:	08011ff4 	.word	0x08011ff4

08010afc <__pow5mult>:
 8010afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b00:	4615      	mov	r5, r2
 8010b02:	f012 0203 	ands.w	r2, r2, #3
 8010b06:	4607      	mov	r7, r0
 8010b08:	460e      	mov	r6, r1
 8010b0a:	d007      	beq.n	8010b1c <__pow5mult+0x20>
 8010b0c:	4c25      	ldr	r4, [pc, #148]	@ (8010ba4 <__pow5mult+0xa8>)
 8010b0e:	3a01      	subs	r2, #1
 8010b10:	2300      	movs	r3, #0
 8010b12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010b16:	f7ff fe5d 	bl	80107d4 <__multadd>
 8010b1a:	4606      	mov	r6, r0
 8010b1c:	10ad      	asrs	r5, r5, #2
 8010b1e:	d03d      	beq.n	8010b9c <__pow5mult+0xa0>
 8010b20:	69fc      	ldr	r4, [r7, #28]
 8010b22:	b97c      	cbnz	r4, 8010b44 <__pow5mult+0x48>
 8010b24:	2010      	movs	r0, #16
 8010b26:	f7ff fd2b 	bl	8010580 <malloc>
 8010b2a:	4602      	mov	r2, r0
 8010b2c:	61f8      	str	r0, [r7, #28]
 8010b2e:	b928      	cbnz	r0, 8010b3c <__pow5mult+0x40>
 8010b30:	4b1d      	ldr	r3, [pc, #116]	@ (8010ba8 <__pow5mult+0xac>)
 8010b32:	481e      	ldr	r0, [pc, #120]	@ (8010bac <__pow5mult+0xb0>)
 8010b34:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010b38:	f000 fd4a 	bl	80115d0 <__assert_func>
 8010b3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010b40:	6004      	str	r4, [r0, #0]
 8010b42:	60c4      	str	r4, [r0, #12]
 8010b44:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010b48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010b4c:	b94c      	cbnz	r4, 8010b62 <__pow5mult+0x66>
 8010b4e:	f240 2171 	movw	r1, #625	@ 0x271
 8010b52:	4638      	mov	r0, r7
 8010b54:	f7ff ff1a 	bl	801098c <__i2b>
 8010b58:	2300      	movs	r3, #0
 8010b5a:	f8c8 0008 	str.w	r0, [r8, #8]
 8010b5e:	4604      	mov	r4, r0
 8010b60:	6003      	str	r3, [r0, #0]
 8010b62:	f04f 0900 	mov.w	r9, #0
 8010b66:	07eb      	lsls	r3, r5, #31
 8010b68:	d50a      	bpl.n	8010b80 <__pow5mult+0x84>
 8010b6a:	4631      	mov	r1, r6
 8010b6c:	4622      	mov	r2, r4
 8010b6e:	4638      	mov	r0, r7
 8010b70:	f7ff ff22 	bl	80109b8 <__multiply>
 8010b74:	4631      	mov	r1, r6
 8010b76:	4680      	mov	r8, r0
 8010b78:	4638      	mov	r0, r7
 8010b7a:	f7ff fe09 	bl	8010790 <_Bfree>
 8010b7e:	4646      	mov	r6, r8
 8010b80:	106d      	asrs	r5, r5, #1
 8010b82:	d00b      	beq.n	8010b9c <__pow5mult+0xa0>
 8010b84:	6820      	ldr	r0, [r4, #0]
 8010b86:	b938      	cbnz	r0, 8010b98 <__pow5mult+0x9c>
 8010b88:	4622      	mov	r2, r4
 8010b8a:	4621      	mov	r1, r4
 8010b8c:	4638      	mov	r0, r7
 8010b8e:	f7ff ff13 	bl	80109b8 <__multiply>
 8010b92:	6020      	str	r0, [r4, #0]
 8010b94:	f8c0 9000 	str.w	r9, [r0]
 8010b98:	4604      	mov	r4, r0
 8010b9a:	e7e4      	b.n	8010b66 <__pow5mult+0x6a>
 8010b9c:	4630      	mov	r0, r6
 8010b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ba2:	bf00      	nop
 8010ba4:	080120f0 	.word	0x080120f0
 8010ba8:	08011f14 	.word	0x08011f14
 8010bac:	08011ff4 	.word	0x08011ff4

08010bb0 <__lshift>:
 8010bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010bb4:	460c      	mov	r4, r1
 8010bb6:	6849      	ldr	r1, [r1, #4]
 8010bb8:	6923      	ldr	r3, [r4, #16]
 8010bba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010bbe:	68a3      	ldr	r3, [r4, #8]
 8010bc0:	4607      	mov	r7, r0
 8010bc2:	4691      	mov	r9, r2
 8010bc4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010bc8:	f108 0601 	add.w	r6, r8, #1
 8010bcc:	42b3      	cmp	r3, r6
 8010bce:	db0b      	blt.n	8010be8 <__lshift+0x38>
 8010bd0:	4638      	mov	r0, r7
 8010bd2:	f7ff fd9d 	bl	8010710 <_Balloc>
 8010bd6:	4605      	mov	r5, r0
 8010bd8:	b948      	cbnz	r0, 8010bee <__lshift+0x3e>
 8010bda:	4602      	mov	r2, r0
 8010bdc:	4b28      	ldr	r3, [pc, #160]	@ (8010c80 <__lshift+0xd0>)
 8010bde:	4829      	ldr	r0, [pc, #164]	@ (8010c84 <__lshift+0xd4>)
 8010be0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010be4:	f000 fcf4 	bl	80115d0 <__assert_func>
 8010be8:	3101      	adds	r1, #1
 8010bea:	005b      	lsls	r3, r3, #1
 8010bec:	e7ee      	b.n	8010bcc <__lshift+0x1c>
 8010bee:	2300      	movs	r3, #0
 8010bf0:	f100 0114 	add.w	r1, r0, #20
 8010bf4:	f100 0210 	add.w	r2, r0, #16
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	4553      	cmp	r3, sl
 8010bfc:	db33      	blt.n	8010c66 <__lshift+0xb6>
 8010bfe:	6920      	ldr	r0, [r4, #16]
 8010c00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010c04:	f104 0314 	add.w	r3, r4, #20
 8010c08:	f019 091f 	ands.w	r9, r9, #31
 8010c0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010c10:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010c14:	d02b      	beq.n	8010c6e <__lshift+0xbe>
 8010c16:	f1c9 0e20 	rsb	lr, r9, #32
 8010c1a:	468a      	mov	sl, r1
 8010c1c:	2200      	movs	r2, #0
 8010c1e:	6818      	ldr	r0, [r3, #0]
 8010c20:	fa00 f009 	lsl.w	r0, r0, r9
 8010c24:	4310      	orrs	r0, r2
 8010c26:	f84a 0b04 	str.w	r0, [sl], #4
 8010c2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c2e:	459c      	cmp	ip, r3
 8010c30:	fa22 f20e 	lsr.w	r2, r2, lr
 8010c34:	d8f3      	bhi.n	8010c1e <__lshift+0x6e>
 8010c36:	ebac 0304 	sub.w	r3, ip, r4
 8010c3a:	3b15      	subs	r3, #21
 8010c3c:	f023 0303 	bic.w	r3, r3, #3
 8010c40:	3304      	adds	r3, #4
 8010c42:	f104 0015 	add.w	r0, r4, #21
 8010c46:	4560      	cmp	r0, ip
 8010c48:	bf88      	it	hi
 8010c4a:	2304      	movhi	r3, #4
 8010c4c:	50ca      	str	r2, [r1, r3]
 8010c4e:	b10a      	cbz	r2, 8010c54 <__lshift+0xa4>
 8010c50:	f108 0602 	add.w	r6, r8, #2
 8010c54:	3e01      	subs	r6, #1
 8010c56:	4638      	mov	r0, r7
 8010c58:	612e      	str	r6, [r5, #16]
 8010c5a:	4621      	mov	r1, r4
 8010c5c:	f7ff fd98 	bl	8010790 <_Bfree>
 8010c60:	4628      	mov	r0, r5
 8010c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c66:	f842 0f04 	str.w	r0, [r2, #4]!
 8010c6a:	3301      	adds	r3, #1
 8010c6c:	e7c5      	b.n	8010bfa <__lshift+0x4a>
 8010c6e:	3904      	subs	r1, #4
 8010c70:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c74:	f841 2f04 	str.w	r2, [r1, #4]!
 8010c78:	459c      	cmp	ip, r3
 8010c7a:	d8f9      	bhi.n	8010c70 <__lshift+0xc0>
 8010c7c:	e7ea      	b.n	8010c54 <__lshift+0xa4>
 8010c7e:	bf00      	nop
 8010c80:	08011f83 	.word	0x08011f83
 8010c84:	08011ff4 	.word	0x08011ff4

08010c88 <__mcmp>:
 8010c88:	690a      	ldr	r2, [r1, #16]
 8010c8a:	4603      	mov	r3, r0
 8010c8c:	6900      	ldr	r0, [r0, #16]
 8010c8e:	1a80      	subs	r0, r0, r2
 8010c90:	b530      	push	{r4, r5, lr}
 8010c92:	d10e      	bne.n	8010cb2 <__mcmp+0x2a>
 8010c94:	3314      	adds	r3, #20
 8010c96:	3114      	adds	r1, #20
 8010c98:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010c9c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010ca0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010ca4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010ca8:	4295      	cmp	r5, r2
 8010caa:	d003      	beq.n	8010cb4 <__mcmp+0x2c>
 8010cac:	d205      	bcs.n	8010cba <__mcmp+0x32>
 8010cae:	f04f 30ff 	mov.w	r0, #4294967295
 8010cb2:	bd30      	pop	{r4, r5, pc}
 8010cb4:	42a3      	cmp	r3, r4
 8010cb6:	d3f3      	bcc.n	8010ca0 <__mcmp+0x18>
 8010cb8:	e7fb      	b.n	8010cb2 <__mcmp+0x2a>
 8010cba:	2001      	movs	r0, #1
 8010cbc:	e7f9      	b.n	8010cb2 <__mcmp+0x2a>
	...

08010cc0 <__mdiff>:
 8010cc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cc4:	4689      	mov	r9, r1
 8010cc6:	4606      	mov	r6, r0
 8010cc8:	4611      	mov	r1, r2
 8010cca:	4648      	mov	r0, r9
 8010ccc:	4614      	mov	r4, r2
 8010cce:	f7ff ffdb 	bl	8010c88 <__mcmp>
 8010cd2:	1e05      	subs	r5, r0, #0
 8010cd4:	d112      	bne.n	8010cfc <__mdiff+0x3c>
 8010cd6:	4629      	mov	r1, r5
 8010cd8:	4630      	mov	r0, r6
 8010cda:	f7ff fd19 	bl	8010710 <_Balloc>
 8010cde:	4602      	mov	r2, r0
 8010ce0:	b928      	cbnz	r0, 8010cee <__mdiff+0x2e>
 8010ce2:	4b3f      	ldr	r3, [pc, #252]	@ (8010de0 <__mdiff+0x120>)
 8010ce4:	f240 2137 	movw	r1, #567	@ 0x237
 8010ce8:	483e      	ldr	r0, [pc, #248]	@ (8010de4 <__mdiff+0x124>)
 8010cea:	f000 fc71 	bl	80115d0 <__assert_func>
 8010cee:	2301      	movs	r3, #1
 8010cf0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010cf4:	4610      	mov	r0, r2
 8010cf6:	b003      	add	sp, #12
 8010cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cfc:	bfbc      	itt	lt
 8010cfe:	464b      	movlt	r3, r9
 8010d00:	46a1      	movlt	r9, r4
 8010d02:	4630      	mov	r0, r6
 8010d04:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010d08:	bfba      	itte	lt
 8010d0a:	461c      	movlt	r4, r3
 8010d0c:	2501      	movlt	r5, #1
 8010d0e:	2500      	movge	r5, #0
 8010d10:	f7ff fcfe 	bl	8010710 <_Balloc>
 8010d14:	4602      	mov	r2, r0
 8010d16:	b918      	cbnz	r0, 8010d20 <__mdiff+0x60>
 8010d18:	4b31      	ldr	r3, [pc, #196]	@ (8010de0 <__mdiff+0x120>)
 8010d1a:	f240 2145 	movw	r1, #581	@ 0x245
 8010d1e:	e7e3      	b.n	8010ce8 <__mdiff+0x28>
 8010d20:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010d24:	6926      	ldr	r6, [r4, #16]
 8010d26:	60c5      	str	r5, [r0, #12]
 8010d28:	f109 0310 	add.w	r3, r9, #16
 8010d2c:	f109 0514 	add.w	r5, r9, #20
 8010d30:	f104 0e14 	add.w	lr, r4, #20
 8010d34:	f100 0b14 	add.w	fp, r0, #20
 8010d38:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010d3c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010d40:	9301      	str	r3, [sp, #4]
 8010d42:	46d9      	mov	r9, fp
 8010d44:	f04f 0c00 	mov.w	ip, #0
 8010d48:	9b01      	ldr	r3, [sp, #4]
 8010d4a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010d4e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010d52:	9301      	str	r3, [sp, #4]
 8010d54:	fa1f f38a 	uxth.w	r3, sl
 8010d58:	4619      	mov	r1, r3
 8010d5a:	b283      	uxth	r3, r0
 8010d5c:	1acb      	subs	r3, r1, r3
 8010d5e:	0c00      	lsrs	r0, r0, #16
 8010d60:	4463      	add	r3, ip
 8010d62:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010d66:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010d6a:	b29b      	uxth	r3, r3
 8010d6c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010d70:	4576      	cmp	r6, lr
 8010d72:	f849 3b04 	str.w	r3, [r9], #4
 8010d76:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010d7a:	d8e5      	bhi.n	8010d48 <__mdiff+0x88>
 8010d7c:	1b33      	subs	r3, r6, r4
 8010d7e:	3b15      	subs	r3, #21
 8010d80:	f023 0303 	bic.w	r3, r3, #3
 8010d84:	3415      	adds	r4, #21
 8010d86:	3304      	adds	r3, #4
 8010d88:	42a6      	cmp	r6, r4
 8010d8a:	bf38      	it	cc
 8010d8c:	2304      	movcc	r3, #4
 8010d8e:	441d      	add	r5, r3
 8010d90:	445b      	add	r3, fp
 8010d92:	461e      	mov	r6, r3
 8010d94:	462c      	mov	r4, r5
 8010d96:	4544      	cmp	r4, r8
 8010d98:	d30e      	bcc.n	8010db8 <__mdiff+0xf8>
 8010d9a:	f108 0103 	add.w	r1, r8, #3
 8010d9e:	1b49      	subs	r1, r1, r5
 8010da0:	f021 0103 	bic.w	r1, r1, #3
 8010da4:	3d03      	subs	r5, #3
 8010da6:	45a8      	cmp	r8, r5
 8010da8:	bf38      	it	cc
 8010daa:	2100      	movcc	r1, #0
 8010dac:	440b      	add	r3, r1
 8010dae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010db2:	b191      	cbz	r1, 8010dda <__mdiff+0x11a>
 8010db4:	6117      	str	r7, [r2, #16]
 8010db6:	e79d      	b.n	8010cf4 <__mdiff+0x34>
 8010db8:	f854 1b04 	ldr.w	r1, [r4], #4
 8010dbc:	46e6      	mov	lr, ip
 8010dbe:	0c08      	lsrs	r0, r1, #16
 8010dc0:	fa1c fc81 	uxtah	ip, ip, r1
 8010dc4:	4471      	add	r1, lr
 8010dc6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010dca:	b289      	uxth	r1, r1
 8010dcc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010dd0:	f846 1b04 	str.w	r1, [r6], #4
 8010dd4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010dd8:	e7dd      	b.n	8010d96 <__mdiff+0xd6>
 8010dda:	3f01      	subs	r7, #1
 8010ddc:	e7e7      	b.n	8010dae <__mdiff+0xee>
 8010dde:	bf00      	nop
 8010de0:	08011f83 	.word	0x08011f83
 8010de4:	08011ff4 	.word	0x08011ff4

08010de8 <__ulp>:
 8010de8:	b082      	sub	sp, #8
 8010dea:	ed8d 0b00 	vstr	d0, [sp]
 8010dee:	9a01      	ldr	r2, [sp, #4]
 8010df0:	4b0f      	ldr	r3, [pc, #60]	@ (8010e30 <__ulp+0x48>)
 8010df2:	4013      	ands	r3, r2
 8010df4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	dc08      	bgt.n	8010e0e <__ulp+0x26>
 8010dfc:	425b      	negs	r3, r3
 8010dfe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8010e02:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010e06:	da04      	bge.n	8010e12 <__ulp+0x2a>
 8010e08:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010e0c:	4113      	asrs	r3, r2
 8010e0e:	2200      	movs	r2, #0
 8010e10:	e008      	b.n	8010e24 <__ulp+0x3c>
 8010e12:	f1a2 0314 	sub.w	r3, r2, #20
 8010e16:	2b1e      	cmp	r3, #30
 8010e18:	bfda      	itte	le
 8010e1a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8010e1e:	40da      	lsrle	r2, r3
 8010e20:	2201      	movgt	r2, #1
 8010e22:	2300      	movs	r3, #0
 8010e24:	4619      	mov	r1, r3
 8010e26:	4610      	mov	r0, r2
 8010e28:	ec41 0b10 	vmov	d0, r0, r1
 8010e2c:	b002      	add	sp, #8
 8010e2e:	4770      	bx	lr
 8010e30:	7ff00000 	.word	0x7ff00000

08010e34 <__b2d>:
 8010e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e38:	6906      	ldr	r6, [r0, #16]
 8010e3a:	f100 0814 	add.w	r8, r0, #20
 8010e3e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010e42:	1f37      	subs	r7, r6, #4
 8010e44:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010e48:	4610      	mov	r0, r2
 8010e4a:	f7ff fd53 	bl	80108f4 <__hi0bits>
 8010e4e:	f1c0 0320 	rsb	r3, r0, #32
 8010e52:	280a      	cmp	r0, #10
 8010e54:	600b      	str	r3, [r1, #0]
 8010e56:	491b      	ldr	r1, [pc, #108]	@ (8010ec4 <__b2d+0x90>)
 8010e58:	dc15      	bgt.n	8010e86 <__b2d+0x52>
 8010e5a:	f1c0 0c0b 	rsb	ip, r0, #11
 8010e5e:	fa22 f30c 	lsr.w	r3, r2, ip
 8010e62:	45b8      	cmp	r8, r7
 8010e64:	ea43 0501 	orr.w	r5, r3, r1
 8010e68:	bf34      	ite	cc
 8010e6a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010e6e:	2300      	movcs	r3, #0
 8010e70:	3015      	adds	r0, #21
 8010e72:	fa02 f000 	lsl.w	r0, r2, r0
 8010e76:	fa23 f30c 	lsr.w	r3, r3, ip
 8010e7a:	4303      	orrs	r3, r0
 8010e7c:	461c      	mov	r4, r3
 8010e7e:	ec45 4b10 	vmov	d0, r4, r5
 8010e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e86:	45b8      	cmp	r8, r7
 8010e88:	bf3a      	itte	cc
 8010e8a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010e8e:	f1a6 0708 	subcc.w	r7, r6, #8
 8010e92:	2300      	movcs	r3, #0
 8010e94:	380b      	subs	r0, #11
 8010e96:	d012      	beq.n	8010ebe <__b2d+0x8a>
 8010e98:	f1c0 0120 	rsb	r1, r0, #32
 8010e9c:	fa23 f401 	lsr.w	r4, r3, r1
 8010ea0:	4082      	lsls	r2, r0
 8010ea2:	4322      	orrs	r2, r4
 8010ea4:	4547      	cmp	r7, r8
 8010ea6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8010eaa:	bf8c      	ite	hi
 8010eac:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010eb0:	2200      	movls	r2, #0
 8010eb2:	4083      	lsls	r3, r0
 8010eb4:	40ca      	lsrs	r2, r1
 8010eb6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8010eba:	4313      	orrs	r3, r2
 8010ebc:	e7de      	b.n	8010e7c <__b2d+0x48>
 8010ebe:	ea42 0501 	orr.w	r5, r2, r1
 8010ec2:	e7db      	b.n	8010e7c <__b2d+0x48>
 8010ec4:	3ff00000 	.word	0x3ff00000

08010ec8 <__d2b>:
 8010ec8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010ecc:	460f      	mov	r7, r1
 8010ece:	2101      	movs	r1, #1
 8010ed0:	ec59 8b10 	vmov	r8, r9, d0
 8010ed4:	4616      	mov	r6, r2
 8010ed6:	f7ff fc1b 	bl	8010710 <_Balloc>
 8010eda:	4604      	mov	r4, r0
 8010edc:	b930      	cbnz	r0, 8010eec <__d2b+0x24>
 8010ede:	4602      	mov	r2, r0
 8010ee0:	4b23      	ldr	r3, [pc, #140]	@ (8010f70 <__d2b+0xa8>)
 8010ee2:	4824      	ldr	r0, [pc, #144]	@ (8010f74 <__d2b+0xac>)
 8010ee4:	f240 310f 	movw	r1, #783	@ 0x30f
 8010ee8:	f000 fb72 	bl	80115d0 <__assert_func>
 8010eec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010ef0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010ef4:	b10d      	cbz	r5, 8010efa <__d2b+0x32>
 8010ef6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010efa:	9301      	str	r3, [sp, #4]
 8010efc:	f1b8 0300 	subs.w	r3, r8, #0
 8010f00:	d023      	beq.n	8010f4a <__d2b+0x82>
 8010f02:	4668      	mov	r0, sp
 8010f04:	9300      	str	r3, [sp, #0]
 8010f06:	f7ff fd14 	bl	8010932 <__lo0bits>
 8010f0a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010f0e:	b1d0      	cbz	r0, 8010f46 <__d2b+0x7e>
 8010f10:	f1c0 0320 	rsb	r3, r0, #32
 8010f14:	fa02 f303 	lsl.w	r3, r2, r3
 8010f18:	430b      	orrs	r3, r1
 8010f1a:	40c2      	lsrs	r2, r0
 8010f1c:	6163      	str	r3, [r4, #20]
 8010f1e:	9201      	str	r2, [sp, #4]
 8010f20:	9b01      	ldr	r3, [sp, #4]
 8010f22:	61a3      	str	r3, [r4, #24]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	bf0c      	ite	eq
 8010f28:	2201      	moveq	r2, #1
 8010f2a:	2202      	movne	r2, #2
 8010f2c:	6122      	str	r2, [r4, #16]
 8010f2e:	b1a5      	cbz	r5, 8010f5a <__d2b+0x92>
 8010f30:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010f34:	4405      	add	r5, r0
 8010f36:	603d      	str	r5, [r7, #0]
 8010f38:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010f3c:	6030      	str	r0, [r6, #0]
 8010f3e:	4620      	mov	r0, r4
 8010f40:	b003      	add	sp, #12
 8010f42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f46:	6161      	str	r1, [r4, #20]
 8010f48:	e7ea      	b.n	8010f20 <__d2b+0x58>
 8010f4a:	a801      	add	r0, sp, #4
 8010f4c:	f7ff fcf1 	bl	8010932 <__lo0bits>
 8010f50:	9b01      	ldr	r3, [sp, #4]
 8010f52:	6163      	str	r3, [r4, #20]
 8010f54:	3020      	adds	r0, #32
 8010f56:	2201      	movs	r2, #1
 8010f58:	e7e8      	b.n	8010f2c <__d2b+0x64>
 8010f5a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010f5e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010f62:	6038      	str	r0, [r7, #0]
 8010f64:	6918      	ldr	r0, [r3, #16]
 8010f66:	f7ff fcc5 	bl	80108f4 <__hi0bits>
 8010f6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010f6e:	e7e5      	b.n	8010f3c <__d2b+0x74>
 8010f70:	08011f83 	.word	0x08011f83
 8010f74:	08011ff4 	.word	0x08011ff4

08010f78 <__ratio>:
 8010f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f7c:	b085      	sub	sp, #20
 8010f7e:	e9cd 1000 	strd	r1, r0, [sp]
 8010f82:	a902      	add	r1, sp, #8
 8010f84:	f7ff ff56 	bl	8010e34 <__b2d>
 8010f88:	9800      	ldr	r0, [sp, #0]
 8010f8a:	a903      	add	r1, sp, #12
 8010f8c:	ec55 4b10 	vmov	r4, r5, d0
 8010f90:	f7ff ff50 	bl	8010e34 <__b2d>
 8010f94:	9b01      	ldr	r3, [sp, #4]
 8010f96:	6919      	ldr	r1, [r3, #16]
 8010f98:	9b00      	ldr	r3, [sp, #0]
 8010f9a:	691b      	ldr	r3, [r3, #16]
 8010f9c:	1ac9      	subs	r1, r1, r3
 8010f9e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8010fa2:	1a9b      	subs	r3, r3, r2
 8010fa4:	ec5b ab10 	vmov	sl, fp, d0
 8010fa8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	bfce      	itee	gt
 8010fb0:	462a      	movgt	r2, r5
 8010fb2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010fb6:	465a      	movle	r2, fp
 8010fb8:	462f      	mov	r7, r5
 8010fba:	46d9      	mov	r9, fp
 8010fbc:	bfcc      	ite	gt
 8010fbe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010fc2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8010fc6:	464b      	mov	r3, r9
 8010fc8:	4652      	mov	r2, sl
 8010fca:	4620      	mov	r0, r4
 8010fcc:	4639      	mov	r1, r7
 8010fce:	f7ef fc45 	bl	800085c <__aeabi_ddiv>
 8010fd2:	ec41 0b10 	vmov	d0, r0, r1
 8010fd6:	b005      	add	sp, #20
 8010fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010fdc <__copybits>:
 8010fdc:	3901      	subs	r1, #1
 8010fde:	b570      	push	{r4, r5, r6, lr}
 8010fe0:	1149      	asrs	r1, r1, #5
 8010fe2:	6914      	ldr	r4, [r2, #16]
 8010fe4:	3101      	adds	r1, #1
 8010fe6:	f102 0314 	add.w	r3, r2, #20
 8010fea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010fee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010ff2:	1f05      	subs	r5, r0, #4
 8010ff4:	42a3      	cmp	r3, r4
 8010ff6:	d30c      	bcc.n	8011012 <__copybits+0x36>
 8010ff8:	1aa3      	subs	r3, r4, r2
 8010ffa:	3b11      	subs	r3, #17
 8010ffc:	f023 0303 	bic.w	r3, r3, #3
 8011000:	3211      	adds	r2, #17
 8011002:	42a2      	cmp	r2, r4
 8011004:	bf88      	it	hi
 8011006:	2300      	movhi	r3, #0
 8011008:	4418      	add	r0, r3
 801100a:	2300      	movs	r3, #0
 801100c:	4288      	cmp	r0, r1
 801100e:	d305      	bcc.n	801101c <__copybits+0x40>
 8011010:	bd70      	pop	{r4, r5, r6, pc}
 8011012:	f853 6b04 	ldr.w	r6, [r3], #4
 8011016:	f845 6f04 	str.w	r6, [r5, #4]!
 801101a:	e7eb      	b.n	8010ff4 <__copybits+0x18>
 801101c:	f840 3b04 	str.w	r3, [r0], #4
 8011020:	e7f4      	b.n	801100c <__copybits+0x30>

08011022 <__any_on>:
 8011022:	f100 0214 	add.w	r2, r0, #20
 8011026:	6900      	ldr	r0, [r0, #16]
 8011028:	114b      	asrs	r3, r1, #5
 801102a:	4298      	cmp	r0, r3
 801102c:	b510      	push	{r4, lr}
 801102e:	db11      	blt.n	8011054 <__any_on+0x32>
 8011030:	dd0a      	ble.n	8011048 <__any_on+0x26>
 8011032:	f011 011f 	ands.w	r1, r1, #31
 8011036:	d007      	beq.n	8011048 <__any_on+0x26>
 8011038:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801103c:	fa24 f001 	lsr.w	r0, r4, r1
 8011040:	fa00 f101 	lsl.w	r1, r0, r1
 8011044:	428c      	cmp	r4, r1
 8011046:	d10b      	bne.n	8011060 <__any_on+0x3e>
 8011048:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801104c:	4293      	cmp	r3, r2
 801104e:	d803      	bhi.n	8011058 <__any_on+0x36>
 8011050:	2000      	movs	r0, #0
 8011052:	bd10      	pop	{r4, pc}
 8011054:	4603      	mov	r3, r0
 8011056:	e7f7      	b.n	8011048 <__any_on+0x26>
 8011058:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801105c:	2900      	cmp	r1, #0
 801105e:	d0f5      	beq.n	801104c <__any_on+0x2a>
 8011060:	2001      	movs	r0, #1
 8011062:	e7f6      	b.n	8011052 <__any_on+0x30>

08011064 <_strtol_l.isra.0>:
 8011064:	2b24      	cmp	r3, #36	@ 0x24
 8011066:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801106a:	4686      	mov	lr, r0
 801106c:	4690      	mov	r8, r2
 801106e:	d801      	bhi.n	8011074 <_strtol_l.isra.0+0x10>
 8011070:	2b01      	cmp	r3, #1
 8011072:	d106      	bne.n	8011082 <_strtol_l.isra.0+0x1e>
 8011074:	f7fe f85a 	bl	800f12c <__errno>
 8011078:	2316      	movs	r3, #22
 801107a:	6003      	str	r3, [r0, #0]
 801107c:	2000      	movs	r0, #0
 801107e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011082:	4834      	ldr	r0, [pc, #208]	@ (8011154 <_strtol_l.isra.0+0xf0>)
 8011084:	460d      	mov	r5, r1
 8011086:	462a      	mov	r2, r5
 8011088:	f815 4b01 	ldrb.w	r4, [r5], #1
 801108c:	5d06      	ldrb	r6, [r0, r4]
 801108e:	f016 0608 	ands.w	r6, r6, #8
 8011092:	d1f8      	bne.n	8011086 <_strtol_l.isra.0+0x22>
 8011094:	2c2d      	cmp	r4, #45	@ 0x2d
 8011096:	d110      	bne.n	80110ba <_strtol_l.isra.0+0x56>
 8011098:	782c      	ldrb	r4, [r5, #0]
 801109a:	2601      	movs	r6, #1
 801109c:	1c95      	adds	r5, r2, #2
 801109e:	f033 0210 	bics.w	r2, r3, #16
 80110a2:	d115      	bne.n	80110d0 <_strtol_l.isra.0+0x6c>
 80110a4:	2c30      	cmp	r4, #48	@ 0x30
 80110a6:	d10d      	bne.n	80110c4 <_strtol_l.isra.0+0x60>
 80110a8:	782a      	ldrb	r2, [r5, #0]
 80110aa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80110ae:	2a58      	cmp	r2, #88	@ 0x58
 80110b0:	d108      	bne.n	80110c4 <_strtol_l.isra.0+0x60>
 80110b2:	786c      	ldrb	r4, [r5, #1]
 80110b4:	3502      	adds	r5, #2
 80110b6:	2310      	movs	r3, #16
 80110b8:	e00a      	b.n	80110d0 <_strtol_l.isra.0+0x6c>
 80110ba:	2c2b      	cmp	r4, #43	@ 0x2b
 80110bc:	bf04      	itt	eq
 80110be:	782c      	ldrbeq	r4, [r5, #0]
 80110c0:	1c95      	addeq	r5, r2, #2
 80110c2:	e7ec      	b.n	801109e <_strtol_l.isra.0+0x3a>
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d1f6      	bne.n	80110b6 <_strtol_l.isra.0+0x52>
 80110c8:	2c30      	cmp	r4, #48	@ 0x30
 80110ca:	bf14      	ite	ne
 80110cc:	230a      	movne	r3, #10
 80110ce:	2308      	moveq	r3, #8
 80110d0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80110d4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80110d8:	2200      	movs	r2, #0
 80110da:	fbbc f9f3 	udiv	r9, ip, r3
 80110de:	4610      	mov	r0, r2
 80110e0:	fb03 ca19 	mls	sl, r3, r9, ip
 80110e4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80110e8:	2f09      	cmp	r7, #9
 80110ea:	d80f      	bhi.n	801110c <_strtol_l.isra.0+0xa8>
 80110ec:	463c      	mov	r4, r7
 80110ee:	42a3      	cmp	r3, r4
 80110f0:	dd1b      	ble.n	801112a <_strtol_l.isra.0+0xc6>
 80110f2:	1c57      	adds	r7, r2, #1
 80110f4:	d007      	beq.n	8011106 <_strtol_l.isra.0+0xa2>
 80110f6:	4581      	cmp	r9, r0
 80110f8:	d314      	bcc.n	8011124 <_strtol_l.isra.0+0xc0>
 80110fa:	d101      	bne.n	8011100 <_strtol_l.isra.0+0x9c>
 80110fc:	45a2      	cmp	sl, r4
 80110fe:	db11      	blt.n	8011124 <_strtol_l.isra.0+0xc0>
 8011100:	fb00 4003 	mla	r0, r0, r3, r4
 8011104:	2201      	movs	r2, #1
 8011106:	f815 4b01 	ldrb.w	r4, [r5], #1
 801110a:	e7eb      	b.n	80110e4 <_strtol_l.isra.0+0x80>
 801110c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011110:	2f19      	cmp	r7, #25
 8011112:	d801      	bhi.n	8011118 <_strtol_l.isra.0+0xb4>
 8011114:	3c37      	subs	r4, #55	@ 0x37
 8011116:	e7ea      	b.n	80110ee <_strtol_l.isra.0+0x8a>
 8011118:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801111c:	2f19      	cmp	r7, #25
 801111e:	d804      	bhi.n	801112a <_strtol_l.isra.0+0xc6>
 8011120:	3c57      	subs	r4, #87	@ 0x57
 8011122:	e7e4      	b.n	80110ee <_strtol_l.isra.0+0x8a>
 8011124:	f04f 32ff 	mov.w	r2, #4294967295
 8011128:	e7ed      	b.n	8011106 <_strtol_l.isra.0+0xa2>
 801112a:	1c53      	adds	r3, r2, #1
 801112c:	d108      	bne.n	8011140 <_strtol_l.isra.0+0xdc>
 801112e:	2322      	movs	r3, #34	@ 0x22
 8011130:	f8ce 3000 	str.w	r3, [lr]
 8011134:	4660      	mov	r0, ip
 8011136:	f1b8 0f00 	cmp.w	r8, #0
 801113a:	d0a0      	beq.n	801107e <_strtol_l.isra.0+0x1a>
 801113c:	1e69      	subs	r1, r5, #1
 801113e:	e006      	b.n	801114e <_strtol_l.isra.0+0xea>
 8011140:	b106      	cbz	r6, 8011144 <_strtol_l.isra.0+0xe0>
 8011142:	4240      	negs	r0, r0
 8011144:	f1b8 0f00 	cmp.w	r8, #0
 8011148:	d099      	beq.n	801107e <_strtol_l.isra.0+0x1a>
 801114a:	2a00      	cmp	r2, #0
 801114c:	d1f6      	bne.n	801113c <_strtol_l.isra.0+0xd8>
 801114e:	f8c8 1000 	str.w	r1, [r8]
 8011152:	e794      	b.n	801107e <_strtol_l.isra.0+0x1a>
 8011154:	080121f1 	.word	0x080121f1

08011158 <_strtol_r>:
 8011158:	f7ff bf84 	b.w	8011064 <_strtol_l.isra.0>

0801115c <__ascii_wctomb>:
 801115c:	4603      	mov	r3, r0
 801115e:	4608      	mov	r0, r1
 8011160:	b141      	cbz	r1, 8011174 <__ascii_wctomb+0x18>
 8011162:	2aff      	cmp	r2, #255	@ 0xff
 8011164:	d904      	bls.n	8011170 <__ascii_wctomb+0x14>
 8011166:	228a      	movs	r2, #138	@ 0x8a
 8011168:	601a      	str	r2, [r3, #0]
 801116a:	f04f 30ff 	mov.w	r0, #4294967295
 801116e:	4770      	bx	lr
 8011170:	700a      	strb	r2, [r1, #0]
 8011172:	2001      	movs	r0, #1
 8011174:	4770      	bx	lr

08011176 <__ssputs_r>:
 8011176:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801117a:	688e      	ldr	r6, [r1, #8]
 801117c:	461f      	mov	r7, r3
 801117e:	42be      	cmp	r6, r7
 8011180:	680b      	ldr	r3, [r1, #0]
 8011182:	4682      	mov	sl, r0
 8011184:	460c      	mov	r4, r1
 8011186:	4690      	mov	r8, r2
 8011188:	d82d      	bhi.n	80111e6 <__ssputs_r+0x70>
 801118a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801118e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011192:	d026      	beq.n	80111e2 <__ssputs_r+0x6c>
 8011194:	6965      	ldr	r5, [r4, #20]
 8011196:	6909      	ldr	r1, [r1, #16]
 8011198:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801119c:	eba3 0901 	sub.w	r9, r3, r1
 80111a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80111a4:	1c7b      	adds	r3, r7, #1
 80111a6:	444b      	add	r3, r9
 80111a8:	106d      	asrs	r5, r5, #1
 80111aa:	429d      	cmp	r5, r3
 80111ac:	bf38      	it	cc
 80111ae:	461d      	movcc	r5, r3
 80111b0:	0553      	lsls	r3, r2, #21
 80111b2:	d527      	bpl.n	8011204 <__ssputs_r+0x8e>
 80111b4:	4629      	mov	r1, r5
 80111b6:	f7ff fa0d 	bl	80105d4 <_malloc_r>
 80111ba:	4606      	mov	r6, r0
 80111bc:	b360      	cbz	r0, 8011218 <__ssputs_r+0xa2>
 80111be:	6921      	ldr	r1, [r4, #16]
 80111c0:	464a      	mov	r2, r9
 80111c2:	f7fd ffe0 	bl	800f186 <memcpy>
 80111c6:	89a3      	ldrh	r3, [r4, #12]
 80111c8:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80111cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80111d0:	81a3      	strh	r3, [r4, #12]
 80111d2:	6126      	str	r6, [r4, #16]
 80111d4:	6165      	str	r5, [r4, #20]
 80111d6:	444e      	add	r6, r9
 80111d8:	eba5 0509 	sub.w	r5, r5, r9
 80111dc:	6026      	str	r6, [r4, #0]
 80111de:	60a5      	str	r5, [r4, #8]
 80111e0:	463e      	mov	r6, r7
 80111e2:	42be      	cmp	r6, r7
 80111e4:	d900      	bls.n	80111e8 <__ssputs_r+0x72>
 80111e6:	463e      	mov	r6, r7
 80111e8:	6820      	ldr	r0, [r4, #0]
 80111ea:	4632      	mov	r2, r6
 80111ec:	4641      	mov	r1, r8
 80111ee:	f000 f9c5 	bl	801157c <memmove>
 80111f2:	68a3      	ldr	r3, [r4, #8]
 80111f4:	1b9b      	subs	r3, r3, r6
 80111f6:	60a3      	str	r3, [r4, #8]
 80111f8:	6823      	ldr	r3, [r4, #0]
 80111fa:	4433      	add	r3, r6
 80111fc:	6023      	str	r3, [r4, #0]
 80111fe:	2000      	movs	r0, #0
 8011200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011204:	462a      	mov	r2, r5
 8011206:	f000 fa15 	bl	8011634 <_realloc_r>
 801120a:	4606      	mov	r6, r0
 801120c:	2800      	cmp	r0, #0
 801120e:	d1e0      	bne.n	80111d2 <__ssputs_r+0x5c>
 8011210:	6921      	ldr	r1, [r4, #16]
 8011212:	4650      	mov	r0, sl
 8011214:	f7fe fe30 	bl	800fe78 <_free_r>
 8011218:	230c      	movs	r3, #12
 801121a:	f8ca 3000 	str.w	r3, [sl]
 801121e:	89a3      	ldrh	r3, [r4, #12]
 8011220:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011224:	81a3      	strh	r3, [r4, #12]
 8011226:	f04f 30ff 	mov.w	r0, #4294967295
 801122a:	e7e9      	b.n	8011200 <__ssputs_r+0x8a>

0801122c <_svfiprintf_r>:
 801122c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011230:	4698      	mov	r8, r3
 8011232:	898b      	ldrh	r3, [r1, #12]
 8011234:	061b      	lsls	r3, r3, #24
 8011236:	b09d      	sub	sp, #116	@ 0x74
 8011238:	4607      	mov	r7, r0
 801123a:	460d      	mov	r5, r1
 801123c:	4614      	mov	r4, r2
 801123e:	d510      	bpl.n	8011262 <_svfiprintf_r+0x36>
 8011240:	690b      	ldr	r3, [r1, #16]
 8011242:	b973      	cbnz	r3, 8011262 <_svfiprintf_r+0x36>
 8011244:	2140      	movs	r1, #64	@ 0x40
 8011246:	f7ff f9c5 	bl	80105d4 <_malloc_r>
 801124a:	6028      	str	r0, [r5, #0]
 801124c:	6128      	str	r0, [r5, #16]
 801124e:	b930      	cbnz	r0, 801125e <_svfiprintf_r+0x32>
 8011250:	230c      	movs	r3, #12
 8011252:	603b      	str	r3, [r7, #0]
 8011254:	f04f 30ff 	mov.w	r0, #4294967295
 8011258:	b01d      	add	sp, #116	@ 0x74
 801125a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801125e:	2340      	movs	r3, #64	@ 0x40
 8011260:	616b      	str	r3, [r5, #20]
 8011262:	2300      	movs	r3, #0
 8011264:	9309      	str	r3, [sp, #36]	@ 0x24
 8011266:	2320      	movs	r3, #32
 8011268:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801126c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011270:	2330      	movs	r3, #48	@ 0x30
 8011272:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011410 <_svfiprintf_r+0x1e4>
 8011276:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801127a:	f04f 0901 	mov.w	r9, #1
 801127e:	4623      	mov	r3, r4
 8011280:	469a      	mov	sl, r3
 8011282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011286:	b10a      	cbz	r2, 801128c <_svfiprintf_r+0x60>
 8011288:	2a25      	cmp	r2, #37	@ 0x25
 801128a:	d1f9      	bne.n	8011280 <_svfiprintf_r+0x54>
 801128c:	ebba 0b04 	subs.w	fp, sl, r4
 8011290:	d00b      	beq.n	80112aa <_svfiprintf_r+0x7e>
 8011292:	465b      	mov	r3, fp
 8011294:	4622      	mov	r2, r4
 8011296:	4629      	mov	r1, r5
 8011298:	4638      	mov	r0, r7
 801129a:	f7ff ff6c 	bl	8011176 <__ssputs_r>
 801129e:	3001      	adds	r0, #1
 80112a0:	f000 80a7 	beq.w	80113f2 <_svfiprintf_r+0x1c6>
 80112a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80112a6:	445a      	add	r2, fp
 80112a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80112aa:	f89a 3000 	ldrb.w	r3, [sl]
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	f000 809f 	beq.w	80113f2 <_svfiprintf_r+0x1c6>
 80112b4:	2300      	movs	r3, #0
 80112b6:	f04f 32ff 	mov.w	r2, #4294967295
 80112ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80112be:	f10a 0a01 	add.w	sl, sl, #1
 80112c2:	9304      	str	r3, [sp, #16]
 80112c4:	9307      	str	r3, [sp, #28]
 80112c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80112ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80112cc:	4654      	mov	r4, sl
 80112ce:	2205      	movs	r2, #5
 80112d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112d4:	484e      	ldr	r0, [pc, #312]	@ (8011410 <_svfiprintf_r+0x1e4>)
 80112d6:	f7ee ff83 	bl	80001e0 <memchr>
 80112da:	9a04      	ldr	r2, [sp, #16]
 80112dc:	b9d8      	cbnz	r0, 8011316 <_svfiprintf_r+0xea>
 80112de:	06d0      	lsls	r0, r2, #27
 80112e0:	bf44      	itt	mi
 80112e2:	2320      	movmi	r3, #32
 80112e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80112e8:	0711      	lsls	r1, r2, #28
 80112ea:	bf44      	itt	mi
 80112ec:	232b      	movmi	r3, #43	@ 0x2b
 80112ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80112f2:	f89a 3000 	ldrb.w	r3, [sl]
 80112f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80112f8:	d015      	beq.n	8011326 <_svfiprintf_r+0xfa>
 80112fa:	9a07      	ldr	r2, [sp, #28]
 80112fc:	4654      	mov	r4, sl
 80112fe:	2000      	movs	r0, #0
 8011300:	f04f 0c0a 	mov.w	ip, #10
 8011304:	4621      	mov	r1, r4
 8011306:	f811 3b01 	ldrb.w	r3, [r1], #1
 801130a:	3b30      	subs	r3, #48	@ 0x30
 801130c:	2b09      	cmp	r3, #9
 801130e:	d94b      	bls.n	80113a8 <_svfiprintf_r+0x17c>
 8011310:	b1b0      	cbz	r0, 8011340 <_svfiprintf_r+0x114>
 8011312:	9207      	str	r2, [sp, #28]
 8011314:	e014      	b.n	8011340 <_svfiprintf_r+0x114>
 8011316:	eba0 0308 	sub.w	r3, r0, r8
 801131a:	fa09 f303 	lsl.w	r3, r9, r3
 801131e:	4313      	orrs	r3, r2
 8011320:	9304      	str	r3, [sp, #16]
 8011322:	46a2      	mov	sl, r4
 8011324:	e7d2      	b.n	80112cc <_svfiprintf_r+0xa0>
 8011326:	9b03      	ldr	r3, [sp, #12]
 8011328:	1d19      	adds	r1, r3, #4
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	9103      	str	r1, [sp, #12]
 801132e:	2b00      	cmp	r3, #0
 8011330:	bfbb      	ittet	lt
 8011332:	425b      	neglt	r3, r3
 8011334:	f042 0202 	orrlt.w	r2, r2, #2
 8011338:	9307      	strge	r3, [sp, #28]
 801133a:	9307      	strlt	r3, [sp, #28]
 801133c:	bfb8      	it	lt
 801133e:	9204      	strlt	r2, [sp, #16]
 8011340:	7823      	ldrb	r3, [r4, #0]
 8011342:	2b2e      	cmp	r3, #46	@ 0x2e
 8011344:	d10a      	bne.n	801135c <_svfiprintf_r+0x130>
 8011346:	7863      	ldrb	r3, [r4, #1]
 8011348:	2b2a      	cmp	r3, #42	@ 0x2a
 801134a:	d132      	bne.n	80113b2 <_svfiprintf_r+0x186>
 801134c:	9b03      	ldr	r3, [sp, #12]
 801134e:	1d1a      	adds	r2, r3, #4
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	9203      	str	r2, [sp, #12]
 8011354:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011358:	3402      	adds	r4, #2
 801135a:	9305      	str	r3, [sp, #20]
 801135c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011420 <_svfiprintf_r+0x1f4>
 8011360:	7821      	ldrb	r1, [r4, #0]
 8011362:	2203      	movs	r2, #3
 8011364:	4650      	mov	r0, sl
 8011366:	f7ee ff3b 	bl	80001e0 <memchr>
 801136a:	b138      	cbz	r0, 801137c <_svfiprintf_r+0x150>
 801136c:	9b04      	ldr	r3, [sp, #16]
 801136e:	eba0 000a 	sub.w	r0, r0, sl
 8011372:	2240      	movs	r2, #64	@ 0x40
 8011374:	4082      	lsls	r2, r0
 8011376:	4313      	orrs	r3, r2
 8011378:	3401      	adds	r4, #1
 801137a:	9304      	str	r3, [sp, #16]
 801137c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011380:	4824      	ldr	r0, [pc, #144]	@ (8011414 <_svfiprintf_r+0x1e8>)
 8011382:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011386:	2206      	movs	r2, #6
 8011388:	f7ee ff2a 	bl	80001e0 <memchr>
 801138c:	2800      	cmp	r0, #0
 801138e:	d036      	beq.n	80113fe <_svfiprintf_r+0x1d2>
 8011390:	4b21      	ldr	r3, [pc, #132]	@ (8011418 <_svfiprintf_r+0x1ec>)
 8011392:	bb1b      	cbnz	r3, 80113dc <_svfiprintf_r+0x1b0>
 8011394:	9b03      	ldr	r3, [sp, #12]
 8011396:	3307      	adds	r3, #7
 8011398:	f023 0307 	bic.w	r3, r3, #7
 801139c:	3308      	adds	r3, #8
 801139e:	9303      	str	r3, [sp, #12]
 80113a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80113a2:	4433      	add	r3, r6
 80113a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80113a6:	e76a      	b.n	801127e <_svfiprintf_r+0x52>
 80113a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80113ac:	460c      	mov	r4, r1
 80113ae:	2001      	movs	r0, #1
 80113b0:	e7a8      	b.n	8011304 <_svfiprintf_r+0xd8>
 80113b2:	2300      	movs	r3, #0
 80113b4:	3401      	adds	r4, #1
 80113b6:	9305      	str	r3, [sp, #20]
 80113b8:	4619      	mov	r1, r3
 80113ba:	f04f 0c0a 	mov.w	ip, #10
 80113be:	4620      	mov	r0, r4
 80113c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80113c4:	3a30      	subs	r2, #48	@ 0x30
 80113c6:	2a09      	cmp	r2, #9
 80113c8:	d903      	bls.n	80113d2 <_svfiprintf_r+0x1a6>
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d0c6      	beq.n	801135c <_svfiprintf_r+0x130>
 80113ce:	9105      	str	r1, [sp, #20]
 80113d0:	e7c4      	b.n	801135c <_svfiprintf_r+0x130>
 80113d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80113d6:	4604      	mov	r4, r0
 80113d8:	2301      	movs	r3, #1
 80113da:	e7f0      	b.n	80113be <_svfiprintf_r+0x192>
 80113dc:	ab03      	add	r3, sp, #12
 80113de:	9300      	str	r3, [sp, #0]
 80113e0:	462a      	mov	r2, r5
 80113e2:	4b0e      	ldr	r3, [pc, #56]	@ (801141c <_svfiprintf_r+0x1f0>)
 80113e4:	a904      	add	r1, sp, #16
 80113e6:	4638      	mov	r0, r7
 80113e8:	f7fc febc 	bl	800e164 <_printf_float>
 80113ec:	1c42      	adds	r2, r0, #1
 80113ee:	4606      	mov	r6, r0
 80113f0:	d1d6      	bne.n	80113a0 <_svfiprintf_r+0x174>
 80113f2:	89ab      	ldrh	r3, [r5, #12]
 80113f4:	065b      	lsls	r3, r3, #25
 80113f6:	f53f af2d 	bmi.w	8011254 <_svfiprintf_r+0x28>
 80113fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80113fc:	e72c      	b.n	8011258 <_svfiprintf_r+0x2c>
 80113fe:	ab03      	add	r3, sp, #12
 8011400:	9300      	str	r3, [sp, #0]
 8011402:	462a      	mov	r2, r5
 8011404:	4b05      	ldr	r3, [pc, #20]	@ (801141c <_svfiprintf_r+0x1f0>)
 8011406:	a904      	add	r1, sp, #16
 8011408:	4638      	mov	r0, r7
 801140a:	f7fd f943 	bl	800e694 <_printf_i>
 801140e:	e7ed      	b.n	80113ec <_svfiprintf_r+0x1c0>
 8011410:	0801204d 	.word	0x0801204d
 8011414:	08012057 	.word	0x08012057
 8011418:	0800e165 	.word	0x0800e165
 801141c:	08011177 	.word	0x08011177
 8011420:	08012053 	.word	0x08012053

08011424 <__sflush_r>:
 8011424:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801142c:	0716      	lsls	r6, r2, #28
 801142e:	4605      	mov	r5, r0
 8011430:	460c      	mov	r4, r1
 8011432:	d454      	bmi.n	80114de <__sflush_r+0xba>
 8011434:	684b      	ldr	r3, [r1, #4]
 8011436:	2b00      	cmp	r3, #0
 8011438:	dc02      	bgt.n	8011440 <__sflush_r+0x1c>
 801143a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801143c:	2b00      	cmp	r3, #0
 801143e:	dd48      	ble.n	80114d2 <__sflush_r+0xae>
 8011440:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011442:	2e00      	cmp	r6, #0
 8011444:	d045      	beq.n	80114d2 <__sflush_r+0xae>
 8011446:	2300      	movs	r3, #0
 8011448:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801144c:	682f      	ldr	r7, [r5, #0]
 801144e:	6a21      	ldr	r1, [r4, #32]
 8011450:	602b      	str	r3, [r5, #0]
 8011452:	d030      	beq.n	80114b6 <__sflush_r+0x92>
 8011454:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011456:	89a3      	ldrh	r3, [r4, #12]
 8011458:	0759      	lsls	r1, r3, #29
 801145a:	d505      	bpl.n	8011468 <__sflush_r+0x44>
 801145c:	6863      	ldr	r3, [r4, #4]
 801145e:	1ad2      	subs	r2, r2, r3
 8011460:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011462:	b10b      	cbz	r3, 8011468 <__sflush_r+0x44>
 8011464:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011466:	1ad2      	subs	r2, r2, r3
 8011468:	2300      	movs	r3, #0
 801146a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801146c:	6a21      	ldr	r1, [r4, #32]
 801146e:	4628      	mov	r0, r5
 8011470:	47b0      	blx	r6
 8011472:	1c43      	adds	r3, r0, #1
 8011474:	89a3      	ldrh	r3, [r4, #12]
 8011476:	d106      	bne.n	8011486 <__sflush_r+0x62>
 8011478:	6829      	ldr	r1, [r5, #0]
 801147a:	291d      	cmp	r1, #29
 801147c:	d82b      	bhi.n	80114d6 <__sflush_r+0xb2>
 801147e:	4a2a      	ldr	r2, [pc, #168]	@ (8011528 <__sflush_r+0x104>)
 8011480:	40ca      	lsrs	r2, r1
 8011482:	07d6      	lsls	r6, r2, #31
 8011484:	d527      	bpl.n	80114d6 <__sflush_r+0xb2>
 8011486:	2200      	movs	r2, #0
 8011488:	6062      	str	r2, [r4, #4]
 801148a:	04d9      	lsls	r1, r3, #19
 801148c:	6922      	ldr	r2, [r4, #16]
 801148e:	6022      	str	r2, [r4, #0]
 8011490:	d504      	bpl.n	801149c <__sflush_r+0x78>
 8011492:	1c42      	adds	r2, r0, #1
 8011494:	d101      	bne.n	801149a <__sflush_r+0x76>
 8011496:	682b      	ldr	r3, [r5, #0]
 8011498:	b903      	cbnz	r3, 801149c <__sflush_r+0x78>
 801149a:	6560      	str	r0, [r4, #84]	@ 0x54
 801149c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801149e:	602f      	str	r7, [r5, #0]
 80114a0:	b1b9      	cbz	r1, 80114d2 <__sflush_r+0xae>
 80114a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80114a6:	4299      	cmp	r1, r3
 80114a8:	d002      	beq.n	80114b0 <__sflush_r+0x8c>
 80114aa:	4628      	mov	r0, r5
 80114ac:	f7fe fce4 	bl	800fe78 <_free_r>
 80114b0:	2300      	movs	r3, #0
 80114b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80114b4:	e00d      	b.n	80114d2 <__sflush_r+0xae>
 80114b6:	2301      	movs	r3, #1
 80114b8:	4628      	mov	r0, r5
 80114ba:	47b0      	blx	r6
 80114bc:	4602      	mov	r2, r0
 80114be:	1c50      	adds	r0, r2, #1
 80114c0:	d1c9      	bne.n	8011456 <__sflush_r+0x32>
 80114c2:	682b      	ldr	r3, [r5, #0]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d0c6      	beq.n	8011456 <__sflush_r+0x32>
 80114c8:	2b1d      	cmp	r3, #29
 80114ca:	d001      	beq.n	80114d0 <__sflush_r+0xac>
 80114cc:	2b16      	cmp	r3, #22
 80114ce:	d11e      	bne.n	801150e <__sflush_r+0xea>
 80114d0:	602f      	str	r7, [r5, #0]
 80114d2:	2000      	movs	r0, #0
 80114d4:	e022      	b.n	801151c <__sflush_r+0xf8>
 80114d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80114da:	b21b      	sxth	r3, r3
 80114dc:	e01b      	b.n	8011516 <__sflush_r+0xf2>
 80114de:	690f      	ldr	r7, [r1, #16]
 80114e0:	2f00      	cmp	r7, #0
 80114e2:	d0f6      	beq.n	80114d2 <__sflush_r+0xae>
 80114e4:	0793      	lsls	r3, r2, #30
 80114e6:	680e      	ldr	r6, [r1, #0]
 80114e8:	bf08      	it	eq
 80114ea:	694b      	ldreq	r3, [r1, #20]
 80114ec:	600f      	str	r7, [r1, #0]
 80114ee:	bf18      	it	ne
 80114f0:	2300      	movne	r3, #0
 80114f2:	eba6 0807 	sub.w	r8, r6, r7
 80114f6:	608b      	str	r3, [r1, #8]
 80114f8:	f1b8 0f00 	cmp.w	r8, #0
 80114fc:	dde9      	ble.n	80114d2 <__sflush_r+0xae>
 80114fe:	6a21      	ldr	r1, [r4, #32]
 8011500:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011502:	4643      	mov	r3, r8
 8011504:	463a      	mov	r2, r7
 8011506:	4628      	mov	r0, r5
 8011508:	47b0      	blx	r6
 801150a:	2800      	cmp	r0, #0
 801150c:	dc08      	bgt.n	8011520 <__sflush_r+0xfc>
 801150e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011512:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011516:	81a3      	strh	r3, [r4, #12]
 8011518:	f04f 30ff 	mov.w	r0, #4294967295
 801151c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011520:	4407      	add	r7, r0
 8011522:	eba8 0800 	sub.w	r8, r8, r0
 8011526:	e7e7      	b.n	80114f8 <__sflush_r+0xd4>
 8011528:	20400001 	.word	0x20400001

0801152c <_fflush_r>:
 801152c:	b538      	push	{r3, r4, r5, lr}
 801152e:	690b      	ldr	r3, [r1, #16]
 8011530:	4605      	mov	r5, r0
 8011532:	460c      	mov	r4, r1
 8011534:	b913      	cbnz	r3, 801153c <_fflush_r+0x10>
 8011536:	2500      	movs	r5, #0
 8011538:	4628      	mov	r0, r5
 801153a:	bd38      	pop	{r3, r4, r5, pc}
 801153c:	b118      	cbz	r0, 8011546 <_fflush_r+0x1a>
 801153e:	6a03      	ldr	r3, [r0, #32]
 8011540:	b90b      	cbnz	r3, 8011546 <_fflush_r+0x1a>
 8011542:	f7fd fc5f 	bl	800ee04 <__sinit>
 8011546:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d0f3      	beq.n	8011536 <_fflush_r+0xa>
 801154e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011550:	07d0      	lsls	r0, r2, #31
 8011552:	d404      	bmi.n	801155e <_fflush_r+0x32>
 8011554:	0599      	lsls	r1, r3, #22
 8011556:	d402      	bmi.n	801155e <_fflush_r+0x32>
 8011558:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801155a:	f7fd fe12 	bl	800f182 <__retarget_lock_acquire_recursive>
 801155e:	4628      	mov	r0, r5
 8011560:	4621      	mov	r1, r4
 8011562:	f7ff ff5f 	bl	8011424 <__sflush_r>
 8011566:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011568:	07da      	lsls	r2, r3, #31
 801156a:	4605      	mov	r5, r0
 801156c:	d4e4      	bmi.n	8011538 <_fflush_r+0xc>
 801156e:	89a3      	ldrh	r3, [r4, #12]
 8011570:	059b      	lsls	r3, r3, #22
 8011572:	d4e1      	bmi.n	8011538 <_fflush_r+0xc>
 8011574:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011576:	f7fd fe05 	bl	800f184 <__retarget_lock_release_recursive>
 801157a:	e7dd      	b.n	8011538 <_fflush_r+0xc>

0801157c <memmove>:
 801157c:	4288      	cmp	r0, r1
 801157e:	b510      	push	{r4, lr}
 8011580:	eb01 0402 	add.w	r4, r1, r2
 8011584:	d902      	bls.n	801158c <memmove+0x10>
 8011586:	4284      	cmp	r4, r0
 8011588:	4623      	mov	r3, r4
 801158a:	d807      	bhi.n	801159c <memmove+0x20>
 801158c:	1e43      	subs	r3, r0, #1
 801158e:	42a1      	cmp	r1, r4
 8011590:	d008      	beq.n	80115a4 <memmove+0x28>
 8011592:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011596:	f803 2f01 	strb.w	r2, [r3, #1]!
 801159a:	e7f8      	b.n	801158e <memmove+0x12>
 801159c:	4402      	add	r2, r0
 801159e:	4601      	mov	r1, r0
 80115a0:	428a      	cmp	r2, r1
 80115a2:	d100      	bne.n	80115a6 <memmove+0x2a>
 80115a4:	bd10      	pop	{r4, pc}
 80115a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80115aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80115ae:	e7f7      	b.n	80115a0 <memmove+0x24>

080115b0 <_sbrk_r>:
 80115b0:	b538      	push	{r3, r4, r5, lr}
 80115b2:	4d06      	ldr	r5, [pc, #24]	@ (80115cc <_sbrk_r+0x1c>)
 80115b4:	2300      	movs	r3, #0
 80115b6:	4604      	mov	r4, r0
 80115b8:	4608      	mov	r0, r1
 80115ba:	602b      	str	r3, [r5, #0]
 80115bc:	f7f3 f89c 	bl	80046f8 <_sbrk>
 80115c0:	1c43      	adds	r3, r0, #1
 80115c2:	d102      	bne.n	80115ca <_sbrk_r+0x1a>
 80115c4:	682b      	ldr	r3, [r5, #0]
 80115c6:	b103      	cbz	r3, 80115ca <_sbrk_r+0x1a>
 80115c8:	6023      	str	r3, [r4, #0]
 80115ca:	bd38      	pop	{r3, r4, r5, pc}
 80115cc:	200052f0 	.word	0x200052f0

080115d0 <__assert_func>:
 80115d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80115d2:	4614      	mov	r4, r2
 80115d4:	461a      	mov	r2, r3
 80115d6:	4b09      	ldr	r3, [pc, #36]	@ (80115fc <__assert_func+0x2c>)
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	4605      	mov	r5, r0
 80115dc:	68d8      	ldr	r0, [r3, #12]
 80115de:	b14c      	cbz	r4, 80115f4 <__assert_func+0x24>
 80115e0:	4b07      	ldr	r3, [pc, #28]	@ (8011600 <__assert_func+0x30>)
 80115e2:	9100      	str	r1, [sp, #0]
 80115e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80115e8:	4906      	ldr	r1, [pc, #24]	@ (8011604 <__assert_func+0x34>)
 80115ea:	462b      	mov	r3, r5
 80115ec:	f000 f850 	bl	8011690 <fiprintf>
 80115f0:	f000 f860 	bl	80116b4 <abort>
 80115f4:	4b04      	ldr	r3, [pc, #16]	@ (8011608 <__assert_func+0x38>)
 80115f6:	461c      	mov	r4, r3
 80115f8:	e7f3      	b.n	80115e2 <__assert_func+0x12>
 80115fa:	bf00      	nop
 80115fc:	20000278 	.word	0x20000278
 8011600:	0801205e 	.word	0x0801205e
 8011604:	0801206b 	.word	0x0801206b
 8011608:	08012099 	.word	0x08012099

0801160c <_calloc_r>:
 801160c:	b570      	push	{r4, r5, r6, lr}
 801160e:	fba1 5402 	umull	r5, r4, r1, r2
 8011612:	b934      	cbnz	r4, 8011622 <_calloc_r+0x16>
 8011614:	4629      	mov	r1, r5
 8011616:	f7fe ffdd 	bl	80105d4 <_malloc_r>
 801161a:	4606      	mov	r6, r0
 801161c:	b928      	cbnz	r0, 801162a <_calloc_r+0x1e>
 801161e:	4630      	mov	r0, r6
 8011620:	bd70      	pop	{r4, r5, r6, pc}
 8011622:	220c      	movs	r2, #12
 8011624:	6002      	str	r2, [r0, #0]
 8011626:	2600      	movs	r6, #0
 8011628:	e7f9      	b.n	801161e <_calloc_r+0x12>
 801162a:	462a      	mov	r2, r5
 801162c:	4621      	mov	r1, r4
 801162e:	f7fd fcba 	bl	800efa6 <memset>
 8011632:	e7f4      	b.n	801161e <_calloc_r+0x12>

08011634 <_realloc_r>:
 8011634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011638:	4607      	mov	r7, r0
 801163a:	4614      	mov	r4, r2
 801163c:	460d      	mov	r5, r1
 801163e:	b921      	cbnz	r1, 801164a <_realloc_r+0x16>
 8011640:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011644:	4611      	mov	r1, r2
 8011646:	f7fe bfc5 	b.w	80105d4 <_malloc_r>
 801164a:	b92a      	cbnz	r2, 8011658 <_realloc_r+0x24>
 801164c:	f7fe fc14 	bl	800fe78 <_free_r>
 8011650:	4625      	mov	r5, r4
 8011652:	4628      	mov	r0, r5
 8011654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011658:	f000 f833 	bl	80116c2 <_malloc_usable_size_r>
 801165c:	4284      	cmp	r4, r0
 801165e:	4606      	mov	r6, r0
 8011660:	d802      	bhi.n	8011668 <_realloc_r+0x34>
 8011662:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011666:	d8f4      	bhi.n	8011652 <_realloc_r+0x1e>
 8011668:	4621      	mov	r1, r4
 801166a:	4638      	mov	r0, r7
 801166c:	f7fe ffb2 	bl	80105d4 <_malloc_r>
 8011670:	4680      	mov	r8, r0
 8011672:	b908      	cbnz	r0, 8011678 <_realloc_r+0x44>
 8011674:	4645      	mov	r5, r8
 8011676:	e7ec      	b.n	8011652 <_realloc_r+0x1e>
 8011678:	42b4      	cmp	r4, r6
 801167a:	4622      	mov	r2, r4
 801167c:	4629      	mov	r1, r5
 801167e:	bf28      	it	cs
 8011680:	4632      	movcs	r2, r6
 8011682:	f7fd fd80 	bl	800f186 <memcpy>
 8011686:	4629      	mov	r1, r5
 8011688:	4638      	mov	r0, r7
 801168a:	f7fe fbf5 	bl	800fe78 <_free_r>
 801168e:	e7f1      	b.n	8011674 <_realloc_r+0x40>

08011690 <fiprintf>:
 8011690:	b40e      	push	{r1, r2, r3}
 8011692:	b503      	push	{r0, r1, lr}
 8011694:	4601      	mov	r1, r0
 8011696:	ab03      	add	r3, sp, #12
 8011698:	4805      	ldr	r0, [pc, #20]	@ (80116b0 <fiprintf+0x20>)
 801169a:	f853 2b04 	ldr.w	r2, [r3], #4
 801169e:	6800      	ldr	r0, [r0, #0]
 80116a0:	9301      	str	r3, [sp, #4]
 80116a2:	f000 f83f 	bl	8011724 <_vfiprintf_r>
 80116a6:	b002      	add	sp, #8
 80116a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80116ac:	b003      	add	sp, #12
 80116ae:	4770      	bx	lr
 80116b0:	20000278 	.word	0x20000278

080116b4 <abort>:
 80116b4:	b508      	push	{r3, lr}
 80116b6:	2006      	movs	r0, #6
 80116b8:	f000 fa08 	bl	8011acc <raise>
 80116bc:	2001      	movs	r0, #1
 80116be:	f7f2 ffa3 	bl	8004608 <_exit>

080116c2 <_malloc_usable_size_r>:
 80116c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80116c6:	1f18      	subs	r0, r3, #4
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	bfbc      	itt	lt
 80116cc:	580b      	ldrlt	r3, [r1, r0]
 80116ce:	18c0      	addlt	r0, r0, r3
 80116d0:	4770      	bx	lr

080116d2 <__sfputc_r>:
 80116d2:	6893      	ldr	r3, [r2, #8]
 80116d4:	3b01      	subs	r3, #1
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	b410      	push	{r4}
 80116da:	6093      	str	r3, [r2, #8]
 80116dc:	da08      	bge.n	80116f0 <__sfputc_r+0x1e>
 80116de:	6994      	ldr	r4, [r2, #24]
 80116e0:	42a3      	cmp	r3, r4
 80116e2:	db01      	blt.n	80116e8 <__sfputc_r+0x16>
 80116e4:	290a      	cmp	r1, #10
 80116e6:	d103      	bne.n	80116f0 <__sfputc_r+0x1e>
 80116e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80116ec:	f000 b932 	b.w	8011954 <__swbuf_r>
 80116f0:	6813      	ldr	r3, [r2, #0]
 80116f2:	1c58      	adds	r0, r3, #1
 80116f4:	6010      	str	r0, [r2, #0]
 80116f6:	7019      	strb	r1, [r3, #0]
 80116f8:	4608      	mov	r0, r1
 80116fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80116fe:	4770      	bx	lr

08011700 <__sfputs_r>:
 8011700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011702:	4606      	mov	r6, r0
 8011704:	460f      	mov	r7, r1
 8011706:	4614      	mov	r4, r2
 8011708:	18d5      	adds	r5, r2, r3
 801170a:	42ac      	cmp	r4, r5
 801170c:	d101      	bne.n	8011712 <__sfputs_r+0x12>
 801170e:	2000      	movs	r0, #0
 8011710:	e007      	b.n	8011722 <__sfputs_r+0x22>
 8011712:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011716:	463a      	mov	r2, r7
 8011718:	4630      	mov	r0, r6
 801171a:	f7ff ffda 	bl	80116d2 <__sfputc_r>
 801171e:	1c43      	adds	r3, r0, #1
 8011720:	d1f3      	bne.n	801170a <__sfputs_r+0xa>
 8011722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011724 <_vfiprintf_r>:
 8011724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011728:	460d      	mov	r5, r1
 801172a:	b09d      	sub	sp, #116	@ 0x74
 801172c:	4614      	mov	r4, r2
 801172e:	4698      	mov	r8, r3
 8011730:	4606      	mov	r6, r0
 8011732:	b118      	cbz	r0, 801173c <_vfiprintf_r+0x18>
 8011734:	6a03      	ldr	r3, [r0, #32]
 8011736:	b90b      	cbnz	r3, 801173c <_vfiprintf_r+0x18>
 8011738:	f7fd fb64 	bl	800ee04 <__sinit>
 801173c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801173e:	07d9      	lsls	r1, r3, #31
 8011740:	d405      	bmi.n	801174e <_vfiprintf_r+0x2a>
 8011742:	89ab      	ldrh	r3, [r5, #12]
 8011744:	059a      	lsls	r2, r3, #22
 8011746:	d402      	bmi.n	801174e <_vfiprintf_r+0x2a>
 8011748:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801174a:	f7fd fd1a 	bl	800f182 <__retarget_lock_acquire_recursive>
 801174e:	89ab      	ldrh	r3, [r5, #12]
 8011750:	071b      	lsls	r3, r3, #28
 8011752:	d501      	bpl.n	8011758 <_vfiprintf_r+0x34>
 8011754:	692b      	ldr	r3, [r5, #16]
 8011756:	b99b      	cbnz	r3, 8011780 <_vfiprintf_r+0x5c>
 8011758:	4629      	mov	r1, r5
 801175a:	4630      	mov	r0, r6
 801175c:	f000 f938 	bl	80119d0 <__swsetup_r>
 8011760:	b170      	cbz	r0, 8011780 <_vfiprintf_r+0x5c>
 8011762:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011764:	07dc      	lsls	r4, r3, #31
 8011766:	d504      	bpl.n	8011772 <_vfiprintf_r+0x4e>
 8011768:	f04f 30ff 	mov.w	r0, #4294967295
 801176c:	b01d      	add	sp, #116	@ 0x74
 801176e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011772:	89ab      	ldrh	r3, [r5, #12]
 8011774:	0598      	lsls	r0, r3, #22
 8011776:	d4f7      	bmi.n	8011768 <_vfiprintf_r+0x44>
 8011778:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801177a:	f7fd fd03 	bl	800f184 <__retarget_lock_release_recursive>
 801177e:	e7f3      	b.n	8011768 <_vfiprintf_r+0x44>
 8011780:	2300      	movs	r3, #0
 8011782:	9309      	str	r3, [sp, #36]	@ 0x24
 8011784:	2320      	movs	r3, #32
 8011786:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801178a:	f8cd 800c 	str.w	r8, [sp, #12]
 801178e:	2330      	movs	r3, #48	@ 0x30
 8011790:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011940 <_vfiprintf_r+0x21c>
 8011794:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011798:	f04f 0901 	mov.w	r9, #1
 801179c:	4623      	mov	r3, r4
 801179e:	469a      	mov	sl, r3
 80117a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80117a4:	b10a      	cbz	r2, 80117aa <_vfiprintf_r+0x86>
 80117a6:	2a25      	cmp	r2, #37	@ 0x25
 80117a8:	d1f9      	bne.n	801179e <_vfiprintf_r+0x7a>
 80117aa:	ebba 0b04 	subs.w	fp, sl, r4
 80117ae:	d00b      	beq.n	80117c8 <_vfiprintf_r+0xa4>
 80117b0:	465b      	mov	r3, fp
 80117b2:	4622      	mov	r2, r4
 80117b4:	4629      	mov	r1, r5
 80117b6:	4630      	mov	r0, r6
 80117b8:	f7ff ffa2 	bl	8011700 <__sfputs_r>
 80117bc:	3001      	adds	r0, #1
 80117be:	f000 80a7 	beq.w	8011910 <_vfiprintf_r+0x1ec>
 80117c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80117c4:	445a      	add	r2, fp
 80117c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80117c8:	f89a 3000 	ldrb.w	r3, [sl]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	f000 809f 	beq.w	8011910 <_vfiprintf_r+0x1ec>
 80117d2:	2300      	movs	r3, #0
 80117d4:	f04f 32ff 	mov.w	r2, #4294967295
 80117d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80117dc:	f10a 0a01 	add.w	sl, sl, #1
 80117e0:	9304      	str	r3, [sp, #16]
 80117e2:	9307      	str	r3, [sp, #28]
 80117e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80117e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80117ea:	4654      	mov	r4, sl
 80117ec:	2205      	movs	r2, #5
 80117ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80117f2:	4853      	ldr	r0, [pc, #332]	@ (8011940 <_vfiprintf_r+0x21c>)
 80117f4:	f7ee fcf4 	bl	80001e0 <memchr>
 80117f8:	9a04      	ldr	r2, [sp, #16]
 80117fa:	b9d8      	cbnz	r0, 8011834 <_vfiprintf_r+0x110>
 80117fc:	06d1      	lsls	r1, r2, #27
 80117fe:	bf44      	itt	mi
 8011800:	2320      	movmi	r3, #32
 8011802:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011806:	0713      	lsls	r3, r2, #28
 8011808:	bf44      	itt	mi
 801180a:	232b      	movmi	r3, #43	@ 0x2b
 801180c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011810:	f89a 3000 	ldrb.w	r3, [sl]
 8011814:	2b2a      	cmp	r3, #42	@ 0x2a
 8011816:	d015      	beq.n	8011844 <_vfiprintf_r+0x120>
 8011818:	9a07      	ldr	r2, [sp, #28]
 801181a:	4654      	mov	r4, sl
 801181c:	2000      	movs	r0, #0
 801181e:	f04f 0c0a 	mov.w	ip, #10
 8011822:	4621      	mov	r1, r4
 8011824:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011828:	3b30      	subs	r3, #48	@ 0x30
 801182a:	2b09      	cmp	r3, #9
 801182c:	d94b      	bls.n	80118c6 <_vfiprintf_r+0x1a2>
 801182e:	b1b0      	cbz	r0, 801185e <_vfiprintf_r+0x13a>
 8011830:	9207      	str	r2, [sp, #28]
 8011832:	e014      	b.n	801185e <_vfiprintf_r+0x13a>
 8011834:	eba0 0308 	sub.w	r3, r0, r8
 8011838:	fa09 f303 	lsl.w	r3, r9, r3
 801183c:	4313      	orrs	r3, r2
 801183e:	9304      	str	r3, [sp, #16]
 8011840:	46a2      	mov	sl, r4
 8011842:	e7d2      	b.n	80117ea <_vfiprintf_r+0xc6>
 8011844:	9b03      	ldr	r3, [sp, #12]
 8011846:	1d19      	adds	r1, r3, #4
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	9103      	str	r1, [sp, #12]
 801184c:	2b00      	cmp	r3, #0
 801184e:	bfbb      	ittet	lt
 8011850:	425b      	neglt	r3, r3
 8011852:	f042 0202 	orrlt.w	r2, r2, #2
 8011856:	9307      	strge	r3, [sp, #28]
 8011858:	9307      	strlt	r3, [sp, #28]
 801185a:	bfb8      	it	lt
 801185c:	9204      	strlt	r2, [sp, #16]
 801185e:	7823      	ldrb	r3, [r4, #0]
 8011860:	2b2e      	cmp	r3, #46	@ 0x2e
 8011862:	d10a      	bne.n	801187a <_vfiprintf_r+0x156>
 8011864:	7863      	ldrb	r3, [r4, #1]
 8011866:	2b2a      	cmp	r3, #42	@ 0x2a
 8011868:	d132      	bne.n	80118d0 <_vfiprintf_r+0x1ac>
 801186a:	9b03      	ldr	r3, [sp, #12]
 801186c:	1d1a      	adds	r2, r3, #4
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	9203      	str	r2, [sp, #12]
 8011872:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011876:	3402      	adds	r4, #2
 8011878:	9305      	str	r3, [sp, #20]
 801187a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011950 <_vfiprintf_r+0x22c>
 801187e:	7821      	ldrb	r1, [r4, #0]
 8011880:	2203      	movs	r2, #3
 8011882:	4650      	mov	r0, sl
 8011884:	f7ee fcac 	bl	80001e0 <memchr>
 8011888:	b138      	cbz	r0, 801189a <_vfiprintf_r+0x176>
 801188a:	9b04      	ldr	r3, [sp, #16]
 801188c:	eba0 000a 	sub.w	r0, r0, sl
 8011890:	2240      	movs	r2, #64	@ 0x40
 8011892:	4082      	lsls	r2, r0
 8011894:	4313      	orrs	r3, r2
 8011896:	3401      	adds	r4, #1
 8011898:	9304      	str	r3, [sp, #16]
 801189a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801189e:	4829      	ldr	r0, [pc, #164]	@ (8011944 <_vfiprintf_r+0x220>)
 80118a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80118a4:	2206      	movs	r2, #6
 80118a6:	f7ee fc9b 	bl	80001e0 <memchr>
 80118aa:	2800      	cmp	r0, #0
 80118ac:	d03f      	beq.n	801192e <_vfiprintf_r+0x20a>
 80118ae:	4b26      	ldr	r3, [pc, #152]	@ (8011948 <_vfiprintf_r+0x224>)
 80118b0:	bb1b      	cbnz	r3, 80118fa <_vfiprintf_r+0x1d6>
 80118b2:	9b03      	ldr	r3, [sp, #12]
 80118b4:	3307      	adds	r3, #7
 80118b6:	f023 0307 	bic.w	r3, r3, #7
 80118ba:	3308      	adds	r3, #8
 80118bc:	9303      	str	r3, [sp, #12]
 80118be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80118c0:	443b      	add	r3, r7
 80118c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80118c4:	e76a      	b.n	801179c <_vfiprintf_r+0x78>
 80118c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80118ca:	460c      	mov	r4, r1
 80118cc:	2001      	movs	r0, #1
 80118ce:	e7a8      	b.n	8011822 <_vfiprintf_r+0xfe>
 80118d0:	2300      	movs	r3, #0
 80118d2:	3401      	adds	r4, #1
 80118d4:	9305      	str	r3, [sp, #20]
 80118d6:	4619      	mov	r1, r3
 80118d8:	f04f 0c0a 	mov.w	ip, #10
 80118dc:	4620      	mov	r0, r4
 80118de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80118e2:	3a30      	subs	r2, #48	@ 0x30
 80118e4:	2a09      	cmp	r2, #9
 80118e6:	d903      	bls.n	80118f0 <_vfiprintf_r+0x1cc>
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d0c6      	beq.n	801187a <_vfiprintf_r+0x156>
 80118ec:	9105      	str	r1, [sp, #20]
 80118ee:	e7c4      	b.n	801187a <_vfiprintf_r+0x156>
 80118f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80118f4:	4604      	mov	r4, r0
 80118f6:	2301      	movs	r3, #1
 80118f8:	e7f0      	b.n	80118dc <_vfiprintf_r+0x1b8>
 80118fa:	ab03      	add	r3, sp, #12
 80118fc:	9300      	str	r3, [sp, #0]
 80118fe:	462a      	mov	r2, r5
 8011900:	4b12      	ldr	r3, [pc, #72]	@ (801194c <_vfiprintf_r+0x228>)
 8011902:	a904      	add	r1, sp, #16
 8011904:	4630      	mov	r0, r6
 8011906:	f7fc fc2d 	bl	800e164 <_printf_float>
 801190a:	4607      	mov	r7, r0
 801190c:	1c78      	adds	r0, r7, #1
 801190e:	d1d6      	bne.n	80118be <_vfiprintf_r+0x19a>
 8011910:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011912:	07d9      	lsls	r1, r3, #31
 8011914:	d405      	bmi.n	8011922 <_vfiprintf_r+0x1fe>
 8011916:	89ab      	ldrh	r3, [r5, #12]
 8011918:	059a      	lsls	r2, r3, #22
 801191a:	d402      	bmi.n	8011922 <_vfiprintf_r+0x1fe>
 801191c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801191e:	f7fd fc31 	bl	800f184 <__retarget_lock_release_recursive>
 8011922:	89ab      	ldrh	r3, [r5, #12]
 8011924:	065b      	lsls	r3, r3, #25
 8011926:	f53f af1f 	bmi.w	8011768 <_vfiprintf_r+0x44>
 801192a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801192c:	e71e      	b.n	801176c <_vfiprintf_r+0x48>
 801192e:	ab03      	add	r3, sp, #12
 8011930:	9300      	str	r3, [sp, #0]
 8011932:	462a      	mov	r2, r5
 8011934:	4b05      	ldr	r3, [pc, #20]	@ (801194c <_vfiprintf_r+0x228>)
 8011936:	a904      	add	r1, sp, #16
 8011938:	4630      	mov	r0, r6
 801193a:	f7fc feab 	bl	800e694 <_printf_i>
 801193e:	e7e4      	b.n	801190a <_vfiprintf_r+0x1e6>
 8011940:	0801204d 	.word	0x0801204d
 8011944:	08012057 	.word	0x08012057
 8011948:	0800e165 	.word	0x0800e165
 801194c:	08011701 	.word	0x08011701
 8011950:	08012053 	.word	0x08012053

08011954 <__swbuf_r>:
 8011954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011956:	460e      	mov	r6, r1
 8011958:	4614      	mov	r4, r2
 801195a:	4605      	mov	r5, r0
 801195c:	b118      	cbz	r0, 8011966 <__swbuf_r+0x12>
 801195e:	6a03      	ldr	r3, [r0, #32]
 8011960:	b90b      	cbnz	r3, 8011966 <__swbuf_r+0x12>
 8011962:	f7fd fa4f 	bl	800ee04 <__sinit>
 8011966:	69a3      	ldr	r3, [r4, #24]
 8011968:	60a3      	str	r3, [r4, #8]
 801196a:	89a3      	ldrh	r3, [r4, #12]
 801196c:	071a      	lsls	r2, r3, #28
 801196e:	d501      	bpl.n	8011974 <__swbuf_r+0x20>
 8011970:	6923      	ldr	r3, [r4, #16]
 8011972:	b943      	cbnz	r3, 8011986 <__swbuf_r+0x32>
 8011974:	4621      	mov	r1, r4
 8011976:	4628      	mov	r0, r5
 8011978:	f000 f82a 	bl	80119d0 <__swsetup_r>
 801197c:	b118      	cbz	r0, 8011986 <__swbuf_r+0x32>
 801197e:	f04f 37ff 	mov.w	r7, #4294967295
 8011982:	4638      	mov	r0, r7
 8011984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011986:	6823      	ldr	r3, [r4, #0]
 8011988:	6922      	ldr	r2, [r4, #16]
 801198a:	1a98      	subs	r0, r3, r2
 801198c:	6963      	ldr	r3, [r4, #20]
 801198e:	b2f6      	uxtb	r6, r6
 8011990:	4283      	cmp	r3, r0
 8011992:	4637      	mov	r7, r6
 8011994:	dc05      	bgt.n	80119a2 <__swbuf_r+0x4e>
 8011996:	4621      	mov	r1, r4
 8011998:	4628      	mov	r0, r5
 801199a:	f7ff fdc7 	bl	801152c <_fflush_r>
 801199e:	2800      	cmp	r0, #0
 80119a0:	d1ed      	bne.n	801197e <__swbuf_r+0x2a>
 80119a2:	68a3      	ldr	r3, [r4, #8]
 80119a4:	3b01      	subs	r3, #1
 80119a6:	60a3      	str	r3, [r4, #8]
 80119a8:	6823      	ldr	r3, [r4, #0]
 80119aa:	1c5a      	adds	r2, r3, #1
 80119ac:	6022      	str	r2, [r4, #0]
 80119ae:	701e      	strb	r6, [r3, #0]
 80119b0:	6962      	ldr	r2, [r4, #20]
 80119b2:	1c43      	adds	r3, r0, #1
 80119b4:	429a      	cmp	r2, r3
 80119b6:	d004      	beq.n	80119c2 <__swbuf_r+0x6e>
 80119b8:	89a3      	ldrh	r3, [r4, #12]
 80119ba:	07db      	lsls	r3, r3, #31
 80119bc:	d5e1      	bpl.n	8011982 <__swbuf_r+0x2e>
 80119be:	2e0a      	cmp	r6, #10
 80119c0:	d1df      	bne.n	8011982 <__swbuf_r+0x2e>
 80119c2:	4621      	mov	r1, r4
 80119c4:	4628      	mov	r0, r5
 80119c6:	f7ff fdb1 	bl	801152c <_fflush_r>
 80119ca:	2800      	cmp	r0, #0
 80119cc:	d0d9      	beq.n	8011982 <__swbuf_r+0x2e>
 80119ce:	e7d6      	b.n	801197e <__swbuf_r+0x2a>

080119d0 <__swsetup_r>:
 80119d0:	b538      	push	{r3, r4, r5, lr}
 80119d2:	4b29      	ldr	r3, [pc, #164]	@ (8011a78 <__swsetup_r+0xa8>)
 80119d4:	4605      	mov	r5, r0
 80119d6:	6818      	ldr	r0, [r3, #0]
 80119d8:	460c      	mov	r4, r1
 80119da:	b118      	cbz	r0, 80119e4 <__swsetup_r+0x14>
 80119dc:	6a03      	ldr	r3, [r0, #32]
 80119de:	b90b      	cbnz	r3, 80119e4 <__swsetup_r+0x14>
 80119e0:	f7fd fa10 	bl	800ee04 <__sinit>
 80119e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80119e8:	0719      	lsls	r1, r3, #28
 80119ea:	d422      	bmi.n	8011a32 <__swsetup_r+0x62>
 80119ec:	06da      	lsls	r2, r3, #27
 80119ee:	d407      	bmi.n	8011a00 <__swsetup_r+0x30>
 80119f0:	2209      	movs	r2, #9
 80119f2:	602a      	str	r2, [r5, #0]
 80119f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80119f8:	81a3      	strh	r3, [r4, #12]
 80119fa:	f04f 30ff 	mov.w	r0, #4294967295
 80119fe:	e033      	b.n	8011a68 <__swsetup_r+0x98>
 8011a00:	0758      	lsls	r0, r3, #29
 8011a02:	d512      	bpl.n	8011a2a <__swsetup_r+0x5a>
 8011a04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011a06:	b141      	cbz	r1, 8011a1a <__swsetup_r+0x4a>
 8011a08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011a0c:	4299      	cmp	r1, r3
 8011a0e:	d002      	beq.n	8011a16 <__swsetup_r+0x46>
 8011a10:	4628      	mov	r0, r5
 8011a12:	f7fe fa31 	bl	800fe78 <_free_r>
 8011a16:	2300      	movs	r3, #0
 8011a18:	6363      	str	r3, [r4, #52]	@ 0x34
 8011a1a:	89a3      	ldrh	r3, [r4, #12]
 8011a1c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011a20:	81a3      	strh	r3, [r4, #12]
 8011a22:	2300      	movs	r3, #0
 8011a24:	6063      	str	r3, [r4, #4]
 8011a26:	6923      	ldr	r3, [r4, #16]
 8011a28:	6023      	str	r3, [r4, #0]
 8011a2a:	89a3      	ldrh	r3, [r4, #12]
 8011a2c:	f043 0308 	orr.w	r3, r3, #8
 8011a30:	81a3      	strh	r3, [r4, #12]
 8011a32:	6923      	ldr	r3, [r4, #16]
 8011a34:	b94b      	cbnz	r3, 8011a4a <__swsetup_r+0x7a>
 8011a36:	89a3      	ldrh	r3, [r4, #12]
 8011a38:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011a3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011a40:	d003      	beq.n	8011a4a <__swsetup_r+0x7a>
 8011a42:	4621      	mov	r1, r4
 8011a44:	4628      	mov	r0, r5
 8011a46:	f000 f883 	bl	8011b50 <__smakebuf_r>
 8011a4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a4e:	f013 0201 	ands.w	r2, r3, #1
 8011a52:	d00a      	beq.n	8011a6a <__swsetup_r+0x9a>
 8011a54:	2200      	movs	r2, #0
 8011a56:	60a2      	str	r2, [r4, #8]
 8011a58:	6962      	ldr	r2, [r4, #20]
 8011a5a:	4252      	negs	r2, r2
 8011a5c:	61a2      	str	r2, [r4, #24]
 8011a5e:	6922      	ldr	r2, [r4, #16]
 8011a60:	b942      	cbnz	r2, 8011a74 <__swsetup_r+0xa4>
 8011a62:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011a66:	d1c5      	bne.n	80119f4 <__swsetup_r+0x24>
 8011a68:	bd38      	pop	{r3, r4, r5, pc}
 8011a6a:	0799      	lsls	r1, r3, #30
 8011a6c:	bf58      	it	pl
 8011a6e:	6962      	ldrpl	r2, [r4, #20]
 8011a70:	60a2      	str	r2, [r4, #8]
 8011a72:	e7f4      	b.n	8011a5e <__swsetup_r+0x8e>
 8011a74:	2000      	movs	r0, #0
 8011a76:	e7f7      	b.n	8011a68 <__swsetup_r+0x98>
 8011a78:	20000278 	.word	0x20000278

08011a7c <_raise_r>:
 8011a7c:	291f      	cmp	r1, #31
 8011a7e:	b538      	push	{r3, r4, r5, lr}
 8011a80:	4605      	mov	r5, r0
 8011a82:	460c      	mov	r4, r1
 8011a84:	d904      	bls.n	8011a90 <_raise_r+0x14>
 8011a86:	2316      	movs	r3, #22
 8011a88:	6003      	str	r3, [r0, #0]
 8011a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8011a8e:	bd38      	pop	{r3, r4, r5, pc}
 8011a90:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011a92:	b112      	cbz	r2, 8011a9a <_raise_r+0x1e>
 8011a94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011a98:	b94b      	cbnz	r3, 8011aae <_raise_r+0x32>
 8011a9a:	4628      	mov	r0, r5
 8011a9c:	f000 f830 	bl	8011b00 <_getpid_r>
 8011aa0:	4622      	mov	r2, r4
 8011aa2:	4601      	mov	r1, r0
 8011aa4:	4628      	mov	r0, r5
 8011aa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011aaa:	f000 b817 	b.w	8011adc <_kill_r>
 8011aae:	2b01      	cmp	r3, #1
 8011ab0:	d00a      	beq.n	8011ac8 <_raise_r+0x4c>
 8011ab2:	1c59      	adds	r1, r3, #1
 8011ab4:	d103      	bne.n	8011abe <_raise_r+0x42>
 8011ab6:	2316      	movs	r3, #22
 8011ab8:	6003      	str	r3, [r0, #0]
 8011aba:	2001      	movs	r0, #1
 8011abc:	e7e7      	b.n	8011a8e <_raise_r+0x12>
 8011abe:	2100      	movs	r1, #0
 8011ac0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011ac4:	4620      	mov	r0, r4
 8011ac6:	4798      	blx	r3
 8011ac8:	2000      	movs	r0, #0
 8011aca:	e7e0      	b.n	8011a8e <_raise_r+0x12>

08011acc <raise>:
 8011acc:	4b02      	ldr	r3, [pc, #8]	@ (8011ad8 <raise+0xc>)
 8011ace:	4601      	mov	r1, r0
 8011ad0:	6818      	ldr	r0, [r3, #0]
 8011ad2:	f7ff bfd3 	b.w	8011a7c <_raise_r>
 8011ad6:	bf00      	nop
 8011ad8:	20000278 	.word	0x20000278

08011adc <_kill_r>:
 8011adc:	b538      	push	{r3, r4, r5, lr}
 8011ade:	4d07      	ldr	r5, [pc, #28]	@ (8011afc <_kill_r+0x20>)
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	4604      	mov	r4, r0
 8011ae4:	4608      	mov	r0, r1
 8011ae6:	4611      	mov	r1, r2
 8011ae8:	602b      	str	r3, [r5, #0]
 8011aea:	f7f2 fd7d 	bl	80045e8 <_kill>
 8011aee:	1c43      	adds	r3, r0, #1
 8011af0:	d102      	bne.n	8011af8 <_kill_r+0x1c>
 8011af2:	682b      	ldr	r3, [r5, #0]
 8011af4:	b103      	cbz	r3, 8011af8 <_kill_r+0x1c>
 8011af6:	6023      	str	r3, [r4, #0]
 8011af8:	bd38      	pop	{r3, r4, r5, pc}
 8011afa:	bf00      	nop
 8011afc:	200052f0 	.word	0x200052f0

08011b00 <_getpid_r>:
 8011b00:	f7f2 bd6a 	b.w	80045d8 <_getpid>

08011b04 <__swhatbuf_r>:
 8011b04:	b570      	push	{r4, r5, r6, lr}
 8011b06:	460c      	mov	r4, r1
 8011b08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b0c:	2900      	cmp	r1, #0
 8011b0e:	b096      	sub	sp, #88	@ 0x58
 8011b10:	4615      	mov	r5, r2
 8011b12:	461e      	mov	r6, r3
 8011b14:	da0d      	bge.n	8011b32 <__swhatbuf_r+0x2e>
 8011b16:	89a3      	ldrh	r3, [r4, #12]
 8011b18:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011b1c:	f04f 0100 	mov.w	r1, #0
 8011b20:	bf14      	ite	ne
 8011b22:	2340      	movne	r3, #64	@ 0x40
 8011b24:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011b28:	2000      	movs	r0, #0
 8011b2a:	6031      	str	r1, [r6, #0]
 8011b2c:	602b      	str	r3, [r5, #0]
 8011b2e:	b016      	add	sp, #88	@ 0x58
 8011b30:	bd70      	pop	{r4, r5, r6, pc}
 8011b32:	466a      	mov	r2, sp
 8011b34:	f000 f848 	bl	8011bc8 <_fstat_r>
 8011b38:	2800      	cmp	r0, #0
 8011b3a:	dbec      	blt.n	8011b16 <__swhatbuf_r+0x12>
 8011b3c:	9901      	ldr	r1, [sp, #4]
 8011b3e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011b42:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011b46:	4259      	negs	r1, r3
 8011b48:	4159      	adcs	r1, r3
 8011b4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011b4e:	e7eb      	b.n	8011b28 <__swhatbuf_r+0x24>

08011b50 <__smakebuf_r>:
 8011b50:	898b      	ldrh	r3, [r1, #12]
 8011b52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011b54:	079d      	lsls	r5, r3, #30
 8011b56:	4606      	mov	r6, r0
 8011b58:	460c      	mov	r4, r1
 8011b5a:	d507      	bpl.n	8011b6c <__smakebuf_r+0x1c>
 8011b5c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011b60:	6023      	str	r3, [r4, #0]
 8011b62:	6123      	str	r3, [r4, #16]
 8011b64:	2301      	movs	r3, #1
 8011b66:	6163      	str	r3, [r4, #20]
 8011b68:	b003      	add	sp, #12
 8011b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b6c:	ab01      	add	r3, sp, #4
 8011b6e:	466a      	mov	r2, sp
 8011b70:	f7ff ffc8 	bl	8011b04 <__swhatbuf_r>
 8011b74:	9f00      	ldr	r7, [sp, #0]
 8011b76:	4605      	mov	r5, r0
 8011b78:	4639      	mov	r1, r7
 8011b7a:	4630      	mov	r0, r6
 8011b7c:	f7fe fd2a 	bl	80105d4 <_malloc_r>
 8011b80:	b948      	cbnz	r0, 8011b96 <__smakebuf_r+0x46>
 8011b82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b86:	059a      	lsls	r2, r3, #22
 8011b88:	d4ee      	bmi.n	8011b68 <__smakebuf_r+0x18>
 8011b8a:	f023 0303 	bic.w	r3, r3, #3
 8011b8e:	f043 0302 	orr.w	r3, r3, #2
 8011b92:	81a3      	strh	r3, [r4, #12]
 8011b94:	e7e2      	b.n	8011b5c <__smakebuf_r+0xc>
 8011b96:	89a3      	ldrh	r3, [r4, #12]
 8011b98:	6020      	str	r0, [r4, #0]
 8011b9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011b9e:	81a3      	strh	r3, [r4, #12]
 8011ba0:	9b01      	ldr	r3, [sp, #4]
 8011ba2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011ba6:	b15b      	cbz	r3, 8011bc0 <__smakebuf_r+0x70>
 8011ba8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011bac:	4630      	mov	r0, r6
 8011bae:	f000 f81d 	bl	8011bec <_isatty_r>
 8011bb2:	b128      	cbz	r0, 8011bc0 <__smakebuf_r+0x70>
 8011bb4:	89a3      	ldrh	r3, [r4, #12]
 8011bb6:	f023 0303 	bic.w	r3, r3, #3
 8011bba:	f043 0301 	orr.w	r3, r3, #1
 8011bbe:	81a3      	strh	r3, [r4, #12]
 8011bc0:	89a3      	ldrh	r3, [r4, #12]
 8011bc2:	431d      	orrs	r5, r3
 8011bc4:	81a5      	strh	r5, [r4, #12]
 8011bc6:	e7cf      	b.n	8011b68 <__smakebuf_r+0x18>

08011bc8 <_fstat_r>:
 8011bc8:	b538      	push	{r3, r4, r5, lr}
 8011bca:	4d07      	ldr	r5, [pc, #28]	@ (8011be8 <_fstat_r+0x20>)
 8011bcc:	2300      	movs	r3, #0
 8011bce:	4604      	mov	r4, r0
 8011bd0:	4608      	mov	r0, r1
 8011bd2:	4611      	mov	r1, r2
 8011bd4:	602b      	str	r3, [r5, #0]
 8011bd6:	f7f2 fd67 	bl	80046a8 <_fstat>
 8011bda:	1c43      	adds	r3, r0, #1
 8011bdc:	d102      	bne.n	8011be4 <_fstat_r+0x1c>
 8011bde:	682b      	ldr	r3, [r5, #0]
 8011be0:	b103      	cbz	r3, 8011be4 <_fstat_r+0x1c>
 8011be2:	6023      	str	r3, [r4, #0]
 8011be4:	bd38      	pop	{r3, r4, r5, pc}
 8011be6:	bf00      	nop
 8011be8:	200052f0 	.word	0x200052f0

08011bec <_isatty_r>:
 8011bec:	b538      	push	{r3, r4, r5, lr}
 8011bee:	4d06      	ldr	r5, [pc, #24]	@ (8011c08 <_isatty_r+0x1c>)
 8011bf0:	2300      	movs	r3, #0
 8011bf2:	4604      	mov	r4, r0
 8011bf4:	4608      	mov	r0, r1
 8011bf6:	602b      	str	r3, [r5, #0]
 8011bf8:	f7f2 fd66 	bl	80046c8 <_isatty>
 8011bfc:	1c43      	adds	r3, r0, #1
 8011bfe:	d102      	bne.n	8011c06 <_isatty_r+0x1a>
 8011c00:	682b      	ldr	r3, [r5, #0]
 8011c02:	b103      	cbz	r3, 8011c06 <_isatty_r+0x1a>
 8011c04:	6023      	str	r3, [r4, #0]
 8011c06:	bd38      	pop	{r3, r4, r5, pc}
 8011c08:	200052f0 	.word	0x200052f0

08011c0c <_init>:
 8011c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c0e:	bf00      	nop
 8011c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c12:	bc08      	pop	{r3}
 8011c14:	469e      	mov	lr, r3
 8011c16:	4770      	bx	lr

08011c18 <_fini>:
 8011c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c1a:	bf00      	nop
 8011c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c1e:	bc08      	pop	{r3}
 8011c20:	469e      	mov	lr, r3
 8011c22:	4770      	bx	lr
